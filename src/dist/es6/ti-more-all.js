// Pack At: 2020-07-03 20:26:00
(function(){
//============================================================
// JOIN: hmaker/edit-com/form/edit-com-form.html
//============================================================
Ti.Preload("ti/com/hmaker/edit-com/form/edit-com-form.html", `<ti-form 
  class="hmaker-edit-com-form"
  v-bind="FormConf"/>`);
//============================================================
// JOIN: hmaker/edit-com/form/edit-com-form.mjs
//============================================================
(function(){
const _M = {
  //////////////////////////////////////////
  props : {
    "value" : {
      type : Object,
      default : undefined
    },
    "keepTabIndexBy" : {
      type : String,
      default : "hMakerEditComForm"
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    FormConf() {
      return {
        //..................................
        mode: "tab",
        keepTabIndexBy: this.keepTabIndexBy,
        //..................................
        spacing: "tiny",
        //..................................
        data : this.value,
        //..................................
        fields : [
          //................................
          // Aspect
          {
            type : "Group",
            title : "i18n:hmk-aspect",
            fields : [{
                name: "title",
                title: "i18n:hmk-title",
                type : "String",
                comType : "ti-input"
              }, {
                name: "icon",
                title: "i18n:hmk-icon",
                type : "String",
                comType : "ti-input-icon"
              }, {
                name: "mode",
                title: "i18n:hmk-mode",
                type : "String",
                defaultAs: "all",
                comType : "ti-switcher",
                comConf : {
                  options: [
                    {value:"all", text:"i18n:hmk-mode-all"},
                    {value:"tab", text:"i18n:hmk-mode-tab"}]
                }
              }, {
                name: "tabAt",
                title: "i18n:hmk-tabAt",
                type : "String",
                defaultAs: "top-center",
                width: 240,
                hidden: {
                  "mode" : {
                    name: "isEqual",
                    args: "tab",
                    not: true
                  }
                },
                comType : "ti-droplist",
                comConf : {
                  placeholder: "i18n:hmk-tabAt-top-center",
                  autoI18n:true,
                  options: [
                    {value:"top-left",   text:"i18n:hmk-tabAt-top-left"},
                    {value:"top-center", text:"i18n:hmk-tabAt-top-center"},
                    {value:"top-right",  text:"i18n:hmk-tabAt-top-right"},
                    {value:"bottom-left",   text:"i18n:hmk-tabAt-bottom-left"},
                    {value:"bottom-center", text:"i18n:hmk-tabAt-bottom-center"},
                    {value:"bottom-right",  text:"i18n:hmk-tabAt-bottom-right"}]
                }
              }, {
                name: "currentTab",
                title: "i18n:hmk-currentTab",
                type : "Integer",
                defaultAs: 0,
                width : 120,
                hidden: {
                  "mode" : {
                    name: "isEqual",
                    args: "tab",
                    not: true
                  }
                },
                comType : "ti-input-num"
              }, {
                name: "spacing",
                title: "i18n:hmk-spacing",
                type : "String",
                defaultAs: "comfy",
                comType : "ti-switcher",
                comConf : {
                  options: [
                    {value:"comfy", text:"i18n:hmk-spacing-comfy"},
                    {value:"tiny",  text:"i18n:hmk-spacing-tiny"}]
                }
              }, {
                name: "adjustDelay",
                title: "i18n:hmk-adjustDelay",
                type : "Integer",
                defaultAs: 0,
                width : 120,
                comType : "ti-input-num"
              }, {
                name: "blankAs",
                title: "i18n:hmk-blankAs",
                type : "Object",
                comType : "ti-input"
              }]
          },
          //................................
          // Fields
          {
            type : "Group",
            title : "i18n:hmk-fields",
            fields : [{
                name: "fields",
                type: "Array",
                height: "100%",
                comType: "hmaker-edit-form-fieldset",
                comConf: {
                  className: "ti-fill-parent",
                  keepTabIndexBy : this.keepTabIndexBy
                }
              }]
          },
          //................................
          // Data
          {
            type : "Group",
            title : "i18n:hmk-data",
            fields : [{
              title: "i18n:hmk-form-data",
              name: "data",
              comType: "ti-input"
            }, {
              name: "fieldStatus",
              title: "i18n:hmk-fieldStatus",
              comType: "ti-input"
            }, {
              name: "onlyFields",
              title: "i18n:hmk-form-onlyFields",
              type: "Boolean",
              defaultAs: true,
              comType: "ti-toggle"
            }]
          },
          //................................
          // Measure
          {
            title: "i18n:hmk-measure",
            fields: [{
                title: "i18n:hmk-form-width",
                name: "width",
                comType: "ti-input"
              }, {
                title: "i18n:hmk-form-height",
                name: "height",
                comType: "ti-input"
              }]
          }]
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    
    //--------------------------------------
  },
  //////////////////////////////////////////
  created: async function() {
    Wn.Dict.hMakerComponents()
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/hmaker/edit-com/form/edit-com-form.mjs", _M);
})();
//============================================================
// JOIN: hmaker/edit-com/form/field/edit-form-field.html
//============================================================
Ti.Preload("ti/com/hmaker/edit-com/form/field/edit-form-field.html", `<div class="hmaker-edit-form-field ti-scroll-v">
  <!--
    Empty
  -->
  <ti-loading 
    v-if="isEmpty"
      icon="fas-hand-point-left"
      text="i18n:hmaker-edit-form-field-nil"/>
  <!--
    Editing
  -->
  <ti-form
    v-else
      v-bind="TheForm"
      :data="value"/>
</div>`);
//============================================================
// JOIN: hmaker/edit-com/form/field/edit-form-field.mjs
//============================================================
(function(){
const _M = {
  //////////////////////////////////////////
  props : {
    "value" : {
      type : Object,
      default : undefined
    },
    "keepTabIndexBy" : {
      type : String,
      default : undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    isEmpty() {
      return Ti.Util.isNil(this.value)
    },
    //--------------------------------------
    TheFormGeneralFields() {
      const gen_options = types => _.map(types, v => ({
        icon : Ti.I18n.get("hm-type-icons")[v],
        value: v,
        text : Ti.I18n.get(`hm-type-${v}`)
      }))
      return [
        //.................................
        // type
        {
          hidden : this.isGroup,
          name: "type",
          title: "hmk-field-type",
          defaultAs: "String",
          comType: "ti-droplist",
          comConf: {
            placeholder: "i18n:hm-type-String",
            options: gen_options([
              "Object", "Number", "Integer", 
              "Boolean", "String", "Array" ]),
            dropDisplay: ["<icon>", "text", "value"]
          }
        },
        //.................................
        // title
        {
          name: "title",
          title: "hmk-field-title",
          comType: "ti-input"
        },
        //.................................
        // icon
        {
          name: "icon",
          title: "hmk-field-icon",
          comType: "ti-input-icon"
        },
        //.................................
        // name
        {
          hidden : this.isGroup,
          name: "name",
          title: "hmk-field-name",
          comType: "ti-input"
        },
        //.................................
        // tip
        {
          hidden : this.isGroup,
          name: "tip",
          title: "hmk-field-tip",
          comType: "ti-input"
        },
        //.................................
        // width
        {
          hidden : this.isGroup,
          name: "width",
          title: "hmk-field-width",
          width: 120,
          comType: "ti-input"
        },
        //.................................
        // height
        {
          hidden : this.isGroup,
          name: "height",
          title: "hmk-field-height",
          width: 120,
          comType: "ti-input"
        },
        //.................................
        // defaultAs
        {
          hidden : this.isGroup,
          name: "defaultAs",
          title: "hmk-field-defaultAs",
          comType: "ti-input",
          comConf: {
            autoJsValue: true
          }
        },
        //.................................
        // com
        {
          hidden : this.isGroup,
          name: ["comType","comConf"],
          title: "hmk-field-com",
          type: "Object",
          width: "auto",
          comType: "wn-combo-edit-com"
        }
        //.................................
      ]
    },
    //--------------------------------------
    TheFormAdvanceFields() {
      return [
        //.................................
        // disabled
        {
          name: "disabled",
          title: "hmk-field-disabled",
          comType: "ti-input",
          comConf: {
            autoJsValue: true
          }
        },
        //.................................
        // hidden
        {
          name: "hidden",
          title: "hmk-field-hidden",
          comType: "ti-input",
          comConf: {
            autoJsValue: true
          }
        },
        //.................................
        // checkEquals
        {
          name: "checkEquals",
          title: "hmk-field-checkEquals",
          comType: "ti-toggle"
        },
        //.................................
        // transformer
        {
          name: "transformer",
          title: "hmk-field-transformer",
          comType: "ti-input-text",
          comConf: {
            autoJsValue: true
          }
        },
        //.................................
        // serializer
        {
          name: "serializer",
          title: "hmk-field-serializer",
          comType: "ti-input-text",
          comConf: {
            autoJsValue: true
          }
        }
        //.................................
      ]
    },
    //--------------------------------------
    TheForm() {
      return {
        //..................................
        // mode : "tab",
        // tabAt : "bottom-left",
        spacing : "tiny",
        keepTabIndexBy : this.keepTabIndexBy,
        //..................................
        fields: [{
            type: "Group",
            title: "i18n:hmk-fields-general",
            fields: this.TheFormGeneralFields
          }, {
            type: "Group",
            title: "i18n:hmk-fields-advance",
            hidden : this.isGroup,
            fields: this.TheFormAdvanceFields
          }]
        //..................................
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    isGroup(fld) {
      return _.isArray(fld.fields) || "Group" == fld.type
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/hmaker/edit-com/form/field/edit-form-field.mjs", _M);
})();
//============================================================
// JOIN: hmaker/edit-com/form/field/_com.json
//============================================================
Ti.Preload("ti/com/hmaker/edit-com/form/field/_com.json", {
  "name" : "hmaker-edit-form-field",
  "globally" : true,
  "template" : "./edit-form-field.html",
  "mixins" : ["./edit-form-field.mjs"]
});
//============================================================
// JOIN: hmaker/edit-com/form/fieldset/edit-form-fieldset.html
//============================================================
Ti.Preload("ti/com/hmaker/edit-com/form/fieldset/edit-form-fieldset.html", `<ti-gui
  class="hmaker-edit-form-fieldset"
  :class="TopClass"
  :layout="Layout"
  :schema="Schema"
  :can-loading="false"
  @tree::select="OnFieldTreeSelect"
  @detail::change="OnFieldChange"/>`);
//============================================================
// JOIN: hmaker/edit-com/form/fieldset/edit-form-fieldset.mjs
//============================================================
(function(){
const _M = {
  //////////////////////////////////////////
  data: ()=>({
    myCurrentId: null
  }),
  //////////////////////////////////////////
  props : {
    "value" : {
      type : Array,
      default : undefined
    },
    "keepTabIndexBy" : {
      type : String,
      default : "hMakerEditComForm"
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    TheDetailCom() {
      return {
        comType: "hmaker-edit-form-field",
        comConf: {
          value: this.CurrentField,
          keepTabIndexBy: this.keepTabIndexBy
            ? `${this.keepTabIndexBy}-field`
            : null
        }
      }
    },
    //--------------------------------------
    CurrentField() {
      if(this.myCurrentId) {
        let node = this.$tree.findTableRow(this.myCurrentId)
        if(node) {
          return node.rawData
        }
      }
    },
    //--------------------------------------
    Layout() {
      return {
        type: "cols",
        border: true,
        blocks: [{
            type: "rows",
            size: "37%",
            border: true,
            blocks: [{
                size: 40,
                body: "actions"
              }, {
                name: "tree",
                body: "tree"
              }]
          }, {
            name: "detail",
            body: "detail"
          }]
      }
    },
    //--------------------------------------
    Schema() {
      return {
        //..................................
        actions: {
          comType: "ti-actionbar",
          comConf: {
            items: [{
                type: "action",
                icon: "im-plus",
                text: "i18n:hmaker-edit-form-new-field",
                action: ()=>this.addNewField()
              }, {
                type: "action",
                icon: "im-folder-add",
                text: "i18n:hmaker-edit-form-new-group",
                action: ()=>this.addNewGroup()
              }, {
                type: "line"
              }, {
                type: "action",
                icon: "im-trash-can",
                action: ()=>this.removeSelectedFieldOrGroup()
              }, {
                type: "line"
              }, {
                type: "action",
                icon: "im-arrow-up",
                action: ()=>this.moveSelectedFieldsUp()
              }, {
                type: "action",
                icon: "im-arrow-down",
                action: ()=>this.moveSelectedFieldsDown()
              }]
          }
        },
        //..................................
        tree: {
          comType: "ti-tree",
          comConf: {
            data: this.value,
            showRoot: false,
            puppetMode: true,
            autoOpen: true,
            border: "row",
            defaultOpenDepth: 2,
            currentId: this.myCurrentId,
            nameBy: it => it.name || it.title,
            childrenBy: it => it.fields,
            leafBy: it => "Group" != it.type,
            display: [{
                key: "type",
                transformer: {
                  name: "toStr",
                  args: [{
                    "Group"   : "zmdi-collection-bookmark",
                    "Object"  : "zmdi-toys",
                    "Number"  : "zmdi-input-svideo",
                    "Integer" : "zmdi-n-6-square",
                    "Boolean" : "zmdi-toll",
                    "String"  : "zmdi-translate",
                    "Array"   : "zmdi-format-list-bulleted",
                  }]
                },
                defaultAs: "im-question",
                comType: "ti-icon"
              }, {
                key: "name",
                transformer: v => _.isArray(v) ? v.join("+") : v,
              },"title"],
            onInit: this.OnTreeInit
          }
        },
        //..................................
        detail: this.TheDetailCom
        //..................................
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnTreeInit($tree){this.$tree = $tree},
    //--------------------------------------
    OnFieldTreeSelect({currentId}) {
      this.myCurrentId = currentId
    },
    //--------------------------------------
    OnFieldChange(newFld) {
      this.updateCurrentField(newFld)
    },
    //--------------------------------------
    // Utility
    //--------------------------------------
    getMyCurrent(fields=this.value){
      if(!this.myCurrentId || !_.isArray(fields)) {
        return
      }

      let path  = this.myCurrentId.split("/")
      let re = {path, index:[], group:null, field:null}

      // Find the top field or group
      if(path.length > 0) {
        let fnm = path[0]
        for(let i=0; i<fields.length; i++) {
          let fg = fields[i]
          // Is group
          if(_.isArray(fg.fields) || "Group" == fg.type) {
            if(fnm == fg.title){
              re.group = fg
              re.index.push(i)
              break
            }
          }
          // Is field
          else {
            if(fnm == fg.name) {
              re.field = fg
              re.index.push(i)
              break
            }
          }
        }
      }

      // Find in group
      if(path.length > 1 && re.group && _.isArray(re.group.fields)) {
        let fnm = path[1]
        for(let i=0; i<re.group.fields.length; i++) {
          let fld = re.group.fields[i]
          if(fnm == fld.name) {
            re.field = fld
            re.index.push(i)
          }
        }
      }

      // Done
      return re
    },
    //--------------------------------------
    isGroup(fld) {
      return "Group" == fld.type || _.isArray(fld.fields)
    },
    //--------------------------------------
    selectNextIdByIndex(index=[], fields=this.value) {
      let names=[]
      for(let i of index){
        if(!fields || _.isEmpty(fields)) {
          break
        }
        let fld = _.nth(fields, i)
        // Find prev
        if(!fld) {
          fld = _.nth(fields, i-1)
        }
        // Join
        if(fld) {
          names.push(fld.name || fld.title)
          fields = fld.fields
        }
      }
      this.myCurrentId = names.join("/") || null
    },
    //--------------------------------------
    findByName(name) {
      // Guard
      if(!_.isArray(this.value)) {
        return
      }
      // Top list
      for(let i=0; i<this.value.length; i++) {
        let fld = this.value[i]
        let fldName = fld.name || fld.title
        if(_.isEqual(name, fldName)) {
          let fd = {
            index : [i],
            path  : [fldName],
            field : fld
          }
          if(this.isGroup(fld)){
            fd.group = fld
          } else {
            fd.field = fld
          }
          return fd
        }
        // Group
        if(this.isGroup(fld)) {
          for(let x=0; x<fld.fields.length; x++) {
            let sub = fld.fields[x]
            let subName = sub.name || sub.title
            if(_.isEqual(name, subName)) {
              return {
                index : [i, x],
                path  : [fldName, subName],
                group : fld,
                field : sub
              }
            }
          }
        } // ~ if(this.isGroup(fld)) {
      } // ~ for(let i=0; i<this.value.length; i++)
    },
    //--------------------------------------
    existsName(name) {
      let ff = this.findByName(name)
      return ff ? true : false
    },
    //--------------------------------------
    updateCurrentField(newFld) {
      let fields = _.cloneDeep(this.value)
      let cur = this.getMyCurrent(fields)
      console.log(cur)
      // Field in group
      if(cur.group && cur.field) {
        let i1 = _.last(cur.index)
        cur.group.fields[i1] = newFld
      }
      // Group
      else if(cur.group) {
        let i0 = _.first(cur.index);
        _.assign(fields[i0], newFld)
      }
      // Field
      else if(cur.field) {
        let i0 = _.first(cur.index)
        fields[i0] = newFld
      }
      // Impossiable
      else {
        return
      }
      //....................................
      // Select new item
      this.selectNextIdByIndex(cur.index, fields)
      //....................................
      // Notify change
      this.$notify("change", fields)
    },
    //--------------------------------------
    addFieldOrGroup(fld) {
      //....................................
      // Clone the old
      let fields = _.cloneDeep(this.value) || []
      //....................................
      // Find pos
      let cur = this.getMyCurrent(fields)
      let names = []
      //....................................
      // push to tail
      if(!cur) {
        fields.push(fld)
      }
      //....................................
      // in group
      else if(cur.group) {
        if(this.isGroup(fld)) {
          Ti.Util.insertToArray(fields, _.first(cur.index), fld)
          names.push(fld.title)
        }
        // in position
        else if(cur.field) {
          Ti.Util.insertToArray(cur.group.fields, _.last(cur.index)+1, fld)
          names.push(cur.path[0], fld.name)
        }
        // At the tail
        else if(_.isArray(cur.group.fields)) {
          cur.group.fields.push(fld)
          names.push(cur.path[0], fld.name)
        }
        // New list
        else {
          cur.group.fields = [fld]
          names.push(cur.path[0], fld.name)
        }
      }
      // At top 
      else {
        Ti.Util.insertToArray(fields, _.last(cur.index)+1, fld)
        names.push(fld.name || fld.title)
      }
      //....................................
      // Notify change
      this.$notify("change", fields)
      //....................................
      // Hightlight it
      this.myCurrentId = names.join("/")
    },
    //--------------------------------------
    async addNewField() {
      let name = await Ti.Prompt("i18n:hmaker-edit-form-new-field-tip")
      name = _.trim(name)
      // User cancel
      if(!name) {
        return
      }

      // Form the name
      let ss = _.without(name.split(/[\s\W]/), "")

      // Check
      for(let s of ss) {
        if(!/^[a-z_][\da-z_]+$/.test(s)) {
          return await Ti.Toast.Open("i18n:hmaker-edit-form-new-field-e0", "error")
        }
      }

      // The field name
      let fldName = ss.length == 1 ? name : ss

      // Check Duplicate
      if(this.existsName(fldName)) {
        return await Ti.Toast.Open({
          content: "i18n:hmaker-edit-form-new-field-e1",
          type: "error",
          vars: {val:name},
          position: "center",
          duration: 5000
        })
      }

      // Then Add new 
      this.addFieldOrGroup({
        name: fldName,
        type: _.isArray(fldName)?"Object":"String",
        comType: "ti-input"
      })
    },
    //--------------------------------------
    async addNewGroup() {
      let name = await Ti.Prompt("i18n:hmaker-edit-form-new-group-tip")
      name = _.trim(name)
      // User cancel
      if(!name) {
        return
      }

      // Check Duplicate
      if(this.existsName(name)) {
        return await Ti.Toast.Open({
          content: "i18n:hmaker-edit-form-new-field-e1",
          type: "error",
          vars: {val:name},
          position: "center",
          duration: 5000
        })
      }

      // Then Add new 
      this.addFieldOrGroup({
        type   : "Group",
        title  : name,
        fields : []
      })
    },
    //--------------------------------------
    async removeSelectedFieldOrGroup() {
      let cur = this.getMyCurrent()
      //....................................
      // Guard
      if(!cur) {
        return Ti.Toast.Open("i18n:hmaker-edit-form-nil-field", "warn")
      }
      //....................................
      // Prepare the newValue
      let fields;
      //....................................
      // Delete group
      if(cur.group && !cur.field) {
        let ask = true
        if(!_.isEmpty(cur.group.fields)) {
          ask = await Ti.Confirm("i18n:hmaker-edit-form-del-group-confirm", {
            closer : true,
            textYes: "i18n:hmaker-edit-form-del-group-all",
            textNo: "i18n:hmaker-edit-form-del-group-only",
          })
        }
        // User Cancel
        if(_.isUndefined(ask))
          return
        // Remove Group
        let index = _.first(cur.index)
        fields = _.filter(this.value, (_, i)=>i!=index)
        // Group only, insert the fields back to list
        if(false === ask) {
          if(!_.isEmpty(cur.group.fields)) {
            Ti.Util.insertToArray(fields,index, ...cur.group.fields) 
          }
        }
      }
      //....................................
      // Delete field in group
      else if(cur.group && cur.field) {
        fields = _.cloneDeep(this.value)
        let grp = _.cloneDeep(cur.group)
        let i0 = _.first(cur.index)
        let i1 = _.last(cur.index)
        grp.fields = _.filter(grp.fields, (_, i)=>i!=i1)
        fields[i0] = grp
      }
      //....................................
      // Delete field
      else {
        let index = _.first(cur.index)
        fields = _.filter(this.value, (_, i)=>i!=index)
      }
      //....................................
      // Select next item
      this.selectNextIdByIndex(cur.index, fields)
      //....................................
      // Notify change
      this.$notify("change", fields)
    },
    //--------------------------------------
    moveSelectedFieldsUp() {
      let fields = _.cloneDeep(this.value)
      let cur = this.getMyCurrent(fields)
      //....................................
      // Guard
      if(!cur) {
        return Ti.Toast.Open("i18n:hmaker-edit-form-nil-field", "warn")
      }
      let i0 = _.first(cur.index)
      //....................................
      // In Group
      if(cur.group && cur.field) {
        let i1 = _.last(cur.index)
        // Move out from group
        if(i1 == 0) {
          _.remove(cur.group.fields, (_, i)=>i==i1)
          Ti.Util.insertToArray(fields, i0, cur.field)
          this.myCurrentId = _.last(cur.path)
        }
        // Just move up
        else {
          cur.group.fields[i1] = cur.group.fields[i1-1]
          cur.group.fields[i1-1] = cur.field
        }
      }
      // At top
      else if(i0>0) {
        let prev = fields[i0-1]
        // Move in to group
        if(this.isGroup(prev) && cur.field && this.$tree.isOpened(prev.title)) {
          _.remove(fields, (_, i)=>i==i0)
          if(_.isArray(prev.fields)) {
            prev.fields.push(cur.field)
          } else {
            prev.fields = [cur.field]
          }
          this.myCurrentId = [prev.title, _.last(cur.path)].join("/")
        }
        // Switch
        else {
          fields[i0] = fields[i0-1]
          fields[i0-1] = cur.field || cur.group
        }
      }
      //....................................
      // Notify change
      this.$notify("change", fields)
    },
    //--------------------------------------
    moveSelectedFieldsDown() {
      let fields = _.cloneDeep(this.value)
      let cur = this.getMyCurrent(fields)
      //....................................
      // Guard
      if(!cur) {
        return Ti.Toast.Open("i18n:hmaker-edit-form-nil-field", "warn")
      }
      let i0 = _.first(cur.index)
      //....................................
      // In Group
      if(cur.group && cur.field) {
        let i1 = _.last(cur.index)
        // Move out from group
        if(i1 >= (cur.group.fields.length - 1)) {
          _.remove(cur.group.fields, (_, i)=>i==i1)
          Ti.Util.insertToArray(fields, i0+1, cur.field)
          this.myCurrentId = _.last(cur.path)
        }
        // Just move down
        else {
          cur.group.fields[i1] = cur.group.fields[i1+1]
          cur.group.fields[i1+1] = cur.field
        }
      }
      // At top
      else if(i0 < (fields.length-1)) {
        let next = fields[i0+1]
        // Move in to group
        if(this.isGroup(next) && cur.field && this.$tree.isOpened(next.title)) {
          _.remove(fields, (_, i)=>i==i0)
          if(_.isArray(next.fields)) {
            Ti.Util.insertToArray(next.fields, 0, cur.field)
          } else {
            next.fields = [cur.field]
          }
          this.myCurrentId = [next.title, _.last(cur.path)].join("/")
        }
        // Switch
        else {
          fields[i0] = fields[i0+1]
          fields[i0+1] = cur.field || cur.group
        }
      }
      //....................................
      // Notify change
      this.$notify("change", fields)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  mounted: function() {
    // !!!!!!!!!!!!!!!!!!!!!!!!!
    //console.log("mounted")
    let vueDropMe = Ti.Storage.local.getObject("vue-drop-me", null)
    if(vueDropMe) {
      let du = Date.now() - vueDropMe.timeInMs
      console.log({du})
      if(du < 1000) {
        this.myCurrentId = vueDropMe.myCurrentId
      }
      Ti.Storage.local.remove("vue-drop-me")
    }
    // Auto Select first item
    else {
      this.selectNextIdByIndex([0])
    }
  },
  //////////////////////////////////////////
  beforeDestroy: function(){
    // !!!!!!!!!!!!!!!!!!!!!!!!!
    //console.log("beforeDestroy")
    // Vue will drop the com in some magical time
    // So I need  keep the state in 1000ms in case
    Ti.Storage.local.setObject("vue-drop-me", {
      myCurrentId : this.myCurrentId,
      timeInMs : Date.now()
    })
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/hmaker/edit-com/form/fieldset/edit-form-fieldset.mjs", _M);
})();
//============================================================
// JOIN: hmaker/edit-com/form/fieldset/_com.json
//============================================================
Ti.Preload("ti/com/hmaker/edit-com/form/fieldset/_com.json", {
  "name" : "hmaker-edit-form-fieldset",
  "globally" : true,
  "template" : "./edit-form-fieldset.html",
  "mixins" : ["./edit-form-fieldset.mjs"],
  "components": [
    "@com:hmaker/edit-com/form/field",
    "@com:hmaker/edit-com/form/group"
  ]
});
//============================================================
// JOIN: hmaker/edit-com/form/group/edit-form-group.html
//============================================================
Ti.Preload("ti/com/hmaker/edit-com/form/group/edit-form-group.html", `<div class="hmaker-edit-form-group">
  Group: {{value}}
</div>`);
//============================================================
// JOIN: hmaker/edit-com/form/group/edit-form-group.mjs
//============================================================
(function(){
const _M = {
  //////////////////////////////////////////
  props : {
    "value" : {
      type : Object,
      default : undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/hmaker/edit-com/form/group/edit-form-group.mjs", _M);
})();
//============================================================
// JOIN: hmaker/edit-com/form/group/_com.json
//============================================================
Ti.Preload("ti/com/hmaker/edit-com/form/group/_com.json", {
  "name" : "hmaker-edit-form-group",
  "globally" : true,
  "template" : "./edit-form-group.html",
  "mixins" : ["./edit-form-group.mjs"]
});
//============================================================
// JOIN: hmaker/edit-com/form/_com.json
//============================================================
Ti.Preload("ti/com/hmaker/edit-com/form/_com.json", {
  "name" : "hmaker-edit-com-form",
  "globally" : true,
  "template" : "./edit-com-form.html",
  "mixins" : ["./edit-com-form.mjs"],
  "components": [
    "@com:hmaker/edit-com/form/fieldset"
  ]
});
//============================================================
// JOIN: hmaker/edit-com/hmaker-edit-com.html
//============================================================
Ti.Preload("ti/com/hmaker/edit-com/hmaker-edit-com.html", `<div class="hmaker-edit-com">
  <!--
    Select Com Type
  -->
  <div class="as-com-type">
    <ti-combo-input 
      v-bind="ComTypeComboInput"
      :value="ComType"
      @change="OnComTypeChange"/>
  </div>
  <!--
    Edit Com Conf
  -->
  <div class="as-com-conf"><div class="as-con">
    <!--
      Show Com Editor
    -->
    <component
      v-if="hasEditCom"
        class="ti-fill-parent"
        :is="EditComType"
        v-bind="EditComConf"
        @change="OnComConfChange"/>
    <!--
      Show Blank
    -->
    <ti-loading 
      v-else
        icon="fas-hand-pointer"
        text="i18n:hmaker-com-conf-blank"/>
  </div></div>
</div>`);
//============================================================
// JOIN: hmaker/edit-com/hmaker-edit-com.mjs
//============================================================
(function(){
const _M = {
  //////////////////////////////////////////
  data: ()=>({
    myCom: null
  }),
  //////////////////////////////////////////
  props : {
    "value" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //------------------------------------------------
    Dict() {
      return Wn.Dict.hMakerComponents()
    },
    //--------------------------------------
    ComTypeComboInput() {
      return {
        options : this.Dict,
        placeholder : "i18n:hmaker-com-type-blank",
        autoI18n : true,
        mustInList : true,
        autoCollapse : true,
        dropDisplay : ["<icon:im-plugin>", "title|name"]
      }
    },
    //--------------------------------------
    hasEditCom() {
      return this.myCom ? true : false
    },
    //--------------------------------------
    ComType() {
      return _.get(this.value, "comType")
    },
    //--------------------------------------
    ComConf() {
      return _.get(this.value, "comConf")
    },
    //--------------------------------------
    EditComType() {
      return _.get(this.myCom, "editComType")
    },
    //--------------------------------------
    EditComConf() {
      let conf = _.get(this.myCom, "editComConf")
      return Ti.Util.explainObj(this.value, conf)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    async OnComTypeChange(comType) {
      this.myCom = await this.Dict.getItem(comType)
      this.notifyChange({
        comType,
        comConf: this.ComConf
      })
    },
    //--------------------------------------
    OnComConfChange(comConf={}) {
      this.notifyChange({
        comType: this.ComType,
        comConf
      })
    },
    //--------------------------------------
    notifyChange(payload={}) {
      this.$notify("change", payload)
    },
    //--------------------------------------
    async reloadMyCom() {
      if(!_.isEmpty(this.value)) {
        let {comType} = this.value
        this.myCom = await this.Dict.getItem(comType)
      }
      // Empty
      else {
        this.myCom = null
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "value" : {
      handler: "reloadMyCom",
      immediate : true
    }
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/hmaker/edit-com/hmaker-edit-com.mjs", _M);
})();
//============================================================
// JOIN: hmaker/edit-com/_com.json
//============================================================
Ti.Preload("ti/com/hmaker/edit-com/_com.json", {
  "name" : "hmaker-edit-com",
  "globally" : true,
  "template" : "./hmaker-edit-com.html",
  "mixins" : ["./hmaker-edit-com.mjs"],
  "components" : [
    "@com:hmaker/edit-com/form",
    "@com:wn/combo/edit-com"
  ]
});
//============================================================
// JOIN: hmaker/edit-site-actions/edit-site-actions.html
//============================================================
Ti.Preload("ti/com/hmaker/edit-site-actions/edit-site-actions.html", `<div class="hmaker-edit-site-actions">
  Actions
</div>`);
//============================================================
// JOIN: hmaker/edit-site-actions/edit-site-actions.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  //////////////////////////////////////////
  data: ()=>({
    
  }),
  //////////////////////////////////////////
  props : {
    "data" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    theConfig() {
      
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/hmaker/edit-site-actions/edit-site-actions.mjs", _M);
})();
//============================================================
// JOIN: hmaker/edit-site-actions/_com.json
//============================================================
Ti.Preload("ti/com/hmaker/edit-site-actions/_com.json", {
  "name" : "hmaker-edit-site-actions",
  "globally" : true,
  "template" : "./edit-site-actions.html",
  "mixins" : ["./edit-site-actions.mjs"]
});
//============================================================
// JOIN: hmaker/edit-site-apis/edit-site-apis.html
//============================================================
Ti.Preload("ti/com/hmaker/edit-site-apis/edit-site-apis.html", `<div class="hmaker-edit-site-apis">
  Apis
</div>`);
//============================================================
// JOIN: hmaker/edit-site-apis/edit-site-apis.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  //////////////////////////////////////////
  data: ()=>({
    
  }),
  //////////////////////////////////////////
  props : {
    "data" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    theConfig() {
      
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/hmaker/edit-site-apis/edit-site-apis.mjs", _M);
})();
//============================================================
// JOIN: hmaker/edit-site-apis/_com.json
//============================================================
Ti.Preload("ti/com/hmaker/edit-site-apis/_com.json", {
  "name" : "hmaker-edit-site-apis",
  "globally" : true,
  "template" : "./edit-site-apis.html",
  "mixins" : ["./edit-site-apis.mjs"]
});
//============================================================
// JOIN: hmaker/edit-site-blocks/edit-site-blocks.html
//============================================================
Ti.Preload("ti/com/hmaker/edit-site-blocks/edit-site-blocks.html", `<div class="hmaker-edit-site-blocks">
  Blocks
</div>`);
//============================================================
// JOIN: hmaker/edit-site-blocks/edit-site-blocks.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  //////////////////////////////////////////
  data: ()=>({
    
  }),
  //////////////////////////////////////////
  props : {
    "data" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    theConfig() {
      
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/hmaker/edit-site-blocks/edit-site-blocks.mjs", _M);
})();
//============================================================
// JOIN: hmaker/edit-site-blocks/_com.json
//============================================================
Ti.Preload("ti/com/hmaker/edit-site-blocks/_com.json", {
  "name" : "hmaker-edit-site-blocks",
  "globally" : true,
  "template" : "./edit-site-blocks.html",
  "mixins" : ["./edit-site-blocks.mjs"]
});
//============================================================
// JOIN: hmaker/edit-site-general/edit-site-general.html
//============================================================
Ti.Preload("ti/com/hmaker/edit-site-general/edit-site-general.html", `<ti-form class="hmaker-edit-site-general"
  :fields="TheFields"
  :data="data"/>`);
//============================================================
// JOIN: hmaker/edit-site-general/edit-site-general.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  //////////////////////////////////////////
  data: ()=>({
    
  }),
  //////////////////////////////////////////
  props : {
    "data" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TheFields() {
      return [{
          title : "i18n:hmaker-site-k-domain",
          name : "domain"
        },{
          title : "i18n:hmaker-site-k-apiBase",
          name : "apiBase"
        },{
          title : "i18n:hmaker-site-k-captcha",
          name : "captcha"
        },{
          title : "i18n:hmaker-site-k-base",
          name : "base"
        },{
          title : "i18n:hmaker-site-k-entry",
          name : "entry"
        }]
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/hmaker/edit-site-general/edit-site-general.mjs", _M);
})();
//============================================================
// JOIN: hmaker/edit-site-general/_com.json
//============================================================
Ti.Preload("ti/com/hmaker/edit-site-general/_com.json", {
  "name" : "hmaker-edit-site-general",
  "globally" : true,
  "template" : "./edit-site-general.html",
  "mixins" : ["./edit-site-general.mjs"]
});
//============================================================
// JOIN: hmaker/edit-site-nav/edit-site-nav.html
//============================================================
Ti.Preload("ti/com/hmaker/edit-site-nav/edit-site-nav.html", `<div class="hmaker-edit-site-nav">
  <!--
    Nav Table
  -->
  <div class="as-table ti-fill-parent">
    <ti-table class="ti-fill-parent"
      :data="TableData"
      :fields="TableFields"
      :selectable="true"
      :checkable="true"
      :multi="true"
      :current-id="myCurrentId"
      :checked-ids="myCheckedIds"
      @select="OnRowSelected"/>
  </div>
  <!--
    Nav Form
  -->
  <div class="as-form">
    <ti-form
      class="ti-fill-parent"
      :fields="FormFields"
      :blank-as="FormBlankAs"
      :data="FormData"
      @change="OnFormChanged"/>
  </div>
</div>`);
//============================================================
// JOIN: hmaker/edit-site-nav/edit-site-nav.mjs
//============================================================
(function(){
const _M = {
  //////////////////////////////////////////
  data: ()=>({
    myCurrentIndex : -1,
    myCurrentId : null,
    myCheckedIds : {},
    myActionStatus : {
      "remove"   : false,
      "moveUp"   : false,
      "moveDown" : false,
    }
  }),
  //////////////////////////////////////////
  props : {
    "data" : {
      type : Array,
      default : ()=>[]
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TableData() {
      let list = []
      _.forEach(this.data, (it, index)=>{
        list.push(_.assign({
          id : `N${index}`
        }, it))
      })
      return list
    },
    //--------------------------------------
    TableLastIndex() {
      return this.TableData.length - 1
    },
    //--------------------------------------
    TableFields() {
      return [{
        title : "i18n:hmaker-nav-k-display",
        display : [{
            key : "icon",
            comType : "ti-icon"
          }, "title"],
        width   : -150
      }, {
        title : "i18n:hmaker-nav-k-type",
        name  : "type",
        width   : -100,
        display : [{
          comType : "ti-icon",
          transformer : {
            name : "toStr",
            args : {
              page : "zmdi-file",
              href : "zmdi-link",
              dispatch : "zmdi-flash-auto"
            }
          }
        }, {
          transformer : {
            name : "toStr",
            args : {
              page : "i18n:hmaker-nav-tp-page",
              href : "i18n:hmaker-nav-tp-href",
              dispatch : "i18n:hmaker-nav-tp-dispatch"
            }
          }
        }]
      }, {
          title : "i18n:hmaker-nav-k-value",
          display : "value"
        }]
    },
    //--------------------------------------
    FormBlankAs() {
      return {
        icon : "zmdi-long-arrow-return zmdi-hc-rotate-90",
        text : "i18n:hmaker-nav-blank-item"
      }
    },
    //--------------------------------------
    FormFields() {
      return [{
          title : "i18n:hmaker-nav-k-title",
          name  : "title",
          comType : "ti-input"
        }, {
          title : "i18n:hmaker-nav-k-icon",
          name  : "icon",
          comType : "ti-input-icon"
        }, {
          title : "i18n:hmaker-nav-k-type",
          name  : "type",
          comType : "ti-switcher",
          comConf : {
            options : [{
              icon  : "zmdi-file",
              text  : "i18n:hmaker-nav-tp-page",
              value : "page"
            }, {
              icon  : "zmdi-link",
              text  : "i18n:hmaker-nav-tp-href",
              value : "href"
            }, {
              icon  : "zmdi-flash-auto",
              text  : "i18n:hmaker-nav-tp-dispatch",
              value : "dispatch"
            }]
          }
        }, {
          title : "i18n:hmaker-nav-k-value",
          name  : "value",
          comType : "ti-input"
        }]
    },
    //--------------------------------------
    FormData() {
      if(this.myCurrentIndex >= 0) {
        return this.TableData[this.myCurrentIndex]
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnRowSelected({currentId, checkedIds, currentIndex}) {
      //console.log(currentId, current)
      this.myCurrentIndex = currentIndex
      this.myCurrentId = currentId
      this.myCheckedIds = checkedIds

      _.assign(this.myActionStatus, {
        moveUp   : currentIndex > 0,
        moveDown : currentIndex >= 0 && currentIndex < this.TableLastIndex,
        remove   : currentIndex >= 0
      })
    },
    //--------------------------------------
    OnFormChanged({name, value}={}) {
      //console.log("onFormChanged", {name, value})
      if(this.myCurrentIndex>=0) {
        let data = _.cloneDeep(this.data)
        data[this.myCurrentIndex][name] = value
        this.notifyChange(data)
      }
    },
    //--------------------------------------
    updateParentActionMenu() {
      this.$notify("actions:update", {
        data : [{
            key  : "create",
            text : "i18n:add-item",
            type : "action",
            icon : "zmdi-plus",
            action : "$parent:callChild(createNewOne)"
          }, {
            type : "line"
          }, {
            key  : "remove",
            type : "action",
            icon : "zmdi-delete",
            action : "$parent:callChild(removeChecked)",
            enableBy : "remove"
          }, {
            type : "line"
          }, {
            key  : "moveUp",
            type : "action",
            icon : "zmdi-long-arrow-up",
            action : "$parent:callChild(moveUp)",
            enableBy : "moveUp"
          }, {
            key  : "moveDown",
            type : "action",
            icon : "zmdi-long-arrow-down",
            action : "$parent:callChild(moveDown)",
            enableBy : "moveDown"
          }],
        status : this.myActionStatus
      })
    },
    //--------------------------------------
    notifyChange(data=[]) {
      let list = []
      _.forEach(data, (it)=>{
        list.push(_.pick(it, "icon", "title", "type", "value"))
      })
      this.$notify("change", list)
    },
    //--------------------------------------
    __recover_selected(pos, len) {
      let ids = {}
      for(let i=0; i<len; i++) {
        ids[`N${pos+i}`] = true
      }
      console.log(ids)
      this.$nextTick(()=>{
        this.OnRowSelected({
          currentId  : `N${pos}`,
          currentIndex : pos,
          checkedIds : ids
        })
     })
    },
    //--------------------------------------
    moveUp() {
      let data = _.cloneDeep(this.TableData)
      let items = _.remove(data, ({id})=>this.myCheckedIds[id])
      if(!_.isEmpty(items)) {
        let firstIndex = _.first(items).id.substring(1) * 1
        let pos = Math.max(0, firstIndex - 1)
        if(pos>=0) {
          Ti.Util.insertToArray(data, pos, ...items)
          this.notifyChange(data)

          // Recover selected
          this.__recover_selected(pos, items.length)
        }
      }
    },
    //--------------------------------------
    moveDown() {
      let data = _.cloneDeep(this.TableData)
      let items = _.remove(data, ({id})=>this.myCheckedIds[id])
      if(!_.isEmpty(items)) {
        let firstIndex = _.first(items).id.substring(1) * 1
        let pos = firstIndex + 1
        if(pos<=(this.TableData.length-items.length)) {
          Ti.Util.insertToArray(data, pos, ...items)
          this.notifyChange(data)

          // Recover selected
          this.__recover_selected(pos, items.length)
        }
      }
    },
    //--------------------------------------
    removeChecked() {
      let data = _.filter(this.TableData, ({id})=>!this.myCheckedIds[id])
      this.notifyChange(data)
      this.myCurrentIndex = -1
      this.myCurrentId = null
      this.myCheckedIds = {}
    },
    //--------------------------------------
    createNewOne() {
      let data = _.cloneDeep(this.TableData)
      Ti.Util.insertToArray(data, this.myCurrentIndex, {
        title : Ti.I18n.get("new-item"),
        type  : "page"
      })
      console.log(data)
      this.notifyChange(data)
    }
    //--------------------------------------
  },
  mounted : function() {
    this.updateParentActionMenu()
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/hmaker/edit-site-nav/edit-site-nav.mjs", _M);
})();
//============================================================
// JOIN: hmaker/edit-site-nav/_com.json
//============================================================
Ti.Preload("ti/com/hmaker/edit-site-nav/_com.json", {
  "name" : "hmaker-edit-site-nav",
  "globally" : true,
  "template" : "./edit-site-nav.html",
  "mixins" : ["./edit-site-nav.mjs"]
});
//============================================================
// JOIN: hmaker/edit-site-router/edit-site-router.html
//============================================================
Ti.Preload("ti/com/hmaker/edit-site-router/edit-site-router.html", `<div class="hmaker-edit-site-router">
  Routers
</div>`);
//============================================================
// JOIN: hmaker/edit-site-router/edit-site-router.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  //////////////////////////////////////////
  data: ()=>({
    
  }),
  //////////////////////////////////////////
  props : {
    "data" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    theConfig() {
      
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/hmaker/edit-site-router/edit-site-router.mjs", _M);
})();
//============================================================
// JOIN: hmaker/edit-site-router/_com.json
//============================================================
Ti.Preload("ti/com/hmaker/edit-site-router/_com.json", {
  "name" : "hmaker-edit-site-router",
  "globally" : true,
  "template" : "./edit-site-router.html",
  "mixins" : ["./edit-site-router.mjs"]
});
//============================================================
// JOIN: hmaker/edit-site-schema/edit-site-schema.html
//============================================================
Ti.Preload("ti/com/hmaker/edit-site-schema/edit-site-schema.html", `<div class="hmaker-edit-site-schema">
  SCHEMA
</div>`);
//============================================================
// JOIN: hmaker/edit-site-schema/edit-site-schema.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  //////////////////////////////////////////
  data: ()=>({
    
  }),
  //////////////////////////////////////////
  props : {
    "data" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    theConfig() {
      
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/hmaker/edit-site-schema/edit-site-schema.mjs", _M);
})();
//============================================================
// JOIN: hmaker/edit-site-schema/_com.json
//============================================================
Ti.Preload("ti/com/hmaker/edit-site-schema/_com.json", {
  "name" : "hmaker-edit-site-schema",
  "globally" : true,
  "template" : "./edit-site-schema.html",
  "mixins" : ["./edit-site-schema.mjs"]
});
//============================================================
// JOIN: hmaker/edit-site-utils/edit-site-utils.html
//============================================================
Ti.Preload("ti/com/hmaker/edit-site-utils/edit-site-utils.html", `<div class="hmaker-edit-site-utils">
  Utils
</div>`);
//============================================================
// JOIN: hmaker/edit-site-utils/edit-site-utils.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  //////////////////////////////////////////
  data: ()=>({
    
  }),
  //////////////////////////////////////////
  props : {
    "data" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    theConfig() {
      
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/hmaker/edit-site-utils/edit-site-utils.mjs", _M);
})();
//============================================================
// JOIN: hmaker/edit-site-utils/_com.json
//============================================================
Ti.Preload("ti/com/hmaker/edit-site-utils/_com.json", {
  "name" : "hmaker-edit-site-utils",
  "globally" : true,
  "template" : "./edit-site-utils.html",
  "mixins" : ["./edit-site-utils.mjs"]
});
//============================================================
// JOIN: hmaker/site-current-view/com/current-view-con/current-view-con.html
//============================================================
Ti.Preload("ti/com/hmaker/site-current-view/com/current-view-con/current-view-con.html", `<div class="current-view-con">
  <component :is="comType"
    class="ti-cover-parent"
    v-bind="comConf"/>
</div>`);
//============================================================
// JOIN: hmaker/site-current-view/com/current-view-con/current-view-con.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  /////////////////////////////////////////
  props : {
    "comType" : {
      type : String,
      default : "ti-loading"
    },
    "comConf" : {
      type : Object,
      default : ()=>({})
    }
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/hmaker/site-current-view/com/current-view-con/current-view-con.mjs", _M);
})();
//============================================================
// JOIN: hmaker/site-current-view/com/current-view-con/_com.json
//============================================================
Ti.Preload("ti/com/hmaker/site-current-view/com/current-view-con/_com.json", {
  "name" : "current-view-con",
  "globally" : false,
  "template" : "./current-view-con.html",
  "mixins" : ["./current-view-con.mjs"]
});
//============================================================
// JOIN: hmaker/site-current-view/site-current-view.html
//============================================================
Ti.Preload("ti/com/hmaker/site-current-view/site-current-view.html", `<div class="site-current-view"
  :class="topClass">
  <!--
    Title
  -->
  <div class="current-view-title">
    <!-- For Site -->
    <div class="as-name">
      <ti-icon 
        class="as-icon"
        :value="theTitleIcon"/>
      <span
        class="as-text">{{theTitleText|i18n}}</span>
    </div>
    <!-- Crumb -->
    <div class="as-crumb"></div>
    <!-- Actions -->
    <div class="as-actions">
      <ti-menu
        v-if="theCurrentAction"
          :data="theCurrentAction"
          :status="status"/>
    </div>
  </div>
  <!--
    Main Area
  -->
  <current-view-con
    class="ti-fill-parent"
    :com-type="theCurrentView.comType"
    :com-conf="theCurrentView.comConf"/>
</div>`);
//============================================================
// JOIN: hmaker/site-current-view/site-current-view.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  //////////////////////////////////////////
  props : {
    "home" : {
      type : Object,
      default : null
    },
    "tree" : {
      type : Object,
      default : ()=>({})
    },
    "currentMeta" : {
      type : Object,
      default : null
    },
    "currentContent" : {
      type : String,
      default : null
    },
    "currentData" : {
      type : Object,
      default : null
    },
    "mapping" : {
      type : Object,
      default : ()=>({})
    },
    "views" : {
      type : Object,
      default : ()=>({})
    },
    "status" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    topClass() {
      return {
        "is-changed" : this.status.changed
      }
    },
    //--------------------------------------
    theViewsMapping() {
      return new HmViewMapping(this.mapping || {})
    },
    //--------------------------------------
    hasCurrent() {
      return this.currentMeta
    },
    //--------------------------------------
    theTitleIcon() {
      return Wn.Util.getIconObj(this.currentMeta || this.home)
    },
    //--------------------------------------
    theTitleText() {
      return Wn.Util.getObjDisplayName(this.currentMeta || this.home)
    },
    //--------------------------------------
    theCurrentView() {
      // The default view
      let view = {
        comType : "ti-loading",
        comConf : {
          icon : "zmdi-alert-circle-o",
          text : "i18n:blank"
        }
      }
      // Find the view by current meta
      if(this.hasCurrent) {
        let homePath = this.home.ph
        let currentPath = this.currentMeta.ph
        view = this.theViewsMapping.getView({
          path : Ti.Util.getRelativePath(homePath, currentPath),
          type : this.currentMeta.tp,
          mime : this.currentMeta.mime,
          race : this.currentMeta.race
        }, view)
        if(_.isString(view)) {
          view = this.views[view]
        }
      }
      // Explain it ...
      return Ti.Util.explainObj(this, view)
    },
    //--------------------------------------
    theCurrentAction() {
      return this.theCurrentView.actions
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
/////////////////////////////////////////////
class HmViewMapping {
  constructor(mapping) {
    this.paths = new Ti.Mapping(mapping.paths)
    this.types = new Ti.Mapping(mapping.types)
    this.mimes = new Ti.Mapping(mapping.mimes)
    this.races = new Ti.Mapping(mapping.races)
  }
  getView({path,type,mime,race}={}, dft) {
    return this.paths.get(path)
      || this.types.get(type)
      || this.mimes.get(mime)
      || this.races.get(race)
      || dft
  }
}
Ti.Preload("ti/com/hmaker/site-current-view/site-current-view.mjs", _M);
})();
//============================================================
// JOIN: hmaker/site-current-view/_com.json
//============================================================
Ti.Preload("ti/com/hmaker/site-current-view/_com.json", {
  "name" : "hmaker-site-current-view",
  "globally" : true,
  "template" : "./site-current-view.html",
  "mixins" : ["./site-current-view.mjs"],
  "components" : [
    "./com/current-view-con",
    "@com:hmaker/site-state",
    "@com:ti/text/raw",
    "@com:ti/obj/json",
    "@com:wn/obj/preview",
    "@com:wn/adaptlist"
  ]
});
//============================================================
// JOIN: hmaker/site-manager/hm-site-manager.html
//============================================================
Ti.Preload("ti/com/hmaker/site-manager/hm-site-manager.html", `<ti-gui
  class="hmaker-site-manager"
  :class="className"
  keep-shown-to="hmaker-site-manager"
  :layout="theLayout"
  :schema="theSchema"
  :can-loading="true"
  :loading-as="status.reloading"
  @block:event="onBlockEvent"/>`);
//============================================================
// JOIN: hmaker/site-manager/hm-site-manager.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  //////////////////////////////////////////
  props : {
    "home" : {
      type : Object,
      default : null
    },
    "tree" : {
      type : Object,
      default : ()=>({})
    },
    "current" : {
      type : Object,
      default : ()=>({})
    },
    "config" : {
      type : Object,
      default : ()=>({})
    },
    "status" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    theConfig() {
      return this.config[this.viewportMode] || {}
    },
    //--------------------------------------
    theLayout() {
      return {
        type : "cols",
        border : true,
        blocks : [{
          title : "i18n:hmaker-site-tree",
          size  : 280,
          name  : "site-tree",
          body  : "desktop-site-tree"
        }, {
          name  : "site-current",
          body  : "desktop-site-current"
        }]
      }
    },
    //--------------------------------------
    theSchema() {
      //....................................
      // Done
      return {
        "desktop-site-tree" : {
          comType : "ti-tree", 
          comConf : {
            //=========================
            data : this.tree.root,
            //=========================
            display : [{
                key : "rawData",
                type : "Object",
                transformer : "getIconObj",
                comType : "ti-icon"
              },
              "rawData.title",
              "name"],
            //=========================
            blankAs : {
              icon : "zmdi-settings zmdi-hc-spin",
              text : "i18n:hmaker-site-tree-loading"
            },
            //=========================
            currentId : this.tree.currentId,
            showRoot:false,
            defaultOpenDepth : 1,
            extendFunctionSet : Wn.Util,
            openedNodePaths : this.tree.openedNodePaths
            //=========================
          }
        },
        "desktop-site-current" : {
          comType : "hmaker-site-current-view",
          comConf : {
            home    : this.home,
            tree    : this.tree,
            currentMeta    : this.current.meta,
            currentContent : this.current.content,
            currentData    : this.current.data,
            mapping : this.theConfig.mapping,
            views   : this.config.views,
            status  : this.status
          }
        }
      }
      //....................................
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    onBlockEvent({block, name, args}={}) {
      let evKey = _.concat(block||[], name||[]).join(".")
      let data = _.first(args)
      console.log("hmaker-site-manager:onBlockEvent",evKey, data)
      //....................................
      // Ignore the undefined data
      if(_.isUndefined(data)) {
        return
      }
      //....................................
      // Opened Node
      if("site-tree.opened" == evKey) {
        Ti.App(this).dispatch("main/reloadTreeNode", {id:data.id})
      }
      //....................................
      // Save Tree opened Status
      if("site-tree.opened-status:change" == evKey) {
        Ti.App(this).dispatch("main/setTreeOpenedNodePaths", data)
      }
      //....................................
      // Save Tree selected Status
      if("site-tree.select" == evKey) {
        Ti.App(this).dispatch("main/setTreeSelected", data.currentId)
      }
      //....................................
      // Save Tree selected Status
      if("site-current.open" == evKey) {
        Ti.App(this).dispatch("main/reloadCurrent", data.rawData)
      }
      //....................................
      if("site-current.change" == evKey) {
        Ti.App(this).dispatch("main/onCurrentChanged", data)
      }
      //....................................
    },
    //--------------------------------------
    editCurrentObjMeta() {
      let meta = this.current.meta || this.home

      if(!meta) {
        return Ti.Toast.Open("i18n:nil-obj")
      }

      Wn.EditObjMeta(meta)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  mounted : function(){
    //----------------------------------------
    Ti.Fuse.getOrCreate().add({
      key : "hmaker-site-manager",
      everythingOk : ()=>{
        return !this.status.changed
      },
      fail : ()=>{
        Ti.Toast.Open("i18n:wn-obj-nosaved", "warn")
      }
    })
    //----------------------------------------
  },
  //////////////////////////////////////////
  beforeDestroy : function(){
    Ti.Fuse.get().remove("hmaker-site-manager")
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/hmaker/site-manager/hm-site-manager.mjs", _M);
})();
//============================================================
// JOIN: hmaker/site-manager/_com.json
//============================================================
Ti.Preload("ti/com/hmaker/site-manager/_com.json", {
  "name" : "hmaker-site-manager",
  "globally" : true,
  "i18n" : "@i18n:hmaker",
  "template" : "./hm-site-manager.html",
  "mixins" : ["./hm-site-manager.mjs"],
  "components" : [
    "@com:hmaker/site-current-view"
  ]
});
//============================================================
// JOIN: hmaker/site-state/com/site-node-editing/site-node-editing.html
//============================================================
Ti.Preload("ti/com/hmaker/site-state/com/site-node-editing/site-node-editing.html", `<div class="hmaker-site-node-editing">
  <template v-if="hasNode">
    <!--
      Heading
    -->
    <div class="as-head">
      <!--Title Bar-->
      <div class="at-left">
        <ti-icon :value="node.icon"/>
        <span>{{node.title | i18n}}</span>
      </div>
      <!--Action Menu-->
      <div 
        v-if="hasActionMenu"
          class="at-right">
          <ti-menu v-bind="myActionMenu"/>
      </div>
    </div>
    <!--
      Editing
    -->
    <div class="as-edit">
      <component class="ti-fill-parent"
        :is="Com.comType"
        v-bind="Com.comConf"
        :on-init="OnChildInit"
        @change="OnChange"
        @actions:update="OnActionsUpdate"/>
    </div>
  </template>
  <!--
    Blank
  -->
  <template v-else>
    <ti-loading
      text="i18n:blank-to-edit"
      icon="zmdi-arrow-left"/>
  </template>
</div>`);
//============================================================
// JOIN: hmaker/site-state/com/site-node-editing/site-node-editing.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  //////////////////////////////////////////
  data: ()=>({
    myActionMenu : null
  }),
  //////////////////////////////////////////
  props : {
    "path" : {
      type : String,
      default : null
    },
    "node" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    hasNode() {
      return this.path && !_.isEmpty(this.node)
    },
    //--------------------------------------
    hasActionMenu() {
      return !_.isEmpty(this.myActionMenu)
    },
    //--------------------------------------
    Com() {
      //....................................
      // General
      if("general" == this.path) {
        return {
          comType : "hmaker-edit-site-general",
          comConf : {
            data : this.node.data
          }
        }
      }
      //....................................
      // General
      if("nav" == this.path) {
        return {
          comType : "hmaker-edit-site-nav",
          comConf : {
            data : this.node.data
          }
        }
      }
      //....................................
      // Default
      return  {
        comType : "ti-form",
        comConf : {
          fields : [{
            name  : "path",
            //comConf : {value:this.path}
          }, {
            name : "node",
            comType : "ti-input-text",
            comConf : {
              readonly : true,
              height: "7rem"
            }
          }],
          data : {
            path : this.path,
            node : JSON.stringify(this.node, null, '  ')
          }
        }
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnChange(payload) {
      //console.log("onChanged", payload)
      this.$notify("change", {
        path : this.path,
        node : this.node,
        payload
      })
    },
    //--------------------------------------
    OnActionsUpdate(menu={}) {
      this.myActionMenu = menu
    },
    //--------------------------------------
    OnChildInit($myChildCom) {
      this.$myChildCom = $myChildCom
    },
    //--------------------------------------
    callChild(actionName) {
      console.log(actionName)
      if(this.$myChildCom) {
        this.$myChildCom[actionName]()
      }
    },
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "path" : function() {
      this.myActionMenu = null
    }
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/hmaker/site-state/com/site-node-editing/site-node-editing.mjs", _M);
})();
//============================================================
// JOIN: hmaker/site-state/com/site-node-editing/_com.json
//============================================================
Ti.Preload("ti/com/hmaker/site-state/com/site-node-editing/_com.json", {
  "name" : "hmaker-site-node-editing",
  "globally" : true,
  "template" : "./site-node-editing.html",
  "mixins" : ["./site-node-editing.mjs"],
  "components" : [
    "@com:hmaker/edit-site-general",
    "@com:hmaker/edit-site-utils",
    "@com:hmaker/edit-site-apis",
    "@com:hmaker/edit-site-schema",
    "@com:hmaker/edit-site-blocks",
    "@com:hmaker/edit-site-nav",
    "@com:hmaker/edit-site-router",
    "@com:hmaker/edit-site-actions",
    "@com:ti/form"
  ]
});
//============================================================
// JOIN: hmaker/site-state/hm-site-state.html
//============================================================
Ti.Preload("ti/com/hmaker/site-state/hm-site-state.html", `<ti-gui
  class="hmaker-site-state ti-fill-parent"
  keep-shown-to="hmaker-site-state"
  :layout="theLayout"
  :schema="theSchema"
  @block:event="onBlockEvent"/>`);
//============================================================
// JOIN: hmaker/site-state/hm-site-state.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  //////////////////////////////////////////
  data: ()=>({
    myCurrentPathId : null,
    myTreeOpenedStatus : {}
  }),
  //////////////////////////////////////////
  props : {
    "home" : {
      type : Object,
      default : ()=>({})
    },
    "content" : {
      type : String,
      default : null
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    theData () {
      let str = _.trim(this.content)
      if(!str) {
        return {}
      }
      return JSON.parse(str)
    },
    //--------------------------------------
    theTreeDisplay() {
      return ["<icon>","title","tip"]
    },
    //--------------------------------------
    theTreeData() {
      return {
        name : "ROOT",
        children : [
          this._general,
          this._nav,
          this._apis,
          this._schema,
          this._blocks,
          this._router,
          this._actions,
          this._utils
        ]
      }
    },
    //--------------------------------------
    _general(){
      return {
        icon  : "fas-sliders-h",
        name  : "general",
        title : "i18n:hmaker-site-state-general",
        data  : _.pick(this.theData, [
          "domain",
          "apiBase",
          "captcha",
          "base",
          "entry"
        ])
      }
    },
    //--------------------------------------
    _utils() {
      return {
        icon  : "zmdi-card-sd",
        name  : "utils",
        title : "i18n:hmaker-site-state-utils",
        data  : _.assign({}, this.theData.utils)
      }
    },
    //--------------------------------------
    _apis() {
      let children = []
      //....................................
      _.forEach(this.theData.apis, (val, key)=>{
        children.push({
          icon  : "zmdi-input-power",
          name  : key,
          title : val.title || key,
          tip   : key,
          data  : val
        })
      })
      //....................................
      return {
        icon  : "zmdi-input-composite",
        name  : "apis",
        title : "i18n:hmaker-site-state-apis",
        children
      }
    },
    //......................................
    _schema() {
      let children = []
      //....................................
      _.forEach(this.theData.schema, (val, key)=>{
        children.push({
          icon  : "fas-puzzle-piece",
          name  : key,
          title : val.title || key,
          data  : val
        })
      })
      //....................................
      return {
        icon  : "fas-pencil-ruler",
        name  : "schema",
        title : "i18n:hmaker-site-state-schema",
        children
      }
    },
    //......................................
    _blocks() {
      //....................................
      const __sub_block = (block, key)=>{
        //..................................
        // Block as refer
        if (_.isString(block)) {
          return {
            icon  : "fas-external-link-alt",
            name  : key,
            title : block,
            data  : block
          }
        }
        //..................................
        // Block as component
        else if(block.body) {
          let comName = _.isString(block.body)
            ? block.body
            : (block.body.comType || "ti-label")
          let titleKey = _.isNumber(key)
            ? `[${key}]`
            : `"${key}"`
          return {
            icon  : "fas-puzzle-piece",
            name  : key,
            title : `${titleKey}:<${comName}>`,
            data  : block
          }
        }
        //..................................
        // Block as layout
        else {
          //................................
          let children = []
          //................................
          _.forEach(block.blocks, (block, index)=>{
            children.push(__sub_block(block, index))
          })
          //................................
          let titleKey = _.isNumber(key)
            ? `[${key}]`
            : `"${key}"`
          //................................
          let blockName = [
            titleKey, 
            Ti.I18n.get(`hmaker-layout-${block.type||"cols"}`)
          ]
          //................................
          return {
            icon  : "im-layer",
            name  : key,
            title : blockName.join(":"),
            data  : block,
            children
          }
        }
      }
      //....................................
      let children = []
      _.forEach(this.theData.blocks, (deviceInfo, deviceType)=>{
        //..................................
        let subs = []
        _.forEach(deviceInfo, (block, key)=>{
          subs.push(__sub_block(block, key))
        })
        //..................................
        children.push({
          icon  : ({
            "desktop" : "zmdi-desktop-windows",
            "tablet"  : "zmdi-tablet",
            "phone"   : "zmdi-smartphone-iphone",
          })[deviceType],
          name  : deviceType,
          title : `i18n:${deviceType}`,
          data  : deviceInfo,
          children : subs
        })
        //..................................
      })
      //....................................
      return {
        icon  : "far-object-group",
        name  : "blocks",
        title : "i18n:hmaker-site-state-blocks",
        children
      }
    },
    //......................................
    _nav() {
      return {
        icon  : "im-sitemap",
        name  : "nav",
        title : "i18n:hmaker-site-state-nav",
        data  : this.theData.nav || []
      }
    },
    //......................................
    // router
    _router() {
      let children = []
      //....................................
      _.forEach(this.theData.router, (val, key)=>{
        children.push({
          icon  : "im-share",
          name  : key,
          title : val.match,
          data  : val
        })
      })
      //....................................
      return {
        icon  : "zmdi-router",
        name  : "router",
        title : "i18n:hmaker-site-state-router",
        children
      }
    },
    //......................................
    _actions() {
      let children = []
      //....................................
      _.forEach(this.theData.actions, (val, key)=>{
        children.push({
          icon  : "im-flash",
          name  : key,
          title : key,
          data  : val
        })
      })
      //....................................
      return {
        icon  : "im-rocket",
        name  : "actions",
        title : "i18n:hmaker-site-state-actions",
        children
      }
    },
    //--------------------------------------
    theLayout() {
      return {
        type : "tabs",
        tabAt : "bottom-left",
        blocks : [{
            title : "i18n:structure",
            type : "cols",
            border : true,
            blocks : [{
                size  : .372,
                name  : "tree",
                body  : "desktopStructureTree"
              }, {
                name  : "edit",
                body  : "desktopStructureEdit"
              }]
          }, {
            title : "i18n:source-code",
            name  : "source",
            body  : "desktopSourceCode"
          }]
      }
    },
    //--------------------------------------
    theSchema() {
      return {
        // structure: tree
        "desktopStructureTree" : {
          comType : "ti-tree",
          comConf : {
            mainWidth        : 300,
            border           : "cell",
            multi            : false,
            data             : this.theTreeData,
            display          : this.theTreeDisplay,
            autoOpen         : false,
            currentId        : this.myCurrentPathId,
            defaultOpenDepth : 0,
            keepOpenBy       : `hm-site-state-${this.home.id}-opened`,
            keepCurrentBy    : `hm-site-state-${this.home.id}-current`,
            showRoot         : false
          }
        },
        // structure: edit
        "desktopStructureEdit" : {
          comType : "hmaker-site-node-editing",
          comConf : {
            path : this.myCurrentPathId,
            node : this.theCurrentNode
          }
        },
        // source code 
        "desktopSourceCode" : {
          comType : "ti-text-raw",
          comConf : {
            showTitle : false,
            content   : this.content,
            ignoreKeyUp : true
          }
        }
      }
    },
    //--------------------------------------
    theCurrentNode() {
      if(this.myCurrentPathId) {
        return Ti.Trees.getNodeByPath(this.theTreeData, this.myCurrentPathId)
      }
      return null
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    updateByPath({path, payload}={}) {
      //console.log("udpateByPath", path, payload)
      let data = _.cloneDeep(this.theData)
      _.set(data, path, payload)
      //console.log(JSON.stringify(data, null, '  '))
      Ti.App(this).dispatch("main/onCurrentChanged", data)
    },
    //--------------------------------------
    onBlockEvent({block, name, args}={}) {
      let evKey = _.concat(block||[], name||[]).join(".")
      let data = _.first(args)
      console.log("hmaker-site-state:onBlockEvent",evKey, data)
      //....................................
      // Ignore the undefined data
      if(_.isUndefined(data)) {
        return
      }
      //....................................
      else if("tree.select" == evKey) {
        this.onSelected(data)
      }
      //....................................
      else if("tree.opened-status:change" == evKey) {
        this.onOpenedStatusChanged(data)
      }
      //....................................
      else if("edit.change" == evKey) {
        this.updateByPath(data)
      }
      //....................................
      else if("source.change" == evKey) {
        Ti.App(this).dispatch("main/onCurrentChanged", data)
      }
      //....................................
    },
    //--------------------------------------
    async onSelected({currentId, current}={}) {
      //console.log("onSelected", currentId, _.cloneDeep(current))
      this.myCurrentPathId = currentId
    },
    //--------------------------------------
    onOpenedStatusChanged(opened) {
      //console.log("onOpenedStatusChanged", _.cloneDeep(opened))
      this.myTreeOpenedStatus = opened
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
}
Ti.Preload("ti/com/hmaker/site-state/hm-site-state.mjs", _M);
})();
//============================================================
// JOIN: hmaker/site-state/_com.json
//============================================================
Ti.Preload("ti/com/hmaker/site-state/_com.json", {
  "name" : "hmaker-site-state",
  "globally" : true,
  "template" : "./hm-site-state.html",
  "mixins" : ["./hm-site-state.mjs"],
  "components" : [
    "./com/site-node-editing"
  ]
});
//============================================================
// JOIN: net/aliyun/vod/manager/vod-manager.html
//============================================================
Ti.Preload("ti/com/net/aliyun/vod/manager/vod-manager.html", `<ti-gui
  class="net-aliyun-vod-manager"
  :class="TopClass"
  :layout="GuiLayout"
  :schema="GuiSchema"
  :can-loading="true"
  :loading-as="reloading"
  @filter::change="OnFilterChange"
  @sorter::change="OnSorterChange"
  @list::select="OnListSelect"
  @video::preview="OnVideoPreview"
  @pager::change="OnPagerChange"/>`);
//============================================================
// JOIN: net/aliyun/vod/manager/vod-manager.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////////////////
  data : ()=>({
    reloading: false,
    list: [],
    pager: {},
    scrollToken: null,
    myCurrentId: null,
    myCurrentVideo: null,
    myFilter: {
      match: {}
    },
    mySort: {
      CreationTime:-1
    }
  }),
  ///////////////////////////////////////////////////////
  props : {
    "meta": {
      type: Object,
      default: ()=>({})
    },
    "fields": {
      type: String,
      default: "Title,CoverURL,Duration,CateName,Size,Description,RegionID"
    },
    "filter": {
      type: Object,
      default: ()=>({
        comType: "ti-combo-filter",
        comConf: {
          placeholder: "i18n:net-flt-nil",
          form: {
            fields: [{
                title: "i18n:net-ct",
                name: "CreationTime",
                type: "Array",
                comType: "ti-input-daterange"
                // }, {
                //   title: "i18n:net-vod-cate",
                //   name : "CateName",
                //   comType: "ti-input"
              }, {
                title: "i18n:net-vod-duration",
                name: "Duration",
                comType: "ti-switcher",
                comConf: {
                  autoSplitValue: false,
                  options: [
                    {value: "[0, 600]",    text:"i18n:net-vod-du-short"},
                    {value: "(600, 4800]", text:"i18n:net-vod-du-tv"},
                    {value: "(4800, )",    text:"i18n:net-vod-du-long"},
                  ]
                }
              }]
          }
        }
      })
    },
    "sorter": {
      type: Object,
      default: ()=>({
        comType: "ti-combo-sorter",
        comConf: {
          options: [
            {value:"CreationTime", text:"i18n:net-ct"}]
        }
      })
    },
    "pageSize": {
      type: Number,
      default: 20
    },
    "multi": {
      type: Boolean,
      default: true
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //---------------------------------------------------
    ConfName() {
      return _.get(this.meta, "vodConfigName")
    },
    //---------------------------------------------------
    CmdPrefix() {
      if(this.ConfName) {
        return `aliyunvod ${this.ConfName}`
      }
      return "aliyunvod"
    },
    //---------------------------------------------------
    ThePageNumber() {
      return _.get(this.pager, "pn") || 1
    },
    //---------------------------------------------------
    ThePageSize() {
      return _.get(this.pager, "pgsz") || this.pageSize
    },
    //---------------------------------------------------
    WallItemDisplay() {
      return {
        key : "..",
        comType : 'ti-obj-thumb',
        comConf : it => ({
          id: it.videoId,
          title: it.title,
          preview: {
            type: "image",
            value: it.coverURL
          } 
        })
      }
    },
    //---------------------------------------------------
    GuiLayout(){
      return {
        type: "cols",
        border:true,
        blocks: [{
            type:"rows",
            size:"61.8%",
            border:true,
            blocks: [{
                type: "cols",
                size: ".44rem",
                blocks: [{
                    name: "filter",
                    flex: "both",
                    body: "pcFilter"
                  }, {
                    name: "sorter",
                    flex: "none",
                    body: "pcSorter"
                  }]
              }, {
                name: "list",
                body: "pcList"
              }, {
                name: "pager",
                size: 40,
                body: "pcPager"
              }]
          }, {
            icon: "zmdi-tv-alt-play",
            title: "i18n:video",
            name: "video",
            body: "pcVideo"
          }]
      }
    },
    //---------------------------------------------------
    GuiSchema() {
      return {
        pcFilter: {
          comType: this.filter.comType,
          comConf: _.assign({
            value: this.myFilter
          }, this.filter.comConf)
        },
        pcSorter: {
          comType: this.sorter.comType,
          comConf: _.assign({
            value: this.mySort
          }, this.sorter.comConf)
        },
        pcList: {
          comType: "ti-wall",
          comConf: {
            data: this.list,
            idBy: "videoId",
            multi: this.multi,
            display: this.WallItemDisplay
          }
        },
        pcPager: {
          comType : "ti-paging-jumper",
          comConf : {
            value : this.pager
          }
        },
        pcVideo: {
          comType: "net-aliyun-vod-video-info",
          comConf: {
            value: this.myCurrentVideo
          }
        }
      }
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods :{
    //---------------------------------------------------
    async OnFilterChange(filter) {
      this.myFilter = filter
      this.pager = _.assign({}, this.pager, {pn:1})
      await this.reloadVideos()
    },
    //---------------------------------------------------
    async OnSorterChange(sort) {
      this.mySort = sort
      this.pager = _.assign({}, this.pager, {pn:1})
      await this.reloadVideos()
    },
    //---------------------------------------------------
    async OnPagerChange(pg) {
      this.pager = _.assign({}, this.pager, pg)
      // Save pageSize
      if(this.meta) {
        let pgsz = _.get(pg, "pgsz");
        if(!Ti.Util.isNil(pgsz)) {
          Ti.Storage.session.setObject(this.meta.id, {pgsz})
        }
      }

      await this.reloadVideos()
    },
    //---------------------------------------------------
    async OnListSelect({currentId, checkedIds, checked}) {
      this.myCurrentId = currentId
      // Select some thing
      if(currentId) {
        this.myCurrentVideo = await this.reloadVideoInfo(currentId)
        this.$notify("change", {
          currentId  : this.myCurrentId,
          current    : this.myCurrentVideo,
          checkedIds, checked
        })
      }
      // Select nothing
      else {
        this.myCurrentVideo = null
        this.$notify("change", undefined)
      }
    },
    //---------------------------------------------------
    async OnVideoPreview({title, videoId, coverURL}={}){
      // Request the playAuth
      let playAuth = await this.requestPlayAuth(videoId)

      // Open player
      await Ti.App.Open({
        icon: "zmdi-tv-alt-play",
        title: `Preview: ${title}`,
        textOk: null,
        textCancel: "i18n:close",
        position: "top",
        width: "90%",
        height: "90%",
        comType: "NetAliyunVodVideoPlayer",
        comConf: {
          videoId, playAuth,
          coverUrl: coverURL
        },
        components: "@com:net/aliyun/vod/video/player"
      })
    },
    //---------------------------------------------------
    async requestPlayAuth(videoId) {
      this.reloading = true
      let cmds = [this.CmdPrefix, "playauth", videoId, "-cqn"]
      let reo = await Wn.Sys.exec2(cmds.join(" "), {as:"json"})
      this.reloading = false

      return reo.playAuth
    },
    //---------------------------------------------------
    async reloadVideoInfo(videoId) {
      this.reloading = true
      let cmds = [this.CmdPrefix, "video", videoId, "-cqn"]
      let reo = await Wn.Sys.exec2(cmds.join(" "), {as:"json"})
      this.reloading = false

      return reo
    },
    //---------------------------------------------------
    toAliyunTime(tm) {
      return 
    },
    //---------------------------------------------------
    toMatchStr(keyword, match={}) {
      let ss = []
      if(!Ti.S.isBlank(keyword)) {
        // ID
        if(/^[a-z0-9]{32}$/.test(keyword)) {
          ss.push(`VideoId = '${keyword}'`)
        }
        // Title
        else {
          ss.push(`Title in ('${keyword.replace(/'/g,"")}')`)
        }
      }

      // March
      _.forEach(match, (val, key)=>{
        if(Ti.Util.isNil(val)) {
          return
        }
        //......................................
        // Region
        if(_.isString(val) && /^[\[(].+[)\]]$/.test(val)) {
          ss.push(`${key}=${val}`)
        }
        //......................................
        // Time
        else if(/time/i.test(key)) {
          let tfmt = "yyyy-MM-dd'T'HH:mm:ss'Z'"
          let times = Ti.Types.formatDateTime(val, tfmt)
          times = _.concat(times)

          // All day
          if(times.length == 1) {
            times.push(times[0])
          }

          // Move the last date
          let lastDay = Ti.Types.toDate(times[1]).getTime() + 86400000;
          times[1] = Ti.Types.formatDateTime(lastDay, tfmt)
          
          // Add scope
          ss.push(`${key}=['${times[0]}', '${times[1]}')`)
        }
                //......................................
        // In list
        else if(_.isArray(val)) {
          let vv = _.map(val, v=> {
            if(_.isString(v))
              return  v.replace(/'/g,"")
            return v
          })
          ss.push(`${key} in (${vv.join(",")})`)
        }
        //......................................
        // String
        else if(_.isString(val)) {
          ss.push(`${key} in ('${val.replace(/'/g,"")}')`)
        }
        //......................................
        // Others
        else {
          ss.push(`${key} = ${val}`)
        }
      })
      return ss.join(" and ")
    },
    //---------------------------------------------------
    async reloadVideos() {
      this.reloading = true
      // prepare the command
      let cmds = [this.CmdPrefix]
      //.................................................
      cmds.push("search", "-fields", `'${this.fields}'`)
      //.................................................
      // Join the Filter: Match/keyword
      let keyword = _.get(this.myFilter, "keyword")
      let match = _.get(this.myFilter, "match")
      if(!_.isEmpty(match) || !Ti.Util.isNil(keyword)) {
        try{
          cmds.push("-match", `"${this.toMatchStr(keyword, match)}"`)
        }catch(E) {
          console.error(E)
        }
      }
      //.................................................
      // Join the Filter: Sort
      let sort = []
      _.forEach(this.mySort, (as, by)=>{
        sort.push(`${by}:${as>0?'ASC':'DESC'}`)
      })
      if(!_.isEmpty(sort)) {
        cmds.push("-sort ", `${sort.join(" ")}`)
      }
      //.................................................
      // Join paging
      cmds.push("-pn", this.ThePageNumber)
      cmds.push("-pgsz", this.ThePageSize)
      cmds.push("-as page -cqn")

      //console.log("reloadVideo", cmds.join(' '))
      //.................................................
      // Run
      let reo = await Wn.Sys.exec2(cmds.join(" "), {as:"json"})
      this.list  = reo.list
      this.pager = reo.pager
      this.scrollToken = reo.scrollToken

      // Mark
      this.reloading = false
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  mounted : function() {
    if(this.meta) {
      let pager = Ti.Storage.session.getObject(this.meta.id)
      if(pager) {
        let pgsz = _.get(pager, "pgsz");
        this.pager.pgsz = pgsz
      }
    }
    this.reloadVideos()
  }
  ///////////////////////////////////////////////////////
}
Ti.Preload("ti/com/net/aliyun/vod/manager/vod-manager.mjs", _M);
})();
//============================================================
// JOIN: net/aliyun/vod/manager/_com.json
//============================================================
Ti.Preload("ti/com/net/aliyun/vod/manager/_com.json", {
  "name" : "net-aliyun-vod-manager",
  "globally" : true,
  "template" : "./vod-manager.html",
  "mixins" : ["./vod-manager.mjs"],
  "components": [
    "@com:ti/wall",
    "@com:ti/combo/filter",
    "@com:ti/combo/sorter",
    "@com:ti/paging/jumper",
    "@com:net/aliyun/vod/video/info"
  ]
});
//============================================================
// JOIN: net/aliyun/vod/video/info/vod-video-info.html
//============================================================
Ti.Preload("ti/com/net/aliyun/vod/video/info/vod-video-info.html", `<div class="net-aliyun-vod-video-info"
  :class="TopClass">
  <!--
    Blank
  -->
  <ti-loading
    v-if="!hasVideo"
      icon="fas-hand-point-left"
      text="i18n:net-vod-video-nil"/>
  <!--
    Show Content
  -->
  <template v-else>
    <!--Preview-->
    <div class="as-preview">
      <img 
        class="ti-fill-parent"
        :src="VideoCoverURL"/>
      <div class="as-btn" @click.left="OnClickPreview">
        <i class="fas fa-play-circle"></i>
      </div>
    </div>
    <!--
      Detail info
    -->
    <div class="as-detail">
      <ti-form
        class="ti-cover-parent"
        spacing="tiny"
        :fields="FormFields"
        :data="value"/>
    </div>
  </template>
</div>`);
//============================================================
// JOIN: net/aliyun/vod/video/info/vod-video-info.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////////////////
  props : {
    "value": {
      type: Object,
      default: undefined
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //---------------------------------------------------
    hasVideo() {
      return this.value ? true : false
    },
    //---------------------------------------------------
    VideoCoverURL() {
      return _.get(this.value, "coverURL")
    },
    //---------------------------------------------------
    FormFields() {
      return [{
        title : "VideoID",
        name  : "videoId"
      }, {
        title : "Title",
        name  : "title"
      }, {
        title : "CateName",
        name  : "cateName"
      }, {
        title : "Description",
        name  : "description"
      }, {
        title : "Duration",
        name  : "duration"
      }, {
        title : "RegionId",
        name  : "regionId"
      }, {
        title : "Size",
        name  : "size"
      }, {
        title : "Status",
        name  : "status"
      }, {
        title : "Tags",
        name  : "tags"
      }, {
        title : "AuditStatus",
        name  : "auditStatus"
      }, {
        title : "DownloadSwitch",
        name  : "downloadSwitch"
      }, {
        title : "PreprocessStatus",
        name  : "preprocessStatus"
      }, {
        title : "CreateTime",
        name  : "createTime"
      }, {
        title : "ModifyTime",
        name  : "modifyTime"
      }]
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods :{
    //---------------------------------------------------
    OnClickPreview(){
      this.$notify("preview", this.value)
    }
    //---------------------------------------------------
  }
  ///////////////////////////////////////////////////////
}
Ti.Preload("ti/com/net/aliyun/vod/video/info/vod-video-info.mjs", _M);
})();
//============================================================
// JOIN: net/aliyun/vod/video/info/_com.json
//============================================================
Ti.Preload("ti/com/net/aliyun/vod/video/info/_com.json", {
  "name" : "NetAliyunVodVideoInfo",
  "globally" : true,
  "template" : "./vod-video-info.html",
  "mixins" : ["./vod-video-info.mjs"],
  "components": [
    "@com:ti/form"
  ]
});
//============================================================
// JOIN: net/aliyun/vod/video/player/vod-video-player.html
//============================================================
Ti.Preload("ti/com/net/aliyun/vod/video/player/vod-video-player.html", `<div class="net-vod-video-player"
  :class="TopClass">
  <div :id="PlayerID"></div>
</div>`);
//============================================================
// JOIN: net/aliyun/vod/video/player/vod-video-player.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////////////////
  props : {
    "autoplay": {
      type: Boolean,
      default: true
    },
    "videoId": {
      type: String,
      default: undefined
    },
    "coverUrl": {
      type: String,
      default: undefined
    },
    "playAuth": {
      type: String,
      default: undefined
    },
    "encryptType": {
      type: Number,
      default: undefined
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //---------------------------------------------------
    PlayerID() {
      let n = parseInt(Math.random()* 100000);
      return `ALIPLAYER_${n}`
    },
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods :{
    //---------------------------------------------------
    initPlayer() {
      if(!this.$player
        && this.playAuth
        && this.videoId
        && this.coverUrl) {

        // console.log("haha", {
        //   playAuth: this.playAuth,
        //   videoId: this.videoId,
        //   coverUrl: this.coverUrl
        // })

        this.$player = new Aliplayer({
          id: this.PlayerID,
          width: "100%",
          height: "100%",
          autoplay: this.autoplay,
          vid: this.videoId,
          cover: this.coverUrl,
          encryptType: this.encryptType,
          playauth : this.playAuth
        })
      }
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  watch: {
    // "playAuth": function() {
    //   this.$nextTick(()=>this.initPlayer())
    // },
    // "videoId": function() {
    //   this.$nextTick(()=>this.initPlayer())
    // },
    // "coverUrl": function() {
    //   this.$nextTick(()=>this.initPlayer())
    // }
  },
  ///////////////////////////////////////////////////////
  mounted: function(){
    this.initPlayer();
  }
  ///////////////////////////////////////////////////////
}
Ti.Preload("ti/com/net/aliyun/vod/video/player/vod-video-player.mjs", _M);
})();
//============================================================
// JOIN: net/aliyun/vod/video/player/_com.json
//============================================================
Ti.Preload("ti/com/net/aliyun/vod/video/player/_com.json", {
  "name" : "NetAliyunVodVideoPlayer",
  "globally" : true,
  "template" : "./vod-video-player.html",
  "mixins" : ["./vod-video-player.mjs"],
  "components": [
    
  ]
});
//============================================================
// JOIN: ti/actionbar/com/bar-item-action/bar-item-action.html
//============================================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-action/bar-item-action.html", `<div class="bar-item-action">
  <bar-item-info
    v-bind="this"
    @fire="OnFired"/>
</div>`);
//============================================================
// JOIN: ti/actionbar/com/bar-item-action/bar-item-action.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////
  inject: ["$bar"],
  ///////////////////////////////////////
  props : {
    //-----------------------------------
    // Same as <bar-item-info>
    //-----------------------------------
    "name": {
      type: String,
      default: undefined
    },
    "icon": {
      type: String,
      default: undefined
    },
    "hideIcon" : {
      type: Boolean,
      default: false
    },
    "text": {
      type: String,
      default: undefined
    },
    "tip": {
      type: String,
      default: undefined
    },
    "altDisplay" : {
      type: [Object, Array],
      default: ()=>[]
    },
    "enabled": {
      type: [String, Array, Object],
      default: undefined
    },
    "disabled": {
      type: [String, Array, Object],
      default: undefined
    },
    "highlight": {
      type: [String, Array, Object],
      default: undefined
    },
    "value" : {
      type: [Boolean, String, Number, Array],
      default: true
    },
    "depth": {
      type: Number,
      default: 0
    },
    "status" : {
      type : Object,
      default : ()=>({})
    },
    //-----------------------------------
    // Self Props
    //-----------------------------------
    "action" : {
      type : [String, Object, Function],
      default: undefined
    },
    "notify" : {
      type : [Boolean, String],
      default: false
    },
    "wait" : {
      type : Number,
      default: 0
    },
    "shortcut": {
      type: String,
      default: undefined
    }
  },
  ///////////////////////////////////////
  computed: {
    notifyName() {
      if(this.notify) {
        return _.isString(this.notify)
                ? this.notify
                : this.name;
      }
    }
  },
  ///////////////////////////////////////
  methods : {
    OnFired(val) {
      // Call Action
      if(this.action) {
        let app = Ti.App(this)
        let invoking = Ti.Shortcut.genActionInvoking(this.action, {
          $com : this.$bar.$parent,
          argContext: app.$state(),
          wait : this.wait
        })
        // Invoke it
        invoking()
      }

      // notify
      if(this.notifyName) {    
        this.$bar.notifyChange({
          name  : this.notifyName,
          value : val
        })
      }
    }
  },
  ///////////////////////////////////////
  mounted : function() {
    if(this.shortcut) {
      Ti.App(this).guardShortcut(this, this.shortcut, ()=>{
        return this.isEnabled
      })
    }
  },
  ///////////////////////////////////////
  destroyed : function(){
    if(this.shortcut) {
      Ti.App(this).pulloutShortcut(this)
    }
  }
  ///////////////////////////////////////
}
Ti.Preload("ti/com/ti/actionbar/com/bar-item-action/bar-item-action.mjs", _M);
})();
//============================================================
// JOIN: ti/actionbar/com/bar-item-action/_com.json
//============================================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-action/_com.json", {
  "name" : "bar-item-action",
  "template" : "./bar-item-action.html",
  "mixins"   : ["./bar-item-action.mjs"]
});
//============================================================
// JOIN: ti/actionbar/com/bar-item-group/bar-item-group.html
//============================================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-group/bar-item-group.html", `<div class="bar-item-group"
  :class="TopClass"
  @mouseenter.stop="OnMouseEnter"
  @mouseleave.stop="OnMouseLeave">
  <!--
    Info
  -->
  <bar-item-info
    v-if="hasInfo"
      v-bind="this"
      :value="collapse"
      :status="status"
      @fire="OnFired"/>
  <!--
    Group Children
  -->
  <template v-if="showChildren">
    <div v-if="isDepth1"
      class="as-mask"
      @click="doCollapse"></div>
    <div ref="children"
      v-if="showChildren"
        class="as-children"
        :style="ChildrenStyle"
        @click.left="doCollapse">
          <component 
            v-for="bi in items"
              :key="bi.key"
              :is="bi.comType"
              v-bind="bi.comConf"
              :depth="depth+1"
              :items="bi.items"
              :hide-icon="isChildrenWithoutIcon"
              :status="status"/>
    </div>
  </template>
</div>`);
//============================================================
// JOIN: ti/actionbar/com/bar-item-group/bar-item-group.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////
  inject: ["$bar"],
  ///////////////////////////////////////////
  provide : function(){
    return {depth: this.depth+1}
  },
  ///////////////////////////////////////
  data : ()=>({
    collapse : true,
    isDocked : false,
    barItems : []
  }),
  ///////////////////////////////////////
  props : {
    //-----------------------------------
    // Same as <bar-item-info>
    //-----------------------------------
    "name": {
      type: String,
      default: undefined
    },
    "icon": {
      type: String,
      default: undefined
    },
    "hideIcon" : {
      type: Boolean,
      default: false
    },
    "text": {
      type: String,
      default: undefined
    },
    "tip": {
      type: String,
      default: undefined
    },
    "altDisplay" : {
      type: [Object, Array],
      default: ()=>[]
    },
    "enabled": {
      type: [String, Array, Object],
      default: undefined
    },
    "disabled": {
      type: [String, Array, Object],
      default: undefined
    },
    "highlight": {
      type: [String, Array, Object],
      default: undefined
    },
    "depth": {
      type: Number,
      default: 0
    },
    "status" : {
      type : Object,
      default : ()=>({})
    },
    //-----------------------------------
    // Self Props
    //-----------------------------------
    "items": {
      type: Array,
      default: ()=>[]
    },
    "autoExtend": {
      type: Boolean,
      default: false
    }
  },
  ///////////////////////////////////////////
  computed : {
    //---------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-collapse" : this.collapse,
        "is-extended" : !this.collapse
      },`is-depth-${this.depth}`)
    },
    //---------------------------------------
    isDepth0() {return 0 == this.depth},
    isDepth1() {return 1 == this.depth},
    isDepthX() {return this.depth > 1},
    //---------------------------------------
    hasInfo() {
      return this.icon || this.text
    },
    //---------------------------------------
    isChildrenWithoutIcon() {
      for(let it of this.items) {
        if(it.comConf && it.comConf.icon) {
          return false
        }
      }
      return true
    },
    //---------------------------------------
    showChildren() {
      return this.isDepth0 || !this.collapse
    },
    //---------------------------------------
    ChildrenStyle() {
      if(!this.isDepth0) {
        if(!this.isDocked) {
          return {"visibility": "hidden"}
        }
      }
    }
    //---------------------------------------
  },
  ///////////////////////////////////////////
  methods : {
    //---------------------------------------
    OnMouseEnter() {
      if(this.isDepthX) {
        this.doExtend()
      }
    },
    //---------------------------------------
    OnMouseLeave() {
      if(this.isDepthX) {
        this.doCollapse()
      }
    },
    //---------------------------------------
    OnFired(collapse) {
      if(collapse) {
        this.doExtend()
      } else {
        this.doCollapse()
      }
    },
    //---------------------------------------
    doExtend() {
      this.collapse = false
      //this.$bar.notifyChange({name:this.name, value:true})
    },
    //---------------------------------------
    doCollapse() {
      this.collapse = true
      this.isDocked = false
      //this.$bar.notifyChange({name:this.name, value:false})
    },
    //---------------------------------------
    doDockChildren() {
      this.$nextTick(()=>{
        if(this.$refs.children && this.depth>0) {
          Ti.Dom.dockTo(this.$refs.children, this.$el, {
            mode : this.isDepthX ? "V" : "H",
            position : "fixed",
            space: this.isDepthX ? {x:1} : {y:3}
          })
          _.delay(()=>{
            this.isDocked = true
          }, 5)
        }
      })
    }
    //---------------------------------------
  },
  ///////////////////////////////////////////
  watch: {
    "collapse": "doDockChildren"
  },
  ///////////////////////////////////////////
  mounted: function(){
    this.doDockChildren()
    this.$bar.allocGroup(this)
  },
  ///////////////////////////////////////////
  beforeDestroy: function() {
    this.$bar.freeGroup(this)
  }
  ///////////////////////////////////////////
}
Ti.Preload("ti/com/ti/actionbar/com/bar-item-group/bar-item-group.mjs", _M);
})();
//============================================================
// JOIN: ti/actionbar/com/bar-item-group/_com.json
//============================================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-group/_com.json", {
  "name" : "bar-item-group",
  "template" : "./bar-item-group.html",
  "mixins"   : ["./bar-item-group.mjs"]
});
//============================================================
// JOIN: ti/actionbar/com/bar-item-info/bar-item-info.html
//============================================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-info/bar-item-info.html", `<div class="bar-item-info"
  :class="TopClass"
  @click.left="OnClickTop">
  <!--
    Icon
  -->
  <span
    v-if="isShowIcon"
      class="as-icon">
      <ti-icon
        v-if="hasIcon" 
          :value="CurrentDisplay.icon"/>
  </span>
  <!--
    Text
  -->
  <span
    v-if="CurrentDisplay.text"
      class="as-text"
        >{{CurrentDisplay.text|i18n}}</span>
  <!--
    Shortcut
  -->
  <span
    v-if="isShowShortcut"
      class="as-shortcut">{{shortcut}}</span>
</div>`);
//============================================================
// JOIN: ti/actionbar/com/bar-item-info/bar-item-info.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////
  inject: ["$bar"],
  ///////////////////////////////////////
  props : {
    "name": {
      type: String,
      default: undefined
    },
    "icon": {
      type: String,
      default: undefined
    },
    "hideIcon" : {
      type: Boolean,
      default: false
    },
    "text": {
      type: String,
      default: undefined
    },
    "tip": {
      type: String,
      default: undefined
    },
    "shortcut": {
      type: String,
      default: undefined
    },
    "altDisplay" : {
      type: [Object, Array],
      default: ()=>[]
    },
    "enabled": {
      type: [Boolean, String, Array, Object],
      default: undefined
    },
    "disabled": {
      type: [Boolean, String, Array, Object],
      default: undefined
    },
    "highlight": {
      type: [Boolean, String, Array, Object],
      default: undefined
    },
    "value" : {
      type: [Boolean, String, Number, Array],
      default: undefined
    },
    "depth": {
      type: Number,
      default: 0
    },
    "status" : {
      type : Object,
      default : ()=>({})
    }
  },
  ///////////////////////////////////////
  computed : {
    //-----------------------------------
    TopClass() {
      return this.getTopClass({
        "is-enabled"  : this.isEnabled,
        "is-disabled" : this.isDisabled,
        "is-highlight": this.isHighlight,
        "is-top" : this.depth == 1,
        "is-sub" : this.depth > 1,
        "has-icon" : this.icon ? true : false,
        "no-icon"  : this.icon ? false : true,
        "show-icon": this.isShowIcon,
        "hide-icon": !this.isShowIcon
      }, `is-depth-${this.depth}`)
    },
    //-----------------------------------
    AltDisplay() {
      if(_.isArray(this.altDisplay)) {
        return this.altDisplay
      }
      return this.altDisplay
        ? [this.altDisplay]
        : []
    },
    //-----------------------------------
    isEnabled() {
      if(!Ti.Util.isNil(this.enabled)) {
        return this.isMatchStatus(this.enabled)
      }
      if(!Ti.Util.isNil(this.disabled)) {
        if(this.isMatchStatus(this.disabled)) {
          return false
        }
      }
      return true
    },
    //-----------------------------------
    isDisabled() {
      return !this.isEnabled
    },
    //-----------------------------------
    isHighlight() {
      if(!Ti.Util.isNil(this.highlight)) {
        return this.isMatchStatus(this.highlight)
      }
      return false
    },
    //-----------------------------------
    isShowShortcut() {
      return this.shortcut && this.depth > 1
    },
    //-----------------------------------
    isShowIcon() {
      return !this.hideIcon || this.hasIcon
    },
    //-----------------------------------
    hasIcon() {
      return this.CurrentDisplay.icon ? true : false
    },
    //-----------------------------------
    CurrentDisplay() {
      // if("bold" == this.name)
      //   console.log("CurrentDisplay", this.name)
      // Prepare default
      let dis =  {
        icon : this.icon,
        text : this.text,
        tip  : this.tip,
        value: this.value
      }
      // Alt Display
      if(!_.isEmpty(this.AltDisplay)) {
        for(let alt of this.AltDisplay) {
          let mat = alt.match || this.name
          if(this.isMatchStatus(mat)) {
            _.assign(dis, _.pick(alt, [
              "icon", "text", "tip", "value"
            ]))
            break
          }
        }
      }
      // Done
      return dis
    },
    //-----------------------------------
    TheValues() {
      let val = this.CurrentDisplay.value
      // Bool
      if(_.isBoolean(val)) {
        return [val, !val]
      }
      // Array
      if(_.isArray(val))
        return val
      // Normal value
      return [val]
    }
    //-----------------------------------
  },
  ///////////////////////////////////////
  methods : {
    //---------------------------------------
    OnClickTop() {
      if(!this.isDisabled) {
        let val = this.isHighlight
          ? _.last(this.TheValues)
          : _.first(this.TheValues)
        
        this.$emit('fire', val)
      }
    },
    //---------------------------------------
    isMatchStatus(mat) {
      if(_.isBoolean(mat)) {
        return mat
      }
      // Key | `"saving"`
      if(_.isString(mat)) {
        return _.get(this.status, mat) ? true : false
      }
      // KeySet | `["saving","changed"]`
      else if(_.isArray(mat)) {
        for(let k of mat) {
          if(!_.get(this.status, k)) {
            return false
          }
        }
        return true
      }
      // Complex match
      else if(_.isPlainObject(mat)) {
        // Validate | `{validate:{..}}`
        if(mat.validate) {
          return Ti.Validate.match(this.status, mat.validate)
        }
        // Match  | `{saving:true}`
        return _.isMatch(this.status, mat)
      }
      return false
    }
    //---------------------------------------
  }
  ///////////////////////////////////////
}
Ti.Preload("ti/com/ti/actionbar/com/bar-item-info/bar-item-info.mjs", _M);
})();
//============================================================
// JOIN: ti/actionbar/com/bar-item-info/_com.json
//============================================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-info/_com.json", {
  "name" : "bar-item-info",
  "template" : "./bar-item-info.html",
  "mixins"   : ["./bar-item-info.mjs"]
});
//============================================================
// JOIN: ti/actionbar/com/bar-item-line/bar-item-line.html
//============================================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-line/bar-item-line.html", `<div class="bar-item-line"
  :class="TopClass"></div>`);
//============================================================
// JOIN: ti/actionbar/com/bar-item-line/bar-item-line.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////
  inject: ["$bar"],
  ///////////////////////////////////////
  props : {
    "depth": {
      type: Number,
      default: 0
    }
  },
  ///////////////////////////////////////
  computed : {
    //-----------------------------------
    TopClass() {
      return this.getTopClass({
        "is-top" : this.depth == 1,
        "is-sub" : this.depth > 1
      })
    }
    //-----------------------------------
  }
  ///////////////////////////////////////
}
Ti.Preload("ti/com/ti/actionbar/com/bar-item-line/bar-item-line.mjs", _M);
})();
//============================================================
// JOIN: ti/actionbar/com/bar-item-line/_com.json
//============================================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-line/_com.json", {
  "name" : "bar-item-line",
  "template" : "./bar-item-line.html",
  "mixins"   : ["./bar-item-line.mjs"]
});
//============================================================
// JOIN: ti/actionbar/ti-actionbar.html
//============================================================
Ti.Preload("ti/com/ti/actionbar/ti-actionbar.html", `<div class="ti-actionbar"
  :class="TopClass"
  v-ti-activable>
  <bar-item-group 
    name="Ti_ActionBar_Root_Group"
    :items="BarItems"
    :status="status"/>
</div>`);
//============================================================
// JOIN: ti/actionbar/ti-actionbar.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////
  provide : function(){
    return {
      "$bar"  : this,
      "depth" : 0
    }
  },
  ///////////////////////////////////////////
  data: ()=>({
    mySeq : 0,
    myGroups: {}
  }),
  ///////////////////////////////////////////
  props : {
    "items" :{
      type : Array,
      default : ()=>[]
    },
    "align" : {
      type : String,
      default : "left",
      validator : v => /^(left|right|center)$/.test(v)
    },
    "status" : {
      type : Object,
      default : ()=>({})
    }
  },
  ///////////////////////////////////////////
  computed : {
    //---------------------------------------
    TopClass() {
      return this.getTopClass(`align-${this.align}`)
    },
    //---------------------------------------
    BarItems() {
      //console.log("EvalBarItems")
      let list = []
      _.forEach(this.items, it => {
        let bi = this.evalBarItem(it)
        if(bi) {
          list.push(bi)
        }
      })
      return list
    }
    //---------------------------------------
  },
  ///////////////////////////////////////////
  methods : {
    //---------------------------------------
    allocGroup($big) {
      //console.log("allocGroup", $big.name)
      this.myGroups[$big.name] = $big
    },
    //---------------------------------------
    freeGroup($big) {
      //console.log("freeGroup", $big.name)
      delete this.myGroups[$big.name]
    },
    //---------------------------------------
    notifyChange({name, value}={}) {
      if(name) {
        this.$notify("change", {name, value})
      }
    },
    //---------------------------------------
    evalBarItem(it){
      let type = this.getItemType(it)
      let key = this.getItemKey(type)
      let bi = {
        type, key,
        comType: `bar-item-${type}`,
        comConf: _.defaults(_.omit(it, "items"), {
            name: key
          })
      }
      if("group" == type && _.isArray(it.items)) {
        bi.items = []
        for(let child of it.items) {
          let ci = this.evalBarItem(child)
          bi.items.push(ci)
        }
      }
      return bi
    },
    //---------------------------------------
    getItemType(bi) {
      if(bi.type) {
        return _.toLower(bi.type)
      }
      // Line
      if(_.isEmpty(bi)) {
        return "line"
      }
      // Group
      else if(_.isArray(bi.items)) {
        return "group"
      }
      // TODO support switcher
      // Default is action
      return "action"
    },
    //---------------------------------------
    getItemKey(type="BarItem") {
      return `${type}-${this.mySeq++}`
    },
    //---------------------------------------
    collapseAllGroup() {
      _.forEach(this.myGroups, $big=>{
        $big.doCollapse()
      })
    },
    //---------------------------------------
    __ti_shortcut(uniqKey) {
      Ti.InvokeBy({"ESCAPE":()=>this.collapseAllGroup()}, uniqKey)
    }
    //---------------------------------------
  },
  ///////////////////////////////////////////
  mounted: function(){
    Ti.Viewport.watch(this, {resize:()=>this.collapseAllGroup()})
  },
  ///////////////////////////////////////////
  beforeDestroy: function(){
    Ti.Viewport.unwatch(this)
  }
  ///////////////////////////////////////////
}
Ti.Preload("ti/com/ti/actionbar/ti-actionbar.mjs", _M);
})();
//============================================================
// JOIN: ti/actionbar/_com.json
//============================================================
Ti.Preload("ti/com/ti/actionbar/_com.json", {
  "name" : "ti-actionbar",
  "globally" : true,
  "template" : "./ti-actionbar.html",
  "mixins" : ["./ti-actionbar.mjs"],
  "components" : [
    "./com/bar-item-action",
    "./com/bar-item-group",
    "./com/bar-item-line",
    "./com/bar-item-info"
  ]
});
//============================================================
// JOIN: ti/button/ti-button.html
//============================================================
Ti.Preload("ti/com/ti/button/ti-button.html", `<div class="ti-button"
  :class="topClass">
  <ul>
    <li v-for="it in items"
      :key="it.name"
      :class="it.buttonClass"
      @click="onClickItem(it)">
      <!--
        Icon
      -->
      <ti-icon v-if="it.icon"
        :value="it.icon"/>
      <!--
        Text
      -->
      <span v-if="it.text"
        class="it-text">{{it.text|i18n}}</span>
    </li>
  </ul>
</div>`);
//============================================================
// JOIN: ti/button/ti-button.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  /////////////////////////////////////////
  props : {
    "size" :{
      type : String,
      default : "normal",
      validator: v=>/^(big|normal|small|tiny)$/.test(v)
    },
    // center|top|left|right|bottom|
    // left-top|right-top|bottom-left|bottom-right
    "align" :{
      type : String,
      default : "center"
    },
    "setup" : {
      type : [Array, Object],
      default : ()=>[]
    }
  },
  //////////////////////////////////////////
  computed : {
    //......................................
    topClass() {
      return Ti.Css.mergeClassName([
        `is-${this.size}`, `at-${this.align}`
      ], this.className)
    },
    //......................................
    items() {
      let list = [].concat(this.setup)
      let re = []
      _.forEach(list, (li, index)=>{
        let it = {}
        it.name = li.name || `item-${index}`
        it.eventName = li.eventName || it.name
        it.payload = li.payload
        it.icon = li.icon
        it.text = li.text
        it.disabled = li.disabled
        it.buttonClass = {
          [`as-do-${it.name}`] : true,
          "is-enabled"      : !li.disabled  ? true : false,
          "is-disabled"     : li.disabled   ? true : false,
          "is-invert-icon"  : li.invertIcon ? true : false 
        }
        re.push(it)
      })
      return re
    }
    //......................................
  },
  //////////////////////////////////////////
  methods :{
    onClickItem(it) {
      if(!it.disabled) {
        this.$notify(it.eventName, it.payload)
      }
    }
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/ti/button/ti-button.mjs", _M);
})();
//============================================================
// JOIN: ti/button/_com.json
//============================================================
Ti.Preload("ti/com/ti/button/_com.json", {
  "name" : "ti-button",
  "globally" : true,
  "template" : "./ti-button.html",
  "mixins"   : ["./ti-button.mjs"],
  "components" : []
});
//============================================================
// JOIN: ti/calendar/ti-calendar.html
//============================================================
Ti.Preload("ti/com/ti/calendar/ti-calendar.html", `<div class="ti-calendar">
  <!--
    Heading
  -->
  <div class="as-head">
    <!--
      Switcher
    -->
    <div class="as-switcher" :class="switcherClass">
      <div class="as-title">
        <ti-input-month
          width="100%"
          height=".36rem"
          icon="far-calendar-alt"
          :hide-border="true"
          :value="theViewDate"
          :format="theViewRangeText"
          :editable="monthEditable"
          :begin-year="beginYear"
          :end-year="endYear"
          @change="onMonthChanged"/>
      </div>
      <div class="go-btn to-prev-block" @click="gotoMatrix(-1)">
        <ti-icon value="zmdi-chevron-left"/>
      </div>
      <div class="go-btn go-today" @click="gotoToday">
        <span>{{'today'|i18n}}</span>
      </div>
      <div class="go-btn to-next-block" @click="gotoMatrix(1)">
        <ti-icon value="zmdi-chevron-right"/>
      </div>
    </div>
    <!--
      Change Mode
      TODO maybe should support mode changing here
    -->
    
  </div>
  <!--
    Day cells
  -->
  <div class="as-matrix-table">
    <div v-for="matrix in dateMatrixList"
      class="as-matrix">
      <table>
        <thead>
          <th v-for="wt in weekTitles">{{wt.title}}</th>
        </thead>
        <tbody>
          <tr v-for="row in matrix">
            <td v-for="cell in row" :class="cell.type">
              <slot name="cell">
                <span class="as-date-item"
                  @click="onClickCell(cell)">{{cell.text}}</span>
              </slot>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>`);
//============================================================
// JOIN: ti/calendar/ti-calendar.mjs
//============================================================
(function(){
///////////////////////////////////////////
const _M = {
  /////////////////////////////////////////
  data: ()=>({
    "view_date" : null
  }),
  /////////////////////////////////////////
  props : {
    "value" : {
      type : [String, Number, Date, Array],
      default : null
    },
    /***
     * The value represent a **Date Range**.
     * It must be a Array with two elements, first one is begin date
     * of the range, the last one is the end of the range.
     * Both the two date is includsive of the range.
     * 
     * If the value passed in is not array, It will be taken as 
     * the begin date
     */
    "range" : {
      type : Boolean,
      default : false
    },
    // Which day is first day
    //  0 - Sunday
    //  1 - Monday
    "firstDayInWeek" : {
      type : [Number, String],  // 0, or "Sun" or "Sunday"
      default : 0
    },
    /***
     * How to decide the matrix end date
     * 
     * - "monthly" : show whole month
     * - "weekly"  : show few weeks defined by `matrixCount`
     */ 
    "matrixMode" : {
      type : String,
      default : "monthly"
    },
    /***
     * Define the matrix block count by `matrixMode`
     * 
     * - "monthly" - how many calenars should be shown in same time
     * - "weekly"  - how many week should be shown in block
     */
    "matrixCount" : {
      type : Number,
      default : 1
    },
    // true : can write time directly
    "monthEditable" : {
      type : Boolean,
      default : true
    },
    "monthFormat" : {
      type : String,
      default : "yyyy-MM-dd" 
    },
    "beginYear" : {
      type : [Number, String],
      default : 1970
    },
    "endYear" : {
      type : [Number, String],
      default : (new Date().getFullYear()+1)
    }
  },
  //////////////////////////////////////////
  watch : {
    // If the value changed outside,
    // and if the value our-of-view
    // It should auto switch the viewDate
    "value" : function(val) {
      if(val) {
        let [v0] = [].concat(val)
        let dt = Ti.Types.toDate(v0)
        let ms = dt.getTime()
        if(!_.inRange(ms, ...this.theMatrixRangeInMs)) {
          this.view_date = null
        }
      }
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    switcherClass() {
      if(this.isMonthly && this.matrixCount>1) {
        return "sz-double"
      }
    },
    //--------------------------------------
    isMonthly() {
      return "monthly" == this.matrixMode
    },
    isWeekly() {
      return "weekly" == this.matrixMode
    },
    //--------------------------------------
    today() {
      return new Date()
    },
    todayName() {
      return Ti.Types.formatDate(this.today, "yyyy-MM-dd")
    },
    //--------------------------------------
    theDate() {
      if(_.isArray(this.value)) {
        if(this.value.length > 0) {
          return Ti.Types.toDate(this.value[0])
        }
        return null
      }
      return Ti.Types.toDate(this.value, null)
    },
    //--------------------------------------
    theRangeInMs() {
      // Move to 00:00:00
      let dt0 = new Date(this.theDate)
      // Define the dt1
      let dt1;
      if(_.isArray(this.value) && this.value.length > 1) {
        dt1 = Ti.Types.toDate(this.value[1])
      }
      // The End of the Day
      else {
        dt1 = new Date(dt0)
      }
      // Make the range
      let msRange = [dt0.getTime(), dt1.getTime()].sort()

      // dt0 start of the day
      dt0 = Ti.DateTime.setTime(new Date(msRange[0]))
      // dt1 end of the day
      dt1 = Ti.DateTime.setDayLastTime(new Date(msRange[1]))

      // rebuild the range
      return [dt0.getTime(), dt1.getTime()]
    },
    //--------------------------------------
    theRangeInText() {
      return Ti.Types.formatDate(this.theRangeInMs, "yyyy-MM-dd")
    },
    //--------------------------------------
    theRangeBeginDate() {
      return new Date(this.theRangeInMs[0])
    },
    //--------------------------------------
    theRangeEndDate() {
      return new Date(this.theRangeInMs[1])
    },
    //--------------------------------------
    theMatrixRangeInMs() {
      let c0 = this.dateMatrixList[0][0][0]
      let i = this.dateMatrixList.length - 1
      let y = this.dateMatrixList[i].length - 1
      let x = this.dateMatrixList[i][y].length - 1
      let c1 = this.dateMatrixList[i][y][x]

      let dt0 = new Date(c0.raw)
      let dt1 = new Date(c1.raw)
      Ti.DateTime.setTime(dt0)
      Ti.DateTime.setDayLastTime(dt1)
      return [dt0.getTime(), dt1.getTime()]
    },
    //--------------------------------------
    theMatrixRange() {
      let dt0 = new Date(this.theMatrixRangeInMs[0])
      let dt1 = new Date(this.theMatrixRangeInMs[1])
      return [dt0, dt1]
    },
    //--------------------------------------
    theViewRange() {
      let i = this.dateMatrixList.length - 1
      let y = this.dateMatrixList[i].length - 1
      let x = this.dateMatrixList[i][y].length - 1
      let c1 = this.dateMatrixList[i][y][x]
      while(c1.type!="in-month" && x>0) {
        c1 = this.dateMatrixList[i][y][--x]
      }

      let dt0 = new Date(this.theViewDate)
      let dt1 = new Date(c1.raw)
      Ti.DateTime.setTime(dt0)
      Ti.DateTime.setDayLastTime(dt1)
      return [dt0, dt1]
    },
    //--------------------------------------
    theViewRangeText() {
      let dt0 = this.theViewRange[0]
      if(this.isMonthly && this.matrixCount > 1) {
        let dt1 = this.theViewRange[1]
        let yy0 = dt0.getFullYear()
        let MM0 = dt0.getMonth()
        let yy1 = dt1.getFullYear()
        let MM1 = dt1.getMonth()
        let MA0 = Ti.DateTime.getMonthAbbr(MM0)
        let MA1 = Ti.DateTime.getMonthAbbr(MM1)
        let MT0 = Ti.I18n.get(MA0)
        let MT1 = Ti.I18n.get(MA1)

        MM0++;  MM1++;  // Month change to 1 base

        let vars = {
          yy0, yy1,
          MM0, MM1,
          MA0, MA1,
          MT0, MT1
        }
        // Beyound year
        if(yy0 != yy1) {
          return Ti.I18n.getf("cal.m-range-beyond-years", vars)
        }
        // Beyound month
        if(MM0 != MM1) {
          return Ti.I18n.getf("cal.m-range-beyond-months", vars)
        }
      }
      return Ti.Types.formatDate(dt0, this.monthFormat)
    },
    //--------------------------------------
    theDateName() {
      return Ti.Types.formatDate(this.theDate, "yyyy-MM-dd")
    },
    //--------------------------------------
    theViewDate() {
      return this.view_date || this.theDate || new Date()
    },
    //--------------------------------------
    theViewYear() {
      return this.theViewDate.getFullYear()
    },
    //--------------------------------------
    theViewMonth() {
      return this.theViewDate.getMonth()
    },
    theViewMonthAbbr() {
      return Ti.DateTime.getMonthAbbr(this.theViewMonth)
    },
    //--------------------------------------
    weekTitles() {
      let day = this.firstDayInWeek
      // Week day index
      if(_.isNumber(day)) {
        day = _.clamp(day, 0, 6)
      }
      // Week day abbr or name
      else if(_.isString(day)) {
        let dayName = _.lowerCase(day)
        day = Ti.DateTime.getWeekDayValue(dayName, 0)
      }
      // Join list
      let list = []
      for(let i=0; i<7; i++) {
        list.push({
          day,
          title : Ti.I18n.get(["cal","week",day])
        })
        if(++day >=7 ) {
          day = 0
        }
      }
      // Return it
      return list
    },
    //--------------------------------------
    weekFirstDayValue() {
      if(_.isString(this.firstDayInWeek)) {
        return Ti.DateTime.getWeekDayValue(this.firstDayInWeek, 0)
      }
      return _.clamp(this.firstDayInWeek, 0, 6)
    },
    //--------------------------------------
    dateMatrixList() {
      let beginDate = new Date(this.theViewDate)
      //............................
      let list = []
      let theYear  = this.theViewYear
      let theMonth = this.theViewMonth
      // Monthly: may create multi-matrix
      if(this.isMonthly) {
        for(let i=0; i<this.matrixCount; i++) {
          let {matrix, lastDate} = this.createMatrix(
            beginDate, theYear, theMonth
          )
          list.push(matrix)
          beginDate = Ti.DateTime.moveDate(new Date(lastDate), 1)
          theMonth ++
          if(theMonth >= 12) {
            theMonth = 0
            theYear ++
          }
        }
      }
      // Weekly
      else {
        let {matrix} = this.createMatrix(beginDate)
        list.push(matrix)
      }
      return list
      //............................
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    /***
     * Create a date matrix
     */
    createMatrix(beginDate, theYear, theMonth) {
      // Move to the first date in month
      if(this.isMonthly) {
        beginDate.setDate(1)
      }
      //............................
      // Move the first day of week
      let wfdv = this.weekFirstDayValue
      while(beginDate.getDay() > wfdv) {
        Ti.DateTime.moveDate(beginDate, -1)
      }
      while(beginDate.getDay() < wfdv) {
        Ti.DateTime.moveDate(beginDate, 1)
      }
      //............................
      // Build the matrix
      let len = 7
      let y = 0
      let matrix = []
      let lastDate = null
      while(true) {
        let row = []
        for(let x=0; x<len; x++) {
          let index = y*len + x
          lastDate = Ti.DateTime.createDate(beginDate, index)
          let month = lastDate.getMonth()
          let date  = lastDate.getDate()
          let name  = Ti.Types.formatDate(lastDate, "yyyy-MM-dd")
          let isSelected = false
          // Range: match begin/end date
          if(this.range) {
            isSelected = _.inRange(lastDate.getTime(), ...this.theRangeInMs)
          }
          // Single: match the date
          else {
            isSelected = name == this.theDateName
          }
          let type = {
            "is-prev"  : month < theMonth,
            "is-next"  : month > theMonth,
            "in-month" : month == theMonth,
            "is-today" : this.todayName == name,
            "is-selected" : isSelected
          }
          // Eval displayText in cell
          // The first day of month should the Abbr
          let text = ""+date
          if(1 == date && (
              (this.isMonthly && this.matrixCount>1)
              || this.isWeekly
          )) {
            let abbr = Ti.DateTime.getMonthAbbr(month)
            text = Ti.I18n.get(`cal.abbr.${abbr}`)
          }
          // Join to the row
          row.push({
            x, y, index, type, name, text,
            year  : lastDate.getFullYear(),
            month,
            day   : lastDate.getDay(),
            date  : lastDate.getDate(),
            raw   : lastDate
          })
        }
        // Move to next row
        y++
        // End by week count
        if(this.isWeekly) {
          let count = _.clamp(this.matrixCount, 1, 100)
          if(y>count)
            break
        }
        // End by next month
        else if(this.isMonthly) {
          if((
              row[0].year  == theYear &&
              row[0].month  > theMonth
            ) || row[0].year > theYear) {
            break
          }
        }
        // Invalid mode, break now
        else {
          break
        }
        // Join to matrix
        matrix.push(row)
      }
      //............................
      return {
        matrix, lastDate
      }
    },
    //--------------------------------------
    gotoToday() {
      this.view_date = new Date()
    },
    //--------------------------------------
    gotoMatrix(offset=0) {
      let cd = this.theViewDate
      let dt = new Date(cd.getFullYear(), cd.getMonth(), cd.getDate())

      // Monthly
      if(this.isMonthly) {
        Ti.DateTime.moveMonth(dt, offset)
      }
      // Weekly
      else if(this.isWeekly) {
        Ti.DateTime.moveDate(dt, offset*7*this.matrixCount)
      }
      // Invalid mode
      else {
        return
      }

      // Switch the current view
      this.view_date = dt
    },
    //--------------------------------------
    onMonthChanged(month) {
      let dt = Ti.Types.toDate(month)
      this.view_date = dt
    },
    //--------------------------------------
    onClickCell(cell) {
      // Range
      if(this.range) {
        // If array ...
        if(_.isArray(this.value)) {
          // Finish the range
          if(this.value.length == 1) {
            let msRange = [cell.raw.getTime(), this.theDate.getTime()].sort()
            let dt0 = Ti.Types.toDate(msRange[0])
            let dt1 = Ti.Types.toDate(msRange[1])
            this.$notify("change", [dt0, dt1])
          }
          // Start a new range
          else {
            this.$notify("change", [cell.raw])
          }
        }
        // Has Value
        else {
          this.$notify("change", [cell.raw])
        }
      }
      // Single value
      else {
        this.$notify("change", cell.raw)
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  mounted : function() {
    this.view_date = this.theDate || new Date()
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/ti/calendar/ti-calendar.mjs", _M);
})();
//============================================================
// JOIN: ti/calendar/_com.json
//============================================================
Ti.Preload("ti/com/ti/calendar/_com.json", {
  "name" : "ti-calendar",
  "globally" : true,
  "template" : "./ti-calendar.html",
  "mixins"   : ["./ti-calendar.mjs"],
  "components" : [
    "@com:ti/input/month"]
});
//============================================================
// JOIN: ti/chart/g2/ti-chart-g2.html
//============================================================
Ti.Preload("ti/com/ti/chart/g2/ti-chart-g2.html", `<div class="ti-chart ti-chart-g2">
  <section ref="chart"
    class="chart-main ti-fill-parent"></section>
</div>`);
//============================================================
// JOIN: ti/chart/g2/ti-chart-g2.mjs
//============================================================
(function(){
function draw_chart({
  $refs,
  padding,
  data,
  setup=_.identity,
  autoSource
}={}) {
  let $container = $refs.chart
  //console.log(data)
  let width  = G2.DomUtil.getWidth($container)
  let height = G2.DomUtil.getHeight($container)
  //.......................................
  // Create The Chart
  let chart = new G2.Chart({
    container: $container,
    padding, width, height
  })
  //.......................................
  // Set datasource
  if(autoSource && data && !_.isEmpty(data))
    chart.source(data)
  //.......................................
  // Setup chart
  setup(chart, data, {
    width, height
  })
  //.......................................
  // 渲染并返回
  chart.render()
  return chart
}
///////////////////////////////////////////
const _M = {
  /////////////////////////////////////////
  inheritAttrs : false,
  /////////////////////////////////////////
  props : {
    "data" : {
      type : Array,
      default : ()=>[]
    },
    "padding" : {
      type : [Number, Array, String],
      default : "auto"
    },
    // Function(chart, data):void
    "setup" : {
      type : Function,
      default : _.identity
    },
    "autoSource" : {
      type : Boolean,
      default : true
    }
  },
  //////////////////////////////////////////
  watch : {
    "data" : function() {this.debounceRedrawChart()},
  },
  //////////////////////////////////////////
  computed : {
  },
  //////////////////////////////////////////
  methods : {
    //......................................
    redrawChart() {
      if(!_.isElement(this.$refs.chart)) {
        return
      }
      if(this.__g2_chart) {
        try{
          this.__g2_chart.destroy()
        }catch(E){}
        $(this.$refs.chart).empty()
      }
      this.__g2_chart = draw_chart(this)
    },
    drawAll() {
      //console.log("I am drawAll")
      this.$nextTick(()=>{
        this.redrawChart()
      })
    }
    //......................................
  },
  /////////////////////////////////////////
  mounted : function() {
    this.drawAll()
    this.debounceRedrawChart = _.debounce(()=>{
      this.redrawChart()
    }, 500)
    this.debounceRedrawAll = _.debounce(()=>{
      this.drawAll()
    }, 500)
    // 监控窗口尺寸变化
    Ti.Viewport.watch(this, {
      resize: function() {
        let chart = this.__g2_chart
        if(chart) {
          this.$notify("before_resize")
          let $container = this.$refs.chart
          let width  = G2.DomUtil.getWidth($container)
          let height = G2.DomUtil.getHeight($container)
          chart.changeWidth(width)
          chart.changeHeight(height)
        }
      }
    })
  },
  beforeDestroy : function(){
    if(this.__g2_chart) {
      this.__g2_chart.destroy()
    }
    // 解除窗口监控
    Ti.Viewport.unwatch(this)
  }
  /////////////////////////////////////////
}
Ti.Preload("ti/com/ti/chart/g2/ti-chart-g2.mjs", _M);
})();
//============================================================
// JOIN: ti/chart/g2/_com.json
//============================================================
Ti.Preload("ti/com/ti/chart/g2/_com.json", {
  "name" : "ti-chart-g2",
  "globally" : true,
  "template" : "./ti-chart-g2.html",
  "mixins"   : ["./ti-chart-g2.mjs"],
  "components" : [],
  "deps" : []
});
//============================================================
// JOIN: ti/chart/simple/ti-chart-simple.html
//============================================================
Ti.Preload("ti/com/ti/chart/simple/ti-chart-simple.html", `<div class="ti-chart ti-chart-simple">
  <header 
    v-if="title" 
    @click="drawAll">{{title}}</header>
  <aside v-if="aside"
    :class="asideClass">
    <slot name="aside">
      <span v-if="unit">{{unit}}</span>
    </slot>
  </aside>
  <section class="chart-main" ref="chart"></section>
  <div v-if="hasSlider"
    ref="slider"
    class="chart-slider">
  </div>
</div>`);
//============================================================
// JOIN: ti/chart/simple/ti-chart-simple.mjs
//============================================================
(function(){
function draw_chart({
  $refs,
  type="interval",
  unit,
  data=[],
  axisX,
  axisY,
  color,
  animate,
  padding,
  minValue,
  maxValue,
  valueInterval,
  coord
}={}) {
  let $container = $refs.chart
  //console.log(data)
  let width  = G2.DomUtil.getWidth($container)
  let height = G2.DomUtil.getHeight($container)
  // if(width > 500 && width < 510)
  //   console.log(width, height)
  // if(hasSlider)
  //   console.log("XXXX", data)
  //.......................................
  // maxValue
  if(_.isUndefined(maxValue)) {
    maxValue = 0
    let valKey = axisY.name
    for(let it of data){
      maxValue = Math.max(maxValue, it[valKey])
    }
  }
  //.......................................
  // Create The Chart
  let chart = new G2.Chart({
    container: $container,
    padding, width, height
  })
  //.......................................
  // Set datasource
  chart.source(data)
  //.......................................
  // Setup title
  chart.legend(false)
  //.......................................
  // axisX
  let axisXOptions = {
    label : {
      textStyle : {
        fill : axisX.color || "#888"
      }
    }
  }
  chart.axis(axisX.name, axisXOptions)
  //.......................................
  // 纵轴设定
  let axisYOptions = {
    label : {
      autoRotate : false,
      textStyle : {
        fill : axisY.color || "#888"
      }
    },
    grid: {
      type: 'line',
      lineStyle: {
        stroke: 'rgba(255,255,255,0.4)',
        lineWidth: 0.5,
        lineDash: false
      }
    }
  }
  chart.axis(axisY.name, axisYOptions)
  //.......................................
  // 坐标系变换
  if(coord) {
    if("transpose" == coord) {
      chart.coord().transpose()
    }
  }
  //.......................................
  // 视图缩放
  let alias = axisY.title || axisY.name
  chart.scale(axisY.name, {
    alias,
    type : "linear",
    min: minValue,
    max: maxValue,
    tickInterval: valueInterval
  })
  //.......................................
  // 图表种类和风格
  let factory = ({
    //+++++++++++++++++++++++++++++++++++++
    // 折线
    line() {
      let geom = chart.line().position(position)
      chart.point().position(position).size(4).shape('circle').style({
        stroke: '#fff',
        lineWidth: 1
      });
      return geom
    },
    //+++++++++++++++++++++++++++++++++++++
    // 柱图·单柱
    interval() {
      return chart.interval().position(position)
    },
    //+++++++++++++++++++++++++++++++++++++
    // 柱图·分组
    intervalDodge() {
      return chart.interval().position(position).adjust([{
        type: 'dodge',
        marginRatio: 1 / 32
      }])
    },
    //+++++++++++++++++++++++++++++++++++++
    // 柱图·堆叠
    intervalStack(position) {
      return chart.intervalStack().position(position)
    },
  })[type]
  // 默认就是柱图
  factory = factory || ((position)=>{
    return chart.interval().position(position)
  })
  //.......................................
  // 生成图表
  let position = `${axisX.name}*${axisY.name}`
  let geom = factory(position)
  //.......................................
  // 设置数据显示
      //.color(color || 'l(270) 0:#0d4a6a 1:#00fddd')
    // .animate({
    //   appear: {
    //     delay: 500, // 动画延迟执行时间
    //     duration: 1000 // 动画执行时间
    //   }
    // });
  if(color) {
    geom.color(color)
  }
  if(animate) {
    geom.animate(animate)
  }
    
  //.......................................
  // 渲染并返回
  chart.render()
  return chart
}
///////////////////////////////////////////
const _M = {
  /////////////////////////////////////////
  inheritAttrs : false,
  /////////////////////////////////////////
  props : {
    "title" : {
      type : String,
      default : null
    },
    "data" : {
      type : Array,
      default : ()=>[]
    },
    "type" : {
      type : String,
      default : "interval"
    },
    "axisX" : {
      type : Object,
      default : ()=>({
        name : "name",
        title : "name"
      })
    },
    "axisY" : {
      type : Object,
      default : ()=>({
        name : "value",
        title : "value"
      })
    },
    "aside" : {
      type : String,
      default : "left" // none|left|center|right
    },
    "unit" : {
      type : String,
      default : null
    },
    "padding" : {
      type: Array,
      default : ()=>[20,20,50,50]
    },
    "minValue" : {
      type: Number,
      default : 0
    },
    "maxValue" : {
      type: Number,
      default : undefined
    },
    "color" : {
      type: String,
      default : null
    },
    "animate" : {
      type : Object,
      default : ()=>({
        delay: 500, // 动画延迟执行时间
        duration: 1000 // 动画执行时间
      })
    },
    "valueInterval" : {
      type: Number,
      default : 100
    },
    // 坐标系变换
    "coord" : {
      type : [String, Object],
      default : null
    }
  },
  //////////////////////////////////////////
  watch : {
    "data" : function() {this.debounceRedrawChart()},
    // "type" : function() {this.debounceRedrawAll()},
    // "axisX" : function() {this.debounceRedrawAll()},
    // "axisY" : function() {this.debounceRedrawAll()}
  },
  //////////////////////////////////////////
  computed : {
    //......................................
    asideClass() {
      return `at-${this.aside||"none"}`
    },
    //......................................
    // TODO support slider
    hasSlider() {return false}
    //......................................
  },
  //////////////////////////////////////////
  methods : {
    //......................................
    redrawChart() {
      //console.log("I am redrawChart")
      if(this.__g2_chart) {
        this.__g2_chart.destroy()
        $(this.$refs.chart).empty()
      }
      this.__g2_chart = draw_chart(this)
    },
    drawAll() {
      //console.log("I am drawAll")
      this.$nextTick(()=>{
        this.redrawChart()
        //this.redrawSlider()
      })
    }
    //......................................
  },
  /////////////////////////////////////////
  mounted : function() {
    this.drawAll()
    this.debounceRedrawChart = _.debounce(()=>{
      this.redrawChart()
    }, 500)
    this.debounceRedrawAll = _.debounce(()=>{
      this.drawAll()
    }, 500)
  },
  beforeDestroy : function(){
    if(this.__g2_chart) {
      this.__g2_chart.destroy()
    }
    // if(this.__g2_slider) {
    //   this.__g2_slider.destroy()
    // }
  }
  /////////////////////////////////////////
}
Ti.Preload("ti/com/ti/chart/simple/ti-chart-simple.mjs", _M);
})();
//============================================================
// JOIN: ti/chart/simple/_com.json
//============================================================
Ti.Preload("ti/com/ti/chart/simple/_com.json", {
  "name" : "ti-chart-simple",
  "globally" : true,
  "template" : "./ti-chart-simple.html",
  "mixins"   : ["./ti-chart-simple.mjs"],
  "components" : [],
  "deps" : []
});
//============================================================
// JOIN: ti/color/ti-color.html
//============================================================
Ti.Preload("ti/com/ti/color/ti-color.html", `<div class="ti-color" >
  <!--
    Color Matrix Table
  -->
  <div class="as-table">
    <table>
      <thead>
        <tr>
          <th v-for="color in colorGrays">
            <span 
              :style="colorItemStyle(color)" 
              @click="onColorClicked(color)"></span>
          </th>
        </tr>
        <tr>
            <th v-for="color in colorMajors">
              <span 
                :style="colorItemStyle(color)" 
                @click="onColorClicked(color)"></span>
            </th>
          </tr>
      </thead>
      <!--Matrix-->
      <tbody>
        <tr v-for="row in colorMatrix"
          class="as-row">
          <td v-for="color in row">
            <span 
              :style="colorItemStyle(color)" 
              @click="onColorClicked(color)"></span>
          </td>
        </tr>
      </tbody>
    </table>
  </div> <!-- End Matrix-->
  <!--
    Color Input
  -->
  <div class="as-input">
    <div class="as-hex">
        <input class="as-value" 
          spellcheck="false"
          :value="theHex"
          @change="onHexChanged"/>
    </div>
    <div class="as-alpha">
      <ti-input-num 
        :value="theAlpha"
        :max-value="100"
        :min-value="0"
        :step="10"
        @change="onAlphaChanged"/>
    </div>
  </div>
  <!--
    Color Preview
  -->
  <div class="as-preview">
    <span>{{theColorValue}}</span>
  </div>
</div>`);
//============================================================
// JOIN: ti/color/ti-color.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  ///////////////////////////////////////////////////////
  props : {
    "value" : {
      type : [String, Number],
      default : null
    },
    "majorColors" : {
      type : Array,
      default : ()=>["#980000","#ff0000","#ff9900","#ffff00","#00ff00",
                 "#00ffff","#4a86e8","#0000ff","#9900ff","#ff00ff"]
    },
    // List the colors at first rows
    "topColors" : {
      type : Array,
      default : ()=>["#e6b8af","#f4cccc","#fce5cd","#fff2cc","#d9ead3",
                 "#d0e0e3","#c9daf8","#cfe2f3","#d9d2e9","#ead1dc"]
    },
    // List the colors at last rows
    // it should same lenght with topColors
    "bottomColors" : {
      type : Array,
      default : ()=>["#5b0f00","#660000","#783f04","#7f6000","#274e13",
                 "#0c343d","#1c4587","#073763","#20124d","#4c1130"]
    },
    // How many middle colors between the head and bottom
    "middleDegree" : {
      type : Number,
      default : 5
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    theColor() {
      return Ti.Types.toColor(this.value, null)
    },
    //---------------------------------------------------
    theHex() {
      if(this.theColor)
        return this.theColor.hex
    },
    //---------------------------------------------------
    theAlpha() {
      if(this.theColor)
        return Math.round(this.theColor.alpha * 100)
    },
    //---------------------------------------------------
    theColorValue() {
      if(this.theColor)
        return this.theColor.rgba
      return Ti.I18n.get("empty")
    },
    //---------------------------------------------------
    colCount() {
      return this.topColors.length
    },
    //---------------------------------------------------
    colorGrays() {
      let grays = []
      let step = 255 / this.colCount
      for(let i=0; i<this.colCount; i++) {
        let v = Math.round((i+1) * step)
        grays.push(Ti.Types.toColor(v))
      }
      return grays
    },
    //---------------------------------------------------
    colorMajors() {
      let majors = []
      for(let v of this.majorColors) {
        majors.push(Ti.Types.toColor(v))
      }
      return majors
    },
    //---------------------------------------------------
    colorMatrix() {
      // Head Colors
      let tops = []
      for(let v of this.topColors) {
        tops.push(Ti.Types.toColor(v))
      }
      // Bottom colors
      let bottoms = []
      for(let v of this.bottomColors) {
        bottoms.push(Ti.Types.toColor(v))
      }
      // Middle Colors
      let matrix = [tops]
      for(let y=0; y<this.middleDegree-1; y++) {
        let rows = []
        for(let x=0; x<this.colCount; x++) {
          let top = tops[x]
          let bottom = bottoms[x]
          let pos = (y+1) /this.middleDegree
          let color = top.between(bottom, pos)
          color.adjustByHSL({s:.5})
          rows.push(color)
        }
        matrix.push(rows)
      }
      // The bottom
      matrix.push(bottoms)
      // Return the matrix
      return matrix
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods : {
    //---------------------------------------------------
    colorItemStyle(color) {
      return {
        "background-color" : color.rgb
      }
    },
    //---------------------------------------------------
    onHexChanged(evt) {
      let hex=_.trim(evt.target.value)
      if(/^[0-9a-f]{3,6}$/i.test(hex)) {
        hex = "#" + hex
      }
      let co = Ti.Types.toColor(hex)
      this.$notify("change", co)
    },
    //---------------------------------------------------
    onAlphaChanged(a) {
      let co = this.theColor 
                ? this.theColor.clone()
                : Ti.Types.toColor("black")
      co.alpha = a / 100
      this.$notify("change", co)
    },
    //---------------------------------------------------
    onColorClicked(color) {
      let co = color.clone()
      if(_.isNumber(this.theAlpha)) {
        co.alpha = this.theAlpha/100
      }
      this.$notify("change", co)
    }
    //---------------------------------------------------
  }
  ///////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/color/ti-color.mjs", _M);
})();
//============================================================
// JOIN: ti/color/_com.json
//============================================================
Ti.Preload("ti/com/ti/color/_com.json", {
  "name" : "ti-color",
  "globally" : true,
  "template" : "./ti-color.html",
  "mixins" : ["./ti-color.mjs"]
});
//============================================================
// JOIN: ti/combo/box/ti-combo-box.html
//============================================================
Ti.Preload("ti/com/ti/combo/box/ti-combo-box.html", `<div class="ti-combo-box" 
  :class="topClass"
  :style="topStyle">
  <!--
    Box: Component
  -->
  <div class="as-box" ref="box" :style="theBoxStyle">
    <slot name="box"><div>ComboBox</div></slot>
  </div>
  <!--
    Mask & Drop
  -->
  <template v-if="'extended'==status">
    <!--Mask-->
    <div class="as-mask" @click.left="notifyCollapse()"></div>
    <!--Drop-->
    <div class="as-drop" ref="drop" :style="theDropStyle">
      <slot name="drop"><div>ComboBox Dropdown</div></slot>
    </div>
  </template>
</div>`);
//============================================================
// JOIN: ti/combo/box/ti-combo-box.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    box : {
      "position" : null,
      "width"  : null,
      "height" : null,
      "top"    : null,
      "left"   : null
    },
    myDropDockReady : false
  }),
  ////////////////////////////////////////////////////
  props : {
    "width" : {
      type : [Number, String],
      default : null
    },
    "height" : {
      type : [Number, String],
      default : null
    },
    "dropFloat": {
      type: Boolean,
      default: true
    },
    "dropWidth" : {
      type : [Number, String],
      default : "box"
    },
    "dropHeight" : {
      type : [Number, String],
      default : null
    },
    "dropOverflow" : {
      type : [String, Array],
      default : "auto",
      validator : (v)=>{
        if(Ti.Util.isNil(v)) {
          return true
        }
        if(_.isString(v)) {
          v = v.split(" ")
        }
        if(_.isArray(v)) {
          if(v.length > 2 || v.length == 0) {
            return false
          }
          for(let s of v) {
            if(!/^(auto|hidden|visible|scroll)$/.test(s)) {
              return false
            }
          }
          return true
        }
        return false
      }
    },
    "status" : {
      type : String,
      default : "collapse",
      validator : (st)=>/^(collapse|extended)$/.test(st)
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return this.getTopClass(`is-${this.status}`)
    },
    //------------------------------------------------
    topStyle() {
      return Ti.Css.toStyle({
        //width  : this.box.width,
        height : this.box.height
      })
    },
    //------------------------------------------------
    theBoxStyle() {
      if(this.dropFloat) {
        return Ti.Css.toStyle(this.box)
      }
    },
    //------------------------------------------------
    theDropStyle() {
      return Ti.Css.toStyle({
        "overflow" : this.dropOverflow,
        "visibility" : this.myDropDockReady ? "visible" : "hidden"
      })
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    notifyCollapse(escaped=false) {
      this.$notify("collapse", {escaped})
    },
    //------------------------------------------------
    dockDrop() {
      let $drop  = this.$refs.drop
      let $box   = this.$refs.box
      // Guard the elements
      if(!_.isElement($drop) || !_.isElement($box)){
        return
      }
      //............................................
      // If drop opened, make the box position fixed
      // to at the top of mask
      if("extended" == this.status) {
        // Wait 1ms for drop content done for drawing
        _.delay(()=>{
          let r_box  = Ti.Rects.createBy($box)
          let r_drop = Ti.Rects.createBy($drop)
          //..........................................
          // Mark box to fixed position
          _.assign(this.box, {position:"fixed"}, r_box.raw())
          //..........................................
          // Make drop same width with box
          let dropStyle = {}
          if("box" == this.dropWidth) {
            dropStyle.width = Math.max(r_box.width, r_drop.width)
          }
          else if(!Ti.Util.isNil(this.dropWidth)) {
            // The min drop width
            if(this.dropWidth < 0) {
              dropStyle.width = Math.max(r_box.width, Math.abs(this.dropWidth))
            }
            // Fix drop width
            else {
              dropStyle.width = this.dropWidth
            }
          }
          if(!Ti.Util.isNil(this.dropHeight)) {
            dropStyle.height = this.dropHeight
          }
          //..........................................S
          Ti.Dom.setStyle($drop, Ti.Css.toStyle(dropStyle))
          //..........................................
          // Dock drop to box
          Ti.Dom.dockTo($drop, $box, {
            space:{y:2}
          })
          // Make drop visible
          _.delay(()=>{
            this.myDropDockReady = true
          }, 1)

        }, 1)
        //..........................................
      }
      //............................................
    },
    //------------------------------------------------
    reDockDrop() {
      this.resetBoxStyle()
      this.$nextTick(()=>{
        this.dockDrop()
      })
    },
    //------------------------------------------------
    resetBoxStyle() {
      // Recover the $box width/height
      _.assign(this.box, {
        position:null, top:null, left:null, 
        width: this.width, height: this.height
      })
      this.myDropDockReady = false
    },
    //------------------------------------------------
    __ti_shortcut(uniqKey) {
      if("ESCAPE" == uniqKey) {
        this.notifyCollapse(true)
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    "status" : function(sta){
      this.$nextTick(()=>{
        // If collapse, it should clean the box styles
        if("collapse" == sta) {
          this.resetBoxStyle()
        }
        // try docking
        else {
          this.dockDrop()
        }
      })
    }
  },
  ////////////////////////////////////////////////////
  mounted : function() {
    this.dropOpened = this.autoOpenDrop
    this.box.width  = this.width
    this.box.height = this.height

    this.dockDrop()

    Ti.Viewport.watch(this, {
      scroll:()=>this.notifyCollapse(),
      resize:()=>this.notifyCollapse()
    })
  },
  ////////////////////////////////////////////////////
  beforeDestroy : function() {
    Ti.Viewport.unwatch(this)
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/combo/box/ti-combo-box.mjs", _M);
})();
//============================================================
// JOIN: ti/combo/box/_com.json
//============================================================
Ti.Preload("ti/com/ti/combo/box/_com.json", {
  "name" : "ti-combo-box",
  "globally" : true,
  "template" : "./ti-combo-box.html",
  "mixins" : ["./ti-combo-box.mjs"]
});
//============================================================
// JOIN: ti/combo/filter/ti-combo-filter-props.mjs
//============================================================
(function(){
const _M  = {
  "form" : {
    type : Object,
    default : null
  },
  "autoCollapse" : {
    type : Boolean,
    default : false
  },
  "statusIcons" : {
    type : Object,
    default : ()=>({
      collapse : "zmdi-chevron-down",
      extended : "zmdi-chevron-up"
    })
  },
  "autoFocusExtended": {
    type: Boolean,
    default: true
  },
  "spacing" : {
    type : String,
    default : "tiny",
    validator : v => /^(none|comfy|tiny)$/.test(v)
  },
  "dropWidth" : {
    type : [Number, String],
    default : "box"
  },
  "dropHeight" : {
    type : [Number, String],
    default : null
  }
}
Ti.Preload("ti/com/ti/combo/filter/ti-combo-filter-props.mjs", _M);
})();
//============================================================
// JOIN: ti/combo/filter/ti-combo-filter.html
//============================================================
Ti.Preload("ti/com/ti/combo/filter/ti-combo-filter.html", `<div class="ti-combo-filter"
  :class="TopClass">
  <!--
    Marjor type
  -->

  <!--
    Filter input box
  -->
  <ti-combo-box
    class="as-filter"
    :drop-width="dropWidth"
    :drop-height="dropHeight"
    :status="myDropStatus"
    @collapse="OnCollapse"
    v-ti-activable>
    <!--
      Box
    -->
    <template v-slot:box>
      <ti-input 
        v-bind="TheInputProps"

        :value="InputValue"
        :prefix-icon="ThePrefixIcon"
        :suffix-icon="TheSuffixIcon"

        @change="OnInputChanged"
        @input:focus="OnInputFocused"
        @prefix:icon="$notify('prefix:icon')"
        @suffix:icon="OnClickStatusIcon"/>
    </template>
    <!--
      Drop
    -->
    <template v-slot:drop="slotProps">
      <ti-form
        v-bind="form"
        :data="myFormData"
        @change="OnFormChange"/>
    </template>
  </ti-combo-box>
  <!--
    Sorter
  -->
</div>`);
//============================================================
// JOIN: ti/combo/filter/ti-combo-filter.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////////////
  /*
  {
    keyword: "xxx",  -> myFreeValue
    match: {..}      -> myFormData
  }
  */
  ////////////////////////////////////////////////////
  data : ()=>({
    myDropStatus : "collapse",
    myFreeValue : null,
    myFormData  : {}
  }),
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass({
          "is-enabled": this.isFilterEnabled
        },`as-spacing-${this.spacing}`
      )
    },
    //------------------------------------------------
    isCollapse() {return "collapse"==this.myDropStatus},
    isExtended() {return "extended"==this.myDropStatus},
    //------------------------------------------------
    hasForm() {
      return !_.isEmpty(this.form)
    },
    //------------------------------------------------
    isFilterEnabled() {
      return !_.isEmpty(this.myFreeValue)
        || !_.isEmpty(this.myFormData)
    },
    //------------------------------------------------
    TheInputProps(){
      return _.assign({}, this, {
        autoI18n : this.autoI18n,
        placeholder : this.placeholder
      })
    },
    //------------------------------------------------
    InputValue() {
      return this.myFreeValue
    },
    //------------------------------------------------
    ThePrefixIcon() {
      let icon = this.prefixIcon;
      return icon || "im-filter"
    },
    //------------------------------------------------
    TheSuffixIcon() {
      if(this.hasForm) {
        return this.statusIcons[this.myDropStatus]
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnCollapse() {this.doCollapse()},
    //-----------------------------------------------
    OnInputChanged(val) {
      this.myFreeValue = val
      this.myDropStatus = "collapse"

      // Clean all
      if(Ti.Util.isNil(val)) {
        this.myFormData  = {}
      }

      this.tryNotifyChanged()
    },
    //-----------------------------------------------
    OnInputFocused() {
      if(this.autoFocusExtended && !this.isExtended) {
        this.doExtend()
      }
    },
    //-----------------------------------------------
    OnClickStatusIcon() {
      if(this.isExtended) {
        this.doCollapse()
      } else {
        this.doExtend()
      }
    },
    //-----------------------------------------------
    OnFormChange(formData) {
      //console.log("filter form chanaged", formData)
      this.myFormData = formData
    },
    //-----------------------------------------------
    // Core Methods
    //-----------------------------------------------
    doExtend(tryReload=true) {
      if(this.hasForm && !this.isExtended) {
        this.myDropStatus = "extended"
      }
    },
    //-----------------------------------------------
    doCollapse({escaped=false}={}) {
      if(!this.isCollapse) {
        if(!escaped) {
          this.tryNotifyChanged()
        }
        this.myDropStatus = "collapse"
      }
    },
    //-----------------------------------------------
    tryNotifyChanged() {
      //console.log("tryNotifyChanged")
      let val = this.genValue()
      if(!_.isEqual(val, this.value)) {
        this.$notify("change", val)
      }
    },
    //-----------------------------------------------
    // Utility
    //-----------------------------------------------
    genValue() {
      return {
        keyword : this.myFreeValue,
        match   : this.myFormData
      }
    },
    //-----------------------------------------------
    evalMyValue() {
      let val = _.assign({}, this.value)
      this.myFreeValue = val.keyword
      this.myFormData  = val.match
    },
    //-----------------------------------------------
    // Callback
    //-----------------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("ti-combo-filter", uniqKey)
      //....................................
      if("ESCAPE" == uniqKey) {
        this.doCollapse({escaped:true})
        return {prevent:true, stop:true, quit:true}
      }
      //....................................
      if("ARROWDOWN" == uniqKey) {
        this.doExtend()
        return
      }
      //....................................
      if("ARROWUP" == uniqKey) {
        this.doCollapse()
        return
      }
      // //....................................
      // // If droplist is actived, should collapse it
      // if("ENTER" == uniqKey) {
      //   this.doCollapse()
      //   return {stop:true, quit:true}
      // }
      //....................................
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    //-----------------------------------------------
    "value" : {
      handler: "evalMyValue",
      immediate : true
    }
    //-----------------------------------------------
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/combo/filter/ti-combo-filter.mjs", _M);
})();
//============================================================
// JOIN: ti/combo/filter/_com.json
//============================================================
Ti.Preload("ti/com/ti/combo/filter/_com.json", {
  "name" : "ti-combo-filter",
  "globally" : true,
  "template" : "./ti-combo-filter.html",
  "props"    : [
    "@com:ti/input/ti-input-props.mjs",
    "@com:ti/combo/filter/ti-combo-filter-props.mjs"
  ],
  "mixins"   : "./ti-combo-filter.mjs",
  "components" : [
    "@com:ti/form",
    "@com:ti/combo/sorter"]
});
//============================================================
// JOIN: ti/combo/input/ti-combo-input-props.mjs
//============================================================
(function(){
const _M = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "options" : {
    type : [String, Array, Function, Ti.Dict],
    default : ()=>[]
  },
  "valueBy" : {
    type : [String, Function],
    default : undefined
  },
  "textBy" : {
    type : [String, Function],
    default : undefined
  },
  "iconeBy" : {
    type : [String, Function],
    default : undefined
  },
  "childrenBy" : {
    type : [String, Function],
    default : undefined
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "dropComType" : {
    type : String,
    default : undefined
  },
  "dropComConf" : {
    type : Object,
    default : undefined
  },
  "mustInList" : {
    type : Boolean,
    default : false
  },
  "autoFocusExtended" : {
    type : Boolean,
    default : true
  },
  "filter" : {
    type : Boolean,
    default : true
  },
  "delay" : {
    type : Number,
    default : 800
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "statusIcons" : {
    type : Object,
    default : ()=>({
      collapse : "zmdi-chevron-down",
      extended : "zmdi-chevron-up"
    })
  },
  "dropDisplay" : {
    type : [Object, String, Array],
    default : undefined
  },
  "dropItemBorder" : {
    type : Boolean,
    default : true
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "dropWidth" : {
    type : [Number, String],
    default : "box"
  },
  "dropHeight" : {
    type : [Number, String],
    default : null
  }
}
Ti.Preload("ti/com/ti/combo/input/ti-combo-input-props.mjs", _M);
})();
//============================================================
// JOIN: ti/combo/input/ti-combo-input.html
//============================================================
Ti.Preload("ti/com/ti/combo/input/ti-combo-input.html", `<ti-combo-box 
  class="ti-combo-input"
  :class="TopClass"
  :drop-width="dropWidth"
  :drop-height="dropHeight"
  :status="myDropStatus"
  @collapse="OnCollapse"
  v-ti-activable>
  <!--
    Box
  -->
  <template v-slot:box>
    <ti-input 
      v-bind="TheInputProps"

      :value="InputValue"
      :prefix-icon="ThePrefixIcon"
      :suffix-icon="TheSuffixIcon"

      @change="OnInputChanged"
      @inputing="OnInputInputing"
      @input:focus="OnInputFocused"
      @prefix:icon="$notify('prefix:icon')"
      @suffix:icon="OnClickStatusIcon"/>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop="slotProps">
    <component 
      :is="DropComType"
      class="ti-fill-parent"
      blank-class="mid-tip"
      v-bind="DropComConf"
      :on-init="OnDropListInit"
      @select="OnDropListSelected"/>
  </template>
</ti-combo-box>`);
//============================================================
// JOIN: ti/combo/input/ti-combo-input.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    myDropStatus   : "collapse",
    myItem         : null,
    myFreeValue    : null,
    myFilterValue  : null,
    myOptionsData  : null,
    myCurrentId    : null,
    myCheckedIds   : {},

    myOldValue : undefined,
    myDict : undefined,
    loading : false
  }),
  ////////////////////////////////////////////////////
  props : {
    "canInput" : {
      type : Boolean,
      default : true
    },
    "autoCollapse" : {
      type : Boolean,
      default : false
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    isCollapse() {return "collapse"==this.myDropStatus},
    isExtended() {return "extended"==this.myDropStatus},
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    TheInputProps(){
      return _.assign({}, this, {
        readonly : !this.canInput || this.readonly,
        autoI18n : this.autoI18n,
        placeholder : this.placeholder
      })
    },
    //------------------------------------------------
    InputValue() {
      if(!Ti.Util.isNil(this.myFilterValue)) {
        return this.myFilterValue
      }
      if(this.myItem) {
        return this.Dict.getText(this.myItem)
               || this.Dict.getValue(this.myItem)
      }
      return this.myFreeValue
    },
    //------------------------------------------------
    GetValueBy() {
      return it => this.Dict.getValue(it)
    },
    //------------------------------------------------
    ThePrefixIcon() {
      if(this.loading) {
        return "zmdi-settings zmdi-hc-spin"
      }
      let icon = this.prefixIcon;
      if(this.myItem) {
        icon = this.Dict.getIcon(this.myItem) || icon
      }
      return icon || "zmdi-minus"
    },
    //------------------------------------------------
    TheSuffixIcon() {
      return this.statusIcons[this.myDropStatus]
    },
    //------------------------------------------------
    DropComType() {return this.dropComType || "ti-list"},
    DropComConf() {
      return _.assign({
        display    : this.dropDisplay || "text",
        border     : this.dropItemBorder
      }, this.dropComConf, {
        data : this.myOptionsData,
        currentId  : this.myCurrentId,
        checkedIds : this.myCheckedIds,
        idBy       : this.GetValueBy,
        multi      : false,
        hoverable  : true,
        checkable  : false,
        autoCheckCurrent : true
      })
    },
    //------------------------------------------------
    Dict() {
      if(!this.myDict) {
        this.myDict = this.createDict()
      }
      return this.myDict
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    OnDropListInit($dropList){this.$dropList=$dropList},
    //------------------------------------------------
    OnCollapse() {this.doCollapse()},
    //-----------------------------------------------
    OnInputInputing(val) {
      if(this.filter) {
        this.myFilterValue = val
        // Auto extends
        if(this.autoFocusExtended) {
          if(!this.isExtended) {
            this.doExtend(false)
          }
        }
        // Reload options data
        if(this.isExtended) {
          this.debReload()
        }
      }
    },
    //-----------------------------------------------
    async OnInputChanged(val, byKeyboardArrow) {
      //console.log("haha")
      // Clean filter
      this.myFilterValue = null
      // Clean
      if(!val) {
        this.myItem = null
        this.myFreeValue = null
        this.myCheckedIds = {}
        this.myCurrentId = null
      }
      // Find ...
      else {
        let it = await this.Dict.getItem(val)
        // Matched tag
        if(it) {
          this.myItem = it
          this.myFreeValue = null
        }
        else if(!this.mustInList) {
          this.myItem = null
          this.myFreeValue = val
        }
      }
      if(!byKeyboardArrow)
        this.tryNotifyChanged()
    },
    //-----------------------------------------------
    async OnInputFocused() {
      if(this.autoFocusExtended && !this.isExtended) {
        await this.doExtend()
      }
    },
    //-----------------------------------------------
    async OnClickStatusIcon() {
      if(this.isExtended) {
        await this.doCollapse()
      } else {
        await this.doExtend()
      }
    },
    //-----------------------------------------------
    async OnDropListSelected({currentId, byKeyboardArrow}={}) {
      //console.log({currentId, byKeyboardArrow})
      this.myCurrentId = currentId
      await this.OnInputChanged(currentId, byKeyboardArrow)
      if(this.autoCollapse && !byKeyboardArrow) {
        await this.doCollapse({escaped:true})
      }
    },
    //-----------------------------------------------
    // Core Methods
    //-----------------------------------------------
    async doExtend(tryReload=true) {
      this.myOldValue = this.evalMyValue()
      // Try reload options again
      if(tryReload && _.isEmpty(this.myOptionsData)) {
        await this.reloadMyOptionData(true)
      }
      this.$nextTick(()=>{
        this.myDropStatus = "extended"
      })
    },
    //-----------------------------------------------
    async doCollapse({escaped=false}={}) {
      if(escaped) {
        this.evalMyItem(this.myOldValue)
      }
      // Try notify
      else  {
        this.tryNotifyChanged()
      }
      this.myDropStatus = "collapse"
      this.myOldValue   = undefined
    },
    //-----------------------------------------------
    tryNotifyChanged() {
      let val = this.evalMyValue()
      //console.log("tryNotifyChanged", val)
      if(!_.isEqual(val, this.value)) {
        this.$notify("change", val)
      }
    },
    //-----------------------------------------------
    // Utility
    //-----------------------------------------------
    evalMyValue(item=this.myItem, freeValue=this.myFreeValue) {
      //console.log("evalMyValue", item, freeValue)
      // Item
      if(item) {
        return this.Dict.getValue(item)
      }
      // Ignore free values
      return this.mustInList 
              ? null
              : freeValue
    },
    //-----------------------------------------------
    async evalMyItem(val=this.value) {
      let it = await this.Dict.getItem(val)
      // Update state
      if(it) {
        let itV = this.Dict.getValue(it)
        this.myItem = it
        this.myFreeValue = null
        this.myCurrentId  = itV
        this.myCheckedIds = {[itV]: true}
      }
      // Clean
      else {
        this.myItem = null
        this.myFreeValue = this.mustInList ? null : val
        this.myCurrentId  = null
        this.myCheckedIds = {}
      }
    },
    //------------------------------------------------
    createDict() {
      // Customized
      if(this.options instanceof Ti.Dict) {
        return this.options
      }
      // Refer dict
      if(_.isString(this.options)) {
        let dictName = Ti.DictFactory.DictReferName(this.options)
        if(dictName) {
          return Ti.DictFactory.CheckDict(dictName, ({loading}) => {
            this.loading = loading
          })
        }
      }
      // Auto Create
      return Ti.DictFactory.CreateDict({
        data : this.options,
        getValue : Ti.Util.genGetter(this.valueBy || "value"),
        getText  : Ti.Util.genGetter(this.textBy  || "text|name"),
        getIcon  : Ti.Util.genGetter(this.iconBy  || "icon")
      })
    },
    //-----------------------------------------------
    async reloadMyOptionData(force=false) {
      console.log("reloadMyOptionData")
      if(force || this.isExtended) {
        let list = await this.Dict.queryData(this.myFilterValue)
        this.myOptionsData = list
      } else {
        this.myOptionsData = []
      }
    },
    //-----------------------------------------------
    // Callback
    //-----------------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("ti-combo-multi-input", uniqKey)
      //....................................
      if("ESCAPE" == uniqKey) {
        this.doCollapse({escaped:true})
        return {prevent:true, stop:true, quit:true}
      }
      //....................................
      // If droplist is actived, should collapse it
      if("ENTER" == uniqKey) {
        //if(this.$dropList && this.$dropList.isActived) {
          this.doCollapse()
          return {stop:true, quit:false}
        //}
      }
      //....................................
      if("ARROWUP" == uniqKey) {
        if(this.$dropList) {
          this.$dropList.selectPrevRow({
            payload: {byKeyboardArrow: true}
          })
        }
        return {prevent:true, stop:true, quit:true}
      }
      //....................................
      if("ARROWDOWN" == uniqKey) {
        if(this.$dropList && this.isExtended) {
          this.$dropList.selectNextRow({
            payload: {byKeyboardArrow: true}
          })
        } else {
          this.doExtend()
        }
        return {prevent:true, stop:true, quit:true}
      }
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    //-----------------------------------------------
    "value" : {
      handler: "evalMyItem",
      immediate : true
    },
    //-----------------------------------------------
    "options" : function(newval, oldval) {
      if(!_.isEqual(newval, oldval)) {
        this.myDict = this.createDict()
        this.myOptionsData = []
        if(this.isExtended) {
          this.$nextTick(()=>{
            this.reloadMyOptionData(true)
          })
        }
      }
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  created : function() {
    this.debReload = _.debounce(val=>{
      this.reloadMyOptionData()
    }, this.delay)
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/combo/input/ti-combo-input.mjs", _M);
})();
//============================================================
// JOIN: ti/combo/input/_com.json
//============================================================
Ti.Preload("ti/com/ti/combo/input/_com.json", {
  "name" : "ti-combo-input",
  "globally" : true,
  "template" : "./ti-combo-input.html",
  "props"    : [
    "@com:ti/input/ti-input-props.mjs",
    "./ti-combo-input-props.mjs"],
  "mixins"   : "./ti-combo-input.mjs",
  "components" : [
    "@com:ti/combo/box"]
});
//============================================================
// JOIN: ti/combo/multi-input/ti-combo-multi-input.html
//============================================================
Ti.Preload("ti/com/ti/combo/multi-input/ti-combo-multi-input.html", `<ti-combo-box 
  class="ti-combo-multi-input"
  :class="TopClass"
  :drop-width="dropWidth"
  :drop-height="dropHeight"
  :status="myDropStatus"
  @collapse="OnCollapse"
  v-ti-activable>
  <!--
    Box
  -->
  <template v-slot:box>
    <ti-input-tags
      :input-value="myFilterValue"
      :value="InputTagValues"
      :value-case="valueCase"
      :trimed="trimed"
        :max-value-len="maxValueLen"
        :value-unique="valueUnique"
        :tag-options="tagOptions"
        :tag-mapping="tagMapping"

      :readonly="readonly"
      :focused="focused"
      :hover="hover"
      :auto-select="autoSelect"
        :can-input="canInput"
        :cancel-tag-bubble="cancelTagBubble"

      :placeholder="placeholder"
      :hide-border="hideBorder"
      :prefix-icon="prefixIcon"
      :prefix-hover-icon="prefixHoverIcon"
      :prefix-icon-for-clean="prefixIconForClean"
      :prefix-text="prefixText"
      :suffix-icon="TheSuffixIcon"
      :suffix-text="suffixText"
        :tag-item-icon-by="tagItemIconBy"
        :tag-item-default-icon="tagItemDefaultIcon"
        :tag-option-default-icon="tagOptionDefaultIcon"
      
      :width="width"
      :height="height"

      :input-change="OnInputChanged"

      @inputing="OnInputInputing"
      @input:focus="OnInputFocused"
      @change="OnTagListChanged"
      @prefix:icon="$notify('prefix:icon')"
      @suffix:icon="OnClickStatusIcon"/>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <component class="ti-fill-parent"
      :is="DropComType"
      blank-class="mid-tip"
      v-bind="DropComConf"
      :on-init="OnDropListInit"
      @select="OnDropListSelected"/>
  </template>
</ti-combo-box>`);
//============================================================
// JOIN: ti/combo/multi-input/ti-combo-multi-input.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  data : ()=>({
    myDropStatus   : "collapse",
    myTags         : [],
    myFreeValues   : [],
    myFilterValue  : null,
    myOptionsData  : [],
    myCurrentId    : null,
    myCheckedIds   : {},

    myOldValue : undefined
  }),
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    isCollapse() {return "collapse"==this.myDropStatus},
    isExtended() {return "extended"==this.myDropStatus},
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    Values() {
      return Ti.S.toArray(this.value)
    },
    //------------------------------------------------
    InputTagValues() {
      return _.concat(this.myTags, this.myFreeValues)
    },
    //------------------------------------------------
    GetValueBy() {
      return it => this.Dict.getValue(it)
    },
    //------------------------------------------------
    TheSuffixIcon() {
      return this.statusIcons[this.myDropStatus]
    },
    //------------------------------------------------
    DropComType() {return this.dropComType || "ti-list"},
    DropComConf() {
      return _.assign({
        display    : this.dropDisplay || "text",
        border     : this.dropItemBorder
      }, this.dropComConf, {
        data : this.myOptionsData,
        currentId  : this.myCurrentId,
        checkedIds : this.myCheckedIds,
        idBy       : this.GetValueBy,
        multi      : true,
        hoverable  : true,
        checkable  : true,
        autoCheckCurrent : false
      })
    },
    //------------------------------------------------
    Dict() {
      // Customized
      if(this.options instanceof Ti.Dict) {
        return this.options
      }
      // Refer dict
      if(_.isString(this.options)) {
        let dictName = Ti.DictFactory.DictReferName(this.options)
        if(dictName) {
          return Ti.DictFactory.CheckDict(dictName, ({loading}) => {
            this.loading = loading
          })
        }
      }
      // Auto Create
      return Ti.DictFactory.CreateDict({
        data: this.options,
        getValue : Ti.Util.genGetter(this.valueBy || "value"),
        getText  : Ti.Util.genGetter(this.textBy  || "text|name"),
        getIcon  : Ti.Util.genGetter(this.iconBy  || "icon")
      })
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnDropListInit($dropList){this.$dropList=$dropList},
    //------------------------------------------------
    async OnCollapse() {this.doCollapse()},
    //------------------------------------------------
    OnInputInputing(val) {
      if(this.filter) {
        this.myFilterValue = val
        this.debReload()
      }
    },
    //------------------------------------------------
    async OnInputChanged(val) {
      // Clean filter
      this.myFilterValue = null
      // Uniq 
      if(this.valueUnique) {
        if(_.indexOf(this.myFreeValues, val)>=0) {
          return
        }
        for(let tag of this.myTags) {
          let tagV = this.Dict.getValue(tag)
          if(tagV == val) {
            return
          }
        }
      }
      // Join to ...
      let it = await this.Dict.getItem(val)
      // Matched tag
      if(it) {
        this.myTags.push(it)
      }
      // Join to free value
      else if(val && !this.mustInList) {
        this.myFreeValues.push(val)
      }
      this.tryNotifyChanged()
    },
    //-----------------------------------------------
    async OnInputFocused() {
      if(this.autoFocusExtended && !this.isExtended) {
        await this.doExtend()
      }
    },
    //-----------------------------------------------
    async OnTagListChanged(vals=[]) {
      await this.evalMyTags(vals)
      this.tryNotifyChanged()
    },
    //-----------------------------------------------
    async OnClickStatusIcon() {
      if(this.isExtended) {
        this.doCollapse()
      } else {
        await this.doExtend()
      }
    },
    //-----------------------------------------------
    async OnDropListSelected({currentId, checkedIds}={}) {
      this.myCurrentId = currentId
      this.myCheckedIds = checkedIds

      let vals = Ti.Util.truthyKeys(checkedIds)
      await this.evalMyTags(_.concat(vals, this.myFreeValues))
      this.tryNotifyChanged()
    },
    //-----------------------------------------------
    // Core Methods
    //-----------------------------------------------
    async doExtend() {
      this.myOldValue = this.evalMyValues()
      // Try reload options again
      if(_.isEmpty(this.myOptionsData)) {
        await this.reloadMyOptionData(true)
      }
      this.$nextTick(()=>{
        this.myDropStatus = "extended"
      })
    },
    //-----------------------------------------------
    doCollapse({escaped=false}={}) {
      if(escaped) {
        this.$notify("change", this.myOldValue)
      }
      this.myDropStatus = "collapse"
      this.myOldValue   = undefined
    },
    //-----------------------------------------------
    tryNotifyChanged(escaped=false) {
      let vals = this.evalMyValues()
      if(!escaped && !_.isEqual(vals, this.Values)) {
        this.$notify("change", vals)
      }
    },
    //-----------------------------------------------
    // Utility
    //-----------------------------------------------
    evalMyValues(tags=this.myTags, freeValues=this.myFreeValues) {
      let vals = []
      // Tags
      _.forEach(tags, tag => {
        let v = this.Dict.getValue(tag)
        if(!Ti.Util.isNil(v)) {
          vals.push(v)
        } else if (!this.mustInList) {
          vals.push(tag)
        }
      })
      // Ignore free values
      if(this.mustInList || _.isEmpty(freeValues)) {
        return vals
      }
      // Join free values
      return _.concat(vals, freeValues)
    },
    //-----------------------------------------------
    async evalMyTags(vals=this.value) {
      vals = Ti.S.toArray(vals)
      let tags  = []
      let ids   = {}
      let frees = []
      for(let v of vals) {
        let tag = await this.Dict.getItem(v)
        if(tag) {
          tags.push(tag)
          ids[v] = true
        } else {
          frees.push(v)
        }
      }
      this.myTags = tags
      this.myFreeValues = frees
      this.myCheckedIds = ids
    },
    //-----------------------------------------------
    async reloadMyOptionData(force=false) {
      if(force || this.isExtended) {
        this.myOptionsData = await this.Dict.queryData(this.myFilterValue)
      } else {
        this.myOptionsData = []
      }
    },
    //-----------------------------------------------
    // Callback
    //-----------------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("ti-combo-multi-input", uniqKey)
      //....................................
      if("ESCAPE" == uniqKey) {
        this.doCollapse({escaped:true})
        return {prevent:true, stop:true, quit:true}
      }
      //....................................
      // If droplist is actived, should collapse it
      if("ENTER" == uniqKey) {
        if(this.$dropList && this.$dropList.isActived) {
          this.doCollapse()
          return {stop:true, quit:true}
        }
      }
      //....................................
      if("ARROWUP" == uniqKey) {
        if(this.$dropList) {
          this.$dropList.selectPrevRow({
            payload: {byKeyboardArrow: true}
          })
        }
        return {prevent:true, stop:true, quit:true}
      }
      //....................................
      if("ARROWDOWN" == uniqKey) {
        if(this.$dropList && this.isExtended) {
          this.$dropList.selectNextRow({
            payload: {byKeyboardArrow: true}
          })
        } else {
          this.doExtend()
        }
        return {prevent:true, stop:true, quit:true}
      }
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    //-----------------------------------------------
    "value" : {
      handler: "evalMyTags",
      immediate : true
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  created : function() {
    this.debReload = _.debounce(val=>{
      this.reloadMyOptionData()
    }, this.delay)
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/combo/multi-input/ti-combo-multi-input.mjs", _M);
})();
//============================================================
// JOIN: ti/combo/multi-input/_com.json
//============================================================
Ti.Preload("ti/com/ti/combo/multi-input/_com.json", {
  "name" : "ti-combo-multi-input",
  "globally" : true,
  "template" : "./ti-combo-multi-input.html",
  "props"    : [
    "@com:ti/input/ti-input-props.mjs",
    "@com:ti/input/tags/ti-input-tags-props.mjs",
    "@com:ti/combo/input/ti-combo-input-props.mjs"],
  "mixins"   : ["./ti-combo-multi-input.mjs"],
  "components" : [
    "@com:ti/combo/box"]
});
//============================================================
// JOIN: ti/combo/sorter/ti-combo-sorter-props.mjs
//============================================================
(function(){
const _M = {
  "placeholder" : {
    type : String,
    default : "i18n:no-title"
  },
  "options" : {
    type : Array,
    default : ()=>[]
  },
  /*
  {
    "CreateTime": 1  // 1:ASC, -1:DESC
  }
  */
  "value" : {
    type : Object,
    default : null
  },
  "width": {
    type : [Number, String],
    default : undefined
  },
  "height": {
    type : [Number, String],
    default : undefined
  },
  "dropWidth" : {
    type : [Number, String],
    default : "box"
  },
  "dropHeight" : {
    type : [Number, String],
    default : null
  },
  "sortIcons" : {
    type : Object,
    default : ()=>({
      asc  : "fas-long-arrow-alt-up",
      desc : "fas-long-arrow-alt-down"
    })
  },
  "suffixIcon" : {
    type : String,
    default : "im-menu-list"
  },
}
Ti.Preload("ti/com/ti/combo/sorter/ti-combo-sorter-props.mjs", _M);
})();
//============================================================
// JOIN: ti/combo/sorter/ti-combo-sorter.html
//============================================================
Ti.Preload("ti/com/ti/combo/sorter/ti-combo-sorter.html", `<div class="ti-combo-sorter"
  :class="TopClass"
  :style="TopStyle">
  <!--
    sorter box
  -->
  <ti-combo-box
    class="as-sorter"
    :drop-width="dropWidth"
    :drop-height="dropHeight"
    :drop-float="false"
    :status="myDropStatus"
    @collapse="OnCollapse"
    v-ti-activable>
    <!--
      Box
    -->
    <template v-slot:box>
      <!--
        Current Sort Box
      -->
      <div class="as-sort-box"
        @click.left="OnClickBox">
        <!--Sort Icon-->
        <ti-icon
          v-if="TheSortIcon"
          class="as-sort-icon"
            :value="TheSortIcon"/>
        <!--Preifx Icon-->
        <ti-icon 
          v-if="ThePrefixIcon"
            class="at-prefix"
            :value="ThePrefixIcon"/>
        <!--Title-->
        <div class="as-title">{{SortTitle|i18n}}</div>
      </div>
      <!--Status Icon-->
      <div  
        v-if="TheSuffixIcon"
          class="as-sort-btn"
          @click.left="OnClickSuffixIcon">
            <ti-icon :value="TheSuffixIcon"/>
      </div>
    </template>
    <!--
      Drop
    -->
    <template v-slot:drop="slotProps">
      <ti-list
        id-by="value"
        :data="myListData"
        :display="['<icon>', 'text']"
        :hoverable="true"
        :current-id="SortBy"
        @select="OnDropListSelected"/>
    </template>
  </ti-combo-box>
  <!--
    Sorter
  -->
</div>`);
//============================================================
// JOIN: ti/combo/sorter/ti-combo-sorter.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    myDropStatus : "collapse",
    myItem : null,
    isASC : true,
    myListData: []
  }),
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    isCollapse() {return "collapse"==this.myDropStatus},
    isExtended() {return "extended"==this.myDropStatus},
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    },
    //------------------------------------------------
    SortTitle() {
      return Ti.Util.getOrPick(this.myItem, "text|value", this.placeholder)
    },
    //------------------------------------------------
    SortBy() {
      return _.first(_.keys(this.value))
    },
    //------------------------------------------------
    SortAs() {
      return _.get(this.value, this.SortBy) || 1
    },
    //------------------------------------------------
    ThePrefixIcon() {
      return _.get(this.myItem, "icon")
    },
    //------------------------------------------------
    TheSortIcon() {
      return this.isASC
        ? this.sortIcons.asc
        : this.sortIcons.desc
    },
    //------------------------------------------------
    TheSuffixIcon() {
      if(!_.isEmpty(this.myListData) && this.myListData.length>1) {
        return this.suffixIcon
      }
    },
    //------------------------------------------------
    Dict() {
      // Customized
      if(this.options instanceof Ti.Dict) {
        return this.options
      }
      // Refer dict
      if(_.isString(this.options)) {
        let dictName = Ti.DictFactory.DictReferName(this.options)
        if(dictName) {
          return Ti.DictFactory.CheckDict(dictName, ({loading}) => {
            this.loading = loading
          })
        }
      }
      // Auto Create
      return Ti.DictFactory.CreateDict({
        data : this.options,
        getValue : Ti.Util.genGetter(this.valueBy || "value"),
        getText  : Ti.Util.genGetter(this.textBy  || "text|name"),
        getIcon  : Ti.Util.genGetter(this.iconBy  || "icon")
      })
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnCollapse() {this.doCollapse()},
    //-----------------------------------------------
    OnClickBox() {
      this.isASC = !this.isASC
      this.tryNotifyChanged()
    },
    //-----------------------------------------------
    OnClickSuffixIcon() {
      if(this.isExtended) {
        this.doCollapse()
      } else {
        this.doExtend()
      }
    },
    //-----------------------------------------------
    OnDropListSelected({current}={}) {
      this.myItem = current
      this.doCollapse()
    },
    //-----------------------------------------------
    // Core Methods
    //-----------------------------------------------
    doExtend() {
      this.myDropStatus = "extended"
    },
    //-----------------------------------------------
    doCollapse({escaped=false}={}) {
      this.myDropStatus = "collapse"
      if(!escaped) {
        this.tryNotifyChanged()
      }
    },
    //-----------------------------------------------
    tryNotifyChanged() {
      //console.log("tryNotifyChanged")
      let val = this.genValue()
      if(!_.isEqual(val, this.value)) {
        this.$notify("change", val)
      }
    },
    //-----------------------------------------------
    // Utility
    //-----------------------------------------------
    genValue() {
      let by = _.get(this.myItem, "value")
      let as = this.isASC ? 1 : -1
      //console.log({by, as})
      return {[by]:as}
    },
    //-----------------------------------------------
    async evalMyValue() {
      let val = {by:null, as:1}
      // String: "CreateTime:1"
      if(_.isString(this.value)) {
        let ss = this.value.split(":")
        val.by = _.nth(ss, 0)
        val.as = _.nth(ss, 1) == "1" ? 1 : -1
      }
      // Array: ["CreateTime", 1]
      else if(_.isArray(this.value)) {
        val.by = _.nth(this.value, 0)
        val.as = _.nth(this.value, 1) > 0 ? 1 : -1
      }
      // Object as default {"CreateTime":1}
      else {
        val.by = this.SortBy
        val.as = this.SortAs
      }

      let it = await this.Dict.getItem(val.by)
      if(it) {
        this.myItem = it
      } else {
        this.myItem = {text:this.text||val.by, value:val.by}
      }
      this.isASC = val.as == 1
    },
    //-----------------------------------------------
    // Callback
    //-----------------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("ti-combo-multi-input", uniqKey)
      //....................................
      if("ESCAPE" == uniqKey) {
        this.doCollapse({escaped:true})
        return {prevent:true, stop:true, quit:true}
      }
      //....................................
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    //-----------------------------------------------
    "value" : {
      handler: "evalMyValue",
      immediate : true
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  mounted: async function() {
    this.myListData = await this.Dict.getData()
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/combo/sorter/ti-combo-sorter.mjs", _M);
})();
//============================================================
// JOIN: ti/combo/sorter/_com.json
//============================================================
Ti.Preload("ti/com/ti/combo/sorter/_com.json", {
  "name" : "ti-combo-sorter",
  "globally" : true,
  "template" : "./ti-combo-sorter.html",
  "props"    : "@com:ti/combo/sorter/ti-combo-sorter-props.mjs",
  "mixins"   : "./ti-combo-sorter.mjs",
  "components" : ["@com:ti/combo/box"]
});
//============================================================
// JOIN: ti/crumb/com/crumb-item/crumb-item.html
//============================================================
Ti.Preload("ti/com/ti/crumb/com/crumb-item/crumb-item.html", `<div class="ti-crumb-item" 
  :class="topClass"
  @click.left="onClickTop">
  <!--
    Icon
  -->
  <ti-icon v-if="icon" 
    class="as-icon"
    :value="icon"/>
  <!--
    Text
  -->
  <template v-if="text">
    <a v-if="href"
      class="as-text"
      @click.prevent
      :href="href"
      :class="textClass">{{text|i18n}}</a>
    <span v-else
      class="as-text"
      :class="textClass">{{text|i18n}}</span>
  </template>
  <!--
    Asterisk
  -->
  <span v-if="asterisk"
    class="as-asterisk"
    ></span>
  <!--
    Path Icon
  -->
  <ti-icon v-if="!atLast"
    class="as-path-icon"
    :value="pathIcon"/>
</div>`);
//============================================================
// JOIN: ti/crumb/com/crumb-item/crumb-item.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  props : {
    "index" : {
      type : Number,
      default : -1
    },
    "atLast" : {
      type : Boolean,
      default : false
    },
    "icon" : {
      type : [String, Object],
      default : null
    },
    "text" : {
      type : String,
      default : null
    },
    "href" : {
      type : String,
      default : null
    },
    "value" : {
      type : [String, Number, Boolean, Object],
      default : null
    },
    "pathIcon" : {
      type : String,
      default : null
    },
    "asterisk" : {
      type : Boolean,
      default : false
    },
    "cancelBubble" : {
      type : Boolean,
      default : true
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName({
        "at-tail" : this.atLast,
        "at-path" : !this.atLast,
        "is-asterisk" : this.asterisk
      }, this.className)
    },
    //------------------------------------------------
    textClass() {
      return {
        "without-icon"    : !this.hasIcon && !this.removeIcon
      }
    },
    //------------------------------------------------
    hasIcon() {
      return this.icon ? true : false
    },
    //------------------------------------------------
    theData() {
      return {
        index    : this.index,
        icon     : this.icon,
        text     : this.text,
        value    : this.value,
        href     : this.href,
        atLast   : this.atLast,
        asterisk : this.asterisk
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    onClickTop($event) {
      // Show Drop Down
      if(this.hasOptions) {
        $event.stopPropagation()
        this.openDrop()
      }
      // Stop Bubble Up
      else if(this.cancelBubble) {
        $event.stopPropagation()
      }
      // Emit event
      if(this.href) {
        this.$notify("item:active", this.theData)
      }
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/crumb/com/crumb-item/crumb-item.mjs", _M);
})();
//============================================================
// JOIN: ti/crumb/com/crumb-item/_com.json
//============================================================
Ti.Preload("ti/com/ti/crumb/com/crumb-item/_com.json", {
  "name" : "crumb-item",
  "globally" : false,
  "template" : "./crumb-item.html",
  "mixins" : ["./crumb-item.mjs"]
});
//============================================================
// JOIN: ti/crumb/ti-crumb.html
//============================================================
Ti.Preload("ti/com/ti/crumb/ti-crumb.html", `<div class="ti-crumb"
  :class="topClass">
  <!--
    Loop items
  -->
  <crumb-item v-for="it in theData"
    :key="it.index"
    :path-icon="pathIcon"
    :cancel-bubble="cancelItemBubble"
    v-bind="it"/>
</div>`);
//============================================================
// JOIN: ti/crumb/ti-crumb.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  props : {
    "data" : {
      type : Array,
      default : ()=>[]
    },
    "itemIcon" : {
      type : String,
      default : null
    },
    "pathIcon" : {
      type : String,
      default : "zmdi-chevron-right"
    },
    "cancelItemBubble" : {
      type : Boolean,
      default : true
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      if(this.className)
        return this.className
    },
    //------------------------------------------------
    theData() {
      let list = []
      if(_.isArray(this.data)) {
        _.forEach(this.data, (val, index)=>{
          list.push(_.assign({
            icon    : this.itemIcon
          }, val, {index, atLast:index==this.data.length - 1}))
        })
      }
      return list
    },
    //------------------------------------------------
    theDataValues() {
      let list = []
      for(let it of this.theData) {
        list.push(Ti.Util.fallback(it.value, null))
      }
      return list
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  // methods : {
  //   //------------------------------------------------
  //   onItemFired({index=-1}={}) {
  //     if(index >= 0) {
  //       let it = _.nth(this.theData, index)
  //       if(it) {
  //         this.$notify("item:actived", it)
  //       }
  //     }
  //   }
  //   //------------------------------------------------
  // }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/crumb/ti-crumb.mjs", _M);
})();
//============================================================
// JOIN: ti/crumb/_com.json
//============================================================
Ti.Preload("ti/com/ti/crumb/_com.json", {
  "name" : "ti-crumb",
  "globally" : true,
  "template" : "./ti-crumb.html",
  "mixins" : ["./ti-crumb.mjs"],
  "components" : [
    "./com/crumb-item"
  ]
});
//============================================================
// JOIN: ti/datetime/ti-datetime.html
//============================================================
Ti.Preload("ti/com/ti/datetime/ti-datetime.html", `<div class="ti-datetime">
  <!--Date-->
  <ti-calendar class="is-date"
    :value="theDate"
    :month-format="monthFormat"
    :begin-year="beginYear"
    :end-year="endYear"
    @change="onDateChanged"/>
  <!--Time-->
  <div class="is-time">
    <div class="as-time-text">{{theTimeText}}</div>
    <div class="as-time-cols">
      <ti-time
        :value="theTime"
        :mode="timeMode"
        width="100%"
        height="none"
        @change="onTimeChanged"/>
    </div>
  </div>
</div>`);
//============================================================
// JOIN: ti/datetime/ti-datetime.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  props : {
    "value" : {
      type : [String, Number, Date],
      default : null
    },
    "timeMode" : {
      type : String,
      default : "sec",
      /***
       * - `sec`  : "HH:mm:ss"
       * - `min`  : "HH:mm"
       * - `auto` : "HH:mm:ss"
       */
      validator : function(unit) {
        return /^(sec|min|auto)$/.test(unit)
      }
    },
    "monthFormat" : {
      type : String,
      default : "yyyy-MM" 
    },
    "beginYear" : {
      type : [Number, String],
      default : 1970
    },
    "endYear" : {
      type : [Number, String],
      default : (new Date().getFullYear()+1)
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return this.className
    },
    //------------------------------------------------
    theDate() {
      return Ti.Types.toDate(this.value, null)
    },
    //------------------------------------------------
    theTime() {
      return Ti.Types.toTime(this.theDate)
    },
    //------------------------------------------------
    theTimeFormat() {
      return ({
        "sec"  : "HH:mm:ss",
        "min"  : "HH:mm",
        "auto" : "auto"
      })[this.timeMode]
    },
    //------------------------------------------------
    theTimeText() {
      return this.getTimeText(this.theTime)
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    onDateChanged(dt) {
      let theDate = this.theDate || new Date()
      let tm = Ti.Types.toTime(this.theTime||0);
      dt = new Date(dt)
      dt.setHours(tm.hours)
      dt.setMinutes(tm.minutes)
      dt.setSeconds(tm.seconds)
      dt.setMilliseconds(tm.milliseconds)
      this.$notify("change", dt)
    },
    //------------------------------------------------
    onTimeChanged(tm) {
      let theDate = this.theDate || new Date()
      let dt = new Date(theDate)
      dt.setHours(tm.hours)
      dt.setMinutes(tm.minutes)
      dt.setSeconds(tm.seconds)
      dt.setMilliseconds(tm.milliseconds)
      this.$notify("change", dt)
    },
    //------------------------------------------------
    getTimeText(tm) {
      if(tm instanceof Ti.Types.Time) {
        return tm.toString(this.theTimeFormat)
      }
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/datetime/ti-datetime.mjs", _M);
})();
//============================================================
// JOIN: ti/datetime/_com.json
//============================================================
Ti.Preload("ti/com/ti/datetime/_com.json", {
  "name" : "ti-datetime",
  "globally" : true,
  "template" : "./ti-datetime.html",
  "mixins" : ["./ti-datetime.mjs"],
  "components" : [
    "@com:ti/time",
    "@com:ti/calendar"]
});
//============================================================
// JOIN: ti/droplist/ti-droplist.html
//============================================================
Ti.Preload("ti/com/ti/droplist/ti-droplist.html", `<component 
  :is="ComType"
  v-bind="this"
  :can-input="false"
  :must-in-list="true"
  :auto-collapse="true"
  @change="$notify('change', $event)"/>`);
//============================================================
// JOIN: ti/droplist/ti-droplist.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  props : {
    "multi" : {
      type : Boolean,
      default : false
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    ComType() {
      return this.multi
        ? "ti-combo-multi-input"
        : "ti-combo-input"
    }
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/droplist/ti-droplist.mjs", _M);
})();
//============================================================
// JOIN: ti/droplist/_com.json
//============================================================
Ti.Preload("ti/com/ti/droplist/_com.json", {
  "name" : "ti-droplist",
  "globally" : true,
  "template" : "./ti-droplist.html",
  "props"    : [
    "@com:ti/input/ti-input-props.mjs",
    "@com:ti/input/tags/ti-input-tags-props.mjs",
    "@com:ti/combo/input/ti-combo-input-props.mjs"],
  "mixins"   : ["./ti-droplist.mjs"],
  "components" : [
    "@com:ti/combo/input",
    "@com:ti/combo/multi-input"
  ]
});
//============================================================
// JOIN: ti/form/com/form-field/form-field-props.mjs
//============================================================
(function(){
const _M = {
  "type" : {
    type : String,
    default : "String"
  },
  "disabled" : {
    type : Boolean,
    default : false
  },
  "uniqKey" : {
    type : String,
    default : null
  },
  "name" : {
    type : [String, Array],
    default : null
  },
  "icon" : {
    type : String,
    default : null
  },
  "fieldStatus" : {
    type : Object,
    default : ()=>({})
  },
  "message" : {
    type : String,
    default : null
  },
  "title" : {
    type : String,
    default : null
  },
  "tip" : {
    type : String,
    default : null
  },
  "width" : {
    type : [String, Number],
    default : "stretch"
  },
  "height" : {
    type : [String, Number],
    default : undefined
  },
  "checkEquals" : {
    type : Boolean,
    default : true
  },
  "undefinedAs" : {
    default : undefined
  },
  "nullAs" : {
    default : undefined
  },
  "nanAs" : {
    type : Number,
    default : undefined
  },
  "emptyAs" : {
    type : String,
    default : undefined
  },
  "defaultAs" : {
    default : undefined
  },
  "display" : {
    type : [String, Object, Boolean],
    default : false
  },
  // "funcSet" : {
  //   type : Object,
  //   default : ()=>({})
  // },
  "comType" : {
    type : String,
    default : "ti-label"
  },
  "comConf" : {
    type : Object,
    default : ()=>({})
  },
  "autoValue" : {
    type : String,
    default : "value"
  },
  "serializer" : {
    type : Function,
    default : _.identity
  },
  "transformer" : {
    type : Function,
    default : _.identity
  },
  "data" : {
    type : Object,
    default : null
  },
  "statusIcons" : {
    type : Object,
    default : ()=>({
      spinning : 'fas-spinner fa-spin',
      error    : 'zmdi-alert-polygon',
      warn     : 'zmdi-alert-triangle',
      ok       : 'zmdi-check-circle',
    })
  }
}
Ti.Preload("ti/com/ti/form/com/form-field/form-field-props.mjs", _M);
})();
//============================================================
// JOIN: ti/form/com/form-field/form-field.html
//============================================================
Ti.Preload("ti/com/ti/form/com/form-field/form-field.html", `<div class="form-field"
  :class="TopClass"
  :style="ConStyle"
  v-ti-activable>
  <!--========================================
    Field Name
  -->
  <div 
    v-if="isShowTitle"
      class="field-name"
      :title="StatusText">
        <!--Status Icon-->
        <span 
          v-if="StatusIcon"
            class="name-status">
            <ti-icon :value="StatusIcon"/>
        </span>
        <!--Title Text-->
        <span class="name-title">{{TheTitle|i18n}}</span>
        <!--Field Icon-->
        <span 
          v-if="isShowIcon" 
            class="name-icon">
            <ti-icon :value="icon"/>
        </span>
  </div>
  <!--========================================
    Field Value
  -->
  <div class="field-value"
    :style="ConStyle">
    <!--
      UI Component
    -->
    <div v-if="isComReady"
      class="field-component"
      :class="ComClass"
      :style="ComStyle">
      <component 
        :is="myComType"
          v-bind="myComConf"
          @change="OnChange"/>
    </div>
    <!--
      Tips
    -->
    <div 
      v-if="isShowTip"
        class="field-tip">{{tip|i18n}}</div>
  </div>
</div>`);
//============================================================
// JOIN: ti/form/com/form-field/form-field.mjs
//============================================================
(function(){
const _M = {
  //////////////////////////////////////////////
  data : ()=>({
    isComReady : false,
    myComType : null,
    myComConf : null
  }),
  //////////////////////////////////////////////
  computed : {
    //----------------------------------------
    TopClass() {
      return this.getTopClass({
        "no-status-icons"  : !this.hasStatusIcons,
        "has-status-icons" : this.hasStatusIcons,
        "is-disabled" : this.disabled
      }, 
      `as-${this.viewportMode}`,
      (this.StatusType?`is-${this.StatusType}`:null))
    },
    //----------------------------------------
    isShowTitle  () {return !Ti.Util.isNil(this.title)},
    isShowIcon   () {return !Ti.Util.isNil(this.icon)},
    isShowTip    () {return !Ti.Util.isNil(this.tip)},
    hasStatusIcons(){return !_.isEmpty(this.statusIcons)},
    //----------------------------------------
    isNumberType() {
      return /^(Number|Integer|Float)$/.test(this.type)
    },
    //----------------------------------------
    UniqName() {
      return _.isArray(this.name)
        ? this.name.join("-")
        : this.name
    },
    //----------------------------------------
    TheTitle() {
      return this.title || this.UniqName
    },
    //----------------------------------------
    ComClass() {
      let auto    = "auto" == this.width
      let full    = "full" == this.width
      let stretch = "stretch" == this.width
      let fixed   = !auto && !full && !stretch && !Ti.Util.isNil(this.width)
      return {
        "is-size-auto"     : auto,
        "is-size-full"     : full,
        "is-size-stretch"  : stretch,
        "is-size-fixed"    : fixed
      }
    },
    //----------------------------------------
    ConStyle() {
      return Ti.Css.toStyle({
        height: this.height
      })
    },
    //----------------------------------------
    ComStyle() {
      let css = {
        height: this.height
      }
      if(this.width && !/^(auto|stretch)$/.test(this.width)) {
        css.width = Ti.Css.toSize(this.width)
      }
      return Ti.Css.toStyle(css)
    },
    //----------------------------------------
    TheDisplay() {
      // Guard
      if(!this.display) {
        return
      }
      // Eval setting
      if(!_.isBoolean(this.display) && this.display) {
        return this.evalFieldDisplayItem(this.display, {
          //funcSet    : this.funcSet,
          defaultKey : this.name
        })
      }
      // return default.
      return {
        comType : "ti-label",
        comConf : {}
      }
    },
    //----------------------------------------
    CurrentDisplayItem() {
      // Display Mode
      let dis = this.TheDisplay || {}

      // If Actived reset the display
      if(this.isActived || !this.display) {
        dis = {
          defaultAs: this.defaultAs,
          comType : this.comType,
          comConf : this.comConf,
        }
      }

      // Assign the default value and return
      return _.defaults(_.cloneDeep(dis), {
        comType : "ti-label",
        key     : this.name,
        type    : this.type,
        dict    : this.dict,
        transformer : this.transformer
      })
    },
    //----------------------------------------
    Status() {
      return _.get(this.fieldStatus, this.uniqKey)
    },
    //----------------------------------------
    StatusType() {
      return _.get(this.Status, "type")
    },
    //----------------------------------------
    StatusText() {
      return _.get(this.Status, "text")
    },
    //----------------------------------------
    StatusIcon() {
      if(this.Status && this.hasStatusIcons) {
        return this.statusIcons[this.Status.type]
      }
    },
    //----------------------------------------
  },
  ////////////////////////////////////////////////
  methods : {
    //--------------------------------------------
    __before_bubble({name, args}) {
      if(this.name) {
        return {
          name : `${this.UniqName}::${name}`,
          args
        }
      }
    },
    //--------------------------------------------
    OnChange(val) {
      // Customized value
      let v2 = val
      try {
        //console.log("this.serializer(val):", val)
        v2 = this.serializer(val)
        //console.log("field changed", val, v2)
      }
      // Invalid 
      catch(error) {
        this.$notify("invalid", {
          errMessage : ""+error,
          name  : this.name,
          value : val
        })
        return
      }
      
      // apply default
      v2 = this.evalInputValue(v2)

      // emit event
      if(!this.checkEquals || !_.isEqual(v2, this.fieldValue)) {
        //console.log("  #field.change:", v2)
        this.$notify("change", {
          name  : this.name,
          value : v2
        })
      }
    },
    //--------------------------------------------
    async evalTheCom() {
      let theCom = await this.evalDataForFieldDisplayItem({
        itemData : this.data, 
        displayItem : this.CurrentDisplayItem, 
        vars : {
          "isActived" : this.isActived,
          "disabled"  : this.disabled
        },
        autoIgnoreNil : false,
        autoValue : this.autoValue
      })
      // console.log("evalTheCom", {
      //   myUID      : this._uid,
      //   isActived  : this.isActived,
      //   oldComType : this.myComType,
      //   oldComConf : _.cloneDeep(this.myComConf),
      //   newComType : theCom.comType,
      //   newComConf : _.cloneDeep(theCom.comConf),
      // })
      
      this.myComType = theCom.comType
      this.myComConf = theCom.comConf

      this.isComReady = true
    },
    //--------------------------------------------
    evalInputValue(val) {
      // apply default
      if(_.isUndefined(val)){
        return _.cloneDeep(
          Ti.Util.fallback(this.undefinedAs, this.defaultAs)
        )
      }
      if(_.isNull(val)){
        return _.cloneDeep(
          Ti.Util.fallback(this.nullAs, this.defaultAs, null)
        )
      }
      if(this.isNumberType && isNaN(val)) {
        return _.cloneDeep(
          Ti.Util.fallback(this.nanAs, this.defaultAs, NaN)
        )
      }
      if(_.isEmpty(val) && _.isString(val)) {
        return _.cloneDeep(
          Ti.Util.fallback(this.emptyAs, this.defaultAs, "")
        )
      }
      return val
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  watch : {
    "CurrentDisplayItem" : "evalTheCom",
    "data" : {
      handler: "evalTheCom",
      immediate : true
    }
  }
  ////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/form/com/form-field/form-field.mjs", _M);
})();
//============================================================
// JOIN: ti/form/com/form-field/_com.json
//============================================================
Ti.Preload("ti/com/ti/form/com/form-field/_com.json", {
  "name" : "ti-form-field",
  "globally" : true,
  "template" : "./form-field.html",
  "methods"  : "@com:ti/support/field_display.mjs",
  "props" : "./form-field-props.mjs",
  "mixins" : ["./form-field.mjs"]
});
//============================================================
// JOIN: ti/form/com/form-group/form-group-props.mjs
//============================================================
(function(){
const _M = {
  "type" : {
    type : String,
    default : "Group"
  },
  "icon" : {
    type : String,
    default : null
  },
  "title" : {
    type : String,
    default : null
  },
  "fields" : {
    type : Array,
    default : ()=>[]
  },
  "data" : {
    type : Object,
    default : null
  },
  "fieldStatus" : {
    type : Object,
    default : ()=>({})
  },
  "statusIcons" : {
    spinning : 'fas-spinner fa-spin',
    error    : 'zmdi-alert-polygon',
    warn     : 'zmdi-alert-triangle',
    ok       : 'zmdi-check-circle',
  }
}
Ti.Preload("ti/com/ti/form/com/form-group/form-group-props.mjs", _M);
})();
//============================================================
// JOIN: ti/form/com/form-group/form-group.html
//============================================================
Ti.Preload("ti/com/ti/form/com/form-group/form-group.html", `<div class="form-group"
  :class="topClass">
  <div class="group-title">
    <ti-icon
      v-if="show.icon" 
      :value="icon"/>
    <span
      v-if="show.title"
      class="name-title">{{title|i18n}}</span>
  </div>
  <div class="group-fields">
      <ti-form-field v-for="fld in fields"
        :key="fld.key"
        v-bind="fld"
        :data="data"
        :field-status="fieldStatus"
        :status-icons="statusIcons"/>
  </div>
</div>`);
//============================================================
// JOIN: ti/form/com/form-group/form-group.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs: false,
  ///////////////////////////////////////////
  computed : {
    //----------------------------------------
    topClass() {
      let klass = [`as-${this.viewportMode}`]
      if(this.className) {
        klass.push(this.className)
      }
      return klass
    },
    //----------------------------------------
    show() {
      return {
        title : this.title ? true : false,
        icon  : this.icon  ? true : false
      }
    }
    //----------------------------------------
  }
  ///////////////////////////////////////////
}
Ti.Preload("ti/com/ti/form/com/form-group/form-group.mjs", _M);
})();
//============================================================
// JOIN: ti/form/com/form-group/_com.json
//============================================================
Ti.Preload("ti/com/ti/form/com/form-group/_com.json", {
  "name" : "form-group",
  "globally" : false,
  "template" : "./form-group.html",
  "props" : "./form-group-props.mjs",
  "mixins" : ["./form-group.mjs"]
});
//============================================================
// JOIN: ti/form/ti-form-props.mjs
//============================================================
(function(){
const _M = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "data" : {
    type : Object,
    default : undefined
  },
  "fields" : {
    type : Array,
    default : ()=>[]
  },
  "fieldStatus" : {
    type : Object,
    default : ()=>({})
  },
  // "extendFunctionSet" : {
  //   type : Object,
  //   default : undefined
  // },
  "onlyFields" : {
    type: Boolean,
    default: true
  },
  // merge each time data change
  "fixed": {
    type: Object,
    default: undefined
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "keepTabIndexBy" : {
    type : String,
    default : null
  },
  "defaultComType" : {
    type : String,
    default : "ti-label"
  },
  "autoShowBlank" : {
    type : Boolean,
    default : undefined
  },
  "currentTab" : {
    type : Number,
    default : 0
  },
  "adjustDelay" : {
    type : Number,
    default : 0
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "mode" : {
    type : String,
    default : "all",
    validator : (val)=>/^(all|tab)$/.test(val)
  },
  "tabAt" : {
    type : String,
    default : "top-center",
    validator : (v)=>/^(top|bottom)-(left|center|right)$/.test(v)
  },
  "blankAs" : {
    type : Object,
    default : ()=>({
      icon : "fas-dna",
      text : null
    })
  },
  "icon" : {
    type : String,
    default : null
  },
  "title" : {
    type : String,
    default : null
  },
  "statusIcons" : {
    type : Object,
    default : ()=>({
      spinning : 'fas-spinner fa-spin',
      error    : 'zmdi-alert-polygon',
      warn     : 'zmdi-alert-triangle',
      ok       : 'zmdi-check-circle',
    })
  },
  "spacing" : {
    type : String,
    default : "comfy",
    validator : v => /^(comfy|tiny)$/.test(v)
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width" : {
    type : [Number, String],
    default : null
  },
  "height" : {
    type : [Number, String],
    default : null
  }
}
Ti.Preload("ti/com/ti/form/ti-form-props.mjs", _M);
})();
//============================================================
// JOIN: ti/form/ti-form.html
//============================================================
Ti.Preload("ti/com/ti/form/ti-form.html", `<div class="ti-form"
  :class="TopClass"
  :style="TopStyle"
  v-ti-activable>
  <template v-if="hasData || !isAutoShowBlank">
    <!--
      Form Header
    -->
    <header class="form-header" v-if="hasHeader">
      <span v-if="icon"
        class="it-icon"><ti-icon :value="icon"/></span>
      <span v-if="title"
        class="it-text">{{title|i18n}}</span>
    </header>
    <!--
      Tabs for display:"tab"
    -->
    <div class="form-tab" v-if="isTabMode">
      <ul>
        <li v-for="tab in TabItems" 
          :class="tab.className"
          @click.left="OnClickTab(tab)">
          <ti-icon 
            class="tab-icon" v-if="tab.icon" :value="tab.icon"/>
          <span 
            class="tab-text" v-if="tab.title">{{tab.title|i18n}}</span>
        </li>
      </ul>
    </div>
    <!--
      Form Fields
    -->
    <div class="form-body">
      <template v-for="fld in FieldsInCurrentTab">
        <!--
          For Group
        -->
        <form-group v-if="'Group' == fld.type"
          v-bind="fld"
          :data="data"
          :field-status="fieldStatus"
          :status-icons="statusIcons"
          @change="OnFieldChange"/>
        <!--
          For field
        -->
        <ti-form-field v-else
          :key="fld.key"
          v-bind="fld"
          :data="data"
          :field-status="fieldStatus"
          :status-icons="statusIcons"
          @change="OnFieldChange"/>
      </template>
    </div>
  </template>
  <!--
    Show Blank
  -->
  <ti-loading 
    v-else
      class="nil-data as-big-mask"
      v-bind="blankAs"/>
</div>`);
//============================================================
// JOIN: ti/form/ti-form.mjs
//============================================================
(function(){
const _M = {
  //////////////////////////////////////////////////////
  model : {
    prop  : "data",
    event : "change"
  },
  //////////////////////////////////////////////////////
  data : ()=>({
    myKeysInFields: [],
    currentTabIndex : 0
  }),
  //////////////////////////////////////////////////////
  computed : {
    //--------------------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-tab-mode": this.isTabMode,
        "is-all-mode": this.isAllMode,
        [`tab-at-${this.tabAt}`]  : this.isTabMode,
        [`tab-at-${this.TheTabAtX}`] : this.isTabMode,
        [`tab-at-${this.TheTabAtY}`] : this.isTabMode
      }, 
      `as-${this.viewportMode}`,
      `as-spacing-${this.spacing||"comfy"}`
      )
    },
    //--------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //--------------------------------------------------
    hasHeader() {
      return this.title || this.icon ? true : false
    },
    //--------------------------------------------------
    hasData() {
      return !Ti.Util.isNil(this.data)
    },
    //--------------------------------------------------
    isTabMode() {return 'tab' == this.mode},
    isAllMode() {return 'all' == (this.mode || "all")},
    isAutoShowBlank() {return Ti.Util.fallback(this.autoShowBlank, false)},
    //--------------------------------------------------
    TheTabAt() {return this.tabAt.split("-")},
    TheTabAtX(){return this.TheTabAt[1]},
    TheTabAtY(){return this.TheTabAt[0]},
    //--------------------------------------------------
    TheFields() {
      let list = []
      let keys = []
      //................................................
      _.forEach(this.fields, (fld, index)=>{
        let fld2 = this.evalFormField(fld, [index])
        if(fld2) {
          list.push(fld2)
          // Gather keys
          if(!fld2.disabled) {
            // Field group ...
            if("Group" == fld2.type) {
              _.forEach(fld2.fields, ({disabled, name})=>{
                if(!disabled) {
                  keys.push(name)
                }
              })
            }
            // The fields
            else {
              keys.push(fld2.name)
            }
          }
        }
      })
      //................................................
      this.myKeysInFields = _.flattenDeep(keys)
      //................................................
      return list
    },
    //--------------------------------------------------
    TabList() {
      let list = []
      let otherFields = []
      if(this.isTabMode) {
        for(let fld of this.TheFields) {
          if(fld.type == "Group") {
            list.push(fld)
          }
          // Collect to others
          else {
            otherFields.push(fld)
          }
        }
        // Join others
        if(!_.isEmpty(otherFields)) {
          list.push({
            type : "Group",
            title : "i18n:others",
            fields : otherFields
          })
        }
      }
      return list;
    },
    //--------------------------------------------------
    // add "current" to theTabList
    TabItems() {
      let items = []
      _.forEach(this.TabList, (li, index)=>{
        let isCurrent = (index == this.currentTabIndex)
        items.push(_.assign({}, li, {
          index, isCurrent, className: {
            "is-current" : isCurrent
          }
        }))
      })
      return items
    },
    //--------------------------------------------------
    CurrentTab() {
      for(let tab of this.TabItems) {
        if(tab.isCurrent) {
          return tab
        }
      }
    },
    //--------------------------------------------------
    FieldsInCurrentTab() {
      // Current Tab
      if(this.isTabMode) {
        if(this.CurrentTab) {
          return this.CurrentTab.fields || []
        }
        return []
      }
      // Show All
      else {
        return this.TheFields
      }
    },
    //--------------------------------------------------
    /***
     * Eval function set for `transformer|serializer` of each fields
     * 
     * Defaultly, it will support the function set defined in `Ti.Types`
     */
    // FuncSet() {
    //   return _.assign({}, Ti.GlobalFuncs(), this.extendFunctionSet)
    // },
    //--------------------------------------------------
    TheData() {
      if(this.data) {
        if(this.onlyFields) {
          return _.pick(this.data, this.myKeysInFields)
        }
        return this.data
      }
      return {}
    }
    //--------------------------------------------------
  },
  //////////////////////////////////////////////////////
  methods : {
    //--------------------------------------------------
    OnClickTab(tab) {
      this.currentTabIndex = tab.index
      this.$notify("tab:change", tab)
    },
    //--------------------------------------------------
    OnFieldChange({name, value}={}) {
      // Notify at first
      //console.log("notify field")
      this.$notify("field:change", {name, value})

      // Notify later ...
      // Wait a tick, give the change parent
      // Update the data input
      // The computed field "TheField"
      // will auto-update the field status 'disabled/hidden'
      // It may change the notify data
      this.$nextTick(()=>{
        //console.log("notify data")
        let data = this.getData({name, value})
        this.$notify("change", data)
      })
    },
    //--------------------------------------
    getData({name, value}={}) {
      let data = _.cloneDeep(this.TheData)

      // Signle value
      if(name && _.isString(name)) {
        // Whole data
        if(".." == name) {
          _.assign(data, value)
        }
        // Statci value
        else if(/^'[^']+'$/.test(name)) {
          return
        }
        // Dynamic value
        else {
          _.set(data, name, value)
        }
      }
      // Object
      else if(_.isArray(name)) {
        let vo = {}
        for(let k of name) {
          vo[k] = _.get(value, k)
        }
        _.assign(data, vo)
      }

      // Join the fixed data
      if(this.fixed) {
        _.assign(data, fixed)
      }
      return data
    },
    //--------------------------------------
    isGroup(fld) {
      return "Group" == fld.type || _.isArray(fld.fields)
    },
    //--------------------------------------------------
    evalFormField(fld={}, nbs=[]) {
      // Hide or disabled
      if(fld.hidden) {
        if(Ti.Validate.match(this.data, fld.hidden)) {
          return
        }
      }
      // Disable
      let disabled = false
      if(fld.disabled) {
        disabled = Ti.Validate.match(this.data, fld.disabled)
      }

      // The key
      let fldKey = Ti.Util.anyKey(fld.name||nbs, "ti-fld")
      // let fldKey = fld.name
      //   ? [].concat(fld.name).join("-")
      //   : "ti-fld-" + nbs.join("-")
      //............................................
      // For group
      if(this.isGroup(fld)) {
        let group = {
          disabled,
          type        : "Group",
          key         : fldKey,
          className   : fld.className,
          icon        : fld.icon,
          title       : fld.title,
          fields      : []
        }
        // Group fields
        _.forEach(fld.fields, (subfld, index)=>{
          let newSubFld = this.evalFormField(subfld, [...nbs, index])
          if(newSubFld) {
            group.fields.push(newSubFld)
          }
        })
        // Done
        return _.isEmpty(group.fields) ? null : group
      }
      //............................................
      // For Normal Field
      if(fld.name) {
        let field = _.defaults(_.omit(fld, "disabled"), {
          type : "String",
          comType : this.defaultComType,
          disabled
        })

        // The UniqKey of field
        field.uniqKey = _.concat(field.name).join("-")
        //console.log(field.uniqKey)

        // // field status
        // let fStatus = _.get(this.fieldStatus, funiqKey)
        // if(fStatus) {
        //   field.status  = fStatus.status
        //   field.message = fStatus.message
        // }

        // Default
        if(!field.serializer) {
          let fnName = Ti.Types.getFuncByType(field.type||"String", "serializer")
          field.serializer = `Ti.Types.${fnName}`
        }
        if(!field.transformer) {
          let fnName = Ti.Types.getFuncByType(field.type||"String", "transformer")
          field.transformer = `Ti.Types.${fnName}`
        }        

        // Tidy form function
        const invokeOpt = {
          context: this,
          partialRight: true
        }
        field.serializer  = Ti.Util.genInvoking(field.serializer, invokeOpt)
        field.transformer = Ti.Util.genInvoking(field.transformer,invokeOpt)

        // Done
        return field
      }
    },
    //--------------------------------------------------
    __adjust_fields_width() {
      // Guard
      if(!_.isElement(this.$el))
        return
      // Find all field-name Elements
      let $fldNames = Ti.Dom.findAll(".form-field > .field-name", this.$el)

      // Reset them to org-width
      for(let $fldnm of $fldNames) {
        Ti.Dom.setStyle($fldnm, {width:""})
      }

      // Get the max-width of them
      let maxWidth = 0
      for(let $fldnm of $fldNames) {
        let rect = Ti.Rects.createBy($fldnm)
        maxWidth = Math.ceil(Math.max(rect.width, maxWidth))
      }

      // Wait for whole view rendered, and align the field-name
      for(let $fldnm of $fldNames) {
        Ti.Dom.setStyle($fldnm, {width:maxWidth})
      }
    },
    //--------------------------------------------------
    adjustFieldsWidth() {
      if(this.adjustDelay > 0) {
        _.delay(()=>{
          this.__adjust_fields_width()
        }, this.adjustDelay)
      } else {
        this.$nextTick(()=>{
          this.__adjust_fields_width()
        })
      }
    },
    //--------------------------------------------------
    // Callback
    //--------------------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("ti-form", uniqKey)
      if("ENTER" == uniqKey) {
        // It should wait a while before submit
        // <ti-input> will apply change at @change event
        // And the @change event will be fired when ENTER 
        // bubble fade away
        _.delay(()=>{
          this.$notify("submit")
        }, 100)
      }
    }
    //--------------------------------------------------
  },
  //////////////////////////////////////////////////////
  watch : {
    "TheFields" : function(){
      this.adjustFieldsWidth()
    },
    "currentTab" : function(index){
      this.currentTabIndex = index
    },
    "currentTabIndex" : function(index){
      if(this.keepTabIndexBy) {
        Ti.Storage.session.set(this.keepTabIndexBy, index)
      }
      this.adjustFieldsWidth()
    }
  },
  //////////////////////////////////////////////////////
  created : function() {
    this.__debounce_adjust_fields_width = _.debounce(()=>{
      this.__adjust_fields_width()
    }, 500)
  },
  //////////////////////////////////////////////////////
  mounted : function() {
    //--------------------------------------------------
    this.currentTabIndex = 
      Ti.Storage.session.getInt(
          this.keepTabIndexBy, this.currentTab
      )
    //--------------------------------------------------
    Ti.Viewport.watch(this, {resize:()=>{
      this.__debounce_adjust_fields_width()
    }})
    //--------------------------------------------------
    this.adjustFieldsWidth()
    //--------------------------------------------------
  },
  //////////////////////////////////////////////////////
  beforeDestroy : function(){
    Ti.Viewport.unwatch(this)
  }
  //////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/form/ti-form.mjs", _M);
})();
//============================================================
// JOIN: ti/form/_com.json
//============================================================
Ti.Preload("ti/com/ti/form/_com.json", {
  "name" : "ti-form",
  "globally" : true,
  "template" : "./ti-form.html",
  "methods"  : "@com:ti/support/field_display.mjs",
  "props" : "./ti-form-props.mjs",
  "mixins" : ["./ti-form.mjs"],
  "components" : [
    "./com/form-group",
    "./com/form-field",
    "@com:ti/input",
    "@com:ti/input/num",
    "@com:ti/input/tags",
    "@com:ti/input/color",
    "@com:ti/input/icon",
    "@com:ti/input/date",
    "@com:ti/input/time",
    "@com:ti/input/timerange",
    "@com:ti/input/month",
    "@com:ti/input/datetime",
    "@com:ti/input/daterange",
    "@com:ti/input/text",
    "@com:ti/combo/input",
    "@com:ti/combo/multi-input",
    "@com:ti/label",
    "@com:ti/toggle",
    "@com:ti/switcher",
    "@com:ti/droplist"]
});
//============================================================
// JOIN: ti/form/_hmaker.json
//============================================================
Ti.Preload("ti/com/ti/form/_hmaker.json", {
  "icon"   : "im-task-o",
  "title"  : "i18n:com-form",
  "scenes" : ["desktop", "tablet"],
  "editComType" : "hmaker-edit-com-form",
  "editComConf" : {
    "value" : "=comConf"
  }
});
//============================================================
// JOIN: ti/gui/block/ti-gui-block.html
//============================================================
Ti.Preload("ti/com/ti/gui/block/ti-gui-block.html", `<div class="ti-gui-block" 
  :class="TopClass"
  :style="TopStyle">
  <!--
    Header
  -->
  <div class="block-head" v-if="isShowHeader">
    <!--Icon-->
    <div class="as-icon" v-if="icon">
      <ti-icon :value="icon"/>
    </div>
    <!--Title-->
    <div class="as-title">
      <span v-if="title">{{title|i18n}}</span>
    </div>
    <!--Actions-->
    <div class="as-actions" v-if="hasActions">
      <ti-actionbar 
        :items="actions"
        :status="actionStatus"/>
    </div>
  </div>
  <!--
    Content
  -->
  <div class="block-main" v-if="TheCom">
    <div class="block-main-con"
      :class="MainConClass">
      <component 
        class="ti-fill-parent"
        :is="TheCom.comType"
        v-bind="TheCom.comConf"/>
    </div>
  </div>
  <!--Blank-->
  </div>`);
//============================================================
// JOIN: ti/gui/block/ti-gui-block.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////
  inject : ["$gui"],
  /////////////////////////////////////////
  props : {
    "type" : {
      type : String,
      default : null,
      validator : (v)=>{
        return Ti.Util.isNil(v)
          || /^(cols|rows|tabs)$/.test(v)
      }
    },
    "title" : {
      type : String,
      default : null
    },
    "icon" : {
      type : [String, Object],
      default : null
    },
    "hideTitle" : {
      type : Boolean,
      default : false
    },
    "actions" : {
      type : Array,
      default : ()=>[]
    },
    "actionStatus" : {
      type : Object,
      default : ()=>({})
    },
    "name" : {
      type : String,
      default : null
    },
    "blocks" : {
      type : Array,
      default : ()=>[]
    },
    "body" : {
      type : [String, Object],
      default : null
    },
    "embedIn" : {
      type : String,
      default : null,
      validator : (v)=>/^(panel|rows|cols|tabs)$/.test(v)
    },
    "size" : {
      type : [String, Number],
      default : null
    },
    "overflow" : {
      type : String,
      default : undefined,
      validator: v=>(_.isUndefined(v) || (/^(auto|none|fill|cover)$/.test(v)))
    },
    "flex" : {
      type : String,
      default : undefined,
      validator : (v)=>(_.isUndefined(v) || /^(nil|auto|grow|shrink|both|none)$/.test(v))
    },
    "schema" : {
      type : Object,
      default : ()=>({})
    },
    "shown" : {
      type : Object,
      default : ()=>({})
    },
    "captureEvents" : {
      type : Object,
      default : ()=>({})
    },
    // Those 3 props for by-pass to sub-(cols/rows)
    "tabAt"       : undefined,
    "adjustable"  : undefined,
    "border"      : undefined
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        [`gui-block-${this.name}`] : this.name ? true : false,
        "is-show-header"  : this.isShowHeader,
        "is-hide-header"  : !this.isShowHeader,
        "ti-fill-parent" : /^(tabs|panel)$/.test(this.embedIn)
      }, `is-flex-${this.FlexName}`)
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toStyle(({
        //..................................
        rows:()=>({
          height: this.BlockSize
        }),
        //..................................
        cols:()=>({
          width : this.BlockSize
        }),
        //..................................
        tabs:()=>({}),
        //..................................
        panel:()=>({})
        //..................................
      })[this.embedIn]())
    },
    //--------------------------------------
    MainConClass() {
      if(!this.isFlexNil) {
        return {
          "fill-parent"  : "fill"==this.TheOverflow,
          "cover-parent" : "cover"==this.TheOverflow
        }
      }
    },
    //--------------------------------------
    TheOverflow() {
      let ov = this.overflow || this.$gui.defaultOverflow || "auto"
      if("auto" == ov) {
        if(this.isFlexNone) {
          return "fill"
        }
        if(/^(both|shrink)$/.test(this.FlexName)) {
          return "cover"
        }
      }
      return ov
    },
    //--------------------------------------
    BlockSize() {
      let size = this.size
      return /^(auto|stretch)$/.test(size) 
        ? null
        : size
    },
    //--------------------------------------
    FlexName() {
      let flex = this.flex || this.$gui.defaultFlex || "auto"
      if("auto" == flex) {
        if("stretch" == this.size || Ti.Util.isNil(this.size)) {
          return "both"
        }
        return "none"
      }
      return flex || "both"
    },
    //--------------------------------------
    isFlexNil() {
      return "nil" == this.FlexName
    },
    //--------------------------------------
    isFlexNone() {
      return "none" == this.FlexName
    },
    //--------------------------------------
    isShowHeader() {
      if(this.hideTitle || 'tabs' == this.embedIn) {
        return false
      }
      if(this.title || this.hasActions) {
        return true
      }
      return false
    },
    //--------------------------------------
    hasActions() {
      return !_.isEmpty(this.actions)
    },
    //--------------------------------------
    TheCom() {
      //....................................
      // Body -> Component
      if(this.body) {
        let com = _.isString(this.body) ? this.schema[this.body] : this.body
        if(com) {
          let parent = this.schema[com.extends]
          let self = _.omit(com, "extends")
          com = _.merge({}, parent, self)
          return _.defaults(com, {
            comType : "ti-label",
            comConf : {}
          })
        }
      }
      //....................................
      // Sub GUI
      if(!_.isEmpty(this.blocks)) {
        let comType = `ti-gui-${this.type||"cols"}`
        let comConf = {
          tabAt      : this.tabAt,
          border     : this.border,
          adjustable : this.adjustable,
          blocks     : this.blocks,
          schema : this.schema,
          actionStatus : this.actionStatus,
          shown  : this.shown,
          defaultFlex : this.defaultFlex
        }
        return {
          comType, comConf
        }
      }
      //....................................
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    __before_bubble({name, args}) {
      if(this.name) {
        return {
          name : `${this.name}::${name}`,
          args
        }
      }
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/ti/gui/block/ti-gui-block.mjs", _M);
})();
//============================================================
// JOIN: ti/gui/block/_com.json
//============================================================
Ti.Preload("ti/com/ti/gui/block/_com.json", {
  "name" : "ti-gui-block",
  "globally" : true,
  "template" : "./ti-gui-block.html",
  "mixins"   : ["./ti-gui-block.mjs"]
});
//============================================================
// JOIN: ti/gui/cols/ti-gui-cols.html
//============================================================
Ti.Preload("ti/com/ti/gui/cols/ti-gui-cols.html", `<div class="ti-gui-cols" :class="topClass">
  <template v-if="hasBlocks">
    <template v-for="(block, index) in blocks">
      <ti-gui-block v-if="!block.hide"
        :key="index"
        embed-in="cols"
        v-bind="block"
        :schema="schema"
        :action-status="actionStatus"
        :shown="shown"/>
      </template>
  </template>
</div>`);
//============================================================
// JOIN: ti/gui/cols/ti-gui-cols.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  /////////////////////////////////////////
  props : {
    "blocks" : {
      type : Array,
      default : ()=>[]
    },
    "adjustable" : {
      type : Boolean,
      default : true
    },
    "border" : {
      type : Boolean,
      default : false
    },
    "schema" : {
      type : Object,
      default : ()=>({})
    },
    "actionStatus" : {
      type : Object,
      default : ()=>({})
    },
    "shown" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    topClass() {
      return Ti.Css.mergeClassName({
        "is-adjustable" : this.adjustable,
        "show-border"   : this.border
      }, this.className)
    },
    //--------------------------------------
    hasBlocks() {
      return !_.isEmpty(this.blocks)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/ti/gui/cols/ti-gui-cols.mjs", _M);
})();
//============================================================
// JOIN: ti/gui/cols/_com.json
//============================================================
Ti.Preload("ti/com/ti/gui/cols/_com.json", {
  "name" : "ti-gui-cols",
  "globally" : true,
  "template" : "./ti-gui-cols.html",
  "mixins"   : ["./ti-gui-cols.mjs"],
  "components" : ["@com:ti/gui/block"]
});
//============================================================
// JOIN: ti/gui/panel/ti-gui-panel.html
//============================================================
Ti.Preload("ti/com/ti/gui/panel/ti-gui-panel.html", `<div class="ti-gui-panel"
  :class="TopClass"
  @click.left="OnClickMask">
  <div class="panel-con"
    :style="ConStyle"
    @click.left.stop>
    <!--
      Block
    -->
    <ti-gui-block
      embed-in="panel"
      flex="none"
      :type="type"
      :title="title"
      :icon="icon"
      :hide-title="hideTitle"
      :actions="actions"
      :action-status="actionStatus"
      :name="name"
      :blocks="blocks"
      :body="body"
      :overflow="overflow"
      :schema="schema"
      :shown="shown"
      :capture-events="captureEvents"/>
    <!--
      Closer
    -->
    <div
      v-if="hasCloser"
        class="panel-closer"
        :class="CloserClass">
        <ti-icon
          value="zmdi-close"
          @click.native="OnClose"/>
    </div>
  </div>
</div>`);
//============================================================
// JOIN: ti/gui/panel/ti-gui-panel.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  inject: ["$gui"],
  /////////////////////////////////////////
  props : {
    "captureEvents" : undefined,
    "title" : {
      type : String,
      default : null
    },
    "icon" : {
      type : [String, Object],
      default : null
    },
    "hideTitle" : {
      type : Boolean,
      default : false
    },
    "actions" : {
      type : Array,
      default : ()=>[]
    },
    "actionStatus" : {
      type : Object,
      default : ()=>({})
    },
    "name" : {
      type : String,
      default : null
    },
    "type" : {
      type : String,
      default : null,
      validator : (v)=>{
        return Ti.Util.isNil(v)
          || /^(cols|rows|tabs)$/.test(v)
      }
    },
    "blocks" : {
      type : Array,
      default : ()=>[]
    },
    "body" : {
      type : [String, Object],
      default : null
    },
    "adjustable" : {
      type : [Boolean, String],
      default : true,
      validator : (v)=>{
        return _.isBoolean(v) || /^(x|y)$/.test(v)
      }
    },
    "overflow" : {
      type : String,
      default : undefined
    },
    "width" : {
      type : [String,Number],
      default : -1
    },
    "height" : {
      type : [String,Number],
      default : -1
    },
    "viewportWidth" : {
      type : [String,Number],
      default : 0
    },
    "viewportHeight" : {
      type : [String,Number],
      default : 0
    },
    "position" : {
      type : String,
      default : "center",
      validator : (v)=>{
        return /^(left|right|top|bottom|center)$/.test(v)
          || /^((left|right)-top|bottom-(left|right))$/.test(v)
      }
    },
    "closer" : {
      type : String,
      default : "default",
      validator : (v)=>(
        _.isNull(v) || /^(default|bottom|top|left|right)$/.test(v)
      )
    },
    "mask" : {
      type : Boolean,
      default : false
    },
    "transparent": {
      type : Boolean,
      default : false
    },
    "clickMaskToClose" : {
      type : Boolean,
      default : false
    },
    "schema" : {
      type : Object,
      default : ()=>({})
    },
    "shown" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "show-mask" : this.mask,
        "no-mask"   : !this.mask,
        "is-bg-transparent": this.transparent,
        "is-bg-opaque": !this.transparent,
        "is-closer-default" : this.isCloserDefault
      }, `at-${this.position}`)
    },
    //--------------------------------------
    ConStyle() {
      let width  = Ti.Css.toPixel(this.width, this.viewportWidth, this.width)
      let height = Ti.Css.toPixel(this.height, this.viewportHeight, this.height)
      return Ti.Css.toStyle({width, height})
    },
    //--------------------------------------
    hasCloser() {
      return this.closer ? true : false
    },
    //--------------------------------------
    isCloserDefault() {
      return true === this.closer || "default" == this.closer
    },
    //--------------------------------------
    CloserClass() {
      return Ti.Css.mergeClassName({
        'as-lamp-cord' : !this.isCloserDefault,
        'as-default'   : this.isCloserDefault,
        [`at-${this.closer}`] : !this.isCloserDefault
      })
    }
    //--------------------------------------
    // theCloserIconName() {
    //   return this.isCloserDefault
    //           ? "zmdi-minus"
    //           : "zmdi-close";
    //}
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClose() {
      this.$gui.onBlockHide(this.name)
    },
    //--------------------------------------
    OnClickMask() {
      if(this.clickMaskToClose) {
        this.$gui.onBlockHide(this.name)
      }
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/ti/gui/panel/ti-gui-panel.mjs", _M);
})();
//============================================================
// JOIN: ti/gui/panel/_com.json
//============================================================
Ti.Preload("ti/com/ti/gui/panel/_com.json", {
  "name" : "ti-gui-panel",
  "globally" : true,
  "template" : "./ti-gui-panel.html",
  "mixins"   : ["./ti-gui-panel.mjs"],
  "components" : ["@com:ti/gui/block"]
});
//============================================================
// JOIN: ti/gui/rows/ti-gui-rows.html
//============================================================
Ti.Preload("ti/com/ti/gui/rows/ti-gui-rows.html", `<div class="ti-gui-rows" :class="topClass">
  <template v-if="hasBlocks">
    <template v-for="(block, index) in blocks">
      <ti-gui-block v-if="!block.hide"
        :key="index"
        embed-in="rows"
        v-bind="block"
        :schema="schema"
        :action-status="actionStatus"
        :shown="shown"/>
    </template>
  </template>
</div>`);
//============================================================
// JOIN: ti/gui/rows/ti-gui-rows.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  /////////////////////////////////////////
  props : {
    "blocks" : {
      type : Array,
      default : ()=>[]
    },
    "adjustable" : {
      type : Boolean,
      default : true
    },
    "border" : {
      type : Boolean,
      default : false
    },
    "schema" : {
      type : Object,
      default : ()=>({})
    },
    "actionStatus" : {
      type : Object,
      default : ()=>({})
    },
    "shown" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    topClass() {
      return Ti.Css.mergeClassName({
        "is-adjustable" : this.adjustable,
        "show-border"   : this.border
      }, this.className)
    },
    //--------------------------------------
    hasBlocks() {
      return !_.isEmpty(this.blocks)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/ti/gui/rows/ti-gui-rows.mjs", _M);
})();
//============================================================
// JOIN: ti/gui/rows/_com.json
//============================================================
Ti.Preload("ti/com/ti/gui/rows/_com.json", {
  "name" : "ti-gui-rows",
  "globally" : true,
  "template" : "./ti-gui-rows.html",
  "mixins"   : ["./ti-gui-rows.mjs"],
  "components" : ["@com:ti/gui/block"]
});
//============================================================
// JOIN: ti/gui/tabs/ti-gui-tabs.html
//============================================================
Ti.Preload("ti/com/ti/gui/tabs/ti-gui-tabs.html", `<div class="ti-gui-tabs" :class="topClass">
  <!--
    Tab title bar
  -->
  <header :class="tabClass">
    <ul>
      <li v-for="it in theTabItems"
        :key="it.key"
        :class="it.className"
        @click="onSetCurrentTabItem(it)">
        <!--Icon-->
        <ti-icon
          v-if="it.icon"
            class="it-icon"
            :value="it.icon"/>
        <!--Text-->
        <span class="it-text">{{it.title|i18n}}</span>
      </li>
    </ul>
  </header>
  <!--
    Current Block
  -->
  <section v-if="theCurrentBlock">
    <ti-gui-block 
      embed-in="tabs"
      v-bind="theCurrentBlock"
      :action-status="actionStatus"
      :schema="schema"
      :shown="shown"/>
  </section>
</div>`);
//============================================================
// JOIN: ti/gui/tabs/ti-gui-tabs.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  inject: ["$gui"],
  /////////////////////////////////////////
  data: ()=>({
    myCurrentTab : 0
  }),
  /////////////////////////////////////////
  props : {
    "tabAt" : {
      type : String,
      default : "top-left",
      validator : (v)=>/^(top|bottom)-(left|center|right)$/.test(v)
    },
    "blocks" : {
      type : Array,
      default : ()=>[]
    },
    "schema" : {
      type : Object,
      default : ()=>({})
    },
    "actionStatus" : {
      type : Object,
      default : ()=>({})
    },
    "shown" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    topClass() {
      return Ti.Css.mergeClassName([
        `at-${this.theTabAt[0]}`
      ], this.className)
    },
    //--------------------------------------
    theTabAt() {
      return this.tabAt.split("-")
    },
    //--------------------------------------
    tabClass() {
      return `as-${this.theTabAt[1]}`
    },
    theSchema() {
      return this.schema
    },
    //--------------------------------------
    theBlockWrapList() {
      let list = []
      for(let i=0; i<this.blocks.length; i++) {
        let block = this.blocks[i]
        let key = block.name || `tab-${i}`
        list.push({
          index : i, 
          key, block          
        })
      }
      return list
    },
    //--------------------------------------
    theTabItems() {
      let list = []
      for(let wrap of this.theBlockWrapList) {
        let current = this.myCurrentTab == wrap.key
        let item = {
          current,
          key   : wrap.key,
          index : wrap.index,
          name  : wrap.block.name, 
          icon  : wrap.block.icon,
          title : wrap.block.title,
          className : {"is-current":current}
        }
        // tab item can not be blank
        if(!item.icon && !item.title) {
          item.title = Ti.Util.fallback(item.name, item.key)
        }
        list.push(item)
      }
      return list
    },
    //--------------------------------------
    theCurrentTabItem() {
      for(let item of this.theTabItems) {
        if(item.current) {
          return item
        }
      }
    },
    //--------------------------------------
    theCurrentBlock() {
      for(let wrap of this.theBlockWrapList) {
        if(this.myCurrentTab == wrap.key) {
          return wrap.block
        }
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    onSetCurrentTabItem(item) {
      this.$gui.onBlockShownUpdate({
        [item.key] : true,
        [this.theCurrentTabItem.key] : false
      })
    },
    //--------------------------------------
    syncCurrentTabFromShown() {
      //console.log("syncCurrentTabFromShown")
      for(let wrap of this.theBlockWrapList) {
        if(this.shown[wrap.key]) {
          this.myCurrentTab = wrap.key
          return
        }
      }
      // Default highlight the first tab
      if(this.theBlockWrapList.length>0) {
        this.myCurrentTab = this.theBlockWrapList[0].key
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "shown" : function() {
      this.syncCurrentTabFromShown()
    },
    "blocks" : function() {
      this.syncCurrentTabFromShown()
    }
  },
  //////////////////////////////////////////
  mounted : function() {
    this.syncCurrentTabFromShown()
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/ti/gui/tabs/ti-gui-tabs.mjs", _M);
})();
//============================================================
// JOIN: ti/gui/tabs/_com.json
//============================================================
Ti.Preload("ti/com/ti/gui/tabs/_com.json", {
  "name" : "ti-gui-tabs",
  "globally" : true,
  "template" : "./ti-gui-tabs.html",
  "mixins"   : ["./ti-gui-tabs.mjs"],
  "components" : ["@com:ti/gui/block"]
});
//============================================================
// JOIN: ti/gui/ti-gui-methods.mjs
//============================================================
(function(){
const _M = {
  //--------------------------------------
  formatGuiBlock(b={}, shown={}, float=false) {
    // ClassName
    let klass = [`at-${b.position||"center"}`]
    // Show/hide
    let isShown = shown[b.name]
    if(_.isUndefined(isShown)) {
      // hide panel block in default
      if(float) {
        isShown = false
      }
      // show normal block in default
      else {
        isShown = true
      }
    }
    // Mask
    if(b.mask) {
      klass.push("show-mask")
    } else {
      klass.push("no-mask")
    }
    // Transition Name
    let transName = b.position ? `gui-panel-${b.position}` : null
    // Block Info
    let pickKeys = [
      "className", "actionDisplayMode", "flex",
      "icon","title","actions","name", "adjustable", "closer", 
      "position", "overflow", "status"]
    let panelSize = {}
    // !!!
    // If block is float, that mean it in a panel
    // keep the width/height outside block info
    // it should not set to the block but the panel
    // !!!
    if(!float || b.mask) {
      pickKeys.push("width")
      pickKeys.push("height")
    }
    // panelSize should be assign to top
    else {
      // left/right:  panel hold the with
      if(/^(left|right)$/.test(b.position)) {
        pickKeys.push("height")
        panelSize.width = b.width
      }
      // top/bottom:  panel hold the height
      else if(/^(top|bottom)$/.test(b.position)) {
        pickKeys.push("width")
        panelSize.height = b.height
      }
      // center, block hold the size
      else if("center"==b.position){
        pickKeys.push("width")
        pickKeys.push("height")
      }
      // Others, panel hold the size
      else {
        panelSize.width = b.width
        panelSize.height = b.height
      }
    }
    let info = _.pick(b, pickKeys)
    // Sizing
    if(b.size && "stretch"!=b.size) {
      // Cols
      if("cols" == this.type) {
        info.width = b.size
      }
      // Rows
      else if("rows" == this.type) {
        info.height = b.size
      }
    }
    // ComType as body
    let comType, comConf
    if(b.body) {
      let com = b.body || {}
      if(_.isString(com)) {
        let sch = this.schema[com]
        // Define the detail in schema
        if(_.isPlainObject(sch)) {
          com = sch
          // explain the "extends"
          if(com.extends) {
            let parentSchema = this.schema[com.extends]
            let mySchema = _.omit(com, ["extends"])
            com = _.merge({}, parentSchema, mySchema)
          }
        }
        // Just a com-type
        else {
          com = {comType:com, comConf:{}}
        }
      }
      comType = com.comType || "ti-label"
      comConf = com.comConf || {value:b.name||"GUI"}
    }
    // ComType as layout/block
    else if(!_.isEmpty(b.blocks)){
      comType = "ti-gui"
      comConf = _.pick(b, [
        "type", "blocks", "adjustable", "border"
      ])
      _.defaults(comConf, {
        type : "cols",
        schema : this.schema,
        shown : this.shown
      })
    }
    // Join to result list
    return {
      className: klass.join(" "), 
      panelStyle : Ti.Css.toStyle(panelSize),
      name : b.name,
      isShown, transName,
      info, comType, comConf
    }
  },
  //--------------------------------------
  getFormedBlockList(list=[], shown={}, float=false) {
    let list2 = []
    if(_.isArray(list)) {
      for(let b of list) {
        let b2 = this.formatGuiBlock(b, shown, float)
        list2.push(b2)
      }
    }
    //console.log(list2)
    return list2
  },
  //--------------------------------------
  /***
   * Create new plain object to represent the blocks shown.
   * 
   * @param show{Object} : The primary shown object to be merge
   * @param name{String|Array|Object} : Value to marge.
   *  - `String` : Set the single key to the `value`
   *  - `Array`  : Batch set a group of keys to the `value`
   *  - `Object` : Merge to `shown` directly, the third argument `value` willl 
   *               be ignored.
   * @param value{Any} : if `name` is string, it will be taken as value.
   */
  createGuiBlockShown(shown={}, name, value) {
    let re = {...shown}
    // String
    if(_.isString(name)) {
      re[name] = value
    }
    // Array
    else if(_.isArray(name)) {
      for(let nm of name) {
        re[nm] = value
      }
    }
    // Object
    else if(_.isPlainObject(name)) {
      _.assign(re, name)
    }
    return re
  }
  //--------------------------------------
}
Ti.Preload("ti/com/ti/gui/ti-gui-methods.mjs", _M);
})();
//============================================================
// JOIN: ti/gui/ti-gui.html
//============================================================
Ti.Preload("ti/com/ti/gui/ti-gui.html", `<div class="ti-gui" :class="TopClass">
  <!--===========================================
    All normal layout
  -->
  <div class="gui-con">
    <!--
      Layout as rows
    -->
    <ti-gui-rows v-if="isRowsLayout"
      class="ti-fill-parent"
      v-bind="TheLayout"
      :schema="schema"
      :shown="TheShown"
      :default-flex="defaultFlex"
      :action-status="actionStatus"/>
    <!--
      Layout as cols
    -->
    <ti-gui-cols v-else-if="isColsLayout"
      class="ti-fill-parent"
      v-bind="TheLayout"
      :schema="schema"
      :shown="TheShown"
      :default-flex="defaultFlex"
      :action-status="actionStatus"/>
    <!--
      Layout as tabs
    -->
    <ti-gui-tabs v-else-if="isTabsLayout"
      class="ti-fill-parent"
      v-bind="TheLayout"
      :schema="schema"
      :shown="TheShown"
      :default-flex="defaultFlex"
      :action-status="actionStatus"/>
  </div>
  <!--===========================================
    All float panels
  -->
  <template v-for="pan in ThePanels">
    <transition :name="pan.transName">
      <ti-gui-panel
        v-if="pan.visible"
          :key="pan.key"
          v-bind="pan.panel"
          :viewport-width="myViewportWidth"
          :viewport-height="myViewportHeight"
          :schema="schema"
          :shown="TheShown"
          :default-flex="defaultFlex"
          :action-status="actionStatus"/>
    </transition>
  </template>
  <!--===========================================
    Loading
  -->
  <div v-if="isLoading"
    class="ti-mask-loading">
    <ti-loading v-bind="TheLoading"/>
  </div>
</div>`);
//============================================================
// JOIN: ti/gui/ti-gui.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////
  provide : function() {
    return {
      "$gui" : this
    }
  },
  /////////////////////////////////////////
  data: ()=>({
    myShown : {},
    myViewportWidth  : 0,
    myViewportHeight : 0,
  }),
  /////////////////////////////////////////
  props : {
    "defaultFlex" : {
      type : String,
      default : undefined,
      validator : (v)=>(_.isUndefined(v) || /^(nil|auto|grow|shrink|both|none)$/.test(v))
    },
    "defaultOverflow" : {
      type : String,
      default : undefined,
      validator : (v)=>(_.isUndefined(v) || /^(auto|none|fill|cover)$/.test(v))
    },
    "layout" : {
      type : Object,
      default : ()=>({
        desktop : {},
        tablet  : "desktop",
        phone   : "desktop"
      })
    },
    "schema" : {
      type : Object,
      default : ()=>({})
    },
    "keepShownTo" : {
      type : String,
      default : null
    },
    "actionStatus" : {
      type : Object,
      default : ()=>({})
    },
    "shown" : {
      type : Object,
      default : ()=>({})
    },
    "canLoading" : {
      type : Boolean,
      default : false
    },
    // value should be prop of ti-loading
    "loadingAs" : {
      type : [Boolean, Object],
      default : null
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-loading" : this.isLoading
      })
    },
    //--------------------------------------
    TheLayout() {
      if(_.isEmpty(this.layout))
        return {}
      //....................................
      // Raw layout
      if(/^(rows|cols|tabs)$/.test(this.layout.type)) {
        return this.layout
      }
      //....................................
      // Auto adapt viewMode
      let lay = this.layout[this.viewportMode]
      // Refer onece
      if(_.isString(lay)) {
        lay = this.layout[lay]
      }
      // Refer twice (I think it is enough for most of cases)
      if(_.isString(lay)) {
        lay = this.layout[lay]
      }
      return lay || {}
    },
    //--------------------------------------
    isRowsLayout() {return "rows"==this.TheLayout.type},
    isColsLayout() {return "cols"==this.TheLayout.type},
    isTabsLayout() {return "tabs"==this.TheLayout.type},
    //--------------------------------------
    ThePanels() {
      let list = []

      // Join Global Panels
      this.joinThePanels(list, this.layout.panels, "G")

      // Join Current Mode Panels
      if(this.layout != this.TheLayout) {
        this.joinThePanels(list, this.TheLayout.panels, this.viewportMode)
      }

      // Done
      return list
    },
    //--------------------------------------
    TheShown() {
      return this.keepShownTo
        ? this.myShown
        : this.shown
    },
    //--------------------------------------
    isLoading() {
      return this.canLoading 
             && this.loadingAs 
                  ? true 
                  : false
    },
    //--------------------------------------
    TheLoading() {
      if(_.isPlainObject(this.loadingAs)) {
        return this.loadingAs
      }
      return {}
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    isShown(...names) {
      for(let name of names) {
        if(this.TheShown[name])
          return true
      }
      return false
    },
    //--------------------------------------
    joinThePanels(list=[], panels=[], keyPrefix="") {
      if(_.isArray(panels) && panels.length > 0) {
        for(let i=0; i<panels.length; i++) {
          let pan = panels[i]
          let pos = Ti.Util.fallback(pan.position, "center")
          let index = list.length
          list.push({
            index,
            visible   : this.isShown(pan.name),
            key       : pan.name || `panel-${keyPrefix}-${index}`,
            transName : `ti-gui-panel-${pos}`,
            panel     : pan
          })
        }
      }
    },
    //--------------------------------------
    updateShown(shown) {
      //console.log("updateShown", shown)
      this.syncMyShown(shown)
      this.persistMyStatus()
    },
    //--------------------------------------
    onBlockShow(name) {
      // Update privated status
      if(this.keepShownTo) {
        this.updateShown({[name]:true})
      }
      // Leave it to parent
      else {
        this.$notify("block:show", name)
      }
    },
    //--------------------------------------
    onBlockHide(name) {
      // Update privated status
      if(this.keepShownTo) {
        this.updateShown({[name]:false})
      }
      // Leave it to parent
      else {
        this.$notify("block:hide", name)
      }
    },
    //--------------------------------------
    onBlockShownUpdate(shown) {
      // Update privated status
      if(this.keepShownTo) {
        this.updateShown(shown)
      }
      // Leave it to parent
      else {
        this.$notify("block:shown", shown)
      }
    },
    //--------------------------------------
    syncMyShown(...showns) {
      if(this.keepShownTo) {
        this.myShown = _.assign({}, this.myShown, ...showns)
      }
    },
    //--------------------------------------
    persistMyStatus() {
      if(this.keepShownTo) {
        let shown = _.omitBy(this.myShown, (v)=>!v)
        Ti.Storage.session.setObject(this.keepShownTo, shown)
      }
    },
    //--------------------------------------
    loadMyStatus() {
      if(this.keepShownTo) {
        let shown = Ti.Storage.session.getObject(this.keepShownTo)
        this.syncMyShown(this.shown, shown)
      }
    },
    //--------------------------------------
    syncViewportMeasure() {
      let rect = Ti.Rects.createBy(this.$el);
      this.myViewportWidth  = rect.width
      this.myViewportHeight = rect.height
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "shown" : function(shown) {
      //console.log("ti-gui shown changed", shown)
      this.syncMyShown(shown)
    }
  },
  //////////////////////////////////////////
  mounted : function() {
    //......................................
    Ti.Viewport.watch(this, {
      resize : _.debounce(()=>this.syncViewportMeasure(), 100)
    })
    //......................................
    this.syncViewportMeasure()
    //......................................
    this.loadMyStatus()
    //......................................
  },
  ///////////////////////////////////////////////////
  beforeDestroy : function(){
    Ti.Viewport.unwatch(this)
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/ti/gui/ti-gui.mjs", _M);
})();
//============================================================
// JOIN: ti/gui/_com.json
//============================================================
Ti.Preload("ti/com/ti/gui/_com.json", {
  "name" : "ti-gui",
  "globally" : true,
  "template" : "./ti-gui.html",
  "methods"  : "./ti-gui-methods.mjs",
  "mixins"   : ["./ti-gui.mjs"],
  "components" : [
    "@com:ti/gui/cols",
    "@com:ti/gui/rows",
    "@com:ti/gui/tabs",
    "@com:ti/gui/panel"
  ]
});
//============================================================
// JOIN: ti/icon/text/ti-icon-text.html
//============================================================
Ti.Preload("ti/com/ti/icon/text/ti-icon-text.html", `<div class="ti-icon-text" 
  :class="className">
  <!--Icon-->
  <ti-icon v-if="icon" class="as-icon" :value="icon"/>
  <!--Text-->
  <div v-if="text" class="as-text">{{text|i18n}}</div>
</div>`);
//============================================================
// JOIN: ti/icon/text/ti-icon-text.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  ///////////////////////////////////////////////////////
  props : {
    "icon" : {
      type : [String,Object],
      default : ""
    },
    "text" : {
      type : String,
      default : null
    }
  }
  ///////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/icon/text/ti-icon-text.mjs", _M);
})();
//============================================================
// JOIN: ti/icon/text/_com.json
//============================================================
Ti.Preload("ti/com/ti/icon/text/_com.json", {
  "name" : "ti-icon-text",
  "globally" : true,
  "template" : "./ti-icon-text.html",
  "mixins" : ["./ti-icon-text.mjs"]
});
//============================================================
// JOIN: ti/icon/ti-icon.html
//============================================================
Ti.Preload("ti/com/ti/icon/ti-icon.html", `<div 
  class="ti-icon" 
  :class="TopClass">
  <div class="icon-icon"
    :style="Icon.outerStyle">
    <!--Font icon-->
    <i v-if="'font'==Icon.type"
      :class="Icon.className"
      :style="Icon.innerStyle">
      <!--ligature font -->
      <template v-if="Icon.text">{{Icon.text}}</template>
    </i>
    <!--Svg/Image-->
    <img v-else-if="'svg'==Icon.type || 'image'==Icon.type"
        :src="Icon.value"
        :style="Icon.innerStyle"/>
    <!--
      Default output the value
    -->
    <em v-else>{{value}}</em>
  </div>
</div>`);
//============================================================
// JOIN: ti/icon/ti-icon.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  ///////////////////////////////////////////////////////
  data : ()=>({
    myValue : null
  }),
  ///////////////////////////////////////////////////////
  props : {
    // If image, join the base
    "base" : {
      type : String,
      default : null
    },
    "value" : {
      type : [String,Object,Number],
      default : null
    },
    "dict" : {
      type : [String, Ti.Dict],
      default : null
    },
    "defaultValue" : {
      type : [String,Object],
      default : null
    },
    "fontSize" : {
      type : [Number, String],
      default : null
    },
    "width" : {
      type : [Number, String],
      default : null
    },
    "height" : {
      type : [Number, String],
      default : null
    },
    "color" : {
      type : String,
      default : ""
    },
    "opacity" : {
      type : Number,
      default : -1
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass(`is-${this.Icon.type}`)
    },
    //---------------------------------------------------
    Dict() {
      if(this.dict) {
        // Already Dict
        if(this.dict instanceof Ti.Dict) {
          return this.dict
        }
        // Get back
        let {name} = Ti.DictFactory.explainDictName(this.dict)
        return Ti.DictFactory.CheckDict(name)
      }
    },
    //---------------------------------------------------
    // formed icon data
    Icon() {
      let icn 
      if(_.isPlainObject(this.myValue)){
        // Regular icon object, return it directly
        if(this.myValue.type && this.myValue.value) {
          icn = this.myValue
        }
        // Eval it as meta
        else {
          icn = {
            type  : "font", 
            value : Ti.Icons.get(this.myValue)
          }
        }
      }
      // String
      else {
        icn = {
          type : "font",
          value : this.myValue
        }
        if(_.isString(this.myValue)) {
          icn.type = Ti.Util.getSuffixName(this.myValue) || "font"
        }
        // for image
        if(/^(jpe?g|gif|png)$/i.test(icn.type)){
          icn.type = "image"
        }
      }

      // Join `className / text` to show icon font
      if('font' == icn.type) {
        let val = Ti.Icons.getByName(icn.value, icn.value)
        _.assign(icn, Ti.Icons.parseFontIcon(val))
      }
      // Join base
      else if('image' == icn.type) {
        if(!Ti.Util.isBlank(this.base)) {
          icn.value = Ti.Util.appendPath(this.base, icn.value)
        }
      }

      // join style:outer
      icn.outerStyle = Ti.Css.toStyle({
        width   : this.width,
        height  : this.height,
        color   : this.color,
        opacity : this.opacity >= 0 ? this.opacity : undefined
      })

      // join style:inner
      if('image' == icn.type) {
        icn.innerStyle = {
          "width"  : this.width  ? "100%" : undefined,
          "height" : this.height ? "100%" : undefined
        }
      }
      // font size
      else if('font' == icn.type) {
        icn.innerStyle = {
          "font-size" : this.fontSize 
                          ? Ti.Css.toSize(this.fontSize) 
                          : undefined
        }
      }

      return icn
    },
    //---------------------------------------------------
  },
  methods : {
    async evalMyValue() {
      let val = Ti.Util.fallbackNil(this.value, this.defaultValue)
      // Translate by dict
      if(this.Dict) {
        this.myValue = await this.Dict.getItemIcon(val)
      }
      // Normal value
      else {
        this.myValue = val
      }
    }
  },
  ///////////////////////////////////////////////////////
  watch : {
    "value" : {
      handler : "evalMyValue",
      immediate : true
    }
  }
  ///////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/icon/ti-icon.mjs", _M);
})();
//============================================================
// JOIN: ti/icon/_com.json
//============================================================
Ti.Preload("ti/com/ti/icon/_com.json", {
  "name" : "ti-icon",
  "globally" : true,
  "template" : "./ti-icon.html",
  "mixins" : ["./ti-icon.mjs"]
});
//============================================================
// JOIN: ti/imgfile/ti-imgfile.html
//============================================================
Ti.Preload("ti/com/ti/imgfile/ti-imgfile.html", `<div class="ti-imgfile"
  :class="TopClass">
  <!--
    Hidden input file to choose files
  -->
  <input 
    type="file" 
    ref="file" 
    class="ti-hide"
    @change.stop.seft="OnSelectLocalFilesToUpload">
  <!--
    Major preview zone
  -->
  <div class="thumb-con"
    :style="ThumbStyle"
    @click="OnClickToEdit"
    v-drop-files.mask="OnDropFiles">
    <!--
      Preview
    -->
    <ti-obj-thumb 
      :preview="PreviewThumb"
      :progress="progress"
      :footer="false"/>
  </div>
  <!--
    Remove
  -->
  <div v-if="isShowRemoveIcon"
    class="thumb-actions">
    <!--remove-->
    <div class="thumb-opt as-del"
      @click="OnRemove">
      <ti-icon value="zmdi-delete"/>
      <span class="it-text">{{'clear'|i18n}}</span>
    </div>
    <!--open-->
    <div class="thumb-opt as-open"
      @click="OnOpen">
      <ti-icon value="zmdi-open-in-new"/>
      <span class="it-text">{{'open'|i18n}}</span>
    </div>
    <!--//////-->
  </div>
</div>`);
//============================================================
// JOIN: ti/imgfile/ti-imgfile.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  props : {
    // The source to display image
    "src" : {
      type : String,
      default : null
    },
    // The value must be a LocalFile object
    // to prerender the LocalFile during uploading
    "uploadFile" :{
      type : File,
      default : null
    },
    // Show the process `0.0-1.0` during the uploading
    "progress" : {
      type : Number,
      default : -1
    },
    // Display width
    "width" : {
      type : [String, Number],
      default : 100
    },
    // Display height
    "height" : {
      type : [String, Number],
      default : 100
    },
    // support remove the objects
    "removable" : {
      type : Boolean,
      default : true
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    ThumbStyle(){
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //--------------------------------------
    isShowRemoveIcon() {
      if(!this.uploadFile && this.src) {
        return true
      }
      return false
    },
    //--------------------------------------
    PreviewThumb() {
      if(this.uploadFile) {
        return {type:"localFile", value:this.uploadFile}
      }
      // Normal image
      if(this.src) {
        return {type:"image", value:this.src}
      }
      // Show Icon
      return {type:"font", value:"zmdi-plus"}
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickToEdit() {
      this.$refs.file.click()
    },
    //--------------------------------------
    async OnDropFiles(files) {
      let file = _.get(files, 0)
      if(file) {
        this.$notify("upload", file)
      }
    },
    //--------------------------------------
    async OnSelectLocalFilesToUpload(evt) {
      await this.OnDropFiles(evt.target.files)
      this.$refs.file.value = ""
    },
    //--------------------------------------
    OnRemove() {
      this.$notify("remove")
    },
    //--------------------------------------
    OnOpen() {
      this.$notify("open")
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/ti/imgfile/ti-imgfile.mjs", _M);
})();
//============================================================
// JOIN: ti/imgfile/_com.json
//============================================================
Ti.Preload("ti/com/ti/imgfile/_com.json", {
  "name" : "ti-imgfile",
  "globally" : true,
  "template" : "./ti-imgfile.html",
  "mixins" : ["./ti-imgfile.mjs"],
  "components" : ["@com:ti/obj/thumb"]
});
//============================================================
// JOIN: ti/input/color/ti-input-color.html
//============================================================
Ti.Preload("ti/com/ti/input/color/ti-input-color.html", `<ti-combo-box class="ti-input-color"
  :class="topClass"
  :drop-width="null"
  :status="status"
  @collapse="doCollapse">
  <!--
    Box
  -->
  <template v-slot:box>
    <span class="as-color"
      @click.left="onToggleDrop">
        <u class="as-bg"></u>
        <u class="as-fr" :style="colorStyle"></u>
    </span>
    <span class="as-clear" @click="onClearColor">
      <ti-icon value="zmdi-close"/>
    </span>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <ti-color 
      :value="value"
      @change="onColorChanged"/>
  </template>
</ti-combo-box>`);
//============================================================
// JOIN: ti/input/color/ti-input-color.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////////////
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  data: ()=>({
    hideBorder : false,
    status  : "collapse"
  }),
  ////////////////////////////////////////////////////
  props : {
    "value" : {
      type : [String, Number],
      default : null
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName({
        "is-empty"  : !this.hasValue,
        "is-valued" : this.hasValue,
        "show-border"  : !this.hideBorder,
        "hide-border"  : this.hideBorder,
      }, this.className)
    },
    //------------------------------------------------
    colorStyle() {
      let color = Ti.Types.toColor(this.value, null)
      if(color) {
        return {"background":color.rgba}
      }
    },
    //------------------------------------------------
    isCollapse() {return "collapse"==this.status},
    isExtended() {return "extended"==this.status},
    //------------------------------------------------
    hasValue() {
      return !Ti.Util.isNil(this.value)
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    onToggleDrop() {
      this.status = ({
        "collapse" : "extended",
        "extended" : "collapse"
      })[this.status]
    },
    //------------------------------------------------
    onClearColor() {
      this.$notify("change", null)
    },
    //------------------------------------------------
    onColorChanged(color) {
      let co = Ti.Types.toColor(color)
      this.$notify("change", co ? co.toString() : null)
    },
    //------------------------------------------------
    doCollapse() {
      this.status = "collapse"
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/input/color/ti-input-color.mjs", _M);
})();
//============================================================
// JOIN: ti/input/color/_com.json
//============================================================
Ti.Preload("ti/com/ti/input/color/_com.json", {
  "name" : "ti-input-color",
  "globally" : true,
  "template" : "./ti-input-color.html",
  "mixins" : ["./ti-input-color.mjs"],
  "components" : ["@com:ti/color"]
});
//============================================================
// JOIN: ti/input/date/ti-input-date.html
//============================================================
Ti.Preload("ti/com/ti/input/date/ti-input-date.html", `<ti-combo-box class="as-date"
  :class="topClass"
  :width="width"
  :drop-width="null"
  :status="status"
  @collapse="doCollapse">
  <!--
    Box
  -->
  <template v-slot:box>
    <ti-input 
      :readonly="!canInput"
      :hide-border="hideBorder"
      :placeholder="placeholder|i18n"
      :prefix-icon="icon"
      :suffix-icon="theStatusIcon"
      :value="theInputValue"
      :height="height"
      :focus="isExtended"
      @change="onChanged"
      @input:focus="onInputFocused"
      @suffix:icon="onClickStatusIcon"/>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <ti-calendar
      :value="theDropDate"
      :month-format="monthFormat"
      :begin-year="beginYear"
      :end-year="endYear"
      @change="onDateChanged"/>
  </template>
</ti-combo-box>`);
//============================================================
// JOIN: ti/input/date/ti-input-date.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    "runtime" : null,
    "status"  : "collapse"
  }),
  ////////////////////////////////////////////////////
  props : {
    "canInput" : {
      type : Boolean,
      default : true
    },
    "value" : {
      type : [String, Number, Date],
      default : null
    },
    "icon" : {
      type : String,
      default : "far-calendar-alt"
    },
    "format" : {
      type : String,
      default : "yyyy-MM-dd"
    },
    "placeholder" : {
      type : [String, Number],
      default : "i18n:blank-date"
    },
    "hideBorder" : {
      type : Boolean,
      default : false
    },
    "autoCollapse" : {
      type : Boolean,
      default : true
    },
    "width" : {
      type : [Number, String],
      default : "2rem"
    },
    "height" : {
      type : [Number, String],
      default : undefined
    },
    "monthFormat" : {
      type : String,
      default : "yyyy-MM" 
    },
    "beginYear" : {
      type : [Number, String],
      default : 1970
    },
    "endYear" : {
      type : [Number, String],
      default : (new Date().getFullYear()+1)
    },
    "statusIcons" : {
      type : Object,
      default : ()=>({
        collapse : "zmdi-chevron-down",
        extended : "zmdi-chevron-up"
      })
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName(this.className)
    },
    //------------------------------------------------
    isCollapse() {return "collapse"==this.status},
    isExtended() {return "extended"==this.status},
    //------------------------------------------------
    theDate() {
      return Ti.Types.toDate(this.value, null)
    },
    //------------------------------------------------
    theDropDate() {
      return this.runtime || this.theDate
    },
    //------------------------------------------------
    theInputValue() {
      if(this.isExtended) {
        return this.getDateText(this.theDropDate)
      }
      return this.getDateText(this.theDropDate, this.format)
    },
    //------------------------------------------------
    theStatusIcon() {
      return this.statusIcons[this.status]
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    applyRuntime() {
      if(this.runtime) {
        let dt = this.runtime
        this.runtime = null
        let str = this.getDateText(dt)
        this.$notify("change", str)
      }
    },
    //-----------------------------------------------
    doExtend() {
      this.status = "extended"
    },
    //-----------------------------------------------
    doCollapse({escaped=false}={}) {
      this.status = "collapse"
      // Drop runtime
      if(escaped) {
        this.runtime = null
      }
      // Apply Changed for runtime
      else {
        this.applyRuntime()
      }
    },
    //------------------------------------------------
    onInputFocused() {
      this.doExtend()
    },
    //------------------------------------------------
    onChanged(val) {
      // Empty value as null
      if(_.isEmpty(val)) {
        this.$notify("change", null);
      }
      // Parsed value
      else {
        let dt  = Ti.Types.toDate(val)
        let str = this.getDateText(dt)
        this.$notify("change", str)
      }
    },
    //------------------------------------------------
    onClickStatusIcon() {
      // extended -> collapse
      if(this.isExtended) {
        this.doCollapse()
      }
      // collapse -> extended
      else {
        this.doExtend()
      }
    },
    //------------------------------------------------
    onDateChanged(dt) {
      this.runtime = dt
      if(this.autoCollapse) {
        this.doCollapse()
      }
    },
    //------------------------------------------------
    getDateText(dt, fmt="yyyy-MM-dd") {
      let dt2 = Ti.Types.toDate(dt, null)
      return Ti.Types.formatDate(dt2, fmt)
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/input/date/ti-input-date.mjs", _M);
})();
//============================================================
// JOIN: ti/input/date/_com.json
//============================================================
Ti.Preload("ti/com/ti/input/date/_com.json", {
  "name" : "ti-input-date",
  "globally" : true,
  "template" : "./ti-input-date.html",
  "mixins" : ["./ti-input-date.mjs"],
  "components" : [
    "@com:ti/combo/input",
    "@com:ti/calendar"]
});
//============================================================
// JOIN: ti/input/daterange/ti-input-daterange.html
//============================================================
Ti.Preload("ti/com/ti/input/daterange/ti-input-daterange.html", `<ti-combo-box class="as-daterange"
  :class="topClass"
  :drop-width="null"
  :status="status"
  @collapse="doCollapse">
  <!--
    Box
  -->
  <template v-slot:box>
    <ti-input 
      :readonly="!canInput"
      :hide-border="hideBorder"
      :placeholder="placeholder|i18n"
      :prefix-icon="icon"
      :suffix-icon="theStatusIcon"
      :value="theInputValue"
      :width="width"
      :height="height"
      :focus="isExtended"
      @change="onChanged"
      @input:focus="onInputFocused"
      @suffix:icon="onClickStatusIcon"/>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <ti-calendar
      :value="theDropRange"
      :range="true"
      :matrix-count="matrixCount"
      :month-format="monthFormat"
      :begin-year="beginYear"
      :end-year="endYear"
      @change="onDateRangeChanged"/>
  </template>
</ti-combo-box>`);
//============================================================
// JOIN: ti/input/daterange/ti-input-daterange.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    "runtime" : null,
    "status"  : "collapse"
  }),
  ////////////////////////////////////////////////////
  props : {
    "canInput" : {
      type : Boolean,
      default : true
    },
    "value" : {
      type : [String, Number, Date, Array],
      default : null
    },
    "icon" : {
      type : String,
      default : "fas-calendar-alt"
    },
    "format" : {
      type : String,
      default : "yyyy-MM-dd HH:mm:ss"
    },
    "valueType": {
      type: String,
      default: "ms-range",
      validator: v => /^(ms-(array|range)|ds-(array|range)|date-array)$/.test(v)
    },
    "placeholder" : {
      type : String,
      default : "i18n:blank-date-range"
    },
    "hideBorder" : {
      type : Boolean,
      default : false
    },
    "width" : {
      type : [Number, String],
      default : "3rem"
    },
    "height" : {
      type : [Number, String],
      default : undefined
    },
    "matrixCount" : {
      type : Number,
      default : 2
    },
    "monthFormat" : {
      type : String,
      default : "yyyy-MM-dd" 
    },
    "beginYear" : {
      type : [Number, String],
      default : 1970
    },
    "endYear" : {
      type : [Number, String],
      default : (new Date().getFullYear()+1)
    },
    "statusIcons" : {
      type : Object,
      default : ()=>({
        collapse : "zmdi-chevron-down",
        extended : "zmdi-chevron-up"
      })
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName(this.className)
    },
    //------------------------------------------------
    isCollapse() {return "collapse"==this.status},
    isExtended() {return "extended"==this.status},
    //--------------------------------------
    theValue() {
      if(_.isEmpty(this.value)) {
        return null
      }
      if(_.isString(this.value)) {
        let str = _.trim(this.value)
        let m = /^[[(](.+)[\])]$/.exec(str)
        if(m) {
          str = _.trim(m[1])
        }
        let ss = Ti.S.toArray(str, {sep:","})
        if(ss.length > 0) {
          return Ti.Types.toDate(ss);
        }
      }
      if(_.isString(this.value)) {
        return Ti.Types.toDate(this.value)
      }
    },
    //--------------------------------------
    theDate() {
      if(_.isArray(this.theValue) && !_.isEmpty(this.theValue)) {
        return Ti.Types.toDate(this.theValue[0])
      }
      if(this.theValue) {
        return Ti.Types.toDate(this.theValue)
      }
    },
    //--------------------------------------
    theRangeInMs() {
      if(!this.theDate) {
        return []
      }
      // Move to 00:00:00
      let dt0 = new Date(this.theDate)
      // Define the dt1
      let dt1;
      if(_.isArray(this.theValue) && this.theValue.length > 1) {
        dt1 = Ti.Types.toDate(this.theValue[1])
      }
      // The End of the Day
      else {
        dt1 = new Date(dt0)
      }
      // Make the range
      let msRange = [dt0.getTime(), dt1.getTime()].sort()

      // dt0 start of the day
      dt0 = Ti.DateTime.setTime(new Date(msRange[0]))
      // dt1 end of the day
      dt1 = Ti.DateTime.setDayLastTime(new Date(msRange[1]))

      // rebuild the range
      return [dt0.getTime(), dt1.getTime()]
    },
    //------------------------------------------------
    theRange() {
      if(_.isEmpty(this.theRangeInMs)) {
        return []
      }
      return [
        new Date(this.theRangeInMs[0]), 
        new Date(this.theRangeInMs[1])]
    },
    //------------------------------------------------
    theDropRange() {
      return this.runtime || this.theRange
    },
    //------------------------------------------------
    theRangeValue() {
      return this.formatRangeValue(this.theRange, {
        valueType: "ds-array", 
        format: "yyyy-MM-dd", 
        collapse: true
      }).join(", ")
    },
    //------------------------------------------------
    theRangeText() {
      if(!_.isEmpty(this.theRange)) {
        let dt0 = this.theRange[0]
        let dt1 = this.theRange[1]
        let yy0 = dt0.getFullYear()
        let MM0 = dt0.getMonth()
        let dd0 = dt0.getDate()
        let yy1 = dt1.getFullYear()
        let MM1 = dt1.getMonth()
        let dd1 = dt1.getDate()
        let MA0 = Ti.DateTime.getMonthAbbr(MM0)
        let MA1 = Ti.DateTime.getMonthAbbr(MM1)
        let MT0 = Ti.I18n.get(MA0)
        let MT1 = Ti.I18n.get(MA1)

        MM0++;  MM1++;  // Month change to 1 base

        let vars = {
          yy0, yy1,
          MM0, MM1,
          dd0, dd1,
          MA0, MA1,
          MT0, MT1
        }
        // Beyond year
        if(yy0 != yy1) {
          return Ti.I18n.getf("cal.d-range-beyond-years", vars)
        }
        // Beyond month
        if(MM0 != MM1) {
          return Ti.I18n.getf("cal.d-range-beyond-months", vars)
        }
        // Beyond day
        if(dd0 != dd1) {
          return Ti.I18n.getf("cal.d-range-beyond-days", vars)
        }
        // Same day
        return Ti.I18n.getf("cal.d-range-in-same-day", vars)
      }
    },
    //------------------------------------------------
    theInputValue() {
      if(this.isExtended) {
        return this.theRangeValue
      }
      return this.theRangeText
    },
    //------------------------------------------------
    theStatusIcon() {
      return this.statusIcons[this.status]
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    applyRuntime() {
      if(this.runtime) {
        let rg = this.runtime
        this.runtime = null
        let rg2 = this.formatRangeValue(rg)
        this.$notify("change", rg2)
      }
    },
    //-----------------------------------------------
    doExtend() {
      this.status = "extended"
    },
    //-----------------------------------------------
    doCollapse({escaped=false}={}) {
      this.status = "collapse"
      // Drop runtime
      if(escaped) {
        this.runtime = null
      }
      // Apply Changed for runtime
      else {
        this.applyRuntime()
      }
    },
    //------------------------------------------------
    onInputFocused() {
      this.doExtend()
    },
    //------------------------------------------------
    onChanged(val) {
      let rg = this.parseDateRange(val)
      // Empty Range
      if(_.isEmpty(rg)) {
        this.$notify("change", null);
      }
      // Format the Range
      else {
        let rg2 = this.formatRangeValue(rg)
        this.$notify("change", rg2);
      }
    },
    //------------------------------------------------
    onClickStatusIcon() {
      // extended -> collapse
      if(this.isExtended) {
        this.doCollapse()
      }
      // collapse -> extended
      else {
        this.doExtend()
      }
    },
    //------------------------------------------------
    onDateRangeChanged(rg) {
      this.runtime = rg
    },
    //------------------------------------------------
    parseDateRange(val) {
      // Empty value as null
      if(_.isEmpty(val)) {
        return []
      }
      // Parsed value
      let ss = val.split(",")
      // Empty
      if(_.isEmpty(ss)) {
        return []
      }
      // One date
      if(ss.length == 1) {
        let dt0 = Ti.Types.toDate(ss[0])
        Ti.DateTime.setTime(dt0)
        let dt1 = new Date(dt0.getTime())
        Ti.DateTime.setDayLastTime(dt1)
        return [dt0, dt1]
      }
      // range
      let dt0 = Ti.Types.toDate(ss[0])
      Ti.DateTime.setTime(dt0)
      let dt1 = Ti.Types.toDate(ss[1])
      Ti.DateTime.setDayLastTime(dt1)
      return [dt0, dt1].sort((dt0,dt1)=>{
        return dt0.getTime()-dt1.getTime()
      })
    },
    //------------------------------------------------
    formatRangeValue(range, {
      valueType, format, collapse=false
    }={}) {
      let [d0, d1] = range || []
      if(!d0) {
        return []
      }
      if(!d1) {
        d1 = new Date(d0)
        Ti.DateTime.setDayLastTime(d1)
      }
      valueType = valueType || this.valueType
      format = format || this.format
      // as range
      let func = ({
        "ms-range": ()=>`[${d0.getTime()},${d1.getTime()}]`,
        "ms-array": ()=>[d0.getTime(), d1.getTime()],
        "ds-range": ()=>'[' + [
          Ti.Types.formatDate(d0, format),
          Ti.Types.formatDate(d1, format),
        ].join(",") + ']',
        "ds-array": ()=>[
          Ti.Types.formatDate(d0, format),
          Ti.Types.formatDate(d1, format),
        ],
        "date-array": ()=>[d0, d1]
      })[valueType]
      // As array
      let re = func()

      if(collapse) {
        if(re[0] == re[1])
          return [re[0]]
      }
      return re
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/input/daterange/ti-input-daterange.mjs", _M);
})();
//============================================================
// JOIN: ti/input/daterange/_com.json
//============================================================
Ti.Preload("ti/com/ti/input/daterange/_com.json", {
  "name" : "ti-input-daterange",
  "globally" : true,
  "template" : "./ti-input-daterange.html",
  "mixins" : ["./ti-input-daterange.mjs"],
  "components" : [
    "@com:ti/combo/input",
    "@com:ti/calendar"]
});
//============================================================
// JOIN: ti/input/datetime/ti-input-datetime.html
//============================================================
Ti.Preload("ti/com/ti/input/datetime/ti-input-datetime.html", `<ti-combo-box class="as-datetime"
  :class="topClass"
  :width="width"
  :drop-width="'box'"
  :drop-overflow="'hidden'"
  :status="status"
  @collapse="doCollapse">
  <!--
    Box
  -->
  <template v-slot:box>
    <ti-input 
      :readonly="!canInput"
      :hide-border="hideBorder"
      :placeholder="placeholder|i18n"
      :prefix-icon="icon"
      :suffix-icon="theStatusIcon"
      :value="theInputValue"
      :height="height"
      :focus="isExtended"
      @change="onChanged"
      @input:focus="onInputFocused"
      @suffix:icon="onClickStatusIcon"/>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <ti-datetime
      :value="theDropDate"
      :month-format="monthFormat"
      :begin-year="beginYear"
      :end-year="endYear"
      @change="onDateChanged"/>
  </template>
</ti-combo-box>`);
//============================================================
// JOIN: ti/input/datetime/ti-input-datetime.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  data : ()=>({
    "runtime" : null,
    "status"  : "collapse"
  }),
  ////////////////////////////////////////////////////
  props : {
    "canInput" : {
      type : Boolean,
      default : true
    },
    "value" : {
      type : [String, Number, Date],
      default : null
    },
    "icon" : {
      type : String,
      default : "fas-clock"
    },
    "format" : {
      type : String,
      default : "yyyy-MM-dd HH:mm:ss"
    },
    "placeholder" : {
      type : [String, Number],
      default : "i18n:blank-datetime"
    },
    "hideBorder" : {
      type : Boolean,
      default : false
    },
    "autoCollapse" : {
      type : Boolean,
      default : false
    },
    "width" : {
      type : [Number, String],
      default : "2.4rem"
    },
    "height" : {
      type : [Number, String],
      default : undefined
    },
    "monthFormat" : {
      type : String,
      default : "yyyy-MM" 
    },
    "beginYear" : {
      type : [Number, String],
      default : 1970
    },
    "endYear" : {
      type : [Number, String],
      default : (new Date().getFullYear()+1)
    },
    "statusIcons" : {
      type : Object,
      default : ()=>({
        collapse : "zmdi-chevron-down",
        extended : "zmdi-chevron-up"
      })
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName(this.className)
    },
    //------------------------------------------------
    isCollapse() {return "collapse"==this.status},
    isExtended() {return "extended"==this.status},
    //------------------------------------------------
    theDate() {
      return Ti.Types.toDate(this.value, null)
    },
    //------------------------------------------------
    theDropDate() {
      return this.runtime || this.theDate
    },
    //------------------------------------------------
    theInputValue() {
      if(this.isExtended) {
        return this.getDateText(this.theDropDate)
      }
      return this.getDateText(this.theDropDate, this.format)
    },
    //------------------------------------------------
    theStatusIcon() {
      return this.statusIcons[this.status]
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    applyRuntime() {
      if(this.runtime) {
        let dt = this.runtime
        this.runtime = null
        let str = this.getDateText(dt)
        this.$notify("change", str)
      }
    },
    //-----------------------------------------------
    doExtend() {
      this.status = "extended"
    },
    //-----------------------------------------------
    doCollapse({escaped=false}={}) {
      this.status = "collapse"
      // Drop runtime
      if(escaped) {
        this.runtime = null
      }
      // Apply Changed for runtime
      else {
        this.applyRuntime()
      }
    },
    //------------------------------------------------
    onInputFocused() {
      this.doExtend()
    },
    //------------------------------------------------
    onChanged(val) {
      // Empty value as null
      if(_.isEmpty(val)) {
        this.$notify("change", null);
      }
      // Parsed value
      else {
        let dt  = Ti.Types.toDate(val)
        let str = this.getDateText(dt)
        this.$notify("change", str)
      }
    },
    //------------------------------------------------
    onClickStatusIcon() {
      // extended -> collapse
      if(this.isExtended) {
        this.doCollapse()
      }
      // collapse -> extended
      else {
        this.doExtend()
      }
    },
    //------------------------------------------------
    onDateChanged(dt) {
      this.runtime = dt
      if(this.autoCollapse) {
        this.doCollapse()
      }
    },
    //------------------------------------------------
    getDateText(dt, fmt="yyyy-MM-dd HH:mm:ss") {
      let dt2 = Ti.Types.toDate(dt, null)
      return Ti.Types.formatDate(dt2, fmt)
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/input/datetime/ti-input-datetime.mjs", _M);
})();
//============================================================
// JOIN: ti/input/datetime/_com.json
//============================================================
Ti.Preload("ti/com/ti/input/datetime/_com.json", {
  "name" : "ti-input-datetime",
  "globally" : true,
  "template" : "./ti-input-datetime.html",
  "mixins" : ["./ti-input-datetime.mjs"],
  "components" : [
    "@com:ti/combo/input",
    "@com:ti/datetime"]
});
//============================================================
// JOIN: ti/input/icon/ti-input-icon-props.mjs
//============================================================
(function(){
const _M = {
  "options": {
    type: Array,
    default: () => [
      "im-spotify",
      "im-newsletter",
      "im-award",
      "im-headphones",
      "im-megaphone",
      "im-barcode",
      "im-google-play",
      "im-facebook-messenger",
      "im-wechat",
      "im-line",
      "im-git",
      "im-first-aid",
      "im-ribbon",
      "im-plane",
      "im-idea",
      "im-data",
      "im-data-delete",
      "im-data-validate",
      "im-folder-add",
      "im-radar",
      "im-pizza",
      "im-truck",
      "im-support",
      "im-reset",
      "im-import",
      "im-export",
      "im-color-fan",
      "im-cookie",
      "im-gift-card",
      "im-factory",
      "im-pulse",
      "im-accessibility",
      "im-apartment",
      "im-plugin",
      "im-layer",
      "im-direction",
      "im-dribbble",
      "im-radio",
      "im-bank",
      "im-battery-empty",
      "im-battery",
      "im-battery-full",
      "im-x-mark-circle-o",
      "im-timer",
      "im-hashtag",
      "im-server",
      "im-flask",
      "im-anchor",
      "im-umbrella",
      "im-cc-amex",
      "im-cc-visa",
      "im-cc-mastercard",
      "im-cc-paypal",
      "im-cc-amazon",
      "im-cc-bitcoin",
      "im-car",
      "im-paintbrush",
      "im-cube",
      "im-cubes",
      "im-language",
      "im-calculator",
      "im-user-settings",
      "im-trophy",
      "im-pointer",
      "im-edit",
      "im-warning-circle",
      "im-check-mark-circle-o",
      "im-date-o",
      "im-newspaper-o",
      "im-wrench",
      "im-binoculars",
      "im-gamepad",
      "im-history",
      "im-bell-active",
      "im-coffee",
      "im-leaf",
      "im-gift",
      "im-flip-chart-o",
      "im-clock",
      "im-line-chart-up",
      "im-laptop-o",
      "im-monitor-o",
      "im-cursor",
      "im-keyboard",
      "im-pin",
      "im-store",
      "im-graduation-hat",
      "im-certificate-o",
      "im-sun",
      "im-diamond-o",
      "im-drop",
      "im-paperplane",
      "im-fingerprint",
      "im-lifebuoy",
      "im-power",
      "im-target",
      "im-navigation",
      "im-bug",
      "im-network",
      "im-pie-chart",
      "im-note-o",
      "im-id-card",
      "im-tags",
      "im-floppy-disk",
      "im-dashboard",
      "im-tools",
      "im-users",
      "im-trash-can",
      "im-x-mark-circle",
      "im-x-mark",
      "im-shield",
      "im-mobile",
      "im-inbox",
      "im-crown",
      "im-check-square",
      "im-check-square-o",
      "im-check-mark-circle",
      "im-check-mark",
      "im-redo",
      "im-undo",
      "im-map-o",
      "im-task-o",
      "im-menu-dot-v",
      "im-edit-off",
      "im-facebook",
      "im-sitemap",
      "im-save",
      "im-volume-off",
      "im-volume",
      "im-sign-out",
      "im-sign-in",
      "im-shopping-cart",
      "im-rocket",
      "im-banknote",
      "im-fullscreen",
      "im-minimize",
      "im-maximize",
      "im-light-bulb",
      "im-filter",
      "im-picture-o",
      "im-eye-off",
      "im-eye",
      "im-external-link",
      "im-random",
      "im-loop",
      "im-next",
      "im-previous",
      "im-eject",
      "im-stop",
      "im-pause",
      "im-play",
      "im-credit-card",
      "im-bookmark",
      "im-upload",
      "im-download",
      "im-video-camera",
      "im-photo-camera",
      "im-care-up",
      "im-care-down",
      "im-care-left",
      "im-arrow-up-circle",
      "im-arrow-down-circle",
      "im-arrow-left-circle",
      "im-arrow-right-circle",
      "im-arrow-up",
      "im-arrow-down",
      "im-arrow-left",
      "im-arrow-right",
      "im-angle-up-circle",
      "im-angle-down-circle",
      "im-angle-left-circle",
      "im-angle-right-circle",
      "im-angle-up",
      "im-angle-down",
      "im-angle-left",
      "im-angle-right",
      "im-twitch",
      "im-reddit",
      "im-edge",
      "im-whatsapp",
      "im-amazon",
      "im-snapchat",
      "im-instagram",
      "im-fire",
      "im-sync",
      "im-toggle",
      "im-control-panel",
      "im-archive",
      "im-bell",
      "im-bell-off",
      "im-youtube",
      "im-spinner",
      "im-smiley-o",
      "im-frown-o",
      "im-code",
      "im-android-os",
      "im-linux-os",
      "im-apple-os",
      "im-menu",
      "im-menu-list",
      "im-menu-dot-h",
      "im-windows-os",
      "im-square-o",
      "im-check-square-i",
      "im-radio-button-circle",
      "im-radio-button-circle-o",
      "im-flag",
      "im-opera",
      "im-thumb-up",
      "im-thumb-down",
      "im-safari",
      "im-paper-clip",
      "im-firefox",
      "im-copy",
      "im-chrome",
      "im-quote-left",
      "im-quote-right",
      "im-ie",
      "im-briefcase",
      "im-forbidden",
      "im-vk",
      "im-wizard",
      "im-location",
      "im-paypal",
      "im-coin",
      "im-key",
      "im-lock",
      "im-lock-open",
      "im-share",
      "im-flash",
      "im-cloud",
      "im-database",
      "im-wifi",
      "im-book",
      "im-audio",
      "im-video",
      "im-microphone",
      "im-printer",
      "im-computer",
      "im-phone",
      "im-user-male",
      "im-user-female",
      "im-user-circle",
      "im-clock-o",
      "im-calendar",
      "im-pencil",
      "im-question",
      "im-bar-chart",
      "im-info",
      "im-folder",
      "im-folder-open",
      "im-file",
      "im-file-o",
      "im-files-o",
      "im-warning",
      "im-link",
      "im-unlink",
      "im-tag",
      "im-heart",
      "im-cloud-upload",
      "im-cloud-download",
      "im-speech-bubble",
      "im-speech-bubble-comment",
      "im-speech-bubble-comments",
      "im-mail",
      "im-globe",
      "im-home",
      "im-window-o",
      "im-table",
      "im-windows-o",
      "im-gear",
      "im-twitter",
      "im-magnifier",
      "im-magnifier-plus",
      "im-magnifier-minus",
      "im-minus",
      "im-minus-circle",
      "im-plus",
      "im-plus-circle",
      "im-care-right",
      "im-star",
      "im-star-half",
      "im-star-o",
      "im-circle-o",
      "im-xing",
      "im-vimeo",
      "im-tumblr",
      "im-stumbleupon",
      "im-stackoverflow",
      "im-soundcloud",
      "im-skype",
      "im-pinterest",
      "im-linkedin",
      "im-google-plus",
      "im-github",
      "im-flickr",
      "im-facebook-like",
      "im-blogger",
      "im-behance"
    ]
  }
}
Ti.Preload("ti/com/ti/input/icon/ti-input-icon-props.mjs", _M);
})();
//============================================================
// JOIN: ti/input/icon/ti-input-icon.html
//============================================================
Ti.Preload("ti/com/ti/input/icon/ti-input-icon.html", `<ti-combo-box class="ti-input-icon"
  :class="topClass"
  :drop-width="dropWidth"
  :drop-height="dropHeight"
  :status="status"
  @collapse="doCollapse">
  <!--
    Box
  -->
  <template v-slot:box>
    <span class="as-value"
      :style="theValueStyle"
      @click.left="onToggleDrop">
      <!--Show Icon-->
      <ti-icon 
        v-if="hasValue"
          :value="value"/>
      <!--No Icon-->
      <span 
        v-else
          class="no-icon"><i class="zmdi zmdi-cake"></i></span>
    </span>
    <span class="as-clear" @click="onClearIcon">
      <ti-icon value="zmdi-close"/>
    </span>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <div class="icon-input">
      <input ref="input"
        :placeholder="'i18n:icon-code-tip'|i18n"
        @change="onChangedIcon">
    </div>
    <div class="icon-options">
      <ul>
        <li v-for="li of theOptionIcons"
          @click.left="onSelectIcon(li)"
          @dblclick.left="onSelectIconAndCollapse(li)"
          @mouseenter="onHoverIcon(li)"
          @mouseleave="onLeaveIcon(li)">
          <ti-icon :value="li.value"/>
        </li>
      </ul>
    </div>
    <div class="icon-tip">
      <template v-if="theTipIcon">
        <ti-icon :value="theTipIcon"/>
        <span>{{theTipIcon}}</span>
      </template>
      <template v-else>
        <span>...</span>
      </template>
    </div>
  </template>
</ti-combo-box>`);
//============================================================
// JOIN: ti/input/icon/ti-input-icon.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////////////
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  data: ()=>({
    hideBorder : false,
    myHoverIcon : null,
    status  : "collapse"
  }),
  ////////////////////////////////////////////////////
  props : {
    // "hideBorder"  : {
    //   type : Boolean,
    //   default : false
    // },
    "value" : {
      type : [String, Object],
      default : null
    },
    "iconSize" : {
      type : [Number,String],
      default : null
    },
    "dropWidth" : {
      type : [Number, String],
      default : "4rem"
    },
    "dropHeight" : {
      type : [Number, String],
      default : "4rem"
    },
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName({
        "show-border"  : !this.hideBorder,
        "hide-border"  : this.hideBorder,
      }, this.className)
    },
    //------------------------------------------------
    theValueStyle() {
      return {
        "font-size" : Ti.Css.toSize(this.iconSize)
      }
    },
    //------------------------------------------------
    isCollapse() {return "collapse"==this.status},
    isExtended() {return "extended"==this.status},
    //------------------------------------------------
    hasValue () {
      return !Ti.Util.isNil(this.value)
    },
    //------------------------------------------------
    theTipIcon () {
      return  this.myHoverIcon || this.value
    },
    //------------------------------------------------
    theOptionIcons() {
      let list = []
      _.forEach(this.options, (icon, index)=>{
        let m = /^([a-z]+)-(.+)$/.exec(icon)
        list.push({
          value : icon,
          index : index,
          type  : m[1],
          name  : m[2]
        })
      })
      return list
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    onToggleDrop() {
      this.status = ({
        "collapse" : "extended",
        "extended" : "collapse"
      })[this.status]
    },
    //------------------------------------------------
    onSelectIcon({value}={}) {
      this.$notify("change", value)
    },
    //------------------------------------------------
    onSelectIconAndCollapse({value}={}) {
      this.$notify("change", value)
      this.status = "collapse"
    },
    //------------------------------------------------
    onChangedIcon() {
      let icon = _.trim(this.$refs.input.value)
      console.log("haha", icon)
      this.$notify("change", icon)
    },
    //------------------------------------------------
    onHoverIcon({value}={}) {
      this.myHoverIcon = value
    },
    //------------------------------------------------
    onLeaveIcon() {
      this.myHoverIcon = null
    },
    //------------------------------------------------
    onClearIcon() {
      this.$notify("change", null)
    },
    //------------------------------------------------
    doCollapse() {
      this.status = "collapse"
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/input/icon/ti-input-icon.mjs", _M);
})();
//============================================================
// JOIN: ti/input/icon/_com.json
//============================================================
Ti.Preload("ti/com/ti/input/icon/_com.json", {
  "name" : "ti-input-icon",
  "globally" : true,
  "template" : "./ti-input-icon.html",
  "props" : "./ti-input-icon-props.mjs",
  "mixins" : ["./ti-input-icon.mjs"]
});
//============================================================
// JOIN: ti/input/month/ti-input-month.html
//============================================================
Ti.Preload("ti/com/ti/input/month/ti-input-month.html", `<ti-combo-box class="as-month"
  :class="topClass"
  :width="width"
  :drop-width="dropWidth"
  :drop-height="dropHeight"
  :drop-overflow="'hidden'"
  :status="status"
  @collapse="doCollapse">
  <!--
    Box
  -->
  <template v-slot:box>
    <ti-input 
      :readonly="!canInput"
      :hide-border="hideBorder"
      :placeholder="placeholder|i18n"
      :prefix-icon="icon"
      :suffix-icon="theStatusIcon"
      :value="theInputValue"
      :height="height"
      :focus="isExtended"
      @change="onChanged"
      @input:focus="onInputFocused"
      @suffix:icon="onClickStatusIcon"/>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <ti-month
      :value="theDropDate"
      :height="dropHeight"
      :begin-year="beginYear"
      :end-year="endYear"
      @change="onMonthChanged"/>
  </template>
</ti-combo-box>`);
//============================================================
// JOIN: ti/input/month/ti-input-month.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  data : ()=>({
    "runtime" : null,
    "status"  : "collapse"
  }),
  ////////////////////////////////////////////////////
  props : {
    "canInput" : {
      type : Boolean,
      default : true
    },
    "value" : {
      type : [String, Number, Date],
      default : null
    },
    "icon" : {
      type : String,
      default : "far-calendar"
    },
    "format" : {
      type : String,
      default : "yyyy-MM"
    },
    "placeholder" : {
      type : [String, Number],
      default : "i18n:blank-month"
    },
    "hideBorder" : {
      type : Boolean,
      default : false
    },
    "width" : {
      type : [Number, String],
      default : "1.4rem"
    },
    "height" : {
      type : [Number, String],
      default : undefined
    },
    "dropWidth" : {
      type : [Number, String],
      default : "box"
    },
    // the height of drop list
    "dropHeight" : {
      type : [Number, String],
      default : 200
    },
    "beginYear" : {
      type : [Number, String],
      default : 1970
    },
    "endYear" : {
      type : [Number, String],
      default : (new Date().getFullYear()+1)
    },
    "statusIcons" : {
      type : Object,
      default : ()=>({
        collapse : "zmdi-chevron-down",
        extended : "zmdi-chevron-up"
      })
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName(this.className)
    },
    //------------------------------------------------
    isCollapse() {return "collapse"==this.status},
    isExtended() {return "extended"==this.status},
    //------------------------------------------------
    theDate() {
      return Ti.Types.toDate(this.value, null)
    },
    //------------------------------------------------
    theDropDate() {
      return this.runtime || this.theDate
    },
    //------------------------------------------------
    theInputValue() {
      if(this.isExtended) {
        return this.getDateText(this.theDropDate)
      }
      return this.getDateText(this.theDropDate, this.format)
    },
    //------------------------------------------------
    theStatusIcon() {
      return this.statusIcons[this.status]
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    applyRuntime() {
      if(this.runtime) {
        let dt = this.runtime
        this.runtime = null
        let str = this.getDateText(dt)
        this.$notify("change", str)
      }
    },
    //-----------------------------------------------
    doExtend() {
      this.status = "extended"
    },
    //-----------------------------------------------
    doCollapse({escaped=false}={}) {
      this.status = "collapse"
      // Drop runtime
      if(escaped) {
        this.runtime = null
      }
      // Apply Changed for runtime
      else {
        this.applyRuntime()
      }
    },
    //------------------------------------------------
    onInputFocused() {
      this.doExtend()
    },
    //------------------------------------------------
    onChanged(val) {
      // Empty value as null
      if(_.isEmpty(val)) {
        this.$notify("change", null);
      }
      // Parsed value
      else {
        let dt  = Ti.Types.toDate(val)
        let str = this.getDateText(dt)
        this.$notify("change", str)
      }
    },
    //------------------------------------------------
    onClickStatusIcon() {
      // extended -> collapse
      if(this.isExtended) {
        this.doCollapse()
      }
      // collapse -> extended
      else {
        this.doExtend()
      }
    },
    //------------------------------------------------
    onMonthChanged(dt) {
      this.runtime = dt
    },
    //------------------------------------------------
    getDateText(dt, fmt="yyyy-MM") {
      let dt2 = Ti.Types.toDate(dt, null)
      return Ti.Types.formatDate(dt2, fmt)
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/input/month/ti-input-month.mjs", _M);
})();
//============================================================
// JOIN: ti/input/month/_com.json
//============================================================
Ti.Preload("ti/com/ti/input/month/_com.json", {
  "name" : "ti-input-month",
  "globally" : true,
  "template" : "./ti-input-month.html",
  "mixins" : ["./ti-input-month.mjs"],
  "components" : [
    "@com:ti/combo/input",
    "@com:ti/month"]
});
//============================================================
// JOIN: ti/input/num/ti-input-num.html
//============================================================
Ti.Preload("ti/com/ti/input/num/ti-input-num.html", `<div
  class="ti-input-num ti-fill-parent"
  :class="TopClass"
  :style="TopStyle">
  <!--
    Button: -
  -->
  <div class="as-btn is-decrease"
    :class="DesreaseClass"
    @click="changeByStep(-1)">
    <ti-icon value="zmdi-minus"/>
  </div>
  <!--
    Input
  -->
  <div class="as-input">
    <input 
      spellcheck="false" 
      :value="TheValue"
      @change="onChanged">
  </div>
  <!--
    Button: +
  -->
  <div class="as-btn is-increase"
    :class="IncreaseClass"
    @click="changeByStep(1)">
    <ti-icon value="zmdi-plus"/>
  </div>
</div>`);
//============================================================
// JOIN: ti/input/num/ti-input-num.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////////////
  props : {
    "value" : null,
    "defaultValue" : {
      type : Number,
      default : 0
    },
    "maxValue" : {
      type : Number,
      default : undefined
    },
    "minValue" : {
      type : Number,
      default : undefined
    },
    "step" : {
      type : Number,
      default : 1
    },
    "width" : {
      type : [Number, String],
      default : 200
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    TopClass() {
      return this.getTopClass()
    },
    TopStyle() {
      return Ti.Css.toStyleRem100({
        width: this.width
      })
    },
    DesreaseClass() {
      if(!_.isUndefined(this.minValue) && this.value <= this.minValue) {
        return "is-disabled"
      }
      return "is-enabled"
    },
    IncreaseClass() {
      if(!_.isUndefined(this.maxValue) && this.value >= this.maxValue) {
        return "is-disabled"
      }
      return "is-enabled"
    },
    TheValue() {
      if(isNaN(this.value) 
         || !_.isNumber(this.value)) {
        return
      }
      return this.getValue(this.value)
    }
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    getValue(val) {
      if(isNaN(val) || !_.isNumber(val)) {
        return this.defaultValue
      }
      if(!_.isUndefined(this.minValue) && val < this.minValue) {
        return this.minValue
      }
      if(!_.isUndefined(this.maxValue) && val > this.maxValue) {
        return this.maxValue
      }
      return val
    },
    //------------------------------------------------
    changeByStep(n=0) {
      let val = this.TheValue
      // Start with default value
      if(_.isUndefined(val)) {
        val = this.defaultValue
      }
      // change by step
      else {
        val += (n * this.step)
      }
      // Eval the min/max range
      val = this.getValue(val)

      // Emit change
      if(val != this.value) {
        this.$notify("change", val)
      }
    },
    //------------------------------------------------
    onChanged($event) {
      let $in = $event.target
      if(_.isElement($in)) {
        let str = _.trim($in.value)
        // Notify nil
        if(_.isEmpty(str)) {
          this.$notify("change", null)  
        }
        // Notify value
        else {
          let val = str ? str * 1 : this.defaultValue
          if(!isNaN(val)) {
            this.$notify("change", val)  
          }
        }
      }
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/input/num/ti-input-num.mjs", _M);
})();
//============================================================
// JOIN: ti/input/num/_com.json
//============================================================
Ti.Preload("ti/com/ti/input/num/_com.json", {
  "name" : "ti-input-num",
  "globally" : true,
  "template" : "./ti-input-num.html",
  "mixins" : ["./ti-input-num.mjs"]
});
//============================================================
// JOIN: ti/input/tags/ti-input-tags-props.mjs
//============================================================
(function(){
const _M = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "dict" : {
    type : [String, Ti.Dict],
    default : null
  },
  "inputValue" : null,
  // +1 from the begin
  // -1 from the last
  "maxValueLen" : {
    type : Number,
    default : 0
  },
  "valueUnique" : {
    type : Boolean,
    default : true
  },
  "tagOptions" : {
    type : [Array, Function],
    default : ()=>[]
  },
  "tagMapping" : {
    type : Object,
    default : undefined
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "canInput" : {
    type : Boolean,
    default : true
  },
  "cancelTagBubble" : {
    type : Boolean,
    default : false
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "tagItemIconBy" : {
    type : [String, Function],
    default : undefined
  },
  "tagItemDefaultIcon" : {
    type : String,
    default : undefined
  },
  "tagOptionDefaultIcon" : {
    type : String,
    default : undefined
  }
}
Ti.Preload("ti/com/ti/input/tags/ti-input-tags-props.mjs", _M);
})();
//============================================================
// JOIN: ti/input/tags/ti-input-tags.html
//============================================================
Ti.Preload("ti/com/ti/input/tags/ti-input-tags.html", `<ti-input
  class="ti-input-tags"
  :class-name="className"
  :value="inputValue"
  :value-case="valueCase"
  :trimed="trimed"

  :readonly="!canInput || readonly"
  :focused="focused"
  :hover="hover"
  :auto-select="autoSelect"

  :placeholder="thePlaceholder"
  :auto-i18n="autoI18n"
  :hide-border="hideBorder"
  :prefix-icon="prefixIcon"
  :prefix-hover-icon="prefixHoverIcon"
  :prefix-icon-for-clean="prefixIconForClean"
  :prefix-text="prefixText"
  :suffix-icon="suffixIcon"
  :suffix-text="suffixText"
  
  :width="width"
  :height="height"

  :on-init="onInputInit"
  
  @inputing="onInputInputing"
  @change="onInputChanged"
  @input:focus="$notify('input:focus')"
  @prefix:icon="$notify('prefix:icon')"
  @input:blur="$notify('input:blur')"
  @suffix:icon="$notify('suffix:icon')">
  <!--
    Tag List
  -->
  <div v-if="hasTags"
    class="as-tags">
    <ti-tags
      :value="theTags"
      :dict="dict"
      :removable="true"
      :item-options="tagOptions"
      :item-icon-by="tagItemIconBy"
      :item-default-icon="tagItemDefaultIcon"
      :option-default-icon="tagOptionDefaultIcon"
      :mapping="tagMapping"
      :cancel-item-bubble="cancelTagBubble"
      @change="$notify('change', $event)"/>
  </div>
</ti-input>`);
//============================================================
// JOIN: ti/input/tags/ti-input-tags.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    
  }),
  ////////////////////////////////////////////////////
  props : {
    "inputChange" : {
      type: Function,
      default : undefined
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    /***
     * @return The tag objects list like:
     * 
     * ```js
     * [{
     *   icon  : "zmdi-phone",
     *   text  : "i18n:xxx",
     *   value : 100,
     *   options : [{icon,text,value}...]
     * }]
     * ```
     */
    theTags() {
      return this.evalTagList(this.value)
    },
    //------------------------------------------------
    hasTags() {
      return !_.isEmpty(this.theTags)
    },
    //------------------------------------------------
    thePlaceholder() {
      if(this.placeholder) {
        return this.placeholder
      }
      if(this.readonly || !this.canInput) {
        return ""
      }
      return "i18n:input-tags"
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    onInputInit($input) {this.$input=$input},
    //------------------------------------------------
    /***
     * @return The tag objects list like:
     * 
     * ```js
     * [{
     *   icon  : "zmdi-phone",
     *   text  : "i18n:xxx",
     *   value : 100,
     *   options : [{icon,text,value}...]
     * }]
     * ```
     */
    evalTagList(values=[], newTagVal) {
      //...........................................
      // Prepare the list
      let list = _.filter(_.concat(values), (v)=>!Ti.Util.isNil(v))
      // Join the last one
      if(!Ti.Util.isNil(newTagVal)) {
        list.push(newTagVal)
      }
      // valueUnique
      if(this.valueUnique) {
        list = _.uniq(list)
      }
      // The MaxValueLen
      if(this.maxValueLen > 0) {
        list = _.slice(list, 0, this.maxValueLen)
      }
      // Slice from the end
      else if(this.maxValueLen < 0) {
        let offset = Math.max(0, list.length + this.maxValueLen)
        list = _.slice(list, offset)
      }
      // Gen Tag List
      let tags = []
      for(let li of list) {
        // Object
        if(_.isPlainObject(li)) {
          tags.push(_.assign({
            icon    : this.tagIcon,
            options : this.tagOptions
          }, li))
        }
        // String or simple value
        else {
          tags.push(li)
        }
      }
      //...........................................
      return tags
    },
    //------------------------------------------------
    getTagValues(tags=[]) {
      let list = []
      for(let tag of tags) {
        let val = _.isPlainObject(tag)
          ? tag.value
          : tag
        if(!Ti.Util.isNil(val)) {
          list.push(val)
        }
      }
      return list
    },
    //------------------------------------------------
    onInputInputing(val) {
      this.$notify("inputing", val)
    },
    //------------------------------------------------
    onInputChanged(val) {
      // May click the prefix icon for clean
      if(_.isNull(val)) {
        this.$notify("change", [])
      }
      // Delegate to parent
      else if(_.isFunction(this.inputChange)) {
        this.inputChange(val)
      }
      // Handle by self
      else if(val) {
        let tags = this.evalTagList(this.value, val)
        let vals = this.getTagValues(tags)
        this.$notify("change", vals)
      }
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/input/tags/ti-input-tags.mjs", _M);
})();
//============================================================
// JOIN: ti/input/tags/_com.json
//============================================================
Ti.Preload("ti/com/ti/input/tags/_com.json", {
  "name" : "ti-input-tags",
  "globally" : true,
  "template" : "./ti-input-tags.html",
  "props" : [
      "@com:ti/input/ti-input-props.mjs",
      "./ti-input-tags-props.mjs"
    ],
  "mixins" : ["./ti-input-tags.mjs"],
  "components" : ["@com:ti/tags"]
});
//============================================================
// JOIN: ti/input/text/ti-input-text.html
//============================================================
Ti.Preload("ti/com/ti/input/text/ti-input-text.html", `<div class="ti-input-text" 
  :class="topClass" 
  :style="topStyle"
  v-ti-activable>
  <!--
    Prefix
  -->
  <div class="as-bar is-prefix">
    <!--prefix:icon-->
    <div v-if="prefixIcon"
      class="as-icon at-prefix"
      :class="getHoverClass('prefixIcon')"
      @click.left.stop="onClickPrefixIcon"
      @mouseenter="pointerHover='prefixIcon'"
      @mouseleave="pointerHover=null">
      <ti-icon :value="thePrefixIcon"/>
    </div>
    <!--prefix:text-->
    <div v-if="prefixText" 
      class="as-text at-prefix"
      :class="getHoverClass('prefixText')"
      @click.left.stop="onClickPrefixText"
      @mouseenter="pointerHover='prefixText'"
      @mouseleave="pointerHover=null">
      <span>{{prefixText|i18n}}</span>
    </div>
  </div>
  <!--input-->
  <textarea ref="input"
    spellcheck="false" 
    :readonly="readonly"
    :value="theValue"
    :placeholder="placeholder"
    @compositionstart="onInputCompositionStart"
    @compositionend="onInputCompositionEnd"
    @input="onInputing"
    @keydown="onInputKeyDown"
    @change="onInputChanged"
    @focus="onInputFocus"
    @blur="onInputBlur"></textarea>
  <!--
    Suffox
  -->
  <div class="as-bar is-suffix">
    <!--suffix:text-->
    <div v-if="suffixText"
      class="as-text at-suffix"
      :class="getHoverClass('suffixText')"
      @click.left.stop="onClickSuffixIcon"
      @mouseenter="pointerHover='suffixText'"
      @mouseleave="pointerHover=null">
      <span>{{suffixText|i18n}}</span>
    </div>
    <!--suffix:icon-->
    <div v-if="suffixIcon"
      class="as-icon at-suffix"
      :class="getHoverClass('suffixIcon')"
      @click.left.stop="onClickSuffixIcon"
      @mouseenter="pointerHover='suffixIcon'"
      @mouseleave="pointerHover=null">
      <ti-icon :value="suffixIcon"/>
    </div>
  </div>
</div>`);
//============================================================
// JOIN: ti/input/text/ti-input-text.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  data : ()=>({
    "inputCompositionstart" : false,
    "isFocused" : false,
    "pointerHover" : null
  }),
  ////////////////////////////////////////////////////
  watch : {
    "focus" : function(v) {
      this.isFocused = v
    }
  },
  ////////////////////////////////////////////////////
  props : {
    "value" : null,
    "format" : {
      type : [String, Array, Object],
      default : undefined
    },
    "readonly" : {
      type: Boolean,
      default : false
    },
    "valueCase" : {
      type : String,
      default : null,
      validator : (cs)=>(Ti.Util.isNil(cs)||Ti.S.isValidCase(cs))
    },
    "placeholder" : {
      type : [String, Number],
      default : null
    },
    "trimed" : {
      type : Boolean,
      default : true
    },
    "autoJsValue" : {
      type : Boolean,
      default : false
    },
    "hideBorder" : {
      type : Boolean,
      default : false
    },
    "width" : {
      type : [Number, String],
      default : null
    },
    "height" : {
      type : [Number, String],
      default : null
    },
    "prefixHoverIcon" : {
      type : String,
      default : "zmdi-close-circle"
    },
    "prefixIconForClean" : {
      type : Boolean,
      default : true
    },
    "prefixIcon" : {
      type : String,
      default : null
    },
    "prefixText" : {
      type : String,
      default : null
    },
    "suffixText" : {
      type : String,
      default : null
    },
    "suffixIcon" : {
      type : String,
      default : null
    },
    "focus" : {
      type : Boolean,
      default : false
    },
    "hover" : {
      type : [Array, String],
      default : ()=>["prefixIcon", "suffixIcon"]
    },
    "autoSelect" : {
      type : Boolean,
      default : false
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName(this.className, {
        "is-self-actived" : this.isSelfActived,
        "is-actived"   : this.isActived,
        "is-focused"   : this.isFocused,
        "is-blurred"   : !this.isFocused,
        "is-readonly"  : this.readonly,
        "show-border"  : !this.hideBorder,
        "hide-border"  : this.hideBorder,
        "has-prefix-icon" : this.thePrefixIcon,
        "has-prefix-text" : this.prefixText,
        "has-suffix-icon" : this.suffixIcon,
        "has-suffix-text" : this.suffixText,
      })
    },
    //------------------------------------------------
    topStyle() {
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //------------------------------------------------
    theValue() {
      //console.log("input value:", this.value)
      // if(_.isArray(this.value)) {
      //   return this.value.join("\r\n")
      // }
      return Ti.Types.toStr(this.value, this.format)
    },
    //------------------------------------------------
    thePrefixIcon() {
      if("prefixIcon" == this.pointerHover
        && this.isCanHover("prefixIcon")) {
        return this.prefixHoverIcon || this.prefixIcon
      }
      return this.prefixIcon
    },
    //------------------------------------------------
    theHover() {
      let map = {}
      let hos = _.concat(this.hover)
      for(let ho of hos) {
        if(ho) {
          map[ho] = true
        }
      }
      return map
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    isCanHover(hoverName) {
      return this.theHover[hoverName] ? true : false
    },
    //------------------------------------------------
    getHoverClass(hoverName) {
      let canHover = this.isCanHover(hoverName)
      return {
        "can-hover" : canHover,
        "for-look"  : !canHover
      }
    },
    //------------------------------------------------
    onInputCompositionStart(){
      this.inputCompositionstart = true
    },
    //------------------------------------------------
    onInputCompositionEnd(){
      this.inputCompositionstart = false
      this.doWhenInput()
    },
    //------------------------------------------------
    onInputing($event) {
      if(!this.inputCompositionstart) {
        this.doWhenInput()
      }
    },
    //------------------------------------------------
    doWhenInput(emitName="inputing", autoJsValue=false) {
      if(_.isElement(this.$refs.input)) {
        //console.log("doWhenInput", emitName)
        let val = this.$refs.input.value
        // Auto js value
        if(autoJsValue) {
          val = Ti.S.toJsValue(val, {
            autoNil  : true,
            autoDate : false,
            trimed : this.trimed
          })
        }
        // Trim
        else if(this.trimed) {
          val = _.trim(val)
        }
        // case
        val = Ti.S.toCase(val, this.valueCase)
        // notify
        this.$notify(emitName, val)
      }
    },
    //------------------------------------------------
    onInputKeyDown($event) {
      let payload = _.pick($event, 
        "code","key","keyCode",
        "altKey","ctrlKey","metaKey","shiftKey")
      payload.uniqueKey = Ti.Shortcut.getUniqueKey(payload)
      payload.$event = $event
      this.$notify("keypress", payload)
    },
    //------------------------------------------------
    onInputChanged() {
      this.doWhenInput("change", this.autoJsValue)
    },
    //------------------------------------------------
    onInputFocus() {
      if(!this.readonly) {
        if(this.autoSelect) {
          this.$refs.input.select()
        } else {
          this.$refs.input.focus()
        }
      }
      this.isFocused = true
      this.$notify("input:focus")
      // Auto Actived
      if(!this.isActived) {
        this.setActived()
      }
    },
    //------------------------------------------------
    onInputBlur() {
      this.isFocused = false
      this.$notify("input:blur")
    },
    //------------------------------------------------
    onClickPrefixIcon() {
      if(this.prefixIconForClean) {
        this.$notify("change", null)
      }
      this.$notify("prefix:icon")
    },
    //------------------------------------------------
    onClickPrefixText() {
      this.$notify("prefix:text")
    },
    //------------------------------------------------
    onClickSuffixIcon() {
      this.$notify("suffix:icon")
    },
    //------------------------------------------------
    onClickSuffixText() {
      this.$notify("suffix:text")
    },
    //------------------------------------------------
    doAutoFocus() {
      if(this.focus && !this.isFocused) {
        this.onInputFocus()
      }  
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    "focus" : function() {
      this.doAutoFocus()
    }
  },
  ////////////////////////////////////////////////////
  mounted : function(){
    this.doAutoFocus()
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/input/text/ti-input-text.mjs", _M);
})();
//============================================================
// JOIN: ti/input/text/_com.json
//============================================================
Ti.Preload("ti/com/ti/input/text/_com.json", {
  "name" : "ti-input-text",
  "globally" : true,
  "template" : "./ti-input-text.html",
  "mixins" : ["./ti-input-text.mjs"],
  "components" : []
});
//============================================================
// JOIN: ti/input/ti-input-props.mjs
//============================================================
(function(){
const _M = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "value" : null,
  "format" : undefined,
  "valueCase" : {
    type : String,
    default : null,
    validator : (cs)=>(Ti.Util.isNil(cs)||Ti.S.isValidCase(cs))
  },
  "trimed" : {
    type : Boolean,
    default : true
  },
  "autoJsValue" : {
    type : Boolean,
    default : false
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "readonly" : {
    type: Boolean,
    default : false
  },
  "focused" : {
    type : Boolean,
    default : false
  },
  "hover" : {
    type : [Array, String],
    default : ()=>["prefixIcon", "suffixIcon"]
  },
  "autoSelect" : {
    type : Boolean,
    default : false
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "placeholder" : {
    type : [String, Number],
    default : null
  },
  "autoI18n" : {
    type : Boolean,
    default : false
  },
  "hideBorder" : {
    type : Boolean,
    default : false
  },
  "prefixIcon" : {
    type : [String, Object],
    default : null
  },
  "prefixHoverIcon" : {
    type : String,
    default : "zmdi-close-circle"
  },
  "prefixIconForClean" : {
    type : Boolean,
    default : true
  },
  "prefixText" : {
    type : String,
    default : null
  },
  "suffixIcon" : {
    type : [String, Object],
    default : null
  },
  "suffixText" : {
    type : String,
    default : null
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width" : {
    type : [Number, String],
    default : null
  },
  "height" : {
    type : [Number, String],
    default : null
  }
}
Ti.Preload("ti/com/ti/input/ti-input-props.mjs", _M);
})();
//============================================================
// JOIN: ti/input/ti-input.html
//============================================================
Ti.Preload("ti/com/ti/input/ti-input.html", `<div class="ti-input" 
  :class="TopClass" 
  :style="TopStyle"
  v-ti-activable>
  <!--prefix:icon-->
  <div v-if="prefixIcon"
    class="as-input-icon at-prefix"
    :class="getHoverClass('prefixIcon')"
    @click.left="OnClickPrefixIcon"
    @mouseenter="pointerHover='prefixIcon'"
    @mouseleave="pointerHover=null">
    <ti-icon :value="ThePrefixIcon"/>
  </div>
  <!--prefix:text-->
  <div v-if="prefixText" 
    class="as-input-text at-prefix"
    :class="getHoverClass('prefixText')"
    @click.left="OnClickPrefixText"
    @mouseenter="pointerHover='prefixText'"
    @mouseleave="pointerHover=null">
    <span>{{prefixText|i18n}}</span>
  </div>
  <!--PreSlot-->
  <slot></slot>
  <!--
    Input Box
  -->
  <div class="as-input">
    <input ref="input"
      spellcheck="false" 
      :readonly="readonly"
      :value="TheValue"
      :placeholder="placeholder|i18n"
      @compositionstart="OnInputCompositionStart"
      @compositionend="OnInputCompositionEnd"
      @input="OnInputing"
      @change="OnInputChanged"
      @focus="OnInputFocus"
      @blur="OnInputBlur">
    <!--suffix:text-->
    <div v-if="suffixText"
      class="as-input-text at-suffix"
      :class="getHoverClass('suffixText')"
      @click.left="OnClickSuffixIcon"
      @mouseenter="pointerHover='suffixText'"
      @mouseleave="pointerHover=null">
      <span>{{suffixText|i18n}}</span>
    </div>
    <!--suffix:icon-->
    <div v-if="suffixIcon"
      class="as-input-icon at-suffix"
      :class="getHoverClass('suffixIcon')"
      @click.left="OnClickSuffixIcon"
      @mouseenter="pointerHover='suffixIcon'"
      @mouseleave="pointerHover=null">
      <ti-icon :value="suffixIcon"/>
    </div>
  </div>
</div>`);
//============================================================
// JOIN: ti/input/ti-input.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////////////
  model : {
    prop : "value",
    event: "change"
  },
  ////////////////////////////////////////////////////
  data : ()=>({
    "inputCompositionstart" : false,
    "isFocused" : false,
    "pointerHover" : null
  }),
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-focused"   : this.isFocused,
        "is-blurred"   : !this.isFocused,
        "is-readonly"  : this.readonly,
        "show-border"  : !this.hideBorder,
        "hide-border"  : this.hideBorder,
        "has-prefix-icon" : this.thePrefixIcon,
        "has-prefix-text" : this.prefixText,
        "has-suffix-icon" : this.suffixIcon,
        "has-suffix-text" : this.suffixText,
      })
    },
    //------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //------------------------------------------------
    TheValue() {
      //console.log("input value:", this.value)
      let val = Ti.Types.toStr(this.value, this.format)
      if(this.autoI18n) {
        return Ti.I18n.text(val)
      }
      return val
    },
    //------------------------------------------------
    ThePrefixIcon() {
      if("prefixIcon" == this.pointerHover
        && this.isCanHover("prefixIcon")) {
        return this.prefixHoverIcon || this.prefixIcon
      }
      return this.prefixIcon
    },
    //------------------------------------------------
    TheHover() {
      let map = {}
      let hos = _.concat(this.hover)
      for(let ho of hos) {
        if(ho) {
          map[ho] = true
        }
      }
      return map
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    isCanHover(hoverName) {
      return this.TheHover[hoverName] ? true : false
    },
    //------------------------------------------------
    getHoverClass(hoverName) {
      let canHover = this.isCanHover(hoverName)
      return {
        "can-hover" : canHover,
        "for-look"  : !canHover,
        "is-prefix-icon-hover" : "prefixIcon" == hoverName
      }
    },
    //------------------------------------------------
    OnInputCompositionStart(){
      this.inputCompositionstart = true
    },
    //------------------------------------------------
    OnInputCompositionEnd(){
      this.inputCompositionstart = false
      this.doWhenInput()
    },
    //------------------------------------------------
    OnInputing($event) {
      if(!this.inputCompositionstart) {
        this.doWhenInput()
      }
    },
    //------------------------------------------------
    doWhenInput() {
      let val = this.getInputValue(false)
      if(!Ti.Util.isNil(val)) {
        this.$notify("inputing", val)
      }
    },
    //------------------------------------------------
    // OnInputKeyDown($event) {
    //   let payload = _.pick($event, 
    //     "code","key","keyCode",
    //     "altKey","ctrlKey","metaKey","shiftKey")
    //   payload.uniqueKey = Ti.Shortcut.getUniqueKey(payload)
    //   payload.$event = $event
    //   this.$notify("keypress", payload)
    // },
    //------------------------------------------------
    OnInputChanged() {
      let val = this.getInputValue(this.autoJsValue)
      this.$notify("change", val)
    },
    //------------------------------------------------
    OnInputFocus() {
      if(!this.readonly) {
        if(this.autoSelect) {
          this.$refs.input.select()
        } else {
          this.$refs.input.focus()
        }
      }
      this.isFocused = true
      this.$notify("input:focus")
      // Auto Actived
      if(!this.isActived) {
        this.setActived()
      }
    },
    //------------------------------------------------
    OnInputBlur() {
      this.isFocused = false
      this.$notify("input:blur")
    },
    //------------------------------------------------
    OnClickPrefixIcon() {
      if(this.prefixIconForClean) {
        this.$notify("change", null)
      }
      this.$notify("prefix:icon")
    },
    //------------------------------------------------
    OnClickPrefixText() {
      this.$notify("prefix:text")
    },
    //------------------------------------------------
    OnClickSuffixIcon() {
      this.$notify("suffix:icon")
    },
    //------------------------------------------------
    OnClickSuffixText() {
      this.$notify("suffix:text")
    },
    //------------------------------------------------
    // Utility
    //------------------------------------------------
    getInputValue(autoJsValue=false) {
      if(_.isElement(this.$refs.input)) {
        //console.log("doWhenInput", emitName)
        let val = this.$refs.input.value
        // Auto js value
        if(autoJsValue) {
          val = Ti.S.toJsValue(val, {
            autoNil  : true,
            autoDate : false,
            trimed : this.trimed
          })
        }
        // Trim
        else if(this.trimed) {
          val = _.trim(val)
        }
        // case
        val = Ti.S.toCase(val, this.valueCase)
        // notify
        return val
      }
    },
    //------------------------------------------------
    doAutoFocus() {
      if(this.focused && !this.isFocused) {
        this.OnInputFocus()
      }  
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    "focused" : "doAutoFocus"
  },
  ////////////////////////////////////////////////////
  mounted : function(){
    this.doAutoFocus()
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/input/ti-input.mjs", _M);
})();
//============================================================
// JOIN: ti/input/time/ti-input-time.html
//============================================================
Ti.Preload("ti/com/ti/input/time/ti-input-time.html", `<ti-combo-box class="as-time"
  :class="topClass"
  :width="width"
  :drop-width="dropWidth"
  :drop-height="dropHeight"
  :drop-overflow="'hidden'"
  :status="status"
  @collapse="doCollapse">
  <!--
    Box
  -->
  <template v-slot:box>
    <ti-input 
      :readonly="!canInput"
      :hide-border="hideBorder"
      :placeholder="placeholder|i18n"
      :prefix-icon="icon"
      :suffix-icon="theStatusIcon"
      :value="theTimeText"
      :height="height"
      :focus="isExtended"
      @change="onChanged"
      @input:focus="onInputFocused"
      @suffix:icon="onClickStatusIcon"/>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <ti-time
      :value="theDropTime"
      :height="dropHeight"
      :mode="mode"
      @change="onTimeChanged"/>
  </template>
</ti-combo-box>`);
//============================================================
// JOIN: ti/input/time/ti-input-time.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  data : ()=>({
    "runtime" : null,
    "status"   : "collapse"
  }),
  ////////////////////////////////////////////////////
  props : {
    "canInput" : {
      type : Boolean,
      default : true
    },
    "value" : {
      type : [String, Number, Ti.Types.Time],
      default : null
    },
    "icon" : {
      type : String,
      default : "far-clock"
    },
    /***
     * Value unit when value is Number
     */
    "valueUnit" : {
      type : String,
      default : "s",
      validator : function(unit) {
        return /^(ms|s|min|hr)$/.test(unit)
      }
    },
    // Display mode
    "mode" : {
      type : String,
      default : "auto",
      /***
       * - `sec`  : "HH:mm:ss"
       * - `min`  : "HH:mm"
       * - `auto` : "HH:mm" or "HH:mm:ss" if `ss` no zero
       */
      validator : function(unit) {
        return /^(sec|min|auto)$/.test(unit)
      }
    },
    "placeholder" : {
      type : [String, Number],
      default : "i18n:blank-time"
    },
    "hideBorder" : {
      type : Boolean,
      default : false
    },
    "width" : {
      type : [Number, String],
      default : "1.4rem"
    },
    "height" : {
      type : [Number, String],
      default : undefined
    },
    "dropWidth" : {
      type : [Number, String],
      default : "box"
    },
    "dropHeight" : {
      type : [Number, String],
      default : 400
    },
    "statusIcons" : {
      type : Object,
      default : ()=>({
        collapse : "zmdi-chevron-down",
        extended : "zmdi-chevron-up"
      })
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName(this.className)
    },
    //------------------------------------------------
    isCollapse() {return "collapse"==this.status},
    isExtended() {return "extended"==this.status},
    //------------------------------------------------
    theTime() {
      //console.log("input value:", this.value)
      return Ti.Types.toTime(this.value, this.valueUnit)
    },
    //------------------------------------------------
    theDropTime() {
      return this.runtime || this.theTime
    },
    //------------------------------------------------
    theTimeFormat() {
      return ({
        "sec"  : "HH:mm:ss",
        "min"  : "HH:mm",
        "auto" : "auto"
      })[this.mode]
    },
    //------------------------------------------------
    theTimeText() {
      return this.getTimeText(this.theDropTime)
    },
    //------------------------------------------------
    theStatusIcon() {
      return this.statusIcons[this.status]
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    applyRuntime() {
      if(this.runtime) {
        let tm = this.runtime
        this.runtime = null
        let str = this.getTimeText(tm)
        this.$notify("change", str)
      }
    },
    //-----------------------------------------------
    doExtend() {
      this.status = "extended"
    },
    //-----------------------------------------------
    doCollapse({escaped=false}={}) {
      //console.log("time doCollapse", {escaped})
      this.status = "collapse"
      // Drop runtime
      if(escaped) {
        this.runtime = null
      }
      // Apply Changed for runtime
      else {
        this.applyRuntime()
      }
    },
    //------------------------------------------------
    onInputFocused() {
      this.doExtend()
    },
    //------------------------------------------------
    onChanged(val) {
      // Empty value as null
      if(_.isEmpty(val)) {
        this.$notify("change", null);
      }
      // Parsed value
      else {
        let tm  = Ti.Types.toTime(val)
        let str = this.getTimeText(tm)
        this.$notify("change", str)
      }
    },
    //------------------------------------------------
    onClickStatusIcon() {
      // extended -> collapse
      if(this.isExtended) {
        this.doCollapse()
      }
      // collapse -> extended
      else {
        this.doExtend()
      }
    },
    //------------------------------------------------
    onTimeChanged(time) {
      this.runtime = time
    },
    //------------------------------------------------
    getTimeText(tm) {
      if(tm instanceof Ti.Types.Time) {
        return tm.toString(this.theTimeFormat)
      }
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/input/time/ti-input-time.mjs", _M);
})();
//============================================================
// JOIN: ti/input/time/_com.json
//============================================================
Ti.Preload("ti/com/ti/input/time/_com.json", {
  "name" : "ti-input-time",
  "globally" : true,
  "template" : "./ti-input-time.html",
  "mixins" : ["./ti-input-time.mjs"],
  "components" : [
    "@com:ti/combo/input",
    "@com:ti/time"]
});
//============================================================
// JOIN: ti/input/timerange/ti-input-timerange.html
//============================================================
Ti.Preload("ti/com/ti/input/timerange/ti-input-timerange.html", `<ti-combo-box class="as-timerange"
  :class="topClass"
  :width="width"
  :drop-width="null"
  :status="status"
  @collapse="doCollapse">
  <!--
    Box
  -->
  <template v-slot:box>
    <ti-input 
      :readonly="!canInput"
      :hide-border="hideBorder"
      :placeholder="placeholder|i18n"
      :prefix-icon="icon"
      :suffix-icon="theStatusIcon"
      :value="theRangeText"
      :height="height"
      :focus="isExtended"
      @change="onChanged"
      @input:focus="onInputFocused"
      @suffix:icon="onClickStatusIcon"/>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <ti-form
      :data="theDropRange"
      v-bind="theFormConfig"
      @change="onFormChanged"/>
  </template>
</ti-combo-box>`);
//============================================================
// JOIN: ti/input/timerange/ti-input-timerange.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  data : ()=>({
    "runtime" : null,
    "status"  : "collapse"
  }),
  ////////////////////////////////////////////////////
  props : {
    "canInput" : {
      type : Boolean,
      default : true
    },
    "value" : {
      type : [String, Object, Number, Array],
      default : null
    },
    "rangeKeys" : {
      type : Array,
      default : ()=>["beginTime", "endTime"]
    },
    "valueMode" : {
      type : String,
      default : "Array"
    },
    "dftValue" : {
      type : Array,
      default : ()=>["09:00", "17:00"]
    },
    "icon" : {
      type : String,
      default : "zmdi-time-interval"
    },
    "format" : {
      type : String,
      default : "HH:mm"
    },
    "placeholder" : {
      type : String,
      default : "i18n:blank-time-range"
    },
    "hideBorder" : {
      type : Boolean,
      default : false
    },
    "width" : {
      type : [Number, String],
      default : "2rem"
    },
    "height" : {
      type : [Number, String],
      default : undefined
    },
    "statusIcons" : {
      type : Object,
      default : ()=>({
        collapse : "zmdi-chevron-down",
        extended : "zmdi-chevron-up"
      })
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName(this.className)
    },
    //------------------------------------------------
    isCollapse() {return "collapse"==this.status},
    isExtended() {return "extended"==this.status},
    //--------------------------------------
    theFormConfig() {
      let [keyBegin, keyEnd] = this.rangeKeys
      let fields = [{
        name  : keyBegin,
        type  : "Time",
        title : "i18n:time-begin",
        comType : "ti-input-time"
      }, {
        name  : keyEnd,
        type  : "Time",
        title : "i18n:time-end",
        comType : "ti-input-time"
      }]
      return {
        fields,
        spacing : "tiny",
        statusIcons : null
      }
    },
    //--------------------------------------
    theRange() {
      return this.parseTimeRange(this.value)
    },
    //--------------------------------------
    theRangeText() {
      let [keyBegin, keyEnd] = this.rangeKeys
      let ss = []
      _.forEach(this.theRange, (val)=>{
        // Time
        if(val) {
          ss.push(val.toString(this.format))
        }
        // Zero
        else {
          ss.push(Ti.Types.formatTime(0, this.format))
        }
      })
      return ss.join(" ~ ")
    },
    //--------------------------------------
    theRangeValue() {
      return this.formatRangeValue(this.theRange)
    },
    //------------------------------------------------
    theDropRange() {
      return this.runtime || this.theRangeValue
    },
    //------------------------------------------------
    theStatusIcon() {
      return this.statusIcons[this.status]
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    applyRuntime() {
      if(this.runtime) {
        let rg = this.parseTimeRange(this.runtime)
        this.runtime = null
        let rg2 = this.formatRangeValue(rg)
        let rg3 = this.formatEmitRangeValue(rg2)
        this.$notify("change", rg3)
      }
    },
    //-----------------------------------------------
    doExtend() {
      this.status = "extended"
    },
    //-----------------------------------------------
    doCollapse({escaped=false}={}) {
      this.status = "collapse"
      // Drop runtime
      if(escaped) {
        this.runtime = null
      }
      // Apply Changed for runtime
      else {
        this.applyRuntime()
      }
    },
    //------------------------------------------------
    onInputFocused() {
      this.doExtend()
    },
    //------------------------------------------------
    onChanged(val) {
      let rg = this.parseTimeRange(val)
      // Empty Range
      if(_.isEmpty(rg)) {
        this.$notify("change", null);
      }
      // Format the Range
      else {
        let rg2 = this.formatRangeValue(rg)
        let rg3 = this.formatEmitRangeValue(rg2)
        this.$notify("change", rg3);
      }
    },
    //------------------------------------------------
    onClickStatusIcon() {
      // extended -> collapse
      if(this.isExtended) {
        this.doCollapse()
      }
      // collapse -> extended
      else {
        this.doExtend()
      }
    },
    //------------------------------------------------
    formatEmitRangeValue(rg) {
      let [keyBegin, keyEnd] = this.rangeKeys
      // Format the value to array
      if(rg && "Array" == this.valueMode) {
        let re = [rg[keyBegin], rg[keyEnd]]
        return _.filter(re, (v)=>(v && _.isString(v)))
      }
      // Default as object
      return rg
    },
    //------------------------------------------------
    onFormChanged(pair) {
      let rg = _.assign({}, this.theRangeValue, this.runtime)
      rg[pair.name] = pair.value
      this.runtime = rg
    },
    //------------------------------------------------
    parseTimeRange(val) {
      let [keyBegin, keyEnd] = this.rangeKeys
      val = Ti.Util.fallback(val, this.dftValue, {})
      let rg = {}
      // Number 
      if(_.isNumber(val)) {
        let tm = Ti.Types.toTime(val)
        rg = {
          [keyBegin] : tm
        }
      }
      // String
      else if(_.isString(val)) {
        let str = _.trim(val)
        let ss = _.split(str, /[\t ,\/~-]+/)
        let tm0 = Ti.Types.toTime(ss[0])
        let tm1 = Ti.Types.toTime(ss[1])
        rg = {
          [keyBegin] : tm0,
          [keyEnd]   : tm1
        }
      }
      // Array
      else if(_.isArray(val)) {
        rg = {
          [keyBegin] : Ti.Types.toTime(val[0]),
          [keyEnd]   : Ti.Types.toTime(val[1])
        }
      }
      // Plain Object
      else if(_.isPlainObject(val)) {
        rg = _.pick(val, this.rangeKeys)
      }
      // Then make sure the range beignTime is the less one
      return this.normalizeRange(rg)
    },
    //------------------------------------------------
    // Then make sure the range beignTime is the less one
    normalizeRange(rg) {
      let [keyBegin, keyEnd] = this.rangeKeys
      if(rg && rg[keyBegin] && rg[keyEnd]) {
        let tmBegin = Ti.Types.toTime(rg[keyBegin])
        let tmEnd   = Ti.Types.toTime(rg[keyEnd])
        if(tmBegin.valueInMilliseconds > tmEnd.valueInMilliseconds) {
          let tm = rg[keyBegin]
          rg[keyBegin] = tmEnd
          rg[keyEnd] = tmBegin
        }
      }
      return rg
    },
    //------------------------------------------------
    formatRangeValue(range) {
      let rg = _.assign({}, range)
      _.forEach(rg, (val, key)=>{
        // Time
        if(val) {
          rg[key] = val.toString()
        }
        // Zero
        else {
          rg[key] = Ti.Types.formatTime(0)
        }
      })
      return rg
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/input/timerange/ti-input-timerange.mjs", _M);
})();
//============================================================
// JOIN: ti/input/timerange/_com.json
//============================================================
Ti.Preload("ti/com/ti/input/timerange/_com.json", {
  "name" : "ti-input-timerange",
  "globally" : true,
  "template" : "./ti-input-timerange.html",
  "mixins" : ["./ti-input-timerange.mjs"],
  "components" : [
    "@com:ti/combo/input"]
});
//============================================================
// JOIN: ti/input/_com.json
//============================================================
Ti.Preload("ti/com/ti/input/_com.json", {
  "name" : "ti-input",
  "globally" : true,
  "template" : "./ti-input.html",
  "props" : "./ti-input-props.mjs",
  "mixins" : ["./ti-input.mjs"],
  "components" : []
});
//============================================================
// JOIN: ti/label/ti-label-props.mjs
//============================================================
(function(){
const _M = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "value" : null,
  "dict" : {
    type : [String, Ti.Dict],
    default : undefined
  },
  "trimed" : {
    type : Boolean,
    default : true
  },
  "format" : undefined,
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "href" : {
    type : String,
    default : undefined
  },
  "newTab" : {
    type : Boolean,
    default : false
  },
  "editable" : {
    type : Boolean,
    default : false
  },
  "hover" : {
    type : [Array, String],
    default : ()=>["suffixIcon"]
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "placeholder" : {
    type : String,
    default : "i18n:nil"
  },
  "autoI18n" : {
    type : Boolean,
    default : true
  },
  "prefixIcon" : {
    type : String,
    default : undefined
  },
  "prefixText" : {
    type : String,
    default : undefined
  },
  "suffixText" : {
    type : String,
    default : undefined
  },
  "suffixIcon" : {
    type : String,
    default : undefined
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width" : {
    type : [Number, String],
    default : undefined
  },
  "height" : {
    type : [Number, String],
    default : undefined
  },
  "valueMaxWidth" : {
    type : [Number, String],
    default : undefined
  }
}
Ti.Preload("ti/com/ti/label/ti-label-props.mjs", _M);
})();
//============================================================
// JOIN: ti/label/ti-label.html
//============================================================
Ti.Preload("ti/com/ti/label/ti-label.html", `<div class="ti-label"
  :class="TopClass"
  :style="TopStyle"
  @dblclick.left="OnDblClick">
  <!--prefix:icon-->
  <div v-if="ThePrefixIcon"
    class="as-icon at-prefix"
    :class="getHoverClass('prefixIcon')"
    @click.left="OnClickPrefixIcon">
    <ti-icon :value="ThePrefixIcon"/>
  </div>
  <!--prefix:text-->
  <div v-if="prefixText" 
    class="as-text at-prefix"
    :class="getHoverClass('prefixText')"
    @click.left="OnClickPrefixText">
    <span>{{prefixText|i18n}}</span>
  </div>
  <!--Text-->
  <div class="as-value"
    :style="ValueStyle"
    @click.left="OnClickValue">
    <!--Link-->
    <a v-if="href"
        :href="href"
        :taget="newTab ? '_blank' : undefined"
        @click.left.prevent>{{myDisplayText}}</a>
    <!--Normal Text-->
    <span v-else>{{myDisplayText}}</span>
  </div>
  <!--suffix:text-->
  <div v-if="suffixText"
    class="as-text at-suffix"
    :class="getHoverClass('suffixText')"
    @click.left="OnClickSuffixIcon">
    <span>{{suffixText|i18n}}</span>
  </div>
  <!--suffix:icon-->
  <div v-if="suffixIcon"
    class="as-icon at-suffix"
    :class="getHoverClass('suffixIcon')"
    @click.left="OnClickSuffixIcon">
    <ti-icon :value="suffixIcon"/>
  </div>
</div>`);
//============================================================
// JOIN: ti/label/ti-label.mjs
//============================================================
(function(){
const _M = {
  //////////////////////////////////////////
  data : ()=>({
    myDisplayIcon : undefined,
    myDisplayText : undefined,
    myDictValKey  : undefined
  }),
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-blank"   : !_.isNumber(this.TheValue) && _.isEmpty(this.TheValue),
        "is-nowrap"  : this.valueMaxWidth>0
      })
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //--------------------------------------
    ValueStyle() {
      return Ti.Css.toStyle({
        maxWidth : this.valueMaxWidth
      })
    },
    //--------------------------------------
    ThePrefixIcon() {
      if(null === this.prefixIcon)
        return null
      return this.myDisplayIcon || this.prefixIcon
    },
    //------------------------------------------------
    TheHover() {
      let map = {}
      let hos = _.concat(this.hover)
      for(let ho of hos) {
        if(ho) {
          map[ho] = true
        }
      }
      return map
    },
    //--------------------------------------
    TheValue() {
      let str = this.value
      // Auto trim
      if(this.trim && _.isString(str)) {
        return _.trim(str)
      }
      // Return it directly
      return str
    },
    //--------------------------------------
    Dict() {
      if(this.dict) {
        // Already Dict
        if(this.dict instanceof Ti.Dict) {
          this.myDictValKey = ".text"
          return this.dict
        }
        // Get back
        let {name, vKey} = Ti.DictFactory.explainDictName(this.dict)
        this.myDictValKey = vKey || ".text"
        return Ti.DictFactory.CheckDict(name)
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //------------------------------------------------
    isCanHover(hoverName) {
      return this.TheHover[hoverName] ? true : false
    },
    //------------------------------------------------
    getHoverClass(hoverName) {
      let canHover = this.isCanHover(hoverName)
      return {
        "can-hover" : canHover,
        "for-look"  : !canHover,
        "is-prefix-icon-hover" : "prefixIcon" == hoverName
      }
    },
    //--------------------------------------
    OnDblClick() {
      if(this.editable) {
        Ti.Be.EditIt(this.$el, {
          text: this.TheValue,
          ok : (newVal)=> {
            this.$notify("change", newVal)
          }
        })
      }
    },
    //------------------------------------------------
    OnClickPrefixIcon() {
      this.$notify("prefix:icon")
    },
    //------------------------------------------------
    OnClickPrefixText() {
      this.$notify("prefix:text")
    },
    //------------------------------------------------
    OnClickValue() {
      this.$notify("click:value")
    },
    //------------------------------------------------
    OnClickSuffixIcon() {
      this.$notify("suffix:icon")
    },
    //------------------------------------------------
    OnClickSuffixText() {
      this.$notify("suffix:text")
    },
    //--------------------------------------
    async evalDisplay(val) {
      // By Dict Item
      if(this.Dict) {
        let it = await this.Dict.getItem(val)
        if(it) {
          this.myDisplayIcon = this.Dict.getIcon(it)
          val = this.Dict.getBy(this.myDictValKey, it, val)
        } else {
          this.myDisplayIcon = null
        }
      }
      // Number
      if(_.isNumber(val)) {
        if(this.format) {
          return Ti.Types.toStr(val, this.format)
        }
        return val
      }
      // Collection
      if(_.isArray(val) || _.isPlainObject(val)) {
        return JSON.stringify(val, null, '  ')
      }
      // Normal value
      if(Ti.Util.isNil(val)) {
        return Ti.I18n.text(this.placeholder)
      }
      // Date
      if(_.isDate(val)) {
        return Ti.Types.toStr(val, this.format)
      }
      // Auto format
      if(this.format) {
        val = Ti.Types.toStr(val, this.format)
      }
      // Return & auto-i18n
      return this.autoI18n 
              ? Ti.I18n.text(val)
              : val
    },
    //--------------------------------------
    async reloadMyDisplay() {
      this.myDisplayIcon = null
      this.myDisplayText = await this.evalDisplay(this.TheValue)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "value" : {
      handler   : "reloadMyDisplay",
      immediate : true
    }
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/ti/label/ti-label.mjs", _M);
})();
//============================================================
// JOIN: ti/label/_com.json
//============================================================
Ti.Preload("ti/com/ti/label/_com.json", {
  "name" : "ti-label",
  "globally" : true,
  "template" : "./ti-label.html",
  "props" : "./ti-label-props.mjs",
  "mixins" : ["./ti-label.mjs"]
});
//============================================================
// JOIN: ti/label/_hmaker.json
//============================================================
Ti.Preload("ti/com/ti/label/_hmaker.json", {
  "icon"   : "im-tag",
  "title"  : "i18n:com-label",
  "scenes" : ["desktop", "tablet", "phone"],
  "editComType" : "ti-form",
  "editComConf" : {
    "mode" : "tab",
    "data" : "=comConf",
    "fields" : [{
        "title": "i18n:hmk-aspect",
        "fields": [{
            "title": "i18n:hmk-placeholder",
            "name": "placeholder",
            "comType": "ti-input"
          }, {
            "title": "i18n:hmk-autoI18n",
            "name": "autoI18n",
            "type": "Boolean",
            "defaultAs": true,
            "comType": "ti-toggle"
          }, {
            "title": "i18n:hmk-prefixIcon",
            "name": "prefixIcon",
            "comType": "ti-input-icon"
          }, {
            "title": "i18n:hmk-prefixText",
            "name": "prefixText",
            "comType": "ti-input"
          }, {
            "title": "i18n:hmk-suffixIcon",
            "name": "suffixIcon",
            "comType": "ti-input-icon"
          }, {
            "title": "i18n:hmk-suffixText",
            "name": "suffixText",
            "comType": "ti-input"
          }]
      }, {
        "title": "i18n:hmk-behavior",
        "fields": [{
            "title": "i18n:hmk-href",
            "name": "href",
            "comType": "ti-input"
          }, {
            "title": "i18n:hmk-newTab",
            "name": "newTab",
            "type": "Boolean",
            "hidden" : {
              "href": "NoEmpty"
            },
            "comType": "ti-toggle"
          }, {
            "title": "i18n:hmk-breakLine",
            "name": "breakLine",
            "type": "Boolean",
            "defaultAs": true,
            "comType": "ti-toggle"
          }, {
            "title": "i18n:hmk-editable",
            "name": "editable",
            "type": "Boolean",
            "comType": "ti-toggle"
          }]
      }, {
      "title": "i18n:hmk-data",
      "fields": [{
          "title": "i18n:hmk-value",
          "name": "value",
          "comType": "ti-input"
        }, {
          "title": "i18n:hmk-dict",
          "name": "dict",
          "comType": "ti-input"
        }, {
          "title": "i18n:hmk-trimed",
          "name": "trimed",
          "type": "Boolean",
          "comType": "ti-toggle"
        }, {
          "title": "i18n:hmk-format",
          "name": "format",
          "comType": "ti-input",
          "comConf": {
            "autoJsValue": true
          }
        }]
    }, {
      "title": "i18n:hmk-measure",
      "fields": [{
          "title": "i18n:hmk-width",
          "name": "width",
          "comType": "ti-input"
        }, {
          "title": "i18n:hmk-height",
          "name": "height",
          "comType": "ti-input"
        }, {
          "title": "i18n:hmk-valueMaxWidth",
          "name": "valueMaxWidth",
          "comType": "ti-input"
        }]
    }]
  }
});
//============================================================
// JOIN: ti/lbs/map/baidu/ti-lbs-map-baidu.html
//============================================================
Ti.Preload("ti/com/ti/lbs/map/baidu/ti-lbs-map-baidu.html", `<div class="ti-lbs-map by-baidu ti-fill-parent">
  <div ref="arena" class="map-arena ti-fill-parent"></div>
</div>`);
//============================================================
// JOIN: ti/lbs/map/baidu/ti-lbs-map-baidu.mjs
//============================================================
(function(){
//
// The coordinate base on BD09
//
const _M = {
  /////////////////////////////////////////
  inheritAttrs : false,
  /////////////////////////////////////////
  data : ()=>({
    valueMarker : null
  }),
  /////////////////////////////////////////
  props : {
    // @see http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference_3_0.html#a5b0
    // ROADMAP    : BMAP_NORMAL_MAP
    // SATELLITE  : BMAP_SATELLITE_MAP
    // HYBRID     : BMAP_HYBRID_MAP
    "mapType" : {
      type : String,
      default : "ROADMAP"
    },
    // Map center : {"lat":39.9042, "lng":116.4074}
    // If null, it will auto sync with the value
    "center" : {
      type : Object,
      // default : ()=>({
      //   {"lat":39.9042, "lng":116.4074}
      // })
      default : null
    },
    "zoom" : {
      type : Number,
      default : 8
    },
    // A LatLng Point in map, which react the changing
    "value" : {
      type : Object,
      default : null
    },
    "valueOptions" : {
      type : Object,
      default : ()=>({
        icon : null,
        title : "UserMarker",
        // DOWN|BOUNCE|DROP|UP
        animation : "DOWN"
      })
    }
  },
  //////////////////////////////////////////
  computed : {
    //-------------------------------------
    mapCenterLatLng() {
      if(!_.isEmpty(this.center)) {
        return this.genLatLng(this.center)
      }
      if(!_.isEmpty(this.value)) {
        return this.genLatLng(this.value)
      }
      // Default center to beijing
      return this.genLatLng({lat:39.9042, lng:116.4074})
    },
    //-------------------------------------
    mapTypeId() {
      return ({
        "ROADMAP"   : BMAP_NORMAL_MAP,
        "SATELLITE" : BMAP_SATELLITE_MAP,
        "HYBRID"    : BMAP_HYBRID_MAP
      })[this.mapType] || BMAP_NORMAL_MAP
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //-------------------------------------
    genLatLng({lat, lng}={}) {
      return new BMap.Point(lng, lat)
    },
    //-------------------------------------
    drawValue() {
      let $map = this.__map
      let opt  = this.valueOptions

      // Guard the value
      if(!this.value)
        return

      let point = this.genLatLng(this.value);
      var marker = new BMap.Marker(point)
      $map.addOverlay(marker);

      this.valueMarker = marker
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "value" : function(){this.drawValue()}
  },
  //////////////////////////////////////////
  mounted : async function() {
    // Init Map
    let $map = new BMap.Map(this.$refs.arena, {
      mapType : this.mapTypeId
    })
    $map.centerAndZoom(this.mapCenterLatLng, this.zoom);
    $map.addControl(new BMap.MapTypeControl({
      mapTypes:[
              BMAP_NORMAL_MAP,
              BMAP_SATELLITE_MAP,
              BMAP_HYBRID_MAP
          ]}));	
    $map.enableScrollWheelZoom(true);
    // Store
    this.__map = $map
    // Draw Value
    this.drawValue()
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/ti/lbs/map/baidu/ti-lbs-map-baidu.mjs", _M);
})();
//============================================================
// JOIN: ti/lbs/map/baidu/_com.json
//============================================================
Ti.Preload("ti/com/ti/lbs/map/baidu/_com.json", {
  "name" : "ti-lbs-map-baidu",
  "globally" : true,
  "template" : "./ti-lbs-map-baidu.html",
  "mixins"   : ["./ti-lbs-map-baidu.mjs"],
  "components" : []
});
//============================================================
// JOIN: ti/lbs/map/tencent/ti-lbs-map-tencent.html
//============================================================
Ti.Preload("ti/com/ti/lbs/map/tencent/ti-lbs-map-tencent.html", `<div class="ti-lbs-map by-tencent ti-fill-parent">
  <div ref="arena" class="map-arena ti-fill-parent"></div>
</div>`);
//============================================================
// JOIN: ti/lbs/map/tencent/ti-lbs-map-tencent.mjs
//============================================================
(function(){
//
// The coordinate base on GCJ02
//
const _M = {
  /////////////////////////////////////////
  inheritAttrs : false,
  /////////////////////////////////////////
  data : ()=>({
    valueMarker : null
  }),
  /////////////////////////////////////////
  props : {
    // @see https://lbs.qq.com/javascript_v2/doc/maptypeid.html
    // ROADMAP | SATELLITE | HYBRID
    "mapType" : {
      type : String,
      default : "ROADMAP"
    },
    // Map center : {"lat":39.9042, "lng":116.4074}
    // If null, it will auto sync with the value
    "center" : {
      type : Object,
      // default : ()=>({
      //   {"lat":39.9042, "lng":116.4074}
      // })
      default : null
    },
    "zoom" : {
      type : Number,
      default : 8
    },
    // A LatLng Point in map, which react the changing
    "value" : {
      type : Object,
      default : null
    },
    "valueOptions" : {
      type : Object,
      default : ()=>({
        icon : null,
        title : "UserMarker",
        // DOWN|BOUNCE|DROP|UP
        animation : "DOWN"
      })
    }
  },
  //////////////////////////////////////////
  computed : {
    //-------------------------------------
    mapCenterLatLng() {
      if(!_.isEmpty(this.center)) {
        return this.genLatLng(this.center)
      }
      if(!_.isEmpty(this.value)) {
        return this.genLatLng(this.value)
      }
      // Default center to beijing
      return this.genLatLng({lat:39.9042, lng:116.4074})
    },
    //-------------------------------------
    mapTypeId() {
      return (qq.maps.MapTypeId[this.mapType]) 
             || qq.maps.MapTypeId.ROADMAP
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //-------------------------------------
    genLatLng({lat, lng}={}) {
      return new qq.maps.LatLng(lat, lng)
    },
    //-------------------------------------
    drawValue() {
      let $map = this.__map
      let opt  = this.valueOptions

      // Guard the value
      if(!this.value)
        return

      let llpos = this.genLatLng(this.value);

      var marker = new qq.maps.Marker({
        position: llpos,
        animation: qq.maps.MarkerAnimation[opt.animation],
        //设置显示Marker的地图
        map: $map,
        //设置Marker可拖动
        draggable: true,
        // //自定义Marker图标为大头针样式
        // icon: new qq.maps.MarkerImage(
        //     "https://open.map.qq.com/doc/img/nilt.png"),
        // //自定义Marker图标的阴影
        // shadow: new qq.maps.MarkerImage(
        //     "https://open.map.qq.com/doc/img/nilb.png"),
        //设置Marker标题，鼠标划过Marker时显示
        title: opt.title,
        //设置Marker的可见性，为true时可见,false时不可见
        visible: true,
      });

      this.valueMarker = marker
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "value" : function(){this.drawValue()}
  },
  //////////////////////////////////////////
  mounted : async function() {
    // Init Map
    let $map = new qq.maps.Map(this.$refs.arena, {
      zoom: this.zoom,
      center: this.mapCenterLatLng,
      mapTypeId: this.mapTypeId
    })
    // Store
    this.__map = $map
    // Draw Value
    this.drawValue()
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/ti/lbs/map/tencent/ti-lbs-map-tencent.mjs", _M);
})();
//============================================================
// JOIN: ti/lbs/map/tencent/_com.json
//============================================================
Ti.Preload("ti/com/ti/lbs/map/tencent/_com.json", {
  "name" : "ti-lbs-map-tencent",
  "globally" : true,
  "template" : "./ti-lbs-map-tencent.html",
  "mixins"   : ["./ti-lbs-map-tencent.mjs"],
  "components" : []
});
//============================================================
// JOIN: ti/lbs/map/ti-lbs-map.html
//============================================================
Ti.Preload("ti/com/ti/lbs/map/ti-lbs-map.html", `<div class="ti-lbs-map" 
  :class="topClass"
  :style="topStyle">
  <div class="map-con">
    <!--
      Map Main
    -->
    <div class="as-main">
      <component 
        :is="mapComType"
        v-bind="mapComConf"/>
    </div>
    <!--
      Map Info
    -->
    <div class="as-info">
      <div class="as-toggle" @click="fullScreen=!fullScreen">
        <ti-icon :value="toggleIcon"/>
      </div>
      <ul class="as-laln">
        <li><span>{{'lat'|i18n}}:</span><em>{{lalnCenter.lat|float(8)}}</em></li>
        <li><span>{{'lng'|i18n}}:</span><em>{{lalnCenter.lng|float(8)}}</em></li>
      </ul>
    </div>
  </div>
</div>`);
//============================================================
// JOIN: ti/lbs/map/ti-lbs-map.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  inheritAttrs : false,
  /////////////////////////////////////////
  data : ()=>({
    fullScreen : false
  }),
  /////////////////////////////////////////
  props : {
    "by" : {
      type : String,
      default : "tencent"
    },
    // @see https://lbs.qq.com/javascript_v2/doc/maptypeid.html
    // @see http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference_3_0.html#a5b0
    // ROADMAP | SATELLITE | HYBRID
    "mapType" : {
      type : String,
      default : "ROADMAP"
    },
    // Map center : {"lat":39.9042, "lng":116.4074}
    // If null, it will auto sync with the value
    "center" : {
      type : Object,
      // default : ()=>({
      //   {"lat":39.9042, "lng":116.4074}
      // })
      default : null
    },
    // Sometime, the lat/lng valued by integer
    // this prop defined how to translate them to float
    "autoFloat" : {
      type : Number,
      default : 10000000
    },
    // Map width
    "width" : {
      type : [String, Number],
      default : 400
    },
    // Map height
    "height" : {
      type : [String, Number],
      default : 400
    },
    "zoom" : {
      type : Number,
      default : 8
    },
    // The Coordinate System for input LatLng (center/value...)
    //  - WGS84 : Standard GPS 
    //  - BD09  : for Baidu Map
    //  - GCJ02 : (Mars) QQ/GaoDe/AliYun ...
    "coordinate" : {
      type : String,
      default : "WGS84"
    },
    // A LatLng Point in map, which react the changing
    "value" : {
      type : Object,
      default : null
    },
    // The layout which cover to the map
    // TODO think about it
    "layers" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //-------------------------------------
    topClass() {
      let klass = []
      if(this.fullScreen) {
        klass.push("is-fullscreen")
      }
      if(this.className) {
        klass.push(this.className)
      }
      return klass
    },
    //-------------------------------------
    topStyle() {
      if(!this.fullScreen) {
        return Ti.Css.toStyle({
          width  : this.width,
          height : this.height
        })
      }
    },
    //-------------------------------------
    toggleIcon() {
      return this.fullScreen
        ? "zmdi-fullscreen-exit"
        : "zmdi-fullscreen"
    },
    //-------------------------------------
    mapComType() {
      return `ti-lbs-map-${this.by}`
    },
    //-------------------------------------
    mapComConf() {
      return {
        "mapType" : this.mapType,
        "center"  : this.lalnCenter,
        "zoom"    : this.zoom,
        "value"   : this.lalnValue,
        "valueOptions" : this.valueOptions
      }
    },
    //-------------------------------------
    targetCoordinate() {
      return ({
        "tencent" : "GCJ02",
        "baidu"   : "BD09",
        "ali"     : "GCJ02"
      })[this.by] || "WGS84"
    },
    //-------------------------------------
    arenaStyle() {
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //-------------------------------------
    lalnValue() {
      if(!_.isEmpty(this.center)) {
        return this.genLatLng(this.center)
      }
      if(!_.isEmpty(this.value)) {
        return this.genLatLng(this.value)
      }
      // Default center to beijing
      return new qq.maps.LatLng({lat:39.9042, lng:116.4074})
    },
    //-------------------------------------
    lalnCenter() {
      if(!_.isEmpty(this.center)) {
        return this.genLatLng(this.center)
      }
      if(!_.isEmpty(this.value)) {
        return this.genLatLng(this.value)
      }
      // Default center to beijing
      return new qq.maps.LatLng({lat:39.9042, lng:116.4074})
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //-------------------------------------
    autoLatLng(val) {
      if(val > 360) {
        return val / this.autoFloat
      }
      return val
    },
    //-------------------------------------
    genLatLng({lat, lng}={}) {
      lat = this.autoLatLng(lat)
      lng = this.autoLatLng(lng)

      // Transform coordinate
      let from = this.coordinate
      let to   = this.targetCoordinate

      if(from == to) {
        return {lat, lng}
      }

      // find the trans-methods
      let methodName = `${from}_TO_${to}`

      // like `WGS84_TO_BD09` or `WGS84_TO_GCJ02`
      let fn = Ti.GPS[methodName]

      return fn(lat, lng)
    }
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/ti/lbs/map/ti-lbs-map.mjs", _M);
})();
//============================================================
// JOIN: ti/lbs/map/_com.json
//============================================================
Ti.Preload("ti/com/ti/lbs/map/_com.json", {
  "name" : "ti-lbs-map",
  "globally" : true,
  "template" : "./ti-lbs-map.html",
  "mixins"   : ["./ti-lbs-map.mjs"],
  "components" : [
    "./tencent/_com.json",
    "./baidu/_com.json"
  ]
});
//============================================================
// JOIN: ti/list/com/list-row/list-row.html
//============================================================
Ti.Preload("ti/com/ti/list/com/list-row/list-row.html", `<div class="list-row"
  :class="TopClass">
  <!--current actived row indicator-->
  <div class="row-actived-indicator"></div>
  <!-- Indents -->
  <div v-for="n in indent"
  class="row-indent"></div>
  <!--ICON: Handler-->
  <template v-if="icon">
    <ti-icon
      v-if="hasRealIcon"
        class="row-icon"
        :value="icon"
        @click.native.left.stop="OnClickIcon"/>
    <div v-else
      class="row-icon"></div>
  </template>
  <!--ICON: Checker-->
  <ti-icon v-if="checkable"
      class="row-checker"
      :value="theCheckIcon"
      @click.native.left.stop="OnClickChecker"/>
  <!-- Content -->
  <div
    class="row-con"
    @click.left="OnClickRow"
    @dblclick.left="OnDblClickRow"
    v-ti-activable>
    <component 
      v-for="(it, index) in myDisplayItems"
        :class="'item-'+index"
        :key="it.uniqueKey"
        :is="it.comType"
        v-bind="it.comConf"
        @change="onItemChanged(it, $event)"/>
  </div>

</div>`);
//============================================================
// JOIN: ti/list/com/list-row/list-row.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  ///////////////////////////////////////////////////
  data : ()=>({
    myDisplayItems : []
  }),
  ///////////////////////////////////////////////////
  props : {
    "indent" : {
      type : Number,
      default : 0
    },
    "icon" : {
      type : [Boolean, String],
      default : null
    },
    "display" : {
      type : Array,
      default : ()=>[]
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    TopClass() {
      return this.getListItemClass(`row-indent-${this.indent}`)
    },
    //-----------------------------------------------
    hasRealIcon() {
      return this.icon && _.isString(this.icon)
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    async evalMyDisplayItems() {
      let items = []
      // if(this.data && this.data.title && this.data.type) {
      //   console.log("evalCellDisplayItems", this.data)
      // }
      // Eval each items
      for(let displayItem of this.display) {
        let it = await this.evalDataForFieldDisplayItem({
            itemData : this.data, 
            displayItem, 
            vars : {
              "isCurrent" : this.isCurrent,
              "isChecked" : this.isChecked,
              "isChanged" : this.isChanged,
              "isActived" : this.isActived,
              "rowId"     : this.rowId
            }
        })
        if(it) {
          items.push(it)
        }
      }
      // Update and return
      this.myDisplayItems = items
    },
    //-----------------------------------------------
    onItemChanged({name,value}={}) {
      this.$notify("item:changed", {
        name, value,
        rowId : this.rowId,
        data  : this.data
      })
    },
    //-----------------------------------------------
    OnClickIcon($event) {
      this.$notify("icon", {
        rowId  : this.rowId,
        shift  : $event.shiftKey,
        toggle : ($event.ctrlKey || $event.metaKey)
      })
    },
    //--------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("ti-list-row", uniqKey)
      if(!_.isEmpty(this.rowToggleKey)){
        if(this.isRowToggleKey(uniqKey)) {
          this.onClickChecker({})
          return {prevent:true, stop:true, quit:true}
        }
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "display" : async function() {
      await this.evalMyDisplayItems()
    },
    "data" : async function() {
      //console.log("data changed")
      await this.evalMyDisplayItems()
    },
    "isCurrent" : async function() {
      await this.evalMyDisplayItems()
    },
    "isChecked" : async function() {
      await this.evalMyDisplayItems()
    }
  },
  ///////////////////////////////////////////////////
  mounted : async function() {
    await this.evalMyDisplayItems()
  }
  ///////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/list/com/list-row/list-row.mjs", _M);
})();
//============================================================
// JOIN: ti/list/com/list-row/_com.json
//============================================================
Ti.Preload("ti/com/ti/list/com/list-row/_com.json", {
  "name" : "list-row",
  "globally" : false,
  "template" : "./list-row.html",
  "methods"  : "@com:ti/support/field_display.mjs",
  "mixins" : [
    "@com:ti/support/list_item_mixins.mjs",
    "./list-row.mjs"]
});
//============================================================
// JOIN: ti/list/ti-list.html
//============================================================
Ti.Preload("ti/com/ti/list/ti-list.html", `<div class="ti-list"
  :class="TopClass"
  @click="OnClickTop"
  v-ti-activable>
  <!--
    Blank
  -->
  <ti-loading 
    v-if="isDataEmpty"
      class="nil-data"
      :class="'as-'+blankClass"
      v-bind="blankAs"/>
  <!--
    Show Items
  -->
  <template v-else>
    <list-row
      v-for="row in TheData"
        :key="row.id"
        :row-id="row.id"
        :index="row.index"
        :icon="row.icon"
        :indent="row.indent"
        :data="row.rawData"
        :display="DisplayItems"
        :current-id="theCurrentId"
        :checked-ids="theCheckedIds"
        :changed-id="changedId"
        :checkable="checkable"
        :selectable="selectable"
        :openable="openable"
        :row-toggle-key="TheRowToggleKey"
        :class-name="itemClassName"
        @checker="OnRowCheckerClick"
        @select="OnRowSelect"
        @open="OnRowOpen"/>
  </template>
</div>`);
//============================================================
// JOIN: ti/list/ti-list.mjs
//============================================================
(function(){
const _M = {
  //////////////////////////////////////////
  data : ()=>({
    myData : [],
  }),
  //////////////////////////////////////////
  props : {
    "iconBy" : {
      type : [String, Function],
      default : null
    },
    "indentBy" : {
      type : [String, Function],
      default : null
    },
    "itemClassName" : undefined,
    "display" : {
      type : [Object, String, Array],
      default : ()=>({
        key : "..",
        comType : "ti-label"
      })
    },
    "border" : {
      type : Boolean,
      default : true
    },
    "autoScrollIntoView" : {
      type : Boolean,
      default : true
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-hoverable"    : this.hoverable,
        "show-border"     : this.border
      })
    },
    //--------------------------------------
    getRowIndent() {
      if(_.isFunction(this.indentBy)) {
        return it => this.indentBy(it)
      }
      if(_.isString(this.indentBy)) {
        return it => _.get(it, this.indentBy)
      }
      return it => 0
    },
    //--------------------------------------
    getRowIcon() {
      if(_.isFunction(this.iconBy)) {
        return it => this.iconBy(it)
      }
      if(_.isString(this.iconBy)) {
        return it => _.get(it, this.iconBy)
      }
      return it => null
    },
    //--------------------------------------
    DisplayItems() {
      let diss = _.concat(this.display)
      // Prepare the return list
      let items = []
      // Loop each items
      for(let dis of diss) {
        let item = this.evalFieldDisplayItem(dis)
        if(item) {
          items.push(item)
        }
      }
      // Done
      return items
    },
    //--------------------------------------
    TheData() {
      return this.myData
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickTop($event) {
      if(this.cancelable) {
        // Click The body or top to cancel the row selection
        if(Ti.Dom.hasOneClass($event.target,
            'ti-list', 'list-item')) {
          this.cancelRow()
        }
      }
    },
    //--------------------------------------
    scrollCurrentIntoView() {
      if(this.autoScrollIntoView && this.myLastIndex>=0) {
        let [$first] = Ti.Dom.findAll(".list-row.is-current", this.$el)
        if($first) {
          let rect = Ti.Rects.createBy($first)
          let view = Ti.Rects.createBy(this.$el)
          if(!view.contains(rect)) {
            this.$el.scrollTop += rect.top - view.top
          }
        }
      }
    },
    //--------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("ti-list", uniqKey)
      if("ARROWUP" == uniqKey) {
        this.selectPrevRow({
          payload: {byKeyboardArrow: true}
        })
        this.scrollCurrentIntoView()
        return {prevent:true, stop:true, quit:true}
      }

      if("ARROWDOWN" == uniqKey) {
        this.selectNextRow({payload:{byKeyboardArrow:true}})
        this.scrollCurrentIntoView()
        return {prevent:true, stop:true, quit:true}
      }
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "data" : {
      handler : async function(newVal, oldVal){
        let isSame = _.isEqual(newVal, oldVal)
        if(!isSame) {
          //console.log("!!!list data changed", {newVal, oldVal})
          this.myData = await this.evalData((it)=>{
            it.icon = this.getRowIcon(it.item)
            it.indent = this.getRowIndent(it.item)
          })
        }
      },
      immediate : true
    }
  },
  //////////////////////////////////////////
  mounted : function() {
    if(this.autoScrollIntoView) {
      this.$nextTick(()=>{
        this.scrollCurrentIntoView()
      })
    }
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/ti/list/ti-list.mjs", _M);
})();
//============================================================
// JOIN: ti/list/_com.json
//============================================================
Ti.Preload("ti/com/ti/list/_com.json", {
  "name" : "ti-list",
  "globally" : true,
  "template" : "./ti-list.html",
  "props" : "@com:ti/support/list_props.mjs",
  "methods" : "@com:ti/support/field_display.mjs",
  "mixins" : [
    "@com:ti/support/list_mixins.mjs",
    "./ti-list.mjs"
  ],
  "components" : [
    "./com/list-row",
    "@com:ti/label"
  ]
});
//============================================================
// JOIN: ti/list/_hmaker.json
//============================================================
Ti.Preload("ti/com/ti/list/_hmaker.json", {
  "icon"   : "im-data",
  "title"  : "i18n:com-list",
  "screen" : ["desktop", "tablet"],
  "manual" : true,
  "tutorial" : true,
  "video" : true,
  "editComType" : "ti-form",
  "editComConf" : {
    "fields" : []
  }
});
//============================================================
// JOIN: ti/loading/ti-loading.html
//============================================================
Ti.Preload("ti/com/ti/loading/ti-loading.html", `<div class="ti-loading">
  <ti-icon class="as-icon" :value="icon"/>
  <div class="as-text">{{text|i18n}}</div>
</div>`);
//============================================================
// JOIN: ti/loading/ti-loading.mjs
//============================================================
(function(){
const _M = {
  props : {
    icon : {
      type : String,
      default : "fas-spinner fa-spin"
    },
    text : {
      type : String,
      default : "i18n:loading"
    }
  }
}
Ti.Preload("ti/com/ti/loading/ti-loading.mjs", _M);
})();
//============================================================
// JOIN: ti/loading/_com.json
//============================================================
Ti.Preload("ti/com/ti/loading/_com.json", {
  "name" : "ti-loading",
  "globally" : true,
  "template" : "./ti-loading.html",
  "mixins" : ["./ti-loading.mjs"]
});
//============================================================
// JOIN: ti/logging/ti-logging.html
//============================================================
Ti.Preload("ti/com/ti/logging/ti-logging.html", `<div class="ti-logging"
  :class="TopClass"
  :style="TopStyle">
  <pre ref="pre"><div 
    v-for="(line, index) in lines"
      :data-index="index"
      >{{line || '&nbsp;'}}</div></pre>    
</div>`);
//============================================================
// JOIN: ti/logging/ti-logging.mjs
//============================================================
(function(){
const _M = {
  props : {
    "lines" : {
      type : Array,
      default : ()=>[]
    },
    "width" : {
      type : [Number, String],
      default : null
    },
    "height" : {
      type : [Number, String],
      default : null
    }
  },
  computed: {
    TopClass() {
      return this.getTopClass()
    },
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    }
  },
  methods: {
    scrollToBottom() {
      let $pre = this.$refs.pre
      $pre.scrollTop = $pre.scrollHeight
    }
  },
  watch: {
    "lines": function() {
      //console.log(this.lines.length)
      this.$nextTick(()=>{
        this.scrollToBottom()
      })
    }
  }
}
Ti.Preload("ti/com/ti/logging/ti-logging.mjs", _M);
})();
//============================================================
// JOIN: ti/logging/_com.json
//============================================================
Ti.Preload("ti/com/ti/logging/_com.json", {
  "name" : "ti-logging",
  "globally" : true,
  "template" : "./ti-logging.html",
  "mixins" : ["./ti-logging.mjs"]
});
//============================================================
// JOIN: ti/media/binary/ti-media-binary.html
//============================================================
Ti.Preload("ti/com/ti/media/binary/ti-media-binary.html", `<div class="ti-media-binary">
  <div class="tob-icon">
    <ti-icon v-if="icon" :value="icon" size="1.28rem"/>
  </div>
  <div class="tob-title">
    {{title}}
  </div>
  <div class="tob-actions">
    <a :href="src">
      <ti-icon value="download"/>
      <span>{{'download'|i18n}}</span>
    </a>
  </div>
</div>`);
//============================================================
// JOIN: ti/media/binary/ti-media-binary.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  props : {
    "icon" : {
      type : [String, Object],
      default : null
    },
    "title" : {
      type : String,
      default : null
    },
    "src" : {
      type : String,
      default : null
    },
    "width" : {
      type : [String, Number],
      default : ""
    },
    "height" : {
      type : [String, Number],
      default : ""
    }
  },
  computed : {
    
  },
  methods : {
    
  }
}
Ti.Preload("ti/com/ti/media/binary/ti-media-binary.mjs", _M);
})();
//============================================================
// JOIN: ti/media/binary/_com.json
//============================================================
Ti.Preload("ti/com/ti/media/binary/_com.json", {
  "name" : "ti-media-binary",
  "globally" : true,
  "template" : "./ti-media-binary.html",
  "mixins" : ["./ti-media-binary.mjs"]
});
//============================================================
// JOIN: ti/media/image/ti-media-image.html
//============================================================
Ti.Preload("ti/com/ti/media/image/ti-media-image.html", `<div class="ti-media-image" 
     :class="topClass"
     :style="topStyle"
     :fit-mode="fitMode"
     v-drag-off>
  <div class="as-con" ref="con">
    <img ref="the_image"
      :src="src"
      :style="theImageStyle"
      @load="onImageLoaded"
      @dblclick.stop="onToggleImageFitMode">
  </div>
</div>`);
//============================================================
// JOIN: ti/media/image/ti-media-image.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////
  inheritAttrs : false,
  ///////////////////////////////////
  data: ()=>({
    naturalWidth  : -1,
    naturalHeight : -1,
    viewportWidth  : -1,
    viewportHeight : -1,
    fitMode  : "contain",
    imgLoading : true,
    inViewport : false
  }),
  ///////////////////////////////////
  props : {
    "src" : {
      type : String,
      default : null
    },
    "width" : {
      type : [String, Number],
      default : ""
    },
    "height" : {
      type : [String, Number],
      default : ""
    }
  },
  ///////////////////////////////////
  computed : {
    topClass() {
      return Ti.Css.mergeClassName({
        "as-fitmode-cover"   : this.fitMode=="cover",
        "as-fitmode-contain" : this.fitMode=="contain",
        "is-img-loading" : this.imgLoading,
        "is-in-viewport" : this.inViewport
      }, this.className)
    },
    topStyle() {
      return {
        width  : this.width, 
        height : this.height
      }
    },
    theImageStyle() {
      let css = {
        "visibility" : "hidden",
        "position"   : "relative"
      }
      // If ready, then resize to zoom
      if(this.naturalWidth > 0
        && this.naturalHeight > 0) {
        // Get the measure of viewport
        let viewport = Ti.Rects.create({
          top:0, left:0,
          width  : this.viewportWidth,
          height : this.viewportHeight
        })
        // Get the measure of image
        let r_img = Ti.Rects.create({
          top:2, left:2,
          width  : this.naturalWidth,
          height : this.naturalHeight
        })
        // Zoom it
        let r_im2 = r_img.zoomTo({
          width  : viewport.width, 
          height : viewport.height,
          mode   : this.fitMode
        })
        // mark
        this.inViewport = viewport.contains(r_im2, 2)
        // append to css
        css.width  = r_im2.width
        css.height = r_im2.height
        css.left = (viewport.width  - r_im2.width)  / 2
        css.top  = (viewport.height - r_im2.height) / 2
        css.visibility = "visible"
      }
      // done
      return Ti.Css.toStyle(css)
    }
  },
  ///////////////////////////////////
  methods : {
    onImageLoaded() {
      let $img = this.$refs.the_image
      if($img) {
        this.naturalWidth  = $img.naturalWidth
        this.naturalHeight = $img.naturalHeight
        this.imgLoading = false
      }
    },
    onResizeViewport() {
      let r_vpt = Ti.Rects.createBy(this.$refs.con)
      this.viewportWidth  = r_vpt.width
      this.viewportHeight = r_vpt.height
    },
    onToggleImageFitMode() {
      this.fitMode = ({
        "contain" : "cover",
        "cover"   : "contain"
      })[this.fitMode]
    }
  },
  ///////////////////////////////////
  mounted : function(){
    Ti.Viewport.watch(this, {resize : ()=>{
      this.onResizeViewport()
    }})
    this.onResizeViewport()
  },
  ///////////////////////////////////
  beforeDestroy : function(){
    Ti.Viewport.unwatch(this)
  }
  ///////////////////////////////////
}
Ti.Preload("ti/com/ti/media/image/ti-media-image.mjs", _M);
})();
//============================================================
// JOIN: ti/media/image/_com.json
//============================================================
Ti.Preload("ti/com/ti/media/image/_com.json", {
  "name" : "ti-media-image",
  "globally" : true,
  "template" : "./ti-media-image.html",
  "mixins" : ["./ti-media-image.mjs"]
});
//============================================================
// JOIN: ti/media/video/ti-media-video.html
//============================================================
Ti.Preload("ti/com/ti/media/video/ti-media-video.html", `<div class="ti-media-video"
    :class="topClass"
    :style="topStyle"
    v-drag-off>
    <video ref="the_video"
      :src="src"
      controls
      @loadeddata="onVideoLoaded"/>
    <div class="tov-loading" v-if="loading">
      <ti-loading/>
    </div>
</div>`);
//============================================================
// JOIN: ti/media/video/ti-media-video.mjs
//============================================================
(function(){
const resize = function(evt){
  this.doResizeVideo()
}
//-----------------------------------
const _M = {
  inheritAttrs : false,
  data: ()=>({
    naturalWidth  : -1,
    naturalHeight : -1,
    fitMode  : "none",
    loading : true
  }),
  props : {
    "src" : {
      type : String,
      default : null
    },
    "width" : {
      type : [String, Number],
      default : ""
    },
    "height" : {
      type : [String, Number],
      default : ""
    }
  },
  computed : {
    topClass() {
      return {
        "as-none"    : this.fitMode=="none",
        "as-contain" : this.fitMode=="contain",
        "as-loading" : this.loading
      }
    },
    topStyle() {
      return {
        width  : this.width, 
        height : this.height
      }
    }
  },
  methods : {
    onVideoLoaded() {
      let $video = this.$refs.the_video
      this.naturalWidth  = $video.videoWidth
      this.naturalHeight = $video.videoHeight
      //console.log(this.naturalWidth, this.naturalHeight)
      this.loading = false
      //$video.volume = 1
      this.doResizeVideo()
    },
    isContainsByViewport() {
      // Get the viewport
      let vpRect = Ti.Rects.createBy(this.$el)
      let imRect = Ti.Rects.create({
        ...vpRect.raw("tl"),
        width  : this.naturalWidth,
        height : this.naturalHeight
      })
      // console.log("vpRect", vpRect.toString())
      // console.log("imRect", imRect.toString())
      return vpRect.contains(imRect)
    },
    doResizeVideo() {
      // Image is in viewport
      if(this.isContainsByViewport()) {
        this.fitMode = "none"
      }
      // Image is too big, mark "cover"
      else {
        this.fitMode = "contain"
      }
    },
  },
  mounted : function(){
    Ti.Viewport.watch(this, {resize})
  },
  beforeDestroy : function(){
    Ti.Viewport.unwatch(this)
  }
}
Ti.Preload("ti/com/ti/media/video/ti-media-video.mjs", _M);
})();
//============================================================
// JOIN: ti/media/video/_com.json
//============================================================
Ti.Preload("ti/com/ti/media/video/_com.json", {
  "name" : "ti-media-video",
  "globally" : true,
  "template" : "./ti-media-video.html",
  "mixins" : ["./ti-media-video.mjs"]
});
//============================================================
// JOIN: ti/month/ti-month.html
//============================================================
Ti.Preload("ti/com/ti/month/ti-month.html", `<div class="ti-col-data as-month" 
  :class="topClass" 
  :style="topStyle">
  <ti-list v-for="list in theListGroup"
    :key="list.key"
    :data="list.data"
    :display="'text'"
    :current-id="list.currentId"
    :cancelable="false"
    @select="onListSelected(list.key, $event)"/>
</div>`);
//============================================================
// JOIN: ti/month/ti-month.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  props : {
    "value" : {
      type : [String, Number, Date],
      default : null
    },
    // the height of drop list
    "height" : {
      type : [Number, String],
      default : 200
    },
    "beginYear" : {
      type : [Number, String],
      default : 1970
    },
    "endYear" : {
      type : [Number, String],
      default : (new Date().getFullYear()+1)
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    topStyle() {
      return {
        "height" : Ti.Css.toSize(this.height)
      }
    },
    //------------------------------------------------
    theDate() {
      return Ti.Types.toDate(this.value, null)
    },
    //------------------------------------------------
    theListGroup() {
      return [
        this.createList("year",  
          this.beginYear*1, 
          this.endYear*1,
          this.theDate ? this.theDate.getFullYear() : null,
          {reverse:true}
        ),
        this.createList("month",
          0,
          12,
          this.theDate ? this.theDate.getMonth() : null,
          {getText: (val)=>{
            let abbr = Ti.DateTime.getMonthAbbr(val)
            return Ti.I18n.get(abbr)
          }}
        )
      ]
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    createList(key, fromVal, toVal, currentVal, {
      reverse=false,
      getText=(val)=>val
    }={}) {
      let list = {
        key,
        currentId : `R-${currentVal}`,
        data  : []
      }
      for(let i=fromVal; i<toVal; i++) {
        list.data.push({
          id : `R-${i}`,
          value : i,
          text  : getText(i)
        })
      }
      if(reverse) {
        list.data.reverse()
      }
      return list
    },
    //------------------------------------------------
    onListSelected(key, {current}={}) {
      let val = _.get(current, "value") || 0

      let theDate = this.theDate || new Date()

      let d = ({
        "month" : (m)=>{
          return new Date(theDate.getFullYear(), m)
        },
        "year" : (y)=>{
          return new Date(y, theDate.getMonth())
        }
      })[key](val)

      this.$notify("change", d)
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/month/ti-month.mjs", _M);
})();
//============================================================
// JOIN: ti/month/_com.json
//============================================================
Ti.Preload("ti/com/ti/month/_com.json", {
  "name" : "ti-month",
  "globally" : true,
  "template" : "./ti-month.html",
  "mixins" : ["./ti-month.mjs"],
  "components" : ["@com:ti/list"]
});
//============================================================
// JOIN: ti/obj/creation/ti-obj-creation.html
//============================================================
Ti.Preload("ti/com/ti/obj/creation/ti-obj-creation.html", `<div class="ti-obj-creation">
  <div class="toc-types"
    v-if="hasTypes">
    <ul>
      <li v-if="freeCreate"
        @click="setCurrentType(null)">
        <span class="ti-icon"></span>
        <span class="ti-text">{{'toc-auto-type'|i18n}}</span>
      </li>
      <li v-for="tp of types"
        :class="getTypeItemClassName(tp)"
        @click="setCurrentType(tp)">
        <ti-icon :value="tp.icon"/>
        <span class="ti-text">{{tp.text}}</span>
        <em v-if="'DIR' != tp.race">(*.{{tp.name}})</em>
      </li>
    </ul>
  </div>
  <div class="toc-main">
    <div v-if="hasCurrentType"
      class="toc-info">
      <div class="toc-thumb">
        <ti-icon :value="currentType.thumb"/>
      </div>
      <div class="toc-text">{{currentType.text}}</div>
      <div v-if="!currentIsDir"
        class="toc-name">*.{{currentType.name}}</div>
      <div class="toc-brief"
        v-if="currentType.brief">{{currentType.brief}}</div>
    </div>
    <div v-else
      class="toc-free">
      <span>{{'toc-free'|i18n}}</span>
    </div>
    <div class="toc-input">
      <input
        ref="input" 
        :value="value.name"
        :placeholder="'toc-tip'|i18n" 
        @change="onChange" 
        spellcheck="false">
    </div>
  </div>
</div>`);
//============================================================
// JOIN: ti/obj/creation/ti-obj-creation.mjs
//============================================================
(function(){
const _M = {
  props : {
    "types" : {
      type : Array,
      default : ()=>[]
    },
    "value" : {
      type : Object,
      default : ()=>({
        name : "",
        type : "",
        race : ""
      })
    },
    "trimed" : {
      type : Boolean,
      default : true
    },
    "freeCreate" : {
      type : Boolean,
      default : false
    }
  },
  computed : {
    hasTypes() {
      return !_.isEmpty(this.types)
    },
    currentIsDir(){
      return 'DIR' == this.value.race
    },
    hasCurrentType() {
      return this.value.type && this.value.race
    },
    currentType() {
      for(let tp of this.types) {
        if(tp.name == this.value.type){
          return tp
        }
      }
    }
  },
  methods : {
    isCurrent(tp) {
      return this.value.type == tp.name
    },
    getTypeItemClassName(tp) {
      if(this.isCurrent(tp)){
        return "as-current"
      }
      return ""
    },
    setCurrentType(tp){
      if(tp) {
        this.value.type = tp.name
        this.value.race = tp.race
      } else {
        this.value.type = ""
        this.value.race = ""
      }
      this.$notify("change", this.value)
    },
    onChange() {
      let name = this.$refs.input.value
      if(this.trimed) {
        name = _.trim(name)
      }
      this.value.name = name

      if('DIR'!=this.value.race 
        && this.value.type
        && this.value.name){
        let suffix = `.${this.value.type}`
        if(!this.value.name.endsWith(suffix)){
          let majorName = Ti.Util.getMajorName(this.value.name)
          this.value.name = majorName + suffix
        }
      }

      this.$notify("change", this.value)
    }
  },
  mounted : function(){
    if(this.hasTypes) {
      this.setCurrentType(this.types[0])
    }
    this.$refs.input.focus()
  }
}
Ti.Preload("ti/com/ti/obj/creation/ti-obj-creation.mjs", _M);
})();
//============================================================
// JOIN: ti/obj/creation/_com.json
//============================================================
Ti.Preload("ti/com/ti/obj/creation/_com.json", {
  "name" : "ti-obj-creation",
  "globally" : true,
  "i18n" : "@i18n:ti-obj-creation",
  "template" : "./ti-obj-creation.html",
  "mixins" : ["./ti-obj-creation.mjs"]
});
//============================================================
// JOIN: ti/obj/thumb/ti-obj-thumb.html
//============================================================
Ti.Preload("ti/com/ti/obj/thumb/ti-obj-thumb.html", `<div class="ti-obj-thumb" 
    :class="TopClass">
  <!--
    Preview && Process Bar
  -->
  <header>
    <!--Preview Part-->
    <div class="as-preview">
      <!-- Local Image -->
      <template v-if="isLocalImage">
        <img ref="localImage" is-local-file>
      </template>
      <!-- Local File -->
      <template v-else-if="isLocalFile">
        <ti-icon :value="LocalFileIcon"/>
      </template>
      <!-- Remote Image -->
      <template v-else-if="'image'==preview.type">
        <img :src="preview.value">
      </template>
      <!-- Icon -->
      <template v-else>
        <ti-icon :value="preview"/>
      </template>
      <!--Badge-->
      <template v-if="badges">
        <div v-if="badges.NW" class="as-badge at-nw"><ti-icon :value="badges.NW"/></div>
        <div v-if="badges.NE" class="as-badge at-ne"><ti-icon :value="badges.NE"/></div>
        <div v-if="badges.SW" class="as-badge at-sw"><ti-icon :value="badges.SW"/></div>
        <div v-if="badges.SE" class="as-badge at-se"><ti-icon :value="badges.SE"/></div>
      </template>
    </div>
    <!--Process bar-->
    <div v-if="isShowProgress"
      class="as-progress ti-progress-bar">
      <span class="bar-tip">{{ProgressTip}}</span>
      <b class="bar-outer">
        <em class="bar-inner" 
            :style="ProgressStyle"></em>
      </b>
    </div>
  </header>
  <!--
    Status Mask
  -->
  <section class="as-status" v-if="status">
    <ti-icon 
      :value="status"
      font-size="2em"
      width="3em"
      height="3em"/>
  </section>
  <!--
    Footer for item title text
  -->
  <footer v-if="showFooter">
    <div class="as-title">
      <a v-if="hasHref"
        :href="TheHref"
        @click.prevent>{{title}}</a>
      <span v-else>{{title}}</span>
    </div>
  </footer>
</div>`);
//============================================================
// JOIN: ti/obj/thumb/ti-obj-thumb.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////////
  props : {
    index : {
      type : Number,
      default : -1
    },
    id : {
      type : String,
      default : null
    },
    // The text to present the object
    title : {
      type : String,
      default : null
    },
    // The URL of thumb
    preview : {
      type : [String, Object],
      default : "broken_image"
    },
    href : {
      type : String,
      default : null
    },
    status : {
      type : [String, Object],
      default : null
    },
    progress : {
      type : Number,
      default : -1
    },
    visibility : {
      type : String,
      default : "show"  // `show|weak|hide`
    },
    // true - alwasy show the footer part
    showFooter : {
      type : Boolean,
      default : true
    },
    badges : {
      type : Object,
      default: ()=>({
        "NW" : null,
        "NE" : null,
        "SW" : null,
        "SE" : null
      })
    }
  },
  ////////////////////////////////////////////////
  watch : {
    "preview" : function() {
      this.renderLocalFile()
    }
  },
  ////////////////////////////////////////////////
  computed : {
    //--------------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-hide" : ('hide' == this.visibility),
        "is-weak" : ('weak' == this.visibility)
      }, ()=>this.status ? `is-status-${this.status}` : null)
    },
    //--------------------------------------------
    PreviewType() {
      return _.get(this.preview, "type") || "auto"
    },
    //--------------------------------------------
    isLocalFile() {
      return "localFile" == this.PreviewType
    },
    //--------------------------------------------
    isLocalImage() {
      return this.isLocalFile
        && /^image\//.test(this.LocalFile.type)
    },
    //--------------------------------------------
    LocalFile() {
      if(this.isLocalFile) {
        return this.preview.value
      }
    },
    //--------------------------------------------
    LocalFileIcon() {
      if(this.isLocalFile) {
        let file = this.LocalFile
        let oF = {
          type : Ti.Util.getSuffixName(file.name),
          mime : file.type,
          race : Ti.Util.isNil(file.type) ? "DIR" : "FILE"
        }
        return Ti.Icons.get(oF)
      }
    },
    //--------------------------------------------
    isShowProgress() {
      return this.progress>=0;
    },
    //--------------------------------------------
    ProgressTip() {
      return Ti.S.toPercent(this.progress, {fixed:1, auto:false})
    },
    //--------------------------------------------
    ProgressStyle() {
      return {width:this.ProgressTip}
    },
    //--------------------------------------------
    hasHref() {
      return this.href ? true : false
    },
    //--------------------------------------------
    TheHref() {
      return encodeURI(this.href)
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  methods : {
    //--------------------------------------------
    renderLocalFile() {
      //console.log(this.LocalFile)
      if(this.isLocalImage) {
        let reader = new FileReader();
        reader.onload = (evt)=>{
          if(this.$refs.localImage) {
            this.$refs.localImage.src = evt.target.result
          }
        }
        reader.readAsDataURL(this.preview.value);
      }
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  mounted : function(){
    this.renderLocalFile()
  }
  ////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/obj/thumb/ti-obj-thumb.mjs", _M);
})();
//============================================================
// JOIN: ti/obj/thumb/_com.json
//============================================================
Ti.Preload("ti/com/ti/obj/thumb/_com.json", {
  "name" : "ti-obj-thumb",
  "globally" : true,
  "template" : "./ti-obj-thumb.html",
  "mixins" : ["./ti-obj-thumb.mjs"]
});
//============================================================
// JOIN: ti/obj/tile/ti-obj-tile.html
//============================================================
Ti.Preload("ti/com/ti/obj/tile/ti-obj-tile.html", `<div class="ti-obj-tile" 
    :class="topClass">
  <!--
    Preview Image
  -->
  <div class="as-preview">
    <a v-if="hasHref"
      :href="href"
      @click="onClick"
      ><ti-icon 
        :value="preview"
        :height="previewHeight"/></a>
    <ti-icon v-else
      :value="preview"
      :height="previewHeight"/>
  </div>
  <!--
    Title
  -->
  <div class="as-title">
    <a v-if="hasHref"
      :href="href"
      @click="onClick"
    >{{title}}</a>
    <!--
      Without Href
    -->
    <span v-else>{{title}}</span>
  </div>
  <!--
    Footer
  -->
  <div v-if="hasBrief"
    class="as-brief">
    <span>{{brief}}</span>
  </div>
</div>`);
//============================================================
// JOIN: ti/obj/tile/ti-obj-tile.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  ////////////////////////////////////////////////
  props : {
    "index" : {
      type : Number,
      default : -1
    },
    "id" : {
      type : String,
      default : null
    },
    // The URL of thumb
    "preview" : {
      type : [Object, String],
      default : ()=>({
        type : "font",
        value : "broken_image"
      })
    },
    // The preview part height
    "previewHeight" : {
      type : [String, Number],
      default : null
    },
    "hover" : {
      type : String,
      default : null,
      validator : function(val) {
        return !val || /^(up|down|left|right|zoom)$/.test(val)
      }
    },
    // The text to present the object
    "title" : {
      type : String,
      default : null
    },
    "href" : {
      type : String,
      default : null
    },
    // true - alwasy show the footer part
    "brief" : {
      type : String,
      default : null
    },
    "emitBy" : {
      type : Object,
      default : ()=>({
        evantName : null,
        payload : {}
      })
    }
  },
  ////////////////////////////////////////////////
  computed : {
    topClass() {
      let klass =[this.className]
      if(this.hover) {
        klass.push("on-hover")
        klass.push(`on-hover-${this.hover}`)
      }
      return klass
    },
    hasHref() {
      return this.href ? true : false
    },
    hasBrief() {
      return this.brief ? true : false
    }
  },
  ////////////////////////////////////////////////
  methods : {
    //--------------------------------------------
    onClick(evt) {
      // Prevent default and emit event
      if(this.emitBy.eventName) {
        evt.preventDefault()
        let eventName = this.emitBy.eventName
        let payload = this.emitBy.payload || {}
        //............................
        console.log("onClick", eventName, payload)
        this.$notify(eventName, payload)
      }
    }
    //--------------------------------------------
  }
  ////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/obj/tile/ti-obj-tile.mjs", _M);
})();
//============================================================
// JOIN: ti/obj/tile/_com.json
//============================================================
Ti.Preload("ti/com/ti/obj/tile/_com.json", {
  "name" : "ti-obj-tile",
  "globally" : true,
  "template" : "./ti-obj-tile.html",
  "mixins" : ["./ti-obj-tile.mjs"]
});
//============================================================
// JOIN: ti/paging/jumper/ti-paging-jumper.html
//============================================================
Ti.Preload("ti/com/ti/paging/jumper/ti-paging-jumper.html", `<div class="ti-paging-jumper">
  <div 
    class="pj-btn"
    :class="getBtnClass(1)"
    @click="OnJumpTo(1)">
      <ti-icon value="zmdi-skip-previous"/>
      <span class="it-text">{{'paging-first'|i18n}}</span></div>
  <div 
    class="pj-btn"
    :class="getBtnClass(value.pn-1)"
    @click="OnJumpTo(value.pn-1)">
      <ti-icon value="zmdi-chevron-left"/>
      <span class="it-text">{{'paging-prev'|i18n}}</span></div>
  <div 
    class="pj-current"
    :class="PageNumberClass"
    @click="OnClickCurrent">
    <b>{{value.pn}}</b>
  </div>
  <div 
    class="pj-btn"
    :class="getBtnClass(value.pn+1)"
    @click="OnJumpTo(value.pn+1)">
      <span class="it-text">{{'paging-next'|i18n}}</span>
      <ti-icon value="zmdi-chevron-right"/></div>
  <div 
    class="pj-btn"
    :class="getBtnClass(value.pgc)"
    @click="OnJumpTo(value.pgc)">
      <span class="it-text">{{'paging-last'|i18n}}</span>
      <ti-icon value="zmdi-skip-next"/></div>
  <div
    class="pj-sum"
    :class="SumClass"
    @click="OnClickSum">{{'paging-sum'|i18n(value)}}</div>
</div>`);
//============================================================
// JOIN: ti/paging/jumper/ti-paging-jumper.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////
  props : {
    "value" : {
      type : Object,
      default : ()=>({
        pn : 0,     // Page Number
        pgsz : 0,   // PageSize
        pgc : 0,    // page count
        sum : 0,    // Total
        count : 0   // Record in page
      })
    }
  },
  ///////////////////////////////////////////
  computed : {
    PageNumberClass() {
      return this.value.pgc > 1
              ? "is-enabled"
              : "is-disabled"
    },
    SumClass() {
      return this.value.pgsz > 0
              ? "is-enabled"
              : "is-disabled"
    }
  },
  ///////////////////////////////////////////
  methods : {
    //--------------------------------------
    isInvalidPageNumber(pageNumber) {
      return pageNumber <=0 
        || pageNumber > this.value.pgc
        || pageNumber == this.value.pn
    },
    //--------------------------------------
    getBtnClass(pageNumber) {
      if(this.isInvalidPageNumber(pageNumber)) {
        return "is-disabled"
      }
      return "is-enabled"
    },
    //--------------------------------------
    OnJumpTo(pageNumber) {
      if(!this.isInvalidPageNumber(pageNumber)) {
        this.$notify("change", {
          pn   : pageNumber, 
          pgsz : this.value.pgsz
        })
      }
    },
    //--------------------------------------
    async OnClickCurrent() {
      // No Necessary
      if(this.value.pgc <= 1)
        return
      // Ask new pageNumber
      let msg = Ti.I18n.getf("paging-change-pn", this.value)
      let str = await Ti.Prompt(msg, {
        value : this.value.pn
      })
      // NoChange
      if(!str || str == this.value.pn)
        return
      // verify the str
      let pn = parseInt(str)
      if(isNaN(pn) || pn<=0 || pn>this.value.pgc) {
        msg = Ti.I18n.getf("paging-change-pn-invalid", this.value)
        await Ti.Alert(msg, {
          title : "i18n:warn",
          type  : "warn",
          icon  : "im-warning",
          width : 420
        })
        return 
      }
      // 通知修改
      this.$notify("change", {
        pn   : pn, 
        pgsz : this.value.pgsz
      })
    },
    //--------------------------------------
    async OnClickSum(){
      let msg = Ti.I18n.getf("paging-change-pgsz", this.value)
      let str = await Ti.Prompt(msg, {
        value : this.value.pgsz
      })
      // NoChange
      if(!str || str == this.value.pgsz)
        return
      // verify the str
      let pgsz = parseInt(str)
      if(isNaN(pgsz) || pgsz<=0) {
        await Ti.Alert("i18n:paging-change-pgsz-invalid", {
          title : "i18n:warn",
          type  : "warn",
          icon  : "im-warning",
          width : 420
        })
        return 
      }
      // 通知修改
      this.$notify("change:pgsz", pgsz)
      this.$notify("change", {
        pn   : 1, 
        pgsz : pgsz
      })
    }
  }
  ///////////////////////////////////////////
}
Ti.Preload("ti/com/ti/paging/jumper/ti-paging-jumper.mjs", _M);
})();
//============================================================
// JOIN: ti/paging/jumper/_com.json
//============================================================
Ti.Preload("ti/com/ti/paging/jumper/_com.json", {
  "name" : "ti-paging-jumper",
  "globally" : true,
  "template" : "./ti-paging-jumper.html",
  "mixins" : ["./ti-paging-jumper.mjs"]
});
//============================================================
// JOIN: ti/roadblock/ti-roadblock.html
//============================================================
Ti.Preload("ti/com/ti/roadblock/ti-roadblock.html", `<div class="ti-roadblock">
  <div class="as-main">
    <div v-if="icon" class="as-icon">
      <ti-icon :value="icon"/>
    </div>
    <div v-if="text" class="as-text">
      <span>{{text | i18n}}</span>
    </div>
  </div>
</div>`);
//============================================================
// JOIN: ti/roadblock/ti-roadblock.mjs
//============================================================
(function(){
/***
 * In Building ....
 */
const _M = {
  inheritAttrs : false,
  /////////////////////////////////////////
  props : {
    "icon" : {
      type: String,
      default: "fas-exclamation-triangle"
    },
    "text" : {
      type: String,
      default: null
    }
  },
  //////////////////////////////////////////
  computed : {
    
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/ti/roadblock/ti-roadblock.mjs", _M);
})();
//============================================================
// JOIN: ti/roadblock/_com.json
//============================================================
Ti.Preload("ti/com/ti/roadblock/_com.json", {
  "name" : "ti-roadblock",
  "globally" : true,
  "template" : "./ti-roadblock.html",
  "mixins"   : ["./ti-roadblock.mjs"],
  "components" : []
});
//============================================================
// JOIN: ti/session/badge/ti-session-badge.html
//============================================================
Ti.Preload("ti/com/ti/session/badge/ti-session-badge.html", `<div class="ti-session-badge"
  :class="TopClass">
  <!--
    Has Session, show account info
  -->
  <template v-if="hasSession">
    <!--Avatar-->
    <div v-if="hasAvatar"
      class="as-avatar">
      <img :src="myAvatar"/>
    </div>
    <!--User Icon-->
    <div v-else
      class="as-icon">
      <ti-icon :value="myIcon"/>
    </div>
    <!--User Name-->
    <div class="as-name">
      <!--Name Event-->
      <a
        v-if="nameEvent"
          @click.left="$notify(nameEvent)">{{myName}}</a>
      <!--Name display-->
      <span
        v-else>{{myName}}</span>
    </div>
    <!--Links-->
    <div v-for="li in theLinks"
      class="as-link">
      <!--Icon-->
      <ti-icon
        v-if="li.icon"
          class="it-icon"
          :value="li.icon"/>
      <!--Text-->
      <a
        @click.left="OnClickLink(li, $event)"
        :href="li.href"
        :target="li.newtab?'_blank':null">{{li.text|i18n}}</a>
    </div>
  </template>
  <!--
    Without session, show login link
  -->
  <template v-else>
    <div v-if="loginIcon"
      class="as-icon">
      <ti-icon :value="loginIcon"/>
    </div>
    <div class="as-link">
      <a @click="$notify(loginEvent)">{{'login'|i18n}}</a>
    </div>
  </template>
</div>`);
//============================================================
// JOIN: ti/session/badge/ti-session-badge.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  props : {
    "me" : {
      type : Object,
      default : null
    },
    // Key to indicate Avatar existing
    // null - will not support avatar
    "avatarKey" : {
      type : String,
      default : null
    },
    // Avatar Source Template
    // null - will not support avatar
    "avatarSrc" : {
      type : String,
      default : null
    },
    "loginIcon" : {
      type : String,
      default : "zmdi-account-circle"
    },
    "nameKeys" : {
      type : [String, Array],
      default : "name"
    },
    "nameEvent": {
      type: String,
      default: "go:dashboard"
    },
    "loginEvent" : {
      type : String,
      default : "do:login"
    },
    "logoutEvent" : {
      type : String,
      default : "do:logout"
    },
    /***
     * The customized link before `login/logout`.
     * 
     * ```
     * {
     *    icon   : "im-xxx",
     *    text   : "i18n:xxx",
     *    href   : "/path/to/uri"  // The <a href>
     *    newtab : false,        // if href, the open target
     *    emit   : "do:login"      // Mutex(href)
     *    inSession : true       // Show only in session
     * }
     * ```
     */
    "links" : {
      type : Array,
      default : ()=>[]
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    theLinks() {
      let list = []
      //---------------------------
      // Join the links
      for(let li of this.links) {
        // Ignore out-of-session link
        if(li.inSession && !this.hasSession) {
          continue;
        }
        // Join
        list.push(li)
      }
      //---------------------------
      // Add the Login/Logout link
      if(this.hasSession) {
        list.push({
          text : "i18n:logout",
          emit : this.logoutEvent
        })
      }
      // Login 
      else {
        list.push({
          text : "i18n:login",
          emit : this.loginEvent
        })
      }
      //---------------------------
      return list
    },
    //--------------------------------------
    myName() {
      if(this.me) {
        return Ti.Util.getOrPick(this.me, this.nameKeys) 
               || Ti.I18n.get("mine")
      }
    },
    //--------------------------------------
    myIcon() {
      if(this.me) {
        if(2 == this.me.sex) {
          return "im-user-female"
        }
        return "im-user-male"
      }
      return "far-user"
    },
    //--------------------------------------
    myAvatar() {
      if(this.avatarSrc) {
        return Ti.S.renderBy(this.avatarSrc, this.me)
      }
    },
    //--------------------------------------
    hasAvatar() {
      return this.avatarSrc
        && this.avatarKey
        && this.me
        && this.me[this.avatarKey]
    },
    //--------------------------------------
    hasSession() {
      return this.me ? true : false
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickLink(link, $event) {
      // Emit
      if(link.emit) {
        $event.preventDefault()
        this.$notify(link.emit)
      }
      // Href: do nothing
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/ti/session/badge/ti-session-badge.mjs", _M);
})();
//============================================================
// JOIN: ti/session/badge/_com.json
//============================================================
Ti.Preload("ti/com/ti/session/badge/_com.json", {
  "name" : "ti-session-badge",
  "globally" : true,
  "template" : "./ti-session-badge.html",
  "mixins" : ["./ti-session-badge.mjs"]
});
//============================================================
// JOIN: ti/support/field_display.mjs
//============================================================
(function(){
//////////////////////////////////////////////
function _render_iteratee({
  varName,
  vars, 
  matched
} = {}) {
  if(matched.startsWith("$$")) {
    return matched.substring(1)
  }
  // ${=xxx}  get value from vars
  // ${pos.x} get value from itemData
  let m = /^(=)?([^?]+)(\?(.*))?$/.exec(varName)
  let ctx = "=" == m[1]
    ? vars.vars
    : vars.itemData;
  
  let vkey = _.trim(m[2])
  let vdft = Ti.Util.fallbackNil(_.trim(m[4]), matched)
  let rev = Ti.Util.getOrPick(ctx, vkey)
  return Ti.Util.fallback(rev, vdft)
}
//////////////////////////////////////////////
// cx = {vars, itemData, value}
function __eval_com_conf_item(val, cx={}) {
  // String valu3
  if(_.isString(val)) {
    //........................................
    // Function call
    //........................................
    let m = /^=>(.+)$/.exec(val)
    if(m) {
      let func = Ti.Util.genInvoking(m[1], {
        context: {
          ...cx,
          item: cx.itemData
        }
      })
      return func()
    }
    //........................................
    // Quick Value
    //........................................
    // VAL: evalue the special value, like:
    //  - "${=value}"
    //  - "${=..}"
    //  - "${=varName}"
    m = /^\$\{=([^${}=]+)\}$/.exec(val)
    if(m) {
      let varName = _.trim(m[1])
      // Whole Context
      if(".." == varName) {
        return cx.itemData
      }
      // Value
      if("value" == varName) {
        return cx.value
      }
      // In var set
      else {
        return Ti.Util.fallback(_.get(cx.vars, varName), val)
      }
    }
    //........................................
    // String Template
    //........................................
    // VAL as template (xxx)?xxx${nn}
    // the placeholder support:
    //  - "${=varName}"
    //  - "${info.age}"
    m = /^(\((.+)\)\?)?(.+)$/.exec(val)
    if(m){
      let preKey = _.trim(m[2])
      let tmpl = _.trim(m[3])
      //console.log("haha", preKey, tmpl)
      // Only `itemData` contains the preKey, render the value
      if(preKey) {
        // "(age)?xxx"  :: get from itemDAta
        if(_.get(cx.itemData, preKey)) {
          return Ti.S.renderBy(tmpl, cx, {
            iteratee: _render_iteratee
          })
        }
        return null
      }
      // Render the value
      return Ti.S.renderBy(tmpl, cx, {
        iteratee: _render_iteratee
      })
    }
    //........................................
    // Primary
    //........................................
    return val
  }
  // Object Value
  else if(_.isPlainObject(val)) {
    //........................................
    // Nested Objects
    //........................................
    let obj = {}
    _.forEach(val, (v, k)=>{
      let v2 = __eval_com_conf_item(v, cx)
      if("..." == k) {
        _.assign(obj, v2)
      } else {
        obj[k] = v2
      }
    })
    return obj
  }
  // Array Value
  else if(_.isArray(val)) {
    let list = []
    for(let v of val) {
      let v2 = __eval_com_conf_item(v, cx)
      list.push(v2)
    }
    return list
  }
  // Keep original value
  return val
}
//////////////////////////////////////////////
const FieldDisplay = {
  //------------------------------------------
  evalFieldDisplayItem(displayItem={}, {
    defaultKey
  }={}){
    //........................................
    const __gen_dis = ()=>{
      //......................................
      // Guard it
      if(Ti.Util.isNil(displayItem)) {
        return defaultKey 
          ? { key:defaultKey, comType:"ti-label"}
          : null
      }
      //......................................
      // {key:"xxx", comType:"xxx"}
      if(_.isPlainObject(displayItem)){
        let dis = _.assign({
          key : defaultKey,
          comType : "ti-label",
        }, displayItem)
        if(dis.transformer) {
          const invokeOpt = {
            context: this,
            partialRight: true
          }
          dis.transformer = Ti.Util.genInvoking(dis.transformer, invokeOpt)
        }
        return dis
      }
      //......................................
      // Array to multi key
      if(_.isArray(displayItem)) {
        return {
          key : displayItem,
          comType : "ti-label",
        }
      }
      //......................................
      // Boolean
      if(true === displayItem) {
        return {
          key : defaultKey,
          comType : "ti-label",
        }
      }
      //......................................
      if(_.isString(displayItem)){
        // <icon:zmdi-user>
        let m = /^<([^:>=]*)(:([^>]+))?>$/.exec(displayItem)
        if(m) {
          return {
            key       : m[1] || defaultKey || ":ti-icon",
            defaultAs : m[3] || undefined,
            comType   : "ti-icon"
          }
        }
        //......................................
        // #DictName(xxx) -> ti-label
        // just like `#RelayStatus(status)`
        m = /^[@#]([^\(]+)\(([^)]+)\)(:(.+))?$/.exec(displayItem)
        if(m) {
          return {
            key : m[2] || defaultKey,
            comType : "ti-label",
            comConf : {
              dict : m[1],
              className: "is-nowrap",
              format: m[4]
            }
          }
        }
        //......................................
        // "<=ti-label:key>" or ":<=ti-label>"
        m = /^<=([^:]+)(:(.+))?>$/.exec(displayItem)
        if(m) {
          return {
            key       : m[3] || defaultKey || Symbol(displayItem),
            comType   : m[1]
          }
        }
        //......................................
        // String -> ti-label
        // - "name" or ["name", "age"]
        // - "'Static Text'"
        // - "text+>/a/link?nm=${name}"
        // - "'More'->/a/link?id=${id}"
        // - "name:【${val}】->/a/link?id=${id}"
        m = /^([^+-:>]+)(:([^+-]+))?(([+-])>([^%]*))?$/.exec(displayItem)
        if(m) {
          let key  = _.trim(m[1] || m[0])
          let format = m[3]
          let newTab = m[5] == "+"
          let href = _.trim(m[6])
          return {
            key,
            comType : "ti-label",
            comConf : {
              className: "is-nowrap",
              newTab, 
              href, 
              format
            }
          }
        }
        //......................................
        // Default as lable
        return {
          key:displayItem,
          comType: "ti-label"
        }
        //......................................
      }
      //......................................
      return displayItem
    }
    //........................................
    let dis = __gen_dis()
    //........................................
    if(dis.dict) {
      let {name, vKey} = Ti.DictFactory.explainDictName(dis.dict)
      dis.$dict = Ti.DictFactory.CheckDict(name)
      dis.$dictValueKey = vKey || ".text"
    }
    //........................................
    // Then return
    return dis
  },
  //------------------------------------------
  /***
   * @param itemData{Object} - raw data
   * @param displayItem{Object} - display item setting
   * @param vars{Object} - special value forms like:
   * ```js
   * {
   *   "isCurrent" : this.isCurrent,
   *   "isChecked" : this.isChecked,
   *   "isHover"   : this.isHover,
   *   "isActived" : this.isActived,
   *   "rowId"     : this.rowId
   * }
   * ```
   */
  async evalDataForFieldDisplayItem({
    itemData={}, 
    displayItem={}, 
    vars={},
    autoIgnoreNil=true,
    autoValue="value",
    uniqueKey
  }={}) {
    let dis = displayItem;
    // if("sex" == dis.key) 
    //   console.log(dis)
    let value = dis.defaultAs;
    //.....................................
    // Array -> Obj
    if(_.isArray(dis.key)) {
      value = _.pick(itemData, dis.key)
    }
    // String ...
    else if(_.isString(dis.key)){
      // Whole data
      if(".." == dis.key) {
        value = itemData
      }
      // Statci value
      else if(/^'[^']+'$/.test(dis.key)) {
        value = dis.key.substring(1, dis.key.length-1)
      }
      // Template
      else if(/^->(.+)$/.test(dis.key)) {
        value = Ti.S.renderBy(dis.key.substring(2), itemData)
      }
      // Dynamic value
      else {
        value = Ti.Util.fallback(
          Ti.Util.getOrPick(itemData, dis.key),
          value
        )
      }
    }
    //.....................................
    // Transformer
    if(_.isFunction(dis.transformer)) {
      //console.log("do trans")
      // Sometimes, we need transform nil also
      if(!Ti.Util.isNil(value) || dis.transNil) {
        value = dis.transformer(value)
      }
    }
    // Ignore the undefined/null
    if(autoIgnoreNil && Ti.Util.isNil(value)) {
      if(Ti.Util.fallback(dis.ignoreNil, true)) {
        return
      }
    }
    //.....................................
    // Translate by dict
    if(dis.$dict) {
      value = await dis.$dict.getItemAs(dis.$dictValueKey, value)
    }
    //.....................................
    // Add value to comConf
    let reDisplayItem = _.cloneDeep(dis)
    let comConf = {};
    //.....................................
    // Customized comConf
    if(_.isFunction(dis.comConf)) {
      comConf = _.assign({}, dis.comConf(itemData))
    }
    //.....................................
    // Eval comConf
    else if(dis.comConf){
      comConf = __eval_com_conf_item(dis.comConf, {
        vars, 
        itemData, 
        value
      })
    }
    //.....................................
    // Set the default value key
    if(autoValue && _.isUndefined(comConf[autoValue])) {
      comConf[autoValue] = value
    }
    //.....................................
    reDisplayItem.comConf = comConf
    //.....................................
    if(uniqueKey) {
      reDisplayItem.uniqueKey = uniqueKey
    } else {
      reDisplayItem.uniqueKey = _.concat(
        reDisplayItem.key, reDisplayItem.comType).join("-")
    }
    //.....................................
    return reDisplayItem
  }
  //------------------------------------------
}
//////////////////////////////////////////////
Ti.Preload("ti/com/ti/support/field_display.mjs", FieldDisplay);
})();
//============================================================
// JOIN: ti/support/formed_list_methods.mjs
//============================================================
(function(){
//////////////////////////////////////////
const _M = {
  //......................................
  isSelectedItem(it={}, {value=null, multi=false}={}) {
    if(multi) {
      return _.isArray(value) && _.indexOf(value, it.value) >= 0
    }
    return _.isEqual(value, it.value)
  },
  //......................................
  normalizeData(list=[], {
    emptyItem=null,
    multi=false,
    value=null,
    focusIndex=-1,
    mapping=null,
    defaultIcon=null,
    iteratee=null,
    defaultTipKey=null
  }={}) {
    //console.log("normalizeData", iteratee)
    let index = 0
    let reList = []
    //.........................................
    // Single mode, join the empty item
    if(!multi && emptyItem) {
      let emIt = _.cloneDeep(emptyItem)
      emIt.selected = 
        _.isUndefined(emIt.value)||_.isNull(emIt.value)
          ? _.isNull(value)
          : this.isSelectedItem(emIt, {value, multi})
      if(_.isFunction(iteratee))
        emIt = iteratee(emIt, index) || emIt
      reList.push(emIt)
      index++
    }
    //.........................................
    // Format the list
    let list2 = []
    if(_.isArray(list)) {
      let theMapping = mapping
        ? _.defaults({...mapping}, {
            icon     : "icon",
            text     : "text",
            value    : "value",
            tip      : "tip"
          })
        : null
      for(let it of list) {
        // Plain Object
        if(_.isPlainObject(it)) {
          let it2
          // Mapping
          if(theMapping) {
            it2 = Ti.Util.translate(it, theMapping)
          }
          // Clone
          else {
            it2 = _.cloneDeep(it)
          }
          // Apply Default Tip
          if(!it2.tip && defaultTipKey) {
            it2.tip = it[defaultTipKey]
          }
          // Join to list
          list2.push(it2)
        }
        // Simple value
        else {
          list2.push({
            icon  : defaultIcon,
            text  : Ti.Types.toStr(it),
            value : it
          })
        }
      }
    }
    //.........................................
    // Tidy it
    for(let i=0; i<list2.length; i++) {
      let li = list2[i]
      // Mark index
      li.index = i
      li.focused = (i == focusIndex)
      // Mark icon
      li.icon = li.icon || defaultIcon
      
      // decide select: by self
      li.selected = this.isSelectedItem(li, {value, multi})
      
      // Customized
      if(_.isFunction(iteratee)) {
        list2[i] = iteratee(li, i) || li
      }
    }
    //console.log(reList)
    return list2
  },
  //------------------------------------------------
  matchItemByKey(item={}, key="value", mode="equal", val) {
    let itemValue = item[key]
    // find method by mode
    let fnCall = ({
      "equal"   : ()=>_.isEqual(itemValue, val),
      "starts"  : ()=>_.startsWith(itemValue, val),
      "contains": ()=>{
        if(_.isString(itemValue)) {
          return itemValue.indexOf(val+"") >= 0
        }
        _.indexOf(itemValue, val)>=0
      },
    })[mode]
    // Do the invoking
    if(_.isFunction(fnCall)) {
      return fnCall()
    }
    return false
  },
  //------------------------------------------------
  findItemInList(str, {
    list = [], 
    matchValue = "equal",
    matchText  = "off"
  }={}) {
    if(_.isArray(list) && !_.isEmpty(list)) {
      for(let li of list) {
        if(this.matchItemByKey(li, "value", matchValue, str)) {
          return li
        }
        if(this.matchItemByKey(li, "text", matchText, str)) {
          return li
        }
      }
    }
    return null
  },
  //------------------------------------------------
  // multi  : Array
  // single : Number
  getSelectedItemIndex(formedList, {value=null, multi=false}={}) {
    let re = []
    let sls = {value, multi}
    for(let i=0; i<formedList.length; i++) {
      let li = formedList[i]
      if(this.isSelectedItem(li, sls)) {
        if(!this.multi)
          return i
        re.push(i)
      }
    }
    if(_.isEmpty(re) && !multi) {
      return -1
    }
    return re
  },
  //......................................
  // async tryReload({loaded=false, cached=true}={}){
  //   if(!loaded || !cached) {
  //     await this.reload()
  //     return
  //   }
  //   // Return the blank Promise
  //   return new Promise((resolve)=>{
  //     resolve()
  //   })
  // },
  // //......................................
  // async doReload(options=[], vars) {
  //   vars = Ti.Util.fallback(vars, this.value)
  //   let list = []
  //   // Dynamic value
  //   if(_.isFunction(options)) {
  //     list = await options(vars)
  //     if(!_.isArray(list)){
  //       return []
  //     }
  //   }
  //   // Static value
  //   else if(_.isArray(this.options)){
  //     list = [].concat(this.options)
  //   }
  //   return list
  // }
  //......................................
}
Ti.Preload("ti/com/ti/support/formed_list_methods.mjs", _M);
})();
//============================================================
// JOIN: ti/support/list_item_mixins.mjs
//============================================================
(function(){
const _M = {
  inject: ["$vars"],
  ///////////////////////////////////////////////////
  props : {
    "index" : {
      type : Number,
      default : -1
    },
    "rowId" : {
      type : String,
      default : null
    },
    "data" : null,
    "changedId" : {
      type : String,
      default : null
    },
    "currentId" : {
      type : String,
      default : null
    },
    "checkedIds" : {
      type : Object,
      default : ()=>({})
    },
    "checkable" : {
      type : Boolean,
      default : false
    },
    "selectable" : {
      type : Boolean,
      default : true
    },
    "openable" : {
      type : Boolean,
      default : true
    },
    "rowToggleKey" : {
      type : Array,
      default : ()=>[]
    },
    "checkIcons" : {
      type : Object,
      default : ()=>({
        on  : "fas-check-square",
        off : "far-square"
      })
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    getListItemClass() {
      return (...klass)=>this.getTopClass({
        "is-current" : this.isCurrent,
        "is-checked" : this.isChecked,
        "is-changed" : this.isChanged
      }, klass)
    },
    //-----------------------------------------------
    isCurrent() {
      return this.rowId == this.currentId
    },
    //-----------------------------------------------
    isChanged() {
      return this.rowId == this.changedId
    },
    //-----------------------------------------------
    isChecked() {
      return this.checkedIds[this.rowId] ? true : false
    },
    //-----------------------------------------------
    theCheckIcon() {
      if(this.checkedIds[this.rowId]) {
        return this.checkIcons.on
      }
      return this.checkIcons.off
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    isRowToggleKey(uniqKey) {
      return _.indexOf(this.rowToggleKey, uniqKey)>=0
    },
    //-----------------------------------------------
    OnClickChecker($event={}) {
      if(this.checkable) {
        this.$notify("checker", {
          rowId  : this.rowId,
          shift  : $event.shiftKey,
          toggle : ($event.ctrlKey || $event.metaKey)
        })
      }
    },
    //-----------------------------------------------
    OnClickRow($event={}) {
      let toggle = ($event.ctrlKey || $event.metaKey)
      if(this.selectable && (!this.isCurrent || !this.isChecked || toggle)) {
        this.$notify("select", {
          rowId  : this.rowId,
          shift  : $event.shiftKey,
          toggle
        })
      }
    },
    //-----------------------------------------------
    OnDblClickRow($event={}) {
      if(this.openable) {
        $event.stopPropagation()
        this.$notify("open", {
          rowId  : this.rowId
        })
      }
    },
    //-----------------------------------------------
    doAutoActived() {
      if(!this.isActived && this.isCurrent) {
        this.setActived()
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "isCurrent" : function() {
      this.doAutoActived()
    }
  },
  ///////////////////////////////////////////////////
  mounted : function() {
    this.doAutoActived()
  }
  ///////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/support/list_item_mixins.mjs", _M);
})();
//============================================================
// JOIN: ti/support/list_mixins.mjs
//============================================================
(function(){
const LIST_MIXINS = {
  ///////////////////////////////////////////////////
  provide : function(){
    return {
      "$vars" : this.vars || {}
    }
  },
  ///////////////////////////////////////////////////
  data : ()=>({
    myLastIndex: -1,      // The last row index selected by user
    myCurrentId: null,    // Current row ID
    myCheckedIds: {}      // Which row has been checked
  }),
  ///////////////////////////////////////////////////
  // props -> list_props.mjs
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    TopStyle() {
      let w = this.width
      let h = this.height
      return Ti.Css.toStyle({
        width  : w,
        height : h
      })
    },
    //-----------------------------------------------
    hasRowToggleKey() {
      return !_.isEmpty(this.rowToggleKey)
    },
    //-----------------------------------------------
    TheRowToggleKey() {
      return _.without(_.concat(this.rowToggleKey), undefined)
    },
    //-----------------------------------------------
    getRowId() {
      return Ti.Util.genRowIdGetter(this.idBy)
    },
    //-----------------------------------------------
    getRowData() {
      return Ti.Util.genRowDataGetter(this.rawDataBy)
    },
    //-----------------------------------------------
    isDataEmpty() {
      return !_.isArray(this.data) || _.isEmpty(this.data)
    },
    //-----------------------------------------------
    isAllChecked() {
      // Empty list, nothing checked
      if(this.isDataEmpty) {
        return false 
      }
      // Checking ...
      for(let row of this.TheData){
        if(!this.theCheckedIds[row.id])
          return false;  
      }
      return true
    },
    //-----------------------------------------------
    hasChecked() {
      for(let it of this.data){
        let itId = this.getRowId(it)
        if(this.theCheckedIds[itId])
          return true  
      }
      return false
    },
    //-----------------------------------------------
    theCurrentRowId() {
      return this.wrapRowId(this.currentId)
    },
    //-----------------------------------------------
    theCurrentId()  {
      return this.puppetMode 
              ? this.theCurrentRowId 
              : this.myCurrentId
    },
    //-----------------------------------------------
    theCheckedIds() {
      return this.puppetMode 
        ? this.getCheckedIdsMap(this.checkedIds)
        : this.myCheckedIds 
    },
    //-----------------------------------------------
    // fnSet() {
    //   return _.assign({}, Ti.GlobalFuncs(), this.extendFunctionSet)
    // },
    //-----------------------------------------------
    Dict() {
      if(this.dict) {
        // Already Dict
        if(this.dict instanceof Ti.Dict) {
          return this.dict
        }
        // Get back
        let {name} = Ti.DictFactory.explainDictName(this.dict)
        return Ti.DictFactory.CheckDict(name)
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    wrapRowId(rowId) {
      if(_.isNumber(rowId)){
        return ""+rowId
      }
      return rowId
    },
    //-----------------------------------------------
    async evalData(iteratee=_.identity) {
      let data = this.data
      //............................................
      // May need translate
      if(this.Dict) {
        // Query by value
        if(_.isString(data)) {
          data = await this.Dict.queryData(data)
        }
        // Check Each data item
        else if(_.isArray(data)) {
          let data2 = []
          for(let i=0; i<data.length; i++) {
            let it = data[i]
            // Check the real item
            if(_.isString(it)) {
              let it2 = await this.Dict.getItem(it)
              if(it2) {
                data2.push(it2)
              }
            }
            // Primary
            else {
              data2.push(it)
            }
          }
          data = data2
        }
        // All data of Dict
        else {
          data = await this.Dict.getData()
        }
      }
      //............................................
      // Then format the list
      let list = []
      _.forEach(data, (it, index)=>{
        let item = {
          index,
          id      : this.getRowId(it, index),
          rawData : this.getRowData(it),
          item : it
        }
        item = iteratee(item) || item
        // Join
        list.push(item)
      })
      //............................................
      return list
    },
    //-----------------------------------------------
    findRowIndexById(rowId) {
      for(let row of this.TheData) {
        if(row.id == rowId) {
          return row.index
        }
      }
      return -1
    },
    //-----------------------------------------------
    findRowById(rowId) {
      for(let row of this.TheData) {
        if(row.id == rowId) {
          return row
        }
      }
    },
    //------------------------------------------
    getCurrentRow(currentId=this.theCurrentId) {
      return this.findRowById(currentId)
    },
    //------------------------------------------
    getCurrent(currentId=this.theCurrentId) {
      let row = this.getCurrentRow(currentId)
      return row 
              ? row.rawData
              : null
    },
    //------------------------------------------
    getCheckedRow(idMap=this.theCheckedIds) {
      let list = []
      for(let row of this.TheData) {
        if(idMap[row.id]) {
          list.push(row)
        }
      }
      return list
    },
    //------------------------------------------
    getChecked(idMap=this.theCheckedIds) {
      let rows = this.getCheckedRow(idMap)
      return _.map(rows, row=>row.rawData)
    },
    //-----------------------------------------------
    getEmitContext(
      currentId, 
      checkedIds={}
    ) {
      let checked = []
      let current = null
      let currentIndex = -1
      for(let row of this.TheData) {
        if(row.id == currentId) {
          current = row.rawData
          currentIndex = row.index
        }
        if(checkedIds[row.id]) {
          checked.push(row.rawData)
        }
      }
      return {
        current, currentId, currentIndex,
        checked, checkedIds
      }
    },
    //-----------------------------------------------
    selectRow(rowId, {quiet=false, payload}={}) {
      let idMap = {}
      let curId = null
      
      // Change the current & checked
      if(this.autoCheckCurrent) {
        idMap = rowId ? {[rowId]:true} : {}
        curId = rowId || null
      }
      // Just change to current
      else {
        idMap = _.cloneDeep(this.myCheckedIds)
        curId = rowId
      }

      let emitContext = this.getEmitContext(curId, idMap)
      // Private Mode
      if(!this.puppetMode) {
        this.myCheckedIds = idMap
        this.myCurrentId  = curId
        this.myLastIndex  = this.findRowIndexById(rowId)
      }
      // Notify Changes
      if(!quiet) {
        _.defaults(emitContext, payload)
        this.$notify("select", emitContext)
      }
    },
    //-----------------------------------------------
    selectRowByIndex(rowIndex, options) {
      //console.log(rowIndex)
      let index = rowIndex
      if(this.scrollIndex) {
        index = Ti.Num.scrollIndex(rowIndex, this.TheData.length)
      }
      if(_.inRange(index, 0, this.TheData.length)) {
        let row = this.TheData[index]
        this.selectRow(row.id, options)
      }
    },
    //-----------------------------------------------
    selectPrevRow(options) {
      this.selectRowByIndex(Math.max(-1, this.myLastIndex-1), options)
    },
    //-----------------------------------------------
    selectNextRow(options) {
      this.selectRowByIndex(this.myLastIndex+1, options)
    },
    //-----------------------------------------------
    selectRowsToCurrent(rowId) {
      let idMap = _.cloneDeep(this.theCheckedIds)
      let curId = this.theCurrentId
      let index = this.findRowIndexById(rowId)
      if(index >= 0) {
        let fromIndex = Math.min(index, this.myLastIndex)
        let toIndex   = Math.max(index, this.myLastIndex)
        if(fromIndex < 0) {
          fromIndex = 0
        }
        for(let i=fromIndex; i<=toIndex; i++) {
          let row = this.TheData[i]
          idMap[row.id] = true
        }
        // Eval context
        let emitContext = this.getEmitContext(curId, idMap)
        // Private Mode
        if(!this.puppetMode) {
          this.myCheckedIds = idMap
          this.myCurrentId  = curId
          this.myLastIndex  = index
        }
        // Notify Changes
        this.$notify("select", emitContext)
      }
    },
    //-----------------------------------------------
    checkRow(rowId) {
      let idMap = _.cloneDeep(this.theCheckedIds)
      let curId = this.theCurrentId
      let index = this.myLastIndex
      // All rows
      if(_.isUndefined(rowId)) {
        idMap = {}
        _.forEach(this.TheData, (row)=>{
          idMap[row.id] = true
        })
      }
      // Multi rows
      else if(_.isArray(rowId)) {
        let lastRowId = _.last(rowId)
        _.forEach(rowId, (r_id)=>{
          idMap[r_id] = true
        })
        if(this.autoCheckCurrent) {
          index = this.findRowIndexById(lastRowId)
        }
      }
      // Single row
      else {
        idMap[rowId] = true
        if(this.autoCheckCurrent) {
          index = this.findRowIndexById(rowId)
        }
      }
      // Eval context
      let emitContext = this.getEmitContext(curId, idMap)
      // Private Mode
      if(!this.puppetMode) {
        this.myCheckedIds = idMap
        this.myCurrentId  = curId
        this.myLastIndex  = index
      }
      // Notify Changes
      this.$notify("select", emitContext)
    },
    //-----------------------------------------------
    cancelRow(rowId) {
      let idMap = _.cloneDeep(this.theCheckedIds)
      let curId  = this.theCurrentId
      let index = -1
      //console.log("cancelRow", rowId)
      if(_.isUndefined(rowId)) {
        idMap = {}
        curId = null
      }
      // Single row
      else {
        index = this.findRowIndexById(rowId)
        idMap[rowId] = false
        if(this.autoCheckCurrent && curId == rowId) {
          curId = null
        }
      }
      // Eval context
      let emitContext = this.getEmitContext(curId, idMap)
      // Private Mode
      if(!this.puppetMode) {
        this.myCheckedIds = idMap
        this.myCurrentId  = curId
        this.myLastIndex  = index
      }
      // Notify Changes
      this.$notify("select", emitContext)
    },
    //-----------------------------------------------
    toggleRow(rowId) {
      if(this.theCheckedIds[rowId]) {
        this.cancelRow(rowId)
      } else {
        this.checkRow(rowId)
      }
    },
    //-----------------------------------------------
    OnRowCheckerClick({rowId, shift}={}) {
      if(this.multi) {
        // Shift Mode
        if(shift) {
          this.selectRowsToCurrent(rowId)
        }
        // Simple Toggle Mode
        else {
          this.toggleRow(rowId)
        }
      }
      // Single Mode
      else {
        this.selectRow(rowId)
      }
    },
    //-----------------------------------------------
    OnRowSelect({rowId, shift, toggle}={}) {
      // Multi + Shift Mode
      if(shift && this.multi) {
        this.selectRowsToCurrent(rowId)
      }
      // Multi + Toggle Mode
      else if(toggle && this.multi) {
        this.toggleRow(rowId)
      }
      // Toggle Mode
      else if(!Ti.Util.isNil(rowId) && !this.autoCheckCurrent) {
        this.toggleRow(rowId)
      }
      // Single Mode
      else {
        this.selectRow(rowId)
      }
    },
    //-----------------------------------------------
    OnRowOpen({rowId}={}) {
      let row = this.findRowById(rowId)
      if(row) {
        this.$notify("open", row)
      }
    },
    //-----------------------------------------------
    getCheckedIdsMap(idList=[]) {
      let idMap = {}
      // ID List
      if(_.isArray(idList)) {
        _.forEach(idList, (rowId)=>{
          idMap[rowId] = true
        })
      }
      // Map
      else {
        _.forEach(idList, (checked, rowId)=>{
          if(checked) {
            idMap[rowId] = true
          }
        })
      }
      // Force to check current
      if(this.autoCheckCurrent && !Ti.Util.isNil(this.theCurrentId)) {
        idMap[this.theCurrentId] = true
      }
      return idMap
    },
    //-----------------------------------------------
    syncCurrentId() {
      if(!this.puppetMode && this.theCurrentId != this.theCurrentRowId) {
        //console.log("syncCurrentId", this.theCurrentRowId)
        this.selectRow(this.theCurrentRowId, {quiet:true})
      }
      // Just update the last
      else {
        this.myLastIndex = this.findRowIndexById(this.theCurrentRowId)
      }
    },
    //-----------------------------------------------
    syncCheckedIds() {
      if(!this.puppetMode) {
        this.myCheckedIds = this.getCheckedIdsMap(this.checkedIds)
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "currentId" : function() {
      this.syncCurrentId()
    },
    "checkedIds" : function() {
      this.syncCheckedIds()
    },
    "data" : function() {
      if(this.theCurrentId) {
        this.myLastIndex = this.findRowIndexById(this.theCurrentId)
      }
    }
  },
  ///////////////////////////////////////////////////
  mounted : async function() {
    //.................................
    this.syncCheckedIds()
    this.syncCurrentId()
    //.................................
   }
  ///////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/support/list_mixins.mjs", LIST_MIXINS);
})();
//============================================================
// JOIN: ti/support/list_props.mjs
//============================================================
(function(){
const _M = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "data" : {
    type : [Array, String],
    default : ()=>[]
  },
  // If input the value(ID) Array
  // it can translate by this Dict
  "dict" : {
    type : [String, Ti.Dict],
    default : null
  },
  "idBy" : {
    type : [String, Function],
    default : "id"
  },
  "rawDataBy" : {
    type : [Object, String, Function],
    default : _.identity
  },
  "currentId" : {
    type : [String, Number],
    default : null
  },
  "checkedIds" : {
    type : [Array, Object],
    default : ()=>[]
  },
  "changedId" : {
    type : String,
    default : null
  },
  // "extendFunctionSet" : {
  //   type : Object,
  //   default : ()=>({})
  // },
  "vars" : {
    type : Object,
    default : ()=>({})
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "multi" : {
    type : Boolean,
    default : false
  },
  // in selectRow(), auto check current and drop primary checked rows?
  "autoCheckCurrent" : {
    type : Boolean,
    default : true
  },
  // in multi mode, which key to toggle row checker?
  "rowToggleKey" : {
    type : [String, Array],
    default : ()=>["SPACE"]
  },
  "checkable" : {
    type : Boolean,
    default : false
  },
  "selectable" : {
    type : Boolean,
    default : true
  },
  "openable" : {
    type : Boolean,
    default : true
  },
  "cancelable" : {
    type : Boolean,
    default : true
  },
  "hoverable" : {
    type : Boolean,
    default : false
  },
  "puppetMode" : {
    type : Boolean,
    default : false
  },
  "scrollIndex" : {
    type : Boolean,
    default : false
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "blankAs" : {
    type : Object,
    default : ()=>({
      icon : "fas-disease",
      text : "empty-data"
    })
  },
  "blankClass": {
    type: String,
    default: "big-mask",
    validator: v=>/^(big-mask|mid-tip)$/.test(v)
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width" : {
    type : [Number, String],
    default : null
  },
  "height" : {
    type : [Number, String],
    default : null
  }
}
Ti.Preload("ti/com/ti/support/list_props.mjs", _M);
})();
//============================================================
// JOIN: ti/switcher/ti-switcher-props.mjs
//============================================================
(function(){
const _M = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "value" : null,
  "options" : {
    type : [Array, Function, String, Ti.Dict],
    default : ()=>[]
  },
  "valueBy" : {
    type : [String, Function],
    default : undefined
  },
  "textBy" : {
    type : [String, Function],
    default : undefined
  },
  "iconeBy" : {
    type : [String, Function],
    default : undefined
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "multi" : false,
  // In single mode, to keep at least one item selected,
  // you can set the prop to `false`
  "allowEmpty" : {
    type : Boolean,
    default : true
  },
  "autoSplitValue": {
    type: [Boolean, String],
    default: true
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "defaultIcon" : {
    type : String,
    default : null
  },
  "emptylAs" : {
    default : null
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width" : {
    type : [Number, String],
    default : null
  },
  "height" : {
    type : [Number, String],
    default : null
  }
}
Ti.Preload("ti/com/ti/switcher/ti-switcher-props.mjs", _M);
})();
//============================================================
// JOIN: ti/switcher/ti-switcher.html
//============================================================
Ti.Preload("ti/com/ti/switcher/ti-switcher.html", `<div class="ti-switcher"
  :class="TopClass">
  <!--
    Show Loading
  -->
  <ti-icon
    v-if="loading"
    value="zmdi-settings zmdi-hc-spin"/>
  <!--
    Options
  -->
  <div v-else
    class="switcher-con">
    <ul>
      <li v-for="it in TheItems" 
        :key="it.value"
        :class="it.className"
        @click="OnClickItem(it, $event)"
        @mousedown="myFocusIndex=it.index;">
        <ti-icon class="it-icon"
          size=".8em"
          v-if="it.icon" 
          :value="it.icon"/>
        <span
          class="it-text">{{it.text|i18n}}</span>
      </li>
    </ul>
  </div>
</div>`);
//============================================================
// JOIN: ti/switcher/ti-switcher.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////////////////
  data : ()=>({
    loading : false,
    myOptionsData : [],
    myValueMap  : {},
    myLastIndex : 0,
    myFocusIndex : -1
  }),
  /////////////////////////////////////////////////////
  computed : {
    //-------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //-------------------------------------------------
    Dict() {
      // Customized
      if(this.options instanceof Ti.Dict) {
        return this.options
      }
      // Refer dict
      if(_.isString(this.options)) {
        let dictName = Ti.DictFactory.DictReferName(this.options)
        if(dictName) {
          return Ti.DictFactory.CheckDict(dictName, ({loading}) => {
            this.loading = loading
          })
        }
      }
      return Ti.DictFactory.GetOrCreate({
        data : this.options,
        getValue : Ti.Util.genGetter(this.valueBy || "value"),
        getText  : Ti.Util.genGetter(this.textBy  || "text|name"),
        getIcon  : Ti.Util.genGetter(this.iconBy  || "icon")
      }, {
        hooks: ({loading}) => this.loading = loading
      })
    },
    //-------------------------------------------------
    TheItems() {
      return _.map(this.myOptionsData, (it, index) => {
        let itV = this.Dict.getValue(it)
        return {
          index,
          className : {
            "is-selected" : this.myValueMap[itV],
            "is-focused"  : index == this.myFocusIndex
          },
          text  : this.Dict.getText(it),
          value : itV,
          icon  : this.Dict.getIcon(it) || this.defaultIcon
        }
      })
    }
    //-------------------------------------------------
  },
  /////////////////////////////////////////////////////
  methods : {
    //-------------------------------------------------
    OnClickItem({value, index}, $event) {
      let toggle = ($event.ctrlKey || $event.metaKey)
      let shift  = $event.shiftKey;
      // Multi + Shift Mode
      if(shift && this.multi) {
        this.selectItemsToCurrent(value, index)
      }
      // Multi + Toggle Mode
      else if(toggle && this.multi) {
        this.toggleItem(value)
      }
      // Toggle Mode
      else if(this.allowEmpty) {
        this.toggleItem(value)
      }
      // Single Mode
      else {
        this.myValueMap = {[value]:true}
      }
      // Last Index
      this.myLastIndex = index
      // Notify
      this.tryNotifyChanged()
    },
    //-------------------------------------------------
    // Utility
    //-------------------------------------------------
    findItemIndexByValue(val) {
      for(let it of this.TheItems) {
        if(it.value == val)
          return it.index
      }
      return -1
    },
    //-------------------------------------------------
    selectItemsToCurrent(val) {
      let vmap  = _.cloneDeep(this.myValueMap)
      let index = this.findItemIndexByValue(val)
      if(index >= 0) {
        let fromIndex = Math.min(index, this.myLastIndex)
        let toIndex   = Math.max(index, this.myLastIndex)
        if(fromIndex < 0) {
          fromIndex = 0
        }
        for(let i=fromIndex; i<=toIndex; i++) {
          let it = this.TheItems[i]
          vmap[it.value] = true
        }
      }
      this.myValueMap = vmap
    },
    //-------------------------------------------------
    toggleItem(val) {
      let oldV = this.myValueMap[val]
      if(this.multi) {
        this.myValueMap = _.assign({}, this.myValueMap, {
          [val] : !oldV
        })
      } else {
        this.myValueMap = {[val] : !oldV}
      }
    },
    //-------------------------------------------------
    tryNotifyChanged() {
      let vals = Ti.Util.truthyKeys(this.myValueMap)
      if(!_.isEqual(vals, this.Values)) {
        let v = this.multi ? vals : vals.join(",")
        this.$notify("change", v)
      }
    },
    //......................................
    async reloadMyOptionsData() {
      this.myOptionsData = await this.Dict.getData()
    },
    //......................................
    reloadMyValueMap() {
      let sep = null
      if(this.autoSplitValue) {
        if(_.isBoolean(this.autoSplitValue)) {
          sep = /[:,;\t\n\/]+/g;
        } else {
          sep = this.autoSplitValue
        }
      }

      let vals = Ti.S.toArray(this.value, {sep})
      let vmap = {}
      _.forEach(vals, v => vmap[v]=true)
      this.myValueMap = vmap
    }
    //......................................
  },
  /////////////////////////////////////////
  watch : {
    "options" : {
      handler : "reloadMyOptionsData",
      immediate: true
    },
    "value" : {
      handler : "reloadMyValueMap",
      immediate: true
    }
  },
  /////////////////////////////////////////
  mounted : async function(){
    Ti.Dom.watchDocument("mouseup", ()=>this.myFocusIndex = -1)
  },
  /////////////////////////////////////////
  beforeDestroy : function(){
    Ti.Dom.unwatchDocument("mouseup", this.__on_mouseup)
  }
  /////////////////////////////////////////
}
Ti.Preload("ti/com/ti/switcher/ti-switcher.mjs", _M);
})();
//============================================================
// JOIN: ti/switcher/_com.json
//============================================================
Ti.Preload("ti/com/ti/switcher/_com.json", {
  "name" : "ti-switcher",
  "globally" : true,
  "template" : "./ti-switcher.html",
  "props" : "./ti-switcher-props.mjs",
  "mixins" : ["./ti-switcher.mjs"]
});
//============================================================
// JOIN: ti/table/com/table-row/com/table-cell/table-cell.html
//============================================================
Ti.Preload("ti/com/ti/table/com/table-row/com/table-cell/table-cell.html", `<div class="table-cell"
  :class="TopClass"
  :style="TopStyle"
  :col-index="index"
  v-ti-activable>
  <div class="cell-wrapper"
    :class="WrapperClass">
    <!--Slot for first column-->
    <slot></slot>
    <!--Fields-->
    <div class="cell-con">
      <component 
        v-for="(it, index) in cellItems"
          :class="'item-'+index"
          :key="it.uniqueKey"
          :is="it.comType"
          v-bind="it.comConf"
          @change="OnItemChanged(it, $event)"/>
    </div>
  </div>
</div>`);
//============================================================
// JOIN: ti/table/com/table-row/com/table-cell/table-cell.mjs
//============================================================
(function(){
/////////////////////////////////////////////////////
const _M = {
  ///////////////////////////////////////////////////
  inject : ["$table"],
  ///////////////////////////////////////////////////
  data: ()=>({
    isEditingMode : false,
    cellItems : [],
    myCellSize : -1
  }),
  ///////////////////////////////////////////////////
  props : {
    "index" : {
      type : Number,
      default : -1
    },
    "rowId" : {
      type : String,
      default : null
    },
    "rowIndex" : {
      type : Number,
      default : -1
    },
    //..........................
    "cellSize" : {
      type : Number,
      default : 0
    },
    "title" : {
      type : String,
      default : null
    },
    "nowrap" : {
      type : Boolean,
      default : true
    },
    //..........................
    "display" : {
      type : Array,
      default : ()=>[]
    },
    //..........................
    "name" : {
      type : [String, Array],
      default : null
    },
    "type" : {
      type : String,
      default : "String"
    },
    "dict" : {
      type : String,
      default : "String"
    },
    "comType" : {
      type : String,
      default : null
    },
    "comConf" : {
      type : Object,
      default : ()=>({})
    },
    "serializer" : {
      type : Function,
      default : _.identity
    },
    "transformer" : {
      type : Function,
      default : _.identity
    },
    //..........................
    "data" : {
      type : Object,
      default : ()=>({})
    },
    //..........................
    "isCurrent" : {
      type : Boolean,
      default : false
    },
    "isHover" : {
      type : Boolean,
      default : false
    },
    "isChecked" : {
      type : Boolean,
      default : false
    },
    //..........................
    "ignoreNil" : {
      type : Boolean,
      default : true
    },
    //..........................
    "focusBy" : {
      type : String,
      default : "focus"
    },
    "widthBy" : {
      type : String,
      default : "width"
    }
    //..........................
  },
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //-----------------------------------------------
    TopStyle() {
      if(this.cellSize > 0) {
        return Ti.Css.toStyle({
          "width" : this.cellSize
        })
      }
    },
    //-----------------------------------------------
    WrapperClass() {
      return {
        "is-nowrap" : this.nowrap,
        "is-editing-mode" : this.isEditingMode
      }
    },
    //-----------------------------------------------
    theCurrentDisplayItems() {
      // Edit Mode
      if((this.isActived && this.comType) || _.isEmpty(this.display)) {
        //...........................................
        this.isEditingMode = true
        //...........................................
        let comConf = _.assign({}, this.comConf)
        if(this.focusBy) {
          comConf[this.focusBy] = "${=isActived}"
        }
        if(this.widthBy) {
          comConf[this.widthBy] = "${=cellSize}"
        }
        //...........................................
        return [{
          comType : this.comType,
          comConf,
          key  : this.name,
          type : this.type,
          dict : this.dict,
          transformer : this.transformer,
          ignoreNil : false
        }]
        //...........................................
      }
      // Display Mode
      this.isEditingMode = false
      return this.display
    },
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    async evalCellDisplayItems() {
      this.$table.reportReady(this.rowIndex, this.index, !_.isEmpty(this.cellItems))
      let items = []
      // Eval each items
      for(let i=0; i<this.theCurrentDisplayItems.length; i++) {
        let displayItem = this.theCurrentDisplayItems[i]
        let it = await this.evalDataForFieldDisplayItem({
            itemData : this.data, 
            displayItem, 
            vars : {
              "isCurrent" : this.isCurrent,
              "isChecked" : this.isChecked,
              "isHover"   : this.isHover,
              "isActived" : this.isActived,
              "rowId"     : this.rowId,
              "cellSize"  : this.cellSize
            },
            autoIgnoreNil : true,
            uniqueKey: `row${this.rowId}-cell${this.index}-${i}`
        })
        if(it) {
          items.push(it)
        }
      }
      //if(0 == this.rowIndex && 1==this.index) {
      //  console.log("evalCellDisplayItems", this.rowIndex, this.index)
      //}
      // Update and return
      let old = Ti.Util.pureCloneDeep(this.cellItems)
      let nit = Ti.Util.pureCloneDeep(items)
      if(!_.isEqual(old, nit)) {
        //console.log(`-> Cell[${this.rowIndex}-${this.index}]:`, {old, nit})
        this.cellItems = items
      }
      // report ready
      this.$table.reportReady(this.rowIndex, this.index, true)
    },
    //-----------------------------------------------
    OnItemChanged(item, payload) {
      this.$table.$notify("cell:item:change", {
        rowId     : this.rowId,
        cellIndex : this.index,
        index     : this.rowIndex,
        name      : item.key,
        value     : payload
      })
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "data" : {
      handler : "evalCellDisplayItems",
      immediate : true
    },
    "isCurrent" : "evalCellDisplayItems",
    "isChecked" : "evalCellDisplayItems",
    "isHover"   : "evalCellDisplayItems",
    "isActived" : "evalCellDisplayItems"
    // "cellSize" : async function() {
    //   await this.debounceEvalCellDisplayItems()
    // }
  }
  ///////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/table/com/table-row/com/table-cell/table-cell.mjs", _M);
})();
//============================================================
// JOIN: ti/table/com/table-row/com/table-cell/_com.json
//============================================================
Ti.Preload("ti/com/ti/table/com/table-row/com/table-cell/_com.json", {
  "name" : "table-cell",
  "globally" : false,
  "template" : "./table-cell.html",
  "methods"  : "@com:ti/support/field_display.mjs",
  "mixins"   : ["./table-cell.mjs"],
  "components" : ["@com:ti/label"]
});
//============================================================
// JOIN: ti/table/com/table-row/table-row.html
//============================================================
Ti.Preload("ti/com/ti/table/com/table-row/table-row.html", `<div class="table-row"
  :class="TopClass"
  @click.left="OnClickRow"
  @dblclick.left="OnDblClickRow"
  @mouseenter="OnMouseEnter"
  @mouseleave="OnMouseLeave"
  v-ti-activable>
  <!--
    Cells
  -->
  <table-cell v-for="fld in fields"
    :key="fld.index"
    v-bind="fld"
    :row-id="rowId"
    :row-index="index"
    :cell-size="getCellSize(fld.index)"
    :is-current="isCurrent"
    :is-hover="isHover"
    :is-checked="isChecked"
    :data="data">
    <template v-if="fld.index == 0">
      <div class="table-row-head">
        <!--current actived row indicator-->
        <div class="row-actived-indicator"></div>
        <!-- Indents -->
        <div v-for="n in indent"
            class="row-indent"></div>
        <!--ICON: Handler-->
        <template v-if="icon">
          <ti-icon
            v-if="hasRealIcon"
              class="row-icon"
              :value="icon"
              @click.native.left.stop="OnClickIcon"/>
          <div v-else
            class="row-icon"></div>
        </template>
        <!--ICON: Checker-->
        <ti-icon v-if="checkable"
            class="row-checker"
            :value="theCheckIcon"
            @click.native.left.stop="OnClickChecker"/>
      </div>
    </template>
  </table-cell>
</div>`);
//============================================================
// JOIN: ti/table/com/table-row/table-row.mjs
//============================================================
(function(){
/////////////////////////////////////////////////////
const _M = {
  ///////////////////////////////////////////////////
  props : {
    "indent" : {
      type : Number,
      default : 0
    },
    "icon" : {
      type : [Boolean, String],
      default : null
    },
    "fields" : {
      type : Array,
      default : ()=>[]
    },
    "sizes" : {
      type : Array,
      default : ()=>[]
    },
    "hoverId" : {
      type : String,
      default : null
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    TopClass() {
      return this.getListItemClass({
        "is-hover"   : this.isHover
      }, `row-indent-${this.indent}`)
    },
    //-----------------------------------------------
    isHover() {
      return this.hoverId && this.rowId == this.hoverId
    },
    //-----------------------------------------------
    hasRealIcon() {
      return this.icon && _.isString(this.icon)
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    getCellSize(index) {
      if(this.sizes.length > index) {
        return this.sizes[index]
      }
    },
    //-----------------------------------------------
    OnClickIcon($event) {
      this.$notify("icon", {
        rowId  : this.rowId,
        shift  : $event.shiftKey,
        toggle : ($event.ctrlKey || $event.metaKey)
      })
    },
    //-----------------------------------------------
    OnMouseEnter() {
      this.$notify("enter", {
        rowId  : this.rowId
      })
    },
    //-----------------------------------------------
    OnMouseLeave() {
      this.$notify("leave", {
        rowId  : this.rowId
      })
    }
    //-----------------------------------------------
  }
  ///////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/table/com/table-row/table-row.mjs", _M);
})();
//============================================================
// JOIN: ti/table/com/table-row/_com.json
//============================================================
Ti.Preload("ti/com/ti/table/com/table-row/_com.json", {
  "name" : "table-row",
  "globally" : false,
  "template" : "./table-row.html",
  "mixins" : [
    "@com:ti/support/list_item_mixins.mjs",
    "./table-row.mjs"],
  "components" : [
      "./com/table-cell"
    ]
});
//============================================================
// JOIN: ti/table/ti-table-props.mjs
//============================================================
(function(){
const _M = {
  "iconBy" : {
    type : [String, Function],
    default : null
  },
  "indentBy" : {
    type : [String, Function],
    default : null
  },
  "fields" : {
    type : Array,
    default : ()=>[]
  },
  "head" : {
    type : String,
    default : "frozen",
    validator : v =>
      Ti.Util.isNil(v) 
      || /^(frozen|none|normal)$/.test(v)
  },
  "border" : {
    type : String,
    default : "cell",
    validator : v => /^(row|column|cell|none)$/.test(v)
  },
  "autoScrollIntoView" : {
    type : Boolean,
    default : true
  }
}
Ti.Preload("ti/com/ti/table/ti-table-props.mjs", _M);
})();
//============================================================
// JOIN: ti/table/ti-table-resizes.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////////////
  data : ()=>({
    myViewportWidth : 0,  // Update-in-time, root element width
    myTableWidth: 0,      // Update-in-time, table width
    myColSizes: {
      priHead : [],  // Primary head column sizing
      priBody : [],  // Primary body column sizing
      primary : [],  // Primary Max Col-Sizes
      fixeds  : [],  // Fixed value [480, .23, 'auto', 'stretch']
                     // Eval when `evalEachColumnSize`
                     //  - 480 : fixed width
                     //  - -480 : fixed width and override primary
                     //  - .23 : as percent eval each time resize
                     //  - 'auto' : it will keep the primary sizing
                     //  - 'stretch' : it will join to the auto-remains-assignment
      amended : []   // The col-size to display in DOM
    },
    myCellsReady : false,
    myCellsReport : {},
    I_am_in_resizing : false
  }),
  ///////////////////////////////////////////////////
  methods : {
    //--------------------------------------
    reportReady(rowIndex=-1, cellIndex=-1, isDone=false) {
      let key = `R${rowIndex}-C${cellIndex}`
      //console.log(key, isDone)
      if(isDone) {
        delete this.myCellsReport[key]
      } else {
        this.myCellsReport[key] = isDone
      }
      // Check the status
      _.delay(()=>{
        this.myCellsReady = _.isEmpty(this.myCellsReport)
        // Do resize
        if(this.myCellsReady) {
          this.evalEachColumnSize()
        }
      })
    },
    //--------------------------------------
    evalEachColumnSize() {
      // Guard
      if(this.I_am_in_resizing) {
        return
      }
      //console.log("evalEachColumnSize", this, this.tiComType)

      // Remember the current scrollTop
      let oldScrollTop = _.get(this.$refs.body, "scrollTop")

      // Reset each column size
      this.I_am_in_resizing = true
      this.myTableWidth = 0
      this.myColSizes = {
        priHead : [],
        priBody : [],
        primary : [],
        fixeds  : [],
        amended : []
      }
      //.........................................
      // Eval the fixeds
      for(let fld of this.TableFields) {
        let fldWidth = fld.width || "stretch"
        // Stretch/Auto
        if(/^(stretch|auto)$/.test(fldWidth)) {
          this.myColSizes.fixeds.push(fldWidth)
        }
        // Fixed or percent
        else {
          this.myColSizes.fixeds.push(Ti.Css.toPixel(fldWidth, 1))
        }
      }
      //.........................................
      // Wait reset applied, and ...
      this.$nextTick(()=>{
        // Get original size: head
        let $heads = Ti.Dom.findAll(".table-head ul li", this.$el)
        for(let $he of $heads) {
          let rect = Ti.Rects.createBy($he)
          this.myColSizes.priHead.push(rect.width)
        }

        // Get original size: body
        let $rows = Ti.Dom.findAll(".table-body .table-row", this.$el)
        for(let $row of $rows) {
          let $cells = Ti.Dom.findAll(":scope > div", $row)
          for(let x=0; x<$cells.length; x++) {
            let $cell = $cells[x]
            let rect = Ti.Rects.createBy($cell)
            if(x>= this.myColSizes.priBody.length) {
              this.myColSizes.priBody[x] = rect.width
            } else {
              this.myColSizes.priBody[x] = Math.max(
                rect.width, this.myColSizes.priBody[x]
              )
            }
          }
        }

        // Count the primary max sizing for each columns
        for(let i=0; i<this.myColSizes.priHead.length; i++) {
          let wHeadCell = this.myColSizes.priHead[i]
          let wBodyCell = this.myColSizes.priBody[i]
          let w = Math.max(wHeadCell, wBodyCell)
          this.myColSizes.primary.push(w)
        }

        // Resize Table
        this.onTableResize()

        // Mark back the resizing and restore scrollTop
        _.delay(()=>{
          this.I_am_in_resizing = false
          if(this.$refs.body)
            this.$refs.body.scrollTop = oldScrollTop
        }, 10)
      })
    },
    //--------------------------------------
    onTableResize() {
      // Guard it
      let colN = this.myColSizes.primary.length
      if(colN <= 0) {
        return
      }

      // Get the viewport width
      let viewportWidth = Ti.Rects.createBy(this.$el).width
      //console.log("onTableResize")

      // Assign the fixed width
      // And count how many fields to join the remains-assignment
      let raIndexs = [];
      let amended = []
      for(let i=0; i<this.myColSizes.fixeds.length; i++) {
        let fxW = this.myColSizes.fixeds[i]
        // Get the primary width
        let priW = this.myColSizes.primary[i]
        // join to auto-remains-assignment
        if("stretch" == fxW) {
          raIndexs.push(i)
          amended.push(priW)
        }
        // keep primary
        else if("auto" == fxW) {
          amended.push(priW)
        }
        // Eval percent
        else if(fxW <= 1 && fxW > 0) {
          amended.push(fxW * viewportWidth)
        }
        // Eval percent and join remains-assignment
        else if(fxW < 0 && fxW >= -1) {
          let w = Math.abs(fxW * viewportWidth)
          amended.push(Math.max(w, priW))
        }
        // Fixed width and join remains-assignment
        else if(fxW < -1) {
          let w = Math.abs(fxW)
          amended.push(Math.max(w, priW))
        }
        // Fixed width
        else {
          amended.push(fxW)
        }
      }

      // Count the tableWidth
      let sumWidth = _.sum(amended)
      let tableWidth = Math.max(viewportWidth, sumWidth)
      this.myTableWidth = tableWidth

      // Assign the remain
      if(raIndexs.length > 0) {
        let remain = tableWidth - sumWidth
        if(remain > 0) {
          let remainCell = remain / raIndexs.length
          for(let index of raIndexs) {
            amended[index] += remainCell
          }
        }
      }

      // apply amended
      this.myColSizes.amended = amended
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////////////
  mounted : async function() {
    //.................................
    Ti.Viewport.watch(this, {
      resize : _.debounce(()=>this.onTableResize(), 10)
    })
    //.................................
  },
  ///////////////////////////////////////////////////
  beforeDestroy : function(){
    Ti.Viewport.unwatch(this)
  }
  ///////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/table/ti-table-resizes.mjs", _M);
})();
//============================================================
// JOIN: ti/table/ti-table.html
//============================================================
Ti.Preload("ti/com/ti/table/ti-table.html", `<div class="ti-table"
  :class="TopClass"
  @click="OnClickTop"
  v-ti-activable>
  <!--
    Blank
  -->
  <ti-loading 
    v-if="isDataEmpty"
      class="nil-data"
      :class="'as-'+blankClass"
      v-bind="blankAs"/>
  <!--
    Show thead/tbody
  -->
  <template v-else>
    <!--
      Head
    -->
    <div v-if="isShowHead"
      class="table-head"
      :style="TableStyle">
      <!--checker-->
      <div
          v-if="checkable && multi"
            class="as-checker"
            @click.left="OnClickHeadChecker">
            <ti-icon :value="HeadCheckerIcon"/>
      </div>
      <!--field titles-->
      <ul>
        <li
          v-for="fld in TableFields"
            class="table-head-cell"
            :style="getHeadCellStyle(fld.index)"
            :col-index="fld.index">
          <span class="table-head-cell-text">{{fld.title|i18n}}</span>
        </li>
      </ul>
    </div
    <!--
      Body
    -->
    <div ref="body"
      class="table-body"
      :style="TableStyle">
      <table-row
        v-for="row in myData"
          :key="row.id"
          :row-id="row.id"
          :index="row.index"
          :icon="row.icon"
          :indent="row.indent"
          :data="row.rawData"
          :fields="TableFields"
          :sizes="myColSizes.amended"
          :current-id="theCurrentId"
          :checked-ids="theCheckedIds"
          :hover-id="myHoverId"
          :changed-id="changedId"
          :checkable="checkable"
          :selectable="selectable"
          :openable="openable"
          @icon="$notify('icon', $event)"
          @checker="OnRowCheckerClick"
          @select="OnRowSelect"
          @open="OnRowOpen"
          @enter="OnRowEnter"
          @leave="OnRowLeave"/>
    </div>
  </template>
</div>`);
//============================================================
// JOIN: ti/table/ti-table.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////////////
  provide : function(){
    return {
      "$table" : this
    }
  },
  ///////////////////////////////////////////////////
  data : ()=>({
    myData : [],
    myHoverId  : null,    // The row mouse hover
  }),
  ///////////////////////////////////////////////////
  // props -> ti-table-props.mjs
  ///////////////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-cells-no-ready" : !this.myCellsReady,
        "is-layout-ready" : this.myCellsReady,
        "is-hoverable"   : this.hoverable
      }, [
        `is-border-${this.border}`,
        `is-head-${this.head||"none"}`,
      ])
    },
    //--------------------------------------
    TableStyle() {
      if(this.myTableWidth>0) {
        return Ti.Css.toStyle({
          "width" : this.myTableWidth
        })
      }
    },
    //--------------------------------------
    getRowIndent() {
      if(_.isFunction(this.indentBy)) {
        return it => this.indentBy(it)
      }
      if(_.isString(this.indentBy)) {
        return it => _.get(it, this.indentBy)
      }
      return it => 0
    },
    //--------------------------------------
    getRowIcon() {
      if(_.isFunction(this.iconBy)) {
        return it => this.iconBy(it)
      }
      if(_.isString(this.iconBy)) {
        return it => _.get(it, this.iconBy)
      }
      return it => null
    },
    //--------------------------------------
    TheData() {
      return this.myData
    },
    //--------------------------------------
    isShowHead() {
      return /^(frozen|normal)$/.test(this.head)
    },
    //--------------------------------------
    HeadCheckerIcon() {
      if(this.isAllChecked) {
        return "fas-check-square"
      }
      if(this.hasChecked) {
        return "fas-minus-square"
      }
      return "far-square"
    },
    //--------------------------------------
    TableFields() {
      let fields = []
      for(let i=0; i< this.fields.length; i++) {
        let fld = this.fields[i]
        //..................................
        let display = this.evalFieldDisplay(fld.display, fld.name)
        //..................................
        let fldWidth = Ti.Util.fallbackNil(fld.width, "stretch")
        //..................................
        if(_.isString(fldWidth)) {
          // Percent
          if(/^\d+(\.\d+)?%$/.test(fldWidth)) {
            fldWidth = fldWidth.substring(0, fldWidth.length-1)/100;
          }
          // Auto or stretch
          else if(!/^(auto|stretch)$/.test(fldWidth)) {
            fldWidth = "stretch"
          }
        }
        // Must be number
        else if(!_.isNumber(fldWidth)) {
          fldWidth = "stretch"
        }
        //..................................
        fields.push({
          index  : i,
          title  : fld.title,
          nowrap : fld.nowrap,
          width  : fldWidth,
          //.....................
          name : fld.name,
          display,
          //.....................
          type : fld.type,
          comType : fld.comType,
          comConf : fld.comConf,
          transformer : fld.transformer,
          serializer  : fld.serializer
        })
      }
      return fields
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnRowEnter({rowId}={}) {
      if(this.hoverable) {
        this.myHoverId = rowId
      }
    },
    //--------------------------------------
    OnRowLeave({rowId}={}) {
      if(this.hoverable) {
        if(this.myHoverId == rowId) {
          this.myHoverId = null
        }
      }
    },
    //--------------------------------------
    OnClickHeadChecker() {
      // Cancel All
      if(this.isAllChecked) {
        this.cancelRow()
      }
      // Check All
      else {
        this.checkRow()
      }
    },
    //--------------------------------------
    OnClickTop($event) {
      if(this.cancelable) {
        // Click The body or top to cancel the row selection
        if(Ti.Dom.hasOneClass($event.target,
            'ti-table', 'table-body',
            'table-head-cell',
            'table-head-cell-text')) {
          this.cancelRow()
        }
      }
    },
    //--------------------------------------
    onItemChanged(payload) {
      this.$notify("item:change", payload)
    },
    //--------------------------------------
    getHeadCellStyle(index=-1) {
      if(this.myColSizes.amended.length > index) {
        return Ti.Css.toStyle({
          "width" : this.myColSizes.amended[index]
        })
      }
    },
    //--------------------------------------
    evalFieldDisplay(displayItems=[], defaultKey) {
      // Force to Array
      displayItems = _.concat(displayItems)
      // Prepare the return list
      let items = []
      // Loop each items
      for(let li of displayItems) {
        let item = this.evalFieldDisplayItem(li, {defaultKey})
        if(item) {
          items.push(item)
        }
      }
      // // Gen transformer for each item
      // for(let it of items) {
      //   // Transformer
      //   it.transformer = Ti.Types.getFuncBy(it, "transformer", this.fnSet)
      // }
      // Array to pick
      return items
    },
    //--------------------------------------
    scrollCurrentIntoView() {
      if(this.autoScrollIntoView && this.myLastIndex>=0) {
        console.log("scroll")
        let $tbody = this.$refs.body
        let $row = Ti.Dom.find(`.table-row:nth-child(${this.myLastIndex+1})`, $tbody)

        let tbody = Ti.Rects.createBy($tbody)
        let row = Ti.Rects.createBy($row)

        // test it need to scroll or not
        if(!tbody.contains(row)) {
          // at bottom
          if(row.bottom > tbody.bottom) {
            $tbody.scrollTop += row.bottom - tbody.bottom
          }
          // at top
          else {
            $tbody.scrollTop += row.top - tbody.top
          }
        }
      }
    },
    //--------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("ti-table", uniqKey)
      if("ARROWUP" == uniqKey) {
        this.selectPrevRow({
          payload: {byKeyboardArrow: true}
        })
        this.scrollCurrentIntoView()
        return {prevent:true, stop:true, quit:true}
      }

      if("ARROWDOWN" == uniqKey) {
        this.selectNextRow({
          payload: {byKeyboardArrow: true}
        })
        this.scrollCurrentIntoView()
        return {prevent:true, stop:true, quit:true}
      }
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "data" : {
      handler : async function(newVal, oldVal){
        let isSame = _.isEqual(newVal, oldVal)
        if(!isSame) {
          //console.log("!!!table data changed", {newVal, oldVal})
          this.myData = await this.evalData((it)=>{
            it.icon = this.getRowIcon(it.item)
            it.indent = this.getRowIndent(it.item)
          })
        }
        // Check ready 
        if(_.isEmpty(this.data)) {
          this.myCellsReady = true
        }
      },
      immediate : true
    }
  }
  ///////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/table/ti-table.mjs", _M);
})();
//============================================================
// JOIN: ti/table/_com.json
//============================================================
Ti.Preload("ti/com/ti/table/_com.json", {
  "name" : "ti-table",
  "globally" : true,
  "template" : "./ti-table.html",
  "props" : [
    "@com:ti/support/list_props.mjs",
    "./ti-table-props.mjs"
  ],
  "methods" : "@com:ti/support/field_display.mjs",
  "mixins" : [
    "@com:ti/support/list_mixins.mjs",
    "./ti-table-resizes.mjs",
    "./ti-table.mjs"
  ],
  "components" : [
    "./com/table-row"
  ]
});
//============================================================
// JOIN: ti/tags/com/tags-item/tags-item.html
//============================================================
Ti.Preload("ti/com/ti/tags/com/tags-item/tags-item.html", `<div class="ti-tags-item" 
  :class="topClass"
  @mouseenter="mouseEnter='top'"
  @mouseleave="mouseEnter=null"
  @click.left="onClickTop">
  <!--
    Deleter
  -->
  <ti-icon v-if="removable"
    class="as-del"
    :value="removeIcon"
    @mouseenter.native="mouseEnter='del'"
    @mouseleave.native="mouseEnter='top'"
    @click.native.stop="onClickDel"/>
  <!--
    Icon
  -->
  <ti-icon v-if="icon" 
    class="as-icon"
    :value="icon"/>
  <!--
    Text
  -->
  <template v-if="text">
    <a v-if="href"
      class="as-text"
      @click.prevent
      :href="href"
      :class="textClass">{{text|i18n}}</a>
    <span v-else
      class="as-text"
      :class="textClass">{{text|i18n}}</span>
  </template>
  <!--
    Status Icon
  -->
  <ti-icon v-if="hasOptions"
    class="as-status"
    :value="theStatusIcon"/>
  <!--
    Drop & Mask
  -->
  <template v-if="'extended' == status">
    <div class="as-mask" @click.stop="closeDrop"></div>
    <div class="as-drop" ref="drop"
      @click.stop>
      <ti-icon-text v-for="it in theOptions"
        :key="it.index"
        v-bind="it"
        @click.native="onClickOption(it)"/>
    </div>
  </template>
</div>`);
//============================================================
// JOIN: ti/tags/com/tags-item/tags-item.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  data : ()=>({
    // null / top / del
    mouseEnter : null,
    // collapse / extended
    status : "collapse"
  }),
  ////////////////////////////////////////////////////
  props : {
    "index" : {
      type : Number,
      default : -1
    },
    "atLast" : {
      type : Boolean,
      default : false
    },
    "icon" : {
      type : [String, Object],
      default : null
    },
    "text" : {
      type : String,
      default : null
    },
    "href" : {
      type : String,
      default : null
    },
    "value" : {
      type : [String, Number, Boolean, Object],
      default : null
    },
    /***
     * Show drop list for changing the piece value
     * 
     * ```js
     * [{
     *   icon  : "zmdi-card-giftcard",
     *   text  : "随便什么礼物",
     *   value : "Gift"
     * }, {
     *   icon  : "zmdi-cocktail",
     *   text  : "鸡尾酒会",
     *   value : "Cocktail"
     * }, {
     *   icon  : "zmdi-nature-people",
     *   text  : "人在树下；雨在天空",
     *   value : "NaturePeople"
     * }]
     * ```
     */
    "options" : {
      type : Array,
      default : ()=>[]
    },
    "optionDefaultIcon" : {
      type : String,
      default : null
    },
    "cancelBubble" : {
      type : Boolean,
      default : false
    },
    "removable" : {
      type : Boolean,
      default : false
    },
    "removeIcon" : {
      type : String,
      default : null
    },
    "statusIcons" : {
      type : Object,
      default : ()=>({
        collapse : "zmdi-chevron-down",
        extended : "zmdi-chevron-up"
      })
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName({
        "has-options"  :  this.hasOptions,
        "is-enter-top" : 'top' == this.mouseEnter && this.hasOptions,
        "is-enter-del" : 'del' == this.mouseEnter
      }, this.className)
    },
    //------------------------------------------------
    textClass() {
      return {
        "without-icon"    : !this.hasIcon && !this.removable,
        "without-options" : !this.hasOptions
      }
    },
    //------------------------------------------------
    hasIcon() {
      return this.icon ? true : false
    },
    //------------------------------------------------
    hasOptions() {
      return _.isArray(this.options) && this.options.length > 0
    },
    //------------------------------------------------
    /***
     * @return The objects list like:
     * 
     * ```js
     * [{
      *   icon  : "zmdi-phone",
      *   text  : "i18n:xxx",
      *   value : 100,
      *   options : [{icon,text,value}...]
      * }]
      * ```
      */
    theOptions() {
      let list = _.filter(_.concat(this.options), (v)=>!Ti.Util.isNil(v))
      let tags = []
      _.forEach(list, (li, index)=>{
        let tag
        // Object
        if(_.isPlainObject(li)) {
          tag = _.assign({icon:this.optionDefaultIcon}, li, {index})
        }
        // String or simple value
        else {
          tag = {
            index : index,
            icon  : this.optionDefaultIcon,
            text  : Ti.Types.toStr(li),
            value : li
          }
        }
        // Join to
        if(!_.isEqual(tag.value, this.value)) {
          tags.push(tag)
        }
      })
      return tags
    },
    //------------------------------------------------
    theStatusIcon() {
      return this.statusIcons[this.status]
    },
    //------------------------------------------------
    theData() {
      return {
        index    : this.index,
        icon     : this.icon,
        text     : this.text,
        value    : this.value,
        href     : this.href,
        atLast   : this.atLast,
        asterisk : this.asterisk
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    onClickDel() {
      this.$notify("remove", this.theData)
    },
    //------------------------------------------------
    onClickOption({value,text,icon}={}) {
      this.$notify("change", {
        value,text,icon,
        index: this.index
      })
      this.closeDrop()
    },
    //------------------------------------------------
    onClickTop($event) {
      // Show Drop Down
      if(this.hasOptions) {
        $event.stopPropagation()
        this.openDrop()
      }
      // Stop Bubble Up
      else if(this.cancelBubble) {
        $event.stopPropagation()
      }
      // Emit event
      if(this.href) {
        this.$notify("fire", this.theData)
      }
    },
    //------------------------------------------------
    openDrop() {
      if(this.hasOptions) {
        this.status = "extended"
        this.$nextTick(()=>{
          this.dockDrop()
        })
      }
    },
    //------------------------------------------------
    closeDrop() {
      this.status = "collapse"
      this.mouseEnter = null
    },
    //------------------------------------------------
    dockDrop() {
      let $drop  = this.$refs.drop
      let $box   = this.$el
      // Guard the elements
      if(!_.isElement($drop) || !_.isElement($box)){
        return
      }
      // If drop opened, make the box position fixed
      // to at the top of mask
      if("extended" == this.status) {
        let r_box  = Ti.Rects.createBy($box)
        //..........................................
        // Make drop same width with box
        Ti.Dom.setStyle($drop, {
          "min-width" : `${r_box.width}px`
        })
        //..........................................
        // Dock drop to box
        Ti.Dom.dockTo($drop, $box, {
          space:{y:2}, posListX:["left", "right"]
        })
        //..........................................
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  mounted : function(){
    this.dockDrop()
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/tags/com/tags-item/tags-item.mjs", _M);
})();
//============================================================
// JOIN: ti/tags/com/tags-item/_com.json
//============================================================
Ti.Preload("ti/com/ti/tags/com/tags-item/_com.json", {
  "name" : "tags-item",
  "globally" : false,
  "template" : "./tags-item.html",
  "mixins" : ["./tags-item.mjs"],
  "components" : ["@com:ti/icon/text"]
});
//============================================================
// JOIN: ti/tags/ti-tags.html
//============================================================
Ti.Preload("ti/com/ti/tags/ti-tags.html", `<div class="ti-tags"
  :class="TopClass">
  <!--
    Loop piece
  -->
  <tags-item v-for="tag in myTags"
    :key="tag.index"
    v-bind="tag"
    :cancel-bubble="cancelItemBubble"
    :option-default-icon="optionDefaultIcon"
    :removable="removable"
    :remove-icon="removeIcon"
    :status-icons="statusIcons"
    @change="OnItemChanged"
    @remove="OnItemRemoved"
    @fire="OnItemFired"/>
</div>`);
//============================================================
// JOIN: ti/tags/ti-tags.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////////////
  data: ()=>({
    myTags   : [],
    myValues : []
  }),
  ////////////////////////////////////////////////////
  props : {
    //-----------------------------------
    // Data
    //-----------------------------------
    "value" : {
      type : Array,
      default : ()=>[]
    },
    "dict" : {
      type : [String, Ti.Dict],
      default : null
    },
    "mapping" : {
      type : Object,
      default : undefined
    },
    "itemOptions" : {
      type : Array,
      default : ()=>[]
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "cancelItemBubble" : {
      type : Boolean,
      default : false
    },
    "removable" : {
      type : Boolean,
      default : false
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "itemIconBy" : {
      type : [String, Function],
      default : undefined
    },
    "optionDefaultIcon" : {
      type : String,
      default : undefined
    },
    "itemDefaultIcon" : {
      type : String,
      default : undefined
    },
    "removeIcon" : {
      type : String,
      default : "zmdi-close"
    },
    "statusIcons" : {
      type : Object,
      default : ()=>({
        collapse : "zmdi-chevron-down",
        extended : "zmdi-chevron-up"
      })
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      if(this.className)
        return this.className
    },
    //------------------------------------------------
    getTagItemIcon() {
      if(_.isFunction(this.itemIconBy)) {
        return it => this.itemIconBy(it)
      }
      if(_.isString(this.itemIconBy)) {
        return it => _.get(it, this.itemIconBy)
      }
      return it => null
    },
    //--------------------------------------
    Dict() {
      if(this.dict) {
        // Already Dict
        if(this.dict instanceof Ti.Dict) {
          return this.dict
        }
        // Get back
        let {name} = Ti.DictFactory.explainDictName(this.dict)
        return Ti.DictFactory.CheckDict(name)
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnItemChanged({index, value}={}) {
      if(index >= 0) {
        let values = this.getMyValues()
        values[index] = Ti.Util.fallback(value, null)
        this.$notify("change", values)
      }
    },
    //------------------------------------------------
    OnItemRemoved({index}={}) {
      if(index >= 0) {
        let values = this.getMyValues()
        _.pullAt(values, index)
        this.$notify("change", values)
      }
    },
    //------------------------------------------------
    OnItemFired({index=-1}={}) {
      if(index >= 0) {
        let it = _.nth(this.theData, index)
        if(it) {
          this.$notify("item:actived", it)
        }
      }
    },
    //------------------------------------------------
    async evalMyData() {
      const tags = []
      if(_.isArray(this.value)) {
        const lastIndex = this.value.length - 1
        for(let index=0; index<this.value.length; index++){
          let val = this.value[index]
          let tag;
          // Auto mapping plain object
          if(_.isPlainObject(val)) {
            tag = this.mapping 
                    ? Ti.Util.translate(val, this.mapping)
                    : _.cloneDeep(val)
            // Customized the icon
            if(!tag.icon) {
              tag.icon = this.getTagItemIcon(val)
            }
          }
          // Lookup Dict
          else if(this.Dict) {
            let it = await this.Dict.getItem(val)
            tag = _.defaults({
              icon  : this.Dict.getIcon(it),
              text  : this.Dict.getText(it) || val,
              value : val
            })
          }
          // Auto gen object for simple value
          else {
            tag = {text: val, value: val}
          }
          // Join default value
          _.defaults(tag, {
            index,
            icon    : this.itemDefaultIcon,
            options : this.itemOptions,
            atLast  : index == lastIndex
          })
          // Join to tags
          tags.push(tag)
        }; // _.forEach
      }
      // assign the tags
      this.myTags = tags
    },
    //------------------------------------------------
    getMyValues() {
      const vals = []
      for(let tag of this.myTags) {
        vals.push(Ti.Util.fallback(tag.value, null))
      }
      return vals
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    "value" : {
      handler : "evalMyData",
      immediate : true
    }
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/tags/ti-tags.mjs", _M);
})();
//============================================================
// JOIN: ti/tags/_com.json
//============================================================
Ti.Preload("ti/com/ti/tags/_com.json", {
  "name" : "ti-tags",
  "globally" : true,
  "template" : "./ti-tags.html",
  "mixins" : ["./ti-tags.mjs"],
  "components" : [
    "./com/tags-item"
  ]
});
//============================================================
// JOIN: ti/text/json/ti-text-json.html
//============================================================
Ti.Preload("ti/com/ti/text/json/ti-text-json.html", `<ti-gui
  class="ti-text-json"
  :class="className"
  keep-shown-to="ti-text-json-editor"
  :layout="TheLayout"
  :schema="TheSchema"
  :can-loading="true"
  @change="OnChange"/>`);
//============================================================
// JOIN: ti/text/json/ti-text-json.mjs
//============================================================
(function(){
const _M = {
  //////////////////////////////////////////
  props : {
    "tabAt" : {
      type : String,
      default : "bottom-left",
      validator : (v)=>/^(top|bottom)-(left|center|right)$/.test(v)
    },
    "value" : undefined,
    "tree" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TheContent() {
      if(!Ti.Util.isNil(this.value)) {
        return this.value
      }
      return ""
    },
    //--------------------------------------
    TheData() {
      if(!Ti.Util.isNil(this.value)) {
        return Ti.Types.safeParseJson(this.value, null)
      }
      return null
    },
    //--------------------------------------
    TheLayout() {
      return {
        type : "tabs",
        tabAt : this.tabAt,
        blocks : [{
          title : "i18n:structure",
          name  : "tree",
          body  : "desktop-tree"
        }, {
          title : "i18n:source-code",
          name  : "source",
          body  : "desktop-source"
        }]
      }
    },
    //--------------------------------------
    TheSchema() {
      //....................................
      // Tree Conf
      let treeConf = _.assign({}, this.tree, {
        value: this.TheData
      })
      //....................................
      // Source Conf
      let sourceConf = {
        showTitle : false,
        value    : this.value
      }
      //....................................
      // Done
      return {
        "desktop-tree" : {
          comType : "ti-text-json-tree", 
          comConf : treeConf
        },
        "desktop-source" : {
          comType : "ti-text-raw",
          comConf : sourceConf
        }
      }
      //....................................
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnChange(payload) {
      //console.log("TiObjJson->OnChange", payload)
      this.$notify('change', payload)
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/ti/text/json/ti-text-json.mjs", _M);
})();
//============================================================
// JOIN: ti/text/json/tree/item/json-tree-item.html
//============================================================
Ti.Preload("ti/com/ti/text/json/tree/item/json-tree-item.html", `<div class="json-value"
  :class="topClass"
  v-ti-activable>
  <!--
  //  - Label   : Readonly
  -->
  <span v-if="isLabel"
    class="as-editing as-label">{{theLabelDisplayText}}</span>
  <!--
  //  - Boolean : Editable boolean value
  -->
  <ti-toggle v-else-if="'Boolean' == valueType"
    class="as-editing"
    :value="value"
    @change="$notify('change', $event)"/>
  <!--
  //  - Integer : Editable integer value
  //  - Float   : Editable float value
  //  - String  : Editable string value
  //  - Nil     : Edtiable any value
  -->
  <ti-label v-else
    class="as-editing"
    :value="value"
    :class-name="theValueClassName"
    :format="theValueFormat"
    :editable="true"
    @change="$notify('change', $event)"/>
  <!--
    Action Menu
  -->
  <ti-actionbar v-if="showActions"
    class="as-actions"
    :items="theActionMenuData"
    :status="theActionMenuStatus"/>
</div>`);
//============================================================
// JOIN: ti/text/json/tree/item/json-tree-item.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  //////////////////////////////////////////
  data : ()=>({
    
  }),
  //////////////////////////////////////////
  props : {
    "value" : null,
    "valueType" : {
      type : String,
      default : "Nil"
    },
    "valuePath" : {
      type : [String, Array],
      default : ()=>[]
    },
    "showActions" : {
      type : Boolean,
      default : false
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    topClass() {
      return Ti.Css.mergeClassName({
        "is-self-actived" : this.isSelfActived,
        "is-actived" : this.isActived
      })
    },
    //--------------------------------------
    isLabel() {
      return /^(Array|Object)$/.test(this.valueType)
    },
    //--------------------------------------
    isTop() {
      return this.theValuePath.length == 0
    },
    //--------------------------------------
    theLabelDisplayText() {
      if('Array' == this.valueType) {
        return '[..]'
      }
      if('Object' == this.valueType) {
        return '{..}'
      }
      return '???'
    },
    //--------------------------------------
    theValuePath() {
      if(_.isArray(this.valuePath)) {
        return this.valuePath
      }
      if(_.isString(this.valuePath)) {
        return _.without(this.valuePath.split(/[\/.]/g), "")
      }
      return []
    },
    //--------------------------------------
    theValueClassName() {
      return _.kebabCase(`is${this.valueType}`)
    },
    //--------------------------------------
    theValueFormat() {
      if('String' == this.valueType) {
        return function(val) {
          if(val) {
            return `"${val}"`
          }
          return '""'
        }
      }
    },
    //--------------------------------------
    theActionMenuData() {
      //................................
      let jvTypes = [{
        name  : "jvTypeArray",
        text  : "i18n:json-Array",
        type  : "action",
        altDisplay : {
          icon : "zmdi-check",
          capture : false
        },
        action : ()=>{
          this.$notify("change", {jsonMutate:"ChangeValueType", args:"Array"})
        }
      }, {
        name  : "jvTypeObject",
        text  : "i18n:json-Object",
        type  : "action",
        altDisplay : {
          icon : "zmdi-check",
          capture : false
        },
        action : ()=>{
          this.$notify("change", {jsonMutate:"ChangeValueType", args:"Object"})
        }
      }]
      //................................
      // Add
      let menuData = [{
        name : "jv-add",
        type : "action",
        icon : "zmdi-plus",
        action : ()=>{
          this.$notify("change", {jsonMutate : "Add"})
        }
      }]
      //................................
      // Remove : If not the top
      if(!this.isTop) {
        menuData.push({
          type : "line"
        })
        // Can not remove top node
        menuData.push({
          name : "jv-remove",
          type : "action",
          icon : "zmdi-delete",
          action : ()=>{
            this.$notify("change", {jsonMutate : "Remove"})
          }
        })
        // Add More Types
        jvTypes.push({
          type : "line"
        })
        // AddType: Boolean
        jvTypes.push({
          name  : "jvTypeBoolean",
          text  : "i18n:json-Boolean",
          type  : "action",
          altDisplay : {
            icon : "zmdi-check",
            capture : false
          },
          action : ()=>{
            this.$notify("change", {jsonMutate:"ChangeValueType", args:"Boolean"})
          }
        })
        // AddType: Number
        jvTypes.push({
          name  : "jvTypeNumber",
          text  : "i18n:json-Number",
          type  : "action",
          altDisplay : {
            icon : "zmdi-check",
            capture : false
          },
          action : ()=>{
            this.$notify("change", {jsonMutate:"ChangeValueType", args:"Number"})
          }
        })
        // AddType: String
        jvTypes.push({
          name  : "jvTypeString",
          text  : "i18n:json-String",
          type  : "action",
          altDisplay : {
            icon : "zmdi-check",
            capture : false
          },
          action : ()=>{
            this.$notify("change", {jsonMutate:"ChangeValueType", args:"String"})
          }
        })
        // AddType: Nil
        jvTypes.push({
          name  : "jvTypeNil",
          text  : "i18n:json-Nil",
          type  : "action",
          altDisplay : {
            icon : "zmdi-check",
            capture : false
          },
          action : ()=>{
            this.$notify("change", {jsonMutate:"ChangeValueType", args:"Nil"})
          }
        })
      }
      //................................
      // More: Change Type
      menuData.push({
        type : "line"
      })
      menuData.push({
        key  : "jv-types",
        type : "group",
        icon : "zmdi-more",
        items : jvTypes
      })
      // Done
      return menuData
    },
    //--------------------------------------
    theActionMenuStatus() {
      return {
        jvTypeBoolean : "Boolean" == this.valueType,
        jvTypeInteger : "Integer" == this.valueType,
        jvTypeFloat   : "Float"   == this.valueType,
        jvTypeNumber  : "Number"  == this.valueType,
        jvTypeString  : "String"  == this.valueType,
        jvTypeArray   : "Array"   == this.valueType,
        jvTypeObject  : "Object"  == this.valueType,
        jvTypeNil     : "Nil"     == this.valueType
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    
  },
  //////////////////////////////////////////
  mounted : function() {
    
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/ti/text/json/tree/item/json-tree-item.mjs", _M);
})();
//============================================================
// JOIN: ti/text/json/tree/item/_com.json
//============================================================
Ti.Preload("ti/com/ti/text/json/tree/item/_com.json", {
  "name" : "ti-text-json-tree-item",
  "globally" : true,
  "template" : "./json-tree-item.html",
  "mixins" : ["./json-tree-item.mjs"]
});
//============================================================
// JOIN: ti/text/json/tree/ti-text-json-tree.html
//============================================================
Ti.Preload("ti/com/ti/text/json/tree/ti-text-json-tree.html", `<ti-tree class="ti-text-json-tree"
  title="i18n:name"
  :main-width="mainWidth"
  :class="className"
  :border="border"
  :keep-open-by="keepOpenBy"
  :multi="true"
  :data="myTreeRoot"
  :display="TreeDisplay"
  :auto-open="autoOpen"
  :current-id="myTreeCurrentPathId"
  :default-open-depth="2"
  :fields="TreeFields"
  @select
  @node:item:change="OnNodeItemChange"
  @opened-status:changed="OnOpenedStatusChanged"/>`);
//============================================================
// JOIN: ti/text/json/tree/ti-text-json-tree.mjs
//============================================================
(function(){
const _M = {
  //////////////////////////////////////////
  data : ()=>({
    myTreeRoot : [],
    myTreeCurrentPathId : null,
    myTreeOpenedStatus : {}
  }),
  //////////////////////////////////////////
  props : {
    "value" : null,
    "mainWidth" : {
      type : [String, Number],
      default : .372
    },
    "border" : {
      type : String,
      default : "cell",
      validator : v => /^(row|column|cell|none)$/.test(v)
    },
    "keepOpenBy" : {
      type : String,
      default : null
    },
    "autoOpen" : {
      type : Boolean,
      default : false
    },
    "showRoot" : {
      type : Boolean,
      default : true
    },
    "editing" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TreeDisplay() {
      return {
        key : "name",
        comType : "ti-label",
        comConf : (it)=>({
          className : _.kebabCase(`is-${it.nameType}`),
          editable  : 'Key' == it.nameType,
          format : ({
              "Index" : "[${val}]",
              "Label" : "i18n:json-${val}"
            })[it.nameType]
        })
      }
    },
    //--------------------------------------
    TreeFields() {
      return [{
        title : "i18n:value",
        width : .618,
        display : {
          key : "value",
          ignoreNil : false,
          comType : "ti-text-json-tree-item",
          comConf : {
            valueType   : "${valueType}",
            valuePath   : "${=rowId}",
            showActions : "${=isCurrent}"
          }
        }
      }]
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    evalTreeData() {
      let list = []
      // Join the top data
      this.joinTreeTableRow(list, this.value)

      // Update Tree Data
      this.myTreeRoot = _.first(list)
    },
    //--------------------------------------
    getJsValueType(val) {
      if(Ti.Util.isNil(val))
        return "Nil"

      if(_.isArray(val))
        return "Array"
      
      if(_.isNumber(val)) {
        return "Number"
      }

      return _.upperFirst(typeof val)
    },
    //--------------------------------------
    joinTreeTableRow(list=[], item, key) {
      let nameType;
      let valueType = this.getJsValueType(item)
      // Default itemKey is self-type
      // For top leval
      if(_.isUndefined(key)) {
          key = valueType
          nameType = "Label"
      }
      // Index key
      else if(_.isNumber(key)) {
        nameType = "Index"
      }
      // String key
      else {
        nameType = "Key"
      }
      //................................
      // undefined
      if(_.isUndefined(item)) {
        list.push({
          nameType, valueType,
          name  : key,
          value : undefined
        })
      }
      //................................
      // null
      else if(_.isNull(item)) {
        list.push({
          nameType, valueType,
          name  : key,
          value : null
        })
      }
      //................................
      // Array
      if(_.isArray(item)) {
        // Create self
        let node = {
          nameType, valueType: "Array",
          name  : key,
          value : item,
          children : []
        }
        // Join Children
        for(let i=0; i<item.length; i++) {
          let child = item[i]
          this.joinTreeTableRow(node.children, child, i)
        }
        // Join self
        list.push(node)
      }
      //................................
      // Object
      else if(_.isPlainObject(item)) {
        // Create self
        let node = {
          nameType, valueType: "Object",
          name  : key,
          value : item,
          children : []
        }
        // Join Children
        _.forEach(item, (v, k)=>{
          this.joinTreeTableRow(node.children, v, k)
        })
        // Join self
        list.push(node)
      }
      //................................
      // Boolean
      else if(_.isBoolean(item)) {
        list.push({
          nameType, valueType,
          name  : key,
          value : item ? true : false
        })
      }
      //................................
      // Number 
      else if(_.isNumber(item)) {
        list.push({
          nameType, valueType,
          name  : key,
          value : item * 1
        })
      }
      //................................
      // String
      else if(_.isString(item)) {
        list.push({
          nameType, valueType,
          name  : key,
          value : item + ""
        })
      }
    },
    //--------------------------------------
    async doAdd(root={}, path=[]) {
      // Looking for the target from data
      let hie = Ti.Trees.getByPath(this.myTreeRoot, path)
      let target = _.isEmpty(path) ? root : _.get(root, path)
      let isOpened = this.myTreeOpenedStatus[path.join("/")]
      //console.log({root, path, target, hie, isOpened})
      //.....................................
      // Guard: Fail to find the target
      if(!hie) {
        return
      }
      //.....................................
      // If Opened Array
      if(isOpened && _.isArray(target)) {
        // just append the nil at tail
        target.push(null)
      }
      //.....................................
      // If Opened Object
      else if(isOpened && _.isPlainObject(target)) {
        // ask the key
        let newKey = await Ti.Prompt("i18n:json-new-key")
        if(Ti.Util.isNil(newKey)) {
          return
        }
        // and insert nil at the tail
        target[newKey] = null
      }
      //.....................................
      // Other, it must be simple value
      else if(path.length > 0){
        //...................................
        // get the parent node
        let p_ph = path.slice(0, path.length-1);
        let parent = _.isEmpty(p_ph) ? root : _.get(root, p_ph);
        let keyOrIndex = _.last(path)
        //...................................
        // Prepare the new data
        let stub;
        //...................................
        // If array, insert nil after current
        if(_.isArray(parent)) {
          stub = parent
          Ti.Util.insertToArray(parent, keyOrIndex+1, null)
        }
        //...................................
        // If Object
        else if(_.isPlainObject(parent)) {
          // ask the key
          let newKey = await Ti.Prompt("i18n:json-new-key")
          if(Ti.Util.isNil(newKey)) {
            return
          }
          // and insert nil after current path
          stub = Ti.Util.appendToObject(parent, keyOrIndex, {
            [newKey] : null
          })
        }
        //...................................
        // If root, return the stub 
        if(p_ph.length == 0) {
          return stub
        }
        // Set stub
        _.set(root, p_ph, stub)
      }
      //.....................................
      return root
    },
    //--------------------------------------
    doRemove(root={}, path=[]) {
      // Forbid to remove the top
      if(_.isEmpty(path)) {
        return
      }
      //...................................
      // get the candidate for next highlight
      let hie = Ti.Trees.getByPath(this.myTreeRoot, path)
      let can = Ti.Trees.nextCandidate(hie)
      //...................................
      // get the parent node
      let p_ph = path.slice(0, path.length-1);
      let parent = _.isEmpty(p_ph) ? root : _.get(root, p_ph);
      let keyOrIndex = _.last(path)
      //...................................
      // Prepare the new data
      let stub;
      //...................................
      // If array, insert nil after current
      if(_.isArray(parent)) {
        stub = []
        _.forEach(parent, (val, index)=>{
          if(index != keyOrIndex) {
            stub.push(val)
          }
        })
      }
      //...................................
      // If Object
      else if(_.isPlainObject(parent)) {
        stub = {}
        // and insert nil after current path
        _.forEach(parent, (val, key)=>{
          if(key != keyOrIndex) {
            stub[key] = val
          }
        })
      }
      //.....................................
      // Highlight the next
      if(can && can.node) {
        let nextPathId = _.concat(can.path, can.node.name).join("/")
        this.$nextTick(()=>{
          this.myTreeCurrentPathId = nextPathId
        })
      }
      //...................................
      // If root, return the stub 
      if(p_ph.length == 0) {
        return stub
      }
      // Set stub
      _.set(root, p_ph, stub)
      //.....................................
      return root
    },
    //--------------------------------------
    doChangeValueType(root={}, path=[], type) {
      // Get the source
      let isRoot = _.isEmpty(path);
      let src = isRoot ? root : _.get(root, path)
      //.....................................
      // Prepare converter
      let convert = ({
        //...................................
        "Boolean" : (src)=>{
          return src ? true : false
        },
        //...................................
        "Number" : (src)=>{
          let nb = src * 1
          return isNaN(nb) ? -1 : nb
        },
        //...................................
        "Integer" : (src)=>{
          let nb = parseInt(src)
          return isNaN(nb) ? -1 : nb
        },
        //...................................
        "Float" : (src)=>{
          let nb = src * 1
          return isNaN(nb) ? -1 : nb
        },
        //...................................
        "String" : (src)=>{
          // Array/Object
          if(_.isArray(src) || _.isObject(src)) {
            return JSON.stringify(src)
          }
          // Other value
          return src + ""
        },
        //...................................
        "Array" : (src)=>{
          // Array
          if(_.isArray(src)) {
            return
          }
          // Nil
          else if(Ti.Util.isNil(src)) {
            return []
          }
          // Wrap to array
          else {
            return [src]
          }
        },
        //...................................
        "Object" : (src)=>{
          // Array
          if(_.isArray(src)) {
            // Try array as pairs
            let pairs = _.fromPairs(src)
            let stub = {}
            _.forEach(pairs, (val, key)=>{
              if(!Ti.Util.isNil(key) && !_.isUndefined(val)) {
                stub[key] = val
              }
            })
            // Maybe merget it 
            if(_.isEmpty(stub) && !_.isEmpty(src)) {
              Ti.Util.merge(stub, src)
            }
            // Whatever return the object
            return stub
          }
          // Object
          else if(_.isPlainObject(src)) {
            return
          }
          // String try to JSON
          else if(_.isString(src)) {
            return Ti.Types.safeParseJson(src, {
              "value" : src
            })
          }
          // Other value, just wrap to Object
          return {"value": src}
        },
        //...................................
        "Nil" : (src)=>{
          return null
        }
        //...................................
      })[type]
      //.....................................
      // Do convert
      if(_.isFunction(convert)) {
        let stub = convert(src)
        // Canceled
        if(_.isUndefined(stub)) {
          return
        }
        // Root object, return directly
        if(isRoot) {
          return stub
        }
        // Update to main data
        _.set(root, path, stub)
        return root
      }
      //.....................................
      // Fail to find the converter, return undeinfed to cancel
    },
    //--------------------------------------
    async OnNodeItemChange({name, value, data, node, nodeId}={}) {
      //console.log("OnNodeItemChange", {name,value, data, node, nodeId})
      //....................................
      // Guard it
      if(!node.id) {
        return;
      }
      //....................................
      // Prepare the new Data
      let newData = _.cloneDeep(this.value)
      //....................................
      // Get the target JSON path
      let path = node.path
      //....................................
      // Mutate JSON structure
      if(value && value.jsonMutate) {
        let fn = ({
          Add             : this.doAdd,
          Remove          : this.doRemove,
          ChangeValueType : this.doChangeValueType
        })[value.jsonMutate]
        // Invoke it
        newData = await Ti.DoInvoke(fn, _.concat([newData, path], value.args), this)

        // Canceled the mutation
        if(_.isUndefined(newData)) {
          return
        }
      }
      //....................................
      // Modify the Array/Object
      else {
        // Set the Key
        if("name" == name) {
          newData = Ti.Util.setKey(newData, path, value)
        }
        // Set the Value
        else if("value" == name) {
          // Eval the value smartly
          let fn = ({
            "Integer" : (v)=> {
              let v2 = parseInt(v)
              if(isNaN(v2)) {
                return v
              }
              return v2
            },
            "Float" : (v)=> {
              let v2 = v * 1
              if(isNaN(v2)) {
                return v
              }
              return v2
            },
            "Number" : (v)=> {
              let v2 = v * 1
              if(isNaN(v2)) {
                return v
              }
              return v2
            },
            "Nil" : (v)=> {
              return Ti.S.toJsValue(v, {
                autoDate : false
              })
            }
          })[data.valueType]
          let v2 = _.isFunction(fn) ? fn(value) : value
          
          // Set it to data
          _.set(newData, path, v2)
        }
      }
      //....................................
      // Emit the change
      this.$notify("change", newData)
    },
    //--------------------------------------
    OnOpenedStatusChanged(opened) {
      this.myTreeOpenedStatus = opened
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "value" : function(){
      this.evalTreeData()
    }
  },
  //////////////////////////////////////////
  mounted : function() {
    this.evalTreeData()
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/ti/text/json/tree/ti-text-json-tree.mjs", _M);
})();
//============================================================
// JOIN: ti/text/json/tree/_com.json
//============================================================
Ti.Preload("ti/com/ti/text/json/tree/_com.json", {
  "name" : "ti-text-json-tree",
  "globally" : true,
  "i18n" : "@i18n:ti-text-json",
  "template" : "./ti-text-json-tree.html",
  "mixins" : ["./ti-text-json-tree.mjs"],
  "components" : [
    "@com:ti/tree",
    "@com:ti/text/json/tree/item"
  ]
});
//============================================================
// JOIN: ti/text/json/_com.json
//============================================================
Ti.Preload("ti/com/ti/text/json/_com.json", {
  "name" : "ti-text-json",
  "globally" : true,
  "i18n" : "@i18n:ti-text-json",
  "template" : "./ti-text-json.html",
  "mixins" : ["./ti-text-json.mjs"],
  "components" : [
    "@com:ti/gui",
    "@com:ti/text/raw",
    "@com:ti/toggle",
    "@com:ti/text/json/tree"
  ]
});
//============================================================
// JOIN: ti/text/markdown/preview/markdown-preview.html
//============================================================
Ti.Preload("ti/com/ti/text/markdown/preview/markdown-preview.html", `<div class="ti-markdown-preview"
  :class="TopClass">
  <article 
    :class="ThemeClass"
    v-html="myHtml"></article>
  <!--pre>{{myHtml}}</pre-->
</div>`);
//============================================================
// JOIN: ti/text/markdown/preview/markdown-preview.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////////////
  data: ()=>({
    myHtml  : null,
    myTheme : null
  }),
  ///////////////////////////////////////////////////
  props : {
    "previewMediaSrc" : {
      type : [String, Function],
      default : undefined
    },
    "value" : {
      type : String,
      default : ""
    }, 
    "placeholder" : {
      type : String,
      default : "i18n:blank"
    },
    "theme" : {
      type : String,
      default : "nice"
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //-----------------------------------------------
    ThemeClass() {
      if(this.myTheme) {
        return `ti-markdown-theme-${this.myTheme}`
      }
    },
    //-----------------------------------------------
    ThePreviewMediaSrc() {
      let transSrc = _.identity;
      // String mode
      if(_.isString(this.previewMediaSrc)) {
        transSrc = src => {
          return Ti.S.renderBy(this.previewMediaSrc, {src})
        }
      }
      // Function Mode
      else if(_.isFunction(this.previewMediaSrc)){
        transSrc = this.previewMediaSrc
      }

      return async src => {
        //console.log("!!!!src", src)
        // Outsite link
        if(/^(https?:)(\/\/)/.test(src))
          return src

        // translate it
        return transSrc(src)
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    async renderMarkdown() {
      if(!Ti.Util.isBlank(this.value)) {
        let MdDoc = Cheap.parseMarkdown(this.value)
        console.log(MdDoc.toString())
        this.myHtml  = await MdDoc.toBodyInnerHtml({
          mediaSrc : this.ThePreviewMediaSrc
        })
        this.myTheme = MdDoc.getMeta("theme", this.theme)
      }
      // Show Blank
      else {
        this.myHtml = Ti.I18n.text(this.placeholder)
        this.myTheme = this.theme
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "value" : {
      handler : "renderMarkdown",
      immediate : true
    }
  }
  ///////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/text/markdown/preview/markdown-preview.mjs", _M);
})();
//============================================================
// JOIN: ti/text/markdown/preview/_com.json
//============================================================
Ti.Preload("ti/com/ti/text/markdown/preview/_com.json", {
  "name" : "ti-text-markdown-preview",
  "globally" : true,
  "template" : "./markdown-preview.html",
  "mixins" : ["./markdown-preview.mjs"]
});
//============================================================
// JOIN: ti/text/markdown/richeditor/ti-markdown-richeditor-delegate-methods.mjs
//============================================================
(function(){
const _M = {
  //-----------------------------------------------
  // Delegate Quill Methods
  //-----------------------------------------------
  getSelection  (...args){return this.$editor.getSelection(...args)},
  setSelection  (...args){return this.$editor.setSelection(...args)},
  updateContents(...args){return this.$editor.updateContents(...args)},
}
Ti.Preload("ti/com/ti/text/markdown/richeditor/ti-markdown-richeditor-delegate-methods.mjs", _M);
})();
//============================================================
// JOIN: ti/text/markdown/richeditor/ti-markdown-richeditor-props.mjs
//============================================================
(function(){
const _M = {
  //...............................................
  // Data
  //...............................................
  "mediaBase" : {
    type : String,
    default : undefined
  },
  "value" : {
    type : String,
    default : ""
  }, 
  //...............................................
  // Behavior
  //...............................................
  // Ext-toolbar item defination
  "actions": {
    type: Object,
    default: ()=>({})
  },
  // preview -> markdown -> save
  "markdownMediaSrc": {
    type: [String, Function],
    default: undefined
  },
  // load -> markdown -> preview
  "previewMediaSrc": {
    type: [String, Function],
    default: undefined
  },
  //...............................................
  // Aspact
  //...............................................
  "placeholder" : {
    type : String,
    default : "i18n:blank"
  },
  "theme" : {
    type : String,
    default : "nice"
  },
  "toolbar" : {
    type : Array,
    default : ()=>[
      "Heading", "|", "B", "I", "|", "Link", "Code", 
      "|", "BlockQuote", "CodeBlock", 
      "|", "Outdent", "Indent",  
      "|", "UL", "OL"
      ]
  },
  "toolbarAlign" : {
    type : String,
    default: "left",
    validator : v => /^(left|right|center)$/.test(v)
  },
  "blankAs" : {
    type : Object,
    default : ()=>({
      icon : "fas-coffee",
      text : null
    })
  }
}
Ti.Preload("ti/com/ti/text/markdown/richeditor/ti-markdown-richeditor-props.mjs", _M);
})();
//============================================================
// JOIN: ti/text/markdown/richeditor/ti-markdown-richeditor.html
//============================================================
Ti.Preload("ti/com/ti/text/markdown/richeditor/ti-markdown-richeditor.html", `<div class="ti-markdown-richeditor"
  :class="TopClass">
  <!--
    Toolbar
  -->
  <ti-actionbar 
    v-if="hasToolbar"
      class="as-toolbar"
      :items="ToolbarMenuData" 
      :align="toolbarAlign"
      :status="myToolbarStatus"
      @change="OnToolbarChange"/>
  <!--
    Stage
  -->
  <div ref="stage"
    class="as-stage"
    spellcheck="false"
    :class="ThemeClass"></div>
  <!--
    Cover when nil
  -->
  <ti-loading
    v-if="isNilContent"
      class="as-nil-mask as-big-mask"
      v-bind="blankAs"/>
</div>`);
//============================================================
// JOIN: ti/text/markdown/richeditor/ti-markdown-richeditor.mjs
//============================================================
(function(){
/////////////////////////////////////////////////////
function ResetQuillConfig(Quill) {
  //.................................................
  // Reset once
  if(Quill.__has_been_reset) 
    return
  //.................................................
  // hljs.configure({   // optionally configure hljs
  //   languages: ['javascript', 'ruby', 'python']
  // });
  //.................................................
  // Reset Indent    
  const Indent = Quill.import('formats/indent')
  Indent.keyName = "li-indent"
  Indent.whitelist = [1,2,3,4,5,6]
  //.................................................
  // Mark it
  Quill.__has_been_reset = true
}
/////////////////////////////////////////////////////
const BUILTIN_TOOLBAR_ACTIONS = {
  //.........................................
  "|" : {type : "line"},
  //.........................................
  "B" : {
    icon : "fas-bold",
    notify: "bold",
    highlight : "bold",
    disabled : "italic"
  },
  //.........................................
  "I" : {
    icon : "fas-italic",
    notify : "italic",
    highlight : "italic",
    disabled : "bold"
  },
  //.........................................
  "Link" : {
    icon : "fas-link",
    notify : "link",
    highlight : "link"
  },
  //.........................................
  "Code" : {
    icon : "zmdi-code",
    notify : "code",
    highlight : "code"
  },
  //.........................................
  "Heading" : {
    type : "group",
    icon : "fas-hashtag",
    text : "i18n:wordp-heading",
    items : [{
        text: "i18n:wordp-h1",
        notify: "header",
        highlight : "h1",
        value: 1
      }, {
        text: "i18n:wordp-h2",
        notify: "header",
        highlight : "h2",
        value: 2
      }, {
        text: "i18n:wordp-h3",
        notify: "header",
        highlight : "h3",
        value: 3
      }, {
        text: "i18n:wordp-h4",
        notify: "header",
        highlight : "h4",
        value: 4
      }, {
        text: "i18n:wordp-h5",
        notify: "header",
        highlight : "h5",
        value: 5
      }, {
        text: "i18n:wordp-h6",
        notify: "header",
        highlight : "h6",
        value: 6
      }, {
        text: "i18n:wordp-h0",
        notify: "header",
        highlight : "h0",
        value:  0
      }]
  },
  //.........................................
  "BlockQuote" : {
    icon : "fas-quote-right",
    notify : "blockquote",
    highlight : "blockquote"
  },
  //.........................................
  "CodeBlock" : {
    icon : "fas-code",
    notify : "code_block",
    highlight : "code-block"
  },
  //.........................................
  "Indent" : {
    icon : "fas-indent",
    notify: "indent"
  },
  //.........................................
  "Outdent" : {
    icon : "fas-outdent",
    notify: "outdent"
  },
  //.........................................
  "UL" : {
    icon : "fas-list-ul",
    notify : "list",
    value : "bullet",
    highlight: {list:"bullet"}
  },
  //.........................................
  "OL" : {
    icon : "fas-list-ol",
    notify : "list",
    value : "ordered",
    highlight: {list:"ordered"}
  }
  //.........................................
}
/////////////////////////////////////////////////////
const _M = {
  ///////////////////////////////////////////////////
  data: ()=>({
    myMeta : {},
    syncForbid : 0,
    myToolbarStatus : {}
  }),
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    TopClass() {
      return this.getTopClass({
        "nil-content" : this.isNilContent,
        "has-content" : !this.isNilContent
      })
    },
    //-----------------------------------------------
    ThemeClass() {
      if(this.ThemeName) {
        return `ti-markdown-theme-${this.ThemeName}`
      }
    },
    //-----------------------------------------------
    ThemeName() {
      return _.get(this.myMeta, "theme") || this.theme
    },
    //-----------------------------------------------
    hasToolbar() {
      return !_.isEmpty(this.ToolbarMenuData)
    },
    //-----------------------------------------------
    isNilContent() {
      return Ti.Util.isNil(this.value)
    },
    //-----------------------------------------------
    ToolbarActions() {
      return _.merge({}, BUILTIN_TOOLBAR_ACTIONS, this.actions)
    },
    //-----------------------------------------------
    ToolbarMenuData() {
      let list = []
      _.forEach(this.toolbar, v => {
        let it = _.get(this.ToolbarActions, v)
        //...........................................
        if(it) {
          list.push(it)
        }
        //...........................................
      })
      // list.push({
      //   text: "HL",
      //   action : "$parent:highlightCode"
      // })
      return list;
    },
    //-----------------------------------------------
    TheMarkdownMediaSrc() {
      if(_.isFunction(this.markdownMediaSrc)){
        return this.markdownMediaSrc
      }

      if(_.isString(this.markdownMediaSrc)) {
        return Ti.Util.genInvoking(this.markdownMediaSrc, {
          partialRight: true
        })
      }
    },
    //-----------------------------------------------
    ThePreviewMediaSrc() {
      if(_.isFunction(this.previewMediaSrc)){
        return this.previewMediaSrc
      }

      if(_.isString(this.previewMediaSrc)) {
        return Ti.Util.genInvoking(this.previewMediaSrc, {
          partialRight: true
        })
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    // Events
    //-----------------------------------------------
    OnToolbarChange({name, value}={}) {
      //console.log("OnToolbarChange", {name, value})
      const fn = ({
        //...........................................  
        bold  ($q, val){$q.format("bold", val)},
        italic($q, val){$q.format("italic", val)},
        code($q, val){$q.format("code", val)},
        //...........................................
        header($q, val) {$q.format("header", val)},
        //...........................................
        blockquote($q, val){$q.format("blockquote", val)},
        code_block($q, val){$q.format("code-block", val)},
        //..........................................
        async link($q, val){
          let range = $q.getSelection()
          if(!range) {
            return await Ti.Toast.Open("i18n:wordp-nil-sel", "warn")
          }
          // Insert link
          if(val) {
            if(range.length > 0) {
              let href = await Ti.Prompt("i18n:wordp-link");
              if(!Ti.Util.isNil(href)) {
                let op = $q.format("link", href)
              }
            }
            // Warn user
            else {
              return await Ti.Toast.Open("i18n:wordp-nil-sel", "warn")
            }
          }
          // Remove link
          else {
            $q.format("link", false)
          }
        },
        //...........................................
        indent ($q){$q.format("indent", "+1")},
        outdent($q){$q.format("indent", "-1")},
        //...........................................
        list($q, val="bullet"){$q.format("list", val)}
        //...........................................
      })[name]
      //.............................................
      // Invoke
      if(_.isFunction(fn)) {
        fn(this.$editor, value)
        this.quillUpdateFormat()
      }
      //.............................................
    },
    //-----------------------------------------------
    // Utility
    //-----------------------------------------------
    async renderMarkdown() {
      console.log("!!!!!!!!!!!!!!!!!!!!!! renderMarkdown")
      if(!Ti.Util.isBlank(this.value)) {
        // Parse markdown
        let MdDoc = Cheap.parseMarkdown(this.value)
        console.log(MdDoc.toString())
        window.MdDoc = MdDoc
        this.myMeta = _.cloneDeep(MdDoc.getMeta())

        // Get delta
        let delta = await MdDoc.toDelta({
          mediaSrc: this.ThePreviewMediaSrc
        })
        console.log(JSON.stringify(delta, null, '   '))

        // Update Quill editor content
        this.$editor.setContents(delta);
        
      }
      // Show Blank
      else {
        this.myMeta = {}
        this.$editor.setContents([]);
      }
    },
    //-----------------------------------------------
    syncMarkdown() {
      if(this.syncForbid > 0) {
        console.log("!forbid! syncMarkdown", this.syncForbid)
        this.syncForbid --
        return
      }
      this.renderMarkdown()
    },
    //-----------------------------------------------
    // Highlight
    //-----------------------------------------------
    // highlightCode() {
    //   for(let $code of this.$refs.stage.querySelectorAll("pre")) {
    //     console.log($code)
    //     hljs.highlightBlock($code)
    //   }
    // },
    //-----------------------------------------------
    // Quill
    //-----------------------------------------------
    async quillChanged(delta) {
      //console.log("changed", JSON.stringify(delta, null, '  '))
      //console.log("quillChanged")
      // Guard
      if(this.isNilContent) {
        return
      }

      // Delat => CheapDocument
      let MdDoc = Cheap.parseDelta(delta)
      MdDoc.setDefaultMeta(this.myMeta)
      this.myMeta = MdDoc.getMeta()
      //console.log(MdDoc.toString())
      
      // CheapDocument => markdown
      let markdown = await MdDoc.toMarkdown({
        mediaSrc: this.TheMarkdownMediaSrc
      })
      //console.log(markdown)
      if(markdown != this.value) {
        this.syncForbid = 1
        this.$notify("change", markdown)
      }
    },
    //-----------------------------------------------
    quillSelectionChanged(range) {
      // Update selection info
      if(range) {
        // Indicate row:col
        let ii = [range.index]
        if(range.length > 0) {
          ii.push(range.length)
        }
        this.$notify("indicate", ii.join(":"))

        // Update format
        this.quillUpdateFormat(range)
      }
    },
    //-----------------------------------------------
    quillUpdateFormat(range) {
      let fmt = this.$editor.getFormat(range)
      //console.log(fmt)
      //fmt = _.cloneDeep(fmt)
      if(fmt.header) {
        fmt[`h${fmt.header}`] = true
      } else {
        fmt["h0"] = true
      }
      if(!_.isEqual(this.myToolbarStatus, fmt)) {
        this.myToolbarStatus = fmt
      }
    },
    //-----------------------------------------------
    installQuillEditor() {
      // Guard
      if(this.$editor) {
        return
      }
      //.............................................
      // Reset the Quill Default
      ResetQuillConfig(Quill)
      //Quill.register(MyIndent)
      //.............................................
      this.$editor = new Quill(this.$refs.stage, {
        modules: {
          syntax: false
        },
        bounds : this.$refs.stage,
        placeholder : Ti.I18n.text(this.placeholder)
      });
      //.............................................
      this.debounceQuillChanged = _.debounce((newDelta, oldDelta)=>{
        let delta = oldDelta.compose(newDelta)
        this.quillChanged(delta)
      }, 1000)
      //.............................................
      this.$editor.on("text-change", (newDelta, oldDelta, source)=>{
        //console.log("text-change",this.isNilContent, _.cloneDeep({newDelta, oldDelta}))
        if(!this.isNilContent) {
          this.debounceQuillChanged(newDelta, oldDelta)
        }
      })
      //.............................................
      this.$editor.on("selection-change", (range, oldRange, source)=>{
        this.quillSelectionChanged(range)
      })
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "value" : {
      handler : "syncMarkdown"
    },
    "isNilContent": function(newVal, oldVal){
      //console.log("isNilContent", newVal, oldVal)
      if(newVal) {
        this.syncForbid = 0
      }
    }
  },
  ///////////////////////////////////////////////////
  mounted() {
    this.syncForbid = 0;
    this.installQuillEditor()
    this.syncMarkdown()
  },
  ///////////////////////////////////////////////////
  beforeDestroy() {
    this.syncForbid = 0;
  }
  ///////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/text/markdown/richeditor/ti-markdown-richeditor.mjs", _M);
})();
//============================================================
// JOIN: ti/text/markdown/richeditor/_com.json
//============================================================
Ti.Preload("ti/com/ti/text/markdown/richeditor/_com.json", {
  "name" : "ti-text-markdown-richeditor",
  "globally" : true,
  "i18n" : "@i18n:ti-text-editor",
  "css" : "@deps:highlight/default.css",
  "template" : "./ti-markdown-richeditor.html",
  "props": "./ti-markdown-richeditor-props.mjs",
  "methods": "./ti-markdown-richeditor-delegate-methods.mjs",
  "mixins" : ["./ti-markdown-richeditor.mjs"],
  "components" : [
    "@com:wn/adaptlist"
  ],
  "deps" : [
    "@deps:quill/quill.js",
    "@deps:highlight/highlight.js"
  ]
});
//============================================================
// JOIN: ti/text/raw/ti-text-raw.html
//============================================================
Ti.Preload("ti/com/ti/text/raw/ti-text-raw.html", `<div class="ti-text-raw"
  :class="TopClass"
  v-ti-activable>
  <!--
    Header
  -->
  <div
    v-if="isShowHead"
      class="as-head">
      <ti-icon :value="icon"/>
      <span>{{title}}</span>
  </div>
  <!--
    Main
  -->
  <div class="as-main">
    <textarea ref="text" 
      spellcheck="false"
      :placeholder="placeholder | i18n"
      :value="myContent"
      @compositionstart="OnInputCompositionStart"
      @compositionend="OnInputCompositionEnd"
      @input="OnInputing"
      @change="OnTextChanged"></textarea>
  </div>
</div>`);
//============================================================
// JOIN: ti/text/raw/ti-text-raw.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////////////
  data : ()=>({
    myContent : null,
    inputCompositionstart: false
  }),
  ///////////////////////////////////////////////////
  props : {
    "icon" : {
      type : [String, Object],
      default : undefined
    },
    "title" : {
      type : String,
      default : undefined
    },
    "trimed" : {
      type : Boolean,
      default : false
    },
    "value" : {
      type : String,
      default : ""
    }, 
    "placeholder" : {
      type : String,
      default : "i18n:blank"
    },
    "status": {
      type : Object,
      default: ()=>({})
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    TopClass() {
      return this.getTopClass({
        "show-title" : this.showTitle,
        "hide-title" : !this.showTitle,
        "is-changed" : _.get(this.status, "changed")
      })
    },
    //-----------------------------------------------
    isShowHead() {
      return this.title || this.icon
    },
    //-----------------------------------------------
    hasContent() {
      return !Ti.Util.isNil(this.value)
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnInputCompositionStart(){
      this.inputCompositionstart = true
    },
    //------------------------------------------------
    OnInputCompositionEnd(){
      this.inputCompositionstart = false
      this.OnTextChanged()
    },
    //------------------------------------------------
    OnInputing($event) {
      if(!this.inputCompositionstart) {
        this.OnTextChanged()
      }
    },
    //-----------------------------------------------
    OnTextChanged() {
      let str = _.get(this.$refs.text, "value")
      if(this.trimed) {
        str = _.trim(str)
      }
      this.myContent = str
    },
    //-----------------------------------------------
    syncMyContent() {
      this.myContent = this.value
    },
    //-----------------------------------------------
    checkMyContent() {
      if(this.myContent != this.value) {
        this.$notify("change", this.myContent)
      }
    },
    //-----------------------------------------------
    __ti_shortcut(uniqKey) {
      if("CTRL+ENTER" == uniqKey) {
        if(this.myContent != this.value) {
          this.$notify("change", this.myContent)
        }
        return {prevent:true}
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "value" : "syncMyContent",
    "myContent": function(){
      this.debCheckChange()
    }
  },
  ///////////////////////////////////////////////////
  created : function() {
    this.debCheckChange = _.debounce(()=>{
      this.checkMyContent()
    }, 500)
  },
  ///////////////////////////////////////////////////
  mounted : function() {
    this.syncMyContent()
  }
  ///////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/text/raw/ti-text-raw.mjs", _M);
})();
//============================================================
// JOIN: ti/text/raw/_com.json
//============================================================
Ti.Preload("ti/com/ti/text/raw/_com.json", {
  "name" : "ti-text-raw",
  "globally" : true,
  "template" : "./ti-text-raw.html",
  "mixins" : ["./ti-text-raw.mjs"]
});
//============================================================
// JOIN: ti/time/ti-time.html
//============================================================
Ti.Preload("ti/com/ti/time/ti-time.html", `<div class="ti-col-data as-time" 
  :class="topClass" 
  :style="topStyle">
  <ti-list v-for="list in theListGroup"
    :key="list.key"
    :data="list.data"
    :display="'text'"
    :current-id="list.currentId"
    :cancelable="false"
    @select="onListSelected(list.key, $event)"/>
</div>`);
//============================================================
// JOIN: ti/time/ti-time.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  props : {
    "value" : {
      type : [String, Number, Date, Ti.Types.Time],
      default : null
    },
    /***
     * Value unit when value is Number
     */
    "valueUnit" : {
      type : String,
      default : "s",
      validator : function(unit) {
        return /^(ms|s|min|hr)$/.test(unit)
      }
    },
    // Display mode
    "mode" : {
      type : String,
      default : "auto",
      /***
       * - `sec`  : "HH:mm:ss"
       * - `min`  : "HH:mm"
       * - `auto` : "HH:mm:ss"
       */
      validator : function(unit) {
        return /^(sec|min|auto)$/.test(unit)
      }
    },
    // the height of drop list
    "width" : {
      type : [Number, String],
      default : null
    },
    // the height of drop list
    "height" : {
      type : [Number, String],
      default : 200
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    topStyle() {
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //------------------------------------------------
    theTime() {
      return Ti.Types.toTime(this.value||0, {
        unit: this.valueUnit
      })
    },
    //------------------------------------------------
    theListGroup() {
      let re = [
        this.createList("hours",   0, 24, this.theTime.hours),
        this.createList("minutes", 0, 60, this.theTime.minutes)
      ]
      if(/^(auto|sec)$/.test(this.mode)) {
        re.push(this.createList("seconds", 0, 60, this.theTime.seconds))
      }
      return re
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    createList(key, fromVal, toVal, currentVal=0) {
      let list = {
        key,
        currentId : `R-${currentVal}`,
        data    : []
      }
      for(let i=fromVal; i<toVal; i++) {
        list.data.push({
          id : `R-${i}`,
          value : i,
          text  : _.padStart(i, 2, '0')
        })
      }
      return list
    },
    //------------------------------------------------
    onListSelected(key, {current}={}) {
      let tm = this.theTime.clone()
      tm[key] = _.get(current, "value") || 0
      this.$notify("change", tm)
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/time/ti-time.mjs", _M);
})();
//============================================================
// JOIN: ti/time/_com.json
//============================================================
Ti.Preload("ti/com/ti/time/_com.json", {
  "name" : "ti-time",
  "globally" : true,
  "template" : "./ti-time.html",
  "mixins" : ["./ti-time.mjs"],
  "components" : ["@com:ti/list"]
});
//============================================================
// JOIN: ti/toggle/ti-toggle.html
//============================================================
Ti.Preload("ti/com/ti/toggle/ti-toggle.html", `<div class="ti-toggle"
  :class="topClass">
  <aside @click.left="onClick"><b></b></aside>
</div>`);
//============================================================
// JOIN: ti/toggle/ti-toggle.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  data : ()=>({
    isOn : false
  }),
  /////////////////////////////////////////
  props : {
    "value" : false,
    "readonly" : false,
    "options" : {
      type: Array,
      default: ()=>[false, true]
    }
  },
  //////////////////////////////////////////
  computed : {
    //......................................
    topClass() {
      return Ti.Css.mergeClassName({
        "is-off" : !this.isOn,
        "is-on"  : this.isOn
      }, this.className)
    }
    //......................................
  },
  //////////////////////////////////////////
  methods : {
    onClick() {
      if(!this.readonly) {
        let v = this.isOn ? 0 : 1
        this.$notify("change", this.options[v])
      }
    }
  },
  //////////////////////////////////////////
  watch : {
    "value" : function() {
      this.isOn = this.value ? true : false
    }
  },
  //////////////////////////////////////////
  mounted : function() {
    this.isOn = this.value ? true : false
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/ti/toggle/ti-toggle.mjs", _M);
})();
//============================================================
// JOIN: ti/toggle/_com.json
//============================================================
Ti.Preload("ti/com/ti/toggle/_com.json", {
  "name" : "ti-toggle",
  "globally" : true,
  "template" : "./ti-toggle.html",
  "mixins" : ["./ti-toggle.mjs"]
});
//============================================================
// JOIN: ti/transfer/ti-transfer-props.mjs
//============================================================
(function(){
const _M = {
  //-----------------------------------
  // Data
  //-----------------------------------
  // option() -> all list
  // option(inputing) -> condition list
  "options" : {
    type : [String, Array, Function, Ti.Dict],
    default : ()=>[]
  },
  "valueBy" : {
    type : [String, Function],
    default : undefined
  },
  "textBy" : {
    type : [String, Function],
    default : undefined
  },
  "iconeBy" : {
    type : [String, Function],
    default : undefined
  },
  "value" : undefined,
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "canComType" : {
    type : String,
    default : undefined
  },
  "canComConf" : {
    type : Object,
    default : undefined
  },
  "selComType" : {
    type : String,
    default : undefined
  },
  "selComConf" : {
    type : Object,
    default : undefined
  },
  "filter" : {
    type : Boolean,
    default : true
  },
  "fltComType" : {
    type : String,
    default : "ti-input"
  },
  "fltComConf" : {
    type : Object,
    default : undefined
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "display" : {
    type : [Object, String, Array],
    default : undefined
  },
  "assignButtons" : {
    type : Object,
    default : ()=>({
      add    : "fas-angle-double-right",
      remove : "fas-angle-double-left"
    })
  },
  "canTitle" : {
    type : String,
    default : "i18n:candidate"
  },
  "selTitle" : {
    type : String,
    default : "i18n:checked"
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width" : {
    type : [Number, String],
    default : null
  },
  "height" : {
    type : [Number, String],
    default : null
  }
}
Ti.Preload("ti/com/ti/transfer/ti-transfer-props.mjs", _M);
})();
//============================================================
// JOIN: ti/transfer/ti-transfer.html
//============================================================
Ti.Preload("ti/com/ti/transfer/ti-transfer.html", `<div class="ti-transfer"
  :class="TopClass"
  :style="TopStyle">
  <!--=========================================
    Left: Candidates
  -->
  <div class="as-box as-can-list">
    <!--
      Head
    -->
    <div class="as-box-head">
      <div class="as-list-checker"
        @click.left="OnClickHeadChecker(can)">
        <ti-icon :value="GetHeadCheckerIcon(can)"/>
      </div>
      <!--Title-->
      <div class="as-title">{{canTitle|i18n}}</div>
      <!--Filter-->
      <div v-if="filter"
        class="as-filter">
          <component 
            :is="fltComType"
            v-bind="FilterComConf"
            :value="myFilterValue"
            @change="OnFilterChanged"
            /></div>
    </div>
    <!--
      component
    -->
    <component :is="CanListComType"
      class="as-box-main ti-fill-parent"
      v-bind="CanListComConf"
      @select="OnCanListSelected"/>
    <!--
      Foot
    -->
    <div class="as-box-foot">
      <span>{{'total-count'|i18n({nb:can.data.length})}}</span>
    </div>
  </div>
  <!--=========================================
    Buttons
  -->
  <div class="as-buttons">
    <!--Add-->
    <div class="as-btn is-add"
      @click.left="canListToSel">
      <ti-icon :value="assignButtons.add"/>
    </div>
    <!--Remove-->
    <div class="as-btn is-remove"
      @click.left="selListToCan">
      <ti-icon :value="assignButtons.remove"/>
    </div>
  </div>
  <!--=========================================
    Right: Checked
  -->
  <div class="as-box as-sel-list">
    <!--
      Head
    -->
    <div class="as-box-head">
      <div class="as-list-checker"
        @click.left="OnClickHeadChecker(sel)">
        <ti-icon :value="GetHeadCheckerIcon(sel)"/>
      </div>
      <div class="as-title">{{selTitle|i18n}}</div>
    </div>
    <!--
      component
    -->
    <component :is="SelListComType"
      class="as-box-main ti-fill-parent"
      v-bind="SelListComConf"
      @select="OnSelListSelected"/>
    <!--
      Foot
    -->
    <div class="as-box-foot">
      <span>{{'total-count'|i18n({nb:sel.data.length})}}</span>
    </div>
  </div>
</div>`);
//============================================================
// JOIN: ti/transfer/ti-transfer.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  ///////////////////////////////////////////////////////
  data : ()=>({
    myFilterValue : null,
    myOptionsData : [],
    can : {
      data : [],
      checkedIds : []
    },
    sel : {
      data : [],
      checkedIds : []
    },
    selIdMap : {}
  }),
  ///////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //------------------------------------------------
    Values() {
      return Ti.S.toArray(this.value)
    },
    //------------------------------------------------
    CanListComType() {return this.canComType || "ti-list"},
    SelListComType() {return this.selComType || "ti-list"},
    //------------------------------------------------
    CanListComConf() {
      return this.genComConf(this.canComConf, this.can)
    },
    SelListComConf() {
      return this.genComConf(this.selComConf, this.sel)
    },
    //------------------------------------------------
    FilterComConf() {
      return _.assign({
        trimed      : true,
        width       : "100%",
        prefixIcon  : "zmdi-filter-list",
        placeholder : "i18n:filter",
        hover       : ['prefixIcon','suffixText','suffixIcon']
      }, this.fltComConf)
    },
    //------------------------------------------------
    GetValueBy() {
      return it => this.Dict.getValue(it)
    },
    //------------------------------------------------
    Dict() {
      // Customized
      if(this.options instanceof Ti.Dict) {
        return this.options
      }
      // Refer dict
      if(_.isString(this.options)) {
        let dictName = Ti.DictFactory.DictReferName(this.options)
        if(dictName) {
          return Ti.DictFactory.CheckDict(dictName, ({loading}) => {
            this.loading = loading
          })
        }
      }
      // Auto Create
      return Ti.DictFactory.CreateDict({
        data: this.options,
        getValue : Ti.Util.genGetter(this.valueBy || "value"),
        getText  : Ti.Util.genGetter(this.textBy  || "text|name"),
        getIcon  : Ti.Util.genGetter(this.textBy  || "icon")
      })
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods : {
    //---------------------------------------------------
    OnCanListSelected({checkedIds}) {
      this.can.checkedIds = this.getIds(checkedIds)
    },
    //---------------------------------------------------
    OnSelListSelected({checkedIds}) {
      this.sel.checkedIds = this.getIds(checkedIds)
    },
    //---------------------------------------------------
    OnClickHeadChecker(list) {
      let {data, checkedIds} = list
      // All -> none
      if(data.length == checkedIds.length) {
        list.checkedIds = []
      }
      // Others to All
      else {
        let idMap = this.rebuildIdMap(data)
        list.checkedIds = this.getIds(idMap)
      }
    },
    //---------------------------------------------------
    async OnFilterChanged(val) {
      this.myFilterValue = val
      this.myOptionsData = await this.Dict.queryData(val)
      this.evalShownCanList()
    },
    //---------------------------------------------------
    GetHeadCheckerIcon({data, checkedIds}) {
      if(data.length > 0) {
        // All
        if(data.length == checkedIds.length) {
          return "fas-check-square"
        }
        // Partally
        if(checkedIds.length > 0) {
          return  "fas-minus-square"
        }
      }
      return "far-square" // none
    },
    //---------------------------------------------------
    // Core Methods
    //---------------------------------------------------
    canListToSel() {
      // Guard
      if(_.isEmpty(this.can.checkedIds))
        return
      // Assign
      let {src, tag} = this.assignToList(this.can, this.sel)
      this.can = src
      this.sel = tag
    },
    //---------------------------------------------------
    selListToCan() {
      // Guard
      if(_.isEmpty(this.sel.checkedIds))
        return
      // Assign
      let {src, tag} = this.assignToList(this.sel,this.can)
      this.can = tag
      this.sel = src
    },
    //---------------------------------------------------
    // Utility
    //---------------------------------------------------
    assignToList({data, checkedIds}, ta) {
      // Make ids map
      let ids = {}
      _.forEach(checkedIds, v=>ids[v]=true)
      // pick remove list
      let remains = []
      let joins = []
      _.forEach(data, it => {
        let itV = this.Dict.getValue(it)
        if(ids[itV]) {
          joins.push(it)
        } else {
          remains.push(it)
        }
      })
      // Merge checked ids
      _.forEach(ta.checkedIds, v=>ids[v]=true)
      // Join to new list
      return {
        src : {
          data: remains, checkedIds: []
        },
        tag : {
          data      : _.concat(ta.data, joins),
          checkedIds: _.keys(ids)
        }
      }
    },
    //---------------------------------------------------
    genComConf(comConf, {data, checkedIds}) {
      return _.assign({
        idBy      : this.GetValueBy,
        display   : this.display || "text"
      }, comConf, {
        data,  checkedIds,
        multi            : true,
        checkable        : true,
        puppetMode       : true,
        autoCheckCurrent : false,
      })
    },
    //---------------------------------------------------
    evalShownCanList() {
      let list = []
      _.forEach(this.myOptionsData, it => {
        let itV = this.Dict.getValue(it)
        if(!this.selIdMap[itV]) {
          list.push(it)
        }
      })
      this.can.data = list
      this.can.checkedIds = []
    },
    //---------------------------------------------------
    async reloadCanList() {
      //console.log("reloadCanList")
      this.myOptionsData = await this.Dict.queryData(this.myFilterValue)
      this.evalShownCanList()
    },
    //---------------------------------------------------
    async reloadSelList(vals=this.Values) {
      //console.log("reloadSelList")
      let list = []
      for(let v of vals) {
        let it = await this.Dict.getItem(v)
        if(it) {
          list.push(it)
        } else {
          list.push(v)
        }
      }
      this.sel = {
        data: list,
        checkedIds : []
      }
    },
    //---------------------------------------------------
    rebuildIdMap(data) {
      let ids = {}
      _.forEach(data, it => {
        let itV = this.Dict.getValue(it)
        ids[itV] = true
      })
      return ids
    },
    //---------------------------------------------------
    rebuildSelIdMap() {
      this.selIdMap = this.rebuildIdMap(this.sel.data)
    },
    //---------------------------------------------------
    getIds(idMap) {
      let ids = []
      _.forEach(idMap, (v, id)=>{
        if(v)
          ids.push(id)
      })
      return ids
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  watch : {
    "value" : function(newVal, oldVal) {
      if(!_.isEqual(newVal, oldVal)) {
        this.reloadSelList()
      }
    },
    "options" : function(newVal, oldVal) {
      if(!_.isEqual(newVal, oldVal)) {
        this.reloadCanList()
      }
    },
    "sel.data" : function() {
      this.rebuildSelIdMap()
      let ids = _.keys(this.selIdMap)
      if(!_.isEqual(ids, this.Values)) {
        this.$notify("change", ids)
      }
    }
  },
  ///////////////////////////////////////////////////////
  mounted : async function() {
    await this.reloadSelList()
    await this.reloadCanList()
  }
  ///////////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/transfer/ti-transfer.mjs", _M);
})();
//============================================================
// JOIN: ti/transfer/_com.json
//============================================================
Ti.Preload("ti/com/ti/transfer/_com.json", {
  "name" : "ti-transfer",
  "globally" : true,
  "template" : "./ti-transfer.html",
  "props" : "./ti-transfer-props.mjs",
  "mixins" : ["./ti-transfer.mjs"]
});
//============================================================
// JOIN: ti/tree/ti-tree.html
//============================================================
Ti.Preload("ti/com/ti/tree/ti-tree.html", `<ti-table
  class="ti-tree"
  :class="TopClass"
  id-by="id"
  icon-by="icon"
  indent-by="indent"
  raw-data-by="rawData"
  :fields="TableFields"
  :data="myTreeTableData"
  :changed-id="changedId"
  :current-id="currentId"
  :checked-ids="checkedIds"
  :multi="multi"
  :checkable="checkable"
  :selectable="selectable"
  :cancelable="cancelable"
  :hoverable="hoverable"
  :puppet-mode="puppetMode"
  :width="width"
  :height="height"
  :head="TableHead"
  :border="border"
  :blank-as="blankAs"
  :auto-scroll-into-view="autoScrollIntoView"
  @icon="OnRowIconClick"
  @open="OnRowOpen"
  @select="OnRowSelect"
  @cell:item:change="OnCellItemChange"/>
  `);
//============================================================
// JOIN: ti/tree/ti-tree.mjs
//============================================================
(function(){
const TI_TREE = {
  //////////////////////////////////////////
  data : ()=>({
    "myTreeTableData"   : [],
    "myOpenedNodePaths" : {},
    "myCurrentId"       : null
  }),
  //////////////////////////////////////////
  props : {
    "nodeClassName" : {
      type : String,
      default : null
    },
    // The list to be rendered
    "data" : {
      type : [Object, Array],
      default : null
    },
    "idBy" : {
      type : [String, Function],
      default : "id"
    },
    "nameBy" : {
      type : [String, Function],
      default : "name"
    },
    "childrenBy" : {
      type : [String, Function],
      default : "children"
    },
    "leafBy" : {
      type    : [String, Function],
      default : "!children"
    },
    "title" : {
      type : String,
      default : 'i18n:title'
    },
    "mainWidth" : {
      type : [String, Number],
      default : 'stretch'
    },
    "display" : {
      type : [String, Object, Array],
      default : "name"
    },
    // Default to open the node in depth.
    // the top node depth is 1, which is eqausl the path array length.
    // If 0, it will close all top leavel nodes
    "defaultOpenDepth" : {
      type : Number,
      default : 0
    },
    // Local store to save the tree open status
    "keepOpenBy" : {
      type : String,
      default : null
    },
    "keepCurrentBy" : {
      type : String,
      default : null
    },
    "changedId" : {
      type : String,
      default : null
    },
    "currentId" : {
      type : String,
      default : null
    },
    "checkedIds" : {
      type : Array,
      default : ()=>[]
    },
    "openedNodePaths" : {
      type : Object,
      default : ()=>({})
    },
    "multi" : {
      type : Boolean,
      default : false
    },
    "checkable" : {
      type : Boolean,
      default : false
    },
    // select item
    "selectable" : {
      type : Boolean,
      default : true
    },
    "cancelable" : {
      type : Boolean,
      default : true
    },
    "hoverable" : {
      type : Boolean,
      default : false
    },
    "width" : {
      type : [String, Number],
      default : null
    },
    "puppetMode" : {
      type : Boolean,
      default : false
    },
    "height" : {
      type : [String, Number],
      default : null
    },
    "autoScrollIntoView" : {
      type : Boolean,
      default : true
    },
    "autoOpen" : {
      type : Boolean,
      default : false
    },
    "showRoot" : {
      type : Boolean,
      default : true
    },
    "nodeHandleIcons" : {
      type : Array,
      default : ()=>[
        "zmdi-chevron-right",
        "zmdi-chevron-down"]
    },
    "border" : {
      type : String,
      default : "column",
      validator : v => /^(row|column|cell|none)$/.test(v)
    },
    // "extendFunctionSet" : {
    //   type : Object,
    //   default : ()=>({})
    // },
    "fields" : {
      type : Array,
      default : ()=>[]
    },
    "blankAs" : undefined
  },
  //////////////////////////////////////////
  watch : {
    
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return Ti.Css.mergeClassName({
        "is-selectable"  : this.selectable,
        "is-hoverable"   : this.hoverable
      }, this.className)
    },
    //--------------------------------------
    getNodeId() {
      if(_.isFunction(this.idBy)) {
        return (it)=>this.idBy(it)
      }
      return (it)=>_.get(it, this.idBy)
    },
    //--------------------------------------
    getNodeName() {
      if(_.isFunction(this.nameBy)) {
        return it => this.nameBy(it)
      }
      return it => _.get(it, this.nameBy)
    },
    //--------------------------------------
    isNodeLeaf() {
      if(_.isFunction(this.leafBy)) {
        return it => (this.leafBy(it) ? true : false)
      }
      // Not
      let m = /^(!)?(.+)$/.exec(this.leafBy)
      let isNot = m[1] ? true : false
      let keyPath = _.trim(m[2])
      return it => (_.get(it, keyPath) ? !isNot : isNot)
    },
    //--------------------------------------
    getNodeChildren() {
      if(_.isFunction(this.childrenBy)) {
        return it => this.childrenBy(it)
      }
      return it => _.get(it, this.childrenBy)
    },
    //--------------------------------------
    isTable() {
      return _.isArray(this.fields) && !_.isEmpty(this.fields)
    },
    //--------------------------------------
    TableHead() {
      if(this.isTable) {
        return "frozen"
      }
      return "none"
    },
    //--------------------------------------
    TableFields() {
      let mainCol = {
        title   : this.title,
        width   : this.mainWidth,
        nowrap  : true,
        display : this.display
      }
      if(this.isTable) {
        return _.concat(mainCol, this.fields)
      }
      return [mainCol]
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    async evalTreeTableData() {
      // if(_.get(this.data, "value.title"))
      //     console.log("evalTreeTableData", _.get(this.data, "value.title"))
      let tableData = []

      //if(this.showRoot)
      //console.log("evalTreeTableData", this.data)

      // Array push to root
      if(_.isArray(this.data)) {
        await this.joinTreeTableRow(tableData, {}, null, this.data)
      }
      // already has root
      else if(this.data){
        await this.joinTreeTableRow(tableData, this.data, null)
      }

      this.myTreeTableData = tableData
    },
    //--------------------------------------
    async joinTreeTableRow(rows=[], item={}, path=[], children) {
      // if(this.showRoot)
      //console.log("joinTreeTableRow", item)
      let self = {}
      //....................................
      // For ROOT
      if(!path) {
        self.name = this.getNodeName(item) || "$ROOT$"
        self.path = []
        self.pathId = "/"
        self.id = Ti.Util.fallbackNil(this.getNodeId(item), self.pathId)
        self.indent = 0
        self.leaf   = false
        self.opened = !this.showRoot
          ? true 
          : Ti.Util.fallback(
              this.myOpenedNodePaths[self.pathId], 
              self.indent < this.defaultOpenDepth);
        self.icon   = self.leaf ? true : this.nodeHandleIcons[self.opened ? 1 : 0]
      }
      // Others node
      else {
        self.name   = this.getNodeName(item)
        self.path   = _.concat(path, self.name)
        self.pathId = self.path.join("/")
        self.id = Ti.Util.fallbackNil(this.getNodeId(item), self.pathId)
        self.indent = self.path.length
        self.leaf   = this.isNodeLeaf(item)
        self.opened = Ti.Util.fallback(
          this.myOpenedNodePaths[self.pathId], 
          self.indent < this.defaultOpenDepth);
        self.icon   = self.leaf ? true : this.nodeHandleIcons[self.opened ? 1 : 0]
      }
      //....................................
      // Join the rawData
      self.rawData = item
      //....................................
      // Add root if necesssary
      if(this.showRoot) {
        rows.push(self)
      }
      // If not show root, minus depth
      else {
        self.indent --
        if(self.indent >= 0) {
          rows.push(self)
        }
      }
      //....................................
      // Join Children
      if(self.opened && !self.leaf) {
        if(!children) {
          children = await this.getNodeChildren(item)
        }
        if(_.isArray(children)) {
          for(let child of children) {
            await this.joinTreeTableRow(rows, child, self.path)
          }
        }
      }
      //....................................
    },
    //--------------------------------------
    findTableRow(rowId) {
      if(!Ti.Util.isNil(rowId)) {
        for(let row of this.myTreeTableData) {
          if(row.id == rowId) {
            return row
          }
        }
      }
    },
    //--------------------------------------
    OnCellItemChange({name, value, rowId}={}) {
      //console.log("OnCellItemChange", {name, value, rowId})
      let row = this.findTableRow(rowId)
      if(row) {
        this.$notify("node:item:change", {
          name,
          value,
          node   : row,
          nodeId : rowId,
          data   : row.rawData
        })
      }
    },
    //--------------------------------------
    OnRowSelect({currentId, checkedIds={}}={}) {
      let current, node, selected=[]
      
      // Has selected
      if(currentId) {
        let currentRow;
        for(let row of this.myTreeTableData) {
          if(row.id == currentId) {
            currentRow = row
            current = row.rawData
          }
          if(checkedIds[row.id]) {
            selected.push(row.rawData)
          }
        }
        // Auto Open
        if(currentRow && this.autoOpen) {
          this.openRow(currentRow)
        }
        // Store current Id
        this.myCurrentId = _.get(currentRow, "id")
        node = currentRow
      }
      // Cancel current row
      else {
        this.myCurrentId = null
      }
      // Save local status
      if(this.keepCurrentBy) {
        if(!this.puppetMode) {
          Ti.Storage.session.set(this.keepCurrentBy, this.myCurrentId)
        }
      }
      // Emit the value
      this.$notify("select", {
        node,
        current, selected,
        currentId, checkedIds
      })
    },
    //--------------------------------------
    OnRowIconClick({rowId}={}) {
      let row = this.findTableRow(rowId)
      // Open it
      if(row && !row.leaf && !row.opened) {
        this.openRow(row)
      }
      // Close it
      else {
        this.closeRow(row)
      }
    },
    //--------------------------------------
    OnRowOpen({id}={}) {
      let row = this.findTableRow(id)
      if(row && !row.leaf && !row.opened) {
        this.openRow(row)
      }
    },
    //--------------------------------------
    openRow(rowOrId) {
      let row = _.isString(rowOrId) 
                  ? this.findTableRow(rowOrId)
                  : rowOrId
      if(row && !row.leaf && !row.opened) {
        this.$set(this.myOpenedNodePaths, row.pathId, true)
        // Notify status changed
        this.$notify("opened", row)
        // Save to Local
        this.saveNodeOpenStatus()
      }
    },
    //--------------------------------------
    isOpened(rowOrId) {
      let row = _.isString(rowOrId) 
                  ? this.findTableRow(rowOrId)
                  : rowOrId
      return row ? row.opened : false
    },
    //--------------------------------------
    closeRow(rowOrId) {
      let row = _.isString(rowOrId) 
                  ? this.findTableRow(rowOrId)
                  : rowOrId
      if(row && !row.leaf && row.opened) {
        this.$set(this.myOpenedNodePaths, row.pathId, false)
        // Notify status changed
        this.$notify("closed", row)
        // Save to Local
        this.saveNodeOpenStatus()
      }
    },
    //--------------------------------------
    saveNodeOpenStatus() {
      if(this.keepOpenBy) {
        Ti.Storage.session.setObject(this.keepOpenBy, this.myOpenedNodePaths)
      }
      this.$notify("opened-status:changed", this.myOpenedNodePaths)
    },
    //--------------------------------------
    syncOpenedNodePaths() {
      this.myOpenedNodePaths = _.assign({}, this.openedNodePaths)
    },
    //--------------------------------------
    __ti_shortcut(uniqKey) {
      if("ARROWLEFT" == uniqKey) {
        this.closeRow(this.myCurrentId)
      }

      if("ARROWRIGHT" == uniqKey) {
        this.openRow(this.myCurrentId)
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "data" : async function(newVal, oldVal) {
      if(!_.isEqual(newVal, oldVal)) {
        await this.evalTreeTableData()
      }
    },
    "openedNodePaths" : function(newVal, oldVal) {
      if(!_.isEqual(newVal, oldVal)) {
        //console.log("tree openedNodePaths changed")
        this.syncOpenedNodePaths()
      }
    }
  },
  //////////////////////////////////////////
  mounted : async function() {
    //.................................
    this.syncOpenedNodePaths()
    //.................................
    // Ti.Dom.watchDocument("mouseup", this.__on_mouseup)
    // Recover the open status from local store
    if(this.keepOpenBy) {
      this.myOpenedNodePaths = Ti.Storage.session.getObject(this.keepOpenBy)
      if(!this.puppetMode) {
        this.$notify("opened-status:changed", this.myOpenedNodePaths)
      }
    }
    //................................
    // Eval Data
    await this.evalTreeTableData()
    //................................
    // Watch Deep
    this.$watch("myOpenedNodePaths", ()=>{
      this.evalTreeTableData()
    }, {deep:true})
    //................................
    // Recover the current
    if(this.keepCurrentBy) {
      let currentId = Ti.Storage.session.get(this.keepCurrentBy)
      if(!Ti.Util.isNil(currentId)) {
        this.$nextTick(()=>{
          this.$children[0].selectRow(currentId)
        })
      }
    }
    //................................
  },
  //////////////////////////////////////////
  beforeDestroy : function(){
    //Ti.Dom.unwatchDocument("mouseup", this.__on_mouseup)
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/ti/tree/ti-tree.mjs", TI_TREE);
})();
//============================================================
// JOIN: ti/tree/_com.json
//============================================================
Ti.Preload("ti/com/ti/tree/_com.json", {
  "name" : "ti-tree",
  "globally" : true,
  "template" : "./ti-tree.html",
  "mixins" : ["./ti-tree.mjs"],
  "components" : [
    "@com:ti/table"]
});
//============================================================
// JOIN: ti/upload/file/ti-upload-file.html
//============================================================
Ti.Preload("ti/com/ti/upload/file/ti-upload-file.html", `<div class="ti-upload-file"
  :class="TopClass">
  <!--
    Hidden input file to choose files
  -->
  <input 
    type="file" 
    ref="file" 
    class="ti-hide"
    @change.stop.seft="OnSelectLocalFilesToUpload">
  <!--
    Major preview zone
  -->
  <div ref="thumb"
    class="thumb-con"
    :style="ThumbStyle"
    @click="OnClickToEdit"
    v-drop-files.mask="OnDropFiles">
    <!--
      Preview
    -->
    <ti-obj-thumb 
      :preview="PreviewIcon"
      :progress="progress"
      :show-footer="false"/>
    <!--
      Remove
    -->
    <div ref="actions"
      v-if="isShowRemoveIcon"
        class="thumb-actions"
        :style="ActionsStyle">
        <!--remove-->
        <div class="thumb-opt as-del"
          @click.left.stop="OnRemove">
          <ti-icon value="zmdi-delete"/>
          <span class="it-text">{{'clear'|i18n}}</span>
        </div>
        <!--open-->
        <div class="thumb-opt as-open"
          @click.left.stop="OnOpen">
          <ti-icon value="zmdi-open-in-new"/>
          <span class="it-text">{{'open'|i18n}}</span>
        </div>
    </div>
    <!--//////-->
  </div>
</div>`);
//============================================================
// JOIN: ti/upload/file/ti-upload-file.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  data: ()=>({
    myArea: 0,
    myActionsWidth: 0
  }),
  /////////////////////////////////////////
  props : {
    // The source to display image
    "preview" : {
      type : [String, Object],
      default : null
    },
    // The value must be a LocalFile object
    // to prerender the LocalFile during uploading
    "uploadFile" :{
      type : File,
      default : null
    },
    // Show the process `0.0-1.0` during the uploading
    "progress" : {
      type : Number,
      default : -1
    },
    // Display width
    "width" : {
      type : [String, Number],
      default : 120
    },
    // Display height
    "height" : {
      type : [String, Number],
      default : 120
    },
    // support remove the objects
    "removable" : {
      type : Boolean,
      default : true
    },
    "areaSize": {
      type: Object,
      default: ()=>({
        //xl: (800 * 800),
        xs: (100 * 100),
        sm: (200 * 200),
        md: (400 * 400),
        lg: (600 * 600),
      })
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass(
        `is-area-${this.AreaType}`)
    },
    //--------------------------------------
    AreaType() {
      let AS = this.areaSize;
      let ar = this.myArea
      if(ar <= 0) {
        return "nil"
      }
      if(_.inRange(ar, 0, AS.xs+1))
        return "xs"
      if(_.inRange(ar, AS.xs, AS.sm+1))
        return "sm"
      if(_.inRange(ar, AS.sm, AS.md+1))
        return "md"
      if(_.inRange(ar, AS.md, AS.lg+1))
        return "lg"

      return "xl"
    },
    //--------------------------------------
    ThumbStyle(){
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //--------------------------------------
    ActionsStyle() {
      if(/^(xs|sm)$/.test(this.AreaType)) {
        return {
          right: Ti.Css.toSize(this.myActionsWidth*-1)
        }
      }
    },
    //--------------------------------------
    hasPreview() {
      return this.preview ? true : false
    },
    //--------------------------------------
    isShowRemoveIcon() {
      if(!this.uploadFile && this.hasPreview) {
        return true
      }
      return false
    },
    //--------------------------------------
    PreviewIcon() {
      if(this.uploadFile) {
        return {type:"localFile", value:this.uploadFile}
      }
      // Normal image
      if(this.preview) {
        return this.preview
      }
      // Show Icon
      return "zmdi-plus"
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickToEdit() {
      this.$refs.file.click()
    },
    //--------------------------------------
    async OnDropFiles(files) {
      let file = _.get(files, 0)
      if(file) {
        this.$notify("upload", file)
      }
    },
    //--------------------------------------
    async OnSelectLocalFilesToUpload(evt) {
      await this.OnDropFiles(evt.target.files)
      this.$refs.file.value = ""
    },
    //--------------------------------------
    OnRemove() {
      this.$notify("remove")
    },
    //--------------------------------------
    OnOpen() {
      this.$notify("open")
    },
    //--------------------------------------
    recountArea() {
      let rect = Ti.Rects.createBy(this.$refs.thumb)
      this.myArea = rect.width * rect.height
      if(this.$refs.actions) {
        this.myActionsWidth = this.$refs.actions.getBoundingClientRect().width
      } else {
        this.myActionsWidth = 0
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "preview": function() {
      this.$nextTick(()=>this.recountArea())
    }
  },
  //////////////////////////////////////////
  mounted: function() {
    this.$nextTick(()=>this.recountArea())
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/ti/upload/file/ti-upload-file.mjs", _M);
})();
//============================================================
// JOIN: ti/upload/file/_com.json
//============================================================
Ti.Preload("ti/com/ti/upload/file/_com.json", {
  "name" : "ti-upload-file",
  "globally" : true,
  "template" : "./ti-upload-file.html",
  "mixins" : ["./ti-upload-file.mjs"]
});
//============================================================
// JOIN: ti/wall/com/wall-tile/wall-tile.html
//============================================================
Ti.Preload("ti/com/ti/wall/com/wall-tile/wall-tile.html", `<div class="wall-tile"
  :class="TopClass"
  :style="TopStyle">
  <div v-if="myCom"
    class="tile-con"
    @click.left="OnClickRow"
    @dblclick.left="OnDblClickRow"
    v-ti-activable>
    <component   
      :is="myCom.comType" 
      v-bind="myCom.comConf"/>
  </div>
</div>`);
//============================================================
// JOIN: ti/wall/com/wall-tile/wall-tile.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////////////
  inject: ["$wall"],
  ///////////////////////////////////////////////////
  data : ()=>({
    myCom : null
  }),
  ///////////////////////////////////////////////////
  props : {
    "display" : {
      type : Object,
      default : null
    },
    // Wall-Tile width
    "width" : {
      type : [String, Number],
      default : null
    },
    // Wall-Tile height
    "height" : {
      type : [String, Number],
      default : null
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    TopClass() {
      return this.getListItemClass()
    },
    //--------------------------------------
    TopStyle() {
      let css = {}
      if(this.width) {
        css.width = this.width
      }
      if(this.height) {
        css.height = this.height
      }
      return Ti.Css.toStyle(css)
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    async evalMyDisplayCom() {
      //console.log("evalMyDisplayCom", this.data)
      this.$wall.reportReady(this.index, !Ti.Util.isNil(this.myCom))
      let com = await this.evalDataForFieldDisplayItem({
        itemData : this.data, 
        displayItem : this.display, 
        vars : {
          "isCurrent" : this.isCurrent,
          "isChecked" : this.isChecked,
          "isChanged" : this.isChanged,
          "isActived" : this.isActived,
          "rowId"     : this.rowId,
          ... this.$vars
        }
      })

      // Update and return
      let old = Ti.Util.pureCloneDeep(this.myCom)
      let nit = Ti.Util.pureCloneDeep(com)
      if(!_.isEqual(old, nit)) {
        //console.log(`-> Cell[${this.rowIndex}-${this.index}]:`, {old, nit})
        this.myCom = com
      }
      // report ready
      this.$wall.reportReady(this.index, true)
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "data" : {
      handler : "evalMyDisplayCom",
      immediate : true
    },
    "isCurrent" : "evalMyDisplayCom",
    "isChecked" : "evalMyDisplayCom"
  }
  ///////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/wall/com/wall-tile/wall-tile.mjs", _M);
})();
//============================================================
// JOIN: ti/wall/com/wall-tile/_com.json
//============================================================
Ti.Preload("ti/com/ti/wall/com/wall-tile/_com.json", {
  "name" : "wall-tile",
  "globally" : false,
  "template" : "./wall-tile.html",
  "methods"  : "@com:ti/support/field_display.mjs",
  "mixins" : [
    "@com:ti/support/list_item_mixins.mjs",
    "./wall-tile.mjs"]
});
//============================================================
// JOIN: ti/wall/ti-wall.html
//============================================================
Ti.Preload("ti/com/ti/wall/ti-wall.html", `<div class="ti-wall" 
  :class="TopClass"
  @click="OnClickTop"
  v-ti-activable>
  <!--
    Blank
  -->
  <ti-loading 
    v-if="isDataEmpty"
      class="nil-data"
      :class="'as-'+blankClass"
      v-bind="blankAs"/>
  <!--
    Show tiles
  -->
  <template v-else>
    <!--tiles-->
    <wall-tile
      v-for="row in TheData"
        :key="row.id"
        :row-id="row.id"
        :index="row.index"
        :display="ItemDisplay"
        :data="row.rawData"
        :current-id="theCurrentId"
        :checked-ids="theCheckedIds"
        :changed-id="changedId"
        :checkable="checkable"
        :selectable="selectable"
        :openable="openable"
        :class-name="itemClassName"
        :width="itemWidth"
        :height="itemHeight"
        @select="OnRowSelect"
        @open="OnRowOpen"/>
    <!--Blank Tile-->
    <div v-for="bc in BlankCols"
      class="wall-tile"
      :style="bc">
    </div>
  </template>
</div>`);
//============================================================
// JOIN: ti/wall/ti-wall.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////////////
  provide : function(){
    return {
      "$wall" : this
    }
  },
  //////////////////////////////////////////
  data : ()=>({
    myData : [],

    myColCount : 0,
    myColWidth : 0,
    isOnlyOneRow : false,

    myCellsReport : {},
    myNeedResize : true
  }),
  //////////////////////////////////////////
  props : {
    "itemClassName" : undefined,
    "display" : {
      type : [Object, String],
      default : ()=>({
        key : "..",
        comType : "ti-label"
      })
    },
    "border" : {
      type : Boolean,
      default : true
    },
    // aspect: list item spacing
    // `no|xs|sm|md|lg|xl`
    "spacing" : {
      type : String,
      default : "sm"
    },
    // Wall-Tile width
    "itemWidth" : {
      type : [String, Number],
      default : null
    },
    // Wall-Tile height
    "itemHeight" : {
      type : [String, Number],
      default : null
    },
    "resizeDelay" : {
      type : Number,
      default : 0
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-hoverable"    : this.hoverable,
        "show-border"     : this.border,
        "is-only-one-row" : this.isOnlyOneRow,
        "is-multi-rows"   : !this.isOnlyOneRow
      }, [
        `spacing-${this.spacing}`
      ])
    },
    //--------------------------------------
    ItemDisplay() {
      return this.evalFieldDisplayItem(this.display)
    },
    //--------------------------------------
    TheData() {
      return this.myData
    },
    //--------------------------------------
    ListRealCount() {
      return this.TheData.length
    },
    //--------------------------------------
    BlankCols() {
      let list = []
      if(!_.isEmpty(this.TheData) 
        && this.myColCount > 0 
        && this.myColWidth > 1
        && !this.isOnlyOneRow) {
        // get list real count
        let n = this.ListRealCount % this.myColCount
        if(n > 0) {
          let nr = this.myColCount - n
          for(let i=0; i<nr; i++) {
            list.push({
              width : `${this.myColWidth}px`
            })
          }
        }
      }
      //console.log(list)
      return list
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickTop($event) {
      if(this.cancelable) {
        // Click The body or top to cancel the row selection
        if(Ti.Dom.hasOneClass($event.target,
            'ti-wall', 'wall-tile')) {
          this.cancelRow()
        }
      }
    },
    //--------------------------------------
    OnWallResize() {
      //console.log("OnWallResize")
      let $divs = Ti.Dom.findAll(":scope > .wall-tile", this.$el)
      // Guard empty
      if(_.isEmpty($divs)) 
        return
      // Eval the cols and width
      //console.log("  ~~~ do", this.data)
      let cols  = 0
      let width = 1
      let top = -1
      let isOnlyOneRow = true
      for(let $div of $divs) {
        let rect = $div.getBoundingClientRect()
        if(top < 0) {
          top  = rect.top
        }
        if(top == rect.top) {
          cols ++
          width = Math.max(rect.width, width)
        }
        // Find the next row
        else {
          isOnlyOneRow = false
          break
        }
      }
      //console.log({cols, width, top})
      if(width > 1) {
        this.myColCount = cols
        this.myColWidth = width
        this.isOnlyOneRow = isOnlyOneRow
      }
    },
    //--------------------------------------
    reportReady(rowIndex=-1, isDone=false) {
      let key = `R${rowIndex}`
      //console.log(key, isDone)
      if(isDone) {
        delete this.myCellsReport[key]
      } else {
        this.myCellsReport[key] = false
        this.myNeedResize = true
      }
      // Check the status
      if(isDone) {
        _.delay(()=>{
          let allReady = _.isEmpty(this.myCellsReport)
          // Do resize
          if(allReady && this.myNeedResize) {
            _.delay(()=>{
              this.OnWallResize()
            }, this.resizeDelay)
            this.myNeedResize = false
          }
        })
      }
    },
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "data" : {
      handler : async function(newVal, oldVal){
        let isSame = _.isEqual(newVal, oldVal)
        if(!isSame) {
          //console.log("!!!wall data changed", {newVal, oldVal})
          this.myData = await this.evalData()
        }
      },
      immediate : true
    }
  },
  //////////////////////////////////////////
  mounted : function() {
    //.................................
    Ti.Viewport.watch(this, {
      resize : _.debounce(()=>this.OnWallResize(), 20)
    })
    //.................................
  },
  //////////////////////////////////////////
  destroyed : function() {
    Ti.Viewport.unwatch(this)
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/ti/wall/ti-wall.mjs", _M);
})();
//============================================================
// JOIN: ti/wall/_com.json
//============================================================
Ti.Preload("ti/com/ti/wall/_com.json", {
  "name" : "ti-wall",
  "globally" : true,
  "template" : "./ti-wall.html",
  "props" : "@com:ti/support/list_props.mjs",
  "methods" : "@com:ti/support/field_display.mjs",
  "mixins" : [
    "@com:ti/support/list_mixins.mjs",
    "./ti-wall.mjs"
  ],
  "components" : [
    "./com/wall-tile",
    "@com:ti/label"
  ]
});
//============================================================
// JOIN: ti/wizard/com/wizard-step/wizard-step.html
//============================================================
Ti.Preload("ti/com/ti/wizard/com/wizard-step/wizard-step.html", `<component 
  class="ti-fill-parent"
  :is="comType"
  v-bind="comConf"
  @change="OnChange"/>`);
//============================================================
// JOIN: ti/wizard/com/wizard-step/wizard-step.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////////////
  props : {
    "index" : {
      type : Number,
      default : -1
    },
    "stepKey" : {
      type : String,
      default : null
    },
    "title" : {
      type : String,
      default : null
    },
    "serializer": {
      type: Function,
      default: null
    },
    "comType" : {
      type : String,
      default : "ti-label"
    },
    "comConf" : {
      type : Object,
      default : ()=>({})
    }
  },
  ///////////////////////////////////////////////////
  methods : {
    //----------------------------------------------
    OnChange(payload) {
      if(_.isFunction(this.serializer)) {
        payload = this.serializer(payload)
      }
      this.$emit("data:change", payload)
    }
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "title": {
      handler: function(){
        this.$notify("change:title", this.title)
      },
      immediate: true
    }
  }
  ///////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/wizard/com/wizard-step/wizard-step.mjs", _M);
})();
//============================================================
// JOIN: ti/wizard/com/wizard-step/_com.json
//============================================================
Ti.Preload("ti/com/ti/wizard/com/wizard-step/_com.json", {
  "name" : "wizard-step",
  "globally" : true,
  "template" : "./wizard-step.html",
  "mixins" : ["./wizard-step.mjs"]
});
//============================================================
// JOIN: ti/wizard/ti-wizard.html
//============================================================
Ti.Preload("ti/com/ti/wizard/ti-wizard.html", `<div class="ti-wizard ti-fill-parent"
  :class="TopClass"><div class="wizard-con">
  <!--
    Header Indicators
  -->
  <div class="as-head">
    <!--Title-->
    <div
      v-if="TheTitle" 
        class="as-title">{{TheTitle | i18n}}</div>
    <!--Step indicators-->
    <ul>
      <li v-for="(step, index) in StepHeads"
        :key="step.stepKey"
        :class="step.className"
        @click.left="OnClickHeadItem(index, step)">
        <span class="as-indicator">
          <span class="as-line at-l"></span>
          <span class="as-dot">{{index+1}}</span>
          <span class="as-line at-r"></span>
        </span>
        <span class="as-text">{{step.title | i18n}}</span>
      </li>
    </ul>
  </div>
  <!--
    Current Step Component
  -->
  <div class="as-main">
    <WizardStep 
      v-bind="CurrentStep"
      @data:change="OnDataChange"
      @step:change="OnStepChange"
      @change:title="OnTitleChange"/>
  </div>
  <!--
    Footer Default Buttons
  -->
  <div v-if="BtnPrev || BtnNext"
    class="as-foot">
      <!--
        Btn: Prev
      -->
      <div
        v-if="BtnPrev" 
          class="as-btn is-prev"
          :class="BtnPrev.className"
          @click="OnClickBtnPrev">
          <span v-if="BtnPrev.icon"
            class="as-icon">
            <ti-icon :value="BtnPrev.icon"/>
          </span>
          <span class="as-sep"></span>
          <span class="as-text">{{BtnPrev.text|i18n}}</span>
      </div>
      <!--Sep-->
      <div class="as-space"></div>
      <!--
        Btn: Next
      -->
      <div
        v-if="BtnNext" 
          class="as-btn is-next"
          :class="BtnNext.className"
          @click="OnClickBtnNext">
          <span v-if="BtnNext.icon"
            class="as-icon">
            <ti-icon :value="BtnNext.icon"/>
          </span>
          <span class="as-sep"></span>
          <span class="as-text">{{BtnNext.text|i18n}}</span>
      </div>
  </div>
</div></div>`);
//============================================================
// JOIN: ti/wizard/ti-wizard.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////////////
  data: () => ({
    myCurrent: undefined,
    myTitle: undefined
  }),
  ///////////////////////////////////////////////////
  props : {
    "title" : {
      type: String,
      default: undefined
    },
    "steps" : {
      type : Array,
      default : ()=>[]
    },
    "value" : {
      type : Object,
      default : ()=>({})
    },
    "current" : {
      type : [Number, String],
      default : 0
    },
    "canClickHeadItem" : {
      type : String,
      default : null
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //----------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //----------------------------------------------
    StepList() {
      let list = []
      if(_.isArray(this.steps)) {
        for(let i=0; i<this.steps.length; i++) {
          let step = this.steps[i]
          let stepKey = step.key || `step${i}`
          // Join to the list
          list.push({
            index     : i,
            stepKey   : stepKey,
            title     : step.title   || stepKey,
            comType   : step.comType || "ti-label",
            comConf   : step.comConf,
            serializer: step.serializer,
            prev : step.prev,
            next : step.next
          })
        }
      }
      return list
    },
    //----------------------------------------------
    StepHeads() {
      let list = []
      if(_.isArray(this.steps)) {
        for(let step of this.StepList) {
          let className = []
          if(this.CurrentStepIndex == step.index) {
            className.push("is-current")
          }
          else if(step.index > this.CurrentStepIndex) {
            className.push("is-future")
          }
          else {
            className.push("is-passed")
          }
          // Join to the list
          list.push(_.assign({}, step, {className}))
        }
      }
      return list
    },
    //----------------------------------------------
    CurrentStepIndex() {
      return this.CurrentStep
                ? this.CurrentStep.index
                : -1
    },
    //----------------------------------------------
    hasCurrentStep() {
      return this.CurrentStep ? true : false
    },
    //----------------------------------------------
    TheTitle() {
      return this.myTitle || this.title
    },
    //----------------------------------------------
    CurrentStep() {
      let cs = Ti.Util.fallback(this.myCurrent, this.current)
      let step = _.cloneDeep(this.getStep(cs))

      // Eval serializer
      let serializer = step.serializer
        ? Ti.Util.genInvoking(step.serializer, {
            context: this.value,
            partialRight: true
          })
        : _.identity;
      // Eval comConf
      let comConf = Ti.Util.explainObj(this.value, step.comConf)

      return _.assign({}, step, {
        serializer, comConf
      })
    },
    //----------------------------------------------
    BtnPrev() {
      let btn = _.get(this.CurrentStep, "prev")
      return this.getStepAction(btn, {
        icon     : "zmdi-chevron-left",
        text     : "i18n:prev",
        enabled  : true
      })
    },
    //----------------------------------------------
    BtnNext() {
      let btn = _.get(this.CurrentStep, "next")
      return this.getStepAction(btn, {
        icon     : "zmdi-chevron-right",
        text     : "i18n:next",
        enabled  : true,
        reverse  : _.get(btn, "icon") ? false : true
      })
    }
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //----------------------------------------------
    OnTitleChange(title) {
      this.myTitle = title
    },
    //----------------------------------------------
    OnDataChange(payload) {
      //console.log("wizard:OnStepDataChange", payload)
      let newData = _.assign({}, this.value, payload)
      this.$notify("change", newData)
    },
    //----------------------------------------------
    OnStepChange(payload) {
      // Prev
      if("@prev" == payload) {
        this.gotoFromCurrent(-1)
      }
      // Next
      else if("@next" == payload) {
        this.gotoFromCurrent(1)
      }
      // absolute step
      else {
        this.gotoStep(payload)
      }
    },
    //----------------------------------------------
    OnClickHeadItem(index) {
      // Can Click Passed Steps
      if("passed" == this.canClickHeadItem 
        && this.CurrentStepIndex > index) {
        this.gotoStep(index)
      }
    },
    //----------------------------------------------
    OnClickBtnPrev() {
      if(this.BtnPrev && this.BtnPrev.enabled) {
        if(this.BtnPrev.handler) {
          let invoking = Ti.Util.genInvoking(this.BtnPrev.handler, {
            context: this.value
          })
          invoking.apply(this)
        } else {
          this.gotoFromCurrent(-1)
        }
      }
    },
    //----------------------------------------------
    OnClickBtnNext() {
      if(this.BtnNext && this.BtnNext.enabled) {
        if(this.BtnNext.handler) {
          let invoking = Ti.Util.genInvoking(this.BtnNext.handler, {
            context: this.value
          })
          invoking.apply(this)
        } else {
          this.gotoFromCurrent(1)
        }
      }
    },
    //----------------------------------------------
    //
    // Utility Methods
    //
    //----------------------------------------------
    getStep(keyOrIndex) {
      // By Index: -1 is the last item
      if(_.isNumber(keyOrIndex)) {
        let i = Ti.Num.scrollIndex(keyOrIndex, this.StepList.length)
        if(i>=0)
          return this.StepList[i]
      }
      // By Key
      else {
        for(let step of this.StepList) {
          if(step.stepKey == keyOrIndex) {
            return step
          }
        }
      }
      // Return undefined
    },
    //----------------------------------------------
    gotoStep(keyOrIndex) {
      let step = this.getStep(keyOrIndex)
      if(step) {
        let oldStep = _.cloneDeep(this.CurrentStep)
        this.myCurrent = step.index
        this.$notify("step:chanage", {
          index: step.index,
          step,
          oldStep
        })
      }
    },
    //----------------------------------------------
    gotoFromCurrent(off=1) {
      if(this.CurrentStep) {
        let nextStepIndex = this.CurrentStep.index + off
        this.gotoStep(nextStepIndex)
      }
    },
    //----------------------------------------------
    getStepAction(stepBtn, dftSetting={}) {
      if(stepBtn) {
        let btn
        // Boolean default
        if(_.isBoolean(stepBtn)) {
          btn = {}
        }
        // Customized Text 
        else if(_.isString(stepBtn)) {
          btn = {text : stepBtn || dftText}
        }
        // Actions
        else {
          btn = _.assign({}, stepBtn)
          // Eval enabled
          if(_.isPlainObject(btn.enabled)) {
            btn.enabled = Ti.Validate.match(this.value, btn.enabled)
          }
          // Customized
          else if(_.isFunction(btn.enabled)) {
            btn.enabled = btn.enabled()
          }
        }
        // Setup 
        _.defaults(btn, dftSetting)
        btn.className = Ti.Css.mergeClassName(btn.className)
        // ClassName
        if(btn.enabled) {
          btn.className["is-enabled"] = true
        }
        // Revers
        if(btn.reverse) {
          btn.className["is-reverse"] = true
        }

        // Return 
        return btn
      }
    }
    //----------------------------------------------
  }
  ///////////////////////////////////////////////////
}
Ti.Preload("ti/com/ti/wizard/ti-wizard.mjs", _M);
})();
//============================================================
// JOIN: ti/wizard/_com.json
//============================================================
Ti.Preload("ti/com/ti/wizard/_com.json", {
  "name" : "ti-wizard",
  "globally" : true,
  "template" : "./ti-wizard.html",
  "mixins" : ["./ti-wizard.mjs"],
  "components" : [
    "./com/wizard-step"]
});
//============================================================
// JOIN: web/auth/passwd/auth-passwd.html
//============================================================
Ti.Preload("ti/com/web/auth/passwd/auth-passwd.html", `<div 
  class="web-auth-passwd web-simple-form" 
  :class="TopClass">
  <!--
    Reset Success
  -->
  <template v-if="doing">
    <div class="as-ing">
      <ti-loading class="as-hug" text="auth-reset-passwd-ing"/>
    </div>
  </template>
  <!--
    Reset Success
  -->
  <template v-else-if="myResetResult">
    <div
      class="as-done"
      :class="ResetDoneClass">
      <!--Loading Icon-->
      <ti-loading
        class="as-hug"
        :icon="ResetDoneIcon"
        :text="ResetDoneText"/>
      <!--Links-->
      <div class="as-links">
        <a @click.left="OnResetAgain">{{'auth-reset-passwd-again'|i18n}}</a>
      </div>
    </div>
  </template>
  <!--
    Reset form
  -->
  <template v-else>
    <!--
      Head text
    -->
    <header>{{ModeTitle|i18n}}</header>
    <!--
      Main Area
    -->
    <section>
      <!--
        ===================================================
        Mode: byVCode
      -->
      <template v-if="isByVode">
        <!--
          Input: name
        -->
        <div class="as-input">
          <input 
            spellcheck="false"
            :placeholder="VCodeNameTip|i18n"
            v-model="myForm.name"></div>
        <!--
          Input: vcode
        -->
        <div class="as-input">
          <input 
            spellcheck="false"
            :placeholder="VCodeCodeTip|i18n"
            v-model="myForm.vcode">
          <span>
            <em v-if="delay>0">{{'auth-vcode-delay'|i18n({sec:delay})}}</em>
            <a v-else
              @click="OnGetVcode">{{VCodeGetTip|i18n}}</a>
          </span>
        </div>
      </template>
      <!--
        ===================================================
        Mode: byPasswd
      -->
      <template v-else>
        <!--
          Passwd: old
        -->
        <div class="as-input">
          <input 
            spellcheck="false"
            :type="myPassInputType"
            :placeholder="'auth-reset-passwd-old'|i18n"
            v-model="myForm.passwd_old"></div>
      </template>
      <!--
        ===================================================
      -->
      <!--
        Passwd: new
      -->
      <div class="as-input" :class="PasswdClass">
        <input 
          spellcheck="false"
          :type="myPassInputType"
          :placeholder="'auth-reset-passwd-new'|i18n"
          v-model="myForm.passwd_new">
        <span 
          class="as-passwd-type-toggle"
          @click="OnTogglePasswdInputType">
          <ti-icon :value="PasswdInputTypeIcon"/>
        </span>
      </div>
      <!--
        Passwd: Indicator
      -->
      <div class="as-passtip">
        <!--Invalid pass-->
        <div 
          v-if="-2 == myPassTip"
            class="is-invalid">{{'passwd-invalid-char'|i18n}}</div>
        <!--No password-->
        <div 
          v-else-if="-1 == myPassTip"
            class="is-tip">{{'passwd-tip'|i18n}}</div>
        <!--Show tip bar-->
        <div 
          v-else
            class="is-tipbar">
            <span class="is-weak">{{'i18n:passwd-sl-1' | i18n}}</span>
            <u
              v-for="it in PasswdTipBar"
                :class="it.className"></u>
            <span class="is-strong">{{'i18n:passwd-sl-5' | i18n}}</span>
        </div>
      </div>
      <!--
        Passwd: repeat
      -->
      <div class="as-input" :class="PasswdClass">
        <input 
          spellcheck="false"
          :type="myPassInputType"
          :placeholder="'auth-reset-passwd-ren'|i18n"
          v-model="myForm.passwd_ren"></div>
      <!--
        Submit button
      -->
      <div class="as-btn">
        <button 
          :class="SubmitBtnClass"
          @click="OnSubmit">{{SubmitBtnText|i18n}}</button>
      </div>
      <!--
        Sublinks: switch mode / passwd-back
      -->
      <div 
        v-if="hasAltModes"
          class="as-links">
          <div
            v-for="it in AltModes"
              class="as-item">
              <a @click.left="OnChangeMode(it)">{{it.text|i18n}}</a>
          </div>
      </div>
    </section>
  </template>
</div>`);
//============================================================
// JOIN: web/auth/passwd/auth-passwd.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////////////////
  data : ()=>({
    "myPassInputType": "password",
    "myForm" : {
      "name"  : null,
      "vcode" : null,
      "passwd_old" : null,
      "passwd_new" : null,
      "passwd_ren" : null
    },
    "myPassTip": -1,
    "myMode"  : "passwd",
    // delay to get the next captcha to prevent robot
    "delay" : -1,
    "myResetResult": null,
    "doing": false
  }),
  ///////////////////////////////////////////////////////
  props : {
    // - "passwd"
    // - "phone"
    // - "email"
    "mode" : {
      type : String,
      default : "passwd"
    },
    "allowModes": {
      type: Object,
      default: ()=>({
        "passwd" : true,
        "phone"  : true,
        "email"  : true
      })
    },
    "captcha" : {
      type : String,
      required : true,
      default : null
    },
    "scenes" : {
      type : Object,
      default: ()=>({
        "robot"  : "robot",
        "passwd" : "resetpasswd",
        "email"  : "resetpasswd",
        "phone"  : "resetpasswd"
      })
    },
    // The interval of get capche to prevent robot
    // (in second)
    "getDelay" : {
      type : Number,
      default : 60
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //---------------------------------------------------
    PasswdClass() {

    },
    //---------------------------------------------------
    TheAllowModes() {
      return Ti.Util.truthyKeys(this.allowModes)
    },
    //---------------------------------------------------
    isByVode() {
      return "passwd" != this.myMode
    },
    //---------------------------------------------------
    ModeTitle() {
      return `i18n:auth-reset-passwd-by-${this.myMode}`
    },
    //---------------------------------------------------
    VCodeNameTip() {
      return `i18n:auth-reset-passwd-by-${this.myMode}-tip`
    },
    //---------------------------------------------------
    VCodeCodeTip() {
      if("email" == this.myMode) {
        return "i18n:auth-email-vcode"
      }
      return "i18n:auth-phone-vcode"
    },
    //---------------------------------------------------
    VCodeGetTip() {
      if("email" == this.myMode) {
        return "i18n:auth-email-vcode-get"
      }
      return "i18n:auth-phone-vcode-get"
    },
    //---------------------------------------------------
    PasswdInputTypeIcon() {
      return ({
        "password": "fas-eye-slash",
        "text": "fas-eye"
      })[this.myPassInputType]
    },
    //---------------------------------------------------
    AltModes() {
      let list = []
      for(let md of this.TheAllowModes) {
        if(md != this.myMode) {
          list.push({
            text : `i18n:auth-reset-passwd-by-${md}`,
            mode : md
          })
        }
      }
      return list
    },
    //---------------------------------------------------
    hasAltModes() {
      return !_.isEmpty(this.AltModes)
    },
    //---------------------------------------------------
    PasswdTipBar() {
      let items = []
      for(let i=1; i<=5; i++) {
        items.push({
          text: `i18n:passwd-sl-${i}`,
          className: (i>this.myPassTip?"is-off":"is-on")
        })
      }
      return items;
    },
    //---------------------------------------------------
    FormStatus() {
      // passwd: Lake params
      if("passwd" == this.myMode) {
        if(!_.trim(this.myForm.passwd_old)
          || !_.trim(this.myForm.passwd_new)
          || !_.trim(this.myForm.passwd_ren)) {
          return "lack"
        }
      }
      // vcode: Lake params
      else if(!_.trim(this.myForm.name)
          || !_.trim(this.myForm.vcode)
          || !_.trim(this.myForm.passwd_new)
          || !_.trim(this.myForm.passwd_ren)) {
        return "lack"
      }

      // vcode: new password too short
      if(this.myForm.passwd_new.length < 6) {
        return "short"
      }

      // 2 password unmatched
      if(this.myForm.passwd_new != this.myForm.passwd_ren) {
        return "unmatch"
      }

      return "ready"
    },
    //---------------------------------------------------
    SubmitBtnText() {
      return `i18n:auth-reset-passwd-btn-${this.FormStatus}`
    },
    //---------------------------------------------------
    SubmitBtnClass() {
      return `is-${this.FormStatus}`
    },
    //---------------------------------------------------
    ResetOK() {
      return _.get(this.myResetResult, "ok") ? true : false
    },
    //---------------------------------------------------
    ResetDoneClass() {
      return this.ResetOK
        ? 'is-ok'
        : 'is-fail'
    },
    //---------------------------------------------------
    ResetDoneIcon() {
      return this.ResetOK
        ? "im-check-mark-circle"
        : "im-warning"
    },
    //---------------------------------------------------
    ResetDoneText() {
      return this.ResetOK
        ? "i18n:auth-reset-passwd-ok"
        : _.get(this.myResetResult, "errCode")
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods :{
    //---------------------------------------------------
    OnChangeMode({mode}) {
      this.myMode = mode
    },
    //---------------------------------------------------
    OnTogglePasswdInputType() {
      this.myPassInputType = ({
        "password": "text",
        "text": "password"
      })[this.myPassInputType]
    },
    //---------------------------------------------------
    OnResetAgain() {
      this.myResetResult=null
      _.assign(this.myForm, {
        "name"  : null,
        "vcode" : null,
        "passwd_old" : null,
        "passwd_new" : null,
        "passwd_ren" : null
      })
    },
    //---------------------------------------------------
    OnSubmit() {
      if("ready" == this.FormStatus) {
        this.doing = true
        this.$notify("passwd:reset", {
          scene:  _.get(this.scenes, this.myMode),
          account : _.trim(this.myForm.name),
          vcode   : _.trim(this.myForm.vcode),
          oldpwd  : _.trim(this.myForm.passwd_old),
          newpwd  : _.trim(this.myForm.passwd_new),
          done: (reo)=>{
            this.doing = false
            this.myResetResult = reo
          }
        })
      }
    },
    //---------------------------------------------------
    async OnGetVcode() {
      let name = _.trim(this.myForm.name)
      if(!name) {
        Ti.Toast.Open(`i18n:auth-reset-passwd-lack-${this.myMode}`, "warn")
        return 
      }

      let vars = {
        scene   : this.scenes.robot,
        account : name
      }

      // Get the captcha
      let src = Ti.S.renderBy(this.captcha, vars)
      let captcha = await Ti.Captcha(src)
      if(!captcha)
        return

      // Mask GUI
      let toast = Ti.Toast.Open({
        icon : "fas-spinner fa-spin",
        content : "i18n:auth-sending-vcode",
        position : "center",
        duration : 0,
        closer : false
      })

      // Process to get vcode
      this.$notify("get:vcode", {
        type: this.myMode,
        scene: _.get(this.scenes, this.myMode),
        account: name,
        captcha,
        done: ()=>{
          toast.close()
          this.myForm.vcode = null
        },
        ok : ({duInMin=60}={})=>{
          this.delay = this.getDelay
          Ti.Toast.Open({
            type : "success",
            position : "top",
            content : "i18n:auth-sent-ok",
            vars : {
              ta  : Ti.I18n.get(`auth-ta-${this.myMode}`),
              by  : Ti.I18n.get(`auth-ta-by-${this.myMode}`),
              min : duInMin
            },
            duration : 5000
          })
        },
        fail : ({errCode, data}={})=> {
          Ti.Toast.Open({
            type : "warn",
            position : "top",
            content : `i18n:${errCode}`,
            duration : 5000
          })
        }
      })
    },
    //---------------------------------------------------
    evalCurrentMode(mode) {
      console.log("evalCurrentMode", mode)
      // Find the first allowed modes
      if(!_.get(this.allowModes, mode)) {
        if(_.isEmpty(this.TheAllowModes)) {
          throw `mode[${mode}] push me to corner!`
        }
        return _.first(this.TheAllowModes)
      }
      // The mode seems ok
      return mode
    },
    //---------------------------------------------------
    updatePasswordTip(passwd=this.myForm.passwd_new) {
      if(_.isEmpty(passwd) || !_.isString(passwd) || passwd.length < 6) {
        this.myPassTip = -1
        return
      }
      // Score the passwd
      let score = 0
      //  > 8
      if(passwd.length > 8) {
        score += 1
      }
      // Count char type
      let map = {
        a_z: 0,
        A_Z: 0,
        dig: 0,
        spe: 0
      }
      for(let i=0; i<passwd.length; i++) {
        let code = passwd.charCodeAt(i)
        // a-z
        if(code>=97 && code<=122) {
          map.a_z = 1
        }
        // A-Z
        else if(code>=65 && code<=90) {
          map.A_Z = 1
        }
        // 0-9
        else if(code>=48 && code<=57) {
          map.dig = 1
        }
        // Special char
        else if(code>=20 && code<=128){
          map.spe = 1
        }
        // Invalid char
        else {
          this.myPassTip = -2
          return
        }
      }
      // Count score
      score += _.sum(_.values(map))

      this.myPassTip = score
    },
    //---------------------------------------------------
    syncCurrentMode() {
      this.myMode = this.evalCurrentMode(this.mode)
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  watch: {
    "mode": {
      handler: "syncCurrentMode"
    },
    "allowModes": {
      handler: "syncCurrentMode"
    },
    "myForm.passwd_new": "updatePasswordTip"
  },
  ///////////////////////////////////////////////////////
  mounted : function() {
    this.syncCurrentMode()
    // count the secound
    this.__H = window.setInterval(()=>{
      if(this.delay>=0)
        this.delay --
    }, 1000)
  },
  ///////////////////////////////////////////////////////
  beforeDestroy : function() {
    if(this.__H) {
      window.clearInterval(this.__H)
    }
  }
  ///////////////////////////////////////////////////////
}
Ti.Preload("ti/com/web/auth/passwd/auth-passwd.mjs", _M);
})();
//============================================================
// JOIN: web/auth/passwd/_com.json
//============================================================
Ti.Preload("ti/com/web/auth/passwd/_com.json", {
  "name" : "web-auth-passwd",
  "globally" : true,
  "template" : "./auth-passwd.html",
  "mixins" : ["./auth-passwd.mjs"]
});
//============================================================
// JOIN: web/auth/signup/auth-signup.html
//============================================================
Ti.Preload("ti/com/web/auth/signup/auth-signup.html", `<div 
  class="web-auth-signup web-simple-form" 
  :class="TopClass"
  v-ti-activable>
  <!--
    Top Logo
  -->
  <div 
    v-if="logo"
      class="as-logo">
      <ti-icon :value="logo"/>
  </div>
  <!--
    Head text
  -->
  <header>{{Msgs.title|i18n}}</header>
  <!--
    Main Area
  -->
  <section>
    <!--
      Input: Name
    -->
    <div class="as-input" :class="NameClass">
      <input 
        spellcheck="false"
        :placeholder="Msgs.nameTip|i18n"
        v-model="data.name"></div>
    <!--
      Input: Password
    -->
    <div class="as-input" :class="PasswdClass">
      <input 
        spellcheck="false"
        :type="PasswdInputType"
        :placeholder="Msgs.passwdTip|i18n"
        v-model="data.passwd">
      <span v-if="Msgs.codeGet">
        <em v-if="delay>0">{{'auth-vcode-delay'|i18n({sec:delay})}}</em>
        <a v-else
          @click="OnGetVcode">{{Msgs.codeGet|i18n}}</a>
      </span>
    </div>
    <!--
      Submit button
    -->
    <div class="as-btn">
      <button @click="OnAuthSubmit">{{Msgs.btnText|i18n}}</button>
    </div>
    <!--
      Sublinks: switch mode / passwd-back
    -->
    <ul 
      v-if="hasToggleMode"
        class="as-links">
        <li v-if="Msgs.linkLeft"
          class="at-left">
          <a @click="OnChangeMode">{{Msgs.linkLeft   |i18n}}</a></li>
        <li v-if="Msgs.linkRight"
          class="at-right">
          <a>{{Msgs.linkRight |i18n}}</a></li>
    </ul>
  </section>
  <!--
    Bottom link for oauth2
  -->
  <template v-if="hasOAuth2">
    <div class="as-spacing"></div>
    <footer>
      <a
        v-for="it in OAuth2Items"
          :href="it.href"
          :title="it.tip">
          <ti-icon :value="it.icon"/>
      </a>
    </footer>
  </template>
</div>`);
//============================================================
// JOIN: web/auth/signup/auth-signup.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////////////////
  data : ()=>({
    "data" : {
      "name"   : null,
      "passwd" : null
    },
    "guarding" : false,
    "currentMode"  : "login_by_passwd",
    // String, Array
    "invalidField" : null,
    // delay to get the next captcha to prevent robot
    "delay" : -1
  }),
  ///////////////////////////////////////////////////////
  props : {
    // - "login_by_passwd"
    // - "login_by_phone"
    // - "login_by_email"
    // - "bind_phone"
    // - "bind_email"
    "mode" : {
      type : String,
      default : "login_by_passwd"
    },
    "toggleMode": {
      type : String,
      default : "login_by_phone"
    },
    "captcha" : {
      type : String,
      required : true,
      default : null
    },
    "scenes" : {
      type : Object,
      default: ()=>({
        robot  : "robot",
        bind_phone : "auth",
        bind_email : "auth",
        login_by_email   : "auth",
        login_by_phone   : "auth",
        login_by_passwd  : "auth"
      })
    },
    // The interval of get capche to prevent robot
    // (in second)
    "getDelay" : {
      type : Number,
      default : 60
    },
    // "invalidField" : {
    //   type : [String, Array],
    //   default : null
    // }
    "logo": {
      type: String,
      default: undefined
    },
    "oauth2": {
      type: Array,
      default: ()=>[]
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //---------------------------------------------------
    Msgs() {
      // Login by password
      if("login_by_passwd" == this.currentMode) {
        return {
          "title"     : "i18n:auth-passwd-title",
          "nameTip"   : (
            "login_by_email" == this.toggleMode
              ? "i18n:auth-passwd-name-email-tip"
              : "i18n:auth-passwd-name-phone-tip"
          ),
          "passwdTip" : "i18n:auth-passwd-tip",
          "btnText"   : "i18n:auth-login",
          "linkLeft"  : (
            "login_by_email" == this.toggleMode
              ? "i18n:auth-go-email"
              : "i18n:auth-go-phone"
          ),
          "linkRight" : "i18n:auth-passwd-getback",
          "blankName" : "i18n:auth-blank-name"
        }
      }
      // Login by Phone
      if("login_by_phone" == this.currentMode) {
        return {
          "title"     : "i18n:auth-phone-title",
          "nameTip"   : "i18n:auth-phone-tip",
          "passwdTip" : "i18n:auth-phone-vcode",
          "codeGet"   : "i18n:auth-phone-vcode-get",
          "btnText"   : "i18n:auth-login-or-signup",
          "linkLeft"  : "i18n:auth-go-passwd",
          "linkRight" : "i18n:auth-vcode-lost",
          "blankName" : "i18n:auth-blank-phone"
        }
      }
      // Login by email
      if("login_by_email" == this.currentMode) {
        return {
          "title"     : "i18n:auth-email-title",
          "nameTip"   : "i18n:auth-email-tip",
          "passwdTip" : "i18n:auth-email-vcode",
          "codeGet"   : "i18n:auth-email-vcode-get",
          "btnText"   : "i18n:auth-login-or-signup",
          "linkLeft"  : "i18n:auth-go-passwd",
          "linkRight" : "i18n:auth-vcode-lost",
          "blankName" : "i18n:auth-blank-email"
        }
      }
      // Bind the phone
      if("bind_phone" == this.currentMode) {
        return {
          "title"     : "i18n:auth-bind-phone-title",
          "nameTip"   : "i18n:auth-phone-tip",
          "passwdTip" : "i18n:auth-phone-vcode",
          "codeGet"   : "i18n:auth-phone-vcode-get",
          "btnText"   : "i18n:auth-bind",
          //"linkLeft"  : "i18n:auth-bind-link-left",
          "linkRight" : "i18n:auth-vcode-lost",
          "blankName" : "i18n:auth-blank-phone"
        }
      }
      // Bind the email
      if("bind_email" == this.currentMode) {
        return {
          "title"     : "i18n:auth-bind-email-title",
          "nameTip"   : "i18n:auth-email-tip",
          "passwdTip" : "i18n:auth-email-vcode",
          "codeGet"   : "i18n:auth-email-vcode-get",
          "btnText"   : "i18n:auth-bind",
          //"linkLeft"  : "i18n:auth-bind-link-left",
          "linkRight" : "i18n:auth-vcode-lost",
          "blankName" : "i18n:auth-blank-email"
        }
      }
      // Invalid mode
      throw Ti.Err.make("e.com.combo.auth.invalid-mode", this.currentMode)
    },
    //---------------------------------------------------
    Params() {
      return _.mapValues(this.data, (str)=>_.trim(str))
    },
    //---------------------------------------------------
    isBlankName() {
      return this.Params.name ? false : true
    },
    //---------------------------------------------------
    isBlankNameOrPasswd() {
      let {name, passwd} = this.Params
      return !name || !passwd
    },
    //---------------------------------------------------
    Invalid() {
      return {
        name   : this.isInvalid("name"),
        passwd : this.isInvalid("passwd")
      }
    },
    //---------------------------------------------------
    NameClass() {
      if(this.guarding && 
        (this.Invalid.name || !this.Params.name))
        return "is-invalid"
    },
    //---------------------------------------------------
    PasswdClass() {
      if(this.guarding && 
        (this.Invalid.passwd || !this.Params.passwd))
        return "is-invalid"
    },
    //---------------------------------------------------
    PasswdInputType() {
      return "login_by_passwd" == this.currentMode
        ? "password"
        : "text"
    },
    //---------------------------------------------------
    OAuth2Items() {
      return _.cloneDeep(this.oauth2)
    },
    //---------------------------------------------------
    hasOAuth2() {
      return !_.isEmpty(this.OAuth2Items)
    },
    //---------------------------------------------------
    hasToggleMode() {
      return !_.isEmpty(this.toggleMode)
    },
    //---------------------------------------------------
    // 验证码发送目标的名称（i18n）
    ToggleModeName(){
      return ({
        "login_by_phone" : "i18n:auth-ta-phone",
        "login_by_email" : "i18n:auth-ta-email",
        "bind_phone"     : "i18n:auth-ta-phone",
        "bind_email"     : "i18n:auth-ta-email"
      })[this.toggleMode]
    },
    //---------------------------------------------------
    // 验证码发送目标的名称（i18n）
    vCodeTargetName(){
      return ({
        "login_by_phone" : "i18n:auth-ta-phone",
        "login_by_email" : "i18n:auth-ta-email",
        "bind_phone"     : "i18n:auth-ta-phone",
        "bind_email"     : "i18n:auth-ta-email"
      })[this.currentMode]
    },
    //---------------------------------------------------
    // 验证码发送目标的名称（i18n）
    vCodeTargetBy(){
      return ({
        "login_by_phone" : "i18n:auth-ta-by-phone",
        "login_by_email" : "i18n:auth-ta-by-email",
        "bind_phone"     : "i18n:auth-ta-by-phone",
        "bind_email"     : "i18n:auth-ta-by-email"
      })[this.currentMode]
    },
    //---------------------------------------------------
    // 不同模式下的场景
    vCodeScene() {
      return _.get(this.scenes, this.currentMode) || "auth"
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods :{
    //---------------------------------------------------
    OnChangeMode() {
      // -> login-by-vcode
      if("login_by_passwd" == this.currentMode) {
        this.currentMode = this.toggleMode
      }
      // -> login-by-passwd
      else {
        this.currentMode = "login_by_passwd"
      }
      Ti.Be.BlinkIt(this.$el)  
    },
    //---------------------------------------------------
    OnAuthSubmit() {
      this.guarding = true
      // Guarding
      if(this.isBlankNameOrPasswd) {
        return Ti.Toast.Open("i18n:auth-blank-name-passwd", "warn")
      }
      // Mask GUI
      let toast = Ti.Toast.Open({
        icon : "fas-spinner fa-spin",
        content : "i18n:auth-doing",
        position : "center",
        duration : 0,
        closer : false
      })

      // Do Auth
      this.$notify("auth:send", {
        type   : this.currentMode,
        name   : this.Params.name,
        passwd : this.Params.passwd,
        // Close loading toast
        done : ()=> {
          toast.close()
          this.InvalidField = null
        },
        ok : ()=>{
          Ti.Toast.Open({
            type : "success",
            position : "top",
            content : "i18n:auth-ok",
            duration : 2000
          })
          this.$notify("auth:ok")
        },
        noexist : ()=>{
          this.InvalidField = "name"
        },
        invalid : ()=> {
          this.InvalidField = "passwd"
        },
        others : ()=> {
          this.InvalidField = ["name", "passwd"]
        },
        fail : ({errCode, data}={})=> {
          // VCode Error
          if("e.auth.captcha.invalid" == errCode) {
            Ti.Toast.Open({
              type : "warn",
              position : "top",
              content : `i18n:e-www-invalid-captcha`,
              vars : {
                ta : Ti.I18n.text(this.vCodeTargetName)
              },
              duration : 5000
            })
          }
          // NoSaltedPasswd
          else if("e.auth.login.NoSaltedPasswd" == errCode) {
            Ti.Alert("i18n:auth-login-NoSaltedPasswd", {
              title: "i18n:e-auth-login-NoSaltedPasswd",
              icon: "zmdi-shield-security",
              textOk: "i18n:i-known",
              vars: {
                ta : Ti.I18n.text(this.ToggleModeName)
              }
            })
          }
          // Others Error
          else {
            Ti.Toast.Open({
              type : "warn",
              position : "top",
              content : `i18n:${errCode}`,
              duration : 5000
            })
          }
        }
      })
    },
    //---------------------------------------------------
    async OnGetVcode() {
      this.guarding = true
      // The Account Name is required
      if(this.isBlankName) {
        this.InvalidField = "name"
        Ti.Toast.Open(this.Msgs["blankName"], "warn")
        return
      }

      // Reset invalid
      this.guarding = false
      this.InvalidField = null

      // Show the image captcha to prevent robot
      //console.log("captcha", this.captcha)
      let vars = {
        scene   : this.scenes.robot,
        account : this.Params.name
      }
      //let src = "/api/joysenses/auth/captcha?site=rv340tg5gcigsp6p5hvigc2gjb&account=18501211423"
      let src = Ti.S.renderBy(this.captcha, vars)
      let captcha = await Ti.Captcha(src)
      if(!captcha)
        return

      // Mask GUI
      let toast = Ti.Toast.Open({
        icon : "fas-spinner fa-spin",
        content : "i18n:auth-sending-vcode",
        position : "center",
        duration : 0,
        closer : false
      })

      // use the captcha to get code
      this.$notify("get:vcode", {
        type    : this.currentMode,
        scene   : this.vCodeScene,
        account : this.data.name,
        captcha,
        done: ()=>{
          toast.close()
          this.InvalidField = null
          this.data.passwd = ""
        },
        ok : ({duInMin=60}={})=>{
          this.delay = this.getDelay
          Ti.Toast.Open({
            type : "success",
            position : "top",
            content : "i18n:auth-sent-ok",
            vars : {
              ta  : Ti.I18n.text(this.vCodeTargetName),
              by  : Ti.I18n.text(this.vCodeTargetBy),
              min : duInMin
            },
            duration : 5000
          })
        },
        fail : ({errCode, data}={})=> {
          Ti.Toast.Open({
            type : "warn",
            position : "top",
            content : `i18n:${errCode}`,
            duration : 5000
          })
        }
      })
    },
    //---------------------------------------------------
    isInvalid(name="") {
      if(_.isArray(this.InvalidField)) {
        return _.indexOf(this.InvalidField, name) >= 0
      }
      return name == this.InvalidField
    },
    //-----------------------------------------------
    // Callback
    //-----------------------------------------------
    __ti_shortcut(uniqKey) {
      //....................................
      // If droplist is actived, should collapse it
      if("ENTER" == uniqKey) {
        if(!this.isBlankNameOrPasswd) {
          this.$nextTick(()=>{
            this.OnAuthSubmit()
          })
          return {stop:true, quit:true}
        }
      }
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  watch : {
    "currentMode" : function() {
      this.guarding = false
      //this.data.name = ""
      this.data.passwd = ""
    }
  },
  ///////////////////////////////////////////////////////
  mounted : function() {
    if(this.mode) {
      this.currentMode = this.mode
    }
    // count the secound
    this.__H = window.setInterval(()=>{
      if(this.delay>=0)
        this.delay --
    }, 1000)
  },
  ///////////////////////////////////////////////////////
  beforeDestroy : function() {
    if(this.__H) {
      window.clearInterval(this.__H)
    }
  }
  ///////////////////////////////////////////////////////
}
Ti.Preload("ti/com/web/auth/signup/auth-signup.mjs", _M);
})();
//============================================================
// JOIN: web/auth/signup/_com.json
//============================================================
Ti.Preload("ti/com/web/auth/signup/_com.json", {
  "name" : "web-auth-signup",
  "globally" : true,
  "template" : "./auth-signup.html",
  "mixins" : ["./auth-signup.mjs"]
});
//============================================================
// JOIN: web/footer/web-footer.html
//============================================================
Ti.Preload("ti/com/web/footer/web-footer.html", `<div class="ti-web-footer">
  I footer
</div>`);
//============================================================
// JOIN: web/footer/web-footer.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  /////////////////////////////////////////
  props : {
    "logo" : {
      type : [String, Object],
      default : "zmdi-chevron-down"
    },
    "brief" : {
      type : String,
      default : null
    },
    "copyright" : {
      type : String,
      default : null
    }
  },
  //////////////////////////////////////////
  computed : {
    //......................................
    
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/web/footer/web-footer.mjs", _M);
})();
//============================================================
// JOIN: web/footer/_com.json
//============================================================
Ti.Preload("ti/com/web/footer/_com.json", {
  "name" : "web-footer",
  "globally" : true,
  "template" : "./web-footer.html",
  "mixins"   : ["./web-footer.mjs"]
});
//============================================================
// JOIN: web/media/image/web-media-image.html
//============================================================
Ti.Preload("ti/com/web/media/image/web-media-image.html", `<img
  :class="TopClass"
  class="web-media-image"
  :src="ImgSrc"/>`);
//============================================================
// JOIN: web/media/image/web-media-image.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  props : {
    "base": {
      type: String,
      default: undefined
    },
    "src" : {
      type : String,
      default : undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    ImgSrc() {
      return Ti.Util.appendPath(this.base, this.src)
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/web/media/image/web-media-image.mjs", _M);
})();
//============================================================
// JOIN: web/media/image/_com.json
//============================================================
Ti.Preload("ti/com/web/media/image/_com.json", {
  "name" : "web-media-image",
  "globally" : true,
  "template" : "./web-media-image.html",
  "mixins"   : ["./web-media-image.mjs"]
});
//============================================================
// JOIN: web/media/player/web-media-player.html
//============================================================
Ti.Preload("ti/com/web/media/player/web-media-player.html", `<div class="ti-web-image">
  
</div>`);
//============================================================
// JOIN: web/media/player/web-media-player.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  /////////////////////////////////////////
  props : {
    "src" : {
      type : String,
      default : undefined
    },
    "value": {
      type : [String, Number],
      default : undefined
    },
    "bgColor": {
      type : [String, Number],
      default: "#000000"
    },
    // [{text:"xxx", className:"xxx", cssStyle:""}]
    // [{src:"xxx",  className:"xxx", cssStyle:""}]
    "items" : {
      type : [Array],
      default : ()=>[]
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TheItems() {
      let list = []
      _.forEach(this.items, it => {

      })
      return list
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/web/media/player/web-media-player.mjs", _M);
})();
//============================================================
// JOIN: web/media/player/_com.json
//============================================================
Ti.Preload("ti/com/web/media/player/_com.json", {
  "name" : "web-media-player",
  "globally" : true,
  "template" : "./web-media-player.html",
  "mixins"   : ["./web-media-player.mjs"]
});
//============================================================
// JOIN: web/meta/article/web-meta-article.html
//============================================================
Ti.Preload("ti/com/web/meta/article/web-meta-article.html", `<div class="web-meta-article"
  :class="TopClass">
  <!--
    Title
  -->
  <h1
    v-if="title"
      class="as-title">{{title}}</h1>
  <!--
    Information
  -->
  <div
    v-if="hasInfo"
      class="as-info">
      <!--author-->
      <div v-if="author" class="as-author">{{author}}</div>
      <!--PubDateText-->
      <div v-if="PubDateText" class="as-pub-date">{{PubDateText}}</div>
      <!--Watch Count-->
      <div
        v-if="watchCount > 0"
          class="as-watch-count">
            <i class="zmdi zmdi-eye"></i>
            <span>{{watchCount}}</span></div>
      <!--PubDateText-->
      <div v-if="duration" class="as-duration">{{DurationText}}</div>
  </div>
  <!--
    Tags
  -->
  <ul 
  v-if="hasTags"
    class="as-tags">
    <li
      v-for="tag in TheTags">{{tag}}</li></ul>
  <!--
    Brief
  -->
  <blockquote
    v-if="brief"
      class="as-brief">{{brief}}</blockquote>
  <!--
    Bottom line
  -->
  <hr v-if="bottomLine" class="as-bottom-line">
</div>`);
//============================================================
// JOIN: web/meta/article/web-meta-article.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  props : {
    "title" : {
      type : String,
      default : null
    },
    "brief" : {
      type : String,
      default : null
    },
    "pubDate" : {
      type : [String, Number, Date],
      default : null
    },
    "tags" : {
      type : [String, Array],
      default : null
    },
    "dateFormat" : {
      type : String,
      default : "yyyy-MM-dd"
    },
    "author" : {
      type : String,
      default : null
    },
    "duration" : {
      type : [String, Number],
      default : null
    },
    "watchCount" : {
      type : Number,
      default : 0
    },
    "align": {
      type: String,
      default: "center",
      validator: v => /^(left|center|right)$/.test(v)
    },
    "bottomLine" : {
      type : Boolean,
      default : true
    }
  },
  //////////////////////////////////////////
  computed : {
    //......................................
    TopClass(){
      return this.getTopClass(`align-${this.align}`)
    },
    //......................................
    TheTags() {
      return Ti.S.toArray(this.tags)
    },
    //......................................
    hasTags() {
      return !_.isEmpty(this.TheTags)
    },
    //......................................
    DurationText() {
      if(_.isNumber(this.duration)) {
        return Ti.I18n.getf("du-in-min", {n:this.duration})
      }
      return this.duration
    },
    //......................................
    PubDateText() {
      if(this.pubDate) {
        return Ti.DateTime.format(this.pubDate, this.dateFormat)
      }
    },
    //......................................
    hasInfo() {
      return this.author
        || this.watchCount > 0
        || this.author
        || this.duration
    }
    //......................................
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/web/meta/article/web-meta-article.mjs", _M);
})();
//============================================================
// JOIN: web/meta/article/_com.json
//============================================================
Ti.Preload("ti/com/web/meta/article/_com.json", {
  "name" : "web-meta-article",
  "globally" : true,
  "template" : "./web-meta-article.html",
  "mixins"   : ["./web-meta-article.mjs"]
});
//============================================================
// JOIN: web/meta/commodity/web-meta-commodity.html
//============================================================
Ti.Preload("ti/com/web/meta/commodity/web-meta-commodity.html", `<div class="web-meta-commodity"
  :class="TopClass">
  <div class="as-main">
    <!--
      Left: Preview
    -->
    <div
      v-if="previewImageSrc"
        class="at-left">
      <WebMediaImage
        :src="previewImageSrc"/>
    </div>
    <!--
      Right: Information
    -->
    <div class="at-right">
      <!--Title-->
      <h1>{{MetaTitle}}</h1>
      <div class="as-form">
        <ti-form
          v-bind="form"
          :data="FormData"
          @change="OnFormChanged"/>
      </div>
      <div class="as-btns">
        <!--Buy Button-->
        <a class="ti-btn" @click="OnClickBuyNow">{{actions.buy|i18n}}</a>
      </div>
    </div>
  </div>
</div>`);
//============================================================
// JOIN: web/meta/commodity/web-meta-commodity.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  props : {
    "meta" : {
      type : Object,
      default : ()=>({})
    },
    "previewSrc": {
      type: String,
      default: null
    },
    "titleKey" : {
      type : String,
      default : "title"
    },
    "buyAmount" : {
      type : Number,
      default : 1
    },
    "form" : {
      type : Object,
      default : ()=>({})
    },
    "actions": {
      type: Object,
      default: ()=>({
        "buy" : "i18n:buy-now"
      })
    }
  },
  //////////////////////////////////////////
  computed : {
    //......................................
    TopClass() {
      return this.getTopClass()
    },
    //......................................
    FormData() {
      return {
        ...this.meta,
        buyAmount : this.buyAmount
      }
    },
    //......................................
    previewImageSrc() {
      if(this.previewSrc && this.meta) {
        return Ti.S.renderBy(this.previewSrc, this.meta)
      }
    },
    //......................................
    MetaTitle() {
      if(this.titleKey) {
        return _.get(this.meta, this.titleKey)
      }
      return "NoTitle"
    }
    //......................................
  },
  //////////////////////////////////////////
  methods : {
    //......................................
    OnClickBuyNow() {
      this.$notify("buy:now")
    },
    //......................................
    OnFormChanged({name, value}) {
      this.$notify("meta:changed", {name, value})
    }
    //......................................
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/web/meta/commodity/web-meta-commodity.mjs", _M);
})();
//============================================================
// JOIN: web/meta/commodity/_com.json
//============================================================
Ti.Preload("ti/com/web/meta/commodity/_com.json", {
  "name" : "web-meta-commodity",
  "globally" : true,
  "template" : "./web-meta-commodity.html",
  "mixins"   : ["./web-meta-commodity.mjs"],
  "components" : [
    "@com:web/meta/preview"
  ]
});
//============================================================
// JOIN: web/meta/order/com/order-item/order-item.html
//============================================================
Ti.Preload("ti/com/web/meta/order/com/order-item/order-item.html", `<div class="as-row order-item">
  <!--Thumb/Title-->
  <div class="as-cell">
    <div class="as-title">
      <ti-icon 
        :value="thumbObj" 
        width=".32rem" 
        height=".32rem"/>
      <span class="as-text">{{title}}</span>
    </div>
  </div>
  <!--price-->
  <div class="as-cell as-price">
    <span>{{price}}</span>
  </div>
  <!--amount-->
  <div class="as-cell as-amount">
    <span>{{amount}}</span>
  </div>
  <!--Total-->
  <div class="as-cell as-fee">
    <em class="ti-num is-md">{{feeText}}</em>
  </div>
</div>`);
//============================================================
// JOIN: web/meta/order/com/order-item/order-item.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  props : {
    "id" : {
      type : String,
      default : null
    },
    "thumb" : {
      type : String,
      default : null
    },
    "src" : {
      type : String,
      default : "/api/thumb?id:${id}"
    },
    "dftIcon" : {
      type : String,
      default : "fas-cube"
    },
    "title" : {
      type : String,
      default : null
    },
    "price" : {
      type : Number,
      default : 1
    },
    "currency" : {
      type : String,
      default : "RMB"
    },
    "amount" : {
      type : Number,
      default : 1
    }
  },
  //////////////////////////////////////////
  computed : {
    //......................................
    thumbObj() {
      if(this.thumb) {
        let imgSrc = Ti.S.renderBy(this.src, this)
        return {type:"image", value:imgSrc}
      }
      return this.dftIcon
    },
    //......................................
    fee() {
      return Ti.WWW.evalFee(this)
    },
    //......................................
    feeText() {
      return Ti.WWW.feeText(this.fee, this.currency)
    }
    //......................................
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/web/meta/order/com/order-item/order-item.mjs", _M);
})();
//============================================================
// JOIN: web/meta/order/com/order-item/_com.json
//============================================================
Ti.Preload("ti/com/web/meta/order/com/order-item/_com.json", {
  "name" : "order-item",
  "globally" : false,
  "template" : "./order-item.html",
  "mixins"   : ["./order-item.mjs"]
});
//============================================================
// JOIN: web/meta/order/web-meta-order.html
//============================================================
Ti.Preload("ti/com/web/meta/order/web-meta-order.html", `<div class="web-meta-order"
  :class="TopClass">
  <!--
    Head： Status
  -->
  <div class="as-or-box is-head">
    <!--
      Left: ID/status
    -->
    <div class="at-left is-status">
      <!--ID-->
      <div class="as-or-id">
        <span>{{'order-k-id'|i18n}}:</span>
        <em>{{Order.id}}</em>
      </div>
      <!--Status-->
      <div class="as-or-st">
        <span :class="OrderStatus">{{OrderStatus|i18n}}</span>
      </div>
    </div>
    <!--
      Right: Timestamp
    -->
    <div class="at-right is-timestamp">
      <div
        v-for="it in Timestamps"
          :class="it.className">
          <!--Item-->
          <template v-if="'item' == it.type">
            <ti-icon :value="it.icon"/>
            <div class="as-t-title">{{it.title|i18n}}</div>
            <div class="as-t-date">{{it.dateText}}</div>
            <div class="as-t-time">{{it.timeText}}</div>
          </template>
          <!--Line-->
          <template v-else>
            <ti-icon :value="it.icon"/>
          </template>
      </div>
    </div>
  </div>
  <!--
    TODO shipping address & physical distribution
  -->
  <!--
    Product list
  -->
  <div class="as-or-box is-products">
    <table>
      <thead>
        <tr>
          <th>{{'order-k-pro-title'|i18n}}</th>
          <th>{{'order-k-pro-price'|i18n}}</th>
          <th>{{'order-k-pro-amount'|i18n}}</th>
          <th>{{'order-k-pro-subtotal'|i18n}}</th>
        </tr>
      </thead>
      <tbody>
        <tr
          v-for="it in Products"
            class="as-pro-it">
            <!--Title-->
            <td class="as-pro-title">
              <a 
                :href="it.href"
                @click.left.prevent="OnClickProduct(it)"><img :src="it.src"/></a>
              <a 
                :href="it.href"
                @click.left.prevent="OnClickProduct(it)">{{it.title}}</a>
            </td>
            <!--Price-->
            <td class="as-price">{{CurrencyChar}}{{it.price}}</td>
            <!--Amount-->
            <td class="as-amount">{{it.amount}}</td>
            <!--Subtotal-->
            <td class="as-subtotal">{{CurrencyChar}}{{it.subtotal}}</td>
        </tr>
      </tbody>
    </table>
  </div>
  <!--
    Summary
  -->
  <div class="as-or-box is-summary">
    <table>
      <tr class="as-sum-price">
        <td class="as-s-key">{{'order-k-price'|i18n}}:</td>
        <td class="as-s-val">{{CurrencyChar}}{{Order.price}}</td>
      </tr>
      <tr class="as-sum-fee">
        <td class="as-s-key">{{'order-k-fee'|i18n}}:</td>
        <td class="as-s-val">{{CurrencyChar}}{{Order.fee}}</td>
      </tr>
    </table>
  </div>
</div>`);
//============================================================
// JOIN: web/meta/order/web-meta-order.mjs
//============================================================
(function(){
const _M = {
  //////////////////////////////////////////
  props : {
    "value" : {
      type : Object,
      default : ()=>({})
    },
    "proThumbSrc": {
      type : String,
      default : undefined
    },
    "proHref": {
      type : String,
      default : undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass(
        `is-${this.OrderStatus}`
      )
    },
    //--------------------------------------
    Order() {
      return this.value || {}
    },
    //--------------------------------------
    OrderStatus() {
      return `or-st-${_.toLower(this.Order.st)}`
    },
    //--------------------------------------
    CurrencyChar() {
      return Ti.Bank.getCurrencyChar(this.Order.currency||"RMB")
    },
    //--------------------------------------
    Products() {
      let list = []
      _.forEach(this.value.products, it=>{
        let pro = {...it}
        if(this.proThumbSrc) {
          pro.src = Ti.S.renderBy(this.proThumbSrc, it)
        }
        if(this.proHref) {
          pro.href = Ti.S.renderBy(this.proHref, it)
        }
        pro.subtotal = Ti.Num.precise(it.price * it.amount)
        list.push(pro)
      })
      return list
    },
    //--------------------------------------
    Timestamps() {
      let list = []
      list.push(this.genTimestampItem(
        "fas-file-invoice-dollar","i18n:or-st-nw", this.Order.ct))
      list.push(this.genTimestampLine(this.Order.ok_at))
      list.push(this.genTimestampItem(
        "far-credit-card","i18n:or-st-ok", this.Order.ok_at))
      list.push(this.genTimestampLine(this.Order.sp_at))
      list.push(this.genTimestampItem(
        "fas-shipping-fast","i18n:or-st-sp", this.Order.sp_at))
      list.push(this.genTimestampLine(this.Order.dn_at))
      list.push(this.genTimestampItem(
        "fas-clipboard-check","i18n:or-st-dn", this.Order.dn_at, true))
      return list
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickProduct({id}) {
      this.$notify("open:product", id)
    },
    //--------------------------------------
    genTimestampItem(icon, title, t, atLast=false) {
      let it = {type:"item", icon, title, time:t}
      let isOn = (t && t>0)
      it.className =  {
        "is-item": true,
        "is-on": isOn,
        "is-off": !isOn,
        "at-last": atLast
      }
      if(isOn) {
        it.dateText = Ti.DateTime.format(t, "yyyy-MM-dd")
        it.timeText = Ti.DateTime.format(t, "HH:mm:ss")
      }
      return it
    },
    //--------------------------------------
    genTimestampLine(t) {
      let isOn = (t && t>0)
      return {
        type:"line",
        isOn,
        icon: isOn
          ? "fas-chevron-right"
          : "fas-circle",
        className : {
          "is-line": true,
          "is-on": isOn,
          "is-off": !isOn
        }
      }
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/web/meta/order/web-meta-order.mjs", _M);
})();
//============================================================
// JOIN: web/meta/order/_com.json
//============================================================
Ti.Preload("ti/com/web/meta/order/_com.json", {
  "name" : "web-meta-order",
  "globally" : true,
  "template" : "./web-meta-order.html",
  "mixins"   : ["./web-meta-order.mjs"],
  "components" : [
    "./com/order-item"
  ]
});
//============================================================
// JOIN: web/meta/preview/web-meta-preview.html
//============================================================
Ti.Preload("ti/com/web/meta/preview/web-meta-preview.html", `<div class="ti-web-preview ti-fill-parent">
  <!--
    Top: Image
  -->
  <div class="as-preview">
    <ti-icon value="zmdi-image"/>
  </div>
  <!--
    Bottom: List
  -->
  
</div>`);
//============================================================
// JOIN: web/meta/preview/web-meta-preview.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  /////////////////////////////////////////
  props : {
    "logo" : {
      type : [String, Object],
      default : "zmdi-chevron-down"
    },
    "brief" : {
      type : String,
      default : null
    },
    "copyright" : {
      type : String,
      default : null
    }
  },
  //////////////////////////////////////////
  computed : {
    //......................................
    
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/web/meta/preview/web-meta-preview.mjs", _M);
})();
//============================================================
// JOIN: web/meta/preview/_com.json
//============================================================
Ti.Preload("ti/com/web/meta/preview/_com.json", {
  "name" : "web-meta-preview",
  "globally" : true,
  "template" : "./web-meta-preview.html",
  "mixins"   : ["./web-meta-preview.mjs"]
});
//============================================================
// JOIN: web/nav/columns/nav-columns.html
//============================================================
Ti.Preload("ti/com/web/nav/columns/nav-columns.html", `<nav class="web-nav-columns"
  :class="TopClass">
  <!--=======================================-->
  <div v-for="it in TheItems"
    class="as-column">
    <div class="item-self">
      <a
        :key="it.index"
        class="link-item"
        :class="it.className"
        :href="it.href"
        :target="it.target"
        @click.left="OnClickLink($event, it)">
        <!--Icon-->
        <ti-icon
          v-if="it.icon"
            :value="it.icon"/>
        <!--Text-->
        <span
          v-if="it.title"
            class="as-text">{{it.title}}</span>
        </a>
      </div>
      <!--===================================-->
      <!--SubItems-->
      <div
        v-if="it.items"
          class="sub-items">
          <div class="items-con">
            <a
              v-for="sub in it.items"
                :key="sub.index"
                class="sub-item"
                :class="sub.className"
                :href="sub.href"
                :target="sub.target"
                @click.left="OnClickLink($event, sub)">
                <!--Icon-->
                <ti-icon
                  v-if="sub.icon"
                    :value="sub.icon"/>
                <!--Text-->
                <span
                  v-if="sub.title"
                    class="as-text">{{sub.title}}</span>
            </a>
          </div>
      </div>
      <!--===================================-->
  </div>
  <!--=======================================-->
</nav>`);
//============================================================
// JOIN: web/nav/columns/nav-columns.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  props : {
    "items" : {
      type : Array,
      default : ()=>[]
    },
    "path" : {
      type : String,
      default: null
    },
    "align" : {
      type : String,
      default : "center",
      validator: v => /^(left|center|right)$/.test(v)
    },
    "spacing" : {
      type : String,
      validator: v => /^(tiny|comfy|wide)$/.test(v)
    },
    "border" : {
      type : String,
      default : "solid",
      validator: v => /^(none|solid|dashed|dotted)$/.test(v)
    }
  },
  /////////////////////////////////////////
  computed : {
    //------------------------------------
    TopClass() {
      return this.getTopClass(
        `is-spacing-${this.spacing}`,
        `is-align-${this.align}`,
        ()=> {
          if(this.border)
            return `is-border-${this.border}`
        }
      )
    },
    //------------------------------------
    TheItems() {
      return this.evalItems(this.items)
    }
    //------------------------------------
  },
  /////////////////////////////////////////
  methods : {
    //------------------------------------
    OnClickLink(evt, {type,value}={}) {
      if(/^(page|action)$/.test(type)) {
        evt.preventDefault()
        console.log("onClickLink", "nav:to", {type,value})
        this.$notify("nav:to", {type,value})
      }
    },
    //------------------------------------
    evalItems(items) {
      let list = []
      _.forEach(items, (it, index)=>{
        //................................
        let li = _.pick(it, [
          "icon", "title", "type",
          "href", "target", "value"])
        //................................
        li.index = index
        //................................
        if(this.path) {
          li.highlight = it.highlightBy(this.path)
        }
        //................................
        let hasHref = li.href ? true : false;
        li.className = {
          "has-href"    : hasHref,
          "nil-href"    : !hasHref,
          "is-highlight": li.highlight,
          "is-normal"   : !li.highlight,
        }
        //................................
        if(it.items) {
          li.items = this.evalItems(it.items)
        }
        //................................
        list.push(li)
        //................................
      })
      return list
    }
    //------------------------------------
  }
  /////////////////////////////////////////
}
Ti.Preload("ti/com/web/nav/columns/nav-columns.mjs", _M);
})();
//============================================================
// JOIN: web/nav/columns/_com.json
//============================================================
Ti.Preload("ti/com/web/nav/columns/_com.json", {
  "name" : "web-nav-columns",
  "globally" : true,
  "template" : "./nav-columns.html",
  "mixins"   : ["./nav-columns.mjs"],
  "components" : []
});
//============================================================
// JOIN: web/nav/links/nav-links.html
//============================================================
Ti.Preload("ti/com/web/nav/links/nav-links.html", `<nav class="web-nav-links"
  :class="TopClass">
  <!--=======================================-->
  <a
    v-for="it in TheItems"
      :key="it.index"
      class="link-item"
      :class="it.className"
      :href="it.href"
      :target="it.target"
      @click.left="OnClickLink($event, it)"
      @mouseenter="OnItemMouseEnter(it)"
      @mouseleave="OnItemMouseLeave(it)">
      <!--Icon-->
      <ti-icon
        v-if="it.icon"
          :value="it.icon"/>
      <!--Text-->
      <span
        v-if="it.title"
          class="as-text">{{it.title}}</span>
      <!--===================================-->
      <!--SubItems-->
      <div
        v-if="mySubItems && mySubIndex == it.index"
          class="sub-items">
          <div class="items-con">
            <a
              v-for="sub in mySubItems"
                :key="sub.index"
                class="sub-item"
                :class="sub.className"
                :href="sub.href"
                :target="sub.target"
                @click.left="OnClickLink($event, sub)">
                <!--Icon-->
                <ti-icon
                  v-if="sub.icon"
                    :value="sub.icon"/>
                <!--Text-->
                <span
                  v-if="sub.title"
                    class="as-text">{{sub.title}}</span>
            </a>
          </div>
      </div>
      <!--===================================-->
  </a>
  <!--=======================================-->
</nav>`);
//============================================================
// JOIN: web/nav/links/nav-links.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  data: ()=>({
    mySubIndex: -1,
    mySubItems: null
  }),
  /////////////////////////////////////////
  props : {
    "items" : {
      type : Array,
      default : ()=>[]
    },
    "path" : {
      type : String,
      default: null
    },
    "align" : {
      type : String,
      default : "left",
      validator: v => /^(left|center|right)$/.test(v)
    },
    "spacing" : {
      type : String,
      validator: v => /^(tiny|comfy|wide)$/.test(v)
    },
    "border" : {
      type : String,
      default : "solid",
      validator: v => /^(none|solid|dashed|dotted)$/.test(v)
    }
  },
  /////////////////////////////////////////
  computed : {
    //------------------------------------
    TopClass() {
      return this.getTopClass(
        `is-spacing-${this.spacing}`,
        `is-align-${this.align}`,
        ()=> {
          if(this.border)
            return `is-border-${this.border}`
        }
      )
    },
    //------------------------------------
    TheItems() {
      return this.evalItems(this.items)
    }
    //------------------------------------
  },
  /////////////////////////////////////////
  methods : {
    //------------------------------------
    OnClickLink(evt, {type,value}={}) {
      if(/^(page|action)$/.test(type)) {
        evt.preventDefault()
        console.log("onClickLink", "nav:to", {type,value})
        this.$notify("nav:to", {type,value})
      }
    },
    //------------------------------------
    OnItemMouseEnter({index, items}) {
      // Guard
      if(_.isEmpty(items)) {
        this.mySubIndex = -1
        this.mySubItems = null
        return
      }
      // Eval sub items
      this.mySubItems = this.evalItems(items)
      this.mySubIndex = index

      // Dock it
      this.$nextTick(()=>this.dockSub())
    },
    //------------------------------------
    OnItemMouseLeave({index}) {
      if(this.mySubIndex == index) {
        this.mySubIndex = -1
        this.mySubItems = null
      }
    },
    //------------------------------------
    dockSub(){
      let $sub = Ti.Dom.find(".sub-items", this.$el)
      // Guard
      if(!$sub) {
        return
      }
      // Ready to dock
      let $an = $sub.parentNode
      let rAn = Ti.Rects.createBy($an)
      let rSub = Ti.Rects.createBy($sub)
      let css = Ti.Css.toStyle({
        top  : rAn.height,
        left : (rAn.width - rSub.width)/2
      })
      Ti.Dom.setStyle($sub, css)
    },
    //------------------------------------
    evalItems(items) {
      let list = []
      _.forEach(items, (it, index)=>{
        //................................
        let li = _.pick(it, [
          "icon", "title", "type",
          "href", "target", "value",
          "items"])
        //................................
        li.index = index
        //................................
        if(this.path) {
          li.highlight = it.highlightBy(this.path)
        }
        //................................
        let hasHref = li.href ? true : false;
        li.className = {
          "has-href"    : hasHref,
          "nil-href"    : !hasHref,
          "is-highlight": li.highlight,
          "is-normal"   : !li.highlight,
        }
        //................................
        list.push(li)
        //................................
      })
      return list
    }
    //------------------------------------
  }
  /////////////////////////////////////////
}
Ti.Preload("ti/com/web/nav/links/nav-links.mjs", _M);
})();
//============================================================
// JOIN: web/nav/links/_com.json
//============================================================
Ti.Preload("ti/com/web/nav/links/_com.json", {
  "name" : "web-nav-links",
  "globally" : true,
  "template" : "./nav-links.html",
  "mixins"   : ["./nav-links.mjs"],
  "components" : []
});
//============================================================
// JOIN: web/nav/side/com/side-item/side-item.html
//============================================================
Ti.Preload("ti/com/web/nav/side/com/side-item/side-item.html", `<div class="side-item" 
  :class="TopClass">
  <!--
    Self Info
  -->
  <div class="it-info" >
    <!--Icon-->
    <span
      v-if="icon"
        class="it-info-icon">
        <ti-icon :value="icon"/>
    </span>
    <!--Group-->
    <span
      v-if="isGroup"
        class="it-info-text">{{title|i18n}}</span>
    <!--Item-->
    <a
      v-else
        class="it-info-text"
        :href="href"
        @click.stop.prevent="OnClickItemInfo">{{title|i18n}}</a>
  </div>
  <!--
    Sub Container
  -->
  <div 
    v-if="hasSubItems"
      class="it-con">
      <SideItem
        v-for="subIt in items"
          :key="subIt.key"
          v-bind="subIt"/>
  </div>
</div>`);
//============================================================
// JOIN: web/nav/side/com/side-item/side-item.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////////////////
  props : {
    "depth" : {
      type:Number, 
      default:0
    },
    "icon"  : {
      type:[String,Object], 
      default:undefined
    },
    "title" : {
      type:String, 
      default:undefined
    },
    "page"  : {
      type:String, 
      default:undefined
    },
    "href"  : {
      type:String, 
      default:undefined
    },
    "items" : {
      type : Array,
      default : undefined
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return {
        "is-top"   : this.isTop,
        "is-sub"   : !this.isTop,
        "is-group" : this.isGroup,
        "is-item"  : !this.isGroup,
        "is-highlight" : this.isHighlight
      }
    },
    //---------------------------------------------------
    isTop() {
      return this.depth == 0
    },
    //---------------------------------------------------
    isGroup() {
      return _.isArray(this.items)
    },
    //---------------------------------------------------
    isHighlight() {
      return this.id && this.id == this.highlightId
    },
    //---------------------------------------------------
    hasSubItems() {
      return !_.isEmpty(this.items)
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods : {
    //---------------------------------------------------
    OnClickItemInfo() {
      this.$notify("nav:to", {
        value: this.page
      })
    }
    //---------------------------------------------------
  }
  ///////////////////////////////////////////////////////
}
Ti.Preload("ti/com/web/nav/side/com/side-item/side-item.mjs", _M);
})();
//============================================================
// JOIN: web/nav/side/com/side-item/_com.json
//============================================================
Ti.Preload("ti/com/web/nav/side/com/side-item/_com.json", {
  "name" : "side-item",
  "template" : "./side-item.html",
  "mixins" : ["./side-item.mjs"]
});
//============================================================
// JOIN: web/nav/side/web-nav-side.html
//============================================================
Ti.Preload("ti/com/web/nav/side/web-nav-side.html", `<div class="web-nav-side"
  :class="TopClass"
  v-ti-activable>
  <SideItem
    v-for="it in TheItems"
      :key="it.key"
        v-bind="it"/>
</div>`);
//============================================================
// JOIN: web/nav/side/web-nav-side.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  props : {
    "base": {
      type: String,
      default: undefined
    },
    "items" : {
      type : Array,
      default : null
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //-------------------------------------
    TheItems() {
      let list = []
      _.forEach(this.items, (it, index)=> {
        list.push(this.evalItem(it, index, 0))
      })
      return list;
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //-------------------------------------
    evalItem(it={}, index=0, depth=0) {
      // Children
      let items = undefined
      if(_.isArray(it.items)) {
        items = []
        _.forEach(it.items, (subIt, subIndex)=>{
          items.push(this.evalItem(subIt, subIndex, depth+1))
        })
        it.items = items
      }
      // href
      let href = it.href || it.page
      if(this.base && !/^(https?)?\/\/?/.test(href)) {
        href = Ti.Util.appendPath(this.base, href)
      }
      //console.log("href", href)
      // Self
      return {
        ...it,
        index,
        href,
        depth,
        key: `it-${index}`
      }
    }
    //-------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/web/nav/side/web-nav-side.mjs", _M);
})();
//============================================================
// JOIN: web/nav/side/_com.json
//============================================================
Ti.Preload("ti/com/web/nav/side/_com.json", {
  "name" : "web-nav-side",
  "globally" : true,
  "template" : "./web-nav-side.html",
  "mixins"   : ["./web-nav-side.mjs"],
  "components" : ["./com/side-item"]
});
//============================================================
// JOIN: web/pay/checkout/web-pay-checkout-props.mjs
//============================================================
(function(){
const _M = {
  "tipIcon": {
    type: String,
    default: "fas-clipboard-check"
  },
  "tipText": {
    type: String,
    default: "i18n:pay-checkout-tip"
  },
  /**
   * Items Array should like:
   * {
   *   id: "xxx",      // Item ID
   *   title: "xxx",   // Item display name
   *   price: 34,      // Item price
   *   amount: 2,      // Buy number
   *   thumbSrc        // [optional] Item preview src
   *   href            // [optional] Item link
   * }
   */
  "items" : {
    type : Array,
    default : ()=>[]
  },
  "currency": {
    type: String,
    default: "RMB"
  }
}
Ti.Preload("ti/com/web/pay/checkout/web-pay-checkout-props.mjs", _M);
})();
//============================================================
// JOIN: web/pay/checkout/web-pay-checkout.html
//============================================================
Ti.Preload("ti/com/web/pay/checkout/web-pay-checkout.html", `<div class="web-pay-checkout"
  :class="TopClass">
  <!--
    Blank
  -->
  <div 
    v-if="isEmpty"
      class="as-empty">
    <ti-loading
      class="as-big"
      icon="fas-shopping-basket"
      text="You should pick something to checkout!"/>
  </div>
  <!--
    List table
  -->
  <template v-else>
    <!--
      Tip
    -->
    <div class="as-tip">
      <ti-icon :value="tipIcon"/>
      <span>{{tipText | i18n}}</span>
    </div>
    <!--
      List
    -->
    <div class="as-list">
      <!--循环展示商品-->
      <table>
        <thead>
          <tr>
            <th><span>{{'pay-checkout-it-name'     | i18n}}</span></th>
            <th>
              <u>{{CurrencyChar}}</u>
              <span>{{'pay-checkout-it-price'      | i18n}}</span>
            </th>
            <th><span>{{'pay-checkout-it-amount'   | i18n}}</span></th>
            <th><span>{{'pay-checkout-it-subtotal' | i18n}}</span></th>
          </tr>
        </thead>
        <tbody>
          <tr
            v-for="it of TheItems"
              class="as-item">
              <td class="it-thumb">
                <a
                  v-if="it.thumbSrc" 
                    @click.prevent="OnShowProduct(it)" 
                    :href="it.href">
                    <img :src="it.thumbSrc"/>
                </a>
                <div class="it-title">
                  <a :href="it.href"
                    @click.prevent="OnShowProduct(it)">{{it.title}}</a>
                </div>
              </td>
              <td class="it-price">
                <em>{{CurrencyChar}}{{it.price}}</em>
              </td>
              <td class="it-amount">
                <span>{{it.amount}}</span>
              </td>
              <td class="it-subtotal">
                <em>{{CurrencyChar}}{{it.subtotal}}</em>
              </td>
            </tr>
          </tbody>
      </table>
    </div> <!--~as-list-->
    <!--
      Summary
    -->
    <div class="as-summary">
      <div class="at-left">
        <!--Maybe Coupon here-->
      </div>
      <div class="at-right">
        <div class="as-total">
          <span>Total:</span>
          <em>{{CurrencyChar}}{{TotalFee}}</em>
        </div>
      </div>
    </div>
  </template>
</div>`);
//============================================================
// JOIN: web/pay/checkout/web-pay-checkout.mjs
//============================================================
(function(){
const _M = {
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    isEmpty() {
      return _.isEmpty(this.items)
    },
    //--------------------------------------
    CurrencyChar(){
      return Ti.Bank.getCurrencyChar(this.currency)
    },
    //--------------------------------------
    TheItems() {
      let list = []
      _.forEach(this.items, it=>{
        list.push({
          ... it,
          subtotal: Ti.Num.precise(it.price * it.amount)
        })
      })
      return list
    },
    //--------------------------------------
    TotalFee() {
      let fee = 0;
      _.forEach(this.TheItems, it=>fee+=(it.price*it.amount))
      return Ti.Num.precise(fee)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    OnShowProduct({id}={}) {
      this.$notify("show:product", id)
    }
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/web/pay/checkout/web-pay-checkout.mjs", _M);
})();
//============================================================
// JOIN: web/pay/checkout/_com.json
//============================================================
Ti.Preload("ti/com/web/pay/checkout/_com.json", {
  "name" : "web-pay-checkout",
  "globally" : true,
  "template" : "./web-pay-checkout.html",
  "props"    : "./web-pay-checkout-props.mjs",
  "mixins"   : ["./web-pay-checkout.mjs"]
});
//============================================================
// JOIN: web/pay/choose/web-pay-choose-props.mjs
//============================================================
(function(){
const _M = {
  "options" : {
    type : Array,
    default : ()=>[{
        "icon":"/gu/rs/ti/icons/png/wxpay256.png",  
        "value":"wx.qrcode",
        "text":"i18n:pay-wx"
      }, {
        "icon":"/gu/rs/ti/icons/png/alipay256.png",
        "value":"zfb.qrcode",
        "text":"i18n:pay-zfb"
      }]
  }
}
Ti.Preload("ti/com/web/pay/choose/web-pay-choose-props.mjs", _M);
})();
//============================================================
// JOIN: web/pay/choose/web-pay-choose.html
//============================================================
Ti.Preload("ti/com/web/pay/choose/web-pay-choose.html", `<div class="web-pay-choose"
  :class="TopClass">
  <!--Title-->
  <div class="as-title">{{'pay-step-choose-tip'|i18n}}</div>
  <!--Choosing-->
  <div class="as-options">
    <div
      v-for="op in options"
        class="as-pay-type"
        :class="getOptionClass(op)"
        @click.left="OnChooseOption(op)">
        <ti-icon :value="op.icon"/>
        <div class="as-text">{{op.text | i18n}}</div>
    </div>
  </div>
  <div class="as-tip">{{PayTypeText}}</div>
</div>`);
//============================================================
// JOIN: web/pay/choose/web-pay-choose.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////////////
  props : {
    "value" : {
      type : String,
      default : null
    }
  },
  //////////////////////////////////////////////////
  computed : {
    //----------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //----------------------------------------------
    hasPayType() {
      return Ti.Bank.isValidPayType(this.value)
    },
    //----------------------------------------------
    PayTypeText() {
      return Ti.Bank.getPayTypeChooseI18nText(this.value, {
        text:'pay-step-choose-tip2',
        nil:'pay-step-choose-nil'
      })
    }
    //----------------------------------------------
  },
  //////////////////////////////////////////////////
  methods : {
    //----------------------------------------------
    OnChooseOption({value}={}) {
      this.$emit("change", {
        payType: value
      })
    },
    //----------------------------------------------
    getOptionClass(op) {
      if(op.value == this.value) {
        return "is-enabled"
      }
      return "is-disabled"
    }
    //----------------------------------------------
  },
  //////////////////////////////////////////////////
  mounted() {
    this.$notify("change:title", "pay-step-choose-title2")
  }
  //////////////////////////////////////////////////
}
Ti.Preload("ti/com/web/pay/choose/web-pay-choose.mjs", _M);
})();
//============================================================
// JOIN: web/pay/choose/_com.json
//============================================================
Ti.Preload("ti/com/web/pay/choose/_com.json", {
  "name" : "web-pay-choose",
  "globally" : true,
  "template" : "./web-pay-choose.html",
  "props"    : "./web-pay-choose-props.mjs",
  "mixins"   : ["./web-pay-choose.mjs"]
});
//============================================================
// JOIN: web/pay/done/web-pay-done-props.mjs
//============================================================
(function(){
const _M = {
  "waitIcon": {
    type : String,
    default : "fas-spinner fa-spin"
  },
  "waitText": {
    type : String,
    default : "i18n:loading"
  },
  "okIcon": {
    type : String,
    default : "im-check-mark-circle"
  },
  "okText": {
    type : String,
    default : "i18n:pay-re-ok"
  },
  // [{icon, text, href(for newTab), path(for navTo)}]
  "okLinks": {
    type: Array,
    default: ()=>[]
  },
  "failIcon": {
    type : String,
    default : "im-warning"
  },
  "failText": {
    type : String,
    default : "i18n:pay-re-fail"
  },
  // [{icon, text, href(for newTab), path(for navTo)}]
  "failLinks": {
    type: Array,
    default: ()=>[]
  },
  // [{icon, text, href(for newTab), path(for navTo)}]
  "doneLinks": {
    type: Array,
    default: ()=>[]
  },
}
Ti.Preload("ti/com/web/pay/done/web-pay-done-props.mjs", _M);
})();
//============================================================
// JOIN: web/pay/done/web-pay-done.html
//============================================================
Ti.Preload("ti/com/web/pay/done/web-pay-done.html", `<div class="web-pay-done"
  :class="TopClass">
  <!--
    Icon
  -->
  <div class="as-icon"><ti-icon :value="TheIcon"/></div>
  <!--
    Text
  -->
  <div class="as-text">{{TheText | i18n}}</div>
  <!--
    errMsg
  -->
  <div
    v-if="errMsg" 
      class="as-error">{{errMsg | i18n}}</div>
  <!--
    Links
  -->
  <div
    v-if="hasLinks"
      class="as-links">
      <ul>
        <li
          v-for="li in TheLinks">
          <a
            class="link-item"
            :href="li.href"
            @click.left.prevent="OnClickLink(li)">
            <ti-icon
              v-if="li.icon"
                :value="li.icon"/>
            <span class="it-text">{{li.text | i18n}}</span>
          </a>
        </li>
      </ul>
  </div>
</div>`);
//============================================================
// JOIN: web/pay/done/web-pay-done.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  props : {
    "payOk" : {
      type : Boolean,
      default : undefined
    },
    "errMsg" : {
      type : String,
      default : undefined
    },
    "orderId": {
      type: String,
      default: undefined
    }
  },
  //////////////////////////////////////////////////
  computed : {
    //----------------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-wait" : this.isWait,
        "is-ok"   : !this.isWait && this.payOk,
        "is-fail" : !this.isWait && !this.payOk
      })
    },
    //----------------------------------------------
    isWait() {
      return _.isUndefined(this.payOk)
    },
    //----------------------------------------------
    TheIcon() {
      if(_.isUndefined(this.payOk)) {
        return this.waitIcon
      }
      return this.payOk
        ? this.okIcon
        : this.failIcon
    },
    //----------------------------------------------
    TheText() {
      if(_.isUndefined(this.payOk)) {
        return this.waitText
      }
      return this.payOk
        ? this.okText
        : this.failText
    },
    //----------------------------------------------
    TheLinks() {
      let list = _.cloneDeep(this.payOk
        ? _.concat(this.okLinks, this.doneLinks)
        : _.concat(this.failLinks, this.doneLinks))

      let links = []
      _.forEach(list, li=> {
        links.push(_.defaults(Ti.Util.explainObj(this, li), {
          icon: 'zmdi-chevron-right'
        }))
      })
      return links
    },
    //----------------------------------------------
    hasLinks() {
      return !_.isEmpty(this.TheLinks)
    }
    //----------------------------------------------
  },
  //////////////////////////////////////////////////
  methods: {
    OnClickLink({path, params}={}) {
      if(path) {
        this.$notify("nav:to", {
          value: path,
          params
        })
      }
    }
  }
  //////////////////////////////////////////////////
}
Ti.Preload("ti/com/web/pay/done/web-pay-done.mjs", _M);
})();
//============================================================
// JOIN: web/pay/done/_com.json
//============================================================
Ti.Preload("ti/com/web/pay/done/_com.json", {
  "name" : "web-pay-done",
  "globally" : true,
  "template" : "./web-pay-done.html",
  "props"    : "./web-pay-done-props.mjs",
  "mixins"   : ["./web-pay-done.mjs"]
});
//============================================================
// JOIN: web/pay/proceed/web-pay-proceed-props.mjs
//============================================================
(function(){
const _M = {
  "watchUser" : {
    type : String,
    default : null
  },
  "qrcodeSize": {
    type: [String, Number],
    default: 200
  },
  "getOrder": {
    type: Function,
    default: undefined
  },
  "createOrder": {
    type: Function,
    default: undefined
  },
  "checkOrder": {
    type: Function,
    default: undefined
  },
  "returnUrl": {
    type: String,
    default: undefined
  }
}
Ti.Preload("ti/com/web/pay/proceed/web-pay-proceed-props.mjs", _M);
})();
//============================================================
// JOIN: web/pay/proceed/web-pay-proceed.html
//============================================================
Ti.Preload("ti/com/web/pay/proceed/web-pay-proceed.html", `<div class="web-pay-proceed">
  <!--
    Wait for create order
  -->
  <div 
    v-if="!hasOrder"
      class="as-nil-order">
      <ti-loading
        class="as-big"
        :text="OrderLoadText"/>
  </div>
  <!--
    Show payment
  -->
  <template
    v-else>
    <!--QRCODE-->
    <div v-if="isQRCODE"
      class="as-main is-qrcode">
      <img 
        :style="QrcodeImageStyle"
        :src="PaymentDataAsQrcodeUrl">
    </div>
    <!--IFRAME-->
    <div v-else-if="isIFRAME"
      class="as-main is-iframe">
      <iframe 
        frameborder="0" 
        scrolling="no"
        :src="PaymentData"></iframe>
    </div>
    <!--
      JSON
    -->
    <div v-else-if="isJSON"
      class="as-main is-json">
      <!--The self/approve/update/capture links for PayPal-->
      <div
        v-if="'paypal' == payType"
          class="by-paypal">
        <!--Logo-->
        <div class="paypal-logo">
          <a 
            :href="PayPalLinksMap.approve.href"
            target="_blank"><i class="fab fa-paypal"></i></a>
        </div>
        <div class="paypal-tip">{{'paypal-approve-tip'|i18n}}</div>
      </div> <!--End PayPal-->
    </div>
    <!--
      Others
    -->
    <div
      v-else
        class="as-main">{{myOrder}}</div>
    <!--
      Check Button
    -->
    <div class="as-check">
      <div class="ti-btn is-huge"
        @click.left="OnClickCheckBtn">
        <ti-icon class="as-icon" :value="CheckBtnIcon"/>
        <div class="as-text">{{CheckBtnText|i18n}}</div>
      </div>
    </div>
  </template>
</div>`);
//============================================================
// JOIN: web/pay/proceed/web-pay-proceed.mjs
//============================================================
(function(){
const _M = {
  //////////////////////////////////////////////////
  data : ()=>({
    __WS : null,   // The handle of websocket
    myOrder: null,
    isChecking: false
  }),
  //////////////////////////////////////////////////
  props : {
    "payType" : {
      type : String,
      default : null
    },
    "items" : {
      type : Array,
      default : ()=>[]
    },
    "orderId" : {
      type : String,
      default : undefined
    },
    "payOk" : {
      type : Boolean,
      default : undefined
    },
    "currency": {
      type: String,
      default: "RMB"
    }
  },
  //////////////////////////////////////////////////
  computed : {
    TopClass() {
      return this.getTopClass({
        "has-paytype": this.hasPayType,
        "nil-paytype": !this.hasPayType
      }, `is-${this.PayTypeName}`)
    },
    //----------------------------------------------
    hasPayType() {
      return Ti.Bank.isValidPayType(this.payType)
    },
    //----------------------------------------------
    PayTypeName() {
      if(_.isString(this.payType)) {
        return this.payType.replace(".", "-");
      }
    },
    //----------------------------------------------
    PayTypeText() {
      return Ti.Bank.getPayTypeChooseI18nText(this.payType, {
        text:'pay-step-proceed-tip',
        nil:'pay-step-proceed-nil'
      })
    },
    //----------------------------------------------
    OrderLoadText() {
      return this.orderId
        ? "pay-step-proceed-fetch-order"
        : "pay-step-proceed-create-order"
    },
    //----------------------------------------------
    hasOrder() {
      return !_.isEmpty(this.myOrder)
    },
    //----------------------------------------------
    Payment() {
      return _.get(this.myOrder, "pay_re")
    },
    //----------------------------------------------
    PaymentId() {
      return _.get(this.Payment, "payObjId")
    },
    //----------------------------------------------
    PaymentStatus() {
      return _.get(this.Payment, "status")
    },
    //----------------------------------------------
    PaymentData() {
      return _.get(this.Payment, "data")
    },
    //----------------------------------------------
    PaymentDataType() {
      return _.get(this.Payment, "dataType")
    },
    //----------------------------------------------
    isPaymentCreated() {
      return _.get(this.Payment, "payObjId") ? true : false
    },
    //----------------------------------------------
    isQRCODE() {
      return "QRCODE" == this.PaymentDataType
    },
    //----------------------------------------------
    isIFRAME() {
      return "IFRAME" == this.PaymentDataType
    },
    //----------------------------------------------
    isLINK() {
      return "LINK" == this.PaymentDataType
    },
    //----------------------------------------------
    isJSON() {
      return "JSON" == this.PaymentDataType
    },
    //----------------------------------------------
    isTEXT() {
      return "TEXT" == this.PaymentDataType
    },
    //----------------------------------------------
    PaymentDataAsQrcodeUrl() {
      return `/gu/qrcode?d=${this.PaymentData}&s=${this.qrcodeSize}&_=${Date.now()}`
    },
    //----------------------------------------------
    PayPalLinksMap() {
      let map = {}
      if(this.hasOrder 
        && "paypal" == this.myOrder.pay_tp) {
        _.forEach(this.PaymentData.links, li=> {
          map[li.rel] = li
        })
      }
      return map;
    },
    //----------------------------------------------
    QrcodeImageStyle() {
      return Ti.Css.toStyleRem100({
        width: this.qrcodeSize,
        height: this.qrcodeSize
      })
    },
    //----------------------------------------------
    CheckBtnIcon(){
      if(this.isChecking) {
        return "fas-spinner fa-spin"
      }
      return "zmdi-assignment-check"
    },
    //----------------------------------------------
    CheckBtnText(){
      if(this.isChecking)
        return "i18n:pay-proceed-ing"
      return "i18n:pay-proceed-check"
    }
    //----------------------------------------------
  },
  //////////////////////////////////////////////////
  methods : {
    //----------------------------------------------
    async OnClickCheckBtn() {
      if(_.isFunction(this.checkOrder)) {
        this.isChecking = true
        this.myOrder = await this.checkOrder(this.orderId)
        this.isChecking = false
      }
    },
    //----------------------------------------------
    async checkOrCreateOrder() {
      if(this.hasOrder) {
        return
      }
      // Get Back
      if(this.orderId) {
        if(_.isFunction(this.getOrder)) {
          this.myOrder = await this.getOrder(this.orderId, this.payType)
        }
      }
      // Create new one
      else {
        if(_.isFunction(this.createOrder)) {
          let payItems = _.map(this.items, it=>({
            id: it.id,
            amount: it.amount || 1,
            title: it.title,
            price: it.price
          }))
          let order = await this.createOrder({
            payType: this.payType,
            items: payItems
          })
          this.$emit("change", {orderId: _.get(order, "id")})
          this.myOrder = order
        }
      }

      // Open Link for PayPal approve
      if("paypal" == this.payType && this.isPaymentCreated) {
        let href = _.get(this.PayPalLinksMap, "approve.href")
        let link = Ti.Util.parseHref(href)
        let url = `${link.protocol}://${link.host}${link.path}?return=`
        console.log("🤳", {href, link, url})

        let params = _.assign({}, link.params)
        if(this.returnUrl) {
          params.returnurl = this.returnUrl
        }

        await Ti.Be.Open(url, {
          // params: _.assign({
          //     returnurl: "http://onchina.local.io:8080/page/shop/payok.html"
          //   },link.params),
          params,
          delay: 1000
        })
      }

      // Finally watch the payment change
      //this.watchPaymentChanged();
    },
    //----------------------------------------------
    watchPaymentChanged() {
      // Guard
      if(this.__WS 
        || !this.watchUser 
        || !this.hasOrder
        || !this.isPaymentCreated) {
        return
      }
      // Watch Remote
      console.log("【🦅】watchPaymentChanged")
      this.__WS = Ti.Websocket.listenRemote({
        watchTo : {
          method : "watch",
          user   : this.watchUser,
          match  : {
            id : this.PaymentId
          }
        },
        received : (wso)=>{
          console.log("【🦅】websocket", wso)
          this.OnClickCheckBtn()
        },
        closed : ()=>{
          this.unwatchPaymentChanged()
        }
      })
    },
    //----------------------------------------------
    unwatchPaymentChanged() {
      if(this.__WS) {
        this.__WS.close();
      }
    }
    //----------------------------------------------
  },
  //////////////////////////////////////////////////
  watch: {
    "PaymentStatus": function(status) {
      // Fail
      if("FAIL" == status) {
        this.$emit("change", {
          payOk: false,
          errMsg: JSON.stringify(this.PaymentData)
        })
        this.$notify("step:change", "@next")
      }
      // OK
      else if("OK" == status) {
        this.$emit("change", {
          payOk: true
        })
        this.$notify("step:change", "@next")
      }
    }
  },
  //////////////////////////////////////////////////
  mounted : function() {
    this.$notify("change:title", this.PayTypeText)
    this.$nextTick(()=>{
      this.checkOrCreateOrder()
    })
  },
  //////////////////////////////////////////////////
  beforeDestroy : function(){
    this.unwatchPaymentChanged()
  }
  //////////////////////////////////////////////////
}
Ti.Preload("ti/com/web/pay/proceed/web-pay-proceed.mjs", _M);
})();
//============================================================
// JOIN: web/pay/proceed/_com.json
//============================================================
Ti.Preload("ti/com/web/pay/proceed/_com.json", {
  "name" : "web-pay-proceed",
  "globally" : true,
  "template" : "./web-pay-proceed.html",
  "props": "./web-pay-proceed-props.mjs",
  "mixins"   : ["./web-pay-proceed.mjs"]
});
//============================================================
// JOIN: web/pay/web-pay.html
//============================================================
Ti.Preload("ti/com/web/pay/web-pay.html", `<div class="web-pay">
  <ti-wizard
    :current="0"
    :title="title"
    :steps="PaySteps"
    :value="myPayment"
    can-click-head-item="passed"
    @change="OnChange"/>
</div>`);
//============================================================
// JOIN: web/pay/web-pay.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////////////
  data: ()=>({
    myPayment: {
      payType: null,
      //payType: "wx.qrcode",
      orderId: undefined,
      payOk: undefined,
      errMsg: null
    }
  }),
  ///////////////////////////////////////////////////
  props : {
    "title": {
      type: String,
      default: "i18n:pay-title"
    },
    "payType": {
      type: String,
      default: null
    },
    "payTypeOptions" : {
      type : Array,
      default : undefined
    },
  },
  ///////////////////////////////////////////////////
  computed : {
    //----------------------------------------------
    PaySteps() {
      return [{
        title: "i18n:pay-step-checkout-title",
        next: {
          enabled: ()=>!_.isEmpty(this.items)
        },
        comType: "WebPayCheckout",
        comConf: {
          tipIcon: this.tipIcon,
          tipText: this.tipText,
          items: this.items,
          currency: this.currency
        }
      }, {
        title: "i18n:pay-step-choose-title",
        prev : true,
        next : {
          enabled: {
            payType: "notBlank"
          }
        },
        comType: "WebPayChoose",
        comConf: {
          options: this.options,
          value: "=payType"
        }
      }, {
        title: "i18n:pay-step-proceed-title",
        prev : true,
        next : {
          enabled: {
            payOk: "isBoolean",
            orderId: "notBlank"
          }
        },
        comType: "WebPayProceed",
        comConf: {
          items: this.items,
          currency: this.currency,
          payType: "=payType",
          orderId: "=orderId",
          payOk: "=payOk",
          watchUser: this.watchUser,
          qrcodeSize: this.qrcodeSize,
          getOrder: this.getOrder,
          createOrder: this.createOrder,
          checkOrder: this.checkOrder,
          returnUrl: this.returnUrl
        }
      }, {
        title: "pay-step-done-title",
        comType: "WebPayDone",
        comConf: {
          payOk: "=payOk",
          errMsg: "=errMsg",
          orderId: "=orderId",
          okIcon: this.okIcon,
          okText: this.okText,
          okLinks: this.okLinks,
          failIcon: this.failIcon,
          failText: this.failText,
          failLinks: this.failLinks,
          doneLinks: this.doneLinks
        }
      }]
    }
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //----------------------------------------------
    OnChange(payment) {
      _.assign(this.myPayment, payment)
    }
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch: {
    "payType": {
      handler: function(){
        this.myPayment.payType = this.payType
      },
      immediate: true
    }
  }
  ///////////////////////////////////////////////////
}
Ti.Preload("ti/com/web/pay/web-pay.mjs", _M);
})();
//============================================================
// JOIN: web/pay/_com.json
//============================================================
Ti.Preload("ti/com/web/pay/_com.json", {
  "name" : "web-pay",
  "globally" : true,
  "template" : "./web-pay.html",
  "props"    : [
    "@com:web/pay/checkout/web-pay-checkout-props.mjs",
    "@com:web/pay/choose/web-pay-choose-props.mjs",
    "@com:web/pay/proceed/web-pay-proceed-props.mjs",
    "@com:web/pay/done/web-pay-done-props.mjs"
  ],
  "mixins"   : ["./web-pay.mjs"],
  "components": [
    "@com:ti/wizard",
    "@com:web/pay/checkout",
    "@com:web/pay/choose",
    "@com:web/pay/proceed",
    "@com:web/pay/done"
  ]
});
//============================================================
// JOIN: web/shelf/free/web-shelf-free.html
//============================================================
Ti.Preload("ti/com/web/shelf/free/web-shelf-free.html", `<div class="web-shelf-free"
  :class="TopClass"
  :style="TopStyle">
  <!--=============================-->
  <div class="free-main"
    :style="MainStyle">
    <div 
      v-for="it in TheItems"
        :key="it.key"
        class="free-item"
        :class="it.className"
        :style="it.style">
      <component
        :is="it.comType"
        v-bind="it.comConf"/>
    </div>
  </div>
  <!--=============================-->
</div>`);
//============================================================
// JOIN: web/shelf/free/web-shelf-free.mjs
//============================================================
(function(){
const _M = {
  //////////////////////////////////////////
  props : {
    "base": {
      type: String,
      default: undefined
    },
    /*
    Each item should obey the form below:
    {
      position: "top|left|bottom|right|center|free",
      className: "item-class-selector",
      style: {...},
      comType: "xxx",
      comConf: {...}
    }
    */
    "items" : {
      type : Array,
      default : ()=>[]
    },
    "background": {
      type: String,
      default: null
    },
    "width": {
      type: [String, Number],
      default: undefined
    },
    "height": {
      type: [String, Number],
      default: undefined
    },
    "mainBackground": {
      type: String,
      default: null
    },
    "mainWidth": {
      type: [String, Number],
      default: undefined
    },
    "mainHeight": {
      type: [String, Number],
      default: undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height,
        backgroundImage: this.getCssBackgroundUrl(this.background)
      })
    },
    //--------------------------------------
    MainStyle() {
      return Ti.Css.toStyle({
        width  : this.mainWidth,
        height : this.mainHeight,
        backgroundImage: this.getCssBackgroundUrl(this.mainBackground)
      })
    },
    //--------------------------------------
    TheItems() {
      if(!_.isArray(this.items))
        return []
      
      let list = []      
      _.forEach(this.items, (it, index)=>{
        // Eval the class
        let klass = [`at-${it.position||"free"}`, `i-${index}`]
        if(it.className) {
          klass.push(it.className)
        }
          
        // Eval style
        let style = Ti.Css.toStyle(it.style)

        // Join
        list.push({
          key: `It-${index}`,
          index,
          className: Ti.Css.mergeClassName(klass),
          style,
          comType: it.comType || "WebTextRaw",
          comConf: it.comConf
        })        
      })
      // Get the result
      return list
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    getCssBackgroundUrl(src) {
      return Ti.Css.toBackgroundUrl(src, this.base)
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/web/shelf/free/web-shelf-free.mjs", _M);
})();
//============================================================
// JOIN: web/shelf/free/_com.json
//============================================================
Ti.Preload("ti/com/web/shelf/free/_com.json", {
  "name" : "web-shelf-free",
  "globally" : true,
  "template" : "./web-shelf-free.html",
  "mixins" : ["./web-shelf-free.mjs"]
});
//============================================================
// JOIN: web/shelf/list/web-shelf-list.html
//============================================================
Ti.Preload("ti/com/web/shelf/list/web-shelf-list.html", `<div class="web-shelf-list"
  :class="TopClass">
  <!--
    Blank
  -->
  <ti-loading
    v-if="isEmpty"
      class="as-big"
      v-bind="blankAs"/>
  <!--
    Each Items
  -->
  <template v-else>
    <div
      v-for="it in ItemList"
        class="list-item"
        :key="it.key">
        <component
          :is="it.comType"
          v-bind="it.comConf"/>    
    </div>
  </template>
</div>`);
//============================================================
// JOIN: web/shelf/list/web-shelf-list.mjs
//============================================================
(function(){
const _M = {
  //////////////////////////////////////////
  props : {
    "data" : {
      type : Array,
      default : ()=>[]
    },
    // Item comType
    "comType": {
      type: String,
      default: "ti-label"
    },
    "comConf": {
      type: Object,
      default: ()=>({
        value: "=.."
      })
    },
    "blankAs": {
      type: Object,
      default: ()=>({
        text: "i18n:empty",
        icon: "fas-box-open"
      })
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    ItemList() {
      if(!_.isArray(this.data))
        return []
      
      let list = []      
      for(let i=0; i < this.data.length; i++) {
        let it = this.data[i]
        let comConf = Ti.Util.explainObj(it, this.comConf)
        list.push({
          key: `It-${i}`,
          comType: this.comType,
          comConf
        })        
      }
      // Get the result
      return list
    },
    //--------------------------------------
    isEmpty() {
      return _.isEmpty(this.ItemList)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/web/shelf/list/web-shelf-list.mjs", _M);
})();
//============================================================
// JOIN: web/shelf/list/_com.json
//============================================================
Ti.Preload("ti/com/web/shelf/list/_com.json", {
  "name" : "web-shelf-list",
  "globally" : true,
  "template" : "./web-shelf-list.html",
  "mixins" : ["./web-shelf-list.mjs"]
});
//============================================================
// JOIN: web/shelf/scroller/web-shelf-scroller.html
//============================================================
Ti.Preload("ti/com/web/shelf/scroller/web-shelf-scroller.html", `<div class="web-shelf-scroller"
  :class="TopClass">
  <!--=======================================-->
  <div class="scroll-btn at-left" :class="BtnLeftClass">
    <span @click.left="OnScrollLeft"><ti-icon :value="iconLeft"/></span>
  </div>
  <!--=======================================-->
  <div class="scroller-outer" ref="outer">
    <!--=====================================-->
    <div class="scroller-inner" ref="inner"
      :style="InnerStyle">
      <!--===================================-->
      <div
        v-for="it in ItemList"
          class="scroller-tile"
          :key="it.key"
          :style="ItemStyle">
          <component
            :is="it.comType"
            v-bind="it.comConf"/>
      </div>
      <!--===================================-->
    </div>
    <!--=====================================-->
  </div>
  <!--=======================================-->
  <div class="scroll-btn at-right" :class="BtnRightClass">
    <span @click.left="OnScrollRight"><ti-icon :value="iconRight"/></span>
  </div>
  <!--=======================================-->
</div>`);
//============================================================
// JOIN: web/shelf/scroller/web-shelf-scroller.mjs
//============================================================
(function(){
const _M = {
  //////////////////////////////////////////
  data: ()=>({
    myScrollLeft  : 0,
    myMaxScroll   : 0,
    myScrollWidth : 0
  }),
  //////////////////////////////////////////
  props : {
    "data" : {
      type : Array,
      default : ()=>[]
    },
    // Item count per-row
    "cols" : {
      type : Number,
      default : 4,
      validator: v => v > 0
    },
    // Item comType
    "comType": {
      type: String,
      default: "ti-label"
    },
    "comConf": {
      type: Object,
      default: ()=>({
        value: "=.."
      })
    },
    "iconLeft": {
      type: String,
      default: "zmdi-chevron-left"
    },
    "iconRight": {
      type: String,
      default: "zmdi-chevron-right"
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    InnerStyle() {
      return {
        "left": Ti.Css.toSize(this.myScrollLeft)
      }
    },
    //--------------------------------------
    ItemStyle() {
      return {
        "width" : Ti.Types.toPercent(1/this.cols)
      }
    },
    //--------------------------------------
    isLeftEnabled() {return this.myScrollLeft < 0;},
    isRightEnabled() {
      return (this.myScrollLeft + this.myMaxScroll) > this.myScrollWidth
    },
    //--------------------------------------
    BtnLeftClass() {
      return {
        "is-enabled"  : this.isLeftEnabled,
        "is-disabled" : !this.isLeftEnabled
      }
    },
    //--------------------------------------
    BtnRightClass() {
      return {
        "is-enabled"  : this.isRightEnabled,
        "is-disabled" : !this.isRightEnabled
      }
    },
    //--------------------------------------
    ItemList() {
      if(!_.isArray(this.data))
        return []
      
      let list = []      
      for(let i=0; i < this.data.length; i++) {
        let it = this.data[i]
        // let comConf = _.assign({}, this.comConf, {
        //   value: it
        // })
        let comConf = Ti.Util.explainObj(it, this.comConf)
        list.push({
          key: `It-${i}`,
          comType: this.comType,
          comConf
        })
      }
      
      // Get the result
      return list
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnScrollLeft() {
      // Guard
      if(!this.isLeftEnabled) {
        return
      }
      // Do Scroll
      let step = Math.abs(this.myScrollLeft)
      step = Math.min(this.myScrollWidth, step)
      this.myScrollLeft += step
    },
    //--------------------------------------
    OnScrollRight() {
      // Guard
      if(!this.isRightEnabled) {
        return
      }
      // Do Scroll
      let remain = this.myMaxScroll + this.myScrollLeft - this.myScrollWidth;
      let step = Math.min(this.myScrollWidth, remain)
      this.myScrollLeft -= step
    },
    //--------------------------------------
    evalScrolling() {
      this.myMaxScroll = this.$refs.inner.scrollWidth;
      this.myScrollWidth = this.$refs.inner.getBoundingClientRect().width;
      this.myScrollLeft = 0;
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "data": {
      handler: function(){
        this.$nextTick(()=>{
          this.evalScrolling()
        })
      },
      immediate: true
    }
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/web/shelf/scroller/web-shelf-scroller.mjs", _M);
})();
//============================================================
// JOIN: web/shelf/scroller/_com.json
//============================================================
Ti.Preload("ti/com/web/shelf/scroller/_com.json", {
  "name" : "web-shelf-scroller",
  "globally" : true,
  "template" : "./web-shelf-scroller.html",
  "mixins" : ["./web-shelf-scroller.mjs"]
});
//============================================================
// JOIN: web/shelf/wall/web-shelf-wall.html
//============================================================
Ti.Preload("ti/com/web/shelf/wall/web-shelf-wall.html", `<div class="web-shelf-wall"
  :class="TopClass">
  <!--
    Blank
  -->
  <ti-loading
    v-if="isEmpty"
      class="as-big"
      v-bind="blankAs"/>
  <!--
    Each Items
  -->
  <template v-else>
    <div v-for="wr in WallList"
      class="wall-group"
      :key="wr.key">
      <!--
        ===========================================
        Items in row
      -->
      <template v-for="it in wr.items">
        <!--
          Blank
        -->
        <div
          v-if="it.blank"
            class="wall-tile is-blank"
            :style="ItemStyle"></div>
        <!--
          Normal Item
        -->
        <div
          v-else
            class="wall-tile is-com"
            :style="ItemStyle">
            <component
              :is="it.comType"
              v-bind="it.comConf"/>
        </div>
      </template> <!-- End item-->
    </div> <!--End Row-->
  </template>
</div>`);
//============================================================
// JOIN: web/shelf/wall/web-shelf-wall.mjs
//============================================================
(function(){
const _M = {
  //////////////////////////////////////////
  props : {
    "data" : {
      type : Array,
      default : ()=>[]
    },
    // Item count per-row
    "cols" : {
      type : Number,
      default : 4,
      validator: v => v>0 && (parseInt(v) == v)
    },
    // Item comType
    "comType": {
      type: String,
      default: "ti-label"
    },
    "comConf": {
      type: Object,
      default: ()=>({
        value: "=.."
      })
    },
    "blankAs": {
      type: Object,
      default: ()=>({
        text: "i18n:empty",
        icon: "fas-box-open"
      })
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    ItemStyle() {
      return {
        "width" : Ti.Types.toPercent(1/this.cols)
      }
    },
    //--------------------------------------
    WallList() {
      if(!_.isArray(this.data))
        return []
      
      let list = []      
      let items = []
      let count = 1
      for(let i=0; i < this.data.length; i++) {
        let it = this.data[i]
        // let comConf = _.assign({}, this.comConf, {
        //   value: it
        // })
        let comConf = Ti.Util.explainObj(it, this.comConf)
        items.push({
          key: `It-${i}`,
          comType: this.comType,
          comConf
        })        

        // Next row
        if(count >= this.cols) {
          count = 1
          list.push({
            key: `Row-${list.length}`,
            items
          })
          items = []
        }
        // Next item
        else {
          count++
        }
      }
      // The last line
      if(!_.isEmpty(items)) {
        for(let i=items.length; i<this.cols; i++) {
          items.push({
            key: `It-${i}`,
            blank: true
          })
        }
        list.push({
          key: `Row-${list.length}`,
          items
        })
      }
      // Get the result
      return list
    },
    //--------------------------------------
    isEmpty() {
      return _.isEmpty(this.WallList)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/web/shelf/wall/web-shelf-wall.mjs", _M);
})();
//============================================================
// JOIN: web/shelf/wall/_com.json
//============================================================
Ti.Preload("ti/com/web/shelf/wall/_com.json", {
  "name" : "web-shelf-wall",
  "globally" : true,
  "template" : "./web-shelf-wall.html",
  "mixins" : ["./web-shelf-wall.mjs"]
});
//============================================================
// JOIN: web/text/heading/web-text-heading.html
//============================================================
Ti.Preload("ti/com/web/text/heading/web-text-heading.html", `<div class="web-text-heading">
  <!--Icon-->
  <div
    v-if="icon"
      class="as-icon"><ti-icon :value="icon"/></div>
  <!--Title-->
  <div
    v-if="title"
      class="as-title"
      @click.left="OnClickTitle"><span>{{title|i18n}}</span></div>
  <!--Comments-->
  <div
    v-if="comment"
      class="as-comment"><span>{{comment|i18n}}</span></div>
  <!--View more-->
  <div
    v-if="more"
      class="as-more"
      @click.left="OnClickMore"><span>{{more|i18n}}</span></div>
</div>`);
//============================================================
// JOIN: web/text/heading/web-text-heading.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  props : {
    "icon": {
      type : String,
      default: null
    },
    "title" : {
      type : String,
      default : null
    },
    "comment" : {
      type : String,
      default : null
    },
    "more": {
      type: String,
      default: null
    },
    "value": null
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickTitle() {
      this.$notify("fire", this.value)
    },
    //--------------------------------------
    OnClickMore() {
      this.$notify("more", this.value)
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/web/text/heading/web-text-heading.mjs", _M);
})();
//============================================================
// JOIN: web/text/heading/_com.json
//============================================================
Ti.Preload("ti/com/web/text/heading/_com.json", {
  "name" : "web-text-heading",
  "globally" : true,
  "template" : "./web-text-heading.html",
  "mixins"   : ["./web-text-heading.mjs"]
});
//============================================================
// JOIN: web/text/raw/web-text-raw.html
//============================================================
Ti.Preload("ti/com/web/text/raw/web-text-raw.html", `<div class="web-text-raw" :class="TopClass"><span>{{TheValue}}</span></div>
<div class="web-text-raw" :class="TopClass"><span>{{TheValue}}</span></div>`);
//============================================================
// JOIN: web/text/raw/web-text-raw.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  props : {
    "value": {
      type : [String, Number],
      default : "Web Text"
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    TheValue() {
      return this.value
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/web/text/raw/web-text-raw.mjs", _M);
})();
//============================================================
// JOIN: web/text/raw/_com.json
//============================================================
Ti.Preload("ti/com/web/text/raw/_com.json", {
  "name" : "web-text-raw",
  "globally" : true,
  "template" : "./web-text-raw.html",
  "mixins"   : ["./web-text-raw.mjs"]
});
//============================================================
// JOIN: web/tile/address/web-tile-address.html
//============================================================
Ti.Preload("ti/com/web/tile/address/web-tile-address.html", `<div class="web-tile-address"
  :class="TopClass">
  <!--
    Center
  -->
  <div class="at-center">
    <div class="is-info">
      <div
        v-if="Item.consignee">
          <span>{{'address-consignee'|i18n}}:</span>
          <em>{{Item.consignee}}</em></div>
      <div
        v-if="Item.phone">
          <span>{{'address-k-phone'|i18n}}:</span>
          <em>{{Item.phone}}</em></div>
      <div
        v-if="Item.email">
          <span>{{'address-k-email'|i18n}}:</span>
          <em>{{Item.email}}</em></div>
    </div>
    <div class="is-big">{{Item.street}}</div>
  </div>
  <!--
    Left top
  -->
  <div class="at-left-top is-float">
      <a 
        v-if="can.default && !Item.dftaddr"
          @click="OnSetDefault">{{'address-set-dft'|i18n}}</a>
      <span
        v-else-if="Item.dftaddr"
          class="is-bold">{{'address-is-dft'|i18n}}</span>
  </div>
  <!--
    Left-bottom
  -->
  <div class="at-left-bottom is-float">
    <span
      v-if="Item.city">{{Item.city}}</span>
    <span
      v-if="Item.province">{{Item.province}}</span>
    <span
      v-if="showCountry && Item.countryName">{{Item.countryName}}</span>
  </div>
  <!--
    Right-top
  -->
  <div
    v-if="can.remove || can.edit" 
      class="at-right-top is-float">
      <a v-if="can.remove" @click="OnRemove">{{'remove'|i18n}}</a>
      <a v-if="can.edit" @click="OnEdit">{{'edit'|i18n}}</a>
  </div>  
</div>`);
//============================================================
// JOIN: web/tile/address/web-tile-address.mjs
//============================================================
(function(){
const _M = {
  //////////////////////////////////////////
  props : {
    "value" : {
      type : Object,
      default : ()=>({})
    },
    "mapping": {
      type: Object,
      default: ()=>({
        id : "id",
        country  : "country",
        postcode : "postcode",
        province: "province",
        city: "city",
        street: "street",
        consignee: "consignee",
        phone: "phone",
        email: "email",
        dftaddr: "dftaddr"
      })
    },
    // {"HK":"Hong Kong","TW":"Taiwan","MO":"Macao"}
    "countries": {
      type: Object,
      default: undefined
    },
    "showCountry": {
      type: Boolean,
      default:true
    },
    "can": {
      type: Object,
      default: ()=>({
        remove  : true,
        edit    : true,
        default : true
      })
    },
    // If false emit the item after mapping
    "emitRawValue": {
      type: Boolean,
      default: true
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-highlight": this.Item.dftaddr
      })
    },
    //--------------------------------------
    Item() {
      let it = Ti.Util.translate(this.value, this.mapping)
      if(this.countries) {
        it.countryName = this.countries[it.country]
      } else {
        it.countryName = it.country
      }
      return it
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnRemove(){
      let v = this.getEmitValue()
      this.$notify('remove', v)
    },
    //--------------------------------------
    OnSetDefault(){
      let v = this.getEmitValue()
      this.$notify('set:default', v)
    },
    //--------------------------------------
    OnEdit(){
      let v = this.getEmitValue()
      this.$notify('edit', v)
    },
    //--------------------------------------
    getEmitValue() {
      let v = this.emitRawValue ? this.value : this.Item
      return _.cloneDeep(v)
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/web/tile/address/web-tile-address.mjs", _M);
})();
//============================================================
// JOIN: web/tile/address/_com.json
//============================================================
Ti.Preload("ti/com/web/tile/address/_com.json", {
  "name" : "web-tile-address",
  "globally" : true,
  "template" : "./web-tile-address.html",
  "mixins" : ["./web-tile-address.mjs"]
});
//============================================================
// JOIN: web/tile/order/web-tile-order.html
//============================================================
Ti.Preload("ti/com/web/tile/order/web-tile-order.html", `<div class="web-tile-order"
  :class="TopClass">
  <!--
    Summary
  -->
  <div class="as-summary">
    <!--ID-->
    <div class="or-field as-id">
      <span>{{'order-k-id'|i18n}}</span>
      <a 
        v-if="OrderHref"
          :href="OrderHref"
          @click.left.prevent="OnClickOrder">{{Order.id}}</a>
      <em
        v-else>{{Order.id}}</em>
    </div>
    <!--Date-->
    <div class="or-field as-datetime">
      <span>{{'wn-key-ct'|i18n}}</span>
      <em>{{Order.ct|datetime}}</em>
    </div>
    <!--Fee-->
    <div class="or-field as-price">
      <span>{{'order-k-fee'|i18n}}</span>
      <em>{{CurrencyChar}}{{Order.fee}}</em>
    </div>
    <!--Payment-->
    <div class="or-field as-pay_tp">
      <span>{{'order-k-pay_tp'|i18n}}</span>
      <em>{{'pay-by-'+Order.pay_tp|i18n}}</em>
    </div>
    <!--Status-->
    <div class="or-field as-st">
      <span>{{'order-k-st'|i18n}}</span>
      <em>{{OrderStatus|i18n}}</em>
    </div>
  </div>
  <!--
    Product list
  -->
  <div class="as-products">
    <table>
      <tr
        v-for="it in Products"
          class="as-pro-it">
          <!--Thumb-->
          <td><a 
              :href="it.href"
              @click.left.prevent="OnClickProduct(it)"><img :src="it.src"/></a></td>
          <!--Title-->
          <td>
              <a 
                :href="it.href"
                @click.left.prevent="OnClickProduct(it)">{{it.title}}</a>
          </td>
          <!--Price-->
          <td class="as-price">{{CurrencyChar}}{{it.price}}</td>
          <!--Amount-->
          <td class="as-amount">x{{it.amount}}</td>
          <!--Subtotal-->
          <td class="as-subtotal">{{CurrencyChar}}{{it.subtotal}}</td>
      </tr>
    </table>
  </div>
</div>`);
//============================================================
// JOIN: web/tile/order/web-tile-order.mjs
//============================================================
(function(){
const _M = {
  //////////////////////////////////////////
  props : {
    "value" : {
      type : Object,
      default : ()=>({})
    },
    "proThumbSrc": {
      type : String,
      default : undefined
    },
    "proHref": {
      type : String,
      default : undefined
    },
    "href": {
      type : String,
      default : undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass(
        `is-${this.OrderStatus}`
      )
    },
    //--------------------------------------
    Order() {
      return this.value || {}
    },
    //--------------------------------------
    OrderStatus() {
      return `or-st-${_.toLower(this.Order.st)}`
    },
    //--------------------------------------
    OrderHref() {
      if(this.href) {
        return Ti.S.renderBy(this.href, this.Order)
      }
    },
    //--------------------------------------
    CurrencyChar() {
      return Ti.Bank.getCurrencyChar(this.Order.currency||"RMB")
    },
    //--------------------------------------
    Products() {
      let list = []
      _.forEach(this.value.products, it=>{
        let pro = {...it}
        if(this.proThumbSrc) {
          pro.src = Ti.S.renderBy(this.proThumbSrc, it)
        }
        if(this.proHref) {
          pro.href = Ti.S.renderBy(this.proHref, it)
        }
        pro.subtotal = Ti.Num.precise(it.price * it.amount)
        list.push(pro)
      })
      return list
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickOrder() {
      if(this.Order.id)
        this.$notify("show:order", this.Order.id)
    },
    //--------------------------------------
    OnClickProduct({id}) {
      if(id) {
        this.$notify("open:product", id);
      }
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/web/tile/order/web-tile-order.mjs", _M);
})();
//============================================================
// JOIN: web/tile/order/_com.json
//============================================================
Ti.Preload("ti/com/web/tile/order/_com.json", {
  "name" : "web-tile-order",
  "globally" : true,
  "template" : "./web-tile-order.html",
  "mixins" : ["./web-tile-order.mjs"]
});
//============================================================
// JOIN: web/widget/sharebar/widget-sharebar.html
//============================================================
Ti.Preload("ti/com/web/widget/sharebar/widget-sharebar.html", `<div class="web-widget-sharebar"
  :class="TopClass">
  <!--
    Title
  -->
  <div
    v-if="title"
      class="as-title">{{title|i18n}}</div>
  <!--
    Items
  -->
  <div class="as-items">
    <a
      v-for="it in TheItems"
        class="bar-item">
      <i :class="it.iconClass"></i>
    </a>
  </div>
</div>`);
//============================================================
// JOIN: web/widget/sharebar/widget-sharebar.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  props : {
    "title": {
      type: String,
      default: null
    },
    "items" : {
      type : Array,
      default : ()=>[]
    }
  },
  /////////////////////////////////////////
  computed : {
    //------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------
    TheItems() {
      return this.evalItems(this.items)
    }
    //------------------------------------
  },
  /////////////////////////////////////////
  methods : {
    //------------------------------------
    evalItems(items) {
      let list = []
      _.forEach(items, (it, index)=>{
        //................................
        let li = ({
          //..............................
          "facebook": {
            iconClass: "fab fa-facebook-f"
          },
          //..............................
          "twitter": {
            iconClass: "fab fa-twitter"
          },
          //..............................
          "instagram": {
            iconClass: "fab fa-instagram"
          },
          //..............................
          "tumblr": {
            iconClass: "fab fa-tumblr"
          }
          //..............................
          //..............................
        })[it]
        //................................
        if(li)
          list.push(li)
        //................................
      })
      return list
    }
    //------------------------------------
  }
  /////////////////////////////////////////
}
Ti.Preload("ti/com/web/widget/sharebar/widget-sharebar.mjs", _M);
})();
//============================================================
// JOIN: web/widget/sharebar/_com.json
//============================================================
Ti.Preload("ti/com/web/widget/sharebar/_com.json", {
  "name" : "web-widget-sharebar",
  "globally" : true,
  "template" : "./widget-sharebar.html",
  "mixins"   : ["./widget-sharebar.mjs"],
  "components" : []
});
//============================================================
// JOIN: web/widget/summary/widget-summary.html
//============================================================
Ti.Preload("ti/com/web/widget/summary/widget-summary.html", `<div class="web-widget-summary"
  :class="TopClass">
  <!--
    Title
  -->
  <div
    v-if="title"
      class="as-title">{{title|i18n}}</div>
  <!--
    Items
  -->
  <div class="as-list">
    <div
      v-for="it in TheItems"
        class="as-item">
      <!--Icon-->
      <ti-icon
        v-if="it.icon"
          :value="it.icon"/>
      <!--Value-->
      <div class="as-value">{{it.value}}</div>
      <!--Text-->
      <div
        v-if="it.text"
          class="as-text">{{it.text|i18n}}</div>
    </div>
  </div>
</div>`);
//============================================================
// JOIN: web/widget/summary/widget-summary.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  props : {
    "title": {
      type: String,
      default: undefined
    },
    "items" : {
      type : Array,
      default : ()=>[]
    }
  },
  /////////////////////////////////////////
  computed : {
    //------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------
    TheItems() {
      let list = []
      _.forEach(this.items, (it, index)=>{
        list.push({
          key: `it-${index}`,
          index,
          icon: it.icon,
          text: it.text,
          value: it.value || 0
        })
      })
      return list
    }
    //------------------------------------
  }
  /////////////////////////////////////////
}
Ti.Preload("ti/com/web/widget/summary/widget-summary.mjs", _M);
})();
//============================================================
// JOIN: web/widget/summary/_com.json
//============================================================
Ti.Preload("ti/com/web/widget/summary/_com.json", {
  "name" : "web-widget-summary",
  "globally" : true,
  "template" : "./widget-summary.html",
  "mixins"   : ["./widget-summary.mjs"],
  "components" : []
});
//============================================================
// JOIN: web/widget/user/widget-user.html
//============================================================
Ti.Preload("ti/com/web/widget/user/widget-user.html", `<div class="web-widget-user"
  :class="TopClass">
  <!--
    Avatar
  -->
  <div class="as-avatar">
    <ti-icon :value="TheAvatar"/>
  </div>
  <!--
    Nickname
  -->
  <div class="as-title">
    <div class="as-nickname">{{TheNickname}}</div>
  </div>
  <!--
    Action bar
  -->
  <div class="as-actions">
    <div 
      class="ti-btn reset-passwd"
      @click="$notify('go:passwd:reset')">{{'passwd-reset'|i18n}}</div>
    <div
      class="ti-btn edit-profile"
      @click="$notify('go:my:profile')">{{'profile-edit'|i18n}}</div>
  </div>
</div>`);
//============================================================
// JOIN: web/widget/user/widget-user.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  props : {
    "me": {
      type: Object,
      default: ()=>({})
    },
    "avatarSrc": {
      type: String,
      default: undefined
    },
    "avatarIcons": {
      type: Object,
      default: ()=>({
        "unknown": "far-user",
        "male": "im-user-male",
        "female": "im-user-female"
      })
    }
  },
  /////////////////////////////////////////
  computed : {
    //------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------
    TheAvatar() {
      let me = this.me || {}
      if(this.avatarSrc && me.thumb) {
        return {
          type: "image",
          value: Ti.S.renderVars(me.thumb, this.avatarSrc)
        }
      }
      // Icon: male
      if(me.sex == 1) {
        return this.avatarIcons.male
      }
      // Icon: female
      if(me.sex == 2) {
        return this.avatarIcons.female
      }
      // Icon: unknown
      return this.avatarIcons.unknown || "far-user"
    },
    //------------------------------------
    TheNickname() {
      let me = this.me || {}
      return me.nickname 
             || me.email
             || me.phone
             || me.nm
             || me.id
             || "Anonymity"
    }
    //------------------------------------
  },
  /////////////////////////////////////////
  methods : {
    //------------------------------------
    
    //------------------------------------
  }
  /////////////////////////////////////////
}
Ti.Preload("ti/com/web/widget/user/widget-user.mjs", _M);
})();
//============================================================
// JOIN: web/widget/user/_com.json
//============================================================
Ti.Preload("ti/com/web/widget/user/_com.json", {
  "name" : "web-widget-user",
  "globally" : true,
  "template" : "./widget-user.html",
  "mixins"   : ["./widget-user.mjs"],
  "components" : []
});
//============================================================
// JOIN: wn/adaptlist/wn-adaptlist-methods.mjs
//============================================================
(function(){
const OBJ = {
  //---------------------------------------
  /***
   * Create new object
   */
  async doCreate() {
    // Load the creation setting
    let {
      types, 
      freeCreate
    } = await Wn.Sys.exec(`ti creation -cqn id:${this.meta.id}`, {as:"json"})

    let no = await Ti.App.Open({
      title : "i18n:create",
      type  : "success",
      position: "top",
      width  : 640,
      height : "61.8%",
      comType : "ti-obj-creation",
      comConf : {
        types, freeCreate
      },
      components : ["@com:ti/obj/creation"]
    })

    console.log(no)
    
    // Do Create
    // Check the newName
    if(no && no.name) {
      // Check the newName contains the invalid char
      if(no.name.search(/[%;:"'*?`\t^<>\/\\]/)>=0) {
        return await Ti.Alert('i18n:wn-create-invalid')
      }
      // Check the newName length
      if(no.length > 256) {
        return await Ti.Alert('i18n:wn-create-too-long')
      }      
      // Do the creation
      let json = JSON.stringify({
        nm   : no.name, 
        tp   : no.type=="folder"?"":no.type, 
        race : no.race
      })
      let newMeta = await Wn.Sys.exec2(
          `obj id:${this.meta.id} -cqno -new '${json}'`,
          {as:"json"})
      // Error
      if(newMeta instanceof Error) {
        Ti.Toast.Open("i18n:wn-create-fail", "error")
      }
      // Replace the data
      else {
        Ti.Toast.Open("i18n:wn-create-ok", "success")
        await this._run("reload")

        // Make it checked
        this.myCheckedIds = [newMeta.id]
        this.myCurrentId = newMeta.id
      }
    }  // ~ if(newName)
  },
  //--------------------------------------------
  async doRename() {
    let it = this.getCurrentItem()
    if(!it) {
      return await Ti.Toast.Open('i18n:wn-rename-none', "warn")
    }
    this.setItemStatus(it.id, "renaming")
    try {
      // Get newName from User input
      let newName = await Ti.Prompt({
          text : 'i18n:wn-rename',
          vars : {name:it.nm}
        }, {
          title : "i18n:rename",
          placeholder : it.nm,
          value : it.nm
        })
      // Check the newName
      if(newName) {
        // Check the newName contains the invalid char
        if(newName.search(/[%;:"'*?`\t^<>\/\\]/)>=0) {
          return await Ti.Alert('i18n:wn-rename-invalid')
        }
        // Check the newName length
        if(newName.length > 256) {
          return await Ti.Alert('i18n:wn-rename-too-long')
        }
        // Check the suffix Name
        let oldSuffix = Ti.Util.getSuffix(it.nm)
        let newSuffix = Ti.Util.getSuffix(newName)
        if(oldSuffix && oldSuffix != newSuffix) {
          let repair = await Ti.Confirm("i18n:wn-rename-suffix-changed")
          if(repair) {
            newName += oldSuffix
          }
        }
        // Mark renaming
        this.setItemStatus(it.id, "loading")
        // Do the rename
        let newMeta = await Wn.Sys.exec2(
            `obj id:${it.id} -cqno -u 'nm:"${newName}"'`,
            {as:"json"})
        // Error
        if(newMeta instanceof Error) {
          Ti.Toast.Open("i18n:wn-rename-fail", "error")
        }
        // Replace the data
        else {
          Ti.Toast.Open("i18n:wn-rename-ok", "success")
          this.setItem(newMeta)
        }
        this.setItemStatus({id:it.id, status:{loading:false}})
      }  // ~ if(newName)
    }
    // reset the status
    finally {
      this.setItemStatus(it.id, null)
    }
  },
  //--------------------------------------------
  async doDelete() {
    let list = this.getCheckedItems()
    // Guard
    if(_.isEmpty(list)) {
      return await Ti.Toast.Open('i18n:wn-del-none', "warn")
    }

    let delCount = 0
    // make removed files. it remove a video
    // it will auto-remove the `videoc_dir` in serverside also
    // so, in order to avoid delete the no-exists file, I should
    // remove the `videoc_dir` ID here, each time loop, check current
    // match the id set or not, then I will get peace
    let exRemovedIds = {}
    try {
      // Loop items
      for(let it of list) {
        // Duck check
        if(!it || !it.id || !it.nm)
          continue
        // Ignore obsolete item
        if(it.__is && (it.__is.loading || it.__is.removed))
          continue
        // Ignore the exRemovedIds
        if(exRemovedIds[it.id])
          continue
        
        // Mark item is processing
        this.setItemStatus(it.id, "loading")
        // If DIR, check it is empty or not
        if('DIR' == it.race) {
          let count = await Wn.Sys.exec(`count -A id:${it.id}`)
          count = parseInt(count)
          if(count > 0) {
            // If user confirmed, then rm it recurently
            if(!(await Ti.Confirm({
                text:'i18n:wn-del-no-empty-folder', vars:{nm:it.nm}}))) {
              this.setItemStatus(it.id, null)
              continue
            }
          }
        }
        // Do delete
        await Wn.Sys.exec(`rm ${'DIR'==it.race?"-r":""} id:${it.id}`)
        // Mark item removed
        this.setItemStatus(it.id, "removed")
        // If video result folder, mark it at same time
        let m = /^id:(.+)$/.exec(it.videoc_dir)
        if(m) {
          let vdId = m[1]
          exRemovedIds[vdId] = true
          this.setItemStatus(vdId, "removed")
        }
        // Counting
        delCount++
        // Then continue the loop .......^
      }
      // Do reload
      await this._run("reload")
    }
    // End deleting
    finally {
      Ti.Toast.Open("i18n:wn-del-ok", {N:delCount}, "success")
    }

  },
  //--------------------------------------------
  async doUpload(files=[]) {
    if(_.isFunction(this.beforeUpload)) {
      await this.beforeUpload()
    }

    // Prepare the list
    let ups = _.map(files, (file, index)=>({
      id : `U${index}_${Ti.Random.str(6)}`,
      file : file,
      total : file.size,
      current : 0
    }))

    // Show Uploading
    this.myUploadigFiles = ups

    // Prepare the list
    let newIds = {}
    // Do upload file one by one
    for(let up of ups) {
      let file = up.file
      let {ok, data} = await Wn.Io.uploadFile(file, {
        target : `id:${this.meta.id}`,
        progress : function(pe){
          up.current = pe.loaded
        }
      })
      if(ok) {
        newIds[data.id] = true
      }
    }

    // All done, hide upload
    _.delay(()=>{
      this.myUploadigFiles = []
    }, 1000)

    // Tell user ...
    Ti.Toast.Open("i18n:upload-done", "success")


    // Call reload
    await this._run("reload")

    // Make it checked
    this.myCheckedIds = newIds
    this.myCurrentId = null
  },
  //--------------------------------------------
  async doDownload() {
    let list = this.getCheckedItems()
    if(_.isEmpty(list)) {
      return await Ti.Toast.Open('i18n:wn-download-none', "warn")
    }
    // Too many, confirm at first
    if(list.length > 5) {
      if(!await Ti.Confirm({
        text : "i18n:wn-download-too-many",
        vars : {N:list.length}})) {
        return
      }
    }
    // Do the download
    for(let it of list) {
      if('FILE' != it.race) {
        if(!await Ti.Confirm({
            text : "i18n:wn-download-dir",
            vars : it
          }, {
            textYes : "i18n:continue",
            textNo  : "i18n:terminate"
          })){
          return
        }
        continue;
      }
      let link = Wn.Util.getDownloadLink(it)
      Ti.Be.OpenLink(link)
    }
  }
  //--------------------------------------------
}
Ti.Preload("ti/com/wn/adaptlist/wn-adaptlist-methods.mjs", OBJ);
})();
//============================================================
// JOIN: wn/adaptlist/wn-adaptlist-props.mjs
//============================================================
(function(){
const _M = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "meta" : {
    type : Object,
    default : null
  },
  // {list:[], pager:{..}}
  "data" : {
    type : [Object, Array],
    default : null
  },
  "changedId" : {
    type : String,
    default : null
  },
  "status" : {
    type : Object,
    default : ()=>({
      reloading : false
    })
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  // Drop files to upload
  "droppable" : {
    type : Boolean,
    default : true
  },
  // multi-selectable
  // effected when selectable is true
  "multi" : {
    type : Boolean,
    default : true
  },
  "checkable" : {
    type : Boolean,
    default : true
  },
  "blurable" : {
    type : Boolean,
    default : true
  },
  "selectable" : {
    type : Boolean,
    default : true
  },
  // aspect: list item spacing
  // `xs|sm|md|lg|xl`
  "spacing" : {
    type : String,
    default : "sm"
  },
  "keeyHiddenBy" : {
    type : String,
    default : "wn-list-adaptview-expose-hidden"
  },
  "routers" : {
    type : Object,
    default : ()=>({
      "reload" : "dispatch:current/reload"
    })
  },
  "listConf" : {
    type : Object,
    default : undefined
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "itemClassName" : {
    type : String,
    default : null
  },
  //-----------------------------------
  // Callback
  //-----------------------------------
  "beforeUpload" : {
    type: Function,
    default: undefined
  }
}
Ti.Preload("ti/com/wn/adaptlist/wn-adaptlist-props.mjs", _M);
})();
//============================================================
// JOIN: wn/adaptlist/wn-adaptlist.html
//============================================================
Ti.Preload("ti/com/wn/adaptlist/wn-adaptlist.html", `<div class="wn-adaptlist" 
  :class="TopClass"
  v-ti-activable>
  <div
    class="list-con ti-fill-parent"
    v-drop-files.mask="OnDropFiles">
    <!--==================================
      Show Loading
    -->
    <ti-loading
      v-if="isReloading"
        class="as-reloading as-mid-tip"
        text="i18n:reloading"/>
    <!--==================================
      Data List
    -->
    <ti-wall
      v-else
        class="ti-fill-parent"
        :data="TheDataList"
        :spacing="spacing"
        :changed-id="changedId"
        :current-id="myCurrentId"
        :checked-ids="myCheckedIds"
        :multi="multi"
        :checkable="checkable"
        :blurable="blurable"
        :selectable="selectable"
        :display="WallItemDisplay"
        :puppet-mode="true"
        v-bind="listConf"
        :on-init="OnListInit"
        @select="OnSelected"/>
    <!--==================================
      Hidden file upload control
    -->
    <input 
      type="file" 
      ref="file" 
      class="ti-hide"
      multiple
      @change.stop.seft="OnSelectLocalFilesToUpload">
    <!--==================================
      Uploading Pannel
    -->
    <div
      class="wal-uploading"
      :class="UploadingClass">
      <header>
        <ti-icon value="fas-spinner fa-pulse"/>
        <span>{{'uploading'|i18n}}</span>
      </header>
      <section>
        <ti-wall 
          :data="TheUploadingList"
          :spacing="spacing"
          :selectable="false"
          :multi="false"
          :checkable="false"
          :blurable="false"
          :display="UploadingItemDisplay"
          :puppet-mode="true"/>
      </section>
    </div>
    <!--==================================-->
  </div>
</div>`);
//============================================================
// JOIN: wn/adaptlist/wn-adaptlist.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////////
  data: ()=>({
    myCurrentId  : null,
    myCheckedIds : {},
    myUploadigFiles : [],
    myItemStatus : {},
    myExposeHidden : true,
    myData : null
  }),
  ////////////////////////////////////////////////
  computed : {
    //--------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------------
    isReloading() {
      return _.get(this.status, "reloading")
    },
    //--------------------------------------------
    WallItemDisplay() {
      return {
        key : "..",
        transformer : {
          name : "Wn.Util.getObjThumbInfo",
          args : [{
            status : this.myItemStatus,
            exposeHidden : this.myExposeHidden
          }]
        },
        comType : 'ti-obj-thumb',
        comConf : {
          "..." : "${=value}"
        }
      }
    },
    //--------------------------------------------
    UploadingItemDisplay() {
      return {
        key : "..",
        comType : 'ti-obj-thumb',
        comConf : {
          "..." : "${=value}"
        }
      }
    },
    //--------------------------------------------
    hasDataList() {
      return this.myData && _.isArray(this.myData.list)
    },
    //--------------------------------------------
    TheDataList() {
      if(!this.myData || _.isEmpty(this.myData.list)) {
        return []
      }
      let list = []
      for(let it of this.myData.list) {
        if(!this.isHiddenItem(it)) {
          let status = this.myItemStatus[it.id]
          //list.push(_.assign({$wn$adaptlist$status:status}, it))
          list.push(it)
        }
      }
      return list
    },
    //--------------------------------------------
    /***
     * Show uploading list
     */
    TheUploadingList() {
      let list = this.myUploadigFiles
      let re = []
      if(_.isArray(list)) {
        for(let it of list) {
          // Gen Preview for local image
          let mime = it.file.type
          let tp = Ti.Util.getSuffixName(it.file.name)
          let preview;
          if(/^image\//.test(mime)) {
            preview = {
              type : "localFile",
              value : it.file
            }
          } else {
            preview = Ti.Icons.get({tp, mime})
          }
          // Join to result list
          re.push({
            id    : it.id,
            title : it.file.name,
            preview,
            progress : (it.current/it.total)
          })
        }
      }
      return re
    },
    //--------------------------------------------
    /***
     * has uploading
     */
    hasUploading() {
      return this.myUploadigFiles.length > 0
    },
    //--------------------------------------------
    UploadingClass() {
      return this.hasUploading ? "up-show" : "up-hide"
    }
    //--------------------------------------------
  },  // ~ computed
  ////////////////////////////////////////////////
  methods : {
    //--------------------------------------------
    OnListInit($list){this.$innerList = $list},
    //--------------------------------------------
    // Events
    //--------------------------------------------
    OnSelected({currentId, checkedIds}) {
      //console.log("OnSelected", currentId, checkedIds)
      // For Desktop
      this.myCurrentId  = currentId
      this.myCheckedIds = checkedIds

      return {stop:false}
    },
    //--------------------------------------------
    async OnDropFiles(files) {
      // console.log("OnDropFiles", files)
      if(!this.droppable)
        return
      let fs = [...files]
      await this.doUpload(fs)
      
      // Wait the computed result and notify
      this.$nextTick(()=>{
        // Find my checked files
        let objs = []
        for(let it of this.TheDataList){
          if(this.myCheckedIds[it.id]){
            objs.push(it)
          }
        }

        // Emit events
        this.$notify("uploaded", objs)
      })
    },
    //--------------------------------------------
    async OnSelectLocalFilesToUpload(evt){
      await this.OnDropFiles(evt.target.files)
      this.$refs.file.value = ""
    },
    //--------------------------------------------
    // Getters
    //--------------------------------------------
    getCurrentItem() {
      if(this.myCurrentId) {
        return _.find(this.TheDataList, it=>it.id == this.myCurrentId)
      }
    },
    //--------------------------------------------
    getCheckedItems() {
      return _.filter(this.TheDataList, it=>this.myCheckedIds[it.id])
    },
    //--------------------------------------------
    setItem(newItem) {
      if(newItem && this.hasDataList) {
        let list = _.map(this.TheDataList, it => {
          return it.id == newItem.id
            ? newItem
            : it
        })
        this.myData.list = list
      }
    },
    //--------------------------------------------
    setItemStatus(id, status="loading") {
      this.myItemStatus = _.assign({}, this.myItemStatus, {
        [id] : status
      })
    },
    //--------------------------------------------
    // For global menu invoke checkAll/cancleAll
    invokeList(methodName) {
      console.log("methodName")
      Ti.InvokeBy(this.$innerList, methodName)
    },
    //--------------------------------------------
    isHiddenItem(it) {
      if(it.nm.startsWith(".") && !this.myExposeHidden) {
        return true
      }
      return false
    },
    //--------------------------------------------
    // Utility
    //--------------------------------------------
    async _run(nm, payload) {
      let target = (this.routers||{})[nm]
      // Run by customized function
      if(_.isFunction(target)) {
        await target()
      }
      // In app
      else if(target) {
        let app = Ti.App(this)
        return await app.exec(target, payload)
      }
    },
    //--------------------------------------------
    toggleExposeHidden() {
      let newVal = !this.myExposeHidden
      this.myExposeHidden = newVal
      if(this.keeyHiddenBy) {
        Ti.Storage.session.set(this.keeyHiddenBy, newVal)
      }
    },
    //--------------------------------------------
    openLocalFileSelectdDialog(){
      this.$refs.file.click()
    },
    //--------------------------------------------
    async openCurrentMeta() {
      let meta = this.getCurrentItem() || this.meta

      if(!meta) {
        return Ti.Toast.Open("i18n:nil-obj")
      }

      let reo = await Wn.EditObjMeta(meta, {fields:"auto"})
      
      // Update to current list
      if(reo) {
        let {updates, data} = reo
        // TODO if update the "thumb" may need to force reload the preview
        // Update to list
        this.setItem(data)
      }
    },
    //--------------------------------------------
    syncMyData() {
      this.myData = _.cloneDeep(this.data) || {
        list: [], pager: {}
      }
      this.myItemStatus = {}
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  watch: {
    //--------------------------------------------
    "data" : {
      handler : "syncMyData",
      immediate : true
    },
    //--------------------------------------------
    "myExposeHidden" : function(eh){
      this.$notify("expose-hidden", eh)
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  mounted : function(){
    //--------------------------------------------
    // Guart the uploading
    Ti.Fuse.getOrCreate().add({
      key : "wn-list-adaptview-check-uploading",
      everythingOk : ()=>{
        return !this.hasUploading
      },
      fail : ()=>{
        Ti.Toast.Open("i18n:upload-nofinished", "warn")
      }
    })
    // Restore the exposeHidden
    if(this.keeyHiddenBy) {
      this.myExposeHidden = Ti.Storage.session.getBoolean(this.keeyHiddenBy)
    }
  },
  //--------------------------------------------
  beforeDestroy : function(){
    Ti.Fuse.get().remove("wn-list-adaptview-check-uploading")
  }
  //--------------------------------------------
  ////////////////////////////////////////////////
}
Ti.Preload("ti/com/wn/adaptlist/wn-adaptlist.mjs", _M);
})();
//============================================================
// JOIN: wn/adaptlist/_com.json
//============================================================
Ti.Preload("ti/com/wn/adaptlist/_com.json", {
  "name" : "wn-adaptlist",
  "globally" : true,
  "template" : "./wn-adaptlist.html",
  "props" : "./wn-adaptlist-props.mjs",
  "methods" : "./wn-adaptlist-methods.mjs",
  "mixins" : ["./wn-adaptlist.mjs"],
  "components" : [
    "@com:ti/obj/thumb",
    "@com:ti/wall"]
});
//============================================================
// JOIN: wn/combo/edit-com/wn-combo-edit-com.html
//============================================================
Ti.Preload("ti/com/wn/combo/edit-com/wn-combo-edit-com.html", `<ti-label
  class="wn-combo-edit-com"
  :class="className"
  :placeholder="placeholder"
  :prefix-icon="ComIcon"
  :value="ComTitle"
  :suffix-icon="'zmdi-delete'"
  @click:value="OnClickValue"
  @suffix:icon="OnClickSuffixIcon"/>
  `);
//============================================================
// JOIN: wn/combo/edit-com/wn-combo-edit-com.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    myCom: null
  }),
  ////////////////////////////////////////////////////
  // props 
  props : {
    "value" : {
      type : Object,
      default : ()=>({})
    },
    "placeholder" : {
      type: String,
      default: "i18n:wn-edit-com-nil"
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    Dict() {
      return Wn.Dict.hMakerComponents()
    },
    //------------------------------------------------
    ComIcon() {
      return _.get(this.myCom, "icon")
    },
    //------------------------------------------------
    ComTitle() {
      return _.get(this.myCom, "title")
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    async OnClickValue() {
      //console.log("click", this.value)
      let com = await Wn.EditTiComponent(this.value)
      if(com) {
        this.notifyChange(com)
      }
    },
    //--------------------------------------
    OnClickSuffixIcon() {
      this.notifyChange({})
    },
    //--------------------------------------
    notifyChange(com={}) {
      if(!com.comType) {
        com.comType = undefined
        com.comConf = undefined
      }
      this.$notify("change", com)
    },
    //--------------------------------------
    async reloadMyCom() {
      if(!_.isEmpty(this.value)) {
        let {comType} = this.value
        this.myCom = await this.Dict.getItem(comType)
      }
      // Empty
      else {
        this.myCom = null
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    "value" : {
      handler: "reloadMyCom",
      immediate : true
    }
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/wn/combo/edit-com/wn-combo-edit-com.mjs", _M);
})();
//============================================================
// JOIN: wn/combo/edit-com/_com.json
//============================================================
Ti.Preload("ti/com/wn/combo/edit-com/_com.json", {
  "name" : "wn-combo-edit-com",
  "globally" : true,
  "template" : "./wn-combo-edit-com.html",
  "mixins"   : "./wn-combo-edit-com.mjs"
});
//============================================================
// JOIN: wn/combo/input/wn-combo-input.html
//============================================================
Ti.Preload("ti/com/wn/combo/input/wn-combo-input.html", `<ti-combo-input v-bind="this"
  
  :options="OptionsDict"
  :drop-com-type="DropComType"
  :prefix-icon="ThePrefixIcon"
  :drop-display="TheDropDisplay"
  
  @change="$notify('change', $event)"/>
  `);
//============================================================
// JOIN: wn/combo/input/wn-combo-input.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    loading : false
  }),
  ////////////////////////////////////////////////////
  // props 
  props : {
    "itemBy" : {
      type : [String, Function],
      default : undefined
    },
    "findBy" : {
      type : [String, Function],
      default : undefined
    },
    "loadingIcon" : {
      type : String,
      default : "zmdi-settings zmdi-hc-spin"
    },
    "canInput" : {
      type : Boolean,
      default : true
    },
    "autoCollapse" : {
      type : Boolean,
      default : false
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    DropComType() {
      return this.dropComType || "wn-list"
    },
    //------------------------------------------------
    ThePrefixIcon() {
      if(this.loading) {
        return this.loadingIcon
      }
      return this.prefixIcon
    },
    //---------------------------------------------------
    OptionsDict() {
      return Wn.Dict.evalOptionsDict(this, ({loading}) => {
        this.loading = loading
      })
    },
    //---------------------------------------------------
    TheDropDisplay() {
      return this.dropDisplay || ["@<thumb>", "title|text"]
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/wn/combo/input/wn-combo-input.mjs", _M);
})();
//============================================================
// JOIN: wn/combo/input/_com.json
//============================================================
Ti.Preload("ti/com/wn/combo/input/_com.json", {
  "name" : "wn-combo-input",
  "globally" : true,
  "template" : "./wn-combo-input.html",
  "props"    : [
    "@com:ti/input/ti-input-props.mjs",
    "@com:ti/combo/input/ti-combo-input-props.mjs"],
  "mixins"   : "./wn-combo-input.mjs",
  "components" : [
    "@com:ti/combo/input",
    "@com:wn/list",
    "@com:wn/obj/icon"]
});
//============================================================
// JOIN: wn/combo/multi-input/wn-combo-multi-input.html
//============================================================
Ti.Preload("ti/com/wn/combo/multi-input/wn-combo-multi-input.html", `<ti-combo-multi-input v-bind="this"

  :options="OptionsDict"
  :tag-mapping="TheTagMapping"
  :drop-com-type="DropComType"
  :prefix-icon="ThePrefixIcon"
  :tag-item-icon-by="TheTagItemIconBy"
  :drop-display="TheDropDisplay"
  
  @change="$notify('change', $event)"/>
  `);
//============================================================
// JOIN: wn/combo/multi-input/wn-combo-multi-input.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  data : ()=>({
    loading : false
  }),
  ////////////////////////////////////////////////////
  // props 
  props : {
    "itemBy" : {
      type : [String, Function],
      default : undefined
    },
    "findBy" : {
      type : [String, Function],
      default : undefined
    },
    "loadingIcon" : {
      type : String,
      default : "zmdi-settings zmdi-hc-spin"
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    DropComType() {
      return this.dropComType || "wn-list"
    },
    //------------------------------------------------
    ThePrefixIcon() {
      if(this.loading && this.prefixIcon) {
        return this.loadingIcon
      }
      return this.prefixIcon
    },
    //---------------------------------------------------
    OptionsDict() {
      return Wn.Dict.evalOptionsDict(this, ({loading}) => {
        this.loading = loading
      })
    },
    //------------------------------------------------
    TheTagMapping() {
      if(!_.isEmpty(this.tagMapping)) {
        return this.tagMapping
      }
      return {
        text  : "title|nm",
        icon  : "icon",
        value : "id"
      }
    },
    //------------------------------------------------
    TheTagItemIconBy() {
      return this.tagItemIconBy
               || (meta => Wn.Util.getObjIcon(meta))
     },
    //---------------------------------------------------
    TheDropDisplay() {
      return this.dropDisplay || ["@<thumb>", "title", "nm"]
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/wn/combo/multi-input/wn-combo-multi-input.mjs", _M);
})();
//============================================================
// JOIN: wn/combo/multi-input/_com.json
//============================================================
Ti.Preload("ti/com/wn/combo/multi-input/_com.json", {
  "name" : "wn-combo-multi-input",
  "globally" : true,
  "template" : "./wn-combo-multi-input.html",
  "props"    : [
    "@com:ti/input/ti-input-props.mjs",
    "@com:ti/input/tags/ti-input-tags-props.mjs",
    "@com:ti/combo/input/ti-combo-input-props.mjs"],
  "mixins"   : "./wn-combo-multi-input.mjs",
  "components" : [
    "@com:ti/combo/multi-input",
    "@com:wn/list",
    "@com:wn/obj/icon"]
});
//============================================================
// JOIN: wn/droplist/wn-droplist.html
//============================================================
Ti.Preload("ti/com/wn/droplist/wn-droplist.html", `<component 
  :is="ComType"
  v-bind="this"
  :can-input="false"
  :must-in-list="true"
  :auto-collapse="true"
  @change="$notify('change', $event)"/>`);
//============================================================
// JOIN: wn/droplist/wn-droplist.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////////////
  props : {
    "multi" : {
      type : Boolean,
      default : false
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    ComType() {
      return this.multi
        ? "wn-combo-multi-input"
        : "wn-combo-input"
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/wn/droplist/wn-droplist.mjs", _M);
})();
//============================================================
// JOIN: wn/droplist/_com.json
//============================================================
Ti.Preload("ti/com/wn/droplist/_com.json", {
  "name" : "wn-droplist",
  "globally" : true,
  "template" : "./wn-droplist.html",
  "props"    : [
    "@com:ti/input/ti-input-props.mjs",
    "@com:ti/input/tags/ti-input-tags-props.mjs",
    "@com:ti/combo/input/ti-combo-input-props.mjs"],
  "mixins"   : ["./wn-droplist.mjs"],
  "components" : [
    "@com:wn/combo/input",
    "@com:wn/combo/multi-input"
  ]
});
//============================================================
// JOIN: wn/entity/history/wn-entity-history.html
//============================================================
Ti.Preload("ti/com/wn/entity/history/wn-entity-history.html", `<ti-gui
  class="wn-entity-history"
  :class="TopClass"
  :layout="Layout"
  :schema="Schema"
  :shown="myShown"
  :can-loading="true"
  :loading-as="loading"
  @block:shown="OnShownChange"
  @filter::change="OnFilterChange"
  @sorter::change="OnSorterChange"
  @pager::change="OnPagerChange"
  @list::select="OnSelect"/>`);
//============================================================
// JOIN: wn/entity/history/wn-entity-history.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////////////
  data: ()=>({
    "myShown": {},
    "myList": [],
    "myHisRecord": null,
    "myFilterKeyword": null,
    "myFilterMatch": {},
    "mySort": {
      createTime: -1
    },
    "myPager": {
      pn: 1,
      pgsz: 20
    },
    "loading": false
  }),
  ////////////////////////////////////////////////////
  props : {
    "meta": {
      type: Object,
      default: ()=>({})
    },
    "data": {
      type: Object,
      default: ()=>({})
    },
    "status": {
      type: Object,
      default: ()=>({})
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    HistoryItems() {
      let items = []
      _.forEach(this.data.list, it=> {
        let name  = Ti.Util.getMajorName(it.nm)
        let title = it.title
        if(!title) {
          title =  "_history" == name
            ? "i18n:default"
            : name
        }
        items.push({name, title})
      })
      // Update shown
      if(!_.isEmpty(items)) {
        this.myShown = _.assign({
          [_.first(items).name] : true
        }, this.myShown)
      }
      // Return
      return items
    },
    //------------------------------------------------
    CurrentHistory() {
      return _.first(Ti.Util.truthyKeys(this.myShown))
    },
    //------------------------------------------------
    Layout() {
      let blocks = []
      for(let hi of this.HistoryItems) {
        blocks.push({
          type: "cols",
          title: hi.title,
          name : hi.name,
          border: true,
          blocks: [{
            type: "rows",
            size: "65%",
            blocks: [{
              "type": "cols",
              "size": ".44rem",
              "blocks": [{
                  "name": "filter",
                  "flex": "both",
                  "body": "filter"
                }, {
                  "name": "sorter",
                  "flex": "none",
                  "body": "sorter"
                }]
              }, {
                "name" : "list",
                "size" : "stretch",
                "overflow" : "cover",
                "body" : "list"
              }, {
                "name" : "pager",
                "size" : "auto",
                "body" : "pager"
              }]
          }, {
            name: "form",
            body: "form"
          }]
        })
      }
      return {type: "tabs", blocks}
    },
    //------------------------------------------------
    Schema() {
      return {
        //............................................
        filter : {
          comType : "TiComboFilter",
          comConf : {
            placeholder : "i18n:wn-en-his-flt-tip",
            dropWidth: -500,
            form: {
              fields: [{
                  title: "i18n:wn-en-his-ct",
                  name: "createTime",
                  comType: "ti-input-daterange",
                  comConf: {
                    valueType: "ms-range"
                  }
                },{
                  title: "i18n:wn-en-his-utp",
                  name: "userType",
                  comType: "ti-input"
                },{
                  title: "i18n:wn-en-his-tid",
                  name: "targetId",
                  comType: "ti-input"
                },{
                  title: "i18n:wn-en-his-tnm",
                  name: "targetName",
                  comType: "ti-input"
                },{
                  title: "i18n:wn-en-his-ttp",
                  name: "targetType",
                  comType: "ti-input"
                },{
                  title: "i18n:wn-en-his-opt",
                  name: "operation",
                  comType: "ti-input"
                }]
            },
            value: {
              keyword: this.myFilterKeyword,
              match: this.myFilterMatch
            }
          }
        },
        //............................................
        sorter: {
          comType: "TiComboSorter",
          comConf: {
            dropWidth : 200,
            options: [
              {value:"createTime",   text:"i18n:wn-en-his-ct"},
              {value:"userType",     text:"i18n:wn-en-his-utp"},
              {value:"targetType",   text:"i18n:wn-en-his-ttp"}],
            value: this.mySort
          }
        },
        //............................................
        list: {
          comType: "TiTable",
          comConf: {
            data: this.myList,
            fields: [{
              title:"i18n:wn-en-his-usr",
              display: ["userName","userType:[${val}]"]
            },{
              title:"i18n:wn-en-his-ct",
              display: {
                key:"createTime",
                transformer: "Ti.DateTime.format"
              }
            },{
              title:"i18n:wn-en-his-tar",
              display: ["targetName","targetType:[${val}]"]
            },{
              title:"i18n:wn-en-his-opt",
              display: "operation"
            }]
          }
        },
        //............................................
        pager : {
          comType : "TiPagingJumper",
          comConf : {
            value : this.myPager
          }
        },
        //............................................
        form: {
          comType: "TiForm",
          comConf: {
            data: this.myHisRecord,
            autoShowBlank: true,
            fields: [{
                title:"ID",
                name: "id"
              },{
                title:"i18n:wn-en-his-uid",
                name: "userId"
              },{
                title:"i18n:wn-en-his-unm",
                name: "userName"
              },{
                title:"i18n:wn-en-his-utp",
                name: "userType"
              },{
                title:"i18n:wn-en-his-ct",
                name: "createTime",
                type: "AMS"
              },{
                title:"i18n:wn-en-his-tid",
                name: "targetId"
              },{
                title:"i18n:wn-en-his-tnm",
                name: "targetName"
              },{
                title:"i18n:wn-en-his-ttp",
                name: "targetType"
              },{
                title:"i18n:wn-en-his-opt",
                name: "operation"
              },{
                title:"i18n:wn-en-his-mor",
                name: "more"
              }]
          }
        }
        //............................................
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnShownChange(shown) {
      this.myShown = shown
    },
    //------------------------------------------------
    OnSelect({current}) {

      this.myHisRecord = current
    },
    //------------------------------------------------
    async OnFilterChange({match,keyword}={}) {
      this.myFilterMatch = match
      this.myFilterKeyword = keyword
      await this.reloadList()
    },
    //------------------------------------------------
    async OnSorterChange(sort) {
      this.mySort = sort
      await this.reloadList()
    },
    //------------------------------------------------
    async OnPagerChange(page) {
      _.assign(this.myPager, page)
      await this.reloadList()
    },
    //------------------------------------------------
    async reloadList() {
      // Prepare the command
      let hisName = this.CurrentHistory
      if("_history" == hisName) {
        hisName = ""
      }
      let cmds = [`history ${hisName} query`]

      // Sort
      if(!_.isEmpty(this.mySort)) {
        let sort = JSON.stringify(this.mySort)
        cmds.push(`-sort '${sort}'`)
      }
      
      // Pager
      cmds.push(`-pn ${this.myPager.pn}`)
      cmds.push(`-pgsz ${this.myPager.pgsz}`)
      cmds.push("-cqn")

      // Filter
      let flt = _.assign({}, this.myFilterMatch)
      if(this.myFilterKeyword) {
        if(Wn.Io.isFullObjId(this.myFilterKeyword)) {
          flt.userId = this.myFilterKeyword
        } else {
          flt.userName = this.myFilterKeyword
        }
      }
      let input = JSON.stringify(flt)

      // Load
      this.loading = true
      let reo = await Wn.Sys.exec2(cmds.join(" "), {
        input, as:"json"
      })

      // Update
      this.myList = reo.list
      this.myPager = reo.pager
      this.loading = false
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    "CurrentHistory": function(){
      this.reloadList()
    }
  }
  ////////////////////////////////////////////////////
}
Ti.Preload("ti/com/wn/entity/history/wn-entity-history.mjs", _M);
})();
//============================================================
// JOIN: wn/entity/history/_com.json
//============================================================
Ti.Preload("ti/com/wn/entity/history/_com.json", {
  "name" : "wn-entity-history",
  "globally" : true,
  "template" : "./wn-entity-history.html",
  "mixins"   : ["./wn-entity-history.mjs"],
  "components": [
    "@com:ti/input/daterange",
    "@com:ti/combo/filter",
    "@com:ti/paging/jumper"
  ]
});
//============================================================
// JOIN: wn/explorer/wn-explorer.html
//============================================================
Ti.Preload("ti/com/wn/explorer/wn-explorer.html", `<div class="wn-explorer"
  v-drop-off
  :class="topClass">
  <!--
    Sky
  -->
  <div v-if="show.sky"
    class="explorer-sky">
    <!--Logo-->
    <div v-if="show.logo"
      class="sky-logo ti-flex-center">
      <slot name="logo"></slot>
    </div>
    <!--Title/Crumb-->
    <div v-if="!noTitle"
      class="sky-title">
      <slot name="title">
        <ul class="as-address-bar">
          <li v-for="an in ancestors" :key="an.id">
            <a :href="getObjLink(an)"
              @click.prevent="$notify('main:open', an)">{{getObjTitle(an)}}</a>
            <ti-icon class="center" value="chevron_right"/>
          </li>
          <li v-if="meta">
            <b>{{getObjTitle(meta)}}</b>
            <span v-if="status.changed"
              class="ti-mark-changed">*</span>
          </li>
        </ul>
      </slot>
    </div>
    <!--Actions-->
    <div v-if="show.action"
      class="sky-action ti-flex-right">
      <slot name="action"></slot>
    </div>
  </div>
  <!--
    Aside
  -->
  <div v-if="show.aside"
    class="explorer-aside">
    <slot name="aside"></slot>
  </div>
  <!--
    Main Arena
  -->
  <div class="explorer-arena">
    <slot name="arena"></slot>
  </div>
  <!--
    Footer
  -->
  <div v-if="show.footer"
    class="explorer-footer">
    <slot name="footer"></slot>
  </div>
  <div v-if="loading" class="exploer-loading-mask"></div>
</div>`);
//============================================================
// JOIN: wn/explorer/wn-explorer.mjs
//============================================================
(function(){
const _M = {
  //////////////////////////////////////////////
  props : {
    "loading" : {
      type : Boolean,
      default : false
    },
    "noTitle" : {
      type : Boolean,
      default : false
    },
    "meta" :{
      type : Object,
      default : ()=>({})
    },
    "ancestors" : {
      type : Array,
      default : ()=>[]
    },
    "children" : {
      type : Array,
      default : ()=>[]
    },
    "status" : {
      type : Object,
      default : ()=>({
        changed : false
      })
    }
  },
  //////////////////////////////////////////////
  computed : {
    show() {
      let re = {
        logo   : this.$slots.logo   ? true : false,
        action : this.$slots.action ? true : false,
        aside  : this.$slots.aside  ? true : false,
        footer : this.$slots.footer ? true : false,
      }
      re.sky = !(this.noTitle && !re.logo && !re.action)
      return re
    },
    topClass() {
      return {
        "no-sky"    : !this.show.sky,
        "no-aside"  : !this.show.aside,
        "no-footer" : !this.show.footer,
      }
    }
  },
  //////////////////////////////////////////////
  methods : {
    //.........................................
    getObjTitle(meta) {
      let title = meta.title || meta.nm
      return Ti.I18n.text(title)
    },
    //.........................................
    getObjLink(meta) {
      return Wn.Util.getAppLink(meta).toString()
    },
  },
  //////////////////////////////////////////////
  mounted : function() {
    // console.log(this.$slots)
  }
}
Ti.Preload("ti/com/wn/explorer/wn-explorer.mjs", _M);
})();
//============================================================
// JOIN: wn/explorer/_com.json
//============================================================
Ti.Preload("ti/com/wn/explorer/_com.json", {
  "name" : "wn-explorer",
  "globally" : true,
  "template" : "./wn-explorer.html",
  "mixins" : ["./wn-explorer.mjs"]
});
//============================================================
// JOIN: wn/gui/arena/wn-gui-arena.html
//============================================================
Ti.Preload("ti/com/wn/gui/arena/wn-gui-arena.html", `<div class="wn-gui-arena">
  <component 
    :is="comType"
      class="ti-cover-parent"
      v-bind="comConf"/>
</div>`);
//============================================================
// JOIN: wn/gui/arena/wn-gui-arena.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  props : {
    "meta" : {
      type : Object,
      default : null
    },
    "comType" : {
      type : String,
      default : "ti-loading"
    },
    "comConf" : {
      type : Object,
      default : ()=>({})
    }
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/wn/gui/arena/wn-gui-arena.mjs", _M);
})();
//============================================================
// JOIN: wn/gui/arena/_com.json
//============================================================
Ti.Preload("ti/com/wn/gui/arena/_com.json", {
  "name" : "wn-gui-arena",
  "globally" : true,
  "template" : "./wn-gui-arena.html",
  "mixins"   : ["./wn-gui-arena.mjs"]
});
//============================================================
// JOIN: wn/gui/footer/wn-gui-footer.html
//============================================================
Ti.Preload("ti/com/wn/gui/footer/wn-gui-footer.html", `<div class="wn-gui-footer">
  <!--
    Info
  -->
  <div class="as-info ti-flex-center">
    <ti-icon v-if="infoIcon"
      :value="infoIcon"/>
    <span v-if="infoText"
      >{{infoText|i18n}}</span>
  </div>
  <!--
    Message
  -->
  <div class="as-msg ti-flex-center">
    {{message}}
  </div>
  <!--
    Indicator
  -->
  <div class="as-indi">
    {{indicator}}
  </div>
</div>`);
//============================================================
// JOIN: wn/gui/footer/wn-gui-footer.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  /////////////////////////////////////////
  props : {
    "infoIcon" : {
      type : [String, Object],
      default : undefined
    },
    "infoText" : {
      type : String,
      default : undefined
    },
    "message" : {
      type : String,
      default : undefined
    },
    "indicator" : {
      type : String,
      default : undefined
    }
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/wn/gui/footer/wn-gui-footer.mjs", _M);
})();
//============================================================
// JOIN: wn/gui/footer/_com.json
//============================================================
Ti.Preload("ti/com/wn/gui/footer/_com.json", {
  "name" : "wn-gui-footer",
  "globally" : true,
  "template" : "./wn-gui-footer.html",
  "mixins"   : ["./wn-gui-footer.mjs"]
});
//============================================================
// JOIN: wn/gui/side/nav/com/side-nav-item/side-nav-item.html
//============================================================
Ti.Preload("ti/com/wn/gui/side/nav/com/side-nav-item/side-nav-item.html", `<div class="side-nav-item" :class="topClass">
  <!--
    Self Info
  -->
  <div class="it-info" >
    <!--Icon-->
    <span v-if="icon" class="it-info-icon">
      <ti-icon :value="icon" size=".16rem"/>
    </span>
    <!--Group-->
    <span v-if="isGroup"
      class="it-info-text"
      @click.stop.prevent="onClickGroupInfo">{{title|i18n}}</span>
    <!--Item-->
    <a v-else
      class="it-info-text"
      :href="href"
      @click.stop.prevent="onClickItemInfo">
      {{title|i18n}}
    </a>
  </div>
  <!--
    Sub Container
  -->
  <div class="it-con" v-if="items && items.length > 0">
      <side-nav-item v-for="subIt in items"
        :key="subIt.key"
        :group-status-store-key="subIt.key"
        :highlight-id="highlightId"
        v-bind="subIt"
        @item:actived="$notify('item:actived', $event)"/>
  </div>
</div>`);
//============================================================
// JOIN: wn/gui/side/nav/com/side-nav-item/side-nav-item.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  ///////////////////////////////////////////
  data : ()=>{
    return {
      collapse : true
    }
  },
  ///////////////////////////////////////////
  props : {
    "groupStatusStoreKey" : {type:String, default:null},
    "highlightId" : {type:String, default:null},
    "id" : {type:String, default:null},
    "depth" : {type:Number, default:0},
    "icon"  : {type:[String,Object], default:null},
    "title" : {type:String, default:null},
    "path"  : {type:String, default:null},
    "view"  : {type:String, default:null},
    "href"  : {type:String, default:null},
    "items" : {
      type : Array,
      default : ()=>[]
    }
  },
  ///////////////////////////////////////////
  computed : {
    topClass() {
      return {
        "is-top"   : this.isTop,
        "is-sub"   : !this.isTop,
        "is-group" : this.isGroup,
        "is-item"  : !this.isGroup,
        "is-collapse"  : this.collapse,
        "is-expend"    : !this.collapse,
        "is-highlight" : this.isHighlight
      }
    },
    isTop() {
      return this.depth == 0
    },
    isGroup() {
      return _.isArray(this.items)
    },
    isHighlight() {
      return this.id && this.id == this.highlightId
    }
  },
  ///////////////////////////////////////////
  methods : {
    onClickGroupInfo() {
      if(this.isGroup) {
        this.collapse = !this.collapse
        // Save status
        if(this.groupStatusStoreKey) {
          Ti.Storage.session.set(this.groupStatusStoreKey, this.collapse)
        }
      }
    },
    onClickItemInfo() {
      this.$notify("item:actived", {
        id: this.id,
        title : this.title,
        path : this.path,
        href : this.href,
        view : this.view
      })
    }
  },
  ///////////////////////////////////////////
  mounted : function(){
    if(this.isGroup) {
      // Only Top Group is expended
      if(this.isTop) {
        this.collapse = false
      }
      // Others group will default collapse
      // The 'item' will ignore the setting of collapse
      else {
        this.collapse = true
      }
      // Load local setting
      if(this.groupStatusStoreKey) {
        this.collapse = 
          Ti.Storage.session.getBoolean(this.groupStatusStoreKey, this.collapse)
      }
    }
  }
  ///////////////////////////////////////////
}
Ti.Preload("ti/com/wn/gui/side/nav/com/side-nav-item/side-nav-item.mjs", _M);
})();
//============================================================
// JOIN: wn/gui/side/nav/com/side-nav-item/_com.json
//============================================================
Ti.Preload("ti/com/wn/gui/side/nav/com/side-nav-item/_com.json", {
  "name" : "side-nav-item",
  "template" : "./side-nav-item.html",
  "mixins" : ["./side-nav-item.mjs"]
});
//============================================================
// JOIN: wn/gui/side/nav/wn-gui-side-nav.html
//============================================================
Ti.Preload("ti/com/wn/gui/side/nav/wn-gui-side-nav.html", `<div class="wn-gui-side-nav"
  :class="TopClass"
  v-ti-activable>
  <side-nav-item v-for="it in TheItems"
    :key="it.key"
    v-bind="it"
    @item:actived="onItemActived"/>
</div>`);
//============================================================
// JOIN: wn/gui/side/nav/wn-gui-side-nav.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  props : {
    "items" : {
      type : Array,
      default : null
    },
    "highlightItemId" : {
      type : String,
      default : null
    },
    "highlightItemPath" : {
      type : String,
      default : null
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //-------------------------------------
    TheItems() {
      let list = []
      if(_.isArray(this.items)) {
        for(let it of this.items) {
          list.push(this.evalItem(it))
        }
      }
      return list;
    },
    //-------------------------------------
    theHighlightItemId() {
      let list = this.joinHighlightItems([], this.items)
      if(list.length > 0) {
        // Sort the list, 0->N, the first one should be the hightlight one
        list.sort((it0,it1)=>it0.score-it1.score)
        // Get the first one
        return _.first(list).id
      }
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //-------------------------------------
    evalItem(it={}) {
      // Children
      let items = null
      if(_.isArray(it.items)) {
        items = []
        for(let subIt of it.items) {
          items.push(this.evalItem(subIt))
        }
      }
      // Self
      return _.assign(_.pick(it, ["id","key","depth","icon","title","path","view"]), {
        items,
        groupStatusStoreKey : it.key,
        highlightId : this.theHighlightItemId,
        href : it.id ? Wn.Util.getAppLink(it.id)+"" : null
      })
    },
    //-------------------------------------
    joinHighlightItems(list=[], items=[]) {
      if(this.highlightItemId && _.isArray(items) && items.length>0) {
        for(let it of items) {
          // Match the ID, 0
          if(it.id == this.highlightItemId) {
            list.push({score:0, id: it.id})
          }
          // Match the Path, 1 or more
          else if(it.path && it.id
              && this.highlightItemPath 
              && this.highlightItemPath.startsWith(it.path)){
            let diff = this.highlightItemPath.length - it.path.length
            list.push({score:1+diff, id: it.id})
          }
          // Join Children
          if(it.items) {
            this.joinHighlightItems(list, it.items)
          }
        }
      }
      // Return self
      return list
    },
    //-------------------------------------
    onItemActived(payload={}){
      this.$notify("item:active", payload)
    }
    //-------------------------------------
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/wn/gui/side/nav/wn-gui-side-nav.mjs", _M);
})();
//============================================================
// JOIN: wn/gui/side/nav/_com.json
//============================================================
Ti.Preload("ti/com/wn/gui/side/nav/_com.json", {
  "name" : "wn-gui-side-nav",
  "globally" : true,
  "template" : "./wn-gui-side-nav.html",
  "mixins"   : ["./wn-gui-side-nav.mjs"],
  "components" : ["./com/side-nav-item"]
});
//============================================================
// JOIN: wn/gui/side/tree/wn-gui-side-tree.html
//============================================================
Ti.Preload("ti/com/wn/gui/side/tree/wn-gui-side-tree.html", `<ti-tree
  class="ti-fill-parent wn-gui-side-tree"
  id-by="value"
  name-by="name"
  :display="TreeDisplay"
  :data="myTreeData"
  :current-id="highlightItemId"
  :checked-ids="CheckedIds"
  keep-open-by="wn-gui-side-tree"
  :auto-open="true"
  :default-open-depth="2"
  :show-root="false"
  :puppet-mode="true"
  @select="onItemActived"/>`);
//============================================================
// JOIN: wn/gui/side/tree/wn-gui-side-tree.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  data : ()=>({
    myItems : [],
    myTreeData : []
  }),
  /////////////////////////////////////////
  props : {
    "items" : {
      type : Array,
      default : null
    },
    "highlightItemId" : {
      type : String,
      default : null
    },
    "highlightItemPath" : {
      type : String,
      default : null
    }
  },
  //////////////////////////////////////////
  computed : {
    //-------------------------------------
    TreeDisplay() {
      return ['<icon>', {
          key: "text",
          comConf: {
            className: "is-nowrap",
            href: "(value)?/a/open/wn.manager?ph=id:${value}"
          }
        }]
    },
    //-------------------------------------
    HighlightItemId() {
      let list = this.joinHighlightItems([], this.items)
      if(list.length > 0) {
        // Sort the list, 0->N, the first one should be the hightlight one
        list.sort((it0,it1)=>it0.score-it1.score)
        // Get the first one
        return _.first(list).id
      }
    },
    //-------------------------------------
    CheckedIds() {
      if(!this.HighlightItemId) {
        return []
      }
      return [this.HighlightItemId]
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //-------------------------------------
    evalTreeData(items=[]) {
      this.myItems = _.cloneDeep(items)
      let list = []
      if(_.isArray(items)) {
        for(let it of items) {
          list.push(this.evalItemToTreeNode(it))
        }
      }
      //console.log("theTreeData", list)
      this.myTreeData = list
    },
    //-------------------------------------
    evalItemToTreeNode(it={}) {
      // Children
      let children = null
      if(_.isArray(it.items)) {
        children = []
        for(let subIt of it.items) {
          children.push(this.evalItemToTreeNode(subIt))
        }
      }
      // Self
      return {
        name  : it.key,
        text  : it.title,
        icon  : it.icon,
        value : it.id,
        children
      }
    },
    //-------------------------------------
    joinHighlightItems(list=[], items=[]) {
      if(this.highlightItemId && _.isArray(items) && items.length>0) {
        for(let it of items) {
          // Match the ID, 0
          if(it.id == this.highlightItemId) {
            list.push({score:0, id: it.id})
          }
          // Match the Path, 1 or more
          else if(it.path && it.id
              && this.highlightItemPath 
              && this.highlightItemPath.startsWith(it.path)){
            let diff = this.highlightItemPath.length - it.path.length
            list.push({score:1+diff, id: it.id})
          }
          // Join Children
          if(it.items) {
            this.joinHighlightItems(list, it.items)
          }
        }
      }
      // Return self
      return list
    },
    //-------------------------------------
    onItemActived({current={}}={}){
      if(current.value) {
        this.$notify("item:active", {
          id : current.value
        })
      }
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "items" : {
      handler : function(newVal, oldVal){
        if(!_.isEqual(newVal, this.myItems)) {
          this.evalTreeData(newVal)
        }
      },
      immediate : true
    }
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/wn/gui/side/tree/wn-gui-side-tree.mjs", _M);
})();
//============================================================
// JOIN: wn/gui/side/tree/_com.json
//============================================================
Ti.Preload("ti/com/wn/gui/side/tree/_com.json", {
  "name" : "wn-gui-side-tree",
  "globally" : true,
  "template" : "./wn-gui-side-tree.html",
  "mixins"   : ["./wn-gui-side-tree.mjs"],
  "components" : ["@com:ti/tree"]
});
//============================================================
// JOIN: wn/gui/test.json
//============================================================
Ti.Preload("ti/com/wn/gui/test.json", {
  "layout" : {
    "type" : "cols",
    "border" : true,
    "blocks" : [{
      "name" : "C0",
      "icon"  : "im-award",
      "title" : "Test C0",
      "closer" : true,
      "actions" : [{
          "type" : "group",
          "icon" : "zmdi-more-vert",
          "items" :  [{
              "key" : "show-P1",
              "text" : "show P1",
              "type" : "action",
              "action" : "main:showBlock(P1)"
            }, {
              "key" : "hide-P1",
              "text" : "hide P1",
              "type" : "action",
              "action" : "main:hideBlock(P1)"
            }]
        }],
      "size" : "20%",
      "type" : "rows",
      "border" : true,
      "blocks" : [{
        "name" : "C0-1",
        "size" : 100,
        "body" : {
          "comType" : "ti-label",
          "comConf" : {"value" : "C0-1 content"}
        }
      }, {
        "name" : "C0-2",
        "body" : {
          "comType" : "ti-label",
          "comConf" : {"value" : "C0-2 content"}
        }
      }, {
        "name" : "C0-3",
        "body" : {
          "comType" : "ti-label",
          "comConf" : {"value" : "C0-3 content"}
        }
      }]
    }, {
      "name" : "C1",
      "icon"  : "im-award",
      "title" : "Test C1",
      "actions" : [{
          "type" : "group",
          "icon" : "zmdi-more-vert",
          "items" :  [{
              "key" : "show-P1",
              "text" : "show P1",
              "type" : "action",
              "action" : "main:showBlock(P1)"
            }, {
              "key" : "hide-P1",
              "text" : "hide P1",
              "type" : "action",
              "action" : "main:hideBlock(P1)"
            }]
        }],
      "size" : "stretch",
      "type" : "tabs",
      "blocks" : [{
        "name" : "C1-1",
        "size" : 100,
        "body" : {
          "comType" : "ti-label",
          "comConf" : {"value" : "C1-1 content"}
        }
      }, {
        "name" : "C1-2",
        "body" : {
          "comType" : "ti-label",
          "comConf" : {"value" : "C1-2 content"}
        }
      }, {
        "name" : "C1-3",
        "body" : {
          "comType" : "ti-label",
          "comConf" : {"value" : "C1-3 content"}
        }
      }]
    }, {
      "name" : "C2",
      "body" : "C2",
      "size" : 260
    }],
    "panels" : [{
      "name" : "P1",
      "closer" : "right",
      "position":"left-top",
      "width" : "50%",
      "height" : "50%",
      "mask" : true,
      "body" : {
        "comType" : "ti-label",
        "comConf" : {"value" : "P1"}
      }
    }]
  },
  "schema" : {
    "C1" : {
      "comType" : "ti-label",
      "comConf" : {
        "value" : "I am C11"
      }
    },
    "C2" : {
      "comType" : "ti-label",
      "comConf" : {
        "value" : "I am C22"
      }
    }
  },
  "actions" : [{
      "key"  : "reloading",
      "type" : "action",
      "icon" : "zmdi-refresh",
      "text" : "i18n:refresh",
      "altDisplay" : {
        "icon" : "zmdi-refresh zmdi-hc-spin",
        "text" : "i18n:loading"
      },
      "action" : "dispatch:main/reload",
      "shortcut" : "CTRL+R"
    }, {
      "key" : "show-P1",
      "text" : "show P1",
      "type" : "action",
      "action" : "main:showBlock(P1)"
    }, {
      "key" : "hide-P1",
      "text" : "hide P1",
      "type" : "action",
      "action" : "main:hideBlock(P1)"
    }] 
});
//============================================================
// JOIN: wn/gui/wn-gui.html
//============================================================
Ti.Preload("ti/com/wn/gui/wn-gui.html", `<ti-gui
  v-bind="layout"
  :schema="schema"
  :shown="shown"
  @block:show="showBlock"
  @block:hide="hideBlock"/>`);
//============================================================
// JOIN: wn/gui/wn-gui.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  /////////////////////////////////////////
  data : function(){
    return {
      "shown" : {}
    }
  },
  /////////////////////////////////////////
  props : {
    "data" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    layout() {
      if(this.data)
        return this.data.layout
      return {}
    },
    schema() {
      if(this.data)
        return this.data.schema
      return {}
    }
  },
  //////////////////////////////////////////
  watch : {
    // Notify wn-manager update the action menu
    "data.actions" : function(){
      //this.$notify("actions:updated", this.data.actions)
    }
  },
  //////////////////////////////////////////
  methods : {
    // @see ti-gui-methods.mjs#showGuiBlock
    showBlock(name) {
      this.shown = this.createGuiBlockShown(this.shown, name, true)
    },
    // @see ti-gui-methods.mjs#hideGuiBlock
    hideBlock(name) {
      this.shown = this.createGuiBlockShown(this.shown, name, false)
    }
  }
}
Ti.Preload("ti/com/wn/gui/wn-gui.mjs", _M);
})();
//============================================================
// JOIN: wn/gui/_com.json
//============================================================
Ti.Preload("ti/com/wn/gui/_com.json", {
  "name" : "wn-gui",
  "globally" : true,
  "template" : "./wn-gui.html",
  "methods"  : "@com:ti/gui/ti-gui-methods.mjs",
  "mixins"   : ["./wn-gui.mjs"],
  "components" : ["@com:ti/gui"]
});
//============================================================
// JOIN: wn/imgfile/wn-imgfile.html
//============================================================
Ti.Preload("ti/com/wn/imgfile/wn-imgfile.html", `<ti-imgfile
  :src="imageSrc"
  :width="width"
  :height="height"
  :progress="progress"
  :upload-file="uploadFile"
  :removable="removable"
  @upload="onUpload"
  @remove="onRemove"
  @open="onOpen"/>`);
//============================================================
// JOIN: wn/imgfile/wn-imgfile.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  data : ()=>({
    "src_ts" : null,
    "oImage"     : null,
    "uploadFile" : null,
    "progress"   : -1
  }),
  /////////////////////////////////////////
  props : {
    "value" : {
      type : String,
      default : null
    },
    // Display width
    "width" : {
      type : [String, Number],
      default : undefined
    },
    // Display height
    "height" : {
      type : [String, Number],
      default : undefined
    },
    // support remove the objects
    "removable" : {
      type : Boolean,
      default : true
    },
    // Indicate the upload target when upload new value
    // Of cause, if the `value` exists, replace it
    // The `target` must be a path to a image object,
    // it will auto transfrom the image format by `cmd_imagic`
    "target" : {
      type : String,
      required: true,
      default : null
    },
    // which type supported to upload
    // nulll or empty array will support any types
    "supportTypes" : {
      type : [String, Array],
      default : ()=>["png","jpg","jpeg","gif"]
    },
    // which mime supported to upload
    // nulll or empty array will support any mimes
    "supportMimes" : {
      type : [String, Array],
      default : ()=>["image/png","image/jpeg","image/gif"]
    },
    // Image object only: it will auto apply image filter
    // just like clip the image size etc..
    // @see cmd_imagic for more detail about the filter
    "filter" : {
      type : [Array, String],
      default : null
    },
    // Image object only: if `>0 and <=1` mean output quality
    // if not match the range, will depends on the `cmd_imagic` default
    "quality" : {
      type : Number,
      default : 0
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    acceptTypes() {
      if(_.isString(this.supportTypes))
        return this.supportTypes.split(",")
      return this.supportTypes
    },
    //--------------------------------------
    acceptMimes() {
      if(_.isString(this.supportMimes))
        return this.supportMimes.split(",")
      return this.supportMimes
    },
    //--------------------------------------
    imageFilter() {
      if(!this.filter)
        return []
      return [].concat(this.filter)
    },
    //--------------------------------------
    // Display image for <ti-thumb>
    imageSrc() {
      if(this.oImage) {
        let ss = ["/o/content?str=id:", this.oImage.id]
        if(this.src_ts) {
          ss.push("&_t=")
          ss.push(this.src_ts)
        }
        return ss.join("")
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    async assertListHas(list, str, invalidMsg, vars) {
      if(!_.isEmpty(list)) {
        let invalid  = true
        for(let li of list) {
          if(li == str) {
            invalid = false
            break
          }
        }
        if(invalid) {
          await Ti.Alert(invalidMsg, {type:"warn", icon:"zmdi-alert-triangle"})
          return false
        }
      }
      return true
    },
    //--------------------------------------
    async onOpen() {
      // remove the thumb file
      if(this.oImage) {
        let link = Wn.Util.getAppLink(this.oImage)
        //console.log("it will open ", link)
        await Ti.Be.Open(link.url, {params:link.params})
      }
    },
    //--------------------------------------
    async onRemove() {
      // remove the thumb file
      if(this.oImage) {
        await Wn.Sys.exec2(`rm id:${this.oImage.id}`)
      }
      // Notify the change
      this.$notify("change", null)
    },
    //--------------------------------------
    async onUpload(file) {
      //console.log("it will upload ", file)

      //................................
      // Check for support Types
      let type = Ti.Util.getSuffixName(file.name)
      if(!await this.assertListHas(
        this.acceptTypes, type, {
          text : 'i18n:wn-invalid-types',
          vars : {current:type, supports:this.acceptTypes.join(", ")}
        })) {
        return
      }
      if(!await this.assertListHas(
        this.acceptMimes, file.type, {
          text : 'i18n:wn-invalid-mimes',
          vars : {current:file.type, supports:this.acceptMimes.join(", ")}
        })) {
        return
      }

      //................................
      // Upload file to destination
      this.uploadFile = file
      this.progress = 0

      let {ok, msg, data} = await Wn.Io.uploadFile(file, {
        target : this.target,
        mode   : "r",
        progress : (pe)=> {
          this.progress = pe.loaded / pe.total
        }
      })

      //................................
      // Reset upload
      this.uploadFile = null
      this.progress = -1

      //................................
      // Fail to upload
      if(!ok) {
        await Ti.Alert(`i18n:${msg}`, {type:"warn", icon:"zmdi-alert-triangle"})
        return
      }

      //................................
      // do Filter
      if(!_.isEmpty(this.imageFilter)) {
        let cmd = [
          "imagic", `id:${data.id}`, 
          `-filter "${this.imageFilter.join(" ")}"`]       
        if(this.quality>0 && this.quality<=1) {
          cmd.push(`-qa ${this.quality}`)
        }
        cmd.push("-out inplace")
        let cmdText = cmd.join(" ")
        await Wn.Sys.exec2(cmdText)
      }

      //................................
      // done
      this.src_ts = Date.now()
      this.oImage = data
      this.$notify("change", data)
    },
    //--------------------------------------
    async reload() {
      if(this.value) {
        this.oImage = await Wn.Io.loadMeta(this.value)
      }
      // Reset
      else {
        this.oImage = null
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "value" : function() {
      this.reload()
    }
  },
  //////////////////////////////////////////
  mounted : async function(){
    await this.reload()
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/wn/imgfile/wn-imgfile.mjs", _M);
})();
//============================================================
// JOIN: wn/imgfile/_com.json
//============================================================
Ti.Preload("ti/com/wn/imgfile/_com.json", {
  "name" : "wn-imgfile",
  "globally" : true,
  "template" : "./wn-imgfile.html",
  "mixins" : ["./wn-imgfile.mjs"],
  "components" : [
    "@com:ti/imgfile"
  ]
});
//============================================================
// JOIN: wn/label/wn-label.html
//============================================================
Ti.Preload("ti/com/wn/label/wn-label.html", `<ti-label
  :class-name="className"
  :blank-as="blankAs"
  :value="theValue"
  :format="format"
  :prefix-icon="prefixIcon"
  :prefix-text="prefixText"
  :suffix-text="suffixText"
  :suffix-icon="suffixIcon"
  :href="href"
  :new-tab="newTab"/>`);
//============================================================
// JOIN: wn/label/wn-label.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  //////////////////////////////////////////
  data: ()=>({
    "theValue" : null
  }),
  //////////////////////////////////////////
  props : {
    "blankAs" : {
      type : String,
      default : "i18n:nil"
    },
    "value" : null,
    "format" : undefined,
    "prefixIcon" : {
      type : String,
      default : null
    },
    "prefixText" : {
      type : String,
      default : null
    },
    "suffixText" : {
      type : String,
      default : null
    },
    "suffixIcon" : {
      type : String,
      default : null
    },
    "dict" : {
      type : String,
      default : null
    },
    "href" : {
      type : String,
      default : null
    },
    "newTab" : {
      type : Boolean,
      default : false
    }
  },
  //////////////////////////////////////////
  watch : {
    "value" : async function() {
      await this.evalTheValue()
    }
  },
  //////////////////////////////////////////
  methods : {
    async evalTheValue() {
      // Blank value
      if(!Ti.Util.isNil(this.value) && this.dict) {
        this.theValue = await Wn.Dict.get(this.dict, this.value)
      }
      // Keep primary
      else {
        this.theValue = this.value
      }
    }
  },
  //////////////////////////////////////////
  mounted : async function() {
    await this.evalTheValue()
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/wn/label/wn-label.mjs", _M);
})();
//============================================================
// JOIN: wn/label/_com.json
//============================================================
Ti.Preload("ti/com/wn/label/_com.json", {
  "name" : "wn-label",
  "globally" : true,
  "template" : "./wn-label.html",
  "mixins" : ["./wn-label.mjs"],
  "components" : ["@com:ti/label"]
});
//============================================================
// JOIN: wn/list/wn-list.html
//============================================================
Ti.Preload("ti/com/wn/list/wn-list.html", `<ti-list
  v-bind="this"
  :display="DisplayItems"
  :on-init="OnSubListInit"
  @select="OnSelected"
  @open="$notify('open', $event)"/>`);
//============================================================
// JOIN: wn/list/wn-list.mjs
//============================================================
(function(){
/////////////////////////////////////////////////////
const _M = {
  inheritAttrs : false,
  ///////////////////////////////////////////////////
  data : ()=>({
    isAllChecked  : false,
    hasChecked    : false,
    theCurrentId  : false,
    theCheckedIds : false
  }),
  ///////////////////////////////////////////////////
  props : {
    "iconBy" : {
      type : [String, Function],
      default : undefined
    },
    "indentBy" : {
      type : [String, Function],
      default : undefined
    },
    "itemClassName" : undefined,
    "display" : {
      type : [Object, String, Array],
      default : ()=>({
        key : "..",
        comType : "ti-label"
      })
    },
    "border" : {
      type : Boolean,
      default : true
    },
    "autoScrollIntoView" : {
      type : Boolean,
      default : true
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //----------------------------------------------
    DisplayItems() {
      return this.explainDisplayItems(this.display)
    }
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //----------------------------------------------
    OnSubListInit($list) {this.$list = $list},
    //----------------------------------------------
    OnSelected(payload={}){
      this.theCheckedIds = payload.checkedIds
      this.theCurrentId  = payload.currentId
      this.syncCheckStatus()
      this.$notify("select", payload)
    },
    //----------------------------------------------
    syncCheckStatus() {
      this.isAllChecked = this.$list.isAllChecked
      this.hasChecked   = this.$list.hasChecked
    },
    //----------------------------------------------
    // Delegate methods
    selectPrevRow(options){this.$list.selectPrevRow(options)},
    selectNextRow(options){this.$list.selectNextRow(options)},

    getCurrentRow(options){return this.$list.getCurrentRow(options)},
    getCheckedRow(options){return this.$list.getCheckedRow(options)},

    getCurrent(options){return this.$list.getCurrent(options)},
    getChecked(options){return this.$list.getChecked(options)},

    selectRow(options){this.$list.selectRow(options)},
    checkRow (options){this.$list.checkRow(options)},
    cancelRow(options){this.$list.cancelRow(options)}
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "data" : function(){
      this.syncCheckStatus()
    },
    "checkedIds" : function(){
      this.syncCheckStatus()
    }
  }
  ///////////////////////////////////////////////////
}
Ti.Preload("ti/com/wn/list/wn-list.mjs", _M);
})();
//============================================================
// JOIN: wn/list/_com.json
//============================================================
Ti.Preload("ti/com/wn/list/_com.json", {
  "name" : "wn-list",
  "globally" : true,
  "template" : "./wn-list.html",
  "props" : [
    "@com:ti/support/list_props.mjs"],
  "mixins" : [
    "@com:wn/support/wn_list_wrapper_mixins.mjs",
    "./wn-list.mjs"],
  "components" : [
    "@com:ti/table"]
});
//============================================================
// JOIN: wn/obj/form/wn-obj-form.html
//============================================================
Ti.Preload("ti/com/wn/obj/form/wn-obj-form.html", `<ti-form 
  v-bind="this"
  :auto-show-blank="isAutoShowBlank"
  :class-name="className"
  @field:change="OnFieldChange"
  @change="OnChange"
  @invalid="OnInvalid"/>`);
//============================================================
// JOIN: wn/obj/form/wn-obj-form.mjs
//============================================================
(function(){
const _M = {
  //////////////////////////////////////////////////////
  props : {
    "fuse" : {
      type : Object,
      default : ()=>({
        key  : "wn-obj-form",
        noti : null
      })
    },
    // {method : "dispatch", target : "main/onChanged"}
    "setDataBy" : {
      type : [String, Object, Boolean],
      default : null
    },
    // {method : "dispatch", target : "main/changeMeta"}
    "updateBy" : {
      type : [String, Object, Boolean],
      default : null
    },
    // {method : "commit", target : "main/setFieldStatus"}
    "setFieldStatusBy" : {
      type : [String, Object, Boolean],
      default : null
    }
  },
  //////////////////////////////////////////////////////
  computed : {
    isAutoShowBlank() {return Ti.Util.fallback(this.autoShowBlank, true)},
  },
  //////////////////////////////////////////////////////
  methods : {
    //--------------------------------------------------
    doAction(emitName, action, payload) {
      // {method, target}
      if(_.isPlainObject(action)) {
        Ti.App(this)[action.method](action.target, payload)
      }
      // "method:target"
      else if(_.isString(action)) {
        Ti.App(this).exec(action, payload)
      }
      // Just notify $parent
      else if(action){
        this.$notify(emitName, payload)
      }
    },
    //--------------------------------------------------
    OnFieldChange({name, value}={}) {
      //console.log(" <--- @field:changed", {name, value})
      this.doAction("field:change", this.updateBy, {name, value})
    },
    //--------------------------------------------------
    OnChange(data) {
      //console.log(" <- @changed", data)
      this.doAction("change", this.setDataBy, data)
    },
    //--------------------------------------------------
    OnInvalid(err) {
      //console.log("wn-form.invalid", err)
      let payload = {
        name    : err.name,
        message : [err.errMessage, err.value].join(" :: "),
        status  : "warn"
      }
      this.doAction("invalid", this.setFieldStatusBy, payload)
    }
    //--------------------------------------------------
  }
  //////////////////////////////////////////////////////
}
Ti.Preload("ti/com/wn/obj/form/wn-obj-form.mjs", _M);
})();
//============================================================
// JOIN: wn/obj/form/_com.json
//============================================================
Ti.Preload("ti/com/wn/obj/form/_com.json", {
  "name" : "wn-obj-form",
  "globally" : true,
  "template" : "./wn-obj-form.html",
  "props" : "@com:ti/form/ti-form-props.mjs",
  "mixins" : ["./wn-obj-form.mjs"],
  "components" : [
    "@com:ti/form",
    "@com:wn/transfer",
    "@com:wn/droplist",
    "@com:wn/combo/input",
    "@com:wn/imgfile",
    "@com:wn/combo/multi-input"
  ]
});
//============================================================
// JOIN: wn/obj/icon/wn-obj-icon.html
//============================================================
Ti.Preload("ti/com/wn/obj/icon/wn-obj-icon.html", `<ti-icon 
  class="wn-obj-icon" 
  :class="topClass"
  :value="theIcon"/>`);
//============================================================
// JOIN: wn/obj/icon/wn-obj-icon.mjs
//============================================================
(function(){
/////////////////////////////////////////////////////
const _M = {
  inheritAttrs : false,
  ///////////////////////////////////////////////////
  props : {
    // icon string
    "icon" : {
      type : String,
      default : null
    },
    // image thumb: id:xxxx
    "thumb" : {
      type : String,
      default : null
    },
    "mime" : {
      type : String,
      default : null
    },
    "type" : {
      type : String,
      default : null
    },
    "race" : {
      type : String,
      default : null
    },
    // default icon string
    "candidateIcon" : {
      type : String,
      default : null
    },
    // timestamp
    "timestamp" : {
      type : Number,
      default : 0
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName(this.className)
    },
    //-----------------------------------------------
    theIcon() {
      return Wn.Util.getObjThumbIcon({
        candidateIcon : this.candidateIcon,
        timestamp : this.timestamp,
        thumb : this.thumb,
        icon  : this.icon,
        mime  : this.mime,
        type  : this.type,
        race  : this.race,
      }, "fas-cube")
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    //-----------------------------------------------
  }
  ///////////////////////////////////////////////////
}
Ti.Preload("ti/com/wn/obj/icon/wn-obj-icon.mjs", _M);
})();
//============================================================
// JOIN: wn/obj/icon/_com.json
//============================================================
Ti.Preload("ti/com/wn/obj/icon/_com.json", {
  "name" : "wn-obj-icon",
  "globally" : true,
  "template" : "./wn-obj-icon.html",
  "mixins" : ["./wn-obj-icon.mjs"]
});
//============================================================
// JOIN: wn/obj/json/wn-obj-json.html
//============================================================
Ti.Preload("ti/com/wn/obj/json/wn-obj-json.html", `<div class="wn-obj-json">
  <!--
    Show Text Editor
  -->
  <ti-text-json v-if="hasMeta"
    class="ti-fill-parent"
    :value="value"
    :data="data"
    @change="onChangeContent"/>
  <!--
    Empty Data
  -->
  <ti-loading v-else/>
</div>`);
//============================================================
// JOIN: wn/obj/json/wn-obj-json.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////
  props : {
    "meta" : {
      type : Object,
      default : ()=>({})
    },
    "value" : {
      type: String,
      default: null
    },
    "status" : {
      type : Object,
      default : ()=>({})
    }
  },
  ////////////////////////////////////////////
  computed : {
    //----------------------------------------
    hasMeta() {
      return this.meta ? true : false
    }
    //----------------------------------------
  },
  ////////////////////////////////////////////
  methods : {
    onChangeContent(newData) {
      this.$notify("change", newData)
    }
  },
  ////////////////////////////////////////////
  mounted : function(){
    //----------------------------------------
    Ti.Fuse.getOrCreate().add({
      key : "wn-obj-json",
      everythingOk : ()=>{
        return !this.status.changed
      },
      fail : ()=>{
        Ti.Toast.Open("i18n:wn-obj-nosaved", "warn")
      }
    })
    //----------------------------------------
  },
  ////////////////////////////////////////////
  beforeDestroy : function(){
    Ti.Fuse.get().remove("wn-obj-json")
  }
  ////////////////////////////////////////////
}
Ti.Preload("ti/com/wn/obj/json/wn-obj-json.mjs", _M);
})();
//============================================================
// JOIN: wn/obj/json/_com.json
//============================================================
Ti.Preload("ti/com/wn/obj/json/_com.json", {
  "name" : "wn-obj-json",
  "globally" : true,
  "template" : "./wn-obj-json.html",
  "mixins" : ["./wn-obj-json.mjs"],
  "components" : ["@com:ti/text/json"]
});
//============================================================
// JOIN: wn/obj/markdown/richeditor/wn-markdown-richeditor-props.mjs
//============================================================
(function(){
const _M = {
  // Relative meta
  "meta": {
    type: [Object, String],
    default: null
  },
  // Delcare the media src mode
  //  - path : nil meta(~/xxx/xxx); with meta(../xxx/xxx)
  //  - fullPath : "/home/xiaobai/xxx/xxx"
  //  - idPath : "id:67u8..98a1"
  //  - id   : "67u8..98a1"
  // 'transferMediaSrc' can take more customized form
  "mediaSrcMode": {
    type: String,
    default: "path",
    validator: v => /^(path|fullPath|idPath|id)$/.test(v)
  },
  // Keep the last select media
  "keepLastBy": {
    type: String,
    default: "wn-markdown-richeditor-last-open"
  },
  "defaultMediaDir": {
    type: String,
    default: "~"
  }
}
Ti.Preload("ti/com/wn/obj/markdown/richeditor/wn-markdown-richeditor-props.mjs", _M);
})();
//============================================================
// JOIN: wn/obj/markdown/richeditor/wn-markdown-richeditor.html
//============================================================
Ti.Preload("ti/com/wn/obj/markdown/richeditor/wn-markdown-richeditor.html", `<TiTextMarkdownRicheditor
  v-bind="this"
  :actions="ToolbarActions"
  :markdown-media-src="TheMarkdownMediaSrc"
  :preview-media-src="ThePreviewMediaSrc"
  :value="TheValue"
  :on-init="OnEditorInit"/>`);
//============================================================
// JOIN: wn/obj/markdown/richeditor/wn-markdown-richeditor.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    ToolbarActions() {
      return _.merge({
        "Media" : {
          icon : "fas-photo-video",
          action : ()=>this.OnInsertMedia()
        }
      },  this.actions)
    },
    //-----------------------------------------------
    TheValue() {
      return this.value
    },
    //-----------------------------------------------
    TheMarkdownMediaSrc() {
      if(this.markdownMediaSrc) {
        return this.markdownMediaSrc
      }
      return async src => {
        // special media 
        let m = /^\/o\/content\?str=id:(.+)$/.exec(src)
        if(m) {
          let obj = await Wn.Io.loadMetaById(m[1])
          if(obj) {
            let s2 = Wn.Io.formatObjPath(obj, this.mediaSrcMode, this.meta)
            return s2;
          }
        }
        return src
      }
    },
    //-----------------------------------------------
    ThePreviewMediaSrc() {
      if(this.previewMediaSrc) {
        return this.previewMediaSrc
      }
      return async src => {
        // Outsite link
        if(/^(https?:)(\/\/)/.test(src))
          return src

        //console.log("preview", src)
        let obj = await Wn.Io.loadMetaBy(src, this.meta)
        if(obj) {
          return `/o/content?str=id:${obj.id}`
        }
        return src
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    OnEditorInit($editor) {
      this.$editor = $editor
    },
    //-----------------------------------------------
    async OnInsertMedia() {
      // Get the last open
      let last = this.meta || this.defaultMediaDir
      if(this.keepLastBy)
        last = Ti.Storage.local.getString(this.keepLastBy) || last

      // Open selector to pick list
      let list = await Wn.OpenObjSelector(last, {
        fallbackPath: this.defaultMediaDir
      })

      // User cancel
      if(!list || _.isEmpty(list)) {
        return
      }

      // Save the last open
      if(this.keepLastBy) {
        let oFir = _.first(list);
        let pph = Ti.Util.getParentPath(oFir.ph)
        let rph = Wn.Session.getFormedPath(pph)
        Ti.Storage.local.set(this.keepLastBy, rph);
      }
      
      // Batch insert
      for(let obj of list) {
        this.insertMediaObj(obj)
      }
    },
    //-----------------------------------------------
    // Insert Operation
    //-----------------------------------------------
    insertMediaObj(obj={}) {
      let mime = obj.mime

      // Guard
      if(!mime)
        return

      // Preview source
      let src = `/o/content?str=id:${obj.id}`

      // Video
      if(mime.startsWith("video/")) {
        this.insertMedia("video", src, {
          controls : false,
          autoplay : false
        })
      }
      // Image
      else if(mime.startsWith("image/")) {
        this.insertMedia("image", src)
      }
    },
    //-----------------------------------------------
    insertMedia(type="image", src, attrs={}) {
      // Guard
      if(!src) {
        return
      }

      // Prepare the Delta
      let Delta = Quill.import("delta")
      let det = new Delta()

      // Insert to current position
      let sel = this.$editor.getSelection()

      if(!sel) {
        this.$editor.setSelection(0)
        sel = {index:0, length:0}
      }

      let {index,length} = sel

      // Move to current
      det.retain(index)
            
      // Delete current
      if(length > 0) {
          det.delete(length)
      }

      // Add Media
      det.insert({[type]: src, attributes: attrs})
     
      // Update 
      this.$editor.updateContents(det)

      // Move cursor
      this.$editor.setSelection(index+1)
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  // watch: {
  //   "meta": {
  //     handler: async function(pathOrObj){
  //       console.log("meta changed!")
  //       if(_.isString(pathOrObj)) {
  //         this.myMeta = await Wn.Io.loadMetaBy(pathOrObj)
  //       } else {
  //         this.myMeta = pathOrObj
  //       }
  //     },
  //     immediate: true
  //   }
  // }
  ///////////////////////////////////////////////////
}
Ti.Preload("ti/com/wn/obj/markdown/richeditor/wn-markdown-richeditor.mjs", _M);
})();
//============================================================
// JOIN: wn/obj/markdown/richeditor/_com.json
//============================================================
Ti.Preload("ti/com/wn/obj/markdown/richeditor/_com.json", {
  "name" : "wn-obj-markdown-richeditor",
  "globally" : true,
  "template" : "./wn-markdown-richeditor.html",
  "props": [
    "@com:ti/text/markdown/richeditor/ti-markdown-richeditor-props.mjs",
    "./wn-markdown-richeditor-props.mjs"
  ],
  "methods": "@com:ti/text/markdown/richeditor/ti-markdown-richeditor-delegate-methods.mjs",
  "mixins" : ["./wn-markdown-richeditor.mjs"],
  "components" : [
    "@com:ti/text/markdown/richeditor"
  ]
});
//============================================================
// JOIN: wn/obj/picker/wn-obj-picker.html
//============================================================
Ti.Preload("ti/com/wn/obj/picker/wn-obj-picker.html", `<div class="wn-obj-picker">
  <ti-box ref="box"
    :empty="empty"
    :items="formedItems"
    :loading="loading"
    :multi="multi"
    :icon="theChooseIcon"
    :clear-icon="clearIcon"
    @open="openPicker"
    @remove="onRemoveItem"
    @clear="onClearItems"/>
</div>`);
//============================================================
// JOIN: wn/obj/picker/wn-obj-picker.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  data : ()=>({
    "loading" : false,
    "items" : []
  }),
  /////////////////////////////////////////
  props : {
    "empty" :{
      type : Object,
      default : ()=>({
        text  : "i18n:no-selected",
        value : undefined
      })
    },
    "value" : {
      type : [Object, String, Array],
      default : null
    },
    "base" : {
      type : [Object, String],
      default : "~"
    },
    "multi" : {
      type : Boolean,
      default : false
    },
    "clearIcon" : {
      type : [String, Object],
      default : "zmdi-close-circle"
    },
    "chooseIcon" : {
      type : String,
      default : "zmdi-folder-outline"
    },
    // Key of meta to show as text
    // If undefined, use "title -> nm"
    "textBy" : {
      type : [String, Array],
      default : null
    }
  },
  //////////////////////////////////////////
  watch : {
    "value" : function(){
      this.reload()
    }
  },
  //////////////////////////////////////////
  computed : {
    formedItems() {
      let list = []
      for(let obj of this.items) {
        let it = {
          icon : Wn.Util.genPreviewObj(obj),
          text : Wn.Util.getObjDisplayName(obj, this.textBy),
          value : obj.id
        }
        list.push(it)
      }
      return list
    },
    oneItem() {
      let it = _.isArray(this.value) 
        ? _.get(this.value, 0)
        : this.value
      if("id:" == it || !it || _.isEmpty(it))
        return null
      return it
    },
    theChooseIcon() {
      return _.isEmpty(this.items) ? this.chooseIcon : null
    }
  },
  //////////////////////////////////////////
  methods : {
    async openPicker() {
      let meta = this.oneItem
      let autoOpenDir = false
      // Use base to open the folder
      // Then it should be auto-open the folder
      if(!meta || _.isEmpty(meta)) {
        meta = this.base || "~"
        autoOpenDir = true
      }

      let payload = await Wn.OpenObjSelector(meta, {
        multi    : this.multi,
        selected : this.items,
        autoOpenDir
      })
      // take `undefined` as cancel
      if(_.isUndefined(payload)) {
        //console.log("canceled!")        
      }
      // take `null` as empty
      // object or array will be the value
      else {
        //console.log(payload)
        this.$notify("change", payload)
      }
    },
    //......................................
    onRemoveItem(rmIt) {
      let payload = []
      for(let i=0; i<this.items.length; i++) {
        let it = this.items[i]
        let iv = this.formedItems[i]
        if(!_.isEqual(iv.value, rmIt.value)){
          payload.push(it)
        }
      }
      this.$notify("change", payload)
    },
    //......................................
    onClearItems() {
      console.log("remove!!")
      this.$notify("change", this.multi ? [] : null)
    },
    //......................................
    async reload(){
      this.loading = true
      await this.doReload()
      this.loading = false
    },
    //......................................
    async doReload() {
      let vals = this.value ? [].concat(this.value) : []
      let items = []
      // Loop each value item
      for(let it of vals) {
        let it2 = await this.reloadItem(it)
        if(it2)
          items.push(it2)
        if(!this.multi && items.length > 0)
          break
      }
      // Update value, it will be trigger the computed attribute
      // Then it will be passed to <ti-box> as formed list
      // the <ti-box> will show it reasonablely obey the `multi` options
      this.items = items
    },
    //......................................
    async reloadItem(it) {
      if(!it || _.isEmpty(it))
        return null
      // path id:xxxx
      if(_.isString(it)){
        return await Wn.Io.loadMeta(it)
      }
      // object {id:xxx}
      else if(it.id){
        return await Wn.Io.loadMetaById(it.id)
      }
      // Unsupported form of value
      else {
         throw Ti.Err.make("e-wn-obj-picker-unsupported-value-form", it)
      }
    }
    //......................................
  },
  /////////////////////////////////////////
  mounted : async function(){
    await this.reload()
  }
}
Ti.Preload("ti/com/wn/obj/picker/wn-obj-picker.mjs", _M);
})();
//============================================================
// JOIN: wn/obj/picker/_com.json
//============================================================
Ti.Preload("ti/com/wn/obj/picker/_com.json", {
  "name" : "wn-obj-picker",
  "globally" : true,
  "template" : "./wn-obj-picker.html",
  "mixins"   : ["./wn-obj-picker.mjs"],
  "components" : [
    "@com:wn/adaptlist"]
});
//============================================================
// JOIN: wn/obj/preview/com/preview-info-field/preview-info-field.html
//============================================================
Ti.Preload("ti/com/wn/obj/preview/com/preview-info-field/preview-info-field.html", `<div class="info-field">
  <div class="as-name" :style="theNameStyle">
    <ti-icon v-if="icon" class="it-icon" :value="icon"/>
    <span class="it-text">{{title|i18n}}</span>
  </div>
  <div class="as-value" :style="theValueStyle">{{theValue}}</div>
</div>`);
//============================================================
// JOIN: wn/obj/preview/com/preview-info-field/preview-info-field.mjs
//============================================================
(function(){
/////////////////////////////////////////////////////
const _M = {
  ///////////////////////////////////////////////////
  data: ()=>({
    theValue : null
  }),
  ///////////////////////////////////////////////////
  props : {
    "icon" : {
      type : String,
      default : null
    },
    "data" : {
      type : Object,
      default : ()=>({})
    },
    "type" : {
      type : String,
      default : "String"
    },
    "title" : {
      type : String,
      default : null
    },
    "name" : {
      type : String,
      default : null
    },
    "dict" : {
      type : String,
      default : null
    },
    "nameWidth" : {
      type : [String, Number],
      default : 50
    },
    "valueWidth" : {
      type : [String, Number],
      default : 200
    },
    "transformer" : {
      type : [String,Object,Function],
      default : null
    }
  },
  ///////////////////////////////////////////////////
  watch : {
    "data" : async function() {
      this.theValue = await this.evalTheValue()
    },
    "name" : async function() {
      this.theValue = await this.evalTheValue()
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    theTransformer() {
      let trans = this.transformer
          || "Ti.Types." + Ti.Types.getFuncByType(this.type||"String", "transformer")

      return Ti.Util.genInvoking(trans, {
        context: this.data,
        partialRight: true
      })
    },
    theNameStyle() {
      return Ti.Css.toStyle({
        "width" : this.nameWidth
      })
    },
    theValueStyle() {
      return Ti.Css.toStyle({
        "width" : this.valueWidth
      })
    }
  },
  ///////////////////////////////////////////////////
  methods : {
    async evalTheValue() {
      let val = _.get(this.data, this.name)

      if(this.dict) {
        val = await wn.Dict.get(this.dict, val)
      }

      if(_.isFunction(this.theTransformer)) {
        val = this.theTransformer(val)
      }

      return val
    }
  },
  ///////////////////////////////////////////////////
  mounted : async function(){
    this.theValue = await this.evalTheValue()
  }
  ///////////////////////////////////////////////////
}
Ti.Preload("ti/com/wn/obj/preview/com/preview-info-field/preview-info-field.mjs", _M);
})();
//============================================================
// JOIN: wn/obj/preview/com/preview-info-field/_com.json
//============================================================
Ti.Preload("ti/com/wn/obj/preview/com/preview-info-field/_com.json", {
  "name" : "wn-obj-preview-info-field",
  "globally" : true,
  "template" : "./preview-info-field.html",
  "mixins" : ["./preview-info-field.mjs"]
});
//============================================================
// JOIN: wn/obj/preview/wn-obj-preview.html
//============================================================
Ti.Preload("ti/com/wn/obj/preview/wn-obj-preview.html", `<div class="wn-obj-preview" :class="TopClass">
  <!--
    With content
  -->
  <div class="wop-con" v-if="hasMeta">
    <!--Main View-->
    <component class="as-main"
      :is="PreviewComType"
      :icon="DataIcon"
      :title="DataTitle"
      :src="DataSource"/>
    <!--ActionBar at top-->
    <div class="as-abar">
      <ul>
        <li v-for="it in TheActions"
          @click.left="OnAction(it.action)">
          <ti-icon class="it-icon" :value="it.icon"/>
        </li>
      </ul>
    </div>
    <!--Meta at bottom-->
    <div class="as-info" v-if="isShowInfo">
      <!--
        Head
      -->
      <div class="info-head">
        <!--Pin Status Icon-->
        <span class="it-icon" @click.left="toggleInfoFloat">
          <ti-icon :value="PreviewInfoPinIcon"/>
        </span>
        <!--Head text-->
        <span class="it-text">{{'i18n:info'|i18n}}</span>
        <!--Edit Button-->
        <span class="it-edit"
          @click.left="OnEditInfo">{{'i18n:edit'|i18n}}</span>
      </div>
      <!--
        Fields
      -->
      <div class="info-field-con">
        <wn-obj-preview-info-field
          v-for="fld in PrevewInfoFields"
          :key="fld.name"
          v-bind="fld"
          :data="meta"/>
      </div>
    </div>
  </div>
  <!--
    Empty 
  -->
  <div v-else
    class="ti-blank is-big">
    <ti-icon value="fas-file-image"/>
    <span>{{'nil-obj'|i18n}}</span>
  </div>
</div>`);
//============================================================
// JOIN: wn/obj/preview/wn-obj-preview.mjs
//============================================================
(function(){
const _M = {
  //////////////////////////////////////////
  data : ()=>({
    isInFullScreen : false,
    isShowInfo     : false,
    isFloatInfo    : false
  }),
  //////////////////////////////////////////
  props : {
    "meta" : {
      type : Object,
      default : ()=>({})
    },
    "status" : {
      type : Object,
      default : ()=>({})
    },
    "actions" : {
      type : Array,
      default : ()=>["fullscreen", "newtab", "download", "info"]
    },
    "showInfo" : {
      type : Boolean,
      default : false
    },
    "floatInfo" : {
      type : Boolean,
      default : false
    },
    "editInfoBy" : {
      type : [Function, String],
      default : null
    },
    "infoPosition" : {
      type : String,
      default : "bottom",
      validator: (val)=>/^(bottom|left)$/.test(val)
    },
    "infoNameWidth" : {
      type : [String, Number],
      default : 50
    },
    "infoValueWidth" : {
      type : [String, Number],
      default : 200
    },
    "infoFields" : {
      type : Array,
      default : ()=>["nm", "tp", "mime", "width", "height", "len", "duration"]
    },
    // Store the status in Local
    "stateLocalKey" : {
      type : String,
      default : null
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    hasMeta() {
      return _.isEmpty(this.meta) ? false : true
    },
    //--------------------------------------
    TopClass() {
      return {
        "is-fullscreen" : this.isInFullScreen,
        "is-show-info"  : this.isShowInfo,
        "is-float-info" : this.isFloatInfo,
        [`is-info-at-${this.infoPosition}`] : true        
      }
    },
    //--------------------------------------
    PreviewComType() {
      if(this.meta) {
        let mime = this.meta.mime || ""
        // Video
        if(mime.startsWith("video/")){
          return "ti-media-video"
        }
        // Image
        else if(mime.startsWith("image/")){
          return "ti-media-image"
        }
        // Binary
        else {
          return "ti-media-binary"
        }
      }
    },
    //--------------------------------------
    PreviewInfoPinIcon() {
      return this.isFloatInfo 
        ? 'fas-thumbtack'
        : 'zmdi-layers'
    },
    //--------------------------------------
    PrevewInfoFields() {
      return Wn.Obj.evalFields(this.meta, this.infoFields, (fld)=>{
        if(fld.quickName  && _.isUndefined(fld.value)) {
          return
        }
        if("Group" == fld.type) {
          return fld
        }
        return _.defaults(fld, {
          nameWidth  : this.infoNameWidth,
          valueWidth : this.infoValueWidth
        })
      })
    },
    //--------------------------------------
    TheActions() {
      let list = []
      if(this.hasMeta) {
        _.forEach(this.actions, (it)=>{
          //..........................
          // full screen
          if("fullscreen" == it) {
            if(!this.isInFullScreen) {
              list.push({
                icon : "zmdi-fullscreen",
                text : "i18n:wop-fullscreen-enter",
                action : ()=>this.enterFullscreen()
              })
            }
            // Exit FullScreen
            else {
              list.push({
                icon : "zmdi-fullscreen-exit",
                text : "i18n:wop-fullscreen-quit",
                action : ()=>this.exitFullscreen()
              })
            }
          }
          //..........................
          // Open
          else if("newtab" == it) {
            list.push({
              icon : "zmdi-open-in-new",
              text : "i18n:open-newtab",
              action : ()=>this.openInNewTab()
            })
          }
          //..........................
          // Download
          else if("download" == it) {
            list.push({
              icon : "zmdi-download",
              text : "i18n:download-to-local",
              action : ()=>this.download()
            })
          }
          //..........................
          // Toggle Info
          else if("info" == it) {
            if(!this.isShowInfo) {
              list.push({
                icon : "zmdi-info",
                text : "i18n:info",
                action : ()=>this.doShowInfo()
              })
            }
            // Show Info
            else {
              list.push({
                icon : "zmdi-info-outline",
                text : "i18n:info",
                action : ()=>this.doHideInfo()
              })
            }
          }
          //..........................
          else if(_.isPlainObject(it) && it.action) {
            list.push(it)
          }
          //..........................
        })
      }
      //................................
      return list
    },
    //--------------------------------------
    DataSource() {
      if(!this.meta)
        return ""
      let link = Wn.Util.getDownloadLink(this.meta, {mode:"auto"})
      return link.toString();
    },
    //--------------------------------------
    DataIcon() {
      return Wn.Util.getIconObj(this.meta)
    },
    //--------------------------------------
    DataTitle() {
      return Wn.Util.getObjDisplayName(this.meta)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnAction(action) {
      // Exec command
      if(_.isString(action)) {
        Ti.App(this).exec(actionName)
      }
      // Call function
      else if(_.isFunction(action)) {
        action()
      }
    },
    //--------------------------------------
    OnEditInfo() {
      if(this.meta) {
        // Command
        if(_.isString(this.editInfoBy)) {
          Ti.App(this).exec(this.editInfoBy, this.meta)
        }
        // Function Invoking
        else if(_.isFunction(this.editInfoBy)) {
          this.editInfoBy(this.meta)
        }
        // Default to open the dialog
        else {
          Wn.EditObjMeta(this.meta)
        }
      }
    },
    //--------------------------------------
    enterFullscreen() {
      this.isInFullScreen = true
      this.resizeMediaViewport()
    },
    //--------------------------------------
    exitFullscreen() {
      this.isInFullScreen = false
      this.resizeMediaViewport()
    },
    //--------------------------------------
    doShowInfo() {
      this.isShowInfo = true
      this.saveStateToLocal()
      this.resizeMediaViewport()
    },
    //--------------------------------------
    doHideInfo() {
      this.isShowInfo = false
      this.saveStateToLocal()
      this.resizeMediaViewport()
    },
    //--------------------------------------
    toggleInfoFloat() {
      this.isFloatInfo = !this.isFloatInfo
      this.saveStateToLocal()
      this.resizeMediaViewport()
    },
    //--------------------------------------
    resizeMediaViewport() {
      for(let $child of this.$children) {
        if(_.isFunction($child.onResizeViewport)) {
          this.$nextTick(()=>{
            $child.onResizeViewport()
          })
        }
      }
    },
    //--------------------------------------
    openInNewTab() {
      let link = Wn.Util.getAppLink(this.meta)
      Ti.Be.OpenLink(link)
    },
    //--------------------------------------
    download() {
      let link = Wn.Util.getDownloadLink(this.meta)
      Ti.Be.OpenLink(link)
    },
    //--------------------------------------
    saveStateToLocal() {
      if(this.stateLocalKey) {
        Ti.Storage.session.mergeObject(this.stateLocalKey, {
          isShowInfo     : this.isShowInfo,
          isFloatInfo    : this.isFloatInfo
        })
        // let state = Ti.Storage.session.getObject(this.stateLocalKey)
        // console.log("-> saveStateToLocal", state)
      }
    },
    //--------------------------------------
    loadStateFromLocal() {
      if(this.stateLocalKey) {
        let state = Ti.Storage.session.getObject(this.stateLocalKey)
        //console.log("<- loadStateFromLocal", state)
        _.defaults(state, {
          isShowInfo     : this.isShowInfo,
          isFloatInfo    : this.isFloatInfo
        })
        this.isShowInfo  = state.isShowInfo
        this.isFloatInfo = state.isFloatInfo
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "showInfo" : function(val) {
      console.log("showInfo watched")
      this.isShowInfo = val
    },
    "floatInfo" : function(val) {
      console.log("floatInfo watched")
      this.isFloatInfo = val
    }
  },
  //////////////////////////////////////////
  mounted : function() {
    this.isShowInfo  = this.showInfo
    this.isFloatInfo = this.floatInfo
    this.$nextTick(()=>{
      this.loadStateFromLocal()
    })
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/wn/obj/preview/wn-obj-preview.mjs", _M);
})();
//============================================================
// JOIN: wn/obj/preview/_com.json
//============================================================
Ti.Preload("ti/com/wn/obj/preview/_com.json", {
  "name" : "wn-obj-preview",
  "globally" : true,
  "i18n" : "@i18n:wn-obj-preview",
  "template" : "./wn-obj-preview.html",
  "mixins" : ["./wn-obj-preview.mjs"],
  "components" : [
    "./com/preview-info-field",
    "@com:ti/media/binary",
    "@com:ti/media/image",
    "@com:ti/media/video"]
});
//============================================================
// JOIN: wn/obj/puretext/wn-obj-puretext.html
//============================================================
Ti.Preload("ti/com/wn/obj/puretext/wn-obj-puretext.html", `<div class="wn-obj-puretext">
  <!--
    Show Text Editor
  -->
  <ti-text-raw v-if="hasMeta"
    class="ti-fill-parent"
    :icon="theIcon"
    :title="theTitle"
    :show-title="showTitle"
    :value="content"
    :content-is-changed="status.changed"
    :blank-text="blankText"
    @change="onChangeContent"/>
  <!--
    Empty Data
  -->
  <div v-else
    class="ti-blank is-big">
    <ti-icon value="zmdi-alert-circle-o"/>
    <span>{{"empty-data"|i18n}}</span>
  </div>
</div>`);
//============================================================
// JOIN: wn/obj/puretext/wn-obj-puretext.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : true,
  ////////////////////////////////////////////
  props : {
    "meta" : {
      type : Object,
      default : ()=>({})
    },
    "content" : {
      type : String,
      default : null
    },
    "savedContent" : {
      type : String,
      default : null
    },
    "contentType" : {
      type : String,
      default : null
    },
    "showTitle" : {
      type : Boolean,
      default : true
    },
    "status" : {
      type : Object,
      default : ()=>({})
    },
    "blankText" : {
      type : String,
      default : "i18n:blank"
    }
  },
  ////////////////////////////////////////////
  computed : {
    //----------------------------------------
    theIcon() {
      if(this.meta) {
        return Wn.Util.getIconObj(this.meta)
      }
      return Ti.Icons.get()
    },
    //----------------------------------------
    theTitle() {
      if(this.meta) {
        return this.meta.title || this.meta.nm
      }
      return "no-title"
    },
    //----------------------------------------
    hasMeta() {
      return this.meta ? true : false
    }
    //----------------------------------------
  },
  ////////////////////////////////////////////
  methods : {
    onChangeContent(newContent) {
      this.$notify("change", {content:newContent})
    }
  },
  ////////////////////////////////////////////
  mounted : function(){
    //----------------------------------------
    Ti.Fuse.getOrCreate().add({
      key : "wn-obj-puretext",
      everythingOk : ()=>{
        return !this.status.changed
      },
      fail : ()=>{
        Ti.Toast.Open("i18n:wn-obj-nosaved", "warn")
      }
    })
    //----------------------------------------
  },
  ////////////////////////////////////////////
  beforeDestroy : function(){
    Ti.Fuse.get().remove("wn-obj-puretext")
  }
  ////////////////////////////////////////////
}
Ti.Preload("ti/com/wn/obj/puretext/wn-obj-puretext.mjs", _M);
})();
//============================================================
// JOIN: wn/obj/puretext/_com.json
//============================================================
Ti.Preload("ti/com/wn/obj/puretext/_com.json", {
  "name" : "wn-obj-puretext",
  "globally" : true,
  "template" : "./wn-obj-puretext.html",
  "mixins" : ["./wn-obj-puretext.mjs"],
  "components" : ["@com:ti/text/raw"]
});
//============================================================
// JOIN: wn/obj/uploader/wn-obj-uploader.html
//============================================================
Ti.Preload("ti/com/wn/obj/uploader/wn-obj-uploader.html", `<ti-uploader
  :value="formedValue"/>`);
//============================================================
// JOIN: wn/obj/uploader/wn-obj-uploader.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  props : {
    "value" : {
      type : [String, Object, Array],
      default : null
    },
    // true - support multiple object 
    "multi" : {
      type : Boolean,
      default : true
    },
    // support remove the objects
    "removable" : {
      type : Boolean,
      default : true
    },
    // Before removed, how many objects shuld be remained at least
    "remained" : {
      type : Number,
      default : 0
    },
    // If null value, new object will be uploaded to here
    // path ends with `/` mean folder, it will keep the local name 
    // if without define, can not upload new file
    // for path, the "~" has been supported also
    "target" : {
      type : String,
      default : null
    },
    // When create a new file to target folder, 
    // how to format the local name
    "nameTransformer" : {
      type : [Function, String, Object],
      default : null
    },
    // which type supported to upload
    // nulllor empty array will support any types
    "supportTypes" : {
      type : [Array, String],
      default : null
    },
    // Image object only: it will auto apply image filter
    // just like clip the image size etc..
    // @see cmd_imagic for more detail about the filter
    "imageFilter" : {
      type : [Array, String],
      default : null
    },
    // Image object only: if `>0 and <=1` mean output quality
    // if not match the range, will depends on the `cmd_imagic` default
    "imageQuality" : {
      type : Number,
      default : 0
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    //--------------------------------------
    formedValue() {
      return null
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    getObj(income) {
      if(income) {
        if(_.isString(income)) {
          
        }
      }
    }
  }
}
Ti.Preload("ti/com/wn/obj/uploader/wn-obj-uploader.mjs", _M);
})();
//============================================================
// JOIN: wn/obj/uploader/_com.json
//============================================================
Ti.Preload("ti/com/wn/obj/uploader/_com.json", {
  "name" : "wn-obj-uploader",
  "globally" : true,
  "template" : "./wn-obj-uploader.html",
  "mixins" : ["./wn-obj-uploader.mjs"],
  "components" : [
    "@com:ti/uploader"
  ]
});
//============================================================
// JOIN: wn/support/wn_list_wrapper_mixins.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////////////
  methods : {
    explainDisplayItems(display=[]) {
      let displayItems = _.concat(display)
      let list = []
      _.forEach(displayItems, (it)=>{
        // Guard
        if(Ti.Util.isNil(it)) {
          return
        }
        // Quick: table.field.display:: thumb->icon
        if(_.isString(it)) {
          let m = /^@<thumb(:([^>]*))?>$/.exec(it)
          if(m) {
            let candidateIcon = m[2] || undefined
            list.push({
              key : ["icon", "thumb", "tp", "mime", "race", "__updated_time"],
              type : "Object",
              transformer : {
                name : "Ti.Types.toObject",
                args : {
                  icon  : "icon",
                  thumb : "thumb",
                  type  : "tp",
                  mime  : "mime",
                  race  : "race",
                  timestamp : "__updated_time"
                }
              },
              comType  : "wn-obj-icon",
              comConf : {
                "..." : "${=value}",
                "candidateIcon" : candidateIcon,
                //"className"   : "thing-icon"
              }
            })
            return
          }
        }
        // Other, just join
        list.push(it)
      })
      return list
    }
  }
  ///////////////////////////////////////////////////
}
Ti.Preload("ti/com/wn/support/wn_list_wrapper_mixins.mjs", _M);
})();
//============================================================
// JOIN: wn/table/wn-table.html
//============================================================
Ti.Preload("ti/com/wn/table/wn-table.html", `<ti-table
  v-bind="this"
  :fields="TheFields"
  :on-init="OnSubListInit"
  @select="OnSelected"
  @open="$notify('open', $event)"/>`);
//============================================================
// JOIN: wn/table/wn-table.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////////////
  data : ()=>({
    isAllChecked  : false,
    hasChecked    : false,
    theCurrentId  : false,
    theCheckedIds : false
  }),
  ///////////////////////////////////////////////////
  computed : {
    //----------------------------------------------
    TheFields() {
      let list = []
      for(let fld of this.fields) {
        let f2 = _.assign({}, fld)
        f2.display = this.explainDisplayItems(fld.display)
        list.push(f2)
      }
      return list
    }
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //----------------------------------------------
    OnSubListInit($list) {this.$list = $list},
    //----------------------------------------------
    OnSelected(payload={}){
      this.theCheckedIds = payload.checkedIds
      this.theCurrentId  = payload.currentId
      this.syncCheckStatus()
      this.$notify("select", payload)
    },
    //----------------------------------------------
    syncCheckStatus() {
      this.isAllChecked = this.$list.isAllChecked
      this.hasChecked   = this.$list.hasChecked
    },
    //----------------------------------------------
    // Delegate methods
    selectPrevRow(options){this.$list.selectPrevRow(options)},
    selectNextRow(options){this.$list.selectNextRow(options)},

    getCurrentRow(options){return this.$list.getCurrentRow(options)},
    getCheckedRow(options){return this.$list.getCheckedRow(options)},

    getCurrent(options){return this.$list.getCurrent(options)},
    getChecked(options){return this.$list.getChecked(options)},

    selectRow(options){this.$list.selectRow(options)},
    checkRow (options){this.$list.checkRow(options)},
    cancelRow(options){this.$list.cancelRow(options)}
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "data" : function(){
      this.syncCheckStatus()
    },
    "checkedIds" : function(){
      this.syncCheckStatus()
    }
  }
  ///////////////////////////////////////////////////
}
Ti.Preload("ti/com/wn/table/wn-table.mjs", _M);
})();
//============================================================
// JOIN: wn/table/_com.json
//============================================================
Ti.Preload("ti/com/wn/table/_com.json", {
  "name" : "wn-table",
  "globally" : true,
  "template" : "./wn-table.html",
  "props" : [
    "@com:ti/support/list_props.mjs",
    "@com:ti/table/ti-table-props.mjs"],
  "mixins" : [
    "@com:wn/support/wn_list_wrapper_mixins.mjs",
    "./wn-table.mjs"],
  "components" : [
    "@com:ti/table"]
});
//============================================================
// JOIN: wn/thing/manager/com/thing-creator/thing-creator.html
//============================================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-creator/thing-creator.html", `<div class="thing-creator ti-box-relative">
  <ti-form
    :fields="fields"
    :only-fields="onlyFields"
    :fixed="fixed"
    :data="TheData"
    :on-init="OnFormInit"
    @field:change="OnFormFieldChange"
    @change="OnFormChange"
    @submit="OnSubmit"/>
  <hr class="no-space">
  <div class="ti-flex-center ti-padding-10">
    <div class="ti-btn is-big" 
      @click="OnCreate">
      <span>{{'create-now'|i18n}}</span>
    </div>
  </div>
  <div v-if="creating"
    class="ti-box-mask as-thin ti-flex-center">
    <ti-loading text="i18n:creating"/>
  </div>
</div>`);
//============================================================
// JOIN: wn/thing/manager/com/thing-creator/thing-creator.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////
  data : ()=>({
    "myData" : undefined,
    "creating" : false
  }),
  ///////////////////////////////////////////
  props : {
    "fields" : {
      type : Array,
      default : ()=>[]
    },
    "data" : {
      type : Object,
      default : ()=>({})
    },
    "onlyFields" : {
      type: Boolean,
      default: false
    },
    "fixed": {
      type: Object,
      default: undefined
    }
  },
  ///////////////////////////////////////////
  computed: {
    TheData() {
      return this.myData || this.data
    }
  },
  ///////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnFormInit($form) {
      this.$form = $form
    },
    //--------------------------------------
    OnFormFieldChange(pair={}) {
      //console.log("OnFormFieldChange", pair)
      this.myData = this.$form.getData(pair)
    },
    //--------------------------------------
    OnFormChange(data) {
      //console.log("OnFormChange", data)
      this.myData = data
    },
    //--------------------------------------
    async OnCreate() {
      this.creating = true

      await Ti.App(this).dispatch("main/create", this.myData)
      this.$notify("block:hide", "creator")
    },
    //--------------------------------------
    async OnSubmit() {
      this.$nextTick(()=>{
        this.OnCreate()
      })
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  mounted() {
    this.myData = this.$form.getData()
  }
  ///////////////////////////////////////////
}
Ti.Preload("ti/com/wn/thing/manager/com/thing-creator/thing-creator.mjs", _M);
})();
//============================================================
// JOIN: wn/thing/manager/com/thing-creator/_com.json
//============================================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-creator/_com.json", {
  "name" : "wn-thing-creator",
  "globally" : true,
  "template" : "./thing-creator.html",
  "mixins"   : ["./thing-creator.mjs"],
  "components" : []
});
//============================================================
// JOIN: wn/thing/manager/com/thing-files/thing-files-props.mjs
//============================================================
(function(){
const _M = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "dirName" : {
    type : String,
    default : "media"
  },
  "dataHome" : {
    type : String,
    default : null
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "files" : {
    type: Object,
    default: undefined
  },
  "preview" : {
    type : Object,
    default: undefined
  },
  "previewEdit" : {
    type : Object,
    default: undefined
  },
  "actions" : {
    type : Array,
    default : ()=>[{
        "name" : "reloading",
        "type" : "action",
        "icon" : "zmdi-refresh",
        "tip" : "i18n:refresh",
        "altDisplay" : {
          "icon" : "zmdi-refresh zmdi-hc-spin"
        },
        "action" : "$parent:reloadData"
      },{
        "type" : "line"
      }, {
        "name" : "deleting",
        "type" : "action",
        "icon" : "zmdi-delete",
        "text" : "i18n:del",
        "altDisplay" : {
          "icon" : "zmdi-refresh zmdi-hc-spin",
          "text" : "i18n:del-ing"
        },
        "action" : "$parent:doDeleteSelected"
      },{
        "type" : "line"
      },{
        "name" : "upload",
        "type" : "action",
        "icon" : "zmdi-cloud-upload",
        "text" : "i18n:upload",
        //"action" : "commit:main/files/showUploadFilePicker"
        "action" : "$parent:doUploadFiles"
      }]
  },
  "stateLocalKey" : {
    type : String,
    default : null
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "dirNameTip" : {
    type : String,
    default : "i18n:thing-files"
  },
  "dirNameComType" : {
    type : String,
    default : "ti-droplist"
  },
  "dirNameOptions" : {
    type : Array,
    default : ()=>[{
      icon  :"zmdi-collection-image",
      text  :"i18n:media",
      value : "media"
    }, {
      icon  :"zmdi-attachment-alt",
      text  :"i18n:attachment",
      value : "attachment"
    }]
  },
  "nilIcon": {
    type: String,
    default: "fas-braille"
  },
  "nilText": {
    type: String,
    default: null
  }
  //-----------------------------------
  // Measure
  //-----------------------------------
}
Ti.Preload("ti/com/wn/thing/manager/com/thing-files/thing-files-props.mjs", _M);
})();
//============================================================
// JOIN: wn/thing/manager/com/thing-files/thing-files.html
//============================================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-files/thing-files.html", `<div class="wn-thing-files">
  <!--
    With Data Home
  -->
  <template v-if="dataHome">
    <!--
      Head bar for switch dir and actions
    -->
    <div class="as-header">
      <div v-if="dirNameTip"
        class="as-tip">
        <span>{{dirNameTip|i18n}}</span>
      </div>
      <!--Left: select files home dirName-->
      <div class="as-name">
        <component 
          :is="dirNameComType"
          height=".3rem"
          :allow-empty="false"
          :options="dirNameOptions"
          :value="dirName"
          :prefix-icon-for-clean="false"
          @change="OnDirNameChanged"/>
      </div>
      <!--Right: Common Actions-->
      <div class="as-menu">
        <ti-actionbar 
          :items="actions"
          :status="myStatus"/>
      </div>
    </div>
    <!--
      File Preview
    -->
    <div class="as-preview">
      <wn-obj-preview
        class="ti-fill-parent"
        v-bind="ThePreview"
        :meta="CurrentFile"/>
    </div>
    <!--
      File List
    -->
    <div class="as-list">
      <wn-adaptlist
        class="ti-fill-parent"
        v-bind="TheFiles"
        :data="myData"
        :meta="myDataDirObj"
        :status="myStatus"
        :before-upload="checkDataDir"
        @uploaded="OnFileUploaded"
        @select="OnFileSelect"
        @open="OnFileOpen"
        :on-init="OnAdaptListInit"/>
    </div>
  </template>
  <!--
    Without Data Home
  -->
  <ti-loading
    v-else
      class="nil-datahome as-big-mask"
      :text="nilText"
      :icon="nilIcon"/>
</div>`);
//============================================================
// JOIN: wn/thing/manager/com/thing-files/thing-files.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////
  inject: ["$ThingManager"],
  ///////////////////////////////////////////
  data: ()=>({
    myDataDirObj: null,
    myData: {},
    myStatus: {
      reloading: false
    },
    myCurrentId: null
  }),
  ///////////////////////////////////////////
  computed : {
    //--------------------------------------
    hasDataHome() {
      return this.dataHome ? true : false
    },
    //--------------------------------------
    CurrentFile(){
      if(this.myCurrentId && this.myData.list){
        for(let it of this.myData.list) {
          if(this.myCurrentId == it.id){
            return it
          }
        }
      }
    },
    //--------------------------------------
    ThePreview() {
      let preview = Ti.Util.getFallback(this.preview, this.dirName, "@default") 
                    || this.preview 
                    || {}

      return {
        showInfo  : false,
        floatInfo : false,
        infoPosition  : "left",
        infoNameWidth : 40,
        infoValueWidth : 120,
        stateLocalKey : this.stateLocalKey,
        // Customized
        ...preview,
        // Edit Info 
        editInfoBy : ()=>{
          this.editPreviewInfo()
        }
      }
    },
    //--------------------------------------
    TheFiles() {
      return _.assign({}, this.files, {
        routers : {
          "reload" : async ()=>{
            await this.reloadData()
          }
        }
      })
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnAdaptListInit($adaptlist){this.$adaptlist = $adaptlist},
    //--------------------------------------
    // Events
    //--------------------------------------
    OnDirNameChanged(dirName) {
      let app = Ti.App(this)
      app.commit("main/setCurrentDataDir", dirName)
      this.$nextTick(()=>{
        this.reloadData()
      })
    },
    //--------------------------------------
    OnFileSelect({currentId}) {
      this.myCurrentId = currentId
    },
    //--------------------------------------
    OnFileOpen({id, item}) {
      this.$notify("file:open", item)
    },
    //--------------------------------------
    async OnFileUploaded(files=[]){
      let f = _.first(files)
      if(f) {
        this.$adaptlist.myCurrentId = f.id
        this.myCurrentId = f.id
      }
      await Ti.App(this).dispatch("main/autoSyncCurrentFilesCount")
    },
    //--------------------------------------
    // Untility
    //--------------------------------------
    async doDeleteSelected(){
      await this.$adaptlist.doDelete()
      await Ti.App(this).dispatch("main/autoSyncCurrentFilesCount")
    },
    //--------------------------------------
    async checkDataDir() {
      // Guard
      if(!this.hasDataHome) {
        return
      }
      // If empty data home, create one
      if(!this.myDataDirObj) {
        let pos = this.dataHome.indexOf('/')
        let tsDataPh = this.dataHome.substring(0, pos)
        let dirPath = Ti.Util.appendPath(this.dataHome.substring(pos+1), this.dirName)
        let newMeta = {
          race : "DIR",
          nm   : dirPath
        }
        let json = JSON.stringify(newMeta)
        let cmdText = `obj "${tsDataPh}" -IfNoExists -new '${json}' -cqno`
        //console.log(cmdText)
        let dataDirObj = await Wn.Sys.exec2(cmdText, {as:"json"})
        let dataHomeObj = await Wn.Io.loadMetaBy(this.dataHome)

        // Update local state
        Ti.App(this).commit("main/setCurrentDataHomeObj", dataHomeObj)
        this.myDataDirObj = dataDirObj
      }
    },
    //--------------------------------------
    async doUploadFiles() {
      // Guard
      await this.checkDataDir()
      
      // Do upload
      if(this.myDataDirObj) {
        this.$adaptlist.openLocalFileSelectdDialog()
      }
      // Impossible
      else {
        throw "Impossible!!!"
      }
    },
    //--------------------------------------
    async editPreviewInfo() {
      //console.log("showPreviewObjInfo:", this.preview)
      if(this.CurrentFile) {
        let options = _.get(this.previewEdit, this.dirName)
        let reo = await Wn.EditObjMeta(this.CurrentFile, options)
        if(reo && reo.data) {
          this.updateItemInDataList(reo.data)
        }
      }
    },
    //--------------------------------------
    updateItemInDataList(meta) {
      if(meta && this.myData && _.isArray(this.myData.list)) {
        this.myData.list = _.map(
          this.myData.list,
          it => it.id == meta.id ? meta : it)
      }
    },
    //--------------------------------------
    // Reloading
    //--------------------------------------
    async reloadData() {
      if(this.dataHome && this.dirName) {
        this.myStatus.reloading = true
        let hmph = Ti.Util.appendPath(this.dataHome, this.dirName)
        //console.log("reloadData:", hmph)
        let home = await Wn.Io.loadMeta(hmph)
        // Guard
        if(!home) {
          this.myDataDirObj = null
          this.myData = {}
        }
        // Update data
        else {
          let reo = await Wn.Io.loadChildren(home)
          this.myDataDirObj = home
          this.myData = reo
        }
        _.delay(()=>{
          this.myStatus.reloading = false
        }, 100)
      }
      // Reset
      else {
        this.myDataDirObj = null
        this.myData = {}
      }
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  watch : {
    "dataHome" : {
      handler : "reloadData",
      immediate : true
    }
  },
  ///////////////////////////////////////////
  mounted : function() {
    this.$ThingManager.$files = this
  }
  ///////////////////////////////////////////
}
Ti.Preload("ti/com/wn/thing/manager/com/thing-files/thing-files.mjs", _M);
})();
//============================================================
// JOIN: wn/thing/manager/com/thing-files/_com.json
//============================================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-files/_com.json", {
  "name" : "wn-thing-files",
  "globally" : true,
  "template" : "./thing-files.html",
  "props" : "./thing-files-props.mjs",
  "mixins"   : ["./thing-files.mjs"],
  "components" : [
    "@com:wn/adaptlist"
  ]
});
//============================================================
// JOIN: wn/thing/manager/com/thing-filter/thing-filter.html
//============================================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-filter/thing-filter.html", `<div class="wn-thing-filter"
  :class="TopClass">
  <!--
    Icon: Recycle Bin
  -->
  <div
    v-if="isInRecycleBin"
      class="as-recyclebin"
      @click="OnLeaveRecycleBin"><div>
        <!--Icon-->
        <div class="it-icon">
          <ti-icon value="fas-recycle"/>
          <ti-icon value="far-arrow-alt-circle-left"/>
        </div>
        <!--text-->
        <div class="it-text">{{'i18n:thing-recycle-bin'|i18n}}</div>
  </div></div>
  <!--
    Keyword
  -->
  <TiComboFilter
    class="as-filter"
    v-bind="filter"
    :placeholder="placeholder"
    :value="value.filter"
    @change="OnFilterChange"/>
  <!--
    Sorter
  -->
  <TiComboSorter
    v-if="hasSorter"
      class="as-sorter"
      v-bind="sorter"
      :value="value.sorter"
      @change="OnSorterChange"/>
</div>`);
//============================================================
// JOIN: wn/thing/manager/com/thing-filter/thing-filter.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////
  data : ()=>({
    keywordFocus : false
  }),
  ///////////////////////////////////////////
  props : {
    "filter" : {
      type : Object,
      default : ()=>({})
    },
    "sorter" : {
      type : Object,
      default : ()=>({})
    },
    "placeholder" : {
      type : String,
      default : 'i18n:find-data'
    },
    "status" : {
      type : Object,
      default : ()=>({})
    },
    "value" : {
      type : Object,
      default : ()=>({})
    },
  },
  ///////////////////////////////////////////
  computed : {
    //---------------------------------------
    TopClass() {
      return this.getTopClass({
        "in-recyclebin" : this.isInRecycleBin
      })
    },
    //---------------------------------------
    hasSorter() {
      return !_.isEmpty(this.sorter)
    },
    //---------------------------------------
    isInRecycleBin() {
      return this.status.inRecycleBin
    }
    //---------------------------------------
  },
  ///////////////////////////////////////////
  methods : {
    //---------------------------------------
    OnFilterChange(payload) {
      this.$notify("filter::change", payload)
    },
    //---------------------------------------
    OnSorterChange(payload) {
      this.$notify("sorter::change", payload)
    },
    //---------------------------------------
    // When this func be invoked, the recycleBin must be true
    OnLeaveRecycleBin() {
      Ti.App(this).dispatch('main/toggleInRecycleBin')
    }
    //---------------------------------------
  }
  ///////////////////////////////////////////
}
Ti.Preload("ti/com/wn/thing/manager/com/thing-filter/thing-filter.mjs", _M);
})();
//============================================================
// JOIN: wn/thing/manager/com/thing-filter/_com.json
//============================================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-filter/_com.json", {
  "name" : "wn-thing-filter",
  "globally" : true,
  "template" : "./thing-filter.html",
  "mixins"   : ["./thing-filter.mjs"],
  "components" : [
    "@com:ti/combo/filter",
    "@com:ti/combo/sorter"
  ]
});
//============================================================
// JOIN: wn/thing/manager/com/thing-markdown-editor/_com.json
//============================================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-markdown-editor/_com.json", {
  "name" : "wn-thing-markdown-richeditor",
  "globally" : true,
  "template" : "./thing-markdown-richeditor.html",
  "mixins"   : ["./thing-markdown-richeditor.mjs"],
  "components" : []
});
//============================================================
// JOIN: wn/thing/manager/wn-thing-manager-methods.mjs
//============================================================
(function(){
const _M = {
  //--------------------------------------
  //
  //           Batch Update
  //
  //--------------------------------------
  async batchUpdate() {
    //....................................
    // Prepare the data
    if(_.isEmpty(this.checkedItems)) {
      return Ti.Toast.Open("i18n:batch-none", "warn")
    }
    let current = _.first(this.checkedItems)
    //....................................
    let batch = _.get(this.config, "schema.behavior.batch") || {}
    _.defaults(batch, {
      "comType" : "wn-obj-form",
      "comConf" : {},
      "fields" : "schema.meta.comConf.fields",
      "names" : null,
      "valueKey": "data"
    })
    batch.comType = _.kebabCase(batch.comType)
    // Add default setting
    if(/^(ti-|wn-obj-)(form)$/.test(batch.comType)) {
      _.defaults(batch.comConf, {
        autoShowBlank: false,
        updateBy: true,
        setDataBy: true
      })
    }
    //....................................
    let name_filter;
    if(_.isString(batch.names)) {
      if(batch.names.startsWith("^")){
        let regex = new RegExp(batch.names)
        name_filter = fld => regex.test(fld.name)
      }
      else if(batch.names.startsWith("!^")){
        let regex = new RegExp(batch.names.substring(1))
        name_filter = fld => !regex.test(fld.name)
      }
      else {
        let list = Ti.S.toArray(batch.names)
        name_filter = fld => list.indexOf(fld.name)>=0
      }
    }
    // Filter by Array
    // TODO maybe I should use the validate
    else if(_.isArray(batch.names) && !_.isEmpty(batch.names)) {
      name_filter = v => batch.name.indexOf(v)>=0
    }
    // Allow all
    else {
      name_filter = fld => {
        //console.log(fld)
        // It is dangour when batch update
        // Many thing item may refer to same file
        if(/^(wn-upload-file|wn-imgfile)$/.test(fld.comType))
          return false
        return true
      }
    }

    //....................................
    // Prepare the fields
    let fields = _.get(this.config, batch.fields)
    //....................................
    // Define the filter processing
    const do_filter_fields = function(flds=[], filter) {
      let list = []
      for(let fld of flds) {
        // Group
        if(_.isArray(fld.fields)) {
          let f2 = _.cloneDeep(fld)
          f2.fields = do_filter_fields(fld.fields, filter)
          if(!_.isEmpty(f2.fields)) {
            list.push(f2)
          }
        }
        // Fields
        else if(filter(fld)) {
          list.push(fld)
        }
      }
      return list
    }
    //....................................
    // filter each fields
    fields = do_filter_fields(fields, name_filter)
    //....................................
    // Open the Modal
    let updates = await Ti.App.Open({
      title: "i18n:batch-update",
      width: 640,
      height: "90%",
      position: "top",
      //............................
      comType: "inner-body",
      //............................
      components: [{
        name: "inner-body",
        globally : false,
        data: {
          update: {},
          value: current,
          innerComConf: {
            ... batch.comConf,
            fields
          }
        },
        template: `<${batch.comType}
          v-bind="innerComConf"
          :${batch.valueKey}="value"
          @field:change="OnFieldChange"
          @change="OnChange"/>`,
        methods: {
          OnFieldChange({name, value}){
            _.set(this.update, name, value)
            this.$notify("change", this.update)
          },
          OnChange(payload) {
            this.value = payload
          }
        }
      }]
      //............................
    })
    //....................................
    if(!_.isEmpty(updates)) {
      // Get all checkes
      await Ti.App(this).dispatch("main/batchUpdateMetas", updates)
    }
  },
  //--------------------------------------
  //
  //      Utility: show/hide block
  //
  //--------------------------------------
  changeShown(shown={}) {
    Ti.App(this).dispatch("main/doChangeShown", shown)
  },
  //--------------------------------------
  showBlock(name) {
    //console.log("showBlock", name)
    // If creator, then must leave the recycle bin
    if("creator" == name) {
      if(this.status.inRecycleBin) {
        Ti.Alert("i18n:thing-create-in-recyclebin", {
          title : "i18n:warn",
          icon  : "im-warning",
          type  : "warn"
        })
        return
      }
    }
    if("files" == name) {
      Ti.App(this).dispatch("main/reloadFiles")
    }
    else if("content" == name) {
      //Ti.App(this).dispatch("main/reloadFiles")
      Ti.App(this).dispatch("main/current/reload")
    }
    // Mark block
    Ti.App(this).dispatch("main/doChangeShown", {[name]:true})
  },
  //--------------------------------------
  hideBlock(name) {
    Ti.App(this).dispatch("main/doChangeShown", {[name]:false})
  },
  //--------------------------------------
  toggleBlock(name) {
    Ti.App(this).dispatch("main/doChangeShown", {
      [name]: !this.TheShown[name]
    })
  },
  //--------------------------------------
  //
  //           Utility: Others
  // 
  //--------------------------------------
  async invoke(fnName) {
    //console.log("invoke ", fnName)
    let fn = _.get(this.SchemaMethods, fnName)
    // Invoke the method
    if(_.isFunction(fn)) {
      return await fn.apply(this, [])
    }
    // Throw the error
    else {
      throw Ti.Err.make("e.thing.fail-to-invoke", fnName)
    }
  }
  //--------------------------------------
}
Ti.Preload("ti/com/wn/thing/manager/wn-thing-manager-methods.mjs", _M);
})();
//============================================================
// JOIN: wn/thing/manager/wn-thing-manager.html
//============================================================
Ti.Preload("ti/com/wn/thing/manager/wn-thing-manager.html", `<ti-gui
  class="wn-thing"
  :class="TopClass"
  v-ti-activable
  :layout="TheLayout"
  :schema="TheSchema"
  :shown="TheShown"
  :can-loading="true"
  :loading-as="GuiLoadingAs"
  :action-status="status"/>`);
//============================================================
// JOIN: wn/thing/manager/wn-thing-manager.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////
  provide : function() {
    return {
      "$ThingManager" : this
    }
  },
  ///////////////////////////////////////////
  data: ()=>({
    "myRouting": {}
  }),
  ///////////////////////////////////////////
  props : {
    // Thing Set Home
    "meta" : {
      type : Object,
      default : ()=>({})
    },
    "currentDataHome" : {
      type : String,
      default : undefined
    },
    "currentDataHomeObj" : {
      type : Object,
      default : undefined
    },
    "currentDataDir" : {
      type : String,
      default : "media"
    },
    "status" : {
      type : Object,
      default : ()=>({})
    },
    "config" : {
      type : Object,
      default : ()=>({})
    },
    "search" : {
      type : Object,
      default : ()=>({})
    },
    "current" : {
      type : Object,
      default : ()=>({})
    },
    "files" : {
      type : Object,
      default : ()=>({})
    },
    "preview" : {
      type : Object,
      default : ()=>({})
    },
    "emitChange": {
      type : Boolean,
      default: false
    },
    "keepLastSelection": {
      type: Boolean,
      default: true
    }
  },
  ///////////////////////////////////////////
  computed : {
    ...Vuex.mapGetters("main/search", [
      "currentItem", 
      "checkedItems"
    ]),
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    TheShown() {
      return _.get(this.config, "shown") || {}
    },
    //--------------------------------------
    TheKeepLastKey() {
      if(this.keepLastSelection) {
        return _.get(this.meta, "id") + ":currentId";
      }
    },
    //--------------------------------------
    TheLayout() {
      return Ti.Util.explainObj(this, this.config.layout)
    },
    //--------------------------------------
    TheSchema() {
      return Ti.Util.explainObj(this, this.config.schema)
    },
    //--------------------------------------
    TheLoadingAs() {
      return _.assign({
        "reloading" : {
          icon : "fas-spinner fa-spin",
          text : "i18n:loading"
        },
        "saving" : {
          icon : "zmdi-settings fa-spin",
          text : "i18n:saving"
        },
        "deleting" : {
          icon : "zmdi-refresh fa-spin",
          text : "i18n:del-ing"
        },
        "publishing" : {
          icon : "zmdi-settings zmdi-hc-spin",
          text : "i18n:publishing"
        },
        "restoring" : {
          icon : "zmdi-time-restore zmdi-hc-spin",
          text : "i18n:thing-restoring"
        },
        "cleaning" : {
          icon : "zmdi-settings zmdi-hc-spin",
          text : "i18n:thing-cleaning"
        }
      }, _.get(this.TheSchema, "loadingAs"))
    },
    //--------------------------------------
    ChangedRowId() {
      if(this.currentItem && this.current.status.changed) {
        return this.currentItem.id
      }
    },
    //--------------------------------------
    GuiLoadingAs() {
      let key = _.findKey(this.status, (v)=>v)
      return _.get(this.TheLoadingAs, key)
    },
    //--------------------------------------
    curentThumbTarget() {
      if(this.currentItem) {
        let th_set = this.meta.id
        return `id:${th_set}/data/${this.currentItem.id}/thumb.jpg`
      }
      return ""
    },
    //--------------------------------------
    SchemaMethods() {
      if(this.TheSchema && this.TheSchema.methods) {
        return Ti.Util.merge({}, this.TheSchema.methods)
      }
      return {}
    },
    //--------------------------------------
    EventRouting() {
      return _.assign({
        "block:show"      : "showBlock",
        "block:hide"      : "hideBlock",
        "block:shown"     : "changeShown",
        "filter::change"  : "OnFilterChange",
        "sorter::change"  : "OnSorterChange",
        "list::select"    : "OnListSelect",
        "list::open"      : "OnListOpen",
        "content::change" : "OnContentChange",
        "pager::change"   : "OnPagerChange"
      }, _.get(this.TheSchema, "events"), this.myRouting)
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  methods : {
    //--------------------------------------
    //
    //  Event handler
    //
    //--------------------------------------
    async OnFilterChange(filter) {
      Ti.App(this).commit("main/search/setFilter", filter)
      await Ti.App(this).dispatch("main/reloadSearch")
    },
    //--------------------------------------
    async OnSorterChange(sort={}) {
      Ti.App(this).commit("main/search/setSorter", sort)
      await Ti.App(this).dispatch("main/reloadSearch")
    },
    //--------------------------------------
    OnListSelect({current, currentId, checkedIds, checked}) {
      //console.log("OnListSelect", current)
      Ti.App(this).dispatch("main/setCurrentThing", {
        meta: current, 
        currentId,
        checkedIds
      })

      if(this.emitChange) {
        this.$emit("change", {current, currentId, checkedIds, checked})
      }
    },
    //--------------------------------------
    OnListOpen({rawData}) {
      let app = Ti.App(this)
      app.dispatch("main/config/updateShown", this.config.listOpen)
      // Update Current
      app.dispatch("main/setCurrentThing", {meta: rawData})
    },
    //--------------------------------------
    OnContentChange(content) {
      let app = Ti.App(this)
      app.dispatch("main/current/changeContent", content)
      app.commit("main/syncStatusChanged")
    },
    //--------------------------------------
    OnPagerChange({pn, pgsz}={}) {
      //console.log("OnPagerChange", {pn, pgsz})
      Ti.App(this).dispatch("main/search/reloadPage", {pn, pgsz})
    },
    //--------------------------------------
    OnViewCurrentSource() {
      this.viewCurrentSource()
    },
    //--------------------------------------
    //
    //  Utility
    //
    //--------------------------------------
    addEventRouting(eventName, handler) {
      this.$set(this.myRouting, eventName, handler)
    },
    removeEventRouting(...names) {
      let routing = _.omitBy(this.myRouting, (_, key)=>names.indexOf(key)>=0)
      this.myRouting = routing
    },
    //--------------------------------------
    //
    // Callback
    //
    //--------------------------------------
    // For Event Bubble Dispatching
    __on_events(name) {
      //console.log("__on_events", name)
      // Try to get handler
      let fn = _.get(this.EventRouting, name)
      if(!fn) {
        fn = this.$tiEventTryFallback(name, this.EventRouting)
      }

      // callPath -> Function
      if(_.isString(fn)) {
        return _.get(this, fn)
      }
      return fn
    },
    // Shortcut 
    __ti_shortcut(uniqKey) {
      //console.log("ti-form", uniqKey)
      if("ESCAPE" == uniqKey) {
        if(this.TheShown.creator) {
          this.hideBlock("creator")
        }
      }
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  mounted : function() {
    // Mark self in order to let `thing-files` set self
    // to root `wn-thing-manager` instance
    // then `openLocalFileSelectdDialogToUploadFiles`
    // can assess the `thing-files` instance directly.
    this.THING_MANAGER_ROOT = true

    // Update the customized actions
    let actions = _.get(this.config, "actions")
    if(_.isArray(actions)) {
      this.$notify("actions:update", actions)
    }
  }
  ///////////////////////////////////////////
}
Ti.Preload("ti/com/wn/thing/manager/wn-thing-manager.mjs", _M);
})();
//============================================================
// JOIN: wn/thing/manager/_com.json
//============================================================
Ti.Preload("ti/com/wn/thing/manager/_com.json", {
  "name" : "wn-thing-manager",
  "globally" : true,
  "i18n" : "@i18n:wn-thing",
  "template" : "./wn-thing-manager.html",
  "methods"  : "./wn-thing-manager-methods.mjs",
  "mixins"   : ["./wn-thing-manager.mjs"],
  "components" : [
    "./com/thing-files",
    "./com/thing-filter",
    "./com/thing-creator",
    "./com/thing-files",
    "@com:ti/gui",
    "@com:ti/combo/filter",
    "@com:ti/paging/jumper",
    "@com:wn/table",
    "@com:wn/obj/icon",
    "@com:wn/obj/puretext",
    "@com:wn/obj/preview",
    "@com:wn/obj/form",
    "@com:wn/upload/file"]
});
//============================================================
// JOIN: wn/thing/markdown/richeditor/thing-markdown-richeditor.html
//============================================================
Ti.Preload("ti/com/wn/thing/markdown/richeditor/thing-markdown-richeditor.html", `<WnObjMarkdownRicheditor
  v-bind="this"
  :on-init="OnEditorInit"/>`);
//============================================================
// JOIN: wn/thing/markdown/richeditor/thing-markdown-richeditor.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////////////
  inject: ["$ThingManager"],
  ///////////////////////////////////////////////////
  props: {
    "listenMedia": {
      type: String,
      default: "file:open"
    }
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    OnEditorInit($editor) {
      this.$editor = $editor
    },
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  mounted() {
    if(this.listenMedia) {
      this.$ThingManager.addEventRouting(this.listenMedia, (oMedia)=>{
        this.$editor.insertMediaObj(oMedia)
      })
    }
  },
  ///////////////////////////////////////////////////
  beforeDestroy() {
    if(this.listenMedia) {
      this.$ThingManager.removeEventRouting(this.listenMedia)
    }
  }
  ///////////////////////////////////////////////////
}
Ti.Preload("ti/com/wn/thing/markdown/richeditor/thing-markdown-richeditor.mjs", _M);
})();
//============================================================
// JOIN: wn/thing/markdown/richeditor/_com.json
//============================================================
Ti.Preload("ti/com/wn/thing/markdown/richeditor/_com.json", {
  "name" : "wn-thing-markdown-richeditor",
  "globally" : true,
  "template" : "./thing-markdown-richeditor.html",
  "props": [
    "@com:ti/text/markdown/richeditor/ti-markdown-richeditor-props.mjs",
    "@com:wn/obj/markdown/richeditor/wn-markdown-richeditor-props.mjs"
  ],
  "mixins"   : ["./thing-markdown-richeditor.mjs"],
  "components" : [
    "@com:wn/obj/markdown/richeditor"
  ]
});
//============================================================
// JOIN: wn/transfer/wn-transfer.html
//============================================================
Ti.Preload("ti/com/wn/transfer/wn-transfer.html", `<ti-transfer v-bind="this"
  
  :options="OptionsDict"
  :can-com-type="TheCanComType"
  :sel-com-type="TheSelComType"
  :display="TheDisplay"

  @change="$notify('change', $event)"/>`);
//============================================================
// JOIN: wn/transfer/wn-transfer.mjs
//============================================================
(function(){
const _M = {
  inheritAttrs : false,
  ///////////////////////////////////////////////////////
  data : ()=>({
    
  }),
  ///////////////////////////////////////////////////////
  props : {
    "itemBy" : {
      type : [String, Function],
      default : undefined
    },
    "findBy" : {
      type : [String, Function],
      default : undefined
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TheCanComType() {
      return this.canComType || "wn-list"
    },
    //---------------------------------------------------
    TheSelComType() {
      return this.selComType || "wn-list"
    },
    //------------------------------------------------
    TheDisplay() {
      return this.display || ["@<thumb>", "title", "nm"]
    },
    //---------------------------------------------------
    OptionsDict() {
      return Wn.Dict.evalOptionsDict(this)
    }
    //---------------------------------------------------
  }
  ///////////////////////////////////////////////////////
}
Ti.Preload("ti/com/wn/transfer/wn-transfer.mjs", _M);
})();
//============================================================
// JOIN: wn/transfer/_com.json
//============================================================
Ti.Preload("ti/com/wn/transfer/_com.json", {
  "name" : "wn-transfer",
  "globally" : true,
  "template" : "./wn-transfer.html",
  "props" : "@com:ti/transfer/ti-transfer-props.mjs",
  "mixins" : ["./wn-transfer.mjs"],
  "components" : ["@com:ti/transfer"]
});
//============================================================
// JOIN: wn/upload/file/wn-upload-file.html
//============================================================
Ti.Preload("ti/com/wn/upload/file/wn-upload-file.html", `<TiUploadFile
  :preview="PreviewIcon"
  :width="width"
  :height="height"
  :progress="progress"
  :upload-file="uploadFile"
  :removable="removable"
  @upload="onUpload"
  @remove="onRemove"
  @open="onOpen"/>`);
//============================================================
// JOIN: wn/upload/file/wn-upload-file.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  data : ()=>({
    "src_ts" : null,
    "oFile"     : null,
    "uploadFile" : null,
    "progress"   : -1
  }),
  /////////////////////////////////////////
  props : {
    "value" : {
      type : String,
      default : null
    },
    // raw value is WnObj
    // If declare the valueType
    // It will transform the WnObj
    // to relaitve value mode
    "valueType": {
      type: String,
      default: "obj",
      validator: v => /^(obj|path|fullPath|idPath|id)$/.test(v)
    },
    // Display width
    "width" : {
      type : [String, Number],
      default : undefined
    },
    // Display height
    "height" : {
      type : [String, Number],
      default : undefined
    },
    // support remove the objects
    "removable" : {
      type : Boolean,
      default : true
    },
    // Indicate the upload target when upload new value
    // Of cause, if the `value` exists, replace it
    // The `target` must be a path to a image object,
    // it will auto transfrom the image format by `cmd_imagic`
    "target" : {
      type : String,
      default : null
    },
    // which type supported to upload
    // nulll or empty array will support any types
    "supportTypes" : {
      type : [String, Array],
      default : ()=>[]
      //default : ()=>["png","jpg","jpeg","gif"]
    },
    // which mime supported to upload
    // nulll or empty array will support any mimes
    "supportMimes" : {
      type : [String, Array],
      default : ()=>[]
      //default : ()=>["image/png","image/jpeg","image/gif"]
    },
    // Image object only: it will auto apply image filter
    // just like clip the image size etc..
    // @see cmd_imagic for more detail about the filter
    "filter" : {
      type : [Array, String],
      default : null
    },
    // Image object only: if `>0 and <=1` mean output quality
    // if not match the range, will depends on the `cmd_imagic` default
    "quality" : {
      type : Number,
      default : 0
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    AcceptTypes() {
      if(_.isString(this.supportTypes))
        return this.supportTypes.split(",")
      return this.supportTypes
    },
    //--------------------------------------
    AcceptMimes() {
      if(_.isString(this.supportMimes))
        return this.supportMimes.split(",")
      return this.supportMimes
    },
    //--------------------------------------
    ImageFilter() {
      if(!this.filter)
        return []
      return [].concat(this.filter)
    },
    //--------------------------------------
    // Display image for <ti-thumb>
    PreviewIcon() {
      //....................................
      if(this.oFile) {
        //..................................
        // Image
        if(Wn.Obj.isMime(this.oFile, /^(image\/)/)) {
          let ss = ["/o/content?str=id:", this.oFile.id]
          if(this.src_ts) {
            ss.push("&_t=")
            ss.push(this.src_ts)
          }          
          return {
            type: "image", value: ss.join("")
          }
        }
        //..................................
        // Video
        if(Wn.Obj.isMime(this.oFile, /^(video\/)/)) {
          let ss = ["/o/content?str=id:", this.oFile.video_cover]
          if(this.src_ts) {
            ss.push("&_t=")
            ss.push(this.src_ts)
          }          
          return {
            type: "image", value: ss.join("")
          }
        }
        //..................................
        // Others just get the icon font
        return Wn.Util.getObjIcon(this.oFile)
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    async assertListHas(list, str, invalidMsg, vars) {
      if(!_.isEmpty(list)) {
        let invalid  = true
        for(let li of list) {
          if(li == str) {
            invalid = false
            break
          }
        }
        if(invalid) {
          console.log("haha")
          await Ti.Alert(invalidMsg, {
            type:"warn",
            icon:"zmdi-alert-triangle",
            vars
          })
          return false
        }
      }
      return true
    },
    //--------------------------------------
    async onOpen() {
      // remove the thumb file
      if(this.oFile) {
        let link = Wn.Util.getAppLink(this.oFile)
        //console.log("it will open ", link)
        await Ti.Be.Open(link.url, {params:link.params})
      }
    },
    //--------------------------------------
    async onRemove() {
      // remove the thumb file
      if(this.oFile) {
        await Wn.Sys.exec2(`rm id:${this.oFile.id}`)
      }
      // Notify the change
      this.$notify("change", null)
    },
    //--------------------------------------
    async onUpload(file) {
      //console.log("it will upload ", file)

      //................................
      // Check for support Types
      let type = Ti.Util.getSuffixName(file.name)
      if(!await this.assertListHas(
        this.AcceptTypes, type, 
        'i18n:wn-invalid-types',
        {current: type, supports: this.AcceptTypes.join(", ")})
      ) {
        return
      }
      if(!await this.assertListHas(
        this.AcceptMimes, file.type, 
        'i18n:wn-invalid-mimes',
        {current:file.type, supports:this.AcceptMimes.join(", ")})
      ) {
        return
      }

      //................................
      // Upload file to destination
      this.uploadFile = file
      this.progress = 0

      let {ok, msg, data} = await Wn.Io.uploadFile(file, {
        target : this.target,
        mode   : "r",
        progress : (pe)=> {
          this.progress = pe.loaded / pe.total
        }
      })

      //................................
      // Reset upload
      this.uploadFile = null
      this.progress = -1

      //................................
      // Fail to upload
      if(!ok) {
        await Ti.Alert(`i18n:${msg}`, {type:"warn", icon:"zmdi-alert-triangle"})
        return
      }

      //................................
      // do Filter
      if(!_.isEmpty(this.ImageFilter)) {
        let cmd = [
          "imagic", `id:${data.id}`, 
          `-filter "${this.ImageFilter.join(" ")}"`]       
        if(this.quality>0 && this.quality<=1) {
          cmd.push(`-qa ${this.quality}`)
        }
        cmd.push("-out inplace")
        let cmdText = cmd.join(" ")
        await Wn.Sys.exec2(cmdText)
      }

      //................................
      // done
      this.src_ts = Date.now()
      this.oFile = data

      //................................
      let val = data

      // Transform value
      if("obj" != this.valueType) {
        val = Wn.Io.formatObjPath(data, this.valueType)
      }

      //................................
      this.$notify("change", val)
    },
    //--------------------------------------
    async reload() {
      if(_.isString(this.value)) {
        this.oFile = await Wn.Io.loadMetaBy(this.value)
      }
      // Object
      else if(_.get(this.value, "race") == "FILE") {
        this.oFile = _.cloneDeep(this.value)
      }
      // Reset
      else {
        this.oFile = null
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "value" : function() {
      this.reload()
    }
  },
  //////////////////////////////////////////
  mounted : async function(){
    await this.reload()
  }
  //////////////////////////////////////////
}
Ti.Preload("ti/com/wn/upload/file/wn-upload-file.mjs", _M);
})();
//============================================================
// JOIN: wn/upload/file/_com.json
//============================================================
Ti.Preload("ti/com/wn/upload/file/_com.json", {
  "name" : "wn-upload-file",
  "globally" : true,
  "template" : "./wn-upload-file.html",
  "mixins" : ["./wn-upload-file.mjs"],
  "components" : [
    "@com:ti/upload/file"
  ]
});
//============================================================
// JOIN: hmaker/website/mod/site-config/site-config-actions.mjs
//============================================================
(function(){
const _M = {
  //----------------------------------------
  async reload({state, commit}, meta) {
    if(state.status.reloading
      || state.status.saving){
      return
    }

    
  }
  //----------------------------------------
}
Ti.Preload("ti/mod/hmaker/website/mod/site-config/site-config-actions.mjs", _M);
})();
//============================================================
// JOIN: hmaker/website/mod/site-config/site-config.json
//============================================================
Ti.Preload("ti/mod/hmaker/website/mod/site-config/site-config.json", {
  "meta" : null,
  "desktop" : {
    "mapping" : {
      "paths" : {
        "site-state.json" : "desktopSiteStateView"
      },
      "types" : {
      },
      "mimes" : {
        "application/json" : "desktopJsonView",
        "text/*, application/*" : "desktopTextView"
      },
      "races" : {
        "DIR"  : "desktopAdaptList",
        "FILE" : "desktopObjPreview"
      }
    }
  },
  "tablet" : "desktop",
  "phone" : "desktop",
  "views" : {
    "desktopSiteStateView" : {
      "comType" : "hmaker-site-state",
      "comConf" : {
        "home" : "=home",
        "content" : "=currentContent"
      },
      "actions" : [{
          "key"  : "saving",
          "type" : "action",
          "icon" : "zmdi-floppy",
          "text" : "i18n:save-change",
          "altDisplay" : {
            "icon" : "fas-spinner fa-pulse",
            "text" : "i18n:saving"
          },
          "enableBy" : "changed",
          "action" : "dispatch:main/saveCurrent",
          "shortcut" : "CTRL+S"
        }, {
          "key"  : "reloading",
          "type" : "action",
          "icon" : "zmdi-rotate-right",
          "text" : "i18n:revoke-change",
          "altDisplay" : {
            "icon" : "zmdi-refresh zmdi-hc-spin",
            "text" : "i18n:loading"
          },
          "action" : "dispatch:main/reloadCurrent"
        }, {
          "type" : "Group",
          "icon" : "zmdi-more-vert",
          "items" : [{
              "type" : "action",
              "icon" : "zmdi-info-outline",
              "text" : "i18n:properties",
              "action" : "main:editCurrentObjMeta"
            }]
          }]
    },
    "desktopTextView" : {
      "comType" : "ti-text-raw",
      "comConf" : {
        "showTitle" : false,
        "content" : "=currentContent",
        "contentIsChanged" : "=status.changed"
      },
      "actions" : [{
          "key"  : "saving",
          "type" : "action",
          "icon" : "zmdi-floppy",
          "text" : "i18n:save-change",
          "altDisplay" : {
            "icon" : "fas-spinner fa-pulse",
            "text" : "i18n:saving"
          },
          "enableBy" : "changed",
          "action" : "dispatch:main/saveCurrent",
          "shortcut" : "CTRL+S"
        }, {
          "key"  : "reloading",
          "type" : "action",
          "icon" : "zmdi-rotate-right",
          "text" : "i18n:revoke-change",
          "altDisplay" : {
            "icon" : "zmdi-refresh zmdi-hc-spin",
            "text" : "i18n:loading"
          },
          "action" : "dispatch:main/reloadCurrent"
        }, {
          "type" : "Group",
          "icon" : "zmdi-more-vert",
          "items" : [{
              "type" : "action",
              "icon" : "zmdi-info-outline",
              "text" : "i18n:properties",
              "action" : "main:editCurrentObjMeta"
            }]
          }]
    },
    "desktopJsonView" : {
      "comType" : "ti-text-json",
      "comConf" : {
        "data" : "=currentData"
      },
      "actions" : [{
          "key"  : "saving",
          "type" : "action",
          "icon" : "zmdi-floppy",
          "text" : "i18n:save-change",
          "altDisplay" : {
            "icon" : "fas-spinner fa-pulse",
            "text" : "i18n:saving"
          },
          "enableBy" : "changed",
          "action" : "dispatch:main/saveCurrent",
          "shortcut" : "CTRL+S"
        }, {
          "key"  : "reloading",
          "type" : "action",
          "icon" : "zmdi-rotate-right",
          "text" : "i18n:revoke-change",
          "altDisplay" : {
            "icon" : "zmdi-refresh zmdi-hc-spin",
            "text" : "i18n:loading"
          },
          "action" : "dispatch:main/reloadCurrent"
        }, {
          "type" : "Group",
          "icon" : "zmdi-more-vert",
          "items" : [{
              "type" : "action",
              "icon" : "zmdi-info-outline",
              "text" : "i18n:properties",
              "action" : "main:editCurrentObjMeta"
            }]
        }]
    },
    "desktopAdaptList" : {
      "comType" : "wn-adaptlist",
      "comConf" : {
        "list" : "=currentData.list"
      }
    },
    "desktopObjPreview" : {
      "comType" : "wn-obj-preview",
      "comConf" : {
        "meta" : "=currentMeta"
      }
    }
  },
  "status" : {
    "reloading" : false
  }
});
//============================================================
// JOIN: hmaker/website/mod/site-config/site-config.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////
  mutations : {
    //----------------------------------------
    setMeta(state, meta) {
      state.meta = meta
    },
    //----------------------------------------
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    }
    //----------------------------------------
  }
  ////////////////////////////////////////////
}
Ti.Preload("ti/mod/hmaker/website/mod/site-config/site-config.mjs", _M);
})();
//============================================================
// JOIN: hmaker/website/mod/site-config/_mod.json
//============================================================
Ti.Preload("ti/mod/hmaker/website/mod/site-config/_mod.json", {
  "name" : "hmaker-site-config",
  "namespaced" : true,
  "state" : "./site-config.json",
  "actions" : "./site-config-actions.mjs",
  "mixins" : "./site-config.mjs"
});
//============================================================
// JOIN: hmaker/website/mod/site-tree/site-tree-actions.mjs
//============================================================
(function(){
const _M = {
  //----------------------------------------
  /***
   * Append the `meta` to current tree. 
   * It will auto load all the ancestor node of the meta in tree
   */ 
  async appendNode({state, commit, dispatch}, meta) {
    console.log("TODO appendNode", meta)
  },
  //----------------------------------------
  /***
   * Reload children of specific node. 
   * If current is leaf, it will skip the children reloading.
   * 
   * @param id{String} - the node id. higher priority then `path`
   * @param path{String|Array} - the node path
   * @param self{Boolean} - reload self or not.
   * @param force{Boolean} - reload again event the children had been loaded.
   * @param depth{Number} - reload the multi hierarchies if great than `1`
   */
  async reloadNode({state, commit, dispatch}, {
    id,
    path,
    self=false,
    force=false,
    depth=1
  }={}) {
    //......................................
    // Clone the tree
    let treeRoot = _.cloneDeep(state.root)
    let loaded = false
    //......................................
    // Find the node
    let node;
    if(!_.isUndefined(id)) {
      node = Ti.Trees.getNodeById(treeRoot, id)
    }
    // By Path
    else {
      node = Ti.Trees.getNodeByPath(treeRoot, path)
    }
    //......................................
    // Guard
    if(!node) {
      return
    }
    //......................................
    // Reload self
    if(self) {
      let nodeMeta = await Wn.Io.loadMetaById(node.id)
      node.rawData = nodeMeta
      loaded = true
    }
    //......................................
    // Define the loading
    const __load_subs = async (node, depth)=>{
      if(depth > 0 && !node.leaf) {
        depth --;
        if(force || _.isEmpty(node.children)) {
          let children = []
          let {list} = await Wn.Io.loadChildren(node.rawData)
          for(let li of list) {
            let sub = Wn.Util.wrapTreeNode(li)
            await __load_subs(sub, depth)
            children.push(sub)
          }
          node.children = children
          return true
        }
      }
      return false
    }
    //......................................
    // Do load
    loaded |= await __load_subs(node, depth)
    //......................................
    // Update the whole tree
    if(loaded) {
      commit("setRoot", treeRoot)
    }
  },
  //----------------------------------------
  /***
   * Reload site root node, and reload the first leave
   */
  async reloadRoot({state, commit, dispatch}, meta) {
    let root = Wn.Util.wrapTreeNode(meta)

    // Update Root Node
    commit("setRoot", root)

    // Reload Root Node
    await dispatch("reloadNode")

    // Reload The Opened Node
    if(!_.isEmpty(state.root.children)) {
      let keys = _.keys(state.openedNodePaths).sort()
      for(let key of keys) {
        let hie = Ti.Trees.getByPath(state.root, key)
        if(hie && !hie.node.leaf) {
          //console.log("reloadNode", hie.path)
          await dispatch("reloadNode", {
            path : hie.path
          })
        }
      }
    }

    // Append The Current Node
    // if(state.currentId) {
    //   // Check if it had already loaded
    //   let hie = Ti.Trees.getNodeById(state.root, state.currentId)
    //   // Do reload it
    //   if(!hie) {
    //     let meta = await Wn.Io.loadMetaById(state.currentId)
    //     await dispatch("appendNode", meta)
    //   }
    // }
  }
  //----------------------------------------
}
Ti.Preload("ti/mod/hmaker/website/mod/site-tree/site-tree-actions.mjs", _M);
})();
//============================================================
// JOIN: hmaker/website/mod/site-tree/site-tree.json
//============================================================
Ti.Preload("ti/mod/hmaker/website/mod/site-tree/site-tree.json", {
  "root" : {},
  "currentId" : null,
  "openedNodePaths" : {}
});
//============================================================
// JOIN: hmaker/website/mod/site-tree/site-tree.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////
  mutations : {
    //----------------------------------------
    setRoot(state, root=null) {
      if(!_.isEqual(state.root, root)) {
        state.root = root
      }
    },
    //----------------------------------------
    setCurrentId(state, currentId=null) {
      state.currentId = currentId
    },
    //----------------------------------------
    setOpenedNodePaths(state, openedNodePaths={}) {
      state.openedNodePaths = _.cloneDeep(openedNodePaths)
    }
    //----------------------------------------
  }
  ////////////////////////////////////////////
}
Ti.Preload("ti/mod/hmaker/website/mod/site-tree/site-tree.mjs", _M);
})();
//============================================================
// JOIN: hmaker/website/mod/site-tree/_mod.json
//============================================================
Ti.Preload("ti/mod/hmaker/website/mod/site-tree/_mod.json", {
  "name" : "hmaker-site-tree",
  "namespaced" : true,
  "state" : "./site-tree.json",
  "actions" : "./site-tree-actions.mjs",
  "mixins" : "./site-tree.mjs"
});
//============================================================
// JOIN: hmaker/website/website-actions.mjs
//============================================================
(function(){
const _M = {
  //--------------------------------------------
  setTreeOpenedNodePaths({getters, commit}, openeds={}) {
    if(getters.TREE_OPEND_KEY) {
      openeds = _.pickBy(openeds, val=>val)
      commit("tree/setOpenedNodePaths", openeds)
      Ti.Storage.session.setObject(getters.TREE_OPEND_KEY, openeds)
    }
  },
  //--------------------------------------------
  async setTreeSelected({getters, commit, dispatch}, currentId=null) {
    if(getters.TREE_SELECTED_KEY) {
      commit("tree/setCurrentId", currentId)
      Ti.Storage.session.set(getters.TREE_SELECTED_KEY, currentId)

      commit("setStatus", {reloading:true})
      // Load current
      let meta = null
      if(currentId) {
        meta = await Wn.Io.loadMetaById(currentId)
      }
      await dispatch("current/reload", meta)

      commit("setStatus", {reloading:false})
      commit("syncStatusChanged")
    }
  },
  //--------------------------------------------
  onCurrentChanged({commit, dispatch}, payload) {
    dispatch("current/onChanged", payload)
    commit("syncStatusChanged")
  },
  //--------------------------------------------
  async saveCurrent({state, commit, dispatch}) {
    if(state.current.meta) {
      commit("setStatus", {saving:true})
      await dispatch("current/save")
      commit("setStatus", {saving:false})
      commit("syncStatusChanged")
    }
  },
  //--------------------------------------------
  async reloadCurrent({commit, dispatch}, meta) {
    commit("setStatus", {reloading:true})
    await dispatch("current/reload", meta)
    commit("setStatus", {reloading:false})
    commit("syncStatusChanged")
  },
  //--------------------------------------------
  async reloadConfig({state, dispatch}) {
    await dispatch("config/reload")
  },
  //--------------------------------------------
  async reloadTree({getters, state, commit, dispatch}) {
    // Restore openeds
    if(getters.TREE_OPEND_KEY) {
      let openeds = Ti.Storage.session.getObject(getters.TREE_OPEND_KEY)
      commit("tree/setOpenedNodePaths", openeds)
    }

    // Reload the tree root
    await dispatch("tree/reloadRoot", state.home)

    // Restore currentId
    if(getters.TREE_SELECTED_KEY) {
      let currentId = Ti.Storage.session.getString(getters.TREE_SELECTED_KEY)
      commit("tree/setCurrentId", currentId)
      if(currentId) {
        await dispatch("setTreeSelected", currentId)
      }
    }
  },
  //--------------------------------------------
  async reloadTreeNode({commit, dispatch}, payload) {
    commit("setStatus", {reloading:true})
    await dispatch("tree/reloadNode", payload)
    commit("setStatus", {reloading:false})
  },
  //--------------------------------------------
  async reload({state, commit, dispatch}, home) {
    //console.log("thing-manager.reload", state)
    // Update New Meta
    if(home) {
      commit("setHome", home)
    }
    // Get home back
    else {
      home = state.home
    }
    
    // Mark reloading
    commit("setStatus", {reloading:true})

    // Reloading
    await dispatch("reloadConfig")
    await dispatch("reloadTree")

    // Auto Select the first item
    // TODO


    // All done
    commit("setStatus", {reloading:false})
  }
  //--------------------------------------------
}
Ti.Preload("ti/mod/hmaker/website/website-actions.mjs", _M);
})();
//============================================================
// JOIN: hmaker/website/website.json
//============================================================
Ti.Preload("ti/mod/hmaker/website/website.json", {
  "home": null,
  "status" : {
    "reloading"  : false,
    "doing"      : false,
    "saving"     : false,
    "deleting"   : false,
    "changed"    : false,
    "publishing" : false,
    "exposeHidden" : false
  }
});
//============================================================
// JOIN: hmaker/website/website.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////////
  getters : {
    TREE_OPEND_KEY(state) {
      if(state.home) {
        return `website_tree_openeds_${state.home.id}`
      }
    },
    TREE_SELECTED_KEY(state) {
      if(state.home) {
        return `website_tree_selected_${state.home.id}`
      }
    }
  },
  ////////////////////////////////////////////////
  mutations : {
    //--------------------------------------------
    setHome(state, home) {
      state.home = home
    },
    //--------------------------------------------
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    },
    //--------------------------------------------
    setExposeHidden(state, exposeHidden) {
      state.status.exposeHidden = exposeHidden
    },
    //--------------------------------------------
    syncStatusChanged(state){
      if(state.current) {
        //console.log("do sync")
        state.status.changed = state.current.status.changed
      }
    }
    //--------------------------------------------
  }
  ////////////////////////////////////////////////
}
Ti.Preload("ti/mod/hmaker/website/website.mjs", _M);
})();
//============================================================
// JOIN: hmaker/website/_mod.json
//============================================================
Ti.Preload("ti/mod/hmaker/website/_mod.json", {
  "name" : "hmaker-website",
  "namespaced" : true,
  "state" : "./website.json",
  "actions" : "./website-actions.mjs",
  "mixins" : "./website.mjs",
  "modules" : {
    "tree"    : "./mod/site-tree",
    "config"  : "./mod/site-config",
    "current" : "@mod:wn/obj-current"
  }
});
//============================================================
// JOIN: ti/viewport/ti-viewport.json
//============================================================
Ti.Preload("ti/mod/ti/viewport/ti-viewport.json", {
  "mode" : "desktop",
  "activedIds" : []
});
//============================================================
// JOIN: ti/viewport/ti-viewport.mjs
//============================================================
(function(){
const _M = {
  getters : {
    viewportMode : (state) => state.mode,
    viewportActivedComIds : (state) => state.activedIds,
    isViewportModeDesktop : (state)=> "desktop" == state.mode,
    isViewportModeTablet  : (state)=> "tablet" == state.mode,
    isViewportModePhone   : (state)=> "phone" == state.mode,
    isViewportModeDesktopOrTablet : (state)=> 
      ("desktop" == state.mode || "tablet" == state.mode),
    isViewportModePhoneOrTablet : (state)=> 
      ("phone" == state.mode || "tablet" == state.mode)
  },
  mutations : {
    setMode(state, mode="desktop") {
      state.mode = mode
    },
    setActivedIds(state, activedIds=[]) {
      //console.log("viewport setActivedIds", activedIds)
      state.activedIds = _.cloneDeep(activedIds)
    }
  }
}
Ti.Preload("ti/mod/ti/viewport/ti-viewport.mjs", _M);
})();
//============================================================
// JOIN: ti/viewport/_mod.json
//============================================================
Ti.Preload("ti/mod/ti/viewport/_mod.json", {
  "state" : "./ti-viewport.json",
  "mixins" : "./ti-viewport.mjs"
});
//============================================================
// JOIN: wn/obj-current/m-obj-current-actions.mjs
//============================================================
(function(){
const _M = {
  //----------------------------------------
  // Combin Mutations
  //----------------------------------------
  onChanged({dispatch}, payload) {
    dispatch("changeContent", payload)
  },
  //----------------------------------------
  changeContent({commit}, payload) {
    commit("setContent", payload)
    commit("syncStatusChanged");
  },
  //----------------------------------------
  changeMeta({commit}, {name, value}={}) {
    if(name) {
      let meta = _.set({}, name, value)
      commit("mergeMeta", meta)
      commit("syncStatusChanged")
    }
  },
  //----------------------------------------
  updateContent({state, commit}, content) {
    commit("setContent", content)
    if(state.meta && "FILE" == state.meta.race) {
      commit("setSavedContent", content)
    }
    commit("syncStatusChanged")
  },
  //--------------------------------------------
  // User Interactivity
  //--------------------------------------------
  async openMetaEditor({state, dispatch}) {
    // Guard
    if(!state.meta) {
      return await Ti.Toast.Open("i18n:empty-data", "warn")
    }
    // Open Editor
    let reo = await Wn.EditObjMeta(state.meta, {fields:"auto"})

    // Cancel the editing
    if(_.isUndefined(reo)) {
      return
    }

    // Update the current editing
    if(reo.saved) {
      await dispatch("reload", reo.data)
    }
  },
  //--------------------------------------------
  async openContentEditor({state, dispatch}) {
    // Guard
    if(!state.meta) {
      return await Ti.Toast.Open("i18n:empty-data", "warn")
    }
    // Open Editor
    let newContent = await Wn.EditObjContent(state.meta, {
      content : state.content
    })

    // Cancel the editing
    if(_.isUndefined(newContent)) {
      return
    }

    // Update the current editing
    await dispatch("changeContent", newContent)
  },
  //--------------------------------------------
  // Update to remote
  //----------------------------------------
  async updateMeta({commit, dispatch}, {name, value}={}) {
    //console.log("I am update", name, value)
    let data = Ti.Types.toObjByPair({name, value})
    await dispatch("updateMetas", data)
  },
  //----------------------------------------
  async updateMetas({state, commit}, data={}) {
    // Check Necessary
    if(_.isMatchWith(state.meta, data, _.isEqual)) {
      return
    }

    // Mark field status
    _.forEach(data, (val, name)=>{
      commit("setFieldStatus", {name, type:"spinning", text:"i18n:saving"})
    })

    // Do the update
    let json = JSON.stringify(data)
    let th_set = state.meta.th_set
    let th_id  = state.meta.id
    let cmdText = `thing ${th_set} update ${th_id} -fields -cqn`
    let reo = await Wn.Sys.exec2(cmdText, {input:json, as:"json"})
    let isError = reo instanceof Error;

    if(!isError && !Ti.Util.isNil(reo)) {
      commit("setMeta", reo)
    }

    _.forEach(data, (val, name)=>{
      if(isError) {
        commit("setFieldStatus", {
          name, 
          type: "warn", 
          text: reo.message || "i18n:fail"
        })
      } else {
        commit("setFieldStatus", {
          name, 
          type: "ok", 
          text: "i18n:ok"
        })
        _.delay(()=>{commit("clearFieldStatus", name)}, 500)
      }
    })
  },
  //--------------------------------------------
  // Reload & Save
  //--------------------------------------------
  // async setCurrent({state, commit,dispatch}, {
  //   meta=null, force=false
  // }={}) {
  //   //console.log("setCurrent", meta, loadContent)

  //   // Not need to reload
  //   if(state.meta && meta && state.meta.id == meta.id) {
  //     if((_.isString(state.content)) && !force) {
  //       return
  //     }
  //   }

  //   // do reload
  //   await dispatch("reload", meta)

  // },
  //----------------------------------------
  async save({state, commit}) {
    if(state.status.saving || !state.status.changed){
      return
    }

    commit("setStatus", {saving:true})

    let meta = state.meta
    let content = state.content
    let newMeta = await Wn.Io.saveContentAsText(meta, content)

    commit("setStatus", {saving:false})
    commit("setMeta", newMeta)
    commit("setSavedContent", content)
    commit("syncStatusChanged")

    // return the new meta
    return newMeta
  },
  //----------------------------------------
  async reload({state, commit, dispatch}, meta) {
    if(state.status.reloading
      || state.status.saving){
      return
    }
    //......................................
    // Use the default meta
    if(_.isUndefined(meta)) {
      meta = state.meta
    }
    //......................................
    if(_.isString(meta)) {
      meta = await Wn.Io.loadMeta(meta)
    }
    //......................................
    // Guard
    if(!meta) {
      commit("setMeta", null)
      commit("setContent", null)
      return
    }
    // Init content as null
    let content = null
    commit("setStatus", {reloading:true})
    //......................................
    // For file
    if("FILE" == meta.race) {
      // need to be reload content
      content = await Wn.Io.loadContent(meta)
    }
    //......................................
    // For dir
    else if('DIR' == meta.race) {
      content = await Wn.Io.loadChildren(meta)
    }
    //......................................
    // Just update the meta
    commit("setStatus", {reloading:false})
    commit("setMeta", meta)
    commit("clearFieldStatus")
    // Update content and sync state
    dispatch("updateContent", content)
  }
  //----------------------------------------
}
Ti.Preload("ti/mod/wn/obj-current/m-obj-current-actions.mjs", _M);
})();
//============================================================
// JOIN: wn/obj-current/m-obj-current.json
//============================================================
Ti.Preload("ti/mod/wn/obj-current/m-obj-current.json", {
  "meta" : null,
  "content" : null,
  "data" : null,
  "__saved_content" : null,
  "status" : {
    "changed"   : false,
    "saving"    : false,
    "reloading" : false
  },
  "fieldStatus" : {}
});
//============================================================
// JOIN: wn/obj-current/m-obj-current.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////
  mutations : {
    //----------------------------------------
    setMeta(state, meta) {
      state.meta = meta
    },
    //--------------------------------------------
    assignMeta(state, meta) {
      state.meta = _.assign({}, state.meta, meta);
    },
    //--------------------------------------------
    mergeMeta(state, meta) {
      state.meta = _.merge({}, state.meta, meta);
    },
    //----------------------------------------
    setContent(state, content) {
      let meta = state.meta;
      // Guard
      if(!meta || Ti.Util.isNil(content)) {
        state.content = null
        state.data = null
        state.__saved_content = null
        state.status.changed = false
        return
      }
      //......................................
      // DIR
      if("DIR" == meta.race) {
        state.content = null
        state.__saved_content = null
        state.data = content
      }
      //......................................
      // File
      else if("FILE" == meta.race) {
        //....................................
        // String content
        if(_.isString(content)) {
          state.content = content
          // JSON
          if(Wn.Util.isMimeJson(meta.mime)) {
            try{
              state.data = JSON.parse(content)
            } catch(E) {
              state.data = null
            }
          }
          // Pure Text
          else if(Wn.Util.isMimeText(meta.mime)) {
            state.data = null
          }
        }
        //....................................
        // Take content as plain object or Array
        else {
          state.content = JSON.stringify(content, null, '  ')
          // JSON
          if(Wn.Util.isMimeJson(meta.mime)) {
            state.data = content
          }
          // Pure Text
          else if(Wn.Util.isMimeText(meta.mime)) {
            state.data = null
          }
        }
        //....................................
      }
    },
    //----------------------------------------
    setData(state, data) {
      state.data = data
    },
    //----------------------------------------
    setSavedContent(state, content) {
      state.__saved_content = content
    },
    //----------------------------------------
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    },
    //----------------------------------------
    syncStatusChanged(state){
      if(Ti.Util.isNil(state.content) && Ti.Util.isNil(state.__saved_content)) {
        state.status.changed = false
      } else {
        state.status.changed = !_.isEqual(state.content, state.__saved_content)
      }
    },
    //----------------------------------------
    setFieldStatus(state, {name, type, text}={}) {
      if(name){
        let ukey = _.concat(name).join("-")
        Vue.set(state.fieldStatus, ukey, {type, text})
      }
    },
    //----------------------------------------
    clearFieldStatus(state, names=[]) {
      // Clean All
      if(_.isEmpty(names)) {
        state.fieldStatus = {}
      }
      // Clear one
      else {
        state.fieldStatus = _.omit(state.fieldStatus, names)
      }
    },
    //----------------------------------------
  }
  ////////////////////////////////////////////
}
Ti.Preload("ti/mod/wn/obj-current/m-obj-current.mjs", _M);
})();
//============================================================
// JOIN: wn/obj-current/_mod.json
//============================================================
Ti.Preload("ti/mod/wn/obj-current/_mod.json", {
  "name" : "wn-obj-current",
  "namespaced" : true,
  "state" : "./m-obj-current.json",
  "actions" : "./m-obj-current-actions.mjs",
  "mixins" : "./m-obj-current.mjs"
});
//============================================================
// JOIN: wn/obj-meta/m-obj-meta-actions.mjs
//============================================================
(function(){
const _M = {
  //--------------------------------------------
  async updateMeta({state, commit}, {name, value}={}) {
    //console.log("I am update", name, value)
    let data = Ti.Types.toObjByPair({name, value})

    // Check Necessary
    if(_.isMatchWith(state.meta, data, _.isEqual)) {
      return
    }

    // Do the update
    commit("setStatus", {saving:true})
    commit("setFieldStatus", {name, status:"spinning"})
    let json = JSON.stringify(data)
    let oid = state.meta.id
    let cmdText = `obj 'id:${oid}' -ocqn -u`
    let newMeta = await Wn.Sys.exec2(cmdText, {input:json, as:"json"})

    commit("setMeta", newMeta)
    commit("clearFieldStatus", name)
    commit("setStatus", {saving:false})

    return newMeta
  },
  //--------------------------------------------
  /***
   * Get obj by ID
   */
  async loadMetaById({dispatch}, id) {
    dispatch("loadMeta", `id:${id}`)
  },
  //--------------------------------------------
  /***
   * Get obj meta by path string
   */
  async loadMeta({state, commit}, str){
    // If wihtout ID reset
    if(!str) {
      commit("reset")
    }
    // Load from server
    else {
      commit("setStatus", {reloading:true})
      let meta = await Wn.Io.loadMeta(str)
      commit("setMeta", meta)
      commit("setStatus", {reloading:false})
    }
  },
  //--------------------------------------------
  /***
   * Get obj ancestors by meta
   */
  async loadAncestors({state, commit}, meta=state.meta) {
    commit("setStatus", {reloading:true})
    let ancestors = await Wn.Io.loadAncestors("id:"+meta.id)
    let parent = _.last(ancestors)
    commit("setMeta", meta)
    commit("setParent", parent)
    commit("setAncestors", ancestors)
    commit("setStatus", {reloading:false})
  },
  //--------------------------------------------
  /***
   * Load obj meta/ancestors/children/content
   * 
   * @param str{String|Object} : string as the path,
   *        object is the meta
   */
  async reload({state, dispatch}, str) {
    if(_.isString(str)) {
      await dispatch("loadMeta", str)
      await dispatch("loadAncestors")
    }
    // Object as the meta object
    else if(_.isPlainObject(str)) {
      await dispatch("loadAncestors", str)
    }
    // return the curent meta anyway
    return state.meta
  }
  //--------------------------------------------
}
Ti.Preload("ti/mod/wn/obj-meta/m-obj-meta-actions.mjs", _M);
})();
//============================================================
// JOIN: wn/obj-meta/m-obj-meta.json
//============================================================
Ti.Preload("ti/mod/wn/obj-meta/m-obj-meta.json", {
  "ancestors" : [], 
  "parent" : null, 
  "meta": null,
  "status" : {
    "changed"   : false,
    "saving"    : false,
    "reloading" : false
  },
  "fieldStatus" : {}
});
//============================================================
// JOIN: wn/obj-meta/m-obj-meta.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////////
  getters : {
    //-------------------------------------------
    get(state){return state},
    //-------------------------------------------
    getHome(state) {
      let obj = state.meta
      let ans = state.ancestors
      if(!_.isEmpty(ans)) {
        // for /home/xiaobai
        if(1 == ans.length) {
          if("home" == ans[0].nm) {
            return obj
          }
        }
        // for /home/xiaobai/path/to/file
        if("home" == ans[0].nm) {
          return ans[1]
        }
      }
      // for /root
      else if(obj && "root" == obj.nm) {
        return obj
      }
      // Dont't known how to find the home
      return null
    },
    //-------------------------------------------
    hasParent (state) {
      // console.log(state.ancestors)
      // console.log(state.parent)
      return state.parent ? true : false
    },
    //-------------------------------------------
    parentIsHome(state) {
      if(!_.isEmpty(state.ancestors) && state.parent && state.meta) {
        if(/^\/home\//.test(state.meta.ph)) {
          return state.parent.pid == state.ancestors[0].id
        }
      }
      return false
    },
    //-------------------------------------------
    isHome (state) {
      if(!_.isEmpty(state.ancestors) && state.meta) {
        if(/^\/home\//.test(state.meta.ph)) {
          return state.meta.pid == state.ancestors[0].id
        }
      }
      return false
    }
    //-------------------------------------------
  },
  ////////////////////////////////////////////////
  mutations : {
    //-------------------------------------------
    reset(state) {
      _.assign(state, {
        "ancestors" : [], 
        "parent" : null, 
        "meta": null,
        "status" : {
          "changed"   : false,
          "saving"    : false,
          "reloading" : false
        },
        "fieldStatus" : {}
      })
    },
    //-------------------------------------------
    setAncestors(state, ancestors=[]) {
      state.ancestors = _.concat(ancestors)
    },
    //-------------------------------------------
    setParent(state, parent) {
      state.parent = parent
    },
    //-------------------------------------------
    setMeta(state, meta) {
      state.meta = meta
    },
    //------------------------------------------
    setFieldStatus(state, {name, message, status}={}) {
      if(name){
        let st = status ? {status, message} : null
        let ukey = _.concat(name).join("-")
        Vue.set(state.fieldStatus, ukey, st)
      }
    },
    //------------------------------------------
    clearFieldStatus(state, names=[]) {
      // Clean All
      if(_.isEmpty(names)) {
        state.fieldStatus = {}
      }
      // Clear one
      else {
        state.fieldStatus = _.omit(state.fieldStatus, names)
      }
    },
    //------------------------------------------
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    }
    //-------------------------------------------
  }
  ////////////////////////////////////////////////
}
Ti.Preload("ti/mod/wn/obj-meta/m-obj-meta.mjs", _M);
})();
//============================================================
// JOIN: wn/obj-meta/_mod.json
//============================================================
Ti.Preload("ti/mod/wn/obj-meta/_mod.json", {
  "state" : "./m-obj-meta.json",
  "actions" : "./m-obj-meta-actions.mjs",
  "mixins" : "./m-obj-meta.mjs"
});
//============================================================
// JOIN: wn/session/m-session.json
//============================================================
Ti.Preload("ti/mod/wn/session/m-session.json", {
  "id"     : null,
  "grp"    : null,
  "du"     : -1,
  "expi"   : 0,
  "pwd"    : "~",
  "ticket" : null,
  "uid"    : null,
  "unm"    : null,
  "me"     : null,
  "envs"   : {}
});
//============================================================
// JOIN: wn/session/m-session.mjs
//============================================================
(function(){
////////////////////////////////////////////////
const _M = {
  getters : {
    get(state){return state}
  },
  ////////////////////////////////////////////////
  mutations : {
    set(state, session={}) {
      state.id     = session.id;
      state.grp    = session.grp;
      state.du     = session.du;
      state.expi   = session.expi;
      state.pwd    = session.pwd;
      state.ticket = session.ticket;
      state.uid    = session.uid;
      state.unm    = session.unm;
      state.me     = session.me;
      state.envs   = _.cloneDeep(session.envs);
    }
  },
  ////////////////////////////////////////////////
  actions : {
    reload() {
      // TODO 这里需要想想，如何刷新会话，得到新票据的问题
      _.delay(()=>{
        console.log("hahah")
      }, 1000)
    }
  }
  ////////////////////////////////////////////////
}
////////////////////////////////////////////////
Ti.Preload("ti/mod/wn/session/m-session.mjs", _M);
})();
//============================================================
// JOIN: wn/session/_mod.json
//============================================================
Ti.Preload("ti/mod/wn/session/_mod.json", {
  "state" : "./m-session.json",
  "mixins" : ["./m-session.mjs"]
});
//============================================================
// JOIN: wn/thing/m-thing-actions.mjs
//============================================================
(function(){
const _M = {
  //--------------------------------------------
  /***
   * Save current thing detail
   */
  async saveCurrent({commit, dispatch}) {
    commit("setStatus", {saving:true})
    await dispatch("current/save")
    commit("setStatus", {saving:false})
    commit("syncStatusChanged")
  },
  //--------------------------------------------
  /***
   * Update current thing meta data to search/meta
   */
  async updateCurrent({state, commit, dispatch, getters}, {name, value}={}) {
    // console.log("hupdateCurrentahah", {name, value})
    // if(window.lastMS && (Date.now() - window.lastMS) < 5000) {
    //   console.log("!!!! dup-call", {name, value})
    // }
    // window.lastMS = Date.now()
    if(getters.hasCurrent) {
      await dispatch("current/updateMeta", {name,value})
      commit("search/updateItem", state.current.meta)
    }
  },
  //--------------------------------------------
  async updateCurrentMetas({state, commit, dispatch, getters}, data={}) {
    if(getters.hasCurrent) {
      //console.log({name, value})
      await dispatch("current/updateMetas", data)
      commit("search/updateItem", state.current.meta)
    }
  },
  //--------------------------------------------
  async batchUpdateMetas({state, commit, getters}, updates={}){
    let checkedItems = getters["search/checkedItems"]
    // Guard
    if(_.isEmpty(checkedItems) || _.isEmpty(updates)) {
      return
    }

    // Mark loading
    commit("setStatus", {reloading:true})

    // Gen commands
    let currentId = _.get(state.current, "meta.id")
    let input = JSON.stringify(updates)
    let tsId = state.meta.id
    for(let it of checkedItems) {
      let cmdText = `thing ${tsId} update ${it.id} -fields -cqn`
      let newIt = await Wn.Sys.exec2(cmdText, {as:"json", input})
      commit("search/updateItem", newIt)
      if(newIt.id == currentId) {
        commit("current/setMeta", newIt)
      }
    }

    // Mark loading
    commit("setStatus", {reloading:false})
  },
  //--------------------------------------------
  setCurrentMeta({state, commit}, meta) {
    //console.log(" -> setCurrentMeta", meta)
    commit("current/setMeta", meta)
    commit("syncStatusChanged")
    commit("search/updateItem", state.current.meta)
  },
  //--------------------------------------------
  setCurrentContent({state, commit, dispatch}, content) {
    dispatch("current/onChanged", content)
    commit("syncStatusChanged")
    commit("search/updateItem", state.current.meta)
  },
  //--------------------------------------------
  /***
   * Files: sync the file count and update to search/meta
   */
  async autoSyncCurrentFilesCount({state, commit, dispatch}, {quiet=true}={}) {
    let oTh = state.current.meta
    let dirName = state.currentDataDir
    // Guard
    if(!dirName) {
      console.warn("thing file -ufc without 'dirName'");
      return Ti.Toast.Open("thing file -ufc without 'dirName'")
    }
    // sync current media count
    if(oTh && oTh.id && dirName) {
      commit("setStatus", {reloading:true})

      // run command
      let th_set = oTh.th_set
      let cmdText = `thing ${th_set} file ${oTh.id} -dir '${dirName}' -ufc -cqn`
      let oNew = await Wn.Sys.exec2(cmdText, {as:"json"})
      // Set current meta
      dispatch("setCurrentMeta", oNew)

      commit("setStatus", {reloading:false})

      if(!quiet) {
        await Ti.Toast.Open('i18n:wn-th-recount-media-done', {
          vars: {n: oNew.th_media_nb||0}
        })
      }
    }
  },
  //--------------------------------------------
  /***
   * Toggle enter/outer RecycleBin
   */
  async toggleInRecycleBin({state, commit, dispatch, getters}) {
    //console.log("thing-manager-toggleInRecycleBin")
    // Update Search
    let inRecycleBin = !getters.isInRecycleBin
    commit("search/setInRecycleBin", inRecycleBin)

    // Update status
    commit("setStatus", {inRecycleBin, reloading:true})
    // Reload List
    await dispatch("search/reload")

    commit("setStatus", {reloading:false})
  },
  //--------------------------------------------
  /***
   * Create one new thing
   */
  async create({state, commit, dispatch}, obj={}) {
    // Special setting for create
    let beCreate = _.get(state.config, "schema.behavior.create") || {}
    let {unique,after,fixed} = beCreate

    // Prepare the command
    let json = JSON.stringify(obj)
    let th_set = state.meta.id
    let cmds = [`thing ${th_set} create -cqn -fields`]

    // Join `-unique`
    if(!_.isEmpty(unique) && _.isString(unique)) {
      cmds.push(` -unique '${unique}'`)
    }

    // Join `-fixed`
    if(!_.isEmpty(fixed) && _.isString(unique)) {
      cmds.push(` -fixed '${JSON.stringify(fixed)}'`)
    }

    // Join `-after`
    if(!_.isEmpty(after) && _.isString(after)) {
      cmds.push(` -after '${after}'`)
    }

    // Mark reloading
    commit("setStatus", {reloading:true})

    // Do Create
    let cmdText = cmds.join(" ")
    let newMeta = await Wn.Sys.exec2(cmdText, {input:json, as:"json"})

    if(newMeta && !(newMeta instanceof Error)) {
      // Append To Search List as the first 
      commit("search/prependToList", newMeta)
      
      // Set it as current
      await dispatch("setCurrentThing", {meta:newMeta})
    }

    // Mark reloading
    commit("setStatus", {reloading:false})

    // Return the new object
    return newMeta
  },
  //--------------------------------------------
  /***
   * Search: Remove Checked Items
   */
  async removeChecked({state, commit, dispatch, getters}, hard=false) {
    let ids = _.cloneDeep(state.search.checkedIds)
    if(_.isEmpty(ids)) {
      return await Ti.Alert('i18n:del-none')
    }

    // Config is hard
    let beh = _.get(state, "config.schema.behavior") || {}
    hard |= beh.hardRemove

    commit("setStatus", {deleting:true})

    // Prepare the ids which fail to remove
    let failIds = {}

    // Prepare the cmds
    let th_set = state.meta.id
    let cmdText = `thing ${th_set} delete ${hard?"-hard":""} -cqn -l ${ids.join(" ")}`
    let reo = await Wn.Sys.exec2(cmdText, {
      as:"json",
      errorAs: ({data})=>{
        let id = _.trim(data)
        failIds[id] = true
      }
    })

    // Get the removeIds
    let removeIds = _.filter(ids, id => !failIds[id])
    console.log("removeIds:", removeIds)

    // Remove it from search list
    if(!_.isEmpty(removeIds)) {
      commit("search/removeItems", removeIds)
    }
    let current = getters["search/currentItem"]
    //console.log("getback current", current)
    // Update current
    await dispatch("setCurrentThing", {meta:current})

    commit("setStatus", {deleting:false})
  },
  //--------------------------------------------
  /***
   * RecycleBin: restore
   */
  async restoreRecycleBin({state, commit, dispatch, getters}) {
    // Require user to select some things at first
    let ids = state.search.checkedIds
    if(_.isEmpty(ids)) {
      return await Ti.Alert('i18n:thing-restore-none')
    }
    commit("setStatus", {restoring:true})

    // Run command
    let th_set = state.meta.id
    let cmdText = `thing ${th_set} restore -quiet -cqn -l ${ids.join(" ")}`
    let reo = await Wn.Sys.exec2(cmdText, {as:"json"})

    // Reload
    await dispatch("search/reload")

    // Get back current
    let current = getters["search/currentItem"]
    
    // Update current
    await dispatch("current/reload", current)

    commit("setStatus", {restoring:false})
  },
  //--------------------------------------------
  /***
   * RecycleBin: clean
   */
  async cleanRecycleBin({state, commit, dispatch}) {
    commit("setStatus", {cleaning:true})

    // Run command
    let th_set = state.meta.id
    let cmdText = `thing ${th_set} clean -limit 3000`
    await Wn.Sys.exec2(cmdText)

    commit("setStatus", {cleaning:false})

    await dispatch("reload")
  },
  //--------------------------------------------
  // User Interactivity
  //--------------------------------------------
  /***
   * Open meta editor, if has current, use it
   */
  async openMetaEditor({state, getters, dispatch}) {
    // Guard
    if(!state.meta) {
      return await Ti.Toast.Open("i18n:empty-data", "warn")
    }
    //.........................................
    // For current selected
    //.........................................
    if(getters.hasCurrent) {
      // Edit current meta
      let reo = await Wn.EditObjMeta(state.current.meta, {
        fields:"default", autoSave:false
      })

      // Cancel the editing
      if(_.isUndefined(reo)) {
        return
      }

      // Update the current editing
      let {updates} = reo
      if(!_.isEmpty(updates)) {
        await dispatch("updateCurrentMetas", updates)
      }
      return
    }
    //.........................................
    // For Whole thing thing
    //.........................................
    await Wn.EditObjMeta(state.meta, {
      fields:"auto", autoSave:true
    })
  },
  //--------------------------------------------
  /***
   * Open current object source editor
   */
  async openContentEditor({state, getters, dispatch}) {
    // Guard
    if(!state.meta) {
      return await Ti.Toast.Open("i18n:empty-data", "warn")
    }
    if(getters.hasCurrent) {
      // Open Editor
      let newContent = await Wn.EditObjContent(state.current.meta, {
        content : state.current.content
      })

      // Cancel the editing
      if(_.isUndefined(newContent)) {
        return
      }

      // Update the current editing
      await dispatch("current/changeContent", newContent)
      return
    }

    // Warn user
    return await Ti.Toast.Open("i18n:nil-obj", "warn")
  },
  //--------------------------------------------
  /***
   * Reload files
   */
  async reloadFiles({state,commit,dispatch, getters}, {force=false}={}) {
    //console.log("reloadFiles")
    let current = _.get(state.current, "meta")
    let thingId = _.get(current, "id")
    let dirName = state.filesName
    // No current
    if(!thingId || !dirName) {
      commit("files/reset")
    }
    // Reload the files
    else {
      let thSetId = state.meta.id
      // get the parent DIR
      let oDir = state.files.meta
      if(!oDir || !oDir.ph || !oDir.ph.endsWith(`/data/${thingId}/${dirName}`)) {
        let dataHome = `id:${thSetId}/data`
        let dirPath = `${thingId}/${dirName}`
        // Create or fetch the dir
        let newMeta = {
          race : "DIR",
          nm   : dirPath
        }
        let json = JSON.stringify(newMeta)
        let cmdText = `obj "${dataHome}" -IfNoExists -new '${json}' -cqno`
        oDir = await Wn.Sys.exec2(cmdText, {as:"json"})
        if(!oDir) {
          return 
        }
      } // ~ if(!oDir || !oDir.ph
      // Try to reload the children
      await dispatch("files/reload", oDir)
      // let cuId = getters["files/autoCurrentItemId"]
      // //commit("files/selectItem", cuId)
      // dispatch("selectCurrentPreviewItem", cuId)
    }
  },
  //--------------------------------------------
  /***
   * Reload search list
   */
  async reloadSearch({state, commit, dispatch}) {
    let meta = state.meta

    commit("setStatus", {reloading:true})

    await dispatch("search/reload", meta)

    // Sometimes, current object will not in the list
    // we need remove it
    if(state.current.meta) {
      // find new meta
      let currentId = state.current.meta.id
      let current = null
      for(let it of state.search.list) {
        if(it.id == currentId) {
          current = it
          break
        }
      }
      // Update the meta
      await dispatch("setCurrentThing", {meta : current})
    }

    commit("setStatus", {reloading:false})
  },
  //--------------------------------------------
  /***
   * Set Current Thing
   * 
   * It will load content if "content" is shown
   */
  async setCurrentThing({state, commit, dispatch}, {
    meta=null, 
    checkedIds={}
  }={}) {
    //..........................................
    // Update selected item in search list
    let curId = meta ? meta.id : null
    let ckIds = Ti.Util.truthyKeys(checkedIds)
    if(!Ti.Util.isNil(curId)) {
      ckIds.push(curId)
    }
    commit("search/setCurrentId", curId)
    commit("search/setCheckedIds", ckIds)
    //..........................................
    // Update the currentDataHome
    let home = state.meta
    let dataHome = curId ? `id:${home.id}/data/${curId}` : null
    commit("setCurrentDataHome", dataHome)

    // Try get current dataHomeObj
    let dataHomeObj = await Wn.Io.loadMeta(dataHome)
    commit("setCurrentDataHomeObj", dataHomeObj)

    //..........................................
    // Keep last
    let lastKey = `${home.id}:currentId`
    if(!_.get(state.config.schema, "keepLastOff")) {
      Ti.Storage.session.set(lastKey, curId);
    }
    // Clean local storage
    else {
      Ti.Storage.session.remove(lastKey);
    }
    //..........................................
    // Reload Current
    await dispatch("current/reload", meta)
    //..........................................
  },
  //--------------------------------------------
  /***
   * Do Change Block Shown:
   * 
   * If show content/files, it may check if need to be reload data
   */
  async doChangeShown({state, commit, dispatch}, shown) {
    // Just mark the shown
    dispatch("config/updateShown", shown)
  },
  //--------------------------------------------
  /***
   * Reload All
   */
  async reload({state, commit, dispatch}, meta) {
    //console.log("thing-manager.reload", state)
    // Update New Meta
    if(meta) {
      commit("setMeta", meta)
    }
    // Get meta back
    else {
      meta = state.meta
    }
    // meta is home
    let home = meta

    // Mark reloading
    commit("setStatus", {reloading:true})

    // Reload Config
    //console.log("reload config")
    await dispatch("config/reload", meta)

    // Load local status
    let local = Ti.Storage.session.getObject(meta.id) || {}
    _.defaults(local, {
      filter: {},
      sorter: {},
      pager: {}
    })
    
    // Setup default filter and sorter
    let filter = _.get(state.config.schema, "behavior.filter") || {}
    filter = _.assign({}, filter, local.filter)
    if(!_.isEmpty(filter)) {
      commit("search/setFilter", filter)
    }
    // Sorter
    let sorter = _.get(state.config.schema, "behavior.sorter") || {}
    if(!_.isEmpty(local.sorter)) {
      commit("search/setSorter", local.sorter)
    }
    else if(!_.isEmpty(sorter)) {
      commit("search/setSorter", sorter)
    }

    // Pager
    if(!_.isEmpty(local.pager)) {
      commit("search/setPager", local.pager)
    }

    // Reload Search
    //console.log("reload search")
    await dispatch("reloadSearch")

    // Auto Select the first item
    if(_.get(state, "meta.th_auto_select")) {
      if(!state.current.meta && !_.isEmpty(state.search.list)) {
        // Get last
        let lastKey = `${home.id}:currentId`
        let curId = Ti.Storage.session.getString(lastKey);
        let current;

        // Find by id
        if(curId)
          current = _.find(state.search.list, li=>li.id == curId)

        // use the first one
        if(!current)
          current = _.first(state.search.list)
        
        // Highlight it
        await dispatch("setCurrentThing", {
          meta : current, 
          force : false
        })
      }
    }

    // All done
    commit("setStatus", {reloading:false})
  }
  //--------------------------------------------
}
Ti.Preload("ti/mod/wn/thing/m-thing-actions.mjs", _M);
})();
//============================================================
// JOIN: wn/thing/m-thing.json
//============================================================
Ti.Preload("ti/mod/wn/thing/m-thing.json", {
  "meta": null,
  "currentDataDir"  : "media",
  "currentDataHome" : null,
  "currentDataHomeObj" : null,
  "status" : {
    "reloading" : false,
    "doing"     : false,
    "saving"    : false,
    "deleting"  : false,
    "changed"   : false,
    "restoring" : false,
    "cleaning"  : false,
    "inRecycleBin" : false
  }
});
//============================================================
// JOIN: wn/thing/m-thing.mjs
//============================================================
(function(){
//---------------------------------------
const _M = {
  ////////////////////////////////////////////
  getters : {
    hasCurrent(state) {
      return state.current && state.current.meta
    },
    isInRecycleBin(state) {
      return state.search.inRecycleBin
    }
  },
  ////////////////////////////////////////////
  mutations : {
    setMeta(state, meta) {
      state.meta = meta
    },
    setCurrentDataDir(state, dirName) {
      state.currentDataDir = dirName
    },
    setCurrentDataHome(state, dataHome) {
      state.currentDataHome = dataHome
    },
    setCurrentDataHomeObj(state, dataHomeObj) {
      state.currentDataHomeObj = _.cloneDeep(dataHomeObj)
    },
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    },
    syncStatusChanged(state){
      if(state.current) {
        //console.log("do sync")
        state.status.changed = state.current.status.changed
      }
    }
  }
  ////////////////////////////////////////////
}
Ti.Preload("ti/mod/wn/thing/m-thing.mjs", _M);
})();
//============================================================
// JOIN: wn/thing/mod/config/m-thing-config-actions.mjs
//============================================================
(function(){
// Ti required(Wn)
////////////////////////////////////////////////
const _M = {
  //----------------------------------------
  updateShown({commit}, shown) {
    commit("mergeShown", shown)
    commit("persistShown")
  },
  //----------------------------------------
  async reloadSchema({state, commit}) {
    //console.log("reloadSchema")
    let aph  = `id:${state.meta.id}/thing-schema.json`
    let obj  = await Wn.Io.loadMeta(aph)
    let schema = await Wn.Io.loadContent(obj, {as:"json"})

    // Load extends methods
    if(schema.methods) {
      let methods = await Ti.Load(schema.methods)
      if(!_.isArray(methods)) {
        methods = [methods]
      }
      schema.methods = methods
    }
    //console.log("setSchema", schema)
    commit("setSchema", schema)
    return schema
  },
  //----------------------------------------
  async reloadLayout({state, commit}) {
    //console.log("reloadLayout")
    let aph  = `id:${state.meta.id}/thing-layout.json`
    let obj  = await Wn.Io.loadMeta(aph)
    let json = await Wn.Io.loadContent(obj, {as:"json"})

    //console.log("setLayout", json)
    commit("setLayout", json)

    // Load shown from local before reload config
    commit("restoreShown")

    return json
  },
  //----------------------------------------
  async reloadActions({state, commit}) {
    // console.log("reloadActions")
    let aph  = `id:${state.meta.id}/thing-actions.json`
    let obj  = await Wn.Io.loadMeta(aph)
    let json = await Wn.Io.loadContent(obj, {as:"json"})
    //console.log("setActions", json)
    commit("setActions", json)
    return json
  },
  //----------------------------------------
  async reload({state, commit, dispatch}, meta) {
    //console.log("thing-manager-config.reload", state)
    // Update New Meta
    if(meta) {
      commit("setMeta", meta)
    }
    // Get meta back
    else {
      meta = state.meta
    }
    // Mark reloading
    commit("setStatus", {reloading:true})

    await dispatch("reloadSchema")
    await dispatch("reloadLayout")
    await dispatch("reloadActions")

    // All done
    commit("setStatus", {reloading:false})
  }
  //----------------------------------------
}
Ti.Preload("ti/mod/wn/thing/mod/config/m-thing-config-actions.mjs", _M);
})();
//============================================================
// JOIN: wn/thing/mod/config/m-thing-config.json
//============================================================
Ti.Preload("ti/mod/wn/thing/mod/config/m-thing-config.json", {
  "meta": null,
  "shown" : {
    "search"  : true,
    "meta"    : true,
    "content" : true,
    "files"   : false
  },
  "listOpen" : {
    "content" : true
  },
  "schema": {},
  "layout" : {
    "deskstop" : {},
    "tablet" : {},
    "phone" : {}
  },
  "actions" : [],
  "status" : {
    "reloading" : false,
    "saving"    : false
  }
});
//============================================================
// JOIN: wn/thing/mod/config/m-thing-config.mjs
//============================================================
(function(){
//---------------------------------------
const _M = {
  ////////////////////////////////////////////
  mutations : {
    setMeta(state, meta) {
      state.meta = meta
    },
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    },
    setSchema(state, schema) {
      state.schema = schema
    },
    setLayout(state, layout) {
      state.layout = _.pick(layout, ["desktop","tablet","phone"])
      state.shown = layout.shown || {}
      state.listOpen = layout.listOpen || {}
    },
    setActions(state, actions) {
      state.actions = actions
    },
    mergeShown(state, shown) {
      if(shown && !_.isEmpty(shown)) {
        state.shown = _.assign({}, state.shown, shown)
      }
    },
    persistShown(state) {
      if(state.meta && state.meta.id) {
        Ti.Storage.session.setObject(`${state.meta.id}-shown`, state.shown)
      }
    },
    restoreShown(state) {
      if(state.meta && state.meta.id) {
        let shown = Ti.Storage.session.getObject(`${state.meta.id}-shown`)
        state.shown = _.assign({}, state.shown, shown)
      }
    }
  }
  ////////////////////////////////////////////
}
Ti.Preload("ti/mod/wn/thing/mod/config/m-thing-config.mjs", _M);
})();
//============================================================
// JOIN: wn/thing/mod/config/_mod.json
//============================================================
Ti.Preload("ti/mod/wn/thing/mod/config/_mod.json", {
  "namespaced" : true,
  "state" : "./m-thing-config.json",
  "actions" : "./m-thing-config-actions.mjs",
  "mixins" : "./m-thing-config.mjs"
});
//============================================================
// JOIN: wn/thing/mod/search/m-thing-search-actions.mjs
//============================================================
(function(){
// Ti required(Wn)
////////////////////////////////////////////////
const _M = {
  //--------------------------------------------
  async reloadPage({state, commit, dispatch}, pg) {
    commit("updatePager", pg)
    await dispatch("reload")
  },
  //--------------------------------------------
  async reload({state, commit, rootState}, meta) {
    //console.log("thing-manager-search.reload", meta)
    //............................................
    // Update New Meta
    if(meta) {
      commit("setMeta", meta)
    }
    // Get meta back
    else {
      meta = state.meta
    }
    //............................................
    // Mark reloading
    commit("setStatus", {reloading:true})
    //............................................
    let cmds = [`thing id:${meta.id} query -pager -cqn`]
    
    let {keyword, match} = state.filter || {}
    let flt = {}
    //............................................
    // Eval Filter: keyword
    if(keyword) {
      if(/^[0-9a-z]{32}$/.test(keyword)) {
        flt.id = keyword
      }
      // Find
      else {
        let knm = "title"
        let beh = _.get(rootState, "main.config.schema.behavior") || {}
        let keys = _.keys(beh.keyword)
        //........................................
        for(let k of keys) {
          let val = beh.keyword[k]
          if(new RegExp(val).test(keyword)) {
            knm = k;
            break;
          }
        }
        //........................................
        // Accurate equal
        if(knm.startsWith("=")) {
          flt[knm.substring(1).trim()] = keyword
        }
        // Default is like
        else {
          flt[knm] = "^.*"+keyword;
        }
        //........................................
      }
    }
    // Eval Filter: match
    if(!_.isEmpty(match)) {
      _.assign(flt, match)
    }
    // InRecycleBin 
    flt.th_live = state.inRecycleBin ? -1 : 1

    //............................................
    // Eval Sorter
    if(!_.isEmpty(state.sorter)) {
      let sort = JSON.stringify(state.sorter)
      cmds.push(`-sort '${sort}'`)
    }
    //............................................
    // Eval Pager
    let pg = state.pager
    if(!_.isEmpty(pg) && pg.pgsz > 0 && pg.pn > 0) {
      let limit = pg.pgsz
      let skip  = pg.pgsz * (pg.pn - 1)
      cmds.push(`-limit ${limit}`)
      cmds.push(`-skip  ${skip}`)
    }
    
    //............................................
    // Run Command
    let input = _.isEmpty(flt) ? undefined : JSON.stringify(flt)
    let cmdText = cmds.join(" ")
    let reo = await Wn.Sys.exec2(cmdText, {input, as:"json"})
    //............................................
    // All done
    commit("setPager", reo.pager)
    commit("setList", reo.list)
    commit("setStatus", {reloading:false})
  }
  //--------------------------------------------
}
Ti.Preload("ti/mod/wn/thing/mod/search/m-thing-search-actions.mjs", _M);
})();
//============================================================
// JOIN: wn/thing/mod/search/m-thing-search.json
//============================================================
Ti.Preload("ti/mod/wn/thing/mod/search/m-thing-search.json", {
  "meta": null,
  "filter" : {},
  "sorter" : {
    "ct" : -1
  },
  "inRecycleBin" : false,
  "pager" : {
    "pn"   : 1,
    "pgsz" : 50,
    "pgc"  : 0,
    "sum"  : 0,
    "skip" : 0,
    "count": 0
  },
  "currentId" : null,
  "checkedIds" : [],
  "list" : [],
  "status" : {
    "reloading" : false,
    "saving"    : false,
    "deleting"  : false
  }
});
//============================================================
// JOIN: wn/thing/mod/search/m-thing-search.mjs
//============================================================
(function(){
function saveToLocal(meta, key, val) {
  if(!meta) {
    return
  }
  //console.log("saveToLocal", key, val)
  let local = Ti.Storage.session.getObject(meta.id) || {}
  _.defaults(local, {
    filter: {},
    sorter: {},
    pager: {}
  })
  local[key] = val
  Ti.Storage.session.setObject(meta.id, local)
}
//---------------------------------------
const _M = {
  ///////////////////////////////////////////////////////
  getters : {
    //---------------------------------------------------
    currentItem(state) {
      if(state.currentId) {
        for(let it of state.list) {
          if(it.id == state.currentId) {
            return it
          }
        }
      }
      return null
    },
    //---------------------------------------------------
    checkedItems(state) {
      // Make the idsMap
      let checkedMap = {}
      for(let id of state.checkedIds) {
        checkedMap[id] = true
      }
      // Join the items
      let list = []
      for(let it of state.list) {
        if(checkedMap[it.id]) {
          list.push(it)
        }
      }
      // done
      return list
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  mutations : {
    setMeta(state, meta) {
      state.meta = meta
    },
    //---------------------------------------------------
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    },
    //---------------------------------------------------
    setFilter(state, filter={}) {
      state.filter = filter
      saveToLocal(state.meta, "filter", state.filter)
    },
    updateFilter(state, flt={}) {
      //console.log("updateFilter", JSON.stringify(flt))
      state.filter = _.assign({}, state.filter, flt)
      saveToLocal(state.meta, "filter", state.filter)
    },
    setSorter(state, sorter) {
      state.sorter = sorter
      saveToLocal(state.meta, "sorter", state.sorter)
    },
    //---------------------------------------------------
    setPager(state, pager) {
      state.pager = pager
      saveToLocal(state.meta, "pager", state.pager)
    },
    updatePager(state, pg) {
      state.pager = _.defaults({}, pg, state.pager)
    },
    //---------------------------------------------------
    setInRecycleBin(state, inRecycleBin=false) {
      state.inRecycleBin = inRecycleBin
    },
    //---------------------------------------------------
    setList(state, list) {
      state.list = list
    },
    //---------------------------------------------------
    setCurrentId(state, id) {
      state.currentId = id || null
    },
    //---------------------------------------------------
    setCheckedIds(state, ids=[]) {
      state.checkedIds = _.union(ids)
    },
    //---------------------------------------------------
    selectItem(state, id) {
      if(state.currentId != id) {
        state.currentId = id
        state.checkedIds = []
        if(id) {
          state.checkedIds.push(id)
        }
      }
    },
    //---------------------------------------------------
    removeItems(state, ids=[]) {
      // Find the current item index, and take as the next Item index
      //console.log("search.remove", ids)
      let index = -1
      if(state.currentId) {
        for(let i=0; i<state.list.length; i++) {
          let it = state.list[i]
          if(it.id == state.currentId) {
            index = i
            break
          }
        }
      }
      // Make the idsMap
      let idsMap = {}
      if(_.isArray(ids)) {
        for(let id of ids) {
          idsMap[id] = true
        }
      } else if (_.isPlainObject(ids)){
        idsMap = ids
      }
      // Remove the ids
      let list2 = []
      for(let it of state.list) {
        if(!idsMap[it.id]) {
          list2.push(it)
        }
      }
      // Then get back the current
      index = Math.min(index, list2.length-1)
      let nextCurrent = null
      if(index >= 0) {
        nextCurrent = list2[index]
        state.currentId = nextCurrent.id
        state.checkedIds = [nextCurrent.id]
      }
      // No currentId
      else {
        state.currentId  = null
        state.checkedIds = []
      }
      // Reset the list
      state.list = list2
      if(state.pager) {
        state.pager.count = list2.length
        state.pager.sum = state.pager.pgsz * (state.pager.pgc-1) + list2.length
      }
      // console.log("the next current", nextCurrent)
    },
    //---------------------------------------------------
    updateItem(state, it) {
      let list = []
      for(let li of state.list) {
        if(li.id == it.id) {
          list.push({...it, __updated_time:Date.now()})
        } else {
          list.push(li)
        }
      }
      state.list = list
    },
    //---------------------------------------------------
    appendToList(state, it) {
      if(it) {
        state.list = [].concat(state.list, it)
      }
    },
    //---------------------------------------------------
    prependToList(state, it) {
      if(it) {
        state.list = [].concat(it, state.list)
      }
    }
    //---------------------------------------------------
  }
  ///////////////////////////////////////////////////////
}
Ti.Preload("ti/mod/wn/thing/mod/search/m-thing-search.mjs", _M);
})();
//============================================================
// JOIN: wn/thing/mod/search/_mod.json
//============================================================
Ti.Preload("ti/mod/wn/thing/mod/search/_mod.json", {
  "namespaced" : true,
  "state" : "./m-thing-search.json",
  "actions" : "./m-thing-search-actions.mjs",
  "mixins" : "./m-thing-search.mjs"
});
//============================================================
// JOIN: wn/thing/_mod.json
//============================================================
Ti.Preload("ti/mod/wn/thing/_mod.json", {
  "name" : "wn-thing",
  "namespaced" : true,
  "state" : "./m-thing.json",
  "actions" : "./m-thing-actions.mjs",
  "mixins" : "./m-thing.mjs",
  "modules" : {
    "config" : "./mod/config",
    "search" : "./mod/search",
    "current" : "@mod:wn/obj-current"
  }
});
//============================================================
// JOIN: com/site-main.html
//============================================================
Ti.Preload("ti/lib/www/com/site-main.html", `<div class="site-main">
  <ti-gui 
    class="site-page"
    v-bind="PageGUI"
    :loading-as="loading"
    :shown="page.shown"/>
  <!--pre>{{page}}</pre-->
</div>`);
//============================================================
// JOIN: com/site-main.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  provide : function() {
    return Ti.Util.explainObj(this.provide, this)
  },
  /////////////////////////////////////////
  computed : {
    ...Vuex.mapState({
        "siteId"    : state=>state.siteId,
        "logo"      : state=>state.logo,
        "utils"     : state=>state.utils,
        "page"      : state=>state.page,
        "shop"      : state=>state.shop,
        "auth"      : state=>state.auth,
        "domain"    : state=>state.domain,
        "rs"        : state=>state.rs,
        "base"      : state=>state.base,
        "apiBase"   : state=>state.apiBase,
        "cdnBase"   : state=>state.cdnBase,
        "captcha"   : state=>state.captcha,
        "schema"    : state=>state.schema,
        "provide"   : state=>state.provide,
        "blocks"    : state=>state.blocks,
        "loading"   : state=>state.loading,
        "pageReady" : state=>state.pageReady
      }),
    //-------------------------------------
    // Mapp The Getters
    ...Vuex.mapGetters([
      "actions",
      "getUrl",
      "getApiUrl"
    ]),
    ...Vuex.mapGetters("page", [
      "pageLink"
    ]),
    //-------------------------------------
    PayReturnUrl: function() {
      let st = this.$store.state
      if(st.payReturnUrl) {
        return Ti.Util.explainObj(st, st.payReturnUrl)
      }
    },
    //-------------------------------------
    SiteLogo() {
      if(this.logo && /\.(png|jpe?g)$/.test(this.logo))
        return this.getUrl(this.logo)
      return this.logo || "zmdi-globe"
    },
    //-------------------------------------
    // Page Navigation
    SiteNav() {
      let nav = {}
      _.forEach(this.$store.state.nav, (v, k)=>{
        nav[k] = Ti.WWW.explainNavigation(v, this.base)
      })
      return nav
    },
    //-------------------------------------
    // The template of captcha to prevent robot
    SiteCaptcha() {
      let path = Ti.S.renderBy(this.captcha, {site:this.siteId})
      if(path.startsWith("/"))
        return path
      return this.getApiUrl(path)
    },
    //-------------------------------------
    SiteLoginMode() {
      // Already login, then bind the phone 
      if(this.auth.me) {
        return "bind_phone"
      }
      return "login_by_passwd"
    },
    //-------------------------------------
    PageFnSet() {
      Ti.AddGlobalFuncs(this.utils)
      return Ti.GlobalFuncs()
    },
    //-------------------------------------
    // Format current pageGUI
    PageGUI() {
      let page = this.page
      //.....................................
      // Without current page
      if(!page || !page.layout) {
        return {}
      }
      //.....................................
      // Get layout be pageMode
      let layout = page.layout
      //.....................................
      // Apply "@BLOCK(xxx)" in panels and layout blocks
      if(layout) {
        // Define the methods
        const ExplainBlock = (anyValue)=>{
          // String : Check the "@BLOCK(xxx)" 
          if(_.isString(anyValue)) {
            let m = /^@BLOCK\(([^ ]+)\)$/.exec(anyValue)
            if(m) {
              let blockName = m[1]
              return _.get(this.blocks, blockName)
            }
          }
          // Array 
          else if(_.isArray(anyValue)) {
            return _.map(anyValue, ExplainBlock)  
          }
          // Object
          else if(_.isPlainObject(anyValue)) {
            return _.mapValues(anyValue, ExplainBlock)
          }
          // Others return directly
          return anyValue
        }
        // do without layout
        layout = ExplainBlock(layout)
      }
      //.....................................
      // Gen the GUI object
      let gui = {
        defaultFlex: "nil",
        defaultOverflow: "none",
        layout, 
        schema : {},
        canLoading : true
      }
     
      //.....................................
      // assign schema
      _.assign(gui.schema, this.schema, page.schema)
      
      //.....................................
      // explain it
      //console.log("site-main: explain it!", gui);
      let theGUI = Ti.Util.explainObj(this, gui, {
        fnSet: this.PageFnSet
      })
      //console.log("pageGUI", formedGUI)
      return theGUI
    }
    //-------------------------------------
  },
  /////////////////////////////////////////
  methods : {
    //--------------------------------------
    async showBlock(name) {
      Ti.App(this).dispatch("page/showBlock", name)
    },
    //--------------------------------------
    async hideBlock(name) {
      Ti.App(this).dispatch("page/hideBlock", name)
    },
    //-------------------------------------
    // Handle by EventBubble
    __on_events(name, ...args) {
      console.log("site-main.__on_events", name, ...args)
      // ShowBlock
      if("block:show" == name) {
        return blockName => this.showBlock(blockName)
      }
      // HideBlock
      else if("block:hide" == name) {
        return blockName => this.hideBlock(blockName)
      }
      // Dispatch actions
      else {
        return (...args)=>{
          this.invokeAction(name, args)
        }        
      }
    },
    //-------------------------------------
    async invokeAction(name, args=[]) {
      await Ti.App(this).dispatch("invokeAction", {
        name, args
      })
    },
    //-------------------------------------
    pushBrowserHistory() {
      let his = window.history
      //...................................
      if(!his) {
        return
      }
      //...................................
      // Get current location
      let loc = window.location
      let loPath = [loc.pathname, loc.search, loc.hash].join("")
      //...................................
      let pgLink = this.getUrl(this.pageLink)
      //...................................
      if(loPath != pgLink) {
        his.pushState(this.page, this.page.title, pgLink)
      }
      //...................................
    }
    //-------------------------------------
  },
  /////////////////////////////////////////
  watch : {
    // Page changd, update document title
    "page.finger" : function() {
      //console.log("-> ", this.page.title)
      let pageTitle = Ti.Util.explainObj(this, this.page.title)
      document.title = pageTitle
      this.pushBrowserHistory()

      // TODO : Maybe here to embed the BaiDu Tongji Code
    }
  },
  /////////////////////////////////////////
  mounted : function(){
    // Watch the browser "Forward/Backward"
    // The state(page) pushed by $store.dispath("navTo")
    window.onpopstate = (evt)=>{
      let page = evt.state
      if(page && page.path) {
        console.log("window.onpopstate", page)
        let app = Ti.App(this)
        app.dispatch("navTo", {
          type   : "page",
          value  : page.path,
          params : page.params,
          anchor : page.anchor
        })
      }
    }
  }
  /////////////////////////////////////////
}
Ti.Preload("ti/lib/www/com/site-main.mjs", _M);
})();
//============================================================
// JOIN: mod/auth/mod-address-actions.mjs
//============================================================
(function(){
const _M = {
  //--------------------------------------------
  async reloadMyAddresses({state, commit, getters}){
    let url = getters.urls.addr_mine

    commit("setLoading", true, {root:true})
    let reo = await Ti.Http.get(url, {
      params: {
        ticket: state.ticket 
      },
      as:"json"
    })
    commit("setLoading", false, {root:true})
    commit("setAddresses", reo)
  },
  //--------------------------------------------
  async editOrCreateAddress({state, getters, commit, dispatch}, addr={}) {
    console.log("openAddressEditor", addr)
    // Pick the data
    let result = _.pick(addr, 
        "id", "country", "postcode",
        "province", "city", "street", "dftaddr",
        "consignee", "phone", "email")

    // Prepare the Edit form
    let newAddr = await Ti.App.Open({
      title: "i18n:edit",
      position: "top",
      width: 640,
      height: 640,
      result: result,
      comType: "TiForm",
      comConf: {
        onlyFields: false,
        data: "=result",
        fields: [{
            "title"   : "i18n:address-k-country",
            "name"    : "country",
            "comType" : "ti-combo-input",
            "comConf" : {
              "mustInList": true,
              "autoCollapse": true,
              "valueCase": "upper",
              "dropDisplay": "name",
              "options": state.countries,
              "valueBy": "key",
              "textBy" : "name"
            }
          },{
            "title"   : "i18n:address-k-postcode",
            "name"    : "postcode",
            "comType" : "ti-input",
            "comConf" : {
              "valueCase": "upper"
            }
          },{
            "title"   : "i18n:address-k-city",
            "name"    : "city",
            "comType" : "ti-input"
          },{
            "title"   : "i18n:address-k-street",
            "name"    : "street",
            "comType" : "ti-input"
          },{
            "title"   : "i18n:address-k-dftaddr",
            "name"    : "dftaddr",
            "type"    : "Boolean",
            "comType" : "ti-toggle"
          },{
            "title"   : "i18n:address-k-consignee",
            "name"    : "consignee",
            "comType" : "ti-input"
          },{
            "title"   : "i18n:address-k-phone",
            "name"    : "phone",
            "comType" : "ti-input"
          },{
            "title"   : "i18n:address-k-email",
            "name"    : "email",
            "comType" : "ti-input"
          }]
      }
    })
    // User cancel
    if(_.isUndefined(newAddr)) {
      return
    }

    // No change
    if(_.isEqual(newAddr, result)) {
      return
    }

    console.log("!!!", newAddr)
    // Eval the url
    let url;
    // Create
    if(!newAddr.id) {
      url = getters.urls.addr_create
    }
    // Update
    else {
      url = getters.urls.addr_update
    }

    // Prepare http options
    let params = {
      ticket: state.ticket,
      id: newAddr.id
    }
    let body = JSON.stringify(newAddr)

    commit("setLoading", true, {root:true})

    // Send request
    await Ti.Http.post(url, {
      params, body, as:"json"
    })

    // Then reload
    await dispatch("reloadMyAddresses")

    commit("setLoading", false, {root:true})
  },
  //--------------------------------------------
  async removeAddress({state, commit, getters, dispatch}, {id}={}){
    // Guard
    if(!id) {
      return
    }

    commit("setLoading", true, {root:true})

    // Process delete
    let url = getters.urls.addr_delete
    await Ti.Http.get(url, {
      params: {
        ticket: state.ticket,
        id: id
      },
      as:"json"
    })
    
    // Then reload
    await dispatch("reloadMyAddresses")

    commit("setLoading", false, {root:true})
  },
  //--------------------------------------------
  async setAddressDefault({state, commit, getters, dispatch}, {id}={}){
    // Guard
    if(!id) {
      return
    }

    // Process delete
    let url = getters.urls.addr_update
    // Prepare http options
    let params = {
      ticket: state.ticket,
      id: id
    }
    let body = JSON.stringify({dftaddr:true})

    commit("setLoading", true, {root:true})

    // Send request
    await Ti.Http.post(url, {
      params, body, as:"json"
    })
    
    // Then reload
    await dispatch("reloadMyAddresses")

    commit("setLoading", false, {root:true})
  },
  //--------------------------------------------
  async initCountries({state, getters, commit}) {
    if(!state.countries) {
      let url = getters.urls.countries
      let reo = await Ti.Http.get(url, {as:"json"})
      commit("setCountries", reo)
    }
  }
  //--------------------------------------------
}
Ti.Preload("ti/lib/www/mod/auth/mod-address-actions.mjs", _M);
})();
//============================================================
// JOIN: mod/auth/mod-auth-actions.mjs
//============================================================
(function(){
const _M = {
  //--------------------------------------------
  async doCheckMe({commit, dispatch, getters, rootState}, {
    force = false,
    ok, fail, nophone, noemail
  }={}) {
    console.log("I am doCheckMe", {force, ok, fail, nophone})
    // console.log(" -urls", getters.urls)
    // Guard SiteId
    let siteId  = rootState.siteId
    if(!siteId) {
      Ti.Alert("Without siteId!!!")
      return
    }

    // Get Back the Ticket
    let ticket = Ti.Storage.local.getString(`www-ticket-${siteId}`, "")

    // Check to remote
    commit("setLoading", true, {root:true})
    // Current Session ...
    let reo = getters.sessionState
    // Need to re-checkme from remote
    if(ticket && (force || !reo.ok)) {
      reo = await Ti.Http.get(getters.urls["checkme"], {
        params : {
          site : siteId,
          ticket 
        },
        as : "json"
      })
    }
    commit("setLoading", false, {root:true})
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    // success
    if(reo.ok) {
      console.log("checkme OK", reo)
      commit("setTicket", reo.data.ticket)
      commit("setExpi",   reo.data.expi)
      commit("setMe",     reo.data.me)

      // Check Phone
      if(nophone) {
        let me = reo.data.me
        if(!me.phone) {
          return await dispatch("doAction", [nophone,reo], {root:true})
        }
      }
      // Check Phone
      if(noemail) {
        let me = reo.data.me
        if(!me.email) {
          return await dispatch("doAction", [noemail,reo], {root:true})
        }
      }

      // Success
      if(ok) {
        return await dispatch("doAction", [ok,reo], {root:true})
      }
    }
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    // Fail
    else if(fail){
      return await dispatch("doAction", [fail,reo], {root:true})
    }
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  },
  //--------------------------------------------
  async autoCheckmeOrAuthByWxghCode({dispatch}, {
    codeKey = "code",
    codeTypeBy = "ct",
    force = false,
    fail, nophone, noemail
  }={}) {
    console.log("autoCheckmeOrAuthByWxghCode")
    dispatch("doCheckMe", {
      force,
      fail : {
        action : "auth/authByWxghCode",
        payload : {
          codeKey, codeTypeBy,
          //......................................
          fail,
          //......................................
          ok : async (reo={})=>{
            let me = reo.data
            console.log("autoCheckmeOrAuthByWxghCode->ok:me", me)
            if(nophone) {
              if(!me.phone) {
                return await dispatch("doAction", [nophone,reo], {root:true})
              }
            }
            if(noemail) {
              if(!me.email) {
                return await dispatch("doAction", [noemail,reo], {root:true})
              }
            }
          }
          //......................................
        }
      }
    })
  },
  //--------------------------------------------
  async authByWxghCode({commit, dispatch, getters, rootState}, {
    codeKey = "code",
    codeTypeBy = "ct",
    done, ok, fail, invalid, others
  }={}) {
    // Guard code
    let code = rootState.page.params[codeKey]
    if(!code) {
      return
    }

    let codeType = rootState.page.params[codeTypeBy]

    console.log("authByWxghCode", {codeType, code})

    // Guard SiteId
    let siteId = rootState.siteId
    if(!siteId) {
      Ti.Alert("Without siteId!!!")
      return
    }
    // Eval URL
    let url = getters.urls["login_by_wxcode"]

    let params = {
      site : siteId,
      code : code,
      ct   : codeType
    }

    let reo = await Ti.Http.get(url, {params, as:"json"})
    console.log(reo)

    // Callback: done
    await dispatch("doAction", [done, reo], {root:true})

    // Success
    if(reo.ok && reo.data) {
      // save ticket
      Ti.Storage.local.set(
        `www-ticket-${siteId}`,
        reo.data.ticket
      )
      // Save session info
      commit("setTicket", reo.data.ticket)
      commit("setExpi",   reo.data.expi)
      commit("setMe",     reo.data.me)
      // Callback
      await dispatch("doAction", [ok, reo], {root:true})
    }
    // Fail 
    else {
      // Fail : invalid
      if(/^e.www.login.invalid/.test(reo.errCode)) {
        await dispatch("doAction", [invalid, reo], {root:true})
      }
      // Fail : others
      else {
        await dispatch("doAction", [others, reo], {root:true})
      }
      // Callback
      await dispatch("doAction", [fail, reo], {root:true})
    }
  },
  //--------------------------------------------
  async doAuth({commit, dispatch, getters, rootState}, {
    type="login_by_passwd",
    name, passwd,
    done, ok, fail, noexist, invalid, others
  }={}) {
    console.log("doAuth", name, passwd)

    // Guard SiteId
    let siteId = rootState.siteId
    if(!siteId) {
      Ti.Alert("Without siteId!!!")
      return
    }

    // Eval URL
    let url = getters.urls[type]

    // Prepare params
    let ticket = Ti.Storage.local.getString(`www-ticket-${siteId}`, "")
    let passKey = ({
      "login_by_passwd" : "passwd",
      "login_by_phone"  : "vcode",
      "login_by_email"  : "vcode",
      "bind_phone"      : "vcode",
      "bind_email"      : "vcode"
    })[type]

    if(!passKey) {
      throw "Unknown auth type: " + type
    }

    let params = {
      site : siteId,
      name, 
      [passKey] : passwd,
      ticket,
      ajax: true
    }

    // Call Remote
    let reo = await Ti.Http.post(url, {params, as:"json"})
    console.log(reo)

    // Callback: done
    await dispatch("doAction", [done, reo], {root:true})

    // Success
    if(reo.ok && reo.data) {
      // save ticket
      Ti.Storage.local.set(
        `www-ticket-${siteId}`,
        reo.data.ticket
      )
      // Commit session to local
      commit("setTicket", reo.data.ticket)
      commit("setExpi",   reo.data.expi)
      commit("setMe",     reo.data.me)
      // Callback
      await dispatch("doAction", [ok, reo], {root:true})
    }
    // Fail 
    else {
      // Fail : noexist
      if("e.www.login.noexists" == reo.errCode) {
        await dispatch("doAction", [noexist, reo], {root:true})
      }
      // Fail : invalid
      else if(/^e.www.login.invalid/.test(reo.errCode)) {
        await dispatch("doAction", [invalid, reo], {root:true})
      }
      // Fail : others
      else {
        await dispatch("doAction", [others, reo], {root:true})
      }
      // Callback
      await dispatch("doAction", [fail, reo], {root:true})
    }
  },
  //--------------------------------------------
  async doGetVcode({getters, dispatch, rootState}, {
    type="login_by_phone",
    scene="auth",
    account, captcha,
    done, ok, fail
  }={}) {
    console.log("getVcode", {type,scene, account, captcha})

    // Guard SiteId
    let siteId = rootState.siteId
    if(!siteId) {
      Ti.Alert("Without siteId!!!")
      return
    }

    // Eval URL
    let api = ({
      "login_by_phone" : "get_sms_vcode",
      "login_by_email" : "get_email_vcode",
      "bind_phone"     : "get_sms_vcode",
      "bind_email"     : "get_email_vcode",
      "phone"          : "get_sms_vcode",
      "email"          : "get_email_vcode"
    })[type]
    let url = getters.urls[api]

    if(!api || !url) {
      return await Ti.Toast.Open(`Invalid type: ${type}`, "error");
    }

    // Prepare params
    let params = {
      site : siteId,
      scene, account, captcha
    }

    // Call Remote
    let reo = await Ti.Http.get(url, {params, as:"json"})
    console.log(reo)

    // Callback: done
    await dispatch("doAction", [done, reo], {root:true})

    // Success
    if(reo.ok && reo.data) {
      await dispatch("doAction", [ok, reo], {root:true})
    }
    // Fail 
    else {
      await dispatch("doAction", [fail, reo], {root:true})
    }
  },
  //--------------------------------------------
  async doResetPasswd({getters, dispatch, rootState}, {
    scene="resetpasswd",
    account, vcode, newpwd, oldpwd,
    done, ok, fail
  }={}) {
    console.log("doResetPasswd", {scene, account, vcode, newpwd, oldpwd})

    // Guard SiteId
    let siteId = rootState.siteId
    if(!siteId) {
      Ti.Alert("Without siteId!!!")
      return
    }

    // Guard Ticket
    let ticket = rootState.auth.ticket
    let me =  rootState.auth.me
    if(!me) {
      Ti.Alert("Without Login!!!")
      return
    }

    // Eval URL
    let url = getters.urls.resetpasswd

    if(!url) {
      console.error("doResetPasswd url is nil")
      return
    }

    // Prepare params
    let params = {
      site : siteId,
      ticket
    }
    let body = {
      account, vcode, newpwd, oldpwd,
    }

    // Call Remote
    let reo = await Ti.Http.post(url, {
      params, 
      body: JSON.stringify(body),
      as:"json"
    }).catch(({responseText})=>{
      return {ok:false, errCode:_.trim(responseText)}
    })
    //console.log(reo)

    // Callback: done
    await dispatch("doAction", [done, reo], {root:true})

    // Success
    if(reo.ok) {
      await dispatch("doAction", [ok, reo], {root:true})
    }
    // Fail 
    else {
      await dispatch("doAction", [fail, reo], {root:true})
    }
  },
  //--------------------------------------------
  async doLogout({state, commit, dispatch, getters, rootState}, {
    done, ok, fail
  }={}) {
    console.log("doLogout")
    // Guard SiteId
    let siteId = rootState.siteId
    if(!siteId) {
      Ti.Alert("Without siteId!!!")
      return
    }

    // Always force remove
    Ti.Storage.local.remove(`www-ticket-${siteId}`)

    // No Session, ignore
    if(!getters.hasSession) {
      dispatch("invokeAction", fail, {root:true})
      return
    }

    // Eval URL
    let url = getters.urls["logout"]
    let params = {
      site   : siteId,
      ticket : state.ticket
    }

    commit("setLoading", {text:"i18n:logout-ing"}, {root:true})

    // Call Remote
    let reo = await Ti.Http.get(url, {params, as:"json"})
    console.log(reo)

    commit("setTicket", null)
    commit("setExpi",   0)
    commit("setMe",     null)

    commit("setLoading", false, {root:true})

    // Callback: done
    await dispatch("doAction", [done, reo], {root:true})

    // Success
    if(reo.ok) {
      dispatch("doAction", [ok, reo], {root:true})
    }
    // Fail 
    else {
      dispatch("doAction", [fail, reo], {root:true})
    }
  }
  //--------------------------------------------
}
Ti.Preload("ti/lib/www/mod/auth/mod-auth-actions.mjs", _M);
})();
//============================================================
// JOIN: mod/auth/mod-profile-actions.mjs
//============================================================
(function(){
const _M = {
  //--------------------------------------------
  async saveProfile({state, getters, commit, dispatch,rootState}, profile={}) {
    //console.log("profile", profile)
    // Can not update email/phone/nm through this method
    profile = _.omit(profile, "email", "phone", "nm")
    // Guard Empty
    if(_.isEmpty(profile)) {
      return
    }
    // Guard No Change
    if(_.isMatch(state.me, profile)) {
      return
    }

    // Prepare http options
    let params = {
      site : rootState.siteId,
      ticket: state.ticket
    }
    let body = JSON.stringify(profile)
    
    commit("setLoading", true, {root:true})

    // Send request
    let url = getters.urls.profile_save
    await Ti.Http.post(url, {
      params, body, as:"json"
    })

    // Then reload
    await dispatch("doCheckMe", {force:true})

    commit("setLoading", false, {root:true})

  }
  //--------------------------------------------
}
Ti.Preload("ti/lib/www/mod/auth/mod-profile-actions.mjs", _M);
})();
//============================================================
// JOIN: mod/auth/www-mod-auth.json
//============================================================
Ti.Preload("ti/lib/www/mod/auth/www-mod-auth.json", {
  "ticket" : null,
  "expi"   : 0,
  "me"     : null,
  "profile": null,
  "countries"  : null,
  "countryMap" : null,
  "addresses": [],
  "paths"  : {
    "checkme"         : "auth/checkme",
    "login_by_wxcode" : "auth/login_by_wxcode",
    "login_by_phone"  : "auth/login_by_phone",
    "login_by_email"  : "auth/login_by_email",
    "login_by_passwd" : "auth/login_by_passwd",
    "bind_phone"      : "auth/bind_account",
    "bind_email"      : "auth/bind_account",
    "get_sms_vcode"   : "auth/get_sms_vcode",
    "get_email_vcode" : "auth/get_email_vcode",
    "check_name"      : "auth/check_name",
    "check_phone"     : "auth/check_phone",
    "logout"          : "auth/logout",
    "resetpasswd"     : "auth/resetpasswd",
    "countries"       : "lbs/countries",
    "addr_mine"       : "address/mine",
    "addr_create"     : "address/create",
    "addr_update"     : "address/update",
    "addr_delete"     : "address/delete",
    "profile_save"    : "auth/setme"
  }
});
//============================================================
// JOIN: mod/auth/www-mod-auth.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////////
  getters : {
    //--------------------------------------------
    hasSession(state) {
      return !_.isEmpty(state.ticket)
             && state.expi > Date.now()
             && !_.isEmpty(state.me)
    },
    //--------------------------------------------
    sessionState(state, getters) {
      return {
        ok : getters.hasSession,
        data : {
          me     : state.me     || null,
          ticket : state.ticket || null,
          expi   : state.expi   || 0
        }
      }
    },
    //--------------------------------------------
    urls(state, getters, rootState, rootGetters) {
      let map = {}
      _.forEach(state.paths, (ph, key)=>{
        map[key] = rootGetters.getApiUrl(ph)
      })
      return map
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  mutations : {
    //--------------------------------------------
    setTicket(state, ticket) {
      state.ticket = ticket
    },
    //--------------------------------------------
    setExpi(state, expi) {
      state.expi = expi
    },
    //--------------------------------------------
    setMe(state, me) {
      state.me = me
    },
    //--------------------------------------------
    setPaths(state, paths) {
      _.assign(state.paths, paths)
    },
    //--------------------------------------------
    mergePaths(state, paths) {
      _.merge(state.paths, paths)
    },
    //--------------------------------------------
    setAddresses(state, addresses) {
      state.addresses = addresses
    },
    //--------------------------------------------
    setCountries(state, countries) {
      state.countries = countries
      let map = {}
      _.forEach(countries, it=> {
        map[it.key] = it.name
      })
      state.countryMap = map
    }
    //--------------------------------------------
  }
  ////////////////////////////////////////////////
}
Ti.Preload("ti/lib/www/mod/auth/www-mod-auth.mjs", _M);
})();
//============================================================
// JOIN: mod/auth/_mod.json
//============================================================
Ti.Preload("ti/lib/www/mod/auth/_mod.json", {
  "name" : "www-mod-auth",
  "namespaced" : true,
  "state" : "./www-mod-auth.json",
  "actions": [
      "./mod-auth-actions.mjs",
      "./mod-address-actions.mjs",
      "./mod-profile-actions.mjs"
    ],
  "mixins" : "./www-mod-auth.mjs"
});
//============================================================
// JOIN: mod/page/www-mod-page.json
//============================================================
Ti.Preload("ti/lib/www/mod/page/www-mod-page.json", {
  "title" : null,
  "path"  : null,
  "ready" : 0,
  "finger" : null,
  "params" : {},
  "anchor" : null,
  "apis" : {},
  "data" : {},
  "layout" : {
    "desktop" : {},
    "tablet"  : "desktop",
    "phone"   : "desktop"
  },
  "shown" : {},
  "schema" : {},
  "actions" : {}
});
//============================================================
// JOIN: mod/page/www-mod-page.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////////
  getters : {
    //--------------------------------------------
    pageLink({path, params, anchor}) {
      let link = [path]
      // Join QueryString
      if(!_.isEmpty(params)) {
        let qs = []
        _.forEach(params, (v, k)=>{
          if(!Ti.Util.isNil(v)) {
            qs.push(`${k}=${encodeURIComponent(v)}`)
          }
        })
        if(!_.isEmpty(qs)) {
          link.push(`?${qs.join("&")}`)
        }
      }
      // Join Anchor
      if(anchor) {
        link.push(`#${anchor}`)
      }
      return link.join("")
    },
    //--------------------------------------------
    // Merget page api and the site api
    pageApis(state, getters, rootState, rootGetters) {
      let apiBase  = rootState.apiBase || "/"
      let SiteApis = rootState.apis || {}
      let PageApis = {}
      // For each api declared in current page
      _.forEach(state.apis, (pageApi, key)=>{
        //..........................................
        // Get SiteApi template
        let siteApi = _.get(SiteApis, pageApi.apiName || key)
        //console.log(key, siteApi)
        //..........................................
        // Marge the page api
        let api = _.cloneDeep(siteApi)
        _.defaults(api, {
          method  : "GET",
          headers : {},
          params  : {},
          vars    : {},
          as      : "json"
        })
        // API path is required
        if(!api.path) {
          console.warn(`!!!API[${key}] without defined in site!!!`, api)
          return
        }
        //..........................................
        // Merge vars
        _.assign(api.vars, pageApi.vars)
        //..........................................
        // Merge headers
        _.assign(api.headers, pageApi.headers)
        //..........................................
        // Merge params
        _.forEach(api.params, (param, name) => {
          let paramVal = _.get(pageApi.params, name)
          if(!_.isUndefined(paramVal)) {
            param.value = paramVal
          }
        })
        //console.log("params", params)
        //..........................................
        // Absolute URL
        if(/^(https?:\/\/|\/)/.test(api.path)) {
          api.url = api.path
        }
        // Join with the apiBase
        else {
          api.url = Ti.Util.appendPath(apiBase, api.path)
        }       
        //..........................................
        // Copy the Setting from page
        _.assign(api, _.pick(pageApi, 
          "body", 
          "preload",
          "serializer", 
          "dataKey",
          "dataMerge",
          "rawDataKey",
          "rawDataMerge"
        ))
        //..........................................
        _.defaults(api, {
          bodyType : "form",
          dataKey  : key
        })
        //..........................................
        // Join to map
        PageApis[key] = api
        //..........................................
      })  // _.forEach(state.apis, (info, key)=>{
      // console.log("APIs", PageApis)
      // Return page api-set
      return PageApis
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  mutations : {
    //--------------------------------------------
    set(state, all) {
      _.assign(state, all)
    },
    //--------------------------------------------
    setTitle(state, title) {
      state.title = title
    },
    //--------------------------------------------
    setPath(state, path) {
      state.path = path
    },
    //--------------------------------------------
    setPath(state, path) {
      state.path = path
    },
    //--------------------------------------------
    setParams(state, params) {
      state.params = params
    },
    //--------------------------------------------
    mergeParams(state, params) {
      if(!_.isEmpty(params) && _.isPlainObject(params)) {
        state.params = _.merge({}, state.params, params)
      }
    },
    //--------------------------------------------
    setData(state, data) {
      state.data = data
    },
    //--------------------------------------------
    updateData(state, {key, value}={}) {
      // kay-value pair is required
      if(!key || _.isUndefined(value)) {
        return
      }
      let vobj = _.set({}, key, value)
      state.data = _.assign({}, state.data, vobj)
    },
    //--------------------------------------------
    mergeData(state, data) {
      if(!_.isEmpty(data) && _.isPlainObject(data)) {
        state.data = _.merge({}, state.data, data)
      }
    },
    //--------------------------------------------
    setLayout(state, layout) {
      state.layout = layout
    },
    //--------------------------------------------
    setShown(state, shown) {
      _.assign(state.shown, shown)
    },
    //--------------------------------------------
    // 0: before reload setting -> @page:init
    // 1: after reload setting  -> @page:prepare
    // 2: after preload data    -> @page:ready
    setReady(state, ready) {
      state.ready = ready
    },
    //--------------------------------------------
    // Page finger to indicate the page changed
    // watch the filter can auto update document title
    updateFinger(state) {
      let ss = [state.path, state.params, state.anchor, state.data]
      let sha1 = Ti.Alg.sha1(ss)
      state.finger = sha1
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  actions : {
    //--------------------------------------------
    showBlock({commit}, name) {
      commit("setShown", {[name]:true})
    },
    //--------------------------------------------
    hideBlock({commit}, name) {
      commit("setShown", {[name]:false})
    },
    //--------------------------------------------
    resetData({commit}, data={}) {
      commit("setData", data)
    },
    //--------------------------------------------
    /***
     * Usage:
     * 
     * - OBJ: `changeData({KEY1:VAL1, KEY2:VAL2})
     * - Array: `changeData([{KEY1:VAL1}, {KEY2:VAL2}])
     * 
     * @param key{String} : the field name in "page.data", falsy for whole data
     * @param args{Object|Array} : `{name,value}` Object or Array
     */
    changeData({commit}, args) {
      let data = Ti.Util.merge({}, args)
      commit("mergeData", data)
    },
    changeParams({commit}, args) {
      let params = Ti.Util.merge({}, args)
      commit("mergeParams", params)
      commit("updateFinger")
    },
    //--------------------------------------------
    /***
     * Mutate the data fields in params `offset`, each field
     * should be `Number`
     * 
     * @param offsets{Object} - the offset number set. "a.b.c" suppored
     */ 
    shiftData({state, commit}, offsets={}) {
      if(!_.isEmpty(offsets) && _.isPlainObject(offsets)) {
        let d2 = {}
        // Do shift
        Ti.Util.walk(offsets, {
          leaf : (off, path)=>{
            let val = _.get(state.data, path)
            // Offset
            if(_.isNumber(val) && _.isString(off) && /^[+-][0-9.]+$/.test(off)) {
              _.set(d2, path, val+off*1)
            }
            // Others Replace
            else {
              _.set(d2, path, off)
            }
          }
        })
        // Do Merge
        commit("mergeData", d2)
      }
    },
    //--------------------------------------------
    /***
     * Assert page data under a group of restrictions 
     */
    assertPage({rootState, dispatch}, {checkList=[], fail={}}={}) {
      // Prepare check result
      let assertFail = false
      // Loop the checkList
      for(let cl of checkList) {
        let val = _.get(rootState, cl.target)
        if(!Ti.Validate.checkBy(cl.assert, val)) {
          assertFail = true
          break
        }
      }
      //console.log(assertFail)
      // Do Fail
      if(assertFail && fail.action) {
        dispatch("doAction", fail, {root:true})
      }
    },
    //--------------------------------------------
    async scrollToTop({state}) {
      Ti.Be.ScrollWindowTo({y:0})
    },
    //--------------------------------------------
    async doApi({rootState, getters, commit}, {
      key,        // The Api Key
      params={},  // params will override the defaults
      vars={},
      body=null
    }={}) {
      //.....................................
      let api = _.get(getters.pageApis, key)
      console.log("doApi", key, params, api)
      //.....................................
      // Guard
      if(!api) {
        return await Ti.Toast.Open("e.www.page.ApiNotFound: "+key, "warn");
      }
      //.....................................
      // Eval url
      _.defaults(vars, api.vars)
      let url = api.url
      if(!_.isEmpty(vars)) {
        let vars2 = Ti.Util.explainObj(rootState, vars)
        url = Ti.S.renderBy(api.url, vars2)
      }
      //.....................................
      // Gen the options
      let options = _.pick(api, ["method", "as"])
      options.vars = vars
      // Eval headers
      options.headers = Ti.Util.explainObj(rootState, api.headers)
      // Eval the params
      options.params = {}
      _.forEach(api.params, (param, key)=>{
        let val = _.get(params, key)
        // Use default
        if(Ti.Util.isNil(val)) {
          val = Ti.Util.explainObj(rootState, param.value)
        }
        // Check required
        if(param.required && Ti.Util.isNil(val)) {
          let errMsg = `${url}: lack required param: ${key}`
          Ti.Toast.Open(errMsg, "error")
          throw errMsg
        }
        options.params[key] = val
      })
      //.....................................
      // Prepare the body
      let apiBody = body || api.body
      if("POST" == api.method && apiBody) {
        let bodyData = Ti.Util.explainObj(rootState, apiBody)
        // As JSON
        if("json" == api.bodyType) {
          options.body = JSON.stringify(bodyData)
        }
        // As responseText
        else if("text" == api.bodyType) {
          options.body = Ti.Types.toStr(bodyData)
        }
        // Default is form
        else {
          options.body = Ti.Http.encodeFormData(bodyData)
        }
      }
      //.......................................
      // Mark Loading
      commit("setLoading", true, {root:true})
      //.....................................
      // Join the http send Promise
      //console.log(`will send to "${url}"`, options)
      let reo = await Ti.Http.sendAndProcess(url, options) 
      let data = reo
      //.....................................
      // Eval api serializer
      if(api.serializer) {
        let serializer = Ti.Util.genInvoking(api.serializer, {
          context: rootState,
          partialRight: true
        })
        if(_.isFunction(serializer)) {
          data = serializer(reo)
        }
      }
      //.....................................
      // Update or merge
      if(api.dataMerge) {
        commit("mergeData", {
          [api.dataKey] : data
        })
      }
      // Just update
      else {
        commit("updateData", {
          key   : api.dataKey,
          value : data
        })
      }
      //.......................................
      // Mark Loading
      commit("setLoading", false, {root:true})
    },
    //--------------------------------------------
    /***
     * Reload page data by given api keys
     */
    async reloadData({state, commit, getters, rootState}, keys=[]) {
      console.log(" # -> page.reloadData", keys)
      //.......................................
      // The api list to reload
      let isAll = _.isEmpty(keys)
      let apis = _.filter(getters.pageApis, (api, k)=>{
        // Auto preload
        if(isAll) {
          if(api.preload > 0) {
            if(api.preloadWhen) {
              return Ti.Validate.match(rootState, api.preloadWhen, false)
            }
            return true
          }
        }
        // Specify apis
        return _.indexOf(keys, k)>=0
      })
      //.......................................
      // Sort preload
      apis.sort((a1, a2)=>{
        return a1.preload - a2.preload
      })
      //.......................................
      // Mark Loading
      commit("setLoading", true, {root:true})
      //.......................................
      // Prepare the Promises
      for(let api of apis) {
        console.log("  # -> page.reloadData -> prepareApi", api)
        // prepare http send options
        let url = api.url
        // if("/www/dataocean/cygq/mock/right-b/b-${nm}.json"==url) {
        //   console.log("haha", url)
        // }
        //.....................................
        // Eval dynamic url
        if(!_.isEmpty(api.vars)) {
          let vars = Ti.Util.explainObj(rootState, api.vars)
          url = Ti.S.renderBy(url, vars)
        }
        //.....................................
        // Gen the options
        let options = _.pick(api, ["method", "as"])
        // Eval headers
        options.headers = Ti.Util.explainObj(rootState, api.headers)
        // Eval the params
        options.params = {}
        _.forEach(api.params, (param, key)=>{
          let val = Ti.Util.explainObj(rootState, param.value)
          // Check required
          if(param.required && Ti.Util.isNil(val)) {
            let errMsg = `${url}: lack required param: ${key}`
            Ti.Toast.Open(errMsg, "error")
            throw errMsg
          }
          options.params[key] = val
        })
        //.....................................
        // Prepare the body
        if("POST" == api.method && api.body) {
          let bodyData = Ti.Util.explainObj(rootState, api.body)
          // As JSON
          if("json" == api.bodyType) {
            options.body = JSON.stringify(bodyData)
          }
          // As responseText
          else if("text" == api.bodyType) {
            options.body = Ti.Types.toStr(bodyData)
          }
          // Default is form
          else {
            options.body = Ti.Http.encodeFormData(bodyData)
          }
        }
        //.....................................
        // Join the http send Promise
        //console.log(`will send to "${url}"`, options)
        let reo = await Ti.Http.sendAndProcess(url, options) 
        let data = reo
        //.....................................
        // Eval api serializer
        if(api.serializer) {
          let serializer = Ti.Util.genInvoking(api.serializer, {
            context: rootState,
            partialRight: true
          })
          if(_.isFunction(serializer)) {
            data = serializer(reo)
          }
        }
        //.....................................
        // Update or merge
        if(api.dataMerge) {
          commit("mergeData", {
            [api.dataKey] : data
          })
        }
        // Just update
        else {
          commit("updateData", {
            key   : api.dataKey,
            value : data
          })
        }
        //.....................................
        // Update or merge
        if(api.rawDataKey) {
          if(api.rawDataMerge) {
            commit("mergeData", {
              [api.rawDataKey] : reo
            })
          }
          // Just update
          else {
            commit("updateData", {
              key   : api.rawDataKey,
              value : reo
            })
          }
        }
      }
      //.......................................
      // Unmark loading
      commit("setLoading", false, {root:true})
      commit("updateFinger")
      //.......................................
      // // Get return value
      // let reKeys = []
      // for(let api of apis) {
      //   reKeys.push(api.dataKey)
      // }
      // //.......................................
      // return _.pick(state.data, reKeys)
    },
    //--------------------------------------------
    /***
     * Reload whole page
     */
    async reload({commit, dispatch, rootGetters}, {
      path,
      anchor,
      params={}
    }) {
      //console.log(rootGetters.routerList)
      console.log(" # -> page.reload", {path,params,anchor})
      let pinfo;
      //.....................................
      // Apply routerList
      for(let router of rootGetters.routerList) {
        pinfo = router(path)
        if(pinfo && pinfo.path) {
          break
        }
      }
      //.....................................
      if(!pinfo || !pinfo.path) {
        return await Ti.Toast.Open("Page ${path} not found!", {
          type: "error",
          position: "center",
          vars: {path}
        })
      }
      //.....................................
      // Notify: init
      console.log("@page:init ...")
      commit("setReady", 0)
      await dispatch("invokeAction", {name:"@page:init"}, {root:true})
      //.....................................
      // Load the page json
      let json = await Ti.Load(`@Site:${pinfo.path}.json`)
      //.....................................
      // merge info
      if(anchor) {
        pinfo.anchor = anchor
      }
      pinfo.params = _.merge({}, pinfo.params, params)
      pinfo.path = path
      let page = _.merge({
        "title" : null,
        "apis" : {},
        "data" : {},
        "layout" : {},
        "params" : {},
        "shown" : {},
        "schema" : {},
        "actions" : {}
      }, json, pinfo)
      //.....................................
      // Update page 
      commit("set", page)
      console.log(" #### page.loaded", _.cloneDeep(page))

      //.....................................
      // Notify: Prepare
      console.log("@page:prepare ...")
      commit("setReady", 1)
      await dispatch("invokeAction", {name:"@page:prepare"}, {root:true})
      //.....................................
      // init: data
      await dispatch("reloadData")
      //.....................................
      // Scroll window to top
      dispatch("scrollToTop")
      //.....................................
      // Notify: Ready
      console.log("@page:ready ...")
      commit("setReady", 2)
      await dispatch("invokeAction", {name:"@page:ready"}, {root:true})
      //.....................................
    }
    //--------------------------------------------
  }
  ////////////////////////////////////////////////
}
Ti.Preload("ti/lib/www/mod/page/www-mod-page.mjs", _M);
})();
//============================================================
// JOIN: mod/page/_mod.json
//============================================================
Ti.Preload("ti/lib/www/mod/page/_mod.json", {
  "name" : "www-mod-page",
  "namespaced" : true,
  "state" : "./www-mod-page.json",
  "mixins" : "./www-mod-page.mjs"
});
//============================================================
// JOIN: mod/shop/www-mod-shop.json
//============================================================
Ti.Preload("ti/lib/www/mod/shop/www-mod-shop.json", {
  "basket" : [],

  "payment" : null,

  "paths"  : {
    "buyIt"     : "entity/buy/it",
    "buyRemove" : "entity/buy/rm",
    "buyGetAll" : "entity/buy/all",
    "buyClean"  : "entity/buy/clean",
    "objs" : "objs",
    "buy"  : "pay/buy",
    "pay"  : "pay/pay",
    "checkOrder": "pay/check"
  }
});
//============================================================
// JOIN: mod/shop/www-mod-shop.mjs
//============================================================
(function(){
const _M = {
  ////////////////////////////////////////////////
  getters : {
    //--------------------------------------------
    urls(state, getters, rootState, rootGetters) {
      let map = {}
      _.forEach(state.paths, (ph, key)=>{
        map[key] = rootGetters.getApiUrl(ph)
      })
      return map
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  mutations : {
    //--------------------------------------------
    appendBasket(state, buyIt) {
      state.basket = _.concat(state.basket, buyIt)
    },
    //--------------------------------------------
    setBasket(state, buyIts=[]) {
      state.basket = buyIts
    },
    //--------------------------------------------
    setPayment(state, pay) {
      state.payment = pay
    },
    //--------------------------------------------
    setPaths(state, paths) {
      state.paths = _.cloneDeep(paths)
    },
    //--------------------------------------------
    mergePaths(state, paths) {
      _.assign(state.paths, paths)
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  actions : {
    //--------------------------------------------
    async fetchOrder({getters, rootState}, {orderId, payType}={}) {
      if(!orderId) {
        return 
      }
      let reo = await Ti.Http.get(getters.urls.pay, {
        params: {
          ticket: rootState.auth.ticket,
          id: orderId,
          pt: payType
        },
        as: "json"
      })
      // Success
      if(reo.ok) {
        return reo.data
      }
      // Fail
      else {
        console.warn("Fail to loadBuyItems", {items, reo})
      }
    },
    //--------------------------------------------
    async createOrder({getters, rootState}, {payType, items}={}) {
      if(!payType || _.isEmpty(items)) {
        return 
      }
      let reo = await Ti.Http.post(getters.urls.buy, {
        params: {
          ticket: rootState.auth.ticket
        },
        headers: {
          "Content-Type": "application/json;charset=utf-8"
        },
        body: JSON.stringify({
          pay_tp : payType,
          products: items,
        }),
        as: "json"
      })
      // Success
      if(reo.ok) {
        return reo.data
      }
      // Fail
      else {
        console.warn("Fail to loadBuyItems", {items, reo})
      }
    },
    //--------------------------------------------
    async checkOrder({getters, rootState}, orderId) {
      console.log("checkOrder")
      if(!orderId) {
        return 
      }
      let reo = await Ti.Http.get(getters.urls.checkOrder, {
        params: {
          ticket: rootState.auth.ticket,
          id: orderId
        },
        as: "json"
      })
      // Success
      if(reo.ok) {
        return reo.data
      }
      // Fail
      else {
        console.warn("Fail to loadBuyItems", {items, reo})
      }
    },
    //--------------------------------------------
    async loadBuyItems({getters, commit}, {
      items= [],
      commitDataKey= "goods",
      commitTarget= "page/updateData"
    }) {
      console.log("loadBuyItems", items)
      // Gether ids
      let ids = []
      let amounts = {}
      _.forEach(items, it=>{
        let m = /^(\d+):(.+)$/.exec(it)
        if(m) {
          let amount = m[1] * 1
          let id = m[2]
          if(id && amount > 0) {
            ids.push(`id:${id}`)
            amounts[id] = amount
          }
        }
      })

      // Guard
      if(_.isEmpty(ids)) {
        return
      }

      // ask remote for 
      let reo =  await Ti.Http.get(getters.urls.objs, {
        params : {phs: ids.join(" ")},
        as : "json"
      })

      // OK
      if(reo.ok) {
        let its = []
        _.forEach(reo.data, obj=> {
          let id = obj.id
          let amount = amounts[id]
          its.push({
            id, amount, obj
          })
        })

        commit(commitTarget, {
          key: commitDataKey,
          value: its
        }, {root:true})
      }
      // Fail
      else {
        console.warn("Fail to loadBuyItems", {items, reo})
      }
    },
    //--------------------------------------------
    async checkoutBasket({state, dispatch}, {
      checkoutPage="page/shop/checkout.html"
    }={}) {
      // Prepare the list
      let items = []
      _.forEach(state.basket, (it)=> {
        if(it.name && it.count > 0) {
          items.push({
            id: it.name,
            amount: it.count
          })
        }
      })

      // Do the checkout
      if(!_.isEmpty(items)) {
        await dispatch("checkout", {
          items, checkoutPage
        })
      }
      // Just warn it
      else {
        console.warn("!checkoutBasket: Empty Basket")
      }
    },
    //--------------------------------------------
    /***
     * @param items{Array} - Array with item `{id:xxx, amount:1}`
     */
    async checkout({commit, dispatch, getters, rootState}, {
      items=[],
      checkoutPage="page/shop/checkout.html"
    }={}) {
      console.log("checkout", items)

      // encode the items as params
      let its = []
      _.forEach(items, it => {
        if(it.id && it.amount > 0)
          its.push(`${it.amount}:${it.id}`)
      })

      // Guard
      if(_.isEmpty(its)) {
        console.warn("!checkout: Empty Item");
        return
      }

      // Goto page
      await dispatch("navTo", {
        value: checkoutPage,
        params: {
          its: its.join(",")
        }
      }, {root:true})

    },
    //--------------------------------------------
    /***
     * @param id{String} - Product ID
     * @param n{Integer} - Product buy count, 1 as default
     * @param reset{Boolean} If true, `n` will be take as the final buy count.
     *  else if false, `n` will be take as increasment. Of cause, 
     *  negative `n` will cause the decreasment.
     */
    async updateBasket({commit, dispatch, getters, rootState}, {
      id, n=1, reset=false, success, fail, invalid, noTicket
    }={}) {
      console.log("shop:addToBasket", {id, success, fail})
      //..........................................
      // N is 0, do nothing
      if(n === 0 && !reset) {
        return
      }
      //..........................................
      // Guard Ticket
      let ticket  = rootState.auth.ticket
      if(!ticket) {
        // Customized exception handler
        if(noTicket) {
          return await dispatch(noTicket.action, noTicket.payload, {root:true})
        }
        // Default just notify
        else {
          Ti.Alert("Without Session Ticket!!!")
          return          
        }
      }
      //..........................................
      // Guard id
      if(!id) {
        // Customized exception handler
        if(invalid) {
          return await dispatch(invalid.action, invalid.payload, {root:true})
        }
        // Default just notify
        else {
          Ti.Alert("Without Product ID!!!")
          return
        }
      }
      //..........................................
      // Check to remote
      commit("setLoading", true, {root:true})
      //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      let reo =  await Ti.Http.get(getters.urls.buyIt, {
        params : {
          ticket, id, n, r:reset
        },
        as : "json"
      })
      // success
      if(reo.ok) {
        commit("setBasket", reo.data)

        // Success
        if(success) {
          await dispatch(success.action, success.payload, {root:true})
        }
      }
      // Fail
      else if(fail){
        await dispatch(fail.action, fail.payload, {root:true})
      }
      // Show error
      else {
        console.warn("shop.updateBasket fail:", reo)
      }
      //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      commit("setLoading", false, {root:true})
    },
    //--------------------------------------------
    async cleanBasket({commit, getters, rootState}) {
      console.log("shop:cleanBasket")
      //..........................................
      // Guard Ticket
      let ticket  = rootState.auth.ticket
      if(!ticket) {
        return
      }
      //..........................................
      // Confirm
      if(!await Ti.Confirm("i18n:shop-basket-clean-confirm")) {
        return
      }
      //..........................................
      // Check to remote
      commit("setLoading", true, {root:true})
      // Current Session ...
      let reo =  await Ti.Http.get(getters.urls.buyClean, {
        params : {
          ticket
        },
        as : "json"
      })
      commit("setLoading", false, {root:true})
      //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      // success
      if(reo.ok) {
        commit("setBasket", [])
      }
      //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      // Fail
      else{
        console.error("www/shop module: Fail to reloadBasket", reo)
      }
      //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    },
    //--------------------------------------------
    async reloadBasket({commit, getters, rootState}) {
      console.log("shop:reloadBasket")
      //..........................................
      // Guard Ticket
      let ticket  = rootState.auth.ticket
      if(!ticket) {
        return
      }
      //..........................................
      // Check to remote
      commit("setLoading", true, {root:true})
      // Current Session ...
      let reo =  await Ti.Http.get(getters.urls.buyGetAll, {
        params : {
          ticket
        },
        as : "json"
      })
      commit("setLoading", false, {root:true})
      //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      // success
      if(reo.ok) {
        commit("setBasket", reo.data)
      }
      //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      // Fail
      else{
        console.error("www/shop module: Fail to reloadBasket", reo)
      }
      //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    }
    //--------------------------------------------
  } // actions : {
  ////////////////////////////////////////////////
}
Ti.Preload("ti/lib/www/mod/shop/www-mod-shop.mjs", _M);
})();
//============================================================
// JOIN: mod/shop/_mod.json
//============================================================
Ti.Preload("ti/lib/www/mod/shop/_mod.json", {
  "name" : "www-mod-shop",
  "namespaced" : true,
  "state" : "./www-mod-shop.json",
  "mixins" : "./www-mod-shop.mjs"
});
//============================================================
// JOIN: mod/www-mod-site.mjs
//============================================================
(function(){
const _M = {
  /////////////////////////////////////////
  getters : {
    //--------------------------------------------
    // Pre-compiled Site Routers
    routerList(state) {
      let list = []
      _.forEach(state.router, ({
        match, names=[], page={}
      }={})=>{
        let regex = new RegExp(match)
        // Pre-compiled
        let li = function(path){
          let m = regex.exec(path)
          // Match page
          if(m) {
            // Build Context
            let context = {}
            for(let i=0; i<m.length; i++) {
              let val = m[i]
              context[i] = val
              let k = _.nth(names, i)
              if(k) {
                _.set(context, key, val)
              }
            }
            // Render page info
            return Ti.Util.explainObj(context, page)        
          }
        }

        // Join to list
        list.push(li)
      })
      return list
    },
    //--------------------------------------------
    // Site Action Mapping
    actions(state) {
      //console.log("www-mod-site::getters.actions")
      // Global
      let map = _.cloneDeep(state.actions)

      // Evalue the actions
      map = _.mapValues(map, (val)=>
        _.isString(val)
          ? {action:val}
          : val)
      
      // Merge action set with the defination in page
      let page = state.page
      if(page) {
        _.forEach(page.actions, (val, key)=>{
          let act = val
          // format val
          if(_.isString(val)) {
            act = {action : val}
          }

          // do merge
          let gAction = map[key]
          // Array+?
          if(_.isArray(gAction)) {
            // Array+Array
            if(_.isArray(act)) {
              if(act.length > 0) {
                // Concat Array
                if("+" == act[0]) {
                  for(let z=1;z<act.length;z++) {
                    gAction.push(act[z])
                  }
                }
                // Replace Array
                else {
                  map[key] = act      
                }
              }
            }
            // Array+Object -> append
            else {
              gAction.push(act)
            }
          }
          // Object+Any -> replace
          else {
            map[key] = act
          }
        })
      }
      return map
    },
    //--------------------------------------------
    getUrl(state) {
      return (path)=>{
        return Ti.Util.appendPath(state.base, path)
      }
    },
    //--------------------------------------------
    getApiUrl(state) {
      return (path)=>{
        if(path.startsWith("/")) {
          return path
        }
        return Ti.Util.appendPath(state.apiBase, path)
      }
    }
    //--------------------------------------------
  },
  /////////////////////////////////////////
  mutations : {
    //--------------------------------------------
    setSiteId(state, siteId) {
      state.siteId = siteId
    },
    //--------------------------------------------
    setDomain(state, domain) {
      state.domain = domain
      state.base = Ti.S.renderBy(state.base||"/www/${domain}/", {domain})
      state.apiBase = Ti.S.renderBy(state.apiBase||"/api/${domain}/", {domain})
    },
    //--------------------------------------------
    setLoading(state, loading) {
      state.loading = loading
    },
    //--------------------------------------------
    explainSiteState(state) {
      state.base = Ti.Util.explainObj(state, state.base)
      state.apiBase = Ti.Util.explainObj(state, state.apiBase)
      state.cdnBase = Ti.Util.explainObj(state, state.cdnBase)
      state.logo = Ti.Util.explainObj(state, state.logo)
      state.entry = Ti.Util.explainObj(state, state.entry)
    }
    //--------------------------------------------
  },
  /////////////////////////////////////////
  actions : {
    //--------------------------------------------
    navBackward() {
      if(window.history) {
        window.history.back()
      }
    },
    //--------------------------------------------
    async openUrl({state}, {
      url, target="_self", method="GET", params={}, delay=0
    }) {
      await Ti.Be.Open(url, {
        target, method, params, delay
      })
    },
    //--------------------------------------------
    // Only handle the "page|dispatch"
    async navTo({commit, dispatch}, {
      type="page",
      value,    // page path
      anchor,   // page anchor
      data,     // page.data
      params    // page.params
    }={}) {
      console.log("navToPage::", value)
      // Guarding
      if(!value)
        return
      // navTo::page
      if("page" == type) {
        commit("setLoading", true)

        // Reload
        //console.log("@page:reload ...", _.cloneDeep(state.auth))
        await dispatch("page/reload", {
          path   : value,
          anchor : anchor,
          params : params,
          data   : data
        })
        
        commit("setLoading", false)
      }
      // navTo::dispatch
      else if("dispatch" == type) {
        await dispatch(value, params)
      }
    },
    //--------------------------------------------
    /***
     * Handle the action dispatching.
     * 
     * One action should be defined in `[page].json#actions`:
     * 
     * ```js
     * {
     *    action : "xx/xx",
     *    payload : {} | [] | ...
     * }
     * ```
     * 
     * @param action{String} - action name like `page/showBlock`
     * @param payload{Object|Array} - action payload, defined in `json` file
     * @param args{Array} - the dynamic information emitted by `[Com].$emit`
     * 
     * @return {void}
     */
    async doAction({state, dispatch}, AT){
      // Guard nil
      if(!AT) {
        return
      }

      //....................................
      // Raw function
      //....................................
      if(_.isFunction(AT)) {
        return await AT()
      }

      //....................................
      // Combo: [F(), args] or [{action}, args]
      //....................................
      if(_.isArray(AT) && AT.length == 2) {
        let actn = AT[0]
        let args = AT[1]
        if(!_.isUndefined(args) && !_.isArray(args)) {
          args = [args]
        }
        if(_.isFunction(actn)) {
          AT = {
            action: actn,
            args
          }
        }
        // Merge
        else {
          AT = _.assign({}, actn, {args})
        }
      }

      //....................................
      // Action object
      //....................................
      let {action,payload,args}=AT
      //....................................
      if(!action)
        return;

      args = args || []
      //....................................
      let pld;

      // Use args directrly cause payload without defined
      if(_.isUndefined(payload) || _.isNull(payload)) {
        pld = _.cloneDeep(_.nth(args, 0))
      }
      //....................................
      // Explain payload
      else {
        let context = _.assign({}, state, {
          $args : args
        })
        pld = Ti.Util.explainObj(context, payload, {
          evalFunc : false
        })
      }
      //....................................
      console.log("invoke->", action, pld)
      //....................................
      if(_.isFunction(action)) {
        await action(pld)
      }
      // Action
      else {
        await dispatch(action, pld)
      }
    },
    //--------------------------------------------
    /***
     * Invoke action by given name
     */
    async invokeAction({getters, dispatch}, {name="", args=[]}={}){
      /*
      The action should like
      {
        action : "xx/xx",
        payload : {} | [] | ...
      } 
      */
      let actions = getters.actions;
      let AT = _.get(actions, name)

      // Try fallback
      if(!AT) {
        let canNames = _.split(name, "::")
        while(canNames.length > 1) {
          let [, ...names] = canNames
          let aName = names.join("::")
          AT = _.get(actions, aName)
          if(AT){
            break
          }
          canNames = names
        }
      }

      // Guard
      if(!AT)
        return;
  
      // Invoke it
      try {
        // Batch call
        if(_.isArray(AT)) {
          for(let a of AT) {
            await dispatch("doAction", {
              action  : a.action,
              payload : a.payload,
              args
            })
          }
        }
        // Direct call : String
        else if(_.isString(AT)) {
          await dispatch("doAction", {
            action: AT,
            args
          })
        }
        // Direct call : Object
        else {
          await dispatch("doAction", {
            action  : AT.action,
            payload : AT.payload,
            args
          })
        }
      }
      // For Error
      catch(e) {
        console.error(e)
      }
    },
    //--------------------------------------------
    async reload({state, commit, dispatch}) {
      console.log("site.reload", state.entry, state.base)
      // Merge Site FuncSet
      //console.log(state.utils)

      // Init the base/apiBase

      // Looking for the entry page
      // {href,protocol,host,port,path,search,query,hash,anchor}
      let loc = Ti.Util.parseHref(window.location.href)

      
      // Update the auth
      commit("auth/mergePaths", state.authPaths)

      // Eval the entry page
      let entry = state.entry
      if(loc.path.startsWith(state.base)) {
        entry = loc.path.substring(state.base.length) || entry;
      }

      // nav to page
      await dispatch("navTo", {
        type   : "page",
        value  : entry,
        params : loc.params,
        anchor : loc.hash,
        pushHistory : false
      })
    }
    //--------------------------------------------
  }
  /////////////////////////////////////////
}
Ti.Preload("ti/lib/www/mod/www-mod-site.mjs", _M);
})();
//============================================================
// JOIN: cheap-markdown.mjs
//============================================================
//============================================================
// JOIN: wn.manager/gui/layout.json
//============================================================
Ti.Preload("/a/load/wn.manager/gui/layout.json", {
  "desktop" : {
    "type" : "rows",
    "border" : true,
    "blocks" : [{
      "name" : "sky",
      "size" : 48,
      "type" : "rows",
      "border" : true,
      "blocks" : [{
          "type" : "cols",
          "blocks" : [{
              "name" : "logo",
              "size" : "auto",
              "body" : "pcSkyLogo"
            }, {
              "name" : "title",
              "size" : "stretch",
              "body" : "pcSkyTitle"
            }, {
              "name" : "session",
              "size" : "auto",
              "body" : "pcSkySession"
            }, {
              "name" : "menu",
              "size" : "auto",
              "body" : "pcSkyMenu"
            }]
      }]
    }, {
      "name" : "main",
      "size" : "100px",
      "flex" : "both",
      "type" : "cols",
      "border" : true,
      "blocks" : [{
          "name"  : "sidebar",
          "size" : "1.8rem",
          "body"  : "pcMainSideBar"
        }, {
          "name" : "arena",
          "size" : "stretch",
          "body" : "pcMainArena"
        }]
    }, {
      "name" : "footer",
      "size" : ".32rem",
      "body" : "pcFooter"
    }]
  },
  "tablet" : "desktop",
  "phone" : "desktop"
});
//============================================================
// JOIN: wn.manager/gui/schema.json
//============================================================
Ti.Preload("/a/load/wn.manager/gui/schema.json", {
  "pcSkyLogo" : {
    "comType" : "ti-icon",
    "comConf" : {
      "width" : "3em", 
      "fontSize" : "1.5em", 
      "value" : "=Logo"
    }
  },
  "pcSkyTitle" : {
    "comType" : "ti-crumb",
    "comConf" : "=Crumb"
  },
  "pcSkySession" : {
    "comType" : "ti-session-badge",
    "comConf" : "=SessionBadge"
  },
  "pcSkyMenu" : {
    "comType" : "ti-actionbar",
    "comConf" : "=ActionMenu"
  },
  "pcMainSideBar" : {
    "comType" : "wn-gui-side-nav",
    "comConf" : {
      "items" : "=sidebar",
      "highlightItemId"   : "=MetaId",
      "highlightItemPath" : "=MetaPath"
    }
  },
  "pcMainArena" : {
    "comType" : "=comType",
    "comConf" : "=Arena"
  },
  "pcFooter" : {
    "comType" : "wn-gui-footer",
    "comConf" : "=Footer"
  }
});
//============================================================
// JOIN: wn.manager/gui/setup.json
//============================================================
Ti.Preload("/a/load/wn.manager/gui/setup.json", {
  "shown" : {
    "desktop" : {
      "logo"         : "==theLogo",
      "menu"         : "==theMenu",
      "sessionBadge" : "==theSessionBadge"
    },
    "tablet"  : {},
    "phone"   : {}
  },
  "canLoading" : true,
  "loadingAs" : false,
  "firstCrumbIndex" : 1,
  "logo" : "<:home>"
});
//============================================================
// JOIN: wn.manager/wn-manager-computed.mjs
//============================================================
(function(){
const _M = {
  //.........................................
  Logo() {
    if("<:home>" == this.setup.logo) {
      let crIt = _.nth(this.CrumbData, 0)
      return crIt ? crIt.icon : null
    }
    // Then it is the static icon
    return this.setup.logo
  },
  //.........................................
  CrumbData() {
    return Wn.Obj.evalCrumbData({
      meta      : this.meta,
      ancestors : this.ancestors,
      fromIndex : this.setup.firstCrumbIndex,
      homePath  : this.setup.skyHomePath,
      self : (item)=>{
        item.asterisk = this.isChanged
      }
    })
  },
  //.........................................
  Crumb() {
    let crumbs = _.cloneDeep(this.CrumbData)
    // Remove the first one for grace look
    if(this.Logo && !_.isEmpty(crumbs)) {
      crumbs[0].icon = null
    }
    return {data: crumbs}
  },
  //.........................................
  SessionBadge() {
    let me = _.get(this.session, "me")
    if(me) {
      return {
        me,
        avatarKey : "thumb",
        avatarSrc : null,
        loginIcon : me.sex == 1 ? "im-user-male" : "im-user-female",
        nameKeys  : "nickname|nm"
      }
    }
  },
  //.........................................
  ActionMenu() {
    if(_.isArray(this.actions) && !_.isEmpty(this.actions)) {
      return {
        className : `wn-${this.viewportMode}-menu`,
        items  : this.actions,
        status : this.TheStatus,
        delay  : 500
      }
    }
  },
  //.........................................
  Arena() {
    if(this.hasView) {
      // explain comConf
      //console.log("re-arena", this.comConf)
      // prepare the vars
      let app = Ti.App(this);
      let comConf = Ti.Util.explainObj(this, this.comConf) || {
        meta    : this.meta,
        content : this.content,
        data    : this.data,
        status  : this.status
      }
      //let actions = this.actions
      // Add init hook to store the $main
      comConf.onInit = function(){
        //console.log("onInit:", this.tiComId)
        app.$vmMain(this)
      }
      // Done
      return comConf
    }
  },
  //.........................................
  Footer() {
    return {
      infoIcon  : this.comIcon,
      infoText  : this.comType,
      message   : this.myMessage || this.StatusText,
      indicator : this.myIndicator
    }
  }
  //.........................................
}
Ti.Preload("/a/load/wn.manager/wn-manager-computed.mjs", _M);
})();
//============================================================
// JOIN: wn.manager/wn-manager-methods.mjs
//============================================================
(function(){
const _M = {
  //.........................................
  async reloadMain() {
    // Check meta
    let meta = this.meta
    if(!meta) {
      return await Ti.Toast.Open("i18n:wn-manager-no-meta", "warn")
    }

    // Guard loading
    if(this.isLoading) {
      console.log("!!!")
      return await Ti.Toast.Open("i18n:wn-manager-is-loading", "warn")
    }
    // Mark loading
    this.loading = true
    this.comType = "ti-loading"
    this.comConf = {}
    try {
      //....................................
      // then try to unregisterModule safely
      if(this.view && this.view.modType) {
        try{
          this.$store.unregisterModule("main")
        }catch(E){
          console.error("Error when unregisterModule", E)
        }
      }
      //..................................
      // Get back the viewName from hash
      // User can use `#!text-editor` to force open any view
      let m = /^#!(.+)$/.exec(window.location.hash)
      let viewName = m ? m[1] : null

      //..................................
      // Prepare to read view detail from server
      let cmdText;
      if(viewName) {
        cmdText = `ti views -cqn -name '${viewName}'`
      }
      // Query by current object
      else {
        cmdText = `ti views -cqn id:${meta.id}`
      }

      //..................................
      // Load the main view
      let viewInfo = await Wn.Sys.exec2(cmdText, {as:"json"})
      let $app = Ti.App(this)
      let view = await $app.loadView(viewInfo)
      //..................................
      if(Ti.IsInfo("app/wn.manager")) {
        console.log("TiView Loaded:", view)
      }
      //..................................
      // register main module
      if(view && view.modType) {
        //console.log("load main!!!")
        this.$store.registerModule("main", view.mod)
        await $app.dispatch("main/reload", meta)
      }
      //..................................
      this.comType = view.comName
      this.comIcon = view.comIcon
      this.comConf = view.comConf
      this.view = view
      this.myMessage = null
      this.myIndicator = null
      this.OnUpdateActions(view.actions)
    }
    // Clean
    finally {
      this.loading = false
    }
  },
  //.........................................
  async reloadAncestors() {
    if(this.hasMeta) {
      this.ancestors = await Wn.Io.loadAncestors("id:"+this.MetaId)
      this.parent = _.last(this.ancestors)
    }
  },
  //.........................................
  async reloadSidebar() {
    let reo = await Wn.Sys.exec("ti sidebar -cqn", {as:"json"});
    this.sidebar = reo.sidebar
  },
  //.........................................
  pushHistory(meta) {
    // Push history to update the browser address bar
    let his = window.history
    if(his && meta) {
      // Done push duplicate state
      if(his.state && his.state.id == meta.id){
        return
      }
      // Push to history stack
      let newLink = Wn.Util.getAppLink(meta.id)
      let title =  Wn.Util.getObjDisplayName(meta)
      if(Ti.IsInfo("app/wn-manager")) {
        console.log(title , "->", newLink)
      }
      his.pushState(meta, title, newLink)
      // Update the Title
      document.title = title;
    }
  }
  //.........................................
}
Ti.Preload("/a/load/wn.manager/wn-manager-methods.mjs", _M);
})();
//============================================================
// JOIN: wn.manager/wn-manager.html
//============================================================
Ti.Preload("/a/load/wn.manager/wn-manager.html", `<ti-gui
  class="wn-manager"
  :class="TopClass"
  :layout="GuiLayout"
  :schema="GuiSchema"
  :shown="GuiShown"
  :can-loading="GuiCanLoading"
  :loading-as="GuiLoadingAs"
  @arena::expose-hidden="OnExposeHidden"
  @do:logout="OnLogout"
  @item:active="OnCurrentMetaChange"
  @arena::open="OnCurrentMetaChange"
  @arena::change="OnCurrentDataChange"
  @arena::actions:update="OnUpdateActions"
  @arena::indicate="OnArenaIndicate"
  @arena::message="OnArenaMessage"/>`);
//============================================================
// JOIN: wn.manager/wn-manager.mjs
//============================================================
(function(){
const _M = {
  ///////////////////////////////////////////
  provider: function() {
    return {
      $session: {
        ticket   : this.session.ticket,
        userId   : this.session.uid,
        userName : this.session.unm,
        group    : this.session.grp
      }
    }
  },
  ///////////////////////////////////////////
  data:()=>({
    myExposeHidden : false,
    loading : false,
    comIcon : "zmdi-hourglass-alt",
    comType : "ti-loading",
    comConf : {},
    actions : [],
    sidebar : [],
    // Current meta anestors
    ancestors : [],
    parent : null,
    // Current view(main) information
    view : null,
    // Message and Indicator
    myMessage   : null,
    myIndicator : null
  }),
  ///////////////////////////////////////////
  computed : {
    //---------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-current-as-home" : this.CurrentIsHome,
        "is-current-no-home" : !this.CurrentIsHome
      },this.appClassName)
    },
    //---------------------------------------
    // Status
    //---------------------------------------
    isLoading() {return this.loading || this.isReloading},
    //---------------------------------------
    isChanged() {
      let modMain = this.$store.state.main
      if(_.get(modMain, "status.changed")) {
        return true
      }
      return _.get(this.status, "changed")
    },
    //---------------------------------------
    isSaving()    {return _.get(this.status, "saving")},
    isReloading() {return _.get(this.status, "reloading")},
    //---------------------------------------
    hasActions(){return !_.isEmpty(this.actions)},
    hasView()   {return this.view   ? true : false},
    hasMeta()   {return this.meta   ? true : false},
    hasParent() {return this.parent ? true : false},
    //---------------------------------------
    // Data
    //---------------------------------------
    MetaId ()   {return _.get(this.meta, "id")},
    MetaPath()  {return _.get(this.meta, "ph")},
    //---------------------------------------
    MyHome() {
      let obj = this.meta
      let ans = this.ancestors
      if(!_.isEmpty(ans)) {
        // for /home/xiaobai
        if(1 == ans.length) {
          if("home" == ans[0].nm) {
            return obj
          }
        }
        // for /home/xiaobai/path/to/file
        if("home" == ans[0].nm) {
          return ans[1]
        }
      }
      // for /root
      else if(obj && "root" == obj.nm) {
        return obj
      }
      // Dont't known how to find the home
      return null
    },
    //---------------------------------------
    MyHomeId() {return _.get(this.MyHome, "id")},
    //---------------------------------------
    ParentIsHome() {
      return this.hasParent && this.parent.id == this.MyHomeId
    },
    //---------------------------------------
    CurrentIsHome() {
      return this.hasMeta && this.MetaId == this.MyHomeId
    },
    //---------------------------------------
    // Tipping
    //---------------------------------------
    TheStatus() {
      let mainStatus = _.get(this.$store.state, "main.status")
      let reloading = _.get(mainStatus, "reloading") || this.status.reloading
      return _.assign({}, mainStatus, this.status, {
        exposeHidden : this.myExposeHidden,
        changed      : this.isChanged,
        reloading    : reloading
      })
    },
    StatusText(){
      let st = _.assign({}, this.status)
      if(st.saving) {
        return Ti.I18n.text("i18n:saving")
      }
      if(st.reloading) {
        return Ti.I18n.text("i18n:loading")
      }
    },
    //---------------------------------------
    // Main Module
    //---------------------------------------
    Main() {
      return this.$store.state.main
    },
    //---------------------------------------
    // GUI
    //---------------------------------------
    GuiShown() {
      let ShownSet = _.get(this.setup, "shown")
      if(_.isPlainObject(ShownSet)) {
        let shown = ShownSet[this.viewportMode]
        // Refer onece
        if(_.isString(shown)) {
          shown = ShownSet[shown]
        }
        // Refer twice (I think it is enough for most of cases)
        if(_.isString(shown)) {
          shown = ShownSet[shown]
        }
        return Ti.Util.explainObj(this, shown)
      }
      return {}
    },
    //---------------------------------------
    GuiCanLoading() {
      return _.get(this.setup, "canLoading")
    },
    //---------------------------------------
    GuiLoadingAs() {
      return _.get(this.setup, "loadingAs")
    },
    //---------------------------------------
    GuiLayout() {
      return Ti.Util.explainObj(this, this.layout)
    },
    //---------------------------------------
    GuiSchema() {
      return Ti.Util.explainObj(this, this.schema)
    }
    //---------------------------------------
  },
  ///////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnExposeHidden(eh) {
      this.myExposeHidden = eh
    },
    //--------------------------------------
    OnLogout() {
      this.doLogout()
    },
    //--------------------------------------
    OnCurrentMetaChange({id, path, value}={}) {
      this.openView(id || path || value)
    },
    //--------------------------------------
    OnCurrentDataChange(data){
      Ti.App(this).dispatch("current/changeContent", data);
    },
    //--------------------------------------
    OnUpdateActions(actions) {
      //console.log("OnUpdateAction", actions)
      this.actions = _.cloneDeep(actions)
      Ti.App(this).reWatchShortcut(actions)
    },
    //--------------------------------------
    OnArenaIndicate(info) {
      this.myIndicator = info
    },
    //--------------------------------------
    OnArenaMessage(msg="") {
      this.myMessage = msg
    },
    //--------------------------------------
    async openView(oid) {
      if(!_.isString(oid))
        return

      // Guard it
      let bombed = await Ti.Fuse.fire()
      if(!bombed) {
        return
      }
      // Open It
      let ph = Wn.Io.isFullObjId(oid)
                ? `id:${oid}`
                : oid;
      await Ti.App(this).dispatch("current/reload", ph)
    },
    //--------------------------------------
    async doLogout() {
      let quitPath = Wn.Session.env("QUIT") || "/"
      await Wn.Sys.exec("exit")
      Ti.Be.Open(quitPath, {target:"_self", delay:0})
    }
    //--------------------------------------
  },
  //////////////////////////////////////////////
  watch : {
    "meta" : async function(newVal, oldVal) {
      let newId = _.get(newVal, "id")
      let oldId = _.get(oldVal, "id")
      let isSameId = _.isEqual(newId, oldId) 
      if(newVal) {
        //console.log("metaChanged", newVal, oldVal)
        // Update the ancestors path
        if(!isSameId) {
          await this.reloadAncestors()
        }
        // Reload Current Main
        if(!isSameId || this.isChanged) {
          await this.reloadMain()
          this.pushHistory(newVal)
        }
      }
    }
  },
  ///////////////////////////////////////////
  mounted : async function(){
    //......................................
    await this.reloadSidebar()
    //......................................
  },
  ///////////////////////////////////////////
  beforeDestroy : function(){
    
  }
  ///////////////////////////////////////////
}
Ti.Preload("/a/load/wn.manager/wn-manager.mjs", _M);
})();
//============================================================
// JOIN: zh-cn/hmaker.i18n.json
//============================================================
Ti.Preload("ti/i18n/zh-cn/hmaker.i18n.json", {
  "com-form": "表单",
  "com-label": "标签",
  "com-list": "列表",
  "hm-type-Array": "数组",
  "hm-type-Boolean": "布尔",
  "hm-type-Group": "字段分组",
  "hm-type-Integer": "整数",
  "hm-type-Number": "数字",
  "hm-type-Object": "对象",
  "hm-type-String": "文本",
  "hm-type-icons": {
    "Array": "zmdi-format-list-bulleted",
    "Boolean": "zmdi-toll",
    "Group": "zmdi-collection-bookmark",
    "Integer": "zmdi-n-6-square",
    "Number": "zmdi-input-svideo",
    "Object": "zmdi-toys",
    "String": "zmdi-translate"
  },
  "hmaker-com-conf-blank": "请选择一个控件设置其详情",
  "hmaker-com-type-blank": "选择一个控件",
  "hmaker-edit-form-del-group-all": "组以及全部字段",
  "hmaker-edit-form-del-group-confirm": "您是要删除组以及其内的全部字段，还是仅是组？",
  "hmaker-edit-form-del-group-only": "仅是组",
  "hmaker-edit-form-field-nil": "请选择一个字段编辑详情",
  "hmaker-edit-form-new-field": "新字段",
  "hmaker-edit-form-new-field-e0": "字段名不能以数字开头，内容只能为小写英文字母数字和下划线",
  "hmaker-edit-form-new-field-e1": "字段【${val}】已存在，请另选一个名称",
  "hmaker-edit-form-new-field-tip": "请输入新字段名（只能为小写英文字母数字和下划线）",
  "hmaker-edit-form-new-group": "新分组",
  "hmaker-edit-form-new-group-tip": "请输入新分组名",
  "hmaker-edit-form-nil-field": "请先选择一个字段",
  "hmaker-edit-form-not-current": "请选择一个字段或者字段组",
  "hmaker-layout-cols": "列布局",
  "hmaker-layout-rows": "行布局",
  "hmaker-layout-tabs": "标签布局",
  "hmaker-nav-blank-item": "请选择一个导航项目编辑",
  "hmaker-nav-k-display": "链接显示内容",
  "hmaker-nav-k-icon": "链接图标",
  "hmaker-nav-k-title": "链接文字",
  "hmaker-nav-k-type": "链接类型",
  "hmaker-nav-k-value": "链接目标",
  "hmaker-nav-tp-dispatch": "方法调用",
  "hmaker-nav-tp-href": "外部链接",
  "hmaker-nav-tp-page": "站点页面",
  "hmaker-site-k-apiBase": "接口路径",
  "hmaker-site-k-base": "资源路径",
  "hmaker-site-k-captcha": "验证码路径",
  "hmaker-site-k-domain": "所属域",
  "hmaker-site-k-entry": "着陆页",
  "hmaker-site-prop": "站点属性",
  "hmaker-site-state": "站点全局配置",
  "hmaker-site-state-actions": "全局动作表",
  "hmaker-site-state-apis": "接口集",
  "hmaker-site-state-blocks": "预定义布局",
  "hmaker-site-state-general": "通用配置",
  "hmaker-site-state-nav": "全局导航条",
  "hmaker-site-state-router": "页面路由",
  "hmaker-site-state-schema": "预定义控件",
  "hmaker-site-state-utils": "扩展函数",
  "hmaker-site-tree": "站点结构",
  "hmaker-site-tree-loading": "正在加载站点结构...",
  "hmk-adjustDelay": "调整延迟",
  "hmk-aspect": "外观",
  "hmk-autoI18n": "国际化",
  "hmk-behavior": "行为",
  "hmk-blankAs": "空白样式",
  "hmk-breakLine": "维持换行",
  "hmk-currentTab": "当前标签",
  "hmk-data": "数据",
  "hmk-dict": "数据字典",
  "hmk-editable": "可编辑",
  "hmk-field-checkEquals": "检查相等",
  "hmk-field-com": "编辑控件",
  "hmk-field-defaultAs": "默认值",
  "hmk-field-disabled": "失效条件",
  "hmk-field-height": "高度",
  "hmk-field-hidden": "隐藏条件",
  "hmk-field-icon": "图标",
  "hmk-field-name": "键名",
  "hmk-field-serializer": "自定义保存",
  "hmk-field-tip": "提示说明",
  "hmk-field-title": "显示名",
  "hmk-field-transformer": "自定义转换",
  "hmk-field-type": "类型",
  "hmk-field-width": "宽度",
  "hmk-fieldStatus": "字段状态",
  "hmk-fields": "字段",
  "hmk-fields-advance": "高级",
  "hmk-fields-general": "基本",
  "hmk-form-data": "数据源",
  "hmk-form-height": "表单高度",
  "hmk-form-onlyFields": "仅声明字段",
  "hmk-form-width": "表单宽度",
  "hmk-format": "格式化",
  "hmk-height": "控件高度",
  "hmk-href": "超链接",
  "hmk-icon": "表单图标",
  "hmk-measure": "尺寸",
  "hmk-mode": "显示方式",
  "hmk-mode-all": "全部",
  "hmk-mode-tab": "标签",
  "hmk-newTab": "新窗口",
  "hmk-placeholder": "占位文本",
  "hmk-prefixIcon": "前缀图标",
  "hmk-prefixText": "前缀文字",
  "hmk-spacing": "间距",
  "hmk-spacing-comfy": "舒适",
  "hmk-spacing-tiny": "紧凑",
  "hmk-suffixIcon": "后缀图标",
  "hmk-suffixText": "后缀文字",
  "hmk-tabAt": "标签位置",
  "hmk-tabAt-bottom-center": "下部居中",
  "hmk-tabAt-bottom-left": "下部居左",
  "hmk-tabAt-bottom-right": "下部居右",
  "hmk-tabAt-top-center": "上部居中",
  "hmk-tabAt-top-left": "上部居左",
  "hmk-tabAt-top-right": "上部居右",
  "hmk-title": "表单标题",
  "hmk-trimed": "修剪空白",
  "hmk-value": "输入值",
  "hmk-valueMaxWidth": "值最大宽度",
  "hmk-width": "控件宽度"
});
//============================================================
// JOIN: zh-cn/ti-datetime.i18n.json
//============================================================
Ti.Preload("ti/i18n/zh-cn/ti-datetime.i18n.json", {
  "Apr": "四月",
  "Aug": "八月",
  "Dec": "十二月",
  "Feb": "二月",
  "Fri": "周五",
  "Friday": "星期五",
  "Jan": "一月",
  "Jul": "七月",
  "Jun": "六月",
  "Mar": "三月",
  "May": "五月",
  "Mon": "周一",
  "Monday": "星期一",
  "Nov": "十一月",
  "Oct": "十月",
  "Sat": "周六",
  "Saturday": "星期六",
  "Sep": "九月",
  "Sun": "周日",
  "Sunday": "星期日",
  "Thu": "周四",
  "Thursday": "星期四",
  "Tue": "周二",
  "Tuesday": "星期二",
  "Wed": "周三",
  "Wednesday": "星期三",
  "blank-date": "请选择日期",
  "blank-date-range": "请选择日期范围",
  "blank-datetime": "请选择日期时间",
  "blank-month": "请选择月份",
  "blank-time": "请选择时间",
  "blank-time-range": "请选择时间范围",
  "cal": {
    "abbr": {
      "Apr": "四月",
      "Aug": "八月",
      "Dec": "十二",
      "Feb": "二月",
      "Jan": "一月",
      "Jul": "七月",
      "Jun": "六月",
      "Mar": "三月",
      "May": "五月",
      "Nov": "十一",
      "Oct": "十月",
      "Sep": "九月"
    },
    "d-range-beyond-days": "${yy0}年${MM0}月${dd0}至${dd1}日",
    "d-range-beyond-months": "${yy0}年${MM0}月${dd0}日至${MM1}月${dd1}日",
    "d-range-beyond-years": "${yy0}年${MM0}月${dd0}日至${yy1}年${MM1}月${dd1}日",
    "d-range-in-same-day": "${yy0}年${MM0}月${dd0}日全天",
    "m-range-beyond-months": "${yy0}年${MT0}至${MT1}",
    "m-range-beyond-years": "${yy0}年${MT0}至${yy1}年${MT1}",
    "week": ["日", "一", "二", "三", "四", "五", "六"]
  },
  "du-in-min": "${n}分钟",
  "time": {
    "any-time": "yyyy年M月d日",
    "in-year": "M月d日",
    "past-in-min": "刚刚",
    "past-in-hour": "${min}分钟前",
    "past-in-day": "${hour}小时前",
    "past-in-week": "${day}天前",
    "future-in-min": "即将",
    "future-in-hour": "${min}分钟后",
    "future-in-day": "${hour}小时后",
    "future-in-week": "${day}天后"
  },
  "time-begin": "开始时间",
  "time-end": "结束时间",
  "today": "今天"
});
//============================================================
// JOIN: zh-cn/ti-obj-creation.i18n.json
//============================================================
Ti.Preload("ti/i18n/zh-cn/ti-obj-creation.i18n.json", {
  "toc-auto-type": "全部类型",
  "toc-free": "请输入对象完整名称，包括扩展名，譬如 `myfile.xml`",
  "toc-tip": "新对象名称"
});
//============================================================
// JOIN: zh-cn/ti-text-editor.i18n.json
//============================================================
Ti.Preload("ti/i18n/zh-cn/ti-text-editor.i18n.json", {
  "wordp-h0": "正文",
  "wordp-h1": "标题 1",
  "wordp-h2": "标题 2",
  "wordp-h3": "标题 3",
  "wordp-h4": "标题 4",
  "wordp-h5": "标题 5",
  "wordp-h6": "标题 6",
  "wordp-heading": "标题级别",
  "wordp-link": "超链接",
  "wordp-nil-sel": "请先选择一段文字"
});
//============================================================
// JOIN: zh-cn/ti-text-json.i18n.json
//============================================================
Ti.Preload("ti/i18n/zh-cn/ti-text-json.i18n.json", {
  "json-Array": "数组",
  "json-Boolean": "布尔",
  "json-Float": "小数",
  "json-Integer": "整数",
  "json-Nil": "空值",
  "json-Number": "数字",
  "json-Object": "对象",
  "json-String": "字符串",
  "json-new-key": "请输入一个新键名"
});
//============================================================
// JOIN: zh-cn/web.i18n.json
//============================================================
Ti.Preload("ti/i18n/zh-cn/web.i18n.json", {
  "account-filter-tip": "请输入账号名过滤",
  "account-meta-tip": "请选择一个账号查看详情",
  "address-consignee": "收货人",
  "address-empty-list": "未设置任何收货地址",
  "address-is-dft": "默认收货地址",
  "address-k-city": "城市/区",
  "address-k-consignee": "收货人姓名",
  "address-k-country": "国家",
  "address-k-dftaddr": "默认地址",
  "address-k-email": "邮箱",
  "address-k-phone": "电话",
  "address-k-postcode": "邮编",
  "address-k-street": "街道",
  "address-k-title": "地址",
  "address-k-uid": "用户",
  "address-set-dft": "设为默认地址",
  "address-shipping-add": "添加收货地址",
  "auth-bind": "绑定",
  "auth-bind-email-title": "绑定邮箱",
  "auth-bind-phone-title": "绑定手机",
  "auth-blank-email": "邮箱不能为空",
  "auth-blank-name": "名称不能为空",
  "auth-blank-name-passwd": "名称或者密码不能为空",
  "auth-blank-phone": "手机号不能为空",
  "auth-doing": "正在验证",
  "auth-email-tip": "邮箱地址",
  "auth-email-title": "邮件密码登录/注册",
  "auth-email-vcode": "邮件密码",
  "auth-email-vcode-get": "获取邮件密码",
  "auth-go-email": "邮件密码登录/注册",
  "auth-go-passwd": "账号密码登录",
  "auth-go-phone": "短信密码登录/注册",
  "auth-login": "登录",
  "auth-login-NoSaltedPasswd": "你还未初始化您的登录密码，请切换至【${ta?验证码}】登录，之后前往【用户中心 > 安全设置】初始化您的登录密码，谢谢",
  "auth-login-or-signup": "登录/注册",
  "auth-ok": "账号验证通过",
  "auth-passwd-getback": "找回密码",
  "auth-passwd-name-email-tip": "邮箱地址/登录名",
  "auth-passwd-name-phone-tip": "手机号/登录名",
  "auth-passwd-tip": "密码",
  "auth-passwd-title": "账号密码登录",
  "auth-phone-email-get": "获取邮箱验证码",
  "auth-phone-tip": "手机号",
  "auth-phone-title": "短信密码登录/注册",
  "auth-phone-vcode": "短信密码",
  "auth-phone-vcode-get": "获取短信密码",
  "auth-reset-passwd-again": "再次重置密码",
  "auth-reset-passwd-btn-lack": "请填写必要信息",
  "auth-reset-passwd-btn-ready": "立即重置密码",
  "auth-reset-passwd-btn-short": "密码至少6位",
  "auth-reset-passwd-btn-unmatch": "密码两次输入不一致",
  "auth-reset-passwd-by-email": "用邮箱重置密码",
  "auth-reset-passwd-by-email-sent": "已经向您的注册邮箱 ${email} 发送了邮件密码",
  "auth-reset-passwd-by-email-tip": "请输入注册邮箱地址",
  "auth-reset-passwd-by-passwd": "用旧密码重置密码",
  "auth-reset-passwd-by-phone": "用手机重置密码",
  "auth-reset-passwd-by-phone-sent": "已经向您的手机 ${phone} 发送了短信密码",
  "auth-reset-passwd-by-phone-tip": "请输入注册手机号码",
  "auth-reset-passwd-ing": "正在重置密码...",
  "auth-reset-passwd-lack-email": "请输入注册邮箱地址",
  "auth-reset-passwd-lack-phone": "请输入注册手机号",
  "auth-reset-passwd-new": "新密码（最少6位）",
  "auth-reset-passwd-ok": "密码已经重置，下次登录时生效",
  "auth-reset-passwd-old": "旧密码",
  "auth-reset-passwd-ren": "再次确认",
  "auth-sending-vcode": "正在发送验证码",
  "auth-sent-ok": "${ta?验证码}已发出，请在${by}查收，${min}分钟内有效",
  "auth-ta-by-email": "邮箱里",
  "auth-ta-by-phone": "手机上",
  "auth-ta-email": "邮件密码",
  "auth-ta-phone": "手机密码",
  "auth-vcode-delay": "${sec} 秒后重新发送",
  "auth-vcode-lost": "收不到验证码？",
  "e-cmd-www_passwd-Blank": "新密码为空",
  "e-cmd-www_passwd-CheckBlankAccount": "空账户",
  "e-cmd-www_passwd-CheckBlankCode": "空验证码",
  "e-cmd-www_passwd-CheckCodeFail": "验证码错误",
  "e-cmd-www_passwd-CheckFailed": "校验错误",
  "e-cmd-www_passwd-CheckWeirdAccount": "诡异的账户",
  "e-cmd-www_passwd-InvalidNewPasswd": "新密码无效",
  "e-cmd-www_passwd-LackTarget": "缺少重置目标",
  "e-cmd-www_passwd-TooShort": "新密码太短",
  "e-cmd-www_passwd-nopvg": "没有重置密码的权限",
  "e-www-invalid-captcha": "${ta?验证码}错误",
  "e-www-login-invalid-passwd": "账号密码错误",
  "e-www-login-noexists": "账号不存在",
  "me-k-account": "账户",
  "me-k-avatar": "头像",
  "me-k-city": "城市",
  "me-k-country": "国家",
  "me-k-email": "邮箱",
  "me-k-login": "最后登录",
  "me-k-nickname": "用户昵称",
  "me-k-nm": "登录名",
  "me-k-phone": "手机号",
  "me-k-sex": "性别",
  "mine": "我的",
  "my-favors": "我的收藏",
  "my-favors-blog": "收藏的博客",
  "my-favors-goods": "收藏的商品",
  "my-favors-posts": "收藏的文章",
  "my-favors-spots": "收藏的景点",
  "my-favors-video": "收藏的视频",
  "my-orders": "我的订单",
  "my-orders-shop": "购物订单",
  "my-orders-video": "视频订单",
  "my-passwd": "重置密码",
  "my-profile": "我的资料",
  "my-shipping-address": "收货地址",
  "my-shopping-car": "购物车",
  "or-st-dn": "完成",
  "or-st-fa": "支付失败",
  "or-st-nw": "提交订单",
  "or-st-ok": "支付成功",
  "or-st-sp": "已发货",
  "or-st-wt": "待支付",
  "order-filter-tip": "请输入订单ID查询",
  "order-k-accounts": "用户库",
  "order-k-buyer_id": "买家",
  "order-k-currency": "货币单位",
  "order-k-dn_at": "完成时间",
  "order-k-fa_at": "支付失败",
  "order-k-fee": "支付金额",
  "order-k-id": "订单号",
  "order-k-ok_at": "支付成功",
  "order-k-pay_id": "支付单",
  "order-k-pay_tp": "支付类型",
  "order-k-payment": "支付信息",
  "order-k-price": "订单金额",
  "order-k-pro-amount": "购买数量",
  "order-k-pro-price": "单价",
  "order-k-pro-subtotal": "小计",
  "order-k-pro-title": "商品",
  "order-k-products": "商品信息",
  "order-k-seller": "卖家",
  "order-k-sp_at": "发货时间",
  "order-k-st": "订单状态",
  "order-k-title": "订单标题",
  "order-k-wt_at": "支付时间",
  "passwd-invalid-char": "密码只能包括英文数字/大小写字母/以及特殊字符",
  "passwd-sl-1": "弱",
  "passwd-sl-2": "较弱",
  "passwd-sl-3": "中",
  "passwd-sl-4": "较强",
  "passwd-sl-5": "强",
  "passwd-tip": "请输入最少6位的英文数字/大小写字母/特殊字符的组合",
  "pay-by-free": "免费",
  "pay-by-paypal": "PayPal",
  "pay-by-wx-jsapi": "微信JSAPI",
  "pay-by-wx-qrcode": "微信扫码",
  "pay-by-wx-scan": "微信付款码",
  "pay-by-zfb-qrcode": "支付宝扫码",
  "pay-by-zfb-scan": "支付宝付款码",
  "pay-checkout-it-amount": "数量",
  "pay-checkout-it-name": "商品名称",
  "pay-checkout-it-price": "单价",
  "pay-checkout-it-subtotal": "小计",
  "pay-checkout-tip": "请确认你购买的商品数量和金额",
  "pay-paypal": "PayPal",
  "pay-proceed-check": "检查支付结果",
  "pay-proceed-ing": "正在检查...",
  "pay-re-fail": "支付失败",
  "pay-re-nil": "支付结果是一只薛定谔的猫",
  "pay-re-ok": "支付成功",
  "pay-re-wait": "等待支付中",
  "pay-step-checkout-title": "确认订单",
  "pay-step-choose-nil": "☝ 请选择上面的一个支付方式 👆",
  "pay-step-choose-tip": "您可以选择下面任意一种支付方式支付本订单",
  "pay-step-choose-tip2": "您将使用${val}支付本订单",
  "pay-step-choose-title": "支付方式",
  "pay-step-choose-title2": "选择支付方式",
  "pay-step-done-title": "完成",
  "pay-step-proceed-create-order": "正在创建订单...",
  "pay-step-proceed-fetch-order": "正在获取订单...",
  "pay-step-proceed-nil": "您未选择任何支付方式",
  "pay-step-proceed-tip": "使用${val}支付本订单",
  "pay-step-proceed-title": "支付",
  "pay-tip-wx-qrcode": "请于15分钟内用微信扫一扫付款码",
  "pay-tip-zfb-qrcode": "请于15分钟内用支付宝扫一扫付款码",
  "pay-title": "支付流程",
  "pay-wx": "微信支付",
  "pay-zfb": "支付宝",
  "paypal-approve-tip": "已经在新标签里为您打开了PayPal支付页面，如果没有打开，请点击☝上面的图标。支付完毕，页面会自动感知到，如果没有反应，试着点击👇下面的【检查支付结果】按钮。",
  "profile-title": "我的基本信息",
  "shop-basket-clean-confirm": "您确定要清空购物车内全部商品吗？这是一个不能撤回的操作。"
});
//============================================================
// JOIN: zh-cn/wn-manager.i18n.json
//============================================================
Ti.Preload("ti/i18n/zh-cn/wn-manager.i18n.json", {
  "ti-loading": "加载中...",
  "wn-adaptlist": "对象浏览器",
  "wn-create-fail": "创建失败",
  "wn-create-invalid": "新对象名称不能包括非法字符",
  "wn-create-ok": "创建成功",
  "wn-create-too-long": "新对象名称过长",
  "wn-del-item": "正在删除: \"${name}\"",
  "wn-del-no-empty-folder": "目录\"${nm}\"不是空的，您是否要全部删除？点击\"否\"跳过",
  "wn-del-none": "请选择至少一个文件进行删除!",
  "wn-del-ok": "已有 ${N} 个对象被移除",
  "wn-download-dir": "对象 \"${nm}\" 是一个目录，点击\"继续\"将跳过它并下载下一个文件，点击\"终止\"将结束本次操作!",
  "wn-download-none": "请选择至少一个文件进行下载!",
  "wn-download-too-many": "即将逐个下载 ${N} 个文件，继续吗？",
  "wn-expose-hidden-off": "不显示隐藏的对象",
  "wn-expose-hidden-on": "显示隐藏的对象",
  "wn-gui": "通用布局界面",
  "wn-obj-preview": "对象预览",
  "wn-obj-puretext": "纯文本编辑器",
  "wn-obj-single-com": "单控件测试套",
  "wn-publish-done": "发布成功",
  "wn-publish-to-nil": "未设置发布目标",
  "wn-publish-to-noexist": "发布目标不存在",
  "wn-rename": "重命名对象 \"${name}\"",
  "wn-rename-fail": "重命名失败",
  "wn-rename-invalid": "名称不能包括非法字符",
  "wn-rename-none": "请选择一个文件重命名!",
  "wn-rename-ok": "重命名成功",
  "wn-rename-suffix-changed": "您的文件后缀名发生变化，您需要自动为您补全原来的后缀吗？",
  "wn-rename-too-long": "名称过长",
  "wn-thing-manager": "数据管理器",
  "wn-view-opening": "正在加载界面..."
});
//============================================================
// JOIN: zh-cn/wn-obj-preview.i18n.json
//============================================================
Ti.Preload("ti/i18n/zh-cn/wn-obj-preview.i18n.json", {
  "wop-fullscreen-enter": "进入全屏",
  "wop-fullscreen-quit": "退出全屏"
});
//============================================================
// JOIN: zh-cn/wn-thing.i18n.json
//============================================================
Ti.Preload("ti/i18n/zh-cn/wn-thing.i18n.json", {
  "thing-clean": "清空回收站",
  "thing-cleaning": "正在清空...",
  "thing-content": "对象内容",
  "thing-content-hide": "隐藏内容",
  "thing-content-show": "显示内容",
  "thing-create": "创建新对象",
  "thing-create-in-recyclebin": "请先退出回收站，再创建新对象",
  "thing-enter-recyclebin": "打开回收站",
  "thing-files": "对象文件表",
  "thing-files-hide": "隐藏文件表",
  "thing-files-show": "显示文件表",
  "thing-filter-kwdplhd": "请输入查询条件",
  "thing-leave-recyclebin": "退出回收站",
  "thing-meta": "对象属性",
  "thing-meta-hide": "隐藏属性",
  "thing-meta-show": "显示属性",
  "thing-recycle-bin": "回收站",
  "thing-restore": "恢复选中",
  "thing-restore-none": "请先选择要恢复的数据",
  "thing-restoring": "正在恢复..."
});
//============================================================
// JOIN: zh-cn/_net.i18n.json
//============================================================
Ti.Preload("ti/i18n/zh-cn/_net.i18n.json", {
  "net-ct": "创建时间",
  "net-flt-nil": "查找视频名称",
  "net-vod-add-video": "添加视频",
  "net-vod-cate": "视频分类",
  "net-vod-du-long": "长视频",
  "net-vod-du-short": "短视频",
  "net-vod-du-tv": "剧集视频",
  "net-vod-duration": "视频时长",
  "net-vod-size": "视频大小",
  "net-vod-video-nil": "请选择一个视频查看详情"
});
//============================================================
// JOIN: zh-cn/_ti.i18n.json
//============================================================
Ti.Preload("ti/i18n/zh-cn/_ti.i18n.json", {
  "add": "添加",
  "add-item": "添加新项",
  "amount": "数量",
  "attachment": "附件",
  "batch-none": "请从下面列表中选择至少一个对象进行批量更新",
  "batch-update": "批量更新...",
  "blank": "空白",
  "blank-to-edit": "请选择要编辑的项目",
  "brief": "摘要",
  "buy": "购买",
  "buy-now": "立即购买",
  "cancel": "取消",
  "cancel-all": "取消选中",
  "candidate": "备选项",
  "captcha": "验证码",
  "captcha-chagne": "换一张",
  "captcha-tip": "请输入图中的验证码",
  "checked": "已选中",
  "choose": "选择",
  "choose-file": "选择文件",
  "choose-obj": "选择对象",
  "clean": "清理",
  "clear": "清除",
  "close": "关闭",
  "confirm": "确认",
  "console": "控制台",
  "content": "内容",
  "continue": "继续",
  "create": "新建",
  "create-now": "立即创建",
  "creating": "正在创建...",
  "debug": "调试",
  "default": "默认",
  "del": "删除",
  "del-checked": "删除选中",
  "del-ing": "正在删除...",
  "del-none": "请从下面列表中选择至少一个对象进行删除",
  "desktop": "桌面",
  "detail": "详情",
  "doing": "正在执行...",
  "download": "下载",
  "download-to-local": "下载到本地",
  "drop-file-here-to-upload": "拖拽文件至此以便上传",
  "drop-here": "拖拽文件至此",
  "e-auth-account-noexists": "账户不存在",
  "e-auth-home-forbidden": "账户不具备进入主目录的权限",
  "e-auth-login-NoPhoneOrEmail": "错误的手机号或邮箱地址",
  "e-auth-login-NoSaltedPasswd": "未设置合法的密码",
  "e-auth-login-invalid-passwd": "账户密码未通过校验",
  "e-io-obj-exists": "但是对象已然存在",
  "e-io-obj-noexists": "对象其实并不存在",
  "e-io-obj-noexistsf": "对象[${nm}]其实并不存在",
  "edit": "编辑",
  "edit-com": "编辑控件",
  "empty": "空",
  "empty-data": "无数据",
  "error": "错误",
  "export-data": "导出数据...",
  "fail": "失败",
  "false": "否",
  "favorites": "收藏",
  "female": "女",
  "filter": "过滤",
  "find": "查找",
  "find-data": "查找数据",
  "home": "主目录",
  "i-known": "我知道了",
  "icon": "图标",
  "icon-code-tip": "请输入图标代码，如 zmdi-case",
  "import-data": "导入数据...",
  "info": "信息",
  "input": "输入",
  "input-tags": "输入标签",
  "lat": "北纬",
  "lng": "东经",
  "loading": "加载中...",
  "login": "登录",
  "logout": "退出",
  "logout-ing": "正在注销...",
  "male": "男",
  "me": "我",
  "media": "媒体",
  "meta": "元数据",
  "mine": "我的",
  "modal": "模式",
  "more": "更多",
  "msg": "消息",
  "name": "名称",
  "new-item": "新项目",
  "next": "下一步",
  "nil": "无",
  "nil-obj": "请选择一个对象",
  "no": "否",
  "no-saved": "您有未保存的数据",
  "no-selected": "未选择",
  "no-title": "无标题",
  "obj": "对象",
  "off": "关",
  "ok": "确定",
  "on": "开",
  "open": "打开",
  "open-newtab": "在新标签打开",
  "others": "其他",
  "paging-change-pgsz": "当前每页有${pgsz}条记录，您想修改为：",
  "paging-change-pgsz-invalid": "页大小必须是整数数字，而且必须大于0，可您... -_-!",
  "paging-change-pn": "当前第${pn}页，您想跳转到：（请输入 1 至 ${pgc} 之间的数字）",
  "paging-change-pn-invalid": "页码必须是整数数字，而且必须为 1 至 ${pgc} 之间的数字",
  "paging-first": "首页",
  "paging-last": "尾页",
  "paging-next": "后一页",
  "paging-prev": "前一页",
  "paging-sum": "共${pgc}页${sum}条记录，当前${count}/${pgsz}",
  "passwd": "密码",
  "passwd-reset": "重置密码",
  "path": "路径",
  "phone": "手机",
  "prev": "上一步",
  "price": "价格",
  "profile": "资料",
  "profile-edit": "编辑资料",
  "prompt": "询问",
  "properties": "属性",
  "publish": "发布",
  "publishing": "正在发布...",
  "refresh": "刷新",
  "reloading": "重新加载数据...",
  "remove": "移除",
  "removing": "正在移除...",
  "rename": "重命名...",
  "renaming": "正在重命名...",
  "revoke": "撤销",
  "revoke-change": "撤销修改",
  "save": "保存",
  "save-change": "保存修改",
  "save-done": "保存成功",
  "save-now": "立即保存",
  "saving": "正在保存...",
  "score": "评分",
  "score-count": "打分人数",
  "select": "选择",
  "select-all": "全部选中",
  "settings": "设置",
  "source-code": "源代码",
  "stop": "停止",
  "structure": "结构",
  "success": "成功",
  "tablet": "平板",
  "terminal": "终端",
  "terminate": "终止",
  "text": "文字",
  "timestamp": "时间戳",
  "title": "标题",
  "total-count": "共 ${nb?0} ${unit?项}",
  "trace": "跟踪",
  "track": "消息",
  "true": "是",
  "type": "类型",
  "under-construction": "正在施工中",
  "unknown": "未知",
  "upload": "上传",
  "upload-done": "文件上传已完成",
  "upload-file": "上传文件...",
  "upload-nofinished": "文件上传还没有完成",
  "uploading": "正在上传",
  "value": "值",
  "view": "查看",
  "view-resource": "查看源代码",
  "warn": "警告",
  "yes": "是"
});
//============================================================
// JOIN: zh-cn/_wn.i18n.json
//============================================================
Ti.Preload("ti/i18n/zh-cn/_wn.i18n.json", {
  "wn-edit-com-nil": "默认为标签控件",
  "wn-en-his-ct": "创建时间",
  "wn-en-his-flt-tip": "请输入用户ID或者名称过滤",
  "wn-en-his-mor": "操作细节",
  "wn-en-his-opt": "操作",
  "wn-en-his-tar": "目标",
  "wn-en-his-tid": "目标ID",
  "wn-en-his-tnm": "目标名",
  "wn-en-his-ttp": "目标类型",
  "wn-en-his-uid": "用户ID",
  "wn-en-his-unm": "用户名",
  "wn-en-his-usr": "用户",
  "wn-en-his-utp": "用户类型",
  "wn-invalid-mimes": "不支持的文件内容类型 \"${current}\"，仅能支持 \"${supports}\"",
  "wn-invalid-types": "不支持的文件扩展名 \"${current}\"，仅能支持 \"${supports}\"",
  "wn-key-c": "创建者",
  "wn-key-ct": "创建时间",
  "wn-key-d0": "D0",
  "wn-key-d1": "D1",
  "wn-key-data": "数据",
  "wn-key-duration": "时长",
  "wn-key-expi": "过期时间",
  "wn-key-g": "主组",
  "wn-key-grp-advance": "高级",
  "wn-key-grp-basic": "基本",
  "wn-key-grp-customized": "自定义",
  "wn-key-grp-more": "更多",
  "wn-key-grp-others": "其他",
  "wn-key-grp-privilege": "权限",
  "wn-key-grp-thumb": "缩略图",
  "wn-key-grp-timestamp": "时间戳",
  "wn-key-height": "高",
  "wn-key-icon": "图标",
  "wn-key-id": "ID",
  "wn-key-len": "大小",
  "wn-key-lm": "修改",
  "wn-key-m": "修改者",
  "wn-key-md": "基本权限",
  "wn-key-mime": "MIME",
  "wn-key-nm": "对象名",
  "wn-key-ph": "路径",
  "wn-key-pid": "父对象",
  "wn-key-pvg": "定制权限",
  "wn-key-race": "族类",
  "wn-key-sha1": "SHA1",
  "wn-key-thumb": "缩略图",
  "wn-key-title": "标题",
  "wn-key-tp": "类型",
  "wn-key-width": "宽",
  "wn-obj-nosaved": "您有未保存的对象",
  "wn-race-DIR": "目录",
  "wn-race-FILE": "文件",
  "wn-th-acc-pwd-choose-none": "请选择要重置密码的账号（可多选）",
  "wn-th-acc-pwd-done": "已经为${n}名用户重置了密码",
  "wn-th-acc-pwd-invalid": "密码中不得包含单双引号星号等非法字符",
  "wn-th-acc-pwd-reset-tip": "将密码重置为",
  "wn-th-acc-pwd-too-short": "您输入的密码过短，不能少于6位，最好为数字字母以及特殊字符的组合",
  "wn-th-recount-media": "重新计算当前文件数量",
  "wn-th-recount-media-done": "当前文件数量: ${n}"
});
////////////////////////////////////////////////////////////
// The End
})();