// Pack At: 2021-02-27 03:23:59
// ============================================================
// OUTPUT TARGET IMPORTS
// ============================================================
(function(){
window.TI_PACK_EXPORTS = {};
// ============================================================
// LV1 : imports
// ============================================================
// ============================================================
// EXPORT 'br.blot.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/markdown/richeditor2/blot/br.blot.mjs'] = (function(){
let Embed = Quill.import('blots/embed');

class BrBlot extends Embed {
  static create() {
    let node = super.create();
    
    return node;
  }

  static formats(domNode) {
    return domNode.getAttribute("md-break")
  }

  format(name, value) {
    if (name !== this.statics.blotName || !value) {
      super.format(name, value);
    } else {
      this.domNode.setAttribute('md-break', true);
    }
  }

}
BrBlot.blotName = 'breakLine';
BrBlot.tagName = 'SPAN';

return {BrBlot};
})()
// ============================================================
// LV2 : imports - (1)
// ============================================================
// ============================================================
// EXPORT 'm-obj-axis.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/obj-axis/m-obj-axis.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////
  mutations : {
    //----------------------------------------
    resetAll(state) {
      state.meta = undefined
      state.ancestors = undefined
      state.parent = undefined
      state.status = {}
    },
    //----------------------------------------
    setMeta(state, meta) {
      state.meta = meta
    },
    //-------------------------------------------
    setAncestors(state, ancestors=[]) {
      state.ancestors = _.concat(ancestors)
      state.parent = _.last(state.ancestors)
    },
    //-------------------------------------------
    setParent(state, parent) {
      state.parent = parent
    },
    //----------------------------------------
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    }
    //----------------------------------------
  }
  ////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'field_display.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/support/field_display.mjs'] = (function(){
//////////////////////////////////////////////
function _render_iteratee({
  varName,
  vars, 
  matched
} = {}) {
  if(matched.startsWith("$$")) {
    return matched.substring(1)
  }
  // ${=xxx}  get value from vars
  // ${pos.x} get value from itemData
  let m = /^(=)?([^?]+)(\?(.*))?$/.exec(varName)
  let ctx = "=" == m[1]
    ? vars.vars
    : vars.itemData;
  
  let vkey = _.trim(m[2])
  let vdft = Ti.Util.fallbackNil(_.trim(m[4]), matched)
  let rev = Ti.Util.getOrPick(ctx, vkey)
  return Ti.Util.fallback(rev, vdft)
}
//////////////////////////////////////////////
// cx = {vars, itemData, value}
function __eval_com_conf_item(val, cx={}) {
  // String valu3
  if(_.isString(val)) {
    //........................................
    // Function call
    //........................................
    let m = /^=>(.+)$/.exec(val)
    if(m) {
      let func = Ti.Util.genInvoking(m[1], {
        context: {
          ...cx,
          item: cx.itemData
        },
        partial: "left"
      })
      return func()
    }
    //........................................
    // Quick Value
    //........................................
    // VAL: evalue the special value, like:
    //  - "${=value}"
    //  - "${=..}"
    //  - "${=varName}"
    m = /^\$\{=([^${}=]+)\}$/.exec(val)
    if(m) {
      let varName = _.trim(m[1])
      // Whole Context
      if(".." == varName) {
        return cx.itemData
      }
      // Value
      if("value" == varName) {
        return cx.value
      }
      // In var set
      else {
        return Ti.Util.fallback(_.get(cx.vars, varName), val)
      }
    }
    //........................................
    // String Template
    //........................................
    // VAL as template (xxx)?xxx${nn}
    // the placeholder support:
    //  - "${=varName}"
    //  - "${info.age}"
    m = /^(\((.+)\)\?)?(.+)$/.exec(val)
    if(m){
      let preKey = _.trim(m[2])
      let tmpl = _.trim(m[3])
      //console.log("haha", preKey, tmpl)
      // Only `itemData` contains the preKey, render the value
      if(preKey) {
        // "(age)?xxx"  :: get from itemDAta
        if(_.get(cx.itemData, preKey)) {
          return Ti.S.renderBy(tmpl, cx, {
            iteratee: _render_iteratee
          })
        }
        return null
      }
      // Render the value
      return Ti.S.renderBy(tmpl, cx, {
        iteratee: _render_iteratee
      })
    }
    //........................................
    // Primary
    //........................................
    return val
  }
  // Object Value
  else if(_.isPlainObject(val)) {
    //........................................
    // Nested Objects
    //........................................
    let obj = {}
    _.forEach(val, (v, k)=>{
      let v2 = __eval_com_conf_item(v, cx)
      if("..." == k) {
        _.assign(obj, v2)
      } else {
        obj[k] = v2
      }
    })
    return obj
  }
  // Array Value
  else if(_.isArray(val)) {
    let list = []
    for(let v of val) {
      let v2 = __eval_com_conf_item(v, cx)
      list.push(v2)
    }
    return list
  }
  // Keep original value
  return val
}
//////////////////////////////////////////////
const FieldDisplay = {
  //------------------------------------------
  evalFieldDisplayItem(displayItem={}, {
    defaultKey
  }={}){
    //........................................
    const __gen_dis = ()=>{
      //......................................
      // Guard it
      if(Ti.Util.isNil(displayItem)) {
        return defaultKey 
          ? { key:defaultKey, comType:"ti-label"}
          : null
      }
      //......................................
      // {key:"xxx", comType:"xxx"}
      if(_.isPlainObject(displayItem)){
        let dis = _.assign({
          key : defaultKey,
          comType : "ti-label",
        }, displayItem)
        if(dis.transformer) {
          const invokeOpt = {
            context: this,
            partial: "right"
          }
          dis.transformer = Ti.Util.genInvoking(dis.transformer, invokeOpt)
        }
        return dis
      }
      //......................................
      // Array to multi key
      if(_.isArray(displayItem)) {
        return {
          key : displayItem,
          comType : "ti-label",
        }
      }
      //......................................
      // Boolean
      if(true === displayItem) {
        return {
          key : defaultKey,
          comType : "ti-label",
        }
      }
      //......................................
      if(_.isString(displayItem)){
        // <icon:zmdi-user:$ClassName>?
        let m = /^<([^:>=]*)(:([^>:]+))?(:([^>:]+))?>(\?)?$/.exec(displayItem)
        if(m) {
          return {
            key       : m[1] || defaultKey || ":ti-icon",
            defaultAs : m[3] || undefined,
            ignoreNil : "?" == m[6],
            comType   : "ti-icon",
            comConf   : {
              className : m[5] || undefined
            }
          }
        }
        //......................................
        // #DictName(xxx) -> ti-label
        // just like `#RelayStatus(status):xxx:is-nowrap`
        m = /^(!)?[@#]([^\(]+)\(([^)]+)\)(:([^:]*)(:([^:]+))?)?$/.exec(displayItem)
        if(m) {
          return {
            key : m[3] || defaultKey,
            comType : "ti-label",
            comConf : {
              dict : m[2],
              format: m[5] || undefined,
              className: m[7] || "is-nowrap",
              autoLoadDictIcon : m[1]!="!"
            }
          }
        }
        //......................................
        // "<=ti-label:key>" or ":<=ti-label>"
        // or <=ti-icon:key>=>Ti.Types.toBoolStr(null,'fas-user')
        m = /^<=([^:]+)(:(.+))?>(\.([^=]+))?(=>(.+))?$/.exec(displayItem)
        if(m) {
          // Eval className
          let className = m[5] || undefined
          // Eval transformer
          let transformer = undefined
          if(m[7]) {
            transformer = Ti.Util.genInvoking(m[7], {
              context: this,
              partial: "right"
            })
          }
          // done for field
          return {
            key : m[3] || defaultKey || Symbol(displayItem),
            transformer,
            comType : m[1], 
            comConf : {
              className
            }
          }
        }
        //......................................
        // String -> ti-label
        // - "name" or ["name", "age"]
        // - "'Static Text'"
        // - "text+>/a/link?nm=${name}"
        // - "'More'->/a/link?id=${id}"
        // - "name:【${val}】->/a/link?id=${id}"
        m = /^([^+:>-]+)(:([^+:-]*)(:([^:]+))?)?(([+-])>([^%]*))?$/.exec(displayItem)
        if(m) {
          let key  = _.trim(m[1] || m[0])
          let format = m[3] || undefined
          let newTab = m[7] == "+"
          let href = _.trim(m[8])
          return {
            key,
            comType : "ti-label",
            comConf : {
              className: m[5] || "is-nowrap",
              newTab, 
              href, 
              format
            }
          }
        }
        //......................................
        // Default as lable
        return {
          key:displayItem,
          comType: "ti-label"
        }
        //......................................
      }
      //......................................
      return displayItem
    }
    //........................................
    let dis = __gen_dis()
    //........................................
    if(dis.dict) {
      let {name, vKey} = Ti.DictFactory.explainDictName(dis.dict)
      dis.$dict = Ti.DictFactory.CheckDict(name)
      dis.$dictValueKey = vKey || ".text"
    }
    //........................................
    // Then return
    return dis
  },
  //------------------------------------------
  /***
   * @param itemData{Object} - raw data
   * @param displayItem{Object} - display item setting
   * @param vars{Object} - special value forms like:
   * ```js
   * {
   *   "isCurrent" : this.isCurrent,
   *   "isChecked" : this.isChecked,
   *   "isHover"   : this.isHover,
   *   "isActived" : this.isActived,
   *   "rowId"     : this.rowId
   * }
   * ```
   */
  async evalDataForFieldDisplayItem({
    itemData={}, 
    displayItem={}, 
    vars={},
    autoIgnoreNil=true,
    autoIgnoreBlank=true,
    autoValue="value",
    uniqueKey
  }={}) {
    let dis = displayItem;
    let value = dis.defaultAs;
    //.....................................
    // Array -> Obj
    if(_.isArray(dis.key)) {
      value = _.pick(itemData, dis.key)
    }
    // String ...
    else if(_.isString(dis.key)){
      // Whole data
      if(".." == dis.key) {
        value = itemData
      }
      // Statci value
      else if(/^'[^']+'$/.test(dis.key)) {
        value = dis.key.substring(1, dis.key.length-1)
      }
      // Template
      else if(/^->(.+)$/.test(dis.key)) {
        value = Ti.S.renderBy(dis.key.substring(2), itemData)
      }
      // Dynamic value
      else {
        value = Ti.Util.fallbackNil(
          Ti.Util.getOrPickNoBlank(itemData, dis.key),
          value
        )
      }
    }
    // if("name" == dis.key && 0 === value) 
    //   console.log(dis, value)
    //.....................................
    // Transformer
    if(_.isFunction(dis.transformer)) {
      //console.log("do trans")
      // Sometimes, we need transform nil also
      if(!Ti.Util.isNil(value) || dis.transNil) {
        value = dis.transformer(value)
      }
    }
    // Ignore the Blank
    if(autoIgnoreBlank && Ti.S.isBlank(value)) {
      if(Ti.Util.fallback(dis.ignoreBlank, true)) {
        return
      }
    }
    // Ignore the undefined/null
    if(autoIgnoreNil && Ti.Util.isNil(value)) {
      if(Ti.Util.fallback(dis.ignoreNil, true)) {
        return
      }
    }
    //.....................................
    // Translate by dict
    if(dis.$dict) {
      value = await dis.$dict.getItemAs(dis.$dictValueKey, value)
    }
    //.....................................
    // Add value to comConf
    let reDisplayItem = _.cloneDeep(dis)
    let comConf = {};
    //.....................................
    // Customized comConf
    if(_.isFunction(dis.comConf)) {
      comConf = _.assign({}, dis.comConf(itemData))
    }
    //.....................................
    // Eval comConf
    else if(dis.comConf){
      comConf = __eval_com_conf_item(dis.comConf, {
        vars, 
        itemData, 
        value
      })
    }
    //.....................................
    // Set the default value key
    if(autoValue && _.isUndefined(comConf[autoValue])) {
      comConf[autoValue] = value
    }
    //.....................................
    reDisplayItem.comConf = comConf
    //.....................................
    if(uniqueKey) {
      reDisplayItem.uniqueKey = uniqueKey
    } else {
      reDisplayItem.uniqueKey = _.concat(
        reDisplayItem.key, reDisplayItem.comType).join("-")
    }
    //.....................................
    return reDisplayItem
  }
  //------------------------------------------
}
//////////////////////////////////////////////
return FieldDisplay;;
})()
// ============================================================
// EXPORT 'wn-obj-puretext.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/puretext/wn-obj-puretext.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : true,
  ////////////////////////////////////////////
  props : {
    "meta" : {
      type : Object,
      default : ()=>({})
    },
    "content" : {
      type : String,
      default : null
    },
    "savedContent" : {
      type : String,
      default : null
    },
    "contentType" : {
      type : String,
      default : null
    },
    "showTitle" : {
      type : Boolean,
      default : true
    },
    "status" : {
      type : Object,
      default : ()=>({})
    },
    "blankText" : {
      type : String,
      default : "i18n:blank"
    }
  },
  ////////////////////////////////////////////
  computed : {
    //----------------------------------------
    theIcon() {
      if(this.meta) {
        return Wn.Util.getIconObj(this.meta)
      }
      return Ti.Icons.get()
    },
    //----------------------------------------
    theTitle() {
      if(this.meta) {
        return this.meta.title || this.meta.nm
      }
      return "no-title"
    },
    //----------------------------------------
    hasMeta() {
      return this.meta ? true : false
    }
    //----------------------------------------
  },
  ////////////////////////////////////////////
  methods : {
    onChangeContent(newContent) {
      this.$notify("change", {content:newContent})
    }
  },
  ////////////////////////////////////////////
  mounted : function(){
    //----------------------------------------
    Ti.Fuse.getOrCreate().add({
      key : "wn-obj-puretext",
      everythingOk : ()=>{
        return !this.status.changed
      },
      fail : ()=>{
        Ti.Toast.Open("i18n:wn-obj-nosaved", "warn")
      }
    })
    //----------------------------------------
  },
  ////////////////////////////////////////////
  beforeDestroy : function(){
    Ti.Fuse.get().remove("wn-obj-puretext")
  }
  ////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'form-field-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/form/com/form-field/form-field-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  "type" : {
    type : String,
    default : "String"
  },
  "disabled" : {
    type : Boolean,
    default : false
  },
  "uniqKey" : {
    type : String,
    default : null
  },
  "name" : {
    type : [String, Array],
    default : null
  },
  "icon" : {
    type : String,
    default : null
  },
  "fieldStatus" : {
    type : Object,
    default : ()=>({})
  },
  "message" : {
    type : String,
    default : null
  },
  "title" : {
    type : String,
    default : null
  },
  "tip" : {
    type : String,
    default : null
  },
  "width" : {
    type : [String, Number],
    default : "stretch"
  },
  "height" : {
    type : [String, Number],
    default : undefined
  },
  "checkEquals" : {
    type : Boolean,
    default : true
  },
  "undefinedAs" : {
    default : undefined
  },
  "nullAs" : {
    default : undefined
  },
  "nanAs" : {
    type : Number,
    default : undefined
  },
  "emptyAs" : {
    type : String,
    default : undefined
  },
  "defaultAs" : {
    default : undefined
  },
  "display" : {
    type : [String, Object, Boolean],
    default : false
  },
  // "funcSet" : {
  //   type : Object,
  //   default : ()=>({})
  // },
  "comType" : {
    type : String,
    default : "ti-label"
  },
  "comConf" : {
    type : Object,
    default : ()=>({})
  },
  "autoValue" : {
    type : String,
    default : "value"
  },
  "serializer" : {
    type : Function,
    default : _.identity
  },
  "transformer" : {
    type : Function,
    default : _.identity
  },
  "data" : {
    type : Object,
    default : null
  },
  "statusIcons" : {
    type : Object,
    default : ()=>({
      spinning : 'fas-spinner fa-spin',
      error    : 'zmdi-alert-polygon',
      warn     : 'zmdi-alert-triangle',
      ok       : 'zmdi-check-circle',
    })
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'preview.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/preview.mjs'] = (function(){
function showPreivewDialog(html) {
  Ti.App.Open({
    title : "i18n:preview",
    position : "top",
    width  : "95%",
    height : "95%",
    maxWidth : "10rem",
    result : html,
    textOk : null,
    textCancel : null,
    comType : "WebTextArticle",
    comConf : {
      type  : "html",
      theme : "nice"
    },
    components : ["@com:web/text/article"]
  })
}

const __TI_MOD_EXPORT_VAR_NM = {
  name : "ti-preview",
  setup : function(editor, url){
    // Register toolbar actions
    editor.ui.registry.addButton("TiPreview", {
      text: Ti.I18n.text("i18n:preview"),
      onAction(menuBtn) {
        let html = editor.getContent();
        showPreivewDialog(html)
      },
    })

    return {
      getMetadata: function () {
        return  {
          name: 'Ti Preview plugin',
          url: 'http://site0.cn'
        };
      }
    };
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-shelf-gallary.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/shelf/gallary/web-shelf-gallary.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data : ()=>({
    myHoverIndex: -1,
    myRect: {width:0, height:0},
    myItemList: []
  }),
  //////////////////////////////////////////
  props : {
    //-----------------------------------
    // Data
    //-----------------------------------
    "items" : {
      type : Array,
      default : ()=>[]
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "comType" : {
      type: String,
      default : undefined
    },
    "comConf" : {
      type : Object,
      default : ()=>({})
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "minScale" : {
      type : Number,
      default : 0.5
    },
    //-----------------------------------
    // Measure
    //-----------------------------------
    // item scale = width/height
    "itemWH" : {
      type : Number,
      default : undefined
    },
    "width" : {
      type : [Number, String],
      default : undefined
    },
    "height" : {
      type : [Number, String],
      default : undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    },
    //--------------------------------------
    ItemStyles() {
      if(_.isEmpty(this.items) || this.myHoverIndex < 0){
        return []
      }
      // Measure: viewport sizing
      let {width, height} = this.myRect
      let n = this.items.length
      let half = width / (n+1)
      let unit = half * 2

      // Scale
      let hoveI = this.myHoverIndex
      let lastI = n - 1
      let scale = 1 - this.minScale

      // At left
      // 0 -> [][][][][]V[][] <- last
      //              hoveI
      let stepL = hoveI > 0 ? scale / hoveI  : 0
      let stepR = hoveI < lastI ? scale / (lastI - hoveI) : 0


      // Loop for style
      let itW = this.itemWH ? (height*this.itemWH) : 0
      let list = []
      for(let i=0; i<this.items.length; i++) {
        let left  = half * i
        let width = itW || unit
        if(itW) {
          left -= (itW - unit) / 2
        }
        // About scale
        let d = Math.abs(i - hoveI)
        let transform = null
        // Need to transform scale
        if(i != hoveI) {
          let s = i < hoveI
                    ? d * stepL
                    : d * stepR
          transform = `scale(${1-s})`
        }
        list.push(Ti.Css.toStyle({
          left, width, transform,
          zIndex : n - d
        }))
      }

      return list
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnResize() {
      this.myRect = Ti.Rects.createBy(this.$refs.con)
    },
    //--------------------------------------
    OnMouseLeave() {
      this.myHoverIndex = parseInt(this.items.length / 2)
    },
    //--------------------------------------
    OnMouseEnterItem({index}) {
      this.myHoverIndex = index
    },
    //--------------------------------------
    getItemStyle(index) {
      return _.get(this.ItemStyles, index)
    },
    //--------------------------------------
    evalItemList() {
      let list = []
      _.forEach(this.items, (it, index) => {
        let comType = Ti.Util.explainObj(it, this.comType)
        let comConf = Ti.Util.explainObj(it, this.comConf)
        list.push({
          index,
          comType, comConf
        })
      })
      this.myItemList = list
      this.myHoverIndex = parseInt(list.length / 2)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "items" : "evalItemList"
  },
  //////////////////////////////////////////
  mounted: function() {
    this.OnResize()
    this.evalItemList()

    Ti.Viewport.watch(this, {
      resize : _.debounce(()=>this.OnResize(), 10)
    })
  },
  ///////////////////////////////////////////////////
  beforeDestroy : function(){
    Ti.Viewport.unwatch(this)
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'order-item.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/meta/order/com/order-item/order-item.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    "id" : {
      type : String,
      default : null
    },
    "thumb" : {
      type : String,
      default : null
    },
    "src" : {
      type : String,
      default : "/api/thumb?id:${id}"
    },
    "dftIcon" : {
      type : String,
      default : "fas-cube"
    },
    "title" : {
      type : String,
      default : null
    },
    "price" : {
      type : Number,
      default : 1
    },
    "currency" : {
      type : String,
      default : "RMB"
    },
    "amount" : {
      type : Number,
      default : 1
    }
  },
  //////////////////////////////////////////
  computed : {
    //......................................
    thumbObj() {
      if(this.thumb) {
        let imgSrc = Ti.S.renderBy(this.src, this)
        return {type:"image", value:imgSrc}
      }
      return this.dftIcon
    },
    //......................................
    fee() {
      return Ti.WWW.evalFee(this)
    },
    //......................................
    feeText() {
      return Ti.WWW.feeText(this.fee, this.currency)
    }
    //......................................
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-adaptlist.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/adaptlist/wn-adaptlist.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////
  data: ()=>({
    myCurrentId  : null,
    myCheckedIds : {},
    myUploadigFiles : [],
    myItemStatus : {},
    myExposeHidden : true,
    myData : null
  }),
  ////////////////////////////////////////////////
  computed : {
    //--------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------------
    isReloading() {
      return _.get(this.status, "reloading")
    },
    //--------------------------------------------
    WallItemDisplay() {
      return {
        key : "..",
        // transformer : {
        //   name : "Wn.Util.getObjThumbInfo",
        //   args : [{
        //       status : this.myItemStatus,
        //       exposeHidden : this.myExposeHidden
        //     }]
        // },
        comType : 'ti-obj-thumb',
        comConf : {
          "..." : "${=value}"
        }
      }
    },
    //--------------------------------------------
    UploadingItemDisplay() {
      return {
        key : "..",
        comType : 'ti-obj-thumb',
        comConf : {
          "..." : "${=value}"
        }
      }
    },
    //--------------------------------------------
    hasDataList() {
      return this.myData && _.isArray(this.myData.list)
    },
    //--------------------------------------------
    WallDataList() {
      if(!this.myData || _.isEmpty(this.myData.list)) {
        return []
      }
      let list = []
      for(let it of this.myData.list) {
        if(!this.isHiddenItem(it)) {
          let li = Wn.Util.getObjThumbInfo(it, {
            status : this.myItemStatus,
            exposeHidden : this.myExposeHidden,
            titleKey : this.itemTitleKey,
            badges : this.itemBadges
          })
          list.push(li)
          //list.push(it)
        }
      }
      return list
    },
    //--------------------------------------------
    /***
     * Show uploading list
     */
    TheUploadingList() {
      let list = this.myUploadigFiles
      let re = []
      if(_.isArray(list)) {
        for(let it of list) {
          // Gen Preview for local image
          let mime = it.file.type
          let tp = Ti.Util.getSuffixName(it.file.name)
          let preview;
          if(/^image\//.test(mime)) {
            preview = {
              type : "localFile",
              value : it.file
            }
          } else {
            preview = Ti.Icons.get({tp, mime})
          }
          // Join to result list
          re.push({
            id    : it.id,
            title : it.file.name,
            preview,
            progress : (it.current/it.total)
          })
        }
      }
      return re
    },
    //--------------------------------------------
    AcceptUploadFiles() {
      if(this.acceptUpload) {
        if(_.isString(this.acceptUpload)) {
          return this.acceptUpload
        }
        if(_.isArray(this.acceptUpload)) {
          return this.acceptUpload.join(",")
        }
      }
    },
    //--------------------------------------------
    /***
     * has uploading
     */
    hasUploading() {
      return this.myUploadigFiles.length > 0
    },
    //--------------------------------------------
    UploadingClass() {
      return this.hasUploading ? "up-show" : "up-hide"
    },
    //--------------------------------------------
    UploadDragAndDropHandler() {
      if(this.droppable) {
        return this.OnDropFiles
      }
    }
    //--------------------------------------------
  },  // ~ computed
  ////////////////////////////////////////////////
  methods : {
    //--------------------------------------------
    OnListInit($list){this.$innerList = $list},
    //--------------------------------------------
    // Events
    //--------------------------------------------
    OnItemSelecteItem({currentId, checkedIds, currentIndex}) {
      //console.log("OnSelected", currentId, checkedIds)
      // For Desktop
      this.myCurrentId  = currentId
      this.myCheckedIds = checkedIds

      let context = {
        current : this.getCurrentItem(),
        checked : this.getCheckedItems(),
        checkedIds, currentId, currentIndex,
      }

      // Notify the real objects
      this.$notify("select", context)

      return {stop:true}
    },
    //--------------------------------------------
    OnItemOpen() {
      let obj = this.getCurrentItem()
      if(obj) {
        this.$notify("open:wn:obj", obj)
      }
    },
    //--------------------------------------------
    async OnDropFiles(files) {
      // console.log("OnDropFiles", files)
      if(!this.droppable)
        return
      let fs = [...files]
      await this.doUpload(fs)
      
      // Wait the computed result and notify
      this.$nextTick(()=>{
        // Find my checked files
        let objs = []
        if(this.hasDataList){
          _.forEach(this.myData.list, it=>{
            if(this.myCheckedIds[it.id]){
              objs.push(it)
            }
          })
        }

        // Emit events
        this.$notify("uploaded", objs)
      })
    },
    //--------------------------------------------
    async OnSelectLocalFilesToUpload(evt){
      await this.OnDropFiles(evt.target.files)
      this.$refs.file.value = ""
    },
    //--------------------------------------------
    // Getters
    //--------------------------------------------
    getCurrentItem() {
      if(this.myCurrentId && this.hasDataList) {
        return _.find(this.myData.list, it=>it.id == this.myCurrentId)
      }
    },
    //--------------------------------------------
    getCheckedItems() {
      if(this.hasDataList)
        return _.filter(this.myData.list, it=>this.myCheckedIds[it.id])
      return []
    },
    //--------------------------------------------
    setItem(newItem) {
      if(newItem && this.hasDataList) {
        let list = _.map(this.myData.list, it => {
          return it.id == newItem.id
            ? newItem
            : it
        })
        this.myData.list = list
      }
    },
    //--------------------------------------------
    setItemStatus(id, status="loading") {
      this.myItemStatus = _.assign({}, this.myItemStatus, {
        [id] : status
      })
    },
    //--------------------------------------------
    selectItem(id) {
      this.$innerList.selectRow(id)
    },
    //--------------------------------------------
    // For global menu invoke checkAll/cancleAll
    invokeList(methodName) {
      console.log("methodName")
      Ti.InvokeBy(this.$innerList, methodName)
    },
    //--------------------------------------------
    isHiddenItem(it) {
      if(it.nm.startsWith(".") && !this.myExposeHidden) {
        return true
      }
      return false
    },
    //--------------------------------------------
    // Utility
    //--------------------------------------------
    async _run(nm, payload) {
      let target = (this.routers||{})[nm]
      // Run by customized function
      if(_.isFunction(target)) {
        await target()
      }
      // In app
      else if(target) {
        let app = Ti.App(this)
        return await app.exec(target, payload)
      }
    },
    //--------------------------------------------
    toggleExposeHidden() {
      let newVal = !this.myExposeHidden
      this.myExposeHidden = newVal
      if(this.keeyHiddenBy) {
        Ti.Storage.session.set(this.keeyHiddenBy, newVal)
      }
    },
    //--------------------------------------------
    openLocalFileSelectdDialog(){
      this.$refs.file.click()
    },
    //--------------------------------------------
    async openCurrentMeta() {
      let meta = this.getCurrentItem() || this.meta

      if(!meta) {
        await Ti.Toast.Open("i18n:nil-obj")
        return
      }

      let reo = await Wn.EditObjMeta(meta, {fields:"auto"})
      
      // Update to current list
      if(reo) {
        let {updates, data} = reo
        // TODO if update the "thumb" may need to force reload the preview
        // Update to list
        this.setItem(data)

        return data
      }
    },
    //--------------------------------------------
    syncMyData() {
      this.myData = _.cloneDeep(this.data) || {
        list: [], pager: {}
      }
      this.myItemStatus = {}
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  watch: {
    //--------------------------------------------
    "data" : {
      handler : "syncMyData",
      immediate : true
    },
    //--------------------------------------------
    "myExposeHidden" : function(eh){
      this.$notify("expose-hidden", eh)
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  mounted : function(){
    //--------------------------------------------
    // Guart the uploading
    Ti.Fuse.getOrCreate().add({
      key : "wn-list-adaptview-check-uploading",
      everythingOk : ()=>{
        return !this.hasUploading
      },
      fail : ()=>{
        Ti.Toast.Open("i18n:upload-nofinished", "warn")
      }
    })
    // Restore the exposeHidden
    if(this.keeyHiddenBy) {
      this.myExposeHidden = Ti.Storage.session.getBoolean(this.keeyHiddenBy)
    }
  },
  //--------------------------------------------
  beforeDestroy : function(){
    Ti.Fuse.get().remove("wn-list-adaptview-check-uploading")
  }
  //--------------------------------------------
  ////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-lbs-map-google.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/lbs/map/google/ti-lbs-map-google.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  data : ()=>({
    // + Move cooling
    myLastMove : undefined,
    // => Input cooling
    mySyncTime : undefined,
    myUpTime: undefined,
    myCenterMarker: undefined,
    /*
    {
      [layerName] : Polyline,
      [layerName] : [Marker...]
    }
    */
    myLayers: {},
    myGrid: {
      x: [],
      y: [],
      x_step: undefined,
      y_step: undefined
    }
  }),
  /////////////////////////////////////////
  props : {
    // @see https://developers.google.com/maps/documentation/javascript/maptypes?hl=zh_CN
    // ROADMAP | SATELLITE | HYBRID | TERRAIN
    "mapType" : {
      type : String,
      default : "ROADMAP"
    },
    // Map center : {"lat":39.9042, "lng":116.4074}
    // If null, it will auto sync with the value
    // If Array, mean bounds
    // [sw, ne]
    //  sw: LatLng, ne: LatLng
    "center" : {
      type : [Object, Array],
      default : undefined
    },
    "zoom" : {
      type : Number,
      default : undefined
    },
    "bounds": {
      type: Array,
      default: undefined
    },
    /*
    [{
      name:"xxx",
      type:"point|path|area"
      items: [{lat,lng,title,icon}]
    }]
    */
    "layers": {
      type: Array,
      default: ()=>[]
    },
    "pinCenter": {
      type: Boolean,
      default: false
    },
    "cooling": {
      type: Number,
      default: 1000
    },
    "maxZoom": {
      type: Number,
      default: 22
    },
    "minZoom": {
      type: Number,
      default: 1
    },
    "boundPadding": {
      type: [Object, Number],
      default: 10
    },
    "stroke": {
      type: Object,
      default: ()=>({
        color: "#08F",
        opacity: 0.8,
        weight: 8
      })
    },
    // Refer by goole map api: gestureHandling
    // https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions
    "gestureHandling": {
      type: String,
      default: "auto",
      validator: v=>/^(cooperative|greedy|none|auto)$/.test(v)
    },
    /*
    {
      x: 10, y: 10, label: "=n", src: "/img/abc.png"
    }
    */
    "clustering": {
      type: Object,
      default: undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //-------------------------------------
    MapTypeId() {
      return this.getMapTypeId(this.mapType)
    },
    //-------------------------------------
    MapCenter() {
      // Bound
      if(_.isArray(this.center)) {
        let [sw, ne] = this.center
        return {
          lat: (sw.lat - ne.lat)/2 + ne.lat,
          lng: (sw.lng - ne.lng)/2 + ne.lng
        }
      }
      // Point
      return this.center
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //-------------------------------------
    isCoolDown() {
      if(!this.myUpTime) {
        return true
      }
      let du = Date.now() - this.myUpTime
      return du > this.cooling
    },
    //-------------------------------------
    isInSync() {
      if(!this.mySyncTime) {
        return false
      }
      let du = Date.now() - this.mySyncTime
      return du < this.cooling
    },
    //-------------------------------------
    getMapTypeId(mapType="ROADMAP") {
      return (google.maps.MapTypeId[mapType]) 
             || google.maps.MapTypeId.ROADMAP
    },
    //-------------------------------------
    draw_center_marker(lalCenter) {
      if(!lalCenter)
        lalCenter = this.$map.getCenter()
      // Update
      if(this.myCenterMarker) {
        this.myCenterMarker.setPosition(lalCenter)
      }
      // Drop one
      else {
        this.myCenterMarker = new google.maps.Marker({
          position: lalCenter,
          map: this.$map
        })
      }
      return lalCenter
    },
    //-------------------------------------
    draw_as_point({
      name, items=[], 
      iconSize, iconSizeHoverScale,
      clickable
    }={}) {
      //..................................
      if(!name) {
        throw "draw_as_point without layer name!"
      }
      //console.log("draw_as_point", name)
      //..................................
      let doClustering = !_.isUndefined(this.myGrid.x_step)
                      && !_.isUndefined(this.myGrid.y_step)
      //..................................
      // Get map bound for clustering
      let bound = this.$map.getBounds()
      if(!bound)
        return
      bound = bound.toJSON()
      //..................................
      // Prepare the layer marker list
      let markerList = []
      let matrix = []     // matrix for clustering
      //..................................
      // Define the marker drawing function
      let draw_marker = it => {
        let icon, size, size2;
        let label = it.label;
        if(_.isString(label)) {
          label = {
            color: "#FFF",
            text: label
          }
        }
        // Item icon
        if(it.src) {
          size = iconSize || {width:100, height:100}
          icon = {url:it.src, scaledSize:size}
          if(iconSizeHoverScale) {
            size2 = {
              width : size.width  * iconSizeHoverScale,
              height: size.height * iconSizeHoverScale
            }
          }
        }
        // Create marker
        let marker = new google.maps.Marker({
          position: it,
          title: it.title,
          label, icon,
          //label: `x:${box.x}: y:${box.y}`,
          clickable
        })
        markerList.push(marker)
        // Event
        if(clickable) {
          marker.addListener("click", ()=>{
            this.$notify("point:click", it)
          });
          // Hover to change the size
          if(size2) {
            marker.addListener("mouseover", function(){
              //marker.setAnimation(google.maps.Animation.BOUNCE)
              marker.setIcon({url: it.src, scaledSize: size2})
            });
            marker.addListener("mouseout", function(){
              //marker.setAnimation(null)
              marker.setIcon({url:it.src, scaledSize:size})
            });
          }
        }
      }
      //..................................
      // Define the multi-marker drawing function
      let draw_multi_markers = its=>{
        let icon, icon2, size, size2, label;
        let ctx = {
          n : its.length,
          title0 : its[0].title,
          title1 : its[1].title
        }
        // title
        let title = Ti.Util.explainObj(ctx, this.clustering.title || "->${n} places")
        // label
        if(this.clustering.label) {
          label = Ti.Util.explainObj(ctx, this.clustering.label)
        }
        // Icon
        if(this.clustering.src) {
          size = iconSize || {width:100, height:100}
          icon = {url:this.clustering.src, scaledSize:size}
          if(iconSizeHoverScale) {
            size2 = {
              width : size.width  * iconSizeHoverScale,
              height: size.height * iconSizeHoverScale
            }
            icon2 = {url:this.clustering.src, scaledSize:size2}
          }
        }
        // Get center
        let lalList = []
        _.forEach(its, ({it})=>lalList.push(it))
        let lalCenter = Ti.GPS.getCenter(lalList)
        // Create marker
        let marker = new google.maps.Marker({
          position: lalCenter,
          title, label, icon,
          //label: `x:${box.x}: y:${box.y}`,
          clickable : true
        })
        // Click to zoom
        marker.addListener("click", ()=>{
          this.$map.panTo(lalCenter)
          this.$map.setZoom(this.$map.getZoom()+1)
        });
        // Hover to change the size
        if(icon2) {
          marker.addListener("mouseover", function(){
            //marker.setAnimation(google.maps.Animation.BOUNCE)
            marker.setIcon(icon2)
          });
          marker.addListener("mouseout", function(){
            //marker.setAnimation(null)
            marker.setIcon(icon)
          });
        }
        // Add to markers
        markerList.push(marker)
      }
      //..................................
      // Define the items drawing function
      let draw_item = it => {
        // Clustering items
        if(_.isArray(it)) {
          // Multi-marker
          if(it.length > 1) {
            draw_multi_markers(it)
          }
          // Single marker
          else if(it.length > 0) {
            draw_marker(it[0].it)
          }
        }
        // Single item
        else {
          draw_marker(it)
        }
      }
      //..................................
      if(doClustering) {
        for(let it of items) {
          if(!it || !_.isNumber(it.lat) || !_.isNumber(it.lng)) 
            continue
          // Count box base clustering
          let box = {}
          //console.log("haha", it.title)
          box.x = Math.round(Ti.GPS.getLngToWest(it.lng,  bound.west) /this.myGrid.x_step)
          box.y = Math.round(Ti.GPS.getLatToSouth(it.lat, bound.south)/this.myGrid.y_step)
          let rows = matrix[box.y]
          if(!_.isArray(rows)){
            rows = []
            matrix[box.y] = rows
          }
          let cell = rows[box.x]
          if(!_.isArray(cell)) {
            cell = []
            rows[box.x] = cell
          }
          cell.push({...box, title: it.title, it})
        }
        //console.log(this.__dump_matrix(matrix))
        let cluList = this.clusteringMatrix(matrix)
        //console.log(cluList)
        _.forEach(cluList, draw_item)
      }
      // Add marker to map
      else {
        _.forEach(items, draw_marker)
      }
      //..................................
      // Add to global layer list for clean later
      this.myLayers[name] = markerList
      //..................................
      // Append to map
      _.forEach(markerList, marker => marker.setMap(this.$map))
    },
    //-------------------------------------
    clusteringMatrix(matrix) {
      let list = []
      for(let y=0; y<matrix.length; y++) {
        let rows = matrix[y]
        if(rows) {
          for(let x=0; x<rows.length; x++) {
            let cell = rows[x]
            // find my adjacent cell
            if(cell && cell.length>0) {
              // Right
              let next = rows[x+1]
              if(next && next.length>0) {
                rows[x+1] = undefined
                cell.push(...next)
              }
              // Down
              let adjRow = matrix[y+1]
              if(adjRow && adjRow.length > 0) {
                // Down
                next = adjRow[x]
                if(next && next.length>0) {
                  adjRow[x] = undefined
                  cell.push(...next)
                }
                // Down right
                next = adjRow[x+1]
                if(next && next.length>0) {
                  adjRow[x+1] = undefined
                  cell.push(...next)
                }
              }
              // Join to list
              list.push(cell)
            }
          }
        }
      }
      // Done
      return list
    },
    //-------------------------------------
    __dump_matrix(matrix) {
      let sb = ""
      for(let y=0; y<matrix.length; y++) {
        let rows = matrix[y]
        sb += `${y}: `
        if(rows) {
          for(let x=0; x<rows.length; x++) {
            let cell = rows[x]
            sb += `[${cell ? cell.length : 0}]`
          }
        }
        sb += "\n"
      }
      //console.log(sb)
    },
    //-------------------------------------
    tidyGridAxisLine(list, n) {
      if(list.length > n) {
        let more = list.slice(n)
        for(let pol of more) {
          pol.setMap(null)
        }
        return list.slice(0, n)
      }
      for(let i=list.length;i<n;i++) {
        list.push(new google.maps.Polyline({
          map: this.$map,
          geodesic: false,
          strokeColor: "#FF0000",
          strokeOpacity: 1.0,
          strokeWeight: 1,     
        }))
      }
      return list
    },
    //-------------------------------------
    eval_grid(x=10, y=10) {
      let bound = this.$map.getBounds()
      if(!bound)
        return
      bound = bound.toJSON()
      let ew = bound.east  - bound.west
      let ns = bound.north - bound.south
      if(ew < 0) {
        ew += 360
      }
      let lngStep = ew / x
      let latStep = ns / y
      //console.log({ew, ns, ew_u: lngStep, ns_u: latStep})

      // Build enouth grid
      let xN = x - 1;
      let yN = y - 1;
      this.myGrid.x = this.tidyGridAxisLine(this.myGrid.x, xN)
      this.myGrid.y = this.tidyGridAxisLine(this.myGrid.y, yN)
      this.myGrid.x_step = lngStep
      this.myGrid.y_step = latStep

      // // Draw line : X
      if(this.showGrid) {
        for(let i=1; i<x; i++) {
          let off = lngStep*i
          let lng = Ti.GPS.normlizedLng(bound.west + off)
          //console.log(i, {off, lng})
          let path = [
            {lat:bound.north, lng},
            {lat:bound.south, lng}
          ]
          this.myGrid.x[i-1].setPath(path)
        }

        // Draw line : Y
        for(let i=1; i<y; i++) {
          let off = latStep*i
          let lat = Ti.GPS.normlizedLat(bound.south + off)
          //console.log(i, {off, lat})
          let path = [
            {lat, lng:bound.west},
            {lat, lng:bound.east}
          ]
          this.myGrid.y[i-1].setPath(path)
        }
      }
    },
    //-------------------------------------
    draw_as_path({name, items=[], iconSize, clickable}={}) {
      if(!name) {
        throw "draw_as_path without layer name!"
      }
      // Draw points
      this.draw_as_point({
        name, 
        items, 
        iconSize,
        clickable
      })

      // Draw Path
      if(_.isArray(items) && items.length>1) {
        let it = _.first(items)
        if(it && _.isNumber(it.lat) && _.isNumber(it.lng)) {
          this.myLayers[`${name}-path`] = new google.maps.Polyline({
            map: this.$map,
            path: items,
            strokeColor   : this.stroke.color,
            strokeOpacity : this.stroke.opacity,
            strokeWeight  : this.stroke.weight
          })
        }
      }
    },
    //-------------------------------------
    drawLayers() {
      // console.log("drawLayers")
      if(this.clustering) {
        let {x, y} = this.clustering
        this.eval_grid(x, y);
      }
      //...................................
      // Pin Center
      if(this.pinCenter) {
        this.draw_center_marker()
      }
      //...................................
      // Guard
      if(_.isEmpty(this.layers)){
        return
      }
      //...................................
      // Loop layer
      let i = 0;
      for(let lay of this.layers) {
        //console.log(lay)
        i++
        if(!lay.name)
          lay.name = `Layer-${i}`
        this[`draw_as_${lay.type}`](lay)
      }
      //...................................
    },
    //-------------------------------------
    clearLayer(lay) {
      // Guard
      if(!lay) {
        return
      }
      // Only one map items
      if(_.isFunction(lay.setMap)) {
        lay.setMap(null)
      }
      // A group of map items
      else {
        _.forEach(lay, li=>{
          li.setMap(null)
        })
      }
    },
    //-------------------------------------
    cleanLayers(name) {
      //console.log("cleanLayers")
      // Clean center
      if(this.myCenterMarker) {
        this.myCenterMarker.setMap(null)
        this.myCenterMarker = undefined
      }
      // Clean layers
      if(name) {
        let lay = this.myLayers[name]
        this.clearLayer(lay)
        this.myLayers[name] = undefined
      }
      // Clean all
      else {
        _.forEach(this.myLayers, lay => {
          this.clearLayer(lay)
        })
        // Reset
        this.myLayers = {}
      }
    },
    //-------------------------------------
    redrawLayers(){
      this.cleanLayers()
      this.drawLayers()
    },
    //-------------------------------------
    redrawWhenMoveCoolDown() {
      let du = Date.now() - this.myLastMove;
      if(isNaN(du))
        return
      if(du > 500) {
        this.redrawLayers()
        this.myLastMove = undefined
        return
      }
      _.delay(()=>{
        this.redrawWhenMoveCoolDown()
      }, du)
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "mapType": function(newVal) {
      let mapType = this.getMapTypeId(newVal)
      this.$map.setMapTypeId(mapType)
    },
    //"value" : function(){this.drawValue()}
    "layers": function(newVal, oldVal) {
      if(!_.isEqual(newVal, oldVal)) {
        this.redrawLayers()
      }
    },
    "center": function(newVal, oldVal) {
      if(this.isCoolDown() && newVal) {
        this.mySyncTime = Date.now()
        // Bounds
        if(_.isArray(newVal)) {
          //console.log("google bounds changed", {newVal, oldVal})
          let sw = new google.maps.LatLng(newVal[0])
          let ne = new google.maps.LatLng(newVal[1])
          let bounds = new google.maps.LatLngBounds(sw, ne)
          this.$map.fitBounds(bounds, this.boundPadding)
        }
        // Pointer
        else if(_.isNumber(newVal.lat) && _.isNumber(newVal.lng)) {
          //console.log("google center changed", {newVal, oldVal})
          this.$map.panTo(newVal)
        }
        
      }
    },
    "zoom": function(newVal) {
      if(this.isCoolDown() && _.isNumber(newVal) && newVal>0) {
        this.$map.setZoom(newVal)
      }
    },
    "gestureHandling": function(newVal) {
      this.$map.setOptions({
        gestureHandling: newVal
      })
    }
  },
  //////////////////////////////////////////
  mounted : async function() {
    // Init Map
    //console.log("mounted", this.zoom, this.center)
    //......................................
    this.$map = new google.maps.Map(this.$refs.arena, {
      zoom: this.zoom,
      center: this.MapCenter,
      mapTypeId: this.MapTypeId,
      //...................................
      maxZoom : this.maxZoom,
      minZoom : this.minZoom,
      //...................................
      fullscreenControl: false,
      mapTypeControl: false,
      streetViewControl: false,
      zoomControl: false,
      gestureHandling : this.gestureHandling,
      //...................................
      center_changed: ()=>{
        //console.log(this.$map.getBounds().toJSON(), this.$map.getCenter().toJSON())
        let lal = this.$map.getCenter()
        if(this.clustering) {
          // May need to redraw when move cool down
          if(_.isUndefined(this.myLastMove)) {
            _.delay(()=>{
              this.redrawWhenMoveCoolDown()
            }, 500)
          }
        }
        this.myLastMove = Date.now()
        if(this.pinCenter) {
          this.draw_center_marker(lal)
        }
        if(!this.isInSync()) {
          this.myUpTime = Date.now()
          let lan = lal.toJSON()
          lan.lng = Ti.GPS.normlizedLng(lan.lng)
          this.$emit("center:change", lan)
        }
      },
      //...................................
      zoom_changed: ()=> {
        if(this.clustering) {
          this.redrawLayers()
        }
        this.myUpTime = Date.now()
        this.$emit("zoom:change", this.$map.getZoom())
      }
      //...................................
    })
    //......................................
    // Draw Value
    _.delay(()=>{
      this.redrawLayers()
    }, 1000)
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-input-date.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/date/ti-input-date.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    "runtime" : null,
    "status"  : "collapse"
  }),
  ////////////////////////////////////////////////////
  props : {
    "canInput" : {
      type : Boolean,
      default : true
    },
    "value" : {
      type : [String, Number, Date],
      default : null
    },
    "icon" : {
      type : String,
      default : "far-calendar-alt"
    },
    "format" : {
      type : String,
      default : "yyyy-MM-dd"
    },
    "placeholder" : {
      type : [String, Number],
      default : "i18n:blank-date"
    },
    "hideBorder" : {
      type : Boolean,
      default : false
    },
    "autoCollapse" : {
      type : Boolean,
      default : true
    },
    "width" : {
      type : [Number, String],
      default : "2rem"
    },
    "height" : {
      type : [Number, String],
      default : undefined
    },
    "monthFormat" : {
      type : String,
      default : "yyyy-MM" 
    },
    "beginYear" : {
      type : [Number, String],
      default : 1970
    },
    "endYear" : {
      type : [Number, String],
      default : (new Date().getFullYear()+1)
    },
    "statusIcons" : {
      type : Object,
      default : ()=>({
        collapse : "zmdi-chevron-down",
        extended : "zmdi-chevron-up"
      })
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName(this.className)
    },
    //------------------------------------------------
    isCollapse() {return "collapse"==this.status},
    isExtended() {return "extended"==this.status},
    //------------------------------------------------
    theDate() {
      return Ti.Types.toDate(this.value, null)
    },
    //------------------------------------------------
    theDropDate() {
      return this.runtime || this.theDate
    },
    //------------------------------------------------
    theInputValue() {
      if(this.isExtended) {
        return this.getDateText(this.theDropDate)
      }
      return this.getDateText(this.theDropDate, this.format)
    },
    //------------------------------------------------
    theStatusIcon() {
      return this.statusIcons[this.status]
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    applyRuntime() {
      if(this.runtime) {
        let dt = this.runtime
        this.runtime = null
        let str = this.getDateText(dt)
        this.$notify("change", str)
      }
    },
    //-----------------------------------------------
    doExtend() {
      this.status = "extended"
    },
    //-----------------------------------------------
    doCollapse({escaped=false}={}) {
      this.status = "collapse"
      // Drop runtime
      if(escaped) {
        this.runtime = null
      }
      // Apply Changed for runtime
      else {
        this.applyRuntime()
      }
    },
    //------------------------------------------------
    onInputFocused() {
      this.doExtend()
    },
    //------------------------------------------------
    onChanged(val) {
      // Empty value as null
      if(_.isEmpty(val)) {
        this.$notify("change", null);
      }
      // Parsed value
      else {
        let dt  = Ti.Types.toDate(val)
        let str = this.getDateText(dt)
        this.$notify("change", str)
      }
    },
    //------------------------------------------------
    onClickStatusIcon() {
      // extended -> collapse
      if(this.isExtended) {
        this.doCollapse()
      }
      // collapse -> extended
      else {
        this.doExtend()
      }
    },
    //------------------------------------------------
    onDateChanged(dt) {
      this.runtime = dt
      if(this.autoCollapse) {
        this.doCollapse()
      }
    },
    //------------------------------------------------
    getDateText(dt, fmt="yyyy-MM-dd") {
      let dt2 = Ti.Types.toDate(dt, null)
      return Ti.Types.formatDate(dt2, fmt)
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-combo-sorter-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/sorter/ti-combo-sorter-props.mjs'] = (function(){
const _M = {
  "placeholder" : {
    type : String,
    default : "i18n:no-title"
  },
  "options" : {
    type : Array,
    default : ()=>[]
  },
  /*
  {
    "CreateTime": 1  // 1:ASC, -1:DESC
  }
  */
  "value" : {
    type : Object,
    default : null
  },
  "width": {
    type : [Number, String],
    default : undefined
  },
  "height": {
    type : [Number, String],
    default : undefined
  },
  "dropWidth" : {
    type : [Number, String],
    default : "box"
  },
  "dropHeight" : {
    type : [Number, String],
    default : null
  },
  "sortIcons" : {
    type : Object,
    default : ()=>({
      asc  : "im-arrow-up",
      desc : "im-arrow-down"
    })
  },
  "suffixIcon" : {
    type : String,
    default : "im-menu-list"
  },
}
return _M;;
})()
// ============================================================
// EXPORT 'web-meta-preview.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/meta/preview/web-meta-preview.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  /////////////////////////////////////////
  props : {
    "logo" : {
      type : [String, Object],
      default : "zmdi-chevron-down"
    },
    "brief" : {
      type : String,
      default : null
    },
    "copyright" : {
      type : String,
      default : null
    }
  },
  //////////////////////////////////////////
  computed : {
    //......................................
    
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-input-time.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/time/ti-input-time.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data : ()=>({
    "runtime" : null,
    "status"   : "collapse"
  }),
  ////////////////////////////////////////////////////
  props : {
    "canInput" : {
      type : Boolean,
      default : true
    },
    "value" : {
      type : [String, Number, Ti.Types.Time],
      default : null
    },
    "icon" : {
      type : String,
      default : "far-clock"
    },
    /***
     * Value unit when value is Number
     */
    "valueUnit" : {
      type : String,
      default : "s",
      validator : function(unit) {
        return /^(ms|s|min|hr)$/.test(unit)
      }
    },
    // Display mode
    "mode" : {
      type : String,
      default : "auto",
      /***
       * - `sec`  : "HH:mm:ss"
       * - `min`  : "HH:mm"
       * - `auto` : "HH:mm" or "HH:mm:ss" if `ss` no zero
       */
      validator : function(unit) {
        return /^(sec|min|auto)$/.test(unit)
      }
    },
    "placeholder" : {
      type : [String, Number],
      default : "i18n:blank-time"
    },
    "hideBorder" : {
      type : Boolean,
      default : false
    },
    "width" : {
      type : [Number, String],
      default : "1.6rem"
    },
    "height" : {
      type : [Number, String],
      default : undefined
    },
    "dropWidth" : {
      type : [Number, String],
      default : "box"
    },
    "dropHeight" : {
      type : [Number, String],
      default : 400
    },
    "statusIcons" : {
      type : Object,
      default : ()=>({
        collapse : "zmdi-chevron-down",
        extended : "zmdi-chevron-up"
      })
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName(this.className)
    },
    //------------------------------------------------
    isCollapse() {return "collapse"==this.status},
    isExtended() {return "extended"==this.status},
    //------------------------------------------------
    theTime() {
      //console.log("input value:", this.value)
      return Ti.Types.toTime(this.value, this.valueUnit)
    },
    //------------------------------------------------
    theDropTime() {
      return this.runtime || this.theTime
    },
    //------------------------------------------------
    theTimeFormat() {
      return ({
        "sec"  : "HH:mm:ss",
        "min"  : "HH:mm",
        "auto" : "auto"
      })[this.mode]
    },
    //------------------------------------------------
    theTimeText() {
      return this.getTimeText(this.theDropTime)
    },
    //------------------------------------------------
    theStatusIcon() {
      return this.statusIcons[this.status]
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    applyRuntime() {
      if(this.runtime) {
        let tm = this.runtime
        this.runtime = null
        let str = this.getTimeText(tm)
        this.$notify("change", str)
      }
    },
    //-----------------------------------------------
    doExtend() {
      this.status = "extended"
    },
    //-----------------------------------------------
    doCollapse({escaped=false}={}) {
      //console.log("time doCollapse", {escaped})
      this.status = "collapse"
      // Drop runtime
      if(escaped) {
        this.runtime = null
      }
      // Apply Changed for runtime
      else {
        this.applyRuntime()
      }
    },
    //------------------------------------------------
    onInputFocused() {
      this.doExtend()
    },
    //------------------------------------------------
    onChanged(val) {
      // Empty value as null
      if(_.isEmpty(val)) {
        this.$notify("change", null);
      }
      // Parsed value
      else {
        let tm  = Ti.Types.toTime(val)
        let str = this.getTimeText(tm)
        this.$notify("change", str)
      }
    },
    //------------------------------------------------
    onClickStatusIcon() {
      // extended -> collapse
      if(this.isExtended) {
        this.doCollapse()
      }
      // collapse -> extended
      else {
        this.doExtend()
      }
    },
    //------------------------------------------------
    onTimeChanged(time) {
      this.runtime = time
    },
    //------------------------------------------------
    getTimeText(tm) {
      if(tm instanceof Ti.Types.Time) {
        return tm.toString(this.theTimeFormat)
      }
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-chart-raw.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/chart/raw/ti-chart-raw.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data : ()=>({
    minDataValue : undefined,
    maxDataValue : undefined
  }),
  ////////////////////////////////////////////////////
  props : {
    //-----------------------------------
    // Data
    //-----------------------------------
    "data" : {
      type : Array,
      default : ()=>[]
    },
    "xKey" : {
      type : String,
      default : "name"
    },
    "yKey" : {
      type : String,
      default : "value"
    },
    "positionX" : {
      type : String,
      default : "name"
    },
    "positionY" : {
      type : String,
      default : "value"
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "scaleX" : {
      type : Object,
      default : ()=>({})
    },
    // Plus support: 
    //  - tickUnit : 50  // for tickCount, unit to 50
    "scaleY" : {
      type : Object,
      default : ()=>({
        nice : true,
        tickCount: 10
      })
    },
    "axisX" : {
      type : Object,
      default : undefined
    },
    "axisY" : {
      type : Object,
      default : undefined
    },
    "labelX" : {
      type : [Boolean, Object, String, Function],
      default : undefined
    },
    "labelY" : {
      type : [Boolean, Object, String, Function],
      default : undefined
    },
    "tooltip" : {
      type : [Boolean, Object],
      default : ()=>({
        showCrosshairs : true
      })
    },
    "legend" : {
      type : [Boolean, Object],
      default : ()=>({
        flipPage: false
      })
    },
    "view" : {
      type : Object,
      default : undefined
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "padding" : {
      type : [Number, Array, String],
      default : "auto"
    },
    "appendPadding" : {
      type : [Number, Array, String],
      default : undefined
    },
    //-----------------------------------
    // Measure
    //-----------------------------------
    "width" : {
      type : [Number, String],
      default : undefined
    },
    "height" : {
      type : [Number, String],
      default : undefined
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    ChartPosition() {
      return `${this.positionX}*${this.positionY}`
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    evalXYData(data, iteratee=_.identity) {
      let list = []
      let max, min, sum = 0;
      let i = 0;
      for(let it of data) {
        let value = (it[this.yKey] * 1) || 0
        let li = iteratee({
          [this.positionX]: Ti.I18n.text(it[this.xKey]),
          [this.positionY] : value
        })
        list.push(li)

        sum += value

        if((i++) > 0) {
          min = Math.min(value, min)
          max = Math.max(value, max)
        } else {
          min = value
          max = value
        }
      }
      this.maxDataValue = max
      this.minDataValue = min
      return {list, max, min, sum}
    },
    //------------------------------------------------
    getChartScaleX() {
      return _.assign({}, this.scaleX)
    },
    //------------------------------------------------
    getChartScaleY() {
      let config = _.cloneDeep(this.scaleY) || {}
      if("auto" == config.min || true === config.min) {
        config.min = this.minDataValue
      }
      if("auto" == config.max || true === config.max) {
        config.max = this.maxDataValue
      }
      return config
    },
    //------------------------------------------------
    applyChartScale(chart) {
      this.__apply_scale(chart, this.positionX, this.getChartScaleX())
      this.__apply_scale(chart, this.positionY, this.getChartScaleY())
    },
    //------------------------------------------------
    __apply_scale(chart, key, config) {
      if(!_.isEmpty(config)){
        if(config.tickUnit > 0) {
          config.min = Ti.Num.floorUnit(config.min, config.tickUnit)
          config.max = Ti.Num.ceilUnit(config.max, config.tickUnit)
        }
        chart.scale(key, config)
      }
    },
    //------------------------------------------------
    applyChartAxis(chart) {
      if(!_.isEmpty(this.axisX)) {
        chart.axis(this.positionX, this.axisX)
      }
      if(!_.isEmpty(this.axisY)) {
        chart.axis(this.positionY, this.axisY)
      }
    },
    //------------------------------------------------
    applyChartTooltip(chart) {
      if(!_.isEmpty(this.tooltip)) {
        chart.tooltip(this.tooltip);
      }
    },
    //------------------------------------------------
    applyChartSetup(chart) {
      // Axis
      this.applyChartAxis(chart)
        
      // Tick
      this.applyChartScale(chart)

      // Tooltip
      this.applyChartTooltip(chart)

      // legend
      if(!_.isUndefined(this.legend)) {
        chart.legend(this.legend)
      }
    },
    //------------------------------------------------
    applyViewLabel(view) {
      this.__apply_view_label(view, this.positionX, this.labelX)
      this.__apply_view_label(view, this.positionY, this.labelY)
    },
    //------------------------------------------------
    __apply_view_label(view, key, labelConfig) {
      if(!Ti.Util.isNil(labelConfig)) {
        let config = _.cloneDeep(labelConfig)

        if(_.isString(config)) {
          config = {content: config}
        }
        if(_.isString(config.content)) {
          let tmpl = config.content
          config.content = (obj) => {
            return Ti.S.renderBy(tmpl, obj)
          }
        }

        view.label(key, config)
      }
    },
    //------------------------------------------------
    applyViewOptions(view, ...options) {
      let config = _.merge({}, ...options)
      _.forEach(config, (v, k)=>{
        if(Ti.Util.isNil(v))
          return
        let args = _.concat(v)
        view[k].apply(view, args)
      })
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-input-text.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/text/ti-input-text.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    "inputCompositionstart" : false,
    "isFocused" : false,
    "pointerHover" : null
  }),
  ////////////////////////////////////////////////////
  watch : {
    "focus" : function(v) {
      this.isFocused = v
    }
  },
  ////////////////////////////////////////////////////
  props : {
    "value" : null,
    "format" : {
      type : [String, Array, Object],
      default : undefined
    },
    "readonly" : {
      type: Boolean,
      default : false
    },
    "valueCase" : {
      type : String,
      default : null,
      validator : (cs)=>(Ti.Util.isNil(cs)||Ti.S.isValidCase(cs))
    },
    "placeholder" : {
      type : [String, Number],
      default : null
    },
    "trimed" : {
      type : Boolean,
      default : true
    },
    "autoJsValue" : {
      type : Boolean,
      default : false
    },
    "hideBorder" : {
      type : Boolean,
      default : false
    },
    "width" : {
      type : [Number, String],
      default : null
    },
    "height" : {
      type : [Number, String],
      default : null
    },
    "prefixHoverIcon" : {
      type : String,
      default : "zmdi-close-circle"
    },
    "prefixIconForClean" : {
      type : Boolean,
      default : true
    },
    "prefixIcon" : {
      type : String,
      default : null
    },
    "prefixText" : {
      type : String,
      default : null
    },
    "suffixText" : {
      type : String,
      default : null
    },
    "suffixIcon" : {
      type : String,
      default : null
    },
    "focus" : {
      type : Boolean,
      default : false
    },
    "hover" : {
      type : [Array, String],
      default : ()=>["prefixIcon", "suffixIcon"]
    },
    "autoSelect" : {
      type : Boolean,
      default : false
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName(this.className, {
        "is-self-actived" : this.isSelfActived,
        "is-actived"   : this.isActived,
        "is-focused"   : this.isFocused,
        "is-blurred"   : !this.isFocused,
        "is-readonly"  : this.readonly,
        "show-border"  : !this.hideBorder,
        "hide-border"  : this.hideBorder,
        "has-prefix-icon" : this.thePrefixIcon,
        "has-prefix-text" : this.prefixText,
        "has-suffix-icon" : this.suffixIcon,
        "has-suffix-text" : this.suffixText,
      })
    },
    //------------------------------------------------
    topStyle() {
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //------------------------------------------------
    theValue() {
      //console.log("input value:", this.value)
      // if(_.isArray(this.value)) {
      //   return this.value.join("\r\n")
      // }
      return Ti.Types.toStr(this.value, this.format)
    },
    //------------------------------------------------
    thePrefixIcon() {
      if("prefixIcon" == this.pointerHover
        && this.isCanHover("prefixIcon")) {
        return this.prefixHoverIcon || this.prefixIcon
      }
      return this.prefixIcon
    },
    //------------------------------------------------
    theHover() {
      let map = {}
      let hos = _.concat(this.hover)
      for(let ho of hos) {
        if(ho) {
          map[ho] = true
        }
      }
      return map
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    isCanHover(hoverName) {
      return this.theHover[hoverName] ? true : false
    },
    //------------------------------------------------
    getHoverClass(hoverName) {
      let canHover = this.isCanHover(hoverName)
      return {
        "can-hover" : canHover,
        "for-look"  : !canHover
      }
    },
    //------------------------------------------------
    onInputCompositionStart(){
      this.inputCompositionstart = true
    },
    //------------------------------------------------
    onInputCompositionEnd(){
      this.inputCompositionstart = false
      this.doWhenInput()
    },
    //------------------------------------------------
    onInputing($event) {
      if(!this.inputCompositionstart) {
        this.doWhenInput()
      }
    },
    //------------------------------------------------
    doWhenInput(emitName="inputing", autoJsValue=false) {
      if(_.isElement(this.$refs.input)) {
        //console.log("doWhenInput", emitName)
        let val = this.$refs.input.value
        // Auto js value
        if(autoJsValue) {
          val = Ti.S.toJsValue(val, {
            autoNil  : true,
            autoDate : false,
            trimed : this.trimed
          })
        }
        // Trim
        else if(this.trimed) {
          val = _.trim(val)
        }
        // case
        val = Ti.S.toCase(val, this.valueCase)
        // notify
        this.$notify(emitName, val)
      }
    },
    //------------------------------------------------
    onInputKeyDown($event) {
      let payload = _.pick($event, 
        "code","key","keyCode",
        "altKey","ctrlKey","metaKey","shiftKey")
      payload.uniqueKey = Ti.Shortcut.getUniqueKey(payload)
      payload.$event = $event
      this.$notify("keypress", payload)
    },
    //------------------------------------------------
    onInputChanged() {
      this.doWhenInput("change", this.autoJsValue)
    },
    //------------------------------------------------
    onInputFocus() {
      if(!this.readonly) {
        if(this.autoSelect) {
          this.$refs.input.select()
        } else {
          this.$refs.input.focus()
        }
      }
      this.isFocused = true
      this.$notify("input:focus")
      // Auto Actived
      if(!this.isActived) {
        this.setActived()
      }
    },
    //------------------------------------------------
    onInputBlur() {
      this.isFocused = false
      this.$notify("input:blur")
    },
    //------------------------------------------------
    onClickPrefixIcon() {
      if(this.prefixIconForClean) {
        this.$notify("change", null)
      }
      this.$notify("prefix:icon")
    },
    //------------------------------------------------
    onClickPrefixText() {
      this.$notify("prefix:text")
    },
    //------------------------------------------------
    onClickSuffixIcon() {
      this.$notify("suffix:icon")
    },
    //------------------------------------------------
    onClickSuffixText() {
      this.$notify("suffix:text")
    },
    //------------------------------------------------
    doAutoFocus() {
      if(this.focus && !this.isFocused) {
        this.onInputFocus()
      }  
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    "focus" : function() {
      this.doAutoFocus()
    }
  },
  ////////////////////////////////////////////////////
  mounted : function(){
    this.doAutoFocus()
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-droplist.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/droplist/wn-droplist.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  props : {
    "multi" : {
      type : Boolean,
      default : false
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    ComType() {
      return this.multi
        ? "wn-combo-multi-input"
        : "wn-combo-input"
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'tags-item.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/tags/com/tags-item/tags-item.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  data : ()=>({
    // null / top / del
    mouseEnter : null,
    // collapse / extended
    status : "collapse"
  }),
  ////////////////////////////////////////////////////
  props : {
    "index" : {
      type : Number,
      default : -1
    },
    "atLast" : {
      type : Boolean,
      default : false
    },
    "icon" : {
      type : [String, Object],
      default : null
    },
    "text" : {
      type : String,
      default : null
    },
    "href" : {
      type : String,
      default : null
    },
    "value" : {
      type : [String, Number, Boolean, Object],
      default : null
    },
    /***
     * Show drop list for changing the piece value
     * 
     * ```js
     * [{
     *   icon  : "zmdi-card-giftcard",
     *   text  : "随便什么礼物",
     *   value : "Gift"
     * }, {
     *   icon  : "zmdi-cocktail",
     *   text  : "鸡尾酒会",
     *   value : "Cocktail"
     * }, {
     *   icon  : "zmdi-nature-people",
     *   text  : "人在树下；雨在天空",
     *   value : "NaturePeople"
     * }]
     * ```
     */
    "options" : {
      type : Array,
      default : ()=>[]
    },
    "optionDefaultIcon" : {
      type : String,
      default : null
    },
    "cancelBubble" : {
      type : Boolean,
      default : false
    },
    "removable" : {
      type : Boolean,
      default : false
    },
    "removeIcon" : {
      type : String,
      default : null
    },
    "statusIcons" : {
      type : Object,
      default : ()=>({
        collapse : "zmdi-chevron-down",
        extended : "zmdi-chevron-up"
      })
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName({
        "has-options"  :  this.hasOptions,
        "is-enter-top" : 'top' == this.mouseEnter && this.hasOptions,
        "is-enter-del" : 'del' == this.mouseEnter
      }, this.className)
    },
    //------------------------------------------------
    textClass() {
      return {
        "without-icon"    : !this.hasIcon && !this.removable,
        "without-options" : !this.hasOptions
      }
    },
    //------------------------------------------------
    hasIcon() {
      return this.icon ? true : false
    },
    //------------------------------------------------
    hasOptions() {
      return _.isArray(this.options) && this.options.length > 0
    },
    //------------------------------------------------
    /***
     * @return The objects list like:
     * 
     * ```js
     * [{
      *   icon  : "zmdi-phone",
      *   text  : "i18n:xxx",
      *   value : 100,
      *   options : [{icon,text,value}...]
      * }]
      * ```
      */
    theOptions() {
      let list = _.filter(_.concat(this.options), (v)=>!Ti.Util.isNil(v))
      let tags = []
      _.forEach(list, (li, index)=>{
        let tag
        // Object
        if(_.isPlainObject(li)) {
          tag = _.assign({icon:this.optionDefaultIcon}, li, {index})
        }
        // String or simple value
        else {
          tag = {
            index : index,
            icon  : this.optionDefaultIcon,
            text  : Ti.Types.toStr(li),
            value : li
          }
        }
        // Join to
        if(!_.isEqual(tag.value, this.value)) {
          tags.push(tag)
        }
      })
      return tags
    },
    //------------------------------------------------
    theStatusIcon() {
      return this.statusIcons[this.status]
    },
    //------------------------------------------------
    theData() {
      return {
        index    : this.index,
        icon     : this.icon,
        text     : this.text,
        value    : this.value,
        href     : this.href,
        atLast   : this.atLast,
        asterisk : this.asterisk
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    onClickDel() {
      this.$notify("remove", this.theData)
    },
    //------------------------------------------------
    onClickOption({value,text,icon}={}) {
      this.$notify("change", {
        value,text,icon,
        index: this.index
      })
      this.closeDrop()
    },
    //------------------------------------------------
    onClickTop($event) {
      // Show Drop Down
      if(this.hasOptions) {
        $event.stopPropagation()
        this.openDrop()
      }
      // Stop Bubble Up
      else if(this.cancelBubble) {
        $event.stopPropagation()
      }
      // Emit event
      if(this.href) {
        this.$notify("fire", this.theData)
      }
    },
    //------------------------------------------------
    openDrop() {
      if(this.hasOptions) {
        this.status = "extended"
        this.$nextTick(()=>{
          this.dockDrop()
        })
      }
    },
    //------------------------------------------------
    closeDrop() {
      this.status = "collapse"
      this.mouseEnter = null
    },
    //------------------------------------------------
    dockDrop() {
      let $drop  = this.$refs.drop
      let $box   = this.$el
      // Guard the elements
      if(!_.isElement($drop) || !_.isElement($box)){
        return
      }
      // If drop opened, make the box position fixed
      // to at the top of mask
      if("extended" == this.status) {
        let r_box  = Ti.Rects.createBy($box)
        //..........................................
        // Make drop same width with box
        Ti.Dom.setStyle($drop, {
          "min-width" : `${r_box.width}px`
        })
        //..........................................
        // Dock drop to box
        Ti.Dom.dockTo($drop, $box, {
          space:{y:2}, posListX:["left", "right"]
        })
        //..........................................
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  mounted : function(){
    this.dockDrop()
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'bar-item-switcher.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/actionbar/com/bar-item-switcher/bar-item-switcher.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////
  inject: ["$bar"],
  ///////////////////////////////////////
  props : {
    //-----------------------------------
    // Same as <bar-item-info>
    //-----------------------------------
    "name": {
      type: String,
      default: undefined
    },
    "icon": {
      type: String,
      default: undefined
    },
    "hideIcon" : {
      type: Boolean,
      default: false
    },
    "text": {
      type: String,
      default: undefined
    },
    "tip": {
      type: String,
      default: undefined
    },
    "switcher" : {
      type: Object,
      default: ()=>({})
    },
    "enabled": {
      type: [String, Array, Object],
      default: undefined
    },
    "disabled": {
      type: [String, Array, Object],
      default: undefined
    },
    "depth": {
      type: Number,
      default: 0
    },
    "status" : {
      type : Object,
      default : ()=>({})
    },
    "dftValue" : undefined,
    //-----------------------------------
    // Self Props
    //-----------------------------------
    "action" : {
      type : [String, Object, Function],
      default: undefined
    },
    "notify" : {
      type : String,
      default: undefined
    },
    "payload" : undefined,
    "wait" : {
      type : Number,
      default: 0
    },
    "delay" : {
      type : Number,
      default: 0
    }
  },
  ///////////////////////////////////////
  computed: {
    //-----------------------------------
    TopClass() {
      return this.getTopClass({
        "is-enabled"  : this.isEnabled,
        "is-disabled" : this.isDisabled,
        "is-highlight": this.isHighlight,
        "is-top" : this.depth == 1,
        "is-sub" : this.depth > 1,
        "has-icon" : this.icon ? true : false,
        "no-icon"  : this.icon ? false : true,
        "show-icon": this.isShowIcon,
        "hide-icon": !this.isShowIcon
      }, `is-depth-${this.depth}`)
    },
    //-----------------------------------
    isShowIcon() {
      return !this.hideIcon || this.hasIcon
    },
    //-----------------------------------
    hasIcon() {
      return this.icon ? true : false
    },
    //-----------------------------------
    isEnabled() {
      if(!Ti.Util.isNil(this.enabled)) {
        return this.isMatchStatus(this.enabled)
      }
      if(!Ti.Util.isNil(this.disabled)) {
        if(this.isMatchStatus(this.disabled)) {
          return false
        }
      }
      return true
    },
    //-----------------------------------
    isDisabled() {
      return !this.isEnabled
    },
    //-----------------------------------
    TheSetup() {
      return _.assign({
        allowEmpty : false
      }, this.switcher)
    },
    //-----------------------------------
    TheValue() {
      return Ti.Util.fallback(_.get(this.status, this.name), this.dftValue)
    },
    //-----------------------------------
    TheAction() {
      if(_.isFunction(this.action) && this.wait > 0) {
        return _.debounce(this.action, this.wait, {leading:true})
      }
      return this.action
    }
    //-----------------------------------
  },
  ///////////////////////////////////////
  methods : {
    OnSwitcherChange(val) {
      // Call Action
      if(this.action) {
        let app = Ti.App(this)
        let invoking = Ti.Shortcut.genActionInvoking(this.TheAction, {
          $com : this.$bar.$parent,
          argContext: app.$state()
        })
        // Invoke it
        _.delay(()=>{
          invoking(val)
        }, this.delay)
      }

      // notify: eventName
      if(this.notify) {
        let payload = this.payload
        if(payload) {
          payload = Ti.Util.explainObj({
            name  : this.name,
            value : val
          }, payload)
        }
        _.delay(()=>{
          this.$bar.$notify(this.notify, payload)
        }, this.delay)
      }
    }
  }
  ///////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-gui-rows.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/gui/rows/ti-gui-rows.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  /////////////////////////////////////////
  props : {
    "blocks" : {
      type : Array,
      default : ()=>[]
    },
    "adjustable" : {
      type : Boolean,
      default : true
    },
    "border" : {
      type : Boolean,
      default : false
    },
    "schema" : {
      type : Object,
      default : ()=>({})
    },
    "actionStatus" : {
      type : Object,
      default : ()=>({})
    },
    "shown" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    topClass() {
      return Ti.Css.mergeClassName({
        "is-adjustable" : this.adjustable,
        "show-border"   : this.border
      }, this.className)
    },
    //--------------------------------------
    hasBlocks() {
      return !_.isEmpty(this.blocks)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-pay.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/pay/web-pay.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////
  data: ()=>({
    myPayment: {
      payType: null,
      //payType: "wx.qrcode",
      orderId: undefined,
      payOk: undefined,
      errMsg: null,
      address: null
    }
  }),
  ///////////////////////////////////////////////////
  props : {
    "title": {
      type: String,
      default: "i18n:pay-title"
    },
    "payType": {
      type: String,
      default: null
    },
    "payTypeOptions" : {
      type : Array,
      default : undefined
    },
    "defaultAddr": {
      type: Object,
      default: undefined
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //----------------------------------------------
    PaySteps() {
      return [{
        title: "i18n:pay-step-checkout-title",
        next: {
          enabled: ()=>{
            if(_.isEmpty(this.items))
              return false

            if("A" == this.orderType)
              return !_.isEmpty(this.myPayment.address)

            return true
          }
        },
        comType: "WebPayCheckout",
        comConf: {
          tipIcon: this.tipIcon,
          tipText: this.tipText,
          items: this.items,
          currency: this.currency,
          orderType: this.orderType,
          addresses: this.addresses,
          currentAddr: this.myPayment.address,
          countries : this.countries
        }
      }, {
        title: "i18n:pay-step-choose-title",
        prev : true,
        next : {
          enabled: {
            payType: "![BLANK]"
          }
        },
        comType: "WebPayChoose",
        comConf: {
          options: this.options,
          value: "=payType"
        }
      }, {
        title: "i18n:pay-step-proceed-title",
        prev : true,
        next : {
          enabled: {
            payOk: "isBoolean",
            orderId: "![BLANK]"
          }
        },
        comType: "WebPayProceed",
        comConf: {
          items: this.items,
          currency: this.currency,
          payType: "=payType",
          orderId: "=orderId",
          payOk: "=payOk",
          address: "=address",
          checkPaymentInterval: this.checkPaymentInterval,
          orderType: this.orderType,
          orderTitle: this.orderTitle,
          watchUser: this.watchUser,
          qrcodeSize: this.qrcodeSize,
          fetchOrder: this.fetchOrder,
          payOrder: this.payOrder,
          createOrder: this.createOrder,
          checkOrder: this.checkOrder,
          returnUrl: this.returnUrl
        }
      }, {
        title: "pay-step-done-title",
        comType: "WebPayDone",
        comConf: {
          payOk: "=payOk",
          errMsg: "=errMsg",
          orderId: "=orderId",
          okIcon: this.okIcon,
          okText: this.okText,
          okLinks: this.okLinks,
          failIcon: this.failIcon,
          failText: this.failText,
          failLinks: this.failLinks,
          doneLinks: this.doneLinks
        }
      }]
    }
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //----------------------------------------------
    OnChange(payment) {
      _.assign(this.myPayment, payment)
    }
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch: {
    "payType": {
      handler: function(){
        this.myPayment.payType = this.payType
      },
      immediate: true
    },
    "defaultAddr" : {
      handler : function(addr) {
        if(addr && !this.myPayment.address) {
          this.myPayment.address = _.cloneDeep(addr)
        }
      },
      immediate : true
    }
  }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-combo-filter.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/filter/ti-combo-filter.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  /*
  {
    keyword: "xxx",  -> myFreeValue
    match: {..}      -> myFormData
  }
  */
  ////////////////////////////////////////////////////
  data : ()=>({
    myDropStatus : "collapse",
    myFreeValue : null,
    myFormData  : {},
    myMajorKey : undefined,
    myMajorValue : undefined
  }),
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass({
          "is-enabled": this.isFilterEnabled
        },`as-spacing-${this.spacing}`
      )
    },
    //------------------------------------------------
    isCollapse() {return "collapse"==this.myDropStatus},
    isExtended() {return "extended"==this.myDropStatus},
    //------------------------------------------------
    MajorConfig() {
      if(this.major && this.major.options) {
        return _.assign({
          width: 120,
          dropDisplay: ['<icon>', "text|title|nm"]
        }, this.major)
      }
    },
    //------------------------------------------------
    hasForm() {
      return !_.isEmpty(this.form)
    },
    //------------------------------------------------
    isFilterEnabled() {
      return !_.isEmpty(this.myFreeValue)
        || !_.isEmpty(this.myFormData)
    },
    //------------------------------------------------
    TheInputProps(){
      return _.assign({}, this, {
        autoI18n : this.autoI18n,
        placeholder : this.placeholder
      })
    },
    //------------------------------------------------
    InputValue() {
      return this.myFreeValue
    },
    //------------------------------------------------
    ThePrefixIcon() {
      let icon = this.prefixIcon;
      return icon || "im-filter"
    },
    //------------------------------------------------
    TheSuffixIcon() {
      if(this.hasForm) {
        return this.statusIcons[this.myDropStatus]
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnMajorChange(val) {
      this.myMajorValue = val
      this.tryNotifyChanged()
    },
    //------------------------------------------------
    OnCollapse() {this.doCollapse()},
    //-----------------------------------------------
    OnInputChanged(val) {
      this.myFreeValue = val
      this.myDropStatus = "collapse"

      // Clean all
      if(Ti.Util.isNil(val)) {
        this.myFormData  = {}
      }

      this.tryNotifyChanged()
    },
    //-----------------------------------------------
    OnInputFocused() {
      if(this.autoFocusExtended && !this.isExtended) {
        this.doExtend()
      }
    },
    //-----------------------------------------------
    OnClickStatusIcon() {
      if(this.isExtended) {
        this.doCollapse()
      } else {
        this.doExtend()
      }
    },
    //-----------------------------------------------
    OnFormChange(formData) {
      //console.log("filter form chanaged", formData)
      this.myFormData = formData
    },
    //-----------------------------------------------
    // Core Methods
    //-----------------------------------------------
    doExtend(tryReload=true) {
      if(this.hasForm && !this.isExtended) {
        this.myDropStatus = "extended"
      }
    },
    //-----------------------------------------------
    doCollapse({escaped=false}={}) {
      if(!this.isCollapse) {
        if(!escaped) {
          this.tryNotifyChanged()
        }
        this.myDropStatus = "collapse"
      }
    },
    //-----------------------------------------------
    tryNotifyChanged() {
      //console.log("tryNotifyChanged")
      let val = this.genValue()
      if(!_.isEqual(val, this.value)) {
        this.$notify("change", val)
      }
    },
    //-----------------------------------------------
    // Utility
    //-----------------------------------------------
    genValue() {
      return {
        majorKey   : this.myMajorKey,
        majorValue : this.myMajorValue,
        keyword    : this.myFreeValue,
        match      : this.myFormData
      }
    },
    //-----------------------------------------------
    evalMyValue() {
      let val = _.assign({}, this.value)
      this.myFreeValue = val.keyword
      this.myFormData  = val.match
      this.myMajorKey   = val.majorKey
      this.myMajorValue = val.majorValue
    },
    //-----------------------------------------------
    // Callback
    //-----------------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("ti-combo-filter", uniqKey)
      //....................................
      if("ESCAPE" == uniqKey) {
        this.doCollapse({escaped:true})
        return {prevent:true, stop:true, quit:true}
      }
      //....................................
      if("ARROWDOWN" == uniqKey) {
        this.doExtend()
        return
      }
      //....................................
      if("ARROWUP" == uniqKey) {
        this.doCollapse()
        return
      }
      // //....................................
      // // If droplist is actived, should collapse it
      // if("ENTER" == uniqKey) {
      //   this.doCollapse()
      //   return {stop:true, quit:true}
      // }
      //....................................
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    //-----------------------------------------------
    "value" : {
      handler: "evalMyValue",
      immediate : true
    }
    //-----------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-gui-side-nav.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/gui/side/nav/wn-gui-side-nav.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  props : {
    "statusStoreKey": {
      type : String,
      default : undefined
    },
    "items" : {
      type : Array,
      default : null
    },
    "highlightItemId" : {
      type : String,
      default : null
    },
    "highlightItemPath" : {
      type : String,
      default : null
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //-------------------------------------
    TheItems() {
      let list = []
      if(_.isArray(this.items)) {
        for(let it of this.items) {
          list.push(this.evalItem(it))
        }
      }
      return list;
    },
    //-------------------------------------
    theHighlightItemId() {
      let list = this.joinHighlightItems([], this.items)
      if(list.length > 0) {
        // Sort the list, 0->N, the first one should be the hightlight one
        list.sort((it0,it1)=>it0.score-it1.score)
        // Get the first one
        return _.first(list).id
      }
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //-------------------------------------
    evalItem(it={}) {
      // Children
      let items = null
      if(_.isArray(it.items)) {
        items = []
        for(let subIt of it.items) {
          items.push(this.evalItem(subIt))
        }
      }
      // Store status
      let groupStatusStoreKey = undefined
      if(this.statusStoreKey) {
        groupStatusStoreKey = this.statusStoreKey + "_" + it.key
      }

      // Self
      return _.assign(_.pick(it, ["id","key","depth","icon","title","path","view"]), {
        items,
        groupStatusStoreKey,
        highlightId : this.theHighlightItemId,
        href : it.id ? Wn.Util.getAppLink(it.id)+"" : null
      })
    },
    //-------------------------------------
    joinHighlightItems(list=[], items=[]) {
      if(this.highlightItemId && _.isArray(items) && items.length>0) {
        for(let it of items) {
          // Match the ID, 0
          if(it.id == this.highlightItemId) {
            list.push({score:0, id: it.id})
          }
          // Match the Path, 1 or more
          else if(it.path && it.id
              && this.highlightItemPath 
              && this.highlightItemPath.startsWith(it.path)){
            let diff = this.highlightItemPath.length - it.path.length
            list.push({score:1+diff, id: it.id})
          }
          // Join Children
          if(it.items) {
            this.joinHighlightItems(list, it.items)
          }
        }
      }
      // Return self
      return list
    },
    //-------------------------------------
    onItemActived(payload={}){
      this.$notify("item:active", payload)
    }
    //-------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-input-datetime.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/datetime/ti-input-datetime.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  data : ()=>({
    "runtime" : null,
    "status"  : "collapse"
  }),
  ////////////////////////////////////////////////////
  props : {
    "canInput" : {
      type : Boolean,
      default : true
    },
    "value" : {
      type : [String, Number, Date],
      default : null
    },
    "icon" : {
      type : String,
      default : "fas-clock"
    },
    "format" : {
      type : String,
      default : "yyyy-MM-dd HH:mm:ss"
    },
    "placeholder" : {
      type : [String, Number],
      default : "i18n:blank-datetime"
    },
    "hideBorder" : {
      type : Boolean,
      default : false
    },
    "autoCollapse" : {
      type : Boolean,
      default : false
    },
    "width" : {
      type : [Number, String],
      default : "2.4rem"
    },
    "height" : {
      type : [Number, String],
      default : undefined
    },
    "monthFormat" : {
      type : String,
      default : "yyyy-MM" 
    },
    "beginYear" : {
      type : [Number, String],
      default : 1970
    },
    "endYear" : {
      type : [Number, String],
      default : (new Date().getFullYear()+1)
    },
    "statusIcons" : {
      type : Object,
      default : ()=>({
        collapse : "zmdi-chevron-down",
        extended : "zmdi-chevron-up"
      })
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName(this.className)
    },
    //------------------------------------------------
    isCollapse() {return "collapse"==this.status},
    isExtended() {return "extended"==this.status},
    //------------------------------------------------
    theDate() {
      return Ti.Types.toDate(this.value, null)
    },
    //------------------------------------------------
    theDropDate() {
      return this.runtime || this.theDate
    },
    //------------------------------------------------
    theInputValue() {
      if(this.isExtended) {
        return this.getDateText(this.theDropDate)
      }
      return this.getDateText(this.theDropDate, this.format)
    },
    //------------------------------------------------
    theStatusIcon() {
      return this.statusIcons[this.status]
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    applyRuntime() {
      if(this.runtime) {
        let dt = this.runtime
        this.runtime = null
        let str = this.getDateText(dt)
        this.$notify("change", str)
      }
    },
    //-----------------------------------------------
    doExtend() {
      this.status = "extended"
    },
    //-----------------------------------------------
    doCollapse({escaped=false}={}) {
      this.status = "collapse"
      // Drop runtime
      if(escaped) {
        this.runtime = null
      }
      // Apply Changed for runtime
      else {
        this.applyRuntime()
      }
    },
    //------------------------------------------------
    onInputFocused() {
      this.doExtend()
    },
    //------------------------------------------------
    onChanged(val) {
      // Empty value as null
      if(_.isEmpty(val)) {
        this.$notify("change", null);
      }
      // Parsed value
      else {
        let dt  = Ti.Types.toDate(val)
        let str = this.getDateText(dt)
        this.$notify("change", str)
      }
    },
    //------------------------------------------------
    onClickStatusIcon() {
      // extended -> collapse
      if(this.isExtended) {
        this.doCollapse()
      }
      // collapse -> extended
      else {
        this.doExtend()
      }
    },
    //------------------------------------------------
    onDateChanged(dt) {
      this.runtime = dt
      if(this.autoCollapse) {
        this.doCollapse()
      }
    },
    //------------------------------------------------
    getDateText(dt, fmt="yyyy-MM-dd HH:mm:ss") {
      let dt2 = Ti.Types.toDate(dt, null)
      return Ti.Types.formatDate(dt2, fmt)
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-tile-address.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/tile/address/web-tile-address.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  props : {
    "value" : {
      type : Object,
      default : ()=>({})
    },
    "mapping": {
      type: Object,
      default: ()=>({
        id : "id",
        country  : "country",
        postcode : "postcode",
        province: "province",
        city: "city",
        street: "street",
        door: "door",
        consignee: "consignee",
        phone: "phone",
        email: "email",
        dftaddr: "dftaddr"
      })
    },
    // {"HK":"Hong Kong","TW":"Taiwan","MO":"Macao"}
    "countries": {
      type: Object,
      default: undefined
    },
    "showCountry": {
      type: Boolean,
      default:true
    },
    // If indicate this prop, it will replace the left-top title display
    "title" : {
      type: String,
      default: undefined
    },
    "can": {
      type: Object,
      default: ()=>({
        remove  : true,
        edit    : true,
        default : true,
        choose  : false,
        add     : false
      })
    },
    // If false emit the item after mapping
    "emitRawValue": {
      type: Boolean,
      default: true
    },
    // Auto highlight the default address
    "autoHighlight" : {
      type: Boolean,
      default: true
    },
    // Indicate the highlight ID
    "currentId" : {
      type: String,
      default: undefined
    },
    "blankAs" : {
      type : Object,
      default : ()=>({
        icon : "im-location",
        text : "i18n:address-nil"
      })
    },
    "selectable": {
      type: Boolean,
      default: false
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      let high = false
      if(_.isUndefined(this.currentId)) {
        if(this.autoHighlight && this.Item.dftaddr) {
          high = true
        }
      } else {
        high = this.currentId == this.Item.id
      }
      return this.getTopClass({
        "is-highlight": high,
        "is-selectable" : this.selectable
      })
    },
    //--------------------------------------
    hasValue() {
      return !_.isEmpty(this.value)
    },
    //--------------------------------------
    Item() {
      let it = Ti.Util.translate(this.value, this.mapping) || {}
      if(this.countries) {
        it.countryName = this.countries[it.country]
      } else {
        it.countryName = it.country
      }
      return it
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickTop() {
      if(this.selectable) {
        let v = this.getEmitValue()
        this.$notify('select', v)  
      }
    },
    //--------------------------------------
    OnRemove(){
      let v = this.getEmitValue()
      this.$notify('remove', v)
    },
    //--------------------------------------
    OnSetDefault(){
      let v = this.getEmitValue()
      this.$notify('set:default', v)
    },
    //--------------------------------------
    OnEdit(){
      let v = this.getEmitValue()
      this.$notify('edit', v)
    },
    //--------------------------------------
    OnChoose(){
      let v = this.getEmitValue()
      this.$notify('choose', v)
    },
    //--------------------------------------
    OnAdd(){
      let v = this.getEmitValue()
      this.$notify('add', v)
    },
    //--------------------------------------
    getEmitValue() {
      let v = this.emitRawValue ? this.value : this.Item
      return _.cloneDeep(v)
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'm-session.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/session/m-session.mjs'] = (function(){
////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  getters : {
    get(state){return state}
  },
  ////////////////////////////////////////////////
  mutations : {
    set(state, session={}) {
      state.id     = session.id;
      state.grp    = session.grp;
      state.du     = session.du;
      state.expi   = session.expi;
      state.pwd    = session.pwd;
      state.ticket = session.ticket;
      state.uid    = session.uid;
      state.unm    = session.unm;
      state.me     = session.me;
      state.envs   = _.cloneDeep(session.envs);
    },
    setEnvs(state, envs) {
      state.envs = envs
    }
  },
  ////////////////////////////////////////////////
  actions : {
    //--------------------------------------------
    async openResetPasswd({dispatch}) {
      await Ti.App.Open({
        icon  : "fas-key",
        title : "i18n:my-passwd",
        position : "top",
        width  : 480,
        height : 640,
        textOk : null, textCancel : null,
        comType : "WebAuthPasswd",
        comConf : {
          allowModes: {
            "passwd" : true
          }
        },
        events : {
          "passwd:reset" : (payload)=> {
            console.log("passwd:reset", payload)
            dispatch("resetPasswd", payload)
          }
        },
        components : "@com:web/auth/passwd"
      })
    },
    //--------------------------------------------
    // pwd = {newpwd, oldpwd, done}
    async resetPasswd({}, pwd) {
      // User Cancels
      if(!pwd)
        return
      
      //console.log(pwd)
      // Reset By old password
      if("passwd" == pwd.mode) {
        let cmdText = `passwd '${pwd.newpwd}' -old '${pwd.oldpwd}'`
        let doneRe = {ok: true}
        await Wn.Sys.exec(cmdText,  {
          errorBy : ({code}) => {
            doneRe.ok = false
            doneRe.errCode = code
          }
        })
        // Callback to show reset status
        pwd.done(doneRe)
      }
      // Not support for now
      else {
        throw  "Unsupport passwd-reset mode: " + pwd.mode
      }

    },
    //--------------------------------------------
    async updateMyVars({commit}, vars={}) {
      let cmds = []
      _.forEach(vars, (v, k)=>{
        cmds.push(`me -set '${k}=${v}'`)
      })
      if(_.isEmpty(cmds))
        return 
      
      // Do update
      let cmdText = cmds.join(";\n");
      await Wn.Sys.exec(cmdText)

      // Update envs
      let envs = Wn.Session.env()
      commit("setEnvs", envs)
    },
    //--------------------------------------------
    async reload({commit}) {
      let reo = await Wn.Sys.exec('session', {as:"json"})
      commit("set", reo)
    }
    //--------------------------------------------
  }
  ////////////////////////////////////////////////
}
////////////////////////////////////////////////
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-pay-done.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/pay/done/web-pay-done.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  props : {
    "payOk" : {
      type : Boolean,
      default : undefined
    },
    "errMsg" : {
      type : String,
      default : undefined
    },
    "orderId": {
      type: String,
      default: undefined
    }
  },
  //////////////////////////////////////////////////
  computed : {
    //----------------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-wait" : this.isWait,
        "is-ok"   : !this.isWait && this.payOk,
        "is-fail" : !this.isWait && !this.payOk
      })
    },
    //----------------------------------------------
    isWait() {
      return _.isUndefined(this.payOk)
    },
    //----------------------------------------------
    TheIcon() {
      if(_.isUndefined(this.payOk)) {
        return this.waitIcon
      }
      return this.payOk
        ? this.okIcon
        : this.failIcon
    },
    //----------------------------------------------
    TheText() {
      if(_.isUndefined(this.payOk)) {
        return this.waitText
      }
      return this.payOk
        ? this.okText
        : this.failText
    },
    //----------------------------------------------
    TheLinks() {
      let list = _.cloneDeep(this.payOk
        ? _.concat(this.okLinks, this.doneLinks)
        : _.concat(this.failLinks, this.doneLinks))

      let links = []
      _.forEach(list, li=> {
        links.push(_.defaults(Ti.Util.explainObj(this, li), {
          icon: 'zmdi-chevron-right'
        }))
      })
      return links
    },
    //----------------------------------------------
    hasLinks() {
      return !_.isEmpty(this.TheLinks)
    }
    //----------------------------------------------
  },
  //////////////////////////////////////////////////
  methods: {
    OnClickLink({path, params}={}) {
      if(path) {
        this.$notify("nav:to", {
          value: path,
          params
        })
      }
    }
  }
  //////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-combo-sorter.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/sorter/ti-combo-sorter.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    myDropStatus : "collapse",
    myItem : null,
    isASC : true,
    myListData: []
  }),
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    isCollapse() {return "collapse"==this.myDropStatus},
    isExtended() {return "extended"==this.myDropStatus},
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    },
    //------------------------------------------------
    SortTitle() {
      return Ti.Util.getOrPick(this.myItem, "text|value", this.placeholder)
    },
    //------------------------------------------------
    SortBy() {
      return _.first(_.keys(this.value))
    },
    //------------------------------------------------
    SortAs() {
      return _.get(this.value, this.SortBy) || 1
    },
    //------------------------------------------------
    ThePrefixIcon() {
      return _.get(this.myItem, "icon")
    },
    //------------------------------------------------
    TheSortIcon() {
      return this.isASC
        ? this.sortIcons.asc
        : this.sortIcons.desc
    },
    //------------------------------------------------
    TheSuffixIcon() {
      if(!_.isEmpty(this.myListData) && this.myListData.length>1) {
        return this.suffixIcon
      }
    },
    //------------------------------------------------
    Dict() {
      // Customized
      if(this.options instanceof Ti.Dict) {
        return this.options
      }
      // Refer dict
      if(_.isString(this.options)) {
        let dictName = Ti.DictFactory.DictReferName(this.options)
        if(dictName) {
          return Ti.DictFactory.CheckDict(dictName, ({loading}) => {
            this.loading = loading
          })
        }
      }
      // Auto Create
      return Ti.DictFactory.CreateDict({
        data : this.options,
        getValue : Ti.Util.genGetter(this.valueBy || "value"),
        getText  : Ti.Util.genGetter(this.textBy  || "text|name"),
        getIcon  : Ti.Util.genGetter(this.iconBy  || "icon")
      })
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnCollapse() {this.doCollapse()},
    //-----------------------------------------------
    OnClickBox() {
      this.isASC = !this.isASC
      this.tryNotifyChanged()
    },
    //-----------------------------------------------
    OnClickSuffixIcon() {
      if(this.isExtended) {
        this.doCollapse()
      } else {
        this.doExtend()
      }
    },
    //-----------------------------------------------
    OnDropListSelected({current}={}) {
      this.myItem = current
      this.doCollapse()
    },
    //-----------------------------------------------
    // Core Methods
    //-----------------------------------------------
    doExtend() {
      this.myDropStatus = "extended"
    },
    //-----------------------------------------------
    doCollapse({escaped=false}={}) {
      this.myDropStatus = "collapse"
      if(!escaped) {
        this.tryNotifyChanged()
      }
    },
    //-----------------------------------------------
    tryNotifyChanged() {
      //console.log("tryNotifyChanged")
      let val = this.genValue()
      if(!_.isEqual(val, this.value)) {
        this.$notify("change", val)
      }
    },
    //-----------------------------------------------
    // Utility
    //-----------------------------------------------
    genValue() {
      let by = _.get(this.myItem, "value")
      let as = this.isASC ? 1 : -1
      //console.log({by, as})
      return {[by]:as}
    },
    //-----------------------------------------------
    async evalMyValue() {
      let val = {by:null, as:1}
      // String: "CreateTime:1"
      if(_.isString(this.value)) {
        let ss = this.value.split(":")
        val.by = _.nth(ss, 0)
        val.as = _.nth(ss, 1) == "1" ? 1 : -1
      }
      // Array: ["CreateTime", 1]
      else if(_.isArray(this.value)) {
        val.by = _.nth(this.value, 0)
        val.as = _.nth(this.value, 1) > 0 ? 1 : -1
      }
      // Object as default {"CreateTime":1}
      else {
        val.by = this.SortBy
        val.as = this.SortAs
      }

      let it = await this.Dict.getItem(val.by)
      if(it) {
        this.myItem = it
      } else {
        this.myItem = {text:this.text||val.by, value:val.by}
      }
      this.isASC = val.as == 1
    },
    //-----------------------------------------------
    // Callback
    //-----------------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("ti-combo-multi-input", uniqKey)
      //....................................
      if("ESCAPE" == uniqKey) {
        this.doCollapse({escaped:true})
        return {prevent:true, stop:true, quit:true}
      }
      //....................................
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    //-----------------------------------------------
    "value" : {
      handler: "evalMyValue",
      immediate : true
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  mounted: async function() {
    this.myListData = await this.Dict.getData()
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'widget-user.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/widget/user/widget-user.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    "me": {
      type: Object,
      default: ()=>({})
    },
    "avatarSrc": {
      type: String,
      default: undefined
    },
    "avatarIcons": {
      type: Object,
      default: ()=>({
        "unknown": "far-user",
        "male": "im-user-male",
        "female": "im-user-female"
      })
    }
  },
  /////////////////////////////////////////
  computed : {
    //------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------
    TheAvatar() {
      let me = this.me || {}
      if(this.avatarSrc && me.thumb) {
        return {
          type: "image",
          value: Ti.S.renderVars(me.thumb, this.avatarSrc)
        }
      }
      // Icon: male
      if(me.sex == 1) {
        return this.avatarIcons.male
      }
      // Icon: female
      if(me.sex == 2) {
        return this.avatarIcons.female
      }
      // Icon: unknown
      return this.avatarIcons.unknown || "far-user"
    },
    //------------------------------------
    TheNickname() {
      let me = this.me || {}
      return me.nickname 
             || me.email
             || me.phone
             || me.nm
             || me.id
             || "Anonymity"
    }
    //------------------------------------
  },
  /////////////////////////////////////////
  methods : {
    //------------------------------------
    
    //------------------------------------
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'bar-item-group.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/actionbar/com/bar-item-group/bar-item-group.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////
  inject: ["$bar"],
  ///////////////////////////////////////////
  provide : function(){
    return {depth: this.depth+1}
  },
  ///////////////////////////////////////
  data : ()=>({
    collapse : true,
    isDocked : false,
    barItems : []
  }),
  ///////////////////////////////////////
  props : {
    //-----------------------------------
    // Same as <bar-item-info>
    //-----------------------------------
    "name": {
      type: String,
      default: undefined
    },
    "icon": {
      type: String,
      default: undefined
    },
    "hideIcon" : {
      type: Boolean,
      default: false
    },
    "text": {
      type: String,
      default: undefined
    },
    "tip": {
      type: String,
      default: undefined
    },
    "altDisplay" : {
      type: [Object, Array],
      default: ()=>[]
    },
    "enabled": {
      type: [String, Array, Object],
      default: undefined
    },
    "disabled": {
      type: [String, Array, Object],
      default: undefined
    },
    "highlight": {
      type: [String, Array, Object],
      default: undefined
    },
    "depth": {
      type: Number,
      default: 0
    },
    "status" : {
      type : Object,
      default : ()=>({})
    },
    //-----------------------------------
    // Self Props
    //-----------------------------------
    "items": {
      type: Array,
      default: ()=>[]
    },
    "autoExtend": {
      type: Boolean,
      default: false
    }
  },
  ///////////////////////////////////////////
  computed : {
    //---------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-collapse" : this.collapse,
        "is-extended" : !this.collapse,
        "is-depth-x"  : this.isDepthX,
      },`is-depth-${this.depth}`)
    },
    //---------------------------------------
    isDepth0() {return 0 == this.depth},
    isDepth1() {return 1 == this.depth},
    isDepthX() {return this.depth > 1},
    //---------------------------------------
    hasInfo() {
      return this.icon || this.text
    },
    //---------------------------------------
    isChildrenWithoutIcon() {
      for(let it of this.items) {
        if(it.comConf && it.comConf.icon) {
          return false
        }
      }
      return true
    },
    //---------------------------------------
    showChildren() {
      return this.isDepth0 || !this.collapse
    },
    //---------------------------------------
    ItemSuffixIcon() {
      if(this.isDepthX){
        return "im-angle-right"
      }
    },
    //---------------------------------------
    ChildrenStyle() {
      if(!this.isDepth0) {
        if(!this.isDocked) {
          return {"visibility": "hidden"}
        }
      }
    }
    //---------------------------------------
  },
  ///////////////////////////////////////////
  methods : {
    //---------------------------------------
    OnMouseEnter() {
      if(this.isDepthX) {
        this.doExtend()
      }
    },
    //---------------------------------------
    OnMouseLeave() {
      if(this.isDepthX) {
        this.doCollapse()
      }
    },
    //---------------------------------------
    OnFired(collapse) {
      if(collapse) {
        this.doExtend()
      } else {
        this.doCollapse()
      }
    },
    //---------------------------------------
    doExtend() {
      this.collapse = false
      //this.$bar.notifyChange({name:this.name, value:true})
    },
    //---------------------------------------
    doCollapse() {
      this.collapse = true
      this.isDocked = false
      //this.$bar.notifyChange({name:this.name, value:false})
    },
    //---------------------------------------
    doDockChildren() {
      this.$nextTick(()=>{
        if(this.$refs.children && this.depth>0) {
          Ti.Dom.dockTo(this.$refs.children, this.$el, {
            mode : this.isDepthX ? "V" : "H",
            position : "fixed",
            space: this.isDepthX ? {x:-1} : {y:3}
          })
          _.delay(()=>{
            this.isDocked = true
          }, 5)
        }
      })
    }
    //---------------------------------------
  },
  ///////////////////////////////////////////
  watch: {
    "collapse": "doDockChildren"
  },
  ///////////////////////////////////////////
  mounted: function(){
    this.doDockChildren()
    this.$bar.allocGroup(this)
  },
  ///////////////////////////////////////////
  beforeDestroy: function() {
    this.$bar.freeGroup(this)
  }
  ///////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-gui-arena.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/gui/arena/wn-gui-arena.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    "meta" : {
      type : Object,
      default : null
    },
    "comType" : {
      type : String,
      default : "ti-loading"
    },
    "comConf" : {
      type : Object,
      default : ()=>({})
    }
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'thing-files.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/thing/manager/com/thing-files/thing-files.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////
  inject: ["$ThingManager"],
  ///////////////////////////////////////////
  data: ()=>({
    myDataDirObj: null,
    myData: {},
    myStatus: {
      reloading: false
    },
    myCurrentId: null
  }),
  ///////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    hasDataHome() {
      return this.dataHome ? true : false
    },
    //--------------------------------------
    CurrentFile(){
      if(this.myCurrentId && this.myData.list){
        for(let it of this.myData.list) {
          if(this.myCurrentId == it.id){
            return it
          }
        }
      }
    },
    //--------------------------------------
    ThePreview() {
      let preview = Ti.Util.getFallback(this.preview, this.dirName, "@default") 
                    || this.preview 
                    || {}

      return {
        showInfo  : false,
        floatInfo : false,
        infoPosition  : "left",
        infoNameWidth : 40,
        infoValueWidth : 120,
        stateLocalKey : this.getStateLocalKey("preview"),
        // Customized
        ...preview,
        // Edit Info 
        editInfoBy : ()=>{
          this.editPreviewInfo()
        }
      }
    },
    //--------------------------------------
    TheFiles() {
      return _.assign({}, this.files, {
        routers : {
          "reload" : async ()=>{
            await this.reloadData()
          }
        }
      })
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnAdaptListInit($adaptlist){this.$adaptlist = $adaptlist},
    //--------------------------------------
    // Events
    //--------------------------------------
    OnDirNameChanged(dirName) {
      Ti.App(this).commit("main/setCurrentDataDir", dirName)
      
      this.$nextTick(()=>{
        this.reloadData()
      })
    },
    //--------------------------------------
    OnFileSelect({currentId}) {
      this.myCurrentId = currentId
    },
    //--------------------------------------
    OnFileOpen(obj) {
      console.log("haha", obj)
      this.$notify("file:open", obj)
    },
    //--------------------------------------
    async OnFileUploaded(files=[]){
      let f = _.first(files)
      if(f) {
        this.$adaptlist.myCurrentId = f.id
        this.myCurrentId = f.id
      }
      await Ti.App(this).dispatch("main/autoSyncCurrentFilesCount")
    },
    //--------------------------------------
    // Untility
    //--------------------------------------
    getStateLocalKey(name) {
      if(this.stateLocalKey && name) {
        return  `${this.stateLocalKey}_${name}`
      }
    },
    //--------------------------------------
    async doDeleteSelected(){
      await this.$adaptlist.doDelete()
      await Ti.App(this).dispatch("main/autoSyncCurrentFilesCount")
    },
    //--------------------------------------
    async checkDataDir() {
      // Guard
      if(!this.hasDataHome) {
        return
      }
      // If empty data home, create one
      if(!this.myDataDirObj) {
        let pos = this.dataHome.indexOf('/')
        let tsDataPh = this.dataHome.substring(0, pos)
        let dirPath = Ti.Util.appendPath(this.dataHome.substring(pos+1), this.dirName)
        let newMeta = {
          race : "DIR",
          nm   : dirPath
        }
        let json = JSON.stringify(newMeta)
        let cmdText = `obj "${tsDataPh}" -IfNoExists -new '${json}' -cqno`
        //console.log(cmdText)
        let dataDirObj = await Wn.Sys.exec2(cmdText, {as:"json"})
        let dataHomeObj = await Wn.Io.loadMetaBy(this.dataHome)

        // Update local state
        Ti.App(this).commit("main/setCurrentDataHomeObj", dataHomeObj)
        this.myDataDirObj = dataDirObj
      }
    },
    //--------------------------------------
    async doUploadFiles() {
      // Guard
      await this.checkDataDir()
      
      // Do upload
      if(this.myDataDirObj) {
        this.$adaptlist.openLocalFileSelectdDialog()
      }
      // Impossible
      else {
        throw "Impossible!!!"
      }
    },
    //--------------------------------------
    async editPreviewInfo() {
      //console.log("showPreviewObjInfo:", this.preview)
      if(this.CurrentFile) {
        let options = _.get(this.previewEdit, this.dirName)
        let reo = await Wn.EditObjMeta(this.CurrentFile, options)
        if(reo && reo.data) {
          this.updateItemInDataList(reo.data)
        }
      }
    },
    //--------------------------------------
    updateItemInDataList(meta) {
      if(meta && this.myData && _.isArray(this.myData.list)) {
        this.myData.list = _.map(
          this.myData.list,
          it => it.id == meta.id ? meta : it)
      }
    },
    //--------------------------------------
    // Reloading
    //--------------------------------------
    async reloadData() {
      if(this.dataHome && this.dirName) {
        this.myStatus.reloading = true
        let hmph = Ti.Util.appendPath(this.dataHome, this.dirName)
        //console.log("reloadData:", hmph)
        let home = await Wn.Io.loadMeta(hmph)
        // Guard
        if(!home) {
          this.myDataDirObj = null
          this.myData = {}
        }
        // Update data
        else {
          let reo = await Wn.Io.loadChildren(home)
          this.myDataDirObj = home
          this.myData = reo
        }
        _.delay(()=>{
          this.myStatus.reloading = false
        }, 100)
      }
      // Reset
      else {
        this.myDataDirObj = null
        this.myData = {}
      }
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  watch : {
    "dirName" : {
      handler : "reloadData",
      immediate : true
    },
    "dataHome" : {
      handler : "reloadData",
      immediate : true
    }
  },
  ///////////////////////////////////////////
  mounted : function() {
    this.$ThingManager.$files = this
  }
  ///////////////////////////////////////////
}
return _M;
;
})()
// ============================================================
// EXPORT 'wn-obj-picker.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/picker/wn-obj-picker.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data : ()=>({
    "loading"  : false,
    "dragging" : false,
    "skipReload" : false,
    "myItems" : []
  }),
  /////////////////////////////////////////
  props : {
    "empty" :{
      type : Object,
      default : ()=>({
        text  : "i18n:no-selected",
        value : undefined
      })
    },
    "value" : {
      type : [Object, String, Array],
      default : null
    },
    // raw value is WnObj
    // If declare the valueType
    // It will transform the WnObj
    // to relaitve value mode
    "valueType": {
      type: String,
      default: "idPath",
      validator: v => /^(obj|path|fullPath|idPath|id)$/.test(v)
    },
    "base" : {
      type : [Object, String],
      default : "~"
    },
    "multi" : {
      type : Boolean,
      default : false
    },
    // Key of meta to show as text
    // If undefined, use "title -> nm"
    "textBy" : {
      type : [String, Array],
      default : null
    },
    "filterBy" : {
      type : [Object, String, Function, Boolean],
      default : ()=>({
        "race" : ["isEqual", "FILE"]
      })
    },
    "titleEditable" : {
      type : Boolean,
      default : true
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-multi"    : this.multi,
        "is-single"   : !this.multi,
        "is-dragging" : this.dragging
      })
    },
    //--------------------------------------
    DisplayItems() {
      let list = []
      for(let i=0; i < this.myItems.length; i++) {
        let obj = this.myItems[i]
        let it = Wn.Util.getObjThumbInfo(obj, {
          exposeHidden : true,
          badges: {
            NW : ["href", "fas-link"],
            SE : ["newtab", "fas-external-link-alt"]
          }
        })
        it.index = i;
        it._key = `${it.id}_${it.index}`
        it.removeIcon = "im-x-mark"
        if(this.titleEditable) {
          it.onTitle = (payload)=>{
            this.OnEditItem(payload)
          }
        }
        //it.removeIcon = "im-trash-can"
        list.push(it)
      }
      return list
    },
    //--------------------------------------
    FirstItem() {
      return _.first(this.myItems)
    },
    //--------------------------------------
    hasItems() {
      return !_.isEmpty(this.myItems)
    },
    //--------------------------------------
    theChooseIcon() {
      return _.isEmpty(this.myItems) ? this.chooseIcon : null
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    async OnPickItem() {
      let meta = this.FirstItem
      // Use base to open the folder
      // Then it should be auto-open the folder
      if(!meta || _.isEmpty(meta)) {
        meta = this.base || "~"
      } else {
        meta = `id:${meta.id}`
      }

      // Reload Meta
      if(_.isPlainObject(meta) && !meta.pid) {
        meta = await await Wn.Io.loadMetaById(meta.id)
      }

      // Eval Filter
      //console.log("hahha")
      let filter;
      if(this.filterBy) {
        filter = Ti.AutoMatch.parse(this.filterBy)
      }

      let objs = await Wn.OpenObjSelector(meta, {
        multi    : this.multi,
        selected : this.myItems,
        filter
      })
      //console.log(objs)
      // user cancel
      if(_.isEmpty(objs)) {
        return
      }

      // format value
      let items;
      if(this.multi) {
        items = _.concat(this.myItems, objs)
      }
      // Single value
      else {
        items = objs
      }

      this.notifyChange(items)
    },
    //--------------------------------------
    OnClickItemsCon() {
      this.OnPickItem()
    },
    //--------------------------------------
    OnRemoveItem({id, index}={}) {
      let items = []
      for(let i=0; i<this.myItems.length; i++) {
        let it = this.myItems[i]
        if(index != i){
          items.push(it)
        }
      }
      this.notifyChange(items)
    },
    //--------------------------------------
    OnClearItems() {
      this.notifyChange([])
    },
    //--------------------------------------
    async OnEditItem({index}) {
      let it = this.myItems[index]

      let reo = await Ti.App.Open({
        title : "i18n:edit",
        width  : 640,
        height : 480,
        result : _.pick(it, "title", "href", "newtab"),
        model : {prop:"data", event:"change"},
        comType : "ti-form",
        comConf : {
          fields: [{
            title : "i18n:title",
            name  : "title",
            comType : "ti-input"
          }, {
            title : "i18n:href",
            name  : "href",
            comType : "ti-input"
          }, {
            title : "i18n:newtab",
            name  : "newtab",
            type  : "Boolean",
            comType : "ti-toggle"
          }]
        }
      })

      //console.log(reo)
      // User Cancel
      if(_.isUndefined(reo)) {
        return 
      }

      it = _.cloneDeep(it)
      it.title = reo.title
      it.href  = reo.href
      it.newtab = reo.newtab

      let items = _.cloneDeep(this.myItems)
      items.splice(index, 1, it)
      this.myItems = items
      this.skipReload = true

      this.notifyChange()
      _.delay(()=>{
        this.skipReload = false
      }, 100)
    },
    //--------------------------------------
    notifyChange(items = this.myItems) {
      let value = null;
      let keys = [
        'id','nm','thumb','title','mime','tp','sha1','len',
        'href', 'newtab'
      ]
      if(this.multi) {
        value = []
        for(let it of items) {
          let v = Wn.Io.formatObjPath(it, this.valueType, keys)
          value.push(v)
        }
      }
      // Single value
      else if (!_.isEmpty(items)) {
        value = Wn.Io.formatObjPath(items[0], this.valueType, keys)
      }

      this.$notify("change", value)
    },
    //--------------------------------------
    switchItem(fromIndex, toIndex) {
      if(fromIndex != toIndex) {
        let items = _.cloneDeep(this.myItems)
        let it = items[fromIndex]
        items = _.filter(items, (v, i)=>i!=fromIndex)
        items.splice(toIndex, 0, it)
        this.myItems = items
        this.notifyChange()
      }
    },
    //--------------------------------------
    initSortable() {
      if(this.multi && this.$refs.itemsCon) {
        new Sortable(this.$refs.itemsCon, {
          animation: 300,
          filter : ".as-empty-item",
          onStart: ()=>{
            this.dragging = true
          },
          onEnd: ({oldIndex, newIndex})=> {
            this.dragging = false
            this.skipReload = true
            this.switchItem(oldIndex, newIndex)
            _.delay(()=>{
              this.skipReload = false
            }, 100)
          }
        })
      }
    },
    //--------------------------------------
    async reload(){
      this.loading = true
      await this.doReload()
      this.loading = false
    },
    //--------------------------------------
    async doReload() {
      let vals = this.value ? [].concat(this.value) : []
      let items = []
      // Loop each value item
      for(let it of vals) {
        let it2 = await this.reloadItem(it)
        if(it2)
          items.push(it2)
        if(!this.multi && items.length > 0)
          break
      }
      // Update value, it will be trigger the computed attribute
      // Then it will be passed to <ti-box> as formed list
      // the <ti-box> will show it reasonablely obey the `multi` options
      this.myItems = items
    },
    //--------------------------------------
    async reloadItem(it) {
      if(!it || _.isEmpty(it))
        return null
      // path id:xxxx
      if(_.isString(it)){
        return await Wn.Io.loadMetaBy(it)
      }
      // object {id:xxx}
      else if(it.id){
        // let obj = await Wn.Io.loadMetaById(it.id)
        // obj.title = it.title || obj.title || obj.nm
        // obj.href = it.href
        // obj.newtab = it.newtab
        return it
      }
      // Unsupported form of value
      else {
         throw Ti.Err.make("e-wn-obj-picker-unsupported-value-form", it)
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "value" : function(newVal, oldVal){
      if(!_.isEqual(newVal, oldVal) && !this.skipReload) {
        this.reload()
      }
    },
    "hasItems" : function(newVal, oldVal) {
      if(newVal && !oldVal) {
        this.$nextTick(()=>{
          this.initSortable()
        })
      }
    }
  },
  /////////////////////////////////////////
  mounted : async function(){
    await this.reload()
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'www-mod-page.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/lib/www/mod/page/www-mod-page.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////
  getters : {
    //--------------------------------------------
    // 似乎直接采用 pageUri 就好，这个木有必要了
    // 观察一段时间木有用就删了吧
    // pageLink({href, params, anchor}) {
    //   let link = [href]
    //   // Join QueryString
    //   if(!_.isEmpty(params)) {
    //     let qs = []
    //     _.forEach(params, (v, k)=>{
    //       if(!Ti.Util.isNil(v)) {
    //         qs.push(`${k}=${encodeURIComponent(v)}`)
    //       }
    //     })
    //     if(!_.isEmpty(qs)) {
    //       link.push(`?${qs.join("&")}`)
    //     }
    //   }
    //   // Join Anchor
    //   if(anchor) {
    //     link.push(`#${anchor}`)
    //   }
    //   return link.join("")
    // },
    //--------------------------------------------
    // Merget page api and the site api
    pageApis(state, getters, rootState, rootGetters) {
      return Ti.WWW.hydrateApi({
        base : rootState.apiBase,
        siteApis : rootState.apis,
        apis : state.apis
      })
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  mutations : {
    //--------------------------------------------
    set(state, all) {
      _.assign(state, all)
    },
    //--------------------------------------------
    setTitle(state, title) {
      state.title = title
    },
    //--------------------------------------------
    setPath(state, path) {
      state.path = path
    },
    //--------------------------------------------
    setPath(state, path) {
      state.path = path
    },
    //--------------------------------------------
    setPageUri(state, uri) {
      state.pageUri = uri
    },
    //--------------------------------------------
    setParams(state, params) {
      state.params = params
    },
    //--------------------------------------------
    mergeParams(state, params) {
      if(!_.isEmpty(params) && _.isPlainObject(params)) {
        state.params = _.merge({}, state.params, params)
      }
    },
    //--------------------------------------------
    setData(state, data) {
      state.data = data
    },
    //--------------------------------------------
    updateData(state, {key, value}={}) {
      // kay-value pair is required
      if(!key || _.isUndefined(value)) {
        return
      }
      let vobj = _.set({}, key, value)
      state.data = _.assign({}, state.data, vobj)
    },
    //--------------------------------------------
    updateDataBy(state, {key, value}) {
      if(!key || _.isUndefined(value)) {
        return
      }
      let data = _.cloneDeep(state.data)
      _.set(data, key, value)
      state.data = data
    },
    //--------------------------------------------
    inserToDataList(state, {key, item, pos=0}={}) {
      // Guard
      if(Ti.Util.isNil(item)) {
        return;
      }
      // Find the list
      let list = _.get(state.data, key)
      if(!_.isArray(list))
        return

      // Insert the data
      Ti.Util.insertToArray(list, pos, item)
    },
    //--------------------------------------------
    updateToDataList(state, {key, item, idBy="id"}={}) {
      // Guard
      if(Ti.Util.isNil(item)) {
        return;
      }
      // Find the list
      let list = _.get(state.data, key)
      if(!_.isArray(list))
        return

      // Replace item
      let list2 = _.map(list, li=>{
        let id0 = _.get(li, idBy)
        let id1 = _.get(item, idBy)
        if(id0 == id1)
          return item
        return li
      })
      _.set(state.data, key, list2)
    },
    //--------------------------------------------
    mergeToDataList(state, {key, value}={}) {
      // Guard
      if(Ti.Util.isNil(value)) {
        return;
      }
      // Find the list
      let list = _.get(state.data, key)
      if(!_.isArray(list))
        return

      // Replace item
      let list2 = _.map(list, li=>{
        return _.assign(li, value)
      })
      _.set(state.data, key, list2)
    },
    //--------------------------------------------
    mergeData(state, data) {
      if(!_.isEmpty(data) && _.isPlainObject(data)) {
        state.data = _.merge({}, state.data, data)
      }
    },
    //--------------------------------------------
    setLayout(state, layout) {
      state.layout = layout
    },
    //--------------------------------------------
    setShown(state, shown) {
      state.shown = _.assign({}, state.shown, shown)
    },
    //--------------------------------------------
    // 0: before reload setting -> @page:init
    // 1: after reload setting  -> @page:prepare
    // 2: after preload data    -> @page:ready
    setReady(state, ready) {
      state.ready = ready
    },
    //--------------------------------------------
    // Page finger to indicate the page changed
    // watch the filter can auto update document title
    updateFinger(state) {
      let ss = [state.path, state.params, state.anchor, state.data]
      let sha1 = Ti.Alg.sha1(ss)
      state.finger = sha1
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  actions : {
    //--------------------------------------------
    showBlock({commit}, name) {
      commit("setShown", {[name]:true})
    },
    //--------------------------------------------
    hideBlock({commit}, name) {
      commit("setShown", {[name]:false})
    },
    //--------------------------------------------
    resetData({commit}, data={}) {
      commit("setData", data)
    },
    //--------------------------------------------
    resetDataByKey({state, commit}, data={}) {
      if(!_.isEmpty(data)) {
        let d2 = _.cloneDeep(state.data)
        _.forEach(data, (v, k)=>{
          _.set(d2, k, v);
        })
        commit("setData", d2)
      }
    },
    //--------------------------------------------
    changeParams({commit}, args) {
      let params = Ti.Util.merge({}, args)
      commit("mergeParams", params)
      commit("updateFinger")
    },
    //--------------------------------------------
    pickDataTo({commit, state}, {
      from,  /* source key in data, point to a list */
      to,    /* target key in data */
      by,    /* AutoMatch */
      dft=null
    }={}) {
      //console.log({from, to, by})
      let val = dft
      if(!_.isEmpty(by)) {
        let am = Ti.AutoMatch.parse(by)
        let list = _.get(state.data, from)
        if(_.isArray(list) && !_.isEmpty(list)) {
          for(let li of list) {
            if(am(li)) {
              val = li
              break
            }
          }
        }
      }
      commit("updateDataBy", {
        key: to, 
        value : val
      })
    },
    //--------------------------------------------
    /***
     * Usage:
     * 
     * - OBJ: `changeData({KEY1:VAL1, KEY2:VAL2})
     * - Array: `changeData([{KEY1:VAL1}, {KEY2:VAL2}])
     * 
     * @param key{String} : the field name in "page.data", falsy for whole data
     * @param args{Object|Array} : `{name,value}` Object or Array
     */
    changeData({commit}, args) {
      let data = Ti.Util.merge({}, args)
      commit("mergeData", data)
    },
    //--------------------------------------------
    changeDataBy({commit}, payload) {
      commit("updateDataBy", payload)
    },
    //--------------------------------------------
    insertItemToData({commit}, payload) {
      commit("inserToDataList", payload)
    },
    //--------------------------------------------
    updateItemToData({commit}, payload) {
      commit("updateToDataList", payload)
    },
    //--------------------------------------------
    mergeItemToData({commit}, payload) {
      commit("mergeToDataList", payload)
    },
    //--------------------------------------------
    removeItemInDataById({state, commit}, {key, id, idKey="id"}={}) {
      console.log("removeItemInDataById", {key, id, idKey})
      // Guard
      if(Ti.Util.isNil(id))
        return

      // Find the list
      let list = _.get(state.data, key)
      if(!_.isArray(list))
        return

      // Remove the data
      let list2 = _.filter(list, li => li[idKey]!=id)
      commit("updateDataBy", {
        key, value: list2
      })
    },
    //--------------------------------------------
    /***
     * Mutate the data fields in params `offset`, each field
     * should be `Number`
     * 
     * @param offsets{Object} - the offset number set. "a.b.c" suppored
     */ 
    shiftData({state, commit}, offsets={}) {
      if(!_.isEmpty(offsets) && _.isPlainObject(offsets)) {
        let d2 = {}
        // Do shift
        Ti.Util.walk(offsets, {
          leaf : (off, path)=>{
            let val = _.get(state.data, path)
            // Offset
            if(_.isNumber(val) && _.isString(off) && /^[+-][0-9.]+$/.test(off)) {
              _.set(d2, path, val+off*1)
            }
            // Others Replace
            else {
              _.set(d2, path, off)
            }
          }
        })
        // Do Merge
        commit("mergeData", d2)
      }
    },
    //--------------------------------------------
    /***
     * Assert page data under a group of restrictions 
     */
    assertPage({rootState, dispatch}, {checkList=[], fail={}}={}) {
      // Prepare check result
      let assertFail = false
      // Loop the checkList
      for(let cl of checkList) {
        let val = _.get(rootState, cl.target)
        if(!Ti.Validate.checkBy(cl.assert, val)) {
          assertFail = true
          break
        }
      }
      //console.log(assertFail)
      // Do Fail
      if(assertFail && fail.action) {
        dispatch("doAction", fail, {root:true})
      }
    },
    //--------------------------------------------
    async scrollToTop({state}) {
      Ti.Be.ScrollWindowTo({y:0})
    },
    //--------------------------------------------
    async doApi({getters, commit, dispatch}, {
      key,        // The Api Key
      params={},  // params will override the defaults
      vars={},
      body=null,
      ok, fail
    }={}) {
      //.....................................
      let api = _.get(getters.pageApis, key)
      console.log("doApi", {key, api, params, vars, body})
      //.....................................
      // Guard
      if(!api) {
        return await Ti.Toast.Open("e.www.page.ApiNotFound: "+key, "warn");
      }
      //.......................................
      commit("setLoading", true, {root:true})
      await dispatch("__run_api", {api,params,vars,body, ok, fail})     
      commit("setLoading", false, {root:true})
    },
    //--------------------------------------------
    async showApiError({}, {
      api, url, options, err, errText
    } = {}) {
      let msg = Ti.I18n.translate(errText)
      await Ti.Alert(msg, {type: "error"})
    },
    //--------------------------------------------
    //
    // Run One Page API
    //
    //--------------------------------------------
    async __run_api({commit, dispatch, rootState}, {
      api, 
      vars, 
      params, 
      headers, 
      body,
      ok, fail}) {
      //.....................................  
      await Ti.WWW.runApiAndPrcessReturn(rootState, api, {
        vars, 
        params, 
        headers, 
        body,
        dispatch,
        ok, fail,
        mergeData : function(payload) {
          commit("mergeData", payload)
        },
        updateData : function(payload) {
          commit("updateData", payload)
        },
        doAction : function(at) {
          dispatch("doAction", at, {root:true})
        }
      })
    },
    //--------------------------------------------
    /***
     * Reload page data by given api keys
     */
    async reloadData({commit, getters, dispatch, rootState}, keys=[]) {
      //console.log(" # -> page.reloadData", keys)
      //.......................................
      // The api list to reload
      let isAll = _.isEmpty(keys)
      let apis = _.filter(getters.pageApis, (api, k)=>{
        // Auto preload
        if((isAll && api.preload > 0) || _.indexOf(keys, k)>=0) {
          if(api.preloadWhen) {
            return Ti.AutoMatch.test(api.preloadWhen, rootState)
          }
          return true
        }
        return false
      })
      //.......................................
      // Sort preload
      // apis.sort((a1, a2)=>{
      //   return a1.preload - a2.preload
      // })
      //.......................................
      // Mark Loading
      commit("setLoading", true, {root:true})
      //.......................................
      // Prepare the Promises
      let allApis = []
      for(let api of apis) {
        //console.log("  # -> page.reloadData -> prepareApi", api)
        allApis.push(dispatch("__run_api", {api}))
      }
      //.......................................
      // Run all
      await Promise.all(allApis)
      //.......................................
      // Unmark loading
      commit("setLoading", false, {root:true})
      commit("updateFinger")
      //.......................................
      // // Get return value
      // let reKeys = []
      // for(let api of apis) {
      //   reKeys.push(api.dataKey)
      // }
      // //.......................................
      // return _.pick(state.data, reKeys)
    },
    //--------------------------------------------
    explainData({commit, state, rootState}, keys) {
      keys = keys || state.explainDataKey
      // Guard
      if(_.isEmpty(keys) || !_.isArray(keys))
        return
      // Explain one be one
      let data = {}
      for(let key of keys) {
        let val = _.get(state.data, key)
        let v2 = Ti.Util.explainObj(rootState, val)
        _.set(data, key, v2)
      }
      commit("mergeData", data)
    },
    //--------------------------------------------
    /***
     * Reload whole page
     */
    async reload({commit, dispatch, getters, rootGetters, rootState}, {
      path,
      anchor,
      params={}
    }={}) {
      //console.log(rootGetters.routerList)
      //console.log(" # -> page.reload", {path,params,anchor})
      let pinfo;
      //.....................................
      // Apply routerList
      for(let router of rootGetters.routerList) {
        pinfo = router(path)
        if(pinfo && pinfo.path) {
          break
        }
      }
      //.....................................
      if(!pinfo || !pinfo.path) {
        return await Ti.Toast.Open("Page ${path} not found!", {
          type: "error",
          position: "center",
          vars: {path}
        })
      }
      //.....................................
      // Notify: init
      //console.log("@page:init ...")
      commit("setReady", 0)
      await dispatch("invokeAction", {name:"@page:init"}, {root:true})
      //.....................................
      // Load the page json
      let json = Ti.WWW.getSSRData("page-json", {as:"json"})
      if(!json) {
        let m = /^([^.]+)(\.html?)?$/.exec(pinfo.path)
        let jsonPath = m[1] + ".json"
        json = await Ti.Load(`@Site:${jsonPath}`)
      }
      //.....................................
      // merge info
      if(anchor) {
        pinfo.anchor = anchor
      }
      pinfo.params = _.merge({}, pinfo.params, params)
      pinfo.path = pinfo.path || path
      pinfo.name = Ti.Util.getMajorName(pinfo.path)
      pinfo.href = path
      //.....................................
      // Update Path url
      let {pageUriWithParams} = json
      let base = rootState.base
      let link = Ti.Util.Link({
        url: path, 
        params : pageUriWithParams ? params : null,  
        anchor
      })
      pinfo.pageUri = Ti.Util.appendPath(base, link.toString())
      //.....................................
      let page = _.merge({
        "className" : null,
        "title" : null,
        "apis" : {},
        "data" : {},
        "contextMenu" : true,
        "explainDataKey": [],
        "layout" : {},
        "params" : {},
        "shown" : {},
        "schema" : {},
        "actions" : {}
      }, json, pinfo)
      //.....................................
      // Update page 
      commit("set", page)
      //console.log(" #### page.loaded", _.cloneDeep(page))

      //.....................................
      // Notify: Prepare
      //console.log("@page:prepare ...")
      commit("setReady", 1)
      await dispatch("invokeAction", {name:"@page:prepare"}, {root:true})
      //.....................................
      // Conclude the api loading keys
      let {preloads, afterLoads} = Ti.WWW.groupPreloadApis(getters.pageApis)
      //console.log(keyGroups)
      //.....................................
      // init: data
      for(let keys of preloads) {
        await dispatch("reloadData", keys)
      }
      // explain data
      await dispatch("explainData")
      //.....................................
      // Scroll window to top
      dispatch("scrollToTop")
      //.....................................
      // Notify: Ready
      //console.log("@page:ready ...")
      commit("setReady", 2)
      await dispatch("invokeAction", {name:"@page:ready"}, {root:true})
      //.....................................
      // Load the after page api
      if(!_.isEmpty(afterLoads.length)) {
        dispatch("reloadData", afterLoads)
      }
      //.....................................
    }
    //--------------------------------------------
  }
  ////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-gui-block.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/gui/block/ti-gui-block.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////
  inject : ["$gui"],
  /////////////////////////////////////////
  props : {
    "type" : {
      type : String,
      default : null,
      validator : (v)=>{
        return Ti.Util.isNil(v)
          || /^(cols|rows|tabs)$/.test(v)
      }
    },
    "title" : {
      type : String,
      default : null
    },
    "icon" : {
      type : [String, Object],
      default : null
    },
    "hideTitle" : {
      type : Boolean,
      default : false
    },
    "actions" : {
      type : Array,
      default : ()=>[]
    },
    "actionStatus" : {
      type : Object,
      default : ()=>({})
    },
    "name" : {
      type : String,
      default : null
    },
    "blocks" : {
      type : Array,
      default : ()=>[]
    },
    "comClass": {
      type: String,
      default: undefined
    },
    "body" : {
      type : [String, Object],
      default : null
    },
    "embedIn" : {
      type : String,
      default : null,
      validator : (v)=>/^(panel|rows|cols|tabs)$/.test(v)
    },
    "size" : {
      type : [String, Number],
      default : null
    },
    "overflow" : {
      type : String,
      default : undefined,
      validator: v=>(_.isUndefined(v) || (/^(auto|none|fill|cover)$/.test(v)))
    },
    "flex" : {
      type : String,
      default : undefined,
      validator : (v)=>(_.isUndefined(v) || /^(nil|auto|grow|shrink|both|none)$/.test(v))
    },
    "schema" : {
      type : Object,
      default : ()=>({})
    },
    "shown" : {
      type : Object,
      default : ()=>({})
    },
    "captureEvents" : {
      type : Object,
      default : ()=>({})
    },
    "mainConClass" : undefined,
    "mainConStyle" : {
      type: Object,
      default: undefined
    },
    // Those 3 props for by-pass to sub-(cols/rows)
    "tabAt"       : undefined,
    "adjustable"  : undefined,
    "border"      : undefined
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        [`gui-block-${this.name}`] : this.name ? true : false,
        "is-show-header"  : this.isShowHeader,
        "is-hide-header"  : !this.isShowHeader,
        "ti-fill-parent" : /^(tabs|panel)$/.test(this.embedIn)
      }, `is-flex-${this.FlexName}`)
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toStyle(({
        //..................................
        rows:()=>({
          height: this.BlockSize
        }),
        //..................................
        cols:()=>({
          width : this.BlockSize
        }),
        //..................................
        tabs:()=>({}),
        //..................................
        panel:()=>({})
        //..................................
      })[this.embedIn]())
    },
    //--------------------------------------
    MainConClass() {
      let klass = {}
      if(!this.isFlexNil) {
        _.assign(klass, {
          "fill-parent"  : "fill"==this.TheOverflow,
          "cover-parent" : "cover"==this.TheOverflow
        })
      }
      return Ti.Css.mergeClassName(klass, this.mainConClass)
    },
    //--------------------------------------
    MainConStyle() {
      return Ti.Css.toStyle(this.mainConStyle)
    },
    //--------------------------------------
    MainComponentClass() {
      return Ti.Css.mergeClassName(
        this.$gui.defaultComClass,
        this.comClass
      )
    },
    //--------------------------------------
    TheOverflow() {
      let ov = this.overflow || this.$gui.defaultOverflow || "auto"
      if("auto" == ov) {
        if(this.isFlexNone) {
          return "fill"
        }
        if(/^(both|shrink)$/.test(this.FlexName)) {
          return "cover"
        }
      }
      return ov
    },
    //--------------------------------------
    BlockSize() {
      let size = this.size
      return /^(auto|stretch)$/.test(size) 
        ? null
        : size
    },
    //--------------------------------------
    FlexName() {
      let flex = this.flex || this.$gui.defaultFlex || "auto"
      if("auto" == flex) {
        if("stretch" == this.size || Ti.Util.isNil(this.size)) {
          return "both"
        }
        return "none"
      }
      return flex || "both"
    },
    //--------------------------------------
    isFlexNil() {
      return "nil" == this.FlexName
    },
    //--------------------------------------
    isFlexNone() {
      return "none" == this.FlexName
    },
    //--------------------------------------
    isShowHeader() {
      if(this.hideTitle || 'tabs' == this.embedIn) {
        return false
      }
      if(this.title || this.hasActions) {
        return true
      }
      return false
    },
    //--------------------------------------
    hasActions() {
      return !_.isEmpty(this.actions)
    },
    //--------------------------------------
    TheCom() {
      //....................................
      // Body -> Component
      if(this.body) {
        let com = _.isString(this.body) ? this.schema[this.body] : this.body
        if(com) {
          let parent = this.schema[com.extends]
          let self = _.omit(com, "extends")
          com = _.merge({}, parent, self)
          return _.defaults(com, {
            comType : "ti-label",
            comConf : {}
          })
        }
      }
      //....................................
      // Sub GUI
      if(!_.isEmpty(this.blocks)) {
        let comType = `ti-gui-${this.type||"cols"}`
        let comConf = {
          tabAt      : this.tabAt,
          border     : this.border,
          adjustable : this.adjustable,
          blocks     : this.blocks,
          schema : this.schema,
          actionStatus : this.actionStatus,
          shown  : this.shown,
          defaultFlex : this.defaultFlex
        }
        return {
          comType, comConf
        }
      }
      //....................................
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    __before_bubble({name, args}) {
      if(this.name) {
        return {
          name : `${this.name}::${name}`,
          args
        }
      }
    },
    //--------------------------------------
    $main() {
      return _.nth(this.$children, 0)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "name" : {
      handler : function(newVal, oldVal) {
        // Guard
        if(!this.$gui)
          return
        // Unregister old
        if(oldVal) {
          this.$gui.unregisterBlock(oldVal)
        }
        // Register self
        if(newVal) {
          this.$gui.registerBlock(newVal, this)
        }
      },
      immediate : true
    }
  },
  //////////////////////////////////////////
  beforeDestroy : function(){
    if(this.name) {
      this.$gui.unregisterBlock(this.name)
    }
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-transfer.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/transfer/ti-transfer.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////////
  data : ()=>({
    myFilterValue : null,
    myOptionsData : [],
    can : {
      data : [],
      checkedIds : []
    },
    sel : {
      data : [],
      checkedIds : []
    },
    selIdMap : {},
    loading: true
  }),
  ///////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //------------------------------------------------
    Values() {
      return Ti.S.toArray(this.value)
    },
    //------------------------------------------------
    CanListComType() {return this.canComType || "ti-list"},
    SelListComType() {return this.selComType || "ti-list"},
    //------------------------------------------------
    CanListComConf() {
      return this.genComConf(this.canComConf, this.can)
    },
    SelListComConf() {
      return this.genComConf(this.selComConf, this.sel)
    },
    //------------------------------------------------
    SelActions() {
      return {
        items: [{
          name : "moveUp",
          type : "action",
          icon : "zmdi-long-arrow-up",
          action : ()=>{
            this.selMoveUp()
          }
        }, {
          name : "moveDown",
          type : "action",
          icon : "zmdi-long-arrow-down",
          action : ()=>{
            this.selMoveDown()
          }
        }]
      }
    },
    //------------------------------------------------
    FilterComConf() {
      return _.assign({
        trimed      : true,
        width       : "100%",
        prefixIcon  : this.loading
          ? "fas-spinner fa-spin"
          : "zmdi-filter-list",
        placeholder : "i18n:filter",
        hover       : ['prefixIcon','suffixText','suffixIcon'],
        loading     : this.loading
      }, this.fltComConf)
    },
    //------------------------------------------------
    GetValueBy() {
      return it => this.Dict.getValue(it)
    },
    //------------------------------------------------
    ReverMapping() {
      if(this.mapping) {
        let re = {}
        _.forEach(this.mapping, (v, k)=>{
          re[v] = k
        })
        return re
      }
    },
    //------------------------------------------------
    Dict() {
      // Define the loading hook
      const _hook_loading = ({loading}) => {
        this.loading = loading
      }
      // Customized
      if(this.options instanceof Ti.Dict) {
        let d = this.options.duplicate()
        d.addHooks(_hook_loading)
        return d
      }
      // Refer dict
      if(_.isString(this.options)) {
        let dictName = Ti.DictFactory.DictReferName(this.options)
        if(dictName) {
          return Ti.DictFactory.CheckDict(dictName, _hook_loading)
        }
      }
      // Auto Create
      return Ti.DictFactory.CreateDict({
        data: this.options,
        getValue : Ti.Util.genGetter(this.valueBy || "value"),
        getText  : Ti.Util.genGetter(this.textBy  || "text|name"),
        getIcon  : Ti.Util.genGetter(this.textBy  || "icon")
      }, {
        hooks: _hook_loading
      })
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods : {
    //---------------------------------------------------
    OnCanListSelected({checkedIds}) {
      this.can.checkedIds = Ti.Util.truthyKeys(checkedIds)
    },
    //---------------------------------------------------
    OnSelListSelected({checkedIds}) {
      this.sel.checkedIds = Ti.Util.truthyKeys(checkedIds)
    },
    //---------------------------------------------------
    OnClickHeadChecker(list) {
      let {data, checkedIds} = list
      // All -> none
      if(data.length == checkedIds.length) {
        list.checkedIds = []
      }
      // Others to All
      else {
        let idMap = this.rebuildIdMap(data)
        list.checkedIds = Ti.Util.truthyKeys(idMap)
      }
    },
    //---------------------------------------------------
    async OnFilterChanged(val) {
      console.log("OnFilterChanged", val)
      this.myFilterValue = val
      this.myOptionsData = await this.Dict.queryData(val)
      this.evalShownCanList()
    },
    //---------------------------------------------------
    GetHeadCheckerIcon({data, checkedIds}) {
      if(data.length > 0) {
        // All
        if(data.length == checkedIds.length) {
          return "fas-check-square"
        }
        // Partally
        if(checkedIds.length > 0) {
          return  "fas-minus-square"
        }
      }
      return "far-square" // none
    },
    //---------------------------------------------------
    // Core Methods
    //---------------------------------------------------
    canListToSel() {
      // Guard
      if(_.isEmpty(this.can.checkedIds))
        return
      // Assign
      let {src, tag} = this.assignToList(this.can, this.sel)
      this.can = src
      this.sel = tag
    },
    //---------------------------------------------------
    selListToCan() {
      // Guard
      if(_.isEmpty(this.sel.checkedIds))
        return
      // Assign
      let {src, tag} = this.assignToList(this.sel,this.can)
      this.can = tag
      this.sel = src
    },
    //---------------------------------------------------
    selMoveUp() {
      let {
        remains, checks, minIndex, maxIndex, checkedIds
      } = this.evalTheList(this.sel)
      if(!_.isEmpty(checks) && minIndex > 0) {
        Ti.Util.insertToArray(remains, minIndex - 1, ...checks)
        this.sel = {
          data : remains,
          checkedIds
        }
      }
    },
    //---------------------------------------------------
    selMoveDown() {
      let {
        remains, checks, minIndex, maxIndex, checkedIds
      } = this.evalTheList(this.sel)
      if(!_.isEmpty(checks)) {
        if(maxIndex < remains.length) {
          maxIndex ++
        }
        Ti.Util.insertToArray(remains, maxIndex, ...checks)
        this.sel = {
          data : remains,
          checkedIds
        }
      }
    },
    //---------------------------------------------------
    // Utility
    //---------------------------------------------------
    // Eval the can/sel List 
    evalTheList(list={}) {
      let remains = []
      let checks  = []
      let checkedIds = []
      let idMap   = {}
      let minIndex = list.data.length
      let maxIndex = -1
      // Build ID map
      _.forEach(list.checkedIds, id => {
        idMap[id] = true
      })
      // Eval checked and remains
      _.forEach(list.data, (li, index) => {
        let id = this.GetValueBy(li)
        if(idMap[id]) {
          minIndex = Math.min(index, minIndex)
          maxIndex = Math.max(index, maxIndex)
          checkedIds.push(id)
          checks.push(li)
        } else {
          remains.push(li)
        }
      })
      // Done for eval
      return {
        remains, checks,
        minIndex,
        maxIndex : maxIndex - checks.length + 1,
        checkedIds
      }
    },
    //---------------------------------------------------
    assignToList({data, checkedIds}, ta) {
      // Make ids map
      let ids = {}
      _.forEach(checkedIds, v=>ids[v]=true)
      // pick remove list
      let remains = []
      let joins = []
      _.forEach(data, it => {
        let itV = this.Dict.getValue(it)
        if(ids[itV]) {
          joins.push(it)
        } else {
          remains.push(it)
        }
      })
      // Merge checked ids
      _.forEach(ta.checkedIds, v=>ids[v]=true)
      // Join to new list
      return {
        src : {
          data: remains, checkedIds: []
        },
        tag : {
          data      : _.concat(ta.data, joins),
          checkedIds: _.keys(ids)
        }
      }
    },
    //---------------------------------------------------
    genComConf(comConf, {data, checkedIds}) {
      return _.assign({
        idBy      : this.GetValueBy,
        display   : this.display || "text"
      }, comConf, {
        data,  checkedIds,
        multi            : true,
        checkable        : true,
        puppetMode       : true,
        autoCheckCurrent : false,
      })
    },
    //---------------------------------------------------
    evalShownCanList() {
      let list = []
      _.forEach(this.myOptionsData, it => {
        let itV = this.Dict.getValue(it)
        if(!this.selIdMap[itV]) {
          list.push(it)
        }
      })
      this.can.data = list
      this.can.checkedIds = []
    },
    //---------------------------------------------------
    async reloadCanList() {
      //console.log("reloadCanList")
      this.myOptionsData = await this.Dict.queryData(this.myFilterValue)
      this.evalShownCanList()
    },
    //---------------------------------------------------
    async reloadSelList(vals=this.Values) {
      //console.log("reloadSelList")
      let list = []
      for(let val of vals) {
        let v = this.evalValue(val)
        let it = await this.Dict.getItem(v)
        if(it) {
          list.push(it)
        } else {
          list.push(v)
        }
      }
      this.sel = {
        data: list,
        checkedIds : _.get(this.sel, "checkedIds") || []
      }
    },
    //---------------------------------------------------
    rebuildIdMap(data) {
      let ids = {}
      _.forEach(data, it => {
        let itV = this.Dict.getValue(it)
        ids[itV] = true
      })
      return ids
    },
    //---------------------------------------------------
    rebuildSelIdMap() {
      this.selIdMap = this.rebuildIdMap(this.sel.data)
    },
    //---------------------------------------------------
    evalValue(val) {
      // Guard
      if(Ti.Util.isNil(val)){
        return val
      }
      // Cases
      return ({
        id: v => v,
        obj: v => {
          if(this.ReverMapping) {
            v = Ti.Util.translate(v, this.ReverMapping)
          }
          return _.get(v, this.idBy)
        },
        item: v => {
          if(this.ReverMapping) {
            v = Ti.Util.translate(v, this.ReverMapping)
          }
          return _.get(v, "value")
        }
      })[this.valueType](val)
    },
    //---------------------------------------------------
    async genValue() {
      let ids = _.keys(this.selIdMap)
      // Guard
      if(_.isEmpty(ids))
        return []
      // Parse
      return await ({
        id: ids => {
          return ids
        },
        obj: async ids => {
          let list = []
          for(let id of ids) {
            let it = await this.Dict.getItem(id)
            if(it)
              if(this.mapping) {
                it = Ti.Util.translate(it, this.mapping)
              }
              list.push(it)
          }
          return list
        },
        item: async ids => {
          let list = []
          for(let id of ids) {
            let obj = await this.Dict.getItem(id)
            let it = {
              text  : this.Dict.getText(obj),
              value : this.Dict.getValue(obj)
            }
            if(it) {
              if(this.mapping) {
                it = Ti.Util.translate(it, this.mapping)
              }
              list.push(it)
            }
          }
          return list
        }
      })[this.valueType](ids)
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  watch : {
    "value" : function(newVal, oldVal) {
      if(!_.isEqual(newVal, oldVal)) {
        this.reloadSelList()
      }
    },
    "options" : function(newVal, oldVal) {
      if(!_.isEqual(newVal, oldVal)) {
        this.reloadCanList()
      }
    },
    "sel.data" : async function() {
      this.rebuildSelIdMap()
      let val = await this.genValue()
      if(!_.isEqual(val, this.Values)) {
        this.$notify("change", val)
      }
    }
  },
  ///////////////////////////////////////////////////////
  mounted : async function() {
    await this.reloadSelList()
    await this.reloadCanList()
  }
  ///////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-tile-order.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/tile/order/web-tile-order.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  props : {
    "value" : {
      type : Object,
      default : ()=>({})
    },
    "proThumbSrc": {
      type : String,
      default : undefined
    },
    "proHref": {
      type : String,
      default : undefined
    },
    "href": {
      type : String,
      default : undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass(
        `is-${this.OrderStatus}`
      )
    },
    //--------------------------------------
    Order() {
      return this.value || {}
    },
    //--------------------------------------
    OrderId() {
      let orId = this.Order.id;
      if(orId) {
        let pos = orId.indexOf(':')
        if(pos > 0) {
          return _.trim(orId.substring(pos+1))
        }
        return orId
      }
      return '- unknown -'
    },
    //--------------------------------------
    OrderStatus() {
      return `or-st-${_.toLower(this.Order.or_st)}`
    },
    //--------------------------------------
    OrderHref() {
      if(this.href) {
        return Ti.S.renderBy(this.href, this.Order)
      }
    },
    //--------------------------------------
    CurrencyChar() {
      return Ti.Bank.getCurrencyChar(this.Order.currency||"RMB")
    },
    //--------------------------------------
    Products() {
      let list = []
      _.forEach(this.value.products, it=>{
        let pro = {...it}
        if(this.proThumbSrc) {
          pro.src = Ti.S.renderBy(this.proThumbSrc, it)
        }
        if(this.proHref) {
          pro.href = Ti.S.renderBy(this.proHref, it)
        }
        pro.subtotal = Ti.Num.precise(it.price * it.amount)
        list.push(pro)
      })
      return list
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickOrder() {
      if(this.Order.id)
        this.$notify("show:order", this.Order.id)
    },
    //--------------------------------------
    OnClickProduct({id}) {
      if(id) {
        this.$notify("open:product", id);
      }
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-pay-choose-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/pay/choose/web-pay-choose-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  "options" : {
    type : Array,
    default : ()=>[{
        "icon":"/gu/rs/ti/icons/png/wxpay256.png",  
        "value":"wx.qrcode",
        "text":"i18n:pay-wx"
      }, {
        "icon":"/gu/rs/ti/icons/png/alipay256.png",
        "value":"zfb.qrcode",
        "text":"i18n:pay-zfb"
      }]
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'm-thing-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/thing/m-thing-actions.mjs'] = (function(){
const _M = {
  //--------------------------------------------
  /***
   * Save current thing detail
   */
  async saveCurrent({commit, dispatch}) {
    commit("setStatus", {saving:true})
    await dispatch("current/save")
    commit("setStatus", {saving:false})
    commit("syncStatusChanged")
  },
  //--------------------------------------------
  /***
   * Update current thing meta data to search/meta
   */
  async updateCurrent({state, commit, dispatch, getters}, {name, value}={}) {
    // console.log("hupdateCurrentahah", {name, value})
    // if(window.lastMS && (Date.now() - window.lastMS) < 5000) {
    //   console.log("!!!! dup-call", {name, value})
    // }
    // window.lastMS = Date.now()
    if(getters.hasCurrent) {
      await dispatch("current/updateMeta", {name,value})
      commit("search/updateItem", state.current.meta)
    }
  },
  //--------------------------------------------
  async updateCurrentMetas({state, commit, dispatch, getters}, data={}) {
    if(getters.hasCurrent) {
      //console.log({name, value})
      await dispatch("current/updateMetas", data)
      commit("search/updateItem", state.current.meta)
    }
  },
  //--------------------------------------------
  async batchUpdateMetas({state, commit, getters}, updates={}){
    let checkedItems = getters["search/checkedItems"]
    // Guard
    if(_.isEmpty(checkedItems) || _.isEmpty(updates)) {
      return
    }

    // Mark loading
    commit("setStatus", {reloading:true})

    // Gen commands
    let currentId = _.get(state.current, "meta.id")
    let input = JSON.stringify(updates)
    let tsId = state.meta.id
    for(let it of checkedItems) {
      let cmdText = `thing ${tsId} update ${it.id} -fields -cqn`
      let newIt = await Wn.Sys.exec2(cmdText, {as:"json", input})
      commit("search/updateItem", newIt)
      if(newIt.id == currentId) {
        commit("current/setMeta", newIt)
      }
    }

    // Mark loading
    commit("setStatus", {reloading:false})
  },
  //--------------------------------------------
  setCurrentMeta({state, commit}, meta) {
    //console.log(" -> setCurrentMeta", meta)
    commit("current/setMeta", meta)
    commit("syncStatusChanged")
    commit("search/updateItem", state.current.meta)
  },
  //--------------------------------------------
  setCurrentContent({state, commit, dispatch}, content) {
    dispatch("current/onChanged", content)
    commit("syncStatusChanged")
    commit("search/updateItem", state.current.meta)
  },
  //--------------------------------------------
  /***
   * Files: sync the file count and update to search/meta
   */
  async autoSyncCurrentFilesCount({state, commit, dispatch}, {quiet=true}={}) {
    let oTh = state.current.meta
    let dirName = state.currentDataDir
    // Guard
    if(!dirName) {
      console.warn("thing file -ufc without 'dirName'");
      return Ti.Toast.Open("thing file -ufc without 'dirName'")
    }
    // sync current media count
    if(oTh && oTh.id && dirName) {
      commit("setStatus", {reloading:true})

      // run command
      let th_set = oTh.th_set
      let cmdText = `thing ${th_set} file ${oTh.id} -dir '${dirName}' -ufc -cqn`
      let oNew = await Wn.Sys.exec2(cmdText, {as:"json"})
      // Set current meta
      dispatch("setCurrentMeta", oNew)

      commit("setStatus", {reloading:false})

      if(!quiet) {
        await Ti.Toast.Open('i18n:wn-th-recount-media-done', {
          vars: {n: oNew.th_media_nb||0}
        })
      }
    }
  },
  //--------------------------------------------
  /***
   * Toggle enter/outer RecycleBin
   */
  async toggleInRecycleBin({state, commit, dispatch, getters}) {
    //console.log("thing-manager-toggleInRecycleBin")
    // Update Search
    let inRecycleBin = !getters.isInRecycleBin
    commit("search/setInRecycleBin", inRecycleBin)

    // Update status
    commit("setStatus", {inRecycleBin, reloading:true})
    // Reload List
    await dispatch("search/reload")

    commit("setStatus", {reloading:false})
  },
  //--------------------------------------------
  /***
   * Create one new thing
   */
  async create({state, commit, dispatch}, obj={}) {
    // Special setting for create
    let beCreate = _.get(state.config, "schema.behavior.create") || {}
    let {unique,after,fixed} = beCreate

    // Prepare the command
    let json = JSON.stringify(obj)
    let th_set = state.meta.id
    let cmds = [`thing ${th_set} create -cqn -fields`]

    // Join `-unique`
    if(!_.isEmpty(unique) && _.isString(unique)) {
      cmds.push(` -unique '${unique}'`)
    }

    // Join `-fixed`
    if(!_.isEmpty(fixed) && _.isString(unique)) {
      cmds.push(` -fixed '${JSON.stringify(fixed)}'`)
    }

    // Join `-after`
    if(!_.isEmpty(after) && _.isString(after)) {
      cmds.push(` -after '${after}'`)
    }

    // Mark reloading
    commit("setStatus", {reloading:true})

    // Do Create
    let cmdText = cmds.join(" ")
    let newMeta = await Wn.Sys.exec2(cmdText, {input:json, as:"json"})

    if(newMeta && !(newMeta instanceof Error)) {
      // Append To Search List as the first 
      commit("search/prependToList", newMeta)
      
      // Set it as current
      await dispatch("setCurrentThing", {meta:newMeta})
    }

    // Mark reloading
    commit("setStatus", {reloading:false})

    // Return the new object
    return newMeta
  },
  //--------------------------------------------
  /***
   * Search: Remove Checked Items
   */
  async removeChecked({state, commit, dispatch, getters}, hard=false) {
    let ids = _.cloneDeep(state.search.checkedIds)
    if(_.isEmpty(ids)) {
      return await Ti.Alert('i18n:del-none')
    }

    // Config is hard
    let beh = _.get(state, "config.schema.behavior") || {}
    hard |= beh.hardRemove

    // If hard, warn at first
    if(hard || state.status.inRecycleBin) {
      if(! (await Ti.Confirm('i18n:del-hard'))) {
        return
      }
    }

    commit("setStatus", {deleting:true})

    // Prepare the ids which fail to remove
    let failIds = {}

    // Prepare the cmds
    let th_set = state.meta.id
    let cmdText = `thing ${th_set} delete ${hard?"-hard":""} -cqn -l ${ids.join(" ")}`
    let reo = await Wn.Sys.exec2(cmdText, {
      as:"json",
      errorAs: ({data})=>{
        let id = _.trim(data)
        failIds[id] = true
      }
    })

    // Get the removeIds
    let removeIds = _.filter(ids, id => !failIds[id])
    //console.log("removeIds:", removeIds)

    // Remove it from search list
    if(!_.isEmpty(removeIds)) {
      commit("search/removeItems", removeIds)
    }
    let current = getters["search/currentItem"]
    //console.log("getback current", current)
    // Update current
    await dispatch("setCurrentThing", {meta:current})

    commit("setStatus", {deleting:false})
  },
  //--------------------------------------------
  /***
   * RecycleBin: restore
   */
  async restoreRecycleBin({state, commit, dispatch, getters}) {
    // Require user to select some things at first
    let ids = state.search.checkedIds
    if(_.isEmpty(ids)) {
      return await Ti.Alert('i18n:thing-restore-none')
    }
    commit("setStatus", {restoring:true})

    // Run command
    let th_set = state.meta.id
    let cmdText = `thing ${th_set} restore -quiet -cqn -l ${ids.join(" ")}`
    let reo = await Wn.Sys.exec2(cmdText, {as:"json"})

    // Reload
    await dispatch("search/reload")

    // Get back current
    let current = getters["search/currentItem"]
    
    // Update current
    await dispatch("current/reload", current)

    commit("setStatus", {restoring:false})
  },
  //--------------------------------------------
  /***
   * RecycleBin: clean
   */
  async cleanRecycleBin({state, commit, dispatch}) {
    commit("setStatus", {cleaning:true})

    // Run command
    let th_set = state.meta.id
    let cmdText = `thing ${th_set} clean -limit 3000`
    await Wn.Sys.exec2(cmdText)

    commit("setStatus", {cleaning:false})

    await dispatch("reload")
  },
  //--------------------------------------------
  // User Interactivity
  //--------------------------------------------
  /***
   * Open meta editor, if has current, use it
   */
  async openMetaEditor({state, getters, dispatch}) {
    // Guard
    if(!state.meta) {
      return await Ti.Toast.Open("i18n:empty-data", "warn")
    }
    //.........................................
    // For current selected
    //.........................................
    if(getters.hasCurrent) {
      // Edit current meta
      let reo = await Wn.EditObjMeta(state.current.meta, {
        fields:"default", autoSave:false
      })

      // Cancel the editing
      if(_.isUndefined(reo)) {
        return
      }

      // Update the current editing
      let {updates} = reo
      if(!_.isEmpty(updates)) {
        await dispatch("updateCurrentMetas", updates)
      }
      return
    }
    //.........................................
    // For Whole thing thing
    //.........................................
    await Wn.EditObjMeta(state.meta, {
      fields:"auto", autoSave:true
    })
  },
  //--------------------------------------------
  /***
   * Open current object source editor
   */
  async openContentEditor({state, getters, dispatch}) {
    // Guard
    if(!state.meta) {
      return await Ti.Toast.Open("i18n:empty-data", "warn")
    }
    if(getters.hasCurrent) {
      // Open Editor
      let newContent = await Wn.EditObjContent(state.current.meta, {
        content : state.current.content
      })

      // Cancel the editing
      if(_.isUndefined(newContent)) {
        return
      }

      // Update the current editing
      await dispatch("current/changeContent", newContent)
      return
    }

    // Warn user
    return await Ti.Toast.Open("i18n:nil-obj", "warn")
  },
  //--------------------------------------------
  /***
   * Reload files
   */
  async reloadFiles({state,commit,dispatch, getters}, {force=false}={}) {
    //console.log("reloadFiles")
    let current = _.get(state.current, "meta")
    let thingId = _.get(current, "id")
    let dirName = state.filesName
    // No current
    if(!thingId || !dirName) {
      commit("files/reset")
    }
    // Reload the files
    else {
      let thSetId = state.meta.id
      // get the parent DIR
      let oDir = state.files.meta
      if(!oDir || !oDir.ph || !oDir.ph.endsWith(`/data/${thingId}/${dirName}`)) {
        let dataHome = `id:${thSetId}/data`
        let dirPath = `${thingId}/${dirName}`
        // Create or fetch the dir
        let newMeta = {
          race : "DIR",
          nm   : dirPath
        }
        let json = JSON.stringify(newMeta)
        let cmdText = `obj "${dataHome}" -IfNoExists -new '${json}' -cqno`
        oDir = await Wn.Sys.exec2(cmdText, {as:"json"})
        if(!oDir) {
          return 
        }
      } // ~ if(!oDir || !oDir.ph
      // Try to reload the children
      await dispatch("files/reload", oDir)
      // let cuId = getters["files/autoCurrentItemId"]
      // //commit("files/selectItem", cuId)
      // dispatch("selectCurrentPreviewItem", cuId)
    }
  },
  //--------------------------------------------
  /***
   * Reload search list
   */
  async reloadSearch({state, commit, dispatch}) {
    let meta = state.meta

    commit("setStatus", {reloading:true})

    await dispatch("search/reload", meta)

    // Sometimes, current object will not in the list
    // we need remove it
    if(state.current.meta) {
      // find new meta
      let currentId = state.current.meta.id
      let current = null
      for(let it of state.search.list) {
        if(it.id == currentId) {
          current = it
          break
        }
      }
      // Update the meta
      await dispatch("setCurrentThing", {meta : current})
    }

    commit("setStatus", {reloading:false})
  },
  //--------------------------------------------
  /***
   * Set Current Thing
   * 
   * It will load content if "content" is shown
   */
  async setCurrentThing({state, commit, dispatch}, {
    meta=null, 
    checkedIds={}
  }={}) {
    //..........................................
    // Update selected item in search list
    let curId = meta ? meta.id : null
    let ckIds = Ti.Util.truthyKeys(checkedIds)
    if(!Ti.Util.isNil(curId)) {
      ckIds.push(curId)
    }
    commit("search/setCurrentId", curId)
    commit("search/setCheckedIds", ckIds)
    //..........................................
    // Update the currentDataHome
    let home = state.meta
    let dataHome = curId ? `id:${home.id}/data/${curId}` : null
    commit("setCurrentDataHome", dataHome)

    // Try get current dataHomeObj
    let dataHomeObj = await Wn.Io.loadMeta(dataHome)
    commit("setCurrentDataHomeObj", dataHomeObj)

    //..........................................
    // Keep last
    let lastKey = `${home.id}:currentId`
    if(!_.get(state.config.schema, "keepLastOff")) {
      Ti.Storage.session.set(lastKey, curId);
    }
    // Clean local storage
    else {
      Ti.Storage.session.remove(lastKey);
    }
    //..........................................
    // Reload Current
    let currentMeta = _.cloneDeep(meta)
    // Reload if show content
    if(_.get(state.config, "shown.content")) {
      await dispatch("current/reload", currentMeta)
    }
    // Just update the meta
    else {
      commit("current/setMeta", currentMeta)
    }
    //..........................................
  },
  //--------------------------------------------
  /***
   * Do Change Block Shown:
   * 
   * If show content/files, it may check if need to be reload data
   */
  async doChangeShown({state, commit, dispatch}, shown) {
    let oldShownContent = _.get(state, "config.shown.content") || false
    // Just mark the shown
    dispatch("config/updateShown", shown)

    // If show changed, and content is true
    if(!oldShownContent && shown.content) {
      //console.log("reload current content")
      await dispatch("current/reload")
      commit("syncStatusChanged")
    }
  },
  //--------------------------------------------
  /***
   * Reload All
   */
  async reload({state, commit, dispatch, getters}, meta) {
    //console.log("thing-manager.reload", state)
    // Update New Meta
    if(meta) {
      commit("setMeta", meta)
    }
    // Get meta back
    else {
      meta = state.meta
    }
    // meta is home
    let home = meta

    // Mark reloading
    commit("setStatus", {reloading:true})

    // Reload Config
    //console.log("reload config")
    await dispatch("config/reload", meta)

    // Update the default filesDirName
    let localDirNameKey = `${meta.id}_dirname`
    let dirName = Ti.Storage.session.getString(localDirNameKey)
    if(!dirName) {
      dirName = _.get(state.config, "schema.behavior.filesDirName")
                || "media"
    }
    commit("setCurrentDataDir", dirName || "media")

    // Load local status
    let local = Ti.Storage.session.getObject(meta.id) || {}
    _.defaults(local, {
      filter: {},
      sorter: {},
      pager: {}
    })
    // Setup default filter and sorter
    let filter = _.get(state.config.schema, "behavior.filter") || {}
    let filter2 = _.assign({}, filter, local.filter)
    if(!filter.majorKey) {
      delete filter2.majorKey;
    }
    if(!_.isEmpty(filter2)) {
      commit("search/setFilter", filter2)
    }
    // Sorter
    let sorter = _.get(state.config.schema, "behavior.sorter") || {}
    if(!_.isEmpty(local.sorter)) {
      commit("search/setSorter", local.sorter)
    }
    else if(!_.isEmpty(sorter)) {
      commit("search/setSorter", sorter)
    }

    // Pager
    let pager = _.get(state.config.schema, "behavior.pager")
    if(pager) {
      commit("search/updatePager", pager)
    }

    // Show keys
    let showKeys = _.get(state.config.schema, "behavior.showKeys")
    if(showKeys) {
      commit("search/setShowKeys", showKeys)
    }

    // If pager is enabled, try load from local
    //console.log("root Getters", getters) 
    if(getters["search/isPagerEnabled"]) {
      if(!_.isEmpty(local.pager)) {
        commit("search/setPager", local.pager)
      }
    }

    // Reload Search
    //console.log("reload search")
    await dispatch("reloadSearch")

    // Auto Select the first item
    if(_.get(state, "meta.th_auto_select")) {
      if(!state.current.meta && !_.isEmpty(state.search.list)) {
        // Get last
        let lastKey = `${home.id}:currentId`
        let curId = Ti.Storage.session.getString(lastKey);
        let current;

        // Find by id
        if(curId)
          current = _.find(state.search.list, li=>li.id == curId)

        // use the first one
        if(!current)
          current = _.first(state.search.list)
        
        // Highlight it
        await dispatch("setCurrentThing", {
          meta : current, 
          force : false
        })
      }
    }

    // All done
    commit("setStatus", {reloading:false})
  }
  //--------------------------------------------
}
return _M;
;
})()
// ============================================================
// EXPORT 'ti-tags.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/tags/ti-tags.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data: ()=>({
    myTags   : [],
    myValues : []
  }),
  ////////////////////////////////////////////////////
  props : {
    //-----------------------------------
    // Data
    //-----------------------------------
    "value" : {
      type : Array,
      default : ()=>[]
    },
    "dict" : {
      type : [String, Ti.Dict],
      default : null
    },
    "mapping" : {
      type : Object,
      default : undefined
    },
    "itemOptions" : {
      type : Array,
      default : ()=>[]
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "cancelItemBubble" : {
      type : Boolean,
      default : false
    },
    "removable" : {
      type : Boolean,
      default : false
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "itemIconBy" : {
      type : [String, Function],
      default : undefined
    },
    "optionDefaultIcon" : {
      type : String,
      default : undefined
    },
    "itemDefaultIcon" : {
      type : String,
      default : undefined
    },
    "removeIcon" : {
      type : String,
      default : "zmdi-close"
    },
    "statusIcons" : {
      type : Object,
      default : ()=>({
        collapse : "zmdi-chevron-down",
        extended : "zmdi-chevron-up"
      })
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      if(this.className)
        return this.className
    },
    //------------------------------------------------
    getTagItemIcon() {
      if(_.isFunction(this.itemIconBy)) {
        return it => this.itemIconBy(it)
      }
      if(_.isString(this.itemIconBy)) {
        return it => _.get(it, this.itemIconBy)
      }
      return it => null
    },
    //--------------------------------------
    Dict() {
      if(this.dict) {
        // Already Dict
        if(this.dict instanceof Ti.Dict) {
          return this.dict
        }
        // Get back
        let {name} = Ti.DictFactory.explainDictName(this.dict)
        return Ti.DictFactory.CheckDict(name)
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnItemChanged({index, value}={}) {
      if(index >= 0) {
        let values = this.getMyValues()
        values[index] = Ti.Util.fallback(value, null)
        this.$notify("change", values)
      }
    },
    //------------------------------------------------
    OnItemRemoved({index}={}) {
      if(index >= 0) {
        let values = this.getMyValues()
        _.pullAt(values, index)
        this.$notify("change", values)
      }
    },
    //------------------------------------------------
    OnItemFired({index=-1}={}) {
      if(index >= 0) {
        let it = _.nth(this.theData, index)
        if(it) {
          this.$notify("item:actived", it)
        }
      }
    },
    //------------------------------------------------
    async evalMyData() {
      const tags = []
      if(_.isArray(this.value)) {
        const lastIndex = this.value.length - 1
        for(let index=0; index<this.value.length; index++){
          let val = this.value[index]
          let tag;
          // Auto mapping plain object
          if(_.isPlainObject(val)) {
            tag = this.mapping 
                    ? Ti.Util.translate(val, this.mapping)
                    : _.cloneDeep(val)
            // Customized the icon
            if(!tag.icon) {
              tag.icon = this.getTagItemIcon(val)
            }
          }
          // Lookup Dict
          else if(this.Dict) {
            let it = await this.Dict.getItem(val)
            tag = _.defaults({
              icon  : this.Dict.getIcon(it),
              text  : this.Dict.getText(it) || val,
              value : val
            })
          }
          // Auto gen object for simple value
          else {
            tag = {text: val, value: val}
          }
          // Join default value
          _.defaults(tag, {
            index,
            icon    : this.itemDefaultIcon,
            options : this.itemOptions,
            atLast  : index == lastIndex
          })
          // Join to tags
          tags.push(tag)
        }; // _.forEach
      }
      // assign the tags
      this.myTags = tags
    },
    //------------------------------------------------
    getMyValues() {
      const vals = []
      for(let tag of this.myTags) {
        vals.push(Ti.Util.fallback(tag.value, null))
      }
      return vals
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    "value" : {
      handler : "evalMyData",
      immediate : true
    }
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'markdown-preview.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/markdown/preview/markdown-preview.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////
  data: ()=>({
    myHtml  : null,
    myTheme : null
  }),
  ///////////////////////////////////////////////////
  props : {
    "previewMediaSrc" : {
      type : [String, Function],
      default : undefined
    },
    "value" : {
      type : String,
      default : ""
    }, 
    "placeholder" : {
      type : String,
      default : "i18n:blank"
    },
    "theme" : {
      type : String,
      default : "nice"
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //-----------------------------------------------
    ThemeClass() {
      if(this.myTheme) {
        return `ti-markdown-theme-${this.myTheme}`
      }
    },
    //-----------------------------------------------
    ThePreviewMediaSrc() {
      let transSrc = _.identity;
      // String mode
      if(_.isString(this.previewMediaSrc)) {
        transSrc = src => {
          return Ti.S.renderBy(this.previewMediaSrc, {src})
        }
      }
      // Function Mode
      else if(_.isFunction(this.previewMediaSrc)){
        transSrc = this.previewMediaSrc
      }

      return async src => {
        // console.log("!!!!src", src)
        // Outsite link
        if(/^(https?:)(\/\/)/.test(src))
          return src

        // translate it
        return transSrc(src)
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    async renderMarkdown() {
      if(!Ti.Util.isBlank(this.value)) {
        let MdDoc = Cheap.parseMarkdown(this.value)
        //console.log(MdDoc.toString())
        this.myHtml  = await MdDoc.toBodyInnerHtml({
          mediaSrc : this.ThePreviewMediaSrc
        })
        this.myTheme = MdDoc.getMeta("theme", this.theme)
      }
      // Show Blank
      else {
        this.myHtml = Ti.I18n.text(this.placeholder)
        this.myTheme = this.theme
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "value" : {
      handler : "renderMarkdown",
      immediate : true
    }
  }
  ///////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-chart-combo.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/chart/combo/wn-chart-combo.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data: ()=>({
    /*
    [{
      name: "video-view",
      date: "2020-09-21",
      span: "7d",
      type: "pie"
    }]
    */
    myCharts : [],
    myShowChartNames : [],
    /*
    {
      $ChartName : {}
    }
    */
    myChartData : {},
    myDate : undefined,
    mySpan : undefined,
    myChartComConf : {}
  }),
  ////////////////////////////////////////////////////
  props : {
    "chartDefines" : {
      type : Object,
      default : undefined
    },
    "chartOptions" : {
      type : Object,
      default : undefined
    },
    /*
    [{name, title, agg, sum, sumOptions, types, type, chartOptions}]
    */
    "charts" : {
      type : Array,
      default : ()=>[]
    },
    "showCharts" : {
      type : [String, Array],
      default : undefined
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-multi-chart" : this.TheChartList.length > 1
      });
    },
    //------------------------------------------------
    TheShowChartNames() {
      if(_.isEmpty(this.myShowChartNames)) {
        return this.showCharts
      }
      return this.myShowChartNames
    },
    //------------------------------------------------
    TheChartNameList() {
      let list = []
      _.forEach(this.charts, ca => {
        list.push(_.pick(ca, "name", "title", "icon"))
      })
      return list
    },
    //------------------------------------------------
    TheChartMap() {
      let map = {}
      _.forEach(this.charts, ca => {
        map[ca.name] = ca
      })
      return map
    },
    //------------------------------------------------
    TheChartList() {
      let names = _.concat(this.TheShowChartNames)
      let list = []
      _.forEach(names, (caName, index) => {
        let ca = _.get(this.TheChartMap, caName)
        if(!ca)
          return

        let myChart = _.nth(this.myCharts, index) || {}
        let li = _.cloneDeep(myChart)
        let options = _.cloneDeep(this.chartOptions)
        //console.log(options)
        options = _.merge(options, ca.chartOptions)
        // Set default value
        _.defaults(li, {
          chartDefines : this.chartDefines,
          nameList : this.TheChartNameList,
          index,
          name : ca.name,
          chartTypes : ca.types,
          type : ca.type,
          chartOptions : options
        })
        // Test the type
        if(li.type && _.indexOf(li.chartTypes, li.type)<0) {
            li.type = ca.type
        }

        // Join to list
        list.push(li)
      })
      return list
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    async OnReloadChartData({index}, {force, cleanCache, done}) {
      await this.reloadChartData(index, {force, cleanCache})

      if(_.isFunction(done)) {
        done()
      }
    },
    //------------------------------------------------
    OnChangeChartName({index}, name) {
      // Update my chart setting
      this.$set(this.myShowChartNames, index, name)
      this.$set(this.myChartData, index, [])
      this.$nextTick(()=>{
        this.reloadChartData(index)
      })
    },
    //------------------------------------------------
    OnChangeChartType({index}, type) {
      // Update my chart setting
      this.setMyChart(index, {type})
    },
    //------------------------------------------------
    OnChangeChartDateSpan({index}, {date, span}) {
      // Update my chart setting
      this.setMyChart(index, {date, span})
      this.$nextTick(()=>{
        this.reloadChartData(index)
      })
    },
    //------------------------------------------------
    //
    // Utility
    //
    //------------------------------------------------
    setMyChart(index, obj) {
      let ca = _.nth(this.myCharts, index) || {}
      ca = _.assign({}, ca, obj)
      this.$set(this.myCharts, index, ca)
    },
    //------------------------------------------------
    getChartData(index) {
      //console.log("getChartData", name)
      return _.get(this.myChartData, index)
    },
    //------------------------------------------------
    //
    // Actions
    //
    //------------------------------------------------
    async reloadChartData(index, {force=false, cleanCache=false}={}) {
      let chartName = _.nth(this.TheShowChartNames, index)
      let chart = _.get(this.TheChartMap, chartName)
      if(!chart) {
        return
      }
      let {name, agg, sum, sumOptions} = chart
      let {date, span} = _.nth(this.myCharts, index) || {}

      // Prepare the command text
      let cmd = [`statistics sum '${sum}' -json -cqn`]
      // Date & span
      if(date) {
        cmd.push(`-date '${date}'`)
      }
      if(span) {
        cmd.push(`-span '${span}'`)
      }
      // Agg
      if(agg) {
        cmd.push(`-agg '${agg}'`)
        if(cleanCache) {
          cmd.push('-agg-force')
        }
      }
      // Force
      if(force){
        cmd.push("-force")
      }
      // More options
      _.forEach(sumOptions, (v, k)=>{
        let str
        if(_.isString(v) || _.isNumber(v) || _.isBoolean(v)) {
          str = v
        } else {
          str = JSON.stringify(v)
        }
        cmd.push(`-${k} '${str}'`)
      })

      // Executed command
      let cmdText = cmd.join(" ")
      //console.log("reloadChartData", cmdText)
      let reo = await Wn.Sys.exec2(cmdText, {as: "json"})
      if(reo && _.isArray(reo)) {
        this.$set(this.myChartData, index, reo)
      }
    },
    //------------------------------------------------
    preloadChartData() {
      if(!_.isEmpty(this.showCharts)) {
        for(let i=0; i<this.showCharts.length; i++) {
          this.reloadChartData(i)
        }
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    "showCharts" : {
      handler: function(newVal, oldVal) {
        this.myShowChartNames = _.cloneDeep(this.showCharts)
        if(!_.isEqual(newVal, oldVal)) {
          this.preloadChartData()
        }
      },
      immediate : true
    }
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-gui-footer.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/gui/footer/wn-gui-footer.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  /////////////////////////////////////////
  props : {
    "infoIcon" : {
      type : [String, Object],
      default : undefined
    },
    "infoText" : {
      type : String,
      default : undefined
    },
    "message" : {
      type : String,
      default : undefined
    },
    "indicator" : {
      type : String,
      default : undefined
    }
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-fileset-tabs.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/fileset/tabs/wn-fileset-tabs.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data: ()=>({
    myShown : {},
    myList : [],
    dataReady : false
  }),
  ////////////////////////////////////////////////////
  props : {
    "comType" : {
      type : String,
      default : undefined
    },
    "comConf" : {
      type : Object,
      default : ()=>({})
    },
    "keepShownTo" : {
      type : String,
      default : "keep_shown_${id}"
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TabsGUILayout() {
      let gui = {
        type : "tabs",
        blocks : []
      }
      _.forEach(this.myList, o => {
        let comConf = Ti.Util.explainObj({
          dataReady : this.dataReady,
          home : this.meta,
          meta : o
        }, this.comConf)
        let li = {
          title : o.title || o.nm,
          name  : o.nm,
          icon  : o.icon,
          body : {
            comType : this.comType,
            comConf
          }
        }
        gui.blocks.push(li)
      })

      if(gui.blocks.length == 1) {
        this.myShown = {
          [gui.blocks[0].name] : true
        }
      }

      return gui
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnGuiInit($gui) {
      this.$gui = $gui
    },
    //------------------------------------------------
    OnShownChange(shown) {
      this.myShown = shown

      let shownKey = this.getShownKey()
      if(shownKey) {
        Ti.Storage.session.setObject(shownKey, shown)
      }
    },
    //------------------------------------------------
    $MainBlock() {
      let keys = [];
      _.forEach(this.myShown, (v, k)=>{
        if(v)
        keys[0] = k
      })
      let key = _.nth(keys, 0)
      if(key) {
        return this.$gui.$block(key)
      }
    },
    //------------------------------------------------
    $MainCom() {
      let $b = this.$MainBlock()
      if($b)
        return $b.$main()
    },
    //------------------------------------------------
    getShownKey() {
      if(this.keepShownTo && this.meta) {
        return Ti.S.renderBy(this.keepShownTo, this.meta)
      }
    },
    //------------------------------------------------
    async reload() {
      this.dataReady = false
      //console.log("do reload")
      this.myList = await this.reloadChildren()
      this.dataReady = true

      let shownKey = this.getShownKey()
      if(shownKey) {
        this.myShown = Ti.Storage.session.getObject(shownKey)
      }
    } 
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-color.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/color/ti-color.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  ///////////////////////////////////////////////////////
  props : {
    "value" : {
      type : [String, Number],
      default : null
    },
    "majorColors" : {
      type : Array,
      default : ()=>["#980000","#ff0000","#ff9900","#ffff00","#00ff00",
                 "#00ffff","#4a86e8","#0000ff","#9900ff","#ff00ff"]
    },
    // List the colors at first rows
    "topColors" : {
      type : Array,
      default : ()=>["#e6b8af","#f4cccc","#fce5cd","#fff2cc","#d9ead3",
                 "#d0e0e3","#c9daf8","#cfe2f3","#d9d2e9","#ead1dc"]
    },
    // List the colors at last rows
    // it should same lenght with topColors
    "bottomColors" : {
      type : Array,
      default : ()=>["#5b0f00","#660000","#783f04","#7f6000","#274e13",
                 "#0c343d","#1c4587","#073763","#20124d","#4c1130"]
    },
    // How many middle colors between the head and bottom
    "middleDegree" : {
      type : Number,
      default : 5
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    theColor() {
      return Ti.Types.toColor(this.value, null)
    },
    //---------------------------------------------------
    theHex() {
      if(this.theColor)
        return this.theColor.hex
    },
    //---------------------------------------------------
    theAlpha() {
      if(this.theColor)
        return Math.round(this.theColor.alpha * 100)
    },
    //---------------------------------------------------
    theColorValue() {
      if(this.theColor)
        return this.theColor.rgba
      return Ti.I18n.get("empty")
    },
    //---------------------------------------------------
    colCount() {
      return this.topColors.length
    },
    //---------------------------------------------------
    colorGrays() {
      let grays = []
      let step = 255 / this.colCount
      for(let i=0; i<this.colCount; i++) {
        let v = Math.round((i+1) * step)
        grays.push(Ti.Types.toColor(v))
      }
      return grays
    },
    //---------------------------------------------------
    colorMajors() {
      let majors = []
      for(let v of this.majorColors) {
        majors.push(Ti.Types.toColor(v))
      }
      return majors
    },
    //---------------------------------------------------
    colorMatrix() {
      // Head Colors
      let tops = []
      for(let v of this.topColors) {
        tops.push(Ti.Types.toColor(v))
      }
      // Bottom colors
      let bottoms = []
      for(let v of this.bottomColors) {
        bottoms.push(Ti.Types.toColor(v))
      }
      // Middle Colors
      let matrix = [tops]
      for(let y=0; y<this.middleDegree-1; y++) {
        let rows = []
        for(let x=0; x<this.colCount; x++) {
          let top = tops[x]
          let bottom = bottoms[x]
          let pos = (y+1) /this.middleDegree
          let color = top.between(bottom, pos)
          color.adjustByHSL({s:.5})
          rows.push(color)
        }
        matrix.push(rows)
      }
      // The bottom
      matrix.push(bottoms)
      // Return the matrix
      return matrix
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods : {
    //---------------------------------------------------
    colorItemStyle(color) {
      return {
        "background-color" : color.rgb
      }
    },
    //---------------------------------------------------
    onHexChanged(evt) {
      let hex=_.trim(evt.target.value)
      if(/^[0-9a-f]{3,6}$/i.test(hex)) {
        hex = "#" + hex
      }
      let co = Ti.Types.toColor(hex)
      this.$notify("change", co)
    },
    //---------------------------------------------------
    onAlphaChanged(a) {
      let co = this.theColor 
                ? this.theColor.clone()
                : Ti.Types.toColor("black")
      co.alpha = a / 100
      this.$notify("change", co)
    },
    //---------------------------------------------------
    onColorClicked(color) {
      let co = color.clone()
      if(_.isNumber(this.theAlpha)) {
        co.alpha = this.theAlpha/100
      }
      this.$notify("change", co)
    }
    //---------------------------------------------------
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-adaptlist-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/adaptlist/wn-adaptlist-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "meta" : {
    type : Object,
    default : null
  },
  // {list:[], pager:{..}}
  "data" : {
    type : [Object, Array],
    default : null
  },
  "changedId" : {
    type : String,
    default : null
  },
  "status" : {
    type : Object,
    default : ()=>({
      reloading : false
    })
  },
  "itemTitleKey" : {
    type : String,
    default : "title"
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  // Drop files to upload
  "droppable" : {
    type : Boolean,
    default : true
  },
  // multi-selectable
  // effected when selectable is true
  "multi" : {
    type : Boolean,
    default : true
  },
  "checkable" : {
    type : Boolean,
    default : true
  },
  "blurable" : {
    type : Boolean,
    default : true
  },
  "selectable" : {
    type : Boolean,
    default : true
  },
  // aspect: list item spacing
  // `xs|sm|md|lg|xl`
  "spacing" : {
    type : String,
    default : "sm"
  },
  "keeyHiddenBy" : {
    type : String,
    default : "wn-list-adaptview-expose-hidden"
  },
  "routers" : {
    type : Object,
    default : ()=>({
      "reload" : "dispatch:current/reload"
    })
  },
  "listConf" : {
    type : Object,
    default : undefined
  },
  "acceptUpload" : {
    type : Array,
    default : undefined
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "itemClassName" : {
    type : String,
    default : undefined
  },
  "itemBadges" : {
    type : [Object, Function],
    default : undefined
  },
  //-----------------------------------
  // Callback
  //-----------------------------------
  "beforeUpload" : {
    type: Function,
    default: undefined
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-input-timerange.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/timerange/ti-input-timerange.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    "runtime" : null,
    "status"  : "collapse"
  }),
  ////////////////////////////////////////////////////
  props : {
    "canInput" : {
      type : Boolean,
      default : true
    },
    "value" : {
      type : [String, Object, Number, Array],
      default : null
    },
    "rangeKeys" : {
      type : Array,
      default : ()=>["beginTime", "endTime"]
    },
    // TODO only str-array supported now
    // please fix it refer by ti-input-daterange.mjs
    "valueType" : {
      type : String,
      default : "str-array",
      validator: v => /^((str|ms|sec)-(array|obj))$/.test(v)
    },
    "dftValue" : {
      type : Array,
      default : ()=>["09:00", "17:00"]
    },
    "icon" : {
      type : String,
      default : "zmdi-time-interval"
    },
    "unit" : {
      type : String,
      default : "ms"
    },
    "format" : {
      type : String,
      default : "HH:mm"
    },
    "placeholder" : {
      type : String,
      default : "i18n:blank-time-range"
    },
    "hideBorder" : {
      type : Boolean,
      default : false
    },
    "width" : {
      type : [Number, String],
      default : "2rem"
    },
    "height" : {
      type : [Number, String],
      default : undefined
    },
    "statusIcons" : {
      type : Object,
      default : ()=>({
        collapse : "zmdi-chevron-down",
        extended : "zmdi-chevron-up"
      })
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName(this.className)
    },
    //------------------------------------------------
    isCollapse() {return "collapse"==this.status},
    isExtended() {return "extended"==this.status},
    //--------------------------------------
    theFormConfig() {
      let [keyBegin, keyEnd] = this.rangeKeys
      let fields = [{
        name  : keyBegin,
        type  : "Time",
        title : "i18n:time-begin",
        comType : "ti-input-time"
      }, {
        name  : keyEnd,
        type  : "Time",
        title : "i18n:time-end",
        comType : "ti-input-time"
      }]
      return {
        fields,
        spacing : "tiny",
        statusIcons : null
      }
    },
    //--------------------------------------
    theRange() {
      return this.parseTimeRange(this.value)
    },
    //--------------------------------------
    theRangeText() {
      let [keyBegin, keyEnd] = this.rangeKeys
      let ss = []
      _.forEach(this.theRange, (val)=>{
        // Time
        if(val) {
          ss.push(val.toString(this.format))
        }
        // Zero
        else {
          ss.push(Ti.Types.formatTime(0, this.unit, this.format))
        }
      })
      return ss.join(" ~ ")
    },
    //--------------------------------------
    theRangeValue() {
      return this.formatRangeValue(this.theRange)
    },
    //------------------------------------------------
    theDropRange() {
      return this.runtime || this.theRangeValue
    },
    //------------------------------------------------
    theStatusIcon() {
      return this.statusIcons[this.status]
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    applyRuntime() {
      if(this.runtime) {
        console.log("hah")
        let rg = this.parseTimeRange(this.runtime)
        this.runtime = null
        let rg2 = this.formatRangeValue(rg)
        let rg3 = this.formatEmitRangeValue(rg2)
        this.$notify("change", rg3)
      }
    },
    //-----------------------------------------------
    doExtend() {
      this.status = "extended"
    },
    //-----------------------------------------------
    doCollapse({escaped=false}={}) {
      this.status = "collapse"
      // Drop runtime
      if(escaped) {
        this.runtime = null
      }
      // Apply Changed for runtime
      else {
        this.applyRuntime()
      }
    },
    //------------------------------------------------
    onInputFocused() {
      this.doExtend()
    },
    //------------------------------------------------
    onChanged(val) {
      let rg = this.parseTimeRange(val)
      // Empty Range
      if(_.isEmpty(rg)) {
        this.$notify("change", null);
      }
      // Format the Range
      else {
        let rg2 = this.formatRangeValue(rg)
        let rg3 = this.formatEmitRangeValue(rg2)
        this.$notify("change", rg3);
      }
    },
    //------------------------------------------------
    onClickStatusIcon() {
      // extended -> collapse
      if(this.isExtended) {
        this.doCollapse()
      }
      // collapse -> extended
      else {
        this.doExtend()
      }
    },
    //------------------------------------------------
    formatEmitRangeValue(rg) {
      let [keyBegin, keyEnd] = this.rangeKeys
      // Format the value to array
      if(rg && "Array" == this.valueType) {
        let re = [rg[keyBegin], rg[keyEnd]]
        return _.filter(re, (v)=>(v && _.isString(v)))
      }
      // Default as object
      return rg
    },
    //------------------------------------------------
    onFormChanged(payload) {
      this.runtime = _.cloneDeep(payload)
    },
    //------------------------------------------------
    parseTimeRange(val) {
      let [keyBegin, keyEnd] = this.rangeKeys
      val = Ti.Util.fallback(val, this.dftValue, {})
      let rg = {}
      // Number 
      if(_.isNumber(val)) {
        let tm = Ti.Types.toTime(val)
        rg = {
          [keyBegin] : tm
        }
      }
      // String
      else if(_.isString(val)) {
        let str = _.trim(val)
        let ss = _.split(str, /[\t ,\/~-]+/)
        let tm0 = Ti.Types.toTime(ss[0])
        let tm1 = Ti.Types.toTime(ss[1])
        rg = {
          [keyBegin] : tm0,
          [keyEnd]   : tm1
        }
      }
      // Array
      else if(_.isArray(val)) {
        rg = {
          [keyBegin] : Ti.Types.toTime(val[0]),
          [keyEnd]   : Ti.Types.toTime(val[1])
        }
      }
      // Plain Object
      else if(_.isPlainObject(val)) {
        rg = _.pick(val, this.rangeKeys)
      }
      // Then make sure the range beignTime is the less one
      return this.normalizeRange(rg)
    },
    //------------------------------------------------
    // Then make sure the range beignTime is the less one
    normalizeRange(rg) {
      let [keyBegin, keyEnd] = this.rangeKeys
      if(rg && (rg[keyBegin] || rg[keyEnd]) ) {
        if(!rg[keyBegin]) {
          let tBegin = Ti.Types.toTime(0)
          rg[keyBegin] = tBegin.toString()
        }
        if(!rg[keyEnd]) {
          let tEnd = Ti.Types.toTime(86400000-1)
          rg[keyEnd] = tEnd.toString()
        }
        let tmBegin = Ti.Types.toTime(rg[keyBegin])
        let tmEnd   = Ti.Types.toTime(rg[keyEnd])
        if(tmBegin.valueInMilliseconds > tmEnd.valueInMilliseconds) {
          let tm = rg[keyBegin]
          rg[keyBegin] = tmEnd
          rg[keyEnd] = tmBegin
        }
      }
      return rg
    },
    //------------------------------------------------
    formatRangeValue(range) {
      let rg = _.assign({}, range)
      _.forEach(rg, (val, key)=>{
        // Time
        if(val) {
          rg[key] = val.toString()
        }
        // Zero
        else {
          rg[key] = Ti.Types.formatTime(0)
        }
      })
      return rg
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-pay-checkout.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/pay/checkout/web-pay-checkout.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data: ()=>({
    showAddrCanList : false
  }),
  //////////////////////////////////////////
  props : {
    "currentAddr": {
      type: Object,
      default: undefined
    },
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    isEmpty() {
      return _.isEmpty(this.items)
    },
    //--------------------------------------
    CurrencyChar(){
      return Ti.Bank.getCurrencyChar(this.currency)
    },
    //--------------------------------------
    TheItems() {
      let list = []
      _.forEach(this.items, it=>{
        list.push({
          ... it,
          subtotal: Ti.Num.precise(it.price * it.amount)
        })
      })
      return list
    },
    //--------------------------------------
    TotalFee() {
      let fee = 0;
      _.forEach(this.TheItems, it=>fee+=(it.price*it.amount))
      return Ti.Num.precise(fee)
    },
    //--------------------------------------
    AddrCanList() {
      return {
        data : this.addresses,
        blankAs : {
          "className" : "ti-fill-parent",
          "icon": "fas-map",
          "text": "i18n:address-empty-list"
        },
        comType : "WebTileAddress",
        comConf : {
          value : "=..",
          countries: this.countries,
          can: {
            remove: false,
            edit: false,
            select: false,
            default: false
          },
          selectable : true,
          currentId: _.get(this.currentAddr, "id")
        }
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnShowProduct({id}={}) {
      this.$notify("show:product", id)
    },
    //--------------------------------------
    OnChooseAddr() {
      this.showAddrCanList = true
    },
    //--------------------------------------
    OnHideAddrCanList() {
      this.showAddrCanList = false
    },
    //--------------------------------------
    OnAddAddr() {
      this.$notify("add:address")
    },
    //--------------------------------------
    OnSelectAddr(addr) {
      this.showAddrCanList = false
      this.$emit("change", {
        address: addr
      })
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'thing-markdown-richeditor.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/thing/markdown/richeditor/thing-markdown-richeditor.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////
  inject: ["$ThingManager"],
  ///////////////////////////////////////////////////
  props: {
    "listenMedia": {
      type: String,
      default: "file:open"
    }
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    OnEditorInit($editor) {
      this.$editor = $editor
    },
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  mounted() {
    if(this.listenMedia) {
      this.$ThingManager.addEventRouting(this.listenMedia, (oMedia)=>{
        console.log("oMedia", oMedia)
        this.$editor.insertMediaObj(oMedia)
      })
    }
  },
  ///////////////////////////////////////////////////
  beforeDestroy() {
    if(this.listenMedia) {
      this.$ThingManager.removeEventRouting(this.listenMedia)
    }
  }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'www-mod-shop.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/lib/www/mod/shop/www-mod-shop.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////
  getters : {
    //--------------------------------------------
    urls(state, getters, rootState, rootGetters) {
      let map = {}
      _.forEach(state.paths, (ph, key)=>{
        map[key] = rootGetters.getApiUrl(ph)
      })
      return map
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  mutations : {
    //--------------------------------------------
    appendBasket(state, buyIt) {
      state.basket = _.concat(state.basket, buyIt)
    },
    //--------------------------------------------
    setBasket(state, buyIts=[]) {
      state.basket = buyIts
    },
    //--------------------------------------------
    setPayment(state, pay) {
      state.payment = pay
    },
    //--------------------------------------------
    setPaths(state, paths) {
      state.paths = _.cloneDeep(paths)
    },
    //--------------------------------------------
    mergePaths(state, paths) {
      _.assign(state.paths, paths)
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  actions : {
    //--------------------------------------------
    async fetchOrder({getters, rootState}, {orderId}={}) {
      if(!orderId) {
        return 
      }
      let reo = await Ti.Http.get(getters.urls.fetchOrder, {
        params: {
          ticket: rootState.auth.ticket,
          id: orderId
        },
        as: "json"
      })
      // Success
      if(reo.ok) {
        return reo.data
      }
      // Fail
      else {
        console.warn("Fail to loadOrder", {items, reo})
      }
    },
    //--------------------------------------------
    async payOrder({getters, rootState}, {orderId, payType}={}) {
      if(!orderId) {
        return 
      }
      let reo = await Ti.Http.get(getters.urls.pay, {
        params: {
          ticket: rootState.auth.ticket,
          id: orderId,
          pt: payType
        },
        as: "json"
      })
      // Success
      if(reo.ok) {
        return reo.data
      }
      // Fail
      else {
        console.warn("Fail to payOrder", {items, reo})
      }
    },
    //--------------------------------------------
    async createOrder({getters, rootState}, {
      payType, 
      items,
      orderType,
      orderTitle,
      address,
      fail
    }={}) {
      if(!payType || _.isEmpty(items)) {
        return 
      }

      // Prepare the post obj
      let postObj = {
        title: orderTitle,
        tp: orderType,
        pay_tp: payType,
        products: items,
        // Address
      }
      if(address) {
        postObj.addr_user_country = _.get(address, "country")
        postObj.addr_user_code    = _.get(address, "code")
        postObj.addr_user_door    = _.get(address, "door")
        postObj.user_name  = _.get(address, "consignee")
        postObj.user_phone = _.get(address, "phone")
        postObj.user_email = _.get(address, "email")
        postObj.addr_user_province = _.get(address, "province")
        postObj.addr_user_city     = _.get(address, "city")
        postObj.addr_user_area     = _.get(address, "area")
        postObj.addr_user_street   = _.get(address, "street")
      }
      try{
        let reo = await Ti.Http.post(getters.urls.buy, {
          params: {
            ticket: rootState.auth.ticket
          },
          headers: {
            "Content-Type": "application/json;charset=utf-8"
          },
          body: JSON.stringify(postObj),
          as: "json"
        })
        // Success
        if(reo.ok) {
          return reo.data
        }
        // Fail
        else {
          console.warn("Fail to createOrder", {items, reo})
        }
      }
      // Handle error
      catch(resp) {
        let txt = _.trim(resp.responseText)
        let msg = Ti.I18n.explain(txt)
        Ti.Toast.Open(msg, 'error')
        if(_.isFunction(fail)) {
          fail(msg)
        }
      }
    },
    //--------------------------------------------
    async checkOrder({getters, rootState}, orderId) {
      console.log("checkOrder")
      if(!orderId) {
        return 
      }
      let reo = await Ti.Http.get(getters.urls.checkOrder, {
        params: {
          ticket: rootState.auth.ticket,
          id: orderId
        },
        as: "json"
      })
      // Success
      if(reo.ok) {
        return reo.data
      }
      // Fail
      else {
        console.warn("Fail to checkOrder", {items, reo})
      }
    },
    //--------------------------------------------
    /***
     * Load a group of item by `urls.objs`, and set the result
     * to `Store` by `@commitTarget` and `commitDataKey`
     * 
     * @param items{Array}: each element is string, whicn in form
     * `AMOUNT:ID` like `"4:4r..7a"`
     * 
     * @param commitDataKey{String} after loaded, which key in `page.data`
     * should be updated
     * @param commitTarget{String} after loaded, where to update
     */
    async loadBuyItems({getters, commit}, {
      items= [],
      commitDataKey= "goods",
      commitTarget= "page/updateData"
    }) {
      console.log("loadBuyItems", items)
      // Gether ids
      let ids = []
      let amounts = {}
      _.forEach(items, it=>{
        let m = /^(\d+):(.+)$/.exec(it)
        if(m) {
          let amount = m[1] * 1
          let id = m[2]
          if(id && amount > 0) {
            ids.push(`id:${id}`)
            amounts[id] = amount
          }
        }
      })

      // Guard
      if(_.isEmpty(ids)) {
        return
      }

      // ask remote for 
      let reo =  await Ti.Http.get(getters.urls.objs, {
        params : {phs: ids.join(" ")},
        as : "json"
      })

      // OK
      if(reo.ok) {
        let its = []
        _.forEach(reo.data, obj=> {
          let id = obj.id
          let amount = amounts[id]
          its.push({
            id, amount, obj
          })
        })

        commit(commitTarget, {
          key: commitDataKey,
          value: its
        }, {root:true})
      }
      // Fail
      else {
        console.warn("Fail to loadBuyItems", {items, reo})
      }
    },
    //--------------------------------------------
    async checkoutItems({dispatch}, {
      items=[],
      checkoutPage="page/shop/checkout.html",
      newtab=false,
      orderType="A",
      orderTitle
    }={}) {
      // Prepare the list
      let list = []
      _.forEach(items, (it)=> {
        if(it.id && it.amount > 0) {
          list.push(_.pick(it, "id", "amount"))
        }
      })

      // Do the checkout
      if(!_.isEmpty(items)) {
        await dispatch("checkout", {
          items, checkoutPage, newtab, orderType, orderTitle
        })
      }
      // Just warn it
      else {
        console.warn("!checkoutItems: Empty Item List!")
      }
    },
    //--------------------------------------------
    async checkoutBasket({state, dispatch}, {
      checkedNames = {},
      checkoutPage="page/shop/checkout.html",
      newtab=false
    }={}) {
      // Prepare the list
      let items = []
      _.forEach(state.basket, (it)=> {
        if(it.name && it.count > 0 && 
          (!checkedNames || checkedNames[it.name])) {
          items.push({
            id: it.name,
            amount: it.count
          })
        }
      })

      // Nil to buy
      if(_.isEmpty(items)) {
        Ti.Toast.Open('i18n:buy-checkout-nil', "warn")
        return
      }

      // Do the checkout
      if(!_.isEmpty(items)) {
        await dispatch("checkout", {
          items, checkoutPage, newtab
        })
      }
      // Just warn it
      else {
        console.warn("!checkoutBasket: Empty Basket")
      }
    },
    //--------------------------------------------
    /***
     * @param items{Array} - Array with item `{id:xxx, amount:1}`
     */
    async checkout({dispatch, rootGetters}, {
      items=[],
      checkoutPage="page/shop/checkout.html",
      newtab=false,
      orderType="A",
      orderTitle
    }={}) {
      //console.log("checkout", items)

      // encode the items as params
      let its = []
      _.forEach(items, it => {
        if(it.id && it.amount > 0)
          its.push(`${it.amount}:${it.id}`)
      })

      // Guard
      if(_.isEmpty(its)) {
        console.warn("!checkout: Empty Item");
        return
      }

      // Params
      let params= {
        its: its.join(","),
        tp: orderType,
        ot: orderTitle
      }

      // Open page in new tab
      if(newtab) {
        let url = rootGetters.getUrl(checkoutPage)
        await dispatch("openUrl", {
          url, 
          target:"_blank",
          params
        }, {root:true})
      }
      // Goto page
      else {
        await dispatch("navTo", {
          value: checkoutPage,
          params
        }, {root:true})
      }

    },
    //--------------------------------------------
    /***
     * @param id{String} - Product ID
     * @param n{Integer} - Product buy count, 1 as default
     * @param reset{Boolean} If true, `n` will be take as the final buy count.
     *  else if false, `n` will be take as increasment. Of cause, 
     *  negative `n` will cause the decreasment.
     */
    async updateBasket({commit, dispatch, getters, rootState}, {
      id, n=1, reset=false, success, fail, invalid, noTicket
    }={}) {
      console.log("shop:addToBasket", {id, success, fail})
      //..........................................
      // N is 0, do nothing
      if(n === 0 && !reset) {
        return
      }
      //..........................................
      // Guard Ticket
      let ticket  = rootState.auth.ticket
      if(!ticket) {
        // Customized exception handler
        if(noTicket) {
          return await dispatch(noTicket.action, noTicket.payload, {root:true})
        }
        // Default just notify
        else {
          Ti.Alert("Without Session Ticket!!!")
          return          
        }
      }
      //..........................................
      // Guard id
      if(!id) {
        // Customized exception handler
        if(invalid) {
          return await dispatch(invalid.action, invalid.payload, {root:true})
        }
        // Default just notify
        else {
          Ti.Alert("Without Product ID!!!")
          return
        }
      }
      //..........................................
      // Warn user for remove
      if(reset && n <= 0) {
        if(! (await Ti.Confirm("i18n:shop-basket-remove-confirm"))) {
          return
        }
      }
      //..........................................
      // Check to remote
      commit("setLoading", true, {root:true})
      //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      let reo =  await Ti.Http.get(getters.urls.buyIt, {
        params : {
          ticket, id, n, r:reset
        },
        as : "json"
      })
      // success
      if(reo.ok) {
        commit("setBasket", reo.data)

        // Success
        if(success) {
          await dispatch(success.action, success.payload, {root:true})
        }
      }
      // Fail
      else if(fail){
        await dispatch(fail.action, fail.payload, {root:true})
      }
      // Show error
      else {
        console.warn("shop.updateBasket fail:", reo)
      }
      //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      commit("setLoading", false, {root:true})
    },
    //--------------------------------------------
    async cleanBasket({commit, getters, rootState}) {
      console.log("shop:cleanBasket")
      //..........................................
      // Guard Ticket
      let ticket  = rootState.auth.ticket
      if(!ticket) {
        return
      }
      //..........................................
      // Confirm
      if(!await Ti.Confirm("i18n:shop-basket-clean-confirm")) {
        return
      }
      //..........................................
      // Check to remote
      commit("setLoading", true, {root:true})
      // Current Session ...
      let reo =  await Ti.Http.get(getters.urls.buyClean, {
        params : {
          ticket
        },
        as : "json"
      })
      commit("setLoading", false, {root:true})
      //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      // success
      if(reo.ok) {
        commit("setBasket", [])
      }
      //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      // Fail
      else{
        console.error("www/shop module: Fail to reloadBasket", reo)
      }
      //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    },
    //--------------------------------------------
    async reloadBasket({commit, getters, rootState}) {
      //console.log("shop:reloadBasket")
      //..........................................
      // Guard Ticket
      let ticket  = rootState.auth.ticket
      if(!ticket) {
        return
      }
      //..........................................
      // Check to remote
      commit("setLoading", true, {root:true})
      // Current Session ...
      let reo =  await Ti.Http.get(getters.urls.buyGetAll, {
        params : {
          ticket
        },
        as : "json"
      })
      commit("setLoading", false, {root:true})
      //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      // success
      if(reo.ok) {
        commit("setBasket", reo.data)
      }
      //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      // Fail
      else{
        console.error("www/shop module: Fail to reloadBasket", reo)
      }
      //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    }
    //--------------------------------------------
  } // actions : {
  ////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'm-thing-search.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/thing/mod/search/m-thing-search.mjs'] = (function(){
function saveToLocal(meta, key, val) {
  if(!meta) {
    return
  }
  //console.log("saveToLocal", key, val)
  let local = Ti.Storage.session.getObject(meta.id) || {}
  _.defaults(local, {
    filter: {},
    sorter: {},
    pager: {}
  })
  local[key] = val
  Ti.Storage.session.setObject(meta.id, local)
}
//---------------------------------------
const _M = {
  ///////////////////////////////////////////////////////
  getters : {
    //---------------------------------------------------
    currentItem(state) {
      if(state.currentId) {
        for(let it of state.list) {
          if(it.id == state.currentId) {
            return it
          }
        }
      }
      return null
    },
    //---------------------------------------------------
    checkedItems(state) {
      // Make the idsMap
      let checkedMap = {}
      for(let id of state.checkedIds) {
        checkedMap[id] = true
      }
      // Join the items
      let list = []
      for(let it of state.list) {
        if(checkedMap[it.id]) {
          list.push(it)
        }
      }
      // done
      return list
    },
    //---------------------------------------------------
    isPagerEnabled(state) {
      return state.pager && state.pager.pn > 0 && state.pager.pgsz > 0
    },
    //---------------------------------------------------
    filterObj(state, getters, rootState) {
      let {keyword, match, majorKey, majorValue} = state.filter || {}
      let flt = {}
      //............................................
      // Eval Filter: keyword
      if(keyword) {
        if(/"^[\d\w]{26}(:.+)?$"/.test(keyword)) {
          flt.id = keyword
        }
        // Find
        else {
          let knm = "title"
          let beh = _.get(rootState, "main.config.schema.behavior") || {}
          let keys = _.keys(beh.keyword)
          //........................................
          for(let k of keys) {
            let val = beh.keyword[k]
            if(new RegExp(val).test(keyword)) {
              knm = k;
              break;
            }
          }
          //........................................
          // Accurate equal
          if(knm.startsWith("=")) {
            flt[knm.substring(1).trim()] = keyword
          }
          // Default is like
          else {
            flt[knm] = "^.*"+keyword;
          }
          //........................................
        }
      }
      //............................................
      // Eval Filter: match
      if(!_.isEmpty(match)) {
        _.assign(flt, match)
      }
      //............................................
      // Eval Filter: major
      if(majorKey && !Ti.Util.isNil(majorValue)) {
        _.set(flt, majorKey, majorValue)
      }
      //............................................
      // Fix filter
      let beMatch = _.get(rootState, "main.config.schema.behavior.match")
      if(!_.isEmpty(beMatch)) {
        _.assign(flt, beMatch)
      }
      //............................................
      // InRecycleBin 
      flt.th_live = state.inRecycleBin ? -1 : 1
      //............................................
      // Done
      return flt
    },
    //---------------------------------------------------
    filterStr(state, getters) {
      let flt = getters['filterObj']
      return _.isEmpty(flt)
        ? undefined
        : JSON.stringify(flt)
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  mutations : {
    setMeta(state, meta) {
      state.meta = meta
    },
    //---------------------------------------------------
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    },
    //---------------------------------------------------
    setFilter(state, filter={}) {
      //console.log("setFilter", JSON.stringify(filter))
      state.filter = filter
      saveToLocal(state.meta, "filter", state.filter)
    },
    updateFilter(state, flt={}) {
      //console.log("updateFilter", JSON.stringify(flt))
      state.filter = _.assign({}, state.filter, flt)
      saveToLocal(state.meta, "filter", state.filter)
    },
    setSorter(state, sorter) {
      state.sorter = sorter
      saveToLocal(state.meta, "sorter", state.sorter)
    },
    //---------------------------------------------------
    setPager(state, pager) {
      state.pager = pager
      saveToLocal(state.meta, "pager", state.pager)
    },
    updatePager(state, pg) {
      state.pager = _.defaults({}, pg, state.pager)
    },
    //---------------------------------------------------
    setInRecycleBin(state, inRecycleBin=false) {
      state.inRecycleBin = inRecycleBin
    },
    //---------------------------------------------------
    setList(state, list) {
      state.list = list
      state.count = _.size(list)
    },
    //---------------------------------------------------
    setCurrentId(state, id) {
      state.currentId = id || null
    },
    //---------------------------------------------------
    setShowKeys(state, showKeys) {
      state.showKeys = showKeys
    },
    //---------------------------------------------------
    setCheckedIds(state, ids=[]) {
      state.checkedIds = _.union(ids)
    },
    //---------------------------------------------------
    selectItem(state, id) {
      if(state.currentId != id) {
        state.currentId = id
        state.checkedIds = []
        if(id) {
          state.checkedIds.push(id)
        }
      }
    },
    //---------------------------------------------------
    removeItems(state, ids=[]) {
      // Find the current item index, and take as the next Item index
      //console.log("search.remove", ids)
      let index = -1
      if(state.currentId) {
        for(let i=0; i<state.list.length; i++) {
          let it = state.list[i]
          if(it.id == state.currentId) {
            index = i
            break
          }
        }
      }
      // Make the idsMap
      let idsMap = {}
      if(_.isArray(ids)) {
        for(let id of ids) {
          idsMap[id] = true
        }
      } else if (_.isPlainObject(ids)){
        idsMap = ids
      }
      // Remove the ids
      let list2 = []
      for(let it of state.list) {
        if(!idsMap[it.id]) {
          list2.push(it)
        }
      }
      // Then get back the current
      index = Math.min(index, list2.length-1)
      let nextCurrent = null
      if(index >= 0) {
        nextCurrent = list2[index]
        state.currentId = nextCurrent.id
        state.checkedIds = [nextCurrent.id]
      }
      // No currentId
      else {
        state.currentId  = null
        state.checkedIds = []
      }
      // Reset the list
      state.list = list2
      if(state.pager) {
        state.pager.count = list2.length
        state.pager.sum = state.pager.pgsz * (state.pager.pgc-1) + list2.length
      }
      // console.log("the next current", nextCurrent)
    },
    //---------------------------------------------------
    updateItem(state, it) {
      let list = []
      for(let li of state.list) {
        if(li.id == it.id) {
          list.push({...it, __updated_time:Date.now()})
        } else {
          list.push(li)
        }
      }
      state.list = list
    },
    //---------------------------------------------------
    appendToList(state, it) {
      if(it) {
        state.list = [].concat(state.list, it)
      }
    },
    //---------------------------------------------------
    prependToList(state, it) {
      if(it) {
        state.list = [].concat(it, state.list)
      }
    }
    //---------------------------------------------------
  }
  ///////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'm-obj-current-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/obj-current/m-obj-current-actions.mjs'] = (function(){
const _M = {
  //----------------------------------------
  // Combin Mutations
  //----------------------------------------
  onChanged({dispatch}, payload) {
    dispatch("changeContent", payload)
  },
  //----------------------------------------
  changeContent({commit}, payload) {
    commit("setContent", payload)
    commit("syncStatusChanged");
  },
  //----------------------------------------
  changeMeta({commit}, {name, value}={}) {
    if(name) {
      let meta = _.set({}, name, value)
      commit("mergeMeta", meta)
      commit("syncStatusChanged")
    }
  },
  //----------------------------------------
  updateContent({state, commit}, content) {
    commit("setContent", content)
    if(state.meta && "FILE" == state.meta.race) {
      commit("setSavedContent", content)
    }
    commit("syncStatusChanged")
  },
  //--------------------------------------------
  // User Interactivity
  //--------------------------------------------
  async openMetaEditor({state, dispatch}) {
    // Guard
    if(!state.meta) {
      return await Ti.Toast.Open("i18n:empty-data", "warn")
    }
    // Open Editor
    let reo = await Wn.EditObjMeta(state.meta, {fields:"auto"})

    // Cancel the editing
    if(_.isUndefined(reo)) {
      return
    }

    // Update the current editing
    if(reo.saved) {
      await dispatch("reload", reo.data)
    }
  },
  //--------------------------------------------
  async openContentEditor({state, dispatch}) {
    // Guard
    if(!state.meta) {
      return await Ti.Toast.Open("i18n:empty-data", "warn")
    }
    // Open Editor
    let newContent = await Wn.EditObjContent(state.meta, {
      content : state.content
    })

    // Cancel the editing
    if(_.isUndefined(newContent)) {
      return
    }

    // Update the current editing
    await dispatch("changeContent", newContent)
  },
  //--------------------------------------------
  // Update to remote
  //----------------------------------------
  async updateMeta({commit, dispatch}, {name, value}={}) {
    let data = Ti.Types.toObjByPair({name, value})
    await dispatch("updateMetas", data)
  },
  //----------------------------------------
  async updateMetas({state, commit}, data={}) {
    // Check Necessary
    if(_.isMatchWith(state.meta, data, _.isEqual)) {
      return
    }

    // Mark field status
    _.forEach(data, (val, name)=>{
      commit("setFieldStatus", {name, type:"spinning", text:"i18n:saving"})
    })

    // Do the update
    let json = JSON.stringify(data)
    let th_set = state.meta.th_set
    let th_id  = state.meta.id
    let cmdText = `thing ${th_set} update ${th_id} -fields -cqn`
    let reo = await Wn.Sys.exec2(cmdText, {input:json, as:"json"})
    let isError = reo instanceof Error;

    if(!isError && !Ti.Util.isNil(reo)) {
      commit("setMeta", reo)
    }

    _.forEach(data, (val, name)=>{
      if(isError) {
        commit("setFieldStatus", {
          name, 
          type: "warn", 
          text: reo.message || "i18n:fail"
        })
      } else {
        commit("setFieldStatus", {
          name, 
          type: "ok", 
          text: "i18n:ok"
        })
        _.delay(()=>{commit("clearFieldStatus", name)}, 500)
      }
    })
  },
  //--------------------------------------------
  // Reload & Save
  //--------------------------------------------
  // async setCurrent({state, commit,dispatch}, {
  //   meta=null, force=false
  // }={}) {
  //   //console.log("setCurrent", meta, loadContent)

  //   // Not need to reload
  //   if(state.meta && meta && state.meta.id == meta.id) {
  //     if((_.isString(state.content)) && !force) {
  //       return
  //     }
  //   }

  //   // do reload
  //   await dispatch("reload", meta)

  // },
  //----------------------------------------
  async save({state, commit}) {
    if(state.status.saving || !state.status.changed){
      return
    }

    commit("setStatus", {saving:true})

    let meta = state.meta
    let content = state.content
    let newMeta = await Wn.Io.saveContentAsText(meta, content)

    commit("setStatus", {saving:false})
    commit("setMeta", newMeta)
    commit("setSavedContent", content)
    commit("syncStatusChanged")

    // return the new meta
    return newMeta
  },
  //----------------------------------------
  async reload({state, commit, dispatch}, meta) {
    if(state.status.reloading
      || state.status.saving){
      return
    }
    //......................................
    // Use the default meta
    if(_.isUndefined(meta)) {
      meta = state.meta
    }
    //......................................
    if(_.isString(meta)) {
      meta = await Wn.Io.loadMeta(meta)
    }
    else if(meta && meta.id) {
      meta = await Wn.Io.loadMetaById(meta.id)
    }
    //......................................
    // Guard
    if(!meta) {
      commit("setMeta", null)
      commit("setContent", null)
      return
    }
    // Init content as null
    let content = null
    commit("setStatus", {reloading:true})
    //......................................
    // For file
    if("FILE" == meta.race) {
      // need to be reload content
      content = await Wn.Io.loadContent(meta)
    }
    //......................................
    // For dir
    else if('DIR' == meta.race) {
      content = await Wn.Io.loadChildren(meta)
    }
    //......................................
    // Just update the meta
    commit("setStatus", {reloading:false})
    commit("setMeta", meta)
    commit("clearFieldStatus")
    // Update content and sync state
    dispatch("updateContent", content)
  }
  //----------------------------------------
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-chart-simple.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/chart/simple/ti-chart-simple.mjs'] = (function(){
function draw_chart({
  $refs,
  type="interval",
  unit,
  data=[],
  axisX,
  axisY,
  color,
  animate,
  padding,
  minValue,
  maxValue,
  valueInterval,
  coord
}={}) {
  let $container = $refs.chart
  //console.log(data)
  let width  = G2.DomUtil.getWidth($container)
  let height = G2.DomUtil.getHeight($container)
  // if(width > 500 && width < 510)
  //   console.log(width, height)
  // if(hasSlider)
  //   console.log("XXXX", data)
  //.......................................
  // maxValue
  if(_.isUndefined(maxValue)) {
    maxValue = 0
    let valKey = axisY.name
    for(let it of data){
      maxValue = Math.max(maxValue, it[valKey])
    }
  }
  //.......................................
  // Create The Chart
  let chart = new G2.Chart({
    container: $container,
    padding, width, height
  })
  //.......................................
  // Set datasource
  chart.source(data)
  //.......................................
  // Setup title
  chart.legend(false)
  //.......................................
  // axisX
  let axisXOptions = {
    label : {
      textStyle : {
        fill : axisX.color || "#888"
      }
    }
  }
  chart.axis(axisX.name, axisXOptions)
  //.......................................
  // 纵轴设定
  let axisYOptions = {
    label : {
      autoRotate : false,
      textStyle : {
        fill : axisY.color || "#888"
      }
    },
    grid: {
      type: 'line',
      lineStyle: {
        stroke: 'rgba(255,255,255,0.4)',
        lineWidth: 0.5,
        lineDash: false
      }
    }
  }
  chart.axis(axisY.name, axisYOptions)
  //.......................................
  // 坐标系变换
  if(coord) {
    if("transpose" == coord) {
      chart.coord().transpose()
    }
  }
  //.......................................
  // 视图缩放
  let alias = axisY.title || axisY.name
  chart.scale(axisY.name, {
    alias,
    type : "linear",
    min: minValue,
    max: maxValue,
    tickInterval: valueInterval
  })
  //.......................................
  // 图表种类和风格
  let factory = ({
    //+++++++++++++++++++++++++++++++++++++
    // 折线
    line() {
      let geom = chart.line().position(position)
      chart.point().position(position).size(4).shape('circle').style({
        stroke: '#fff',
        lineWidth: 1
      });
      return geom
    },
    //+++++++++++++++++++++++++++++++++++++
    // 柱图·单柱
    interval() {
      return chart.interval().position(position)
    },
    //+++++++++++++++++++++++++++++++++++++
    // 柱图·分组
    intervalDodge() {
      return chart.interval().position(position).adjust([{
        type: 'dodge',
        marginRatio: 1 / 32
      }])
    },
    //+++++++++++++++++++++++++++++++++++++
    // 柱图·堆叠
    intervalStack(position) {
      return chart.intervalStack().position(position)
    },
  })[type]
  // 默认就是柱图
  factory = factory || ((position)=>{
    return chart.interval().position(position)
  })
  //.......................................
  // 生成图表
  let position = `${axisX.name}*${axisY.name}`
  let geom = factory(position)
  //.......................................
  // 设置数据显示
      //.color(color || 'l(270) 0:#0d4a6a 1:#00fddd')
    // .animate({
    //   appear: {
    //     delay: 500, // 动画延迟执行时间
    //     duration: 1000 // 动画执行时间
    //   }
    // });
  if(color) {
    geom.color(color)
  }
  if(animate) {
    geom.animate(animate)
  }
    
  //.......................................
  // 渲染并返回
  chart.render()
  return chart
}
///////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  inheritAttrs : false,
  /////////////////////////////////////////
  props : {
    "title" : {
      type : String,
      default : null
    },
    "data" : {
      type : Array,
      default : ()=>[]
    },
    "type" : {
      type : String,
      default : "interval"
    },
    "axisX" : {
      type : Object,
      default : ()=>({
        name : "name",
        title : "name"
      })
    },
    "axisY" : {
      type : Object,
      default : ()=>({
        name : "value",
        title : "value"
      })
    },
    "aside" : {
      type : String,
      default : "left" // none|left|center|right
    },
    "unit" : {
      type : String,
      default : null
    },
    "padding" : {
      type: Array,
      default : ()=>[20,20,50,50]
    },
    "minValue" : {
      type: Number,
      default : 0
    },
    "maxValue" : {
      type: Number,
      default : undefined
    },
    "color" : {
      type: String,
      default : null
    },
    "animate" : {
      type : Object,
      default : ()=>({
        delay: 500, // 动画延迟执行时间
        duration: 1000 // 动画执行时间
      })
    },
    "valueInterval" : {
      type: Number,
      default : 100
    },
    // 坐标系变换
    "coord" : {
      type : [String, Object],
      default : null
    }
  },
  //////////////////////////////////////////
  watch : {
    "data" : function() {this.debounceRedrawChart()},
    // "type" : function() {this.debounceRedrawAll()},
    // "axisX" : function() {this.debounceRedrawAll()},
    // "axisY" : function() {this.debounceRedrawAll()}
  },
  //////////////////////////////////////////
  computed : {
    //......................................
    asideClass() {
      return `at-${this.aside||"none"}`
    },
    //......................................
    // TODO support slider
    hasSlider() {return false}
    //......................................
  },
  //////////////////////////////////////////
  methods : {
    //......................................
    redrawChart() {
      //console.log("I am redrawChart")
      if(this.__g2_chart) {
        this.__g2_chart.destroy()
        $(this.$refs.chart).empty()
      }
      this.__g2_chart = draw_chart(this)
    },
    drawAll() {
      //console.log("I am drawAll")
      this.$nextTick(()=>{
        this.redrawChart()
        //this.redrawSlider()
      })
    }
    //......................................
  },
  /////////////////////////////////////////
  mounted : function() {
    this.drawAll()
    this.debounceRedrawChart = _.debounce(()=>{
      this.redrawChart()
    }, 500)
    this.debounceRedrawAll = _.debounce(()=>{
      this.drawAll()
    }, 500)
  },
  beforeDestroy : function(){
    if(this.__g2_chart) {
      this.__g2_chart.destroy()
    }
    // if(this.__g2_slider) {
    //   this.__g2_slider.destroy()
    // }
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-obj-creation.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/creation/wn-obj-creation.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data : ()=>({
    myCurrentType: undefined
  }),
  /////////////////////////////////////////
  props : {
    "types" : {
      type : Array,
      default : ()=>[]
    },
    "value" : {
      type : Object,
      default : ()=>({
        // name : "xxxx",
        // type : "txt",
        // race : "FILE",
        // mime : "text/plain"
      })
    },
    "trimed" : {
      type : Boolean,
      default : true
    },
    "freeCreate" : {
      type : Boolean,
      default : false
    },
    "autoFocus" : {
      type : Boolean,
      default : false
    },
    "enterEvent" : {
      type : String,
      default : undefined
    }
  },
  /////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    hasTypes() {
      return !_.isEmpty(this.types)
    },
    //--------------------------------------
    CurrentTypeName() {
      let tp = this.myCurrentType || this.value.type
      if(!tp && !this.freeCreate){
        return _.get(_.first(this.types), "name")
      }
      return tp
    },
    //--------------------------------------
    TypeList() {
      let list = []
      if(this.freeCreate) {
        let currentIsNull = Ti.Util.isNil(this.CurrentTypeName)
        list.push({
          name : null,
          text : "i18n:wn-oc-auto-type",
          type : null,
          icon  : "far-file",
          thumb : "far-file",
          suffix : "*.*",
          current : currentIsNull,
          className : {
            "is-current" : currentIsNull
          },
          race : "FILE",
          mime : "text/plain"
        })
      }
      _.forEach(this.types, type => {
        let li = _.cloneDeep(type)
        li.thumb = li.thumb || li.icon
        li.suffix = `*.${li.name}`
        li.current = li.name == this.CurrentTypeName
        li.className = {
          "is-current" : li.current
        }
        li.meta = type.meta
        list.push(li)
      })
      return list
    },
    //--------------------------------------
    CurrentType() {
      return _.find(this.TypeList, li=>li.current)
    },
    //--------------------------------------
    CurrentIsDIR(){
      return 'DIR' == _.get(this.CurrentType, "race")
    },
    //--------------------------------------
    hasCurrentType() {
      return this.CurrentType ? true : false
    }
    //--------------------------------------
  },
  /////////////////////////////////////////
  methods : {
    //--------------------------------------
    setCurrentType(name){
      this.myCurrentType = name
    },
    //--------------------------------------
    OnInputChange() {
      let name = this.$refs.input.value
      if(this.trimed) {
        name = _.trim(name)
      }
      
      let type = _.assign({
        name : "txt",
        mime : "text/plain",
        race : "FILE",
        meta : {}
      }, this.CurrentType)

      // Try to find suffix name in type list
      if(Ti.Util.isNil(type.name)) {
        let typeName = Ti.Util.getSuffixName(name)
        if(typeName) {
          for(let li of this.types) {
            if(typeName == li.name) {
              type = li
              break
            }
          }
        }
      }

      this.$notify("change", {
        name,
        type : type.name,
        mime : type.mime,
        race : type.race,
        meta : type.meta
      })
    },
    //--------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("WnObjCreation", uniqKey)
      if("ENTER" == uniqKey) {
        if(this.enterEvent) {
          _.delay(()=>{
            this.$notify(this.enterEvent)
          }, 100)
        }
      }
    }
    //--------------------------------------
  },
  /////////////////////////////////////////
  mounted : function() {
    if(this.autoFocus) {
      if(this.$refs.input) {
        this.$refs.input.focus()
      }
      this.$el.click()
    }
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-combo-input.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/combo/input/wn-combo-input.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data : ()=>({
    loading : false
  }),
  ////////////////////////////////////////////////////
  // props 
  props : {
    "itemBy" : {
      type : [String, Function],
      default : undefined
    },
    "findBy" : {
      type : [String, Function],
      default : undefined
    },
    "loadingIcon" : {
      type : String,
      default : "zmdi-settings zmdi-hc-spin"
    },
    "canInput" : {
      type : Boolean,
      default : true
    },
    "autoCollapse" : {
      type : Boolean,
      default : false
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    DropComType() {
      return this.dropComType || "wn-list"
    },
    //------------------------------------------------
    ThePrefixIcon() {
      if(this.loading) {
        return this.loadingIcon
      }
      return this.prefixIcon
    },
    //---------------------------------------------------
    OptionsDict() {
      return Wn.Dict.evalOptionsDict(this, ({loading}) => {
        this.loading = loading
      })
    },
    //---------------------------------------------------
    TheDropDisplay() {
      return this.dropDisplay || ["@<thumb>", "title|text"]
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-imgfile.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/imgfile/ti-imgfile.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  props : {
    // The source to display image
    "src" : {
      type : String,
      default : null
    },
    // The value must be a LocalFile object
    // to prerender the LocalFile during uploading
    "uploadFile" :{
      type : File,
      default : null
    },
    // Show the process `0.0-1.0` during the uploading
    "progress" : {
      type : Number,
      default : -1
    },
    // Display width
    "width" : {
      type : [String, Number],
      default : 100
    },
    // Display height
    "height" : {
      type : [String, Number],
      default : 100
    },
    // support remove the objects
    "removable" : {
      type : Boolean,
      default : true
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    ThumbStyle(){
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //--------------------------------------
    isShowRemoveIcon() {
      if(!this.uploadFile && this.src) {
        return true
      }
      return false
    },
    //--------------------------------------
    PreviewThumb() {
      if(this.uploadFile) {
        return {type:"localFile", value:this.uploadFile}
      }
      // Normal image
      if(this.src) {
        return {type:"image", value:this.src}
      }
      // Show Icon
      return {type:"font", value:"zmdi-plus"}
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickToEdit() {
      this.$refs.file.click()
    },
    //--------------------------------------
    async OnDropFiles(files) {
      let file = _.get(files, 0)
      if(file) {
        this.$notify("upload", file)
      }
    },
    //--------------------------------------
    async OnSelectLocalFilesToUpload(evt) {
      await this.OnDropFiles(evt.target.files)
      this.$refs.file.value = ""
    },
    //--------------------------------------
    OnRemove() {
      this.$notify("remove")
    },
    //--------------------------------------
    OnOpen() {
      this.$notify("open")
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-label.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/label/wn-label.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //////////////////////////////////////////
  props : {
    "openRefer": {
      type : Object,
      default: undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    ValueClickable() {
      return this.openRefer ? true : false
    }
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    async OnClickValue() {
      if(!this.openRefer || !this.value)
        return

      // Load refer obj
      let obj = await Wn.Io.loadMetaBy(this.value)
      console.log(obj)
      // prepare conf
      let conf = _.assign({
        title: "i18n:info",
        width: 640,
        height: 480,
        textOk : null,
        textCancel : "i18n:close",
        result : obj
      }, this.openRefer)

      // Show Dialog
      await Ti.App.Open(conf)
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-sheet-emoji.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/sheet/emoji/ti-sheet-emoji.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////////
  data : ()=>({
    myValue : null
  }),
  ///////////////////////////////////////////////////////
  props : {
    "value" : {
      type : [String,Object,Number],
      default : null
    },
    "width" : {
      type : [Number, String],
      default : "100%"
    },
    "height" : {
      type : [Number, String],
      default : "100%"
    },
    "data" : {
      type : [String, Array],
      default : ()=>[
        "😀 😃 😄 😁 😆 😅 🤣 😂 🙂 🙃 😉 😊 😇",
        "🥰 😍 🤩 😘 😗 😚 😙 😋 😛 😜 🤪 😝 🤑",
        "🤗 🤭 🤫 🤔 🤐 🤨 😐 😑 😶 😏 😒 🙄 😬",
        "🤥 😌 😔 😪 🤤 😴 😷 🤒 🤕 🤢 🤮 🤧 🥵",
        "🥶 🥴 😵 🤯 🤠 🥳 😎 🤓 🧐 😕 😟 🙁 ☹️",
        "😮 😯 😲 😳 🥺 😦 😧 😨 😰 😥 😢 😭 😱",
        "😖 😣 😞 😓 😩 😫 🥱 😤 😡 😠 🤬 😈 👿",
        "💀 ☠️ 💩 🤡 👹 👺 👻 👽 👾 🤖 😺 😸 😹",
        "😻 😼 😽 🙀 😿 😾 🙈 🙉 🙊 "
      ]
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //---------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    },
    //---------------------------------------------------
    hasValue() {
      return this.TheValue ? true : false
    },
    //---------------------------------------------------
    TheValue() {
      return this.myValue || this.value
    },
    //---------------------------------------------------
    TheDataSheet() {
      let list = []
      let sheet = _.flattenDeep(this.data).join("").replace(/[ ]/g, "")
      // 逐字解析
      for(let i=0; i<sheet.length; i+=2) {
        let c = sheet.substring(i, i+2);
        list.push({
          value : c
        })
      }
      return list
    }
    //---------------------------------------------------
  },
  methods : {
    //---------------------------------------------------
    OnClickTop() {
      if(this.notifyName) {
        this.$notify(this.notifyName, this.notifyConf)
      }
    }
    //---------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    "myValue" : function() {
      this.$notify("change", this.myValue)
    }
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-chart-raw-rank.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/chart/raw/rank/ti-chart-raw-rank.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  props : {
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    ChartSetup() {
      return (chart, data)=>{
        //console.log(data)
        let {list} = this.evalXYData(data)
        if(_.isEmpty(list))
          return

        // Set data
        //list.reverse()
        chart.data(list);

        // Axis/Tick/Tooltip ...
        this.applyChartSetup(chart)

        chart.coordinate().transpose();

        let view = chart.interval().position(this.ChartPosition)
        this.applyViewOptions(view, this.view)
       
        chart.interaction('element-active');
        

      } // ~ function
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'md-richeditor-delegates.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/markdown/richeditor2/md-richeditor-delegates.mjs'] = (function(){
const _M = {
  //-----------------------------------------------
  // Delegate Quill Methods
  //-----------------------------------------------
  getSelection  (...args){return this.$editor.getSelection(...args)},
  setSelection  (...args){return this.$editor.setSelection(...args)},
  updateContents(...args){return this.$editor.updateContents(...args)},
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-lbs-map-tencent.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/lbs/map/tencent/ti-lbs-map-tencent.mjs'] = (function(){
//
// The coordinate base on GCJ02
//
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  inheritAttrs : false,
  /////////////////////////////////////////
  data : ()=>({
    valueMarker : null
  }),
  /////////////////////////////////////////
  props : {
    // @see https://lbs.qq.com/javascript_v2/doc/maptypeid.html
    // ROADMAP | SATELLITE | HYBRID
    "mapType" : {
      type : String,
      default : "ROADMAP"
    },
    // Map center : {"lat":39.9042, "lng":116.4074}
    // If null, it will auto sync with the value
    "center" : {
      type : Object,
      // default : ()=>({
      //   {"lat":39.9042, "lng":116.4074}
      // })
      default : null
    },
    "zoom" : {
      type : Number,
      default : 8
    },
    // A LatLng Point in map, which react the changing
    "value" : {
      type : Object,
      default : null
    },
    "valueOptions" : {
      type : Object,
      default : ()=>({
        icon : null,
        title : "UserMarker",
        // DOWN|BOUNCE|DROP|UP
        animation : "DOWN"
      })
    }
  },
  //////////////////////////////////////////
  computed : {
    //-------------------------------------
    mapCenterLatLng() {
      if(!_.isEmpty(this.center)) {
        return this.genLatLng(this.center)
      }
      if(!_.isEmpty(this.value)) {
        return this.genLatLng(this.value)
      }
      // Default center to beijing
      return this.genLatLng({lat:39.9042, lng:116.4074})
    },
    //-------------------------------------
    mapTypeId() {
      return (qq.maps.MapTypeId[this.mapType]) 
             || qq.maps.MapTypeId.ROADMAP
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //-------------------------------------
    genLatLng({lat, lng}={}) {
      return new qq.maps.LatLng(lat, lng)
    },
    //-------------------------------------
    drawValue() {
      let $map = this.__map
      let opt  = this.valueOptions

      // Guard the value
      if(!this.value)
        return

      let llpos = this.genLatLng(this.value);

      var marker = new qq.maps.Marker({
        position: llpos,
        animation: qq.maps.MarkerAnimation[opt.animation],
        //设置显示Marker的地图
        map: $map,
        //设置Marker可拖动
        draggable: true,
        // //自定义Marker图标为大头针样式
        // icon: new qq.maps.MarkerImage(
        //     "https://open.map.qq.com/doc/img/nilt.png"),
        // //自定义Marker图标的阴影
        // shadow: new qq.maps.MarkerImage(
        //     "https://open.map.qq.com/doc/img/nilb.png"),
        //设置Marker标题，鼠标划过Marker时显示
        title: opt.title,
        //设置Marker的可见性，为true时可见,false时不可见
        visible: true,
      });

      this.valueMarker = marker
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "value" : function(){this.drawValue()}
  },
  //////////////////////////////////////////
  mounted : async function() {
    // Init Map
    let $map = new qq.maps.Map(this.$refs.arena, {
      zoom: this.zoom,
      center: this.mapCenterLatLng,
      mapTypeId: this.mapTypeId
    })
    // Store
    this.__map = $map
    // Draw Value
    this.drawValue()
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-obj-detail.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/detail/wn-obj-detail.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    "value" : {
      type : Object,
      default : undefined
    },
    "fields" : {
      type : Array,
      default : undefined
    },
    "preview" : {
      type : Object,
      default : ()=>({})
    },
    "form" : {
      type : Object,
      default : ()=>({})
    }
  },
  /////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    Layout() {
      return {
        type : "rows",
        border: true,
        blocks: [{
            size : "37%",
            body : "preview",
          }, {
            body : "form"
          }]
      }
    },
    //--------------------------------------
    Schema() {
      return {
        preview : {
          comType : "WnObjPreview",
          comConf : {
            ... this.preview,
            meta : this.value
          }
        },
        form : {
          comType : "WnObjForm",
          comConf : {
            spacing : "tiny",
            ... this.form,
            fields : this.fields,
            data : this.value
          }
        }
      }
    }
    //--------------------------------------
  },
  /////////////////////////////////////////
  methods : {
    //--------------------------------------
   
    //--------------------------------------
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'm-obj-meta.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/obj-meta/m-obj-meta.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////
  getters : {
    //-------------------------------------------
    get(state){return state},
    //-------------------------------------------
    getHome(state) {
      let obj = state.meta
      let ans = state.ancestors
      if(!_.isEmpty(ans)) {
        // for /home/xiaobai
        if(1 == ans.length) {
          if("home" == ans[0].nm) {
            return obj
          }
        }
        // for /home/xiaobai/path/to/file
        if("home" == ans[0].nm) {
          return ans[1]
        }
      }
      // for /root
      else if(obj && "root" == obj.nm) {
        return obj
      }
      // Dont't known how to find the home
      return null
    },
    //-------------------------------------------
    hasParent (state) {
      // console.log(state.ancestors)
      // console.log(state.parent)
      return state.parent ? true : false
    },
    //-------------------------------------------
    parentIsHome(state) {
      if(!_.isEmpty(state.ancestors) && state.parent && state.meta) {
        if(/^\/home\//.test(state.meta.ph)) {
          return state.parent.pid == state.ancestors[0].id
        }
      }
      return false
    },
    //-------------------------------------------
    isHome (state) {
      if(!_.isEmpty(state.ancestors) && state.meta) {
        if(/^\/home\//.test(state.meta.ph)) {
          return state.meta.pid == state.ancestors[0].id
        }
      }
      return false
    }
    //-------------------------------------------
  },
  ////////////////////////////////////////////////
  mutations : {
    //-------------------------------------------
    reset(state) {
      _.assign(state, {
        "ancestors" : [], 
        "parent" : null, 
        "meta": null,
        "status" : {
          "changed"   : false,
          "saving"    : false,
          "reloading" : false
        },
        "fieldStatus" : {}
      })
    },
    //-------------------------------------------
    setAncestors(state, ancestors=[]) {
      state.ancestors = _.concat(ancestors)
    },
    //-------------------------------------------
    setParent(state, parent) {
      state.parent = parent
    },
    //-------------------------------------------
    setMeta(state, meta) {
      state.meta = meta
    },
    //------------------------------------------
    setFieldStatus(state, {name, message, status}={}) {
      if(name){
        let st = status ? {status, message} : null
        let ukey = _.concat(name).join("-")
        Vue.set(state.fieldStatus, ukey, st)
      }
    },
    //------------------------------------------
    clearFieldStatus(state, names=[]) {
      // Clean All
      if(_.isEmpty(names)) {
        state.fieldStatus = {}
      }
      // Clear one
      else {
        state.fieldStatus = _.omit(state.fieldStatus, names)
      }
    },
    //------------------------------------------
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    }
    //-------------------------------------------
  }
  ////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-obj-form.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/form/wn-obj-form.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////////////////
  data : ()=>({
    myFields : []
  }),
  //////////////////////////////////////////////////////
  computed : {
    //--------------------------------------------------
    isAutoShowBlank() {
      return Ti.Util.fallback(this.autoShowBlank, true)
    },
    //--------------------------------------------------
    FormData() {
      if(_.isString(this.data)) {
        try{
          return JSON.parse(this.data)
        }catch(E){
          return {}
        }
      }
      return this.data
    }
    //--------------------------------------------------
  },
  //////////////////////////////////////////////////////
  methods : {
    //--------------------------------------------------
    doAction(emitName, action, payload) {
      // {method, target}
      if(_.isPlainObject(action)) {
        Ti.App(this)[action.method](action.target, payload)
      }
      // "method:target"
      else if(_.isString(action)) {
        Ti.App(this).exec(action, payload)
      }
      // Just notify $parent
      else if(action){
        this.$notify(emitName, payload)
      }
    },
    //--------------------------------------------------
    OnFieldChange({name, value}={}) {
      //console.log(" <--- @field:changed", {name, value})
      this.doAction("field:change", this.updateBy, {name, value})
    },
    //--------------------------------------------------
    OnChange(data) {
      //console.log(" <- @changed", data)
      this.doAction("change", this.setDataBy, data)
    },
    //--------------------------------------------------
    OnInvalid(err) {
      //console.log("wn-form.invalid", err)
      let payload = {
        name    : err.name,
        message : [err.errMessage, err.value].join(" :: "),
        status  : "warn"
      }
      this.doAction("invalid", this.setFieldStatusBy, payload)
    },
    //--------------------------------------------------
    async evalMyFields() {
      if(_.isArray(this.fields)) {
        this.myFields = this.fields
      }
      // Dynamic call
      else if(_.isFunction(this.fields)) {
        this.myFields = await this.fields()
      }
      // Load from server side
      else if(_.isString(this.fields)) {
        let o = await Wn.Io.loadMeta(this.fields)
        if(null!=o) {
          this.myFields = await Wn.Io.loadContent(o,  {as:"json"})
        } else {
          this.myFields = []
        }
      }
    }
    //--------------------------------------------------
  },
  //////////////////////////////////////////////////////
  watch : {
    "fields" : {
      handler : "evalMyFields",
      immediate : true
    }
  }
  //////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-gis-leaflet.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/gis/leaflet/web-gis-leaflet.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////
  data: ()=>({
    $map  : null,
    $live : null,
    pointerClick : {/*lat:0, lng:0*/},
    pointerHover : {/*lat:0, lng:0*/},
    geo: {
      center: {},
      SW: {},
      SE: {},
      NE: {},
      NW: {},
      W: 0,
      E: 0,
      S: 0,
      N: 0,
      zoom : 0
    },
  }),
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({})
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toSizeRem100({
        width  : this.width,
        height : this.height
      })
    },
    //--------------------------------------
    TileCoords() {
      return this.getTileCoords(this.baseTileLayer)
    },
    //--------------------------------------
    // value -> trans to fit the -> base tile
    coords_value_to_tiles() {
      if(this.valueCoords != this.TileCoords) {
        return `${this.valueCoords}_TO_${this.TileCoords}`
      }
    },
    //--------------------------------------
    // base tile -> trans to fit the -> value
    coords_tiles_to_value() {
      if(this.valueCoords != this.TileCoords) {
        return `${this.TileCoords}_TO_${this.valueCoords}`
      }
    },
    //--------------------------------------
    RedrawFuncName(){
      return _.snakeCase("draw_" + this.valueType + "_as_" + this.displayType)
    },
    //--------------------------------------
    MapData() {
      let val = this.value
      if(_.isEmpty(val)) {
        val = undefined
      }
      // Guard
      if(val && !this.defaultLocation) {
        return null
      }

      return this.evalMapData({
        val, 
        valType : this.valueType, 
        dftLo   : this.defaultLocation
      })
    },
    //--------------------------------------
    hasMapData() {
      return !_.isEmpty(this.MapData)
    },
    //--------------------------------------
    RedrawObjName(){
      return _.snakeCase("draw_" + this.objType + "_as_" + this.objDisplay)
    },
    //--------------------------------------
    ObjData() {
      if(this.objValue) {
        return this.evalMapData({
          val     : this.objValue, 
          valType : this.objType, 
          dftLo   : undefined
        })
      }
    },
    //--------------------------------------
    hasObjData() {
      return !_.isEmpty(this.ObjData) 
    },
    //--------------------------------------
    isShowInfo() {
      return this.showInfo ? true : false
    },
    //--------------------------------------
    ShowInfo() {
      if(!this.showInfo)
        return {}
      
      let si = true === this.showInfo ? {} : this.showInfo
        
      return {
        zoom     : true,
        center   : false,
        latRange : false,
        lngRange : false,
        pointerHover  : false,
        pointerClick  : false,
        ... si
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    //
    // Events
    //
    //--------------------------------------
    OnMapMove(evt) {
      //console.log("map move", evt)
      let bou = this.$map.getBounds()
      this.geo = {
        zoom   : this.$map.getZoom(),
        center : bou.getCenter(),
        SW: bou.getSouthWest(),
        SE: bou.getSouthEast(),
        NE: bou.getNorthEast(),
        NW: bou.getNorthWest(),
        W: bou.getWest(),
        E: bou.getEast(),
        S: bou.getSouth(),
        N: bou.getNorth()
      }
      // Keep zoom in local
      if(this.keepZoomBy) {
        Ti.Storage.local.set(this.keepZoomBy, this.geo.zoom)
      }
    },
    //--------------------------------------
    OnMapPointerMove(evt) {
      this.pointerHover = evt.latlng
    },
    //--------------------------------------
    OnMapPointerClick(evt) {
      this.pointerClick = evt.latlng
    },
    //--------------------------------------
    //
    // Drawing methods
    //
    //--------------------------------------
    redraw() {
      // Prepare the function name

      // Clear live layer
      this.$live.clearLayers()
      
      // Draw data
      if(this.hasMapData) {
        let func = this[this.RedrawFuncName]
        if(_.isFunction(func)) {
          func(this.MapData, {
            autoFitBounds      : this.autoFitBounds,
            showMarker         : this.showMarker,
            markerIcon         : this.markerIcon,
            markerIconOptions  : this.markerIconOptions,
            markerPopup        : this.markerPopup,
            markerPopupOptions : this.markerPopupOptions
          })
        } else {
          throw `Invalid RedrawFuncName="${this.RedrawFuncName}"`
        }
      }

      // Draw obj
      if(this.hasObjData) {
        let func = this[this.RedrawObjName]
        if(_.isFunction(func)) {
          func(this.ObjData, {
            showMarker         : this.objShowMarker,
            markerIcon         : this.objMarkerIcon,
            markerIconOptions  : this.objMarkerIconOptions,
            markerPopup        : this.objMarkerPopup,
            markerPopupOptions : this.objMarkerPopupOptions
          })
        }
      }
    },
    //--------------------------------------
    //
    // GEO Function
    //
    //--------------------------------------
    evalMapData({val, valType="obj", dftLo}={}) {
      // Format the value
      return ({
        //..................................
        "obj" : (latlng)=>{
          latlng = latlng || dftLo
          if(Ti.Util.isNil(latlng.lat) || Ti.Util.isNil(latlng.lng)) {
            return {}
          }
          if(this.coords_value_to_tiles) {
            return Ti.GIS.transLatlngObj(latlng, this.coords_value_to_tiles, true)
          }
          return latlng
        },
        //..................................
        "obj-list" : (list=[])=>{
          if(!list)
            return []
          if(this.coords_value_to_tiles) {
            return _.map(list, (latlng)=>{
              return Ti.GIS.transLatlngObj(latlng, this.coords_value_to_tiles, true)
            })
          }
          return list
        },
        //..................................
        "pair" : (latlng)=>{
          latlng = latlng || Ti.GIS.objToLatlngPair(dftLo)
          if(this.coords_value_to_tiles) {
            return Ti.GIS.transLatlngPair(latlng, this.coords_value_to_tiles)
          }
          return latlng
        },
        //..................................
        "pair-list" : (list=[]) => {
          if(!list)
            return []
          if(this.coords_value_to_tiles) {
            return _.map(list, (latlng)=>{
              return Ti.GIS.transLatlngPair(latlng, this.coords_value_to_tiles)
            })
          }
          return list
        },
        //..................................
        "geojson" : (geojson) => {
          if(!geojson) {
            return {
              type : "Point",
              coordinates : Ti.GIS.objToLnglatPair(dftLo)
            }
          }

          // TODO here to translate coords for geojson
          return geojson
        }
        //..................................
      })[valType](val)
    },
    //--------------------------------------
    //
    // Utility
    //
    //--------------------------------------
    GeoStr(v, precise=this.latlngPrecise) {
      if(_.isUndefined(v))
        return ""
      let s = '' + Ti.Num.precise(v, precise)
      let ss = s.split('.')
      ss[1] = _.padEnd(ss[1], precise, '0')
      return ss.join('.')
    },
    //--------------------------------------
    LatlngForDi(latlng) {
      if(this.coords_value_to_tiles) {
        return Ti.GIS.transLatlng(latlng, this.coords_value_to_tiles)
      }
      return latlng
    },
    //--------------------------------------
    Icon(urlOrIcon, {
      size = 32,
      color = "primary",
      iconSize = [24, 41],
      iconAnchor = [12, 41],
      shadow = true,
      shadowSize = [41, 41],
      shadowAnchor = [12, 41]
    }={}) {
      if(!urlOrIcon)
        return new L.Icon.Default()

      // Eval the icon
      let {type, value} = Ti.Icons.evalIconObj(urlOrIcon)

      // Font icon
      if("font" == type) {
        let html = Ti.Icons.fontIconHtml(value)
        let ansz = size / 2
        return L.divIcon({
          className: `ti-gsi-mark-icon 
                      is-size-${size} 
                      is-color-${color}
                      ${shadow?'has-shadow':''}`,
          html,
          iconSize : [size, size],
          iconAnchor: [ansz, ansz]
        })
      }

      // Image Icon
      if("image" == type) {
        let shadowUrl;
        if(shadow) {
          shadowUrl = shadow
          if(_.isBoolean(shadow)) {
            let [_, nmPath, suffix] = /^([^.]+)\.(\w+)$/.exec(value)
            shadowUrl = `${nmPath}-shadow.${suffix}`
          }
          shadowUrl = `${this.imageIconBase}${shadowUrl}`
        }
        return L.icon({
          iconUrl : `${this.imageIconBase}${value}`,
          iconSize, iconAnchor,
          shadowUrl, shadowSize, shadowAnchor
        })
      }

      // Keep original input
      return L.icon(urlOrIcon)
    },
    //--------------------------------------
    trans_obj_from_value_to_tiles(obj) {
      if(this.coords_value_to_tiles) {
        return Ti.GIS.transLatlngObj(obj, this.coords_value_to_tiles, true)
      }
      return obj
    },
    //--------------------------------------
    trans_pair_from_value_to_tiles(pair) {
      if(this.coords_value_to_tiles) {
        return Ti.GIS.transLatlngPair(pair, this.coords_value_to_tiles)
      }
      return pair
    },
    //--------------------------------------
    trans_obj_from_tiles_to_value(obj) {
      if(this.coords_tiles_to_value) {
        return Ti.GIS.transLatlngObj(obj, this.coords_tiles_to_value, true)
      }
      return obj
    },
    //--------------------------------------
    trans_pair_from_tiles_to_value(pair) {
      if(this.coords_tiles_to_value) {
        return Ti.GIS.transLatlngPair(pair, this.coords_tiles_to_value)
      }
      return pair
    },
    //--------------------------------------
    //
    // Map Methods
    //
    //--------------------------------------
    fitBounds(bounds) {
      this.$map.fitBounds(bounds, this.fitBoundsBy)
    },
    //--------------------------------------
    initMapControls() {
      let vm = this
      let MockButton = L.Control.extend({
        options: {
            position: 'topright'
     
        },
        initialize: function (options) {
          L.Util.extend(this.options, options);
  
        },
        onAdd: function(map) {
          let $con = Ti.Dom.createElement({})
          $con.innerHTML = `<b>hahaha</b>`
          $($con).on("click", function(evt){
            let list = vm.mockPairList(1000)
            vm.$notify("change", list)
          })
          return $con
        }
      })

      let mm = new MockButton()
      mm.addTo(this.$map)
    },
    //--------------------------------------
    initMapView(data=this.MapData) {
      // Get current zoom, keep the last user zoom state
      let zoom = this.geo.zoom || this.zoom

      // Default view
      if(!this.hasMapData) {
        let dftCenter = Ti.GIS.transLatlngObj(this.defaultLocation || {
          lat: 39.97773512677837,
          lng: 116.3385673945887
        })
        this.$map.setView(dftCenter, zoom)
        return
      }

      // Auto fit the data
      ({
        //..................................
        "obj" : (latlng)=>{
          this.$map.setView(latlng, zoom)
        },
        //..................................
        "obj-list" : (list=[])=>{
          if(list.length > 1) {
            let {SW,NE} = Ti.GIS.getLatlngObjBounds(list)
            this.fitBounds([SW, NE])
          } else if(list.length == 1) {
            let latlng = list[0]
            this.$map.setView(latlng, zoom)
          }
        },
        //..................................
        "pair" : (latlng)=>{
          this.$map.setView(latlng, zoom)
        },
        //..................................
        "pair-list" : (list=[]) => {
          if(list.length > 1) {
            let {SW,NE} = Ti.GIS.getLatlngObjBounds(list)
            this.fitBounds([SW, NE])
          } else if(list.length == 1) {
            let latlng = list[0]
            this.$map.setView(latlng, zoom)
          }
        },
        //..................................
        "geojson" : (geojson) => {
          throw "Not implement geojson get center"
        }
        //..................................
      })[this.valueType](data)
    },
    //--------------------------------------
    initMap() {
      // Create Map
      this.$map = L.map(this.$refs.main, {
        ... this.mapOptions,
        attributionControl : false,
        minZoom : this.minZoom,
        maxZoom : this.maxZoom
      });

      L.control.scale({
        metric : true,
        imperial : false,
        updateWhenIdle : true
      }).addTo(this.$map);

      // Create the main bg-layer
      if(this.baseTileLayer) {
        this.createTileLayer(this.baseTileLayer).addTo(this.$map)
      }
      if(this.noteTileLayer) {
        this.createTileLayer(this.noteTileLayer).addTo(this.$map)
      }
      
      // Events
      this.$map.on("move", (evt) => {this.OnMapMove(evt)})
      this.$map.on("click", (evt) => {this.OnMapPointerClick(evt)})
      this.$map.on("mousemove", (evt) => {this.OnMapPointerMove(evt)})

      // Prepare live layer for the presentation of value data 
      this.$live = L.layerGroup().addTo(this.$map)

      // Customized control
      //this.initMapControls()

      // Init map view
      this.initMapView()

      // Then Render the data
      this.redraw()
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "MapData": function() {
      if(this.autoFitBounds) {
        this.initMapView()
      }
      this.redraw()
    }
  },
  //////////////////////////////////////////
  created : function() {
    // Restore the Kept zoom in local
    if(this.keepZoomBy) {
      let zoom = Ti.Storage.local.getInt(this.keepZoomBy, this.zoom)
      this.geo.zoom = zoom
    }
  },
  //////////////////////////////////////////
  mounted : async function() {
    if("Cluster" == this.displayType) {
      await Ti.Load([
        "@deps:leaflet/leaflet.markercluster-src.js",
        "@deps:leaflet/marker-cluster.css",
        "@deps:leaflet/marker-cluster.default.css"
      ])
    }
    
    this.initMap()
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'thing-filter.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/thing/manager/com/thing-filter/thing-filter.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////
  data : ()=>({
    keywordFocus : false
  }),
  ///////////////////////////////////////////
  props : {
    "filter" : {
      type : Object,
      default : ()=>({})
    },
    "sorter" : {
      type : Object,
      default : ()=>({})
    },
    "placeholder" : {
      type : String,
      default : 'i18n:find-data'
    },
    "status" : {
      type : Object,
      default : ()=>({})
    },
    "value" : {
      type : Object,
      default : ()=>({})
    },
  },
  ///////////////////////////////////////////
  computed : {
    //---------------------------------------
    TopClass() {
      return this.getTopClass({
        "in-recyclebin" : this.isInRecycleBin
      })
    },
    //---------------------------------------
    hasSorter() {
      return !_.isEmpty(this.sorter)
    },
    //---------------------------------------
    isInRecycleBin() {
      return this.status.inRecycleBin
    }
    //---------------------------------------
  },
  ///////////////////////////////////////////
  methods : {
    //---------------------------------------
    OnFilterChange(payload) {
      this.$notify("filter::change", payload)
    },
    //---------------------------------------
    OnSorterChange(payload) {
      this.$notify("sorter::change", payload)
    },
    //---------------------------------------
    // When this func be invoked, the recycleBin must be true
    OnLeaveRecycleBin() {
      Ti.App(this).dispatch('main/toggleInRecycleBin')
    }
    //---------------------------------------
  }
  ///////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-media-audio.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/media/audio/ti-media-audio.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////////
  data : ()=>({
    $audio : undefined,

    dragging : false,
    loading  : false,
    seeking  : false,
    stalled  : false,
    canplay  : false,
    playing  : false,

    // Media internal status
    bufferedBegin : undefined,
    bufferedEnd : undefined,
    muted : undefined,
    paused : undefined,
    ended : undefined,
    volume : undefined,
    duration : undefined,   // In sec.
    currentTime : 0,        // In sec.
  }),
  ///////////////////////////////////////////////////////
  props : {
    //-----------------------------------
    // Data
    //-----------------------------------
    "src" : {
      type : String,
      default : null
    },
    //-----------------------------------
    // Measure
    //-----------------------------------
    "timelineWidth" : {
      type : [Number, String],
      default : "100%"
    },
    "barHeight" : {
      type : [Number, String],
      default : undefined
    },
    "conWidth" : {
      type : [Number, String],
      default : undefined
    },
    "conHeight" : {
      type : [Number, String],
      default : undefined
    },
    "width" : {
      type : [Number, String],
      default : undefined
    },
    "height" : {
      type : [Number, String],
      default : undefined
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //---------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width  : this.width, 
        height : this.height
      })
    },
    //---------------------------------------------------
    ControlClass() {
      return {
        "is-ready"    : this.canplay,
        "is-playing"  : this.playing,
        "is-paused"   : this.paused,
        "is-ended"    : this.ended
      }
    },
    //---------------------------------------------------
    ControlStyle() {
      return Ti.Css.toStyle({
        width  : this.conWidth, 
        height : this.conHeight
      })
    },
    //---------------------------------------------------
    PlayIcon() {
      if(this.loading || this.seeking) {
        return "fas-spinner fa-spin"
      }
      if(this.paused) {
        return "zmdi-play"
      }
      return "zmdi-pause"
    },
    //---------------------------------------------------
    VolumeIcon() {
      if(this.muted) {
        return "zmdi-volume-off"
      }
      if(!this.volume) {
        return "zmdi-volume-mute"  
      }
      if(this.volume < 0.5) {
        return "zmdi-volume-down"
      }
      return "zmdi-volume-up"
    },
    //---------------------------------------------------
    TimeTextWidth() {
      if(this.duration > 3600) {
        return "8em"
      }
      return "5em"
    },
    //---------------------------------------------------
    TimelineConfig() {
      return {
        precision : -1,
        width     : this.timelineWidth,
        barHeight : this.barHeight,
        format    : (v)=>{
          let tm = Ti.DateTime.parseTime(v, {unit:"s"})
          return tm.toString("min")
        },
        textWidth : this.TimeTextWidth
      }
    },
    //---------------------------------------------------
    VolumeConfig() {
      return {
        precision : -1,
        notifyFrequency : 100,
        height : "unset"
      }
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods : {
    //---------------------------------------------------
    OnTimelineChange(val) {
      // console.log("timline", val)
      this.$audio.currentTime = val
    },
    //---------------------------------------------------
    OnTimelineDragBegin() {
      this.dragging = true
    },
    OnTimelineDragEnd() {
      this.dragging = false
    },
    //---------------------------------------------------
    OnVolumeBarChange(val) {
      // console.log("volume", val)
      this.$audio.volume = val
    },
    //---------------------------------------------------
    /*
    Load:
      1. OnLoadsStart
      2. OnDurationChange
      3. OnLoadedMetaData
      4. OnLoadedData
      5. OnCanPlay
    
    Play
      1. OnPlay
      2. OnPause
      3. OnEnded

    Seek:
      1. OnSeeking
      2. OnSeeked
      3. OnCanPlay
    
    Volume
      1. OnVolumeChange
    */
    //---------------------------------------------------
    OnLoadsStart() {
      // console.log("OnLoadsStart")
      this.loading = true
      this.updateMediaState()
    },
    //---------------------------------------------------
    OnLoadedMetaData() {
      // console.log("OnLoadedMetaData")
    },
    //---------------------------------------------------
    OnDurationChange() {
      // console.log("OnDurationChange", this.$audio.duration)
      this.updateMediaState()
    },
    //---------------------------------------------------
    OnLoadedData() {
      // console.log("OnLoadedData")
      this.loading = false
      this.updateMediaState()
    },
    //---------------------------------------------------
    OnSeeking() {
      // console.log("OnSeeking")
      this.seeking = true
      this.updateMediaState()
    },
    //---------------------------------------------------
    OnSeeked() {
      // console.log("OnSeeked")
      this.seeking = false
      this.updateMediaState()
    },
    //---------------------------------------------------
    OnCanPlay() {
      // console.log("OnCanPlay")
      this.loading = false
      this.canplay = true
      this.updateMediaState()
    },
    //---------------------------------------------------
    OnPlay() {
      // console.log("OnPlay")
      this.playing = true
      this.updateMediaState()
    },
    //---------------------------------------------------
    OnPause() {
      // console.log("OnPause")
      this.playing = false
      this.updateMediaState()
    },
    //---------------------------------------------------
    OnEnded() {
      // console.log("OnEnded")
      this.playing = false
      this.updateMediaState()
    },
    //---------------------------------------------------
    OnTimeUpdate() {
      if(!this.dragging) {
        //console.log("OnTimeUpdate")
        this.currentTime = this.$audio.currentTime
        this.updateMediaBuffered()
      }
    },
    //---------------------------------------------------
    OnVolumeChange() {
      //console.log("OnVolumeChange", this.$audio.volume, this.$audio.muted)
      this.volume = this.$audio.volume
      this.muted = this.$audio.muted
    },
    //---------------------------------------------------
    OnWaiting() {
      // console.log("OnWaiting")
      this.loading = true
    },
    //---------------------------------------------------
    OnStalled() {
      // console.log("OnWaiting")
      this.stalled = true
    },
    //---------------------------------------------------
    updateMediaBuffered() {
      let buf = this.$audio.buffered
      if(buf.length >= 1) {
        this.bufferedBegin = this.$audio.buffered.start(0)
        this.bufferedEnd   = this.$audio.buffered.end(0)
      } else {
        this.bufferedBegin = undefined
        this.bufferedEnd   = undefined
      }
    },
    //---------------------------------------------------
    updateMediaState() {
      this.updateMediaBuffered()
      this.paused      = this.$audio.paused
      this.ended       = this.$audio.ended
      this.volume      = this.$audio.volume
      this.muted       = this.$audio.muted
      this.duration    = this.$audio.duration
      this.currentTime = this.$audio.currentTime
    },
    //---------------------------------------------------
    togglePlay() {
      if(this.canplay) {
        if(this.paused) {
          this.$audio.play()
        } else {
          this.$audio.pause()
        }
      }
    },
    //---------------------------------------------------
    toggleMuted() {
      this.$audio.muted = !this.muted
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  mounted : function() {
    this.$audio = this.$refs.audio
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-shelf-free.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/shelf/free/web-shelf-free.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data : ()=>({
    itemStyles: {},
    itemList: []
  }),
  //////////////////////////////////////////
  props : {
    "preview": {
      type: Object,
      default: undefined
    },
    /*
    Each item should obey the form below:
    {
      position: "top|left|bottom|right|center|free",
      className: "item-class-selector",
      style: {...},
      comType: "xxx",
      comConf: {...}
    }
    */
    "items" : {
      type : Array,
      default : ()=>[]
    },
    "background": {
      type: [String, Object],
      default: undefined
    },
    "color": {
      type: String,
      default: undefined
    },
    "width": {
      type: [String, Number],
      default: undefined
    },
    "height": {
      type: [String, Number],
      default: undefined
    },
    "mainBackground": {
      type: [String, Object],
      default: undefined
    },
    "mainWidth": {
      type: [String, Number],
      default: undefined
    },
    "mainHeight": {
      type: [String, Number],
      default: undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height,
        color: this.color,
        ...this.evalBackgroundStyle(this.background)
      })
    },
    //--------------------------------------
    MainStyle() {
      return Ti.Css.toStyle({
        width  : this.mainWidth,
        height : this.mainHeight,
        ...this.evalBackgroundStyle(this.mainBackground)
      })
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    evalItemList() {
      if(!_.isArray(this.items)) {
        this.itemList = []
        return
      }
      
      let vm = this;
      let list = []      
      _.forEach(this.items, (it, index)=>{
        // Eval the class
        let klass = [`at-${it.position||"free"}`, `i-${index}`]
        if(it.className) {
          klass.push(it.className)
        }

        // Gen Key
        let itKey = `It-${index}`

        // Style
        let self = Ti.Css.toStyle(it.style)
        let appear = Ti.Css.toStyle(it.appear)

        // Transition
        if(!_.isEmpty(appear)) {
          _.delay(()=>{
            let it = _.cloneDeep(this.itemList[index])
            it.style = self
            vm.$set(this.itemList, index, it)
          }, 0)
        }
        
        // Join
        list.push({
          key: itKey,
          index,
          className: Ti.Css.mergeClassName(klass),
          style: _.assign({}, self, appear),
          comType: it.comType || "WebTextRaw",
          comConf: it.comConf
        })
      })
      // Get the result
      this.itemList = list
    },
    //--------------------------------------
    evalBackgroundStyle(bg) {
      if(_.isEmpty(bg)){
        return {}
      }
      // Background image
      if(_.isObject(bg)) {
        return {
          backgroundImage: `url("${Ti.WWW.evalObjPreviewSrc(bg, this.preview)}")`
        }
      }

      // Backgrund color
      if(/^(#[0-9A-Fa-f]{3,6}|rgba?\([0-9, ]+\))$/.test(bg)) {
        return {backgroundColor: bg}
      }

      // Default as background Image
      return {
        backgroundImage: `url("${bg}")`
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "items": {
      handler: function() {
        this.evalItemList()    
      },
      immediate: true
    }
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-tile-comment.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/tile/comment/web-tile-comment.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  props : {
    "value" : {
      type : Object,
      default : ()=>({})
    },
    "mapping": {
      type: Object,
      default: ()=>({
        userId     : "uid",
        userName   : "unm",
        avatar     : "avatar",
        content    : "brief",
        createTime : "ct"
      })
    },
    "avatarSrc": {
      type: String,
      default: undefined
    },
    "userIcon" : {
      type : [String,Object],
      default: "fas-user"
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    Post() {
      let it = Ti.Util.translate(this.value, this.mapping)
      return it || {}
    },
    //--------------------------------------
    AvatarIcon() {
      let avatar = _.get(this.Post, "avatar")
      if(avatar && this.avatarSrc) {
        return {
          type  : "image",
          value : Ti.S.renderBy(this.avatarSrc, this.Post)
        }
      }
      return this.userIcon
    },
    //--------------------------------------
    CreateTimeText() {
      if(this.Post.createTime)
        return Ti.DateTime.timeText(this.Post.createTime)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-combo-pair-group.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/pair-group/ti-combo-pair-group.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    myFieldNames : [],
    myFieldMap  : {},
    myCurrentTabName : null
  }),
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    ValueObj() {
      if(Ti.Util.isNil(this.value) || _.isEmpty(this.value)) {
        return {}
      }
      if(_.isString(this.value)) {
        let str = _.trim(this.value)
        if(!str) {
          return {}
        }
        return JSON.parse(this.value)
      }
      if(_.isPlainObject(this.value)) {
        return this.value
      }
      console.warn("Unsupported value object:", this.value)
    },
    //------------------------------------------------
    TheBlocks() {
      // Update Block Keys, add the key noexists in map
      let names = _.cloneDeep(this.myFieldNames)
      _.forEach(this.ValueObj, (block, key)=>{
        if(_.indexOf(names, key) < 0) {
          names.push(key)
        }
      })
      this.myFieldNames = names

      // Gen-block by keys
      let list = []
      for(let name of names) {
        let val = _.get(this.ValueObj, name)
        let field = _.get(this.myFieldMap, name) || {}
        // Explain block
        let b2 = Ti.Util.explainObj(val, {
          title : name,
          name  : name,
          ... _.pick(field, "title", "name", "icon"),
          body : {
            comType : field.comType || "ti-input-text",
            comConf : field.comConf || { value: "=.." }
          }
        })
        list.push(b2)
      }
      return list
    },
    //------------------------------------------------
    TheLayout() {
      return {
        type  : "tabs",
        tabAt : this.tabAt,
        blocks : this.TheBlocks
      }
    },
    //------------------------------------------------
    TheShown() {
      if(this.keepShownTo) {
        return
      }
      let shown = {}
      _.forEach(this.myFieldNames, name => {
        shown[name] = (name == this.myCurrentTabName)
      })
      return shown
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    __on_events(eventFullName, payload) {
      let [key, eventName] = eventFullName.split("::")
      //console.log(key, eventName, payload)
      // For Change
      if("change" == eventName && this.$parent) {
        return ()=>{
          let data = _.cloneDeep(this.ValueObj)
          _.set(data, key, payload)
          this.$parent.$notify("change", data)
          return true
        }
      }
      // Cancel others bubble
      return ()=>true
    },
    //------------------------------------------------
    OnShownUpdate(shown) {
      let keys = Ti.Util.truthyKeys(shown)
      this.myCurrentTabName = _.first(keys)
    },
    //------------------------------------------------
    evalBlocks() {
      let map = {}
      let keys = []
      _.forEach(this.fields, block => {
        map[block.name] = block
        keys.push(block.name)
      })
      this.myFieldNames = keys
      this.myFieldMap = map
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    //-----------------------------------------------
    "blocks" : {
      handler : "evalBlocks",
      immediate : true
    }
    //-----------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-media-video.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/media/video/ti-media-video.mjs'] = (function(){
const resize = function(evt){
  this.doResizeVideo()
}
//-----------------------------------
const __TI_MOD_EXPORT_VAR_NM = {
  data: ()=>({
    naturalWidth  : -1,
    naturalHeight : -1,
    fitMode  : "none",
    loading : true
  }),
  props : {
    "src" : {
      type : String,
      default : null
    },
    "width" : {
      type : [String, Number],
      default : ""
    },
    "height" : {
      type : [String, Number],
      default : ""
    }
  },
  computed : {
    topClass() {
      return {
        "as-none"    : this.fitMode=="none",
        "as-contain" : this.fitMode=="contain",
        "as-loading" : this.loading
      }
    },
    topStyle() {
      return {
        width  : this.width, 
        height : this.height
      }
    }
  },
  methods : {
    onVideoLoaded() {
      let $video = this.$refs.the_video
      if(!_.isElement($video)) {
        return
      }
      this.naturalWidth  = $video.videoWidth
      this.naturalHeight = $video.videoHeight
      //console.log(this.naturalWidth, this.naturalHeight)
      this.loading = false
      //$video.volume = 1
      this.doResizeVideo()
    },
    isContainsByViewport() {
      // Get the viewport
      let vpRect = Ti.Rects.createBy(this.$el)
      let imRect = Ti.Rects.create({
        ...vpRect.raw("tl"),
        width  : this.naturalWidth,
        height : this.naturalHeight
      })
      // console.log("vpRect", vpRect.toString())
      // console.log("imRect", imRect.toString())
      return vpRect.contains(imRect)
    },
    doResizeVideo() {
      // Image is in viewport
      if(this.isContainsByViewport()) {
        this.fitMode = "none"
      }
      // Image is too big, mark "cover"
      else {
        this.fitMode = "contain"
      }
    },
  },
  mounted : function(){
    Ti.Viewport.watch(this, {resize})
  },
  beforeDestroy : function(){
    Ti.Viewport.unwatch(this)
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'thing-files-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/thing/manager/com/thing-files/thing-files-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "dirName" : {
    type : String,
    default : undefined
  },
  "dataHome" : {
    type : String,
    default : undefined
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "files" : {
    type: Object,
    default: undefined
  },
  "preview" : {
    type : Object,
    default: undefined
  },
  "previewEdit" : {
    type : Object,
    default: undefined
  },
  "actions" : {
    type : Array,
    default : ()=>[{
        "name" : "reloading",
        "type" : "action",
        "icon" : "zmdi-refresh",
        "tip" : "i18n:refresh",
        "altDisplay" : {
          "icon" : "zmdi-refresh zmdi-hc-spin"
        },
        "action" : "$parent:reloadData"
      },{
        "type" : "line"
      }, {
        "name" : "deleting",
        "type" : "action",
        "icon" : "zmdi-delete",
        "text" : "i18n:del",
        "altDisplay" : {
          "icon" : "zmdi-refresh zmdi-hc-spin",
          "text" : "i18n:del-ing"
        },
        "action" : "$parent:doDeleteSelected"
      },{
        "type" : "line"
      },{
        "name" : "upload",
        "type" : "action",
        "icon" : "zmdi-cloud-upload",
        "text" : "i18n:upload",
        //"action" : "commit:main/files/showUploadFilePicker"
        "action" : "$parent:doUploadFiles"
      }]
  },
  "stateLocalKey" : {
    type : String,
    default : null
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "dirNameTip" : {
    type : String,
    default : undefined
    //default : "i18n:thing-files"
  },
  "dirNameComType" : {
    type : String,
    default : "ti-droplist"
  },
  "dirNameOptions" : {
    type : Array,
    default : ()=>[{
      icon  :"zmdi-collection-image",
      text  :"i18n:media",
      value : "media"
    }, {
      icon  :"zmdi-attachment-alt",
      text  :"i18n:attachment",
      value : "attachment"
    }]
  },
  "nilIcon": {
    type: String,
    default: "fas-braille"
  },
  "nilText": {
    type: String,
    default: null
  }
  //-----------------------------------
  // Measure
  //-----------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-input-icon.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/icon/ti-input-icon.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data: ()=>({
    hideBorder : false,
    myHoverIcon : null,
    status  : "collapse"
  }),
  ////////////////////////////////////////////////////
  props : {
    // "hideBorder"  : {
    //   type : Boolean,
    //   default : false
    // },
    "value" : {
      type : [String, Object],
      default : null
    },
    "iconSize" : {
      type : [Number,String],
      default : null
    },
    "dropWidth" : {
      type : [Number, String],
      default : "4rem"
    },
    "dropHeight" : {
      type : [Number, String],
      default : "4rem"
    },
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return Ti.Css.mergeClassName({
        "show-border"  : !this.hideBorder,
        "hide-border"  : this.hideBorder,
      }, this.className)
    },
    //------------------------------------------------
    ValueStyle() {
      return {
        "font-size" : Ti.Css.toSize(this.iconSize)
      }
    },
    //------------------------------------------------
    isCollapse() {return "collapse"==this.status},
    isExtended() {return "extended"==this.status},
    //------------------------------------------------
    hasValue () {
      return !Ti.Util.isNil(this.value)
    },
    //------------------------------------------------
    TipIcon () {
      return  this.myHoverIcon || this.value
    },
    //------------------------------------------------
    OptionIcons() {
      let list = []
      _.forEach(this.options, (icon, index)=>{
        let m = /^([a-z]+)-(.+)$/.exec(icon)
        list.push({
          value : icon,
          index : index,
          type  : m[1],
          name  : m[2]
        })
      })
      return list
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnToggleDrop() {
      this.status = ({
        "collapse" : "extended",
        "extended" : "collapse"
      })[this.status]
    },
    //------------------------------------------------
    OnSelectIcon({value}={}) {
      this.$notify("change", value)
    },
    //------------------------------------------------
    OnSelectIconAndCollapse({value}={}) {
      this.$notify("change", value)
      this.status = "collapse"
    },
    //------------------------------------------------
    OnChangedIcon() {
      let icon = _.trim(this.$refs.input.value)
      console.log("haha", icon)
      this.$notify("change", icon)
    },
    //------------------------------------------------
    OnHoverIcon({value}={}) {
      this.myHoverIcon = value
    },
    //------------------------------------------------
    OnLeaveIcon() {
      this.myHoverIcon = null
    },
    //------------------------------------------------
    OnClearIcon() {
      this.$notify("change", null)
    },
    //------------------------------------------------
    doCollapse() {
      this.status = "collapse"
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-footer.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/footer/web-footer.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  /////////////////////////////////////////
  props : {
    "logo" : {
      type : [String, Object],
      default : "zmdi-chevron-down"
    },
    "brief" : {
      type : String,
      default : null
    },
    "copyright" : {
      type : String,
      default : null
    }
  },
  //////////////////////////////////////////
  computed : {
    //......................................
    
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-chart-raw-pie.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/chart/raw/pie/ti-chart-raw-pie.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  props : {
    "percentKey" : {
      type : String,
      default : "percent"
    },
    "precise" : {
      type : Number,
      default : 2
    },
    "labelX" : {
      type : [Boolean, Object, String, Function],
      default: "${i18n:name} : ${percent}% : ${value}"
    },
    "tooltip" : {
      type : [Boolean, Object],
      default : ()=>({
        showTitle: false,
        showMarkers : false,
        showCrosshairs : false,
        itemTpl: '<li class="g2-tooltip-list-item">{name} : {percent}% : {value}</li>',
      })
    },
    "view" : {
      type : Object,
      default : ()=>({
        tooltip : ["name*percent*value", (n,p,v)=>{
          return {
            name: n, percent: p, value: v
          }
        }]
      })
    },
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    ChartSetup() {
      return (chart, data)=>{
        let {list, sum} = this.evalXYData(data)
        if(_.isEmpty(list))
          return

        // Eval percent
        for(let li of list) {
          let v = li[this.positionY]
          li[this.percentKey] = Ti.Num.precise(v * 100 / sum, this.precise)
        }

        //console.log(list)
        chart.data(list);

        // Axis/Tick/Tooltip ...
        this.applyChartSetup(chart)
        
        // Coordinate
        chart.coordinate('theta', {
          radius: 0.75
        });
        
        const view = chart.interval().adjust('stack')
        view.position(this.percentKey).color(this.positionX);

        // View label
        this.applyViewLabel(view)

        this.applyViewOptions(view, {
          style : {
            opacity: 0.4
          },
          state : {
            active : {
              style: (element) => {
                const shape = element.shape;
                return {
                  matrix: G2.Util.zoom(shape, 1.5),
                }
              }
            }
          }
        }, this.view)
      
        chart.interaction('element-single-selected');

      } // ~ function
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-row-article.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/row/article/web-row-article.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  props : {
    "value" : {
      type : Object,
      default : ()=>({})
    },
    "previewKey" : {
      type:String,
      default: "thumb"
    },
    "previewObj" : {
      type:String,
      default: "thumb_obj"
    },
    "mapping": {
      type: Object,
      default: ()=>({
        id : "id",
        title : "title",
        brief : "brief",
        watchCount : "watch_c",
        readTime    : "duration",
        date : "pubat"
      })
    },
    "hrefTmpl": {
      type: String,
      default: undefined
    },
    "emitName": {
      type: String,
      default: undefined
    },
    "payload": undefined,
    "newtab": {
      type: Boolean,
      default: false
    },
    "apiTmpl": {
      type: String,
      default: undefined
    },
    "cdnTmpl": {
      type: String,
      default: undefined
    },
    "dftThumbSrc": {
      type: String,
      default: undefined
    },
    "imgStyle" : {
      type: Object,
      default: undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    Article() {
      let it = Ti.Util.translate(this.value, this.mapping)
      return it || {}
    },
    //--------------------------------------
    ThumbSrc() {
      return Ti.WWW.evalObjPreviewSrc(this.value, {
        previewKey : this.previewKey,
        previewObj : this.previewObj,
        apiTmpl    : this.apiTmpl,
        cdnTmpl    : this.cdnTmpl,
        dftSrc     : this.dftThumbSrc
      })
    },
    //--------------------------------------
    ThumbImageStyle() {
      return Ti.Css.toStyle(this.imgStyle)
    },
    //--------------------------------------
    ArticleLinkHref() {
      if(this.hrefTmpl) {
        return Ti.S.renderBy(this.hrefTmpl, this.value)
      }
    },
    //--------------------------------------
    ArticleLinkTarget() {
      return this.newtab ? "_blank" : undefined
    },
    //--------------------------------------
    hasInfo() {
      return this.DateText
        || this.Article.watchCount
        || this.Article.readTime
    },
    //--------------------------------------
    DateText() {
      if(this.Article.date)
        return Ti.DateTime.timeText(this.Article.date)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickLink(evt) {
      if(this.emitName) {
        evt.preventDefault()
        let payload = Ti.Util.explainObj(this.value, this.payload)
        this.$notify(this.emitName, payload)
      }
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-chart-g2.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/chart/g2/ti-chart-g2.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    "data" : {
      type : Array,
      default : ()=>[]
    },
    "width" : {
      type : [Number, String],
      default : undefined
    },
    "height" : {
      type : [Number, String],
      default : undefined
    },
    "padding" : {
      type : [Number, Array, String],
      default : "auto"
    },
    "appendPadding" : {
      type : [Number, Array, String],
      default : undefined
    },
    // Function(chart, data):void
    "setup" : {
      type : Function,
      default : _.identity
    },
    "autoSource" : {
      type : Boolean,
      default : true
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //--------------------------------------
    hasData() {
      return !_.isEmpty(this.data)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    draw_chart() {
      let $container = this.$refs.chart
      //let rect = Ti.Rects.createBy($container)
      //let {width, height} = rect
      //--------------------------------------.
      // Create The Chart
      let chart = new G2.Chart({
        container: $container,
        padding : this.padding,
        appendPadding : this.appendPadding,
        autoFit: true,
        //width, height
      })
      //--------------------------------------.
      // Set datasource
      if(this.autoSource && this.hasData)
        chart.data(this.data)
      //--------------------------------------.
      // Setup chart
      if(_.isFunction(this.setup)) {
        this.setup(chart, this.data)
      }
      //--------------------------------------.
      // 渲染并返回
      chart.render()
      return chart
    },
    //--------------------------------------
    redrawChart() {
      if(!_.isElement(this.$refs.chart)) {
        return
      }
      if(this.$G2Chart) {
        try{
          this.$G2Chart.destroy()
        }catch(E){}
        $(this.$refs.chart).empty()
      }
      this.$G2Chart = this.draw_chart(this)
    },
    drawAll() {
      //console.log("I am drawAll")
      this.$nextTick(()=>{
        this.redrawChart()
      })
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "data" : "drawAll"
  },
  //////////////////////////////////////////
  mounted : function() {
    this.drawAll()

    // 监控窗口尺寸变化
    Ti.Viewport.watch(this, {
      resize: function() {
        let chart = this.$G2Chart
        if(chart) {
          this.$notify("before_resize")
          // let $container = this.$refs.chart
          // let rect = Ti.Rects.createBy($container)
          // let {width, height} = rect
          //chart.changeSize({width, height})
          chart.forceFit()
        }
      }
    })
  },
  //////////////////////////////////////////
  beforeDestroy : function(){
    if(this.$G2Chart) {
      this.$G2Chart.destroy()
    }
    // 解除窗口监控
    Ti.Viewport.unwatch(this)
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-roadblock.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/roadblock/ti-roadblock.mjs'] = (function(){
/***
 * In Building ....
 */
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    "icon" : {
      type: String,
      default: "fas-exclamation-triangle"
    },
    "text" : {
      type: String,
      default: null
    }
  },
  //////////////////////////////////////////
  computed : {
    TopClass() {
      return this.getTopClass()
    }
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'm-thing-config.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/thing/mod/config/m-thing-config.mjs'] = (function(){
//---------------------------------------
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////
  mutations : {
    setMeta(state, meta) {
      state.meta = meta
    },
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    },
    setSchema(state, schema) {
      state.schema = schema
    },
    setLayout(state, layout) {
      state.layout = _.pick(layout, ["desktop","tablet","phone"])
      state.shown = layout.shown || {}
      state.listOpen = layout.listOpen || {}
    },
    setActions(state, actions) {
      state.actions = actions
    },
    mergeShown(state, shown) {
      if(shown && !_.isEmpty(shown)) {
        state.shown = _.assign({}, state.shown, shown)
      }
    },
    persistShown(state) {
      if(state.meta && state.meta.id) {
        Ti.Storage.session.setObject(`${state.meta.id}-shown`, state.shown)
      }
    },
    restoreShown(state) {
      if(state.meta && state.meta.id) {
        let shown = Ti.Storage.session.getObject(`${state.meta.id}-shown`)
        state.shown = _.assign({}, state.shown, shown)
      }
    }
  }
  ////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'form-group-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/form/com/form-group/form-group-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  "type" : {
    type : String,
    default : "Group"
  },
  "icon" : {
    type : String,
    default : null
  },
  "title" : {
    type : String,
    default : null
  },
  "fields" : {
    type : Array,
    default : ()=>[]
  },
  "data" : {
    type : Object,
    default : null
  },
  "fieldStatus" : {
    type : Object,
    default : ()=>({})
  },
  "statusIcons" : {
    spinning : 'fas-spinner fa-spin',
    error    : 'zmdi-alert-polygon',
    warn     : 'zmdi-alert-triangle',
    ok       : 'zmdi-check-circle',
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-chart-combo.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/chart/combo/ti-chart-combo.mjs'] = (function(){
//////////////////////////////////////////////////////
var _CHARTS = {
  "pie" : {
    "icon"  : "im-pie-chart",
    "tip" : "i18n:chart-pie",
    "comPath" : "@com:ti/chart/raw/pie",
    "comType" : "TiChartRawPie",
    "comConf" : {}
  },
  "bar" : {
    "icon"  : "im-bar-chart",
    "tip" : "i18n:chart-bar",
    "comPath" : "@com:ti/chart/raw/bar",
    "comType" : "TiChartRawBar",
    "comConf" : {}
  },
  "line" : {
    "icon"  : "im-line-chart-up",
    "tip" : "i18n:chart-line",
    "comPath" : "@com:ti/chart/raw/line",
    "comType" : "TiChartRawLine",
    "comConf" : {}
  },
  "rank" : {
    "icon"  : "zmdi-sort-amount-desc",
    "tip" : "i18n:chart-rank",
    "comPath" : "@com:ti/chart/raw/rank",
    "comType" : "TiChartRawRank",
    "comConf" : {}
  }
}
//////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data: ()=>({
    myActionStatus : {
      reloading : false,
      force : false
    },
    myChartCom : undefined
  }),
  ////////////////////////////////////////////////////
  props : {
    // array -> droplist
    // object/string -> single title
    "nameList" : {
      type : Array,
      default : ()=>[]
    },
    "name" : {
      type : String,
      default : undefined
    },
    "date" : {
      type : [Number, String, Date],
      default : undefined
    },
    "maxDate" : {
      type : [Number, String, Date],
      default : undefined
    },
    "span" : {
      type : String,
      default : "7d"
    },
    "spanOptions" : {
      type : Array,
      default : ()=>[{
        text  : "7",
        value : "7d"
      }, {
        text  : "30",
        value : "30d"
      }, {
        text  : "60",
        value : "60d"
      }, {
        text  : "90",
        value : "90d"
      }]
    },
    "chartDefines" : {
      type : Object,
      default : undefined
    },
    "chartTypes" : {
      type : [Array, String],
      default : "pie,bar,line"
    },
    "type" : {
      type : String,
      default : undefined
    },
    // {pie:{..}, bar:{..}, line:{..}  ...}
    "chartOptions" : {
      type : Object,
      default : ()=>({})
    },
    "data" : {
      type : Array,
      default : ()=>[]
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //------------------------------------------------
    hasChartCom() {
      return this.myChartCom && this.myChartCom.comType
        ? true
        : false
    },
    //------------------------------------------------
    hasMultiChartNames() {
      return !_.isEmpty(this.nameList) && this.nameList.length > 1
    },
    //------------------------------------------------
    ChartNameListOptions() {
      return {
        prefixIconForClean : false,
        keepWidthWhenDrop : true,
        hover: "suffixIcon",
        valueBy : "name",
        textBy  : "title",
        dropDisplay : "title"
      }
    },
    //------------------------------------------------
    ChartTitle() {
      if(!_.isEmpty(this.nameList)){
        for(let li of this.nameList) {
          if(li.name == this.name) {
            return li.title
          }
        }
      }
      return this.name
    },
    //------------------------------------------------
    HeadActionBarItems() {
      return [{
        "name"  : "reloading",
        "type" : "action",
        "icon" : "zmdi-refresh",
        "text" : "i18n:refresh",
        "altDisplay" : {
          "icon" : "zmdi-refresh zmdi-hc-spin",
          "text" : "i18n:loading"
        },
        "action" : ()=> this.reloadData(false),
      }, {
        "type" : "group",
        "icon" : "im-menu-dot-v",
        "items" : [{
            "name"  : "forceReloading",
            "type" : "action",
            "icon" : "im-reset",
            "text" : "i18n:refresh-hard",
            "altDisplay" : {
              "icon" : "zmdi-refresh zmdi-hc-spin",
              "text" : "i18n:loading",
              "match" : {
                "reloading" : true,
                "force" : true
              }
            },
            "action" : ()=> this.reloadData(true),
          }, {
            "name"  : "forceClearReloading",
            "type" : "action",
            "icon" : "im-reset",
            "text" : "i18n:refresh-hard-clear",
            "altDisplay" : {
              "icon" : "zmdi-refresh zmdi-hc-spin",
              "text" : "i18n:loading",
              "match" : {
                "reloading" : true,
                "force" : true
              }
            },
            "action" : ()=> this.reloadData(true, true),
          }]
      }]
    },
    //------------------------------------------------
    TheDate() {
      let d = Ti.DateTime.moveDate(new Date(), -1)
      if(this.date) {
        d = Ti.DateTime.parse(this.date)
      }
      return Ti.DateTime.format(d, "yyyy-MM-dd")
    },
    //------------------------------------------------
    TheMaxDate() {
      let d = Ti.DateTime.moveDate(new Date(), -1)
      if(this.maxDate) {
        d = Ti.DateTime.parse(this.maxDate)
      }
      return d
    },
    //------------------------------------------------
    TheSpan() {
      return this.span || "7d"
    },
    //------------------------------------------------
    DateRangeText() {
      // Prepare the text
      let str = []

      // Get date
      let d = this.TheDate;
      str.push(Ti.DateTime.format(d, "yyyy-MM-dd"))

      // Get span
      let m = /^(\d+)([smhdw])?$/.exec(this.TheSpan)
      if(m) {
        let val = parseInt(m[1])
        let unitText = ({
          "w"  : "dt-u-week",
          "d"  : "dt-u-day",
          "h"  : "dt-u-hour",
          "m"  : "dt-u-min",
          "s"  : "dt-u-sec",
          "ms" : "dt-u-ms"
        })[m[2] || "ms"]
        let s = `${val}${Ti.I18n.get(unitText)}`
        str.push(Ti.I18n.getf("dt-in", {val:s}))
      }

      return str.join(" ")
    },
    //------------------------------------------------
    hasMultiChartTypes() {
      return !_.isEmpty(this.chartTypes) && this.chartTypes.length > 0
    },
    //------------------------------------------------
    ChartTypeList() {
      let types = this.chartTypes
      if(_.isString(types)) {
        types = Ti.S.toArray(types)
      }
      let list = []
      for(let type of types) {
        let li =this.loadChartDefine(type)
        if(li) {
          li.value = type
          list.push(li)
        }
      }
      return list
    },
    //------------------------------------------------
    ChartType() {
      if(this.type)
        return this.type
      
      if(!_.isEmpty(this.chartTypes))
        return _.first(this.ChartTypeList).value
      
      return undefined
    },
    //------------------------------------------------
    ChartData() {
      return this.data || []
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnChartNameChange(name) {
      this.$notify("change:chart:name", name)
    },
    //------------------------------------------------
    OnChartTypeChange(name) {
      this.$notify("change:chart:type", name)
    },
    //------------------------------------------------
    async OnPickDateRange() {
      // Open the form dialog
      let reo = await Ti.App.Open({
        title : "i18n:edit",
        width  : "5rem",
        height : "5rem",
        result : {
          date : this.TheDate,
          span : this.TheSpan
        },
        model : {prop:"data", event:"change"},
        comType : "TiForm",
        comConf : [{
          fields : [{
              title : "i18n:stat-date-at",
              name  : "date",
              comType : "TiInputDate",
              comConf : {}
            }, {
              title : "i18n:stat-date-span",
              name  : "span",
              tip   : "i18n:dt-u-day",
              width : "auto",
              comType : "TiSwitcher",
              comConf : {
                options : this.spanOptions
              }
            }]
        }]
      })

      // User Cancel
      if(!reo || !reo.date)
        return

      // Invalid date
      let d = Ti.DateTime.parse(reo.date)
      if(d.getTime() > this.TheMaxDate.getTime()) {
        return await Ti.Toast.Open("i18n:stat-date-at-oor", "warn")
      }

      this.$notify("change:chart:datespan", {
        date : reo.date,
        span : reo.span
      })
    },
    //------------------------------------------------
    loadChartDefine(type) {
      let chart = _.get(this.chartDefines, type)

      if(!chart) {
        chart = _.get(_CHARTS, type)
      }

      if(chart) {
        return _.cloneDeep(chart)
      }
    },
    //------------------------------------------------
    reloadData(force=false, cleanCache=false) {
      this.myActionStatus = {reloading:true,  force}
      this.$notify("reload:data", {
        force, cleanCache, 
        done: ()=>{
          this.myActionStatus = {}
        }
      })
    },
    ////////////////////////////////////////////////////
    async reloadChartCom(type=this.type) {
      let chart = this.loadChartDefine(type)
      if(!chart) {
        console.warn(`Fail to reloadChartCom by type : "${type}"`)
        return
      }

      // Load chart com
      await Ti.App(this).loadView({
        comType : chart.comPath
      })

      console.log({type, chart})
      // Eval The Chart Com
      let comType = chart.comType
      let comConf = _.assign({}, 
          chart.comConf, 
          _.get(this.chartOptions, this.type))

      // Assign com
      this.myChartCom = {comType, comConf}
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    "type" : {
      handler : "reloadChartCom",
      immediate : true
    },
    "name" : function() {
      this.reloadChartCom()
    }
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-obj-json.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/json/wn-obj-json.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////
  props : {
    "meta" : {
      type : Object,
      default : ()=>({})
    },
    "value" : {
      type: String,
      default: null
    },
    "status" : {
      type : Object,
      default : ()=>({})
    }
  },
  ////////////////////////////////////////////
  computed : {
    //----------------------------------------
    hasMeta() {
      return this.meta ? true : false
    }
    //----------------------------------------
  },
  ////////////////////////////////////////////
  methods : {
    onChangeContent(newData) {
      this.$notify("change", newData)
    }
  },
  ////////////////////////////////////////////
  mounted : function(){
    //----------------------------------------
    Ti.Fuse.getOrCreate().add({
      key : "wn-obj-json",
      everythingOk : ()=>{
        return !this.status.changed
      },
      fail : ()=>{
        Ti.Toast.Open("i18n:wn-obj-nosaved", "warn")
      }
    })
    //----------------------------------------
  },
  ////////////////////////////////////////////
  beforeDestroy : function(){
    Ti.Fuse.get().remove("wn-obj-json")
  }
  ////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'm-obj-meta-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/obj-meta/m-obj-meta-actions.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //--------------------------------------------
  async updateMeta({state, commit}, {name, value}={}) {
    //console.log("I am update", name, value)
    let data = Ti.Types.toObjByPair({name, value})

    // Check Necessary
    if(_.isMatchWith(state.meta, data, _.isEqual)) {
      return
    }

    // Do the update
    commit("setStatus", {saving:true})
    commit("setFieldStatus", {name, status:"spinning"})
    let json = JSON.stringify(data)
    let oid = state.meta.id
    let cmdText = `obj 'id:${oid}' -ocqn -u`
    let newMeta = await Wn.Sys.exec2(cmdText, {input:json, as:"json"})

    commit("setMeta", newMeta)
    commit("clearFieldStatus", name)
    commit("setStatus", {saving:false})

    return newMeta
  },
  //--------------------------------------------
  /***
   * Get obj by ID
   */
  async loadMetaById({dispatch}, id) {
    dispatch("loadMeta", `id:${id}`)
  },
  //--------------------------------------------
  /***
   * Get obj meta by path string
   */
  async loadMeta({state, commit}, str){
    // If wihtout ID reset
    if(!str) {
      commit("reset")
    }
    // Load from server
    else {
      commit("setStatus", {reloading:true})
      let meta = await Wn.Io.loadMeta(str)
      commit("setMeta", meta)
      commit("setStatus", {reloading:false})
    }
  },
  //--------------------------------------------
  /***
   * Get obj ancestors by meta
   */
  async loadAncestors({state, commit}, meta=state.meta) {
    commit("setStatus", {reloading:true})
    let ancestors = await Wn.Io.loadAncestors("id:"+meta.id)
    let parent = _.last(ancestors)
    commit("setMeta", meta)
    commit("setParent", parent)
    commit("setAncestors", ancestors)
    commit("setStatus", {reloading:false})
  },
  //--------------------------------------------
  /***
   * Load obj meta/ancestors/children/content
   * 
   * @param str{String|Object} : string as the path,
   *        object is the meta
   */
  async reload({state, dispatch}, str) {
    if(_.isString(str)) {
      await dispatch("loadMeta", str)
      await dispatch("loadAncestors")
    }
    // Object as the meta object
    else if(_.isPlainObject(str)) {
      await dispatch("loadAncestors", str)
    }
    // return the curent meta anyway
    return state.meta
  }
  //--------------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'mod-address-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/lib/www/mod/auth/mod-address-actions.mjs'] = (function(){
const _M = {
  //--------------------------------------------
  async reloadMyAddresses({state, commit, getters}){
    let url = getters.urls.addr_mine

    commit("setLoading", true, {root:true})
    let reo = await Ti.Http.get(url, {
      params: {
        ticket: state.ticket 
      },
      as:"json"
    })
    commit("setLoading", false, {root:true})
    commit("setAddresses", reo)
  },
  //--------------------------------------------
  async editOrCreateAddress({state, getters, commit, dispatch}, addr={}) {
    //console.log("openAddressEditor", addr)
    // Pick the data
    let result = _.pick(addr, 
        "id", "country", "code",
        "province", "city", "area", "street", "door", "dftaddr",
        "consignee", "phone", "email")
    // Add Default Value
    _.defaults(result, {
      country : "CN",
      tp : "U",
      dftaddr : false
    })

    // Prepare the Edit form
    let newAddr = await Ti.App.Open({
      title: "i18n:edit",
      position: "top",
      width: 640,
      height: "90%",
      result: result,
      comType: "TiForm",
      comConf: {
        onlyFields: false,
        data: "=result",
        fields: [{
            "title"   : "i18n:address-k-country",
            "name"    : "country",
            "comType" : "ti-combo-input",
            "comConf" : {
              "mustInList": true,
              "autoCollapse": true,
              "valueCase": "upper",
              "dropDisplay": "name",
              "options": state.countries,
              "valueBy": "key",
              "textBy" : "name"
            }
          },{
            "title"   : "i18n:address-k-code",
            "name"    : "code",
            "tip"     : "i18n:address-k-code-tip",
            "comType" : "ti-input",
            "comConf" : {
              "valueCase": "upper"
            }
          },{
            "title"   : "i18n:address-k-province",
            "name"    : "province",
            "comType" : "ti-input"
          },{
            "title"   : "i18n:address-k-city",
            "name"    : "city",
            "comType" : "ti-input"
          },{
            "title"   : "i18n:address-k-area",
            "name"    : "area",
            "comType" : "ti-input"
          },{
            "title"   : "i18n:address-k-street",
            "name"    : "street",
            "comType" : "ti-input"
          },{
            "title"   : "i18n:address-k-door",
            "name"    : "door",
            "comType" : "ti-input"
          },{
            "title"   : "i18n:address-k-dftaddr",
            "name"    : "dftaddr",
            "type"    : "Boolean",
            "comType" : "ti-toggle"
          },{
            "title"   : "i18n:address-k-consignee",
            "name"    : "consignee",
            "comType" : "ti-input"
          },{
            "title"   : "i18n:address-k-phone",
            "name"    : "phone",
            "comType" : "ti-input"
          },{
            "title"   : "i18n:address-k-email",
            "name"    : "email",
            "comType" : "ti-input"
          }]
      }
    })
    // User cancel
    if(_.isUndefined(newAddr)) {
      return
    }

    // No change
    if(_.isEqual(newAddr, result)) {
      return
    }

    console.log("!!!", newAddr)
    // Eval the url
    let url;
    // Create
    if(!newAddr.id) {
      url = getters.urls.addr_create
    }
    // Update
    else {
      url = getters.urls.addr_update
    }

    // Prepare http options
    let params = {
      ticket: state.ticket,
      id: newAddr.id
    }
    let body = JSON.stringify(newAddr)

    commit("setLoading", true, {root:true})

    // Send request
    await Ti.Http.post(url, {
      params, body, as:"json"
    })

    // Then reload
    await dispatch("reloadMyAddresses")

    commit("setLoading", false, {root:true})
  },
  //--------------------------------------------
  async removeAddress({state, commit, getters, dispatch}, {id}={}){
    // Guard
    if(!id) {
      return
    }

    // Confirm
    if(!(await Ti.Confirm("i18n:address-rm-confirm"))) {
      return
    }

    commit("setLoading", true, {root:true})

    // Process delete
    let url = getters.urls.addr_delete
    await Ti.Http.get(url, {
      params: {
        ticket: state.ticket,
        id: id
      },
      as:"json"
    })
    
    // Then reload
    await dispatch("reloadMyAddresses")

    commit("setLoading", false, {root:true})
  },
  //--------------------------------------------
  async setAddressDefault({state, commit, getters, dispatch}, {id}={}){
    // Guard
    if(!id) {
      return
    }

    // Process delete
    let url = getters.urls.addr_update
    // Prepare http options
    let params = {
      ticket: state.ticket,
      id: id
    }
    let body = JSON.stringify({dftaddr:true})

    commit("setLoading", true, {root:true})

    // Send request
    await Ti.Http.post(url, {
      params, body, as:"json"
    })
    
    // Then reload
    await dispatch("reloadMyAddresses")

    commit("setLoading", false, {root:true})
  },
  //--------------------------------------------
  async initCountries({state, getters, commit}) {
    if(!state.countries) {
      let url = getters.urls.countries
      let reo = await Ti.Http.get(url, {as:"json"})
      commit("setCountries", reo)
    }
  }
  //--------------------------------------------
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-table-quick-action.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/table/quick/ti-table-quick-action.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------------------
  OnClickRow(row, $event) {
    let rowId  = row.id
    let shift  = $event.shiftKey
    let toggle = ($event.ctrlKey || $event.metaKey)
    // Multi + Shift Mode
    if(shift && this.multi) {
      this.selectRowsToCurrent(rowId)
    }
    // Multi + Toggle Mode
    else if(toggle && this.multi) {
      this.toggleRow(rowId)
    }
    // Toggle Mode
    else if(!Ti.Util.isNil(rowId) && !this.autoCheckCurrent) {
      this.toggleRow(rowId)
    }
    // Single Mode
    else {
      this.selectRow(rowId)
    }
  },
  //-----------------------------------------------
  OnClickRowChecker(row, $event) {
    let rowId  = row.id
    let shift  = $event.shiftKey
    console.log("haha")
    if(this.multi) {
      // Shift Mode
      if(shift) {
        this.selectRowsToCurrent(rowId)
      }
      // Simple Toggle Mode
      else {
        this.toggleRow(rowId)
      }
    }
    // Single Mode
    else {
      this.selectRow(rowId)
    }
  },
  //--------------------------------------
  OnClickHeadChecker() {
    console.log("hahaha")
    // Cancel All
    if(this.isAllChecked) {
      this.cancelRow()
    }
    // Check All
    else {
      this.checkRow()
    }
  },
  //-----------------------------------------------
  // Publis methods
  //-----------------------------------------------
  toggleRow(rowId) {
    if(this.myCheckedIds[rowId]) {
      this.cancelRow(rowId)
    } else {
      this.checkRow(rowId)
    }
  },
  canSelectRow(payload) {
    if(_.isFunction(this.onBeforeChangeSelect)) {
      let canSelect = this.onBeforeChangeSelect(payload)
      if(false === canSelect) {
        return false
      }
    }
    return true
  },
  //-----------------------------------------------
  checkRow(rowId) {
    let idMap = _.cloneDeep(this.myCheckedIds)
    let curId = this.myCurrentId
    let index = this.myLastIndex
    let rowIndex = this.findRowIndexById(rowId)
    // All rows
    if(_.isUndefined(rowId)) {
      idMap = {}
      _.forEach(this.TableData, (row)=>{
        idMap[row.id] = true
      })
    }
    // Multi rows
    else if(_.isArray(rowId)) {
      let lastRowId = _.last(rowId)
      _.forEach(rowId, (r_id)=>{
        idMap[r_id] = true
      })
      if(this.autoCheckCurrent) {
        index = this.findRowIndexById(lastRowId)
      }
    }
    // Object
    else if(_.isPlainObject(rowId)) {
      idMap = _.cloneDeep(rowId)
      if(this.autoCheckCurrent) {
        let lastRowId = undefined
        for(let key in idMap) {
          lastRowId = key
          break;
        }
        index = this.findRowIndexById(lastRowId)
      }
    }
    // Single row
    else {
      idMap[rowId] = true
      if(this.autoCheckCurrent) {
        index = rowIndex
      }
    }
    // Eval context
    let emitContext = this.getEmitContext(curId, idMap)
    // Private Mode
    this.myCheckedIds = idMap
    this.myCurrentId  = curId
    this.myLastIndex  = rowIndex
    // Notify Changes
    this.doNotifySelect(emitContext)
  },
  //-----------------------------------------------
  async cancelRow(rowId) {
    let idMap = _.cloneDeep(this.myCheckedIds)
    let curId  = this.myCurrentId
    let index = -1
    //console.log("cancelRow", rowId)
    if(_.isUndefined(rowId)) {
      idMap = {}
      curId = null
    }
    // Single row
    else {
      index = this.findRowIndexById(rowId)
      idMap[rowId] = false
      if(this.autoCheckCurrent && curId == rowId) {
        curId = null
      }
    }
    // Eval context
    let emitContext = this.getEmitContext(curId, idMap)

    if(!(await this.canSelectRow(emitContext))) {
      return;
    }

    // Private Mode
    this.myCheckedIds = idMap
    this.myCurrentId  = curId
    this.myLastIndex  = index
    // Notify Changes
    this.doNotifySelect(emitContext)
  },
  //-----------------------------------------------
  selectRow(rowId, {quiet=false, payload}={}) {
    let idMap = {}
    let curId = null
    // Change the current & checked
    if(this.autoCheckCurrent) {
      idMap = rowId ? {[rowId]:true} : {}
      curId = rowId || null
    }
    // Just change to current
    else {
      idMap = _.cloneDeep(this.myCheckedIds)
      curId = rowId
    }

    let emitContext = this.getEmitContext(curId, idMap)

    if(!(this.canSelectRow(emitContext))) {
      return;
    }

    this.myCheckedIds = idMap
    this.myCurrentId  = curId
    this.myLastIndex  = this.findRowIndexById(rowId)
    // Notify Changes
    if(!quiet) {
      _.defaults(emitContext, payload)
      this.doNotifySelect(emitContext)
    }
  },
  //-----------------------------------------------
  selectRowByIndex(rowIndex, options) {
    //console.log(rowIndex)
    let index = rowIndex
    if(this.scrollIndex) {
      index = Ti.Num.scrollIndex(rowIndex, this.TableData.length)
    }
    if(_.inRange(index, 0, this.TableData.length)) {
      let row = this.TableData[index]
      this.selectRow(row.id, options)
    }
  },
  //-----------------------------------------------
  selectPrevRow(options) {
    this.selectRowByIndex(Math.max(-1, this.myLastIndex-1), options)
  },
  //-----------------------------------------------
  selectNextRow(options) {
    this.selectRowByIndex(this.myLastIndex+1, options)
  },
  //-----------------------------------------------
  selectRowsToCurrent(rowId) {
    let idMap = _.cloneDeep(this.myCheckedIds)
    let curId = this.myCurrentId
    let index = this.findRowIndexById(rowId)
    if(index >= 0) {
      let fromIndex = Math.min(index, this.myLastIndex)
      let toIndex   = Math.max(index, this.myLastIndex)
      if(fromIndex < 0) {
        fromIndex = 0
      }
      for(let i=fromIndex; i<=toIndex; i++) {
        let row = this.TableData[i]
        idMap[row.id] = true
      }
      // Eval context
      let emitContext = this.getEmitContext(curId, idMap)
      // Private Mode
      if(!this.puppetMode) {
        this.myCheckedIds = idMap
        this.myCurrentId  = curId
      }
      this.myLastIndex  = index
      // Notify Changes
      this.doNotifySelect(emitContext)
    }
  },
  //-----------------------------------------------
  getEmitContext(
    currentId, 
    checkedIds={}
  ) {
    let checked = []
    let current = null
    let currentIndex = -1
    for(let row of this.TableData) {
      if(row.id == currentId) {
        current = row.rawData
        currentIndex = row.index
      }
      if(checkedIds[row.id]) {
        checked.push(row.rawData)
      }
    }
    return {
      current, currentId, currentIndex,
      checked, checkedIds
    }
  },
  //-----------------------------------------------
  doNotifySelect(emitContext) {
    this.$notify("select", emitContext)
    if(_.isFunction(this.onSelect)) {
      this.onSelect(emitContext)
    }
  }
  //-----------------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-combo-multi-input.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/multi-input/ti-combo-multi-input.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    myDropStatus   : "collapse",
    myTags         : [],
    myFreeValues   : [],
    myFilterValue  : null,
    myOptionsData  : [],
    myCurrentId    : null,
    myCheckedIds   : {},

    myOldValue : undefined,
    myDict : undefined,
    loading : false
  }),
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    isCollapse() {return "collapse"==this.myDropStatus},
    isExtended() {return "extended"==this.myDropStatus},
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    Values() {
      return Ti.S.toArray(this.value)
    },
    //------------------------------------------------
    InputTagValues() {
      return _.concat(this.myTags, this.myFreeValues)
    },
    //------------------------------------------------
    GetValueBy() {
      return it => this.Dict.getValue(it)
    },
    //------------------------------------------------
    TheSuffixIcon() {
      return this.statusIcons[this.myDropStatus]
    },
    //------------------------------------------------
    DropComType() {return this.dropComType || "ti-list"},
    DropComConf() {
      return _.assign({
        display    : this.dropDisplay || "text",
        border     : this.dropItemBorder
      }, this.dropComConf, {
        data : this.myOptionsData,
        currentId  : this.myCurrentId,
        checkedIds : this.myCheckedIds,
        idBy       : this.GetValueBy,
        multi      : true,
        hoverable  : true,
        checkable  : true,
        autoCheckCurrent : false
      })
    },
    //------------------------------------------------
    Dict() {
      if(!this.myDict) {
        this.myDict = this.createDict()
      }
      return this.myDict
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnDropListInit($dropList){this.$dropList=$dropList},
    //------------------------------------------------
    async OnCollapse() {this.doCollapse()},
    //------------------------------------------------
    OnInputInputing(val) {
      if(this.filter) {
        this.myFilterValue = val
        this.debReload()
      }
    },
    //------------------------------------------------
    async OnInputChanged(val) {
      // Clean filter
      this.myFilterValue = null
      // Uniq 
      if(this.valueUnique) {
        if(_.indexOf(this.myFreeValues, val)>=0) {
          return
        }
        for(let tag of this.myTags) {
          let tagV = this.Dict.getValue(tag)
          if(tagV == val) {
            return
          }
        }
      }
      // Join to ...
      let it = await this.Dict.getItem(val)
      // Matched tag
      if(it) {
        this.myTags.push(it)
      }
      // Join to free value
      else if(val && !this.mustInList) {
        this.myFreeValues.push(val)
      }
      this.tryNotifyChanged()
    },
    //-----------------------------------------------
    async OnInputFocused() {
      if(this.autoFocusExtended && !this.isExtended) {
        await this.doExtend()
      }
    },
    //-----------------------------------------------
    async OnTagListChanged(vals=[]) {
      await this.evalMyTags(vals)
      this.tryNotifyChanged()
    },
    //-----------------------------------------------
    async OnClickStatusIcon() {
      if(this.isExtended) {
        this.doCollapse()
      } else {
        await this.doExtend()
      }
    },
    //-----------------------------------------------
    async OnDropListSelected({currentId, checkedIds}={}) {
      this.myCurrentId = currentId
      this.myCheckedIds = checkedIds

      let vals = Ti.Util.truthyKeys(checkedIds)
      await this.evalMyTags(_.concat(vals, this.myFreeValues))
      this.tryNotifyChanged()
    },
    //-----------------------------------------------
    // Core Methods
    //-----------------------------------------------
    async doExtend() {
      this.myOldValue = this.evalMyValues()
      // Try reload options again
      if(_.isEmpty(this.myOptionsData)) {
        await this.reloadMyOptionData(true)
      }
      this.$nextTick(()=>{
        this.myDropStatus = "extended"
      })
    },
    //-----------------------------------------------
    doCollapse({escaped=false}={}) {
      if(escaped) {
        this.$notify("change", this.myOldValue)
      }
      this.myDropStatus = "collapse"
      this.myOldValue   = undefined
    },
    //-----------------------------------------------
    tryNotifyChanged(escaped=false) {
      let vals = this.evalMyValues()
      if(!escaped && !_.isEqual(vals, this.Values)) {
        this.$notify("change", vals)
      }
    },
    //-----------------------------------------------
    // Utility
    //-----------------------------------------------
    evalMyValues(tags=this.myTags, freeValues=this.myFreeValues) {
      let vals = []
      // Tags
      _.forEach(tags, tag => {
        let v = this.Dict.getValue(tag)
        if(!Ti.Util.isNil(v)) {
          vals.push(v)
        } else if (!this.mustInList) {
          vals.push(tag)
        }
      })
      // Ignore free values
      if(this.mustInList || _.isEmpty(freeValues)) {
        return vals
      }
      // Join free values
      return _.concat(vals, freeValues)
    },
    //-----------------------------------------------
    async evalMyTags(vals=this.value) {
      vals = Ti.S.toArray(vals)
      let tags  = []
      let ids   = {}
      let frees = []
      for(let v of vals) {
        let tag = await this.Dict.getItem(v)
        if(tag) {
          tags.push(tag)
          ids[v] = true
        } else {
          frees.push(v)
        }
      }
      this.myTags = tags
      this.myFreeValues = frees
      this.myCheckedIds = ids
    },
    //------------------------------------------------
    createDict() {
      // Customized
      if(this.options instanceof Ti.Dict) {
        return this.options
      }
      // Refer dict
      if(_.isString(this.options)) {
        let dictName = Ti.DictFactory.DictReferName(this.options)
        if(dictName) {
          return Ti.DictFactory.CheckDict(dictName, ({loading}) => {
            this.loading = loading
          })
        }
      }
      // Auto Create
      return Ti.DictFactory.CreateDict({
        data : this.options,
        getValue : Ti.Util.genGetter(this.valueBy || "value"),
        getText  : Ti.Util.genGetter(this.textBy  || "text|name"),
        getIcon  : Ti.Util.genGetter(this.iconBy  || "icon")
      })
    },
    //-----------------------------------------------
    async reloadMyOptionData(force=false) {
      if(force || this.isExtended) {
        this.myOptionsData = await this.Dict.queryData(this.myFilterValue)
      } else {
        this.myOptionsData = []
      }
    },
    //-----------------------------------------------
    // Callback
    //-----------------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("ti-combo-multi-input", uniqKey)
      //....................................
      if("ESCAPE" == uniqKey) {
        this.doCollapse({escaped:true})
        return {prevent:true, stop:true, quit:true}
      }
      //....................................
      // If droplist is actived, should collapse it
      if("ENTER" == uniqKey) {
        if(this.$dropList && this.$dropList.isActived) {
          this.doCollapse()
          return {stop:true, quit:true}
        }
      }
      //....................................
      if("ARROWUP" == uniqKey) {
        if(this.$dropList) {
          this.$dropList.selectPrevRow({
            payload: {byKeyboardArrow: true}
          })
        }
        return {prevent:true, stop:true, quit:true}
      }
      //....................................
      if("ARROWDOWN" == uniqKey) {
        if(this.$dropList && this.isExtended) {
          this.$dropList.selectNextRow({
            payload: {byKeyboardArrow: true}
          })
        } else {
          this.doExtend()
        }
        return {prevent:true, stop:true, quit:true}
      }
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    //-----------------------------------------------
    "value" : {
      handler: "evalMyTags",
      immediate : true
    },
    //-----------------------------------------------
    "options" : function(newval, oldval) {
      if(!_.isEqual(newval, oldval)) {
        this.myDict = this.createDict()
        this.myOptionsData = []
        if(this.isExtended) {
          this.$nextTick(()=>{
            this.reloadMyOptionData(true)
          })
        }
      }
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  created : function() {
    this.debReload = _.debounce(val=>{
      this.reloadMyOptionData()
    }, this.delay)
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'list-row.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/list/com/list-row/list-row.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  ///////////////////////////////////////////////////
  data : ()=>({
    myDisplayItems : []
  }),
  ///////////////////////////////////////////////////
  props : {
    "indent" : {
      type : Number,
      default : 0
    },
    "icon" : {
      type : [Boolean, String],
      default : null
    },
    "display" : {
      type : Array,
      default : ()=>[]
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    TopClass() {
      return this.getListItemClass(`row-indent-${this.indent}`)
    },
    //-----------------------------------------------
    hasRealIcon() {
      return this.icon && _.isString(this.icon)
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    async evalMyDisplayItems() {
      let items = []
      // if(this.data && this.data.title && this.data.type) {
      //   console.log("evalCellDisplayItems", this.data)
      // }
      // Eval each items
      for(let displayItem of this.display) {
        let it = await this.evalDataForFieldDisplayItem({
            itemData : this.data, 
            displayItem, 
            vars : {
              "isCurrent" : this.isCurrent,
              "isChecked" : this.isChecked,
              "isChanged" : this.isChanged,
              "isActived" : this.isActived,
              "rowId"     : this.rowId
            }
        })
        if(it) {
          items.push(it)
        }
      }
      // Update and return
      this.myDisplayItems = items
    },
    //-----------------------------------------------
    onItemChanged({name,value}={}) {
      this.$notify("item:changed", {
        name, value,
        rowId : this.rowId,
        data  : this.data
      })
    },
    //-----------------------------------------------
    OnClickIcon($event) {
      this.$notify("icon", {
        rowId  : this.rowId,
        shift  : $event.shiftKey,
        toggle : ($event.ctrlKey || $event.metaKey)
      })
    },
    //--------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("ti-list-row", uniqKey)
      if(!_.isEmpty(this.rowToggleKey)){
        if(this.isRowToggleKey(uniqKey)) {
          this.onClickChecker({})
          return {prevent:true, stop:true, quit:true}
        }
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "display" : function() {
      this.evalMyDisplayItems()
    },
    "data" : function() {
      //console.log("data changed")
      this.evalMyDisplayItems()
    },
    "isCurrent" : function() {
      this.evalMyDisplayItems()
    },
    "isChecked" : function() {
      this.evalMyDisplayItems()
    }
  },
  ///////////////////////////////////////////////////
  mounted : function() {
    this.evalMyDisplayItems()
  }
  ///////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-time.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/time/ti-time.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  props : {
    "value" : {
      type : [String, Number, Date, Ti.Types.Time],
      default : null
    },
    /***
     * Value unit when value is Number
     */
    "valueUnit" : {
      type : String,
      default : "s",
      validator : function(unit) {
        return /^(ms|s|min|hr)$/.test(unit)
      }
    },
    // Display mode
    "mode" : {
      type : String,
      default : "auto",
      /***
       * - `sec`  : "HH:mm:ss"
       * - `min`  : "HH:mm"
       * - `auto` : "HH:mm:ss"
       */
      validator : function(unit) {
        return /^(sec|min|auto)$/.test(unit)
      }
    },
    // the height of drop list
    "width" : {
      type : [Number, String],
      default : null
    },
    // the height of drop list
    "height" : {
      type : [Number, String],
      default : 200
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    topStyle() {
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //------------------------------------------------
    theTime() {
      return Ti.Types.toTime(this.value||0, {
        unit: this.valueUnit
      })
    },
    //------------------------------------------------
    theListGroup() {
      let re = [
        this.createList("hours",   0, 24, this.theTime.hours),
        this.createList("minutes", 0, 60, this.theTime.minutes)
      ]
      if(/^(auto|sec)$/.test(this.mode)) {
        re.push(this.createList("seconds", 0, 60, this.theTime.seconds))
      }
      return re
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    createList(key, fromVal, toVal, currentVal=0) {
      let list = {
        key,
        currentId : `R-${currentVal}`,
        data    : []
      }
      for(let i=fromVal; i<toVal; i++) {
        list.data.push({
          id : `R-${i}`,
          value : i,
          text  : _.padStart(i, 2, '0')
        })
      }
      return list
    },
    //------------------------------------------------
    onListSelected(key, {current}={}) {
      let tm = this.theTime.clone()
      tm[key] = _.get(current, "value") || 0
      this.$notify("change", tm)
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-thing-manager.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/thing/manager/wn-thing-manager.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////
  provide : function() {
    return {
      $ThingManager : this
    }
  },
  ///////////////////////////////////////////
  data: ()=>({
    "myRouting": {}
  }),
  ///////////////////////////////////////////
  props : {
    // Thing Set Home
    "meta" : {
      type : Object,
      default : ()=>({})
    },
    "currentDataHome" : {
      type : String,
      default : undefined
    },
    "currentDataHomeObj" : {
      type : Object,
      default : undefined
    },
    "currentDataDir" : {
      type : String,
      default : undefined
    },
    "status" : {
      type : Object,
      default : ()=>({})
    },
    "config" : {
      type : Object,
      default : ()=>({})
    },
    "search" : {
      type : Object,
      default : ()=>({})
    },
    "current" : {
      type : Object,
      default : ()=>({})
    },
    "files" : {
      type : Object,
      default : ()=>({})
    },
    "preview" : {
      type : Object,
      default : ()=>({})
    },
    "emitChange": {
      type : Boolean,
      default: false
    },
    "keepLastSelection": {
      type: Boolean,
      default: true
    }
  },
  ///////////////////////////////////////////
  computed : {
    ...Vuex.mapGetters("main/search", [
      "currentItem", 
      "checkedItems"
    ]),
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    TheShown() {
      return _.get(this.config, "shown") || {}
    },
    //--------------------------------------
    TheKeepLastKey() {
      if(this.keepLastSelection) {
        return _.get(this.meta, "id") + ":currentId";
      }
    },
    //--------------------------------------
    CurrentIsDead() {
      return -1 == _.get(this.current, "meta.th_live")
    },
    //--------------------------------------
    CurrentHeadClass() {
      if(this.CurrentIsDead) {
        return "current-in-recyclebin"
      }
    },
    //--------------------------------------
    TheLayout() {
      return Ti.Util.explainObj(this, this.config.layout)
    },
    //--------------------------------------
    TheSchema() {
      return Ti.Util.explainObj(this, this.config.schema)
    },
    //--------------------------------------
    TheLoadingAs() {
      return _.assign({
        "reloading" : {
          icon : "fas-spinner fa-spin",
          text : "i18n:loading"
        },
        "saving" : {
          icon : "zmdi-settings fa-spin",
          text : "i18n:saving"
        },
        "deleting" : {
          icon : "zmdi-refresh fa-spin",
          text : "i18n:del-ing"
        },
        "publishing" : {
          icon : "zmdi-settings zmdi-hc-spin",
          text : "i18n:publishing"
        },
        "restoring" : {
          icon : "zmdi-time-restore zmdi-hc-spin",
          text : "i18n:thing-restoring"
        },
        "cleaning" : {
          icon : "zmdi-settings zmdi-hc-spin",
          text : "i18n:thing-cleaning"
        }
      }, _.get(this.TheSchema, "loadingAs"))
    },
    //--------------------------------------
    ChangedRowId() {
      if(this.currentItem && this.current.status.changed) {
        return this.currentItem.id
      }
    },
    //--------------------------------------
    GuiLoadingAs() {
      let key = _.findKey(this.status, (v)=>v)
      return _.get(this.TheLoadingAs, key)
    },
    //--------------------------------------
    curentThumbTarget() {
      if(this.currentItem) {
        let th_set = this.meta.id
        return `id:${th_set}/data/${this.currentItem.id}/thumb.jpg`
      }
      return ""
    },
    //--------------------------------------
    SchemaMethods() {
      if(this.TheSchema && this.TheSchema.methods) {
        return Ti.Util.merge({}, this.TheSchema.methods)
      }
      return {}
    },
    //--------------------------------------
    EventRouting() {
      return _.assign({
        "block:show"      : "showBlock",
        "block:hide"      : "hideBlock",
        "block:shown"     : "changeShown",
        "filter::change"  : "OnFilterChange",
        "sorter::change"  : "OnSorterChange",
        "list::select"    : "OnListSelect",
        "list::open"      : "OnListOpen",
        "content::change" : "OnContentChange",
        "pager::change"   : "OnPagerChange"
      }, _.get(this.TheSchema, "events"), this.myRouting)
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  methods : {
    //--------------------------------------
    //
    //  Event handler
    //
    //--------------------------------------
    async OnFilterChange(filter) {
      Ti.App(this).commit("main/search/setFilter", filter)
      await Ti.App(this).dispatch("main/reloadSearch")
    },
    //--------------------------------------
    async OnSorterChange(sort={}) {
      Ti.App(this).commit("main/search/setSorter", sort)
      await Ti.App(this).dispatch("main/reloadSearch")
    },
    //--------------------------------------
    OnListSelect({current, currentId, checkedIds, checked}) {
      //console.log("OnListSelect", current)
      Ti.App(this).dispatch("main/setCurrentThing", {
        meta: current, 
        currentId,
        checkedIds
      })

      if(this.emitChange) {
        this.$emit("change", {current, currentId, checkedIds, checked})
      }
    },
    //--------------------------------------
    OnListOpen({rawData}) {
      let app = Ti.App(this)
      app.dispatch("main/config/updateShown", this.config.listOpen)
      // Update Current
      app.dispatch("main/setCurrentThing", {meta: rawData})
    },
    //--------------------------------------
    OnContentChange(content) {
      let app = Ti.App(this)
      app.dispatch("main/current/changeContent", content)
      app.commit("main/syncStatusChanged")
    },
    //--------------------------------------
    OnPagerChange({pn, pgsz}={}) {
      //console.log("OnPagerChange", {pn, pgsz})
      Ti.App(this).dispatch("main/search/reloadPage", {pn, pgsz})
    },
    //--------------------------------------
    OnViewCurrentSource() {
      this.viewCurrentSource()
    },
    //--------------------------------------
    //
    //  Utility
    //
    //--------------------------------------
    addEventRouting(eventName, handler) {
      this.$set(this.myRouting, eventName, handler)
    },
    removeEventRouting(...names) {
      let routing = _.omitBy(this.myRouting, (_, key)=>names.indexOf(key)>=0)
      this.myRouting = routing
    },
    //--------------------------------------
    //
    // Callback
    //
    //--------------------------------------
    // For Event Bubble Dispatching
    __on_events(name) {
      //console.log("__on_events", name)
      // Try to get handler
      let fn = _.get(this.EventRouting, name)
      if(!fn) {
        fn = this.$tiEventTryFallback(name, this.EventRouting)
      }

      // callPath -> Function
      if(_.isString(fn)) {
        return _.get(this, fn)
      }
      return fn
    },
    // Shortcut 
    __ti_shortcut(uniqKey) {
      //console.log("ti-form", uniqKey)
      if("ESCAPE" == uniqKey) {
        if(this.TheShown.creator) {
          this.hideBlock("creator")
        }
      }
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  mounted : function() {
    // Mark self in order to let `thing-files` set self
    // to root `wn-thing-manager` instance
    // then `openLocalFileSelectdDialogToUploadFiles`
    // can assess the `thing-files` instance directly.
    this.THING_MANAGER_ROOT = true

    // Update the customized actions
    let actions = _.get(this.config, "actions")
    if(_.isArray(actions)) {
      this.$notify("actions:update", actions)
    }
  }
  ///////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-table-quick.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/table/quick/ti-table-quick.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////
  data : ()=>({
    myLastIndex: -1,      // The last row index selected by user
    myCurrentId: null,    // Current row ID
    myCheckedIds: {}      // Which row has been checked
  }),
  ///////////////////////////////////////////////////
  // props -> ti-table-props.mjs
  ///////////////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-checkable"   : this.checkable,
        "is-selectable"  : this.selectable,
        "is-openable"    : this.openable,
        "is-cancelable"  : this.cancelable,
        "is-hoverable"   : this.hoverable
      }, [
        `is-border-${this.border}`
      ])
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    },
    //--------------------------------------
    /*
    [{
      index, id, className,
      cells : [{
          index, width, nowrap, className,
          checked, changed, current,
          items : [{
            index, type,
            className,    // <- getClassName
            value,        // <- getValue
            displayValue  // <- transformer | tidy
          }]
      }]
    }]
    */
    TableData() {
      let showNumber = _.isNumber(this.rowNumberBase)
      let base = showNumber ? this.rowNumberBase : -1
      let list = _.map(this.data, (obj, index) => {
        let id = this.getRowId(obj, index)
        if(Ti.Util.isNil(id)) {
          id = `Row-${index}`
        }
        let checked = !!this.myCheckedIds[id]
        let changed = (this.changedId == id)
        let current = (this.myCurrentId == id)
        let className = {
          "is-checked" : checked,
          "is-current" : current,
          "is-changed" : changed
        }
        
        let number;
        if(base >= 0) {
          number = base + index
        }

        let cells = _.map(this.TableFields, fld=>{
          let items = _.map(fld.display, ({
            index, type, getClassName, getValue, 
            transform, tidy
          })=>{
            let it = {index, type}
            // Item value
            it.value = getValue(obj)
            // ClassName
            if(getClassName) {
              it.className = getClassName(it.value)
            }
            // Transform
            let disval = it.value
            if(transform) {
              disval = transform(disval)
            }
            disval = tidy(disval)
            // Tidy value by types
            it.displayValue = disval
            // Done for item
            return it
          }) // End Items

          return {... fld, items}
        }) // End cells

        return {
          showNumber,
          number, index, 
          id, className, cells,
          checked, changed, current,
          rawData : obj
        }
      })

      return list
    },
    //-----------------------------------------------
    getRowId() {
      return Ti.Util.genRowIdGetter(this.idBy)
    },
    //-----------------------------------------------
    isDataEmpty() {
      return !_.isArray(this.TableData) || _.isEmpty(this.TableData)
    },
    //-----------------------------------------------
    isAllChecked() {
      // Empty list, nothing checked
      if(this.isDataEmpty) {
        return false 
      }
      if(_.size(this.myCheckedIds) != _.size(this.TableData)) {
        return false
      }
      // Checking ...
      for(let row of this.TableData){
        if(!this.myCheckedIds[row.id])
          return false;  
      }
      return true
    },
    //-----------------------------------------------
    hasChecked() {
      return !_.isEmpty(this.myCheckedIds)
    },
    //--------------------------------------
    HeadCheckerIcon() {
      if(this.isAllChecked) {
        return "fas-check-square"
      }
      if(this.hasChecked) {
        return "fas-minus-square"
      }
      return "far-square"
    },
    //--------------------------------------
    TableFields() {
      //....................................
      const evalFldDisplay = (dis={}, index)=>{
        if(_.isString(dis)) {
          dis = {key:dis}
        }
        let {key, type, className, transformer} = dis

        // Key
        let m = /^([\w\d_-]+)(\.([\w\d_-]+))?/.exec(key)
        if(m) {
          key = m[1]
          className = className || m[3]
        }

        // Default type as text
        type = type || "text"

        // Get value
        let getValue;
        if(".." == key){
          getValue = obj => obj
        } else if(_.isArray(key)) {
          getValue = obj => _.pick(obj, key)
        } else {
          getValue = obj => _.get(obj, key)
        }

        // ClassName
        let getClassName;
        if(_.isFunction(className)) {
          getClassName = className
        } else if(_.isString(className)) {
          getClassName = ()=>className
        } else if(className){
          let cans = []
          _.forEach(className, (key, val)=>{
            cans.push({
              className : key,
              match : Ti.AutoMatch.parse(val)
            })
          })
          getClassName = (val) => {
            for(let can of cans) {
              if(can.match(val))
                return can.className
            }
          }
        }

        // transformer
        let transFunc;
        if(transformer) {
          transFunc = Ti.Util.genInvoking(transformer, {
            context: this, 
            partial: "right"
          })
        }

        // Tidy Value by type
        let tidyFunc =({
          "text" : v => v,
          "icon" : v => Ti.Icons.parseFontIcon(v),
          "img"  : v => v
        })[type]

        if(!tidyFunc) {
          throw "Invalid display type: " + type
        }

        return {
          index, type, 
          getClassName, 
          getValue, 
          transform: transFunc,
          tidy: tidyFunc
        }
      }
      //....................................
      let fields = _.map(this.fields, (fld, index) => {
        let diss = [].concat(fld.display)
        let display = _.map(diss, (dis,index) => {
          return evalFldDisplay(dis, index)
        })
        return {
          ... fld,
          headStyle : Ti.Css.toStyle({
            width : fld.width
          }),
          index, display,
          className : {
            "is-nowrap" : fld.nowrap
          }
        }
      })
      //....................................
      return fields
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickTop($event) {
      if(this.cancelable) {
        // Click The body or top to cancel the row selection
        if(Ti.Dom.hasOneClass($event.target,
            'ti-table', 'table-body',
            'table-head-cell',
            'table-head-cell-text')) {
          this.cancelRow()
        }
      }
    },
    //--------------------------------------
    // Publish methods
    //--------------------------------------
    findRowIndexById(rowId) {
      for(let row of this.TableData) {
        if(row.id == rowId) {
          return row.index
        }
      }
      return -1
    },
    //--------------------------------------
    findRowById(rowId) {
      for(let row of this.TableData) {
        if(row.id == rowId) {
          return row
        }
      }
    },
    //--------------------------------------
    getRow(index=0) {
      return _.nth(this.TableData, index)
    },
    //--------------------------------------
    // Utility
    //--------------------------------------
    scrollCurrentIntoView() {
      //console.log("scrollCurrentIntoView", this.myLastIndex)
      if(this.autoScrollIntoView && this.myCurrentId) {
        let index = this.findRowIndexById(this.myCurrentId)
        //console.log("scroll", index)
        let $view = this.$el
        let $row  = Ti.Dom.find(`.table-row:nth-child(${index+1})`, $view)

        if(!_.isElement($view) || !_.isElement($row)) {
          return
        }

        let r_view = Ti.Rects.createBy($view)
        let r_row = Ti.Rects.createBy($row)

        // test it need to scroll or not
        if(!r_view.contains(r_row)) {
          // at bottom
          if(r_row.bottom > r_view.bottom) {
            $view.scrollTop += r_row.bottom - r_view.bottom
          }
          // at top
          else {
            $view.scrollTop += r_row.top - r_view.top
          }
        }
      }
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "currentId" : {
      handler : function(newVal, oldVal){
        if(!_.isEqual(newVal, oldVal)) {
          this.myCurrentId = newVal
        }
      },
      immediate : true
    },
    "checkedIds" : {
      handler : function(newVal, oldVal){
        if(!_.isEqual(newVal, oldVal)) {
          this.myCheckedIds = newVal
        }
      },
      immediate : true
    }
  },
  ///////////////////////////////////////////////////
  mounted : function() {
    if(this.autoScrollIntoView) {
      _.delay(()=>{
        this.scrollCurrentIntoView()
      }, 0)
    }
  }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wall-tile.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/wall/com/wall-tile/wall-tile.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////
  inject: ["$wall"],
  ///////////////////////////////////////////////////
  data : ()=>({
    myCom : null
  }),
  ///////////////////////////////////////////////////
  props : {
    "display" : {
      type : Object,
      default : null
    },
    // Wall-Tile width
    "width" : {
      type : [String, Number],
      default : null
    },
    // Wall-Tile height
    "height" : {
      type : [String, Number],
      default : null
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    TopClass() {
      return this.getListItemClass()
    },
    //--------------------------------------
    TopStyle() {
      let css = {}
      if(this.width) {
        css.width = this.width
      }
      if(this.height) {
        css.height = this.height
      }
      return Ti.Css.toStyle(css)
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    async evalMyDisplayCom() {
      //console.log("evalMyDisplayCom", this.data)
      this.$wall.reportReady(this.index, !Ti.Util.isNil(this.myCom))
      let com = await this.evalDataForFieldDisplayItem({
        itemData : this.data, 
        displayItem : this.display, 
        vars : {
          "isCurrent" : this.isCurrent,
          "isChecked" : this.isChecked,
          "isChanged" : this.isChanged,
          "isActived" : this.isActived,
          "rowId"     : this.rowId,
          ... this.$vars
        }
      })

      // Update and return
      let old = Ti.Util.pureCloneDeep(this.myCom)
      let nit = Ti.Util.pureCloneDeep(com)
      if(!_.isEqual(old, nit)) {
        //console.log(`-> Cell[${this.rowIndex}-${this.index}]:`, {old, nit})
        this.myCom = com
      }
      // report ready
      this.$wall.reportReady(this.index, true)
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "data" : {
      handler : "evalMyDisplayCom",
      immediate : true
    },
    "isCurrent" : "evalMyDisplayCom",
    "isChecked" : "evalMyDisplayCom"
  }
  ///////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-combo-input-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/input/ti-combo-input-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "options" : {
    type : [String, Array, Function, Ti.Dict],
    default : ()=>[]
  },
  "valueBy" : {
    type : [String, Function],
    default : undefined
  },
  "textBy" : {
    type : [String, Function],
    default : undefined
  },
  "iconBy" : {
    type : [String, Function],
    default : undefined
  },
  "childrenBy" : {
    type : [String, Function],
    default : undefined
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "dropComType" : {
    type : String,
    default : undefined
  },
  "dropComConf" : {
    type : Object,
    default : undefined
  },
  "mustInList" : {
    type : Boolean,
    default : false
  },
  "autoFocusExtended" : {
    type : Boolean,
    default : true
  },
  "filter" : {
    type : Boolean,
    default : true
  },
  "delay" : {
    type : Number,
    default : 800
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "autoI18n" : {
    type : Boolean,
    default : true
  },
  "statusIcons" : {
    type : Object,
    default : ()=>({
      collapse : "zmdi-chevron-down",
      extended : "zmdi-chevron-up"
    })
  },
  "dropDisplay" : {
    type : [Object, String, Array],
    default : undefined
  },
  "dropItemBorder" : {
    type : Boolean,
    default : true
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "keepWidthWhenDrop" : {
    type : Boolean, 
    default : undefined
  },
  "dropWidth" : {
    type : [Number, String],
    default : "box"
  },
  "dropHeight" : {
    type : [Number, String],
    default : null
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-entity-history.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/entity/history/wn-entity-history.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data: ()=>({
    "myShown": {},
    "myList": [],
    "myHisRecord": null,
    "myFilterKeyword": null,
    "myFilterMatch": {},
    "mySort": {
      ct: -1
    },
    "myPager": {
      pn: 1,
      pgsz: 20
    },
    "loading": false
  }),
  ////////////////////////////////////////////////////
  props : {
    "prefix": {
      type: String,
      default: "~/.domain/history"
    },
    "meta": {
      type: Object,
      default: ()=>({})
    },
    "data": {
      type: Object,
      default: ()=>({})
    },
    "status": {
      type: Object,
      default: ()=>({})
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    HistoryItems() {
      if(!this.meta) {
        return []
      }
      // Make sure in history folder
      if(this.prefix) {
        let fph = Wn.Io.getFormedPath(this.meta)
        if(!fph.startsWith(this.prefix)) {
          return []
        }
      }

      let items = []
      _.forEach(this.data.list, it=> {
        // Guard
        if('FILE' != it.race || !it.nm.endsWith(".json"))
          return
        
        // Eval the history item tab name
        let name  = Ti.Util.getMajorName(it.nm)
        let title = it.title
        if(!title) {
          title =  "_history" == name
            ? "i18n:default"
            : name
        }
        items.push({name, title})
      })
      // Update shown
      if(!_.isEmpty(items)) {
        this.myShown = _.assign({
          [_.first(items).name] : true
        }, this.myShown)
      }
      // Return
      return items
    },
    //------------------------------------------------
    CurrentHistory() {
      return _.first(Ti.Util.truthyKeys(this.myShown))
    },
    //------------------------------------------------
    Layout() {
      let blocks = []
      for(let hi of this.HistoryItems) {
        blocks.push({
          type: "cols",
          title: hi.title,
          name : hi.name,
          border: true,
          blocks: [{
            type: "rows",
            size: "65%",
            blocks: [{
              "type": "cols",
              "size": ".44rem",
              "blocks": [{
                  "name": "filter",
                  "flex": "both",
                  "body": "filter"
                }, {
                  "name": "sorter",
                  "flex": "none",
                  "body": "sorter"
                }]
              }, {
                "name" : "list",
                "size" : "stretch",
                "overflow" : "cover",
                "body" : "list"
              }, {
                "name" : "pager",
                "size" : "auto",
                "body" : "pager"
              }]
          }, {
            name: "form",
            body: "form"
          }]
        })
      }
      return {type: "tabs", blocks}
    },
    //------------------------------------------------
    Schema() {
      return {
        //............................................
        filter : {
          comType : "TiComboFilter",
          comConf : {
            placeholder : "i18n:wn-en-his-flt-tip",
            dropWidth: -500,
            form: {
              fields: [{
                  title: "i18n:wn-en-his-ct",
                  name: "ct",
                  comType: "ti-input-daterange",
                  comConf: {
                    valueType: "ms-range"
                  }
                },{
                  title: "i18n:wn-en-his-utp",
                  name: "utp",
                  comType: "ti-input"
                },{
                  title: "i18n:wn-en-his-tid",
                  name: "tid",
                  comType: "ti-input"
                },{
                  title: "i18n:wn-en-his-tnm",
                  name: "tnm",
                  comType: "ti-input"
                },{
                  title: "i18n:wn-en-his-ttp",
                  name: "ttp",
                  comType: "ti-input"
                },{
                  title: "i18n:wn-en-his-opt",
                  name: "opt",
                  comType: "ti-input"
                }]
            },
            value: {
              keyword: this.myFilterKeyword,
              match: this.myFilterMatch
            }
          }
        },
        //............................................
        sorter: {
          comType: "TiComboSorter",
          comConf: {
            dropWidth : 200,
            options: [
              {value:"ct",   text:"i18n:wn-en-his-ct"},
              {value:"utp",     text:"i18n:wn-en-his-utp"},
              {value:"ttp",   text:"i18n:wn-en-his-ttp"}],
            value: this.mySort
          }
        },
        //............................................
        list: {
          comType: "TiTable",
          comConf: {
            data: this.myList,
            fields: [{
              title:"i18n:wn-en-his-ct",
              display: {
                key:"ct",
                transformer: "Ti.DateTime.format"
              }
            },{
              title:"i18n:wn-en-his-usr",
              display: ["utp:$${val}:", "unm|uid"]
            },{
              title:"i18n:wn-en-his-opt",
              display: "opt"
            },{
              title:"i18n:wn-en-his-tar",
              display: ["ttp:$${val}:", "tnm|tid"]
            }]
          }
        },
        //............................................
        pager : {
          comType : "TiPagingJumper",
          comConf : {
            value : this.myPager
          }
        },
        //............................................
        form: {
          comType: "TiForm",
          comConf: {
            data: this.myHisRecord,
            autoShowBlank: true,
            fields: [{
                title:"ID",
                name: "id"
              },{
                title:"i18n:wn-en-his-uid",
                name: "uid"
              },{
                title:"i18n:wn-en-his-unm",
                name: "unm"
              },{
                title:"i18n:wn-en-his-utp",
                name: "utp"
              },{
                title:"i18n:wn-en-his-ct",
                name: "ct",
                type: "AMS"
              },{
                title:"i18n:wn-en-his-tid",
                name: "tid"
              },{
                title:"i18n:wn-en-his-tnm",
                name: "tnm"
              },{
                title:"i18n:wn-en-his-ttp",
                name: "ttp"
              },{
                title:"i18n:wn-en-his-opt",
                name: "opt"
              },{
                title:"i18n:wn-en-his-mor",
                name: "mor"
              }]
          }
        }
        //............................................
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnShownChange(shown) {
      this.myShown = shown
    },
    //------------------------------------------------
    OnSelect({current}) {

      this.myHisRecord = current
    },
    //------------------------------------------------
    async OnFilterChange({match,keyword}={}) {
      this.myFilterMatch = match
      this.myFilterKeyword = keyword
      await this.reloadList()
    },
    //------------------------------------------------
    async OnSorterChange(sort) {
      this.mySort = sort
      await this.reloadList()
    },
    //------------------------------------------------
    async OnPagerChange(page) {
      _.assign(this.myPager, page)
      await this.reloadList()
    },
    //------------------------------------------------
    async reloadList() {
      let hisName = this.CurrentHistory
      if(!hisName) {
        this.myList = []
        this.myPager = {}
        return
      }

      // Prepare the command
      if("_history" == hisName) {
        hisName = ""
      }
      let cmds = [`history ${hisName} query`]

      // Sort
      if(!_.isEmpty(this.mySort)) {
        let sort = JSON.stringify(this.mySort)
        cmds.push(`-sort '${sort}'`)
      }
      
      // Pager
      cmds.push(`-pn ${this.myPager.pn}`)
      cmds.push(`-pgsz ${this.myPager.pgsz}`)
      cmds.push("-cqn")

      // Filter
      let flt = _.assign({}, this.myFilterMatch)
      if(this.myFilterKeyword) {
        if(Wn.Io.isFullObjId(this.myFilterKeyword)) {
          flt.uid = this.myFilterKeyword
        } else {
          flt.unm = this.myFilterKeyword
        }
      }
      let input = JSON.stringify(flt)

      // Load
      this.loading = true
      let reo = await Wn.Sys.exec2(cmds.join(" "), {
        input, as:"json"
      })

      // Update
      this.myList = reo.list
      this.myPager = reo.pager
      this.loading = false
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    "CurrentHistory": function(){
      this.reloadList()
    }
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-label.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/label/ti-label.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data : ()=>({
    myDisplayIcon : undefined,
    myDisplayText : undefined,
    myDictValKey  : undefined
  }),
  //////////////////////////////////////////
  props: {
    "autoLoadDictIcon": {
      type : Boolean,
      default: true
    },
    "valueClickable" : {
      type : Boolean,
      default: false
    },
    "fullField": {
      type : Boolean,
      default : true
    },
    "multiValSep" : {
      type : String,
      default: ", "
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-blank"   : !_.isNumber(this.TheValue) && _.isEmpty(this.TheValue),
        "is-nowrap"  : this.valueMaxWidth>0,
        "full-field" : this.fullField
      })
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //--------------------------------------
    TheFormat() {
      if(_.isFunction(this.format)) {
        return this.format
      }
      if(this.format) {
        if(this.autoI18n) {
          let str = Ti.I18n.text(this.format)
          return (val)=> {
            return Ti.S.renderVars(val, str)
          }
        }
        return (val)=> {
          return Ti.S.renderVars(val, this.format)
        }
      }
    },
    //--------------------------------------
    ValueStyle() {
      return Ti.Css.toStyle({
        maxWidth : this.valueMaxWidth
      })
    },
    //--------------------------------------
    ThePrefixIcon() {
      if(null === this.prefixIcon)
        return null
      return this.myDisplayIcon || this.prefixIcon
    },
    //------------------------------------------------
    TheHover() {
      let map = {}
      let hos = _.concat(this.hover)
      for(let ho of hos) {
        if(ho) {
          map[ho] = true
        }
      }
      return map
    },
    //--------------------------------------
    TheValue() {
      let str = this.value
      // Auto trim
      if(this.trim && _.isString(str)) {
        return _.trim(str)
      }
      // Return it directly
      return str
    },
    //--------------------------------------
    Dict() {
      if(this.dict) {
        // Already Dict
        if(this.dict instanceof Ti.Dict) {
          this.myDictValKey = ".text"
          return this.dict
        }
        // Get back
        let {name, vKey} = Ti.DictFactory.explainDictName(this.dict)
        this.myDictValKey = vKey || ".text"
        return Ti.DictFactory.CheckDict(name)
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //------------------------------------------------
    isCanHover(hoverName) {
      return this.TheHover[hoverName] ? true : false
    },
    //------------------------------------------------
    getHoverClass(hoverName) {
      let canHover = this.isCanHover(hoverName)
      return {
        "can-hover" : canHover,
        "for-look"  : !canHover,
        "is-prefix-icon-hover" : "prefixIcon" == hoverName
      }
    },
    //--------------------------------------
    OnDblClick() {
      if(this.editable) {
        Ti.Be.EditIt(this.$el, {
          text: this.TheValue,
          ok : (newVal)=> {
            this.$notify("change", newVal)
          }
        })
      }
    },
    //------------------------------------------------
    OnClickPrefixIcon() {
      this.$notify("prefix:icon")
    },
    //------------------------------------------------
    OnClickPrefixText() {
      this.$notify("prefix:text")
    },
    //------------------------------------------------
    OnClickValue() {
      if(this.valueClickable) {
        this.$notify("click:value")
      }
    },
    //------------------------------------------------
    OnClickSuffixIcon() {
      this.$notify("suffix:icon")
    },
    //------------------------------------------------
    OnClickSuffixText() {
      this.$notify("suffix:text")
    },
    //--------------------------------------
    async evalDisplay(val) {
      // By Dict Item
      if(this.Dict) {
        // Array value
        if(_.isArray(val)) {
          this.myDisplayIcon = undefined
          let ss = []
          for(let v of val) {
            let it = await this.Dict.getItem(v)
            let s = this.Dict.getBy(this.myDictValKey, it, v)
            ss.push(s)
          }
          val = ss.join(this.multiValSep)
        }
        // Single value
        else {
          let it = await this.Dict.getItem(val)
          if(it) {
            if(this.autoLoadDictIcon) {
              this.myDisplayIcon = this.Dict.getIcon(it)
            }
            val = this.Dict.getBy(this.myDictValKey, it, val)
          } else {
            val = null
            this.myDisplayIcon = null
          }
        }
      }
      // Number
      if(_.isNumber(val)) {
        if(this.TheFormat) {
          return Ti.Types.toStr(val, this.TheFormat)
        }
        return val
      }
      // Collection
      if(_.isArray(val)) {
        if(val.length > 1 && (_.isPlainObject(val[0]) || _.isArray(val[0]))) {
          return JSON.stringify(val)  
        }
        return val.join(this.multiValSep)
      }
      // Object
      if(_.isPlainObject(val)) {
        return JSON.stringify(val, null, '  ')
      }
      // Normal value
      if(Ti.Util.isNil(val)) {
        return Ti.I18n.text(this.placeholder)
      }
      // Date
      if(_.isDate(val)) {
        return Ti.Types.toStr(val, this.TheFormat)
      }
      // Auto format
      if(_.isFunction(this.TheFormat)) {
        return this.TheFormat(val)
      }
      // Return & auto-i18n
      return this.autoI18n 
              ? Ti.I18n.text(val)
              : val
    },
    //--------------------------------------
    async reloadMyDisplay() {
      this.myDisplayIcon = null
      this.myDisplayText = await this.evalDisplay(this.TheValue)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "value" : {
      handler   : "reloadMyDisplay",
      immediate : true
    }
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-paging-button.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/paging/button/ti-paging-button.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////
  props : {
    "value" : {
      type : Object,
      default : ()=>({
        pn : 0,     // Page Number
        pgsz : 0,   // PageSize
        pgc : 0,    // page count
        sum : 0,    // Total
        count : 0   // Record in page
      })
    },
    "maxNumber": {
      type : Number,
      default : 10
    }
  },
  ///////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-first" : 1 == this.PN,
        "is-last"  : this.PN == this.LastPN
      })
    },
    //--------------------------------------
    // 1base
    PN() {
      return _.get(this.value, "pn")
    },
    //--------------------------------------
    // 1base
    LastPN() {
      return _.get(this.value, "pgc")
    },
    //--------------------------------------
    isFirstPage() {
      return 1 == this.PN
    },
    //--------------------------------------
    isLastPage() {
      return this.LastPN == this.PN
    },
    //--------------------------------------
    BtnList() {
      let fullnb = this.maxNumber-2
      let remain = this.LastPN - 2
      let list = []
      if(remain < fullnb) {
        for(let pn = 1; pn<=this.LastPN; pn++) {
          list.push(this.genBtn(pn))
        }
      }
      // Move view port
      else {
        let half = fullnb / 2
        let from = Math.round(this.PN - half)
        let to   = Math.round(this.PN + half)
        if(from<=1) {
          to += (1-from)
          from = 2
        } else if(to>=this.LastPN){
          from -= (to - this.LastPN)
          to = this.LastPN - 1
        }
        else {
          to --
        }
        list.push(this.genBtn(1))
        if(from>2) {
          list.push(this.genBtn(".."))
        }
        for(let i=from; i<=to; i++) {
          list.push(this.genBtn(i))
        }
        if(to < (this.LastPN-2)) {
          list.push(this.genBtn(".."))
        }
        list.push(this.genBtn(this.LastPN))
      }

      return list
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  methods : {
    //--------------------------------------
    genBtn(pn) {
      if(".." == pn) {
        return {ellipsis:true}
      }
      return {
        value: pn, 
        className: {
          "is-current" : this.PN == pn
        }
      }
    },
    //--------------------------------------
    JumpTo(pn) {
      if(pn!=this.PN && pn>=1 && pn<=this.LastPN) {
        this.$notify("change", {
          skip :  this.value.pgsz * (pn-1),
          limit :  this.value.pgsz, 
          pn   : pn, 
          pgsz : this.value.pgsz
        })
      }
    }
  }
  ///////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'm-obj-current.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/obj-current/m-obj-current.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////
  mutations : {
    //----------------------------------------
    setMeta(state, meta) {
      state.meta = meta
    },
    //--------------------------------------------
    assignMeta(state, meta) {
      state.meta = _.assign({}, state.meta, meta);
    },
    //--------------------------------------------
    mergeMeta(state, meta) {
      state.meta = _.merge({}, state.meta, meta);
    },
    //----------------------------------------
    setContent(state, content) {
      let meta = state.meta;
      // Guard
      if(!meta || Ti.Util.isNil(content)) {
        state.content = null
        state.data = null
        state.__saved_content = null
        state.status.changed = false
        return
      }
      //......................................
      // DIR
      if("DIR" == meta.race) {
        state.content = null
        state.__saved_content = null
        state.data = content
      }
      //......................................
      // File
      else if("FILE" == meta.race) {
        //....................................
        // String content
        if(_.isString(content)) {
          state.content = content
          // JSON
          if(Wn.Util.isMimeJson(meta.mime)) {
            try{
              state.data = JSON.parse(content)
            } catch(E) {
              state.data = null
            }
          }
          // Pure Text
          else if(Wn.Util.isMimeText(meta.mime)) {
            state.data = null
          }
        }
        //....................................
        // Take content as plain object or Array
        else {
          state.content = JSON.stringify(content, null, '  ')
          // JSON
          if(Wn.Util.isMimeJson(meta.mime)) {
            state.data = content
          }
          // Pure Text
          else if(Wn.Util.isMimeText(meta.mime)) {
            state.data = null
          }
        }
        //....................................
      }
    },
    //----------------------------------------
    setData(state, data) {
      state.data = data
    },
    //----------------------------------------
    setSavedContent(state, content) {
      state.__saved_content = content
    },
    //----------------------------------------
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    },
    //----------------------------------------
    syncStatusChanged(state){
      if(Ti.Util.isNil(state.content) && Ti.Util.isNil(state.__saved_content)) {
        state.status.changed = false
      } else {
        state.status.changed = !_.isEqual(state.content, state.__saved_content)
      }
    },
    //----------------------------------------
    setFieldStatus(state, {name, type, text}={}) {
      if(name){
        let ukey = _.concat(name).join("-")
        Vue.set(state.fieldStatus, ukey, {type, text})
      }
    },
    //----------------------------------------
    clearFieldStatus(state, names=[]) {
      // Clean All
      if(_.isEmpty(names)) {
        state.fieldStatus = {}
      }
      // Clear one
      else {
        state.fieldStatus = _.omit(state.fieldStatus, names)
      }
    },
    //----------------------------------------
  }
  ////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'widget-summary.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/widget/summary/widget-summary.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    "title": {
      type: String,
      default: undefined
    },
    "items" : {
      type : Array,
      default : ()=>[]
    }
  },
  /////////////////////////////////////////
  computed : {
    //------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------
    TheItems() {
      let list = []
      _.forEach(this.items, (it, index)=>{
        list.push({
          key: `it-${index}`,
          index,
          icon: it.icon,
          text: it.text,
          value: it.value || 0
        })
      })
      return list
    }
    //------------------------------------
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-cmd-panel.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/cmd/panel/wn-cmd-panel.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    lines : []
  }),
  ////////////////////////////////////////////////////
  props : {
    "value" : {
      type : String,
      default : undefined
    },
    "tipText" : {
      type : String,
      default : undefined
    },
    "tipIcon" : {
      type : String,
      default : undefined
    },
    "vars" : {
      type : Object,
      default: undefined
    },
    "as": {
      type : String,
      default: "text"
    },
    "emitName": {
      type : String,
      default: undefined
    },
    "emitPayload" : undefined,
    "input" : {
      type : String,
      default: undefined
    },
    "forceFlushBuffer" : {
      type : Boolean,
      default: true
    },
    "showRunTip" : {
      type : Boolean,
      default : true
    },
    "afterRunCommand" : {
      type : Function,
      default : undefined
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    clear() {
      this.lines = []
    },
    //------------------------------------------------
    async runCommand() {
      if(!this.value)
        return
      
      if(this.showRunTip) {
        this.printHR()
        this.lines.push(Ti.I18n.get("run-welcome"))
      }

      // let re = await Wn.Sys.exec(this.value, {
      //   as : this.as,
      //   vars : this.vars,
      //   input : this.input, 
      //   forceFlushBuffer : this.forceFlushBuffer,
      //   eachLine : (line)=>{
      //     this.lines.push(line)
      //   }
      // })
      let re = await this.exec(this.value)

      if(_.isFunction(this.afterRunCommand)) {
        await this.afterRunCommand(re)
      }

      if(this.emitName) {
        this.$notify(this.emitName, this.emitPayload || re)
      }
    },
    //------------------------------------------------
    async exec(cmdText, options={}) {
      cmdText = Ti.S.renderBy(cmdText, this.vars)
      if(this.showRunTip || options.showRunTip) {
        this.printHR()
        this.lines.push("> " + cmdText)
        this.printHR()
      }

      let re = await Wn.Sys.exec(cmdText, {
        //...............................
        as : this.as,
        input : this.input, 
        forceFlushBuffer : this.forceFlushBuffer,
        //...............................
        ... options,
        //...............................
        eachLine : (line)=>{
          this.lines.push(line)
        }
      })

      if(this.showRunTip || options.showRunTip) {
        this.printHR()
        this.lines.push("> " + cmdText)
        this.printHR()
        this.lines.push(Ti.I18n.get("run-finished"))
      }

      return re
    },
    //------------------------------------------------
    println(str, vars) {
      if(!_.isEmpty(vars)) {
        str = Ti.S.renderBy(str, vars)
      }
      this.lines.push(str)
    },
    //------------------------------------------------
    printHR(c="-") {
      let hr = _.repeat(c, 40)
      this.lines.push(hr)
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    "value" : {
      handler: "runCommand",
      immediate : true
    }, 
    "lines" : function() {
      this.$nextTick(()=>{
        this.$refs.lines.scrollTop = this.$refs.lines.scrollHeight * 2
      })
    }
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-session-badge.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/session/badge/ti-session-badge.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  props : {
    "me" : {
      type : Object,
      default : null
    },
    // Key to indicate Avatar existing
    // null - will not support avatar
    "avatarKey" : {
      type : String,
      default : null
    },
    // Avatar Source Template
    // null - will not support avatar
    "avatarSrc" : {
      type : String,
      default : null
    },
    "loginIcon" : {
      type : String,
      default : "zmdi-account-circle"
    },
    "nameKeys" : {
      type : [String, Array],
      default : "name"
    },
    "nameEvent": {
      type: String,
      default: "go:dashboard"
    },
    "loginEvent" : {
      type : String,
      default : "do:login"
    },
    "logoutEvent" : {
      type : String,
      default : "do:logout"
    },
    /***
     * The customized link before `login/logout`.
     * 
     * ```
     * {
     *    icon   : "im-xxx",
     *    text   : "i18n:xxx",
     *    href   : "/path/to/uri"  // The <a href>
     *    newtab : false,        // if href, the open target
     *    emit   : "do:login"      // Mutex(href)
     * }
     * ```
     */
    "links" : {
      type : Array,
      default : ()=>[]
    },
    "autoSignLink" : {
      type : Boolean,
      default : true
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    theLinks() {
      let list = _.cloneDeep(this.links) || []
      //---------------------------
      // // Join the links
      // for(let li of this.links) {
      //   // Ignore out-of-session link
      //   if(li.inSession && !this.hasSession) {
      //     continue;
      //   }
      //   // Join
      //   list.push(li)
      // }
      //---------------------------
      // Add the Login/Logout link
      if(this.autoSignLink) {
        if(this.hasSession) {
          list.push({
            title : "i18n:logout",
            emit  : this.logoutEvent
          })
        }
        // Login 
        else {
          list.push({
            title : "i18n:login",
            emit  : this.loginEvent
          })
        }
      }
      //---------------------------
      return list
    },
    //--------------------------------------
    myName() {
      if(this.me) {
        return Ti.Util.getOrPick(this.me, this.nameKeys) 
               || Ti.I18n.get("mine")
      }
    },
    //--------------------------------------
    myIcon() {
      if(this.me) {
        if(2 == this.me.sex) {
          return "im-user-female"
        }
        return "im-user-male"
      }
      return "far-user"
    },
    //--------------------------------------
    myAvatar() {
      if(this.avatarSrc) {
        return Ti.S.renderBy(this.avatarSrc, this.me)
      }
    },
    //--------------------------------------
    hasAvatar() {
      return this.avatarSrc
        && this.avatarKey
        && this.me
        && this.me[this.avatarKey]
    },
    //--------------------------------------
    hasSession() {
      return this.me ? true : false
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickLink(link, $event) {
      // Emit
      if(link.emit) {
        $event.preventDefault()
        this.$notify(link.emit)
      }
      // Href: do nothing
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'widget-frame.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/widget/frame/widget-frame.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    "src": {
      type: String,
      default: undefined
    }
  },
  /////////////////////////////////////////
  computed : {
    //------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------
    FrameSrce() {
      return _.trim(this.src)
    },
    //------------------------------------
    hasFrameSrce() {
      return this.FrameSrce ? true : false
    },
    //------------------------------------
    FrameStyle() {
      return {border: 0}
    }
    //------------------------------------
  },
  /////////////////////////////////////////
  methods : {
    //------------------------------------
    //------------------------------------
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'form-field.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/form/com/form-field/form-field.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////////
  data : ()=>({
    isComReady : false,
    myComType : null,
    myComConf : null
  }),
  //////////////////////////////////////////////
  computed : {
    //----------------------------------------
    TopClass() {
      return this.getTopClass({
        "no-status-icons"  : !this.hasStatusIcons,
        "has-status-icons" : this.hasStatusIcons,
        "is-disabled" : this.disabled
      }, 
      `as-${this.viewportMode}`,
      (this.StatusType?`is-${this.StatusType}`:null))
    },
    //----------------------------------------
    isShowTitle  () {return !Ti.Util.isNil(this.title)},
    isShowIcon   () {return !Ti.Util.isNil(this.icon)},
    isShowTip    () {return !Ti.Util.isNil(this.tip)},
    hasStatusIcons(){return !_.isEmpty(this.statusIcons)},
    //----------------------------------------
    isNumberType() {
      return /^(Number|Integer|Float)$/.test(this.type)
    },
    //----------------------------------------
    UniqName() {
      return _.isArray(this.name)
        ? this.name.join("-")
        : this.name
    },
    //----------------------------------------
    TheTitle() {
      return this.title || this.UniqName
    },
    //----------------------------------------
    ComClass() {
      let auto    = "auto" == this.width
      let full    = "full" == this.width
      let stretch = "stretch" == this.width
      let fixed   = !auto && !full && !stretch && !Ti.Util.isNil(this.width)
      return {
        "is-size-auto"     : auto,
        "is-size-full"     : full,
        "is-size-stretch"  : stretch,
        "is-size-fixed"    : fixed
      }
    },
    //----------------------------------------
    ConStyle() {
      return Ti.Css.toStyle({
        height: this.height
      })
    },
    //----------------------------------------
    ComStyle() {
      let css = {
        height: this.height
      }
      if(this.width && !/^(auto|stretch)$/.test(this.width)) {
        css.width = Ti.Css.toSize(this.width)
      }
      return Ti.Css.toStyle(css)
    },
    //----------------------------------------
    TheDisplay() {
      // Guard
      if(!this.display) {
        return
      }
      // Eval setting
      if(!_.isBoolean(this.display) && this.display) {
        return this.evalFieldDisplayItem(this.display, {
          //funcSet    : this.funcSet,
          defaultKey : this.name
        })
      }
      // return default.
      return {
        comType : "ti-label",
        comConf : {}
      }
    },
    //----------------------------------------
    CurrentDisplayItem() {
      // Display Mode
      let dis = this.TheDisplay || {}

      // If Actived reset the display
      if(this.isActived || !this.display) {
        dis = {
          defaultAs: this.defaultAs,
          comType : this.comType,
          comConf : this.comConf,
        }
      }

      // Assign the default value and return
      return _.defaults(_.cloneDeep(dis), {
        comType : "ti-label",
        key     : this.name,
        type    : this.type,
        dict    : this.dict,
        transformer : this.transformer
      })
    },
    //----------------------------------------
    Status() {
      return _.get(this.fieldStatus, this.uniqKey)
    },
    //----------------------------------------
    StatusType() {
      return _.get(this.Status, "type")
    },
    //----------------------------------------
    StatusText() {
      return _.get(this.Status, "text")
    },
    //----------------------------------------
    StatusIcon() {
      if(this.Status && this.hasStatusIcons) {
        return this.statusIcons[this.Status.type]
      }
    },
    //----------------------------------------
  },
  ////////////////////////////////////////////////
  methods : {
    //--------------------------------------------
    __before_bubble({name, args}) {
      if(this.name) {
        return {
          name : `${this.UniqName}::${name}`,
          args
        }
      }
    },
    //--------------------------------------------
    OnChange(val) {
      // Customized value
      let v2 = val
      try {
        //console.log("this.serializer(val):", val)
        v2 = this.serializer(val)
        //console.log("field changed", val, v2)
      }
      // Invalid 
      catch(error) {
        this.$notify("invalid", {
          errMessage : ""+error,
          name  : this.name,
          value : val
        })
        return
      }
      
      // apply default
      v2 = this.evalInputValue(v2)

      // Com Value
      let comValue = _.get(this.myComConf, this.autoValue)

      // emit event
      if(!this.checkEquals || !_.isEqual(v2, comValue)) {
        //console.log("  #field.change:", this.name, v2)
        this.$notify("change", {
          name  : this.name,
          value : v2
        })
      }
    },
    //--------------------------------------------
    async evalTheCom() {
      let theCom = await this.evalDataForFieldDisplayItem({
        itemData : this.data, 
        displayItem : this.CurrentDisplayItem, 
        vars : {
          "isActived" : this.isActived,
          "disabled"  : this.disabled
        },
        autoIgnoreNil : false,
        autoIgnoreBlank : false,
        autoValue : this.autoValue
      })
      // console.log("evalTheCom", {
      //   myUID      : this._uid,
      //   isActived  : this.isActived,
      //   oldComType : this.myComType,
      //   oldComConf : _.cloneDeep(this.myComConf),
      //   newComType : theCom.comType,
      //   newComConf : _.cloneDeep(theCom.comConf),
      // })

      if(!theCom) {
        this.myComType = undefined
        this.myComConf = undefined
        this.isComReady = false
        return
      }
      
      this.myComType = theCom.comType
      this.myComConf = theCom.comConf

      this.isComReady = true
    },
    //--------------------------------------------
    evalInputValue(val) {
      // apply default
      if(_.isUndefined(val)){
        return _.cloneDeep(
          Ti.Util.fallback(this.undefinedAs, this.defaultAs)
        )
      }
      if(_.isNull(val)){
        return _.cloneDeep(
          Ti.Util.fallback(this.nullAs, this.defaultAs, null)
        )
      }
      if(this.isNumberType && isNaN(val)) {
        return _.cloneDeep(
          Ti.Util.fallback(this.nanAs, this.defaultAs, NaN)
        )
      }
      if(_.isEmpty(val) && _.isString(val)) {
        let re = _.cloneDeep(
          Ti.Util.fallback(this.emptyAs, this.defaultAs, "")
        )
        if("~~undefined~~" == re) 
          return
        return re
      }
      return val
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  watch : {
    "CurrentDisplayItem" : "evalTheCom",
    "data" : {
      handler: "evalTheCom",
      immediate : true
    }
  }
  ////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-combo-pair-text-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/pair-text/ti-combo-pair-text-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "value": {
    type: Object,
    default: undefined
  },
  "options" : {
    type : [String, Array, Function, Ti.Dict],
    default : ()=>[]
  },
  "valueBy" : {
    type : [String, Function],
    default : undefined
  },
  "textBy" : {
    type : [String, Function],
    default : undefined
  },
  "iconBy" : {
    type : [String, Function],
    default : undefined
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "trimed" : {
    type : Boolean,
    default : true
  },
  "readonly" : {
    type: Boolean,
    default : false
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "placeholder" : {
    type : String,
    default : undefined
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "textWidth" : {
    type : [Number, String],
    default : undefined
  },
  "textHeight" : {
    type : [Number, String],
    default : undefined
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-obj-tree.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/tree/wn-obj-tree.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data: ()=>({
    treeRoot  : null,
    myCurrentId : null,
    myLoadingNodeId : null,
    myOpenedNodePaths : {}
  }),
  ////////////////////////////////////////////////////
  props : {
    //------------------------------------------------
    // Data
    //------------------------------------------------
    "meta" : {
      type : Object,
      default : undefined
    },
    "idBy" : {
      type : String,
      default : "id"
    },
    "nameBy" : {
      type : String,
      default : "nm"
    },
    "referBy" : {
      type : String,
      default : "pid"
    },
    "childrenBy" : {
      type : String,
      default : "children"
    },
    "sortBy" : {
      type : Object,
      default : ()=>({nm:1})
    },
    //------------------------------------------------
    // Behavior
    //------------------------------------------------
    "autoOpen"   : undefined,
    "showRoot"   : undefined,
    "multi"      : undefined,

    "nodeCheckable"  : undefined,
    "nodeSelectable" : undefined,
    "nodeOpenable"   : undefined,
    "nodeCancelable" : undefined,
    "nodeHoverable"  : undefined,

    "checkable"  : undefined,
    "selectable" : undefined,
    "openable"   : undefined,
    "cancelable" : undefined,
    "hoverable"  : undefined,

    "onNodeSelect" : undefined,

    // Local store to save the tree open status
    "keepOpenBy" : {
      type : String,
      default : undefined
    },
    "keepCurrentBy" : {
      type : String,
      default : undefined
    },
    //------------------------------------------------
    // Aspect
    //------------------------------------------------
    "display" : {
      type : [String, Object, Array],
      default : ()=>[{
        key : ['race', 'tp', 'mime', 'icon'],
        transformer : Ti.Icons.evalIcon,
        comType : "ti-icon"
      }, "title|nm"]
    },
    "spacing" : undefined,
    "border"  : undefined,
    "loadingNode" : {
      type : Object,
      default : ()=>({
        title : "i18n:loading"
      })
    },
    "emptyNode" : {
      type : Object,
      default : ()=>({
        icon  : "fas-braille",
        title : "i18n:empty-data"
      })
    },
    //------------------------------------------------
    // Measure
    //------------------------------------------------
    "width" : {
      type : [Number, String],
      default : undefined
    },
    "height" : {
      type : [Number, String],
      default : undefined
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    },
    //------------------------------------------------
    isNodeLoading() {
      return ({id})=>{
        return id == this.myLoadingNodeId
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnTreeInit($tree) {
      this.$tree = $tree
    },
    //------------------------------------------------
    OnTreeOpenedStatusChange(openedPath) {
      this.myOpenedNodePaths = _.omitBy(openedPath, v=>!v)
      if(this.keepOpenBy) {
        Ti.Storage.session.setObject(this.keepOpenBy, openedPath)
      }
    },
    //------------------------------------------------
    OnNodeSelect({currentId}) {
      this.myCurrentId = currentId
      if(this.keepCurrentBy) {
        Ti.Storage.session.set(this.keepCurrentBy, currentId)
      }
      return false
    },
    //------------------------------------------------
    async OnNodeOpened({id, leaf, path, rawData}) {
      let hie = this.getHierarchyById(id)
      if(hie) {
        // console.log(hie)
        // Not need reload
        if(!_.isEmpty(_.get(hie.node, this.childrenBy))) {
          return
        }
        
        // Do reload
        await this.openNode(hie)
      }
    },
    //------------------------------------------------
    async replaceNode(obj) {
      let nodeId = _.get(obj, this.idBy)
      let hie = this.getHierarchyById(nodeId)

      // Guard
      if(!hie)
        return

      //console.log(hie)
      // Keep the exists children
      let oldPathId = hie.path.join("/")
      let children = _.get(hie.node, this.childrenBy)
      if(!_.isEmpty(children)) {
        _.set(obj, this.childrenBy, children)
      }

      // Replace in tree and redraw
      Ti.Trees.replace(hie, obj)

      // Remove the opened path
      hie = this.getHierarchyById(nodeId)
      let openeds = {}
      _.forEach(this.myOpenedNodePaths, (v, k)=> {
        if(v) {
          if(k == oldPathId) {
            k = hie.path.join("/")
          }
          openeds[k] = true
        }
      })

      // soft redraw
      if(!_.isEqual(openeds, this.myOpenedNodePaths)) {
        this.myOpenedNodePaths = openeds
      }
      // Force redraw
      else {
        await this.$tree.evalTreeTableData()
      }
    },
    //------------------------------------------------
    getHierarchyById(id, root=this.treeRoot) {
      return Ti.Trees.getById(root, id, {nameBy:this.nameBy})
    },
    //------------------------------------------------
    getHierarchyByPath(path, root=this.treeRoot) {
      return Ti.Trees.getByPath(root, path, {nameBy:this.nameBy})
    },
    //------------------------------------------------
    getcloseNodesByPath(path) {
      let pathId = _.isArray(path) ? path.join("/") : path
      let openeds = {}
      _.forEach(this.myOpenedNodePaths, (v, k)=>{
        if(v && k.length > pathId.length && k.startsWith(pathId)) {
          return
        }
        if(v) {
          openeds[k] = true
        }
      })
      return openeds
    },
    //------------------------------------------------
    selectNodeById(id) {
      this.$tree.selectNodeById(id)
    },
    //--------------------------------------
    isOpened(rowOrId) {
      return this.$tree.isOpened(rowOrId)
    },
    //--------------------------------------
    closeRow(rowOrId) {
      this.$tree.closeRow(rowOrId)
    },
    //------------------------------------------------
    selectNodeByPath(path) {
      let hie = this.getHierarchyByPath(path)
      if(hie) {
        this.$tree.selectNodeById(hie.id)
      }
    },
    //------------------------------------------------
    async openNodeById(id) {
      let hie = this.getHierarchyById(id)
      if(hie) {
        return await this.openNode(hie)
      }
    },
    //------------------------------------------------
    async openNodeByPath(id) {
      let hie = this.getHierarchyByPath(path)
      if(hie) {
        return await this.openNode(hie)
      }
    },
    //------------------------------------------------
    async openNode({id, node, path}) {
      // Show loading
      this.myLoadingNodeId = id
      await this.$tree.evalTreeTableData()

      // Do reload
      await this.reloadChildren(node)
      this.myLoadingNodeId = null

      // Closed the children nodes
      let pathId = Ti.Trees.path(path).join("/")
      let openeds = this.getcloseNodesByPath(pathId)
      openeds[pathId] = true

      // soft redraw
      if(!_.isEqual(openeds, this.myOpenedNodePaths)) {
        this.myOpenedNodePaths = openeds
      }
      // Force redraw
      else {
        await this.$tree.evalTreeTableData()
      }
    },
    //------------------------------------------------
    async reloadChildren(obj) {
      // Get the parent refer value
      let prVal = _.get(obj, this.idBy)
      if(Ti.Util.isNil(prVal))
        return

      // Reload top 
      let query = {
        skip: 0, limit: 0, sort: this.sortBy, mine:true,
        match : {
          [this.referBy] : prVal
        }
      }
      let {list} = await Wn.Io.find(query)
      //_.set(obj, this.childrenBy, list);
      this.$set(obj, this.childrenBy, list)
    },
    //------------------------------------------------
    async quietOpenNode(path=[], node=this.treeRoot) {
      if('DIR' != node.race)
        return

      if(_.isEmpty(path))
        return
      let nodeName = _.first(path)
      let hie = this.getHierarchyByPath(nodeName, node)
      // Need to load the children
      if(!hie) {
        await this.reloadChildren(node)
        // fetch again
        hie = this.getHierarchyByPath(nodeName, node)
      }

      // The child is lost
      if(!hie)
        return

      // Load the sub-level
      let subPath = path.slice(1)

      // Just open current node
      if(_.isEmpty(subPath)) {
        await this.reloadChildren(hie.node)
      }
      // Recur
      else {
        await this.quietOpenNode(subPath, hie.node)
      }
    },
    //------------------------------------------------
    async deleteNodeById(id, confirm) {
      let hie = this.getHierarchyById(id)
      if(hie) {
        return await this.deleteNode(hie, confirm)
      }
    },
    //------------------------------------------------
    async deleteNodeByPath(path, confirm) {
      let hie = this.getHierarchyByPath(path)
      if(hie) {
        return await this.deleteNode(hie, confirm)
      }
    },
    //------------------------------------------------
    async deleteNode(hie, confirm) {
      // Confirm
      if(confirm) {
        if(_.isBoolean(confirm)) {
          confirm = {
            text : "i18n:wn-del-confirm",
            vars : {N:1}
          }
        }
        if(!(await Ti.Confirm(confirm, {type:"warn"}))) {
          return
        }
      }

      // Get the condidate
      let can = Ti.Trees.nextCandidate(hie)

      // Remove the object
      let cmdText = `rm -rf 'id:${hie.id}'`
      await Wn.Sys.exec(cmdText)

      // Get pareth path
      let pPath = hie.path.slice(0, hie.path.length-1)
      await this.reloadNodeByPath(pPath)

      // Tip user
      await Ti.Toast.Open({
        position : "top",
        content  : "i18n:wn-del-ok",
        vars  : {N:1},
        type  : "info"
      })

      // Highlight next
      if(can) {
        let nextNodeId = _.get(can.node, this.idBy)
        _.delay(()=>{
          this.selectNodeById(nextNodeId)
        }, 200)
      }
    },
    //------------------------------------------------
    async reloadNodeById(id) {
      let hie = this.getHierarchyById(id)
      if(hie) {
        return await this.reloadNode(hie)
      }
    },
    //------------------------------------------------
    async reloadNodeByPath(path) {
      let hie = this.getHierarchyByPath(path)
      if(hie) {
        return await this.reloadNode(hie)
      }
    },
    //------------------------------------------------
    async reloadNode({id, node, path}) {
      // Show loading
      this.myLoadingNodeId = id
      await this.$tree.evalTreeTableData()

      // Do reload
      await this.reloadChildren(node)
      this.myLoadingNodeId = null

      // Closed the children nodes
      let openeds = this.getcloseNodesByPath(path)

      // soft redraw
      if(!_.isEqual(openeds, this.myOpenedNodePaths)) {
        this.myOpenedNodePaths = openeds
      }
      // Force redraw
      else {
        await this.$tree.evalTreeTableData()
      }
    },
    //------------------------------------------------
    async reload() {
      // Guard
      if(!this.meta)
        return

      // Make tree root
      let root = _.cloneDeep(this.meta)

      // Load children
      await this.reloadChildren(root)

      // Open the node 
      let openPathIds = Ti.Util.truthyKeys(this.myOpenedNodePaths)
      for(let pathId of openPathIds) {
        let path = Ti.Trees.path(pathId)
        await this.quietOpenNode(path, root)
      }

      // Check the currentId
      if(this.myCurrentId) {
        // is it already loaded ?
        let hie = this.getHierarchyById(this.myCurrentId, root)

        // if not exists try to reload
        if(!hie) {
          // Load ancestors 
          let ans = await Wn.Io.loadAncestors(`id:${this.myCurrentId}`)
          
          // find the first index of 
          let index = 0
          let homeId = _.get(this.meta, this.idBy)
          for(; index<ans.length; index++) {
            let an = ans[index]
            if(_.get(an, this.idBy) == homeId) {
              break
            }
          }

          // Get the path
          let currentPath = []
          for(index++; index<ans.length; index++) {
            let an = ans[index]
            currentPath.push(_.get(an, this.nameBy))
          }

          // Open to it
          await this.quietOpenNode(currentPath, root)

          // Make sure current is opened
          let openeds = {}
          for(let i=1; i<=currentPath.length; i++) {
            openeds[currentPath.slice(0, i).join("/")] = true
          }
          this.myOpenedNodePaths = _.defaults({}, this.myOpenedNodePaths, openeds)
        }

        // Restore the current node
        _.delay(()=>{
          this.$tree.selectNodeById(this.myCurrentId)
        }, 300)
      }

      // set to data
      this.treeRoot = root
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    "meta" : {
      handler : function(newVal, oldVal) {
        if(!_.isEqual(newVal, oldVal)) {
          this.reload()
        }
      },
      immediate : true
    }
  },
  ////////////////////////////////////////////////////
  created: function() {
    if(this.keepCurrentBy) {
      this.myCurrentId = Ti.Storage.session.getString(this.keepCurrentBy)
    }
    if(this.keepOpenBy) {
      this.myOpenedNodePaths = Ti.Storage.session.getObject(this.keepOpenBy)
    }
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-text-raw.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/text/raw/web-text-raw.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    "icon": {
      type: [String, Object],
      default: undefined
    },
    "value": {
      type : [String, Number, Boolean, Array],
      default : undefined
    },
    "lineSeperater": {
      type : String,
      default: "\n"
    },
    "i18n": {
      type: Boolean,
      default: false
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    hasValue() {
      return Ti.Util.isNil(this.value) ? false : true;
    },
    //--------------------------------------
    TheValue() {
      // Split String
      if(_.isString(this.value)) {
        if(this.lineSeperater) {
          let ss = this.value.split(this.lineSeperater)
          _.map(ss, s => _.trim(s))
          return ss
        }
        return [this.value]
      }
      // Already Array
      if(_.isArray(this.value))
        return this.value
      
      // Others
      return [this.value]
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'vod-video-player.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/net/aliyun/vod/video/player/vod-video-player.mjs'] = (function(){
/*
Aliyun Player JS SDK properties and API:
https://help.aliyun.com/document_detail/125572.html?spm=a2c4g.11186623.6.1101.19dc1c4cAXr5Cs

Aliyun VOD get play address api:
https://help.aliyun.com/document_detail/56124.html?spm=a2c4g.11186623.2.31.6c797fbfuEVYDi
*/
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////////
  props : {
    "autoplay": {
      type: Boolean,
      default: false
    },
    "videoId": {
      type: String,
      default: undefined
    },
    "coverUrl": {
      type: String,
      default: undefined
    },
    "playAuth": {
      type: String,
      default: undefined
    },
    "encryptType": {
      type: Number,
      default: undefined
    },
    "lang" : {
      type : String,
      default: undefined
    },
    "format" : {
      type : String,
      default: "m3u8"
    },
    "definition" : {
      type : String,
      default: "FD,LD,SD,HD,OD,2K,4K"
    },
    "defaultDefinition" : {
      type : String,
      default: "FD"
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //---------------------------------------------------
    PlayerID() {
      let n = parseInt(Math.random()* 100000);
      return `ALIPLAYER_${n}`
    },
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods :{
    //---------------------------------------------------
    initPlayer() {
      if(!this.$player
        && this.playAuth
        && this.videoId
        && this.coverUrl) {

        // console.log("haha", {
        //   playAuth: this.playAuth,
        //   videoId: this.videoId,
        //   coverUrl: this.coverUrl
        // })

        let lang = this.lang || Ti.Config.lang()

        this.$player = new Aliplayer({
          id: this.PlayerID,
          width: "100%",
          height: "100%",
          autoplay: this.autoplay,
          useH5Prism: true,
          format : this.format,
          definition : this.definition,
          defaultDefinition: this.defaultDefinition,
          language: lang,
          vid: this.videoId,
          cover: this.coverUrl,
          encryptType: this.encryptType,
          playauth : this.playAuth
        })
      }
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  watch: {
    // "playAuth": function() {
    //   this.$nextTick(()=>this.initPlayer())
    // },
    // "videoId": function() {
    //   this.$nextTick(()=>this.initPlayer())
    // },
    // "coverUrl": function() {
    //   this.$nextTick(()=>this.initPlayer())
    // }
  },
  ///////////////////////////////////////////////////////
  mounted(){
    this.initPlayer();
  },
  ///////////////////////////////////////////////////////
  beforeDestroy() {
    if(this.$player) {
      this.$player.dispose();
    }
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'md-actionbar.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/markdown/richeditor2/md-actionbar.mjs'] = (function(){
/////////////////////////////////////////////////////
const BUILTIN_TOOLBAR_ACTIONS = {
  //.........................................
  "|" : {type : "line"},
  //.........................................
  "B" : {
    icon : "fas-bold",
    notifyChange: "bold",
    highlight : "bold",
    disabled : "italic"
  },
  //.........................................
  "I" : {
    icon : "fas-italic",
    notifyChange : "italic",
    highlight : "italic",
    disabled : "bold"
  },
  //.........................................
  "Link" : {
    icon : "fas-link",
    notifyChange : "link",
    highlight : "link"
  },
  //.........................................
  "Code" : {
    icon : "zmdi-code",
    notifyChange : "code",
    highlight : "code"
  },
  //.........................................
  "Heading" : {
    type : "group",
    icon : "fas-hashtag",
    text : "i18n:wordp-heading",
    items : [{
        text: "i18n:wordp-h1",
        notifyChange: "header",
        highlight : "h1",
        value: 1
      }, {
        text: "i18n:wordp-h2",
        notifyChange: "header",
        highlight : "h2",
        value: 2
      }, {
        text: "i18n:wordp-h3",
        notifyChange: "header",
        highlight : "h3",
        value: 3
      }, {
        text: "i18n:wordp-h4",
        notifyChange: "header",
        highlight : "h4",
        value: 4
      }, {
        text: "i18n:wordp-h5",
        notifyChange: "header",
        highlight : "h5",
        value: 5
      }, {
        text: "i18n:wordp-h6",
        notifyChange: "header",
        highlight : "h6",
        value: 6
      }, {
        text: "i18n:wordp-h0",
        notifyChange: "header",
        highlight : "h0",
        value:  0
      }]
  },
  //.........................................
  "BlockQuote" : {
    icon : "fas-quote-right",
    notifyChange : "blockquote",
    highlight : "blockquote"
  },
  //.........................................
  "CodeBlock" : {
    icon : "fas-code",
    notifyChange : "code_block",
    highlight : "code-block"
  },
  //.........................................
  "Indent" : {
    icon : "fas-indent",
    notifyChange: "indent"
  },
  //.........................................
  "Outdent" : {
    icon : "fas-outdent",
    notifyChange: "outdent"
  },
  //.........................................
  "UL" : {
    icon : "fas-list-ul",
    notifyChange : "list",
    value : "bullet",
    highlight: {list:"bullet"}
  },
  //.........................................
  "OL" : {
    icon : "fas-list-ol",
    notifyChange : "list",
    value : "ordered",
    highlight: {list:"ordered"}
  }
  //.........................................
}
/////////////////////////////////////////////////////
const _M = {
  computed : {
    //-----------------------------------------------
    hasToolbar() {
      return !_.isEmpty(this.ToolbarMenuData)
    },
    //-----------------------------------------------
    ToolbarActions() {
      return _.merge({}, BUILTIN_TOOLBAR_ACTIONS, this.actions)
    },
    //-----------------------------------------------
    ToolbarMenuData() {
      let list = []
      _.forEach(this.toolbar, v => {
        let it = _.get(this.ToolbarActions, v)
        //...........................................
        if(it) {
          list.push(it)
        }
        //...........................................
      })
      // list.push({
      //   text: "HL",
      //   action : "$parent:highlightCode"
      // })
      return list;
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    // Events
    //-----------------------------------------------
    OnToolbarChange({name, value}={}) {
      //console.log("OnToolbarChange", {name, value})
      const fn = ({
        //...........................................  
        bold  ($q, val){$q.format("bold", val)},
        italic($q, val){$q.format("italic", val)},
        code($q, val){$q.format("code", val)},
        //...........................................
        header($q, val) {$q.format("header", val)},
        //...........................................
        blockquote($q, val){$q.format("blockquote", val)},
        code_block($q, val){$q.format("code-block", val)},
        //..........................................
        async link($q, val){
          let range = $q.getSelection()
          if(!range) {
            return await Ti.Toast.Open("i18n:wordp-nil-sel", "warn")
          }
          // Eval Format
          let {link} = $q.getFormat(range)
          
          // Adjust range
          let text;
          if(link) {
            let [bolt, offset] = $q.getLeaf(range.index)
            text = bolt.text
            let index = range.index - offset;
            let length = text.length
            range = {index, length}
          }
          else {
            text = $q.getText(range)
          }
          // Eval new tab
          let newtab  = false
          if(/^\+/.test(text)) {
            text = text.substring(1)
            newtab = true
          }
          
          // Get link information
          let reo = await Ti.App.Open({
            icon  : "fas-link",
            title : "i18n:wordp-link",
            height : "3.2rem",
            result : {
              text, newtab, link
            },
            model : {prop: "data", event: "change"},
            comType: "TiForm",
            comConf: {
              fields: [{
                title : "i18n:link-href",
                name  : "link",
                comType : "ti-input"
              }, {
                title : "i18n:link-text",
                name  : "text",
                comType : "ti-input"
              }, {
                title : "i18n:open-newtab",
                name  : "newtab",
                type  : "Boolean",
                comType : "ti-toggle"
              }]
            }
          })
          
          // User Cancel
          if(!reo)
            return

          let newText = reo.text
          if(reo.link && reo.newtab)
            newText = "+" + newText
          $q.updateContents({
            ops: [
              {retain: range.index},
              {delete: range.length},
              {insert: newText, attributes: {
                link: reo.link, newtab: true
              }}]
          })
        },
        //...........................................
        indent ($q){$q.format("indent", "+1")},
        outdent($q){$q.format("indent", "-1")},
        //...........................................
        list($q, val="bullet"){$q.format("list", val)}
        //...........................................
      })[name]
      //.............................................
      // Invoke
      if(_.isFunction(fn)) {
        fn(this.$editor, value)
        this.quillUpdateFormat()
      }
      //.............................................
    }
    //-----------------------------------------------
  }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-input-month.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/month/ti-input-month.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data : ()=>({
    "runtime" : null,
    "status"  : "collapse"
  }),
  ////////////////////////////////////////////////////
  props : {
    "canInput" : {
      type : Boolean,
      default : true
    },
    "value" : {
      type : [String, Number, Date],
      default : undefined
    },
    "text" : {
      type : String,
      default : undefined
    },
    "icon" : {
      type : String,
      default : "far-calendar"
    },
    "format" : {
      type : String,
      default : "yyyy-MM"
    },
    "placeholder" : {
      type : [String, Number],
      default : "i18n:blank-month"
    },
    "hideBorder" : {
      type : Boolean,
      default : false
    },
    "width" : {
      type : [Number, String],
      default : "1.6rem"
    },
    "height" : {
      type : [Number, String],
      default : undefined
    },
    "dropWidth" : {
      type : [Number, String],
      default : "box"
    },
    // the height of drop list
    "dropHeight" : {
      type : [Number, String],
      default : 200
    },
    "beginYear" : {
      type : [Number, String],
      default : 1970
    },
    "endYear" : {
      type : [Number, String],
      default : (new Date().getFullYear()+1)
    },
    "statusIcons" : {
      type : Object,
      default : ()=>({
        collapse : "zmdi-chevron-down",
        extended : "zmdi-chevron-up"
      })
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName(this.className)
    },
    //------------------------------------------------
    isCollapse() {return "collapse"==this.status},
    isExtended() {return "extended"==this.status},
    //------------------------------------------------
    theDate() {
      return Ti.Types.toDate(this.value, null)
    },
    //------------------------------------------------
    theDropDate() {
      return this.runtime || this.theDate
    },
    //------------------------------------------------
    theInputValue() {
      if(this.isExtended) {
        return this.getDateText(this.theDropDate, this.format)
      }
      return this.text || this.getDateText(this.theDropDate, this.format)
    },
    //------------------------------------------------
    theStatusIcon() {
      return this.statusIcons[this.status]
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    applyRuntime() {
      if(this.runtime) {
        let dt = this.runtime
        this.runtime = null
        let str = this.getDateText(dt)
        this.$notify("change", str)
      }
    },
    //-----------------------------------------------
    doExtend() {
      this.status = "extended"
    },
    //-----------------------------------------------
    doCollapse({escaped=false}={}) {
      this.status = "collapse"
      // Drop runtime
      if(escaped) {
        this.runtime = null
      }
      // Apply Changed for runtime
      else {
        this.applyRuntime()
      }
    },
    //------------------------------------------------
    onInputFocused() {
      this.doExtend()
    },
    //------------------------------------------------
    onChanged(val) {
      // Empty value as null
      if(_.isEmpty(val)) {
        this.$notify("change", null);
      }
      // Parsed value
      else {
        let dt  = Ti.Types.toDate(val)
        let str = this.getDateText(dt)
        this.$notify("change", str)
      }
    },
    //------------------------------------------------
    onClickStatusIcon() {
      // extended -> collapse
      if(this.isExtended) {
        this.doCollapse()
      }
      // collapse -> extended
      else {
        this.doExtend()
      }
    },
    //------------------------------------------------
    onMonthChanged(dt) {
      this.runtime = dt
    },
    //------------------------------------------------
    getDateText(dt, fmt="yyyy-MM") {
      let dt2 = Ti.Types.toDate(dt, null)
      return Ti.Types.formatDate(dt2, fmt)
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-media-image.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/media/image/ti-media-image.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////
  data: ()=>({
    naturalWidth  : -1,
    naturalHeight : -1,
    viewportWidth  : -1,
    viewportHeight : -1,
    fitMode  : "contain",
    imgLoading : true,
    inViewport : false
  }),
  ///////////////////////////////////
  props : {
    "src" : {
      type : String,
      default : null
    },
    "width" : {
      type : [String, Number],
      default : ""
    },
    "height" : {
      type : [String, Number],
      default : ""
    }
  },
  ///////////////////////////////////
  computed : {
    topClass() {
      return Ti.Css.mergeClassName({
        "as-fitmode-cover"   : this.fitMode=="cover",
        "as-fitmode-contain" : this.fitMode=="contain",
        "is-img-loading" : this.imgLoading,
        "is-in-viewport" : this.inViewport
      }, this.className)
    },
    topStyle() {
      return {
        width  : this.width, 
        height : this.height
      }
    },
    theImageStyle() {
      let css = {
        "visibility" : "hidden",
        "position"   : "relative"
      }
      // If ready, then resize to zoom
      if(this.naturalWidth > 0
        && this.naturalHeight > 0) {
        // Get the measure of viewport
        let viewport = Ti.Rects.create({
          top:0, left:0,
          width  : this.viewportWidth,
          height : this.viewportHeight
        })
        // Get the measure of image
        let r_img = Ti.Rects.create({
          top:2, left:2,
          width  : this.naturalWidth,
          height : this.naturalHeight
        })
        // Zoom it
        let r_im2 = r_img.zoomTo({
          width  : viewport.width, 
          height : viewport.height,
          mode   : this.fitMode
        })
        // mark
        this.inViewport = viewport.contains(r_im2, 2)
        // append to css
        css.width  = r_im2.width
        css.height = r_im2.height
        css.left = (viewport.width  - r_im2.width)  / 2
        css.top  = (viewport.height - r_im2.height) / 2
        css.visibility = "visible"
      }
      // done
      return Ti.Css.toStyle(css)
    }
  },
  ///////////////////////////////////
  methods : {
    onImageLoaded() {
      let $img = this.$refs.the_image
      if($img) {
        this.naturalWidth  = $img.naturalWidth
        this.naturalHeight = $img.naturalHeight
        this.imgLoading = false
      }
    },
    onResizeViewport() {
      let r_vpt = Ti.Rects.createBy(this.$refs.con)
      this.viewportWidth  = r_vpt.width
      this.viewportHeight = r_vpt.height
    },
    onToggleImageFitMode() {
      this.fitMode = ({
        "contain" : "cover",
        "cover"   : "contain"
      })[this.fitMode]
    }
  },
  ///////////////////////////////////
  mounted : function(){
    Ti.Viewport.watch(this, {resize : ()=>{
      this.onResizeViewport()
    }})
    this.onResizeViewport()
  },
  ///////////////////////////////////
  beforeDestroy : function(){
    Ti.Viewport.unwatch(this)
  }
  ///////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-thing-manager-methods.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/thing/manager/wn-thing-manager-methods.mjs'] = (function(){
const _M = {
  //--------------------------------------
  //
  //           Batch Update
  //
  //--------------------------------------
  async batchUpdate() {
    //....................................
    // Prepare the data
    if(_.isEmpty(this.checkedItems)) {
      return Ti.Toast.Open("i18n:batch-none", "warn")
    }
    let current = _.first(this.checkedItems)
    //....................................
    let batch = _.get(this.config, "schema.behavior.batch") || {}
    _.defaults(batch, {
      "comType" : "wn-obj-form",
      "comConf" : {},
      "fields" : "schema.meta.comConf.fields",
      "names" : null,
      "valueKey": "data"
    })
    batch.comType = _.kebabCase(batch.comType)
    // Add default setting
    if(/^(ti-|wn-obj-)(form)$/.test(batch.comType)) {
      _.defaults(batch.comConf, {
        autoShowBlank: false,
        updateBy: true,
        setDataBy: true
      })
    }
    //....................................
    let name_filter;
    if(_.isString(batch.names)) {
      if(batch.names.startsWith("^")){
        let regex = new RegExp(batch.names)
        name_filter = fld => regex.test(fld.name)
      }
      else if(batch.names.startsWith("!^")){
        let regex = new RegExp(batch.names.substring(1))
        name_filter = fld => !regex.test(fld.name)
      }
      else {
        let list = Ti.S.toArray(batch.names)
        name_filter = fld => list.indexOf(fld.name)>=0
      }
    }
    // Filter by Array
    // TODO maybe I should use the validate
    else if(_.isArray(batch.names) && !_.isEmpty(batch.names)) {
      name_filter = v => batch.name.indexOf(v)>=0
    }
    // Allow all
    else {
      name_filter = fld => {
        //console.log(fld)
        // It is dangour when batch update
        // Many thing item may refer to same file
        if(/^(wn-upload-file|wn-imgfile)$/.test(fld.comType))
          return false
        return true
      }
    }

    //....................................
    // Prepare the fields
    let fields = _.get(this.config, batch.fields)
    //....................................
    // Define the filter processing
    const do_filter_fields = function(flds=[], filter) {
      let list = []
      for(let fld of flds) {
        // Group
        if(_.isArray(fld.fields)) {
          let f2 = _.cloneDeep(fld)
          f2.fields = do_filter_fields(fld.fields, filter)
          if(!_.isEmpty(f2.fields)) {
            list.push(f2)
          }
        }
        // Fields
        else if(filter(fld)) {
          list.push(fld)
        }
      }
      return list
    }
    //....................................
    // filter each fields
    fields = do_filter_fields(fields, name_filter)
    //....................................
    // Open the Modal
    let updates = await Ti.App.Open({
      title: "i18n:batch-update",
      width: 640,
      height: "90%",
      position: "top",
      //............................
      comType: "inner-body",
      //............................
      components: [{
        name: "inner-body",
        globally : false,
        data: {
          update: {},
          value: current,
          innerComConf: {
            ... batch.comConf,
            fields
          }
        },
        template: `<${batch.comType}
          v-bind="innerComConf"
          :${batch.valueKey}="value"
          @field:change="OnFieldChange"
          @change="OnChange"/>`,
        methods: {
          OnFieldChange({name, value}){
            _.set(this.update, name, value)
            this.$notify("change", this.update)
          },
          OnChange(payload) {
            this.value = payload
          }
        }
      }]
      //............................
    })
    //....................................
    if(!_.isEmpty(updates)) {
      // Get all checkes
      await Ti.App(this).dispatch("main/batchUpdateMetas", updates)
    }
  },
  //--------------------------------------
  //
  //      Utility: show/hide block
  //
  //--------------------------------------
  changeShown(shown={}) {
    Ti.App(this).dispatch("main/doChangeShown", shown)
  },
  //--------------------------------------
  showBlock(name) {
    //console.log("showBlock", name)
    // If creator, then must leave the recycle bin
    if("creator" == name) {
      if(this.status.inRecycleBin) {
        Ti.Alert("i18n:thing-create-in-recyclebin", {
          title : "i18n:warn",
          icon  : "im-warning",
          type  : "warn"
        })
        return
      }
    }
    if("files" == name) {
      Ti.App(this).dispatch("main/reloadFiles")
    }
    else if("content" == name) {
      //Ti.App(this).dispatch("main/reloadFiles")
      Ti.App(this).dispatch("main/current/reload")
    }
    // Mark block
    Ti.App(this).dispatch("main/doChangeShown", {[name]:true})
  },
  //--------------------------------------
  hideBlock(name) {
    Ti.App(this).dispatch("main/doChangeShown", {[name]:false})
  },
  //--------------------------------------
  toggleBlock(name) {
    Ti.App(this).dispatch("main/doChangeShown", {
      [name]: !this.TheShown[name]
    })
  },
  //--------------------------------------
  //
  //           Utility: Others
  // 
  //--------------------------------------
  async invoke(fnName) {
    //console.log("invoke ", fnName)
    let fn = _.get(this.SchemaMethods, fnName)
    // Invoke the method
    if(_.isFunction(fn)) {
      return await fn.apply(this, [])
    }
    // Throw the error
    else {
      throw Ti.Err.make("e.thing.fail-to-invoke", fnName)
    }
  }
  //--------------------------------------
}
return _M;;
})()
// ============================================================
// EXPORT 'leaflet-mock-methods.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/gis/leaflet/leaflet-mock-methods.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //--------------------------------------
  // @return [lat, lng]
  mockPair(lat_lng=true) {
    let lat = this.geo.S + (this.geo.N - this.geo.S) * Math.random()
    let lng = this.geo.W + (this.geo.E - this.geo.W) * Math.random()
    return lat_lng 
      ? [lat, lng]
      : [lng, lat]
  },
  //--------------------------------------
  mockPairList(n = 100, lat_lng=true) {
    let list = []
    for(let i=0; i<n; i++){
      list.push(this.mockPair(lat_lng))
    }
    return list
  }
  //--------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-table-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/table/ti-table-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  "iconBy" : {
    type : [String, Function],
    default : null
  },
  "indentBy" : {
    type : [String, Function],
    default : null
  },
  "fields" : {
    type : Array,
    default : ()=>[]
  },
  "head" : {
    type : String,
    default : "frozen",
    validator : v =>
      Ti.Util.isNil(v) 
      || /^(frozen|none|normal)$/.test(v)
  },
  "border" : {
    type : String,
    default : "cell",
    validator : v => /^(row|column|cell|none)$/.test(v)
  },
  "autoScrollIntoView" : {
    type : Boolean,
    default : true
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-media-image.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/media/image/web-media-image.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////
  data: ()=>({
    showZoomPick  : false,
    showZoomDock  : false,
    naturalWidth  : -1,
    naturalHeight : -1,
    clientWidth  : -1,
    clientHeight : -1,
    imgLoading : true,
    pickRect : {}
  }),
  /////////////////////////////////////////
  props : {
    "src" : {
      type : [String, Object],
      default : undefined
    },
    "preview": {
      type: Object,
      default: undefined
    },
    "text": {
      type: String,
      default: undefined
    },
    "textStyle": {
      type: Object,
      default: undefined
    },
    "href": {
      type: String,
      default: undefined
    },
    "navTo": {
      type: Object,
      default: undefined
    },
    "newtab": {
      type: [String, Boolean],
      default: undefined
    },
    "i18n": {
      type: Boolean,
      default: true
    },
    "width": {
      type: [String, Number],
      default: undefined
    },
    "height": {
      type: [String, Number],
      default: undefined
    },
    /*
    Show zoom lens and dock aside to the image
    - pickWidth : (0-1) percent | >1 for pixcle
    - scale : 2 zoome leave base on pick zoomLens
    - dockMode  : "V"
    - dockSpace : 10
    */
    "zoomLens" : {
      type : Object,
      default : undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "has-href" : this.TheHref ? true : false,
        "no-href"  : this.TheHref ? false : true
      })
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //--------------------------------------
    TextStyle() {
      return Ti.Css.toStyle(this.textStyle)
    },
    //--------------------------------------
    TheZoomLens() {
      if(!this.zoomLens || this.clientWidth<=0 || this.clientHeight<=0)
        return
      
      let pickW = _.get(this.zoomLens, "pickWidth", .618)
      let pickH = _.get(this.zoomLens, "pickHeight", -1)

      let zl = {}
      zl.pickWidth = pickW < 1 
            ? this.clientWidth * pickW
            : pickW;
      zl.pickHeight = pickH <= 0
            ? zl.pickWidth
            : (pickH < 1 ? this.clientHeight*pickH : pickH)
      
      let scale = _.get(this.zoomLens, "scale", 2)
      zl.dockWidth  = zl.pickWidth  * scale
      zl.dockHeight = zl.pickHeight * scale

      _.defaults(zl, {
        dockMode  : "V",
        dockSpace : {x: 10, y:0},
        dockPosListY: ["top", "bottom"]
      })

      return zl
    },
    //--------------------------------------
    ZoomLenPickStyle() {
      if(this.zoomLens && !_.isEmpty(this.pickRect)){
        return Ti.Css.toStyle({
          visibility : this.showZoomPick ? "visible" : "hidden",
          top    : this.pickRect.top,
          left   : this.pickRect.left,
          width  : this.TheZoomLens.pickWidth,
          height : this.TheZoomLens.pickHeight
        })
      }
    },
    //--------------------------------------
    ZoomLenDockStyle() {
      if(this.zoomLens && !_.isEmpty(this.pickRect)) {
        let scale = _.get(this.zoomLens, "scale", 2)
        let cW = this.clientWidth
        let cH = this.clientHeight
        let pLeft = this.pickRect.left
        let pTop  = this.pickRect.top
        return Ti.Css.toStyle({
          visibility : this.showZoomDock ? "visible" : "hidden",
          width  : this.TheZoomLens.dockWidth,
          height : this.TheZoomLens.dockHeight,
          backgroundImage: `url("${this.TheSrc}")`,
          backgroundSize : `${cW*scale}px ${cH*scale}px`,
          backgroundPosition: `${pLeft*scale*-1}px ${pTop*scale*-1}px`
        })
      }
    },
    //--------------------------------------
    TheSrc() {
      return Ti.WWW.evalObjPreviewSrc(this.src, this.preview)
    },
    //--------------------------------------
    TheText() {
      if(this.text) {
        let str = this.text
        if(_.isPlainObject(this.src)) {
          str = Ti.Util.explainObj(this.src, this.text)
        }
        if(this.i18n) {
          str = Ti.I18n.text(str)
        }
        return str
      }
    },
    //--------------------------------------
    TheHref() {
      if(this.href) {
        let href = this.href
        if(_.isPlainObject(this.src)) {
          href = Ti.Util.explainObj(this.src, this.href)
        }
        return href
      }
    },
    //--------------------------------------
    isNewTab() {
      let newtab = this.newtab
      if(_.isString(newtab)) {
        if(_.isPlainObject(this.src)) {
          newtab = Ti.Util.explainObj(this.src, this.newtab)
        }
      }
      return newtab ? true : false
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnImageLoaded() {
      let $img = this.$refs.img
      if($img) {
        this.naturalWidth  = $img.naturalWidth
        this.naturalHeight = $img.naturalHeight
        this.clientWidth  = $img.clientWidth
        this.clientHeight = $img.clientHeight
        this.imgLoading = false
      }
    },
    //--------------------------------------
    OnClickTop(evt) {
      if(this.navTo) {
        evt.preventDefault()
        this.$notify("nav:to", this.navTo)
      }
    },
    //--------------------------------------
    OnMouseMove($event) {
      if(!_.isElement(this.$refs.img) || !_.isElement(this.$refs.pick)) {
        return
      }
      let imRect = Ti.Rects.createBy(this.$refs.img)
      let pkRect = Ti.Rects.createBy(this.$refs.pick)
      let {clientX, clientY} = $event

      let rect = Ti.Rects.create({
        x: clientX, y: clientY,
        width  : pkRect.width, 
        height : pkRect.height
      })
      imRect.wrap(rect)
      rect.relative(imRect)

      this.pickRect = rect
      this.showZoomPick = true
    },
    //--------------------------------------
    OnMouseLeave() {
      this.showZoomPick = false
      this.showZoomDock = false
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "showZoomPick" : function(newVal) {
      if(newVal && this.zoomLens) {
        this.$nextTick(()=>{
          Ti.Dom.dockTo(this.$refs.dock, this.$refs.img, {
            mode  : this.TheZoomLens.dockMode,
            space : this.TheZoomLens.dockSpace,
            posListX : this.TheZoomLens.dockPosListX,
            posListY : this.TheZoomLens.dockPosListY
          })
          _.delay(()=>{
            this.showZoomDock = true
          }, 100)
        })
      }
    }
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-obj-preview.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/preview/wn-obj-preview.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //////////////////////////////////////////
  data : ()=>({
    isInFullScreen : false,
    isShowInfo     : false,
    isFloatInfo    : false
  }),
  //////////////////////////////////////////
  props : {
    "meta" : {
      type : Object,
      default : ()=>({})
    },
    "status" : {
      type : Object,
      default : ()=>({})
    },
    "blankAs" : {
      type : Object,
      default : ()=>({
        icon : "fas-braille",
        text : "i18n:empty"
      })
    },
    "blankClass": {
      type: String,
      default: "as-big",
      validator: v=>/^as-(big|hug|big-mask|mid-tip)$/.test(v)
    },
    "actions" : {
      type : Array,
      default : ()=>["fullscreen", "newtab", "download", "info"]
    },
    "showInfo" : {
      type : Boolean,
      default : false
    },
    "floatInfo" : {
      type : Boolean,
      default : false
    },
    "editInfoBy" : {
      type : [Function, String],
      default : null
    },
    "infoPosition" : {
      type : String,
      default : "bottom",
      validator: (val)=>/^(bottom|left)$/.test(val)
    },
    "infoNameWidth" : {
      type : [String, Number],
      default : 50
    },
    "infoValueWidth" : {
      type : [String, Number],
      default : 200
    },
    "infoFields" : {
      type : Array,
      default : ()=>["nm", "tp", "mime", "width", "height", "len", "duration"]
    },
    // Store the status in Local
    "stateLocalKey" : {
      type : String,
      default : null
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    hasMeta() {
      return _.isEmpty(this.meta) ? false : true
    },
    //--------------------------------------
    TopClass() {
      return {
        "is-fullscreen" : this.isInFullScreen,
        "is-show-info"  : this.isShowInfo,
        "is-float-info" : this.isFloatInfo,
        [`is-info-at-${this.infoPosition}`] : true        
      }
    },
    //--------------------------------------
    DataSource() {
      if(!this.meta)
        return ""
      let link = Wn.Util.getDownloadLink(this.meta, {mode:"auto"})
      return link.toString();
    },
    //--------------------------------------
    DataIcon() {
      return Wn.Util.getIconObj(this.meta)
    },
    //--------------------------------------
    DataTitle() {
      return Wn.Util.getObjDisplayName(this.meta)
    },
    //--------------------------------------
    PreviewCom() {
      if(this.meta) {
        // File
        let mime = this.meta.mime || ""
        let m = /^(video|audio|image)\/.+$/.exec(mime)
        // Video/Audio/Image
        if(m){
          return {
            comType : `ti-media-${m[1]}`,
            comConf : {
              src : this.DataSource
            }
          }
        }
        // Binary
        return {
          comType : "ti-media-binary",
          comConf : {
            src : this.DataSource,
            icon : this.DataIcon,
            title : this.DataTitle,
            download : this.meta.race == 'FILE'
          }
        }
      }
    },
    //--------------------------------------
    PreviewInfoPinIcon() {
      return this.isFloatInfo 
        ? 'fas-thumbtack'
        : 'zmdi-layers'
    },
    //--------------------------------------
    PrevewInfoFields() {
      return Wn.Obj.evalFields(this.meta, this.infoFields, (fld)=>{
        if(fld.quickName  && _.isUndefined(fld.value)) {
          return
        }
        if("Group" == fld.type) {
          return fld
        }
        return _.defaults(fld, {
          nameWidth  : this.infoNameWidth,
          valueWidth : this.infoValueWidth
        })
      })
    },
    //--------------------------------------
    TheActions() {
      let list = []
      if(this.hasMeta) {
        _.forEach(this.actions, (it)=>{
          //..........................
          // full screen
          if("fullscreen" == it) {
            if(!this.isInFullScreen) {
              list.push({
                icon : "zmdi-fullscreen",
                text : "i18n:wop-fullscreen-enter",
                action : ()=>this.enterFullscreen()
              })
            }
            // Exit FullScreen
            else {
              list.push({
                icon : "zmdi-fullscreen-exit",
                text : "i18n:wop-fullscreen-quit",
                action : ()=>this.exitFullscreen()
              })
            }
          }
          //..........................
          // Open
          else if("newtab" == it) {
            list.push({
              icon : "zmdi-open-in-new",
              text : "i18n:open-newtab",
              action : ()=>this.openInNewTab()
            })
          }
          //..........................
          // Download
          else if("download" == it) {
            list.push({
              icon : "zmdi-download",
              text : "i18n:download-to-local",
              action : ()=>this.download()
            })
          }
          //..........................
          // Toggle Info
          else if("info" == it) {
            if(!this.isShowInfo) {
              list.push({
                icon : "zmdi-info",
                text : "i18n:info",
                action : ()=>this.doShowInfo()
              })
            }
            // Show Info
            else {
              list.push({
                icon : "zmdi-info-outline",
                text : "i18n:info",
                action : ()=>this.doHideInfo()
              })
            }
          }
          //..........................
          else if(_.isPlainObject(it) && it.action) {
            list.push(it)
          }
          //..........................
        })
      }
      //................................
      return list
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnAction(action) {
      // Exec command
      if(_.isString(action)) {
        Ti.App(this).exec(actionName)
      }
      // Call function
      else if(_.isFunction(action)) {
        action()
      }
    },
    //--------------------------------------
    OnEditInfo() {
      if(this.meta) {
        // Command
        if(_.isString(this.editInfoBy)) {
          Ti.App(this).exec(this.editInfoBy, this.meta)
        }
        // Function Invoking
        else if(_.isFunction(this.editInfoBy)) {
          this.editInfoBy(this.meta)
        }
        // Default to open the dialog
        else {
          Wn.EditObjMeta(this.meta)
        }
      }
    },
    //--------------------------------------
    enterFullscreen() {
      this.isInFullScreen = true
      this.resizeMediaViewport()
    },
    //--------------------------------------
    exitFullscreen() {
      this.isInFullScreen = false
      this.resizeMediaViewport()
    },
    //--------------------------------------
    doShowInfo() {
      this.isShowInfo = true
      this.saveStateToLocal()
      this.resizeMediaViewport()
    },
    //--------------------------------------
    doHideInfo() {
      this.isShowInfo = false
      this.saveStateToLocal()
      this.resizeMediaViewport()
    },
    //--------------------------------------
    toggleInfoFloat() {
      this.isFloatInfo = !this.isFloatInfo
      this.saveStateToLocal()
      this.resizeMediaViewport()
    },
    //--------------------------------------
    resizeMediaViewport() {
      for(let $child of this.$children) {
        if(_.isFunction($child.onResizeViewport)) {
          this.$nextTick(()=>{
            $child.onResizeViewport()
          })
        }
      }
    },
    //--------------------------------------
    openInNewTab() {
      let link = Wn.Util.getAppLink(this.meta)
      Ti.Be.OpenLink(link)
    },
    //--------------------------------------
    download() {
      let link = Wn.Util.getDownloadLink(this.meta)
      Ti.Be.OpenLink(link)
    },
    //--------------------------------------
    saveStateToLocal() {
      if(this.stateLocalKey) {
        Ti.Storage.session.mergeObject(this.stateLocalKey, {
          isShowInfo     : this.isShowInfo,
          isFloatInfo    : this.isFloatInfo
        })
        // let state = Ti.Storage.session.getObject(this.stateLocalKey)
        // console.log("-> saveStateToLocal", state)
      }
    },
    //--------------------------------------
    loadStateFromLocal() {
      if(this.stateLocalKey) {
        let state = Ti.Storage.session.getObject(this.stateLocalKey)
        //console.log("<- loadStateFromLocal", state)
        _.defaults(state, {
          isShowInfo     : this.isShowInfo,
          isFloatInfo    : this.isFloatInfo
        })
        this.isShowInfo  = state.isShowInfo
        this.isFloatInfo = state.isFloatInfo
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "showInfo" : function(val) {
      console.log("showInfo watched")
      this.isShowInfo = val
    },
    "floatInfo" : function(val) {
      console.log("floatInfo watched")
      this.isFloatInfo = val
    }
  },
  //////////////////////////////////////////
  mounted : function() {
    this.isShowInfo  = this.showInfo
    this.isFloatInfo = this.floatInfo
    this.$nextTick(()=>{
      this.loadStateFromLocal()
    })
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-label-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/label/ti-label-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "value" : null,
  "dict" : {
    type : [String, Ti.Dict],
    default : undefined
  },
  "trimed" : {
    type : Boolean,
    default : true
  },
  "format" : {
    type : [String, Function],
    default : undefined
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "href" : {
    type : String,
    default : undefined
  },
  "newTab" : {
    type : Boolean,
    default : false
  },
  "editable" : {
    type : Boolean,
    default : false
  },
  "hover" : {
    type : [Array, String],
    default : ()=>["suffixIcon"]
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "placeholder" : {
    type : [String, Number],
    default : "i18n:nil"
  },
  "autoI18n" : {
    type : Boolean,
    default : true
  },
  "prefixIcon" : {
    type : String,
    default : undefined
  },
  "prefixText" : {
    type : String,
    default : undefined
  },
  "suffixText" : {
    type : String,
    default : undefined
  },
  "suffixIcon" : {
    type : String,
    default : undefined
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width" : {
    type : [Number, String],
    default : undefined
  },
  "height" : {
    type : [Number, String],
    default : undefined
  },
  "valueMaxWidth" : {
    type : [Number, String],
    default : undefined
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-table-resizes.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/table/ti-table-resizes.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////
  data : ()=>({
    myViewportWidth : 0,  // Update-in-time, root element width
    myTableWidth: 0,      // Update-in-time, table width
    myColSizes: {
      priHead : [],  // Primary head column sizing
      priBody : [],  // Primary body column sizing
      primary : [],  // Primary Max Col-Sizes
      fixeds  : [],  // Fixed value [480, .23, 'auto', 'stretch']
                     // Eval when `evalEachColumnSize`
                     //  - 480 : fixed width
                     //  - -480 : fixed width and override primary
                     //  - .23 : as percent eval each time resize
                     //  - 'auto' : it will keep the primary sizing
                     //  - 'stretch' : it will join to the auto-remains-assignment
      amended : []   // The col-size to display in DOM
    },
    myCellsReady : false,
    myCellsReport : {},
    I_am_in_resizing : false
  }),
  ///////////////////////////////////////////////////
  methods : {
    //--------------------------------------
    reportReady(rowIndex=-1, cellIndex=-1, isDone=false) {
      let key = `R${rowIndex}-C${cellIndex}`
      //console.log(key, isDone)
      if(isDone) {
        delete this.myCellsReport[key]
      } else {
        this.myCellsReport[key] = isDone
      }
      // Check the status
      _.delay(()=>{
        this.myCellsReady = _.isEmpty(this.myCellsReport)
        // Do resize
        if(this.myCellsReady) {
          this.evalEachColumnSize()
        }
      })
    },
    //--------------------------------------
    evalEachColumnSize() {
      // Guard
      if(this.I_am_in_resizing) {
        return
      }
      //console.log("evalEachColumnSize", this, this.tiComType)

      // Remember the current scrollTop
      let oldScrollTop = _.get(this.$refs.body, "scrollTop")

      // Reset each column size
      this.I_am_in_resizing = true
      this.myTableWidth = 0
      this.myColSizes = {
        priHead : [],
        priBody : [],
        primary : [],
        fixeds  : [],
        amended : []
      }
      //.........................................
      // Eval the fixeds
      for(let fld of this.TableFields) {
        let fldWidth = fld.width || "stretch"
        // Stretch/Auto
        if(/^(stretch|auto)$/.test(fldWidth)) {
          this.myColSizes.fixeds.push(fldWidth)
        }
        // Fixed or percent
        else {
          this.myColSizes.fixeds.push(Ti.Css.toPixel(fldWidth, 1))
        }
      }
      //.........................................
      // Wait reset applied, and ...
      this.$nextTick(()=>{
        // Get original size: head
        let $heads = Ti.Dom.findAll(".table-head ul li", this.$el)
        for(let $he of $heads) {
          let rect = Ti.Rects.createBy($he)
          this.myColSizes.priHead.push(rect.width)
        }

        // Get original size: body
        let $rows = Ti.Dom.findAll(".table-body .table-row", this.$el)
        for(let $row of $rows) {
          let $cells = Ti.Dom.findAll(":scope > div", $row)
          for(let x=0; x<$cells.length; x++) {
            let $cell = $cells[x]
            let rect = Ti.Rects.createBy($cell)
            if(x>= this.myColSizes.priBody.length) {
              this.myColSizes.priBody[x] = rect.width
            } else {
              this.myColSizes.priBody[x] = Math.max(
                rect.width, this.myColSizes.priBody[x]
              )
            }
          }
        }

        // Count the primary max sizing for each columns
        for(let i=0; i<this.myColSizes.priHead.length; i++) {
          let wHeadCell = this.myColSizes.priHead[i]
          let wBodyCell = this.myColSizes.priBody[i]
          let w = Math.max(wHeadCell, wBodyCell)
          this.myColSizes.primary.push(w)
        }

        // Resize Table
        this.onTableResize()

        // Mark back the resizing and restore scrollTop
        _.delay(()=>{
          this.I_am_in_resizing = false
          if(this.$refs.body)
            this.$refs.body.scrollTop = oldScrollTop
        }, 10)
      })
    },
    //--------------------------------------
    onTableResize() {
      // Guard it
      let colN = this.myColSizes.primary.length
      if(colN <= 0) {
        return
      }

      // Get the viewport width
      let viewportWidth = Ti.Rects.createBy(this.$el).width
      //console.log("onTableResize")

      // Assign the fixed width
      // And count how many fields to join the remains-assignment
      let raIndexs = [];
      let amended = []
      for(let i=0; i<this.myColSizes.fixeds.length; i++) {
        let fxW = this.myColSizes.fixeds[i]
        // Get the primary width
        let priW = this.myColSizes.primary[i]
        // join to auto-remains-assignment
        if("stretch" == fxW) {
          raIndexs.push(i)
          amended.push(priW)
        }
        // keep primary
        else if("auto" == fxW) {
          amended.push(priW)
        }
        // Eval percent
        else if(fxW <= 1 && fxW > 0) {
          amended.push(fxW * viewportWidth)
        }
        // Eval percent and join remains-assignment
        else if(fxW < 0 && fxW >= -1) {
          let w = Math.abs(fxW * viewportWidth)
          amended.push(Math.max(w, priW))
        }
        // Fixed width and join remains-assignment
        else if(fxW < -1) {
          let w = Math.abs(fxW)
          amended.push(Math.max(w, priW))
        }
        // Fixed width
        else {
          amended.push(fxW)
        }
      }

      // Count the tableWidth
      let sumWidth = _.sum(amended)
      let tableWidth = Math.max(viewportWidth, sumWidth)
      this.myTableWidth = tableWidth

      // Assign the remain
      if(raIndexs.length > 0) {
        let remain = tableWidth - sumWidth
        if(remain > 0) {
          let remainCell = remain / raIndexs.length
          for(let index of raIndexs) {
            amended[index] += remainCell
          }
        }
      }

      // apply amended
      this.myColSizes.amended = amended
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////////////
  mounted : async function() {
    //.................................
    Ti.Viewport.watch(this, {
      resize : _.debounce(()=>this.onTableResize(), 10)
    })
    //.................................
  },
  ///////////////////////////////////////////////////
  beforeDestroy : function(){
    Ti.Viewport.unwatch(this)
  }
  ///////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-shelf-wall.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/shelf/wall/web-shelf-wall.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data: ()=>({
    myRows: 0,
    myColumns: 0,
    myLastCols: 0
  }),
  //////////////////////////////////////////
  props : {
    "data" : {
      type : Array,
      default : undefined
    },
    "layout" : {
      type : String,
      default : "horizontal",
      validator: v => /^(tile|horizontal|vertical)$/.test(v)
    },
    // Item comType
    "comType": {
      type: String,
      default: "ti-label"
    },
    "comConf": {
      type: [Object, String],
      default: ()=>({
        value: "=.."
      })
    },
    "itemClass" : {
      type : [String, Array],
      default : undefined
    },
    "itemStyle" : {
      type : [Object, Array],
      default : undefined
    },
    "itemWidth" : {
      type : [String, Number, Array],
      default : undefined
    },
    "itemHeight" : {
      type : [String, Number, Array],
      default : undefined
    },
    "blankAs": {
      type: Object,
      default: ()=>({
        text: "i18n:empty",
        icon: "fas-box-open"
      })
    },
    "loadingAs": {
      type: [Object, Boolean],
      default: ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-layout" : this.layout
      })
    },
    //--------------------------------------
    getItemClass() {
      let itKlass = _.without(_.concat(this.itemClass))
      return (index)=> {
        let w, h, i;
        if(itKlass.length > 0) {
          i = Ti.Num.scrollIndex(index, itKlass.length)
          return itKlass[i]
        }
      }
    },
    //--------------------------------------
    getItemStyle() {
      let itWs = _.without(_.concat(this.itemWidth))
      let itHs = _.without(_.concat(this.itemHeight))
      let itStyles = _.without(_.concat(this.itemStyle))
      return (index)=> {
        let w, h, sty, i;
        if(itWs.length > 0) {
          i = Ti.Num.scrollIndex(index, itWs.length)
          w = itWs[i]
        }
        if(itHs.length > 0) {
          i = Ti.Num.scrollIndex(index, itHs.length)
          h = itHs[i]
        }
        if(itStyles.length > 0) {
          i = Ti.Num.scrollIndex(index, itStyles.length)
          sty = itStyles[i]
        }
        return {
          ...(sty||{}),
          width  : Ti.Css.toSize(w),
          height : Ti.Css.toSize(h)
        }
      }
    },
    //--------------------------------------
    WallItems() {
      if(!_.isArray(this.data))
        return []
      
      let list = []      
      for(let i=0; i < this.data.length; i++) {
        let it = this.data[i]
        list.push({
          key: `It-${i}`,
          className : this.getItemClass(i),
          style : this.getItemStyle(i),
          comType: this.comType,
          comConf: Ti.Util.explainObj(it, this.comConf)
        })        
      }
      
      return list
    },
    //--------------------------------------
    BlankItems() {
      let list = []
      let index = this.WallItems.length
      for(let i=this.myLastCols; i<this.myColumns; i++) {
        list.push({
          key : `Blank-It-${i}`,
          className : this.getItemClass(index+i),
          style : this.getItemStyle(index+i)
        })
      }
      return list
    },
    //--------------------------------------
    isLoading() {
      return Ti.Util.isNil(this.data)
    },
    //--------------------------------------
    isEmpty() {
      return _.isEmpty(this.WallItems)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnWallResize() {
      this.$nextTick(()=>{
        this.evalWallColumns(this.$refs.group)
      })
    },
    //--------------------------------------
    evalWallColumns($wallGroup) {
      // Customized item width
      if(_.isArray(this.itemWidth) && this.itemWidth.length > 1) {
        return
      }
      // console.log("evalWallColumns")
      let $divs = Ti.Dom.findAll(":scope >  .wall-tile.is-com", $wallGroup)
      let cols = 0;
      let rows = this.isEmpty ? 0 : 1;
      let last = 0;
      if(!_.isEmpty($divs)) {
        let top = -1;
        for(let $div of $divs) {
          let rect = $div.getBoundingClientRect()
          let divTop = parseInt(rect.top)
          if(top < 0) {
            top  = divTop
          }
          if(top == divTop) {
            last ++
          }
          // Find the next row
          else {
            cols = Math.max(cols, last)
            top = divTop;
            rows ++;
            last = 1;
          }
        }
        cols = Math.max(cols, last)
      }
      this.myColumns = cols;
      this.myRows = rows;
      this.myLastCols = last;
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "data" : "OnWallResize"
  },
  //////////////////////////////////////////
  mounted : function() {
    //.................................
    Ti.Viewport.watch(this, {
      resize : _.debounce(()=>this.OnWallResize(), 20)
    })
    //.................................
    // this.OnWallResize()
    //.................................
  },
  //////////////////////////////////////////
  destroyed : function() {
    Ti.Viewport.unwatch(this)
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'preview-info-field.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/preview/com/preview-info-field/preview-info-field.mjs'] = (function(){
/////////////////////////////////////////////////////
const _M = {
  ///////////////////////////////////////////////////
  data: ()=>({
    theValue : null
  }),
  ///////////////////////////////////////////////////
  props : {
    "icon" : {
      type : String,
      default : null
    },
    "data" : {
      type : Object,
      default : ()=>({})
    },
    "type" : {
      type : String,
      default : "String"
    },
    "title" : {
      type : String,
      default : null
    },
    "name" : {
      type : String,
      default : null
    },
    "dict" : {
      type : String,
      default : null
    },
    "nameWidth" : {
      type : [String, Number],
      default : 50
    },
    "valueWidth" : {
      type : [String, Number],
      default : 200
    },
    "transformer" : {
      type : [String,Object,Function],
      default : null
    }
  },
  ///////////////////////////////////////////////////
  watch : {
    "data" : async function() {
      this.theValue = await this.evalTheValue()
    },
    "name" : async function() {
      this.theValue = await this.evalTheValue()
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    theTransformer() {
      let trans = this.transformer
          || "Ti.Types." + Ti.Types.getFuncByType(this.type||"String", "transformer")

      return Ti.Util.genInvoking(trans, {
        context: this.data,
        partial: "right"
      })
    },
    theNameStyle() {
      return Ti.Css.toStyle({
        "width" : this.nameWidth
      })
    },
    theValueStyle() {
      return Ti.Css.toStyle({
        "width" : this.valueWidth
      })
    }
  },
  ///////////////////////////////////////////////////
  methods : {
    async evalTheValue() {
      let val = _.get(this.data, this.name)

      if(this.dict) {
        val = await wn.Dict.get(this.dict, val)
      }

      if(_.isFunction(this.theTransformer)) {
        val = this.theTransformer(val)
      }

      return val
    }
  },
  ///////////////////////////////////////////////////
  mounted : async function(){
    this.theValue = await this.evalTheValue()
  }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-pay-done-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/pay/done/web-pay-done-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  "waitIcon": {
    type : String,
    default : "fas-spinner fa-spin"
  },
  "waitText": {
    type : String,
    default : "i18n:loading"
  },
  "okIcon": {
    type : String,
    default : "im-check-mark-circle"
  },
  "okText": {
    type : String,
    default : "i18n:pay-re-ok"
  },
  // [{icon, text, href(for newTab), path(for navTo)}]
  "okLinks": {
    type: Array,
    default: ()=>[]
  },
  "failIcon": {
    type : String,
    default : "im-warning"
  },
  "failText": {
    type : String,
    default : "i18n:pay-re-fail"
  },
  // [{icon, text, href(for newTab), path(for navTo)}]
  "failLinks": {
    type: Array,
    default: ()=>[]
  },
  // [{icon, text, href(for newTab), path(for navTo)}]
  "doneLinks": {
    type: Array,
    default: ()=>[]
  },
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-pay-proceed-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/pay/proceed/web-pay-proceed-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  "watchUser" : {
    type : String,
    default : null
  },
  "qrcodeSize": {
    type: [String, Number],
    default: 200
  },
  "checkPaymentInterval": {
    type: Number,
    default: 3000
  },
  "fetchOrder": {
    type: Function,
    default: undefined
  },
  "payOrder": {
    type: Function,
    default: undefined
  },
  "createOrder": {
    type: Function,
    default: undefined
  },
  "checkOrder": {
    type: Function,
    default: undefined
  },
  "returnUrl": {
    type: String,
    default: undefined
  },
  "orderTitle": {
    type: String,
    default: undefined
  },
  "orderType": {
    type: String,
    default: "A"
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-fileset-list.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/fileset/list/wn-fileset-list.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data: ()=>({
    updating : false,
    saving : false,
    reloading : undefined,
    listData : [],
    currentIndex : undefined,
    currentMeta : undefined,
    currentContent : undefined,
    loadedCurrentContent : undefined,
    metaFieldStatus : {}
  }),
  ////////////////////////////////////////////////////
  props : {
    "match" : {
      type : Object,
      default : ()=>({
        race : "FILE"
      })
    },
    "createTip" : {
      type : String,
      default : "i18n:wn-fsc-mail-tmpl-new"
    },
    "listSize" : {
      type : [Number, String],
      default : 0.3
    },
    "listIcon" : {
      type : String,
      default : "far-list-alt"
    },
    "listTitle" : {
      type : String,
      default : "i18n:list"
    },
    "listType" : {
      type : String,
      default : "TiList"
    },
    "listConf" : {
      type : Object,
      default : ()=>({})
    },
    "metaSize" : {
      type : [Number, String],
      default : 0.3
    },
    "metaIcon" : {
      type : String,
      default : "fas-info-circle"
    },
    "metaTitle" : {
      type : String,
      default : "i18n:properties"
    },
    "metaType" : {
      type : String,
      default : "TiForm"
    },
    "metaConf" : {
      type : Object,
      default : ()=>({})
    },
    "detailSize" : {
      type : [Number, String],
      default : undefined
    },
    "detailIcon" : {
      type : String,
      default : "fas-info-circle"
    },
    "detailTitle" : {
      type : String,
      default : "i18n:detail"
    },
    "detailType" : {
      type : String,
      default : "TiTextRaw"
    },
    "detailConf" : {
      type : Object,
      default : ()=>({})
    },
    "autoSelect" : {
      type : Boolean,
      default : true
    },
    "autoKeepSelectBy" : {
      type : String,
      default : "CURRENT_ID"
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    isCurrentContentChanged() {
      if(this.currentMeta) {
        return this.currentContent != this.loadedCurrentContent
      }
    },
    //------------------------------------------------
    hasCurrent() {
      return this.currentMeta ? true : false
    },
    //------------------------------------------------
    isGUILoading() {
      return this.updating || this.reloading || this.saving
    },
    //------------------------------------------------
    CurrentId() {
      return _.get(this.currentMeta, "id")
    },
    //------------------------------------------------
    GUILayout() {
      let listBlock = {
        title : this.listTitle,
        icon  : this.listIcon,
        name  : "list",
        size  : this.listSize,
        body  : "list"
      }
      let metaBlock = {
        title : this.metaTitle,
        icon  : this.metaIcon,
        size  : this.metaSize,
        name  : "meta",
        body  : "meta"
      }
      let detailBlock = {
        title : this.detailTitle,
        icon  : this.detailIcon,
        size  : this.detailSize,
        name  : "detail",
        body  : "detail",
        actions : [{
            name : "saving",
            text : "i18n:save",
            icon : "zmdi-floppy",
            altDisplay : {
              "icon" : "fas-spinner fa-pulse",
              "text" : "i18n:saving"
            },
            enabled : "changed",
            action : ()=> {
              this.doSaveCurrentContent()
            }
          }, {
            name : "reloading", 
            text : "i18n:reload",
            icon : "fas-sync",
            altDisplay : {
              "icon" : "fas-sync fa-pulse",
              "text" : "i18n:reloading"
            },
            enabled : "current",
            action : ()=> {
              this.doReloadCurrentContent()
            }
          }]
      }
      if(this.metaType && this.detailType) {
        return {
          type : "cols",
          border : true,
          blocks : [listBlock, {
              type : "rows",
              border : true,
              blocks : [metaBlock, detailBlock]
            }]
        }
      }
      if(this.metaType) {
        return {
          type : "cols",
          className : "show-border",
          blocks : [listBlock, metaBlock]
        }
      }
      return {
        type : "cols",
        className : "show-border",
        blocks : [listBlock, detailBlock]
      }
    },
    //------------------------------------------------
    GUISchema() {
      //..............................................
      let listConf = _.defaults({}, this.listConf, {
        onBeforeChangeSelect : async ()=>{
          if(!(await Ti.Fuse.get().fire())) {
            return false
          }
        },
        changedId : this.isCurrentContentChanged
          ? this.CurrentId
          : undefined,
        display : ["<icon:far-file>", "title|nm"],
        data : "=listData",
        onInit : ($list) => {
          this.$list = $list
        }
      })
      //..............................................
      let metaConf = _.defaults({}, this.metaConf, {
        autoShowBlank : true,
        blankAs : {
          icon : "fas-brush",
          text : "i18n:blank-to-edit"
        },
        data : "=currentMeta",
        fieldStatus : "=metaFieldStatus",
        fields : [{
          title: "i18n:wn-key-title",
          name : "title",
          comType : "ti-input"
        }, {
          title: "i18n:wn-key-nm",
          name : "nm",
          comType : "ti-input"
        }]
      })
      //..............................................
      let detailConf = _.defaults({}, this.detailConf, {
        value : "=currentContent"
      })
      //..............................................
      return {
        list : {
          comType : this.listType,
          comConf : Ti.Util.explainObj(this, listConf)
        },
        meta : {
          comType : this.metaType,
          comConf : Ti.Util.explainObj(this, metaConf)
        },
        detail : {
          comType : this.detailType,
          comConf : Ti.Util.explainObj(this, detailConf)
        }
      }
    },
    //------------------------------------------------
    DetailActionStatus() {
      return {
        saving : this.saving,
        reloading : this.reloading,
        changed : this.isCurrentContentChanged,
        current : this.hasCurrent
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    async OnListSelect({current, currentIndex}) {
      if(!current) {
        this.currentIndex = undefined
        this.currentMeta = undefined
        this.currentContent = undefined
      } else {
        this.currentIndex = currentIndex
        this.currentMeta = current
        await this.doReloadCurrentContent()
        this.metaFieldStatus = {}
      }
    },
    //------------------------------------------------
    OnListOpen() {
      // DO nothing
    },
    //------------------------------------------------
    OnMetaChange(payload) {
      // DO nothing
    },
    //------------------------------------------------
    async OnMetaFieldChange({name, value}) {
      if(this.hasCurrent) {
        this.updating = true
        this.metaFieldStatus = {
          [name] : {type : "spinning"}
        }
        try {
          let reo = await Wn.Io.update(this.currentMeta, {
            [name]: value
          })
          this.updateCurrentMeta(reo)

          this.$nextTick(()=>{
            this.metaFieldStatus = {
              [name] : {type : "ok"}
            }
            _.delay(()=>{
              this.metaFieldStatus = {}
            }, 800)
          })
        }
        // Error
        catch(err) {
          this.metaFieldStatus = {
            [name] : {
              type : "error",
              text : err.errMsg
            }
          }
        }
        // unmark
        finally {
          this.updating = false
        }
      }
    },
    //------------------------------------------------
    OnDetailChange(content) {
      this.currentContent = content
    },
    //------------------------------------------------
    async doCreate() {
      //console.log("doCreate for ", this.meta.ph)
      let newName = _.trim(await Ti.Prompt(this.createTip))

      if(!newName)
        return

      let cmdText = `touch id:${this.meta.id}/${newName}`
      await Wn.Sys.exec(cmdText)

      // Reload
      await this.reload()

      // Highlight it
      let li = this.findDataInListByName(newName)

      if(li && this.$list) {
        this.$nextTick(()=>{
          this.$list.selectRow(li.id)          
        })
      }
      
    },
    //------------------------------------------------
    async doDelete() {
      if(this.hasCurrent && this.findIndexInList() >= 0) {
        this.reloading = true
        await Wn.Sys.exec(`rm id:${this.currentMeta.id}`)
        await this.reload()
        this.currentIndex = undefined
        this.currentMeta = undefined
        this.currentContent = undefined
      }
      // Warn user
      else {
        return await Ti.Toast.Open('i18n:wn-del-none', "warn")
      }
    },
    //------------------------------------------------
    async doRename() {
      if(this.hasCurrent && this.findIndexInList() >= 0) {
        // Get newName from User input
        let newName = await Ti.Prompt({
          text : 'i18n:wn-rename',
          vars : {name:this.currentMeta.nm}
        }, {
          title : "i18n:rename",
          placeholder : this.currentMeta.nm,
          value : this.currentMeta.nm
        })

        // Check name invalid or not
        if(!Wn.Obj.isValidName(newName)) {
          return
        }

        this.reloading = true
        // Do the rename
        let newMeta = await Wn.Sys.exec2(
          `obj id:${this.CurrentId} -cqno -u 'nm:"${newName}"'`,
          {as:"json"})

        // Error
        if(newMeta instanceof Error) {
          await Ti.Toast.Open("i18n:wn-rename-fail", "error")
        }
        // Replace the data
        else {
          await Ti.Toast.Open("i18n:wn-rename-ok", "success")
          this.updateCurrentMeta(newMeta)
        }
        this.$nextTick(()=>{
          this.reloading = false
        })
      }
      // Warn user
      else {
        return await Ti.Toast.Open('i18n:wn-rename-none', "warn")
      }
    },
    //------------------------------------------------
    async openCurrentMeta() {
      let reo = await Wn.EditObjMeta(this.currentMeta, {fields:"auto"})

      if(reo) {
        let {data, saved} = reo
        if(saved) {
          this.updateCurrentMeta(data)
        }
      }
    },
    //------------------------------------------------
    async openContentEditor() {
      let text = await Wn.EditObjContent(this.currentMeta, {
        autoSave : true
      })

      // User cancel
      if(Ti.Util.isNil(text))
        return

      // Update content
      this.currentContent = text
      this.loadedCurrentContent = text
    },
    //------------------------------------------------
    findIndexInList(meta=this.currentMeta) {
      if(meta) {
        let i = -1;
        for(let li of this.listData) {
          i++
          if(li.id == meta.id)
            return  i
        }
      }
      return -1
    },
    //------------------------------------------------
    findDataInListByName(name) {
      if(name) {
        for(let li of this.listData) {
          if(li.nm == name)
            return  li
        }
      }
    },
    //------------------------------------------------
    getCurrentMeta() {
      return _.cloneDeep(this.currentMeta)
    },
    //------------------------------------------------
    updateCurrentMeta(meta) {
      if(this.hasCurrent) {
        this.currentMeta = meta
        this.listData.splice(this.currentIndex, 1, meta)
        if(this.$list) {
          this.$nextTick(()=>{
            this.$list.selectRow(meta.id, {quiet:true})
          })
        }
      }
    },
    //------------------------------------------------
    async doSaveCurrentContent() {
      if(this.hasCurrent && this.isCurrentContentChanged) {
        this.saving = true
        await Wn.Io.saveContentAsText(this.currentMeta, this.currentContent)
        this.loadedCurrentContent = this.currentContent
        this.$nextTick(()=>{
          this.saving = false
        })
      }
    },
    //------------------------------------------------
    async doReloadCurrentContent() {
      if(this.hasCurrent) {
        this.reloading = true
        this.currentContent = await Wn.Io.loadContent(this.currentMeta, {as:"text"})
        this.loadedCurrentContent = this.currentContent
        this.$nextTick(()=>{
          this.reloading = false
        })
      }
    },
    //------------------------------------------------
    autoSelectItem() {
      if(!this.autoSelect)
        return

      if(_.isEmpty(this.listData)) 
        return

      // Recover current selected before
      let rowId;
      if(this.autoKeepSelectBy) {
        let key = `${this.meta.id}_${this.autoKeepSelectBy}`
        rowId = Ti.Storage.session.get(key)
      }

      // Select the first one
      if(Ti.Util.isNil(rowId)) {
        let row = this.$list.getRow(0)
        rowId = _.get(row,  "id")
      }
      
      // Recover the previous selection
      if(!Ti.Util.isNil(rowId)) {
        this.$list.selectRow(rowId)
      }
    },
    //------------------------------------------------
    async reload() {
      this.reloading = true
      this.listData = await this.reloadChildren()
      this.$nextTick(()=>{
        this.reloading = false
        this.$nextTick(()=>{
          this.autoSelectItem()
        })
      })
    }
    //------------------------------------------------
  },
  watch : {
    "isCurrentContentChanged" : function(changed) {
      Ti.App(this).commit("current/setStatus", {
        changed
      })
    },
    "currentMeta" : function(newVal, oldVal) {
      if(this.meta && !_.isEqual(newVal, oldVal) && this.autoKeepSelectBy) {
        let key = `${this.meta.id}_${this.autoKeepSelectBy}`
        if(newVal) {
          Ti.Storage.session.set(key, newVal.id)
        } else {
          Ti.Storage.session.remove(key)
        }
      }
    }
  },
  ////////////////////////////////////////////////////
  mounted : function(){
    //------------------------------------------------
    Ti.Fuse.getOrCreate().add({
      key : "wn-fileset-list",
      everythingOk : ()=>{
        return !this.isCurrentContentChanged
      },
      fail : ()=>{
        Ti.Toast.Open("i18n:wn-obj-nosaved", "warn")
      }
    })
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  beforeDestroy : function(){
    Ti.Fuse.get().remove("wn-fileset-list")
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-chart-raw-bar.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/chart/raw/bar/ti-chart-raw-bar.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  props : {
    "scaleX" : {
      type : Object,
      default : ()=>({
        "range": [0.1, 0.9]
      })
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    ChartSetup() {
      return (chart, data)=>{
        //console.log(data)
        let {list} = this.evalXYData(data)
        if(_.isEmpty(list))
          return

        // Set data
        chart.data(list);

        // Axis/Tick/Tooltip ...
        this.applyChartSetup(chart)

        // Setup view
        let view = chart.interval().position(this.ChartPosition)
        this.applyViewOptions(view, this.view)

      } // ~ function
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-adaptlist-methods.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/adaptlist/wn-adaptlist-methods.mjs'] = (function(){
const OBJ = {
  //---------------------------------------
  /***
   * Create new object
   */
  async doCreate() {
    // Load the creation setting
    let {
      types,
      freeCreate
    } = await Wn.Sys.exec(`ti creation -cqn id:${this.meta.id}`, {as:"json"})

    let no = await Ti.App.Open({
      title : "i18n:create",
      type  : "info",
      position: "top",
      width  : 640,
      height : "61.8%",
      comType : "wn-obj-creation",
      comConf : {
        types, freeCreate,
        autoFocus : true,
        enterEvent : "ok"
      },
      components : ["@com:wn/obj/creation"]
    })

    // console.log(no)
   
    // Do Create
    // Check the newName
    if(no && no.name) {
      // Check the newName contains the invalid char
      if(no.name.search(/[%;:"'*?`\t^<>\/\\]/)>=0) {
        return await Ti.Alert('i18n:wn-create-invalid')
      }
      // Check the newName length
      if(no.length > 256) {
        return await Ti.Alert('i18n:wn-create-too-long')
      }

      // Default Race
      no.race = no.race || "FILE"

      if("folder" == no.type) {
        no.type = undefined
      }
      
      // Auto type
      if("FILE" == no.race) {
        if(!no.type) {
          no.type = Ti.Util.getSuffixName(no.name)
        }

        // Auto append suffix name
        if(!no.name.endsWith(no.type)) {
          no.name += `.${no.type}`
        }
      }
      
      // Do the creation
      let json = JSON.stringify({
        ... no.meta,
        nm : no.name,
        tp : no.type,
        race : no.race,
        mime : no.mime
      })
      // console.log(json)
      let newMeta = await Wn.Sys.exec2(
          `obj id:${this.meta.id} -cqno -new '${json}'`,
          {as:"json"})
      // Error
      if(newMeta instanceof Error) {
        Ti.Toast.Open("i18n:wn-create-fail", "error")
      }
      // Replace the data
      else {
        Ti.Toast.Open("i18n:wn-create-ok", "success")
        await this._run("reload")

        // Make it checked
        this.myCheckedIds = [newMeta.id]
        this.myCurrentId = newMeta.id
      }
    }  // ~ if(newName)
  },
  //--------------------------------------------
  async doRename() {
    let it = this.getCurrentItem()
    if(!it) {
      return await Ti.Toast.Open('i18n:wn-rename-none', "warn")
    }
    this.setItemStatus(it.id, "renaming")
    try {
      // Get newName from User input
      let newName = await Ti.Prompt({
          text : 'i18n:wn-rename',
          vars : {name:it.nm}
        }, {
          title : "i18n:rename",
          placeholder : it.nm,
          value : it.nm
        })
      // Check the newName
      if(newName) {
        // Check name invalid or not
        if(!Wn.Obj.isValidName(newName)) {
          return
        }
        // Check the suffix Name
        let oldSuffix = Ti.Util.getSuffix(it.nm)
        let newSuffix = Ti.Util.getSuffix(newName)
        if('FILE' == it.race && oldSuffix && oldSuffix != newSuffix) {
          let repair = await Ti.Confirm("i18n:wn-rename-suffix-changed")
          if(repair) {
            newName += oldSuffix
          }
        }
        // Mark renaming
        this.setItemStatus(it.id, "loading")
        // Do the rename
        let newMeta = await Wn.Sys.exec2(
            `obj id:${it.id} -cqno -u 'nm:"${newName}"'`,
            {as:"json"})
        // Error
        if(newMeta instanceof Error) {
          await Ti.Toast.Open("i18n:wn-rename-fail", "error")
        }
        // Replace the data
        else {
          await Ti.Toast.Open("i18n:wn-rename-ok", "success")
          this.setItem(newMeta)
        }
        this.setItemStatus({id:it.id, status:{loading:false}})
      }  // ~ if(newName)
    }
    // reset the status
    finally {
      this.setItemStatus(it.id, null)
    }
  },
  //--------------------------------------------
  async doDelete(confirm=false) {
    let list = this.getCheckedItems()
    // Guard
    if(_.isEmpty(list)) {
      return await Ti.Toast.Open('i18n:wn-del-none', "warn")
    }

    // Confirm
    if(confirm) {
      if(!(await Ti.Confirm({
        text:"i18n:wn-del-confirm", 
        vars:{N:list.length}}, {type: "warn"
      }))) {
        return
      }
    }

    let delCount = 0
    // make removed files. it remove a video
    // it will auto-remove the `videoc_dir` in serverside also
    // so, in order to avoid delete the no-exists file, I should
    // remove the `videoc_dir` ID here, each time loop, check current
    // match the id set or not, then I will get peace
    let exRemovedIds = {}
    try {
      // Loop items
      for(let it of list) {
        // Duck check
        if(!it || !it.id || !it.nm)
          continue
        // Ignore obsolete item
        if(it.__is && (it.__is.loading || it.__is.removed))
          continue
        // Ignore the exRemovedIds
        if(exRemovedIds[it.id])
          continue
        
        // Mark item is processing
        this.setItemStatus(it.id, "loading")
        // If DIR, check it is empty or not
        if('DIR' == it.race) {
          let count = await Wn.Sys.exec(`count -A id:${it.id}`)
          count = parseInt(count)
          if(count > 0) {
            // If user confirmed, then rm it recurently
            if(!(await Ti.Confirm({
                text:'i18n:wn-del-no-empty-folder', vars:{nm:it.nm}}))) {
              this.setItemStatus(it.id, null)
              continue
            }
          }
        }
        // Do delete
        await Wn.Sys.exec(`rm ${'DIR'==it.race?"-r":""} id:${it.id}`)
        // Mark item removed
        this.setItemStatus(it.id, "removed")
        // If video result folder, mark it at same time
        let m = /^id:(.+)$/.exec(it.videoc_dir)
        if(m) {
          let vdId = m[1]
          exRemovedIds[vdId] = true
          this.setItemStatus(vdId, "removed")
        }
        // Counting
        delCount++
        // Then continue the loop .......^
      }
      // Do reload
      await this._run("reload")
    }
    // End deleting
    finally {
      Ti.Toast.Open("i18n:wn-del-ok", {N:delCount}, "success")
    }

  },
  //--------------------------------------------
  async doUpload(files=[]) {
    if(_.isFunction(this.beforeUpload)) {
      await this.beforeUpload()
    }

    // Prepare the list
    let ups = _.map(files, (file, index)=>({
      id : `U${index}_${Ti.Random.str(6)}`,
      file : file,
      total : file.size,
      current : 0
    }))

    // Show Uploading
    this.myUploadigFiles = ups

    // Prepare the list
    let newIds = {}
    // Do upload file one by one
    for(let up of ups) {
      let file = up.file
      let {ok, data} = await Wn.Io.uploadFile(file, {
        target : `id:${this.meta.id}`,
        progress : function(pe){
          up.current = pe.loaded
        }
      })
      if(ok) {
        newIds[data.id] = true
      }
    }

    // All done, hide upload
    _.delay(()=>{
      this.myUploadigFiles = []
    }, 1000)

    // Tell user ...
    Ti.Toast.Open("i18n:upload-done", "success")


    // Call reload
    await this._run("reload")

    // Make it checked
    let checkIds = Ti.Util.truthyKeys(newIds)
    if(!this.multi) {
      checkIds = _.first(checkIds)
    }
    this.$innerList.checkRow(checkIds, {reset:true})
  },
  //--------------------------------------------
  async doDownload() {
    let list = this.getCheckedItems()
    if(_.isEmpty(list)) {
      return await Ti.Toast.Open('i18n:wn-download-none', "warn")
    }
    // Too many, confirm at first
    if(list.length > 5) {
      if(!await Ti.Confirm({
        text : "i18n:wn-download-too-many",
        vars : {N:list.length}})) {
        return
      }
    }
    // Do the download
    for(let it of list) {
      if('FILE' != it.race) {
        if(!await Ti.Confirm({
            text : "i18n:wn-download-dir",
            vars : it
          }, {
            textYes : "i18n:continue",
            textNo  : "i18n:terminate"
          })){
          return
        }
        continue;
      }
      let link = Wn.Util.getDownloadLink(it)
      Ti.Be.OpenLink(link)
    }
  }
  //--------------------------------------------
}
return OBJ;;
})()
// ============================================================
// EXPORT 'wn_list_wrapper_mixins.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/support/wn_list_wrapper_mixins.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////
  methods : {
    explainDisplayItems(display=[]) {
      let displayItems = _.concat(display)
      let list = []
      _.forEach(displayItems, (it)=>{
        // Guard
        if(Ti.Util.isNil(it)) {
          return
        }
        // Quick: table.field.display:: thumb->icon
        if(_.isString(it)) {
          let m = /^@<thumb(:([^>]*))?>$/.exec(it)
          if(m) {
            let candidateIcon = m[2] || undefined
            list.push({
              key : ["icon", "thumb", "tp", "mime", "race", "__updated_time"],
              type : "Object",
              transformer : {
                name : "Ti.Types.toObject",
                args : {
                  icon  : "icon",
                  thumb : "thumb",
                  type  : "tp",
                  mime  : "mime",
                  race  : "race",
                  timestamp : "__updated_time"
                }
              },
              comType  : "wn-obj-icon",
              comConf : {
                "..." : "${=value}",
                "candidateIcon" : candidateIcon,
                //"className"   : "thing-icon"
              }
            })
            return
          }
        }
        // Other, just join
        list.push(it)
      })
      return list
    }
  }
  ///////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-obj-tile.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/obj/tile/ti-obj-tile.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  ////////////////////////////////////////////////
  props : {
    "index" : {
      type : Number,
      default : -1
    },
    "id" : {
      type : String,
      default : null
    },
    // The URL of thumb
    "preview" : {
      type : [Object, String],
      default : ()=>({
        type : "font",
        value : "broken_image"
      })
    },
    // The preview part height
    "previewHeight" : {
      type : [String, Number],
      default : null
    },
    "hover" : {
      type : String,
      default : null,
      validator : function(val) {
        return !val || /^(up|down|left|right|zoom)$/.test(val)
      }
    },
    // The text to present the object
    "title" : {
      type : String,
      default : null
    },
    "href" : {
      type : String,
      default : null
    },
    // true - alwasy show the footer part
    "brief" : {
      type : String,
      default : null
    },
    "emitBy" : {
      type : Object,
      default : ()=>({
        evantName : null,
        payload : {}
      })
    }
  },
  ////////////////////////////////////////////////
  computed : {
    topClass() {
      let klass =[this.className]
      if(this.hover) {
        klass.push("on-hover")
        klass.push(`on-hover-${this.hover}`)
      }
      return klass
    },
    hasHref() {
      return this.href ? true : false
    },
    hasBrief() {
      return this.brief ? true : false
    }
  },
  ////////////////////////////////////////////////
  methods : {
    //--------------------------------------------
    onClick(evt) {
      // Prevent default and emit event
      if(this.emitBy.eventName) {
        evt.preventDefault()
        let eventName = this.emitBy.eventName
        let payload = this.emitBy.payload || {}
        //............................
        console.log("onClick", eventName, payload)
        this.$notify(eventName, payload)
      }
    }
    //--------------------------------------------
  }
  ////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-bullet-mixin.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/bullet/ti-bullet-mixin.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    myDict : undefined,
    myOptionsData  : [],
    loading : false
  }),
  ////////////////////////////////////////////////////
  props: {
    "value": undefined,
    "options" : {
      type : [String, Array, Function, Ti.Dict],
      default : ()=>[]
    },
    // Item ignore by the AutoMatch
    "ignoreBy" : undefined,
    /*
     {
       title : "title",
       key   : "key",
       items : "items"
     } 
     */
    "groupBy" : {
      type : [Object, Function, Boolean],
      default : undefined
    },
    "valueBy" : {
      type : [String, Function],
      default : "value|id"
    },
    "textBy" : {
      type : [String, Function],
      default : "text|name|title"
    },
    "iconeBy" : {
      type : [String, Function],
      default : "icon"
    },
    "bulletIconOn" : {
      type : String,
      default : "fas-check-circle"
    },
    "bulletIconOff" : {
      type : String,
      default : "far-circle"
    },
    "blankAs" : {
      type : Object,
      default : ()=>({
        icon : "far-list-alt",
        text : "empty-data"
      })
    },
    "blankClass": {
      type: String,
      default: "as-big",
      validator: v=>/^as-(big|hug|big-mask|mid-tip)$/.test(v)
    },
    "width" : {
      type : [Number, String],
      default : undefined
    },
    "height" : {
      type : [Number, String],
      default : undefined
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass(this.myTypeName)
    },
    //------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //-----------------------------------------------
    Grouping() {
      if(this.groupBy) {
        if(_.isFunction(this.groupBy)) {
          return this.groupBy
        }
        if(_.isPlainObject(this.groupBy)) {
          return (obj) => {
            let title = _.get(obj, this.groupBy.title)
            let key = _.get(obj, this.groupBy.key)
            let items = _.get(obj, this.groupBy.items)
            if(key && !_.isEmpty(items)) {
              return {title, key, items}
            }
          }
        }
        return (obj)=>_.pick(obj, "title", "key", "items")
      }
    },
    //-----------------------------------------------
    IgnoreItem() {
      if(this.ignoreBy) {
        return Ti.AutoMatch.parse(this.ignoreBy)
      }
      return ()=>false
    },
    //-----------------------------------------------
    getItemIcon()  {
      if(this.myDict)
        return it => this.myDict.getIcon(it)
      return Ti.Util.genGetterNotNil(this.iconBy)
    },
    getItemText()  {
      if(this.myDict)
        return it => this.myDict.getText(it)
      return Ti.Util.genGetterNotNil(this.textBy)
    },
    getItemValue() {
      if(this.myDict)
        return it => this.myDict.getValue(it)
      return Ti.Util.genGetterNotNil(this.valueBy)
    },
    //------------------------------------------------
    hasItems() {
      return !_.isEmpty(this.ItemGroups)
    },
    //------------------------------------------------
    ItemGroups() {
      if(this.Grouping) {
        let list = []
        for(let data of this.myOptionsData) {
          let {title,key,items} = this.Grouping(data)
          items = this.evalItems(items)
          list.push({title, key, items})
        }
        return list
      }
      // Single Group
      else {
        let items = this.evalItems(this.myOptionsData)
        return [{
          key: "g0",
          items
        }]
      }
    },
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    evalItems(items=[]) {
      let list = []
      _.forEach(items, li => {
        if(this.IgnoreItem(li))
          return
        let it = {
          icon  : this.getItemIcon(li),
          text  : this.getItemText(li),
          value : this.getItemValue(li)
        }
        if(this.isItemChecked(it.value, this.value)) {
          it.className = "is-checked"
          it.bullet = this.bulletIconOn
        } else {
          it.bullet = this.bulletIconOff
        }
        list.push(it)
      })
      return list
    },
    //------------------------------------------------
    createDict() {
      // Customized
      if(this.options instanceof Ti.Dict) {
        return this.options
      }
      // Refer dict
      if(_.isString(this.options)) {
        let dictName = Ti.DictFactory.DictReferName(this.options)
        if(dictName) {
          return Ti.DictFactory.CheckDict(dictName, ({loading}) => {
            this.loading = loading
          })
        }
      }
      // Auto Create
      // return Ti.DictFactory.CreateDict({
      //   data : this.options,
      //   getValue : Ti.Util.genGetter(this.valueBy || "value|id"),
      //   getText  : Ti.Util.genGetter(this.textBy  || "text|name|title"),
      //   getIcon  : Ti.Util.genGetter(this.iconBy  || "icon")
      // })
    },
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    "options" : {
      handler : async function(newval, oldval) {
        if(!_.isEqual(newval, oldval)) {
          this.myDict = this.createDict()
          if(this.myDict) {
            this.loading = true
            this.myOptionsData = await this.myDict.getData()
          } else {
            this.myOptionsData = newval
          }
          this.$nextTick(()=>{
            this.loading = false
          })
        }
      },
      immediate : true
    }
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'md-richeditor-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/markdown/richeditor2/md-richeditor-props.mjs'] = (function(){
const _M = {
  //...............................................
  // Data
  //...............................................
  "mediaBase" : {
    type : String,
    default : undefined
  },
  "value" : {
    type : String,
    default : undefined
  }, 
  //...............................................
  // Behavior
  //...............................................
  // Ext-toolbar item defination
  "actions": {
    type: Object,
    default: ()=>({})
  },
  // preview -> markdown -> save
  "markdownMediaSrc": {
    type: [String, Function],
    default: undefined
  },
  // load -> markdown -> preview
  "previewMediaSrc": {
    type: [String, Function],
    default: undefined
  },
  //...............................................
  // Aspact
  //...............................................
  "placeholder" : {
    type : String,
    default : "i18n:blank"
  },
  "theme" : {
    type : String,
    default : "nice"
  },
  "toolbar" : {
    type : Array,
    default : ()=>[
      "Heading", "|", "B", "I", "|", "Link", "Code", 
      "|", "BlockQuote", "CodeBlock", 
      "|", "Outdent", "Indent",  
      "|", "UL", "OL"
      ]
  },
  "toolbarAlign" : {
    type : String,
    default: "left",
    validator : v => /^(left|right|center)$/.test(v)
  },
  "loadingAs" : {
    type : Object,
    default : ()=>({
      className : "as-nil-mask as-big-mask",
      icon : undefined,
      text : undefined
    })
  },
  "blankAs" : {
    type : Object,
    default : ()=>({
      comType : "TiLoading",
      comConf : {
        className : "as-nil-mask as-big-mask",
        icon : "fas-coffee",
        text : null
      }
    })
  }
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-combo-pair-auto.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/pair-auto/ti-combo-pair-auto.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    FormFields() {
      if(this.group) {
        return this.genFormFieldsByGroup()
      }
      return this.genFormFields(this.value)
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    genFormFieldsByGroup(){
      let list = []
      _.forEach(this.value, (val, key)=>{
        let grp = _.defaults(this.getFieldDefine(key), {
          title : key,
          name  : key,
          fields : this.genFormFields(val, key)
        })
        list.push(grp)
      })
      return list
    },
    //-----------------------------------------------
    genFormFields(data={}, groupName) {
      let list = []
      let keys = groupName ? [groupName] : []
      _.forEach(data, (v, k) => {
        let fld = _.defaults(this.getFieldDefine(k, groupName), {
          title : k,
          name  : _.concat(keys, k).join(".")
        })
        list.push(fld)
      })
      return list
    },
    //-----------------------------------------------
    getFieldDefine(name, group) {
      let keys = []
      if(group) {
        keys.push(`${group}.${name}`)
      }
      keys.push(name)
      keys.push("@default")

      let fld = Ti.Util.getFallbackNil(this.fields, ...keys)
      if(fld && fld.title) {
        fld = _.cloneDeep(fld)
        fld.title = Ti.S.renderBy(fld.title, {name, group})
      }
      return fld
    }
    //-----------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-nav-mixins.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/nav/support/web-nav-mixins.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    // The items appeared at the head
    "headItems" : {
      type : Array,
      default : ()=>[]
    },
    // The items appeared at the tail
    "tailItems" : {
      type : Array,
      default : ()=>[]
    },
    /*
    {text, icon, href, newtab, path, payload}
    */
    "items" : {
      type : Array,
      default : ()=>[]
    },
    "translateHead" : {
      type : Boolean,
      default : false
    },
    "translateTail" : {
      type : Boolean,
      default : false
    },
    "mapping" : {
      type : [Object, Function],
      default : undefined
    },
    "idBy" : {
      type : String,
      default : "=id"
    },
    "childrenBy" : {
      type : String,
      default : "items"
    },
    "sortBy" : {
      type : [Function, String],
      default : undefined
    },
    // Store current array
    // could be Array<Object> Or Object or String
    "currentIds" : {
      type : [Array, Object, String]
    },
    "base": {
      type: String,
      default: undefined
    },
    // for highlight
    "path" : {
      type : String,
      default: undefined
    },
    // for highlight
    "params": {
      type : Object,
      default: undefined
    }
  },
  /////////////////////////////////////////
  computed : {
    //------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------
    CurrentIdMap() {
      let cids = _.concat(this.currentIds)
      let re = {}
      for(let cid of cids) {
        if(!cid) {
          continue;
        }
        if(_.isString(cid)) {
          re[cid] = true
        } else {
          cid = Ti.Util.explainObj(cid, this.idBy);
          re[cid] = true
        }
      }
      return re;
    },
    //------------------------------------
    TheItems() {
      //
      // Head
      //
      let itHead = this.headItems
      if(this.translateHead) {
        itHead = this.ItemMapping(itHead)
      }
      //
      // Items
      //
      let its = _.cloneDeep(this.items)
      const SortItems = items => {
        if(this.SortItemsBy) {
          let list = _.sortBy(items, this.SortItemsBy)
          for(let li of list) {
            let subs = _.get(li, this.childrenBy)
            if(_.isArray(subs)){
              let subs2 = SortItems(subs)
              _.set(li, this.childrenBy, subs2)
            }
          }
          return list
        }
        return items
      }
      // Sorting 
      its = _.sortBy(its, this.SortItemBy)
      its = SortItems(its)
      // Mapping items
      const MappingItems = items => {
        let list = []
        for(let it of items) {
          let it2 = this.ItemMappingBy(it)
          let subs = _.get(it, this.childrenBy)
          if(_.isArray(subs)){
            subs = MappingItems(subs)
            it2.items = subs
          }
          list.push(it2)
        }
        return list
      }
      // Mapping
      let itList = MappingItems(its)
      //
      // Tail
      //
      let itTail = this.tailItems
      if(this.translateTail) {
        itTail = this.ItemMapping(itTail)
      }
      //
      // Concat
      //
      let list = _.concat(itHead, itList, itTail)
      return this.evalItems(list)
    },
    //------------------------------------
    SortItemsBy() {
      if(_.isString(this.sortBy)) {
        return it => _.get(it, this.sortBy)
      }
      if(_.isFunction(this.sortBy)) {
        return it => this.sortBy(it)
      }
   },
    //------------------------------------
    ItemMappingBy() {
      if(_.isFunction(this.mapping)) {
        return this.mapping
      }

      if(this.mapping) {
        return item => {
          return Ti.Util.explainObjs(item, this.mapping)
        }
      }

      return item => item
    }
    //------------------------------------
  },
  /////////////////////////////////////////
  methods : {
    //------------------------------------
    OnClickLink(evt, {type,value,params}={}) {
      evt.stopPropagation();
      if(/^(page|action)$/.test(type)) {
        evt.preventDefault()
        //console.log("onClickLink", "nav:to", {type,value,params})
        if(value) {
          this.$notify("nav:to", {type,value,params})
        }
      }
    },
    //------------------------------------
    evalItems(items, depth=0) {
      // Explain first
      return Ti.WWW.explainNavigation(items, {
        depth,
        base: this.base, 
        idBy: this.idBy,
        iteratee: (li)=>{
          if(this.path) {
            li.highlight = li.highlightBy(this.path, this.params)
          }
          //........................................
          // Children highlight cause the parent focused
          let current = this.CurrentIdMap[li.id]
          if(!current && !_.isEmpty(li.items)) {
            for(let it of li.items) {
              if(it.current || it.highlight) {
                current = true
                break
              }
            }
          }
          li.current = current
          return li
        }
      })
    }
    //------------------------------------
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-manager.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['/a/load/wn.manager/wn-manager.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////
  provide: function() {
    return {
      $session: {
        ticket   : this.session.ticket,
        userId   : this.session.uid,
        userName : this.session.unm,
        group    : this.session.grp
      },
      $vars: this.vars
    }
  },
  ///////////////////////////////////////////
  data:()=>({
    myExposeHidden : false,
    loading : false,
    comIcon : "zmdi-hourglass-alt",
    comType : "ti-loading",
    comConf : {},
    actions : [],
    sidebar : [],
    privilege : {},
    sidebarStatusStoreKey : undefined,
    // for main view customized status
    // It will be clean each time reload main view
    mainViewStatus : {},
    // Current meta anestors
    // ancestors : [],
    // parent : null,
    // Current view(main) information
    view : null,
    // Message and Indicator
    myMessage   : null,
    myIndicator : null,
    // View ready
    myViewReady : false
  }),
  ///////////////////////////////////////////
  computed : {
    //---------------------------------------
    TopClass() {
      let skyColorized = _.get(this.session, "envs.SKY_COLORIZED")
      return this.getTopClass({
        "is-current-as-home" : this.CurrentIsHome,
        "is-current-no-home" : !this.CurrentIsHome,
        "is-sky-colorized" : /^(yes|true)$/.test(skyColorized)
      },this.appClassName)
    },
    //---------------------------------------
    // Status
    //---------------------------------------
    isLoading() {return this.loading || this.isReloading},
    isViewReady() {return this.myViewReady},
    //---------------------------------------
    isChanged() {
      let modMain = this.$store.state.main
      if(_.get(modMain, "status.changed")) {
        return true
      }
      return _.get(this.status, "changed")
    },
    //---------------------------------------
    isSaving()    {return _.get(this.status, "saving")},
    isReloading() {return _.get(this.status, "reloading")},
    //---------------------------------------
    hasActions(){return !_.isEmpty(this.actions)},
    hasView()   {return this.view   ? true : false},
    hasMeta()   {return this.meta   ? true : false},
    hasParent() {return this.parent ? true : false},
    //---------------------------------------
    // Data
    //---------------------------------------
    MetaId ()   {return _.get(this.meta, "id")},
    MetaPath()  {return _.get(this.meta, "ph")},
    //---------------------------------------
    MyHome() {
      let obj = this.meta
      let ans = this.ancestors
      if(!_.isEmpty(ans)) {
        // for /home/xiaobai
        if(1 == ans.length) {
          if("home" == ans[0].nm) {
            return obj
          }
        }
        // for /home/xiaobai/path/to/file
        if("home" == ans[0].nm) {
          return ans[1]
        }
      }
      // for /root
      else if(obj && "root" == obj.nm) {
        return obj
      }
      // Dont't known how to find the home
      return null
    },
    //---------------------------------------
    MyHomeId() {return _.get(this.MyHome, "id")},
    //---------------------------------------
    ParentIsHome() {
      return this.hasParent && this.parent.id == this.MyHomeId
    },
    //---------------------------------------
    CurrentIsHome() {
      return this.hasMeta && this.MetaId == this.MyHomeId
    },
    //---------------------------------------
    // Tipping
    //---------------------------------------
    TheStatus() {
      let mainStatus = _.get(this.$store.state, "main.status")
      let reloading = _.get(mainStatus, "reloading") || this.status.reloading
      return _.assign({}, this.session.envs, 
        this.status, 
        mainStatus, 
        this.mainViewStatus,
        {
          pvg : this.privilege,
          exposeHidden : this.myExposeHidden,
          changed      : this.isChanged,
          reloading    : reloading,
          loading      : this.loading
        })
    },
    StatusText(){
      let st = this.TheStatus
      if(st.saving) {
        return Ti.I18n.text("i18n:saving")
      }
      if(st.reloading || st.loading) {
        return Ti.I18n.text("i18n:loading")
      }
    },
    //---------------------------------------
    // Main Module
    //---------------------------------------
    Main() {
      return this.$store.state.main
    },
    //---------------------------------------
    // GUI
    //---------------------------------------
    GuiShown() {
      let ShownSet = _.get(this.setup, "shown")
      if(_.isPlainObject(ShownSet)) {
        let shown = ShownSet[this.viewportMode]
        // Refer onece
        if(_.isString(shown)) {
          shown = ShownSet[shown]
        }
        // Refer twice (I think it is enough for most of cases)
        if(_.isString(shown)) {
          shown = ShownSet[shown]
        }
        return Ti.Util.explainObj(this, shown)
      }
      return {}
    },
    //---------------------------------------
    GuiCanLoading() {
      return _.get(this.setup, "canLoading")
    },
    //---------------------------------------
    GuiLoadingAs() {
      return _.get(this.setup, "loadingAs")
    },
    //---------------------------------------
    GuiLayout() {
      return Ti.Util.explainObj(this, this.layout)
    },
    //---------------------------------------
    GuiSchema() {
      return Ti.Util.explainObj(this, this.schema)
    }
    //---------------------------------------
  },
  ///////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnExposeHidden(eh) {
      this.myExposeHidden = eh
    },
    //--------------------------------------
    OnLogout() {
      this.doLogout()
    },
    //--------------------------------------
    OnCurrentMetaChange({id, path, value}={}) {
      this.openView(id || path || value)
    },
    //--------------------------------------
    OnCurrentDataChange(data){
      this.execEvent("arena::change", data, "dispatch:current/changeContent")
    },
    //--------------------------------------
    OnArenaViewStatusUpdated(status) {
      this.mainViewStatus = _.assign({}, this.mainViewStatus, status)
    },
    //--------------------------------------
    async OnUpdateMyVars({
      vars={}, 
      reloadPage=false
    }={}) {
      // Update the session vars
      await Ti.App(this).dispatch("session/updateMyVars", vars)

      // Reload whole page
      if(reloadPage) {
        window.location.reload()
      }
      // Reload data
      else {
        this.reloadSidebar()
        this.reloadPrivilege()
        this.reloadAncestors()
        this.reloadMain()
      }
    },
    //--------------------------------------
    OnUpdateActions(actions) {
      //console.log("OnUpdateAction", actions)
      this.actions = _.cloneDeep(actions)
      Ti.App(this).reWatchShortcut(actions)
    },
    //--------------------------------------
    OnArenaIndicate(info) {
      this.myIndicator = info
    },
    //--------------------------------------
    OnArenaMessage(msg="") {
      this.myMessage = msg
    },
    //--------------------------------------
    doCheckDomainObjThumb() {
      let domain = Wn.Session.getMyGroup();
      let cmdText = `hookx @query 'd0:"home",d1:"${domain}",thumb_src:null,mime:"^image"' @invoke write -v`
      Wn.OpenCmdPanel(cmdText)
    },
    //--------------------------------------
    async openView(oid) {
      if(!_.isString(oid))
        return
      // Guard it
      let bombed = await Ti.Fuse.fire()
      if(!bombed) {
        return
      }
      // Mark view ready
      this.myViewReady = false

      // Open It
      let ph = Wn.Io.isFullObjId(oid)
                ? `id:${oid}`
                : oid;
      await Ti.App(this).dispatch("current/reload", ph)
    },
    //--------------------------------------
    async doLogout() {
      let quitPath = Wn.Session.env("QUIT") || "/a/login/"
      let reo = await Ti.Http.get("/a/sys_logout", {
        params:{ajax:true}
      })
      console.log(reo)
      Ti.Be.Open(quitPath, {target:"_self", delay:0})
    }
    //--------------------------------------
  },
  //////////////////////////////////////////////
  watch : {
    "meta" : async function(newVal, oldVal) {
      let newId = _.get(newVal, "id")
      let oldId = _.get(oldVal, "id")
      let isSameId = _.isEqual(newId, oldId) 
      if(newVal) {
        //console.log("metaChanged", newVal, oldVal)
        // Update the ancestors path
        if(!isSameId) {
          await this.reloadAncestors()
        }
        // Reload Current Main
        if(!isSameId || this.isChanged) {
          await this.reloadMain()
          this.pushHistory(newVal)
        }
      }
    }
  },
  ///////////////////////////////////////////
  mounted : async function(){
    //......................................
    this.reloadSidebar()
    this.reloadPrivilege()
    //......................................
  },
  ///////////////////////////////////////////
  beforeDestroy : function(){
    
  }
  ///////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-combo-pair-text.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/pair-text/ti-combo-pair-text.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    myOptionsData  : null,
    myDict : undefined,
    myValue: {}
  }),
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    Items() {
      let list = []
      _.forEach(this.myOptionsData, it=>{
        let text  = this.Dict.getText(it)
        let key   = this.Dict.getValue(it)
        let icon  = this.Dict.getIcon(it)
        let value = _.get(this.myValue, key)
        let placeholder = it.placeholder || this.placeholder
        list.push({value, text, icon, key, placeholder})
      })
      return list
    },
    //------------------------------------------------
    TextStyle() {
      return Ti.Css.toStyleRem100({
        width: this.textWidth,
        height: this.textHeight
      })
    },
    //------------------------------------------------
    Dict() {
      if(!this.myDict) {
        this.myDict = this.createDict()
      }
      return this.myDict
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnTextChange(key, $evn) {
      let $text = $evn.srcElement
      let val = $text.value
      if(this.trimed) {
        val = _.trim(val)
      }
      //console.log({key, val})
      this.updateValue({[key]: val})
    },
    //------------------------------------------------
    updateValue(obj) {
      this.myValue = _.assign({}, this.myValue, obj)
    },
    //------------------------------------------------
    createDict() {
      // Customized
      if(this.options instanceof Ti.Dict) {
        return this.options
      }
      // Refer dict
      if(_.isString(this.options)) {
        let dictName = Ti.DictFactory.DictReferName(this.options)
        if(dictName) {
          return Ti.DictFactory.CheckDict(dictName, ({loading}) => {
            this.loading = loading
          })
        }
      }
      // Auto Create
      return Ti.DictFactory.CreateDict({
        data : this.options || [],
        getValue : Ti.Util.genGetter(this.valueBy || "value"),
        getText  : Ti.Util.genGetter(this.textBy  || "text|name"),
        getIcon  : Ti.Util.genGetter(this.iconBy  || "icon")
      })
    },
    //-----------------------------------------------
    async reloadMyOptionData() {
      //console.log("reloadMyOptionData")
      this.myOptionsData = await this.Dict.getData()
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    //-----------------------------------------------
    "value": {
      handler: function(newVal, oldVal){
        if(!_.isEqual(newVal, oldVal)) {
          this.myValue = _.cloneDeep(newVal)
        }
      },
      immediate: true
    },
    //-----------------------------------------------
    "options" : async function(newVal, oldVal) {
      if(!_.isEqual(newVal, oldVal)) {
        this.myDict = this.createDict()
        await this.reloadMyOptionData()
      }
    },
    //-----------------------------------------------
    "myValue": function(newVal, oldVal) {
      if(!_.isEqual(newVal, oldVal)) {
        this.$notify("change", this.myValue)
      }
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  mounted: async function() {
    await this.reloadMyOptionData()
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-media-binary.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/media/binary/ti-media-binary.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  props : {
    "icon" : {
      type : [String, Object],
      default : undefined
    },
    "title" : {
      type : String,
      default : undefined
    },
    "src" : {
      type : String,
      default : undefined
    },
    "download" : {
      type : Boolean,
      default : undefined
    },
    "width" : {
      type : [String, Number],
      default : ""
    },
    "height" : {
      type : [String, Number],
      default : ""
    }
  },
  computed : {
    
  },
  methods : {
    
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-obj-pair.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/obj/pair/ti-obj-pair.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////
  data : ()=>({
    myPairList : []
  }),
  ////////////////////////////////////////////////
  props : {
    //-----------------------------------
    // Data
    //-----------------------------------
    "value" : {
      type : [String, Object],
      default : undefined
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "canEditName" : {
      type : Boolean,
      default : false
    },
    "canEditValue" : {
      type : Boolean,
      default : false
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "nameText": {
      type : String,
      default : "i18n:name"
    },
    "valueText": {
      type : String,
      default : "i18n:value"
    },
    "fields" : {
      type : Array,
      default : ()=>[]
    },
    "onlyFields" : {
      type: Boolean,
      default: false
    },
    "blankAs" : {
      type : Object,
      default : ()=>({
        icon : "im-plugin",
        text : "i18n:empty"
      })
    },
    "showHead" : {
      type : Boolean,
      default : true
    },
    "showEmpty" : {
      type : Boolean,
      default : true
    },
    "autoI18n" : {
      type : Boolean,
      default : true
    }
    //-----------------------------------
    // Measure
    //-----------------------------------
  },
  ////////////////////////////////////////////////
  computed : {
    //--------------------------------------------
    TopClass() {
      return this.getTopClass({
        "can-edit-name"  : this.canEditName,
        "can-edit-value" : this.canEditValue
      })
    },
    //--------------------------------------------
    FieldsMap() {
      let map = {}
      for(let fld of this.fields) {
        if(fld.name)
          map[fld.name] = fld
      }
      return map
    },
    //--------------------------------------------
    TheData() {
      if(!this.value) {
        return {}
      }
      if(_.isString(this.value)) {
        return JSON.parse(this.value)
      }
      if(_.isPlainObject(this.value))
        return this.value
      return {}
    },
    //--------------------------------------------
    isEmpty() {
      return _.isEmpty(this.TheData)
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  methods : {
    //--------------------------------------------
    OnPairComChange(newVal, {name, value}) {
      if(!_.isEqual(newVal, value)) {
        let data = _.cloneDeep(this.TheData) 
        _.set(data, name, newVal)
        this.$notify("change", data)
      }
    },
    //--------------------------------------------
    OnPairValueChange(evt, {name, value}) {
      let newVal = _.trim(evt.target.value)
      if(newVal != value) {
        let data = _.cloneDeep(this.TheData) 
        _.set(data, name, newVal)
        this.$notify("change", data)
      }
    },
    //--------------------------------------------
    async evalThePairList() {
      // Flat pairs  [keyPath] : [pairValue]
      let pairs = {}
      this.joinPairs(pairs, [], this.TheData)

      // format list
      let list = []
      for(let fld  of this.fields) {
        let pa = pairs[fld.name]
        if(pa || !this.showEmpty) {
          pa = pa || {
            name : fld.name
          }
          // Title
          let title = fld.title || fld.name
          if(this.autoI18n){
            title = Ti.I18n.text(title)
          }
          pa.title = title
          // Mapping Value
          if(fld.dict) {
            let d = Ti.DictFactory.CheckDict(fld.dict)
            pa.text = await d.getItemText(pa.value)
          }
          // Customized the display text
          if(fld.comType) {
            pa.comType = fld.comType
            pa.comConf = fld.comConf || {}
          }

          // Push
          list.push(pa)
        }
      }

      // find remain
      if(!this.onlyFields) {
        let remains = []
        _.forEach(pairs, (pa)=>{
          if(pa.name && !this.FieldsMap[pa.name]) {
            pa.title = pa.name
            remains.push(pa)
          }
        })
        list.push(...remains)
      }

      this.myPairList = list
    },
    //--------------------------------------------
    joinPairs(pairs=[], path=[], obj) {
      // recursion
      if(_.isPlainObject(obj)){
        _.forEach(obj, (val, key)=>{
          this.joinPairs(pairs, _.concat(path, key), val)
        })
      }
      // Array
      else if(_.isArray(obj)) {
        for(let i=0; i<obj.length; i++) {
          let val = obj[i]
          this.joinPairs(pairs, _.concat(path, i+""), val)
        }
      }
      // join pair
      else {
        let name  = path.join(".")
        let value = obj
        pairs[name] = {name, value}
      }
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  watch : {
    "value" : "evalThePairList"
  },
  ////////////////////////////////////////////////
  mounted() {
    this.evalThePairList()
  }
  ////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-input.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/ti-input.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  model : {
    prop : "value",
    event: "change"
  },
  ////////////////////////////////////////////////////
  data : ()=>({
    "inputCompositionstart" : false,
    "isFocused" : false,
    "pointerHover" : null
  }),
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-focused"   : this.isFocused,
        "is-blurred"   : !this.isFocused,
        "is-readonly"  : this.readonly,
        "show-border"  : !this.hideBorder,
        "hide-border"  : this.hideBorder,
        "has-prefix-icon" : this.prefixIcon,
        "has-prefix-text" : this.prefixText,
        "has-suffix-icon" : this.suffixIcon,
        "has-suffix-text" : this.suffixText,
      })
    },
    //------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //------------------------------------------------
    TheValue() {
      //console.log("input value:", this.value)
      let val = Ti.Types.toStr(this.value, this.format)
      if(this.autoI18n) {
        return Ti.I18n.text(val)
      }
      return val
    },
    //------------------------------------------------
    ThePrefixIcon() {
      if("prefixIcon" == this.pointerHover
        && this.isCanHover("prefixIcon")) {
        return this.prefixHoverIcon || this.prefixIcon
      }
      return this.prefixIcon
    },
    //------------------------------------------------
    TheHover() {
      let map = {}
      let hos = _.concat(this.hover)
      for(let ho of hos) {
        if(ho) {
          map[ho] = true
        }
      }
      return map
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    isCanHover(hoverName) {
      return this.TheHover[hoverName] ? true : false
    },
    //------------------------------------------------
    getHoverClass(hoverName) {
      let canHover = this.isCanHover(hoverName)
      return {
        "can-hover" : canHover,
        "for-look"  : !canHover,
        "is-prefix-icon-hover" : "prefixIcon" == hoverName
      }
    },
    //------------------------------------------------
    OnInputCompositionStart(){
      this.inputCompositionstart = true
    },
    //------------------------------------------------
    OnInputCompositionEnd(){
      this.inputCompositionstart = false
      this.doWhenInput()
    },
    //------------------------------------------------
    OnInputing($event) {
      if(!this.inputCompositionstart) {
        this.doWhenInput()
      }
    },
    //------------------------------------------------
    doWhenInput() {
      let val = this.getInputValue(false)
      if(!Ti.Util.isNil(val)) {
        this.$notify("inputing", val)
      }
    },
    //------------------------------------------------
    // OnInputKeyDown($event) {
    //   let payload = _.pick($event, 
    //     "code","key","keyCode",
    //     "altKey","ctrlKey","metaKey","shiftKey")
    //   payload.uniqueKey = Ti.Shortcut.getUniqueKey(payload)
    //   payload.$event = $event
    //   this.$notify("keypress", payload)
    // },
    //------------------------------------------------
    OnInputChanged() {
      let val = this.getInputValue(this.autoJsValue)
      this.$notify("change", val)
    },
    //------------------------------------------------
    OnInputFocus() {
      if(!this.readonly) {
        if(this.autoSelect) {
          this.$refs.input.select()
        } else {
          this.$refs.input.focus()
        }
      }
      this.isFocused = true
      this.$notify("input:focus")
      // Auto Actived
      if(!this.isActived) {
        this.setActived()
      }
    },
    //------------------------------------------------
    OnInputBlur() {
      this.isFocused = false
      this.$notify("input:blur")
    },
    //------------------------------------------------
    OnClickPrefixIcon() {
      if(this.prefixIconForClean) {
        this.$notify("change", null)
      }
      this.$notify("prefix:icon")
    },
    //------------------------------------------------
    OnClickPrefixText() {
      this.$notify("prefix:text")
    },
    //------------------------------------------------
    OnClickSuffixIcon() {
      this.$notify("suffix:icon")
    },
    //------------------------------------------------
    OnClickSuffixText() {
      this.$notify("suffix:text")
    },
    //------------------------------------------------
    // Utility
    //------------------------------------------------
    getInputValue(autoJsValue=false) {
      if(_.isElement(this.$refs.input)) {
        //console.log("doWhenInput", emitName)
        let val = this.$refs.input.value
        // Auto js value
        if(autoJsValue) {
          val = Ti.S.toJsValue(val, {
            autoNil  : true,
            autoDate : false,
            trimed : this.trimed
          })
        }
        // Trim
        else if(this.trimed) {
          val = _.trim(val)
        }
        // case
        val = Ti.S.toCase(val, this.valueCase)
        // notify
        return val
      }
    },
    //------------------------------------------------
    doAutoFocus() {
      if(this.focused && !this.isFocused) {
        this.OnInputFocus()
      }  
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    "focused" : "doAutoFocus"
  },
  ////////////////////////////////////////////////////
  mounted : function(){
    this.doAutoFocus()
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-gui-methods.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/gui/ti-gui-methods.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //--------------------------------------
  formatGuiBlock(b={}, shown={}, float=false) {
    // ClassName
    let klass = [`at-${b.position||"center"}`]
    // Show/hide
    let isShown = shown[b.name]
    if(_.isUndefined(isShown)) {
      // hide panel block in default
      if(float) {
        isShown = false
      }
      // show normal block in default
      else {
        isShown = true
      }
    }
    // Mask
    if(b.mask) {
      klass.push("show-mask")
    } else {
      klass.push("no-mask")
    }
    // Transition Name
    let transName = b.position ? `gui-panel-${b.position}` : null
    // Block Info
    let pickKeys = [
      "className", "actionDisplayMode", "flex",
      "icon","title","actions","name", "adjustable", "closer", 
      "position", "overflow", "status"]
    let panelSize = {}
    // !!!
    // If block is float, that mean it in a panel
    // keep the width/height outside block info
    // it should not set to the block but the panel
    // !!!
    if(!float || b.mask) {
      pickKeys.push("width")
      pickKeys.push("height")
    }
    // panelSize should be assign to top
    else {
      // left/right:  panel hold the with
      if(/^(left|right)$/.test(b.position)) {
        pickKeys.push("height")
        panelSize.width = b.width
      }
      // top/bottom:  panel hold the height
      else if(/^(top|bottom)$/.test(b.position)) {
        pickKeys.push("width")
        panelSize.height = b.height
      }
      // center, block hold the size
      else if("center"==b.position){
        pickKeys.push("width")
        pickKeys.push("height")
      }
      // Others, panel hold the size
      else {
        panelSize.width = b.width
        panelSize.height = b.height
      }
    }
    let info = _.pick(b, pickKeys)
    // Sizing
    if(b.size && "stretch"!=b.size) {
      // Cols
      if("cols" == this.type) {
        info.width = b.size
      }
      // Rows
      else if("rows" == this.type) {
        info.height = b.size
      }
    }
    // ComType as body
    let comType, comConf
    if(b.body) {
      let com = b.body || {}
      if(_.isString(com)) {
        let sch = this.schema[com]
        // Define the detail in schema
        if(_.isPlainObject(sch)) {
          com = sch
          // explain the "extends"
          if(com.extends) {
            let parentSchema = this.schema[com.extends]
            let mySchema = _.omit(com, ["extends"])
            com = _.merge({}, parentSchema, mySchema)
          }
        }
        // Just a com-type
        else {
          com = {comType:com, comConf:{}}
        }
      }
      comType = com.comType || "ti-label"
      comConf = com.comConf || {value:b.name||"GUI"}
    }
    // ComType as layout/block
    else if(!_.isEmpty(b.blocks)){
      comType = "ti-gui"
      comConf = _.pick(b, [
        "type", "blocks", "adjustable", "border"
      ])
      _.defaults(comConf, {
        type : "cols",
        schema : this.schema,
        shown : this.shown
      })
    }
    // Join to result list
    return {
      className: klass.join(" "), 
      panelStyle : Ti.Css.toStyle(panelSize),
      name : b.name,
      isShown, transName,
      info, comType, comConf
    }
  },
  //--------------------------------------
  getFormedBlockList(list=[], shown={}, float=false) {
    let list2 = []
    if(_.isArray(list)) {
      for(let b of list) {
        let b2 = this.formatGuiBlock(b, shown, float)
        list2.push(b2)
      }
    }
    //console.log(list2)
    return list2
  },
  //--------------------------------------
  /***
   * Create new plain object to represent the blocks shown.
   * 
   * @param show{Object} : The primary shown object to be merge
   * @param name{String|Array|Object} : Value to marge.
   *  - `String` : Set the single key to the `value`
   *  - `Array`  : Batch set a group of keys to the `value`
   *  - `Object` : Merge to `shown` directly, the third argument `value` willl 
   *               be ignored.
   * @param value{Any} : if `name` is string, it will be taken as value.
   */
  createGuiBlockShown(shown={}, name, value) {
    let re = {...shown}
    // String
    if(_.isString(name)) {
      re[name] = value
    }
    // Array
    else if(_.isArray(name)) {
      for(let nm of name) {
        re[nm] = value
      }
    }
    // Object
    else if(_.isPlainObject(name)) {
      _.assign(re, name)
    }
    return re
  }
  //--------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'thing-creator.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/thing/manager/com/thing-creator/thing-creator.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////
  data : ()=>({
    "myData" : undefined,
    "creating" : false
  }),
  ///////////////////////////////////////////
  props : {
    "fields" : {
      type : Array,
      default : ()=>[]
    },
    "data" : {
      type : Object,
      default : ()=>({})
    },
    "onlyFields" : {
      type: Boolean,
      default: false
    },
    "fixed": {
      type: Object,
      default: undefined
    }
  },
  ///////////////////////////////////////////
  computed: {
    TheData() {
      return this.myData || this.data
    }
  },
  ///////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnFormInit($form) {
      this.$form = $form
    },
    //--------------------------------------
    OnFormFieldChange(pair={}) {
      //console.log("OnFormFieldChange", pair)
      this.myData = this.$form.getData(pair)
    },
    //--------------------------------------
    OnFormChange(data) {
      //console.log("OnFormChange", data)
      this.myData = data
    },
    //--------------------------------------
    async OnCreate() {
      this.creating = true
      let reo = await Ti.App(this).dispatch("main/create", this.myData)
      this.creating = false
      if(reo && !(reo instanceof Error)) {
        this.$notify("block:hide", "creator")
      }
    },
    //--------------------------------------
    async OnSubmit() {
      this.$nextTick(()=>{
        this.OnCreate()
      })
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  mounted() {
    this.myData = this.$form.getData()
  }
  ///////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'site-tree.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/hmaker/website/mod/site-tree/site-tree.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////
  mutations : {
    //----------------------------------------
    setRoot(state, root=null) {
      if(!_.isEqual(state.root, root)) {
        state.root = root
      }
    },
    //----------------------------------------
    setCurrentId(state, currentId=null) {
      state.currentId = currentId
    },
    //----------------------------------------
    setOpenedNodePaths(state, openedNodePaths={}) {
      state.openedNodePaths = _.cloneDeep(openedNodePaths)
    }
    //----------------------------------------
  }
  ////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-tile-article.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/tile/article/web-tile-article.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  props : {
    //-----------------------------------
    // Data
    //-----------------------------------
    "title" : {
      type : String,
      default : undefined
    },
    "content" : {
      type : String,
      default : undefined
    },
    "contentType" : {
      type : String,
      default : "text",
      validator : v=>/^(text|html|markdown)$/.test(v)
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "href" : {
      type : String,
      default : undefined,
    },
    "emitName" : {
      type : String,
      default : undefined,
    },
    "payload" : undefined,
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "btnIcon" : {
      type : String,
      default : undefined,
    },
    "btnText" : {
      type : String,
      default : undefined,
    },
    "backgroundSrc" : {
      type : [String, Object],
      default : undefined
    },
    "backgroundPreview" : {
      type : Object,
      default : undefined
    },
    "backgroundAtHeader" : {
      type : Boolean,
      default : false
    },
    //-----------------------------------
    // Measure
    //-----------------------------------
    "headerHeight" : {
      type : [Number, String],
      default : undefined
    },
    "width" : {
      type : [Number, String],
      default : undefined
    },
    "height" : {
      type : [Number, String],
      default : undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-bg-at-top"  : !this.backgroundAtHeader,
        "is-bg-at-head" : this.backgroundAtHeader
      })
    },
    //--------------------------------------
    TopStyle() {
      let backgroundImage = null
      if(this.TheBackgroundImageSrc && !this.backgroundAtHeader) {
        backgroundImage = `url('${this.TheBackgroundImageSrc}')`
      }
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height,
        backgroundImage
      })
    },
    //--------------------------------------
    HeaderStyle() {
      let backgroundImage = null
      if(this.TheBackgroundImageSrc && this.backgroundAtHeader) {
        backgroundImage = `url('${this.TheBackgroundImageSrc}')`
      }
      return Ti.Css.toStyle({
        height : this.headerHeight,
        backgroundImage
      })
    },
    //--------------------------------------
    hasButton() {
      return this.btnText || this.btnIcon
    },
    //--------------------------------------
    TheBackgroundImageSrc() {
      return Ti.WWW.evalObjPreviewSrc(this.backgroundSrc, this.backgroundPreview)
    },
    //--------------------------------------
    HtmlContent() {
      if(this.content) {
        if("text" == this.contentType) {
          return this.content.replaceAll(/\r?\n/g, '<br>')
        }
        if("markdown" == this.contentType) {
          // TODO convert markdown
          return this.content
        }
        // Raw HTML
        return this.content
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'json-tree-item.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/json/tree/item/json-tree-item.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //////////////////////////////////////////
  data : ()=>({
    
  }),
  //////////////////////////////////////////
  props : {
    "value" : null,
    "valueType" : {
      type : String,
      default : "Nil"
    },
    "valuePath" : {
      type : [String, Array],
      default : ()=>[]
    },
    "showActions" : {
      type : Boolean,
      default : false
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return Ti.Css.mergeClassName({
        "is-self-actived" : this.isSelfActived,
        "is-actived" : this.isActived
      })
    },
    //--------------------------------------
    isLabel() {
      return /^(Array|Object)$/.test(this.valueType)
    },
    //--------------------------------------
    isTop() {
      return this.theValuePath.length == 0
    },
    //--------------------------------------
    theLabelDisplayText() {
      if('Array' == this.valueType) {
        return '[..]'
      }
      if('Object' == this.valueType) {
        return '{..}'
      }
      return '???'
    },
    //--------------------------------------
    theValuePath() {
      if(_.isArray(this.valuePath)) {
        return this.valuePath
      }
      if(_.isString(this.valuePath)) {
        return _.without(this.valuePath.split(/[\/.]/g), "")
      }
      return []
    },
    //--------------------------------------
    theValueClassName() {
      return _.kebabCase(`is${this.valueType}`)
    },
    //--------------------------------------
    theValueFormat() {
      if('String' == this.valueType) {
        return function(val) {
          if(val) {
            return `"${val}"`
          }
          return '""'
        }
      }
    },
    //--------------------------------------
    theActionMenuData() {
      //................................
      let jvTypes = [{
        name  : "jvTypeArray",
        text  : "i18n:json-Array",
        type  : "action",
        altDisplay : {
          icon : "zmdi-check",
          capture : false
        },
        action : ()=>{
          this.$notify("change", {jsonMutate:"ChangeValueType", args:"Array"})
        }
      }, {
        name  : "jvTypeObject",
        text  : "i18n:json-Object",
        type  : "action",
        altDisplay : {
          icon : "zmdi-check",
          capture : false
        },
        action : ()=>{
          this.$notify("change", {jsonMutate:"ChangeValueType", args:"Object"})
        }
      }]
      //................................
      // Add
      let menuData = [{
        name : "jv-add",
        type : "action",
        icon : "zmdi-plus",
        action : ()=>{
          this.$notify("change", {jsonMutate : "Add"})
        }
      }]
      //................................
      // Remove : If not the top
      if(!this.isTop) {
        menuData.push({
          type : "line"
        })
        // Can not remove top node
        menuData.push({
          name : "jv-remove",
          type : "action",
          icon : "zmdi-delete",
          action : ()=>{
            this.$notify("change", {jsonMutate : "Remove"})
          }
        })
        // Add More Types
        jvTypes.push({
          type : "line"
        })
        // AddType: Boolean
        jvTypes.push({
          name  : "jvTypeBoolean",
          text  : "i18n:json-Boolean",
          type  : "action",
          altDisplay : {
            icon : "zmdi-check",
            capture : false
          },
          action : ()=>{
            this.$notify("change", {jsonMutate:"ChangeValueType", args:"Boolean"})
          }
        })
        // AddType: Number
        jvTypes.push({
          name  : "jvTypeNumber",
          text  : "i18n:json-Number",
          type  : "action",
          altDisplay : {
            icon : "zmdi-check",
            capture : false
          },
          action : ()=>{
            this.$notify("change", {jsonMutate:"ChangeValueType", args:"Number"})
          }
        })
        // AddType: String
        jvTypes.push({
          name  : "jvTypeString",
          text  : "i18n:json-String",
          type  : "action",
          altDisplay : {
            icon : "zmdi-check",
            capture : false
          },
          action : ()=>{
            this.$notify("change", {jsonMutate:"ChangeValueType", args:"String"})
          }
        })
        // AddType: Nil
        jvTypes.push({
          name  : "jvTypeNil",
          text  : "i18n:json-Nil",
          type  : "action",
          altDisplay : {
            icon : "zmdi-check",
            capture : false
          },
          action : ()=>{
            this.$notify("change", {jsonMutate:"ChangeValueType", args:"Nil"})
          }
        })
      }
      //................................
      // More: Change Type
      menuData.push({
        type : "line"
      })
      menuData.push({
        key  : "jv-types",
        type : "group",
        icon : "zmdi-more",
        items : jvTypes
      })
      // Done
      return menuData
    },
    //--------------------------------------
    theActionMenuStatus() {
      return {
        jvTypeBoolean : "Boolean" == this.valueType,
        jvTypeInteger : "Integer" == this.valueType,
        jvTypeFloat   : "Float"   == this.valueType,
        jvTypeNumber  : "Number"  == this.valueType,
        jvTypeString  : "String"  == this.valueType,
        jvTypeArray   : "Array"   == this.valueType,
        jvTypeObject  : "Object"  == this.valueType,
        jvTypeNil     : "Nil"     == this.valueType
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    
  },
  //////////////////////////////////////////
  mounted : function() {
    
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-input-num.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/num/ti-input-num.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  props : {
    "value" : null,
    "defaultValue" : {
      type : Number,
      default : 0
    },
    "maxValue" : {
      type : Number,
      default : undefined
    },
    "minValue" : {
      type : Number,
      default : undefined
    },
    "step" : {
      type : Number,
      default : 1
    },
    "width" : {
      type : [Number, String],
      default : 200
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    TopClass() {
      return this.getTopClass()
    },
    TopStyle() {
      return Ti.Css.toStyleRem100({
        width: this.width
      })
    },
    DesreaseClass() {
      if(!_.isUndefined(this.minValue) && this.value <= this.minValue) {
        return "is-disabled"
      }
      return "is-enabled"
    },
    IncreaseClass() {
      if(!_.isUndefined(this.maxValue) && this.value >= this.maxValue) {
        return "is-disabled"
      }
      return "is-enabled"
    },
    TheValue() {
      if(isNaN(this.value) 
         || !_.isNumber(this.value)) {
        return
      }
      return this.getValue(this.value)
    }
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    getValue(val) {
      if(isNaN(val) || !_.isNumber(val)) {
        return this.defaultValue
      }
      if(!_.isUndefined(this.minValue) && val < this.minValue) {
        return this.minValue
      }
      if(!_.isUndefined(this.maxValue) && val > this.maxValue) {
        return this.maxValue
      }
      return val
    },
    //------------------------------------------------
    changeByStep(n=0) {
      let val = this.TheValue
      // Start with default value
      if(_.isUndefined(val)) {
        val = this.defaultValue
      }
      // change by step
      else {
        val += (n * this.step)
      }
      // Eval the min/max range
      val = this.getValue(val)

      // Emit change
      if(val != this.value) {
        this.$notify("change", val)
      }
    },
    //------------------------------------------------
    onChanged($event) {
      let $in = $event.target
      if(_.isElement($in)) {
        let str = _.trim($in.value)
        // Notify nil
        if(_.isEmpty(str)) {
          this.$notify("change", null)  
        }
        // Notify value
        else {
          let val = str ? str * 1 : this.defaultValue
          if(!isNaN(val)) {
            this.$notify("change", val)  
          }
        }
      }
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-meta-order.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/meta/order/web-meta-order.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  props : {
    "value" : {
      type : Object,
      default : ()=>({})
    },
    "proThumbSrc": {
      type : String,
      default : undefined
    },
    "proHref": {
      type : String,
      default : undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass(
        `is-${this.OrderStatus}`
      )
    },
    //--------------------------------------
    Order() {
      return this.value || {}
    },
    //--------------------------------------
    OrderId() {
      let orId = this.Order.id;
      if(orId) {
        let pos = orId.indexOf(':')
        if(pos > 0) {
          return _.trim(orId.substring(pos+1))
        }
        return orId
      }
      return '- unknown -'
    },
    //--------------------------------------
    OrderStatus() {
      return `or-st-${_.toLower(this.Order.or_st)}`
    },
    //--------------------------------------
    CurrencyChar() {
      return Ti.Bank.getCurrencyChar(this.Order.currency||"RMB")
    },
    //--------------------------------------
    Products() {
      let list = []
      _.forEach(this.value.products, it=>{
        let pro = {...it}
        if(this.proThumbSrc) {
          pro.src = Ti.S.renderBy(this.proThumbSrc, it)
        }
        if(this.proHref) {
          pro.href = Ti.S.renderBy(this.proHref, it)
        }
        pro.subtotal = Ti.Num.precise(it.price * it.amount)
        list.push(pro)
      })
      return list
    },
    //--------------------------------------
    Timestamps() {
      let list = []
      list.push(this.genTimestampItem(
        "fas-file-invoice-dollar","i18n:or-st-nw", this.Order.ct))
      list.push(this.genTimestampLine(this.Order.ok_at))
      list.push(this.genTimestampItem(
        "far-credit-card","i18n:or-st-ok", this.Order.ok_at))
      list.push(this.genTimestampLine(this.Order.sp_at))
      list.push(this.genTimestampItem(
        "fas-shipping-fast","i18n:or-st-sp", this.Order.sp_at))
      list.push(this.genTimestampLine(this.Order.dn_at))
      list.push(this.genTimestampItem(
        "fas-clipboard-check","i18n:or-st-dn", this.Order.dn_at, true))
      return list
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickProduct({id}) {
      this.$notify("open:product", id)
    },
    //--------------------------------------
    genTimestampItem(icon, title, t, atLast=false) {
      let it = {type:"item", icon, title, time:t}
      let isOn = (t && t>0)
      it.className =  {
        "is-item": true,
        "is-on": isOn,
        "is-off": !isOn,
        "at-last": atLast
      }
      if(isOn) {
        it.dateText = Ti.DateTime.format(t, "yyyy-MM-dd")
        it.timeText = Ti.DateTime.format(t, "HH:mm:ss")
      }
      return it
    },
    //--------------------------------------
    genTimestampLine(t) {
      let isOn = (t && t>0)
      return {
        type:"line",
        isOn,
        icon: isOn
          ? "fas-chevron-right"
          : "fas-circle",
        className : {
          "is-line": true,
          "is-on": isOn,
          "is-off": !isOn
        }
      }
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-obj-icon.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/icon/wn-obj-icon.mjs'] = (function(){
/////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  ///////////////////////////////////////////////////
  props : {
    // icon string
    "icon" : {
      type : String,
      default : null
    },
    // image thumb: id:xxxx
    "thumb" : {
      type : String,
      default : null
    },
    "mime" : {
      type : String,
      default : null
    },
    "type" : {
      type : String,
      default : null
    },
    "race" : {
      type : String,
      default : null
    },
    // default icon string
    "candidateIcon" : {
      type : String,
      default : null
    },
    // timestamp
    "timestamp" : {
      type : Number,
      default : 0
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName(this.className)
    },
    //-----------------------------------------------
    theIcon() {
      return Wn.Util.getObjThumbIcon({
        candidateIcon : this.candidateIcon,
        timestamp : this.timestamp,
        thumb : this.thumb,
        icon  : this.icon,
        mime  : this.mime,
        type  : this.type,
        race  : this.race,
      }, "fas-cube")
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    //-----------------------------------------------
  }
  ///////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-combo-edit-com.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/combo/edit-com/wn-combo-edit-com.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data : ()=>({
    myCom: null
  }),
  ////////////////////////////////////////////////////
  // props 
  props : {
    "value" : {
      type : Object,
      default : ()=>({})
    },
    "placeholder" : {
      type: String,
      default: "i18n:wn-edit-com-nil"
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    Dict() {
      return Wn.Dict.hMakerComponents()
    },
    //------------------------------------------------
    ComIcon() {
      return _.get(this.myCom, "icon")
    },
    //------------------------------------------------
    ComTitle() {
      return _.get(this.myCom, "title")
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    async OnClickValue() {
      //console.log("click", this.value)
      let com = await Wn.EditTiComponent(this.value)
      if(com) {
        this.notifyChange(com)
      }
    },
    //--------------------------------------
    OnClickSuffixIcon() {
      this.notifyChange({})
    },
    //--------------------------------------
    notifyChange(com={}) {
      if(!com.comType) {
        com.comType = undefined
        com.comConf = undefined
      }
      this.$notify("change", com)
    },
    //--------------------------------------
    async reloadMyCom() {
      if(!_.isEmpty(this.value)) {
        let {comType} = this.value
        this.myCom = await this.Dict.getItem(comType)
      }
      // Empty
      else {
        this.myCom = null
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    "value" : {
      handler: "reloadMyCom",
      immediate : true
    }
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-markdown-richeditor-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/markdown/richeditor/wn-markdown-richeditor-props.mjs'] = (function(){
const _M = {
  // Relative meta
  "meta": {
    type: [Object, String],
    default: null
  },
  // Delcare the media src mode
  //  - path : nil meta(~/xxx/xxx); with meta(../xxx/xxx)
  //  - fullPath : "/home/xiaobai/xxx/xxx"
  //  - idPath : "id:67u8..98a1"
  //  - id   : "67u8..98a1"
  // 'transferMediaSrc' can take more customized form
  "mediaSrcMode": {
    type: String,
    default: "path",
    validator: v => /^(path|fullPath|idPath|id)$/.test(v)
  },
  // Keep the last select media
  "keepLastBy": {
    type: String,
    default: "wn-markdown-richeditor-last-open"
  },
  "defaultMediaDir": {
    type: String,
    default: "~"
  }
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-combo-pair-group-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/pair-group/ti-combo-pair-group-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "value": undefined,
  "fields" : {
    type : Array,
    default : ()=>[]
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  // ...
  "keepShownTo" : {
    type : String,
    default : undefined
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "tabAt" : {
    type : String,
    default : undefined
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  // ...
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-meta-commodity.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/meta/commodity/web-meta-commodity.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    "meta" : {
      type : Object,
      default : ()=>({})
    },
    "previewSrc": {
      type: String,
      default: null
    },
    "titleKey" : {
      type : String,
      default : "title"
    },
    "buyAmount" : {
      type : Number,
      default : 1
    },
    "form" : {
      type : Object,
      default : ()=>({})
    },
    "actions": {
      type: Object,
      default: ()=>({
        "buy" : "i18n:buy-now"
      })
    }
  },
  //////////////////////////////////////////
  computed : {
    //......................................
    TopClass() {
      return this.getTopClass()
    },
    //......................................
    FormData() {
      return {
        ...this.meta,
        buyAmount : this.buyAmount
      }
    },
    //......................................
    previewImageSrc() {
      if(this.previewSrc && this.meta) {
        return Ti.S.renderBy(this.previewSrc, this.meta)
      }
    },
    //......................................
    MetaTitle() {
      if(this.titleKey) {
        return _.get(this.meta, this.titleKey)
      }
      return "NoTitle"
    }
    //......................................
  },
  //////////////////////////////////////////
  methods : {
    //......................................
    OnClickBuyNow() {
      this.$notify("buy:now")
    },
    //......................................
    OnFormChanged({name, value}) {
      this.$notify("meta:changed", {name, value})
    }
    //......................................
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-text-json.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/json/ti-text-json.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  props : {
    "tabAt" : {
      type : String,
      default : "bottom-left",
      validator : (v)=>/^(top|bottom)-(left|center|right)$/.test(v)
    },
    "value" : undefined,
    "valueType": {
      type: String,
      default: "text",
      validator: v => /^(text|obj)$/.test(v)
    },
    "jsonIndent": {
      type: String,
      default: '   '
    },
    "tree" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TheContent() {
      if(!Ti.Util.isNil(this.value)) {
        return this.value
      }
      return ""
    },
    //--------------------------------------
    TheData() {
      if(!Ti.Util.isNil(this.value)) {
        return Ti.Types.safeParseJson(this.value, null)
      }
      return null
    },
    //--------------------------------------
    TheSource() {
      if(this.TheData){
        return JSON.stringify(this.TheData, null, '   ')
      }
      return ""
    },
    //--------------------------------------
    TheLayout() {
      return {
        type : "tabs",
        tabAt : this.tabAt,
        blocks : [{
          title : "i18n:structure",
          name  : "tree",
          body  : "desktop-tree"
        }, {
          title : "i18n:source-code",
          name  : "source",
          body  : "desktop-source"
        }]
      }
    },
    //--------------------------------------
    TheSchema() {
      //....................................
      // Tree Conf
      let treeConf = _.assign({}, this.tree, {
        value: this.TheData
      })
      //....................................
      // Source Conf
      let sourceConf = {
        showTitle : false,
        value    : this.TheSource
      }
      //....................................
      // Done
      return {
        "desktop-tree" : {
          comType : "ti-text-json-tree", 
          comConf : treeConf
        },
        "desktop-source" : {
          comType : "ti-text-raw",
          comConf : sourceConf
        }
      }
      //....................................
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnChange(payload) {
      //console.log("TiObjJson->OnChange", payload)
      // If string, try parse
      let val = payload
      if(_.isString(payload)) {
        try{
          val = JSON.parse(payload)
        }catch(E){
          // wait for valid input
          return
        }
      }
      // obey the valueType
      if("text" == this.valueType) {
        if(this.jsonIndent) {
          val = JSON.stringify(val, null, this.jsonIndent)
        } else {
          val = JSON.stringify(val)
        }
      }
      this.$notify('change', val)
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-combo-table.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/table/ti-combo-table.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    },
    //------------------------------------------------
    ActionItems() {
      return [{
        icon : "fas-plus",
        text : "i18n:new-item",
        action : ()=>{
          this.doAddNewItem()
        }
      }, {
        type : "line"
      }, {
        icon : "far-trash-alt",
        tip : "i18n:del-checked",
        action : ()=>{
          this.removeChecked()
        }
      }, {
        icon : "far-edit",
        tip : "i18n:edit",
        action : ()=>{
          this.doEditCurrentMeta()
        }
      }, {
        type : "line"
      }, {
        icon : "fas-long-arrow-alt-up",
        tip : "i18n:move-up",
        action : ()=>{
          this.moveCheckedUp()
        }
      }, {
        icon : "fas-long-arrow-alt-down",
        tip : "i18n:move-down",
        action : ()=>{
          this.moveCheckedDown()
        }
      }, {
        type : "line"
      }, {
        icon : "fas-code",
        tip : "i18n:source",
        action : ()=>{
          this.doEditCurrentSource()
        }
      }]
    },
    //------------------------------------------------
    TheValue() {
      if(!this.value) {
        return []
      }
      if(_.isString(this.value)) {
        return JSON.parse(this.value)
      }
      return this.value
    },
    //------------------------------------------------
    TableConfig() {
      let config = _.cloneDeep(this.list)
      config.data = this.TheValue
      _.defaults(config, {
        blankAs    : this.blankAs,
        blankClass : this.blankClass,
        multi : true,
        checkable : true
      })
      return config
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    OnInitTable($table) {
      this.$table = $table
    },
    //-----------------------------------------------
    OnTableRowSelect({currentId, current, currentIndex, checkedIds}) {
      // this.myCurrentData = current
      // this.myCurrentId = currentId
      // this.myCurrentIndex = currentIndex
      // this.myCheckedIds = checkedIds
    },
    //-----------------------------------------------
    async OnTableRowOpen({index, rawData}) {
      let reo = await this.openDialogForMeta(rawData);

      // User cancel
      if(_.isUndefined(reo))
        return

      // Join to 
      let list = _.cloneDeep(this.TheValue||[])
      list.splice(index, 1, reo)
      this.notifyChange(list)
    },
    //-----------------------------------------------
    async doAddNewItem() {
      let reo = await this.openDialogForMeta();

      // User cancel
      if(_.isUndefined(reo))
        return

      // Join to 
      let list = _.cloneDeep(this.TheValue||[])
      let val = _.concat(list||[], reo)
      this.notifyChange(val)
    },
    //-----------------------------------------------
    async doEditCurrentMeta() {
      let row = this.$table.getCurrentRow()
      if(!row) {
        return await Ti.Toast.Open("i18n:nil-item", "warn")
      }
      let {rawData, index} = row
      let reo = await this.openDialogForMeta(rawData);

      // User cancel
      if(_.isUndefined(reo))
        return

      // Join to 
      let list = _.cloneDeep(this.TheValue||[])
      list.splice(index, 1, reo)
      this.notifyChange(list)
    },
    //-----------------------------------------------
    async doEditCurrentSource() {
      let json = this.value || "[]"
      if(!_.isString(json)) {
        json = JSON.stringify(json, null, '   ')
      }
      json = await this.openDialogForSource(json);

      // User cancel
      if(_.isUndefined(json))
        return

      // Join to 
      try {
        let list = JSON.parse(json)
        this.notifyChange(list)
      }
      // Invalid json
      catch(E) {
        await Ti.Toast.Open("")
      }
    },
    //-----------------------------------------------
    removeChecked() {
      let {checked, remains} = this.$table.removeChecked()
      if(_.isEmpty(checked))
        return

      this.notifyChange(remains)
    },
    //-----------------------------------------------
    moveCheckedUp() {
      let {list, nextCheckedIds} = this.$table.moveChecked(-1)

      this.notifyChange(list)
      this.$nextTick(()=>{
        this.$table.checkRow(nextCheckedIds)
      })
    },
    //-----------------------------------------------
    moveCheckedDown() {
      let {list, nextCheckedIds} = this.$table.moveChecked(1)

      this.notifyChange(list)
      this.$nextTick(()=>{
        this.$table.checkRow(nextCheckedIds)
      })
    },
    //-----------------------------------------------
    async openDialogForMeta(result={}) {
      let dialog = _.cloneDeep(this.dialog);
      _.assign(dialog, {
        result,
        model : {prop:"data", event:"change"},
        comType : "TiForm",
        comConf : this.form
      })

      return await Ti.App.Open(dialog);
    },
    //-----------------------------------------------
    async openDialogForSource(json='[]') {
      let dialog = _.cloneDeep(this.dialog);
      _.assign(dialog, {
        result : json,
        comType : "TiInputText",
        comConf : {
          height: "100%"
        }
      })

      return await Ti.App.Open(dialog);
    },
    //-----------------------------------------------
    notifyChange(val=[]) {
      if("String" == this.valueType) {
        val = JSON.stringify(val, null, '   ')
      }
      this.$notify("change", val)
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    //----------------------------------------------- 
    //-----------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-upload-file.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/upload/file/wn-upload-file.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  data : ()=>({
    "src_ts" : null,
    "oFile"     : null,
    "uploadFile" : null,
    "progress"   : -1
  }),
  /////////////////////////////////////////
  props : {
    "value" : {
      type : [String, Object],
      default : null
    },
    // raw value is WnObj
    // If declare the valueType
    // It will transform the WnObj
    // to relaitve value mode
    "valueType": {
      type: String,
      default: "obj",
      validator: v => /^(obj|path|fullPath|idPath|id)$/.test(v)
    },
    "maxWidth" : {
      type : [String, Number],
      default : undefined
    },
    "maxHeight" : {
      type : [String, Number],
      default : undefined
    },
    // Display width
    "width" : {
      type : [String, Number],
      default : undefined
    },
    // Display height
    "height" : {
      type : [String, Number],
      default : undefined
    },
    // support remove the objects
    "removable" : {
      type : Boolean,
      default : true
    },
    // Indicate the upload target when upload new value
    // Of cause, if the `value` exists, replace it
    // The `target` must be a path to a image object,
    // it will auto transfrom the image format by `cmd_imagic`
    "target" : {
      type : String,
      default : null
    },
    // which type supported to upload
    // nulll or empty array will support any types
    "supportTypes" : {
      type : [String, Array],
      default : ()=>[]
      //default : ()=>["png","jpg","jpeg","gif"]
    },
    // which mime supported to upload
    // nulll or empty array will support any mimes
    "supportMimes" : {
      type : [String, Array],
      default : ()=>[]
      //default : ()=>["image/png","image/jpeg","image/gif"]
    },
    // Image object only: it will auto apply image filter
    // just like clip the image size etc..
    // @see cmd_imagic for more detail about the filter
    "filter" : {
      type : [Array, String],
      default : null
    },
    // Image object only: if `>0 and <=1` mean output quality
    // if not match the range, will depends on the `cmd_imagic` default
    "quality" : {
      type : Number,
      default : 0
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    AcceptTypes() {
      if(_.isString(this.supportTypes))
        return this.supportTypes.split(",")
      return this.supportTypes
    },
    //--------------------------------------
    AcceptMimes() {
      if(_.isString(this.supportMimes))
        return this.supportMimes.split(",")
      return this.supportMimes
    },
    //--------------------------------------
    ImageFilter() {
      if(!this.filter)
        return []
      return [].concat(this.filter)
    },
    //--------------------------------------
    // Display image for <ti-thumb>
    PreviewIcon() {
      //....................................
      if(this.oFile) {
        //..................................
        // Image
        if(Wn.Obj.isMime(this.oFile, /^(image\/)/)) {
          let ss = ["/o/content?str=id:", this.oFile.id]
          if(this.src_ts) {
            ss.push("&_t=")
            ss.push(this.src_ts)
          }          
          return {
            type: "image", value: ss.join("")
          }
        }
        //..................................
        // Video
        if(Wn.Obj.isMime(this.oFile, /^(video\/)/)) {
          let ss = ["/o/content?str=id:", this.oFile.video_cover]
          if(this.src_ts) {
            ss.push("&_t=")
            ss.push(this.src_ts)
          }          
          return {
            type: "image", value: ss.join("")
          }
        }
        //..................................
        // Others just get the icon font
        return Wn.Util.getObjIcon(this.oFile)
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    async assertListHas(list, str, invalidMsg, vars) {
      if(!_.isEmpty(list)) {
        let invalid  = true
        for(let li of list) {
          if(li == str) {
            invalid = false
            break
          }
        }
        if(invalid) {
          await Ti.Alert(invalidMsg, {
            type:"warn",
            icon:"zmdi-alert-triangle",
            vars
          })
          return false
        }
      }
      return true
    },
    //--------------------------------------
    async onOpen() {
      // remove the thumb file
      if(this.oFile) {
        let link = Wn.Util.getAppLink(this.oFile)
        //console.log("it will open ", link)
        await Ti.Be.Open(link.url, {params:link.params})
      }
    },
    //--------------------------------------
    async onRemove() {
      // remove the thumb file
      if(this.oFile) {
        await Wn.Sys.exec2(`rm id:${this.oFile.id}`)
      }
      // Notify the change
      this.$notify("change", null)
    },
    //--------------------------------------
    async onUpload(file) {
      // console.log("it will upload ", file)
      //................................
      // Check for support Types
      let type = Ti.Util.getSuffixName(file.name)
      if(!await this.assertListHas(
        this.AcceptTypes, type, 
        'i18n:wn-invalid-types',
        {current: type, supports: this.AcceptTypes.join(", ")})
      ) {
        return
      }
      if(!await this.assertListHas(
        this.AcceptMimes, file.type, 
        'i18n:wn-invalid-mimes',
        {current:file.type, supports:this.AcceptMimes.join(", ")})
      ) {
        return
      }

      //................................
      // Eval the target
      let taPath = Ti.S.renderBy(this.target, {
        type, 
        name : file.name,
        majorName : Ti.Util.getMajorName(file.name)
      })

      //................................
      // Upload file to destination
      this.uploadFile = file
      this.progress = 0

      let {ok, msg, data} = await Wn.Io.uploadFile(file, {
        target : taPath,
        mode   : "r",
        progress : (pe)=> {
          this.progress = pe.loaded / pe.total
        }
      })

      //................................
      // Reset upload
      this.uploadFile = null
      this.progress = -1

      //................................
      // Fail to upload
      if(!ok) {
        await Ti.Alert(`i18n:${msg}`, {type:"warn", icon:"zmdi-alert-triangle"})
        return
      }

      //................................
      // do Filter
      if(!_.isEmpty(this.ImageFilter)) {
        let cmd = [
          "imagic", `id:${data.id}`, 
          `-filter "${this.ImageFilter.join(" ")}"`]       
        if(this.quality>0 && this.quality<=1) {
          cmd.push(`-qa ${this.quality}`)
        }
        cmd.push("-out inplace")
        let cmdText = cmd.join(" ")
        await Wn.Sys.exec2(cmdText)
      }

      //................................
      // done
      this.src_ts = Date.now()
      this.oFile = data

      //................................
      // Transform value
      let val = Wn.Io.formatObjPath(data, this.valueType)

      //................................
      this.$notify("change", val)
    },
    //--------------------------------------
    async reload() {
      if(_.isString(this.value)) {
        this.oFile = await Wn.Io.loadMetaBy(this.value)
      }
      // Object
      else if(this.value && this.value.id && this.value.mime) {
        this.oFile = _.cloneDeep(this.value)
      }
      // Reset
      else {
        this.oFile = null
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "value" : function() {
      this.reload()
    }
  },
  //////////////////////////////////////////
  mounted : async function(){
    await this.reload()
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'm-thing-config-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/thing/mod/config/m-thing-config-actions.mjs'] = (function(){
// Ti required(Wn)
////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  //----------------------------------------
  updateShown({commit}, shown) {
    commit("mergeShown", shown)
    commit("persistShown")
  },
  //----------------------------------------
  async reloadSchema({state, commit}) {
    //console.log("reloadSchema")
    let aph  = `id:${state.meta.id}/thing-schema.json`
    let obj  = await Wn.Io.loadMeta(aph)
    let schema = await Wn.Io.loadContent(obj, {as:"json"})

    // Load extends methods
    if(schema.methods) {
      let methods = await Ti.Load(schema.methods)
      if(!_.isArray(methods)) {
        methods = [methods]
      }
      schema.methods = methods
    }
    //console.log("setSchema", schema)
    commit("setSchema", schema)
    return schema
  },
  //----------------------------------------
  async reloadLayout({state, commit}) {
    //console.log("reloadLayout")
    let aph  = `id:${state.meta.id}/thing-layout.json`
    let obj  = await Wn.Io.loadMeta(aph)
    let json = await Wn.Io.loadContent(obj, {as:"json"})

    //console.log("setLayout", json)
    commit("setLayout", json)

    // Load shown from local before reload config
    commit("restoreShown")

    return json
  },
  //----------------------------------------
  async reloadActions({state, commit}) {
    // console.log("reloadActions")
    let aph  = `id:${state.meta.id}/thing-actions.json`
    let obj  = await Wn.Io.loadMeta(aph)
    let json = await Wn.Io.loadContent(obj, {as:"json"})
    //console.log("setActions", json)
    commit("setActions", json)
    return json
  },
  //----------------------------------------
  async reload({state, commit, dispatch}, meta) {
    //console.log("thing-manager-config.reload", state)
    // Update New Meta
    if(meta) {
      commit("setMeta", meta)
    }
    // Get meta back
    else {
      meta = state.meta
    }
    // Mark reloading
    commit("setStatus", {reloading:true})

    await dispatch("reloadSchema")
    await dispatch("reloadLayout")
    await dispatch("reloadActions")

    // All done
    commit("setStatus", {reloading:false})
  }
  //----------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-markdown-richeditor.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/markdown/richeditor/wn-markdown-richeditor.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    ToolbarActions() {
      return _.merge({
        "Media" : {
          icon : "fas-photo-video",
          action : ()=>this.OnInsertMedia()
        }
      },  this.actions)
    },
    //-----------------------------------------------
    TheValue() {
      return this.value
    },
    //-----------------------------------------------
    TheMarkdownMediaSrc() {
      if(this.markdownMediaSrc) {
        return this.markdownMediaSrc
      }
      return async src => {
        // special media 
        let m = /^\/o\/content\?str=id:(.+)$/.exec(src)
        if(m) {
          let obj = await Wn.Io.loadMetaById(m[1])
          if(obj) {
            let s2 = Wn.Io.formatObjPath(obj, this.mediaSrcMode, this.meta)
            return s2;
          }
        }
        return src
      }
    },
    //-----------------------------------------------
    ThePreviewMediaSrc() {
      if(this.previewMediaSrc) {
        return this.previewMediaSrc
      }
      return async src => {
        // Outsite link
        if(/^(https?:)(\/\/)/.test(src))
          return src

        //console.log("preview", src)
        let obj = await Wn.Io.loadMetaBy(src, this.meta)
        if(obj) {
          return `/o/content?str=id:${obj.id}`
        }
        return src
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    OnEditorInit($editor) {
      this.$editor = $editor
    },
    //-----------------------------------------------
    async OnInsertMedia() {
      // Get the last open
      let last = this.meta || this.defaultMediaDir
      if(this.keepLastBy)
        last = Ti.Storage.local.getString(this.keepLastBy) || last

      // Open selector to pick list
      let list = await Wn.OpenObjSelector(last, {
        fallbackPath: this.defaultMediaDir
      })

      // User cancel
      if(!list || _.isEmpty(list)) {
        return
      }

      // Save the last open
      if(this.keepLastBy) {
        let oFir = _.first(list);
        let pph = Ti.Util.getParentPath(oFir.ph)
        let rph = Wn.Session.getFormedPath(pph)
        Ti.Storage.local.set(this.keepLastBy, rph);
      }
      
      // Batch insert
      for(let obj of list) {
        this.insertMediaObj(obj)
      }
    },
    //-----------------------------------------------
    // Insert Operation
    //-----------------------------------------------
    insertMediaObj(obj={}) {
      let mime = obj.mime

      // Guard
      if(!mime)
        return

      // Preview source
      let src = `/o/content?str=id:${obj.id}`

      // Video
      if(mime.startsWith("video/")) {
        this.insertMedia("video", src, {
          controls : false,
          autoplay : false
        })
      }
      // Image
      else if(mime.startsWith("image/")) {
        this.insertMedia("image", src)
      }
    },
    //-----------------------------------------------
    insertMedia(type="image", src, attrs={}) {
      // Guard
      if(!src) {
        return
      }

      // Prepare the Delta
      let Delta = Quill.import("delta")
      let det = new Delta()

      // Insert to current position
      let sel = this.$editor.getSelection()

      if(!sel) {
        this.$editor.setSelection(0)
        sel = {index:0, length:0}
      }

      let {index,length} = sel

      // Move to current
      det.retain(index)
            
      // Delete current
      if(length > 0) {
          det.delete(length)
      }

      // Add Media
      det.insert({[type]: src, attributes: attrs})
     
      // Update 
      this.$editor.updateContents(det)

      // Move cursor
      this.$editor.setSelection(index+1)
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  // watch: {
  //   "meta": {
  //     handler: async function(pathOrObj){
  //       console.log("meta changed!")
  //       if(_.isString(pathOrObj)) {
  //         this.myMeta = await Wn.Io.loadMetaBy(pathOrObj)
  //       } else {
  //         this.myMeta = pathOrObj
  //       }
  //     },
  //     immediate: true
  //   }
  // }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'website.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/hmaker/website/website.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////
  getters : {
    TREE_OPEND_KEY(state) {
      if(state.home) {
        return `website_tree_openeds_${state.home.id}`
      }
    },
    TREE_SELECTED_KEY(state) {
      if(state.home) {
        return `website_tree_selected_${state.home.id}`
      }
    }
  },
  ////////////////////////////////////////////////
  mutations : {
    //--------------------------------------------
    setHome(state, home) {
      state.home = home
    },
    //--------------------------------------------
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    },
    //--------------------------------------------
    setExposeHidden(state, exposeHidden) {
      state.status.exposeHidden = exposeHidden
    },
    //--------------------------------------------
    syncStatusChanged(state){
      if(state.current) {
        //console.log("do sync")
        state.status.changed = state.current.status.changed
      }
    }
    //--------------------------------------------
  }
  ////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-gui-panel.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/gui/panel/ti-gui-panel.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  inject: ["$gui"],
  /////////////////////////////////////////
  props : {
    "captureEvents" : undefined,
    "title" : {
      type : String,
      default : null
    },
    "icon" : {
      type : [String, Object],
      default : null
    },
    "hideTitle" : {
      type : Boolean,
      default : false
    },
    "actions" : {
      type : Array,
      default : ()=>[]
    },
    "actionStatus" : {
      type : Object,
      default : ()=>({})
    },
    "name" : {
      type : String,
      default : null
    },
    "type" : {
      type : String,
      default : null,
      validator : (v)=>{
        return Ti.Util.isNil(v)
          || /^(cols|rows|tabs)$/.test(v)
      }
    },
    "blocks" : {
      type : Array,
      default : ()=>[]
    },
    "body" : {
      type : [String, Object],
      default : null
    },
    "mainConClass" : undefined,
    "mainConStyle" : {
      type: Object,
      default: undefined
    },
    "adjustable" : {
      type : [Boolean, String],
      default : true,
      validator : (v)=>{
        return _.isBoolean(v) || /^(x|y)$/.test(v)
      }
    },
    "overflow" : {
      type : String,
      default : undefined
    },
    "width" : {
      type : [String,Number],
      default : -1
    },
    "height" : {
      type : [String,Number],
      default : -1
    },
    "viewportWidth" : {
      type : [String,Number],
      default : 0
    },
    "viewportHeight" : {
      type : [String,Number],
      default : 0
    },
    "position" : {
      type : String,
      default : "center",
      validator : (v)=>{
        return /^(left|right|top|bottom|center)$/.test(v)
          || /^((left|right)-top|bottom-(left|right))$/.test(v)
      }
    },
    "fixed" : {
      type : Boolean,
      default: false
    },
    "closer" : {
      type : String,
      default : "default",
      validator : (v)=>(
        _.isNull(v) || /^(default|bottom|top|left|right)$/.test(v)
      )
    },
    "mask" : {
      type : Boolean,
      default : false
    },
    "transparent": {
      type : Boolean,
      default : false
    },
    "clickMaskToClose" : {
      type : Boolean,
      default : false
    },
    "schema" : {
      type : Object,
      default : ()=>({})
    },
    "shown" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "show-mask" : this.mask,
        "no-mask"   : !this.mask,
        "is-bg-transparent": this.transparent,
        "is-bg-opaque": !this.transparent,
        "is-closer-default" : this.isCloserDefault,
        "is-fixed" : this.fixed
      }, `at-${this.position}`)
    },
    //--------------------------------------
    ConStyle() {
      let width  = Ti.Css.toPixel(this.width, this.viewportWidth, this.width)
      let height = Ti.Css.toPixel(this.height, this.viewportHeight, this.height)
      return Ti.Css.toStyle({width, height})
    },
    //--------------------------------------
    hasCloser() {
      return this.closer ? true : false
    },
    //--------------------------------------
    isCloserDefault() {
      return true === this.closer || "default" == this.closer
    },
    //--------------------------------------
    CloserClass() {
      return Ti.Css.mergeClassName({
        'as-lamp-cord' : !this.isCloserDefault,
        'as-default'   : this.isCloserDefault,
        [`at-${this.closer}`] : !this.isCloserDefault
      })
    }
    //--------------------------------------
    // theCloserIconName() {
    //   return this.isCloserDefault
    //           ? "zmdi-minus"
    //           : "zmdi-close";
    //}
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClose() {
      this.$gui.OnBlockHide(this.name)
    },
    //--------------------------------------
    OnClickMask() {
      if(this.clickMaskToClose) {
        this.$gui.OnBlockHide(this.name)
      }
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-input-icon-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/icon/ti-input-icon-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  "options": {
    type: Array,
    default: () => [
      "im-spotify",
      "im-newsletter",
      "im-award",
      "im-headphones",
      "im-megaphone",
      "im-barcode",
      "im-google-play",
      "im-facebook-messenger",
      "im-wechat",
      "im-line",
      "im-git",
      "im-first-aid",
      "im-ribbon",
      "im-plane",
      "im-idea",
      "im-data",
      "im-data-delete",
      "im-data-validate",
      "im-folder-add",
      "im-radar",
      "im-pizza",
      "im-truck",
      "im-support",
      "im-reset",
      "im-import",
      "im-export",
      "im-color-fan",
      "im-cookie",
      "im-gift-card",
      "im-factory",
      "im-pulse",
      "im-accessibility",
      "im-apartment",
      "im-plugin",
      "im-layer",
      "im-direction",
      "im-dribbble",
      "im-radio",
      "im-bank",
      "im-battery-empty",
      "im-battery",
      "im-battery-full",
      "im-x-mark-circle-o",
      "im-timer",
      "im-hashtag",
      "im-server",
      "im-flask",
      "im-anchor",
      "im-umbrella",
      "im-cc-amex",
      "im-cc-visa",
      "im-cc-mastercard",
      "im-cc-paypal",
      "im-cc-amazon",
      "im-cc-bitcoin",
      "im-car",
      "im-paintbrush",
      "im-cube",
      "im-cubes",
      "im-language",
      "im-calculator",
      "im-user-settings",
      "im-trophy",
      "im-pointer",
      "im-edit",
      "im-warning-circle",
      "im-check-mark-circle-o",
      "im-date-o",
      "im-newspaper-o",
      "im-wrench",
      "im-binoculars",
      "im-gamepad",
      "im-history",
      "im-bell-active",
      "im-coffee",
      "im-leaf",
      "im-gift",
      "im-flip-chart-o",
      "im-clock",
      "im-line-chart-up",
      "im-laptop-o",
      "im-monitor-o",
      "im-cursor",
      "im-keyboard",
      "im-pin",
      "im-store",
      "im-graduation-hat",
      "im-certificate-o",
      "im-sun",
      "im-diamond-o",
      "im-drop",
      "im-paperplane",
      "im-fingerprint",
      "im-lifebuoy",
      "im-power",
      "im-target",
      "im-navigation",
      "im-bug",
      "im-network",
      "im-pie-chart",
      "im-note-o",
      "im-id-card",
      "im-tags",
      "im-floppy-disk",
      "im-dashboard",
      "im-tools",
      "im-users",
      "im-trash-can",
      "im-x-mark-circle",
      "im-x-mark",
      "im-shield",
      "im-mobile",
      "im-inbox",
      "im-crown",
      "im-check-square",
      "im-check-square-o",
      "im-check-mark-circle",
      "im-check-mark",
      "im-redo",
      "im-undo",
      "im-map-o",
      "im-task-o",
      "im-menu-dot-v",
      "im-edit-off",
      "im-facebook",
      "im-sitemap",
      "im-save",
      "im-volume-off",
      "im-volume",
      "im-sign-out",
      "im-sign-in",
      "im-shopping-cart",
      "im-rocket",
      "im-banknote",
      "im-fullscreen",
      "im-minimize",
      "im-maximize",
      "im-light-bulb",
      "im-filter",
      "im-picture-o",
      "im-eye-off",
      "im-eye",
      "im-external-link",
      "im-random",
      "im-loop",
      "im-next",
      "im-previous",
      "im-eject",
      "im-stop",
      "im-pause",
      "im-play",
      "im-credit-card",
      "im-bookmark",
      "im-upload",
      "im-download",
      "im-video-camera",
      "im-photo-camera",
      "im-care-up",
      "im-care-down",
      "im-care-left",
      "im-arrow-up-circle",
      "im-arrow-down-circle",
      "im-arrow-left-circle",
      "im-arrow-right-circle",
      "im-arrow-up",
      "im-arrow-down",
      "im-arrow-left",
      "im-arrow-right",
      "im-angle-up-circle",
      "im-angle-down-circle",
      "im-angle-left-circle",
      "im-angle-right-circle",
      "im-angle-up",
      "im-angle-down",
      "im-angle-left",
      "im-angle-right",
      "im-twitch",
      "im-reddit",
      "im-edge",
      "im-whatsapp",
      "im-amazon",
      "im-snapchat",
      "im-instagram",
      "im-fire",
      "im-sync",
      "im-toggle",
      "im-control-panel",
      "im-archive",
      "im-bell",
      "im-bell-off",
      "im-youtube",
      "im-spinner",
      "im-smiley-o",
      "im-frown-o",
      "im-code",
      "im-android-os",
      "im-linux-os",
      "im-apple-os",
      "im-menu",
      "im-menu-list",
      "im-menu-dot-h",
      "im-windows-os",
      "im-square-o",
      "im-check-square-i",
      "im-radio-button-circle",
      "im-radio-button-circle-o",
      "im-flag",
      "im-opera",
      "im-thumb-up",
      "im-thumb-down",
      "im-safari",
      "im-paper-clip",
      "im-firefox",
      "im-copy",
      "im-chrome",
      "im-quote-left",
      "im-quote-right",
      "im-ie",
      "im-briefcase",
      "im-forbidden",
      "im-vk",
      "im-wizard",
      "im-location",
      "im-paypal",
      "im-coin",
      "im-key",
      "im-lock",
      "im-lock-open",
      "im-share",
      "im-flash",
      "im-cloud",
      "im-database",
      "im-wifi",
      "im-book",
      "im-audio",
      "im-video",
      "im-microphone",
      "im-printer",
      "im-computer",
      "im-phone",
      "im-user-male",
      "im-user-female",
      "im-user-circle",
      "im-clock-o",
      "im-calendar",
      "im-pencil",
      "im-question",
      "im-bar-chart",
      "im-info",
      "im-folder",
      "im-folder-open",
      "im-file",
      "im-file-o",
      "im-files-o",
      "im-warning",
      "im-link",
      "im-unlink",
      "im-tag",
      "im-heart",
      "im-cloud-upload",
      "im-cloud-download",
      "im-speech-bubble",
      "im-speech-bubble-comment",
      "im-speech-bubble-comments",
      "im-mail",
      "im-globe",
      "im-home",
      "im-window-o",
      "im-table",
      "im-windows-o",
      "im-gear",
      "im-twitter",
      "im-magnifier",
      "im-magnifier-plus",
      "im-magnifier-minus",
      "im-minus",
      "im-minus-circle",
      "im-plus",
      "im-plus-circle",
      "im-care-right",
      "im-star",
      "im-star-half",
      "im-star-o",
      "im-circle-o",
      "im-xing",
      "im-vimeo",
      "im-tumblr",
      "im-stumbleupon",
      "im-stackoverflow",
      "im-soundcloud",
      "im-skype",
      "im-pinterest",
      "im-linkedin",
      "im-google-plus",
      "im-github",
      "im-flickr",
      "im-facebook-like",
      "im-blogger",
      "im-behance"
    ]
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-nav-side.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/nav/side/web-nav-side.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  data: ()=>({
    myOpenedIds : {}
  }),
  /////////////////////////////////////////
  props : {
    "openedDepth" : {
      type : Number,
      default : 1
    },
    "openedIcons" : {
      type : Object,
      default: ()=>({
        opened : "im-angle-up",
        closed : "im-angle-down"
      })
    }
  },
  //////////////////////////////////////////
  computed : {
    //-------------------------------------
    //-------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //-------------------------------------\
    OnChangeOpened({id, opened}) {
      this.myOpenedIds = _.assign({}, this.myOpenedIds, {
        [id] : opened
      })
    }
    //-------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'mod-profile-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/lib/www/mod/auth/mod-profile-actions.mjs'] = (function(){
const _M = {
  //--------------------------------------------
  async saveProfile({state, getters, commit, dispatch,rootState}, profile={}) {
    //console.log("profile", profile)
    // Can not update email/phone/nm through this method
    profile = _.omit(profile, "email", "phone", "nm")
    // Guard Empty
    if(_.isEmpty(profile)) {
      return
    }
    // Guard No Change
    if(_.isMatch(state.me, profile)) {
      return
    }

    // Prepare http options
    let params = {
      site : rootState.siteId,
      ticket: state.ticket
    }
    let body = JSON.stringify(profile)
    
    commit("setLoading", true, {root:true})

    // Send request
    let url = getters.urls.profile_save
    await Ti.Http.post(url, {
      params, body, as:"json"
    })

    // Then reload
    await dispatch("doCheckMe", {force:true})

    commit("setLoading", false, {root:true})

  }
  //--------------------------------------------
}
return _M;;
})()
// ============================================================
// EXPORT 'web-meta-article.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/meta/article/web-meta-article.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  props : {
    "title" : {
      type : String,
      default : undefined
    },
    "brief" : {
      type : String,
      default : undefined
    },
    "pubDate" : {
      type : [String, Number, Date],
      default : undefined
    },
    "tags" : {
      type : [String, Array],
      default : undefined
    },
    "dateFormat" : {
      type : String,
      default : "yyyy-MM-dd"
    },
    "author" : {
      type : String,
      default : undefined
    },
    "duration" : {
      type : [String, Number],
      default : undefined
    },
    "watchCount" : {
      type : Number,
      default : 0
    },
    "align": {
      type: String,
      default: "center",
      validator: v => /^(left|center|right)$/.test(v)
    },
    "bottomLine" : {
      type : Boolean,
      default : true
    }
  },
  //////////////////////////////////////////
  computed : {
    //......................................
    TopClass(){
      return this.getTopClass(`align-${this.align}`)
    },
    //......................................
    TheTags() {
      return Ti.S.toArray(this.tags)
    },
    //......................................
    hasTags() {
      return !_.isEmpty(this.TheTags)
    },
    //......................................
    DurationText() {
      if(_.isNumber(this.duration)) {
        return Ti.I18n.getf("du-in-min", {n:this.duration})
      }
      return this.duration
    },
    //......................................
    PubDateText() {
      if(this.pubDate) {
        return Ti.DateTime.format(this.pubDate, this.dateFormat)
      }
    },
    //......................................
    hasInfo() {
      return this.author
        || this.watchCount > 0
        || this.author
        || this.duration
    }
    //......................................
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-markdown-richeditor.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/markdown/richeditor/ti-markdown-richeditor.mjs'] = (function(){
/////////////////////////////////////////////////////
function ResetQuillConfig(Quill) {
  //.................................................
  // Reset once
  if(Quill.__has_been_reset) 
    return
  //.................................................
  // hljs.configure({   // optionally configure hljs
  //   languages: ['javascript', 'ruby', 'python']
  // });
  //.................................................
  // Reset Indent    
  const Indent = Quill.import('formats/indent')
  Indent.keyName = "li-indent"
  Indent.whitelist = [1,2,3,4,5,6]
  //.................................................
  // New format
  // ...
  //.................................................
  // Mark it
  Quill.__has_been_reset = true
}
/////////////////////////////////////////////////////
const BUILTIN_TOOLBAR_ACTIONS = {
  //.........................................
  "|" : {type : "line"},
  //.........................................
  "B" : {
    icon : "fas-bold",
    notifyChange: "bold",
    highlight : "bold",
    disabled : "italic"
  },
  //.........................................
  "I" : {
    icon : "fas-italic",
    notifyChange : "italic",
    highlight : "italic",
    disabled : "bold"
  },
  //.........................................
  "Link" : {
    icon : "fas-link",
    notifyChange : "link",
    highlight : "link"
  },
  //.........................................
  "Code" : {
    icon : "zmdi-code",
    notifyChange : "code",
    highlight : "code"
  },
  //.........................................
  "Heading" : {
    type : "group",
    icon : "fas-hashtag",
    text : "i18n:wordp-heading",
    items : [{
        text: "i18n:wordp-h1",
        notifyChange: "header",
        highlight : "h1",
        value: 1
      }, {
        text: "i18n:wordp-h2",
        notifyChange: "header",
        highlight : "h2",
        value: 2
      }, {
        text: "i18n:wordp-h3",
        notifyChange: "header",
        highlight : "h3",
        value: 3
      }, {
        text: "i18n:wordp-h4",
        notifyChange: "header",
        highlight : "h4",
        value: 4
      }, {
        text: "i18n:wordp-h5",
        notifyChange: "header",
        highlight : "h5",
        value: 5
      }, {
        text: "i18n:wordp-h6",
        notifyChange: "header",
        highlight : "h6",
        value: 6
      }, {
        text: "i18n:wordp-h0",
        notifyChange: "header",
        highlight : "h0",
        value:  0
      }]
  },
  //.........................................
  "BlockQuote" : {
    icon : "fas-quote-right",
    notifyChange : "blockquote",
    highlight : "blockquote"
  },
  //.........................................
  "CodeBlock" : {
    icon : "fas-code",
    notifyChange : "code_block",
    highlight : "code-block"
  },
  //.........................................
  "Indent" : {
    icon : "fas-indent",
    notifyChange: "indent"
  },
  //.........................................
  "Outdent" : {
    icon : "fas-outdent",
    notifyChange: "outdent"
  },
  //.........................................
  "UL" : {
    icon : "fas-list-ul",
    notifyChange : "list",
    value : "bullet",
    highlight: {list:"bullet"}
  },
  //.........................................
  "OL" : {
    icon : "fas-list-ol",
    notifyChange : "list",
    value : "ordered",
    highlight: {list:"ordered"}
  }
  //.........................................
}
/////////////////////////////////////////////////////
const _M = {
  ///////////////////////////////////////////////////
  data: ()=>({
    myMeta : {},
    syncForbid : 0,
    myToolbarStatus : {}
  }),
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    TopClass() {
      return this.getTopClass({
        "nil-content" : this.isContentNil,
        "has-content" : !this.isContentNil
      })
    },
    //-----------------------------------------------
    ThemeClass() {
      if(this.ThemeName) {
        return `ti-markdown-theme-${this.ThemeName}`
      }
    },
    //-----------------------------------------------
    ThemeName() {
      return _.get(this.myMeta, "theme") || this.theme
    },
    //-----------------------------------------------
    hasToolbar() {
      return !_.isEmpty(this.ToolbarMenuData)
    },
    //-----------------------------------------------
    isContentLoading() {
      return _.isUndefined(this.value)
    },
    //-----------------------------------------------
    isContentNil() {
      return Ti.Util.isNil(this.value)
    },
    //-----------------------------------------------
    BlankComStyle() {
      return {
        position: "absolute",
        top:0, right:0, bottom:0, left:0
      }
    },
    //-----------------------------------------------
    ToolbarActions() {
      return _.merge({}, BUILTIN_TOOLBAR_ACTIONS, this.actions)
    },
    //-----------------------------------------------
    ToolbarMenuData() {
      let list = []
      _.forEach(this.toolbar, v => {
        let it = _.get(this.ToolbarActions, v)
        //...........................................
        if(it) {
          list.push(it)
        }
        //...........................................
      })
      // list.push({
      //   text: "HL",
      //   action : "$parent:highlightCode"
      // })
      return list;
    },
    //-----------------------------------------------
    TheMarkdownMediaSrc() {
      if(_.isFunction(this.markdownMediaSrc)){
        return this.markdownMediaSrc
      }

      if(_.isString(this.markdownMediaSrc)) {
        return Ti.Util.genInvoking(this.markdownMediaSrc, {
          partial: "right"
        })
      }
    },
    //-----------------------------------------------
    ThePreviewMediaSrc() {
      if(_.isFunction(this.previewMediaSrc)){
        return this.previewMediaSrc
      }

      if(_.isString(this.previewMediaSrc)) {
        return Ti.Util.genInvoking(this.previewMediaSrc, {
          partial: "right"
        })
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    // Events
    //-----------------------------------------------
    OnToolbarChange({name, value}={}) {
      //console.log("OnToolbarChange", {name, value})
      const fn = ({
        //...........................................  
        bold  ($q, val){$q.format("bold", val)},
        italic($q, val){$q.format("italic", val)},
        code($q, val){$q.format("code", val)},
        //...........................................
        header($q, val) {$q.format("header", val)},
        //...........................................
        blockquote($q, val){$q.format("blockquote", val)},
        code_block($q, val){$q.format("code-block", val)},
        //..........................................
        async link($q, val){
          let range = $q.getSelection()
          if(!range) {
            return await Ti.Toast.Open("i18n:wordp-nil-sel", "warn")
          }
          // Eval Format
          let {link} = $q.getFormat(range)
          
          // Adjust range
          let text;
          if(link) {
            let [bolt, offset] = $q.getLeaf(range.index)
            text = bolt.text
            let index = range.index - offset;
            let length = text.length
            range = {index, length}
          }
          else {
            text = $q.getText(range)
          }
          // Eval new tab
          let newtab  = false
          if(/^\+/.test(text)) {
            text = text.substring(1)
            newtab = true
          }
          
          // Get link information
          let reo = await Ti.App.Open({
            icon  : "fas-link",
            title : "i18n:wordp-link",
            height : "3.2rem",
            result : {
              text, newtab, link
            },
            model : {prop: "data", event: "change"},
            comType: "TiForm",
            comConf: {
              fields: [{
                title : "i18n:link-href",
                name  : "link",
                comType : "ti-input"
              }, {
                title : "i18n:link-text",
                name  : "text",
                comType : "ti-input"
              }, {
                title : "i18n:open-newtab",
                name  : "newtab",
                type  : "Boolean",
                comType : "ti-toggle"
              }]
            }
          })
          
          // User Cancel
          if(!reo)
            return

          let newText = reo.text
          if(reo.link && reo.newtab)
            newText = "+" + newText
          $q.updateContents({
            ops: [
              {retain: range.index},
              {delete: range.length},
              {insert: newText, attributes: {
                link: reo.link, newtab: true
              }}]
          })
        },
        //...........................................
        indent ($q){$q.format("indent", "+1")},
        outdent($q){$q.format("indent", "-1")},
        //...........................................
        list($q, val="bullet"){$q.format("list", val)}
        //...........................................
      })[name]
      //.............................................
      // Invoke
      if(_.isFunction(fn)) {
        fn(this.$editor, value)
        this.quillUpdateFormat()
      }
      //.............................................
    },
    //-----------------------------------------------
    // Utility
    //-----------------------------------------------
    async renderMarkdown() {
      //console.log("!!!!!!!!!!!!!!!!!!!!!! renderMarkdown")
      if(!Ti.Util.isBlank(this.value)) {
        // Parse markdown
        let MdDoc = Cheap.parseMarkdown(this.value)
        //console.log(MdDoc.toString())
        window.MdDoc = MdDoc
        this.myMeta = _.cloneDeep(MdDoc.getMeta())

        // Get delta
        let delta = await MdDoc.toDelta({
          mediaSrc: this.ThePreviewMediaSrc
        })
        //console.log(JSON.stringify(delta, null, '   '))

        // Update Quill editor content
        this.$editor.setContents(delta);
        
      }
      // Show Blank
      else {
        this.myMeta = {}
        this.$editor.setContents([]);
      }
    },
    //-----------------------------------------------
    syncMarkdown() {
      if(this.syncForbid > 0) {
        //console.log("!forbid! syncMarkdown", this.syncForbid)
        this.syncForbid --
        return
      }
      this.renderMarkdown()
    },
    //-----------------------------------------------
    // Highlight
    //-----------------------------------------------
    // highlightCode() {
    //   for(let $code of this.$refs.stage.querySelectorAll("pre")) {
    //     console.log($code)
    //     hljs.highlightBlock($code)
    //   }
    // },
    //-----------------------------------------------
    // Quill
    //-----------------------------------------------
    async quillChanged(delta) {
      //console.log("changed", JSON.stringify(delta, null, '  '))
      //console.log("quillChanged")
      // Guard
      if(this.isContentNil) {
        return
      }

      // Delat => CheapDocument
      let MdDoc = Cheap.parseDelta(delta)
      MdDoc.setDefaultMeta(this.myMeta)
      this.myMeta = MdDoc.getMeta()
      //console.log(MdDoc.toString())
      
      // CheapDocument => markdown
      let markdown = await MdDoc.toMarkdown({
        mediaSrc: this.TheMarkdownMediaSrc
      })
      //console.log(markdown)
      if(markdown != this.value) {
        this.syncForbid = 1
        this.$notify("change", markdown)
      }
    },
    //-----------------------------------------------
    quillSelectionChanged(range) {
      // Update selection info
      if(range) {
        // Indicate row:col
        let ii = [range.index]
        if(range.length > 0) {
          ii.push(range.length)
        }
        this.$notify("indicate", ii.join(":"))

        // Update format
        this.quillUpdateFormat(range)
      }
    },
    //-----------------------------------------------
    quillUpdateFormat(range) {
      let fmt = this.$editor.getFormat(range)
      //console.log(fmt)
      //fmt = _.cloneDeep(fmt)
      if(fmt.header) {
        fmt[`h${fmt.header}`] = true
      } else {
        fmt["h0"] = true
      }
      if(!_.isEqual(this.myToolbarStatus, fmt)) {
        this.myToolbarStatus = fmt
      }
    },
    //-----------------------------------------------
    installQuillEditor() {
      // Guard
      if(this.$editor) {
        return
      }
      //.............................................
      // Reset the Quill Default
      ResetQuillConfig(Quill)
      //Quill.register(MyIndent)
      //.............................................
      this.$editor = new Quill(this.$refs.stage, {
        modules: {
          syntax: false
        },
        bounds : this.$refs.stage,
        placeholder : Ti.I18n.text(this.placeholder)
      });
      //.............................................
      this.debounceQuillChanged = _.debounce((newDelta, oldDelta)=>{
        let delta = oldDelta.compose(newDelta)
        this.quillChanged(delta)
      }, 1000)
      //.............................................
      this.$editor.on("text-change", (newDelta, oldDelta, source)=>{
        //console.log("text-change",this.isContentNil, _.cloneDeep({newDelta, oldDelta}))
        if(!this.isContentNil) {
          this.debounceQuillChanged(newDelta, oldDelta)
        }
      })
      //.............................................
      this.$editor.on("selection-change", (range, oldRange, source)=>{
        this.quillSelectionChanged(range)
      })
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "value" : {
      handler : "syncMarkdown"
    },
    "isContentNil": function(newVal, oldVal){
      //console.log("isContentNil", newVal, oldVal)
      if(newVal) {
        this.syncForbid = 0
      }
    }
  },
  ///////////////////////////////////////////////////
  mounted() {
    this.syncForbid = 0;
    this.installQuillEditor()
    this.syncMarkdown()
  },
  ///////////////////////////////////////////////////
  beforeDestroy() {
    this.syncForbid = 0;
  }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'auth-signup.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/auth/signup/auth-signup.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////////
  data : ()=>({
    "data" : {
      "name"   : null,
      "passwd" : null
    },
    "guarding" : false,
    "currentMode"  : "login_by_passwd",
    // String, Array
    "invalidField" : null,
    // delay to get the next captcha to prevent robot
    "delay" : -1
  }),
  ///////////////////////////////////////////////////////
  props : {
    // - "login_by_passwd"
    // - "login_by_phone"
    // - "login_by_email"
    // - "bind_phone"
    // - "bind_email"
    "mode" : {
      type : String,
      default : "login_by_passwd"
    },
    "toggleMode": {
      type : String,
      default : "login_by_phone"
    },
    "captcha" : {
      type : String,
      required : true,
      default : null
    },
    "scenes" : {
      type : Object,
      default: ()=>({
        robot  : "robot",
        bind_phone : "auth",
        bind_email : "auth",
        login_by_email   : "auth",
        login_by_phone   : "auth",
        login_by_passwd  : "auth"
      })
    },
    // The interval of get capche to prevent robot
    // (in second)
    "getDelay" : {
      type : Number,
      default : 60
    },
    // "invalidField" : {
    //   type : [String, Array],
    //   default : null
    // }
    "logo": {
      type: String,
      default: undefined
    },
    "oauth2": {
      type: Array,
      default: ()=>[]
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //---------------------------------------------------
    Msgs() {
      // Login by password
      if("login_by_passwd" == this.currentMode) {
        return {
          "title"     : "i18n:auth-passwd-title",
          "nameTip"   : (
            "login_by_email" == this.toggleMode
              ? "i18n:auth-passwd-name-email-tip"
              : "i18n:auth-passwd-name-phone-tip"
          ),
          "passwdTip" : "i18n:auth-passwd-tip",
          "btnText"   : "i18n:auth-login",
          "linkLeft"  : (
            "login_by_email" == this.toggleMode
              ? "i18n:auth-go-email"
              : "i18n:auth-go-phone"
          ),
          "linkRight" : "i18n:auth-passwd-getback",
          "blankName" : "i18n:auth-blank-name"
        }
      }
      // Login by Phone
      if("login_by_phone" == this.currentMode) {
        return {
          "title"     : "i18n:auth-phone-title",
          "nameTip"   : "i18n:auth-phone-tip",
          "passwdTip" : "i18n:auth-phone-vcode",
          "codeGet"   : "i18n:auth-phone-vcode-get",
          "btnText"   : "i18n:auth-login-or-signup",
          "linkLeft"  : "i18n:auth-go-passwd",
          "linkRight" : "i18n:auth-vcode-lost",
          "blankName" : "i18n:auth-blank-phone"
        }
      }
      // Login by email
      if("login_by_email" == this.currentMode) {
        return {
          "title"     : "i18n:auth-email-title",
          "nameTip"   : "i18n:auth-email-tip",
          "passwdTip" : "i18n:auth-email-vcode",
          "codeGet"   : "i18n:auth-email-vcode-get",
          "btnText"   : "i18n:auth-login-or-signup",
          "linkLeft"  : "i18n:auth-go-passwd",
          // "linkRight" : "i18n:auth-vcode-lost",
          "linkRight" : undefined,
          "blankName" : "i18n:auth-blank-email"
        }
      }
      // Bind the phone
      if("bind_phone" == this.currentMode) {
        return {
          "title"     : "i18n:auth-bind-phone-title",
          "nameTip"   : "i18n:auth-phone-tip",
          "passwdTip" : "i18n:auth-phone-vcode",
          "codeGet"   : "i18n:auth-phone-vcode-get",
          "btnText"   : "i18n:auth-bind",
          //"linkLeft"  : "i18n:auth-bind-link-left",
          //"linkRight" : "i18n:auth-vcode-lost",
          "linkRight" : undefined,
          "blankName" : "i18n:auth-blank-phone"
        }
      }
      // Bind the email
      if("bind_email" == this.currentMode) {
        return {
          "title"     : "i18n:auth-bind-email-title",
          "nameTip"   : "i18n:auth-email-tip",
          "passwdTip" : "i18n:auth-email-vcode",
          "codeGet"   : "i18n:auth-email-vcode-get",
          "btnText"   : "i18n:auth-bind",
          //"linkLeft"  : "i18n:auth-bind-link-left",
          "linkRight" : "i18n:auth-vcode-lost",
          "blankName" : "i18n:auth-blank-email"
        }
      }
      // Invalid mode
      throw Ti.Err.make("e.com.combo.auth.invalid-mode", this.currentMode)
    },
    //---------------------------------------------------
    Params() {
      return _.mapValues(this.data, (str)=>_.trim(str))
    },
    //---------------------------------------------------
    isBlankName() {
      return this.Params.name ? false : true
    },
    //---------------------------------------------------
    isBlankNameOrPasswd() {
      let {name, passwd} = this.Params
      return !name || !passwd
    },
    //---------------------------------------------------
    Invalid() {
      return {
        name   : this.isInvalid("name"),
        passwd : this.isInvalid("passwd")
      }
    },
    //---------------------------------------------------
    NameClass() {
      if(this.guarding && 
        (this.Invalid.name || !this.Params.name))
        return "is-invalid"
    },
    //---------------------------------------------------
    PasswdClass() {
      if(this.guarding && 
        (this.Invalid.passwd || !this.Params.passwd))
        return "is-invalid"
    },
    //---------------------------------------------------
    PasswdInputType() {
      return "login_by_passwd" == this.currentMode
        ? "password"
        : "text"
    },
    //---------------------------------------------------
    OAuth2Items() {
      return _.cloneDeep(this.oauth2)
    },
    //---------------------------------------------------
    hasOAuth2() {
      return !_.isEmpty(this.OAuth2Items)
    },
    //---------------------------------------------------
    hasToggleMode() {
      return !_.isEmpty(this.toggleMode)
    },
    //---------------------------------------------------
    // 验证码发送目标的名称（i18n）
    ToggleModeName(){
      return ({
        "login_by_phone" : "i18n:auth-ta-phone",
        "login_by_email" : "i18n:auth-ta-email",
        "bind_phone"     : "i18n:auth-ta-phone",
        "bind_email"     : "i18n:auth-ta-email"
      })[this.toggleMode]
    },
    //---------------------------------------------------
    // 验证码发送目标的名称（i18n）
    vCodeTargetName(){
      return ({
        "login_by_phone" : "i18n:auth-ta-phone",
        "login_by_email" : "i18n:auth-ta-email",
        "bind_phone"     : "i18n:auth-ta-phone",
        "bind_email"     : "i18n:auth-ta-email"
      })[this.currentMode]
    },
    //---------------------------------------------------
    // 验证码发送目标的名称（i18n）
    vCodeTargetBy(){
      return ({
        "login_by_phone" : "i18n:auth-ta-by-phone",
        "login_by_email" : "i18n:auth-ta-by-email",
        "bind_phone"     : "i18n:auth-ta-by-phone",
        "bind_email"     : "i18n:auth-ta-by-email"
      })[this.currentMode]
    },
    //---------------------------------------------------
    // 不同模式下的场景
    vCodeScene() {
      return _.get(this.scenes, this.currentMode) || "auth"
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods :{
    //---------------------------------------------------
    OnChangeMode() {
      // -> login-by-vcode
      if("login_by_passwd" == this.currentMode) {
        this.currentMode = this.toggleMode
      }
      // -> login-by-passwd
      else {
        this.currentMode = "login_by_passwd"
      }
      Ti.Be.BlinkIt(this.$el)  
    },
    //---------------------------------------------------
    OnAuthSubmit() {
      this.guarding = true
      // Guarding
      if(this.isBlankNameOrPasswd) {
        return Ti.Toast.Open("i18n:auth-blank-name-passwd", "warn")
      }
      // Mask GUI
      let toast = Ti.Toast.Open({
        icon : "fas-spinner fa-spin",
        content : "i18n:auth-doing",
        position : "center",
        duration : 0,
        closer : false
      })

      // Do Auth
      this.$notify("auth:send", {
        type   : this.currentMode,
        name   : this.Params.name,
        passwd : this.Params.passwd,
        // Close loading toast
        done : ()=> {
          toast.close()
          this.InvalidField = null
        },
        ok : ()=>{
          Ti.Toast.Open({
            type : "success",
            position : "top",
            content : "i18n:auth-ok",
            duration : 2000
          })
          this.$notify("auth:ok")
        },
        noexist : ()=>{
          this.InvalidField = "name"
        },
        invalid : ()=> {
          this.InvalidField = "passwd"
        },
        others : ()=> {
          this.InvalidField = ["name", "passwd"]
        },
        fail : ({errCode, data}={})=> {
          // VCode Error
          if("e.auth.captcha.invalid" == errCode) {
            Ti.Toast.Open({
              type : "warn",
              position : "top",
              content : `i18n:e-www-invalid-captcha`,
              vars : {
                ta : Ti.I18n.text(this.vCodeTargetName)
              },
              duration : 5000
            })
          }
          // NoSaltedPasswd
          else if("e.auth.login.NoSaltedPasswd" == errCode) {
            Ti.Alert("i18n:auth-login-NoSaltedPasswd", {
              title: "i18n:e-auth-login-NoSaltedPasswd",
              icon: "zmdi-shield-security",
              textOk: "i18n:i-known",
              vars: {
                ta : Ti.I18n.text(this.ToggleModeName)
              }
            })
          }
          // Others Error
          else {
            Ti.Toast.Open({
              type : "warn",
              position : "top",
              content : `i18n:${errCode}`,
              duration : 5000
            })
          }
        }
      })
    },
    //---------------------------------------------------
    async OnGetVcode() {
      this.guarding = true
      // The Account Name is required
      if(this.isBlankName) {
        this.InvalidField = "name"
        Ti.Toast.Open(this.Msgs["blankName"], "warn")
        return
      }

      // Reset invalid
      this.guarding = false
      this.InvalidField = null

      // Show the image captcha to prevent robot
      //console.log("captcha", this.captcha)
      let vars = {
        scene   : this.scenes.robot,
        account : this.Params.name
      }
      //let src = "/api/joysenses/auth/captcha?site=rv340tg5gcigsp6p5hvigc2gjb&account=18501211423"
      let src = Ti.S.renderBy(this.captcha, vars)
      let captcha = await Ti.Captcha(src)
      if(!captcha)
        return

      // Mask GUI
      let toast = Ti.Toast.Open({
        icon : "fas-spinner fa-spin",
        content : "i18n:auth-sending-vcode",
        position : "center",
        duration : 0,
        closer : false
      })

      // use the captcha to get code
      this.$notify("get:vcode", {
        type    : this.currentMode,
        scene   : this.vCodeScene,
        account : this.data.name,
        captcha,
        done: ()=>{
          toast.close()
          this.InvalidField = null
          this.data.passwd = ""
        },
        ok : ({duInMin=60}={})=>{
          console.log(arguments)
          this.delay = this.getDelay
          Ti.Toast.Open({
            type : "success",
            position : "top",
            content : "i18n:auth-sent-ok",
            vars : {
              ta  : Ti.I18n.text(this.vCodeTargetName),
              by  : Ti.I18n.text(this.vCodeTargetBy),
              min : duInMin
            },
            duration : 5000
          })
        },
        fail : ({errCode, data}={})=> {
          console.log("haha")
          Ti.Toast.Open({
            type : "warn",
            position : "top",
            content : `i18n:${errCode}`,
            duration : 5000
          })
        }
      })
    },
    //---------------------------------------------------
    isInvalid(name="") {
      if(_.isArray(this.InvalidField)) {
        return _.indexOf(this.InvalidField, name) >= 0
      }
      return name == this.InvalidField
    },
    //-----------------------------------------------
    // Callback
    //-----------------------------------------------
    __ti_shortcut(uniqKey) {
      //....................................
      // If droplist is actived, should collapse it
      if("ENTER" == uniqKey) {
        if(!this.isBlankNameOrPasswd) {
          this.$nextTick(()=>{
            this.OnAuthSubmit()
          })
          return {stop:true, quit:true}
        }
      }
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  watch : {
    "currentMode" : function() {
      this.guarding = false
      //this.data.name = ""
      this.data.passwd = ""
    }
  },
  ///////////////////////////////////////////////////////
  mounted : function() {
    if(this.mode) {
      this.currentMode = this.mode
    }
    // count the secound
    this.__H = window.setInterval(()=>{
      if(this.delay>=0)
        this.delay --
    }, 1000)
  },
  ///////////////////////////////////////////////////////
  beforeDestroy : function() {
    if(this.__H) {
      window.clearInterval(this.__H)
    }
  }
  ///////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-nav-item-mixins.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/nav/support/web-nav-item-mixins.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////////
  props : {
    "id" : {
      type: String,
      default: undefined
    },
    "index" : {
      type: Number,
      default: undefined
    },
    "idPath" : {
      type : Array,
    },
    "indexPath" : {
      type : Array
    },
    "depth" : {
      type:Number, 
      default: 0
    },
    "icon"  : {
      type:[String,Object], 
      default:undefined
    },
    "title" : {
      type:String, 
      default:undefined
    },
    "type"  : {
      type:String, 
      default:undefined
    },
    "params"  : {
      type: Object, 
      default:undefined
    },
    "href"  : {
      type:String, 
      default:undefined
    },
    "target"  : {
      type:String, 
      default:undefined
    },
    "value"  : {
      type:String, 
      default:undefined
    },
    "items" : {
      type : Array,
      default : undefined
    },
    "highlight" : {
      type : Boolean,
    },
    "current" : {
      type : Boolean,
    },
    "openedIds"   : undefined,
    "openedDepth" : undefined
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-dock-ready" : this.myDockReady,
        "is-dock-show"  : this.myDockShow,
        "is-top"   : this.isTop,
        "is-sub"   : !this.isTop,
        "is-group" : this.isGroup,
        "is-item"  : !this.isGroup,
        "has-href"    : this.hasHref,
        "nil-href"    : !this.hasHref,
        "is-opened"   : this.isOpened,
        "is-closed"   : !this.isOpened,
        "is-highlight": this.highlight,
        "is-normal"   : !this.highlight,
        "is-current"  : this.current
      })
    },
    //---------------------------------------------------
    isTop() {return this.depth == 0},
    isGroup() {return _.isArray(this.items)},
    hasSubItems() {return !_.isEmpty(this.items)},
    //---------------------------------------------------
    hasHref() {return this.href ? true : false},
    hasValue() {return this.value ? true : false},
    hasHrefOrValue() {return this.hasHref || this.hasValue},
    //---------------------------------------------------
    isOpened() {
      if(this.isGroup) {
        let opened = _.get(this.openedIds, this.id)
        if(_.isUndefined(opened) && !_.isUndefined(this.openedDepth)) {
          return this.depth < this.openedDepth
        }
        return opened
      }
      return false
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods : {
    //---------------------------------------------------
    OnToggleGroupOpened() {
      this.notifyGroupOpenStatus(!this.isOpened)
    },
    //---------------------------------------------------
    OnOpenGroup() {
      //console.log("OnOpenGroup", this.indexPath)
      this.notifyGroupOpenStatus(true)
    },
    //---------------------------------------------------
    OnCloseGroup() {
      //console.log("OnCloseGroup", this.indexPath)
      this.notifyGroupOpenStatus(false)
    },
    //---------------------------------------------------
    notifyGroupOpenStatus(opened) {
      if(this.isGroup) {
        this.$notify("change:opened", {
          id     : this.id,
          idPath : this.idPath,
          type   : this.type,
          params : this.params,
          href   : this.href,
          target : this.target,
          value  : this.value,
          opened
        })
      }
    },
    //---------------------------------------------------
    OnClickItemInfo() {
      if(!this.hasHrefOrValue) {
        this.OnToggleGroupOpened()
      } else {
        this.OnClickItemLink()
      }
    },
    //---------------------------------------------------
    OnClickItemLink(evt) {
      if(this.hasHref && evt) {
        evt.stopPropagation()
      }
      this.$notify("click:item", evt, {
        id     : this.id,
        type   : this.type,
        params : this.params,
        href   : this.href,
        target : this.target,
        value  : this.value
      })
    }
    //---------------------------------------------------
  }
  ///////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'side-nav-item.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/gui/side/nav/com/side-nav-item/side-nav-item.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////
  data : ()=>{
    return {
      collapse : true
    }
  },
  ///////////////////////////////////////////
  props : {
    "groupStatusStoreKey" : {
      type:String, 
      default:undefined
    },
    "highlightId" : {
      type:String, 
      default:undefined
    },
    "id" : {
      type:String, 
      default:undefined
    },
    "depth" : {
      type:Number, 
      default:0
    },
    "icon"  : {
      type:[String,Object], 
      default:undefined
    },
    "title" : {
      type:String, 
      default:undefined
    },
    "path"  : {
      type:String, 
      default:undefined
    },
    "view"  : {
      type:String, 
      default:undefined
    },
    "href"  : {
      type:String, 
      default:undefined
    },
    "items" : {
      type : Array,
      default : ()=>[]
    }
  },
  ///////////////////////////////////////////
  computed : {
    //---------------------------------------
    TopClass() {
      return {
        "is-top"   : this.isTop,
        "is-sub"   : !this.isTop,
        "is-group" : this.isGroup,
        "is-item"  : !this.isGroup,
        "is-collapse"  : this.collapse,
        "is-expend"    : !this.collapse,
        "is-highlight" : this.isHighlight
      }
    },
    //---------------------------------------
    isTop() {
      return this.depth == 0
    },
    //---------------------------------------
    isGroup() {
      return _.isArray(this.items)
    },
    //---------------------------------------
    hasHref() {
      return !_.isEmpty(this.href)
    },
    //---------------------------------------
    isHighlight() {
      return this.id && this.id == this.highlightId
    },
    //---------------------------------------
    GroupStatusIcon() {
      return this.collapse
        ? 'zmdi-chevron-down'
        : 'zmdi-chevron-up'
    }
    //---------------------------------------
  },
  ///////////////////////////////////////////
  methods : {
    //---------------------------------------
    OnToggleGroupStatus() {
      if(this.isGroup) {
        this.collapse = !this.collapse
        // Save status
        if(this.groupStatusStoreKey) {
          Ti.Storage.local.set(this.groupStatusStoreKey, this.collapse)
        }
      }
    },
    //---------------------------------------
    OnClickItemInfo() {
      this.$notify("item:actived", {
        id: this.id,
        title : this.title,
        path : this.path,
        href : this.href,
        view : this.view
      })
    }
    //---------------------------------------
  },
  ///////////////////////////////////////////
  mounted : function(){
    if(this.isGroup) {
      // Only Top Group is expended
      if(this.isTop) {
        this.collapse = false
      }
      // Others group will default collapse
      // The 'item' will ignore the setting of collapse
      else {
        this.collapse = true
      }
      // Load local setting
      if(this.groupStatusStoreKey) {
        this.collapse = 
          Ti.Storage.local.getBoolean(this.groupStatusStoreKey, this.collapse)
      }
    }
  }
  ///////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-manager-computed.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['/a/load/wn.manager/wn-manager-computed.mjs'] = (function(){
const _M = {
  //.........................................
  Logo() {
    if("<:home>" == this.setup.logo) {
      let crIt = _.nth(this.CrumbData, 0)
      return crIt ? crIt.icon : null
    }
    // Then it is the static icon
    return this.setup.logo
  },
  //.........................................
  CrumbData() {
    let titleBy = Ti.Util.explainObj(this.TheStatus, this.setup.crumbTitleBy)
    return Wn.Obj.evalCrumbData({
      meta      : this.meta,
      ancestors : this.ancestors,
      fromIndex : this.setup.firstCrumbIndex,
      homePath  : this.setup.skyHomePath,
      titleBy,
      iteratee : (item, i, {nm}={}) => {
        if(!this.myExposeHidden && nm && nm.startsWith(".")) {
          return
        }
        return item
      },
      self : (item)=>{
        item.asterisk = this.isChanged
      }
    })
  },
  //.........................................
  Crumb() {
    let crumbs = _.cloneDeep(this.CrumbData)
    // Remove the first one for grace look
    if(this.Logo && !_.isEmpty(crumbs)) {
      crumbs[0].icon = null
    }
    return {data: crumbs}
  },
  //.........................................
  SessionBadge() {
    let me = _.get(this.session, "me")
    if(me) {
      return {
        me,
        avatarKey : "thumb",
        avatarSrc : null,
        loginIcon : me.sex == 1 ? "im-user-male" : "im-user-female",
        nameKeys  : "nickname|nm"
      }
    }
  },
  //.........................................
  ActionMenu() {
    if(_.isArray(this.actions) && !_.isEmpty(this.actions)) {
      return {
        className : `wn-${this.viewportMode}-menu`,
        items  : this.actions,
        status : this.TheStatus,
        delay  : 500
      }
    }
  },
  //.........................................
  Arena() {
    if(this.hasView) {
      // explain comConf
      //console.log("re-arena", this.comConf)
      // prepare the vars
      let app = Ti.App(this);
      let comConf = Ti.Util.explainObj(this, this.comConf) || {
        ancestors : this.ancestors,
        parent    : this.parent,
        meta      : this.meta,
        content   : this.content,
        data      : this.data,
        status    : this.status
      }
      //let actions = this.actions
      // Add init hook to store the $main
      comConf.onInit = function(){
        //console.log("onInit:", this.tiComId)
        app.$vmMain(this)
      }
      // Done
      return comConf
    }
  },
  //.........................................
  Footer() {
    return {
      infoIcon  : this.comIcon,
      infoText  : this.comType,
      message   : this.myMessage || this.StatusText,
      indicator : this.myIndicator
    }
  }
  //.........................................
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-month.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/month/ti-month.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  props : {
    "value" : {
      type : [String, Number, Date],
      default : null
    },
    // the height of drop list
    "height" : {
      type : [Number, String],
      default : 200
    },
    "beginYear" : {
      type : [Number, String],
      default : 1970
    },
    "endYear" : {
      type : [Number, String],
      default : (new Date().getFullYear()+1)
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    topStyle() {
      return {
        "height" : Ti.Css.toSize(this.height)
      }
    },
    //------------------------------------------------
    theDate() {
      return Ti.Types.toDate(this.value, null)
    },
    //------------------------------------------------
    theListGroup() {
      return [
        this.createList("year",  
          this.beginYear*1, 
          this.endYear*1,
          this.theDate ? this.theDate.getFullYear() : null,
          {reverse:true}
        ),
        this.createList("month",
          0,
          12,
          this.theDate ? this.theDate.getMonth() : null,
          {getText: (val)=>{
            let abbr = Ti.DateTime.getMonthAbbr(val)
            return Ti.I18n.get(abbr)
          }}
        )
      ]
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    createList(key, fromVal, toVal, currentVal, {
      reverse=false,
      getText=(val)=>val
    }={}) {
      let list = {
        key,
        currentId : `R-${currentVal}`,
        data  : []
      }
      for(let i=fromVal; i<toVal; i++) {
        list.data.push({
          id : `R-${i}`,
          value : i,
          text  : getText(i)
        })
      }
      if(reverse) {
        list.data.reverse()
      }
      return list
    },
    //------------------------------------------------
    onListSelected(key, {current}={}) {
      let val = _.get(current, "value") || 0

      let theDate = this.theDate || new Date()

      let d = ({
        "month" : (m)=>{
          return new Date(theDate.getFullYear(), m)
        },
        "year" : (y)=>{
          return new Date(y, theDate.getMonth())
        }
      })[key](val)
      this.$notify("change", d)
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'leaflet-redraw-methods.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/gis/leaflet/leaflet-redraw-methods.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //--------------------------------------
  __customize_marker_behaviors($marker, obj={}, {
    markerIcon,
    markerIconOptions,
    markerPopup,
    markerPopupOptions
  }={}) {
    // Customized Icon
    if(markerIcon) {
      let icon = Ti.Util.explainObj(obj, markerIcon)
      if(icon) {
        $marker.setIcon(this.Icon(icon, markerIconOptions))
      }
    }
    // Customized popup
    if(this.markerPopup) {
      let popup = Ti.Util.explainObj(obj, markerPopup, {
        evalFunc : true
      })
      // Eval the html
      let html;
      // For Array
      if(_.isArray(popup)) {
        let list = _.map(popup, li=>`<li>${li}</li>`)
        html = `<ul>${list.join("")}</ul>`
      }
      // For Object pair
      else if(_.isPlainObject(popup)) {
        let rows = _.map(popup, (v,k)=>{
          let text = Ti.I18n.text(k)
          return `<tr><td>${text}</td><td>${v}</td></tr>`
        })
        html = `<table>${rows.join("")}</table>`
      }
      // For HTML
      else {
        html = popup
      }

      // HTML
      $marker.bindPopup(html, markerPopupOptions).openPopup();
    }
  },
  //--------------------------------------
  //
  // Single Point
  //
  //--------------------------------------
  draw_obj_as_point(latlng, setup) {
    let convert = _.get(setup, "convert") || _.identity
    let $marker = L.marker(latlng, {
      autoPan : true
    }).addTo(this.$live)

    // Save old data
    $marker.rawData = latlng

    // Can edit by drag
    if("drag" == this.editPoint) {
      $marker.dragging.enable()
      $marker.on("dragend", ({target})=>{
        let newLatlng = target.getLatLng()
        newLatlng = this.trans_obj_from_tiles_to_value(newLatlng)
        newLatlng = convert(newLatlng)
        this.$notify("change", {
          ... target.rawData,
          ... newLatlng
        })
      })
    }
    // Can edit by move map
    else if("pin" == this.editPoint) {
      this.$map.on("move", ()=>{
        let newLatlng = this.$map.getCenter();
        newLatlng = this.trans_obj_from_value_to_tiles(newLatlng)
        $marker.setLatLng(newLatlng)
      })
      this.$map.on("moveend", ()=>{
        let newLatlng = this.$map.getCenter();
        newLatlng = convert(newLatlng)
        this.$notify("change", newLatlng)
      })
    }

    // Customized Icon
    this.__customize_marker_behaviors($marker, latlng, setup)

    return $marker
  },
  //--------------------------------------
  draw_pair_as_point(latlng, setup={}) {
    setup.convert = ({lat, lng})=>[lat, lng]
    return this.draw_obj_as_point(latlng, setup)
  },
  //--------------------------------------
  //
  // Multi Points
  //
  //--------------------------------------
  draw_obj_list_as_point(list, setup) {
    let convert = _.get(setup, "convert") || _.identity
    _.forEach(list, (latlng, index)=>{
      let $marker = L.marker(latlng, {
        autoPan : true
      }).addTo(this.$live)

      // Add customized value
      $marker.index = index
      $marker.rawData = latlng
  
      // Can edit by drag
      if("drag" == this.editPoint) {
        $marker.dragging.enable()
        $marker.on("dragend", ({target})=>{
          let newLatlng = target.getLatLng()
          newLatlng = this.trans_obj_from_tiles_to_value(newLatlng)
          newLatlng = convert(newLatlng)
          
          let list = _.cloneDeep(this.value)
          list[target.index] = {
            ... target.rawData,
            ... newLatlng
          }
          this.$notify("change", list)
        })
      }
  
      // Customized Icon
      this.__customize_marker_behaviors($marker, latlng, setup)
    })
  },
  //--------------------------------------
  draw_pair_list_as_point(list, setup={}) {
    setup.convert = ({lat, lng})=>[lat, lng]
    this.draw_obj_list_as_point(list, setup)
  },
  //--------------------------------------
  //
  // Polyline
  //
  //--------------------------------------
  draw_obj_list_as_polyline(latlngs, setup={}) {
    let $polyline = this.draw_pair_list_as_polyline(latlngs, false)

    if(setup.showMarker) {
      this.draw_obj_list_as_point(latlngs)
    }

    return $polyline
  },
  //--------------------------------------
  draw_pair_list_as_polyline(latlngs, setup={}) {
    let $polyline = L.polyline(latlngs, {
      color: '#08F',
      ... this.aspect
    }).addTo(this.$live);

    if(setup.showMarker) {
      this.draw_pair_list_as_point(latlngs)
    }

    if(setup.autoFitBounds) {
      this.fitBounds($polyline.getBounds());
    }

    return $polyline
  },
  //--------------------------------------
  //
  // Polygon
  //
  //--------------------------------------
  draw_obj_list_as_polygon(latlngs, setup={}) {
    let $polygon = this.draw_pair_list_as_polygon(latlngs, setup)

    if(setup.showMarker) {
      this.draw_obj_list_as_point(latlngs, setup)
    }

    return $polygon
  },
  //--------------------------------------
  draw_pair_list_as_polygon(latlngs, setup={}) {
    let $polygon = L.polygon(latlngs, {
      color: '#08F',
      ... this.aspect
    }).addTo(this.$live);

    if(setup.showMarker) {
      this.draw_pair_list_as_point(latlngs, setup)
    }

    if(setup.autoFitBounds) {
      this.fitBounds($polygon.getBounds());
    }

    return $polygon
  },
  //--------------------------------------
  //
  // Rectangle
  //
  //--------------------------------------
  draw_obj_list_as_rectangle(latlngs, setup={}) {
    let [SW, NE] = latlngs
    let $rect = L.rectangle([SW, NE], {
      color: '#08F',
      ... this.aspect
    }).addTo(this.$live);

    if(setup.showMarker) {
      this.draw_obj_list_as_point([SW, NE], setup)
    }

    if(setup.autoFitBounds) {
      this.fitBounds($rect.getBounds());
    }

    return $rect
  },
  //--------------------------------------
  draw_pair_list_as_rectangle(latlngs, setup={}) {
    let $rect = this.draw_obj_list_as_rectangle(latlngs, false)

    if(setup.showMarker) {
      let bounds = $rect.getBounds()
      let SW = bounds.getSouthWest()
      let NE = bounds.getNorthEast()
      this.draw_pair_list_as_point([SW, NE], setup)
    }

    return $rect
  },
  //--------------------------------------
  //
  // Circle
  //
  //--------------------------------------
  draw_obj_as_circle(latlng, setup={}) {
    let $circle = L.circle(latlng, {
      radius : this.circleRadius,
      color: '#08F',
      ... this.aspect
    }).addTo(this.$live);

    if(setup.showMarker) {
      this.draw_obj_as_point(latlng)
    }

    if(setup.autoFitBounds) {
      this.fitBounds($circle.getBounds());
    }

    return $circle
  },
  //--------------------------------------
  draw_pair_as_circle(latlng, setup={}) {
    let $circle = this.draw_obj_as_circle(latlng, setup)

    if(setup.showMarker) {
      this.draw_pair_as_point(latlng, setup)
    }

    return $circle
  },
  //--------------------------------------
  //
  // Cluster
  //
  //--------------------------------------
  draw_obj_list_as_cluster(latlngs, setup) {
    var $cluster = L.markerClusterGroup();

    _.forEach(latlngs, (latlng, index)=>{
      let $marker = L.marker(latlng, {
        autoPan : true
      }).addTo($cluster)

      // Add customized value
      $marker.index = index
      $marker.rawData = latlng
    
      // Customized Icon
      this.__customize_marker_behaviors($marker, latlng, setup)
    })

    this.$live.addLayer($cluster)

    return $cluster
  },
  //--------------------------------------
  draw_pair_list_as_cluster(latlngs, setup) {
    return this.draw_obj_list_as_cluster(latlngs, setup)
  },
  //--------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-image.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/wn-image.mjs'] = (function(){
////////////////////////////////////////////////////
async function pickImageAndInsertToDoc(editor, {
  base = "~", 
  autoCreate=null, 
  fallbackPath,
}) {
  // Check base
  if(_.isPlainObject(autoCreate)) {
    let oBase = await Wn.Io.loadMeta(base)
    if(!oBase) {
      let pph = Ti.Util.getParentPath(base)
      let dnm = Ti.Util.getFileName(base)
      let baseMeta = _.assign({}, autoCreate, {
        race: 'DIR', nm : dnm
      })
      let baseJson = JSON.stringify(baseMeta)
      let cmdText = `o @create '${baseJson}' -p ${pph} -auto @json -cqn`
      oBase = await Wn.Sys.exec2(cmdText, {as:"json"})
    }
    base = oBase
  }

  // Show dialog
  let reo = await Wn.OpenObjSelector(base, {
    icon  : "fas-image",
    title : "i18n:img-insert",
    position : "top",
    width  : "95%",
    height : "95%",
    multi : false,
    fallbackPath
  })

  // User canceled
  if(_.isEmpty(reo)) {
    return
  }

  // Do insert image
  editor.execCommand("InsertImage", editor, reo)
}
////////////////////////////////////////////////////
function CmdInsertImage(editor, oImgs) {
  if(_.isEmpty(oImgs))
    return
  
  // Prepare range
  let rng = editor.selection.getRng()
  
  // Create image fragments
  let $doc = rng.commonAncestorContainer.ownerDocument
  let frag = new DocumentFragment()
  for(let oImg of oImgs) {
    let $img = Ti.Dom.createElement({
      tagName : "img",
      attrs : {
        src : `/o/content?str=id:${oImg.id}`,
        "wn-obj-id" : oImg.id,
        "wn-obj-sha1" : oImg.sha1,
        "wn-obj-mime" : oImg.mime,
        "wn-obj-tp"   : oImg.tp
      }
    }, $doc)
    frag.appendChild($img)
  }
  
  // Remove content
  if(!rng.collapsed) {
    rng.deleteContents()
  }

  // Insert fragments
  rng.insertNode(frag)

}
////////////////////////////////////////////////////
function GetCurrentImageElement(editor) {
  let sel = editor.selection
  let $img = sel.getNode()
  // Guard
  if("IMG" != $img.tagName) {
    return
  }
  return $img
}
////////////////////////////////////////////////////
function CmdSetImageSize(editor, {width=null, height=null}={}) {
  let sel = editor.selection
  let $img = sel.getNode()
  // Guard
  if("IMG" != $img.tagName) {
    return
  }
  // Clear the attribute
  Ti.Dom.setAttrs($img, {width, height})
  // Force sync content
  editor.__rich_tinymce_com.syncContent()
}
////////////////////////////////////////////////////
function CmdSetImageStyle(editor, css={}) {
  let sel = editor.selection
  let $img = sel.getNode()
  // Guard
  if("IMG" != $img.tagName) {
    return
  }
  // Clear float
  Ti.Dom.setStyle($img, css)
  // Force sync content
  editor.__rich_tinymce_com.syncContent()
}
////////////////////////////////////////////////////
async function CmdShowImageProp(editor, settings) {
  let sel = editor.selection
  let $img = sel.getNode()
  // Guard
  if("IMG" != $img.tagName) {
    return
  }
  // Get margin style
  let stl = Ti.Dom.getStyle($img, /^(float|(margin-(left|right|top|bottom)))$/)
  stl.float = stl.float || "none"
  //console.log("stl", stl)
  // Gen the properties
  let data = {
    oid    : $img.getAttribute("wn-obj-id"),
    src    : $img.getAttribute("src"),
    width  : $img.getAttribute("width")  || undefined,
    height : $img.getAttribute("height") || undefined,
    displayWidth  : $img.width,
    displayHeight : $img.height,
    naturalWidth  : $img.naturalWidth,
    naturalHeight : $img.naturalHeight,
    ... stl
  }

  //console.log(data)
  // Show dialog
  let reo = await Ti.App.Open({
    icon  : "fas-image",
    title : "编辑图片属性",
    width  : "37%",
    height : "100%",
    position : "right",
    closer : "left",
    clickMaskToClose : true,
    result : data,
    model : {prop:"data", event:"change"},
    comType : "TiForm",
    comConf : {
      spacing : "tiny",
      fields : [{
          title : "图片",
          name  : "oid",
          comType : "WnObjPicker",
          comConf : {
            valueType : "id",
            base : settings.base,
            titleEditable : false
          }
        }, {
          title : "尺寸",
          fields: [{
            title : "宽度",
            name  : "width",
            comType : "TiInput",
            comConf : {
              placeholder: `${data.displayWidth}/${data.naturalWidth}px`
            }
          }, {
            title : "高度",
            name  : "height",
            comType : "TiInput",
            comConf : {
              placeholder: `${data.displayHeight}/${data.naturalHeight}px`
            }
          }]
        }, {
          title : "文本绕图",
          name  : "float",
          comType : "TiSwitcher",
          comConf : {
            allowEmpty : false,
            options : [
              {value: "none",  text: "不绕图",   icon:"fas-align-justify"},
              {value: "left",  text: "左绕图", icon:"fas-align-left"},
              {value: "right", text: "右绕图", icon:"fas-align-right"},]
          }
        }, {
          title : "图片边距",
          fields : [{
            title : "上",
            name  : "marginTop",
            comType : "TiInput",
            comConf : {
              placeholder : "0px"
            }
          }, {
            title : "右",
            name  : "marginRight",
            comType : "TiInput",
            comConf : {
              placeholder : "0px"
            }
          }, {
            title : "下",
            name  : "marginBottom",
            comType : "TiInput",
            comConf : {
              placeholder : "0px"
            }
          }, {
            title : "左",
            name  : "marginLeft",
            comType : "TiInput",
            comConf : {
              placeholder : "0px"
            }
          }]
        }]
    },
    components : [
      "@com:wn/obj/picker"
    ]
  })

  // 用户取消
  if(!reo)
    return

  // Update image
  //................................................
  // src
  if(data.oid != reo.oid) {
    // Remove Image
    if(!reo.oid) {
      Ti.Dom.remove($img)
      return
    }
    // 读取对象详情
    let oImg = await Wn.Io.loadMetaById(reo.oid)
    // Switch image src
    $img.src = `/o/content?str=id:${reo.oid}`
    $img.setAttribute("wn-obj-id", oImg.id)
    $img.setAttribute("wn-obj-sha1", oImg.sha1)
    $img.setAttribute("wn-obj-mime", oImg.mime)
    $img.setAttribute("wn-obj-tp", oImg.tp)
  }
  //................................................
  // Measure
  const _img_size = function(attrName, sz, oldSize) {
    if(oldSize == sz)
      return
    if(!sz) {
      $img.removeAttribute(attrName)
    } else {
      $img.setAttribute(attrName, sz)
    }
  }
  //................................................
  // Width/height
  _img_size("width",  reo.width,  data.width)
  _img_size("height", reo.height, data.height)
  //................................................
  // Styling
  const _img_style = function(styName, v, oldValue) {
    if(oldValue == v)
      return
    if(!v || "none" == v) {
      $img.style[styName] = ""
    } else if(_.isNumber(v)) {
      $img.style[styName] = `${v}px`
    } else {
      $img.style[styName] = v
    }
  }
  //................................................
  _img_style("float", reo.float, data.float)
  _img_style("marginLeft",   reo.marginLeft,   data.marginLeft)
  _img_style("marginRight",  reo.marginRight,  data.marginRight)
  _img_style("marginTop",    reo.marginTop,    data.marginTop)
  _img_style("marginBottom", reo.marginBottom, data.marginBottom)
  //................................................
  // clean cache
  $img.removeAttribute("data-mce-src")
  $img.removeAttribute("data-mce-style")
  //................................................
  // Force sync content
  editor.__rich_tinymce_com.syncContent()
}
////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  name : "wn-image",
  //------------------------------------------------
  init : function(conf={}) {
    let {extended_valid_elements} = conf 

    conf.extended_valid_elements = _.concat(
      extended_valid_elements, 
      'img[wn-obj-*|src|width|height|style]'
    ).join(",")
  },
  //------------------------------------------------
  setup : function(editor, url){
    //..............................................
    let settings = _.assign({
        base : "~"
      }, _.get(editor.settings, "wn_image_config"));
    //console.log("setup", editor.settings)
    //..............................................
    // Register plugin command
    editor.addCommand("InsertImage",   CmdInsertImage)
    editor.addCommand("SetImageSize",  CmdSetImageSize)
    editor.addCommand("SetImageStyle", CmdSetImageStyle)
    editor.addCommand("ShowImageProp", CmdShowImageProp)
    //..............................................
    // Register toolbar actions
    editor.ui.registry.addButton("WnImgPick", {
      icon : "image",
      tooltip : Ti.I18n.text("i18n:img-insert"),
      onAction : function(menuBtn) {
        pickImageAndInsertToDoc(editor, settings)
      },
    })
    //..............................................
    editor.ui.registry.addMenuItem("WnImgClrSize", {
      icon : "edit-image",
      text : "清除图片尺寸",
      onAction() {
        editor.execCommand("SetImageSize", editor)
      }
    })
    //..............................................
    editor.ui.registry.addMenuItem("WnImgAutoFitWidth", {
      text : "自动适应宽度",
      onAction() {
        editor.execCommand("SetImageSize", editor, {width:"100%"})
      }
    })
    //..............................................
    editor.ui.registry.addNestedMenuItem('WnImgFloat', {
      text: '文本绕图',
      getSubmenuItems: function () {
        return [{
          type : "menuitem",
          icon : "align-left",
          text : "居左绕图",
          onAction() {
            editor.execCommand("SetImageStyle", editor, {float:"left"})
          }
        }, {
          type : "menuitem",
          icon : "align-right",
          text : "居右绕图",
          onAction() {
            editor.execCommand("SetImageStyle", editor, {float:"right"})
          }
        }, {
          type : "menuitem",
          text : "清除浮动",
          onAction() {
            editor.execCommand("SetImageStyle", editor, {float:""})
          }
        }];
      }
    });
    //..............................................
    editor.ui.registry.addNestedMenuItem('WnImgMargin', {
      text: '图片边距',
      getSubmenuItems: function () {
        const __check_margin_size = function(api, expectSize) {
          let $img = GetCurrentImageElement(editor)
          let state = true
          if($img) {
            let sz = $img.style.marginLeft || $img.style.marginRight
            state = expectSize == sz
          }
          api.setActive(state);
          return function() {};
        }
        return [{
          type : "togglemenuitem",
          text : "小边距",
          onAction() {
            editor.execCommand("SetImageStyle", editor, {margin:"1em"})
          },
          onSetup: function(api) {
            return __check_margin_size(api, '1em')
          }
        }, {
          type : "togglemenuitem",
          text : "中等边距",
          onAction() {
            editor.execCommand("SetImageStyle", editor, {margin:"2em"})
          },
          onSetup: function(api) {
            return __check_margin_size(api, '2em')
          }
        }, {
          type : "togglemenuitem",
          text : "较大边距",
          onAction() {
            editor.execCommand("SetImageStyle", editor, {margin:"3em"})
          },
          onSetup: function(api) {
            return __check_margin_size(api, '3em')
          }
        }, {
          type : "menuitem",
          text : "清除边距",
          onAction() {
            editor.execCommand("SetImageStyle", editor, {margin:""})
          }
        }];
      }
    });
    //..............................................
    editor.ui.registry.addMenuItem("WnImgProp", {
      text : "图片属性",
      onAction() {
        editor.execCommand("ShowImageProp", editor, settings)
      }
    })
    //..............................................
    editor.ui.registry.addContextMenu("wn-image", {
      update: function (el) {
        let sel = editor.selection
        let $nd = sel.getNode()
        if($nd.hasAttribute("wn-obj-id") && "IMG" == $nd.tagName) {
          return [
            "WnImgClrSize WnImgAutoFitWidth",
            "WnImgFloat WnImgMargin",
            "WnImgProp"
          ].join(" | ")
        }
        return []
      }
    })
    //..............................................
    return {
      getMetadata: function () {
        return  {
          name: 'Wn Image plugin',
          url: 'http://site0.cn'
        };
      }
    };
    //..............................................
  }
  //------------------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-wall.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/wall/ti-wall.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////
  provide : function(){
    return {
      "$wall" : this
    }
  },
  //////////////////////////////////////////
  data : ()=>({
    myData : [],

    myColCount : 0,
    myColWidth : 0,
    isOnlyOneRow : false,

    myCellsReport : {},
    myNeedResize : true
  }),
  //////////////////////////////////////////
  props : {
    "itemClassName" : undefined,
    "display" : {
      type : [Object, String],
      default : ()=>({
        key : "..",
        comType : "ti-label"
      })
    },
    "border" : {
      type : Boolean,
      default : true
    },
    // aspect: list item spacing
    // `no|xs|sm|md|lg|xl`
    "spacing" : {
      type : String,
      default : "sm"
    },
    // Wall-Tile width
    "itemWidth" : {
      type : [String, Number],
      default : null
    },
    // Wall-Tile height
    "itemHeight" : {
      type : [String, Number],
      default : null
    },
    "resizeDelay" : {
      type : Number,
      default : 0
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-hoverable"    : this.hoverable,
        "show-border"     : this.border,
        "is-only-one-row" : this.isOnlyOneRow,
        "is-multi-rows"   : !this.isOnlyOneRow
      }, [
        `spacing-${this.spacing}`
      ])
    },
    //--------------------------------------
    ItemDisplay() {
      return this.evalFieldDisplayItem(this.display)
    },
    //--------------------------------------
    TheData() {
      return this.myData
    },
    //--------------------------------------
    ListRealCount() {
      return this.TheData.length
    },
    //--------------------------------------
    BlankCols() {
      let list = []
      if(!_.isEmpty(this.TheData) 
        && this.myColCount > 0 
        && this.myColWidth > 1
        && !this.isOnlyOneRow) {
        // get list real count
        let n = this.ListRealCount % this.myColCount
        if(n > 0) {
          let nr = this.myColCount - n
          for(let i=0; i<nr; i++) {
            list.push({
              width : `${this.myColWidth}px`
            })
          }
        }
      }
      //console.log(list)
      return list
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickTop($event) {
      if(this.cancelable) {
        // Click The body or top to cancel the row selection
        if(Ti.Dom.hasOneClass($event.target,
            'ti-wall', 'wall-tile')) {
          this.cancelRow()
        }
      }
    },
    //--------------------------------------
    OnWallResize() {
      //console.log("OnWallResize")
      let $divs = Ti.Dom.findAll(":scope > .wall-tile", this.$el)
      // Guard empty
      if(_.isEmpty($divs)) 
        return
      // Eval the cols and width
      //console.log("  ~~~ do", this.data)
      let cols  = 0
      let width = 1
      let top = -1
      let isOnlyOneRow = true
      for(let $div of $divs) {
        let rect = $div.getBoundingClientRect()
        if(top < 0) {
          top  = rect.top
        }
        if(top == rect.top) {
          cols ++
          width = Math.max(rect.width, width)
        }
        // Find the next row
        else {
          isOnlyOneRow = false
          break
        }
      }
      //console.log({cols, width, top})
      if(width > 1) {
        this.myColCount = cols
        this.myColWidth = width
        this.isOnlyOneRow = isOnlyOneRow
      }
    },
    //--------------------------------------
    reportReady(rowIndex=-1, isDone=false) {
      let key = `R${rowIndex}`
      //console.log(key, isDone)
      if(isDone) {
        delete this.myCellsReport[key]
      } else {
        this.myCellsReport[key] = false
        this.myNeedResize = true
      }
      // Check the status
      if(isDone) {
        _.delay(()=>{
          let allReady = _.isEmpty(this.myCellsReport)
          // Do resize
          if(allReady && this.myNeedResize) {
            _.delay(()=>{
              this.OnWallResize()
            }, this.resizeDelay)
            this.myNeedResize = false
          }
        })
      }
    },
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "data" : {
      handler : async function(newVal, oldVal){
        let isSame = _.isEqual(newVal, oldVal)
        if(!isSame) {
          //console.log("!!!wall data changed", {newVal, oldVal})
          this.myData = await this.evalData()
        }
      },
      immediate : true
    }
  },
  //////////////////////////////////////////
  mounted : function() {
    //.................................
    Ti.Viewport.watch(this, {
      resize : _.debounce(()=>this.OnWallResize(), 20)
    })
    //.................................
  },
  //////////////////////////////////////////
  destroyed : function() {
    Ti.Viewport.unwatch(this)
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'website-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/hmaker/website/website-actions.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //--------------------------------------------
  setTreeOpenedNodePaths({getters, commit}, openeds={}) {
    if(getters.TREE_OPEND_KEY) {
      openeds = _.pickBy(openeds, val=>val)
      commit("tree/setOpenedNodePaths", openeds)
      Ti.Storage.session.setObject(getters.TREE_OPEND_KEY, openeds)
    }
  },
  //--------------------------------------------
  async setTreeSelected({getters, commit, dispatch}, currentId=null) {
    if(getters.TREE_SELECTED_KEY) {
      commit("tree/setCurrentId", currentId)
      Ti.Storage.session.set(getters.TREE_SELECTED_KEY, currentId)

      commit("setStatus", {reloading:true})
      // Load current
      let meta = null
      if(currentId) {
        meta = await Wn.Io.loadMetaById(currentId)
      }
      await dispatch("current/reload", meta)

      commit("setStatus", {reloading:false})
      commit("syncStatusChanged")
    }
  },
  //--------------------------------------------
  onCurrentChanged({commit, dispatch}, payload) {
    dispatch("current/onChanged", payload)
    commit("syncStatusChanged")
  },
  //--------------------------------------------
  async saveCurrent({state, commit, dispatch}) {
    if(state.current.meta) {
      commit("setStatus", {saving:true})
      await dispatch("current/save")
      commit("setStatus", {saving:false})
      commit("syncStatusChanged")
    }
  },
  //--------------------------------------------
  async reloadCurrent({commit, dispatch}, meta) {
    commit("setStatus", {reloading:true})
    await dispatch("current/reload", meta)
    commit("setStatus", {reloading:false})
    commit("syncStatusChanged")
  },
  //--------------------------------------------
  async reloadConfig({state, dispatch}) {
    await dispatch("config/reload")
  },
  //--------------------------------------------
  async reloadTree({getters, state, commit, dispatch}) {
    // Restore openeds
    if(getters.TREE_OPEND_KEY) {
      let openeds = Ti.Storage.session.getObject(getters.TREE_OPEND_KEY)
      commit("tree/setOpenedNodePaths", openeds)
    }

    // Reload the tree root
    await dispatch("tree/reloadRoot", state.home)

    // Restore currentId
    if(getters.TREE_SELECTED_KEY) {
      let currentId = Ti.Storage.session.getString(getters.TREE_SELECTED_KEY)
      commit("tree/setCurrentId", currentId)
      if(currentId) {
        await dispatch("setTreeSelected", currentId)
      }
    }
  },
  //--------------------------------------------
  async reloadTreeNode({commit, dispatch}, payload) {
    commit("setStatus", {reloading:true})
    await dispatch("tree/reloadNode", payload)
    commit("setStatus", {reloading:false})
  },
  //--------------------------------------------
  async reload({state, commit, dispatch}, home) {
    //console.log("thing-manager.reload", state)
    // Update New Meta
    if(home) {
      commit("setHome", home)
    }
    // Get home back
    else {
      home = state.home
    }
    
    // Mark reloading
    commit("setStatus", {reloading:true})

    // Reloading
    await dispatch("reloadConfig")
    await dispatch("reloadTree")

    // Auto Select the first item
    // TODO


    // All done
    commit("setStatus", {reloading:false})
  }
  //--------------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-transfer.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/transfer/wn-transfer.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////////
  data : ()=>({
    
  }),
  ///////////////////////////////////////////////////////
  props : {
    "itemBy" : {
      type : [String, Function],
      default : undefined
    },
    "findBy" : {
      type : [String, Function],
      default : undefined
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TheCanComType() {
      return this.canComType || "wn-list"
    },
    //---------------------------------------------------
    TheSelComType() {
      return this.selComType || "wn-list"
    },
    //------------------------------------------------
    TheDisplay() {
      return this.display || ["@<thumb>", "title", "nm"]
    },
    //---------------------------------------------------
    OptionsDict() {
      return Wn.Dict.evalOptionsDict(this)
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////

  ///////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-form.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/form/ti-form.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////////////////
  model : {
    prop  : "data",
    event : "change"
  },
  //////////////////////////////////////////////////////
  data : ()=>({
    myKeysInFields: [],
    currentTabIndex : 0
  }),
  //////////////////////////////////////////////////////
  computed : {
    //--------------------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-tab-mode": this.isTabMode,
        "is-all-mode": this.isAllMode,
        [`tab-at-${this.tabAt}`]  : this.isTabMode,
        [`tab-at-${this.TheTabAtX}`] : this.isTabMode,
        [`tab-at-${this.TheTabAtY}`] : this.isTabMode
      }, 
      `as-${this.viewportMode}`,
      `as-spacing-${this.spacing||"comfy"}`
      )
    },
    //--------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //--------------------------------------------------
    hasHeader() {
      return this.title || this.icon ? true : false
    },
    //--------------------------------------------------
    hasData() {
      return !Ti.Util.isNil(this.data)
    },
    //--------------------------------------------------
    isTabMode() {return 'tab' == this.mode},
    isAllMode() {return 'all' == (this.mode || "all")},
    isAutoShowBlank() {return Ti.Util.fallback(this.autoShowBlank, false)},
    //--------------------------------------------------
    TheTabAt() {return this.tabAt.split("-")},
    TheTabAtX(){return this.TheTabAt[1]},
    TheTabAtY(){return this.TheTabAt[0]},
    //--------------------------------------------------
    TheFields() {
      let list = []
      let keys = []
      //................................................
      _.forEach(this.fields, (fld, index)=>{
        let fld2 = this.evalFormField(fld, [index])
        if(fld2) {
          list.push(fld2)
          // Gather keys
          if(!fld2.disabled) {
            // Field group ...
            if("Group" == fld2.type) {
              _.forEach(fld2.fields, ({disabled, name})=>{
                if(!disabled) {
                  keys.push(name)
                }
              })
            }
            // The fields
            else {
              keys.push(fld2.name)
            }
          }
        }
      })
      //................................................
      this.myKeysInFields = _.flattenDeep(keys)
      //................................................
      return list
    },
    //--------------------------------------------------
    TabList() {
      let list = []
      let otherFields = []
      if(this.isTabMode) {
        for(let fld of this.TheFields) {
          if(fld.type == "Group") {
            list.push(fld)
          }
          // Collect to others
          else {
            otherFields.push(fld)
          }
        }
        // Join others
        if(!_.isEmpty(otherFields)) {
          list.push({
            type : "Group",
            title : "i18n:others",
            fields : otherFields
          })
        }
      }
      return list;
    },
    //--------------------------------------------------
    // add "current" to theTabList
    TabItems() {
      let items = []
      _.forEach(this.TabList, (li, index)=>{
        let isCurrent = (index == this.currentTabIndex)
        items.push(_.assign({}, li, {
          index, isCurrent, className: {
            "is-current" : isCurrent
          }
        }))
      })
      return items
    },
    //--------------------------------------------------
    CurrentTab() {
      for(let tab of this.TabItems) {
        if(tab.isCurrent) {
          return tab
        }
      }
    },
    //--------------------------------------------------
    FormBodyClass() {
      let klass = Ti.Css.mergeClassName(`has-${this.FieldsInCurrentTab.length}-fields`)
      if(this.isTabMode && this.CurrentTab) {
        klass[`tab-body-${this.CurrentTab.index}`] = true
      }
      return klass
    },
    //--------------------------------------------------
    FieldsInCurrentTab() {
      // Current Tab
      if(this.isTabMode) {
        if(this.CurrentTab) {
          return this.CurrentTab.fields || []
        }
        return []
      }
      // Show All
      else {
        return this.TheFields
      }
    },
    //--------------------------------------------------
    FormLinkFields() {
      let re = {}
      _.forEach(this.linkFields, (val, key)=>{
        // By dict
        if(val && val.dict && val.target) {
          let {dict, target} = val
          // Get dict
          let d = Ti.DictFactory.CheckDict(dict)
          let fn;
          // Pick
          if(_.isArray(target)) {
            fn = async function({value}) {
              let it = (await d.getItem(value)) || {}
              return _.pick(it, target)
            }
          }
          // Translate
          else {
            fn = async function({value}) {
              let it = (await d.getItem(value)) || {}
              return Ti.Util.translate(it, target)
            }
          }
          // join to map
          re[key] = fn
        }
        // Customized Function
        else if(_.isFunction(val)) {
          re[key] = val
        }
      })
      return re
    },
    //--------------------------------------------------
    /***
     * Eval function set for `transformer|serializer` of each fields
     * 
     * Defaultly, it will support the function set defined in `Ti.Types`
     */
    // FuncSet() {
    //   return _.assign({}, Ti.GlobalFuncs(), this.extendFunctionSet)
    // },
    //--------------------------------------------------
    TheData() {
      if(this.data) {
        if(this.onlyFields) {
          return _.pick(this.data, this.myKeysInFields)
        }
        return this.data
      }
      return {}
    }
    //--------------------------------------------------
  },
  //////////////////////////////////////////////////////
  methods : {
    //--------------------------------------------------
    OnClickTab(tab) {
      this.currentTabIndex = tab.index
      this.$notify("tab:change", tab)
    },
    //--------------------------------------------------
    async OnFieldChange({name, value}={}) {
      // Notify at first
      //console.log("notify field", {name, value})
      this.$notify("field:change", {name, value})

      // Link fields
      let linkFunc = this.FormLinkFields[name]
      let obj;
      if(linkFunc) {
        obj = await linkFunc({name, value}, this.data)
        if(!_.isEmpty(obj)) {
          _.forEach(obj, (v,k)=>{
            this.$notify("field:change", {name:k, value:v})
          })
        }
      }

      // Notify later ...
      // Wait for a tick to give a chance to parent of 'data' updating
      this.$nextTick(()=>{
        //console.log("notify data")
        let data = this.getData({name, value})
        _.assign(data, obj)
        this.$notify("change", data)
      })
    },
    //--------------------------------------
    getData({name, value}={}) {
      let data = _.cloneDeep(this.TheData)

      // Signle value
      if(name && _.isString(name)) {
        // Whole data
        if(".." == name) {
          _.assign(data, value)
        }
        // Statci value
        else if(/^'[^']+'$/.test(name)) {
          return
        }
        // Dynamic value
        else {
          if(_.isUndefined(value)) {
            data = _.omit(data, name)
          } else {
            _.set(data, name, value)
          }
        }
      }
      // Object
      else if(_.isArray(name)) {
        let omitKeys = []
        for(let k of name) {
          let v = _.get(value, k)
          if(_.isUndefined(v)) {
            omitKeys.push(k)
          } else {
            _.set(data, k, v)
          }
        }
        if(omitKeys.length > 0) {
          data = _.omit(data, omitKeys)
        }
      }

      // Join the fixed data
      if(this.fixed) {
        _.assign(data, fixed)
      }
      return data
    },
    //--------------------------------------
    isGroup(fld) {
      return "Group" == fld.type || _.isArray(fld.fields)
    },
    //--------------------------------------------------
    evalFormField(fld={}, nbs=[]) {
      // Hide or disabled
      if(fld.hidden) {
        if(Ti.AutoMatch.test(fld.hidden, this.data)) {
          return
        }
      }
      // Disable
      let disabled = false
      if(fld.disabled) {
        disabled = Ti.AutoMatch.test(fld.disabled, this.data)
      }

      // The key
      let fldKey = Ti.Util.anyKey(fld.name||nbs, "ti-fld")
      // let fldKey = fld.name
      //   ? [].concat(fld.name).join("-")
      //   : "ti-fld-" + nbs.join("-")
      //............................................
      // For group
      if(this.isGroup(fld)) {
        let group = {
          disabled,
          type        : "Group",
          key         : fldKey,
          className   : fld.className,
          icon        : fld.icon,
          title       : fld.title,
          fields      : []
        }
        // Group fields
        _.forEach(fld.fields, (subfld, index)=>{
          let newSubFld = this.evalFormField(subfld, [...nbs, index])
          if(newSubFld) {
            group.fields.push(newSubFld)
          }
        })
        // Done
        return _.isEmpty(group.fields) ? null : group
      }
      //............................................
      // For Normal Field
      if(fld.name) {
        let field = _.defaults(_.omit(fld, "disabled"), {
          type    : this.defaultFieldType || "String",
          comType : this.defaultComType   || "TiLabel",
          disabled
        })

        // The UniqKey of field
        field.uniqKey = _.concat(field.name).join("-")
        //console.log(field.uniqKey)

        // // field status
        // let fStatus = _.get(this.fieldStatus, funiqKey)
        // if(fStatus) {
        //   field.status  = fStatus.status
        //   field.message = fStatus.message
        // }

        // Default
        if(!field.serializer) {
          let fnName = Ti.Types.getFuncByType(field.type||"String", "serializer")
          field.serializer = `Ti.Types.${fnName}`
        }
        if(!field.transformer) {
          let fnName = Ti.Types.getFuncByType(field.type||"String", "transformer")
          field.transformer = `Ti.Types.${fnName}`
        }        

        // Tidy form function
        const invokeOpt = {
          context: this,
          partial: "right"
        }
        field.serializer  = Ti.Util.genInvoking(field.serializer, invokeOpt)
        field.transformer = Ti.Util.genInvoking(field.transformer,invokeOpt)

        // Done
        return field
      }
    },
    //--------------------------------------------------
    __adjust_fields_width() {
      // Guard
      if(!_.isElement(this.$el))
        return
      // Find all field-name Elements
      let $fldNames = Ti.Dom.findAll(".form-field > .field-name", this.$el)

      // Reset them to org-width
      for(let $fldnm of $fldNames) {
        Ti.Dom.setStyle($fldnm, {width:""})
      }

      // Get the max-width of them
      let maxWidth = 0
      for(let $fldnm of $fldNames) {
        let rect = Ti.Rects.createBy($fldnm)
        maxWidth = Math.ceil(Math.max(rect.width, maxWidth))
      }

      // Wait for whole view rendered, and align the field-name
      for(let $fldnm of $fldNames) {
        Ti.Dom.setStyle($fldnm, {width:maxWidth})
      }
    },
    //--------------------------------------------------
    adjustFieldsWidth() {
      if(this.adjustDelay > 0) {
        _.delay(()=>{
          this.__adjust_fields_width()
        }, this.adjustDelay)
      } else {
        this.$nextTick(()=>{
          this.__adjust_fields_width()
        })
      }
    },
    //--------------------------------------------------
    // Callback
    //--------------------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("ti-form", uniqKey)
      if("ENTER" == uniqKey) {
        // It should wait a while before submit
        // <ti-input> will apply change at @change event
        // And the @change event will be fired when ENTER 
        // bubble fade away
        _.delay(()=>{
          this.$notify("submit")
        }, 100)
      }
    }
    //--------------------------------------------------
  },
  //////////////////////////////////////////////////////
  watch : {
    "TheFields" : function(){
      this.adjustFieldsWidth()
    },
    "currentTab" : function(index){
      this.currentTabIndex = index
    },
    "currentTabIndex" : function(index){
      if(this.keepTabIndexBy) {
        Ti.Storage.session.set(this.keepTabIndexBy, index)
      }
      this.adjustFieldsWidth()
    }
  },
  //////////////////////////////////////////////////////
  created : function() {
    this.__debounce_adjust_fields_width = _.debounce(()=>{
      this.__adjust_fields_width()
    }, 500)
  },
  //////////////////////////////////////////////////////
  mounted : function() {
    //--------------------------------------------------
    this.currentTabIndex = 
      Ti.Storage.session.getInt(
          this.keepTabIndexBy, this.currentTab
      )
    //--------------------------------------------------
    Ti.Viewport.watch(this, {resize:()=>{
      this.__debounce_adjust_fields_width()
    }})
    //--------------------------------------------------
    this.adjustFieldsWidth()
    //--------------------------------------------------
  },
  //////////////////////////////////////////////////////
  beforeDestroy : function(){
    Ti.Viewport.unwatch(this)
  }
  //////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-table-quick-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/table/quick/ti-table-quick-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "data" : {
    type : Array,
    default : ()=>[]
  },
  "idBy" : {
    type : [String, Function],
    default : "id"
  },
  "currentId" : {
    type : [String, Number],
    default : null
  },
  "checkedIds" : {
    type : [Array, Object],
    default : ()=>[]
  },
  "changedId" : {
    type : String,
    default : null
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "fields" : {
    type : Array,
    default : ()=>[]
  },
  "multi" : {
    type : Boolean,
    default : false
  },
  "checkable" : {
    type : Boolean,
    default : false
  },
  "selectable" : {
    type : Boolean,
    default : true
  },
  "openable" : {
    type : Boolean,
    default : true
  },
  "cancelable" : {
    type : Boolean,
    default : true
  },
  "hoverable" : {
    type : Boolean,
    default : false
  },
  "autoCheckCurrent" : {
    type : Boolean,
    default : true
  },
  //-----------------------------------
  // Callback
  //-----------------------------------
  "onSelect": {
    type : Function,
    default: undefined
  },
  "onOpen": {
    type : Function,
    default: undefined
  },
  "onBeforeChangeSelect" : {
    type : Function,
    default: undefined
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "blankAs" : {
    type : Object,
    default : ()=>({
      icon : "far-list-alt",
      text : "empty-data"
    })
  },
  "blankClass": {
    type: String,
    default: "as-big-mask",
    validator: v=>/^as-(big|hug|big-mask|mid-tip)$/.test(v)
  },
  "rowNumberBase" : {
    type : Number,
    default : undefined
  },
  "border" : {
    type : String,
    default : "cell",
    validator : v => /^(row|column|cell|none)$/.test(v)
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width" : {
    type : [Number, String],
    default : undefined
  },
  "height" : {
    type : [Number, String],
    default : undefined
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-toggle.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/toggle/ti-toggle.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data : ()=>({
    isOn : false
  }),
  /////////////////////////////////////////
  props : {
    "value" : false,
    "readonly" : false,
    "options" : {
      type: Array,
      default: ()=>[false, true]
    }
  },
  //////////////////////////////////////////
  computed : {
    //......................................
    topClass() {
      return Ti.Css.mergeClassName({
        "is-off" : !this.isOn,
        "is-on"  : this.isOn
      }, this.className)
    }
    //......................................
  },
  //////////////////////////////////////////
  methods : {
    onClick() {
      if(!this.readonly) {
        let v = this.isOn ? 0 : 1
        this.$notify("change", this.options[v])
      }
    }
  },
  //////////////////////////////////////////
  watch : {
    "value" : function() {
      this.isOn = this.value ? true : false
    }
  },
  //////////////////////////////////////////
  mounted : function() {
    this.isOn = this.value ? true : false
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-text-heading.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/text/heading/web-text-heading.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    "icon": {
      type : String,
      default: undefined
    },
    "title" : {
      type : String,
      default : undefined
    },
    "titleClass": {
      type: [String, Array, Object],
      default: undefined
    },
    "titleStyle": {
      type: Object,
      default: undefined
    },
    "value": undefined,
    "href" : {
      type: String,
      default: undefined
    },
    "comment" : {
      type : String,
      default : undefined
    },
    "more": {
      type: String,
      default: undefined
    },
    "moreIcon": {
      type: String,
      default: undefined
    },
    "moreText": {
      type: String,
      default: undefined
    },
    "moreHref": {
      type: String,
      default: undefined
    }
  },
  //////////////////////////////////////////
  computed: {
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    TitleClass() {
      return Ti.Css.mergeClassName(this.titleClass)
    },
    //--------------------------------------
    TitleStyle() {
      return Ti.Css.toStyle(this.titleStyle)
    },
    //--------------------------------------
    showMore() {
      if(this.moreText || this.moreIcon)
        return true
      return false
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickTitle() {
      if(this.value) {
        this.$notify("fire", this.value)
      }
    },
    //--------------------------------------
    OnClickMore() {
      if(this.more) {
        this.$notify("more", this.value)
      }
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'm-thing-export.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/thing/m-thing-export.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //--------------------------------------------
  async openExportDataDir({state}, target) {
    let meta = state.meta
    let taDir = target || `id:${meta.id}/export_data`
    console.log(taDir)
    let oDir = await Wn.Io.loadMeta(taDir)
    let link = Wn.Util.getAppLink(oDir)

    await Ti.Be.Open(link.url, {params:link.params})
  },
  //--------------------------------------------
  async exportDataByModes({dispatch}, mode="csv;xls;json;zip") {
    await dispatch("exportData", {mode})
  },
  //--------------------------------------------
  //
  // Export to csv or excel
  //
  //--------------------------------------------
  async exportData({state, getters}, {
    target, 
    mode="csv;xls;json;zip",
    page="current;all",
    name="${title|nm}-${time}",
    mappingDir="id:${id}/export/"
  }={}) {
    let meta = state.meta
    let cmds = [`thing id:${meta.id} query -cqn`]
    //............................................
    let taDir = target || `id:${meta.id}/export_data`
    //............................................
    // Eval Sorter
    if(!_.isEmpty(state.sorter)) {
      let sort = JSON.stringify(state.sorter)
      cmds.push(`-sort '${sort}'`)
    }
    //............................................
    let fltInput = getters["search/filterStr"]
    //............................................
    // Eval default export name
    let exportName = Ti.S.renderBy(name, {
      ... meta,
      time : Ti.DateTime.format(new Date(), 'yyyy-MM-dd_HHmmss')
    })
    exportName = Ti.I18n.text(exportName)
    //............................................
    // Try load export mapping template
    let phMappingDir = Ti.S.renderBy(mappingDir, meta)
    let oMappingDir = await Wn.Io.loadMeta(phMappingDir)
    let oMapplingItems = []
    if(oMappingDir) {
      oMapplingItems = (await Wn.Io.loadChildren(oMappingDir)).list;
    }
    //............................................
    // Prepare the result
    let result = {
      mode : "csv",
      page : "current",
      name : exportName,
      expiIn : 3,
      fltInput,
      cmdText : undefined,
      outPath : undefined,
      target : undefined
    }
    //............................................
    // Eval modes options
    let modeNames = mode.split(";")
    let modeMap = {
      csv  : {value: "csv",  text: "i18n:thing-export-c-mode-csv"},
      xls  : {value: "xls",  text: "i18n:thing-export-c-mode-xls"},
      json : {value: "json", text: "i18n:thing-export-c-mode-json"},
      zip  : {value: "zip",  text: "i18n:thing-export-c-mode-zip"}
    }
    let modeOptions = []
    _.forEach(modeNames, nm => {
      if(modeMap[nm])
        modeOptions.push(modeMap[nm])
    })
    result.mode = _.first(modeOptions).value
    //............................................
    // Eval page options
    let pageModes = page.split(";")
    let pageMap = {
      current: {value: "current",  text: "i18n:thing-export-c-page-current"},
      all    : {value: "all",      text: "i18n:thing-export-c-page-all"}
    }
    let pageOptions = []
    _.forEach(pageModes, md => {
      if(pageMap[md])
      pageOptions.push(pageMap[md])
    })
    result.page = _.first(pageOptions).value
    //............................................
    // Make the config form fields
    let formFields = [];
    formFields.push({
      title : "i18n:thing-export-c-mode",
      name : "mode",
      comType : "TiSwitcher",
      comConf : {
        allowEmpty: false,
        options: modeOptions
      }
    })
    if(!_.isEmpty(oMapplingItems)) {
      result.mapping = _.first(oMapplingItems).id
      formFields.push({
        title : "i18n:thing-export-c-mapping",
        name : "mapping",
        comType : "TiDroplist",
        comConf : {
          options : oMapplingItems,
          iconBy  : "icon",
          valueBy : "id",
          textBy  : "title|nm",
          dropDisplay: ['<icon:zmdi-book>', 'title|nm']
        }
      })
    }
    formFields.push({
      title : "i18n:thing-export-c-page",
      name : "page", 
      comType : "TiSwitcher",
      comConf : {
        allowEmpty: false,
        options: pageOptions
      }
    })
    formFields.push({
      title : "i18n:thing-export-c-name",
      name : "name", 
      comType : "TiInput",
      comConf : {
      }
    })
    formFields.push({
      title : "i18n:thing-export-c-expi",
      name : "expiIn", 
      comType : "TiSwitcher",
      comConf : {
        allowEmpty: false,
        options: [
          {value: 3,  text: "i18n:thing-export-c-expi-3d"},
          {value: 7,  text: "i18n:thing-export-c-expi-7d"},
          {value: 14, text: "i18n:thing-export-c-expi-14d"},
          {value: 0,  text: "i18n:thing-export-c-expi-off"}
        ]
      }
    })
    //............................................
    // Open the dialog to collection user selection
    await Ti.App.Open({
      title  : "i18n:export-data",
      width  : 640,
      height : 640,
      position : "top",
      textOk: null, textCancel: null,
      result,
      comType : "TiWizard",
      comConf : {
        style : {
          padding: ".5em"
        },
        steps : [{
          title : "i18n:thing-export-setup",
          comType : "TiForm",
          comConf : {
            data : ":=..",
            fields : formFields
          },
          prev : false,
          next : {
            enabled : {
              name : "![BLANK]"
            },
            handler : function() {
              let outPath = `${taDir}/${this.value.name}.${this.value.mode}`
              // Join pager
              if("current" == this.value.page) {
                let limit = state.search.pager.pgsz
                let skip  = state.search.pager.pgsz * (state.search.pager.pn - 1)
                cmds.push(`-limit ${limit}`)
                cmds.push(`-skip  ${skip}`)
              }

              // Join the export 
              cmds.push('|', 'sheet -process "${P} : ${id} : ${title} : ${nm}"')
              cmds.push("-tpo " + this.value.mode)
              // Mapping
              if(this.value.mapping) {
                cmds.push(`-mapping id:${this.value.mapping}`)
              }

              cmds.push(`-out '${outPath}';\n`)

              // expi time
              if(this.value.expiIn > 0) {
                cmds.push(`obj ${outPath} -u 'expi:"%ms:now+${this.value.expiIn}d"';`)
              }

              // Join command
              let cmdText = cmds.join(" ")

              // Confirm change
              this.$notify("change", {
                ...this.value,
                outPath,
                cmdText
              })

              // Go to run command
              this.gotoFromCurrent(1)
            }
          }
        }, {
          title : "i18n:thing-export-ing",
          comType : "WnCmdPanel",
          comConf : {
            value : ":=cmdText",
            input : fltInput,
            tipText : "i18n:thing-export-ing-tip",
            tipIcon : "fas-bullhorn",
            emitName : "step:change",
            emitPayload : "%next"
          },
          prev : false,
          next : false
        }, {
          title : "i18n:thing-export-done",
          prepare : async function(){
            let oTa = await Wn.Io.loadMeta(this.value.outPath)
            this.$notify("change", {
              ... this.value,
              target : oTa
            })
          },
          comType : "WebMetaBadge",
          comConf : {
            className : "is-success",
            value : ":=target",
            icon  : "fas-check-circle",
            title : "i18n:thing-export-done-ok",
            brief : "i18n:thing-export-done-tip",
            links : [{
              icon : "fas-download",
              text : ":=target.nm",
              href : ":->/o/content?str=id:${target.id}&d=true",
              newtab : true
            }, {
              icon : "fas-external-link-alt",
              text : "i18n:thing-export-open-dir",
              href : Wn.Util.getAppLink(taDir),
              newtab : true
            }]
          }
        }]
      },
      components : [
        "@com:ti/wizard",
        "@com:ti/form",
        "@com:wn/cmd/panel",
        "@com:web/meta/badge"
      ]
    })
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'm-thing-current-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/thing/mod/current/m-thing-current-actions.mjs'] = (function(){
const _M = {
  //----------------------------------------
  // Combin Mutations
  //----------------------------------------
  onChanged({dispatch}, payload) {
    dispatch("changeContent", payload)
  },
  //----------------------------------------
  changeContent({commit}, payload) {
    commit("setContent", payload)
    commit("syncStatusChanged");
  },
  //----------------------------------------
  changeMeta({commit}, {name, value}={}) {
    if(name) {
      let meta = _.set({}, name, value)
      commit("mergeMeta", meta)
      commit("syncStatusChanged")
    }
  },
  //----------------------------------------
  updateContent({state, commit}, content) {
    commit("setContent", content)
    if(state.meta && "FILE" == state.meta.race) {
      commit("setSavedContent", content)
    }
    commit("syncStatusChanged")
  },
  //--------------------------------------------
  // User Interactivity
  //--------------------------------------------
  async openMetaEditor({state, dispatch}) {
    // Guard
    if(!state.meta) {
      return await Ti.Toast.Open("i18n:empty-data", "warn")
    }
    // Open Editor
    let reo = await Wn.EditObjMeta(state.meta, {fields:"auto"})

    // Cancel the editing
    if(_.isUndefined(reo)) {
      return
    }

    // Update the current editing
    if(reo.saved) {
      await dispatch("reload", reo.data)
    }
  },
  //--------------------------------------------
  async openContentEditor({state, dispatch}) {
    // Guard
    if(!state.meta) {
      return await Ti.Toast.Open("i18n:empty-data", "warn")
    }
    // Open Editor
    let newContent = await Wn.EditObjContent(state.meta, {
      content : state.content
    })

    // Cancel the editing
    if(_.isUndefined(newContent)) {
      return
    }

    // Update the current editing
    await dispatch("changeContent", newContent)
  },
  //--------------------------------------------
  // Update to remote
  //----------------------------------------
  async updateMeta({commit, dispatch}, {name, value}={}) {
    let data = Ti.Types.toObjByPair({name, value})
    await dispatch("updateMetas", data)
  },
  //----------------------------------------
  async updateMetas({state, commit, rootState}, data={}) {
    // Check Necessary
    if(_.isMatchWith(state.meta, data, _.isEqual)) {
      return
    }

    // Mark field status
    _.forEach(data, (val, name)=>{
      commit("setFieldStatus", {name, type:"spinning", text:"i18n:saving"})
    })

    // Do the update
    let json = JSON.stringify(data)
    let th_set = rootState.main.meta.id
    let th_id  = state.meta.id
    let cmdText = `thing id:${th_set} update ${th_id} -fields -cqn`
    let reo = await Wn.Sys.exec2(cmdText, {input:json, as:"json"})
    let isError = reo instanceof Error;

    if(!isError && !Ti.Util.isNil(reo)) {
      commit("setMeta", reo)
    }

    _.forEach(data, (val, name)=>{
      if(isError) {
        commit("setFieldStatus", {
          name, 
          type: "warn", 
          text: reo.message || "i18n:fail"
        })
      } else {
        commit("setFieldStatus", {
          name, 
          type: "ok", 
          text: "i18n:ok"
        })
        _.delay(()=>{commit("clearFieldStatus", name)}, 500)
      }
    })
  },
  //--------------------------------------------
  // Reload & Save
  //--------------------------------------------
  // async setCurrent({state, commit,dispatch}, {
  //   meta=null, force=false
  // }={}) {
  //   //console.log("setCurrent", meta, loadContent)

  //   // Not need to reload
  //   if(state.meta && meta && state.meta.id == meta.id) {
  //     if((_.isString(state.content)) && !force) {
  //       return
  //     }
  //   }

  //   // do reload
  //   await dispatch("reload", meta)

  // },
  //----------------------------------------
  async save({state, commit}) {
    if(state.status.saving || !state.status.changed){
      return
    }

    commit("setStatus", {saving:true})

    let meta = state.meta
    let content = state.content
    let newMeta = await Wn.Io.saveContentAsText(meta, content)

    commit("setStatus", {saving:false})
    commit("setMeta", newMeta)
    commit("setSavedContent", content)
    commit("syncStatusChanged")

    // return the new meta
    return newMeta
  },
  //----------------------------------------
  async reload({state, commit, dispatch}, meta) {
    if(state.status.reloading
      || state.status.saving){
      return
    }
    //......................................
    // Use the default meta
    if(_.isUndefined(meta)) {
      meta = state.meta
    }
    //......................................
    // Before reload content and meta,
    // Update meta at first
    let preContent = meta ? "" : null
    commit("setContent", preContent)
    commit("setSavedContent", preContent)
    //......................................
    if(_.isString(meta)) {
      meta = await Wn.Io.loadMeta(meta)
    }
    else if(meta && meta.id) {
      meta = await Wn.Io.loadMetaById(meta.id)
    }
    //......................................
    // Guard
    if(!meta) {
      return
    }
    // Init content as null
    let content = null
    commit("setStatus", {reloading:true})
    //......................................
    // For file
    if("FILE" == meta.race) {
      // need to be reload content
      content = await Wn.Io.loadContent(meta)
    }
    //......................................
    // For dir
    else if('DIR' == meta.race) {
      content = await Wn.Io.loadChildren(meta)
    }
    //......................................
    // Just update the meta
    commit("setStatus", {reloading:false})
    commit("setMeta", meta)
    commit("clearFieldStatus")
    // Update content and sync state
    dispatch("updateContent", content)
  }
  //----------------------------------------
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-switcher.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/switcher/ti-switcher.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////////////////
  data : ()=>({
    loading : false,
    myOptionsData : [],
    myValueMap  : {},
    myLastIndex : 0,
    myFocusIndex : -1
  }),
  /////////////////////////////////////////////////////
  computed : {
    //-------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //-------------------------------------------------
    Dict() {
      // Customized
      if(this.options instanceof Ti.Dict) {
        return this.options
      }
      // Refer dict
      if(_.isString(this.options)) {
        let dictName = Ti.DictFactory.DictReferName(this.options)
        if(dictName) {
          return Ti.DictFactory.CheckDict(dictName, ({loading}) => {
            this.loading = loading
          })
        }
      }
      return Ti.DictFactory.GetOrCreate({
        data : this.options,
        getValue : Ti.Util.genGetter(this.valueBy || "value"),
        getText  : Ti.Util.genGetter(this.textBy  || "text|name"),
        getIcon  : Ti.Util.genGetter(this.iconBy  || "icon")
      }, {
        hooks: ({loading}) => this.loading = loading
      })
    },
    //-------------------------------------------------
    TheItems() {
      return _.map(this.myOptionsData, (it, index) => {
        let itV = this.Dict.getValue(it)
        return {
          index,
          className : {
            "is-selected" : this.myValueMap[itV],
            "is-focused"  : index == this.myFocusIndex
          },
          text  : this.Dict.getText(it),
          value : itV,
          icon  : this.Dict.getIcon(it) || this.defaultIcon
        }
      })
    }
    //-------------------------------------------------
  },
  /////////////////////////////////////////////////////
  methods : {
    //-------------------------------------------------
    OnClickItem({value, index}, $event) {
      if(this.readonly)
        return
      let toggle = ($event.ctrlKey || $event.metaKey)
      let shift  = $event.shiftKey;
      // Multi + Shift Mode
      if(shift && this.multi) {
        this.selectItemsToCurrent(value, index)
      }
      // Multi + Toggle Mode
      else if(toggle && this.multi) {
        this.toggleItem(value)
      }
      // Toggle Mode
      else if(this.allowEmpty) {
        this.toggleItem(value)
      }
      // Single Mode
      else {
        this.myValueMap = {[value]:true}
      }
      // Last Index
      this.myLastIndex = index
      // Notify
      this.tryNotifyChanged()
    },
    //-------------------------------------------------
    OnMouseDown({index}) {
      if(this.readonly)
        return
      this.myFocusIndex = index
    },
    //-------------------------------------------------
    // Utility
    //-------------------------------------------------
    findItemIndexByValue(val) {
      for(let it of this.TheItems) {
        if(it.value == val)
          return it.index
      }
      return -1
    },
    //-------------------------------------------------
    selectItemsToCurrent(val) {
      let vmap  = _.cloneDeep(this.myValueMap)
      let index = this.findItemIndexByValue(val)
      if(index >= 0) {
        let fromIndex = Math.min(index, this.myLastIndex)
        let toIndex   = Math.max(index, this.myLastIndex)
        if(fromIndex < 0) {
          fromIndex = 0
        }
        for(let i=fromIndex; i<=toIndex; i++) {
          let it = this.TheItems[i]
          vmap[it.value] = true
        }
      }
      this.myValueMap = vmap
    },
    //-------------------------------------------------
    toggleItem(val) {
      let oldV = this.myValueMap[val]
      if(this.multi) {
        this.myValueMap = _.assign({}, this.myValueMap, {
          [val] : !oldV
        })
      } else {
        this.myValueMap = {[val] : !oldV}
      }
    },
    //-------------------------------------------------
    tryNotifyChanged() {
      let vals = Ti.Util.truthyKeys(this.myValueMap)
      if(!_.isEqual(vals, this.Values)) {
        let v = this.multi ? vals : vals.join(",")
        this.$notify("change", v)
      }
    },
    //......................................
    async reloadMyOptionsData() {
      this.myOptionsData = await this.Dict.getData()
    },
    //......................................
    reloadMyValueMap() {
      let sep = null
      if(this.autoSplitValue) {
        if(_.isBoolean(this.autoSplitValue)) {
          sep = /[:,;\t\n\/]+/g;
        } else {
          sep = this.autoSplitValue
        }
      }

      let vals = Ti.S.toArray(this.value, {sep})
      let vmap = {}
      _.forEach(vals, v => vmap[v]=true)
      this.myValueMap = vmap
    }
    //......................................
  },
  /////////////////////////////////////////
  watch : {
    "options" : {
      handler : "reloadMyOptionsData",
      immediate: true
    },
    "value" : {
      handler : "reloadMyValueMap",
      immediate: true
    }
  },
  /////////////////////////////////////////
  mounted : async function(){
    Ti.Dom.watchDocument("mouseup", ()=>this.myFocusIndex = -1)
  },
  /////////////////////////////////////////
  beforeDestroy : function(){
    Ti.Dom.unwatchDocument("mouseup", this.__on_mouseup)
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'bar-item-line.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/actionbar/com/bar-item-line/bar-item-line.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////
  inject: ["$bar"],
  ///////////////////////////////////////
  props : {
    "depth": {
      type: Number,
      default: 0
    }
  },
  ///////////////////////////////////////
  computed : {
    //-----------------------------------
    TopClass() {
      return this.getTopClass({
        "is-top" : this.depth == 1,
        "is-sub" : this.depth > 1
      })
    }
    //-----------------------------------
  }
  ///////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'm-thing-current.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/thing/mod/current/m-thing-current.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////
  mutations : {
    //----------------------------------------
    setMeta(state, meta) {
      state.meta = meta
    },
    //--------------------------------------------
    assignMeta(state, meta) {
      state.meta = _.assign({}, state.meta, meta);
    },
    //--------------------------------------------
    mergeMeta(state, meta) {
      state.meta = _.merge({}, state.meta, meta);
    },
    //----------------------------------------
    setContent(state, content) {
      let meta = state.meta;
      // Guard
      if(!meta || Ti.Util.isNil(content)) {
        state.content = null
        state.data = null
        state.__saved_content = null
        state.status.changed = false
        return
      }
      //......................................
      // DIR
      if("DIR" == meta.race) {
        state.content = null
        state.__saved_content = null
        state.data = content
      }
      //......................................
      // File
      else if("FILE" == meta.race) {
        //....................................
        // String content
        if(_.isString(content)) {
          state.content = content
          // JSON
          if(Wn.Util.isMimeJson(meta.mime)) {
            try{
              state.data = JSON.parse(content)
            } catch(E) {
              state.data = null
            }
          }
          // Pure Text
          else if(Wn.Util.isMimeText(meta.mime)) {
            state.data = null
          }
        }
        //....................................
        // Take content as plain object or Array
        else {
          state.content = JSON.stringify(content, null, '  ')
          // JSON
          if(Wn.Util.isMimeJson(meta.mime)) {
            state.data = content
          }
          // Pure Text
          else if(Wn.Util.isMimeText(meta.mime)) {
            state.data = null
          }
        }
        //....................................
      }
    },
    //----------------------------------------
    setData(state, data) {
      state.data = data
    },
    //----------------------------------------
    setSavedContent(state, content) {
      state.__saved_content = content
    },
    //----------------------------------------
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    },
    //----------------------------------------
    syncStatusChanged(state){
      if(Ti.Util.isNil(state.content) && Ti.Util.isNil(state.__saved_content)) {
        state.status.changed = false
      } else {
        state.status.changed = !_.isEqual(state.content, state.__saved_content)
      }
    },
    //----------------------------------------
    setFieldStatus(state, {name, type, text}={}) {
      if(name){
        let ukey = _.concat(name).join("-")
        Vue.set(state.fieldStatus, ukey, {type, text})
      }
    },
    //----------------------------------------
    clearFieldStatus(state, names=[]) {
      // Clean All
      if(_.isEmpty(names)) {
        state.fieldStatus = {}
      }
      // Clear one
      else {
        state.fieldStatus = _.omit(state.fieldStatus, names)
      }
    },
    //----------------------------------------
  }
  ////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'list_mixins.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/support/list_mixins.mjs'] = (function(){
const LIST_MIXINS = {
  ///////////////////////////////////////////////////
  provide : function(){
    return {
      "$vars" : this.vars || {}
    }
  },
  ///////////////////////////////////////////////////
  data : ()=>({
    myLastIndex: -1,      // The last row index selected by user
    myCurrentId: null,    // Current row ID
    myCheckedIds: {}      // Which row has been checked
  }),
  ///////////////////////////////////////////////////
  // props -> list_props.mjs
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    TopStyle() {
      let w = this.width
      let h = this.height
      return Ti.Css.toStyle({
        width  : w,
        height : h
      })
    },
    //-----------------------------------------------
    hasRowToggleKey() {
      return !_.isEmpty(this.rowToggleKey)
    },
    //-----------------------------------------------
    TheRowToggleKey() {
      return _.without(_.concat(this.rowToggleKey), undefined)
    },
    //-----------------------------------------------
    getRowId() {
      return Ti.Util.genRowIdGetter(this.idBy)
    },
    //-----------------------------------------------
    getRowData() {
      return Ti.Util.genRowDataGetter(this.rawDataBy)
    },
    //-----------------------------------------------
    isDataEmpty() {
      return !_.isArray(this.data) || _.isEmpty(this.data)
    },
    //-----------------------------------------------
    isAllChecked() {
      // Empty list, nothing checked
      if(this.isDataEmpty) {
        return false 
      }
      // Checking ...
      for(let row of this.TheData){
        if(!this.theCheckedIds[row.id])
          return false;  
      }
      return true
    },
    //-----------------------------------------------
    hasChecked() {
      for(let it of this.data){
        let itId = this.getRowId(it)
        if(this.theCheckedIds[itId])
          return true  
      }
      return false
    },
    //-----------------------------------------------
    theCurrentRowId() {
      return this.wrapRowId(this.currentId)
    },
    //-----------------------------------------------
    theCurrentId()  {
      return this.puppetMode 
              ? this.theCurrentRowId 
              : this.myCurrentId
    },
    //-----------------------------------------------
    theCheckedIds() {
      return this.puppetMode 
        ? this.getCheckedIdsMap(this.checkedIds)
        : this.myCheckedIds 
    },
    //-----------------------------------------------
    isRowCheckable () {return Ti.AutoMatch.parse(this.rowCheckable ||this.checkable)},
    isRowSelectable() {return Ti.AutoMatch.parse(this.rowSelectable||this.selectable)},
    isRowOpenable  () {return Ti.AutoMatch.parse(this.rowOpenable  ||this.openable)},
    isRowCancelable() {return Ti.AutoMatch.parse(this.rowCancelable||this.cancelable)},
    isRowHoverable () {return Ti.AutoMatch.parse(this.rowHoverable ||this.hoverable)},
    //-----------------------------------------------
    // fnSet() {
    //   return _.assign({}, Ti.GlobalFuncs(), this.extendFunctionSet)
    // },
    //-----------------------------------------------
    Dict() {
      if(this.dict) {
        // Already Dict
        if(this.dict instanceof Ti.Dict) {
          return this.dict
        }
        // Get back
        let {name} = Ti.DictFactory.explainDictName(this.dict)
        return Ti.DictFactory.CheckDict(name)
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    wrapRowId(rowId) {
      if(_.isNumber(rowId)){
        return ""+rowId
      }
      return rowId
    },
    //-----------------------------------------------
    async evalData(iteratee=_.identity) {
      let data = this.data
      //............................................
      // May need translate
      if(this.Dict) {
        // Query by value
        if(_.isString(data)) {
          data = await this.Dict.queryData(data)
        }
        // Check Each data item
        else if(_.isArray(data)) {
          let data2 = []
          for(let i=0; i<data.length; i++) {
            let it = data[i]
            // Check the real item
            if(_.isString(it)) {
              let it2 = await this.Dict.getItem(it)
              if(it2) {
                data2.push(it2)
              }
            }
            // Primary
            else {
              data2.push(it)
            }
          }
          data = data2
        }
        // All data of Dict
        else {
          data = await this.Dict.getData()
        }
      }
      //............................................
      // Then format the list
      let list = []
      _.forEach(data, (it, index)=>{
        let item = {
          index,
          id      : this.getRowId(it, index),
          rawData : this.getRowData(it),
          checkable  : this.isRowCheckable(it),
          selectable : this.isRowSelectable(it),
          openable   : this.isRowOpenable(it),
          cancelable : this.isRowCancelable(it),
          hoverable  : this.isRowHoverable(it),
          item : it
        }
        item = iteratee(item) || item
        // Join
        list.push(item)
      })
      //............................................
      return list
    },
    //-----------------------------------------------
    findRowIndexById(rowId) {
      for(let row of this.TheData) {
        if(row.id == rowId) {
          return row.index
        }
      }
      return -1
    },
    //-----------------------------------------------
    findRowById(rowId) {
      for(let row of this.TheData) {
        if(row.id == rowId) {
          return row
        }
      }
    },
    //-----------------------------------------------
    getRow(index=0) {
      return _.nth(this.TheData, index)
    },
    //------------------------------------------
    getCurrentRow(currentId=this.theCurrentId) {
      return this.findRowById(currentId)
    },
    //------------------------------------------
    getCurrent(currentId=this.theCurrentId) {
      let row = this.getCurrentRow(currentId)
      return row 
              ? row.rawData
              : null
    },
    //------------------------------------------
    getCheckedRow(idMap=this.theCheckedIds) {
      let list = []
      for(let row of this.TheData) {
        if(idMap[row.id]) {
          list.push(row)
        }
      }
      return list
    },
    //------------------------------------------
    getChecked(idMap=this.theCheckedIds) {
      let rows = this.getCheckedRow(idMap)
      return _.map(rows, row=>row.rawData)
    },
    //-----------------------------------------------
    removeCheckedRow(idMap=this.theCheckedIds) {
      let checkedIds = this.getCheckedIdsMap(idMap, false)
      let minIndex = -1
      let maxIndex = -1
      let remainsRows = []
      let checkedRows = []

      _.forEach(this.TheData, row => {
        if(idMap[row.id]) {
          minIndex = minIndex < 0 
                      ? row.index
                      : Math.min(row.index, minIndex);

          maxIndex = maxIndex < 0
                      ? row.index
                      : Math.max(row.index, maxIndex);

          checkedRows.push(row)
        } else {
          remainsRows.push(row)
        }
      })

      return {
        remainsRows, checkedRows, minIndex, maxIndex, checkedIds
      }
    },
    //-----------------------------------------------
    removeChecked(idMap=this.theCheckedIds) {
      let re = this.removeCheckedRow(idMap)
      re.remains = _.map(re.remainsRows, row => row.rawData)
      re.checked = _.map(re.checkedRows, row => row.rawData)
      return re
    },
    //-----------------------------------------------
    moveCheckedRow(offset=0, idMap=this.theCheckedIds) {
      idMap = this.getCheckedIdsMap(idMap, false)
      //console.log(idMap)
      if(offset==0 || _.isEmpty(idMap))
        return {rows:this.TheData, nextCheckedIds:idMap}

      let {
        checkedIds,
        minIndex,
        maxIndex,
        remainsRows,
        checkedRows
      } = this.removeCheckedRow(idMap)

      // targetIndex in remains[] list
      let targetIndex = Math.max(0, minIndex-1)
      if(offset > 0) {
        targetIndex = Math.min(maxIndex - checkedRows.length + 2, remainsRows.length)
      }
      // Insert
      let rows = _.cloneDeep(remainsRows)
      rows.splice(targetIndex, 0, ...checkedRows)

      if(_.isEmpty(rows))
        return {rows:[], nextCheckedIds:{}}

      // If the index style ID, adjust them
      let nextCheckedIds = checkedIds
      if(/^Row-\d+$/.test(rows[0].id)) {
        nextCheckedIds = {}
        for(let i=0; i<checkedRows.length; i++){
          nextCheckedIds[`Row-${i + targetIndex}`] = true
        }
      }

      return {rows, nextCheckedIds}
    },
    //-----------------------------------------------
    moveChecked(offset=0, idMap=this.theCheckedIds) {
      let re = this.moveCheckedRow(offset, idMap)
      re.list = _.map(re.rows, row => row.rawData)
      return re
    },
    //-----------------------------------------------
    getEmitContext(
      currentId, 
      checkedIds={}
    ) {
      let checked = []
      let current = null
      let currentIndex = -1
      for(let row of this.TheData) {
        if(row.id == currentId) {
          current = row.rawData
          currentIndex = row.index
        }
        if(checkedIds[row.id]) {
          checked.push(row.rawData)
        }
      }
      return {
        current, currentId, currentIndex,
        checked, checkedIds
      }
    },
    //-----------------------------------------------
    async canSelectRow(payload) {
      if(_.isFunction(this.onBeforeChangeSelect)) {
        let canSelect = await this.onBeforeChangeSelect(payload)
        if(false === canSelect) {
          return false
        }
      }
      return true
    },
    //-----------------------------------------------
    async selectRow(rowId, {quiet=false, payload}={}) {
      let idMap = {}
      let curId = null
      // Change the current & checked
      if(this.autoCheckCurrent) {
        idMap = rowId ? {[rowId]:true} : {}
        curId = rowId || null
      }
      // Just change to current
      else {
        idMap = _.cloneDeep(this.myCheckedIds)
        curId = rowId
      }

      let emitContext = this.getEmitContext(curId, idMap)

      if(!(await this.canSelectRow(emitContext))) {
        return;
      }

      // Private Mode
      if(!this.puppetMode) {
        this.myCheckedIds = idMap
        this.myCurrentId  = curId
      }
      this.myLastIndex  = this.findRowIndexById(rowId)
      // Notify Changes
      if(!quiet) {
        _.defaults(emitContext, payload)
        this.doNotifySelect(emitContext)
      }
    },
    //-----------------------------------------------
    selectRowByIndex(rowIndex, options) {
      //console.log(rowIndex)
      let index = rowIndex
      if(this.scrollIndex) {
        index = Ti.Num.scrollIndex(rowIndex, this.TheData.length)
      }
      if(_.inRange(index, 0, this.TheData.length)) {
        let row = this.TheData[index]
        this.selectRow(row.id, options)
      }
    },
    //-----------------------------------------------
    selectPrevRow(options) {
      this.selectRowByIndex(Math.max(-1, this.myLastIndex-1), options)
    },
    //-----------------------------------------------
    selectNextRow(options) {
      this.selectRowByIndex(this.myLastIndex+1, options)
    },
    //-----------------------------------------------
    selectRowsToCurrent(rowId) {
      let idMap = _.cloneDeep(this.theCheckedIds)
      let curId = this.theCurrentId
      let index = this.findRowIndexById(rowId)
      if(index >= 0) {
        let fromIndex = Math.min(index, this.myLastIndex)
        let toIndex   = Math.max(index, this.myLastIndex)
        if(fromIndex < 0) {
          fromIndex = 0
        }
        for(let i=fromIndex; i<=toIndex; i++) {
          let row = this.TheData[i]
          idMap[row.id] = true
        }
        // Eval context
        let emitContext = this.getEmitContext(curId, idMap)
        // Private Mode
        if(!this.puppetMode) {
          this.myCheckedIds = idMap
          this.myCurrentId  = curId
        }
        this.myLastIndex  = index
        // Notify Changes
        this.doNotifySelect(emitContext)
      }
    },
    //-----------------------------------------------
    checkRow(rowId, {quiet=false, payload, reset=false}={}) {
      let idMap = _.cloneDeep(this.theCheckedIds)
      let curId = this.theCurrentId
      let index = this.myLastIndex
      let rowIndex = this.findRowIndexById(rowId)

      // Reset
      if(reset) {
        curId = null
        idMap = {}
      }

      // All rows
      if(_.isUndefined(rowId)) {
        idMap = {}
        _.forEach(this.TheData, (row)=>{
          idMap[row.id] = true
        })
      }
      // Multi rows
      else if(_.isArray(rowId)) {
        let lastRowId = _.last(rowId)
        _.forEach(rowId, (r_id)=>{
          idMap[r_id] = true
        })
        if(this.autoCheckCurrent) {
          index = this.findRowIndexById(lastRowId)
        }
      }
      // Object
      else if(_.isPlainObject(rowId)) {
        idMap = _.cloneDeep(rowId)
        if(this.autoCheckCurrent) {
          let lastRowId = undefined
          for(let key in idMap) {
            lastRowId = key
            break;
          }
          index = this.findRowIndexById(lastRowId)
        }
      }
      // Single row
      else {
        idMap[rowId] = true
        if(this.autoCheckCurrent) {
          index = rowIndex
        }
      }
      // Eval context
      let emitContext = this.getEmitContext(curId, idMap)
      // Private Mode
      if(!this.puppetMode) {
        this.myCheckedIds = idMap
        this.myCurrentId  = curId
      }
      this.myLastIndex  = rowIndex
      // Notify Changes
      if(!quiet) {
        _.defaults(emitContext, payload)
        this.doNotifySelect(emitContext)
      }
    },
    //-----------------------------------------------
    async cancelRow(rowId, {quiet=false, payload}={}) {
      let idMap = _.cloneDeep(this.theCheckedIds)
      let curId  = this.theCurrentId
      let index = -1
      //console.log("cancelRow", rowId)
      if(Ti.Util.isNil(rowId)) {
        idMap = {}
        curId = null
      }
      // Single row
      else {
        index = this.findRowIndexById(rowId)
        idMap[rowId] = false
        if(this.autoCheckCurrent && curId == rowId) {
          curId = null
        }
      }
      // Eval context
      let emitContext = this.getEmitContext(curId, idMap)

      if(!(await this.canSelectRow(emitContext))) {
        return;
      }

      // Private Mode
      if(!this.puppetMode) {
        this.myCheckedIds = idMap
        this.myCurrentId  = curId
        this.myLastIndex  = index
      }
      // Notify Changes
      if(!quiet) {
        _.defaults(emitContext, payload)
        this.doNotifySelect(emitContext)
      }
    },
    //-----------------------------------------------
    toggleRow(rowId, {quiet=false, payload}={}) {
      if(this.theCheckedIds[rowId]) {
        this.cancelRow(rowId, {quiet, payload})
      } else {
        this.checkRow(rowId, {quiet, payload})
      }
    },
    //-----------------------------------------------
    doNotifySelect(emitContext) {
      this.$notify("select", emitContext)
      if(_.isFunction(this.onSelect)) {
        this.onSelect(emitContext)
      }
    },
    //-----------------------------------------------
    OnRowCheckerClick({rowId, shift}={}) {
      if(this.multi) {
        // Shift Mode
        if(shift) {
          this.selectRowsToCurrent(rowId)
        }
        // Simple Toggle Mode
        else {
          this.toggleRow(rowId)
        }
      }
      // Single Mode
      else {
        this.selectRow(rowId)
      }
    },
    //-----------------------------------------------
    OnRowSelect({rowId, shift, toggle}={}) {
      // Multi + Shift Mode
      if(shift && this.multi) {
        this.selectRowsToCurrent(rowId)
      }
      // Multi + Toggle Mode
      else if(toggle && this.multi) {
        this.toggleRow(rowId)
      }
      // Toggle Mode
      else if(!Ti.Util.isNil(rowId) && !this.autoCheckCurrent) {
        this.toggleRow(rowId)
      }
      // Single Mode
      else {
        this.selectRow(rowId)
      }
    },
    //-----------------------------------------------
    OnRowOpen({rowId}={}) {
      let row = this.findRowById(rowId)
      if(row) {
        this.$notify("open", row)
        if(_.isFunction(this.onOpen)) {
          this.onOpen(row)
        }
      }
    },
    //-----------------------------------------------
    getCheckedIdsMap(idList=[], autoCheckCurrent=this.autoCheckCurrent) {
      let idMap = {}
      // ID List
      if(_.isArray(idList)) {
        _.forEach(idList, (rowId)=>{
          idMap[rowId] = true
        })
      }
      // Map
      else {
        _.forEach(idList, (checked, rowId)=>{
          if(checked) {
            idMap[rowId] = true
          }
        })
      }
      // Force to check current
      if(autoCheckCurrent && !Ti.Util.isNil(this.theCurrentId)) {
        idMap[this.theCurrentId] = true
      }
      return idMap
    },
    //-----------------------------------------------
    syncCurrentId() {
      if(!this.puppetMode && this.theCurrentId != this.theCurrentRowId) {
        //console.log("syncCurrentId", this.theCurrentRowId)
        this.selectRow(this.theCurrentRowId, {quiet:true})
      }
      // Just update the last
      else {
        this.myLastIndex = this.findRowIndexById(this.theCurrentRowId)
      }
    },
    //-----------------------------------------------
    syncCheckedIds() {
      if(!this.puppetMode) {
        this.myCheckedIds = this.getCheckedIdsMap(this.checkedIds)
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "currentId" : function() {
      this.syncCurrentId()
    },
    "checkedIds" : function() {
      this.syncCheckedIds()
    },
    "data" : function() {
      if(this.theCurrentId) {
        this.myLastIndex = this.findRowIndexById(this.theCurrentId)
      }
    }
  },
  ///////////////////////////////////////////////////
  mounted : async function() {
    //.................................
    this.syncCheckedIds()
    this.syncCurrentId()
    //.................................
   }
  ///////////////////////////////////////////////////
}
return LIST_MIXINS;
;
})()
// ============================================================
// EXPORT 'web-meta-badge.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/meta/badge/web-meta-badge.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data: ()=>({
    myData: undefined
  }),
  /////////////////////////////////////////
  props : {
    //--------------------------------------
    // Data
    //--------------------------------------
    "value" : undefined,
    "transformer" : {
      type : [String, Function, Object],
      default : undefined
    },
    //--------------------------------------
    // Behavior
    //--------------------------------------
    // ...
    //--------------------------------------
    // Aspect
    //--------------------------------------
    // "=xxx" : get icon from value
    // F(this.value)
    // "fas-xx"  : static value
    // "xxx.png" : static image (SVG supported)
    "icon" : {
      type : [String, Function],
      default : "=icon"
    },
    "title" : {
      type : [String, Function],
      default : "=title"
    },
    "brief" : {
      type : [String, Function],
      default : "=brief"
    },
    // [{icon, text, href, newtab, emitName, payload}]
    "links" : {
      type : [Array, String, Function, Object],
      default : "=links"
    },
    //--------------------------------------
    // Measure
    //--------------------------------------
    "iconWidth" : {
      type : [String, Number],
      default : undefined
    },
    "iconHeight" : {
      type : [String, Number],
      default : undefined
    },
    "iconSize" : {
      type : [String, Number],
      default : undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass(_.get(this.myData, "className"))
    },
    //--------------------------------------
    IconStyle() {
      return Ti.Css.toStyle({
        width: this.iconWidth,
        height : this.iconHeight,
        fontSize : this.iconSize
      })
    },
    //--------------------------------------
    TheIcon() {
      return Ti.Util.explainObj(this.myData, this.icon);
    },
    //--------------------------------------
    TheTitle() {
      return Ti.Util.explainObj(this.myData, this.title);
    },
    //--------------------------------------
    TheBrief() {
      return Ti.Util.explainObj(this.myData, this.brief);
    },
    //--------------------------------------
    TheLinks() {
      let links = Ti.Util.explainObj(this.myData, this.links);
      if(!links)
        return []
      if(!_.isArray(links)) {
        links = [links]
      }
      let list = []
      for(let i=0; i<links.length; i++) {
        let li = links[i]
        if(li.text) {
          list.push({index: i, ... li})
        }
      }
      return list
    },
    //--------------------------------------
    hasLinks() {
      return !_.isEmpty(this.TheLinks)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickLink({href, emitName, payload}={}, evn) {
      if(!href) {
        evn.preventDefault()
        if(emitName) {
          this.$notify(emitName, payload)
        }
      }
    },
    //--------------------------------------
    async evalData() {
      if(this.transformer) {
        if(_.isFunction(this.transformer)) {
          this.myData = await this.transformer(this.value)
        } else {
          this.myData = Ti.Util.explainObj(this.value, this.transformer)
        }
      } else {
        this.myData = this.value
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "value" : {
      handler: "evalData",
      immediate : true
    }
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-bullet-radio.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/bullet/radio/ti-bullet-radio.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data: ()=>({
    myTypeName : "ti-radio-list"
  }),
  //////////////////////////////////////////
  props: {
    "bulletIconOn" : {
      type : String,
      default : "fas-dot-circle"
    },
    "bulletIconOff" : {
      type : String,
      default : "far-circle"
    }
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickItem({value}) {
      this.$notify("change", value)
    },
    //--------------------------------------
    isItemChecked(itValue, val) {
      return !_.isUndefined(val)
        && !_.isUndefined(itValue)
        && _.isEqual(itValue, val)
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-button.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/button/ti-button.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  props : {
    "size" :{
      type : String,
      default : "normal",
      validator: v=>/^(big|normal|small|tiny)$/.test(v)
    },
    // center|top|left|right|bottom|
    // left-top|right-top|bottom-left|bottom-right
    "align" :{
      type : String,
      default : "center"
    },
    "setup" : {
      type : [Array, Object],
      default : ()=>[]
    }
  },
  //////////////////////////////////////////
  computed : {
    //......................................
    topClass() {
      return Ti.Css.mergeClassName([
        `is-${this.size}`, `at-${this.align}`
      ], this.className)
    },
    //......................................
    items() {
      let list = [].concat(this.setup)
      let re = []
      _.forEach(list, (li, index)=>{
        let it = {}
        it.name = li.name || `item-${index}`
        it.eventName = li.eventName || it.name
        it.payload = li.payload
        it.icon = li.icon
        it.text = li.disabled ? li.disabledText || li.text : li.text
        it.disabled = li.disabled
        it.handler = li.handler
        it.buttonClass = {
          [`as-do-${it.name}`] : true,
          "is-enabled"      : !li.disabled  ? true : false,
          "is-disabled"     : li.disabled   ? true : false,
          "is-invert-icon"  : li.invertIcon ? true : false 
        }
        re.push(it)
      })
      return re
    }
    //......................................
  },
  //////////////////////////////////////////
  methods :{
    OnClickItem(it) {
      if(!it.disabled) {
        if(_.isFunction(it.handler)) {
          it.handler()
        }
        if(_.isString(it.eventName)) {
          this.$notify(it.eventName, it.payload)
        }
      }
    }
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-lbs-route.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/lbs/route/ti-lbs-route.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  inject: {
    '$vars': {default: {}}
  },
  /////////////////////////////////////////
  data : ()=>({
    myShowList: undefined,
    myCurrentId: undefined,
    myCheckedIds: undefined,
    myFullscreen: false,
    apiLoaded: false
  }),
  /////////////////////////////////////////
  props : {
    // tencent|baidu|google ...
    "by" : {
      type : String,
      default : "tencent"
    },
    // Map security key pattern 
    // it will find the key from "$vars" which injected to the com.
    // default, if by=google, the mapKey in "$vars" should be "googleMapKey"
    "secretKey": {
      type: String,
      default: "${by}MapKey"
    },
    // All Map api support URL
    // key by 'by' prop
    "apiUrls": {
      type: Object,
      default: ()=>({
        "google": '!js://maps.googleapis.com/maps/api/js?key=${key}'
      })
    },
    // @see https://lbs.qq.com/javascript_v2/doc/maptypeid.html
    // @see http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference_3_0.html#a5b0
    // ROADMAP | SATELLITE | HYBRID | TERRAIN(google only)
    "mapType" : {
      type : String,
      default : "ROADMAP"
    },
    // Sometime, the lat/lng valued by integer
    // this prop defined how to translate them to float
    "autoFloat" : {
      type : Number,
      default : 10000000
    },
    // Map width
    "width" : {
      type : [String, Number],
      default : 400
    },
    // Map height
    "height" : {
      type : [String, Number],
      default : 400
    },
    "zoom" : {
      type : Number,
      default : 8
    },
    // The Coordinate System for input LatLng (center/value...)
    //  - WGS84 : Standard GPS 
    //  - BD09  : for Baidu Map
    //  - GCJ02 : (Mars) QQ/GaoDe/AliYun ...
    "coordinate" : {
      type : String,
      default : "WGS84"
    },
    "maxZoom": {
      type: Number,
      default: 22
    },
    "minZoom": {
      type: Number,
      default: 1
    },
    "infoBar": {
      type: Boolean,
      default: true
    },
    "editable": {
      type: Boolean,
      default: false
    },
    "iconSize": {
      type: Object,
      default: undefined
    },
    // A LatLng Point Object or Polygon Array in map
    // Point - Map center will be it
    // Polygon - Auto count the map center
    "value" : {
      type : Array,
      default : ()=>[]
    },
    "keepStateBy": {
      type: String,
      default: undefined
    },
    "showList" :{
      type: Boolean,
      default: true
    },
    /*
    Open Modal-> ti-transer 
    whatever, you need gen the result like:
    [{
      id, title, lng, lat, label[Optional]
    }]
    */
    "addBy": {
      type: Object,
      default: undefined
    },
    // Refer by goole map api: gestureHandling
    // https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions
    "gestureHandling": {
      type: String,
      default: "auto",
      validator: v=>/^(cooperative|greedy|none|auto)$/.test(v)
    }
  },
  //////////////////////////////////////////
  computed : {
    //-------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-fullscreen": this.myFullscreen
      })
    },
    //-------------------------------------
    TopStyle() {
      if(!this.myFullscreen) {
        return Ti.Css.toStyle({
          width  : this.width,
          height : this.height
        })
      }
    },
    //-------------------------------------
    TheMapSecretKey() {
      let vnm = Ti.S.renderBy(this.secretKey, this)
      return _.get(this.$vars, vnm)
    },
    //-------------------------------------
    TheMapApiUrl() {
      let url = _.get(this.apiUrls, this.by)
      url = Ti.S.renderBy(url, {key:this.TheMapSecretKey})
      return url
    },
    //-------------------------------------
    TheGestureHandling() {
      if(this.myFullscreen){
        return "greedy"
      }
      return this.gestureHandling
    },
    //-------------------------------------
    ValueItems() {
      let list = []
      _.forEach(this.value, (it, index)=>{
          let li = _.cloneDeep(it)
          // Default Label
          if(!li.label) {
            li.label = ""+(index+1)
          }
          // Default ID
          if(!li.id) {
            li.id = `R${index}`
          }
          // Join it
          list.push(li)
      })
      return list
    },
    //-------------------------------------
    hasItems() {
      return !_.isEmpty(this.ValueItems)
    },
    //-------------------------------------
    ListConf() {
      return {
        display: ["<icon:zmdi-pin>", "label:[$${val}]", "title"],
        multi: true
      }
    },
    //-------------------------------------
    ActionButtons() {
      let list = [{
        icon: "zmdi-edit",
        disabled: !this.hasCurrentId,
        handler: ()=>this.editCurrent()
      }, {
        icon: "fas-sort-numeric-down",
        disabled: !this.hasItems,
        handler: ()=>this.renumberItems()
      }, {
        icon: "zmdi-long-arrow-up",
        disabled: !this.hasCheckedIds,
        handler: ()=>this.moveCheckedUp()
      }, {
        icon: "zmdi-long-arrow-down",
        disabled: !this.hasCheckedIds,
        handler: ()=>this.moveCheckedDown()
      }, {
        icon: "zmdi-delete",
        disabled: !this.hasCheckedIds,
        handler: ()=>this.removeChecked()
      }, {
        icon: "zmdi-format-list-bulleted",
        handler: ()=> {
          this.myShowList = !this.isShowList
        }
      }]
      if(this.addBy) {
        return _.concat({
          icon: "zmdi-plus",
          text: "i18n:lbs-place-add",
          handler: ()=>this.openNewItemSelector()
        }, list)
      }
      return list
    },
    //-------------------------------------
    hasCurrentId() {
      return !Ti.Util.isNil(this.myCurrentId)
    },
    //-------------------------------------
    hasCheckedIds() {
      return !_.isEmpty(this.myCheckedIds)
    },
    //-------------------------------------
    isShowList() {
      return Ti.Util.fallback(this.myShowList, this.showList)
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //-------------------------------------
    OnFullscreenChange(fullscreen) {
      console.log("OnFullscreenChange", fullscreen)
      this.myFullscreen = fullscreen
    },
    //-------------------------------------
    OnListSelect({currentId, checkedIds}) {
      this.myCurrentId = currentId
      this.myCheckedIds = checkedIds
    },
    //-------------------------------------
    async OnListOpen({index, item}) {
      let reo = await Ti.App.Open({
        title: "i18n:edit",
        position: "right",
        result: item,
        comType: "TiForm",
        comConf: {
          data: "=result",
          fields: [{
            title: "i18n:title",
            name: "title",
            comType: "ti-input"
          }, {
            title: "i18n:label",
            name: "label",
            comType: "ti-input"
          }]
        }
      })
      // User cancel
      if(_.isEmpty(reo))
        return

      // Update
      let list = _.cloneDeep(this.ValueItems)
      _.assign(list[index], reo)
      this.$notify("change", list)
    },
    //-------------------------------------
    async renumberItems() {
      // Get renumber setting
      let reo = await Ti.App.Open({
        title : "i18n:lbs-ro-rnb-title",
        position: "right",
        result: {
          first : 1,
          type  : "capital"
        },
        model: {prop:"data", event:"change"},
        comType : "TiForm",
        comConf : {
          fields: [{
              title: "i18n:lbs-ro-rnb-k-first",
              name : "first",
              type : "Integer",
              comType: "ti-input-num"
            }, {
              title: "i18n:lbs-ro-rnb-k-type",
              name : "type",
              comType: "ti-switcher",
              comConf: {
                options: [
                  {value:"capital", text:"i18n:lbs-ro-rnb-k-type-capital"},
                  {value:"alpha",   text:"i18n:lbs-ro-rnb-k-type-alpha"},
                  {value:"number",  text:"i18n:lbs-ro-rnb-k-type-number"}]
              }
            }]
        }
      })

      // User Cancel
      if(!reo)
        return

      // Prepare the number list
      let nbList = ({
        "alpha" : "abcdefghijklmnopqrstuvwxyz".split(""),
        "capital" : "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split(""),
      })[reo.type]

      // Assign the label
      let list = _.cloneDeep(this.ValueItems)
      _.forEach(list, (li, index)=>{
        let i = reo.first + index
        if(nbList) {
          let ni = Ti.Num.scrollIndex(i-1, nbList.length)
          li.label = _.nth(nbList, ni)
        }
        // Just use number
        else {
          li.label = ""+i
        }
      })

      // Update
      this.$notify("change", list)
    },
    //-------------------------------------
    async editCurrent() {
      if(!this.myCurrentId) {
        return
      }
      // Find the index
      let index=0, item=null;
      for(let it of this.ValueItems) {
        if(this.myCurrentId == it.id) {
          item = it
          break;
        }
        index++
      }
      // Then open editor
      await this.OnListOpen({index, item})
    },
    //-------------------------------------
    async openNewItemSelector() {
      // Guard
      if(!this.addBy)
        return
      let diaConf = _.merge({
        icon: "zmdi-plus-circle-o",
        title: "add-item",
        width: "80%",
        height: "80%",
        position: "top",
        result: this.ValueItems,
        comType: "TiTransfer",
        comConf: {}
      }, this.addBy)

      let reo = await Ti.App.Open(diaConf)

      // User canceled
      if(Ti.Util.isNil(reo))
        return
      
      // Remove dup
      let list = []
      let memo = {}

      // Remember old
      _.forEach(list, it => memo[it.id] = true)
      
      // Join new
      _.forEach(reo, it => {
        if(!memo[it.id]) {
          memo[it.id] = true
          if(Ti.Util.isNil(it.label)) {
            it.label = (list.length+1)+""
          }
          list.push(it)
        }
      })

      // Notify change
      this.$notify("change", list)
    },
    //-------------------------------------
    moveCheckedUp() {
      let mc = this.genMoveContext()
      if(_.isEmpty(mc.checkeds)) {
        return Ti.Toast.Open("i18n:nil-obj", "warn")
      }
      if(mc.firstIndex > 0) {
        let list = mc.remains;
        let pos = mc.firstIndex - 1
        Ti.Util.insertToArray(list, pos, ...mc.checkeds)

        // Update the auto-generated ID
        if(Ti.Util.isNil(_.first(mc.checkeds).id)) {
          let checkeds = {}
          for(let i=0; i<mc.checkeds.length;i++) {
            checkeds[`R${i+pos}`] = true
          }
          this.myCurrentId = null
          this.myCheckedIds = checkeds
        }

        this.$notify("change", list)
      }
    },
    //-------------------------------------
    moveCheckedDown() {
      let mc = this.genMoveContext()
      if(_.isEmpty(mc.checkeds)) {
        return Ti.Toast.Open("i18n:nil-obj", "warn")
      }

      if(mc.lastIndex < mc.remains.length) {
        let list = mc.remains;
        let pos = mc.lastIndex+1
        Ti.Util.insertToArray(list, pos, ...mc.checkeds)

        // Update the auto-generated ID
        if(Ti.Util.isNil(_.first(mc.checkeds).id)) {
          let checkeds = {}
          for(let i=0; i<mc.checkeds.length;i++) {
            checkeds[`R${i+pos}`] = true
          }
          this.myCurrentId = null
          this.myCheckedIds = checkeds
        }

        this.$notify("change", list)
      }
    },
    //-------------------------------------
    removeChecked() {
      let mc = this.genMoveContext()
      if(_.isEmpty(mc.checkeds)) {
        return Ti.Toast.Open("i18n:del-none", "warn")
      }
      this.myCheckedIds = {}
      this.myCurrentId = null
      this.$notify("change", mc.remains)
    },
    //-------------------------------------
    genMoveContext() {
      let mc = {
        firstIndex: -1,
        lastIndex : -1,
        checkeds: [],
        remains: []
      }
      _.forEach(this.ValueItems, (it, index)=>{
        let isChecked = _.get(this.myCheckedIds, it.id)
        let priIt = this.value[index]
        // Checked
        if(isChecked) {
          mc.checkeds.push(priIt)
          if(mc.firstIndex<0) {
            mc.firstIndex = index
            mc.lastIndex  = index
          }else {
            mc.lastIndex = mc.remains.length
          }
        }
        // Remain
        else {
          mc.remains.push(priIt)
        }
      })

      //console.log(mc)
      return mc
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  mounted: async function() {
    // Load Map API
    let url = this.TheMapApiUrl
    if(url) {
      //console.log("TiLoad", url)
      await Ti.Load(url)
      this.apiLoaded = true
    }
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-obj-id.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/id/wn-obj-id.mjs'] = (function(){
/////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////
  data : ()=>({
    showDetail : "hide"
  }),
  ///////////////////////////////////////////////////
  props : {
    // icon string
    "value" : {
      type : String,
      default : null
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    TopClass() {
      return this.getTopClass({
        'is-none' : !this.value,
        'is-simple' : !this.OID.homeId,
        'is-two-stage' : this.OID.homeId
      }, `is-detail-${this.showDetail}`)
    },
    //-----------------------------------------------
    OID() {
      if(!this.value) {
        return {}
      }
      // One stage ID
      let str = _.trim(this.value)
      let pos = str.indexOf(':');
      if (pos < 0) {
          return {
            id : str,
            myId : str
          }
      }
      // Two stage ID
      return {
        id: str,
        homeId : str.substring(0, pos).trim(),
        myId : str.substring(pos + 1).trim()
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    OnMouseEnter() {
      if(!this.value) {
        return
      }
      this.showDetail = "show"
      this.$nextTick(()=>{
        Ti.Dom.dockTo(this.$refs.detail, this.$refs.box, {
          mode : "V"
        })
        this.showDetail = "ready"
      })
    },
    //-----------------------------------------------
    OnMouseLeave() {
      this.showDetail = "hide"
    },
    //-----------------------------------------------
    OnCopyAll(evt) {
      let $ta = Ti.Dom.find("table", this.$el)
      let ids = _.concat(_.get(this.OID, "homeId"), _.get(this.OID, "myId"))
      this.__copy(ids.join(":"), $ta)
    },
    //-----------------------------------------------
    OnCopyHomeId(evt) {
      let $ta = Ti.Dom.find(".is-home-id td:nth-child(2)", this.$el)
      this.__copy(_.get(this.OID, "homeId"), $ta)
    },
    //-----------------------------------------------
    OnCopyMyId(evt) {
      let $ta = Ti.Dom.find(".is-my-id td:nth-child(2)", this.$el)
      this.__copy(_.get(this.OID, "myId"), $ta)
    },
    //-----------------------------------------------
    __copy(str, $ta) {
      Ti.Be.BlinkIt($ta)
      //console.log(str)
      Ti.Be.writeToClipboard(str)
    }
    //-----------------------------------------------
  }
  ///////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-icon.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/icon/ti-icon.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////////
  data : ()=>({
    myValue : null
  }),
  ///////////////////////////////////////////////////////
  props : {
    // If image, join the base
    "base" : {
      type : String,
      default : null
    },
    "value" : {
      type : [String,Object,Number],
      default : null
    },
    "dict" : {
      type : [String, Ti.Dict],
      default : null
    },
    "defaultValue" : {
      type : [String,Object],
      default : null
    },
    "fontSize" : {
      type : [Number, String],
      default : null
    },
    "width" : {
      type : [Number, String],
      default : null
    },
    "height" : {
      type : [Number, String],
      default : null
    },
    "color" : {
      type : String,
      default : ""
    },
    "opacity" : {
      type : Number,
      default : -1
    },
    "notifyName": {
      type: String,
      default: undefined
    },
    "notifyConf": {
      type: [Object, String, Number, Boolean, Array],
      default: undefined
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass({
        "can-click": this.notifyName ? true : false
      }, `is-${this.Icon.type}`)
    },
    //---------------------------------------------------
    Dict() {
      if(this.dict) {
        // Already Dict
        if(this.dict instanceof Ti.Dict) {
          return this.dict
        }
        // Get back
        let {name} = Ti.DictFactory.explainDictName(this.dict)
        return Ti.DictFactory.CheckDict(name)
      }
    },
    //---------------------------------------------------
    // formed icon data
    Icon() {
      let icn 
      if(_.isPlainObject(this.myValue)){
        // Regular icon object, return it directly
        if(this.myValue.type && this.myValue.value) {
          icn = this.myValue
        }
        // Eval it as meta
        else {
          icn = {
            type  : "font", 
            value : Ti.Icons.get(this.myValue)
          }
        }
      }
      // String
      else {
        icn = {
          type : "font",
          value : this.myValue
        }
        if(_.isString(this.myValue)) {
          icn.type = Ti.Util.getSuffixName(this.myValue) || "font"
        }
        // for image
        if(/^(jpe?g|gif|png)$/i.test(icn.type)){
          icn.type = "image"
        }
      }

      // Join `className / text` to show icon font
      if('font' == icn.type) {
        let val = Ti.Icons.getByName(icn.value, icn.value)
        _.assign(icn, Ti.Icons.parseFontIcon(val))
      }
      // Join base
      else if('image' == icn.type) {
        if(!Ti.Util.isBlank(this.base)) {
          icn.value = Ti.Util.appendPath(this.base, icn.value)
        }
      }

      // join style:outer
      icn.outerStyle = Ti.Css.toStyle({
        width   : this.width,
        height  : this.height,
        color   : this.color,
        opacity : this.opacity >= 0 ? this.opacity : undefined
      })

      // join style:inner
      if('image' == icn.type) {
        icn.innerStyle = {
          "width"  : this.width  ? "100%" : undefined,
          "height" : this.height ? "100%" : undefined
        }
      }
      // font size
      else if('font' == icn.type) {
        icn.innerStyle = {
          "font-size" : this.fontSize 
                          ? Ti.Css.toSize(this.fontSize) 
                          : undefined
        }
      }

      return icn
    },
    //---------------------------------------------------
  },
  methods : {
    //---------------------------------------------------
    OnClickTop() {
      if(this.notifyName) {
        this.$notify(this.notifyName, this.notifyConf)
      }
    },
    //---------------------------------------------------
    async evalMyValue() {
      let val = Ti.Util.fallbackNil(this.value, this.defaultValue)
      // Translate by dict
      if(this.Dict) {
        this.myValue = await this.Dict.getItemIcon(val)
      }
      // Normal value
      else {
        this.myValue = val
      }
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  watch : {
    "value" : {
      handler : "evalMyValue",
      immediate : true
    }
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'list_props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/support/list_props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "data" : {
    type : [Array, String],
    default : ()=>[]
  },
  // If input the value(ID) Array
  // it can translate by this Dict
  "dict" : {
    type : [String, Ti.Dict],
    default : null
  },
  "idBy" : {
    type : [String, Function],
    default : "id"
  },
  "rawDataBy" : {
    type : [Object, String, Function],
    default : _.identity
  },
  "currentId" : {
    type : [String, Number],
    default : null
  },
  "checkedIds" : {
    type : [Array, Object],
    default : ()=>[]
  },
  "changedId" : {
    type : String,
    default : null
  },
  // "extendFunctionSet" : {
  //   type : Object,
  //   default : ()=>({})
  // },
  "vars" : {
    type : Object,
    default : ()=>({})
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "multi" : {
    type : Boolean,
    default : false
  },
  // in selectRow(), auto check current and drop primary checked rows?
  "autoCheckCurrent" : {
    type : Boolean,
    default : true
  },
  // in multi mode, which key to toggle row checker?
  "rowToggleKey" : {
    type : [String, Array],
    default : ()=>["SPACE"]
  },
  "rowCheckable" : {
    type : [Object, Function],
    default : undefined
  },
  "rowSelectable" : {
    type : [Object, Function],
    default : undefined
  },
  "rowOpenable" : {
    type : [Object, Function],
    default : undefined
  },
  "rowCancelable" : {
    type : [Object, Function],
    default : undefined
  },
  "rowHoverable" : {
    type : [Object, Function],
    default : undefined
  },
  "checkable" : {
    type : Boolean,
    default : false
  },
  "selectable" : {
    type : Boolean,
    default : true
  },
  "openable" : {
    type : Boolean,
    default : true
  },
  "cancelable" : {
    type : Boolean,
    default : true
  },
  "hoverable" : {
    type : Boolean,
    default : false
  },
  "puppetMode" : {
    type : Boolean,
    default : false
  },
  "scrollIndex" : {
    type : Boolean,
    default : false
  },
  "onBeforeChangeSelect": {
    type : Function,
    default: undefined
  },
  "onSelect": {
    type : Function,
    default: undefined
  },
  "onOpen": {
    type : Function,
    default: undefined
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "blankAs" : {
    type : Object,
    default : ()=>({
      icon : "far-list-alt",
      text : "empty-data"
    })
  },
  "blankClass": {
    type: String,
    default: "as-big-mask",
    validator: v=>/^as-(big|hug|big-mask|mid-tip)$/.test(v)
  },
  "rowNumberBase" : {
    type : Number,
    default : undefined
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width" : {
    type : [Number, String],
    default : undefined
  },
  "height" : {
    type : [Number, String],
    default : undefined
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'widget-sharebar.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/widget/sharebar/widget-sharebar.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    "title": {
      type: String,
      default: null
    },
    "items" : {
      type : Array,
      default : ()=>[]
    }
  },
  /////////////////////////////////////////
  computed : {
    //------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------
    TheItems() {
      return this.evalItems(this.items)
    },
    //------------------------------------
    ShareTargets() {
      return {
        //..............................
        "facebook": {
          iconClass: "fab fa-facebook-f",
          link : "https://www.facebook.com/sharer.php",
          params : {
            u     : "=url",
            title : "=title"
          }
        },
        //..............................
        "twitter": {
          iconClass: "fab fa-twitter",
          link : "https://twitter.com/share",
          params : {
            url  : "=url",
            text : "=title"
          }
        },
        //..............................
        "mix": {
          iconClass: "fab fa-mix",
          link : "https://mix.com/mixit",
          params : {
            url  : "=url"
          }
        },
        //..............................
        "linkedin": {
          iconClass: "fab fa-linkedin-in",
          link : "https://www.linkedin.com/cws/share",
          params : {
            url  : "=url"
          }
        }
        //..............................
      }
    }
    //------------------------------------
  },
  /////////////////////////////////////////
  methods : {
    //------------------------------------
    OnClickItem({link, params}) {
      if(!link)
        return

      let url = window.location.href
      let title = window.document.title
      params = Ti.Util.explainObj({url, title}, params)
      console.log("haha", params)
      Ti.Be.Open(link, {params})
    },
    //------------------------------------
    evalItems(items) {
      let list = []
      _.forEach(items, (it, index)=>{
        //................................
        let li = _.get(this.ShareTargets, it)
        //................................
        if(li)
          list.push(li)
        //................................
      })
      return list
    }
    //------------------------------------
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'site-main.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/lib/www/com/site-main.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  provide : function() {
    return Ti.Util.explainObj(this.$store.state, this.provide)
  },
  /////////////////////////////////////////
  computed : {
    ...Vuex.mapState({
        "siteId"    : state=>state.siteId,
        "logo"      : state=>state.logo,
        "lang"      : state=>state.lang,
        "langName"  : state=>state.langName,
        "utils"     : state=>state.utils,
        "page"      : state=>state.page,
        "shop"      : state=>state.shop,
        "auth"      : state=>state.auth,
        "domain"    : state=>state.domain,
        "rs"        : state=>state.rs,
        "nav"       : state=>state.nav,
        "data"      : state=>state.data,
        "base"      : state=>state.base,
        "apiBase"   : state=>state.apiBase,
        "cdnTmpl"   : state=>state.cdnTmpl,
        "captcha"   : state=>state.captcha,
        "schema"    : state=>state.schema,
        "provide"   : state=>state.provide,
        "blocks"    : state=>state.blocks,
        "loading"   : state=>state.loading,
        "pageReady" : state=>state.pageReady
      }),
    //-------------------------------------
    // Mapp The Getters
    ...Vuex.mapGetters([
      "actions",
      "getUrl",
      "getApiUrl"
    ]),
    ...Vuex.mapState("page", [
      "pageUri"
    ]),
    //-------------------------------------
    PayReturnUrl: function() {
      let st = this.$store.state
      if(st.payReturnUrl) {
        return Ti.Util.explainObj(st, st.payReturnUrl)
      }
    },
    //-------------------------------------
    SiteLogo() {
      if(this.logo && /\.(png|jpe?g)$/.test(this.logo))
        return this.getUrl(this.logo)
      return this.logo || "zmdi-globe"
    },
    //-------------------------------------
    // Page Navigation
    // SiteNav() {
    //   let nav = {}
    //   _.forEach(this.$store.state.nav, (v, k)=>{
    //     nav[k] = Ti.WWW.explainNavigation(v, this.base)
    //   })
    //   return nav
    // },
    //-------------------------------------
    // The template of captcha to prevent robot
    SiteCaptcha() {
      let path = Ti.S.renderBy(this.captcha, {site:this.siteId})
      if(path.startsWith("/"))
        return path
      return this.getApiUrl(path)
    },
    //-------------------------------------
    SiteLoginMode() {
      // Already login, then bind the phone 
      if(this.auth.me) {
        return "bind_phone"
      }
      return "login_by_passwd"
    },
    //-------------------------------------
    PageFnSet() {
      Ti.AddGlobalFuncs(this.utils)
      return Ti.GlobalFuncs()
    },
    //-------------------------------------
    // Format current pageGUI
    PageGUI() {
      let page = this.page
      //.....................................
      // Without current page
      if(!page || !page.layout) {
        return {}
      }
      //.....................................
      // Get layout be pageMode
      let layout = page.layout
      //.....................................
      // Apply "@BLOCK(xxx)" in panels and layout blocks
      if(layout) {
        // Define the methods
        const ExplainBlock = (anyValue)=>{
          // String : Check the "@BLOCK(xxx)" 
          if(_.isString(anyValue)) {
            let m = /^@BLOCK\(([^ ]+)\)$/.exec(anyValue)
            if(m) {
              let blockName = m[1]
              return _.get(this.blocks, blockName)
            }
          }
          // Array 
          else if(_.isArray(anyValue)) {
            return _.map(anyValue, ExplainBlock)  
          }
          // Object
          else if(_.isPlainObject(anyValue)) {
            return _.mapValues(anyValue, ExplainBlock)
          }
          // Others return directly
          return anyValue
        }
        // do without layout
        layout = ExplainBlock(layout)
      }
      //.....................................
      // Gen the GUI object
      let gui = {
        className: page.className,
        defaultFlex: "nil",
        defaultOverflow: "none",
        layout, 
        schema : {},
        canLoading : true
      }
     
      //.....................................
      // assign schema
      _.assign(gui.schema, this.schema, page.schema)
      
      //.....................................
      // explain it
      //console.log("site-main: explain it!", gui);
      let theGUI = Ti.Util.explainObj(this, gui, {
        fnSet: this.PageFnSet
      })
      //console.log("pageGUI", formedGUI)
      return theGUI
    }
    //-------------------------------------
  },
  /////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnMouseRightClick($evn) {
      // Forbid context menu
      if(false === this.page.contextMenu) {
        $evn.preventDefault();
      }
      // Forbid context menu and show alert
      else if(_.isString(this.page.contextMenu)) {
        $evn.preventDefault();
        Ti.Toast.Open(this.page.contextMenu, "warn");
      }
    },
    //--------------------------------------
    async showBlock(name) {
      Ti.App(this).dispatch("page/showBlock", name)
    },
    //--------------------------------------
    async hideBlock(name) {
      Ti.App(this).dispatch("page/hideBlock", name)
    },
    //-------------------------------------
    // Handle by EventBubble
    __on_events(name, ...args) {
      //console.log("site-main.__on_events", name, ...args)
      // ShowBlock
      if("block:show" == name) {
        return blockName => this.showBlock(blockName)
      }
      // HideBlock
      else if("block:hide" == name) {
        return blockName => this.hideBlock(blockName)
      }
      // Dispatch actions
      else {
        return (...args)=>{
          this.invokeAction(name, args)
        }        
      }
    },
    //-------------------------------------
    async invokeAction(name, args=[]) {
      await Ti.App(this).dispatch("invokeAction", {
        name, args
      })
    },
    //-------------------------------------
    pushBrowserHistory(pageTitle) {
      let his = window.history
      //...................................
      if(!his) {
        return
      }
      //...................................
      // Get current location
      let loc = window.location
      let loPath = [loc.pathname, loc.search, loc.hash].join("")
      //...................................
      //let pgLink = this.getUrl(this.pageLink)
      let pgLink = this.pageUri
      //...................................
      if(loPath != pgLink || !his.state) {
        let pg = _.cloneDeep(_.pick(this.page, "path", "params", "anchor"))
        // console.log("pg", JSON.stringify(pg))
        // console.log("pageTitle", pageTitle)
        // console.log("pgLink", pgLink)
        his.pushState(pg, pageTitle, pgLink)
      }
      //...................................
    }
    //-------------------------------------
  },
  /////////////////////////////////////////
  watch : {
    // Page changd, update document title
    "page.finger" : function() {
      //console.log("-> ", this.page.title)
      let pageTitle = Ti.Util.explainObj(this, this.page.title)
      document.title = pageTitle
      this.pushBrowserHistory(pageTitle)

      // TODO : Maybe here to embed the BaiDu Tongji Code
    }
  },
  /////////////////////////////////////////
  mounted : function(){
    // Watch the browser "Forward/Backward"
    // The state(page) pushed by $store.dispath("navTo")
    window.onpopstate = (evt)=>{
      let page = evt.state
      console.log("popstate", page)
      if(page && page.path) {
        console.log("window.onpopstate", page)
        let app = Ti.App(this)
        app.dispatch("navTo", {
          type   : "page",
          value  : page.path,
          params : page.params,
          anchor : page.anchor
        })
      }
    }
  }
  /////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'md-quill.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/markdown/richeditor2/md-quill.mjs'] = (function(){
const {BrBlot} = window.TI_PACK_EXPORTS['ti/com/ti/text/markdown/richeditor2/blot/br.blot.mjs'];

/////////////////////////////////////////////////////
async function ResetQuillConfig(Quill) {
  //.................................................
  // Reset once
  if(Quill.__has_been_reset) 
    return
  //.................................................
  // hljs.configure({   // optionally configure hljs
  //   languages: ['javascript', 'ruby', 'python']
  // });
  //.................................................
  // Reset Indent    
  const Indent = Quill.import('formats/indent')
  Indent.keyName = "li-indent"
  Indent.whitelist = [1,2,3,4,5,6]
  //.................................................
  // New format
  // ...
  //let {BlotBr} = await import("./br-blot.mjs")
  Quill.register(BrBlot, true);

  //.................................................
  // Mark it
  Quill.__has_been_reset = true
}
/////////////////////////////////////////////////////
const _M = {
  ///////////////////////////////////////////////////
  data : ()=>({
    myDelta : []
  }),
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    // Quill
    //-----------------------------------------------
    async quillChanged(delta) {
      //console.log("changed", JSON.stringify(delta, null, '  '))
      //console.log("quillChanged")
      this.myDelta = delta
      // Guard
      if(this.isContentNil) {
        return
      }

      // Delat => CheapDocument
      let MdDoc = Cheap.parseDelta(delta)
      MdDoc.setDefaultMeta(this.myMeta)
      this.myMeta = MdDoc.getMeta()
      //console.log(MdDoc.toString())
      
      // CheapDocument => markdown
      let markdown = await MdDoc.toMarkdown({
        mediaSrc: this.TheMarkdownMediaSrc
      })
      //console.log(markdown)
      if(markdown != this.value) {
        this.syncForbid = 1
        this.$notify("change", markdown)
      }
    },
    //-----------------------------------------------
    quillSelectionChanged(range) {
      // Update selection info
      if(range) {
        // Indicate row:col
        let ii = [range.index]
        if(range.length > 0) {
          ii.push(range.length)
        }
        this.$notify("indicate", ii.join(":"))

        // Update format
        this.quillUpdateFormat(range)
      }
    },
    //-----------------------------------------------
    quillUpdateFormat(range) {
      let fmt = this.$editor.getFormat(range)
      //console.log(fmt)
      //fmt = _.cloneDeep(fmt)
      if(fmt.header) {
        fmt[`h${fmt.header}`] = true
      } else {
        fmt["h0"] = true
      }
      if(!_.isEqual(this.myToolbarStatus, fmt)) {
        this.myToolbarStatus = fmt
      }
    },
    //-----------------------------------------------
    installQuillEditor() {
      // Guard
      if(this.$editor) {
        return
      }
      //.............................................
      // Reset the Quill Default
      ResetQuillConfig(Quill)
      //Quill.register(MyIndent)
      //.............................................
      this.$editor = new Quill(this.$refs.editing, {
        modules: {
          syntax: false
        },
        bounds : this.$refs.stage,
        placeholder : Ti.I18n.text(this.placeholder)
      });
      //.............................................
      console.log("abcccc")
      this.$editor.keyboard.addBinding({
        key: "Enter",
        ctrlKey: true,
        handler:  (range, context)=>{
          console.log("hahah")
            this.$editor.insertEmbed(range.index, 'breakLine', true, 'user');
            this.$editor.setSelection(range.index + 1, Quill.sources.SILENT);
        }
      })
      //.............................................
      this.debounceQuillChanged = _.debounce((newDelta, oldDelta)=>{
        let delta = oldDelta.compose(newDelta)
        this.quillChanged(delta)
      }, 1000)
      //.............................................
      this.$editor.on("text-change", (newDelta, oldDelta, source)=>{
        //console.log("text-change",this.isContentNil, _.cloneDeep({newDelta, oldDelta}))
        if(!this.isContentNil) {
          this.debounceQuillChanged(newDelta, oldDelta)
        }
      })
      //.............................................
      this.$editor.on("selection-change", (range, oldRange, source)=>{
        this.quillSelectionChanged(range)
      })
    }
    //-----------------------------------------------
  }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-gui-cols.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/gui/cols/ti-gui-cols.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  /////////////////////////////////////////
  props : {
    "blocks" : {
      type : Array,
      default : ()=>[]
    },
    "adjustable" : {
      type : Boolean,
      default : true
    },
    "border" : {
      type : Boolean,
      default : false
    },
    "schema" : {
      type : Object,
      default : ()=>({})
    },
    "actionStatus" : {
      type : Object,
      default : ()=>({})
    },
    "shown" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    topClass() {
      return Ti.Css.mergeClassName({
        "is-adjustable" : this.adjustable,
        "show-border"   : this.border
      }, this.className)
    },
    //--------------------------------------
    hasBlocks() {
      return !_.isEmpty(this.blocks)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wizard-step.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/wizard/com/wizard-step/wizard-step.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////
  props : {
    "index" : {
      type : Number,
      default : -1
    },
    "stepKey" : {
      type : String,
      default : undefined
    },
    "dataKey" : {
      type : String,
      default : undefined
    },
    "title" : {
      type : String,
      default : undefined
    },
    "serializer": {
      type: Function,
      default: undefined
    },
    "comType" : {
      type : String,
      default : "ti-label"
    },
    "comConf" : {
      type : Object,
      default : ()=>({})
    }
  },
  ///////////////////////////////////////////////////
  methods : {
    //----------------------------------------------
    OnChange(payload) {
      if(_.isFunction(this.serializer)) {
        payload = this.serializer(payload)
      }
      if(this.dataKey) {
        payload = _.set({}, this.dataKey, payload)
      }
      //console.log(payload)
      this.$emit("data:change", payload)
    }
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "title": {
      handler: function(){
        this.$notify("change:title", this.title)
      },
      immediate: true
    }
  }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'site-config.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/hmaker/website/mod/site-config/site-config.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////
  mutations : {
    //----------------------------------------
    setMeta(state, meta) {
      state.meta = meta
    },
    //----------------------------------------
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    }
    //----------------------------------------
  }
  ////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-text-json-tree.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/json/tree/ti-text-json-tree.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data : ()=>({
    myTreeRoot : [],
    myTreeCurrentPathId : null,
    myTreeOpenedStatus : {}
  }),
  //////////////////////////////////////////
  props : {
    "value" : null,
    "mainWidth" : {
      type : [String, Number],
      default : .372
    },
    "border" : {
      type : String,
      default : "cell",
      validator : v => /^(row|column|cell|none)$/.test(v)
    },
    "keepOpenBy" : {
      type : String,
      default : null
    },
    "autoOpen" : {
      type : Boolean,
      default : false
    },
    "showRoot" : {
      type : Boolean,
      default : true
    },
    "editing" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TreeDisplay() {
      return {
        key : "name",
        comType : "ti-label",
        comConf : (it)=>({
          className : _.kebabCase(`is-${it.nameType}`),
          editable  : 'Key' == it.nameType,
          format : ({
              "Index" : v => `[${v}]`,
              "Label" : v => Ti.I18n.text(`i18n:json-${v}`)
            })[it.nameType]
        })
      }
    },
    //--------------------------------------
    TreeFields() {
      return [{
        title : "i18n:value",
        width : .618,
        display : {
          key : "value",
          ignoreNil : false,
          ignoreBlank : false,
          comType : "ti-text-json-tree-item",
          comConf : {
            valueType   : "${valueType}",
            valuePath   : "${=rowId}",
            showActions : "${=isCurrent}"
          }
        }
      }]
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    evalTreeData() {
      let list = []
      // Join the top data
      this.joinTreeTableRow(list, this.value)

      // Update Tree Data
      this.myTreeRoot = _.first(list)
    },
    //--------------------------------------
    getJsValueType(val) {
      if(Ti.Util.isNil(val))
        return "Nil"

      if(_.isArray(val))
        return "Array"
      
      if(_.isNumber(val)) {
        return "Number"
      }

      return _.upperFirst(typeof val)
    },
    //--------------------------------------
    joinTreeTableRow(list=[], item, key) {
      let nameType;
      let valueType = this.getJsValueType(item)
      // Default itemKey is self-type
      // For top leval
      if(_.isUndefined(key)) {
          key = valueType
          nameType = "Label"
      }
      // Index key
      else if(_.isNumber(key)) {
        nameType = "Index"
      }
      // String key
      else {
        nameType = "Key"
      }
      //................................
      // undefined
      if(_.isUndefined(item)) {
        list.push({
          nameType, valueType,
          name  : key,
          value : undefined
        })
      }
      //................................
      // null
      else if(_.isNull(item)) {
        list.push({
          nameType, valueType,
          name  : key,
          value : null
        })
      }
      //................................
      // Array
      if(_.isArray(item)) {
        // Create self
        let node = {
          nameType, valueType: "Array",
          name  : key,
          value : item,
          children : []
        }
        // Join Children
        for(let i=0; i<item.length; i++) {
          let child = item[i]
          this.joinTreeTableRow(node.children, child, i)
        }
        // Join self
        list.push(node)
      }
      //................................
      // Object
      else if(_.isPlainObject(item)) {
        // Create self
        let node = {
          nameType, valueType: "Object",
          name  : key,
          value : item,
          children : []
        }
        // Join Children
        _.forEach(item, (v, k)=>{
          this.joinTreeTableRow(node.children, v, k)
        })
        // Join self
        list.push(node)
      }
      //................................
      // Boolean
      else if(_.isBoolean(item)) {
        list.push({
          nameType, valueType,
          name  : key,
          value : item ? true : false
        })
      }
      //................................
      // Number 
      else if(_.isNumber(item)) {
        list.push({
          nameType, valueType,
          name  : key,
          value : item * 1
        })
      }
      //................................
      // String
      else if(_.isString(item)) {
        list.push({
          nameType, valueType,
          name  : key,
          value : item + ""
        })
      }
    },
    //--------------------------------------
    async doAdd(root={}, path=[]) {
      // Looking for the target from data
      let hie = Ti.Trees.getByPath(this.myTreeRoot, path)
      let target = _.isEmpty(path) ? root : _.get(root, path)
      let isOpened = this.myTreeOpenedStatus[path.join("/")]
      //console.log({root, path, target, hie, isOpened})
      //.....................................
      // Guard: Fail to find the target
      if(!hie) {
        return
      }
      //.....................................
      // If Opened Array
      if(isOpened && _.isArray(target)) {
        // just append the nil at tail
        target.push(null)
      }
      //.....................................
      // If Opened Object
      else if(isOpened && _.isPlainObject(target)) {
        // ask the key
        let newKey = await Ti.Prompt("i18n:json-new-key")
        if(Ti.Util.isNil(newKey)) {
          return
        }
        // and insert nil at the tail
        target[newKey] = null
      }
      //.....................................
      // Other, it must be simple value
      else if(path.length >= 0){
        //...................................
        // get the parent node
        let p_ph = path.slice(0, path.length-1);
        let parent = _.isEmpty(p_ph) ? root : _.get(root, p_ph);
        let keyOrIndex = _.last(path)
        //...................................
        // Prepare the new data
        let stub;
        //...................................
        // If array, insert nil after current
        if(_.isArray(parent)) {
          stub = parent
          let pos = Ti.Util.fallback(keyOrIndex, -1) + 1
          Ti.Util.insertToArray(parent, pos, null)
        }
        //...................................
        // If Object
        else if(_.isPlainObject(parent)) {
          // ask the key
          let newKey = await Ti.Prompt("i18n:json-new-key")
          if(Ti.Util.isNil(newKey)) {
            return
          }
          // and insert nil after current path
          stub = Ti.Util.appendToObject(parent, keyOrIndex, {
            [newKey] : null
          })
        }
        //...................................
        // If root, return the stub 
        if(p_ph.length == 0) {
          return stub
        }
        // Set stub
        _.set(root, p_ph, stub)
      }
      //.....................................
      return root
    },
    //--------------------------------------
    doRemove(root={}, path=[]) {
      // Forbid to remove the top
      if(_.isEmpty(path)) {
        return
      }
      //...................................
      // get the candidate for next highlight
      let hie = Ti.Trees.getByPath(this.myTreeRoot, path)
      let can = Ti.Trees.nextCandidate(hie)
      //...................................
      // get the parent node
      let p_ph = path.slice(0, path.length-1);
      let parent = _.isEmpty(p_ph) ? root : _.get(root, p_ph);
      let keyOrIndex = _.last(path)
      //...................................
      // Prepare the new data
      let stub;
      //...................................
      // If array, insert nil after current
      if(_.isArray(parent)) {
        stub = []
        _.forEach(parent, (val, index)=>{
          if(index != keyOrIndex) {
            stub.push(val)
          }
        })
      }
      //...................................
      // If Object
      else if(_.isPlainObject(parent)) {
        stub = {}
        // and insert nil after current path
        _.forEach(parent, (val, key)=>{
          if(key != keyOrIndex) {
            stub[key] = val
          }
        })
      }
      //.....................................
      // Highlight the next
      if(can && can.node) {
        let nextPathId = _.concat(can.path, can.node.name).join("/")
        this.$nextTick(()=>{
          this.myTreeCurrentPathId = nextPathId
        })
      }
      //...................................
      // If root, return the stub 
      if(p_ph.length == 0) {
        return stub
      }
      // Set stub
      _.set(root, p_ph, stub)
      //.....................................
      return root
    },
    //--------------------------------------
    doChangeValueType(root={}, path=[], type) {
      // Get the source
      let isRoot = _.isEmpty(path);
      let src = isRoot ? root : _.get(root, path)
      //.....................................
      // Prepare converter
      let convert = ({
        //...................................
        "Boolean" : (src)=>{
          return src ? true : false
        },
        //...................................
        "Number" : (src)=>{
          let nb = src * 1
          return isNaN(nb) ? -1 : nb
        },
        //...................................
        "Integer" : (src)=>{
          let nb = parseInt(src)
          return isNaN(nb) ? -1 : nb
        },
        //...................................
        "Float" : (src)=>{
          let nb = src * 1
          return isNaN(nb) ? -1 : nb
        },
        //...................................
        "String" : (src)=>{
          // Array/Object
          if(_.isArray(src) || _.isObject(src)) {
            return JSON.stringify(src)
          }
          // Other value
          return src + ""
        },
        //...................................
        "Array" : (src)=>{
          // Array
          if(_.isArray(src)) {
            return
          }
          // Nil
          else if(Ti.Util.isNil(src)) {
            return []
          }
          // Wrap to array
          else {
            return [src]
          }
        },
        //...................................
        "Object" : (src)=>{
          // Array
          if(_.isArray(src)) {
            // Try array as pairs
            let pairs = _.fromPairs(src)
            let stub = {}
            _.forEach(pairs, (val, key)=>{
              if(!Ti.Util.isNil(key) && !_.isUndefined(val)) {
                stub[key] = val
              }
            })
            // Maybe merget it 
            if(_.isEmpty(stub) && !_.isEmpty(src)) {
              Ti.Util.merge(stub, src)
            }
            // Whatever return the object
            return stub
          }
          // Object
          else if(_.isPlainObject(src)) {
            return
          }
          // String try to JSON
          else if(_.isString(src)) {
            return Ti.Types.safeParseJson(src, {
              "value" : src
            })
          }
          // Other value, just wrap to Object
          return {"value": src}
        },
        //...................................
        "Nil" : (src)=>{
          return null
        }
        //...................................
      })[type]
      //.....................................
      // Do convert
      if(_.isFunction(convert)) {
        let stub = convert(src)
        // Canceled
        if(_.isUndefined(stub)) {
          return
        }
        // Root object, return directly
        if(isRoot) {
          return stub
        }
        // Update to main data
        _.set(root, path, stub)
        return root
      }
      //.....................................
      // Fail to find the converter, return undeinfed to cancel
    },
    //--------------------------------------
    async OnNodeItemChange({name, value, data, node, nodeId}={}) {
      //console.log("OnNodeItemChange", {name,value, data, node, nodeId})
      //....................................
      // Guard it
      if(!node.id) {
        return;
      }
      //....................................
      // Prepare the new Data
      let newData = _.cloneDeep(this.value)
      //....................................
      // Get the target JSON path
      let path = node.path
      //....................................
      // Mutate JSON structure
      if(value && value.jsonMutate) {
        let fn = ({
          Add             : this.doAdd,
          Remove          : this.doRemove,
          ChangeValueType : this.doChangeValueType
        })[value.jsonMutate]
        // Invoke it
        newData = await Ti.DoInvoke(fn, _.concat([newData, path], value.args), this)

        // Canceled the mutation
        if(_.isUndefined(newData)) {
          return
        }
      }
      //....................................
      // Modify the Array/Object
      else {
        // Set the Key
        if("name" == name) {
          newData = Ti.Util.setKey(newData, path, value)
        }
        // Set the Value
        else if("value" == name) {
          // Eval the value smartly
          let fn = ({
            "Integer" : (v)=> {
              let v2 = parseInt(v)
              if(isNaN(v2)) {
                return v
              }
              return v2
            },
            "Float" : (v)=> {
              let v2 = v * 1
              if(isNaN(v2)) {
                return v
              }
              return v2
            },
            "Number" : (v)=> {
              let v2 = v * 1
              if(isNaN(v2)) {
                return v
              }
              return v2
            },
            "Nil" : (v)=> {
              return Ti.S.toJsValue(v, {
                autoDate : false
              })
            }
          })[data.valueType]
          let v2 = _.isFunction(fn) ? fn(value) : value
          
          // Set it to data
          _.set(newData, path, v2)
        }
      }
      //....................................
      // Emit the change
      this.$notify("change", newData)
    },
    //--------------------------------------
    OnOpenedStatusChanged(opened) {
      this.myTreeOpenedStatus = opened
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "value" : function(){
      this.evalTreeData()
    }
  },
  //////////////////////////////////////////
  mounted : function() {
    this.evalTreeData()
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-pay-checkout-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/pay/checkout/web-pay-checkout-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  "tipIcon": {
    type: String,
    default: "fas-clipboard-check"
  },
  "tipText": {
    type: String,
    default: "i18n:pay-checkout-tip"
  },
  /**
   * Items Array should like:
   * {
   *   id: "xxx",      // Item ID
   *   title: "xxx",   // Item display name
   *   price: 34,      // Item price
   *   amount: 2,      // Buy number
   *   thumbSrc        // [optional] Item preview src
   *   href            // [optional] Item link
   * }
   */
  "items" : {
    type : Array,
    default : ()=>[]
  },
  "currency": {
    type: String,
    default: "RMB"
  },
  "orderType": {
    type: String,
    default: "A"
  },
  "addresses": {
    type: Array,
    default: ()=>[]
  },
  // The country map
  "countries" : {
    type: Object,
    default: undefined
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-shelf-scroller.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/shelf/scroller/web-shelf-scroller.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data: ()=>({
    myScrollLeft  : 0,
    myMaxScroll   : 0,
    myScrollWidth : 0
  }),
  //////////////////////////////////////////
  props : {
    "data" : {
      type : Array,
      default : ()=>[]
    },
    // Item count per-row
    "cols" : {
      type : Number,
      default : 4
    },
    "itemWidth" : {
      type : [String, Number],
      default: undefined
    },
    // Item comType
    "comType": {
      type: String,
      default: "ti-label"
    },
    "comConf": {
      type: [Object, String],
      default: ()=>({
        value: "=.."
      })
    },
    "iconLeft": {
      type: String,
      default: "zmdi-chevron-left"
    },
    "iconRight": {
      type: String,
      default: "zmdi-chevron-right"
    },
    "enterItem" : {
      type: [String, Function],
      default: undefined
    },
    "leaveItem" : {
      type: [String, Function],
      default: undefined
    },
    "keepScrolling" : {
      type : Boolean,
      default : false
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    InnerStyle() {
      return {
        "left": Ti.Css.toSize(this.myScrollLeft)
      }
    },
    //--------------------------------------
    ItemStyle() {
      if(!Ti.Util.isNil(this.itemWidth)) {
        return Ti.Css.toSizeRem100({
          "width" : this.itemWidth
        })
      }
      if(this.cols > 0) {
        return {
          "width" : Ti.Types.toPercent(1/this.cols)
        }
      }
    },
    //--------------------------------------
    isLeftEnabled() {return this.myScrollLeft < 0;},
    isRightEnabled() {
      return (this.myScrollLeft + this.myMaxScroll) > this.myScrollWidth
    },
    //--------------------------------------
    BtnLeftClass() {
      return {
        "is-enabled"  : this.isLeftEnabled,
        "is-disabled" : !this.isLeftEnabled
      }
    },
    //--------------------------------------
    BtnRightClass() {
      return {
        "is-enabled"  : this.isRightEnabled,
        "is-disabled" : !this.isRightEnabled
      }
    },
    //--------------------------------------
    ItemList() {
      if(!_.isArray(this.data))
        return []
      
      let list = []      
      for(let i=0; i < this.data.length; i++) {
        let it = this.data[i]
        // let comConf = _.assign({}, this.comConf, {
        //   value: it
        // })
        let comConf = Ti.Util.explainObj(it, this.comConf)
        list.push({
          key: `It-${i}`,
          className: it.className,
          rawData : it,
          comType : this.comType,
          comConf
        })
      }
      
      // Get the result
      return list
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnScrollLeft() {
      // Guard
      if(!this.isLeftEnabled) {
        return
      }
      // Do Scroll
      let step = Math.abs(this.myScrollLeft)
      step = Math.min(this.myScrollWidth, step)
      this.myScrollLeft += step
    },
    //--------------------------------------
    OnScrollRight() {
      // Guard
      if(!this.isRightEnabled) {
        return
      }
      // Do Scroll
      let remain = this.myMaxScroll + this.myScrollLeft - this.myScrollWidth;
      let step = Math.min(this.myScrollWidth, remain)
      this.myScrollLeft -= step
    },
    //--------------------------------------
    OnEnterTile(it) {
      if(_.isFunction(this.enterItem)) {
        this.enterItem(it)
      }
      else if(_.isString(this.enterItem)) {
        this.$notify(this.enterItem, it)
      }
    },
    //--------------------------------------
    OnLeaveTile(it) {
      if(_.isFunction(this.leaveItem)) {
        this.leaveItem(it)
      }
      else if(_.isString(this.leaveItem)) {
        this.$notify(this.leaveItem, it)
      }
    },
    //--------------------------------------
    evalScrolling() {
      this.myMaxScroll = this.$refs.inner.scrollWidth;
      this.myScrollWidth = this.$refs.inner.getBoundingClientRect().width;
      this.myScrollLeft = 0;
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "data": {
      handler: function(newData, oldData){
        let lenNew = _.size(newData)
        let lenOld = _.size(oldData)
        if(!this.keepScrolling || !this.myScrollWidth || lenNew != lenOld) {
          this.$nextTick(()=>{
            this.evalScrolling()
          })
        }
      },
      immediate: true
    }
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'nav-links.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/nav/links/__bak/nav-links.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data: ()=>({
    mySubIndex: -1,
    mySubItems: null
  }),
  /////////////////////////////////////////
  props : {
    "align" : {
      type : String,
      default : "left",
      validator: v => /^(left|center|right)$/.test(v)
    },
    "spacing" : {
      type : String,
      validator: v => /^(tiny|comfy|wide)$/.test(v)
    },
    "border" : {
      type : String,
      default : "solid",
      validator: v => /^(none|solid|dashed|dotted)$/.test(v)
    }
  },
  /////////////////////////////////////////
  computed : {
    //------------------------------------
    TopClass() {
      return this.getTopClass(
        `is-spacing-${this.spacing}`,
        `is-align-${this.align}`,
        ()=> {
          if(this.border)
            return `is-border-${this.border}`
        }
      )
    }
    //------------------------------------
  },
  /////////////////////////////////////////
  methods : {
    //------------------------------------
    OnItemMouseEnter({index, items}) {
      // Guard
      if(_.isEmpty(items)) {
        this.mySubIndex = -1
        this.mySubItems = null
        return
      }
      // Eval sub items
      this.mySubItems = this.evalItems(items)
      this.mySubIndex = index

      // Dock it
      this.$nextTick(()=>this.dockSub())
    },
    //------------------------------------
    OnItemMouseLeave({index}) {
      if(this.mySubIndex == index) {
        this.mySubIndex = -1
        this.mySubItems = null
      }
    },
    //------------------------------------
    dockSub(){
      let $sub = Ti.Dom.find(".sub-items", this.$el)
      // Guard
      if(!$sub) {
        return
      }
      // Ready to dock
      let $an = $sub.parentNode
      let rAn = Ti.Rects.createBy($an)
      let rSub = Ti.Rects.createBy($sub)
      let css = Ti.Css.toStyle({
        top  : rAn.height,
        left : (rAn.width - rSub.width)/2
      })
      Ti.Dom.setStyle($sub, css)
    }
    //------------------------------------
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-obj-thumb.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/obj/thumb/ti-obj-thumb.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////
  props : {
    "index" : {
      type : Number,
      default : -1
    },
    "id" : {
      type : String,
      default : undefined
    },
    // The text to present the object
    "title" : {
      type : String,
      default : undefined
    },
    // The URL of thumb
    "preview" : {
      type : [String, Object],
      default : "broken_image"
    },
    "href" : {
      type : String,
      default : undefined
    },
    "status" : {
      type : [String, Object],
      default : undefined
    },
    "progress" : {
      type : Number,
      default : -1
    },
    "visibility" : {
      type : String,
      default : "show"  // `show|weak|hide`
    },
    // true - alwasy show the footer part
    "showFooter" : {
      type : Boolean,
      default : true
    },
    "badges" : {
      type : Object,
      default: ()=>({
        "NW" : null,
        "NE" : null,
        "SW" : null,
        "SE" : null
      })
    },
    "removeIcon" : {
      type : [String, Object],
      default : undefined
    },
    "onTitle" : {
      type : [String, Function, Boolean],
      default : undefined
    }
  },
  ////////////////////////////////////////////////
  watch : {
    "preview" : function() {
      this.renderLocalFile()
    }
  },
  ////////////////////////////////////////////////
  computed : {
    //--------------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-hide" : ('hide' == this.visibility),
        "is-weak" : ('weak' == this.visibility)
      }, ()=>this.status ? `is-status-${this.status}` : null)
    },
    //--------------------------------------------
    PreviewType() {
      return _.get(this.preview, "type") || "auto"
    },
    //--------------------------------------------
    isLocalFile() {
      return "localFile" == this.PreviewType
    },
    //--------------------------------------------
    isLocalImage() {
      return this.isLocalFile
        && /^image\//.test(this.LocalFile.type)
    },
    //--------------------------------------------
    LocalFile() {
      if(this.isLocalFile) {
        return this.preview.value
      }
    },
    //--------------------------------------------
    LocalFileIcon() {
      if(this.isLocalFile) {
        let file = this.LocalFile
        let oF = {
          type : Ti.Util.getSuffixName(file.name),
          mime : file.type,
          race : Ti.Util.isNil(file.type) ? "DIR" : "FILE"
        }
        return Ti.Icons.get(oF)
      }
    },
    //--------------------------------------------
    isShowProgress() {
      return this.progress>=0;
    },
    //--------------------------------------------
    ProgressTip() {
      return Ti.S.toPercent(this.progress, {fixed:1, auto:false})
    },
    //--------------------------------------------
    ProgressStyle() {
      return {width:this.ProgressTip}
    },
    //--------------------------------------------
    ThumbBadges() {
      let list = []
      _.forEach(this.badges, (v, k)=> {
        if(!v)
          return
        if(_.isString(v)) {
          list.push({
            type:"icon", value:v,
            className: `as-badge at-${k.toLowerCase()}`
          })
        } else {
          list.push({
            ...v, 
            className: [
              `as-badge at-${k.toLowerCase()}`, 
              v.className
            ].join(" ")
          })
        }
      })
      return list
    },
    //--------------------------------------------
    hasHref() {
      return this.href ? true : false
    },
    //--------------------------------------------
    TheHref() {
      return encodeURI(this.href)
    },
    //--------------------------------------------
    TheTitle() {
      return Ti.I18n.text(this.title)
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  methods : {
    //--------------------------------------------
    OnRemove() {
      let context = this.genEventContext()
      this.$notify("remove", context)
    },
    //--------------------------------------------
    OnClickTitle($event) {
      let context = this.genEventContext()
      // String -> Emit event
      if(false === this.onTitle) {
        $event.stopPropagation()
      }
      // Notify
      else if(_.isString(this.onTitle)) {
        this.$notify(this.onTitle, context)
      }
      // Function -> Handle
      else if(_.isFunction(this.onTitle)) {
        $event.stopPropagation()
        this.onTitle(context)
      }
    },
    //--------------------------------------------
    genEventContext() {
      return {
        index: this.index,
        id: this.id,
        title: this.title
      }
    },
    //--------------------------------------------
    renderLocalFile() {
      //console.log(this.LocalFile)
      if(this.isLocalImage) {
        let reader = new FileReader();
        reader.onload = (evt)=>{
          if(this.$refs.localImage) {
            this.$refs.localImage.src = evt.target.result
          }
        }
        reader.readAsDataURL(this.preview.value);
      }
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  mounted : function(){
    this.renderLocalFile()
  }
  ////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-actionbar.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/actionbar/ti-actionbar.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////
  provide : function(){
    return {
      "$bar"  : this,
      "depth" : 0
    }
  },
  ///////////////////////////////////////////
  data: ()=>({
    mySeq : 0,
    myGroups: {}
  }),
  ///////////////////////////////////////////
  props : {
    "items" :{
      type : Array,
      default : ()=>[]
    },
    "align" : {
      type : String,
      default : "left",
      validator : v => /^(left|right|center)$/.test(v)
    },
    "status" : {
      type : Object,
      default : ()=>({})
    }
  },
  ///////////////////////////////////////////
  computed : {
    //---------------------------------------
    TopClass() {
      return this.getTopClass(`align-${this.align}`)
    },
    //---------------------------------------
    BarItems() {
      //console.log("EvalBarItems")
      let list = []
      _.forEach(this.items, it => {
        let bi = this.evalBarItem(it)
        if(bi) {
          list.push(bi)
        }
      })
      return list
    }
    //---------------------------------------
  },
  ///////////////////////////////////////////
  methods : {
    //---------------------------------------
    allocGroup($big) {
      //console.log("allocGroup", $big.name)
      this.myGroups[$big.name] = $big
    },
    //---------------------------------------
    freeGroup($big) {
      //console.log("freeGroup", $big.name)
      delete this.myGroups[$big.name]
    },
    //---------------------------------------
    notifyChange({name, value}={}) {
      if(name) {
        this.$notify("change", {name, value})
      }
    },
    //---------------------------------------
    evalBarItem(it){
      // Guard
      if(!it)
        return

      // Test hidden
      if(it.hidden) {
        if(Ti.AutoMatch.test(it.hidden, this.status)){
          return
        }
      }

      // Test vibible
      if(it.visible) {
        if(!Ti.AutoMatch.test(it.visible, this.status)){
          return
        }
      }

      // Eval bar item
      let type = this.getItemType(it)
      let key = this.getItemKey(type)
      let bi = {
        type, key,
        comType: `bar-item-${type}`,
        comConf: _.defaults(_.omit(it, "items"), {
            name: key
          })
      }
      if("group" == type && _.isArray(it.items)) {
        bi.items = []
        for(let child of it.items) {
          let ci = this.evalBarItem(child)
          if(ci) {
            bi.items.push(ci)
          }
        }
      }
      return bi
    },
    //---------------------------------------
    getItemType(bi) {
      if(bi.type) {
        return _.toLower(bi.type)
      }
      // Line
      if(_.isEmpty(bi)) {
        return "line"
      }
      // Group
      else if(_.isArray(bi.items)) {
        return "group"
      }
      // TODO support switcher
      // Default is action
      return "action"
    },
    //---------------------------------------
    getItemKey(type="BarItem") {
      return `${type}-${this.mySeq++}`
    },
    //---------------------------------------
    collapseAllGroup() {
      _.forEach(this.myGroups, $big=>{
        $big.doCollapse()
      })
    },
    //---------------------------------------
    __ti_shortcut(uniqKey) {
      Ti.InvokeBy({"ESCAPE":()=>this.collapseAllGroup()}, uniqKey)
    }
    //---------------------------------------
  },
  ///////////////////////////////////////////
  mounted: function(){
    Ti.Viewport.watch(this, {resize:()=>this.collapseAllGroup()})
  },
  ///////////////////////////////////////////
  beforeDestroy: function(){
    Ti.Viewport.unwatch(this)
  }
  ///////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-upload-file.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/upload/file/ti-upload-file.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  data: ()=>({
    myArea: 0,
    myActionsWidth: 0
  }),
  /////////////////////////////////////////
  props : {
    // The source to display image
    "preview" : {
      type : [String, Object],
      default : null
    },
    // The value must be a LocalFile object
    // to prerender the LocalFile during uploading
    "uploadFile" :{
      type : File,
      default : null
    },
    // Show the process `0.0-1.0` during the uploading
    "progress" : {
      type : Number,
      default : -1
    },
    "maxWidth" : {
      type : [String, Number],
      default : undefined
    },
    "maxHeight" : {
      type : [String, Number],
      default : undefined
    },
    // Display width
    "width" : {
      type : [String, Number],
      default : 120
    },
    // Display height
    "height" : {
      type : [String, Number],
      default : 120
    },
    // support remove the objects
    "removable" : {
      type : Boolean,
      default : true
    },
    "areaSize": {
      type: Object,
      default: ()=>({
        //xl: (800 * 800),
        xs: (100 * 100),
        sm: (200 * 200),
        md: (400 * 400),
        lg: (600 * 600),
      })
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass(
        `is-area-${this.AreaType}`)
    },
    //--------------------------------------
    AreaType() {
      let AS = this.areaSize;
      let ar = this.myArea
      if(ar <= 0) {
        return "nil"
      }
      if(_.inRange(ar, 0, AS.xs+1))
        return "xs"
      if(_.inRange(ar, AS.xs, AS.sm+1))
        return "sm"
      if(_.inRange(ar, AS.sm, AS.md+1))
        return "md"
      if(_.inRange(ar, AS.md, AS.lg+1))
        return "lg"

      return "xl"
    },
    //--------------------------------------
    ThumbStyle(){
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height,
        maxWidth : this.maxWidth,
        maxHeight : this.maxHeight
      })
    },
    //--------------------------------------
    ActionsStyle() {
      if(/^(xs|sm)$/.test(this.AreaType)) {
        return {
          right: Ti.Css.toSize(this.myActionsWidth*-1)
        }
      }
    },
    //--------------------------------------
    hasPreview() {
      return this.preview ? true : false
    },
    //--------------------------------------
    isShowRemoveIcon() {
      if(!this.uploadFile && this.hasPreview) {
        return true
      }
      return false
    },
    //--------------------------------------
    PreviewIcon() {
      if(this.uploadFile) {
        return {type:"localFile", value:this.uploadFile}
      }
      // Normal image
      if(this.preview) {
        return this.preview
      }
      // Show Icon
      return "zmdi-plus"
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickToEdit() {
      this.$refs.file.click()
    },
    //--------------------------------------
    async OnDropFiles(files) {
      let file = _.get(files, 0)
      if(file) {
        this.$notify("upload", file)
      }
    },
    //--------------------------------------
    async OnSelectLocalFilesToUpload(evt) {
      await this.OnDropFiles(evt.target.files)
      this.$refs.file.value = ""
    },
    //--------------------------------------
    OnRemove() {
      this.$notify("remove")
    },
    //--------------------------------------
    OnOpen() {
      this.$notify("open")
    },
    //--------------------------------------
    recountArea() {
      let rect = Ti.Rects.createBy(this.$refs.thumb)
      if(_.isEmpty(rect))
        return
      this.myArea = rect.width * rect.height
      if(this.$refs.actions) {
        this.myActionsWidth = this.$refs.actions.getBoundingClientRect().width
      } else {
        this.myActionsWidth = 0
      }
    },
    //--------------------------------------
    shouldRecountArea() {
      _.delay(()=>{
        this.recountArea()
      }, 10)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "preview": "shouldRecountArea",
    "width": "shouldRecountArea",
    "height": "shouldRecountArea",
    "removable": "shouldRecountArea",
    "areaSize": "shouldRecountArea"
  },
  //////////////////////////////////////////
  created: function() {
    Ti.Viewport.watch(this, {
      resize:()=>{
        this.recountArea()
      }
    })
  },
  //////////////////////////////////////////
  mounted: function() {
    this.$nextTick(()=>this.recountArea())
  },
  //////////////////////////////////////////
  beforeDestroy: function(){
    Ti.Viewport.unwatch(this)
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-list.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/list/ti-list.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //////////////////////////////////////////
  data : ()=>({
    myData : [],
  }),
  //////////////////////////////////////////
  props : {
    "iconBy" : {
      type : [String, Function],
      default : null
    },
    "indentBy" : {
      type : [String, Function],
      default : null
    },
    "itemClassName" : undefined,
    "display" : {
      type : [Object, String, Array],
      default : ()=>({
        key : "..",
        comType : "ti-label"
      })
    },
    "border" : {
      type : Boolean,
      default : true
    },
    "autoScrollIntoView" : {
      type : Boolean,
      default : true
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-hoverable"    : this.hoverable,
        "show-border"     : this.border
      })
    },
    //--------------------------------------
    getRowIndent() {
      if(_.isFunction(this.indentBy)) {
        return it => this.indentBy(it)
      }
      if(_.isString(this.indentBy)) {
        return it => _.get(it, this.indentBy)
      }
      return it => 0
    },
    //--------------------------------------
    getRowIcon() {
      if(_.isFunction(this.iconBy)) {
        return it => this.iconBy(it)
      }
      if(_.isString(this.iconBy)) {
        return it => _.get(it, this.iconBy)
      }
      return it => null
    },
    //--------------------------------------
    DisplayItems() {
      let diss = _.concat(this.display)
      // Prepare the return list
      let items = []
      // Loop each items
      for(let dis of diss) {
        let item = this.evalFieldDisplayItem(dis)
        if(item) {
          items.push(item)
        }
      }
      // Done
      return items
    },
    //--------------------------------------
    TheData() {
      return this.myData
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickTop($event) {
      if(this.cancelable) {
        // Click The body or top to cancel the row selection
        if(Ti.Dom.hasOneClass($event.target,
            'ti-list', 'list-item')) {
          this.cancelRow()
        }
      }
    },
    //--------------------------------------
    scrollCurrentIntoView() {
      // Guard
      if(!this.autoScrollIntoView || Ti.Util.isNil(this.myCurrentId)) {
        return;
      }
      
      let [$first] = Ti.Dom.findAll(".list-row.is-current", this.$el)
      if($first) {
        let rect = Ti.Rects.createBy($first)
        let view = Ti.Rects.createBy(this.$el)
        if(!view.contains(rect)) {
          this.$el.scrollTop += rect.top - view.top
        }
      }
    },
    //--------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("ti-list", uniqKey)
      if("ARROWUP" == uniqKey) {
        this.selectPrevRow({
          payload: {byKeyboardArrow: true}
        })
        this.scrollCurrentIntoView()
        return {prevent:true, stop:true, quit:true}
      }

      if("ARROWDOWN" == uniqKey) {
        this.selectNextRow({payload:{byKeyboardArrow:true}})
        this.scrollCurrentIntoView()
        return {prevent:true, stop:true, quit:true}
      }
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "data" : {
      handler : async function(newVal, oldVal){
        let isSame = _.isEqual(newVal, oldVal)
        if(!isSame) {
          //console.log("!!!list data changed", {newVal, oldVal})
          this.myData = await this.evalData((it)=>{
            it.icon = this.getRowIcon(it.item)
            it.indent = this.getRowIndent(it.item)
          })

          this.$nextTick(()=>{
            this.scrollCurrentIntoView()
          })
        }
      },
      immediate : true
    },
    "myCurrentId" : function() {
      this.$nextTick(()=>{
        this.scrollCurrentIntoView()
      })
    }
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'rich-tinymce.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/rich-tinymce.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////
  data : ()=>({
    myPlugins : [],
    myHtmlCode : undefined,
    /*
    [{
      key : "xxx",
      index : 0,
      level : 1,  // H1~6
      title : "xxx",
      children : [{..}]
    }]
    */
    myOutlineTree : undefined,
    myCurrentHeadingId : undefined
  }),
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    TopClass() {
      return this.getTopClass({
        "nil-content" : this.isContentNil,
        "has-content" : !this.isContentNil
      })
    },
    //-----------------------------------------------
    TheToolbar() {
      let tb = this.toolbar
      if(true === this.toolbar
        || (_.isArray(this.toolbar) && _.isEmpty(this.toolbar))) {
        tb = "#quick"
      }
      let m = /^#(.+)$/.exec(tb)
      if(m) {
        let tbName = m[1]
        let tbd = ({
          markdown : [
            'formatselect',
            'bold italic',
            'blockquote bullist numlist',
            'edit removeformat'],
          quick : [
            'formatselect',
            'bold italic underline',
            'blockquote bullist numlist',
            'blocks',
            'edit removeformat'],
          full : [
            'formatselect',
            'bold italic underline',
            'blockquote bullist numlist',
            'blocks',
            'table WnImgPick',
            'superscript subscript',
            'edit removeformat',
            'TiPreview']
        })[tbName]
        return tbd ? tbd.join("|") : false
      }
      if(_.isArray(this.toolbar)) {
        return this.toolbar.join("|")
      }
      return this.toolbar
    },
    //------------------------------------------------
    ContentCssPath() {
      return Ti.Config.url(`@theme:tinymce/doc_${this.theme}.css`)
    },
    //-----------------------------------------------
    BlankComStyle() {
      return {
        position: "absolute",
        top:0, right:0, bottom:0, left:0,
        zIndex: 10
      }
    },
    //-----------------------------------------------
    isContentLoading() {
      return _.isUndefined(this.value)
    },
    //-----------------------------------------------
    isContentNil() {
      return Ti.Util.isNil(this.value)
    },
    //-----------------------------------------------
    ExplainPluginUrl() {
      // String
      if(_.isString(this.pluginUrl)) {
        return Ti.Util.genInvoking(this.pluginUrl, {partial:"right"})
      }
      // Customized function
      if(_.isFunction(this.pluginUrl)) {
        return this.pluginUrl
      }
      // Default
      return function(url) {
        let m = /^[#](.+)$/.exec(url)
        if(m) {
          return `@com:ti/text/rich/tinymce/plugin/${m[1]}.mjs`
        }
        return url
      }
    },
    //-----------------------------------------------
    TheLang() {
      let ss = _.kebabCase(this.lang).split(/[_-]/)
      let s0 = _.lowerCase(ss[0])
      if("en" == s0)
        return null
      let s1 = _.upperCase(ss[1])
      return [s0, s1].join("_")
    },
    //-----------------------------------------------
    TheTinyEditor() {
      let plugNames = _.map(this.myPlugins, ({name}={})=>name)
      let plugins = ['paste lists table'].concat(plugNames)
      return _.assign({
        plugins: plugins.join(" "),
        content_css : this.ContentCssPath,
        auto_focus: true,
        statusbar: false,
        menubar: false,
        resize: false,
        br_in_pre : false,
        convert_urls: false,
        // urlconverter_callback: function(url, node, on_save, name) {
        //   // Do some custom URL conversion
        //   console.log("urlconverter_callback", {url, node, on_save, name})
      
        //   // Return new URL
        //   return url;
        // },
        table_advtab: false,
        table_cell_advtab: false,
        table_row_advtab: false,
        table_toolbar: [
          'tableinsertrowbefore tableinsertrowafter tabledeleterow','tableinsertcolbefore tableinsertcolafter tabledeletecol',
          'tabledelete'].join("|"),
        table_use_colgroups: true
      }, this.tinyConfig)
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    OnHeadingChange($h) {
      this.evalOutline()
    },
    //-----------------------------------------------
    syncContent() {
      this.myHtmlCode = this.$editor.getContent()
    },
    //-----------------------------------------------
    evalCurrentHeading() {
      let $node = this.$editor.selection.getNode()
      let $h = Ti.Dom.closestByTagName($node, /^H[1-6]$/)
      
      // Looking previous
      if(!$h) {
        let $body = $node.ownerDocument.body
        let $top = $node
        while($top.parentElement && $top.parentElement != $body) {
          $top = $top.parentElement
        }
        $h = Ti.Dom.prevByTagName($top, /^H[1-6]$/)
      }

      if($h) {
        this.myCurrentHeadingId = $h.getAttribute("ti-outline-id")
      }
    },
    //-----------------------------------------------
    evalOutline() {
      let list = []
      this.$editor.$('h1,h2,h3,h4,h5,h6').each((index, el)=>{
        let nodeId = el.getAttribute("ti-outline-id")
        if(!nodeId) {
          nodeId = Ti.Random.str(6)
          el.setAttribute("ti-outline-id", nodeId)
        }

        list.push({
          id : nodeId,
          index,
          name : el.innerText,
          className : el.className,
          tagName : el.tagName,
          attrs : Ti.Dom.attrs(el),
          level : parseInt(el.tagName.substring(1))
        })
      })

      // Groupping to tree
      let tree = {
        id : "@OUTLINE",
        level : 0,
        name : "Document",
        children : []
      }
      let rootHie = Ti.Trees.getById(tree, "@OUTLINE")

      
      if(!_.isEmpty(list)) {
        let hie = rootHie
        for(let i=0; i < list.length; i++) {
          let it = list[i]
          // Join the child
          if(it.level > hie.node.level) {
            hie = Ti.Trees.append(hie, it, {autoChildren:true}).hierarchy
          }
          // add sibling
          else if(it.level == hie.node.level) {
            hie = Ti.Trees.insertAfter(hie, it).hierarchy
          }
          // add parent
          else {
            // Seek to sibling
            while(hie.parent) {
              hie = hie.parent
              if(it.level >= hie.node.level) {
                break;
              }
            }
            hie = Ti.Trees.insertAfter(hie, it).hierarchy
          }
        }
      }
      //console.log(tree)

      // Set
      this.myOutlineTree = tree
    },
    //-----------------------------------------------
    scrollIntoView(selector) {
      let $ta;
      if(_.isElement(selector)) {
        $ta = selector
      } else {
        let q = this.$editor.$(selector).first()
        if(q.length > 0) {
          $ta = q[0]
        }
      }
      if(!$ta)
        return

      let $view = Ti.Dom.ownerWindow($ta)
      let r_view = Ti.Rects.createBy($view)
      let r_targ = Ti.Rects.createBy($ta)

      // test it need to scroll or not
      if(!r_view.contains(r_targ)) {
        $view.scroll({
          top: r_targ.top + $view.scrollY, 
          behavior:"smooth"
        })
      }
      // console.log("r_view: " + r_view)
      // console.log("r_targ: " + r_targ)
    },
    //-----------------------------------------------
    async initEditor() {
      // Guard
      if(this.$editor) 
        return
      // Prepare the configuration
      const conf = {
        target: this.$refs.editor,
        ... this.TheTinyEditor,
        icons : "ti_tiny_icon_pack",
        language: this.TheLang,
        readonly : this.readonly,
        placeholder: Ti.I18n.text(this.placeholder),
        formats : {
          underline : {inline: 'u'}
        },
        toolbar: this.TheToolbar,
        toolbar_groups: {
            edit : {
              icon: 'edit-block',
              tooltip: 'edit',
              items: 'copy cut paste pastetext | undo redo',
            },
            alignment: {
              icon: 'align-justify',
              tooltip: 'alignment',
              items: 'alignleft aligncenter alignright alignjustify',
            },
            blocks: {
              icon: 'align-justify',
              tooltip: 'alignment',
              items: 'alignleft aligncenter alignright alignjustify | indent outdent',
            },
        },
        setup : (editor)=>{
          editor.__rich_tinymce_com = this
          // Event: change
          editor.on("Change", (evt)=>{
            // onsole.log("Change ", evt)
            this.myHtmlCode = editor.getContent()
          })
          // Event: get outline
          editor.on("input", (evt)=>{
            // console.log("input!!", evt)
            let $node = editor.selection.getNode()
            let $h = Ti.Dom.closestByTagName($node, /^H[1-6]$/)
            if($h) {
              this.OnHeadingChange($h)
            }
          })
          // Event: watch the command to update
          editor.on("ExecCommand", (evt)=>{
            // console.log("command fired!!", evt)
            this.myHtmlCode = editor.getContent()
            this.evalOutline()
          })
          editor.on("SelectionChange", (evt)=>{
            this.evalCurrentHeading()
          })
          //
          // Shortcute
          //
          editor.addShortcut('ctrl+s', "Save content", ()=>{
            Ti.App(this).fireShortcut("CTRL+S");
          });
          editor.addShortcut('alt+shift+v', "View source", ()=>{
            Ti.App(this).fireShortcut("ALT+SHIFT+V");
          });
          editor.addShortcut('alt+shift+P', "Properties", ()=>{
            Ti.App(this).fireShortcut("ALT+SHIFT+P");
          });
          // Customized
          if(_.isFunction(this.tinySetup)) {
            this.tinySetup(editor)
          }
          // Remember instance
          this.$editor = editor
        }
      }
      // Init customized plugins
      for(let plug of this.myPlugins) {
        tinymce.PluginManager.add(plug.name, plug.setup)
        if(_.isFunction(plug.init)) {
          plug.init(conf)
        }
      }
      
      // :: Setup tinyMCE
      // The init() method return Promise object for some result async loading.
      // We need to await all them done before invoke setContent method of
      // the editor instance.
      await tinymce.init(conf);

      // init content
      if(this.value) {
        this.myHtmlCode = this.value
        this.$editor.setContent(this.value)

        // Then generate the outline
        this.evalOutline()
      }
      //.............................................
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "myHtmlCode" : function(newVal, oldVal) {
      if(!_.isEqual(newVal, oldVal) && !_.isEqual(newVal, this.value)) {
        this.$notify("change", newVal);
      }
    },
    "myOutlineTree" : function(newVal, oldVal) {
      if(!_.isEqual(newVal, oldVal)) {
        this.$notify("outline:change", this.myOutlineTree)
      }
    },
    "myCurrentHeadingId" : function(newVal, oldVal) {
      if(!_.isEqual(newVal, oldVal)) {
        this.$notify("current:heading", newVal)
      }
    },
    "value" : function(newVal, oldVal) {
      // Guard
      if(!this.$editor) {
        return
      }
      //console.log("value", newVal, oldVal)
      if(!this.myHtmlCode ||
        (!_.isEqual(newVal, oldVal) && !_.isEqual(newVal, this.myHtmlCode))) {
          this.myHtmlCode = newVal
          this.$editor.setContent(newVal||"")
      }
    }
  },
  ///////////////////////////////////////////////////
  created : function() {
    
  },
  ///////////////////////////////////////////////////
  mounted : async function() {
    if(!_.isEmpty(this.plugins)) {
      let list = _.map(this.plugins, this.ExplainPluginUrl)
      this.myPlugins = await Ti.Load(list)
    }
   
    await this.initEditor()
  }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-media-player.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/media/player/web-media-player.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  /////////////////////////////////////////
  props : {
    "src" : {
      type : String,
      default : undefined
    },
    "value": {
      type : [String, Number],
      default : undefined
    },
    "bgColor": {
      type : [String, Number],
      default: "#000000"
    },
    // [{text:"xxx", className:"xxx", cssStyle:""}]
    // [{src:"xxx",  className:"xxx", cssStyle:""}]
    "items" : {
      type : [Array],
      default : ()=>[]
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TheItems() {
      let list = []
      _.forEach(this.items, it => {

      })
      return list
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'leaflet-tiles-methods.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/gis/leaflet/leaflet-tiles-methods.mjs'] = (function(){
const TILES = {
  // 高德路网：
  "GAODE_ROADMAP" : {
    tmpl : "https://wprd0{s}.is.autonavi.com/appmaptile?x={x}&y={y}&z={z}&lang={lang}&size=1&scl=2&style={style}&ltype={type}",
    vars : {subdomains: "1234", style: "8", type: "11", lang: "zh_cn"},
    coords : "GCJ02"
  },
  // 高德影像：
  "GAODE_SATElITE" : {
    tmpl : "https://webst0{s}.is.autonavi.com/appmaptile?style={style}&x={x}&y={y}&z={z}",
    vars : {subdomains: "1234", style: "6"},
    coords : "GCJ02"
  },
  // 高德矢量：
  "GAODE_VECTOR" : {
    tmpl : "http://wprd0{s}.is.autonavi.com/appmaptile?lang={lang}&size=1&style={style}&x={x}&y={y}&z={z}",
    vars : {subdomains: "1234", style: "7", lang: "zh_cn"},
    coords : "GCJ02"
  },
  // 腾讯地图矢量：
  "QQ_VECTOR_NOTE" : {
    tmpl : "http://rt{s}.map.gtimg.com/realtimerender?z={z}&x={x}&y={-y}&type={type}&style={style}",
    vars : {subdomains: "0123", style: "0", type: "vector"},
    coords : "GCJ02"
  },
  // 谷歌矢量：
  "GOOGLE_VECTOR" : {
    tmpl : "http://mt{s}.google.cn/vt/lyrs=m&scale=2&hl={lang}&gl=cn&x={x}&y={y}&z={z}",
    vars : {subdomains: "0123", lang: "zh-CN"},
    coords : "GCJ02"
  },
  // 谷歌路网：
  "GOOGLE_ROADMAP" : {
    tmpl : "https://mt{s}.google.com/vt/lyrs=h&x={x}&y={y}&z={z}",
    vars : {subdomains: "0123"},
    coords : "WGS84"
  },
  // 谷歌影像：
  "GOOGLE_SATElITE" : {
    tmpl : "http://www.google.cn/maps/vt?lyrs=s@189&gl=${lang}&x={x}&y={y}&z={z}",
    vars : {subdomains: "0123", lang: "cn"},
    coords : "WGS84"
  },
  // 谷歌影像带注记：
  "GOOGLE_SATElITE_NOTE" : {
    tmpl : "https://mt{s}.google.com/vt/lyrs=y&x={x}&y={y}&z={z}",
    vars : {subdomains: "0123"},
    coords : "WGS84"
  },
  // 谷歌地形：
  "GOOGLE_TERRAIN" : {
    tmpl : "https://mt{s}.google.com/vt/lyrs=t&x={x}&y={y}&z={z}",
    vars : {subdomains: "0123"},
    coords : "WGS84"
  },
  // 谷歌地图矢量带地形渲染：
  "GOOGLE_VECTOR_TERRAIN" : {
    tmpl : "https://mt{s}.google.com/vt/lyrs=r&x={x}&y={y}&z={z}",
    vars : {subdomains: "0123"},
    coords : "WGS84"
  },
  // 街景地图：
  "OPENSTREAT" : {
    tmpl : "https://tile.openstreetmap.org/{z}/{x}/{y}.png",
    vars : {},
    coords : "WGS84"
  },
  // CartoDB
  "CARTO" : {
    tmpl : "https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png",
    vars : {},
    coords : "WGS84"
  },
  "CARTO_ALL" : {
    tmpl : "https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png",
    vars : {},
    coords : "WGS84"
  },
  "CARTO_LABEL" : {
    tmpl : "https://{s}.basemaps.cartocdn.com/light_only_labels/{z}/{x}/{y}.png",
    vars : {},
    coords : "WGS84"
  },
  // 天地图影像：
  "TIANDITU_SATElITE" : {
    tmpl : "http://t7.tianditu.gov.cn/img_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=img&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&tk=e3b434f191257368fc43c5b011ab5911",
    vars : {},
    coords : "WGS84"
  },
  // 天地图影像注记：
  "TIANDITU_SATElITE_NOTE" : {
    tmpl : "http://t7.tianditu.gov.cn/cia_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=cia&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&tk=e3b434f191257368fc43c5b011ab5911",
    vars : {},
    coords : "WGS84"
  },
  // 天地矢量：
  "TIANDITU_VECTOR" : {
    tmpl : "http://t7.tianditu.gov.cn/vec_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=vec&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&tk=e3b434f191257368fc43c5b011ab5911",
    vars : {},
    coords : "WGS84"
  },
  // 天地矢量注记：
  "TIANDITU_VECTOR_NOTE" : {
    tmpl : "http://t7.tianditu.gov.cn/cva_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=cva&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&tk=e3b434f191257368fc43c5b011ab5911",
    vars : {},
    coords : "WGS84"
  },
  // 天地图地形：
  "TIANDITU_TERRAIN" : {
    tmpl : "http://t7.tianditu.gov.cn/ter_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=ter&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&tk=e3b434f191257368fc43c5b011ab5911",
    vars : {},
    coords : "WGS84"
  },
  // 天地图地形注记：
  "TIANDITU_TERRAIN_NOTE" : {
    tmpl : "http://t7.tianditu.gov.cn/cta_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=cta&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&tk=e3b434f191257368fc43c5b011ab5911",
    vars : {},
    coords : "WGS84"
  }
}
////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  getTileCoords(type) {
    return _.get(TILES[type], "coords")
  },
  createTileLayer(type, vars) {
    let it = TILES[type]
    if(!it) {
      throw `Unknown tile layer type '${type}'`
    }
    let options = _.assign({}, it.vars, vars)
    return L.tileLayer(it.tmpl, options)
  }
}
////////////////////////////////////////////
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-shelf-list.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/shelf/list/web-shelf-list.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  props : {
    "data" : {
      type : Array,
      default : undefined
    },
    // Item comType
    "comType": {
      type: String,
      default: "ti-label"
    },
    "comConf": {
      type: [Object, String],
      default: ()=>({
        value: "=.."
      })
    },
    "itemKeyBy": {
      type : String,
      default: "id"
    },
    "blankAs": {
      type: [Object, Boolean],
      default: ()=>({
        text: "i18n:empty",
        icon: "fas-box-open"
      })
    },
    "loadingAs": {
      type: [Object, Boolean],
      default: ()=>({})
    },
    "transName" : {
      type: String,
      default: "slide-right",
      validator: v => (!v || /^(fade|((slide)-(left|right|down|up)))$/.test(v))
    },
    "transSpeed" : {
      type: String,
      default: "normal",
      validator: v => /^(slow|normal|fast)$/.test(v)
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    ItemTransName() {
      if(this.transName) {
        return `ti-trans-${this.transName}`
      }
    },
    //--------------------------------------
    ItemTransSpeedClassName() {
      return `is-speed-${this.transSpeed}`
    },
    //--------------------------------------
    ItemList() {
      if(!_.isArray(this.data))
        return []
      
      let list = []      
      for(let i=0; i < this.data.length; i++) {
        let it = this.data[i]
        let comConf = Ti.Util.explainObj(it, this.comConf)
        let key = `It-${i}`
        if(this.itemKeyBy) {
          key = Ti.Util.fallbackNil(it[this.itemKeyBy], key)
        }
        list.push({
          key,
          comType: this.comType,
          comConf
        })        
      }
      // Get the result
      return list
    },
    //--------------------------------------
    isLoading() {
      return Ti.Util.isNil(this.data)
    },
    //--------------------------------------
    isEmpty() {
      return _.isEmpty(this.ItemList)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-combo-pair-auto-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/pair-auto/ti-combo-pair-auto-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "value": {
    type: Object,
    default: undefined
  },
  "group" : {
    type : Boolean,
    default : true
  },
  "fields" : {
    type : Object,
    default : ()=>({})
  },
  "onlyFields" : {
    type: Boolean,
    default: true
  },
  // merge each time data change
  "fixed": {
    type: Object,
    default: undefined
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "defaultComType" : {
    type : String,
    default : "ti-input"
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "spacing" : {
    type : String,
    default : undefined
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width" : {
    type : [Number, String],
    default : undefined
  },
  "height" : {
    type : [Number, String],
    default : undefined
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-datetime.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/datetime/ti-datetime.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  props : {
    "value" : {
      type : [String, Number, Date],
      default : null
    },
    "timeMode" : {
      type : String,
      default : "sec",
      /***
       * - `sec`  : "HH:mm:ss"
       * - `min`  : "HH:mm"
       * - `auto` : "HH:mm:ss"
       */
      validator : function(unit) {
        return /^(sec|min|auto)$/.test(unit)
      }
    },
    "monthFormat" : {
      type : String,
      default : "yyyy-MM" 
    },
    "beginYear" : {
      type : [Number, String],
      default : 1970
    },
    "endYear" : {
      type : [Number, String],
      default : (new Date().getFullYear()+1)
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return this.className
    },
    //------------------------------------------------
    theDate() {
      return Ti.Types.toDate(this.value, null)
    },
    //------------------------------------------------
    theTime() {
      return Ti.Types.toTime(this.theDate)
    },
    //------------------------------------------------
    theTimeFormat() {
      return ({
        "sec"  : "HH:mm:ss",
        "min"  : "HH:mm",
        "auto" : "auto"
      })[this.timeMode]
    },
    //------------------------------------------------
    theTimeText() {
      return this.getTimeText(this.theTime)
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    onDateChanged(dt) {
      let theDate = this.theDate || new Date()
      let tm = Ti.Types.toTime(this.theTime||0);
      dt = new Date(dt)
      dt.setHours(tm.hours)
      dt.setMinutes(tm.minutes)
      dt.setSeconds(tm.seconds)
      dt.setMilliseconds(tm.milliseconds)
      this.$notify("change", dt)
    },
    //------------------------------------------------
    onTimeChanged(tm) {
      let theDate = this.theDate || new Date()
      let dt = new Date(theDate)
      dt.setHours(tm.hours)
      dt.setMinutes(tm.minutes)
      dt.setSeconds(tm.seconds)
      dt.setMilliseconds(tm.milliseconds)
      this.$notify("change", dt)
    },
    //------------------------------------------------
    getTimeText(tm) {
      if(tm instanceof Ti.Types.Time) {
        return tm.toString(this.theTimeFormat)
      }
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-crumb.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/crumb/ti-crumb.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  props : {
    "data" : {
      type : Array,
      default : ()=>[]
    },
    "itemIcon" : {
      type : String,
      default : null
    },
    "pathIcon" : {
      type : String,
      default : "zmdi-chevron-right"
    },
    "cancelItemBubble" : {
      type : Boolean,
      default : true
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    ItemList() {
      let list = []
      if(_.isArray(this.data)) {
        _.forEach(this.data, (val, index)=>{
          list.push(_.assign({
            icon    : this.itemIcon
          }, val, {index, atLast:index==this.data.length - 1}))
        })
      }
      return list
    },
    //------------------------------------------------
    // theDataValues() {
    //   let list = []
    //   for(let it of this.theData) {
    //     list.push(Ti.Util.fallback(it.value, null))
    //   }
    //   return list
    // }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  // methods : {
  //   //------------------------------------------------
  //   onItemFired({index=-1}={}) {
  //     if(index >= 0) {
  //       let it = _.nth(this.theData, index)
  //       if(it) {
  //         this.$notify("item:actived", it)
  //       }
  //     }
  //   }
  //   //------------------------------------------------
  // }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-input-tags-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/tags/ti-input-tags-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "dict" : {
    type : [String, Ti.Dict],
    default : null
  },
  "inputValue" : null,
  // +1 from the begin
  // -1 from the last
  "maxValueLen" : {
    type : Number,
    default : 0
  },
  "valueUnique" : {
    type : Boolean,
    default : true
  },
  "tagOptions" : {
    type : [Array, Function],
    default : ()=>[]
  },
  "tagMapping" : {
    type : Object,
    default : undefined
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "canInput" : {
    type : Boolean,
    default : true
  },
  "cancelTagBubble" : {
    type : Boolean,
    default : false
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "tagItemIconBy" : {
    type : [String, Function],
    default : undefined
  },
  "tagItemDefaultIcon" : {
    type : String,
    default : undefined
  },
  "tagOptionDefaultIcon" : {
    type : String,
    default : undefined
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-calendar.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/calendar/ti-calendar.mjs'] = (function(){
///////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data: ()=>({
    "view_date" : null
  }),
  /////////////////////////////////////////
  props : {
    "value" : {
      type : [String, Number, Date, Array],
      default : null
    },
    /***
     * The value represent a **Date Range**.
     * It must be a Array with two elements, first one is begin date
     * of the range, the last one is the end of the range.
     * Both the two date is includsive of the range.
     * 
     * If the value passed in is not array, It will be taken as 
     * the begin date
     */
    "range" : {
      type : Boolean,
      default : false
    },
    // Which day is first day
    //  0 - Sunday
    //  1 - Monday
    "firstDayInWeek" : {
      type : [Number, String],  // 0, or "Sun" or "Sunday"
      default : 0
    },
    /***
     * How to decide the matrix end date
     * 
     * - "monthly" : show whole month
     * - "weekly"  : show few weeks defined by `matrixCount`
     */ 
    "matrixMode" : {
      type : String,
      default : "monthly"
    },
    /***
     * Define the matrix block count by `matrixMode`
     * 
     * - "monthly" - how many calenars should be shown in same time
     * - "weekly"  - how many week should be shown in block
     */
    "matrixCount" : {
      type : Number,
      default : 1
    },
    // true : can write time directly
    "monthEditable" : {
      type : Boolean,
      default : true
    },
    "monthFormat" : {
      type : String,
      default : "yyyy-MM-dd" 
    },
    "beginYear" : {
      type : [Number, String],
      default : 1970
    },
    "endYear" : {
      type : [Number, String],
      default : (new Date().getFullYear()+1)
    }
  },
  //////////////////////////////////////////
  watch : {
    // If the value changed outside,
    // and if the value our-of-view
    // It should auto switch the viewDate
    "value" : function(newVal, oldVal) {
      if(!_.isEmpty(newVal) && !_.isEqual(newVal, oldVal)) {
        let [v0] = [].concat(newVal)
        let dt = Ti.Types.toDate(v0)
        let ms = dt.getTime()
        if(!_.inRange(ms, ...this.theMatrixRangeInMs)) {
          this.view_date = null
        }
      }
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    switcherClass() {
      if(this.isMonthly && this.matrixCount>1) {
        return "sz-double"
      }
    },
    //--------------------------------------
    isMonthly() {
      return "monthly" == this.matrixMode
    },
    isWeekly() {
      return "weekly" == this.matrixMode
    },
    //--------------------------------------
    today() {
      return new Date()
    },
    todayName() {
      return Ti.Types.formatDate(this.today, "yyyy-MM-dd")
    },
    //--------------------------------------
    theDate() {
      if(_.isArray(this.value)) {
        if(this.value.length > 0) {
          return Ti.Types.toDate(this.value[0])
        }
        return null
      }
      return Ti.Types.toDate(this.value, null)
    },
    //--------------------------------------
    theRangeInMs() {
      // Move to 00:00:00
      let dt0 = new Date(this.theDate)
      // Define the dt1
      let dt1;
      if(_.isArray(this.value) && this.value.length > 1) {
        dt1 = Ti.Types.toDate(this.value[1])
      }
      // The End of the Day
      else {
        dt1 = new Date(dt0)
      }
      // Make the range
      let msRange = [dt0.getTime(), dt1.getTime()].sort()

      // dt0 start of the day
      dt0 = Ti.DateTime.setTime(new Date(msRange[0]))
      // dt1 end of the day
      dt1 = Ti.DateTime.setDayLastTime(new Date(msRange[1]))

      // rebuild the range
      return [dt0.getTime(), dt1.getTime()]
    },
    //--------------------------------------
    theRangeInText() {
      return Ti.Types.formatDate(this.theRangeInMs, "yyyy-MM-dd")
    },
    //--------------------------------------
    theRangeBeginDate() {
      return new Date(this.theRangeInMs[0])
    },
    //--------------------------------------
    theRangeEndDate() {
      return new Date(this.theRangeInMs[1])
    },
    //--------------------------------------
    theMatrixRangeInMs() {
      let c0 = this.dateMatrixList[0][0][0]
      let i = this.dateMatrixList.length - 1
      let y = this.dateMatrixList[i].length - 1
      let x = this.dateMatrixList[i][y].length - 1
      let c1 = this.dateMatrixList[i][y][x]

      let dt0 = new Date(c0.raw)
      let dt1 = new Date(c1.raw)
      Ti.DateTime.setTime(dt0)
      Ti.DateTime.setDayLastTime(dt1)
      return [dt0.getTime(), dt1.getTime()]
    },
    //--------------------------------------
    theMatrixRange() {
      let dt0 = new Date(this.theMatrixRangeInMs[0])
      let dt1 = new Date(this.theMatrixRangeInMs[1])
      return [dt0, dt1]
    },
    //--------------------------------------
    theViewRange() {
      let i = this.dateMatrixList.length - 1
      let y = this.dateMatrixList[i].length - 1
      let x = this.dateMatrixList[i][y].length - 1
      let c1 = this.dateMatrixList[i][y][x]
      while(c1.type!="in-month" && x>0) {
        c1 = this.dateMatrixList[i][y][--x]
      }

      let dt0 = new Date(this.theViewDate)
      let dt1 = new Date(c1.raw)
      Ti.DateTime.setTime(dt0)
      Ti.DateTime.setDayLastTime(dt1)
      return [dt0, dt1]
    },
    //--------------------------------------
    theViewRangeText() {
      let dt0 = this.theViewRange[0]
      if(this.isMonthly && this.matrixCount > 1) {
        let dt1 = this.theViewRange[1]
        let yy0 = dt0.getFullYear()
        let MM0 = dt0.getMonth()
        let yy1 = dt1.getFullYear()
        let MM1 = dt1.getMonth()
        let abbr0 = Ti.DateTime.getMonthAbbr(MM0)
        let abbr1 = Ti.DateTime.getMonthAbbr(MM1)
        let MT0 = Ti.I18n.get(`cal.abbr.${abbr0}`)
        let MT1 = Ti.I18n.get(`cal.abbr.${abbr1}`)

        MM0++;  MM1++;  // Month change to 1 base

        let vars = {
          yy0, yy1,
          MM0, MM1,
          MT0, MT1
        }
        // Beyound year
        if(yy0 != yy1) {
          return Ti.I18n.getf("cal.m-range-beyond-years", vars)
        }
        // Beyound month
        if(MM0 != MM1) {
          return Ti.I18n.getf("cal.m-range-beyond-months", vars)
        }
      }
      return Ti.Types.formatDate(dt0, this.monthFormat)
    },
    //--------------------------------------
    theDateName() {
      return Ti.Types.formatDate(this.theDate, "yyyy-MM-dd")
    },
    //--------------------------------------
    theViewDate() {
      return this.view_date || this.theDate || new Date()
    },
    //--------------------------------------
    theViewYear() {
      return this.theViewDate.getFullYear()
    },
    //--------------------------------------
    theViewMonth() {
      return this.theViewDate.getMonth()
    },
    theViewMonthAbbr() {
      return Ti.DateTime.getMonthAbbr(this.theViewMonth)
    },
    //--------------------------------------
    weekTitles() {
      let day = this.firstDayInWeek
      // Week day index
      if(_.isNumber(day)) {
        day = _.clamp(day, 0, 6)
      }
      // Week day abbr or name
      else if(_.isString(day)) {
        let dayName = _.lowerCase(day)
        day = Ti.DateTime.getWeekDayValue(dayName, 0)
      }
      // Join list
      let list = []
      for(let i=0; i<7; i++) {
        list.push({
          day,
          title : Ti.I18n.get(["cal","week",day])
        })
        if(++day >=7 ) {
          day = 0
        }
      }
      // Return it
      return list
    },
    //--------------------------------------
    weekFirstDayValue() {
      if(_.isString(this.firstDayInWeek)) {
        return Ti.DateTime.getWeekDayValue(this.firstDayInWeek, 0)
      }
      return _.clamp(this.firstDayInWeek, 0, 6)
    },
    //--------------------------------------
    dateMatrixList() {
      let beginDate = new Date(this.theViewDate)
      //............................
      let list = []
      let theYear  = this.theViewYear
      let theMonth = this.theViewMonth
      // Monthly: may create multi-matrix
      if(this.isMonthly) {
        for(let i=0; i<this.matrixCount; i++) {
          let {matrix, lastDate} = this.createMatrix(
            beginDate, theYear, theMonth
          )
          list.push(matrix)
          beginDate = Ti.DateTime.moveDate(new Date(lastDate), 1)
          theMonth ++
          if(theMonth >= 12) {
            theMonth = 0
            theYear ++
          }
        }
      }
      // Weekly
      else {
        let {matrix} = this.createMatrix(beginDate)
        list.push(matrix)
      }
      return list
      //............................
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    /***
     * Create a date matrix
     */
    createMatrix(beginDate, theYear, theMonth) {
      // Move to the first date in month
      if(this.isMonthly) {
        beginDate.setDate(1)
      }
      //............................
      // Move the first day of week
      let wfdv = this.weekFirstDayValue
      while(beginDate.getDay() > wfdv) {
        Ti.DateTime.moveDate(beginDate, -1)
      }
      while(beginDate.getDay() < wfdv) {
        Ti.DateTime.moveDate(beginDate, 1)
      }
      //............................
      // Build the matrix
      let len = 7
      let y = 0
      let matrix = []
      let lastDate = null
      while(true) {
        let row = []
        for(let x=0; x<len; x++) {
          let index = y*len + x
          lastDate = Ti.DateTime.createDate(beginDate, index)
          let month = lastDate.getMonth()
          let date  = lastDate.getDate()
          let name  = Ti.Types.formatDate(lastDate, "yyyy-MM-dd")
          let isSelected = false
          // Range: match begin/end date
          if(this.range) {
            isSelected = _.inRange(lastDate.getTime(), ...this.theRangeInMs)
          }
          // Single: match the date
          else {
            isSelected = name == this.theDateName
          }
          let type = {
            "is-prev"  : month < theMonth,
            "is-next"  : month > theMonth,
            "in-month" : month == theMonth,
            "is-today" : this.todayName == name,
            "is-selected" : isSelected
          }
          // Eval displayText in cell
          // The first day of month should the Abbr
          let text = ""+date
          if(1 == date && (
              (this.isMonthly && this.matrixCount>1)
              || this.isWeekly
          )) {
            let abbr = Ti.DateTime.getMonthAbbr(month)
            text = Ti.I18n.get(`cal.abbr.${abbr}`)
          }
          // Join to the row
          row.push({
            x, y, index, type, name, text,
            year  : lastDate.getFullYear(),
            month,
            day   : lastDate.getDay(),
            date  : lastDate.getDate(),
            raw   : lastDate
          })
        }
        // Move to next row
        y++
        // End by week count
        if(this.isWeekly) {
          let count = _.clamp(this.matrixCount, 1, 100)
          if(y>count)
            break
        }
        // End by next month
        else if(this.isMonthly) {
          if((
              row[0].year  == theYear &&
              row[0].month  > theMonth
            ) || row[0].year > theYear) {
            break
          }
        }
        // Invalid mode, break now
        else {
          break
        }
        // Join to matrix
        matrix.push(row)
      }
      //............................
      return {
        matrix, lastDate
      }
    },
    //--------------------------------------
    gotoToday() {
      this.view_date = new Date()
    },
    //--------------------------------------
    gotoMatrix(offset=0) {
      let cd = this.theViewDate
      let dt = new Date(cd.getFullYear(), cd.getMonth(), cd.getDate())

      // Monthly
      if(this.isMonthly) {
        Ti.DateTime.moveMonth(dt, offset)
      }
      // Weekly
      else if(this.isWeekly) {
        Ti.DateTime.moveDate(dt, offset*7*this.matrixCount)
      }
      // Invalid mode
      else {
        return
      }

      // Switch the current view
      this.view_date = dt
    },
    //--------------------------------------
    onMonthChanged(month) {
      let dt = Ti.Types.toDate(month)
      this.view_date = dt
    },
    //--------------------------------------
    onClickCell(cell) {
      // Range
      if(this.range) {
        // If array ...
        if(_.isArray(this.value)) {
          //console.log(this.value)
          // Finish the range
          if(this.value.length == 1) {
            let msRange = [cell.raw.getTime(), this.theDate.getTime()].sort()
            let dt0 = Ti.Types.toDate(msRange[0])
            let dt1 = Ti.Types.toDate(msRange[1])
            this.$notify("change", [dt0, dt1])
          }
          // Start a new range
          else {
            this.$notify("change", [cell.raw])
          }
        }
        // Has Value
        else {
          this.$notify("change", [cell.raw])
        }
      }
      // Single value
      else {
        this.$notify("change", cell.raw)
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  mounted : function() {
    this.view_date = this.theDate || new Date()
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-session-badge.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/session/badge/wn-session-badge.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  data : ()=>({
    collapse : true,
    dropReady : false
  }),
  /////////////////////////////////////////
  props : {
    "me" : {
      type : Object,
      default : null
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    MySex() {
      return _.get(this.me, "sex") || 0
    },
    //--------------------------------------
    MyLang() {
      return _.get(this.me, "LANG") || "zh-cn"
    },
    //--------------------------------------
    hasSession() {
      return this.me ? true : false
    },
    //--------------------------------------
    LangList() {
      return [{
        lang : "zh-cn",
        text : "中文",
        className: {"is-current" : "zh-cn" == this.MyLang},
        src  : "/gu/rs/ti/icons/png/lang-zh-cn.png"
      }, {
        lang : "en-us",
        text : "English",
        className: {"is-current" : "en-us" == this.MyLang},
        src  : "/gu/rs/ti/icons/png/lang-en-us.png"
      }]
    },
    //--------------------------------------
    TheLoginIcon() {
      if(2 == this.MySex)
        return "im-user-female"
      
      if(1 == this.MySex)
        return "im-user-male"

      return "im-user-circle"
    },
    //--------------------------------------
    DropStyle() {
      if(this.dropReady){
        return {
          "visibility": "visible"
        }
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnResetPassword() {
      this.collapse = true
      Ti.App(this).dispatch("session/openResetPasswd")
    },
    //--------------------------------------
    OnShowMore() {
      this.collapse = false
    },
    //--------------------------------------
    async OnChangeLang(lang) {
      if(this.MyLang != lang) {
        await Wn.Sys.exec(`me -set LANG=${lang}`)
        window.location.reload()
      }
    },
    //--------------------------------------
    dockDrop() {
      let $drop = this.$refs.drop
      let $info = this.$refs.info
      // Guard the elements
      if(!_.isElement($drop) || !_.isElement($info) || this.collapse){
        return
      }
      // Dock
      Ti.Dom.dockTo($drop, $info, {
        space: {y:2}
      })
      _.delay(()=>{
        this.dropReady = true
      }, 10)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "collapse" : {
      handler : function(newVal, oldVal) {
        if(!newVal && newVal!=oldVal) {
          _.delay(()=>{
            this.dockDrop()
          }, 0)
        }
        // Collapse
        else if(newVal) {
          this.dropReady = false
        }
      },
      immediate: true
    }
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'site-tree-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/hmaker/website/mod/site-tree/site-tree-actions.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //----------------------------------------
  /***
   * Append the `meta` to current tree. 
   * It will auto load all the ancestor node of the meta in tree
   */ 
  async appendNode({state, commit, dispatch}, meta) {
    console.log("TODO appendNode", meta)
  },
  //----------------------------------------
  /***
   * Reload children of specific node. 
   * If current is leaf, it will skip the children reloading.
   * 
   * @param id{String} - the node id. higher priority then `path`
   * @param path{String|Array} - the node path
   * @param self{Boolean} - reload self or not.
   * @param force{Boolean} - reload again event the children had been loaded.
   * @param depth{Number} - reload the multi hierarchies if great than `1`
   */
  async reloadNode({state, commit, dispatch}, {
    id,
    path,
    self=false,
    force=false,
    depth=1
  }={}) {
    //......................................
    // Clone the tree
    let treeRoot = _.cloneDeep(state.root)
    let loaded = false
    //......................................
    // Find the node
    let node;
    if(!_.isUndefined(id)) {
      node = Ti.Trees.getNodeById(treeRoot, id)
    }
    // By Path
    else {
      node = Ti.Trees.getNodeByPath(treeRoot, path)
    }
    //......................................
    // Guard
    if(!node) {
      return
    }
    //......................................
    // Reload self
    if(self) {
      let nodeMeta = await Wn.Io.loadMetaById(node.id)
      node.rawData = nodeMeta
      loaded = true
    }
    //......................................
    // Define the loading
    const __load_subs = async (node, depth)=>{
      if(depth > 0 && !node.leaf) {
        depth --;
        if(force || _.isEmpty(node.children)) {
          let children = []
          let {list} = await Wn.Io.loadChildren(node.rawData)
          for(let li of list) {
            let sub = Wn.Util.wrapTreeNode(li)
            await __load_subs(sub, depth)
            children.push(sub)
          }
          node.children = children
          return true
        }
      }
      return false
    }
    //......................................
    // Do load
    loaded |= await __load_subs(node, depth)
    //......................................
    // Update the whole tree
    if(loaded) {
      commit("setRoot", treeRoot)
    }
  },
  //----------------------------------------
  /***
   * Reload site root node, and reload the first leave
   */
  async reloadRoot({state, commit, dispatch}, meta) {
    let root = Wn.Util.wrapTreeNode(meta)

    // Update Root Node
    commit("setRoot", root)

    // Reload Root Node
    await dispatch("reloadNode")

    // Reload The Opened Node
    if(!_.isEmpty(state.root.children)) {
      let keys = _.keys(state.openedNodePaths).sort()
      for(let key of keys) {
        let hie = Ti.Trees.getByPath(state.root, key)
        if(hie && !hie.node.leaf) {
          //console.log("reloadNode", hie.path)
          await dispatch("reloadNode", {
            path : hie.path
          })
        }
      }
    }

    // Append The Current Node
    // if(state.currentId) {
    //   // Check if it had already loaded
    //   let hie = Ti.Trees.getNodeById(state.root, state.currentId)
    //   // Do reload it
    //   if(!hie) {
    //     let meta = await Wn.Io.loadMetaById(state.currentId)
    //     await dispatch("appendNode", meta)
    //   }
    // }
  }
  //----------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'm-thing.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/thing/m-thing.mjs'] = (function(){
//---------------------------------------
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////
  getters : {
    hasCurrent(state) {
      return state.current && state.current.meta
    },
    isInRecycleBin(state) {
      return state.search.inRecycleBin
    }
  },
  ////////////////////////////////////////////
  mutations : {
    setMeta(state, meta) {
      state.meta = meta
    },
    setCurrentDataDir(state, dirName) {
      state.currentDataDir = dirName
      if(state.meta) {
        let localDirNameKey = `${state.meta.id}_dirname`
        Ti.Storage.session.set(localDirNameKey, dirName)
      }
    },
    setCurrentDataHome(state, dataHome) {
      state.currentDataHome = dataHome
    },
    setCurrentDataHomeObj(state, dataHomeObj) {
      state.currentDataHomeObj = _.cloneDeep(dataHomeObj)
    },
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    },
    syncStatusChanged(state){
      if(state.current) {
        //console.log("do sync")
        state.status.changed = state.current.status.changed
      }
    }
  }
  ////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'form-group.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/form/com/form-group/form-group.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////
  computed : {
    //----------------------------------------
    TopClass() {
      let klass = [`as-${this.viewportMode}`]
      if(this.className) {
        klass.push(this.className)
      }
      return klass
    },
    //----------------------------------------
    show() {
      return {
        title : this.title ? true : false,
        icon  : this.icon  ? true : false
      }
    }
    //----------------------------------------
  }
  ///////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'rich-tinymce-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/rich-tinymce-props.mjs'] = (function(){
const _M = {
  //...............................................
  // Data
  //...............................................
  "mediaBase" : {
    type : String,
    default : undefined
  },
  "value" : {
    type : String,
    default : undefined
  },
  //...............................................
  // Behavior
  //...............................................
  // Ext-toolbar item defination
  "toolbar" : {
    type : [Boolean, Array, String],
    default : true
  },
  "plugins" : {
    type : Array,
    default : ()=>[]
  },
  "pluginUrl" : {
    type : [String, Function],
    default : undefined
  },
  "readonly" : {
    type : Boolean,
    default : false
  },
  "tinyConfig" : {
    type : Object,
    default: ()=>({})
  },
  "tinySetup" : {
    type : Function,
    default : undefined
  },
  //...............................................
  // Aspact
  //...............................................
  "lang" : {
    type : String,
    default : "zh-cn"
  },
  "placeholder" : {
    type : String,
    default : "i18n:blank"
  },
  "theme" : {
    type : String,
    default : "light"
  },
  "loadingAs" : {
    type : Object,
    default : ()=>({
      className : "as-nil-mask as-big-mask",
      icon : undefined,
      text : undefined
    })
  },
  "blankAs" : {
    type : Object,
    default : ()=>({
      comType : "TiLoading",
      comConf : {
        className : "as-nil-mask as-big-mask",
        icon : "fas-coffee",
        text : null
      }
    })
  }
}
return _M;;
})()
// ============================================================
// EXPORT 'table-row.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/table/com/table-row/table-row.mjs'] = (function(){
/////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////
  props : {
    "indent" : {
      type : Number,
      default : 0
    },
    "icon" : {
      type : [Boolean, String],
      default : null
    },
    "fields" : {
      type : Array,
      default : ()=>[]
    },
    "rowNumberBase" : {
      type : Number,
      default : undefined
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    TopClass() {
      return this.getListItemClass({
        "is-fake"   : this.item.fake
      }, `row-indent-${this.indent}`)
    },
    //-----------------------------------------------
    hasRealIcon() {
      return this.icon && _.isString(this.icon)
    },
    //-----------------------------------------------
    hasRowNumber() {
      return _.isNumber(this.rowNumberBase)
    },
    //-----------------------------------------------
    RowNumber() {
      if(this.hasRowNumber) {
        return this.rowNumberBase + this.index
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    OnClickIcon($event) {
      this.$notify("icon", {
        rowId  : this.rowId,
        shift  : $event.shiftKey,
        toggle : ($event.ctrlKey || $event.metaKey)
      })
    }
    //-----------------------------------------------
  }
  ///////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-transfer-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/transfer/ti-transfer-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  // option() -> all list
  // option(inputing) -> condition list
  "options" : {
    type : [String, Array, Function, Ti.Dict],
    default : ()=>[]
  },
  "valueBy" : {
    type : [String, Function],
    default : undefined
  },
  "textBy" : {
    type : [String, Function],
    default : undefined
  },
  "iconeBy" : {
    type : [String, Function],
    default : undefined
  },
  "value" : undefined,
  // Value format
  // If declare the valueType
  // It will transform the WnObj
  // to relaitve value mode
  "valueType": {
    type: String,
    default: "id",
    validator: v => /^(id|obj|item)$/.test(v)
  },
  // for valueType=="obj", which key is id => value
  // The key is for the primary obj, not the result
  // of mapping translate if you declare the mapping option.
  "idBy": {
    type: String,
    default: "id"
  },
  // for valueType=="obj|item", translate the value
  "mapping": {
    type: Object,
    default: undefined
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "canComType" : {
    type : String,
    default : undefined
  },
  "canComConf" : {
    type : Object,
    default : undefined
  },
  "selComType" : {
    type : String,
    default : undefined
  },
  "selComConf" : {
    type : Object,
    default : undefined
  },
  "filter" : {
    type : Boolean,
    default : true
  },
  "fltComType" : {
    type : String,
    default : "ti-input"
  },
  "fltComConf" : {
    type : Object,
    default : undefined
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "display" : {
    type : [Object, String, Array],
    default : undefined
  },
  "assignButtons" : {
    type : Object,
    default : ()=>({
      add    : "fas-angle-double-right",
      remove : "fas-angle-double-left"
    })
  },
  "canTitle" : {
    type : String,
    default : "i18n:candidate"
  },
  "selTitle" : {
    type : String,
    default : "i18n:checked"
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width" : {
    type : [Number, String],
    default : null
  },
  "height" : {
    type : [Number, String],
    default : null
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-tree.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/tree/ti-tree.mjs'] = (function(){
const TI_TREE = {
  //////////////////////////////////////////
  data : ()=>({
    "myTreeTableData"   : [],
    "myOpenedNodePaths" : {},
    "myCurrentId"       : null
  }),
  //////////////////////////////////////////
  props : {
    "nodeClassName" : {
      type : String,
      default : undefined
    },
    // The list to be rendered
    "data" : {
      type : [Object, Array],
      default : undefined
    },
    "testLoading" : {
      type : [Object, Function],
      default : undefined
    },
    // If date is array
    // it can auto group to tree like structure
    // but I need the obj parent Id
    "autoGroupBy" : {
      type : String,
      default : undefined
    },
    // the key of obj to match children parentId(autoGroupBy)
    "autoGroupIdKey" : {
      type : String,
      default : "id"
    },
    "autoGroupTo" : {
      type : String,
      default : "children"
    },
    "idBy" : {
      type : [String, Function],
      default : "id"
    },
    "nameBy" : {
      type : [String, Function],
      default : "name"
    },
    "childrenBy" : {
      type : [String, Function],
      default : "children"
    },
    "leafBy" : {
      type    : [String, Object, Function],
      default : ()=>({
        "children" : ""
      })
    },
    "loadingNode" : {
      type : Object,
      default : ()=>({
        name : "i18n:loading"
      })
    },
    "emptyNode" : {
      type : Object,
      default : ()=>({
        icon : "fas-braille",
        name : "i18n:empty"
      })
    },
    "title" : {
      type : String,
      default : 'i18n:title'
    },
    "mainWidth" : {
      type : [String, Number],
      default : 'stretch'
    },
    "display" : {
      type : [String, Object, Array],
      default : "name"
    },
    // Default to open the node in depth.
    // the top node depth is 1, which is eqausl the path array length.
    // If 0, it will close all top leavel nodes
    "defaultOpenDepth" : {
      type : Number,
      default : 0
    },
    // Local store to save the tree open status
    "keepOpenBy" : {
      type : String,
      default : null
    },
    "keepCurrentBy" : {
      type : String,
      default : null
    },
    "changedId" : {
      type : String,
      default : null
    },
    "currentId" : {
      type : String,
      default : null
    },
    "checkedIds" : {
      type : Array,
      default : ()=>[]
    },
    "openedNodePaths" : {
      type : Object,
      default : ()=>({})
    },
    "multi" : {
      type : Boolean,
      default : false
    },
    "nodeCheckable" : {
      type : [Object, Function],
      default : undefined
    },
    "nodeSelectable" : {
      type : [Object, Function],
      default : undefined
    },
    "nodeOpenable" : {
      type : [Object, Function],
      default : undefined
    },
    "nodeCancelable" : {
      type : [Object, Function],
      default : undefined
    },
    "nodeHoverable" : {
      type : [Object, Function],
      default : undefined
    },
    "checkable" : {
      type : Boolean,
      default : false
    },
    // select item
    "selectable" : {
      type : Boolean,
      default : true
    },
    "cancelable" : {
      type : Boolean,
      default : true
    },
    "openable" : {
      type : Boolean,
      default : true
    },
    "hoverable" : {
      type : Boolean,
      default : false
    },
    "onNodeSelect" : {
      type : Function,
      default : undefined
    },
    "width" : {
      type : [String, Number],
      default : null
    },
    "puppetMode" : {
      type : Boolean,
      default : false
    },
    "height" : {
      type : [String, Number],
      default : null
    },
    "spacing" : {
      type : String,
      default : "comfy",
      validator : v => /^(comfy|tiny)$/.test(v)
    },
    "autoScrollIntoView" : {
      type : Boolean,
      default : true
    },
    "autoOpen" : {
      type : Boolean,
      default : false
    },
    "showRoot" : {
      type : Boolean,
      default : true
    },
    "nodeHandleIcons" : {
      type : Array,
      default : ()=>[
        "zmdi-chevron-right",
        "zmdi-chevron-down"]
    },
    "border" : {
      type : String,
      default : "column",
      validator : v => /^(row|column|cell|none)$/.test(v)
    },
    // "extendFunctionSet" : {
    //   type : Object,
    //   default : ()=>({})
    // },
    "fields" : {
      type : Array,
      default : ()=>[]
    },
    "blankAs" : undefined
  },
  //////////////////////////////////////////
  watch : {
    
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-selectable"  : this.selectable,
        "is-hoverable"   : this.hoverable
      }, `as-spacing-${this.spacing}`)
    },
    //--------------------------------------
    getNodeId() {
      if(_.isFunction(this.idBy)) {
        return (it)=>this.idBy(it)
      }
      return (it)=>_.get(it, this.idBy)
    },
    //--------------------------------------
    getNodeName() {
      if(_.isFunction(this.nameBy)) {
        return it => this.nameBy(it)
      }
      return it => _.get(it, this.nameBy)
    },
    //--------------------------------------
    isNodeLeaf() {
      if(_.isFunction(this.leafBy)) {
        return it => (this.leafBy(it) ? true : false)
      }
      // Auto Match
      let mat = Ti.AutoMatch.parse(this.leafBy)
      return it => mat(it)
    },
    //--------------------------------------
    isNodeLoading() {
      if(!this.testLoading) {
        return ()=>false
      }
      if(_.isFunction(this.testLoading)) {
        return this.testLoading
      }
      return Ti.AutoMatch.parse(this.testLoading)
    },
    //--------------------------------------
    isNodeCheckable() {
      return this.evalBehaviorsMatcher(this.nodeCheckable, this.checkable)
    },
    //--------------------------------------
    isNodeSelectable() {
      return this.evalBehaviorsMatcher(this.nodeSelectable, this.selectable)
    },
    //--------------------------------------
    isNodeCancelable() {
      return this.evalBehaviorsMatcher(this.nodeCancelable, this.cancelable)
    },
    //--------------------------------------
    isNodeOpenable() {
      return this.evalBehaviorsMatcher(this.nodeOpenable, this.openable)
    },
    //--------------------------------------
    isNodeHoverable() {
      return this.evalBehaviorsMatcher(this.nodeHoverable, this.hoverable)
    },
    //--------------------------------------
    getNodeChildren() {
      if(_.isFunction(this.childrenBy)) {
        return it => this.childrenBy(it)
      }
      return it => _.get(it, this.childrenBy)
    },
    //--------------------------------------
    isTable() {
      return _.isArray(this.fields) && !_.isEmpty(this.fields)
    },
    //--------------------------------------
    TableHead() {
      if(this.isTable) {
        return "frozen"
      }
      return "none"
    },
    //--------------------------------------
    TableFields() {
      let mainCol = {
        title   : this.title,
        width   : this.mainWidth,
        nowrap  : true,
        display : this.display
      }
      if(this.isTable) {
        return _.concat(mainCol, this.fields)
      }
      return [mainCol]
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnTableInit($table) {
      this.$table = $table
    },
    //--------------------------------------
    evalBehaviorsMatcher(cust, dft) {
      let fn;
      if(cust) {
        fn = Ti.AutoMatch.parse(cust)
      }
      return (row)=>{
        if(row.fake)
          return false
        
        let re;
        if(fn)
          re = fn(row)

        return Ti.Util.fallback(re, dft)
      }
    },
    //--------------------------------------
    async evalTreeTableData() {
      // if(_.get(this.data, "value.title"))
      //     console.log("evalTreeTableData", _.get(this.data, "value.title"))
      let tableData = []

      //if(this.showRoot)
      //console.log("evalTreeTableData", this.data)

      // Array push to root
      if(_.isArray(this.data)) {
        let list = this.data
        // Pre group data
        if(this.autoGroupBy) {
          list = this.groupTreeData(list)
        }

        await this.joinTreeTableRow(tableData, {}, null, list)
      }
      // already has root
      else if(this.data){
        await this.joinTreeTableRow(tableData, this.data, null)
      }

      this.myTreeTableData = tableData
    },
    //--------------------------------------
    async joinTreeTableRow(rows=[], item={}, path=[], children) {
      // if(this.showRoot)
      //console.log("joinTreeTableRow", item)
      let self = {}
      //....................................
      // For ROOT
      if(!path) {
        self.name = this.getNodeName(item) || "$ROOT$"
        self.path = []
        self.pathId = "/"
        self.id = Ti.Util.fallbackNil(this.getNodeId(item), self.pathId)
        self.indent = 0
        self.leaf   = false
        self.opened = !this.showRoot
          ? true 
          : Ti.Util.fallback(
              this.myOpenedNodePaths[self.pathId], 
              self.indent < this.defaultOpenDepth);
        self.icon   = self.leaf ? true : this.nodeHandleIcons[self.opened ? 1 : 0]
      }
      // Others node
      else {
        self.name   = this.getNodeName(item)
        self.path   = _.concat(path, self.name)
        self.pathId = self.path.join("/")
        self.id = Ti.Util.fallbackNil(this.getNodeId(item), self.pathId)
        self.indent = self.path.length
        self.leaf   = this.isNodeLeaf(item)
        self.opened = Ti.Util.fallback(
          this.myOpenedNodePaths[self.pathId], 
          self.indent < this.defaultOpenDepth);
        self.icon   = self.leaf ? true : this.nodeHandleIcons[self.opened ? 1 : 0]
      }
      //....................................
      // Join the rawData
      self.rawData = item
      //....................................
      // Add root if necesssary
      if(this.showRoot) {
        rows.push(self)
      }
      // If not show root, minus depth
      else {
        self.indent --
        if(self.indent >= 0) {
          rows.push(self)
        }
      }
      //....................................
      // Join Children
      if(self.opened && !self.leaf) {
        if(!children) {
          children = await this.getNodeChildren(item)
        }
        // Empty or loading node
        if(!_.isArray(children) || _.isEmpty(children)) {
          // Loading node
          if(this.isNodeLoading(self)) {
            rows.push(this.genFakeLoadingNode(self.indent))  
          }
          // Empty node
          else {
            rows.push(this.genFakeEmptyNode(self.indent))
          }
        }
        // Load children
        else {
          for(let child of children) {
            await this.joinTreeTableRow(rows, child, self.path)
          }
        }
      }
      //....................................
    },
    //--------------------------------------
    genFakeLoadingNode(indent=0) {
      return {
        indent  : indent + 2,
        leaf    : true,
        fake    : true,
        icon    : "fas-spinner fa-spin",
        rawData : this.loadingNode
      }
    },
    //--------------------------------------
    genFakeEmptyNode(indent=0) {
      return {
        indent  : indent + 3,
        leaf    : true,
        fake    : true,
        rawData : this.emptyNode
      }
    },
    //--------------------------------------
    groupTreeData(data=[], groupBy=this.autoGroupBy) {
      if(!groupBy)
        return
      // Clone data
      data = _.cloneDeep(data)

      // Build map
      let map = {}
      _.forEach(data, it=>{
        let key = it[this.autoGroupIdKey]
        if(!Ti.Util.isNil(key))
          map[key] = it
      })

      // Group to parent
      // Find the top list (nil value for autoGroupBy)
      let tops = []
      _.forEach(data, it=>{
        let pKey = it[this.autoGroupBy]
        // Group to parent
        if(!Ti.Util.isNil(pKey)) {
          let pIt = map[pKey]
          if(pIt) {
            Ti.Util.pushValue(pIt, this.autoGroupTo, it);
          }
        }
        // Join to tops
        else {
          tops.push(it)
        }
      })

      // done
      if(!_.isEmpty(tops))
        return tops

      return data
    },
    //--------------------------------------
    findTableRow(rowId) {
      if(!Ti.Util.isNil(rowId)) {
        for(let row of this.myTreeTableData) {
          if(row.id == rowId) {
            return row
          }
        }
      }
    },
    //--------------------------------------
    OnCellItemChange({name, value, rowId}={}) {
      //console.log("OnCellItemChange", {name, value, rowId})
      let row = this.findTableRow(rowId)
      if(row) {
        this.$notify("node:item:change", {
          name,
          value,
          node   : row,
          nodeId : rowId,
          data   : row.rawData
        })
      }
    },
    //--------------------------------------
    OnRowSelect({currentId, checkedIds={}}={}) {
      let current, node, selected=[]
      
      // Has selected
      if(currentId) {
        let currentRow;
        for(let row of this.myTreeTableData) {
          if(row.id == currentId) {
            currentRow = row
            current = row.rawData
          }
          if(checkedIds[row.id]) {
            selected.push(row.rawData)
          }
        }
        // Auto Open
        if(currentRow && this.autoOpen) {
          this.openRow(currentRow)
        }
        // Store current Id
        this.myCurrentId = _.get(currentRow, "id")
        node = currentRow
      }
      // Cancel current row
      else {
        this.myCurrentId = null
      }
      // Save local status
      if(this.keepCurrentBy) {
        if(!this.puppetMode) {
          Ti.Storage.session.set(this.keepCurrentBy, this.myCurrentId)
        }
      }

      // Prepare context
      let evtCtxt = {
        node,
        current, selected,
        currentId, checkedIds
      }

      // Callback
      if(_.isFunction(this.onNodeSelect)) {
        this.onNodeSelect.apply(this, [evtCtxt])
      }

      // Emit the value
      this.$notify("select", evtCtxt)
    },
    //--------------------------------------
    OnRowIconClick({rowId}={}) {
      let row = this.findTableRow(rowId)
      // Open it
      if(row && !row.leaf && !row.opened) {
        this.openRow(row)
      }
      // Close it
      else {
        this.closeRow(row)
      }
    },
    //--------------------------------------
    OnRowOpen({id}={}) {
      let row = this.findTableRow(id)
      if(row && !row.leaf && !row.opened) {
        this.openRow(row)
      }
    },
    //--------------------------------------
    openRow(rowOrId) {
      let row = _.isString(rowOrId) 
                  ? this.findTableRow(rowOrId)
                  : rowOrId
      if(row && !row.leaf && !row.opened) {
        this.$set(this.myOpenedNodePaths, row.pathId, true)
        // Notify status changed
        this.$notify("opened", row)
        // Save to Local
        this.saveNodeOpenStatus()
      }
    },
    //--------------------------------------
    selectNodeById(rowId) {
      this.$table.selectRow(rowId)
    },
    //--------------------------------------
    isOpened(rowOrId) {
      let row = _.isString(rowOrId) 
                  ? this.findTableRow(rowOrId)
                  : rowOrId
      return row ? row.opened : false
    },
    //--------------------------------------
    closeRow(rowOrId) {
      let row = _.isString(rowOrId) 
                  ? this.findTableRow(rowOrId)
                  : rowOrId
      if(row && !row.leaf && row.opened) {
        this.$set(this.myOpenedNodePaths, row.pathId, false)
        // Notify status changed
        this.$notify("closed", row)
        // Save to Local
        this.saveNodeOpenStatus()
      }
    },
    //--------------------------------------
    saveNodeOpenStatus() {
      if(this.keepOpenBy) {
        Ti.Storage.session.setObject(this.keepOpenBy, this.myOpenedNodePaths)
      }
      this.$notify("opened-status:changed", this.myOpenedNodePaths)
    },
    //--------------------------------------
    syncOpenedNodePaths() {
      this.myOpenedNodePaths = _.assign({}, this.openedNodePaths)
    },
    //--------------------------------------
    __ti_shortcut(uniqKey) {
      console.log(uniqKey)
      if("ARROWLEFT" == uniqKey) {
        this.closeRow(this.myCurrentId)
      }

      if("ARROWRIGHT" == uniqKey) {
        this.openRow(this.myCurrentId)
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "data" : async function(newVal, oldVal) {
      if(!_.isEqual(newVal, oldVal)) {
        await this.evalTreeTableData()
      }
    },
    "openedNodePaths" : function(newVal, oldVal) {
      if(!_.isEqual(newVal, oldVal)) {
        //console.log("tree openedNodePaths changed")
        this.syncOpenedNodePaths()
      }
    }
  },
  //////////////////////////////////////////
  mounted : async function() {
    //.................................
    this.syncOpenedNodePaths()
    //.................................
    // Ti.Dom.watchDocument("mouseup", this.__on_mouseup)
    // Recover the open status from local store
    if(this.keepOpenBy) {
      this.myOpenedNodePaths = Ti.Storage.session.getObject(this.keepOpenBy)
      if(!this.puppetMode) {
        this.$notify("opened-status:changed", this.myOpenedNodePaths)
      }
    }
    //................................
    // Eval Data
    await this.evalTreeTableData()
    //................................
    // Watch Deep
    this.$watch("myOpenedNodePaths", ()=>{
      this.evalTreeTableData()
    }, {deep:true})
    //................................
    // Recover the current
    if(this.keepCurrentBy) {
      let currentId = Ti.Storage.session.get(this.keepCurrentBy)
      if(!Ti.Util.isNil(currentId)) {
        this.$nextTick(()=>{
          this.$children[0].selectRow(currentId)
        })
      }
    }
    //................................
  },
  //////////////////////////////////////////
  beforeDestroy : function(){
    //Ti.Dom.unwatchDocument("mouseup", this.__on_mouseup)
  }
  //////////////////////////////////////////
}
return TI_TREE;
;
})()
// ============================================================
// EXPORT 'web-pay-proceed.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/pay/proceed/web-pay-proceed.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////////////
  data : ()=>({
    __WS : null,   // The handle of websocket
    myOrder: null,
    isChecking: false,
    myPaypalUrl: ""
  }),
  //////////////////////////////////////////////////
  props : {
    "payType" : {
      type : String,
      default : null
    },
    "items" : {
      type : Array,
      default : ()=>[]
    },
    "orderId" : {
      type : String,
      default : undefined
    },
    "payOk" : {
      type : Boolean,
      default : undefined
    },
    "currency": {
      type: String,
      default: "RMB"
    },
    "address": {
      type: Object,
      default: undefined
    }
  },
  //////////////////////////////////////////////////
  computed : {
    TopClass() {
      return this.getTopClass({
        "has-paytype": this.hasPayType,
        "nil-paytype": !this.hasPayType
      }, `is-${this.PayTypeName}`)
    },
    //----------------------------------------------
    hasPayType() {
      return Ti.Bank.isValidPayType(this.payType)
    },
    //----------------------------------------------
    PayTypeName() {
      if(_.isString(this.payType)) {
        return this.payType.replace(".", "-");
      }
    },
    //----------------------------------------------
    PayTypeText() {
      return Ti.Bank.getPayTypeChooseI18nText(this.payType, {
        text:'pay-step-proceed-tip',
        nil:'pay-step-proceed-nil'
      })
    },
    //----------------------------------------------
    OrderLoadText() {
      return this.orderId
        ? "pay-step-proceed-fetch-order"
        : "pay-step-proceed-create-order"
    },
    //----------------------------------------------
    hasOrder() {
      return !_.isEmpty(this.myOrder)
    },
    //----------------------------------------------
    Payment() {
      return _.get(this.myOrder, "pay_re")
    },
    //----------------------------------------------
    PaymentId() {
      return _.get(this.Payment, "payObjId")
    },
    //----------------------------------------------
    PaymentStatus() {
      return _.get(this.Payment, "status")
    },
    //----------------------------------------------
    PaymentData() {
      return _.get(this.Payment, "data")
    },
    //----------------------------------------------
    PaymentDataType() {
      return _.get(this.Payment, "dataType")
    },
    //----------------------------------------------
    isPaymentCreated() {
      return _.get(this.Payment, "payObjId") ? true : false
    },
    //----------------------------------------------
    isQRCODE() {
      return "QRCODE" == this.PaymentDataType
    },
    //----------------------------------------------
    isIFRAME() {
      return "IFRAME" == this.PaymentDataType
    },
    //----------------------------------------------
    isLINK() {
      return "LINK" == this.PaymentDataType
    },
    //----------------------------------------------
    isJSON() {
      return "JSON" == this.PaymentDataType
    },
    //----------------------------------------------
    isTEXT() {
      return "TEXT" == this.PaymentDataType
    },
    //----------------------------------------------
    PaymentDataAsQrcodeUrl() {
      return `/gu/qrcode?d=${this.PaymentData}&s=${this.qrcodeSize}&_=${Date.now()}`
    },
    //----------------------------------------------
    PayPalLinksMap() {
      let map = {}
      if(this.hasOrder 
        && "paypal" == this.myOrder.pay_tp) {
        _.forEach(this.PaymentData.links, li=> {
          map[li.rel] = li
        })
      }
      return map;
    },
    //----------------------------------------------
    QrcodeImageStyle() {
      return Ti.Css.toStyleRem100({
        width: this.qrcodeSize,
        height: this.qrcodeSize
      })
    },
    //----------------------------------------------
    CheckBtnIcon(){
      if(this.isChecking) {
        return "fas-spinner fa-spin"
      }
      return "zmdi-assignment-check"
    },
    //----------------------------------------------
    CheckBtnText(){
      if(this.isChecking)
        return "i18n:pay-proceed-ing"
      return "i18n:pay-proceed-check"
    }
    //----------------------------------------------
  },
  //////////////////////////////////////////////////
  methods : {
    //----------------------------------------------
    async OnClickCheckBtn() {
      if(_.isFunction(this.checkOrder)) {
        this.isChecking = true
        this.myOrder = await this.checkOrder(this.orderId)
        this.isChecking = false
      }
    },
    //----------------------------------------------
    // Wait for payment be created
    // Maybe the processing still in the MessageQueue
    async checkPayment() {
      if(!this.Payment) {
        _.delay(async ()=>{
          this.myOrder = await this.fetchOrder(this.orderId)
          
          this.$nextTick(()=>{
            this.checkPayment()
          })

        }, this.checkPaymentInterval)
      }
      // With payment, do something special for PayPal
      else {
        this.tryEvalPayPal()
      }
    },
    //----------------------------------------------
    async checkOrCreateOrder() {
      if(this.hasOrder) {
        return await this.checkPayment()
      }
      // Get Back
      if(this.orderId) {
        if(_.isFunction(this.fetchOrder)) {
          this.myOrder = await this.payOrder(this.orderId, this.payType)
        }
      }
      // Create new one
      else {
        if(_.isFunction(this.createOrder)) {
          let payItems = _.map(this.items, it=>({
            id: it.id,
            amount: it.amount || 1,
            cate : it.cate,
            title: it.title,
            price: it.price
          }))
          let order = await this.createOrder({
            payType: this.payType,
            items: payItems,
            orderType: this.orderType,
            orderTitle: this.orderTitle,
            address: this.address,
            fail: (msg)=>{
              this.$emit("change", {
                payOk  : false,
                errMsg : msg
              })
              this.$notify("step:change", "@next")
            }
          })
          this.$emit("change", {orderId: _.get(order, "id")})
          this.myOrder = order
        }
      }

      // If without payment, check it by remote
      return await this.checkPayment()

      // Finally watch the payment change
      //this.watchPaymentChanged();
    },
    //----------------------------------------------
    // PayPal need open a new link
    async tryEvalPayPal() {
      // Open Link for PayPal approve
      if("paypal" == this.payType && this.isPaymentCreated) {
        let href = _.get(this.PayPalLinksMap, "approve.href")
        let link = Ti.Util.parseHref(href)
        let url = `${link.protocol}://${link.host}${link.path}`
        console.log("🤳", {href, link, url})

        if(this.returnUrl) {
          link.params.returnurl = this.returnUrl
        }

        this.myPaypalUrl = link.toString()

        await Ti.Be.Open(url, {
          // params: _.assign({
          //     returnurl: "http://onchina.local.io:8080/page/shop/payok.html"
          //   },link.params),
          params: link.params,
          delay: 1000
        })
      }
    },
    //----------------------------------------------
    watchPaymentChanged() {
      // Guard
      if(this.__WS 
        || !this.watchUser 
        || !this.hasOrder
        || !this.isPaymentCreated) {
        return
      }
      // Watch Remote
      console.log("【🦅】watchPaymentChanged")
      this.__WS = Ti.Websocket.listenRemote({
        watchTo : {
          method : "watch",
          user   : this.watchUser,
          match  : {
            id : this.PaymentId
          }
        },
        received : (wso)=>{
          console.log("【🦅】websocket", wso)
          this.OnClickCheckBtn()
        },
        closed : ()=>{
          this.unwatchPaymentChanged()
        }
      })
    },
    //----------------------------------------------
    unwatchPaymentChanged() {
      if(this.__WS) {
        this.__WS.close();
      }
    }
    //----------------------------------------------
  },
  //////////////////////////////////////////////////
  watch: {
    "PaymentStatus": function(status) {
      // Fail
      if("FAIL" == status) {
        this.$emit("change", {
          payOk: false,
          errMsg: JSON.stringify(this.PaymentData)
        })
        this.$notify("step:change", "@next")
      }
      // OK
      else if("OK" == status) {
        this.$emit("change", {
          payOk: true
        })
        this.$notify("step:change", "@next")
      }
    }
  },
  //////////////////////////////////////////////////
  mounted : function() {
    this.$notify("change:title", this.PayTypeText)
    this.$nextTick(()=>{
      this.checkOrCreateOrder()
    })
  },
  //////////////////////////////////////////////////
  beforeDestroy : function(){
    this.unwatchPaymentChanged()
  }
  //////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'mod-auth-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/lib/www/mod/auth/mod-auth-actions.mjs'] = (function(){
const _M = {
  //--------------------------------------------
  async doCheckMe({commit, dispatch, getters, rootState}, {
    force = false,
    ok, fail, nophone, noemail
  }={}) {
    //console.log("I am doCheckMe", {force, ok, fail, nophone})
    // console.log(" -urls", getters.urls)
    // Guard SiteId
    let siteId  = rootState.siteId
    if(!siteId) {
      Ti.Alert("Without siteId!!!")
      return
    }

    // Get Back the Ticket
    let ticket = Ti.Storage.local.getString(`www-ticket-${siteId}`, "")

    // Check to remote
    commit("setLoading", true, {root:true})
    // Current Session ...
    let reo = getters.sessionState
    // Need to re-checkme from remote
    if(ticket && (force || !reo.ok)) {
      reo = await Ti.Http.get(getters.urls["checkme"], {
        params : {
          site : siteId,
          ticket 
        },
        as : "json"
      })
    }
    commit("setLoading", false, {root:true})
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    // success
    if(reo.ok) {
      //console.log("checkme OK", reo)
      commit("setTicket", reo.data.ticket)
      commit("setExpi",   reo.data.expi)
      commit("setMe",     reo.data.me)

      // Check Phone
      if(nophone) {
        let me = reo.data.me
        if(!me.phone) {
          return await dispatch("doAction", [nophone,reo], {root:true})
        }
      }
      // Check Phone
      if(noemail) {
        let me = reo.data.me
        if(!me.email) {
          return await dispatch("doAction", [noemail,reo], {root:true})
        }
      }

      // Success
      if(ok) {
        return await dispatch("doAction", [ok,reo], {root:true})
      }
    }
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    // Fail
    else if(fail){
      return await dispatch("doAction", [fail,reo], {root:true})
    }
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  },
  //--------------------------------------------
  async autoCheckmeOrAuthByWxghCode({dispatch}, {
    codeKey = "code",
    codeTypeBy = "ct",
    force = false,
    fail, nophone, noemail
  }={}) {
    //console.log("autoCheckmeOrAuthByWxghCode")
    dispatch("doCheckMe", {
      force,
      fail : {
        action : "auth/authByWxghCode",
        payload : {
          codeKey, codeTypeBy,
          //......................................
          fail,
          //......................................
          ok : async (reo={})=>{
            let me = reo.data
            console.log("autoCheckmeOrAuthByWxghCode->ok:me", me)
            if(nophone) {
              if(!me.phone) {
                return await dispatch("doAction", [nophone,reo], {root:true})
              }
            }
            if(noemail) {
              if(!me.email) {
                return await dispatch("doAction", [noemail,reo], {root:true})
              }
            }
          }
          //......................................
        }
      }
    })
  },
  //--------------------------------------------
  async authByWxghCode({commit, dispatch, getters, rootState}, {
    codeKey = "code",
    codeTypeBy = "ct",
    done, ok, fail, invalid, others
  }={}) {
    // Guard code
    let code = rootState.page.params[codeKey]
    if(!code) {
      return
    }

    let codeType = rootState.page.params[codeTypeBy]

    //console.log("authByWxghCode", {codeType, code})

    // Guard SiteId
    let siteId = rootState.siteId
    if(!siteId) {
      Ti.Alert("Without siteId!!!")
      return
    }
    // Eval URL
    let url = getters.urls["login_by_wxcode"]

    let params = {
      site : siteId,
      code : code,
      ct   : codeType
    }

    let reo = await Ti.Http.get(url, {params, as:"json"})
    console.log(reo)

    // Callback: done
    await dispatch("doAction", [done, reo], {root:true})

    // Success
    if(reo.ok && reo.data) {
      // save ticket
      Ti.Storage.local.set(
        `www-ticket-${siteId}`,
        reo.data.ticket
      )
      // Save session info
      commit("setTicket", reo.data.ticket)
      commit("setExpi",   reo.data.expi)
      commit("setMe",     reo.data.me)
      // Callback
      await dispatch("doAction", [ok, reo], {root:true})
    }
    // Fail 
    else {
      // Fail : invalid
      if(/^e.www.login.invalid/.test(reo.errCode)) {
        await dispatch("doAction", [invalid, reo], {root:true})
      }
      // Fail : others
      else {
        await dispatch("doAction", [others, reo], {root:true})
      }
      // Callback
      await dispatch("doAction", [fail, reo], {root:true})
    }
  },
  //--------------------------------------------
  async doAuth({commit, dispatch, getters, rootState}, {
    type="login_by_passwd",
    name, passwd,
    done, ok, fail, noexist, invalid, others
  }={}) {
    // console.log("doAuth", name, passwd)

    // Guard SiteId
    let siteId = rootState.siteId
    if(!siteId) {
      Ti.Alert("Without siteId!!!")
      return
    }

    // Eval URL
    let url = getters.urls[type]

    // Prepare params
    let ticket = Ti.Storage.local.getString(`www-ticket-${siteId}`, "")
    let passKey = ({
      "login_by_passwd" : "passwd",
      "login_by_phone"  : "vcode",
      "login_by_email"  : "vcode",
      "bind_phone"      : "vcode",
      "bind_email"      : "vcode"
    })[type]

    if(!passKey) {
      throw "Unknown auth type: " + type
    }

    let params = {
      site : siteId,
      name, 
      [passKey] : passwd,
      ticket,
      ajax: true
    }

    // Call Remote
    let reo = await Ti.Http.post(url, {params, as:"json"})
    //console.log(reo)

    // Callback: done
    await dispatch("doAction", [done, reo], {root:true})

    // Success
    if(reo.ok && reo.data) {
      // save ticket
      Ti.Storage.local.set(
        `www-ticket-${siteId}`,
        reo.data.ticket
      )
      // Commit session to local
      commit("setTicket", reo.data.ticket)
      commit("setExpi",   reo.data.expi)
      commit("setMe",     reo.data.me)
      // Callback
      await dispatch("doAction", [ok, reo], {root:true})
    }
    // Fail 
    else {
      // Fail : noexist
      if("e.www.login.noexists" == reo.errCode) {
        await dispatch("doAction", [noexist, reo], {root:true})
      }
      // Fail : invalid
      else if(/^e.www.login.invalid/.test(reo.errCode)) {
        await dispatch("doAction", [invalid, reo], {root:true})
      }
      // Fail : others
      else {
        await dispatch("doAction", [others, reo], {root:true})
      }
      // Callback
      await dispatch("doAction", [fail, reo], {root:true})
    }
  },
  //--------------------------------------------
  async doGetVcode({getters, dispatch, rootState}, {
    type="login_by_phone",
    scene="auth",
    account, captcha,
    done, ok, fail, error
  }={}) {
    console.log("getVcode", {type,scene, account, captcha})

    // Guard SiteId
    let siteId = rootState.siteId
    if(!siteId) {
      Ti.Alert("Without siteId!!!")
      return
    }

    // Eval URL
    let api = ({
      "login_by_phone" : "get_sms_vcode",
      "login_by_email" : "get_email_vcode",
      "bind_phone"     : "get_sms_vcode",
      "bind_email"     : "get_email_vcode",
      "phone"          : "get_sms_vcode",
      "email"          : "get_email_vcode"
    })[type]
    let url = getters.urls[api]

    if(!api || !url) {
      return await Ti.Toast.Open(`Invalid type: ${type}`, "error");
    }

    // Prepare params
    let params = {
      site : siteId,
      scene, account, captcha
    }

    // Call Remote
    let reo;
    try{
      reo = await Ti.Http.get(url, {params, as:"json"})
      //console.log(reo)

      // Success
      if(reo.ok && reo.data) {
        await dispatch("doAction", [ok, reo.data], {root:true})
      }
      // Fail 
      else {
        await dispatch("doAction", [fail, reo], {root:true})
      }
    }
    // Error
    catch(err) {
      reo = err
      // Customized error handling
      if(error) {
        await dispatch("doAction", [error, err], {root:true})
      } else {
        await Ti.Alert(err.responseText, "error");
      }
    }
    // Done
    finally {
      // Callback: done
      await dispatch("doAction", [done, reo], {root:true})
    }
  },
  //--------------------------------------------
  async doResetPasswd({getters, dispatch, rootState}, {
    scene="resetpasswd",
    account, vcode, newpwd, oldpwd,
    done, ok, fail
  }={}) {
    //console.log("doResetPasswd", {scene, account, vcode, newpwd, oldpwd})

    // Guard SiteId
    let siteId = rootState.siteId
    if(!siteId) {
      Ti.Alert("Without siteId!!!")
      return
    }

    // Guard Ticket
    let ticket = rootState.auth.ticket
    let me =  rootState.auth.me
    if(!me) {
      Ti.Alert("Without Login!!!")
      return
    }

    // Eval URL
    let url = getters.urls.resetpasswd

    if(!url) {
      console.error("doResetPasswd url is nil")
      return
    }

    // Prepare params
    let params = {
      site : siteId,
      ticket
    }
    let body = {
      account, vcode, newpwd, oldpwd,
    }

    // Call Remote
    let reo = await Ti.Http.post(url, {
      params, 
      body: JSON.stringify(body),
      as:"json"
    }).catch(({responseText})=>{
      return {ok:false, errCode:_.trim(responseText)}
    })
    //console.log(reo)

    // Callback: done
    await dispatch("doAction", [done, reo], {root:true})

    // Success
    if(reo.ok) {
      await dispatch("doAction", [ok, reo], {root:true})
    }
    // Fail 
    else {
      await dispatch("doAction", [fail, reo], {root:true})
    }
  },
  //--------------------------------------------
  async doLogout({state, commit, dispatch, getters, rootState}, {
    done, ok, fail
  }={}) {
    //console.log("doLogout")
    // Guard SiteId
    let siteId = rootState.siteId
    if(!siteId) {
      Ti.Alert("Without siteId!!!")
      return
    }

    // Confirm with user
    if(!(await Ti.Confirm("i18n:auth-logout-confirm"))) {
      return
    }

    // Always force remove
    Ti.Storage.local.remove(`www-ticket-${siteId}`)

    // No Session, ignore
    if(!getters.hasSession) {
      dispatch("invokeAction", fail, {root:true})
      return
    }

    // Eval URL
    let url = getters.urls["logout"]
    let params = {
      site   : siteId,
      ticket : state.ticket
    }

    commit("setLoading", {text:"i18n:logout-ing"}, {root:true})

    // Call Remote
    let reo = await Ti.Http.get(url, {params, as:"json"})
    //console.log(reo)

    commit("setTicket", null)
    commit("setExpi",   0)
    commit("setMe",     null)

    commit("setLoading", false, {root:true})

    // Callback: done
    await dispatch("doAction", [done, reo], {root:true})

    // Success
    if(reo.ok) {
      dispatch("doAction", [ok, reo], {root:true})
    }
    // Fail 
    else {
      dispatch("doAction", [fail, reo], {root:true})
    }
  }
  //--------------------------------------------
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-lbs-map.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/lbs/map/ti-lbs-map.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  inject: {
    '$vars': {default: {}}
  },
  /////////////////////////////////////////
  data : ()=>({
    myUpTime: undefined,  
    myWaitCooling: false,  
    myFullscreen : false,
    myMapCenter: undefined,
    myZoom: undefined,
    myMapType: undefined,
    apiLoaded: false
  }),
  /////////////////////////////////////////
  props : {
    // tencent|baidu|google ...
    "by" : {
      type : String,
      default : "tencent"
    },
    // Map security key pattern 
    // it will find the key from "$vars" which injected to the com.
    // default, if by=google, the mapKey in "$vars" should be "googleMapKey"
    "secretKey": {
      type: String,
      default: "${by}MapKey"
    },
    // All Map api support URL
    // key by 'by' prop
    "apiUrls": {
      type: Object,
      default: ()=>({
        "google": '!js://maps.googleapis.com/maps/api/js?key=${key}'
      })
    },
    // @see https://lbs.qq.com/javascript_v2/doc/maptypeid.html
    // @see http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference_3_0.html#a5b0
    // ROADMAP | SATELLITE | HYBRID | TERRAIN(google only)
    "mapType" : {
      type : String,
      default : "ROADMAP"
    },
    // Sometime, the lat/lng valued by integer
    // this prop defined how to translate them to float
    "autoFloat" : {
      type : Number,
      default : 10000000
    },
    // Map width
    "width" : {
      type : [String, Number],
      default : 400
    },
    // Map height
    "height" : {
      type : [String, Number],
      default : 400
    },
    "zoom" : {
      type : Number,
      default : 8
    },
    // The Coordinate System for input LatLng (center/value...)
    //  - WGS84 : Standard GPS 
    //  - BD09  : for Baidu Map
    //  - GCJ02 : (Mars) QQ/GaoDe/AliYun ...
    "coordinate" : {
      type : String,
      default : "WGS84"
    },
    // A LatLng Point Object or Polygon Array in map
    // Point - Map center will be it
    // Polygon - Auto count the map center
    "value" : {
      type : [Object, Array],
      default : null
    },
    // Display mode
    //  - auto  : base on the value
    //  - point : show marker on map by value
    //  - path  : show path on map by value
    //  - area  : show polygon on map by value
    "mode" : {
      type: String,
      default: "auto",
      validator: v=>/^(auto|point|path|area)$/.test(v)
    },
    "keepStateBy": {
      type: String,
      default: undefined
    },
    "cooling": {
      type: Number,
      default: 1200
    },
    "maxZoom": {
      type: Number,
      default: 22
    },
    "minZoom": {
      type: Number,
      default: 1
    },
    "infoBar": {
      type: Boolean,
      default: true
    },
    "iconSize": {
      type: Object,
      default: undefined
    },
    "iconSizeHoverScale": {
      type: Number,
      default: 1.3
    },
    "boundPadding": {
      type: [Object, Number],
      default: 10
    },
    "pointClickable": {
      type: Boolean,
      default: true
    },
    // Refer by goole map api: gestureHandling
    // https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions
    "gestureHandling": {
      type: String,
      default: "auto",
      validator: v=>/^(cooperative|greedy|none|auto)$/.test(v)
    },
    "clustering": {
      type: Object,
      default: undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //-------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-fullscreen": this.myFullscreen,
        "is-embed": !this.myFullscreen
      })
    },
    //-------------------------------------
    TopStyle() {
      if(!this.myFullscreen) {
        return Ti.Css.toStyle({
          width  : this.width,
          height : this.height
        })
      }
    },
    //-------------------------------------
    TheMapSecretKey() {
      let vnm = Ti.S.renderBy(this.secretKey, this)
      return _.get(this.$vars, vnm)
    },
    //-------------------------------------
    TheMapApiUrl() {
      let url = _.get(this.apiUrls, this.by)
      url = Ti.S.renderBy(url, {key:this.TheMapSecretKey})
      return url
    },
    //-------------------------------------
    TheGestureHandling() {
      if(this.myFullscreen){
        return "greedy"
      }
      return this.gestureHandling
    },
    //-------------------------------------
    ToggleIcon() {
      return this.myFullscreen
        ? "zmdi-fullscreen-exit"
        : "zmdi-fullscreen"
    },
    //-------------------------------------
    MapComType() {
      return `ti-lbs-map-${this.by}`
    },
    //-------------------------------------
    MapComConf() {
      return {
        "secretKey": this.TheMapSecretKey,
        "center"  : this.MapCenter,
        "mapType" : this.myMapType,
        "zoom"    : this.myZoom,
        "maxZoom" : this.maxZoom,
        "minZoom" : this.minZoom,
        "boundPadding": this.boundPadding,
        "gestureHandling" : this.TheGestureHandling,
        "clustering" : this.clustering,
        ...this.MapComConfByMode
      }
    },
    //-------------------------------------
    MapComConfByMode() {
      // Prepare mode functions
      let fns = {
        //.........................
        auto:(val)=>{
          if(_.isArray(val)) {
            return fns.path(val)
          }
          return fns.point(val)
        },
        //.........................
        point:(val)=>{
          // Show markers
          if(_.isArray(val)) {
            return {
              layers: [{
                type: "point",
                items: _.concat(val),
                iconSize: this.iconSize,
                iconSizeHoverScale: this.iconSizeHoverScale,
                clickable: this.pointClickable
              }]
            }
          }
          // Edit mode
          return {
            pinCenter: true
          }
        },
        //.........................
        path:(val)=>{
          if(!val)
            return {}
          return {
            layers: [{
              type: "path",
              items: _.concat(val),
              iconSize: this.iconSize
            }]
          }
        },
        //.........................
        area:(val)=>{
          if(!val)
            return {}
          return {
            layers: [{
              type: "area",
              items: _.concat(val),
              iconSize: this.iconSize
            }]
          }
        }
        //.........................
      }
      return fns[this.mode](this.LalValue)
    },
    //-------------------------------------
    TargetCoordinate() {
      return ({
        "tencent" : "GCJ02",
        "baidu"   : "BD09",
        "ali"     : "GCJ02"
      })[this.by] || "WGS84"
    },
    //-------------------------------------
    LalValue() {
      // Guard
      if(_.isEmpty(this.value)) {
        return {lat:39.908765655793395, lng:116.39748860418158}
      }
      // Polygon
      if(_.isArray(this.value)) {
        let list = []
        for(let it of this.value) {
          let lal = this.genLngLat(it)
          // Transform preview src
          let src = it.src
          if(it.obj, it.preview) {
            src = Ti.WWW.evalObjPreviewSrc(it.obj, it.preview)
          }
          list.push(_.assign({}, it, lal, {src}))
        }
        return list
      }
      // Point
      let lal = this.genLngLat(this.value)
      return _.assign({}, this.value, lal)
    },
    //-------------------------------------
    MapCenter() {
      if(this.myMapCenter) {
        return this.myMapCenter
      }
      // Guard
      if(!this.LalValue) {
        return
      }
      // Polygon
      if(_.isArray(this.LalValue)) {
        return Ti.GPS.getBounds(this.LalValue)
      }
      // Point
      return _.pick(this.LalValue, "lng", "lat")
    },
    //-------------------------------------
    MapActionBar() {
      return {
        items: [{
            className: "big-icon",
            icon: this.myFullscreen
              ? "im-minimize"
              : "im-maximize",
            action: ()=>this.myFullscreen = !this.myFullscreen
          }, {
            icon: "far-map",
            text: "i18n:map-type",
            altDisplay: [{
                icon: "fas-road",
                text: "i18n:map-roadmap",
                match: {myMapType:"ROADMAP"}
              }, {
                icon: "fas-satellite",
                text: "i18n:map-satellite",
                match: {myMapType:"SATELLITE"}
              }, {
                icon: "fas-globe-asia",
                text: "i18n:map-hybrid",
                match: {myMapType:"HYBRID"}
              }, {
                icon: "fas-drafting-compass",
                text: "i18n:map-terrain",
                match: {myMapType:"TERRAIN"}
              }],
            items: [{
                icon: "fas-road",
                text: "i18n:map-roadmap",
                highlight: {myMapType:"ROADMAP"},
                action: ()=>this.myMapType = "ROADMAP"
              }, {
                icon: "fas-globe-asia",
                text: "i18n:map-hybrid",
                highlight: {myMapType:"HYBRID"},
                action: ()=>this.myMapType = "HYBRID"
              }, {
                icon: "fas-satellite",
                text: "i18n:map-satellite",
                highlight: {myMapType:"SATELLITE"},
                action: ()=>this.myMapType = "SATELLITE"
              }, {
                icon: "fas-drafting-compass",
                text: "i18n:map-terrain",
                highlight: {myMapType:"TERRAIN"},
                action: ()=>this.myMapType = "TERRAIN"
              }]
          }, {
            className: "big-icon",
            icon: "im-plus",
            wait: 1200,
            action: ()=>this.zoomMap(1)
          }, {
            className: "big-icon",
            icon: "im-minus",
            wait: 1200,
            action: ()=>this.zoomMap(-1)
          }],
        status: this
      }
    },
    //-------------------------------------
    CoolingIcon() {
      if(this.myUpTime > 0) {
        if(this.myWaitCooling){
          return "fas-spinner fa-spin"
        }
        return "zmdi-check-circle"
      }
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //-------------------------------------
    OnCenterChange(lal) {
      this.myMapCenter = lal
      if(this.MapComConfByMode.pinCenter) {
        this.myUpTime = Date.now()
        if(!this.myWaitCooling) {
          this.checkUpdate()
        }
      }
    },
    //-------------------------------------
    OnZoomChange(zoom) {
      this.myZoom = zoom
      this.saveState({zoom})
    },
    //-------------------------------------
    zoomMap(offset) {
      let zoom = this.myZoom + offset
      if(_.inRange(zoom, this.minZoom, this.maxZoom+1)) {
        this.myZoom = zoom
        this.saveState({zoom})
      }
    },
    //-------------------------------------
    isCoolDown() {
      if(!this.myUpTime) {
        return true
      }
      let du = Date.now() - this.myUpTime
      return du > this.cooling
    },
    //-------------------------------------
    checkUpdate() {
      if(this.isCoolDown()) {
        let lal = _.pick(this.myMapCenter, "lng", "lat")
        //console.log("notify change", lal)
        this.$notify("change", lal)
        this.myWaitCooling = false
        _.delay(()=>{
          this.myUpTime = undefined
        }, 1000)
      }
      // Wait
      else {
        this.myWaitCooling = true
        let du = Date.now() - this.myUpTime
        //console.log("wait cooling", this.cooling, du)
        _.delay(()=>{
          this.checkUpdate()
        }, this.cooling)
      }
    },
    //-------------------------------------
    autoLatLng(val) {
      if(val > 360) {
        return val / this.autoFloat
      }
      return val
    },
    //-------------------------------------
    genLngLat({lat, lng}={}) {
      lat = this.autoLatLng(lat)
      lng = this.autoLatLng(lng)

      // Transform coordinate
      let from = this.coordinate
      let to   = this.TargetCoordinate

      if(from == to) {
        return {lat, lng}
      }

      // find the trans-methods
      let methodName = `${from}_TO_${to}`

      // like `WGS84_TO_BD09` or `WGS84_TO_GCJ02`
      let fn = Ti.GPS[methodName]

      return fn(lat, lng)
    },
    //-------------------------------------
    saveState(st) {
      if(this.keepStateBy) {
        let state = Ti.Storage.session.getObject(this.keepStateBy)
        _.assign(state, st)
        Ti.Storage.session.setObject(this.keepStateBy, state)
      }
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "value": function() {
      if(_.isUndefined(this.myUpTime)) {
        this.myMapCenter = undefined
      }
    },
    "myFullscreen": function(newVal, oldVal) {
      if(!_.isEqual(newVal, oldVal)) {
        this.$notify("change:fullscreen", newVal)
      }
    }
  },
  //////////////////////////////////////////
  created: function() {
    // Init private data
    this.myMapType = this.mapType
    this.myZoom = this.zoom
    if(this.keepStateBy) {
      let state = Ti.Storage.session.getObject(this.keepStateBy)
      this.myMapType = state.mapType || this.mapType
      this.myZoom = state.zoom || this.zoom
    }
  },
  //////////////////////////////////////////
  mounted: async function() {
    // Load Map API
    let url = this.TheMapApiUrl
    if(url) {
      //console.log("TiLoad", url)
      await Ti.Load(url)
      this.apiLoaded = true
    }
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'widget-input-text.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/widget/input/text/widget-input-text.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    myText : undefined
  }),
  ////////////////////////////////////////////////////
  props : {
    //-----------------------------------
    // Data
    //-----------------------------------
    "title" : {
      type : String,
      default : "i18n:comments"
    },
    "value" : {
      type : String,
      default : undefined
    },
    "total" : {
      type : Number,
      default : undefined
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "trimed" : {
      type : Boolean,
      default : true
    },
    "resetAfterPost" : {
      type : Boolean,
      default : false
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "placeholder" : {
      type : [String, Number],
      default : undefined
    },
    "hideBorder" : {
      type : Boolean,
      default : false
    },
    "emojiBtnIcon" : {
      type : String,
      default : "far-smile"
    },
    "emojiBtnText" : {
      type : String,
      default : "i18n:emoji"
    },
    "postBtnIcon" : {
      type : String,
      default : "fas-paper-plane"
    },
    "postBtnText" : {
      type : String,
      default : "i18n:post"
    },
    //-----------------------------------
    // Measure
    //-----------------------------------
    "width" : {
      type : [Number, String],
      default : "100%"
    },
    "height" : {
      type : [Number, String],
      default : "2.6rem"
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return Ti.Css.mergeClassName(this.className, {
        "is-self-actived" : this.isSelfActived,
        "show-border"  : !this.hideBorder,
        "hide-border"  : this.hideBorder
      })
    },
    //------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //------------------------------------------------
    hasTitle() {
      return this.title ? true : false
    },
    //------------------------------------------------
    TextValue() {
      return Ti.Util.fallbackNil(this.myText, this.value)
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnTextChange() {
      let str = this.$refs.text.value
      this.myText = this.formatValue(str)
    },
    //------------------------------------------------
    async OnBtnEmojiClick() {
      // Get Text Range
      let i_start = this.$refs.text.selectionStart
      let i_end = this.$refs.text.selectionEnd

      let emoji = await Ti.App.Open({
        title  : "i18n:emoji",
        width  : "6.4rem",
        height : "4.8rem",
        textOk : null,
        changeToClose : true,
        comType : "TiSheetEmoji",
        comConf : {

        }
      })

      // User Cancel
      if(!emoji)
        return
      
      // Insert emoji
      let str = this.$refs.text.value
      let s_0 = str.substring(0, i_start)
      let s_1 = str.substring(i_end)
      this.myText = s_0 + emoji + s_1;
    },
    //------------------------------------------------
    OnBtnPostClick() {
      let str = this.formatValue(this.$refs.text.value)
      if(str && str.length > 10) {
        this.$notify("post", str)
        if(this.resetAfterPost) {
          this.myText = ""
        }
      }
      // Blank text or content too short
      else {
        Ti.Toast.Open('i18n:post-content-blank', "warn")
      }
    },
    //------------------------------------------------
    formatValue(val) {
      if(val && this.trimed) {
        return _.trim(val)
      }
      return val
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-icon-text.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/icon/text/ti-icon-text.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  ///////////////////////////////////////////////////////
  props : {
    "icon" : {
      type : [String,Object],
      default : ""
    },
    "text" : {
      type : String,
      default : null
    }
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'table-cell.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/table/com/table-row/com/table-cell/table-cell.mjs'] = (function(){
/////////////////////////////////////////////////////
const _M = {
  ///////////////////////////////////////////////////
  inject : ["$table"],
  ///////////////////////////////////////////////////
  data: ()=>({
    isEditingMode : false,
    cellItems : [],
    myCellSize : -1
  }),
  ///////////////////////////////////////////////////
  props : {
    "index" : {
      type : Number,
      default : -1
    },
    "rowId" : {
      type : String,
      default : null
    },
    "rowIndex" : {
      type : Number,
      default : -1
    },
    //..........................
    "title" : {
      type : String,
      default : null
    },
    "nowrap" : {
      type : Boolean,
      default : true
    },
    //..........................
    "display" : {
      type : Array,
      default : ()=>[]
    },
    //..........................
    "name" : {
      type : [String, Array],
      default : null
    },
    "type" : {
      type : String,
      default : "String"
    },
    "dict" : {
      type : String,
      default : "String"
    },
    "comType" : {
      type : String,
      default : null
    },
    "comConf" : {
      type : Object,
      default : ()=>({})
    },
    "serializer" : {
      type : Function,
      default : _.identity
    },
    "transformer" : {
      type : Function,
      default : _.identity
    },
    //..........................
    "data" : {
      type : Object,
      default : ()=>({})
    },
    //..........................
    "isCurrent" : {
      type : Boolean,
      default : false
    },
    "isChecked" : {
      type : Boolean,
      default : false
    },
    //..........................
    "ignoreNil" : {
      type : Boolean,
      default : true
    },
    //..........................
    "focusBy" : {
      type : String,
      default : "focus"
    }
    //..........................
  },
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    TopClass() {
      let hasAlign = this.className && this.className.indexOf("align-")>=0
      return this.getTopClass({
        "has-align" : hasAlign,
        "not-align" : !hasAlign
      })
    },
    //-----------------------------------------------
    WrapperClass() {
      return {
        "is-nowrap" : this.nowrap,
        "is-editing-mode" : this.isEditingMode
      }
    },
    //-----------------------------------------------
    theCurrentDisplayItems() {
      // Edit Mode
      if((this.isActived && this.comType) || _.isEmpty(this.display)) {
        //...........................................
        this.isEditingMode = true
        //...........................................
        let comConf = _.assign({}, this.comConf)
        if(this.focusBy) {
          comConf[this.focusBy] = "${=isActived}"
        }
        //...........................................
        return [{
          comType : this.comType,
          comConf,
          key  : this.name,
          type : this.type,
          dict : this.dict,
          transformer : this.transformer,
          ignoreNil : false
        }]
        //...........................................
      }
      // Display Mode
      this.isEditingMode = false
      return this.display
    },
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    async evalCellDisplayItems() {
      let items = []
      // Eval each items
      for(let i=0; i<this.theCurrentDisplayItems.length; i++) {
        let displayItem = this.theCurrentDisplayItems[i]
        let it = await this.evalDataForFieldDisplayItem({
            itemData : this.data, 
            displayItem, 
            vars : {
              "rowId"     : this.rowId,
              "isCurrent" : this.isCurrent
            },
            autoIgnoreNil : true,
            uniqueKey: `row${this.rowId}-cell${this.index}-${i}`
        })
        if(it) {
          items.push(it)
        }
      }
      //if(0 == this.rowIndex && 1==this.index) {
      //console.log("evalCellDisplayItems", this.rowIndex, this.index)
      //}
      // Update and return
      let old = Ti.Util.pureCloneDeep(this.cellItems)
      let nit = Ti.Util.pureCloneDeep(items)
      if(!_.isEqual(old, nit)) {
        //console.log(`-> Cell[${this.rowIndex}-${this.index}]:`, {old, nit})
        this.cellItems = items
      }
    },
    //-----------------------------------------------
    OnItemChanged(item, payload) {
      this.$table.$notify("cell:item:change", {
        rowId     : this.rowId,
        cellIndex : this.index,
        index     : this.rowIndex,
        name      : item.key,
        value     : payload
      })
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "data" : {
      handler : "evalCellDisplayItems",
      immediate : true
    },
    "isCurrent" : "evalCellDisplayItems"
  }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-text-article.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/text/article/web-text-article.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    //-----------------------------------
    // Data
    //-----------------------------------
    "value": {
      type: String,
      default: undefined
    },
    "type": {
      type : String,
      default : "html",
      validator : v => /^(html|markdown)$/.test(v)
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "apiTmpl": {
      type: String,
      default: undefined
    },
    "cdnTmpl": {
      type: String,
      default: undefined
    },
    "dftImgSrc": {
      type: String,
      default: undefined
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "theme": {
      type : String,
      default: "nice"
    },
    "loadingAs" : {
      type : Object,
      default : ()=>({
        className : "as-nil-mask as-big",
        icon : undefined,
        text : undefined
      })
    },
    "blankAs" : {
      type : Object,
      default : ()=>({
        comType : "TiLoading",
        comConf : {
          className : "as-nil-mask as-big",
          icon : "fas-coffee",
          text : null
        }
      })
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    ArticleClass() {
      return `ti-article-theme-${this.theme}`
    },
    //--------------------------------------
    isLoading() {
      return _.isUndefined(this.value)
    },
    //--------------------------------------
    isBlank() {
      return Ti.S.isBlank(this.value)
    },
    //--------------------------------------
    ArticleHtml() {
      if("html" == this.type) {
        return this.value
      }
      throw `type '${this.type}' not support yet!`
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    redrawContent() {
      // Guard
      if(!_.isElement(this.$refs.main))
        return

      // Create fragment 
      let $div = Ti.Dom.createElement({
        tagName : "div"
      })

      // Prepare HTML
      let html = this.ArticleHtml || ""
      html = html.replace("<script", "[SCRIPT")
      $div.innerHTML = html
      
      // Deal with image
      let $imgs = Ti.Dom.findAll("img[wn-obj-id]", $div);
      for(let $img of $imgs) {
        // Prepare the obj
        let obj = Ti.Dom.attrs($img, (key)=>{
          if(key.startsWith("wn-obj-")) {
            return key.substring(7)
          }
        })
        // Eval the src
        let src = Ti.WWW.evalObjPreviewSrc(obj, {
          previewKey : "..",
          previewObj : "..",
          apiTmpl : this.apiTmpl,
          cdnTmpl : this.cdnTmpl,
          dftSrc : this.dftImgSrc
        })
        $img.src = src
      }

      // Update the article content
      this.$refs.main.innerHTML = $div.innerHTML
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "ArticleHtml" : "redrawContent"
  },
  //////////////////////////////////////////
  mounted: function() {
    this.redrawContent()
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-manager-methods.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['/a/load/wn.manager/wn-manager-methods.mjs'] = (function(){
const _M = {
  //.........................................
  async reloadMain() {
    // Check meta
    let meta = this.meta
    if(!meta) {
      return await Ti.Toast.Open("i18n:wn-manager-no-meta", "warn")
    }

    // Guard loading
    if(this.isLoading) {
      console.log("!!!")
      return await Ti.Toast.Open("i18n:wn-manager-is-loading", "warn")
    }
    // Mark loading
    this.loading = true
    this.comType = "ti-loading"
    this.comConf = {}
    try {
      //....................................
      // then try to unregisterModule safely
      if(this.view && this.view.modType) {
        try{
          this.$store.unregisterModule("main")
        }catch(E){
          console.error("Error when unregisterModule", E)
        }
      }
      //..................................
      // Get back the viewName from hash
      // User can use `#!text-editor` to force open any view
      let m = /^#!(.+)$/.exec(window.location.hash)
      let viewName = m ? m[1] : null

      //..................................
      // Prepare to read view detail from server
      let cmdText;
      if(viewName) {
        cmdText = `ti views -cqn -name '${viewName}'`
      }
      // Query by current object
      else {
        cmdText = `ti views -cqn id:${meta.id}`
      }

      //..................................
      // Load the main view
      let viewInfo = await Wn.Sys.exec2(cmdText, {as:"json"})
      let $app = Ti.App(this)
      let view = await $app.loadView(viewInfo)
      //..................................
      if(Ti.IsInfo("app/wn.manager")) {
        console.log("TiView Loaded:", view)
      }
      //..................................
      // register main module
      if(view && view.modType) {
        //console.log("load main!!!")
        this.$store.registerModule("main", view.mod)
        await $app.dispatch("main/reload", meta)
      }
      //..................................
      this.comType = view.comName
      this.comIcon = view.comIcon
      this.comConf = view.comConf
      this.view = view
      this.myMessage = null
      this.myIndicator = null
      this.mainViewStatus = {}
      this.OnUpdateActions(view.actions)
      this.$nextTick(()=>{
        this.myViewReady = true
      })
    }
    // Clean
    finally {
      this.loading = false
    }
  },
  //.........................................
  async reloadAncestors() {
    if(this.hasMeta) {
      // this.ancestors = await Wn.Io.loadAncestors("id:"+this.MetaId)
      // this.parent = _.last(this.ancestors)
      await Ti.App(this).dispatch("axis/reload", this.meta)
    }
  },
  //.........................................
  async reloadSidebar() {
    let reo = await Wn.Sys.exec("ti sidebar -cqn", {as:"json"});
    this.sidebar = reo.sidebar
    this.sidebarStatusStoreKey = reo.statusStoreKey
  },
  //.........................................
  async reloadPrivilege() {
    this.privilege = await Wn.Sys.exec("www pvg -cqn", {as:"json"});
  },
  //.........................................
  async reloadCurrent() {
    let r0 = Ti.App(this).dispatch("current/reload")
    let r1 = this.reloadSidebar()
    let r2 = this.reloadPrivilege()
    let r3 = this.reloadAncestors()
    return await Promise.all([r0, r1, r2, r3])
  },
  //.........................................
  async execEvent(eventName, payload, dftCommand) {
    let cmd = _.get(this.view.events, eventName) || dftCommand
    await Ti.App(this).exec(cmd, payload)
  },
  //.........................................
  pushHistory(meta) {
    // Push history to update the browser address bar
    let his = window.history
    if(his && meta) {
      // Done push duplicate state
      if(his.state && his.state.id == meta.id){
        return
      }
      // Push to history stack
      let newLink = Wn.Util.getAppLink(meta.id)
      let title =  Wn.Util.getObjDisplayName(meta)
      if(Ti.IsInfo("app/wn-manager")) {
        console.log(title , "->", newLink)
      }
      his.pushState(meta, title, newLink)
      // Update the Title
      document.title = Ti.I18n.text(title);
    }
  }
  //.........................................
}
return _M;;
})()
// ============================================================
// EXPORT 'site-config-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/hmaker/website/mod/site-config/site-config-actions.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //----------------------------------------
  async reload({state, commit}, meta) {
    if(state.status.reloading
      || state.status.saving){
      return
    }

    
  }
  //----------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-input-daterange.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/daterange/ti-input-daterange.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    "runtime" : null,
    "status"  : "collapse"
  }),
  ////////////////////////////////////////////////////
  props : {
    "canInput" : {
      type : Boolean,
      default : true
    },
    "value" : {
      type : [String, Number, Date, Array],
      default : null
    },
    "icon" : {
      type : String,
      default : "fas-calendar-alt"
    },
    "format" : {
      type : String,
      default : "yyyy-MM-dd HH:mm:ss"
    },
    "valueType": {
      type: String,
      default: "ms-range",
      validator: v => /^(ms-(array|range)|ds-(array|range)|date-array)$/.test(v)
    },
    "placeholder" : {
      type : String,
      default : "i18n:blank-date-range"
    },
    "hideBorder" : {
      type : Boolean,
      default : false
    },
    "width" : {
      type : [Number, String],
      default : "3rem"
    },
    "height" : {
      type : [Number, String],
      default : undefined
    },
    "matrixCount" : {
      type : Number,
      default : 2
    },
    "monthFormat" : {
      type : String,
      default : "yyyy-MM-dd" 
    },
    "beginYear" : {
      type : [Number, String],
      default : 1970
    },
    "endYear" : {
      type : [Number, String],
      default : (new Date().getFullYear()+1)
    },
    "statusIcons" : {
      type : Object,
      default : ()=>({
        collapse : "zmdi-chevron-down",
        extended : "zmdi-chevron-up"
      })
    },
    "dropWidth" : {
      type : [Number, String],
      default : null
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName(this.className)
    },
    //------------------------------------------------
    isCollapse() {return "collapse"==this.status},
    isExtended() {return "extended"==this.status},
    //--------------------------------------
    theValue() {
      if(_.isEmpty(this.value)) {
        return null
      }
      if(_.isString(this.value)) {
        let str = _.trim(this.value)
        let m = /^[[(](.+)[\])]$/.exec(str)
        if(m) {
          str = _.trim(m[1])
        }
        let ss = Ti.S.toArray(str, {sep:","})
        if(ss.length > 0) {
          return Ti.Types.toDate(ss);
        }
        return Ti.Types.toDate(str)
      }
      return Ti.Types.toDate(this.value)
    },
    //--------------------------------------
    theDate() {
      if(_.isArray(this.theValue) && !_.isEmpty(this.theValue)) {
        return Ti.Types.toDate(this.theValue[0])
      }
      if(this.theValue) {
        return Ti.Types.toDate(this.theValue)
      }
    },
    //--------------------------------------
    theRangeInMs() {
      if(!this.theDate) {
        return []
      }
      // Move to 00:00:00
      let dt0 = new Date(this.theDate)
      // Define the dt1
      let dt1;
      if(_.isArray(this.theValue) && this.theValue.length > 1) {
        dt1 = Ti.Types.toDate(this.theValue[1])
      }
      // The End of the Day
      else {
        dt1 = new Date(dt0)
      }
      // Make the range
      let msRange = [dt0.getTime(), dt1.getTime()].sort()

      // dt0 start of the day
      dt0 = Ti.DateTime.setTime(new Date(msRange[0]))
      // dt1 end of the day
      dt1 = Ti.DateTime.setDayLastTime(new Date(msRange[1]))

      // rebuild the range
      return [dt0.getTime(), dt1.getTime()]
    },
    //------------------------------------------------
    theRange() {
      if(_.isEmpty(this.theRangeInMs)) {
        return []
      }
      return [
        new Date(this.theRangeInMs[0]), 
        new Date(this.theRangeInMs[1])]
    },
    //------------------------------------------------
    theDropRange() {
      return this.runtime || this.theRange
    },
    //------------------------------------------------
    theRangeValue() {
      return this.formatRangeValue(this.theRange, {
        valueType: "ds-array", 
        format: "yyyy-MM-dd", 
        collapse: true
      }).join(", ")
    },
    //------------------------------------------------
    theRangeText() {
      if(!_.isEmpty(this.theRange)) {
        let dt0 = this.theRange[0]
        let dt1 = this.theRange[1]
        let yy0 = dt0.getFullYear()
        let MM0 = dt0.getMonth()
        let dd0 = dt0.getDate()
        let yy1 = dt1.getFullYear()
        let MM1 = dt1.getMonth()
        let dd1 = dt1.getDate()
        let MA0 = Ti.DateTime.getMonthAbbr(MM0)
        let MA1 = Ti.DateTime.getMonthAbbr(MM1)
        let MT0 = Ti.I18n.get(MA0)
        let MT1 = Ti.I18n.get(MA1)

        MM0++;  MM1++;  // Month change to 1 base

        let vars = {
          yy0, yy1,
          MM0, MM1,
          dd0, dd1,
          MA0, MA1,
          MT0, MT1
        }
        // Beyond year
        if(yy0 != yy1) {
          return Ti.I18n.getf("cal.d-range-beyond-years", vars)
        }
        // Beyond month
        if(MM0 != MM1) {
          return Ti.I18n.getf("cal.d-range-beyond-months", vars)
        }
        // Beyond day
        if(dd0 != dd1) {
          return Ti.I18n.getf("cal.d-range-beyond-days", vars)
        }
        // Same day
        return Ti.I18n.getf("cal.d-range-in-same-day", vars)
      }
    },
    //------------------------------------------------
    theInputValue() {
      if(this.isExtended) {
        return this.theRangeValue
      }
      return this.theRangeText
    },
    //------------------------------------------------
    theStatusIcon() {
      return this.statusIcons[this.status]
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    applyRuntime() {
      if(this.runtime) {
        let rg = this.runtime
        this.runtime = null
        let rg2 = this.formatRangeValue(rg)
        this.$notify("change", rg2)
      }
    },
    //-----------------------------------------------
    doExtend() {
      this.status = "extended"
    },
    //-----------------------------------------------
    doCollapse({escaped=false}={}) {
      this.status = "collapse"
      // Drop runtime
      if(escaped) {
        this.runtime = null
      }
      // Apply Changed for runtime
      else {
        this.applyRuntime()
      }
    },
    //------------------------------------------------
    onInputFocused() {
      this.doExtend()
    },
    //------------------------------------------------
    onChanged(val) {
      let rg = this.parseDateRange(val)
      // Empty Range
      if(_.isEmpty(rg)) {
        this.$notify("change", null);
      }
      // Format the Range
      else {
        let rg2 = this.formatRangeValue(rg)
        this.$notify("change", rg2);
      }
    },
    //------------------------------------------------
    onClickStatusIcon() {
      // extended -> collapse
      if(this.isExtended) {
        this.doCollapse()
      }
      // collapse -> extended
      else {
        this.doExtend()
      }
    },
    //------------------------------------------------
    onDateRangeChanged(rg) {
      this.runtime = rg
    },
    //------------------------------------------------
    parseDateRange(val) {
      // Empty value as null
      if(_.isEmpty(val)) {
        return []
      }
      // Parsed value
      let ss = val.split(",")
      // Empty
      if(_.isEmpty(ss)) {
        return []
      }
      // One date
      if(ss.length == 1) {
        let dt0 = Ti.Types.toDate(ss[0])
        Ti.DateTime.setTime(dt0)
        let dt1 = new Date(dt0.getTime())
        Ti.DateTime.setDayLastTime(dt1)
        return [dt0, dt1]
      }
      // range
      let dt0 = Ti.Types.toDate(ss[0])
      Ti.DateTime.setTime(dt0)
      let dt1 = Ti.Types.toDate(ss[1])
      Ti.DateTime.setDayLastTime(dt1)
      return [dt0, dt1].sort((dt0,dt1)=>{
        return dt0.getTime()-dt1.getTime()
      })
    },
    //------------------------------------------------
    formatRangeValue(range, {
      valueType, format, collapse=false
    }={}) {
      let [d0, d1] = range || []
      if(!d0) {
        return []
      }
      if(!d1) {
        d1 = new Date(d0)
        Ti.DateTime.setDayLastTime(d1)
      }
      valueType = valueType || this.valueType
      format = format || this.format
      // as range
      let func = ({
        "ms-range": ()=>`[${d0.getTime()},${d1.getTime()}]`,
        "ms-array": ()=>[d0.getTime(), d1.getTime()],
        "ds-range": ()=>'[' + [
          Ti.Types.formatDate(d0, format),
          Ti.Types.formatDate(d1, format),
        ].join(",") + ']',
        "ds-array": ()=>[
          Ti.Types.formatDate(d0, format),
          Ti.Types.formatDate(d1, format),
        ],
        "date-array": ()=>[d0, d1]
      })[valueType]
      // As array
      let re = func()

      if(collapse) {
        if(re[0] == re[1])
          return [re[0]]
      }
      return re
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'auth-passwd.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/auth/passwd/auth-passwd.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////////
  data : ()=>({
    "myPassInputType": "password",
    "myForm" : {
      "name"  : null,
      "vcode" : null,
      "passwd_old" : null,
      "passwd_new" : null,
      "passwd_ren" : null
    },
    "myPassTip": -1,
    "myMode"  : "passwd",
    // delay to get the next captcha to prevent robot
    "delay" : -1,
    "myResetResult": null,
    "doing": false
  }),
  ///////////////////////////////////////////////////////
  props : {
    // - "passwd"
    // - "phone"
    // - "email"
    "mode" : {
      type : String,
      default : "passwd"
    },
    "allowModes": {
      type: Object,
      default: ()=>({
        "passwd" : true,
        "phone"  : true,
        "email"  : true
      })
    },
    "captcha" : {
      type : String,
      //required : true,
      default : null
    },
    "scenes" : {
      type : Object,
      default: ()=>({
        "robot"  : "robot",
        "passwd" : "resetpasswd",
        "email"  : "resetpasswd",
        "phone"  : "resetpasswd"
      })
    },
    // The interval of get capche to prevent robot
    // (in second)
    "getDelay" : {
      type : Number,
      default : 60
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //---------------------------------------------------
    PasswdClass() {

    },
    //---------------------------------------------------
    TheAllowModes() {
      return Ti.Util.truthyKeys(this.allowModes)
    },
    //---------------------------------------------------
    isByVode() {
      return "passwd" != this.myMode
    },
    //---------------------------------------------------
    ModeTitle() {
      return `i18n:auth-reset-passwd-by-${this.myMode}`
    },
    //---------------------------------------------------
    VCodeNameTip() {
      return `i18n:auth-reset-passwd-by-${this.myMode}-tip`
    },
    //---------------------------------------------------
    VCodeCodeTip() {
      if("email" == this.myMode) {
        return "i18n:auth-email-vcode"
      }
      return "i18n:auth-phone-vcode"
    },
    //---------------------------------------------------
    VCodeGetTip() {
      if("email" == this.myMode) {
        return "i18n:auth-email-vcode-get"
      }
      return "i18n:auth-phone-vcode-get"
    },
    //---------------------------------------------------
    PasswdInputTypeIcon() {
      return ({
        "password": "fas-eye-slash",
        "text": "fas-eye"
      })[this.myPassInputType]
    },
    //---------------------------------------------------
    AltModes() {
      let list = []
      for(let md of this.TheAllowModes) {
        if(md != this.myMode) {
          list.push({
            text : `i18n:auth-reset-passwd-by-${md}`,
            mode : md
          })
        }
      }
      return list
    },
    //---------------------------------------------------
    hasAltModes() {
      return !_.isEmpty(this.AltModes)
    },
    //---------------------------------------------------
    PasswdTipBar() {
      let items = []
      for(let i=1; i<=5; i++) {
        items.push({
          text: `i18n:passwd-sl-${i}`,
          className: (i>this.myPassTip?"is-off":"is-on")
        })
      }
      return items;
    },
    //---------------------------------------------------
    FormStatus() {
      // passwd: Lake params
      if("passwd" == this.myMode) {
        if(!_.trim(this.myForm.passwd_old)
          || !_.trim(this.myForm.passwd_new)
          || !_.trim(this.myForm.passwd_ren)) {
          return "lack"
        }
      }
      // vcode: Lake params
      else if(!_.trim(this.myForm.name)
          || !_.trim(this.myForm.vcode)
          || !_.trim(this.myForm.passwd_new)
          || !_.trim(this.myForm.passwd_ren)) {
        return "lack"
      }

      // vcode: new password too short
      if(this.myForm.passwd_new.length < 6) {
        return "short"
      }

      // Check the chart, must in 0x21[33](!) - 0x7E[126](~)
      for(let c of this.myForm.passwd_new) {
        let cd = c.charCodeAt(0)
        if(cd > 126 || cd < 33) {
          return "invalid"
        }
      }

      // two password unmatched
      if(this.myForm.passwd_new != this.myForm.passwd_ren) {
        return "unmatch"
      }

      return "ready"
    },
    //---------------------------------------------------
    SubmitBtnText() {
      return `i18n:auth-reset-passwd-btn-${this.FormStatus}`
    },
    //---------------------------------------------------
    SubmitBtnClass() {
      return `is-${this.FormStatus}`
    },
    //---------------------------------------------------
    ResetOK() {
      return _.get(this.myResetResult, "ok") ? true : false
    },
    //---------------------------------------------------
    ResetDoneClass() {
      return this.ResetOK
        ? 'is-ok'
        : 'is-fail'
    },
    //---------------------------------------------------
    ResetDoneIcon() {
      return this.ResetOK
        ? "im-check-mark-circle"
        : "im-warning"
    },
    //---------------------------------------------------
    ResetDoneText() {
      return this.ResetOK
        ? "i18n:auth-reset-passwd-ok"
        : _.get(this.myResetResult, "errCode")
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods :{
    //---------------------------------------------------
    OnChangeMode({mode}) {
      this.myMode = mode
    },
    //---------------------------------------------------
    OnTogglePasswdInputType() {
      this.myPassInputType = ({
        "password": "text",
        "text": "password"
      })[this.myPassInputType]
    },
    //---------------------------------------------------
    OnResetAgain() {
      this.myResetResult=null
      _.assign(this.myForm, {
        "name"  : null,
        "vcode" : null,
        "passwd_old" : null,
        "passwd_new" : null,
        "passwd_ren" : null
      })
    },
    //---------------------------------------------------
    OnSubmit() {
      if("ready" == this.FormStatus) {
        this.doing = true
        this.$notify("passwd:reset", {
          mode  : this.myMode,
          scene :  _.get(this.scenes, this.myMode),
          account : _.trim(this.myForm.name),
          vcode   : _.trim(this.myForm.vcode),
          oldpwd  : _.trim(this.myForm.passwd_old),
          newpwd  : _.trim(this.myForm.passwd_new),
          done: (reo)=>{
            this.doing = false
            this.myResetResult = reo
          }
        })
      }
    },
    //---------------------------------------------------
    async OnGetVcode() {
      let name = _.trim(this.myForm.name)
      if(!name) {
        Ti.Toast.Open(`i18n:auth-reset-passwd-lack-${this.myMode}`, "warn")
        return 
      }

      let vars = {
        scene   : this.scenes.robot,
        account : name
      }

      // Get the captcha
      let src = Ti.S.renderBy(this.captcha, vars)
      let captcha = await Ti.Captcha(src)
      if(!captcha)
        return

      // Mask GUI
      let toast = Ti.Toast.Open({
        icon : "fas-spinner fa-spin",
        content : "i18n:auth-sending-vcode",
        position : "center",
        duration : 0,
        closer : false
      })

      // Process to get vcode
      this.$notify("get:vcode", {
        type: this.myMode,
        scene: _.get(this.scenes, this.myMode),
        account: name,
        captcha,
        done: ()=>{
          toast.close()
          this.myForm.vcode = null
        },
        ok : ({duInMin=60}={})=>{
          this.delay = this.getDelay
          Ti.Toast.Open({
            type : "success",
            position : "top",
            content : "i18n:auth-sent-ok",
            vars : {
              ta  : Ti.I18n.get(`auth-ta-${this.myMode}`),
              by  : Ti.I18n.get(`auth-ta-by-${this.myMode}`),
              min : duInMin
            },
            duration : 5000
          })
        },
        fail : ({errCode, data}={})=> {
          Ti.Toast.Open({
            type : "warn",
            position : "top",
            content : `i18n:${errCode}`,
            duration : 5000
          })
        }
      })
    },
    //---------------------------------------------------
    evalCurrentMode(mode) {
      //console.log("evalCurrentMode", mode)
      // Find the first allowed modes
      if(!_.get(this.allowModes, mode)) {
        if(_.isEmpty(this.TheAllowModes)) {
          throw `mode[${mode}] push me to corner!`
        }
        return _.first(this.TheAllowModes)
      }
      // The mode seems ok
      return mode
    },
    //---------------------------------------------------
    updatePasswordTip(passwd=this.myForm.passwd_new) {
      if(_.isEmpty(passwd) || !_.isString(passwd) || passwd.length < 6) {
        this.myPassTip = -1
        return
      }
      // Score the passwd
      let score = 0
      //  > 8
      if(passwd.length > 8) {
        score += 1
      }
      // Count char type
      let map = {
        a_z: 0,
        A_Z: 0,
        dig: 0,
        spe: 0
      }
      for(let i=0; i<passwd.length; i++) {
        let code = passwd.charCodeAt(i)
        // a-z
        if(code>=97 && code<=122) {
          map.a_z = 1
        }
        // A-Z
        else if(code>=65 && code<=90) {
          map.A_Z = 1
        }
        // 0-9
        else if(code>=48 && code<=57) {
          map.dig = 1
        }
        // Special char
        else if(code>=20 && code<=128){
          map.spe = 1
        }
        // Invalid char
        else {
          this.myPassTip = -2
          return
        }
      }
      // Count score
      score += _.sum(_.values(map))

      this.myPassTip = score
    },
    //---------------------------------------------------
    syncCurrentMode() {
      this.myMode = this.evalCurrentMode(this.mode)
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  watch: {
    "mode": {
      handler: "syncCurrentMode"
    },
    "allowModes": {
      handler: "syncCurrentMode"
    },
    "myForm.passwd_new": "updatePasswordTip"
  },
  ///////////////////////////////////////////////////////
  mounted : function() {
    this.syncCurrentMode()
    // count the secound
    this.__H = window.setInterval(()=>{
      if(this.delay>=0)
        this.delay --
    }, 1000)
  },
  ///////////////////////////////////////////////////////
  beforeDestroy : function() {
    if(this.__H) {
      window.clearInterval(this.__H)
    }
  }
  ///////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'nav-links.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/nav/links/nav-links.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data: ()=>({
    myOpenedIds: {}
  }),
  /////////////////////////////////////////
  props : {
    "align" : {
      type : String,
      default : "left",
      validator: v => /^(left|center|right)$/.test(v)
    },
    "spacing" : {
      type : String,
      validator: v => /^(tiny|comfy|wide)$/.test(v)
    },
    "border" : {
      type : String,
      default : "solid",
      validator: v => /^(none|solid|dashed|dotted)$/.test(v)
    }
  },
  /////////////////////////////////////////
  computed : {
    //------------------------------------
    TopClass() {
      return this.getTopClass(
        `is-spacing-${this.spacing}`,
        `is-align-${this.align}`,
        ()=> {
          if(this.border)
            return `is-border-${this.border}`
        }
      )
    }
    //------------------------------------
  },
  /////////////////////////////////////////
  methods : {
    //------------------------------------
    OnChangeGroupOpened({idPath, opened}) {
      let ids = {}
      for(let id of idPath) {
        ids[id] = true
      }
      if(!opened) {
        ids[_.last(idPath)] = false
      }
      this.myOpenedIds = ids
    }
    //------------------------------------
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-form-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/form/ti-form-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "data" : {
    type : Object,
    default : undefined
  },
  "fields" : {
    type : Array,
    default : ()=>[]
  },
  "fieldStatus" : {
    type : Object,
    default : ()=>({})
  },
  // "extendFunctionSet" : {
  //   type : Object,
  //   default : undefined
  // },
  "onlyFields" : {
    type: Boolean,
    default: true
  },
  // merge each time data change
  "fixed": {
    type: Object,
    default: undefined
  },
  "defaultFieldType" : {
    type : String,
    default : "String"
  },
  "linkFields" : {
    type : Object,
    default : undefined
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "keepTabIndexBy" : {
    type : String,
    default : undefined
  },
  "defaultComType" : {
    type : String,
    default : "ti-label"
  },
  "autoShowBlank" : {
    type : Boolean,
    default : undefined
  },
  "currentTab" : {
    type : Number,
    default : 0
  },
  "adjustDelay" : {
    type : Number,
    default : 0
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "mode" : {
    type : String,
    default : "all",
    validator : (val)=>/^(all|tab)$/.test(val)
  },
  "tabAt" : {
    type : String,
    default : "top-center",
    validator : (v)=>/^(top|bottom)-(left|center|right)$/.test(v)
  },
  "blankAs" : {
    type : Object,
    default : ()=>({
      icon : "fab-deezer",
      text : "i18n:empty"
    })
  },
  "icon" : {
    type : String,
    default : undefined
  },
  "title" : {
    type : String,
    default : undefined
  },
  "statusIcons" : {
    type : Object,
    default : ()=>({
      spinning : 'fas-spinner fa-spin',
      error    : 'zmdi-alert-polygon',
      warn     : 'zmdi-alert-triangle',
      ok       : 'zmdi-check-circle',
    })
  },
  "spacing" : {
    type : String,
    default : "comfy",
    validator : v => /^(comfy|tiny)$/.test(v)
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width" : {
    type : [Number, String],
    default : undefined
  },
  "height" : {
    type : [Number, String],
    default : undefined
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-obj-form-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/form/wn-obj-form-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  "fuse" : {
    type : Object,
    default : ()=>({
      key  : "wn-obj-form",
      noti : undefined
    })
  },
  // {method : "dispatch", target : "main/onChanged"}
  "setDataBy" : {
    type : [String, Object, Boolean],
    default : undefined
  },
  // {method : "dispatch", target : "main/changeMeta"}
  "updateBy" : {
    type : [String, Object, Boolean],
    default : undefined
  },
  // {method : "commit", target : "main/setFieldStatus"}
  "setFieldStatusBy" : {
    type : [String, Object, Boolean],
    default : undefined
  },
  // Load fields setting 
  "fields" : {
    type : [String, Array, Function],
    default : ()=>[]
  },
  // Load fields setting 
  "data" : {
    type : [String, Object],
    default : undefined
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-bullet-checkbox.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/bullet/checkbox/ti-bullet-checkbox.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data: ()=>({
    myTypeName : "ti-radio-list"
  }),
  //////////////////////////////////////////
  props: {
    "bulletIconOn" : {
      type : String,
      default : "fas-check-square"
    },
    "bulletIconOff" : {
      type : String,
      default : "far-square"
    }
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickItem({value}) {
      let vals = []
      _.forEach(this.ItemGroups, grp => {
        _.forEach(grp.items, it => {
          if(this.isItemChecked(it.value, this.value)) {
            if(!_.isEqual(value, it.value)) {
              vals.push(it.value)
            }
          }
          // check it
          else if(_.isEqual(value, it.value)) {
            vals.push(it.value)
          }
        })
      })
      this.$notify("change", vals)
    },
    //--------------------------------------
    isItemChecked(itValue, val) {
      if(_.isUndefined(val) ||  _.isUndefined(itValue)) {
        return false
      }
      if(_.isArray(val)) {
        return _.indexOf(val, itValue) >= 0
      }
      return _.isEqual(itValue, val)
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-gui.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/gui/ti-gui.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////
  provide : function() {
    return {
      "$gui" : this
    }
  },
  /////////////////////////////////////////
  data: ()=>({
    $inner : undefined,
    myShown : {},
    myViewportWidth  : 0,
    myViewportHeight : 0,
    myBlockMap : {}
  }),
  /////////////////////////////////////////
  props : {
    "defaultFlex" : {
      type : String,
      default : undefined,
      validator : (v)=>(_.isUndefined(v) || /^(nil|auto|grow|shrink|both|none)$/.test(v))
    },
    "defaultOverflow" : {
      type : String,
      default : undefined,
      validator : (v)=>(_.isUndefined(v) || /^(auto|none|fill|cover)$/.test(v))
    },
    "defaultComClass": {
      type: String,
      default: "ti-fill-parent"
    },
    "layout" : {
      type : Object,
      default : ()=>({
        desktop : {},
        tablet  : "desktop",
        phone   : "desktop"
      })
    },
    "schema" : {
      type : Object,
      default : ()=>({})
    },
    "keepShownTo" : {
      type : String,
      default : undefined
    },
    "actionStatus" : {
      type : Object,
      default : ()=>({})
    },
    "shown" : {
      type : Object,
      default : ()=>({})
    },
    "shownEmitName" : {
      type : String,
      default : undefined
    },
    "shownNotifyName" : {
      type : String,
      default : undefined
    },
    "canLoading" : {
      type : Boolean,
      default : false
    },
    // value should be prop of ti-loading
    "loadingAs" : {
      type : [Boolean, Object],
      default : undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-loading" : this.isLoading
      })
    },
    //--------------------------------------
    TheLayout() {
      if(_.isEmpty(this.layout))
        return {}
      //....................................
      // Raw layout
      if(/^(rows|cols|tabs)$/.test(this.layout.type)) {
        return this.layout
      }
      //....................................
      // Auto adapt viewMode
      let lay = this.layout[this.viewportMode]
      // Refer onece
      if(_.isString(lay)) {
        lay = this.layout[lay]
      }
      // Refer twice (I think it is enough for most of cases)
      if(_.isString(lay)) {
        lay = this.layout[lay]
      }
      return lay || {}
    },
    //--------------------------------------
    isRowsLayout() {return "rows"==this.TheLayout.type},
    isColsLayout() {return "cols"==this.TheLayout.type},
    isTabsLayout() {return "tabs"==this.TheLayout.type},
    //--------------------------------------
    BlockNames() {
      if(!this.layout) {
        return {}
      }
      return this.joinBlockNames({}, this.layout.blocks)
    },
    //--------------------------------------
    ThePanels() {
      let list = []

      // Join Global Panels
      this.joinThePanels(list, this.layout.panels, "G")

      // Join Current Mode Panels
      if(this.layout != this.TheLayout) {
        this.joinThePanels(list, this.TheLayout.panels, this.viewportMode)
      }

      // Done
      return list
    },
    //--------------------------------------
    TheShown() {
      return this.keepShownTo
        ? this.myShown
        : this.shown
    },
    //--------------------------------------
    isLoading() {
      return this.canLoading 
             && this.loadingAs 
                  ? true 
                  : false
    },
    //--------------------------------------
    TheLoading() {
      if(_.isPlainObject(this.loadingAs)) {
        return this.loadingAs
      }
      return {}
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnMainTypeInit($innerCom) {
      this.$inner = $innerCom
    },
    //--------------------------------------
    joinBlockNames(names={}, blocks=[]) {
      _.forEach(blocks, ({name, blocks}={}) => {
        if(name) {
          names[name] = true
        }
        if(_.isArray(blocks)) {
          this.joinBlockNames(names, blocks)
        }
      })
      return names;
    },
    //--------------------------------------
    isShown(...names) {
      for(let name of names) {
        if(this.TheShown[name])
          return true
      }
      return false
    },
    //--------------------------------------
    joinThePanels(list=[], panels=[], keyPrefix="") {
      if(_.isArray(panels) && panels.length > 0) {
        for(let i=0; i<panels.length; i++) {
          let pan = panels[i]
          let pos = Ti.Util.fallback(pan.position, "center")
          let index = list.length
          list.push({
            index,
            visible   : this.isShown(pan.name),
            key       : pan.name || `panel-${keyPrefix}-${index}`,
            transName : `ti-gui-panel-${pos}`,
            panel     : pan
          })
        }
      }
    },
    //--------------------------------------
    updateShown(shown) {
      this.syncMyShown(shown)
      this.persistMyStatus()
    },
    //--------------------------------------
    OnBlockShow(name) {
      // Update privated status
      if(this.keepShownTo) {
        this.updateShown({[name]:true})
      }
      // Leave it to parent
      else {
        this.$notify("block:show", name)
      }
    },
    //--------------------------------------
    OnBlockHide(name) {
      // Update privated status
      if(this.keepShownTo) {
        this.updateShown({[name]:false})
      }
      // Leave it to parent
      else {
        this.$notify("block:hide", name)
      }
    },
    //--------------------------------------
    OnBlockShownUpdate(shown) {
      //console.log(shown)
      // Update privated status
      if(this.keepShownTo) {
        this.updateShown(shown)
      }
      // Leave it to parent
      else {
        this.$notify("block:shown", shown)
      }
    },
    //--------------------------------------
    filterShown(shown={}) {
      return _.omitBy(shown, (v, k)=>{
        if(!v)
          return true
        if(!this.BlockNames[k])
          return true
        return false
      })
    },
    //--------------------------------------
    syncMyShown(...showns) {
      if(this.keepShownTo) {
        let shown  = _.assign({}, this.myShown, ...showns)
        this.myShown = shown
        if(this.shownEmitName) {
          this.$emit(this.shownEmitName, this.myShown)
        }
  
        if(this.shownNotifyName) {
          this.$notify(this.shownNotifyName, this.myShown)
        }
      }
    },
    //--------------------------------------
    persistMyStatus() {
      if(this.keepShownTo) {
        let shown = this.filterShown(this.myShown)
        Ti.Storage.session.setObject(this.keepShownTo, shown)
      }
    },
    //--------------------------------------
    loadMyStatus() {
      if(this.keepShownTo) {
        let shown = Ti.Storage.session.getObject(this.keepShownTo)
        this.syncMyShown(this.shown, shown)
      }
    },
    //--------------------------------------
    syncViewportMeasure() {
      let rect = Ti.Rects.createBy(this.$el);
      this.myViewportWidth  = rect.width
      this.myViewportHeight = rect.height
    },
    //--------------------------------------
    $block(name) {
      return this.myBlockMap[name]
    },
    //--------------------------------------
    registerBlock(name, $block) {
      //console.log("registerBlock", name, $block.tiComId)
      this.myBlockMap[name] = $block
    },
    //--------------------------------------
    unregisterBlock(name) {
      if(this.myBlockMap[name]) {
        delete this.myBlockMap[name]
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "shown" : function(shown) {
      //console.log("ti-gui shown changed", shown)
      this.syncMyShown(shown)
    }
  },
  //////////////////////////////////////////
  mounted : function() {
    //......................................
    Ti.Viewport.watch(this, {
      resize : _.debounce(()=>this.syncViewportMeasure(), 100)
    })
    //......................................
    this.syncViewportMeasure()
    //......................................
    this.loadMyStatus()
    //......................................
  },
  ///////////////////////////////////////////////////
  beforeDestroy : function(){
    Ti.Viewport.unwatch(this)
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'm-obj-axis-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/obj-axis/m-obj-axis-actions.mjs'] = (function(){
const _M = {
  //----------------------------------------
  async reload({state, commit, dispatch}, meta) {
    if(state.status.reloading){
      return
    }
    //......................................
    // Use the default meta
    if(_.isUndefined(meta)) {
      meta = state.meta
    }
    //......................................
    if(_.isString(meta)) {
      meta = await Wn.Io.loadMeta(meta)
    }
    //......................................
    // Guard
    if(!meta) {
      commit("resetAll")
      return
    }
    // Init content as null
    commit("setStatus", {reloading:true})
    //......................................
    let ans = await Wn.Io.loadAncestors(`id:${meta.id}`)
    //......................................
    // Just update the meta
    commit("setAncestors", ans)
    commit("setMeta", meta)
    commit("setStatus", {reloading:false})
  }
  //----------------------------------------
}
return _M;;
})()
// ============================================================
// EXPORT 'web-shelf-slide.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/shelf/slide/web-shelf-slide.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data: ()=>({
    myCurrentIndex: 0
  }),
  //////////////////////////////////////////
  props : {
    "data" : {
      type : Array,
      default : ()=>[]
    },
    // Item comType
    "comType": {
      type: String,
      default: "ti-label"
    },
    "comConf": {
      type: [Object, String],
      default: ()=>({
        value: "=.."
      })
    },
    "interval": {
      type: Number,
      default: 0
    },
    "idBy" : {
      type: String,
      default : "id"
    },
    "width" : {
      type : [Number, String],
      default : undefined
    },
    "height" : {
      type : [Number, String],
      default : undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //--------------------------------------
    isLeftEnabled() {return true;},
    isRightEnabled() {return true},
    //--------------------------------------
    BtnLeftClass() {
      return {
        "is-enabled"  : this.isLeftEnabled,
        "is-disabled" : !this.isLeftEnabled
      }
    },
    //--------------------------------------
    BtnRightClass() {
      return {
        "is-enabled"  : this.isRightEnabled,
        "is-disabled" : !this.isRightEnabled
      }
    },
    //--------------------------------------
    ItemList() {
      if(!_.isArray(this.data))
        return []
      
      let list = []      
      for(let i=0; i < this.data.length; i++) {
        let it = this.data[i]
        let current = i == this.myCurrentIndex
        let className = current ? "is-current" : null
        let comConf = Ti.Util.explainObj(it, this.comConf)
        list.push({
          key: this.getItemKey(it, i),
          index : i,
          className,
          comType: this.comType,
          comConf
        })
      }
      
      // Get the result
      return list
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickIndicator({index}) {
      this.myCurrentIndex = index
    },
    //--------------------------------------
    getItemKey(it, index) {
      let key = _.get(it, this.idBy)
      return key || `It-${index}`
    },
    //--------------------------------------
    prevItem() {
      let index = Ti.Num.scrollIndex(this.myCurrentIndex-1, this.ItemList.length)
      this.myCurrentIndex = index
    },
    //--------------------------------------
    nextItem() {
      let index = Ti.Num.scrollIndex(this.myCurrentIndex+1, this.ItemList.length)
      this.myCurrentIndex = index
    },
    //--------------------------------------
    autoPlayNextItem() {
      if(this.interval > 0) {
        _.delay(()=>{
          if(!this.mousein) {
            this.nextItem()
          }
          this.autoPlayNextItem()
        }, this.interval * 1000)
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "interval" : function(interv) {
      if(interv > 0) {
        this.autoPlayNextItem()
      }
    }
  },
  //////////////////////////////////////////
  mounted() {
    this.autoPlayNextItem();
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-input-color.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/color/ti-input-color.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  data: ()=>({
    hideBorder : false,
    status  : "collapse"
  }),
  ////////////////////////////////////////////////////
  props : {
    "value" : {
      type : [String, Number],
      default : null
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName({
        "is-empty"  : !this.hasValue,
        "is-valued" : this.hasValue,
        "show-border"  : !this.hideBorder,
        "hide-border"  : this.hideBorder,
      }, this.className)
    },
    //------------------------------------------------
    colorStyle() {
      let color = Ti.Types.toColor(this.value, null)
      if(color) {
        return {"background":color.rgba}
      }
    },
    //------------------------------------------------
    isCollapse() {return "collapse"==this.status},
    isExtended() {return "extended"==this.status},
    //------------------------------------------------
    hasValue() {
      return !Ti.Util.isNil(this.value)
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    onToggleDrop() {
      this.status = ({
        "collapse" : "extended",
        "extended" : "collapse"
      })[this.status]
    },
    //------------------------------------------------
    onClearColor() {
      this.$notify("change", null)
    },
    //------------------------------------------------
    onColorChanged(color) {
      let co = Ti.Types.toColor(color)
      this.$notify("change", co ? co.toString() : null)
    },
    //------------------------------------------------
    doCollapse() {
      this.status = "collapse"
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-fileset-config.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/fileset/config/wn-fileset-config.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data: ()=>({
    myHomeDir : undefined
  }),
  ////////////////////////////////////////////////////
  props : {
    // relative path to "meta"
    "dirHome" : {
      type : String,
      default : undefined
    },
    "mainConf" : {
      type : Object,
      default : ()=>({})
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    FilesetListConf() {
      return {
        meta : "=meta",
        ... this.mainConf
      }
    }    
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnTabsInit($tabs) {
      this.$tabs = $tabs
    },
    //------------------------------------------------
    doCreate(payload) {
      let $mcom = this.$tabs.$MainCom()
      if($mcom) {
        $mcom.doCreate(payload)
      }
    },
    //------------------------------------------------
    doDelete(payload) {
      let $mcom = this.$tabs.$MainCom()
      if($mcom) {
        $mcom.doDelete(payload)
      }
    },
    //------------------------------------------------
    doRename(payload) {
      let $mcom = this.$tabs.$MainCom()
      if($mcom) {
        $mcom.doRename(payload)
      }
    },
    //------------------------------------------------
    async openCurrentMeta() {
      let $mcom = this.$tabs.$MainCom()
      if($mcom && $mcom.hasCurrent) {
        return await $mcom.openCurrentMeta()
      }
      await Ti.App(this).dispatch("current/openMetaEditor")
    },
    //------------------------------------------------
    async reloadAll() {
      Ti.App(this).commit("current/setStatus", {reloading:true})
      // Reload self
      await this.reload()

      // Reload tabs
      await this.$tabs.reload()

      // Reload main
      let $mcom = this.$tabs.$MainCom()
      if($mcom) {
        await $mcom.reload()
      }
      Ti.App(this).commit("current/setStatus", {reloading:false})
    },
    //------------------------------------------------
    async reload() {
      if(this.meta && this.meta.id) {
        //console.log("reload", this.meta.ph, this.viewReady)
        if(this.dirHome) {
          let ph = `id:${this.meta.id}/${this.dirHome}`
          this.myHomeDir = await Wn.Io.loadMeta(ph)
        }
        // Meta is dirHome
        else {
          this.myHomeDir = this.meta
        }
      }
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'formed_list_methods.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/support/formed_list_methods.mjs'] = (function(){
//////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  //......................................
  isSelectedItem(it={}, {value=null, multi=false}={}) {
    if(multi) {
      return _.isArray(value) && _.indexOf(value, it.value) >= 0
    }
    return _.isEqual(value, it.value)
  },
  //......................................
  normalizeData(list=[], {
    emptyItem=null,
    multi=false,
    value=null,
    focusIndex=-1,
    mapping=null,
    defaultIcon=null,
    iteratee=null,
    defaultTipKey=null
  }={}) {
    //console.log("normalizeData", iteratee)
    let index = 0
    let reList = []
    //.........................................
    // Single mode, join the empty item
    if(!multi && emptyItem) {
      let emIt = _.cloneDeep(emptyItem)
      emIt.selected = 
        _.isUndefined(emIt.value)||_.isNull(emIt.value)
          ? _.isNull(value)
          : this.isSelectedItem(emIt, {value, multi})
      if(_.isFunction(iteratee))
        emIt = iteratee(emIt, index) || emIt
      reList.push(emIt)
      index++
    }
    //.........................................
    // Format the list
    let list2 = []
    if(_.isArray(list)) {
      let theMapping = mapping
        ? _.defaults({...mapping}, {
            icon     : "icon",
            text     : "text",
            value    : "value",
            tip      : "tip"
          })
        : null
      for(let it of list) {
        // Plain Object
        if(_.isPlainObject(it)) {
          let it2
          // Mapping
          if(theMapping) {
            it2 = Ti.Util.translate(it, theMapping)
          }
          // Clone
          else {
            it2 = _.cloneDeep(it)
          }
          // Apply Default Tip
          if(!it2.tip && defaultTipKey) {
            it2.tip = it[defaultTipKey]
          }
          // Join to list
          list2.push(it2)
        }
        // Simple value
        else {
          list2.push({
            icon  : defaultIcon,
            text  : Ti.Types.toStr(it),
            value : it
          })
        }
      }
    }
    //.........................................
    // Tidy it
    for(let i=0; i<list2.length; i++) {
      let li = list2[i]
      // Mark index
      li.index = i
      li.focused = (i == focusIndex)
      // Mark icon
      li.icon = li.icon || defaultIcon
      
      // decide select: by self
      li.selected = this.isSelectedItem(li, {value, multi})
      
      // Customized
      if(_.isFunction(iteratee)) {
        list2[i] = iteratee(li, i) || li
      }
    }
    //console.log(reList)
    return list2
  },
  //------------------------------------------------
  matchItemByKey(item={}, key="value", mode="equal", val) {
    let itemValue = item[key]
    // find method by mode
    let fnCall = ({
      "equal"   : ()=>_.isEqual(itemValue, val),
      "starts"  : ()=>_.startsWith(itemValue, val),
      "contains": ()=>{
        if(_.isString(itemValue)) {
          return itemValue.indexOf(val+"") >= 0
        }
        _.indexOf(itemValue, val)>=0
      },
    })[mode]
    // Do the invoking
    if(_.isFunction(fnCall)) {
      return fnCall()
    }
    return false
  },
  //------------------------------------------------
  findItemInList(str, {
    list = [], 
    matchValue = "equal",
    matchText  = "off"
  }={}) {
    if(_.isArray(list) && !_.isEmpty(list)) {
      for(let li of list) {
        if(this.matchItemByKey(li, "value", matchValue, str)) {
          return li
        }
        if(this.matchItemByKey(li, "text", matchText, str)) {
          return li
        }
      }
    }
    return null
  },
  //------------------------------------------------
  // multi  : Array
  // single : Number
  getSelectedItemIndex(formedList, {value=null, multi=false}={}) {
    let re = []
    let sls = {value, multi}
    for(let i=0; i<formedList.length; i++) {
      let li = formedList[i]
      if(this.isSelectedItem(li, sls)) {
        if(!this.multi)
          return i
        re.push(i)
      }
    }
    if(_.isEmpty(re) && !multi) {
      return -1
    }
    return re
  },
  //......................................
  // async tryReload({loaded=false, cached=true}={}){
  //   if(!loaded || !cached) {
  //     await this.reload()
  //     return
  //   }
  //   // Return the blank Promise
  //   return new Promise((resolve)=>{
  //     resolve()
  //   })
  // },
  // //......................................
  // async doReload(options=[], vars) {
  //   vars = Ti.Util.fallback(vars, this.value)
  //   let list = []
  //   // Dynamic value
  //   if(_.isFunction(options)) {
  //     list = await options(vars)
  //     if(!_.isArray(list)){
  //       return []
  //     }
  //   }
  //   // Static value
  //   else if(_.isArray(this.options)){
  //     list = [].concat(this.options)
  //   }
  //   return list
  // }
  //......................................
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'crumb-item.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/crumb/com/crumb-item/crumb-item.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  props : {
    "index" : {
      type : Number,
      default : -1
    },
    "atLast" : {
      type : Boolean,
      default : false
    },
    "icon" : {
      type : [String, Object],
      default : null
    },
    "text" : {
      type : String,
      default : null
    },
    "href" : {
      type : String,
      default : null
    },
    "value" : {
      type : [String, Number, Boolean, Object],
      default : null
    },
    "pathIcon" : {
      type : String,
      default : null
    },
    "asterisk" : {
      type : Boolean,
      default : false
    },
    "cancelBubble" : {
      type : Boolean,
      default : true
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return Ti.Css.mergeClassName({
        "at-tail" : this.atLast,
        "at-path" : !this.atLast,
        "is-asterisk" : this.asterisk
      }, this.className)
    },
    //------------------------------------------------
    TextClass() {
      return {
        "without-icon"    : !this.hasIcon && !this.removeIcon
      }
    },
    //------------------------------------------------
    hasIcon() {
      return this.icon ? true : false
    },
    //------------------------------------------------
    TheText() {
      return Ti.I18n.text(this.text);
    },
    //------------------------------------------------
    TheData() {
      return {
        index    : this.index,
        icon     : this.icon,
        text     : this.text,
        value    : this.value,
        href     : this.href,
        atLast   : this.atLast,
        asterisk : this.asterisk
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnClickTop($event) {
      // Show Drop Down
      if(this.hasOptions) {
        $event.stopPropagation()
        this.openDrop()
      }
      // Stop Bubble Up
      else if(this.cancelBubble) {
        $event.stopPropagation()
      }
      // Emit event
      if(this.href) {
        this.$notify("item:active", this.TheData)
      }
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-slide-bar.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/slide/bar/ti-slide-bar.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////////
  data : ()=>({
    myHdlLeft : 0,
    myValue : undefined
  }),
  ///////////////////////////////////////////////////////
  props : {
    //-----------------------------------
    // Data
    //-----------------------------------
    "value" : {
      type : Number,
      default : undefined
    },
    "maxValue" : {
      type : Number,
      default : 1
    },
    "minValue" : {
      type : Number,
      default : 0
    },
    "markBegin" : {
      type : Number,
      default : undefined
    },
    "markEnd" : {
      type : Number,
      default : undefined
    },
    "precision" : {
      type : Number,
      default : 2
    },
    "format" : {
      type : [Function, String],
      default : undefined
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    // 0 : notify when dragging done
    // > 0 : notify during dragging with throttle
    "notifyFrequency" : {
      type : Number,
      default : 0
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "prefixText" : {
      type : [Boolean, String],
      default : true,
      validator: v=>(_.isBoolean(v) || /^(current|min|none)$/.test(v))
    },
    "suffixText" : {
      type : [Boolean, String],
      default : true,
      validator: v=>(_.isBoolean(v) || /^(current|max|none)$/.test(v))
    },
    //-----------------------------------
    // Measure
    //-----------------------------------
    "textWidth" : {
      type : [Number, String],
      default : undefined
    },
    "barHeight" : {
      type : [Number, String],
      default : undefined
    },
    "width" : {
      type : [Number, String],
      default : undefined
    },
    "height" : {
      type : [Number, String],
      default : undefined
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-show-prefix" : this.isShowPreifx,
        "is-show-suffix" : this.isShowSuffix
      })
    },
    //---------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    },
    //---------------------------------------------------
    TextStyle() {
      return Ti.Css.toStyle({
        width: this.textWidth,
      })
    },
    //---------------------------------------------------
    BarStyle() {
      return Ti.Css.toStyle({
        height: this.barHeight,
      })
    },
    //---------------------------------------------------
    TheValueSize() {
      return Ti.Css.toSize(this.myHdlLeft)
    },
    BarInnerStyle() {
      return {width: this.TheValueSize}
    },
    HandlerStyle() {
      return {left: this.TheValueSize}
    },
    //---------------------------------------------------
    BarMarkStyle() {
      if(_.isNumber(this.markBegin) && _.isNumber(this.markEnd)) {
        let left  = this.calScale(this.markBegin)
        let width = this.calScale(this.markEnd - this.markBegin)
        return Ti.Css.toStyle({
          left, width
        })
      }
    },
    //---------------------------------------------------
    FormatValue() {
      if(_.isString(this.format)) {
        if(this.format.startsWith("=>")) {
          let str = this.format.substring(2).trim()
          return Ti.Util.genInvoking(str, {partial: "right"})
        }
        return (val) => {
          return Ti.S.renderBy(this.format, {val})
        }
      }
      if(_.isFunction(this.format)) {
        return this.format;
      }
      return v=>v
    },
    //---------------------------------------------------
    MaxValueText() {
      return this.FormatValue(this.maxValue)
    },
    //---------------------------------------------------
    MinValueText() {
      return this.FormatValue(this.minValue)
    },
    //---------------------------------------------------
    CurrentValueText() {
      return this.FormatValue(this.myValue)
    },
    //---------------------------------------------------
    TextContext() {
      return {
        current : this.CurrentValueText,
        min     : this.MinValueText,
        max     : this.MaxValueText
      }
    },
    //---------------------------------------------------
    ThePrefixText() {
      if(this.prefixText) {
        if(_.isBoolean(this.prefixText)) {
          return this.CurrentValueText || this.MinValueText
        }
        return _.get(this.TextContext, this.prefixText)
      }
    },
    //---------------------------------------------------
    TheSuffixText() {
      if(this.suffixText) {
        if(_.isBoolean(this.suffixText)) {
          return this.MaxValueText
        }
        return _.get(this.TextContext, this.suffixText)
      }
    },
    //---------------------------------------------------
    isShowPreifx() {return this.textWidth && this.ThePrefixText},
    isShowSuffix() {return this.textWidth && this.TheSuffixText},
    //---------------------------------------------------
    ThrottleSetVal() {
      if(this.notifyFrequency > 0) {
        return _.throttle( scale => {
          this.evalMyVal(scale)
        }, this.notifyFrequency)
      }
    },
    //---------------------------------------------------
    Draggable() {
      return {
        trigger  : ".as-hdl",
        viewport : ".as-con",
        prepare  : ({scaleX})=>{
          let scale = _.clamp(scaleX, 0, 1)
          let value = this.calValue(scale)
          this.$notify("drag:begin", {value, scale})
        },
        dragging : ({scaleX})=>{
          this.evalMyHdlLeft(scaleX)
          if(this.ThrottleSetVal) {
            this.ThrottleSetVal(this.myHdlLeft)
          }
        },
        done : ({scaleX}) => {
          this.evalMyHdlLeft(scaleX)
          this.evalMyVal(scaleX)
          this.$notify("drag:end", {
            value : this.myValue, 
            scale : this.myHdlLeft
          })
        }
      }
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods : {
    //---------------------------------------------------
    OnClickBar(evt) {
      if(evt.srcElement == this.$refs.hdl) {
        return
      }
      let {left, width} = Ti.Rects.createBy(this.$refs.con)
      let clientX = evt.clientX
      let scale = (clientX - left) / width
      this.evalMyHdlLeft(scale)
      this.evalMyVal(scale)
    },
    //---------------------------------------------------
    calScale(val) {
      let sum = this.maxValue - this.minValue
      if(sum != 0)
        return val / sum
    },
    //---------------------------------------------------
    calValue(scale) {
      scale = _.clamp(scale, 0, 1)
      let val = (this.maxValue - this.minValue) * scale
      val = Ti.Num.precise(val, this.precision)
      return val
    },
    //---------------------------------------------------
    evalMyHdlLeft(scale) {
      this.myHdlLeft = _.clamp(scale, 0, 1)
    },
    //---------------------------------------------------
    evalMyVal(scale) {
      this.myValue = this.calValue(scale)
    }
    //---------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    "value" : {
      handler : function(newVal, oldVal) {
        if(newVal != oldVal) {
          newVal = newVal || 0
          let scale = newVal / (this.maxValue - this.minValue)
          this.evalMyHdlLeft(scale)
          this.myValue = newVal
        }
      },
      immediate : true
    },
    "myValue" : function(newVal, oldVal) {
      if(newVal != oldVal 
        && !_.isUndefined(oldVal)
        && newVal != this.value) {
        this.$notify("change", this.myValue)
      }
    }
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-gis-leaflet-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/gis/leaflet/web-gis-leaflet-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "value" : {
    type : [Array, Object]
  },
  // - obj         : {lat, lng} 
  // - obj-list    : [{lat, lng}..]
  // - pair        : [lat, lng]
  // - pair-list   : [[lat, lng]..]
  // - geojson     : {type:"Point"...}
  "valueType" : {
    type : String,
    default : "obj",
    validator: v => /^(geojson|(obj|pair)(-list)?)$/.test(v)
  },
  // - WGS84
  // - GCJ02
  // - BD09
  "valueCoords" : {
    type : String,
    default : "WGS84",
    validator: v => /^(WGS84|GCJ02|BD09)$/.test(v)
  },
  "latlngPrecise" : {
    type : Number,
    default : 5
  },
  "displayType" : {
    type : String,
    default : "Point",
    validator: v => /^(Point|Cluster|Polyline|Polygon|Rectangle|Circle|GeoJson)$/.test(v)
  },
  "circleRadius" : {
    type : Number,
    default : 100   // In meters
  },
  "defaultLocation" : {
    type : Object,
    default : ()=>({
      lat: 39.97773512677837,
      lng: 116.3385673945887
    })
  },
  "objValue" : {
    type : [Array, Object],
    default : undefined
  },
  "objType" : {
    type : String,
    default : "obj",
    validator: v => /^(geojson|(obj|pair)(-list)?)$/.test(v)
  },
  "objDisplay" : {
    type : String,
    default : "Point",
    validator: v => /^(Point|Cluster|Polyline|Polygon|Rectangle|Circle|GeoJson)$/.test(v)
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "minZoom" : {
    type : Number,
    default : 1
  },
  "maxZoom" : {
    type : Number,
    default : 18
  },
  "zoom" : {
    type : Number,
    default : 14
  },
  "keepZoomBy" : {
    type : String,
    default : undefined
  },
  "mapOptions" : {
    type : Object,
    default : ()=>({})
  },
  "editPoint" : {
    type : String,
    default : "none",
    validator : v=>/^(none|drag|pin)$/.test(v)
  },
  "autoFitBounds" : {
    type : Boolean,
    default : true
  },
  "fitBoundsBy" : {
    type : Object,
    default : ()=>({
      padding: [50, 50]
    })
  },
  "showInfo" : {
    type : [Boolean, Object],
    default : ()=>({
      
    })
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "showMarker" : {
    type : Boolean,
    default : false
  },
  "markerIcon" : {
    type : [String, Object],
    //default : "png/map-pin-1.png"
    default : undefined
  },
  "markerIconOptions" : {
    type : Object,
    default: ()=>({})
  },
  // String : html template
  // Array  : list
  // Object : pair table
  // Function : customized HTML
  "markerPopup" : undefined,
  "markerPopupOptions" : {
    type : Object,
    default: ()=>({
      offset : [0, -40]
    })
  },
  "objShowMarker" : {
    type : Boolean,
    default : false
  },
  "objMarkerIcon" : {
    type : [String, Object],
    //default : "png/map-pin-1.png"
    default : undefined
  },
  "objMarkerIconOptions" : {
    type : Object,
    default: ()=>({})
  },
  // String : html template
  // Array  : list
  // Object : pair table
  // Function : customized HTML
  "objMarkerPopup" : undefined,
  "objMarkerPopupOptions" : {
    type : Object,
    default: ()=>({
      offset : [0, -40]
    })
  },
  "imageIconBase" : {
    type : String,
    default : "/gu/rs/ti/icons/"
  },
  "baseTileLayer" : {
    type : String,
    default: "QQ_VECTOR_NOTE"
  },
  "noteTileLayer" : {
    type : String,
    default: null
  },
  "aspect" : {
    type : Object,
    default: ()=>({})
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width" : {
    type : [Number, String],
    default : undefined
  },
  "height" : {
    type : [Number, String],
    default : undefined
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'www-mod-site.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/lib/www/mod/www-mod-site.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////
  getters : {
    //--------------------------------------------
    // Pre-compiled Site Routers
    routerList(state) {
      let list = []
      _.forEach(state.router, ({
        match, names=[], page={}
      }={})=>{
        let regex = new RegExp(match)
        // Pre-compiled
        let li = function(path){
          let m = regex.exec(path)
          // Match page
          if(m) {
            // Build Context
            let context = {}
            for(let i=0; i<m.length; i++) {
              let val = m[i]
              context[i] = val
              let key = _.nth(names, i)
              if(key) {
                _.set(context, key, val)
              }
            }
            // Render page info
            return Ti.Util.explainObj(context, page)        
          }
        }

        // Join to list
        list.push(li)
      })
      return list
    },
    //--------------------------------------------
    globalApis(state) {
      return Ti.WWW.hydrateApi({
        base : state.apiBase,
        siteApis : state.apis,
        apis : state.global
      })
    },
    //--------------------------------------------
    // Site Action Mapping
    actions(state) {
      //console.log("www-mod-site::getters.actions")
      // Global
      let map = _.cloneDeep(state.actions)

      // Evalue the actions
      map = _.mapValues(map, (val)=>
        _.isString(val)
          ? {action:val}
          : val)
      
      // Merge action set with the defination in page
      let page = state.page
      if(page) {
        _.forEach(page.actions, (val, key)=>{
          let act = val
          // format val
          if(_.isString(val)) {
            act = {action : val}
          }

          // do merge
          let gAction = map[key]
          // Array+?
          if(_.isArray(gAction)) {
            // Array+Array
            if(_.isArray(act)) {
              if(act.length > 0) {
                // Concat Array
                if("+" == act[0]) {
                  for(let z=1;z<act.length;z++) {
                    gAction.push(act[z])
                  }
                }
                // Replace Array
                else {
                  map[key] = act      
                }
              }
            }
            // Array+Object -> append
            else {
              gAction.push(act)
            }
          }
          // Object+Any -> replace
          else {
            map[key] = act
          }
        })
      }
      return map
    },
    //--------------------------------------------
    getUrl(state) {
      return (path)=>{
        return Ti.Util.appendPath(state.base, path)
      }
    },
    //--------------------------------------------
    getApiUrl(state) {
      return (path)=>{
        if(path.startsWith("/")) {
          return path
        }
        return Ti.Util.appendPath(state.apiBase, path)
      }
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  mutations : {
    //--------------------------------------------
    setSiteId(state, siteId) {
      state.siteId = siteId
    },
    //--------------------------------------------
    setDomain(state, domain) {
      state.domain = domain
      state.base = Ti.S.renderBy(state.base||"/www/${domain}/", {domain})
      state.apiBase = Ti.S.renderBy(state.apiBase||"/api/${domain}/", {domain})
    },
    //--------------------------------------------
    setLang(state, lang) {
      let as = state.langCase || "snake"
      state.lang = _[`${as}Case`](lang)
      state.langName = _.kebabCase(lang)
    },
    //--------------------------------------------
    explainNav(state) {
      if(state.nav) {
        if(!state.__nav_input) {
          state.__nav_input = _.cloneDeep(state.nav)
        }
        state.nav = Ti.Util.explainObj(state, state.__nav_input)
      }
    },
    //--------------------------------------------
    setData(state, data) {
      state.data = data
    },
    //--------------------------------------------
    updateData(state, {key, value}={}) {
      // kay-value pair is required
      if(!key || _.isUndefined(value)) {
        return
      }
      let vobj = _.set({}, key, value)
      state.data = _.assign({}, state.data, vobj)
    },
    //--------------------------------------------
    updateDataBy(state, {key, value}) {
      if(!key || _.isUndefined(value)) {
        return
      }
      let data = _.cloneDeep(state.data)
      _.set(data, key, value)
      state.data = data
    },
    //--------------------------------------------
    setLoading(state, loading) {
      state.loading = loading
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  actions : {
    //--------------------------------------------
    async __run_gloabl_api({commit, dispatch, state}, {
      api, 
      vars, 
      params, 
      headers, 
      body,
      ok, fail}) {
      //.....................................  
      await Ti.WWW.runApiAndPrcessReturn(state, api, {
        vars, 
        params, 
        headers, 
        body, 
        dispatch,
        ok, fail,
        mergeData : function(payload) {
          commit("mergeData", payload)
        },
        updateData : function(payload) {
          commit("updateData", payload)
        },
        doAction : function(at) {
          dispatch("doAction", at)
        }
      })
    },
    //--------------------------------------------
    /***
     * Reload page data by given api keys
     */
    async reloadGlobalData({state, commit, getters, dispatch}, keys=[]) {
      commit("setLoading", true)
      
      let apis = []
      for(let key of keys) {
        let api = _.get(getters.globalApis, key)
        if(!api) {
          continue;
        }
        //console.log("  # -> page.reloadData -> prepareApi", api)
        if(api.preloadWhen) {
          if(!Ti.AutoMatch.test(api.preloadWhen, state)) {
            continue;
          }
        }
        apis.push(dispatch("__run_gloabl_api", {api}))
      }
      if(!_.isEmpty(apis)) {
        await Promise.all(apis)
      }
      commit("setLoading", false)
    },
    //--------------------------------------------
    //--------------------------------------------
    navBackward() {
      if(window.history) {
        window.history.back()
      }
    },
    //--------------------------------------------
    async openUrl({state}, {
      url, target="_self", method="GET", params={}, delay=0
    }) {
      await Ti.Be.Open(url, {
        target, method, params, delay
      })
    },
    //--------------------------------------------
    // Only handle the "page|dispatch"
    async navTo({commit, dispatch}, {
      type="page",
      value,    // page path
      anchor,   // page anchor
      data,     // page.data
      params    // page.params
    }={}) {
      //console.log("navToPage::", value)
      // Guarding
      if(!value)
        return
      // navTo::page
      if("page" == type) {
        commit("setLoading", true)

        // maybe value is  full url with query string and hash
        let href = Ti.Util.parseHref(value)
        href.anchor = anchor || href.anchor
        href.params = params || href.params
        href.data = data

        // Reload
        //console.log("@page:reload ...", _.cloneDeep(state.auth))
        await dispatch("page/reload", href)
        
        commit("setLoading", false)
        commit("explainNav")
      }
      // navTo::dispatch
      else if("dispatch" == type) {
        await dispatch(value, params)
      }
    },
    //--------------------------------------------
    /***
     * Handle the action dispatching.
     * 
     * One action should be defined in `[page].json#actions`:
     * 
     * ```js
     * {
     *    action : "xx/xx",
     *    payload : {} | [] | ...
     * }
     * ```
     * 
     * @param action{String} - action name like `page/showBlock`
     * @param payload{Object|Array} - action payload, defined in `json` file
     * @param args{Array} - the dynamic information emitted by `[Com].$emit`
     * 
     * @return {void}
     */
    async doAction({dispatch}, AT){
      // Guard nil
      if(!AT) {
        return
      }

      //....................................
      // Raw function
      //....................................
      if(_.isFunction(AT)) {
        return await AT()
      }

      //....................................
      // Combo: [F(), args] or [{action}, args]
      //....................................
      if(_.isArray(AT) && AT.length == 2) {
        let actn = AT[0]
        let args = AT[1]
        // Make sure it is not batch action call
        if(args && !args.action && !_.isFunction(args)) {
          // Force args to array
          if(!_.isUndefined(args) && !_.isArray(args)) {
            args = [args]
          }
          // Normlize action form
          if(_.isFunction(actn)) {
            AT = {
              action: actn,
              args
            }
          }
          // Grouping Action
          else if(_.isArray(actn)) {
            AT = []
            for(let an of actn) {
              AT.push(_.assign({}, an, {args}))
            }
          }
          // Merge
          else {
            AT = _.assign({}, actn, {args})
          }
        }
      }
      //....................................
      // String
      if(_.isString(AT)) {
        AT = {action: AT}
      }

      //....................................
      // Groupping
      if(_.isArray(AT)) {
        for(let a of AT) {
          await dispatch("runAction", a)  
        }
      }
      // Run action
      else {
        await dispatch("runAction", AT)
      }
    },
    //--------------------------------------------
    async runAction({state, dispatch}, {
      action, 
      test,       // AutoMatch
      testMsg="i18n:e-run-action-test-fail",
      confirm,
      payload,
      args
    }={}) {
      //....................................
      if(!action)
        return;

      //....................................
      // Test precondition
      if(test) {
        if(!Ti.AutoMatch.test(test, state)) {
          return await Ti.Toast.Open(testMsg, "warn")
        }
      }
      //....................................
      // Confirm the operation with user
      if(confirm) {
        if(!(await Ti.Confirm(confirm, {type:"warn"}))) {
          return
        }
      }
      //....................................
      args = args || []
      let pld;

      // Use args directrly cause payload without defined
      if(_.isUndefined(payload) || _.isNull(payload)) {
        pld = _.cloneDeep(_.nth(args, 0))
      }
      //....................................
      // Explain payload
      else {
        let context = _.assign({}, state, {
          $args : args
        })
        pld = Ti.Util.explainObj(context, payload, {
          evalFunc : false
        })
      }
      //....................................
      //console.log("invoke->", action, pld)
      //....................................
      if(_.isFunction(action)) {
        await action(pld)
      }
      // Action
      else {
        await dispatch(action, pld)
      }
    },
    //--------------------------------------------
    /***
     * Invoke action by given name
     */
    async invokeAction({getters, dispatch}, {name="", args=[]}={}){
      /*
      The action should like
      {
        action : "xx/xx",
        payload : {} | [] | ...
      } 
      */
      //console.log("invokeAction", name, args)
      let actions = getters.actions;
      let AT = _.get(actions, name)

      // Try fallback
      if(!AT) {
        let canNames = _.split(name, "::")
        while(canNames.length > 1) {
          let [, ...names] = canNames
          let aName = names.join("::")
          AT = _.get(actions, aName)
          if(AT){
            break
          }
          canNames = names
        }
      }

      // Guard
      if(!AT)
        return;
  
      // Invoke it
      try {
        // Batch call
        if(_.isArray(AT)) {
          for(let a of AT) {
            await dispatch("doAction", {
              ... a,
              args
            })
          }
        }
        // Direct call : String
        else if(_.isString(AT)) {
          await dispatch("doAction", {
            action: AT,
            args
          })
        }
        // Direct call : Object
        else {
          await dispatch("doAction", {
            ... AT,
            args
          })
        }
      }
      // For Error
      catch(e) {
        console.error(e)
      }
    },
    //--------------------------------------------
    async reload({state, commit, dispatch, getters}, {loc, lang}={}) {
      console.log("site.reload", state.entry, state.base, state.lang)
      //---------------------------------------
      // Looking for the entry page
      // {href,protocol,host,port,path,search,query,hash,anchor}
      loc = loc || Ti.Util.parseHref(window.location.href)
      //---------------------------------------
      // Format lang to the expect case: snake/kebab/camel
      if(lang) {
        commit("setLang", lang)
      }
      //---------------------------------------
      // Explain nav
      commit("explainNav")
      //---------------------------------------
      // Setup dictionary
      if(state.dictionary) {
        _.forEach(state.dictionary, (dict, name)=>{
          let d = Ti.DictFactory.GetDict(name)
          if(!d) {
            //console.log("create", name, dict)
            Ti.DictFactory.CreateDict({
              //...............................................
              data  : Ti.WWW.genQuery(dict.data, {vkey:null}),
              query : Ti.WWW.genQuery(dict.query),
              item  : Ti.WWW.genQuery(dict.item, {
                blankAs: "{}"
              }),
              children : Ti.WWW.genQuery(dict.children),
              //...............................................
              getValue : Ti.Util.genGetter(dict.value),
              getText  : Ti.Util.genGetter(dict.text),
              getIcon  : Ti.Util.genGetter(dict.icon),
              //...............................................
              shadowed : Ti.Util.fallback(dict.shadowed, true)
              //...............................................
            }, {name})
          }
        })
      }

      // Update the auth
      commit("auth/mergePaths", state.authPaths)

      // Reload the global data
      let {preloads, afterLoads} = Ti.WWW.groupPreloadApis(getters.globalApis)
      //..........................................
      // init global data
      for(let keys of preloads) {
        await dispatch("reloadGlobalData", keys)
      }

      // Eval the entry page
      let entry = state.entry
      if(loc.path.startsWith(state.base)) {
        entry = loc.path.substring(state.base.length) || entry;
      }

      // nav to page
      await dispatch("navTo", {
        type   : "page",
        value  : entry,
        params : loc.params,
        anchor : loc.hash,
        pushHistory : false
      })

      //..........................................
      // Load the after page completed
      if(!_.isEmpty(afterLoads.length)) {
        dispatch("reloadGlobalData", afterLoads)
      }
    }
    //--------------------------------------------
  }
  ////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-gui-side-tree.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/gui/side/tree/wn-gui-side-tree.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data : ()=>({
    myItems : [],
    myTreeData : []
  }),
  /////////////////////////////////////////
  props : {
    "items" : {
      type : Array,
      default : null
    },
    "highlightItemId" : {
      type : String,
      default : null
    },
    "highlightItemPath" : {
      type : String,
      default : null
    }
  },
  //////////////////////////////////////////
  computed : {
    //-------------------------------------
    TreeDisplay() {
      return ['<icon>', {
          key: "text",
          comConf: {
            className: "is-nowrap",
            href: "(value)?/a/open/wn.manager?ph=id:${value}"
          }
        }]
    },
    //-------------------------------------
    HighlightItemId() {
      let list = this.joinHighlightItems([], this.items)
      if(list.length > 0) {
        // Sort the list, 0->N, the first one should be the hightlight one
        list.sort((it0,it1)=>it0.score-it1.score)
        // Get the first one
        return _.first(list).id
      }
    },
    //-------------------------------------
    CheckedIds() {
      if(!this.HighlightItemId) {
        return []
      }
      return [this.HighlightItemId]
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //-------------------------------------
    evalTreeData(items=[]) {
      this.myItems = _.cloneDeep(items)
      let list = []
      if(_.isArray(items)) {
        for(let it of items) {
          list.push(this.evalItemToTreeNode(it))
        }
      }
      //console.log("theTreeData", list)
      this.myTreeData = list
    },
    //-------------------------------------
    evalItemToTreeNode(it={}) {
      // Children
      let children = null
      if(_.isArray(it.items)) {
        children = []
        for(let subIt of it.items) {
          children.push(this.evalItemToTreeNode(subIt))
        }
      }
      // Self
      return {
        name  : it.key,
        text  : it.title,
        icon  : it.icon,
        value : it.id,
        children
      }
    },
    //-------------------------------------
    joinHighlightItems(list=[], items=[]) {
      if(this.highlightItemId && _.isArray(items) && items.length>0) {
        for(let it of items) {
          // Match the ID, 0
          if(it.id == this.highlightItemId) {
            list.push({score:0, id: it.id})
          }
          // Match the Path, 1 or more
          else if(it.path && it.id
              && this.highlightItemPath 
              && this.highlightItemPath.startsWith(it.path)){
            let diff = this.highlightItemPath.length - it.path.length
            list.push({score:1+diff, id: it.id})
          }
          // Join Children
          if(it.items) {
            this.joinHighlightItems(list, it.items)
          }
        }
      }
      // Return self
      return list
    },
    //-------------------------------------
    onItemActived({current={}}={}){
      if(current.value) {
        this.$notify("item:active", {
          id : current.value
        })
      }
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "items" : {
      handler : function(newVal, oldVal){
        if(!_.isEqual(newVal, this.myItems)) {
          this.evalTreeData(newVal)
        }
      },
      immediate : true
    }
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-combo-box.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/box/ti-combo-box.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    box : {
      "position" : null,
      "width"  : null,
      "height" : null,
      "top"    : null,
      "left"   : null
    },
    myDropDockReady : false
  }),
  ////////////////////////////////////////////////////
  props : {
    "keepWidthWhenDrop" : {
      type : Boolean, 
      default : true
    },
    "width" : {
      type : [Number, String],
      default : null
    },
    "height" : {
      type : [Number, String],
      default : null
    },
    "dropFloat": {
      type: Boolean,
      default: true
    },
    "dropWidth" : {
      type : [Number, String],
      default : "box"
    },
    "dropHeight" : {
      type : [Number, String],
      default : null
    },
    "dropOverflow" : {
      type : [String, Array],
      default : "auto",
      validator : (v)=>{
        if(Ti.Util.isNil(v)) {
          return true
        }
        if(_.isString(v)) {
          v = v.split(" ")
        }
        if(_.isArray(v)) {
          if(v.length > 2 || v.length == 0) {
            return false
          }
          for(let s of v) {
            if(!/^(auto|hidden|visible|scroll)$/.test(s)) {
              return false
            }
          }
          return true
        }
        return false
      }
    },
    "status" : {
      type : String,
      default : "collapse",
      validator : (st)=>/^(collapse|extended)$/.test(st)
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return this.getTopClass(`is-${this.status}`)
    },
    //------------------------------------------------
    topStyle() {
      let width;
      if(this.keepWidthWhenDrop)
        width = this.box.width
      let height = this.box.height
      return Ti.Css.toStyle({width, height})
    },
    //------------------------------------------------
    theBoxStyle() {
      if(this.dropFloat) {
        return Ti.Css.toStyle(this.box)
      }
    },
    //------------------------------------------------
    theDropStyle() {
      return Ti.Css.toStyle({
        "overflow" : this.dropOverflow,
        "visibility" : this.myDropDockReady ? "visible" : "hidden"
      })
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    notifyCollapse(escaped=false) {
      this.$notify("collapse", {escaped})
    },
    //------------------------------------------------
    dockDrop() {
      let $drop  = this.$refs.drop
      let $box   = this.$refs.box
      // Guard the elements
      if(!_.isElement($drop) || !_.isElement($box)){
        return
      }
      //............................................
      // If drop opened, make the box position fixed
      // to at the top of mask
      if("extended" == this.status) {
        // Wait 1ms for drop content done for drawing
        _.delay(()=>{
          let r_box  = Ti.Rects.createBy($box)
          let r_drop = Ti.Rects.createBy($drop)
          //..........................................
          // Mark box to fixed position
          this.box = _.assign({position:"fixed"}, r_box.raw())
          //..........................................
          // Make drop same width with box
          let dropStyle = {}
          if("box" == this.dropWidth) {
            dropStyle.width = Math.max(r_box.width, r_drop.width)
          }
          else if(!Ti.Util.isNil(this.dropWidth)) {
            // The min drop width
            if(this.dropWidth < 0) {
              dropStyle.width = Math.max(r_box.width, Math.abs(this.dropWidth))
            }
            // Fix drop width
            else {
              dropStyle.width = this.dropWidth
            }
          }
          if(!Ti.Util.isNil(this.dropHeight)) {
            dropStyle.height = this.dropHeight
          }
          //..........................................S
          Ti.Dom.setStyle($drop, Ti.Css.toStyle(dropStyle))
          //..........................................
          // Dock drop to box
          Ti.Dom.dockTo($drop, $box, {
            space:{y:2}
          })
          // Make drop visible
          _.delay(()=>{
            this.myDropDockReady = true
          }, 1)

        }, 1)
        //..........................................
      }
      //............................................
    },
    //------------------------------------------------
    reDockDrop() {
      this.resetBoxStyle()
      this.$nextTick(()=>{
        this.dockDrop()
      })
    },
    //------------------------------------------------
    resetBoxStyle() {
      // Recover the $box width/height
      this.box = {}
      this.myDropDockReady = false
    },
    //------------------------------------------------
    __ti_shortcut(uniqKey) {
      if("ESCAPE" == uniqKey) {
        this.notifyCollapse(true)
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    "status" : function(sta){
      this.$nextTick(()=>{
        // If collapse, it should clean the box styles
        if("collapse" == sta) {
          this.resetBoxStyle()
        }
        // try docking
        else {
          this.dockDrop()
        }
      })
    }
  },
  ////////////////////////////////////////////////////
  mounted : function() {
    this.dropOpened = this.autoOpenDrop
    this.box.width  = this.width
    this.box.height = this.height

    this.dockDrop()

    Ti.Viewport.watch(this, {
      scroll:()=>this.notifyCollapse(),
      resize:()=>this.notifyCollapse()
    })
  },
  ////////////////////////////////////////////////////
  beforeDestroy : function() {
    Ti.Viewport.unwatch(this)
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-text-raw.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/raw/ti-text-raw.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////
  data : ()=>({
    myContent : null,
    inputCompositionstart: false
  }),
  ///////////////////////////////////////////////////
  props : {
    "icon" : {
      type : [String, Object],
      default : undefined
    },
    "title" : {
      type : String,
      default : undefined
    },
    "trimed" : {
      type : Boolean,
      default : false
    },
    "value" : {
      type : String,
      default : undefined
    }, 
    "placeholder" : {
      type : String,
      default : "i18n:blank"
    },
    "status": {
      type : Object,
      default: ()=>({})
    },
    "readonly" : {
      type : Boolean,
      default : false
    },
    "readonlyWhenNil" : {
      type : Boolean,
      default : true
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    TopClass() {
      return this.getTopClass({
        "show-title" : this.showTitle,
        "hide-title" : !this.showTitle,
        "is-changed" : _.get(this.status, "changed")
      })
    },
    //-----------------------------------------------
    isShowHead() {
      return this.title || this.icon
    },
    //-----------------------------------------------
    hasContent() {
      return !Ti.Util.isNil(this.value)
    },
    //-----------------------------------------------
    isReadonly() {
      if(this.readonly) {
        return true
      }
      if(this.readonlyWhenNil && Ti.Util.isNil(this.value)) {
        return true
      }
      return false
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnInputCompositionStart(){
      this.inputCompositionstart = true
    },
    //------------------------------------------------
    OnInputCompositionEnd(){
      this.inputCompositionstart = false
      this.OnTextChanged()
    },
    //------------------------------------------------
    OnInputing($event) {
      if(!this.inputCompositionstart) {
        this.OnTextChanged()
      }
    },
    //-----------------------------------------------
    OnTextChanged() {
      let str = _.get(this.$refs.text, "value")
      if(this.trimed) {
        str = _.trim(str)
      }
      this.myContent = str
    },
    //-----------------------------------------------
    syncMyContent() {
      this.myContent = this.value
    },
    //-----------------------------------------------
    checkMyContent() {
      if(this.myContent != this.value) {
        this.$notify("change", this.myContent)
      }
    },
    //-----------------------------------------------
    __ti_shortcut(uniqKey) {
      if("CTRL+ENTER" == uniqKey) {
        if(this.myContent != this.value) {
          this.$notify("change", this.myContent)
        }
        return {prevent:true}
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "value" : "syncMyContent",
    "myContent": function(){
      this.debCheckChange()
    }
  },
  ///////////////////////////////////////////////////
  created : function() {
    this.debCheckChange = _.debounce(()=>{
      this.checkMyContent()
    }, 500)
  },
  ///////////////////////////////////////////////////
  mounted : function() {
    this.syncMyContent()
  }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-combo-input.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/input/ti-combo-input.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    myDropStatus   : "collapse",
    myItem         : null,
    myFreeValue    : null,
    myFilterValue  : null,
    myOptionsData  : null,
    myCurrentId    : null,
    myCheckedIds   : {},

    myOldValue : undefined,
    myDict : undefined,
    loading : false
  }),
  ////////////////////////////////////////////////////
  props : {
    "canInput" : {
      type : Boolean,
      default : true
    },
    "autoCollapse" : {
      type : Boolean,
      default : false
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    isCollapse() {return "collapse"==this.myDropStatus},
    isExtended() {return "extended"==this.myDropStatus},
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    TheInputProps(){
      return _.assign({}, this, {
        readonly : !this.canInput || this.readonly,
        autoI18n : this.autoI18n,
        placeholder : this.placeholder,
        hover: this.hover,
        prefixIconForClean : this.prefixIconForClean,
        width: this.width,
        height: this.height
      })
    },
    //------------------------------------------------
    InputValue() {
      if(!Ti.Util.isNil(this.myFilterValue)) {
        return this.myFilterValue
      }
      if(this.myItem) {
        return this.Dict.getText(this.myItem)
               || this.Dict.getValue(this.myItem)
      }
      return this.myFreeValue
    },
    //------------------------------------------------
    GetValueBy() {
      return it => this.Dict.getValue(it)
    },
    //------------------------------------------------
    ThePrefixIcon() {
      if(this.loading) {
        return "zmdi-settings zmdi-hc-spin"
      }
      let icon = this.prefixIcon;
      if(this.myItem) {
        icon = this.Dict.getIcon(this.myItem) || icon
      }
      return icon || "zmdi-minus"
    },
    //------------------------------------------------
    TheSuffixIcon() {
      return this.statusIcons[this.myDropStatus]
    },
    //------------------------------------------------
    DropComType() {return this.dropComType || "ti-list"},
    DropComConf() {
      return _.assign({
        display    : this.dropDisplay || "text",
        border     : this.dropItemBorder
      }, this.dropComConf, {
        data : this.myOptionsData,
        currentId  : this.myCurrentId,
        checkedIds : this.myCheckedIds,
        idBy       : this.GetValueBy,
        multi      : false,
        hoverable  : true,
        checkable  : false,
        autoCheckCurrent : true
      })
    },
    //------------------------------------------------
    Dict() {
      if(!this.myDict) {
        this.myDict = this.createDict()
      }
      return this.myDict
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    OnDropListInit($dropList){this.$dropList=$dropList},
    //------------------------------------------------
    OnCollapse() {this.doCollapse()},
    //-----------------------------------------------
    OnInputInputing(val) {
      if(this.filter) {
        this.myFilterValue = val
        // Auto extends
        if(this.autoFocusExtended) {
          if(!this.isExtended) {
            this.doExtend(false)
          }
        }
        // Reload options data
        if(this.isExtended) {
          this.debReload()
        }
      }
    },
    //-----------------------------------------------
    async OnInputChanged(val, byKeyboardArrow) {
      //console.log("haha")
      // Clean filter
      this.myFilterValue = null
      // Clean
      if(!val) {
        this.myItem = null
        this.myFreeValue = null
        this.myCheckedIds = {}
        this.myCurrentId = null
      }
      // Find ...
      else {
        let it = await this.Dict.getItem(val)
        // Matched tag
        if(it) {
          this.myItem = it
          this.myFreeValue = null
        }
        else if(!this.mustInList) {
          this.myItem = null
          this.myFreeValue = val
        }
      }
      if(!byKeyboardArrow)
        this.tryNotifyChanged()
    },
    //-----------------------------------------------
    async OnInputFocused() {
      if(this.autoFocusExtended && !this.isExtended) {
        await this.doExtend()
      }
    },
    //-----------------------------------------------
    async OnClickStatusIcon() {
      if(this.isExtended) {
        await this.doCollapse()
      } else {
        await this.doExtend()
      }
    },
    //-----------------------------------------------
    async OnDropListSelected({currentId, byKeyboardArrow}={}) {
      //console.log({currentId, byKeyboardArrow})
      this.myCurrentId = currentId
      await this.OnInputChanged(currentId, byKeyboardArrow)
      if(this.autoCollapse && !byKeyboardArrow) {
        await this.doCollapse({escaped:true})
      }
    },
    //-----------------------------------------------
    // Core Methods
    //-----------------------------------------------
    async doExtend(tryReload=true) {
      this.myOldValue = this.evalMyValue()
      // Try reload options again
      if(tryReload && _.isEmpty(this.myOptionsData)) {
        await this.reloadMyOptionData(true)
      }
      this.$nextTick(()=>{
        this.myDropStatus = "extended"
      })
    },
    //-----------------------------------------------
    async doCollapse({escaped=false}={}) {
      if(escaped) {
        this.evalMyItem(this.myOldValue)
      }
      // Try notify
      else  {
        this.tryNotifyChanged()
      }
      this.myDropStatus = "collapse"
      this.myOldValue   = undefined
    },
    //-----------------------------------------------
    tryNotifyChanged() {
      let val = this.evalMyValue()
      //console.log("tryNotifyChanged", val)
      if(Ti.Util.isNil(val) && Ti.Util.isNil(this.value))
        return
      if(!_.isEqual(val, this.value)) {
        this.$notify("change", val)
      }
    },
    //-----------------------------------------------
    // Utility
    //-----------------------------------------------
    evalMyValue(item=this.myItem, freeValue=this.myFreeValue) {
      //console.log("evalMyValue", item, freeValue)
      // Item
      if(item) {
        return this.Dict.getValue(item)
      }
      // Ignore free values
      return this.mustInList 
              ? null
              : freeValue
    },
    //-----------------------------------------------
    async evalMyItem(val=this.value) {
      let it = await this.Dict.getItem(val)
      //console.log("evalMyItem", val)
      if(_.isArray(it)) {
        console.error("!!!!!!! kao ~~~~~~~")
        it = null
      }
      // Update state
      if(it) {
        let itV = this.Dict.getValue(it)
        this.myItem = it
        this.myFreeValue = null
        this.myCurrentId  = itV
        this.myCheckedIds = {[itV]: true}
      }
      // Clean
      else {
        this.myItem = null
        this.myFreeValue = this.mustInList ? null : val
        this.myCurrentId  = null
        this.myCheckedIds = {}
      }
    },
    //------------------------------------------------
    createDict() {
      // Customized
      if(this.options instanceof Ti.Dict) {
        return this.options
      }
      // Refer dict
      if(_.isString(this.options)) {
        let dictName = Ti.DictFactory.DictReferName(this.options)
        if(dictName) {
          return Ti.DictFactory.CheckDict(dictName, ({loading}) => {
            this.loading = loading
          })
        }
      }
      // Auto Create
      return Ti.DictFactory.CreateDict({
        data : this.options,
        getValue : Ti.Util.genGetter(this.valueBy || "value"),
        getText  : Ti.Util.genGetter(this.textBy  || "text|name"),
        getIcon  : Ti.Util.genGetter(this.iconBy  || "icon")
      })
    },
    //-----------------------------------------------
    async reloadMyOptionData(force=false) {
      //console.log("reloadMyOptionData")
      if(force || this.isExtended) {
        let list = await this.Dict.queryData(this.myFilterValue)
        this.myOptionsData = list
      } else {
        this.myOptionsData = []
      }
    },
    //-----------------------------------------------
    // Callback
    //-----------------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("ti-combo-multi-input", uniqKey)
      //....................................
      if("ESCAPE" == uniqKey) {
        this.doCollapse({escaped:true})
        return {prevent:true, stop:true, quit:true}
      }
      //....................................
      // If droplist is actived, should collapse it
      if("ENTER" == uniqKey) {
        //if(this.$dropList && this.$dropList.isActived) {
          this.doCollapse()
          return {stop:true, quit:false}
        //}
      }
      //....................................
      if("ARROWUP" == uniqKey) {
        if(this.$dropList) {
          this.$dropList.selectPrevRow({
            payload: {byKeyboardArrow: true}
          })
        }
        return {prevent:true, stop:true, quit:true}
      }
      //....................................
      if("ARROWDOWN" == uniqKey) {
        if(this.$dropList && this.isExtended) {
          this.$dropList.selectNextRow({
            payload: {byKeyboardArrow: true}
          })
        } else {
          this.doExtend()
        }
        return {prevent:true, stop:true, quit:true}
      }
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    //-----------------------------------------------
    "value" : {
      handler: function(){
        this.$nextTick(()=>{
          this.evalMyItem()
        })
      },
      immediate : true
    },
    //-----------------------------------------------
    "myOptionsData" : function(){
      this.$nextTick(()=>{
        this.evalMyItem()
      })
    },
    //-----------------------------------------------
    "options" : function(newval, oldval) {
      if(!_.isEqual(newval, oldval)) {
        this.myDict = this.createDict()
        this.myOptionsData = []
        if(this.isExtended) {
          this.$nextTick(()=>{
            this.reloadMyOptionData(true)
          })
        }
      }
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  created : function() {
    this.debReload = _.debounce(val=>{
      this.reloadMyOptionData()
    }, this.delay)
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-list.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/list/wn-list.mjs'] = (function(){
/////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////
  data : ()=>({
    isAllChecked  : false,
    hasChecked    : false,
    theCurrentId  : false,
    theCheckedIds : false
  }),
  ///////////////////////////////////////////////////
  props : {
    "iconBy" : {
      type : [String, Function],
      default : undefined
    },
    "indentBy" : {
      type : [String, Function],
      default : undefined
    },
    "itemClassName" : undefined,
    "display" : {
      type : [Object, String, Array],
      default : ()=>({
        key : "..",
        comType : "ti-label"
      })
    },
    "border" : {
      type : Boolean,
      default : true
    },
    "autoScrollIntoView" : {
      type : Boolean,
      default : true
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //----------------------------------------------
    DisplayItems() {
      return this.explainDisplayItems(this.display)
    }
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //----------------------------------------------
    OnSubListInit($list) {this.$list = $list},
    //----------------------------------------------
    OnSelected(payload={}){
      this.theCheckedIds = payload.checkedIds
      this.theCurrentId  = payload.currentId
      this.syncCheckStatus()
      this.$notify("select", payload)
    },
    //----------------------------------------------
    syncCheckStatus() {
      this.isAllChecked = this.$list.isAllChecked
      this.hasChecked   = this.$list.hasChecked
    },
    //----------------------------------------------
    // Delegate methods
    selectPrevRow(options){this.$list.selectPrevRow(options)},
    selectNextRow(options){this.$list.selectNextRow(options)},

    getCurrentRow(options){return this.$list.getCurrentRow(options)},
    getCheckedRow(options){return this.$list.getCheckedRow(options)},

    getCurrent(options){return this.$list.getCurrent(options)},
    getChecked(options){return this.$list.getChecked(options)},

    selectRow(options){this.$list.selectRow(options)},
    checkRow (options){this.$list.checkRow(options)},
    cancelRow(options){this.$list.cancelRow(options)}
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "data" : function(){
      this.syncCheckStatus()
    },
    "checkedIds" : function(){
      this.syncCheckStatus()
    }
  }
  ///////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-wizard.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/wizard/ti-wizard.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////
  data: () => ({
    myCurrent: undefined,
    myTitle: undefined
  }),
  ///////////////////////////////////////////////////
  props : {
    "title" : {
      type: String,
      default: undefined
    },
    "steps" : {
      type : Array,
      default : ()=>[]
    },
    "value" : {
      type : Object,
      default : ()=>({})
    },
    "current" : {
      type : [Number, String],
      default : 0
    },
    "canClickHeadItem" : {
      type : String,
      default : undefined
    },
    "evalStepConfFunc" : {
      type : Boolean,
      default : false
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //----------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //----------------------------------------------
    StepList() {
      let list = []
      if(_.isArray(this.steps)) {
        for(let i=0; i<this.steps.length; i++) {
          let step = this.steps[i]
          let stepKey = step.key || `step${i}`
          // Join to the list
          list.push({
            index     : i,
            stepKey   : stepKey,
            dataKey   : step.dataKey,
            title     : step.title   || stepKey,
            comType   : step.comType || "ti-label",
            comConf   : step.comConf,
            prepare   : step.prepare,
            serializer: step.serializer,
            prev : step.prev,
            next : step.next
          })
        }
      }
      return list
    },
    //----------------------------------------------
    StepHeads() {
      let list = []
      if(_.isArray(this.steps)) {
        for(let step of this.StepList) {
          let className = []
          if(this.CurrentStepIndex == step.index) {
            className.push("is-current")
          }
          else if(step.index > this.CurrentStepIndex) {
            className.push("is-future")
          }
          else {
            className.push("is-passed")
          }
          // Join to the list
          list.push(_.assign({}, step, {className}))
        }
      }
      return list
    },
    //----------------------------------------------
    CurrentStepIndex() {
      return this.CurrentStep
                ? this.CurrentStep.index
                : -1
    },
    //----------------------------------------------
    hasCurrentStep() {
      return this.CurrentStep ? true : false
    },
    //----------------------------------------------
    TheTitle() {
      return this.myTitle || this.title
    },
    //----------------------------------------------
    CurrentStep() {
      let cs = Ti.Util.fallback(this.myCurrent, this.current)
      let step = _.cloneDeep(this.getStep(cs))

      // Eval serializer
      let serializer = step.serializer
        ? Ti.Util.genInvoking(step.serializer, {
            context: this.value,
            partial: "right"
          })
        : _.identity;
      // Eval comConf
      let comConf = Ti.Util.explainObj(this.value, step.comConf, {
        evalFunc : this.evalStepConfFunc
      })

      return _.assign({}, step, {
        serializer, comConf
      })
    },
    //----------------------------------------------
    BtnPrev() {
      let btn = _.get(this.CurrentStep, "prev")
      return this.getStepAction(btn, {
        icon     : "zmdi-chevron-left",
        text     : "i18n:prev",
        enabled  : true
      })
    },
    //----------------------------------------------
    BtnNext() {
      let btn = _.get(this.CurrentStep, "next")
      return this.getStepAction(btn, {
        icon     : "zmdi-chevron-right",
        text     : "i18n:next",
        enabled  : true,
        reverse  : _.get(btn, "icon") ? false : true
      })
    }
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //----------------------------------------------
    OnTitleChange(title) {
      this.myTitle = title
    },
    //----------------------------------------------
    OnDataChange(payload) {
      //console.log("wizard:OnStepDataChange", payload)
      let newData = _.assign({}, this.value, payload)
      this.$notify("change", newData)
    },
    //----------------------------------------------
    OnStepChange(payload) {
      // Prev
      if("%prev" == payload) {
        this.gotoFromCurrent(-1)
      }
      // Next
      else if("%next" == payload) {
        this.gotoFromCurrent(1)
      }
      // absolute step
      else {
        this.gotoStep(payload)
      }
    },
    //----------------------------------------------
    OnClickHeadItem(index) {
      // Can Click Passed Steps
      if("passed" == this.canClickHeadItem 
        && this.CurrentStepIndex > index) {
        this.gotoStep(index)
      }
    },
    //----------------------------------------------
    OnClickBtnPrev() {
      if(this.BtnPrev && this.BtnPrev.enabled) {
        if(this.BtnPrev.handler) {
          let invoking = Ti.Util.genInvoking(this.BtnPrev.handler, {
            context: this.value,
            partial: false
          })
          invoking.apply(this, [this.value])
        } else {
          this.gotoFromCurrent(-1)
        }
      }
    },
    //----------------------------------------------
    OnClickBtnNext() {
      if(this.BtnNext && this.BtnNext.enabled) {
        if(this.BtnNext.handler) {
          let invoking = Ti.Util.genInvoking(this.BtnNext.handler, {
            context: this.value,
            partial: false
          })
          invoking.apply(this, [this.value])
        } else {
          this.gotoFromCurrent(1)
        }
      }
    },
    //----------------------------------------------
    //
    // Utility Methods
    //
    //----------------------------------------------
    getStep(keyOrIndex) {
      // By Index: -1 is the last item
      if(_.isNumber(keyOrIndex)) {
        let i = Ti.Num.scrollIndex(keyOrIndex, this.StepList.length)
        if(i>=0)
          return this.StepList[i]
      }
      // By Key
      else {
        for(let step of this.StepList) {
          if(step.stepKey == keyOrIndex) {
            return step
          }
        }
      }
      // Return undefined
    },
    //----------------------------------------------
    gotoStep(keyOrIndex) {
      let step = this.getStep(keyOrIndex)
      if(step) {
        let oldStep = _.cloneDeep(this.CurrentStep)
        this.myCurrent = step.index

        this.$notify("step:chanage", {
          index: step.index,
          step,
          oldStep
        })
      }
    },
    //----------------------------------------------
    gotoFromCurrent(off=1) {
      if(this.CurrentStep) {
        let nextStepIndex = this.CurrentStep.index + off
        this.gotoStep(nextStepIndex)
      }
    },
    //----------------------------------------------
    getStepAction(stepBtn, dftSetting={}) {
      if(stepBtn) {
        let btn
        // Boolean default
        if(_.isBoolean(stepBtn)) {
          btn = {}
        }
        // Customized Text 
        else if(_.isString(stepBtn)) {
          btn = {text : stepBtn || dftText}
        }
        // Actions
        else {
          btn = _.assign({}, stepBtn)
          //console.log({stepBtn, val: this.value})
          // Customized
          if(_.isFunction(btn.enabled)) {
            btn.enabled = btn.enabled()
          }
          // Eval enabled
          else if(btn.enabled) {
            btn.enabled = Ti.AutoMatch.test(btn.enabled, this.value)
          }
        }
        // Setup 
        _.defaults(btn, dftSetting)
        btn.className = Ti.Css.mergeClassName(btn.className)
        // ClassName
        if(btn.enabled) {
          btn.className["is-enabled"] = true
        }
        // Revers
        if(btn.reverse) {
          btn.className["is-reverse"] = true
        }

        // Return 
        return btn
      }
    }
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "CurrentStep" : {
      handler : function(step, oldstep) {
        if(step && _.isFunction(step.prepare)) {
          if(!oldstep || step.stepKey != oldstep.stepKey) {
            step.prepare.apply(this, [step])
          }
        }
      },
      immediate : true
    }
  }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-table.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/table/ti-table.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////
  provide : function(){
    return {
      "$table" : this
    }
  },
  ///////////////////////////////////////////////////
  data : ()=>({
    myTableRect: null,
    myData : []
  }),
  ///////////////////////////////////////////////////
  // props -> ti-table-props.mjs
  ///////////////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      let klass = this.getTopClass({
        // "is-cells-no-ready" : !this.myCellsReady,
        // "is-layout-ready" : this.myCellsReady,
        "is-hoverable"   : this.hoverable
      }, [
        `is-border-${this.border}`,
        `is-head-${this.head||"none"}`
      ])
      // Auto judgement table layout
      if(!klass['is-layout-fixed'] && !klass['is-layout-auto']) {
        let tableLayout = "auto"
        for(let i=0; i< this.fields.length; i++) {
          let fld = this.fields[i]
          if(!Ti.Util.isNil(fld.width)){
            tableLayout = "fixed"
            break
          }
        }
        klass[`is-layout-${tableLayout}`] = true
      }
      return klass
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    },
    //--------------------------------------
    TableStyle() {
      if(this.myTableWidth>0) {
        return Ti.Css.toStyle({
          "width" : this.myTableWidth
        })
      }
    },
    //--------------------------------------
    getRowIndent() {
      if(_.isFunction(this.indentBy)) {
        return it => this.indentBy(it)
      }
      if(_.isString(this.indentBy)) {
        return it => _.get(it, this.indentBy)
      }
      return it => 0
    },
    //--------------------------------------
    getRowIcon() {
      if(_.isFunction(this.iconBy)) {
        return it => this.iconBy(it)
      }
      if(_.isString(this.iconBy)) {
        return it => _.get(it, this.iconBy)
      }
      return it => null
    },
    //--------------------------------------
    TheData() {
      return this.myData
    },
    //--------------------------------------
    isShowHead() {
      return /^(frozen|normal)$/.test(this.head)
    },
    //--------------------------------------
    HeadCheckerIcon() {
      if(this.isAllChecked) {
        return "fas-check-square"
      }
      if(this.hasChecked) {
        return "fas-minus-square"
      }
      return "far-square"
    },
    //--------------------------------------
    TableFields() {
      if(!this.myTableRect) {
        return
      }
      let fields = []
      for(let i=0; i< this.fields.length; i++) {
        let fld = this.fields[i]
        //..................................
        let display = this.evalFieldDisplay(fld.display, fld.name)
        //..................................
        let fldWidth = Ti.Util.fallbackNil(fld.width, "stretch")
        //..................................
        if(_.isString(fldWidth)) {
          // Percent
          if(/^\d+(\.\d+)?%$/.test(fldWidth)) {
            fldWidth = fldWidth.substring(0, fldWidth.length-1)/100;
          }
          // Auto or stretch
          else if(!/^(auto|stretch)$/.test(fldWidth)) {
            fldWidth = "stretch"
          }
        }
        // Must be number
        else if(!_.isNumber(fldWidth)) {
          fldWidth = "stretch"
        }
        //..................................
        let cell = {
          index  : i,
          title  : fld.title,
          nowrap : fld.nowrap,
          width  : fldWidth,
          className : fld.className,
          //.....................
          name : fld.name,
          display,
          //.....................
          type : fld.type,
          comType : fld.comType,
          comConf : fld.comConf,
          transformer : fld.transformer,
          serializer  : fld.serializer
        }
        //..................................
        cell.headStyle = this.getHeadCellStyle(cell)
        //..................................
        fields.push(cell)
        //..................................
      }
      return fields
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickHeadChecker() {
      // Cancel All
      if(this.isAllChecked) {
        this.cancelRow()
      }
      // Check All
      else {
        this.checkRow()
      }
    },
    //--------------------------------------
    OnClickTop($event) {
      if(this.cancelable) {
        // Click The body or top to cancel the row selection
        if(Ti.Dom.hasOneClass($event.target,
            'ti-table', 'table-body',
            'table-head-cell',
            'table-head-cell-text')) {
          this.cancelRow()
        }
      }
    },
    //--------------------------------------
    onItemChanged(payload) {
      this.$notify("item:change", payload)
    },
    //--------------------------------------
    getHeadCellStyle(fld) {
      if(fld && !Ti.Util.isNil(fld.width) 
          && this.myTableRect && this.myTableRect.width > 0) {
          // Copy width
          let width = fld.width

          // Number
          if(_.isNumber(width)) {
            // -100: it will conver to percent
            if(width < 0) {
              let per = Math.abs(width / this.myTableRect.width)
              width = Math.round(per * 100) + "%"
            }
            // 0-1: => Percent
            else if(width>=0 && width < 1) {
              width = Math.round(width * 100) + "%"
            }
            // 100: => pixcel
            else {
              width = `${width}px`
            }
          }

          return {width}
      }
    },
    //--------------------------------------
    evalFieldDisplay(displayItems=[], defaultKey) {
      // Force to Array
      displayItems = _.concat(displayItems)
      // Prepare the return list
      let items = []
      // Loop each items
      for(let li of displayItems) {
        let item = this.evalFieldDisplayItem(li, {defaultKey})
        if(item) {
          items.push(item)
        }
      }
      // // Gen transformer for each item
      // for(let it of items) {
      //   // Transformer
      //   it.transformer = Ti.Types.getFuncBy(it, "transformer", this.fnSet)
      // }
      // Array to pick
      return items
    },
    //--------------------------------------
    scrollCurrentIntoView() {
      //console.log("scrollCurrentIntoView", this.myLastIndex)
      if(this.autoScrollIntoView && this.theCurrentId) {
        let index = this.findRowIndexById(this.theCurrentId)
        //console.log("scroll", index)
        let $view = this.$el
        let $row  = Ti.Dom.find(`.table-row:nth-child(${index+1})`, $view)

        if(!_.isElement($view) || !_.isElement($row)) {
          return
        }

        let r_view = Ti.Rects.createBy($view)
        let r_row = Ti.Rects.createBy($row)

        // test it need to scroll or not
        if(!r_view.contains(r_row)) {
          // at bottom
          if(r_row.bottom > r_view.bottom) {
            $view.scrollTop += r_row.bottom - r_view.bottom
          }
          // at top
          else {
            $view.scrollTop += r_row.top - r_view.top
          }
        }
      }
    },
    //--------------------------------------
    OnResize() {
      this.myTableRect = Ti.Rects.createBy(this.$el)
    },
    //--------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("ti-table", uniqKey)
      if("ARROWUP" == uniqKey) {
        this.selectPrevRow({
          payload: {byKeyboardArrow: true}
        })
        this.scrollCurrentIntoView()
        return {prevent:true, stop:true, quit:true}
      }

      if("ARROWDOWN" == uniqKey) {
        this.selectNextRow({
          payload: {byKeyboardArrow: true}
        })
        this.scrollCurrentIntoView()
        return {prevent:true, stop:true, quit:true}
      }
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "data" : {
      handler : async function(newVal, oldVal){
        let isSame = _.isEqual(newVal, oldVal)
        if(!isSame) {
          //console.log("!!!table data changed", {newVal, oldVal})
          this.myData = await this.evalData((it)=>{
            it.icon = this.getRowIcon(it.item)
            it.indent = this.getRowIndent(it.item)
          })
        }
        // Check ready 
        if(_.isEmpty(this.data)) {
          this.$nextTick(()=>{
            this.myCellsReady = true
          })
        }
      },
      immediate : true
    }
  },
  ///////////////////////////////////////////////////
  mounted : function() {
    Ti.Viewport.watch(this, {
      resize : _.debounce(()=>this.OnResize(), 10)
    })
    this.$nextTick(()=>this.OnResize())
    if(this.autoScrollIntoView) {
      _.delay(()=>{
        this.scrollCurrentIntoView()
      }, 0)
    }
    // Eval the table viewport Rect
    this.myTableRect = Ti.Rects.createBy(this.$el)
  },
  ///////////////////////////////////////////////////
  beforeDestroy : function(){
    Ti.Viewport.unwatch(this)
  }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-fileset-mixins.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/support/wn-fileset-mixins.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  props : {
    "meta" : {
      type : Object,
      default : undefined
    },
    "viewReady" : {
      type : Boolean,
      default : false
    },
    "match" : {
      type : Object,
      default : undefined
    },
    "sort" : {
      type : Object,
      default : ()=>({
        nm : 1
      })
    },
    "skip" : {
      type : Number,
      default: 0
    },
    "limit" : {
      type : Number,
      default: 100
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass();
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    async reloadChildren(obj=this.meta) {
      if(!obj || !obj.id)
        return []

      let match = _.cloneDeep(this.match) || {}
      match.pid = obj.id

      let reo = await Wn.Io.find({
        match,
        skip  : this.skip,
        limit : this.limit,
        sort  : this.sort
      })

      return reo.list || []
    },
    //------------------------------------------------
    async _try_reload() {
      if(_.isFunction(this.reload) && this.meta && this.viewReady) {
        await this.reload()
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    "meta" : {
      handler : function(newVal, oldVal) {
        if(!_.isEqual(newVal, oldVal)) {
          this._try_reload()
        }
      }
    },
    "viewReady" : {
      handler : "_try_reload",
      immediate : true
    }
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'list_item_mixins.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/support/list_item_mixins.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inject: ["$vars"],
  ///////////////////////////////////////////////////
  props : {
    "index" : {
      type : Number,
      default : -1
    },
    "rowId" : {
      type : String,
      default : null
    },
    "data" : undefined,
    "item" : {
      type : Object,
      default : ()=>({})
    },
    "changedId" : {
      type : String,
      default : null
    },
    "currentId" : {
      type : String,
      default : null
    },
    "checkedIds" : {
      type : Object,
      default : ()=>({})
    },
    "checkable" : {
      type : Boolean,
      default : false
    },
    "selectable" : {
      type : Boolean,
      default : true
    },
    "openable" : {
      type : Boolean,
      default : true
    },
    "rowToggleKey" : {
      type : Array,
      default : ()=>[]
    },
    "checkIcons" : {
      type : Object,
      default : ()=>({
        on  : "fas-check-square",
        off : "far-square"
      })
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    getListItemClass() {
      return (...klass)=>this.getTopClass({
        "is-current" : this.isCurrent,
        "is-checked" : this.isChecked,
        "is-changed" : this.isChanged,
        "no-checked" : !this.isChecked
      }, klass)
    },
    //-----------------------------------------------
    isCurrent() {
      return this.rowId == this.currentId
    },
    //-----------------------------------------------
    isChanged() {
      return this.rowId == this.changedId
    },
    //-----------------------------------------------
    isChecked() {
      return this.checkedIds[this.rowId] ? true : false
    },
    //-----------------------------------------------
    theCheckIcon() {
      if(this.checkedIds[this.rowId]) {
        return this.checkIcons.on
      }
      return this.checkIcons.off
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    isRowToggleKey(uniqKey) {
      return _.indexOf(this.rowToggleKey, uniqKey)>=0
    },
    //-----------------------------------------------
    OnClickChecker($event={}) {
      if(this.checkable) {
        this.$notify("checker", {
          rowId  : this.rowId,
          shift  : $event.shiftKey,
          toggle : ($event.ctrlKey || $event.metaKey)
        })
      }
    },
    //-----------------------------------------------
    OnClickRow($event={}) {
      let toggle = ($event.ctrlKey || $event.metaKey)
      if(this.selectable && (!this.isCurrent || !this.isChecked || toggle)) {
        this.$notify("select", {
          rowId  : this.rowId,
          shift  : $event.shiftKey,
          toggle
        })
      }
    },
    //-----------------------------------------------
    OnDblClickRow($event={}) {
      if(this.openable) {
        $event.stopPropagation()
        this.$notify("open", {
          rowId  : this.rowId
        })
      }
    },
    //-----------------------------------------------
    doAutoActived() {
      if(!this.isActived && this.isCurrent) {
        this.setActived()
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "isCurrent" : function() {
      this.doAutoActived()
    }
  },
  ///////////////////////////////////////////////////
  mounted : function() {
    this.doAutoActived()
  }
  ///////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'vod-video-info.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/net/aliyun/vod/video/info/vod-video-info.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////////
  props : {
    "value": {
      type: Object,
      default: undefined
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //---------------------------------------------------
    hasVideo() {
      return this.value ? true : false
    },
    //---------------------------------------------------
    VideoCoverURL() {
      return _.get(this.value, "coverURL")
    },
    //---------------------------------------------------
    FormFields() {
      return [{
        title : "VideoID",
        name  : "videoId"
      }, {
        title : "Title",
        name  : "title"
      }, {
        title : "CateName",
        name  : "cateName"
      }, {
        title : "Description",
        name  : "description"
      }, {
        title : "Duration",
        name  : "duration"
      }, {
        title : "RegionId",
        name  : "regionId"
      }, {
        title : "Size",
        name  : "size"
      }, {
        title : "Status",
        name  : "status"
      }, {
        title : "Tags",
        name  : "tags"
      // }, {
      //   title : "AuditStatus",
      //   name  : "auditStatus"
      // }, {
      //   title : "DownloadSwitch",
      //   name  : "downloadSwitch"
      // }, {
      //   title : "PreprocessStatus",
      //   name  : "preprocessStatus"
      }, {
        title : "CreateTime",
        name  : "createTime"
      }, {
        title : "ModifyTime",
        name  : "modifyTime"
      }]
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods :{
    //---------------------------------------------------
    OnClickPreview(){
      this.$notify("preview", this.value)
    }
    //---------------------------------------------------
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'bar-item-info.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/actionbar/com/bar-item-info/bar-item-info.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////
  inject: ["$bar"],
  ///////////////////////////////////////
  props : {
    "name": {
      type: String,
      default: undefined
    },
    "icon": {
      type: String,
      default: undefined
    },
    "hideIcon" : {
      type: Boolean,
      default: false
    },
    "text": {
      type: String,
      default: undefined
    },
    "tip": {
      type: String,
      default: undefined
    },
    "shortcut": {
      type: String,
      default: undefined
    },
    "suffixIcon" : {
      type: String,
      default: undefined
    },
    "altDisplay" : {
      type: [Object, Array],
      default: ()=>[]
    },
    "enabled": {
      type: [Boolean, String, Array, Object],
      default: undefined
    },
    "disabled": {
      type: [Boolean, String, Array, Object],
      default: undefined
    },
    "highlight": {
      type: [Boolean, String, Array, Object],
      default: undefined
    },
    "value" : {
      type: [Boolean, String, Number, Array],
      default: undefined
    },
    "depth": {
      type: Number,
      default: 0
    },
    "status" : {
      type : Object,
      default : ()=>({})
    }
  },
  ///////////////////////////////////////
  computed : {
    //-----------------------------------
    TopClass() {
      return this.getTopClass({
        "is-enabled"  : this.isEnabled,
        "is-disabled" : this.isDisabled,
        "is-highlight": this.isHighlight,
        "is-top" : this.depth == 1,
        "is-sub" : this.depth > 1,
        "has-icon" : this.icon ? true : false,
        "no-icon"  : this.icon ? false : true,
        "show-icon": this.isShowIcon,
        "hide-icon": !this.isShowIcon
      }, `is-depth-${this.depth}`)
    },
    //-----------------------------------
    AltDisplay() {
      if(_.isArray(this.altDisplay)) {
        return this.altDisplay
      }
      return this.altDisplay
        ? [this.altDisplay]
        : []
    },
    //-----------------------------------
    isEnabled() {
      if(!Ti.Util.isNil(this.enabled)) {
        return this.isMatchStatus(this.enabled)
      }
      if(!Ti.Util.isNil(this.disabled)) {
        if(this.isMatchStatus(this.disabled)) {
          return false
        }
      }
      return true
    },
    //-----------------------------------
    isDisabled() {
      return !this.isEnabled
    },
    //-----------------------------------
    isHighlight() {
      if(!Ti.Util.isNil(this.highlight)) {
        return this.isMatchStatus(this.highlight)
      }
      return false
    },
    //-----------------------------------
    isShowShortcut() {
      return this.shortcut && this.depth > 1
    },
    //-----------------------------------
    isShowIcon() {
      return !this.hideIcon || this.hasIcon
    },
    //-----------------------------------
    hasIcon() {
      return this.CurrentDisplay.icon ? true : false
    },
    //-----------------------------------
    CurrentDisplay() {
      // if("bold" == this.name)
      //   console.log("CurrentDisplay", this.name)
      // Prepare default
      let dis =  {
        icon : this.icon,
        text : this.text,
        tip  : this.tip,
        value: this.value
      }
      // Alt Display
      if(!_.isEmpty(this.AltDisplay)) {
        for(let alt of this.AltDisplay) {
          let mat = alt.match || this.name
          if(this.isMatchStatus(mat)) {
            _.assign(dis, _.pick(alt, [
              "icon", "text", "tip", "value"
            ]))
            break
          }
        }
      }
      // Done
      return dis
    },
    //-----------------------------------
    TheValues() {
      let val = this.CurrentDisplay.value
      // Bool
      if(_.isBoolean(val)) {
        return [val, !val]
      }
      // Array
      if(_.isArray(val))
        return val
      // Normal value
      return [val]
    }
    //-----------------------------------
  },
  ///////////////////////////////////////
  methods : {
    //---------------------------------------
    OnClickTop() {
      //console.log("OClickTop")
      if(!this.isDisabled) {
        let val = this.isHighlight
          ? _.last(this.TheValues)
          : _.first(this.TheValues)
        
        this.$emit('fire', val)
      }
    },
    //---------------------------------------
    isMatchStatus(mat) {
      if(_.isBoolean(mat)) {
        return mat
      }
      // Key | `"saving"`
      if(_.isString(mat)) {
        return _.get(this.status, mat) ? true : false
      }
      // Complex match
      // Match  | `{saving:true}`
      //console.log(mat, this.status)
      return Ti.AutoMatch.test(mat, this.status)
    }
    //---------------------------------------
  }
  ///////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'm-thing-search-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/thing/mod/search/m-thing-search-actions.mjs'] = (function(){
// Ti required(Wn)
////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  //--------------------------------------------
  async reloadPage({state, commit, dispatch}, pg) {
    commit("updatePager", pg)
    await dispatch("reload")
  },
  //--------------------------------------------
  async reload({state, commit, getters, rootState}, meta) {
    //console.log("thing-manager-search.reload", meta)
    //............................................
    // Update New Meta
    if(meta) {
      commit("setMeta", meta)
    }
    // Get meta back
    else {
      meta = state.meta
    }
    //............................................
    // Mark reloading
    commit("setStatus", {reloading:true})
    //............................................
    let cmds = [`thing id:${meta.id} query -cqn`]
    //............................................
    // Eval Sorter
    if(!_.isEmpty(state.sorter)) {
      let sort = JSON.stringify(state.sorter)
      cmds.push(`-sort '${sort}'`)
    }
    //............................................
    // Eval Pager
    if(getters.isPagerEnabled) {
      let limit = state.pager.pgsz
      let skip  = state.pager.pgsz * (state.pager.pn - 1)
      cmds.push(' -pager')
      cmds.push(`-limit ${limit}`)
      cmds.push(`-skip  ${skip}`)
    }

    //............................................
    // Eval Showkeys
    if(state.showKeys) {
      cmds.push(` -e '${state.showKeys}'`)
    }
    
    //............................................
    // Run Command
    let input = getters.filterStr
    let cmdText = cmds.join(" ")
    let reo = await Wn.Sys.exec2(cmdText, {input, as:"json"})
    //............................................
    // All done
    if(getters.isPagerEnabled) {
      commit("setPager", reo.pager)
      commit("setList", reo.list)
    } else {
      commit("setList", reo)
    }
    commit("setStatus", {reloading:false})
  }
  //--------------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-loading.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/loading/ti-loading.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  props : {
    icon : {
      type : String,
      default : "fas-spinner fa-spin"
    },
    text : {
      type : String,
      default : "i18n:loading"
    }
  },
  computed : {
    TopClass() {
      return this.getTopClass()
    }
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-viewport.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/ti/viewport/ti-viewport.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  getters : {
    viewportMode : (state) => state.mode,
    viewportActivedComIds : (state) => state.activedIds,
    isViewportModeDesktop : (state)=> "desktop" == state.mode,
    isViewportModeTablet  : (state)=> "tablet" == state.mode,
    isViewportModePhone   : (state)=> "phone" == state.mode,
    isViewportModeDesktopOrTablet : (state)=> 
      ("desktop" == state.mode || "tablet" == state.mode),
    isViewportModePhoneOrTablet : (state)=> 
      ("phone" == state.mode || "tablet" == state.mode)
  },
  mutations : {
    setMode(state, mode="desktop") {
      state.mode = mode
    },
    setActivedIds(state, activedIds=[]) {
      //console.log("viewport setActivedIds", activedIds)
      state.activedIds = _.cloneDeep(activedIds)
    }
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-markdown-richeditor-delegate-methods.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/markdown/richeditor/ti-markdown-richeditor-delegate-methods.mjs'] = (function(){
const _M = {
  //-----------------------------------------------
  // Delegate Quill Methods
  //-----------------------------------------------
  getSelection  (...args){return this.$editor.getSelection(...args)},
  setSelection  (...args){return this.$editor.setSelection(...args)},
  updateContents(...args){return this.$editor.updateContents(...args)},
}
return _M;;
})()
// ============================================================
// EXPORT 'codeblock.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/codeblock.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  name : "ti-codeblock",
  setup : function(editor, url){
    console.log("plugin:codeblock", editor, url)
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-shelf-iconbox.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/shelf/iconbox/web-shelf-iconbox.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data : ()=>({
    isOpened: false
  }),
  //////////////////////////////////////////
  props : {
    "icon": {
      type: [Object, String],
      default: "im-menu"
    },
    "iconConf" : {
      type: Object,
      default: ()=>({})
    },
    "closeIcon": {
      type: [Object, String],
      default: "im-x-mark"
    },
    "mode": {
      type: String,
      default: "left",
      validator: v => /^(left|right)$/.test(v)
    },
    "head": {
      type: Object,
      /* {comType, comConf} */
      default: undefined
    },
    "body": {
      type: Object,
      /* {comType, comConf} */
      default: undefined
    },
    "foot": {
      type: Object,
      /* {comType, comConf} */
      default: undefined
    },
    "width": {
      type: [Number, String],
      default: undefined
    },
    "panelWidth" : {
      type: [Number, String],
      default: undefined
    },
    "autoCloseEventNames" : {
      type: [Array, String],
      default: "nav:to"
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-opened" : this.isOpened,
        "is-closed" : !this.isOpened,
      }, `is-mode-${this.mode}`)
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width
      })
    },
    //--------------------------------------
    hasHead() {
      return this.head && this.head.comType
    },
    //--------------------------------------
    hasBody() {
      return this.body && this.body.comType
    },
    //--------------------------------------
    hasFoot() {
      return this.foot && this.foot.comType
    },
    //--------------------------------------
    PanelStyle() {
      return Ti.Css.toStyle({
        width: this.panelWidth
      })
    },
    //--------------------------------------
    PanelTransName() {
      return `ti-trans-slide-${this.mode}`
    },
    //--------------------------------------
    TheAutoCloseEventNames() {
      return _.concat(this.autoCloseEventNames)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnToggleMode() {
      this.isOpened = !this.isOpened
    },
    //--------------------------------------
    __on_events(name) {
      //console.log("__on_events", name)
      if(_.indexOf(this.TheAutoCloseEventNames, name)>=0) {
        _.delay(()=>{
          this.isOpened = false
        })
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-logging.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/logging/ti-logging.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  props : {
    "lines" : {
      type : Array,
      default : ()=>[]
    },
    "width" : {
      type : [Number, String],
      default : null
    },
    "height" : {
      type : [Number, String],
      default : null
    }
  },
  computed: {
    TopClass() {
      return this.getTopClass()
    },
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    }
  },
  methods: {
    scrollToBottom() {
      let $pre = this.$refs.pre
      $pre.scrollTop = $pre.scrollHeight
    }
  },
  watch: {
    "lines": function() {
      //console.log(this.lines.length)
      this.$nextTick(()=>{
        this.scrollToBottom()
      })
    }
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-combo-multi-input.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/combo/multi-input/wn-combo-multi-input.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  data : ()=>({
    loading : false
  }),
  ////////////////////////////////////////////////////
  // props 
  props : {
    "itemBy" : {
      type : [String, Function],
      default : undefined
    },
    "findBy" : {
      type : [String, Function],
      default : undefined
    },
    "loadingIcon" : {
      type : String,
      default : "zmdi-settings zmdi-hc-spin"
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    DropComType() {
      return this.dropComType || "wn-list"
    },
    //------------------------------------------------
    ThePrefixIcon() {
      if(this.loading && this.prefixIcon) {
        return this.loadingIcon
      }
      return this.prefixIcon
    },
    //---------------------------------------------------
    OptionsDict() {
      return Wn.Dict.evalOptionsDict(this, ({loading}) => {
        this.loading = loading
      })
    },
    //------------------------------------------------
    TheTagMapping() {
      if(!_.isEmpty(this.tagMapping)) {
        return this.tagMapping
      }
      return {
        text  : "title|nm",
        icon  : "icon",
        value : "id"
      }
    },
    //------------------------------------------------
    TheTagItemIconBy() {
      return this.tagItemIconBy
               || (meta => Wn.Util.getObjIcon(meta))
     },
    //---------------------------------------------------
    TheDropDisplay() {
      return this.dropDisplay || ["@<thumb>", "title", "nm"]
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-chart-raw-line.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/chart/raw/line/ti-chart-raw-line.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  props : {
    "areaView" : {
      type : [Object, Boolean],
      default : false
    },
    "pointView" : {
      type : [Object, Boolean],
      default : true
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    ChartSetup() {
      return (chart, data)=>{
        //console.log(data)
        let {list} = this.evalXYData(data)
        if(_.isEmpty(list))
          return

        // Set data
        chart.data(list);

        // Axis/Tick/Tooltip ...
        this.applyChartSetup(chart)

        // Draw line
        let view = chart.line().position(this.ChartPosition)
        this.applyViewOptions(view, this.view)

        // Draw point
        if(this.areaView) {
          view = chart.area().position(this.ChartPosition)
          this.applyViewOptions(view, this.areaView)
        }

        // Draw point
        if(this.pointView) {
          view = chart.point().position(this.ChartPosition)
          this.applyViewOptions(view, {   
            size  : 4,
            shape : 'circle',
            style : {
              stroke: '#FFF',
              lineWidth: 1
            }
          }, this.pointView)
        }

      } // ~ function
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-switcher-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/switcher/ti-switcher-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "value" : null,
  "options" : {
    type : [Array, Function, String, Ti.Dict],
    default : ()=>[]
  },
  "valueBy" : {
    type : [String, Function],
    default : undefined
  },
  "textBy" : {
    type : [String, Function],
    default : undefined
  },
  "iconeBy" : {
    type : [String, Function],
    default : undefined
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "readonly" : {
    type : Boolean,
    default : false
  },
  "multi" : {
    type : Boolean,
    default : false
  },
  // In single mode, to keep at least one item selected,
  // you can set the prop to `false`
  "allowEmpty" : {
    type : Boolean,
    default : true
  },
  "autoSplitValue": {
    type: [Boolean, String],
    default: true
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "defaultIcon" : {
    type : String,
    default : null
  },
  "emptylAs" : {
    default : null
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width" : {
    type : [Number, String],
    default : null
  },
  "height" : {
    type : [Number, String],
    default : null
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-gui.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/gui/wn-gui.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  /////////////////////////////////////////
  data : function(){
    return {
      "shown" : {}
    }
  },
  /////////////////////////////////////////
  props : {
    "data" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    layout() {
      if(this.data)
        return this.data.layout
      return {}
    },
    schema() {
      if(this.data)
        return this.data.schema
      return {}
    }
  },
  //////////////////////////////////////////
  watch : {
    // Notify wn-manager update the action menu
    "data.actions" : function(){
      //this.$notify("actions:updated", this.data.actions)
    }
  },
  //////////////////////////////////////////
  methods : {
    // @see ti-gui-methods.mjs#showGuiBlock
    showBlock(name) {
      this.shown = this.createGuiBlockShown(this.shown, name, true)
    },
    // @see ti-gui-methods.mjs#hideGuiBlock
    hideBlock(name) {
      this.shown = this.createGuiBlockShown(this.shown, name, false)
    }
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'vod-manager.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/net/aliyun/vod/manager/vod-manager.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////////
  data : ()=>({
    reloading: false,
    list: [],
    pager: {},
    scrollToken: null,
    myCurrentId: null,
    myCurrentVideo: null,
    myFilter: {
      match: {}
    },
    mySort: {
      CreationTime:-1
    }
  }),
  ///////////////////////////////////////////////////////
  props : {
    "meta": {
      type: Object,
      default: ()=>({})
    },
    "fields": {
      type: String,
      default: "Title,CoverURL,Duration,CateName,Size,Description,RegionID"
    },
    "filter": {
      type: Object,
      default: ()=>({
        comType: "ti-combo-filter",
        comConf: {
          placeholder: "i18n:net-flt-nil",
          form: {
            fields: [{
                title: "i18n:net-ct",
                name: "CreationTime",
                type: "Array",
                comType: "ti-input-daterange",
                comConf: {
                  "valueType" : "ms-array"
                }
                // }, {
                //   title: "i18n:net-vod-cate",
                //   name : "CateName",
                //   comType: "ti-input"
              }, {
                title: "i18n:net-vod-duration",
                name: "Duration",
                comType: "ti-switcher",
                comConf: {
                  autoSplitValue: false,
                  options: [
                    {value: "[0, 600]",    text:"i18n:net-vod-du-short"},
                    {value: "(600, 4800]", text:"i18n:net-vod-du-tv"},
                    {value: "(4800, )",    text:"i18n:net-vod-du-long"},
                  ]
                }
              }]
          }
        }
      })
    },
    "sorter": {
      type: Object,
      default: ()=>({
        comType: "ti-combo-sorter",
        comConf: {
          options: [
            {value:"CreationTime", text:"i18n:net-ct"}]
        }
      })
    },
    "pageSize": {
      type: Number,
      default: 20
    },
    "multi": {
      type: Boolean,
      default: true
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //---------------------------------------------------
    ConfName() {
      return _.get(this.meta, "vodConfigName")
    },
    //---------------------------------------------------
    CmdPrefix() {
      if(this.ConfName) {
        return `aliyunvod ${this.ConfName}`
      }
      return "aliyunvod"
    },
    //---------------------------------------------------
    ThePageNumber() {
      return _.get(this.pager, "pn") || 1
    },
    //---------------------------------------------------
    ThePageSize() {
      return _.get(this.pager, "pgsz") || this.pageSize
    },
    //---------------------------------------------------
    WallItemDisplay() {
      return {
        key : "..",
        comType : 'ti-obj-thumb',
        comConf : it => ({
          id: it.videoId,
          title: it.title,
          preview: {
            type: "image",
            value: it.coverURL
          } 
        })
      }
    },
    //---------------------------------------------------
    GuiLayout(){
      return {
        type: "cols",
        border:true,
        blocks: [{
            type:"rows",
            size:"61.8%",
            border:true,
            blocks: [{
                type: "cols",
                size: ".44rem",
                blocks: [{
                    name: "filter",
                    flex: "both",
                    body: "pcFilter"
                  }, {
                    name: "sorter",
                    flex: "none",
                    body: "pcSorter"
                  }]
              }, {
                name: "list",
                body: "pcList"
              }, {
                name: "pager",
                size: 40,
                body: "pcPager"
              }]
          }, {
            icon: "zmdi-tv-alt-play",
            title: "i18n:video",
            name: "video",
            body: "pcVideo"
          }]
      }
    },
    //---------------------------------------------------
    GuiSchema() {
      return {
        pcFilter: {
          comType: this.filter.comType,
          comConf: _.assign({
            value: this.myFilter
          }, this.filter.comConf)
        },
        pcSorter: {
          comType: this.sorter.comType,
          comConf: _.assign({
            value: this.mySort
          }, this.sorter.comConf)
        },
        pcList: {
          comType: "ti-wall",
          comConf: {
            data: this.list,
            idBy: "videoId",
            multi: this.multi,
            display: this.WallItemDisplay
          }
        },
        pcPager: {
          comType : "ti-paging-jumper",
          comConf : {
            value : this.pager
          }
        },
        pcVideo: {
          comType: "net-aliyun-vod-video-info",
          comConf: {
            value: this.myCurrentVideo
          }
        }
      }
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods :{
    //---------------------------------------------------
    async OnFilterChange(filter) {
      this.myFilter = filter
      this.pager = _.assign({}, this.pager, {pn:1})
      await this.reloadVideos()
    },
    //---------------------------------------------------
    async OnSorterChange(sort) {
      this.mySort = sort
      this.pager = _.assign({}, this.pager, {pn:1})
      await this.reloadVideos()
    },
    //---------------------------------------------------
    async OnPagerChange(pg) {
      this.pager = _.assign({}, this.pager, pg)
      // Save pageSize
      if(this.meta) {
        let pgsz = _.get(pg, "pgsz");
        if(!Ti.Util.isNil(pgsz)) {
          Ti.Storage.session.setObject(this.meta.id, {pgsz})
        }
      }

      await this.reloadVideos()
    },
    //---------------------------------------------------
    async OnListSelect({currentId, checkedIds, checked}) {
      this.myCurrentId = currentId
      // Select some thing
      if(currentId) {
        this.myCurrentVideo = await this.reloadVideoInfo(currentId)
        this.$notify("change", {
          currentId  : this.myCurrentId,
          current    : this.myCurrentVideo,
          checkedIds, checked
        })
      }
      // Select nothing
      else {
        this.myCurrentVideo = null
        this.$notify("change", undefined)
      }
    },
    //---------------------------------------------------
    async OnVideoPreview({title, videoId, coverURL}={}){
      // Request the playAuth
      let playAuth = await this.requestPlayAuth(videoId)

      // Open player
      await Ti.App.Open({
        icon: "zmdi-tv-alt-play",
        title: `Preview: ${title}`,
        textOk: null,
        textCancel: "i18n:close",
        position: "top",
        width: "90%",
        height: "90%",
        comType: "NetAliyunVodVideoPlayer",
        comConf: {
          videoId, playAuth,
          coverUrl: coverURL
        },
        components: "@com:net/aliyun/vod/video/player"
      })
    },
    //---------------------------------------------------
    async requestPlayAuth(videoId) {
      this.reloading = true
      let cmds = [this.CmdPrefix, "playauth", videoId, "-cqn"]
      let reo = await Wn.Sys.exec2(cmds.join(" "), {as:"json"})
      this.reloading = false

      return reo.playAuth
    },
    //---------------------------------------------------
    async reloadVideoInfo(videoId) {
      this.reloading = true
      let cmds = [this.CmdPrefix, "video", videoId, "-cqn"]
      let reo = await Wn.Sys.exec2(cmds.join(" "), {as:"json"})
      this.reloading = false

      return reo
    },
    //---------------------------------------------------
    toAliyunTime(tm) {
      return 
    },
    //---------------------------------------------------
    toMatchStr(keyword, match={}) {
      let ss = []
      if(!Ti.S.isBlank(keyword)) {
        // ID
        if(/^[a-z0-9]{32}$/.test(keyword)) {
          ss.push(`VideoId = '${keyword}'`)
        }
        // Title
        else {
          ss.push(`Title in ('${keyword.replace(/'/g,"")}')`)
        }
      }

      // March
      _.forEach(match, (val, key)=>{
        if(Ti.Util.isNil(val)) {
          return
        }
        //......................................
        // Region
        if(_.isString(val) && /^[\[(].+[)\]]$/.test(val)) {
          ss.push(`${key}=${val}`)
        }
        //......................................
        // Time
        else if(/time/i.test(key)) {
          let tfmt = "yyyy-MM-dd'T'HH:mm:ss'Z'"
          let times = Ti.Types.formatDateTime(val, tfmt)
          times = _.concat(times)

          // All day
          if(times.length == 1) {
            times.push(times[0])
          }

          // Move the last date
          let lastDay = Ti.Types.toDate(times[1]).getTime() + 86400000;
          times[1] = Ti.Types.formatDateTime(lastDay, tfmt)
          
          // Add scope
          ss.push(`${key}=['${times[0]}', '${times[1]}')`)
        }
                //......................................
        // In list
        else if(_.isArray(val)) {
          let vv = _.map(val, v=> {
            if(_.isString(v))
              return  v.replace(/'/g,"")
            return v
          })
          ss.push(`${key} in (${vv.join(",")})`)
        }
        //......................................
        // String
        else if(_.isString(val)) {
          ss.push(`${key} in ('${val.replace(/'/g,"")}')`)
        }
        //......................................
        // Others
        else {
          ss.push(`${key} = ${val}`)
        }
      })
      return ss.join(" and ")
    },
    //---------------------------------------------------
    async reloadVideos() {
      this.reloading = true
      // prepare the command
      let cmds = [this.CmdPrefix]
      //.................................................
      cmds.push("search", "-fields", `'${this.fields}'`)
      //.................................................
      // Join the Filter: Match/keyword
      let keyword = _.get(this.myFilter, "keyword")
      let match = _.get(this.myFilter, "match")
      if(!_.isEmpty(match) || !Ti.Util.isNil(keyword)) {
        try{
          cmds.push("-match", `"${this.toMatchStr(keyword, match)}"`)
        }catch(E) {
          console.error(E)
        }
      }
      //.................................................
      // Join the Filter: Sort
      let sort = []
      _.forEach(this.mySort, (as, by)=>{
        sort.push(`${by}:${as>0?'ASC':'DESC'}`)
      })
      if(!_.isEmpty(sort)) {
        cmds.push("-sort ", `${sort.join(" ")}`)
      }
      //.................................................
      // Join paging
      cmds.push("-pn", this.ThePageNumber)
      cmds.push("-pgsz", this.ThePageSize)
      cmds.push("-as page -cqn")

      //console.log("reloadVideo", cmds.join(' '))
      //.................................................
      // Run
      let reo = await Wn.Sys.exec2(cmds.join(" "), {as:"json"})
      this.list  = reo.list
      this.pager = reo.pager
      this.scrollToken = reo.scrollToken

      // Mark
      this.reloading = false
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  mounted : function() {
    if(this.meta) {
      let pager = Ti.Storage.session.getObject(this.meta.id)
      if(pager) {
        let pgsz = _.get(pager, "pgsz");
        this.pager.pgsz = pgsz
      }
    }
    this.reloadVideos()
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-paging-jumper.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/paging/jumper/ti-paging-jumper.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////
  props : {
    "value" : {
      type : Object,
      default : ()=>({
        pn : 0,     // Page Number
        pgsz : 0,   // PageSize
        pgc : 0,    // page count
        sum : 0,    // Total
        count : 0   // Record in page
      })
    }
  },
  ///////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    hasValue() {
      return !_.isEmpty(this.value) && this.value.pn > 0
    },
    //--------------------------------------
    PageNumberClass() {
      return this.hasValue && this.value.pgc > 1
              ? "is-enabled"
              : "is-disabled"
    },
    //--------------------------------------
    SumClass() {
      return this.hasValue && this.value.pgsz > 0
              ? "is-enabled"
              : "is-disabled"
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  methods : {
    //--------------------------------------
    isInvalidPageNumber(pageNumber) {
      return pageNumber <=0 
        || pageNumber > this.value.pgc
        || pageNumber == this.value.pn
    },
    //--------------------------------------
    getBtnClass(pageNumber) {
      if(!this.hasValue || this.isInvalidPageNumber(pageNumber)) {
        return "is-disabled"
      }
      return "is-enabled"
    },
    //--------------------------------------
    OnJumpTo(pageNumber) {
      if(!this.isInvalidPageNumber(pageNumber)) {
        this.$notify("change", {
          skip :  this.value.pgsz * (pageNumber-1),
          limit :  this.value.pgsz, 
          pn   : pageNumber, 
          pgsz : this.value.pgsz
        })
      }
    },
    //--------------------------------------
    async OnClickCurrent() {
      // No Necessary
      if(this.value.pgc <= 1)
        return
      // Ask new pageNumber
      let msg = Ti.I18n.getf("paging-change-pn", this.value)
      let str = await Ti.Prompt(msg, {
        value : this.value.pn
      })
      // NoChange
      if(!str || str == this.value.pn)
        return
      // verify the str
      let pn = parseInt(str)
      if(isNaN(pn) || pn<=0 || pn>this.value.pgc) {
        msg = Ti.I18n.getf("paging-change-pn-invalid", this.value)
        await Ti.Alert(msg, {
          title : "i18n:warn",
          type  : "warn",
          icon  : "im-warning",
          width : 420
        })
        return 
      }
      // 通知修改
      this.$notify("change", {
        skip :  this.value.pgsz * (pn-1),
        limit :  this.value.pgsz, 
        pn   : pn, 
        pgsz : this.value.pgsz
      })
    },
    //--------------------------------------
    async OnClickSum(){
      let msg = Ti.I18n.getf("paging-change-pgsz", this.value)
      let str = await Ti.Prompt(msg, {
        value : this.value.pgsz
      })
      // NoChange
      if(!str || str == this.value.pgsz)
        return
      // verify the str
      let pgsz = parseInt(str)
      if(isNaN(pgsz) || pgsz<=0) {
        await Ti.Alert("i18n:paging-change-pgsz-invalid", {
          title : "i18n:warn",
          type  : "warn",
          icon  : "im-warning",
          width : 420
        })
        return 
      }
      // 通知修改
      this.$notify("change:pgsz", pgsz)
      this.$notify("change", {
        skip  : 0,
        limit : pgsz,
        pn    : 1, 
        pgsz  : pgsz
      })
    }
  }
  ///////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-combo-filter-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/filter/ti-combo-filter-props.mjs'] = (function(){
const _M  = {
  "major" : {
    type : Object,
    default : undefined
  },
  "form" : {
    type : Object,
    default : undefined
  },
  "autoCollapse" : {
    type : Boolean,
    default : false
  },
  "statusIcons" : {
    type : Object,
    default : ()=>({
      collapse : "zmdi-chevron-down",
      extended : "zmdi-chevron-up"
    })
  },
  "autoFocusExtended": {
    type: Boolean,
    default: true
  },
  "spacing" : {
    type : String,
    default : "tiny",
    validator : v => /^(none|comfy|tiny)$/.test(v)
  },
  "dropWidth" : {
    type : [Number, String],
    default : "box"
  },
  "dropHeight" : {
    type : [Number, String],
    default : undefined
  }
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-imgfile.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/imgfile/wn-imgfile.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  data : ()=>({
    "src_ts" : null,
    "oImage"     : null,
    "uploadFile" : null,
    "progress"   : -1
  }),
  /////////////////////////////////////////
  props : {
    "value" : {
      type : String,
      default : null
    },
    // Display width
    "width" : {
      type : [String, Number],
      default : undefined
    },
    // Display height
    "height" : {
      type : [String, Number],
      default : undefined
    },
    // support remove the objects
    "removable" : {
      type : Boolean,
      default : true
    },
    // Indicate the upload target when upload new value
    // Of cause, if the `value` exists, replace it
    // The `target` must be a path to a image object,
    // it will auto transfrom the image format by `cmd_imagic`
    "target" : {
      type : String,
      required: true,
      default : null
    },
    // which type supported to upload
    // nulll or empty array will support any types
    "supportTypes" : {
      type : [String, Array],
      default : ()=>["png","jpg","jpeg","gif"]
    },
    // which mime supported to upload
    // nulll or empty array will support any mimes
    "supportMimes" : {
      type : [String, Array],
      default : ()=>["image/png","image/jpeg","image/gif"]
    },
    // Image object only: it will auto apply image filter
    // just like clip the image size etc..
    // @see cmd_imagic for more detail about the filter
    "filter" : {
      type : [Array, String],
      default : null
    },
    // Image object only: if `>0 and <=1` mean output quality
    // if not match the range, will depends on the `cmd_imagic` default
    "quality" : {
      type : Number,
      default : 0
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    acceptTypes() {
      if(_.isString(this.supportTypes))
        return this.supportTypes.split(",")
      return this.supportTypes
    },
    //--------------------------------------
    acceptMimes() {
      if(_.isString(this.supportMimes))
        return this.supportMimes.split(",")
      return this.supportMimes
    },
    //--------------------------------------
    imageFilter() {
      if(!this.filter)
        return []
      return [].concat(this.filter)
    },
    //--------------------------------------
    // Display image for <ti-thumb>
    imageSrc() {
      if(this.oImage) {
        let ss = ["/o/content?str=id:", this.oImage.id]
        if(this.src_ts) {
          ss.push("&_t=")
          ss.push(this.src_ts)
        }
        return ss.join("")
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    async assertListHas(list, str, invalidMsg, vars) {
      if(!_.isEmpty(list)) {
        let invalid  = true
        for(let li of list) {
          if(li == str) {
            invalid = false
            break
          }
        }
        if(invalid) {
          await Ti.Alert(invalidMsg, {type:"warn", icon:"zmdi-alert-triangle"})
          return false
        }
      }
      return true
    },
    //--------------------------------------
    async onOpen() {
      // remove the thumb file
      if(this.oImage) {
        let link = Wn.Util.getAppLink(this.oImage)
        //console.log("it will open ", link)
        await Ti.Be.Open(link.url, {params:link.params})
      }
    },
    //--------------------------------------
    async onRemove() {
      // remove the thumb file
      if(this.oImage) {
        await Wn.Sys.exec2(`rm id:${this.oImage.id}`)
      }
      // Notify the change
      this.$notify("change", null)
    },
    //--------------------------------------
    async onUpload(file) {
      //console.log("it will upload ", file)

      //................................
      // Check for support Types
      let type = Ti.Util.getSuffixName(file.name)
      if(!await this.assertListHas(
        this.acceptTypes, type, {
          text : 'i18n:wn-invalid-types',
          vars : {current:type, supports:this.acceptTypes.join(", ")}
        })) {
        return
      }
      if(!await this.assertListHas(
        this.acceptMimes, file.type, {
          text : 'i18n:wn-invalid-mimes',
          vars : {current:file.type, supports:this.acceptMimes.join(", ")}
        })) {
        return
      }

      //................................
      // Upload file to destination
      this.uploadFile = file
      this.progress = 0

      let {ok, msg, data} = await Wn.Io.uploadFile(file, {
        target : this.target,
        mode   : "r",
        progress : (pe)=> {
          this.progress = pe.loaded / pe.total
        }
      })

      //................................
      // Reset upload
      this.uploadFile = null
      this.progress = -1

      //................................
      // Fail to upload
      if(!ok) {
        await Ti.Alert(`i18n:${msg}`, {type:"warn", icon:"zmdi-alert-triangle"})
        return
      }

      //................................
      // do Filter
      if(!_.isEmpty(this.imageFilter)) {
        let cmd = [
          "imagic", `id:${data.id}`, 
          `-filter "${this.imageFilter.join(" ")}"`]       
        if(this.quality>0 && this.quality<=1) {
          cmd.push(`-qa ${this.quality}`)
        }
        cmd.push("-out inplace")
        let cmdText = cmd.join(" ")
        await Wn.Sys.exec2(cmdText)
      }

      //................................
      // done
      this.src_ts = Date.now()
      this.oImage = data
      this.$notify("change", data)
    },
    //--------------------------------------
    async reload() {
      if(this.value) {
        this.oImage = await Wn.Io.loadMeta(this.value)
      }
      // Reset
      else {
        this.oImage = null
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "value" : function() {
      this.reload()
    }
  },
  //////////////////////////////////////////
  mounted : async function(){
    await this.reload()
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-input-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/ti-input-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "value" : undefined,
  "format" : undefined,
  "valueCase" : {
    type : String,
    default : undefined,
    validator : (cs)=>(Ti.Util.isNil(cs)||Ti.S.isValidCase(cs))
  },
  "trimed" : {
    type : Boolean,
    default : true
  },
  "autoJsValue" : {
    type : Boolean,
    default : false
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "readonly" : {
    type: Boolean,
    default : false
  },
  "focused" : {
    type : Boolean,
    default : false
  },
  "hover" : {
    type : [Array, String],
    default : ()=>["prefixIcon", "suffixIcon"]
  },
  "autoSelect" : {
    type : Boolean,
    default : undefined
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "placeholder" : {
    type : [String, Number],
    default : undefined
  },
  "autoI18n" : {
    type : Boolean,
    default : false
  },
  "hideBorder" : {
    type : Boolean,
    default : false
  },
  "prefixIcon" : {
    type : [String, Object],
    default : undefined
  },
  "prefixHoverIcon" : {
    type : String,
    default : "zmdi-close-circle"
  },
  "prefixIconForClean" : {
    type : Boolean,
    default : true
  },
  "prefixText" : {
    type : String,
    default : undefined
  },
  "suffixIcon" : {
    type : [String, Object],
    default : undefined
  },
  "suffixText" : {
    type : String,
    default : undefined
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width" : {
    type : [Number, String],
    default : undefined
  },
  "height" : {
    type : [Number, String],
    default : undefined
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-gui-tabs.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/gui/tabs/ti-gui-tabs.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  inject: ["$gui"],
  /////////////////////////////////////////
  data: ()=>({
    myCurrentTab : 0
  }),
  /////////////////////////////////////////
  props : {
    "tabAt" : {
      type : String,
      default : "top-left",
      validator : (v)=>/^(top|bottom)-(left|center|right)$/.test(v)
    },
    "blocks" : {
      type : Array,
      default : ()=>[]
    },
    "schema" : {
      type : Object,
      default : ()=>({})
    },
    "actionStatus" : {
      type : Object,
      default : ()=>({})
    },
    "shown" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass(`at-${this.TheTabAt[0]}`)
    },
    //--------------------------------------
    TheTabAt() {
      return this.tabAt.split("-")
    },
    //--------------------------------------
    TabClass() {
      return `as-${this.TheTabAt[1]}`
    },
    //--------------------------------------
    BlockWrapList() {
      let list = []
      for(let i=0; i<this.blocks.length; i++) {
        let block = this.blocks[i]
        let key = block.name || `tab-${i}`
        list.push({
          index : i, 
          key, block          
        })
      }
      return list
    },
    //--------------------------------------
    TabItems() {
      let list = []
      for(let wrap of this.BlockWrapList) {
        let current = this.myCurrentTab == wrap.key
        let item = {
          current,
          key   : wrap.key,
          index : wrap.index,
          name  : wrap.block.name, 
          icon  : wrap.block.icon,
          title : wrap.block.title,
          className : {"is-current":current}
        }
        // tab item can not be blank
        if(!item.icon && !item.title) {
          item.title = Ti.Util.fallback(item.name, item.key)
        }
        list.push(item)
      }
      return list
    },
    //--------------------------------------
    CurrentTabItem() {
      for(let item of this.TabItems) {
        if(item.current) {
          return item
        }
      }
    },
    //--------------------------------------
    CurrentBlock() {
      for(let wrap of this.BlockWrapList) {
        if(this.myCurrentTab == wrap.key) {
          return wrap.block
        }
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnSetCurrentTabItem(item) {
      this.$gui.OnBlockShownUpdate({
        [item.key] : true,
        [this.CurrentTabItem.key] : false
      })
    },
    //--------------------------------------
    $current() {
      return _.nth(this.$children, 0)
    },
    //--------------------------------------
    $currentMain() {
      let $block = this.$current()
      if($block)
        return $block.$main()
    },
    //--------------------------------------
    syncCurrentTabFromShown() {
      //console.log("syncCurrentTabFromShown")
      for(let wrap of this.BlockWrapList) {
        if(this.shown[wrap.key]) {
          this.myCurrentTab = wrap.key
          return
        }
      }
      // Default highlight the first tab
      if(this.BlockWrapList.length>0) {
        this.myCurrentTab = this.BlockWrapList[0].key
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "shown" : function() {
      this.syncCurrentTabFromShown()
    },
    "blocks" : function() {
      this.syncCurrentTabFromShown()
    }
  },
  //////////////////////////////////////////
  mounted : function() {
    this.syncCurrentTabFromShown()
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'nav-crumb.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/nav/crumb/nav-crumb.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    "title" : {
      type : String,
      default: undefined
    },
    "sep" : {
      type : String,
      default : "fas-angle-right"
    }
  },
  /////////////////////////////////////////
  computed : {
    //------------------------------------
    //------------------------------------
  },
  /////////////////////////////////////////
  methods : {
    //------------------------------------
    //------------------------------------
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'nav-columns.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/nav/columns/nav-columns.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    "items" : {
      type : Array,
      default : ()=>[]
    },
    "path" : {
      type : String,
      default: null
    },
    "align" : {
      type : String,
      default : "center",
      validator: v => /^(left|center|right)$/.test(v)
    },
    "spacing" : {
      type : String,
      validator: v => /^(tiny|comfy|wide)$/.test(v)
    },
    "border" : {
      type : String,
      default : "solid",
      validator: v => /^(none|solid|dashed|dotted)$/.test(v)
    }
  },
  /////////////////////////////////////////
  computed : {
    //------------------------------------
    TopClass() {
      return this.getTopClass(
        `is-spacing-${this.spacing}`,
        `is-align-${this.align}`,
        ()=> {
          if(this.border)
            return `is-border-${this.border}`
        }
      )
    },
    //------------------------------------
    TheItems() {
      return this.evalItems(this.items)
    }
    //------------------------------------
  },
  /////////////////////////////////////////
  methods : {
    //------------------------------------
    OnClickLink(evt, {type,value,params}={}) {
      if(/^(page|action)$/.test(type)) {
        evt.preventDefault()
        //console.log("onClickLink", "nav:to", {type,value,params})
        this.$notify("nav:to", {type,value,params})
      }
    },
    //------------------------------------
    evalItems(items) {
      // Explain first
      items = Ti.WWW.explainNavigation(items, this.base)

      // The Eval
      let list = []
      _.forEach(items, (it, index)=>{
        //................................
        let li = _.pick(it, [
          "icon", "title", "type", "params",
          "href", "target", "value"])
        //................................
        li.index = index
        //................................
        if(this.path) {
          li.highlight = it.highlightBy(this.path)
        }
        //................................
        let hasHref = li.href ? true : false;
        li.className = {
          "has-href"    : hasHref,
          "nil-href"    : !hasHref,
          "is-highlight": li.highlight,
          "is-normal"   : !li.highlight,
        }
        //................................
        if(it.items) {
          li.items = this.evalItems(it.items)
        }
        //................................
        list.push(li)
        //................................
      })
      return list
    }
    //------------------------------------
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-markdown-richeditor-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/markdown/richeditor/ti-markdown-richeditor-props.mjs'] = (function(){
const _M = {
  //...............................................
  // Data
  //...............................................
  "mediaBase" : {
    type : String,
    default : undefined
  },
  "value" : {
    type : String,
    default : undefined
  }, 
  //...............................................
  // Behavior
  //...............................................
  // Ext-toolbar item defination
  "actions": {
    type: Object,
    default: ()=>({})
  },
  // preview -> markdown -> save
  "markdownMediaSrc": {
    type: [String, Function],
    default: undefined
  },
  // load -> markdown -> preview
  "previewMediaSrc": {
    type: [String, Function],
    default: undefined
  },
  //...............................................
  // Aspact
  //...............................................
  "placeholder" : {
    type : String,
    default : "i18n:blank"
  },
  "theme" : {
    type : String,
    default : "nice"
  },
  "toolbar" : {
    type : Array,
    default : ()=>[
      "Heading", "|", "B", "I", "|", "Link", "Code", 
      "|", "BlockQuote", "CodeBlock", 
      "|", "Outdent", "Indent",  
      "|", "UL", "OL"
      ]
  },
  "toolbarAlign" : {
    type : String,
    default: "left",
    validator : v => /^(left|right|center)$/.test(v)
  },
  "loadingAs" : {
    type : Object,
    default : ()=>({
      className : "as-nil-mask as-big-mask",
      icon : undefined,
      text : undefined
    })
  },
  "blankAs" : {
    type : Object,
    default : ()=>({
      comType : "TiLoading",
      comConf : {
        className : "as-nil-mask as-big-mask",
        icon : "fas-coffee",
        text : null
      }
    })
  }
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-lbs-map-baidu.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/lbs/map/baidu/ti-lbs-map-baidu.mjs'] = (function(){
//
// The coordinate base on BD09
//
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  inheritAttrs : false,
  /////////////////////////////////////////
  data : ()=>({
    valueMarker : null
  }),
  /////////////////////////////////////////
  props : {
    // @see http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference_3_0.html#a5b0
    // ROADMAP    : BMAP_NORMAL_MAP
    // SATELLITE  : BMAP_SATELLITE_MAP
    // HYBRID     : BMAP_HYBRID_MAP
    "mapType" : {
      type : String,
      default : "ROADMAP"
    },
    // Map center : {"lat":39.9042, "lng":116.4074}
    // If null, it will auto sync with the value
    "center" : {
      type : Object,
      // default : ()=>({
      //   {"lat":39.9042, "lng":116.4074}
      // })
      default : null
    },
    "zoom" : {
      type : Number,
      default : 8
    },
    // A LatLng Point in map, which react the changing
    "value" : {
      type : Object,
      default : null
    },
    "valueOptions" : {
      type : Object,
      default : ()=>({
        icon : null,
        title : "UserMarker",
        // DOWN|BOUNCE|DROP|UP
        animation : "DOWN"
      })
    }
  },
  //////////////////////////////////////////
  computed : {
    //-------------------------------------
    mapCenterLatLng() {
      if(!_.isEmpty(this.center)) {
        return this.genLatLng(this.center)
      }
      if(!_.isEmpty(this.value)) {
        return this.genLatLng(this.value)
      }
      // Default center to beijing
      return this.genLatLng({lat:39.9042, lng:116.4074})
    },
    //-------------------------------------
    mapTypeId() {
      return ({
        "ROADMAP"   : BMAP_NORMAL_MAP,
        "SATELLITE" : BMAP_SATELLITE_MAP,
        "HYBRID"    : BMAP_HYBRID_MAP
      })[this.mapType] || BMAP_NORMAL_MAP
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //-------------------------------------
    genLatLng({lat, lng}={}) {
      return new BMap.Point(lng, lat)
    },
    //-------------------------------------
    drawValue() {
      let $map = this.__map
      let opt  = this.valueOptions

      // Guard the value
      if(!this.value)
        return

      let point = this.genLatLng(this.value);
      var marker = new BMap.Marker(point)
      $map.addOverlay(marker);

      this.valueMarker = marker
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "value" : function(){this.drawValue()}
  },
  //////////////////////////////////////////
  mounted : async function() {
    // Init Map
    let $map = new BMap.Map(this.$refs.arena, {
      mapType : this.mapTypeId
    })
    $map.centerAndZoom(this.mapCenterLatLng, this.zoom);
    $map.addControl(new BMap.MapTypeControl({
      mapTypes:[
              BMAP_NORMAL_MAP,
              BMAP_SATELLITE_MAP,
              BMAP_HYBRID_MAP
          ]}));	
    $map.enableScrollWheelZoom(true);
    // Store
    this.__map = $map
    // Draw Value
    this.drawValue()
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'www-mod-auth.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/lib/www/mod/auth/www-mod-auth.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////
  getters : {
    //--------------------------------------------
    hasSession(state) {
      return !_.isEmpty(state.ticket)
             && state.expi > Date.now()
             && !_.isEmpty(state.me)
    },
    //--------------------------------------------
    sessionState(state, getters) {
      return {
        ok : getters.hasSession,
        data : {
          me     : state.me     || null,
          ticket : state.ticket || null,
          expi   : state.expi   || 0
        }
      }
    },
    //--------------------------------------------
    urls(state, getters, rootState, rootGetters) {
      let map = {}
      _.forEach(state.paths, (ph, key)=>{
        map[key] = rootGetters.getApiUrl(ph)
      })
      return map
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  mutations : {
    //--------------------------------------------
    setTicket(state, ticket) {
      state.ticket = ticket
    },
    //--------------------------------------------
    setExpi(state, expi) {
      state.expi = expi
    },
    //--------------------------------------------
    setMe(state, me) {
      // Auto deal with Two-Stage-ID
      if(me && me.id) {
        me.OID = Ti.Types.parseTowStageID(me.id)
      }
      // Update state
      state.me = me
    },
    //--------------------------------------------
    setPaths(state, paths) {
      _.assign(state.paths, paths)
    },
    //--------------------------------------------
    mergePaths(state, paths) {
      _.merge(state.paths, paths)
    },
    //--------------------------------------------
    setAddresses(state, addresses) {
      state.addresses = addresses
      // Get default address
      if(_.isArray(addresses)) {
        let dfta = null
        for(let addr of addresses) {
          if(addr.dftaddr) {
            dfta = addr
            break
          }
        }
        state.defaultAddr = dfta
      }
    },
    //--------------------------------------------
    setCountries(state, countries) {
      state.countries = countries
      let map = {}
      _.forEach(countries, it=> {
        map[it.key] = it.name
      })
      state.countryMap = map
    }
    //--------------------------------------------
  }
  ////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-input-tags.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/tags/ti-input-tags.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    
  }),
  ////////////////////////////////////////////////////
  props : {
    "inputChange" : {
      type: Function,
      default : undefined
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    /***
     * @return The tag objects list like:
     * 
     * ```js
     * [{
     *   icon  : "zmdi-phone",
     *   text  : "i18n:xxx",
     *   value : 100,
     *   options : [{icon,text,value}...]
     * }]
     * ```
     */
    theTags() {
      return this.evalTagList(this.value)
    },
    //------------------------------------------------
    hasTags() {
      return !_.isEmpty(this.theTags)
    },
    //------------------------------------------------
    thePlaceholder() {
      if(this.placeholder) {
        return this.placeholder
      }
      if(this.readonly || !this.canInput) {
        return ""
      }
      return "i18n:input-tags"
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    onInputInit($input) {this.$input=$input},
    //------------------------------------------------
    /***
     * @return The tag objects list like:
     * 
     * ```js
     * [{
     *   icon  : "zmdi-phone",
     *   text  : "i18n:xxx",
     *   value : 100,
     *   options : [{icon,text,value}...]
     * }]
     * ```
     */
    evalTagList(values=[], newTagVal) {
      //...........................................
      // Prepare the list
      let list = _.filter(_.concat(values), (v)=>!Ti.Util.isNil(v))
      // Join the last one
      if(!Ti.Util.isNil(newTagVal)) {
        list.push(newTagVal)
      }
      // valueUnique
      if(this.valueUnique) {
        list = _.uniq(list)
      }
      // The MaxValueLen
      if(this.maxValueLen > 0) {
        list = _.slice(list, 0, this.maxValueLen)
      }
      // Slice from the end
      else if(this.maxValueLen < 0) {
        let offset = Math.max(0, list.length + this.maxValueLen)
        list = _.slice(list, offset)
      }
      // Gen Tag List
      let tags = []
      for(let li of list) {
        // Object
        if(_.isPlainObject(li)) {
          tags.push(_.assign({
            icon    : this.tagIcon,
            options : this.tagOptions
          }, li))
        }
        // String or simple value
        else {
          tags.push(li)
        }
      }
      //...........................................
      return tags
    },
    //------------------------------------------------
    getTagValues(tags=[]) {
      let list = []
      for(let tag of tags) {
        let val = _.isPlainObject(tag)
          ? tag.value
          : tag
        if(!Ti.Util.isNil(val)) {
          list.push(val)
        }
      }
      return list
    },
    //------------------------------------------------
    onInputInputing(val) {
      this.$notify("inputing", val)
    },
    //------------------------------------------------
    onInputChanged(val) {
      // May click the prefix icon for clean
      if(_.isNull(val)) {
        this.$notify("change", [])
      }
      // Delegate to parent
      else if(_.isFunction(this.inputChange)) {
        this.inputChange(val)
      }
      // Handle by self
      else if(val) {
        let tags = this.evalTagList(this.value, val)
        let vals = this.getTagValues(tags)
        this.$notify("change", vals)
      }
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'md-richeditor.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/markdown/richeditor2/md-richeditor.mjs'] = (function(){
/////////////////////////////////////////////////////
const _M = {
  ///////////////////////////////////////////////////
  data: ()=>({
    myMeta : {},
    syncForbid : 0,
    myToolbarStatus : {}
  }),
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    TopClass() {
      return this.getTopClass({
        "nil-content" : this.isContentNil,
        "has-content" : !this.isContentNil
      })
    },
    //-----------------------------------------------
    ThemeClass() {
      if(this.ThemeName) {
        return `ti-markdown-theme-${this.ThemeName}`
      }
    },
    //-----------------------------------------------
    ThemeName() {
      return _.get(this.myMeta, "theme") || this.theme
    },
    //-----------------------------------------------
    hasToolbar() {
      return !_.isEmpty(this.ToolbarMenuData)
    },
    //-----------------------------------------------
    isContentLoading() {
      return _.isUndefined(this.value)
    },
    //-----------------------------------------------
    isContentNil() {
      return Ti.Util.isNil(this.value)
    },
    //-----------------------------------------------
    BlankComStyle() {
      return {
        position: "absolute",
        top:0, right:0, bottom:0, left:0
      }
    },
    //-----------------------------------------------
    TheMarkdownMediaSrc() {
      if(_.isFunction(this.markdownMediaSrc)){
        return this.markdownMediaSrc
      }

      if(_.isString(this.markdownMediaSrc)) {
        return Ti.Util.genInvoking(this.markdownMediaSrc, {
          partial: "right"
        })
      }
    },
    //-----------------------------------------------
    ThePreviewMediaSrc() {
      if(_.isFunction(this.previewMediaSrc)){
        return this.previewMediaSrc
      }

      if(_.isString(this.previewMediaSrc)) {
        return Ti.Util.genInvoking(this.previewMediaSrc, {
          partial: "right"
        })
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    // Events
    //-----------------------------------------------
    async OnClickPre() {
      let json = await Ti.App.Open({
        width: 600, height: "96%",
        title : "Edit delta",
        result : JSON.stringify(this.myDelta, null, '   '),
        comType : "TiInputText",
        comConf : {
          height: "100%"
        },
        components : "@com:ti/input/text"
      })

      if(!json)
        return

      let delta = JSON.parse(json);
      this.$editor.setContents(delta);
    },
    //-----------------------------------------------
    // Utility
    //-----------------------------------------------
    async renderMarkdown() {
      //console.log("!!!!!!!!!!!!!!!!!!!!!! renderMarkdown")
      if(!Ti.Util.isBlank(this.value)) {
        // Parse markdown
        let MdDoc = Cheap.parseMarkdown(this.value)
        //console.log(MdDoc.toString())
        window.MdDoc = MdDoc
        this.myMeta = _.cloneDeep(MdDoc.getMeta())

        // Get delta
        let delta = await MdDoc.toDelta({
          mediaSrc: this.ThePreviewMediaSrc
        })
        //console.log(JSON.stringify(delta, null, '   '))

        // Update Quill editor content
        this.$editor.setContents(delta);
        
      }
      // Show Blank
      else {
        this.myMeta = {}
        this.$editor.setContents([]);
      }
    },
    //-----------------------------------------------
    syncMarkdown() {
      if(this.syncForbid > 0) {
        //console.log("!forbid! syncMarkdown", this.syncForbid)
        this.syncForbid --
        return
      }
      this.renderMarkdown()
    },
    //-----------------------------------------------
    // Highlight
    //-----------------------------------------------
    // highlightCode() {
    //   for(let $code of this.$refs.stage.querySelectorAll("pre")) {
    //     console.log($code)
    //     hljs.highlightBlock($code)
    //   }
    // },
    
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "value" : {
      handler : "syncMarkdown"
    },
    "isContentNil": function(newVal, oldVal){
      //console.log("isContentNil", newVal, oldVal)
      if(newVal) {
        this.syncForbid = 0
      }
    }
  },
  ///////////////////////////////////////////////////
  mounted() {
    this.syncForbid = 0;
    this.installQuillEditor()
    this.syncMarkdown()
  },
  ///////////////////////////////////////////////////
  beforeDestroy() {
    this.syncForbid = 0;
  }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'link-item.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/nav/links/com/link-item/link-item.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////////
  data: ()=>({
    myDockReady : false,
    myDockShow  : false,
  }),
  ///////////////////////////////////////////////////////
  methods : {
    //---------------------------------------------------
    dockSub: function() {
      // let $sub = Ti.Dom.find(".sub-items", this.$el)
      // // Guard
      // if(!$sub) {
      //   return
      // }
      // // Ready to dock
      // let $an = $sub.parentNode
      // let rAn = Ti.Rects.createBy($an)
      // let rSub = Ti.Rects.createBy($sub)
      // let css = Ti.Css.toStyle({
      //   top  : rAn.height,
      //   left : (rAn.width - rSub.width)/2
      // })
      // Ti.Dom.setStyle($sub, css)
      let $con = this.$refs.con
      if(!_.isElement($con))
        return

      let mode = "V";
      let space = {x:-1};
      if(this.isTop) {
        mode = "H"
        space = {y:-1}
      }
      Ti.Dom.dockTo($con, this.$el, {
        mode, space, coord: "target"
      })
      this.myDockReady = true
      _.delay(()=>{
        this.myDockShow = true
      }, 10)
    },
    //---------------------------------------------------
    dockSubDelay: function() {
      if(!this.isOpened) {
        this.myDockReady = false
        this.myDockShow  = false
        return
      }

      _.delay(()=>{
        if(!this.$refs.con) {
          this.dockSubDelay()
        } else {
          this.dockSub()
        }
      }, 10)
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  watch : {
    "isOpened" : "dockSubDelay"
  },
  ///////////////////////////////////////////////////////
  mounted : function() {
    Ti.Viewport.watch(this, {
      scroll : ()=> {
        if(this.isOpened) {
          this.notifyGroupOpenStatus(false)
        }
      }
    })
  },
  ///////////////////////////////////////////////////////
  beforeDestroy : function(){
    Ti.Viewport.unwatch(this)
  }
  ///////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-pay-choose.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/pay/choose/web-pay-choose.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////////////
  props : {
    "value" : {
      type : String,
      default : null
    }
  },
  //////////////////////////////////////////////////
  computed : {
    //----------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //----------------------------------------------
    hasPayType() {
      return Ti.Bank.isValidPayType(this.value)
    },
    //----------------------------------------------
    PayTypeText() {
      return Ti.Bank.getPayTypeChooseI18nText(this.value, {
        text:'pay-step-choose-tip2',
        nil:'pay-step-choose-nil'
      })
    }
    //----------------------------------------------
  },
  //////////////////////////////////////////////////
  methods : {
    //----------------------------------------------
    OnChooseOption({value}={}) {
      this.$emit("change", {
        payType: value
      })
    },
    //----------------------------------------------
    getOptionClass(op) {
      if(op.value == this.value) {
        return "is-enabled"
      }
      return "is-disabled"
    }
    //----------------------------------------------
  },
  //////////////////////////////////////////////////
  mounted() {
    this.$notify("change:title", "pay-step-choose-title2")
  }
  //////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'bar-item-action.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/actionbar/com/bar-item-action/bar-item-action.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////
  inject: ["$bar"],
  ///////////////////////////////////////
  props : {
    //-----------------------------------
    // Same as <bar-item-info>
    //-----------------------------------
    "name": {
      type: String,
      default: undefined
    },
    "icon": {
      type: String,
      default: undefined
    },
    "hideIcon" : {
      type: Boolean,
      default: false
    },
    "text": {
      type: String,
      default: undefined
    },
    "tip": {
      type: String,
      default: undefined
    },
    "altDisplay" : {
      type: [Object, Array],
      default: ()=>[]
    },
    "enabled": {
      type: [String, Array, Object],
      default: undefined
    },
    "disabled": {
      type: [String, Array, Object],
      default: undefined
    },
    "highlight": {
      type: [String, Array, Object],
      default: undefined
    },
    "value" : {
      type: [Boolean, String, Number, Array],
      default: true
    },
    "depth": {
      type: Number,
      default: 0
    },
    "status" : {
      type : Object,
      default : ()=>({})
    },
    //-----------------------------------
    // Self Props
    //-----------------------------------
    "action" : {
      type : [String, Object, Function],
      default: undefined
    },
    "notifyChange" : {
      type : [Boolean, String],
      default: false
    },
    "eventName" : {
      type : String,
      default: undefined
    },
    "payload" : undefined,
    "wait" : {
      type : Number,
      default: 0
    },
    "delay" : {
      type : Number,
      default: 0
    },
    "shortcut": {
      type: String,
      default: undefined
    }
  },
  ///////////////////////////////////////
  computed: {
    //-----------------------------------
    NotifyChangeName() {
      if(this.notifyChange) {
        return _.isString(this.notifyChange)
                ? this.notifyChange
                : this.name;
      }
    },
    //-----------------------------------
    TheAction() {
      if(_.isFunction(this.action) && this.wait > 0) {
        return _.debounce(this.action, this.wait, {leading:true})
      }
      return this.action
    }
    //-----------------------------------
  },
  ///////////////////////////////////////
  methods : {
    OnFired(val) {
      // Call Action
      if(this.action) {
        let app = Ti.App(this)
        let invoking = Ti.Shortcut.genActionInvoking(this.TheAction, {
          $com : this.$bar.$parent,
          argContext: app.$state()
        })
        // Invoke it
        _.delay(()=>{
          invoking(val)
        }, this.delay)
      }

      // notify: name/value object
      if(this.NotifyChangeName) {    
        _.delay(()=>{
          this.$bar.notifyChange({
            name  : this.NotifyChangeName,
            value : val
          })
        }, this.delay)
      }

      // notify: eventName
      if(this.eventName) {
        let payload = this.payload
        if(payload) {
          payload = Ti.Util.explainObj({
            name  : this.name,
            value : val
          }, payload)
        }
        _.delay(()=>{
          this.$bar.$notify(this.eventName, payload)
        }, this.delay)
      }
    }
  },
  ///////////////////////////////////////
  mounted : function() {
    if(this.shortcut) {
      Ti.App(this).guardShortcut(this, this.shortcut, ()=>{
        return this.isEnabled
      })
    }
  },
  ///////////////////////////////////////
  destroyed : function(){
    if(this.shortcut) {
      Ti.App(this).pulloutShortcut(this)
    }
  }
  ///////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'side-item.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/nav/side/com/side-item/side-item.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////////
  props : {
    "openedIcons" : undefined
  },
  ///////////////////////////////////////////////////////
  computed : {
    OpenStatusIcon() {
      return this.isOpened
        ? this.openedIcons.opened
        : this.openedIcons.closed
    }
  },
  ///////////////////////////////////////////////////////
  methods : {
    //---------------------------------------------------
    OnTransBeforeEnter($con) {
      // console.log("before enter")
      Ti.Dom.setStyle($con, {height: 0, overflow: "hidden"})
    },
    OnTransEnter($con) {
      // console.log("enter")
      Ti.Dom.setStyle($con, {height: $con.scrollHeight - 4})
    },
    OnTransAfterEnter($con) {
      // console.log("after enter")
      _.delay(()=>{
        Ti.Dom.setStyle($con, {height: "", overflow: ""})
      })
    },
    //---------------------------------------------------
    OnTransBeforeLeave($con) {
      //console.log("before leave", height)
      Ti.Dom.setStyle($con, {height: $con.scrollHeight, overflow: "hidden"})
    },
    OnTransLeave($con) {
      //console.log("leave", $con.scrollHeight)
      _.delay(()=>{
        Ti.Dom.setStyle($con, {height: 0})
      })
    },
    OnTransAfterLeave($con) {
      //console.log("after leave")
      _.delay(()=>{
        Ti.Dom.setStyle($con, {height: "", overflow: ""})
      })
    }
    //---------------------------------------------------
  }
  ///////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-table.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/table/wn-table.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////
  data : ()=>({
    isAllChecked  : false,
    hasChecked    : false,
    theCurrentId  : false,
    theCheckedIds : false
  }),
  ///////////////////////////////////////////////////
  computed : {
    //----------------------------------------------
    TheFields() {
      let list = []
      for(let fld of this.fields) {
        let f2 = _.assign({}, fld)
        f2.display = this.explainDisplayItems(fld.display)
        list.push(f2)
      }
      return list
    }
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //----------------------------------------------
    OnSubListInit($list) {this.$list = $list},
    //----------------------------------------------
    OnSelected(payload={}){
      this.theCheckedIds = payload.checkedIds
      this.theCurrentId  = payload.currentId
      this.syncCheckStatus()
      this.$notify("select", payload)
    },
    //----------------------------------------------
    syncCheckStatus() {
      this.isAllChecked = this.$list.isAllChecked
      this.hasChecked   = this.$list.hasChecked
    },
    //----------------------------------------------
    // Delegate methods
    selectPrevRow(options){this.$list.selectPrevRow(options)},
    selectNextRow(options){this.$list.selectNextRow(options)},

    getCurrentRow(options){return this.$list.getCurrentRow(options)},
    getCheckedRow(options){return this.$list.getCheckedRow(options)},

    getCurrent(options){return this.$list.getCurrent(options)},
    getChecked(options){return this.$list.getChecked(options)},

    selectRow(options){this.$list.selectRow(options)},
    checkRow (options){this.$list.checkRow(options)},
    cancelRow(options){this.$list.cancelRow(options)}
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "data" : function(){
      this.syncCheckStatus()
    },
    "checkedIds" : function(){
      this.syncCheckStatus()
    }
  }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-droplist.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/droplist/ti-droplist.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  props : {
    "multi" : {
      type : Boolean,
      default : false
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    ComType() {
      return this.multi
        ? "ti-combo-multi-input"
        : "ti-combo-input"
    }
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-combo-table-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/table/ti-combo-table-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "value" : {
    type : [Array, String],
    default : ()=>[]
  },
  "valueType" : {
    type : String,
    default : "Array",
    validator : v => /^(Array|String)$/.test(v)
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "form" : {
    type : Object,
    default : ()=>({})
  },
  "list" : {
    type : Object,
    default : ()=>({})
  },
  "dialog" : {
    type : Object,
    default : ()=>({
      title  : "i18n:edit",
      width  : 500,
      height : 500
    })
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "blankAs" : {
    type : Object,
    default : ()=>({
      icon : "fab-deezer",
      text : "empty-data"
    })
  },
  "blankClass" : {
    type : String,
    default : "as-mid-tip"
  },
  "actionAlign" : {
    type : String,
    default : undefined
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width" : {
    type : [Number, String],
    default : undefined
  },
  "height" : {
    type : [Number, String],
    default : undefined
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
})();   // ~ windows.TI_EXPORTS
(function(){
//========================================
// JOIN <vod-manager.html> ti/com/net/aliyun/vod/manager/vod-manager.html
//========================================
Ti.Preload("ti/com/net/aliyun/vod/manager/vod-manager.html", `<ti-gui
  class="net-aliyun-vod-manager"
  :class="TopClass"
  :layout="GuiLayout"
  :schema="GuiSchema"
  :can-loading="true"
  :loading-as="reloading"
  @filter::change="OnFilterChange"
  @sorter::change="OnSorterChange"
  @list::select="OnListSelect"
  @video::preview="OnVideoPreview"
  @pager::change="OnPagerChange"/>`);
//========================================
// JOIN <vod-manager.mjs> ti/com/net/aliyun/vod/manager/vod-manager.mjs
//========================================
Ti.Preload("ti/com/net/aliyun/vod/manager/vod-manager.mjs", TI_PACK_EXPORTS['ti/com/net/aliyun/vod/manager/vod-manager.mjs']);
//========================================
// JOIN <_com.json> ti/com/net/aliyun/vod/manager/_com.json
//========================================
Ti.Preload("ti/com/net/aliyun/vod/manager/_com.json", {
  "name" : "net-aliyun-vod-manager",
  "globally" : true,
  "template" : "./vod-manager.html",
  "mixins" : ["./vod-manager.mjs"],
  "components": [
    "@com:ti/wall",
    "@com:ti/combo/filter",
    "@com:ti/combo/sorter",
    "@com:ti/paging/jumper",
    "@com:net/aliyun/vod/video/info"
  ]
});
//========================================
// JOIN <vod-video-info.html> ti/com/net/aliyun/vod/video/info/vod-video-info.html
//========================================
Ti.Preload("ti/com/net/aliyun/vod/video/info/vod-video-info.html", `<div class="net-aliyun-vod-video-info"
  :class="TopClass">
  <!--
    Blank
  -->
  <ti-loading
    v-if="!hasVideo"
      class="as-big"
      icon="fas-hand-point-left"
      text="i18n:net-vod-video-nil"/>
  <!--
    Show Content
  -->
  <template v-else>
    <!--Preview-->
    <div class="as-preview">
      <img 
        class="ti-fill-parent"
        :src="VideoCoverURL"/>
      <div class="as-btn" @click.left="OnClickPreview">
        <i class="fas fa-play-circle"></i>
      </div>
    </div>
    <!--
      Detail info
    -->
    <div class="as-detail">
      <ti-form
        class="ti-cover-parent"
        spacing="tiny"
        :fields="FormFields"
        :data="value"/>
    </div>
  </template>
</div>`);
//========================================
// JOIN <vod-video-info.mjs> ti/com/net/aliyun/vod/video/info/vod-video-info.mjs
//========================================
Ti.Preload("ti/com/net/aliyun/vod/video/info/vod-video-info.mjs", TI_PACK_EXPORTS['ti/com/net/aliyun/vod/video/info/vod-video-info.mjs']);
//========================================
// JOIN <_com.json> ti/com/net/aliyun/vod/video/info/_com.json
//========================================
Ti.Preload("ti/com/net/aliyun/vod/video/info/_com.json", {
  "name" : "NetAliyunVodVideoInfo",
  "globally" : true,
  "template" : "./vod-video-info.html",
  "mixins" : ["./vod-video-info.mjs"],
  "components": [
    "@com:ti/form"
  ]
});
//========================================
// JOIN <vod-video-player.html> ti/com/net/aliyun/vod/video/player/vod-video-player.html
//========================================
Ti.Preload("ti/com/net/aliyun/vod/video/player/vod-video-player.html", `<div class="net-vod-video-player"
  :class="TopClass">
  <div :id="PlayerID"></div>
</div>`);
//========================================
// JOIN <vod-video-player.mjs> ti/com/net/aliyun/vod/video/player/vod-video-player.mjs
//========================================
Ti.Preload("ti/com/net/aliyun/vod/video/player/vod-video-player.mjs", TI_PACK_EXPORTS['ti/com/net/aliyun/vod/video/player/vod-video-player.mjs']);
//========================================
// JOIN <_com.json> ti/com/net/aliyun/vod/video/player/_com.json
//========================================
Ti.Preload("ti/com/net/aliyun/vod/video/player/_com.json", {
  "name" : "NetAliyunVodVideoPlayer",
  "globally" : true,
  "template" : "./vod-video-player.html",
  "mixins" : ["./vod-video-player.mjs"],
  "components": [
    
  ]
});
//========================================
// JOIN <bar-item-action.html> ti/com/ti/actionbar/com/bar-item-action/bar-item-action.html
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-action/bar-item-action.html", `<div class="bar-item-action">
  <bar-item-info
    v-bind="this"
    @fire="OnFired"/>
</div>`);
//========================================
// JOIN <bar-item-action.mjs> ti/com/ti/actionbar/com/bar-item-action/bar-item-action.mjs
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-action/bar-item-action.mjs", TI_PACK_EXPORTS['ti/com/ti/actionbar/com/bar-item-action/bar-item-action.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/actionbar/com/bar-item-action/_com.json
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-action/_com.json", {
  "name" : "bar-item-action",
  "template" : "./bar-item-action.html",
  "mixins"   : ["./bar-item-action.mjs"]
});
//========================================
// JOIN <bar-item-group.html> ti/com/ti/actionbar/com/bar-item-group/bar-item-group.html
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-group/bar-item-group.html", `<div class="bar-item-group"
  :class="TopClass"
  @mouseenter.stop="OnMouseEnter"
  @mouseleave.stop="OnMouseLeave">
  <!--
    Info
  -->
  <bar-item-info
    v-if="hasInfo"
      v-bind="this"
      :value="collapse"
      :status="status"
      :suffix-icon="ItemSuffixIcon"
      @fire="OnFired"/>
  <!--
    Group Children
  -->
  <template v-if="showChildren">
    <!--
      Mask
    -->
    <div 
      v-if="isDepth1"
        class="as-mask"
        @click="doCollapse"></div>
    <!--
      Children list
    -->
    <div ref="children"
      v-if="showChildren"
        class="as-children"
        :style="ChildrenStyle"
        @click.left="doCollapse">
          <component 
            v-for="bi in items"
              :key="bi.key"
              :is="bi.comType"
              v-bind="bi.comConf"
              :depth="depth+1"
              :items="bi.items"
              :hide-icon="isChildrenWithoutIcon"
              :status="status"/>
    </div>
  </template>
</div>`);
//========================================
// JOIN <bar-item-group.mjs> ti/com/ti/actionbar/com/bar-item-group/bar-item-group.mjs
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-group/bar-item-group.mjs", TI_PACK_EXPORTS['ti/com/ti/actionbar/com/bar-item-group/bar-item-group.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/actionbar/com/bar-item-group/_com.json
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-group/_com.json", {
  "name" : "bar-item-group",
  "template" : "./bar-item-group.html",
  "mixins"   : ["./bar-item-group.mjs"]
});
//========================================
// JOIN <bar-item-info.html> ti/com/ti/actionbar/com/bar-item-info/bar-item-info.html
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-info/bar-item-info.html", `<div class="bar-item-info"
  :class="TopClass"
  @click.left="OnClickTop">
  <!--
    Icon
  -->
  <span
    v-if="isShowIcon"
      class="as-icon">
      <ti-icon
        v-if="hasIcon" 
          :value="CurrentDisplay.icon"/>
  </span>
  <!--
    Text
  -->
  <span
    v-if="CurrentDisplay.text"
      class="as-text"
        >{{CurrentDisplay.text|i18n}}</span>
  <!--
    Suffix Icon
  -->
  <span
    v-if="suffixIcon"
      class="as-suffix-icon"><ti-icon :value="suffixIcon"/></span>
  <!--
    Shortcut
  -->
  <span
    v-else-if="isShowShortcut"
      class="as-shortcut">{{shortcut}}</span>
</div>`);
//========================================
// JOIN <bar-item-info.mjs> ti/com/ti/actionbar/com/bar-item-info/bar-item-info.mjs
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-info/bar-item-info.mjs", TI_PACK_EXPORTS['ti/com/ti/actionbar/com/bar-item-info/bar-item-info.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/actionbar/com/bar-item-info/_com.json
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-info/_com.json", {
  "name" : "bar-item-info",
  "template" : "./bar-item-info.html",
  "mixins"   : ["./bar-item-info.mjs"]
});
//========================================
// JOIN <bar-item-line.html> ti/com/ti/actionbar/com/bar-item-line/bar-item-line.html
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-line/bar-item-line.html", `<div class="bar-item-line"
  :class="TopClass"></div>`);
//========================================
// JOIN <bar-item-line.mjs> ti/com/ti/actionbar/com/bar-item-line/bar-item-line.mjs
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-line/bar-item-line.mjs", TI_PACK_EXPORTS['ti/com/ti/actionbar/com/bar-item-line/bar-item-line.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/actionbar/com/bar-item-line/_com.json
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-line/_com.json", {
  "name" : "bar-item-line",
  "template" : "./bar-item-line.html",
  "mixins"   : ["./bar-item-line.mjs"]
});
//========================================
// JOIN <bar-item-switcher.html> ti/com/ti/actionbar/com/bar-item-switcher/bar-item-switcher.html
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-switcher/bar-item-switcher.html", `<div class="bar-item-switcher"
  :class="TopClass">
  <!--
    Icon
  -->
  <span
    v-if="isShowIcon"
      class="as-icon">
      <ti-icon
        v-if="hasIcon" 
          :value="icon"/>
  </span>
  <!--
    Text
  -->
  <span
    v-if="text"
      class="as-text"
        >{{text|i18n}}</span>
  <!--
    switcher
  -->
  <ti-switcher
    v-bind="TheSetup"
    :readonly="isDisabled"
    :value="TheValue"
    @change="OnSwitcherChange($event)"/>
</div>`);
//========================================
// JOIN <bar-item-switcher.mjs> ti/com/ti/actionbar/com/bar-item-switcher/bar-item-switcher.mjs
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-switcher/bar-item-switcher.mjs", TI_PACK_EXPORTS['ti/com/ti/actionbar/com/bar-item-switcher/bar-item-switcher.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/actionbar/com/bar-item-switcher/_com.json
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-switcher/_com.json", {
  "name" : "bar-item-switcher",
  "template" : "./bar-item-switcher.html",
  "mixins"   : ["./bar-item-switcher.mjs"],
  "components" : [
    "@com:ti/switcher"
  ]
});
//========================================
// JOIN <ti-actionbar.html> ti/com/ti/actionbar/ti-actionbar.html
//========================================
Ti.Preload("ti/com/ti/actionbar/ti-actionbar.html", `<div class="ti-actionbar"
  :class="TopClass"
  v-ti-activable>
  <bar-item-group 
    name="Ti_ActionBar_Root_Group"
    :items="BarItems"
    :status="status"/>
</div>`);
//========================================
// JOIN <ti-actionbar.mjs> ti/com/ti/actionbar/ti-actionbar.mjs
//========================================
Ti.Preload("ti/com/ti/actionbar/ti-actionbar.mjs", TI_PACK_EXPORTS['ti/com/ti/actionbar/ti-actionbar.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/actionbar/_com.json
//========================================
Ti.Preload("ti/com/ti/actionbar/_com.json", {
  "name" : "ti-actionbar",
  "globally" : true,
  "template" : "./ti-actionbar.html",
  "mixins" : ["./ti-actionbar.mjs"],
  "components" : [
    "./com/bar-item-action",
    "./com/bar-item-switcher",
    "./com/bar-item-group",
    "./com/bar-item-line",
    "./com/bar-item-info"
  ]
});
//========================================
// JOIN <ti-bullet-checkbox.mjs> ti/com/ti/bullet/checkbox/ti-bullet-checkbox.mjs
//========================================
Ti.Preload("ti/com/ti/bullet/checkbox/ti-bullet-checkbox.mjs", TI_PACK_EXPORTS['ti/com/ti/bullet/checkbox/ti-bullet-checkbox.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/bullet/checkbox/_com.json
//========================================
Ti.Preload("ti/com/ti/bullet/checkbox/_com.json", {
  "name" : "ti-bullet-checkbox",
  "globally" : true,
  "template" : "@com:ti/bullet/ti-bullet.html",
  "mixins" : [
    "@com:ti/bullet/ti-bullet-mixin.mjs",
    "./ti-bullet-checkbox.mjs"]
});
//========================================
// JOIN <ti-bullet-radio.mjs> ti/com/ti/bullet/radio/ti-bullet-radio.mjs
//========================================
Ti.Preload("ti/com/ti/bullet/radio/ti-bullet-radio.mjs", TI_PACK_EXPORTS['ti/com/ti/bullet/radio/ti-bullet-radio.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/bullet/radio/_com.json
//========================================
Ti.Preload("ti/com/ti/bullet/radio/_com.json", {
  "name" : "ti-bullet-radio",
  "globally" : true,
  "template" : "@com:ti/bullet/ti-bullet.html",
  "mixins" : [
    "@com:ti/bullet/ti-bullet-mixin.mjs",
    "./ti-bullet-radio.mjs"]
});
//========================================
// JOIN <ti-bullet-mixin.mjs> ti/com/ti/bullet/ti-bullet-mixin.mjs
//========================================
Ti.Preload("ti/com/ti/bullet/ti-bullet-mixin.mjs", TI_PACK_EXPORTS['ti/com/ti/bullet/ti-bullet-mixin.mjs']);
//========================================
// JOIN <ti-bullet.html> ti/com/ti/bullet/ti-bullet.html
//========================================
Ti.Preload("ti/com/ti/bullet/ti-bullet.html", `<div class="ti-bullet-list"
  :class="TopClass"
  :style="TopStyle">
  <!--
    Blank
  -->
  <ti-loading 
    v-if="!hasItems"
      class="nil-data"
      :class="blankClass"
      v-bind="blankAs"/>
  <!--
    Show Items
  -->
  <template v-else>
    <div
      v-for="grp of ItemGroups"
        :key="grp.key"
        class="as-bullet-group">
        <!-- Group Title -->
        <div 
          v-if="grp.title"
            class="as-group-title">{{grp.title | i18n}}</div>
        <!-- Group Items -->
        <div class="as-group-items">
          <div
            v-for="it of grp.items"
              class="as-bullet-item"
              :class="it.className"
              @click.left="OnClickItem(it)">
              <!--
                Bullet
              -->
              <ti-icon 
                class="as-bullet"
                  :value="it.bullet"/>
              <!--
                Icon
              -->
              <ti-icon 
                v-if="it.icon"
                  class="as-icon"
                    :value="it.icon"/>
              <!--
                Text
              -->
              <div class="as-text">{{it.text|i18n}}</div>
          </div>
        </div>
      </div>
  </template>
</div>`);
//========================================
// JOIN <ti-button.html> ti/com/ti/button/ti-button.html
//========================================
Ti.Preload("ti/com/ti/button/ti-button.html", `<div class="ti-button"
  :class="topClass">
  <ul>
    <li v-for="it in items"
      :key="it.name"
      :class="it.buttonClass"
      @click="OnClickItem(it)">
      <!--
        Icon
      -->
      <ti-icon v-if="it.icon"
        :value="it.icon"/>
      <!--
        Text
      -->
      <span v-if="it.text"
        class="it-text">{{it.text|i18n}}</span>
    </li>
  </ul>
</div>`);
//========================================
// JOIN <ti-button.mjs> ti/com/ti/button/ti-button.mjs
//========================================
Ti.Preload("ti/com/ti/button/ti-button.mjs", TI_PACK_EXPORTS['ti/com/ti/button/ti-button.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/button/_com.json
//========================================
Ti.Preload("ti/com/ti/button/_com.json", {
  "name" : "ti-button",
  "globally" : true,
  "template" : "./ti-button.html",
  "mixins"   : ["./ti-button.mjs"],
  "components" : []
});
//========================================
// JOIN <ti-calendar.html> ti/com/ti/calendar/ti-calendar.html
//========================================
Ti.Preload("ti/com/ti/calendar/ti-calendar.html", `<div class="ti-calendar">
  <!--
    Heading
  -->
  <div class="as-head">
    <!--
      Switcher
    -->
    <div class="as-switcher" :class="switcherClass">
      <div class="as-title">
        <ti-input-month
          width="100%"
          height=".36rem"
          icon="far-calendar-alt"
          :hide-border="true"
          :value="theViewDate"
          :text="theViewRangeText"
          :editable="monthEditable"
          :begin-year="beginYear"
          :end-year="endYear"
          @change="onMonthChanged"/>
      </div>
      <div class="go-btn to-prev-block" @click="gotoMatrix(-1)">
        <ti-icon value="zmdi-chevron-left"/>
      </div>
      <div class="go-btn go-today" @click="gotoToday">
        <span>{{'today'|i18n}}</span>
      </div>
      <div class="go-btn to-next-block" @click="gotoMatrix(1)">
        <ti-icon value="zmdi-chevron-right"/>
      </div>
    </div>
    <!--
      Change Mode
      TODO maybe should support mode changing here
    -->
    
  </div>
  <!--
    Day cells
  -->
  <div class="as-matrix-table">
    <div v-for="matrix in dateMatrixList"
      class="as-matrix">
      <table>
        <thead>
          <th v-for="wt in weekTitles">{{wt.title}}</th>
        </thead>
        <tbody>
          <tr v-for="row in matrix">
            <td v-for="cell in row" :class="cell.type">
              <slot name="cell">
                <span class="as-date-item"
                  @click="onClickCell(cell)">{{cell.text}}</span>
              </slot>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>`);
//========================================
// JOIN <ti-calendar.mjs> ti/com/ti/calendar/ti-calendar.mjs
//========================================
Ti.Preload("ti/com/ti/calendar/ti-calendar.mjs", TI_PACK_EXPORTS['ti/com/ti/calendar/ti-calendar.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/calendar/_com.json
//========================================
Ti.Preload("ti/com/ti/calendar/_com.json", {
  "name" : "ti-calendar",
  "globally" : true,
  "template" : "./ti-calendar.html",
  "mixins"   : ["./ti-calendar.mjs"],
  "components" : [
    "@com:ti/input/month"]
});
//========================================
// JOIN <ti-chart-combo.html> ti/com/ti/chart/combo/ti-chart-combo.html
//========================================
Ti.Preload("ti/com/ti/chart/combo/ti-chart-combo.html", `<div class="ti-chart-combo"
  :class="TopClass">
  <!--
    头部
  -->
  <div class="as-head">
    <!--
      标题: 选择
    -->
    <TiDroplist
      v-if="hasMultiChartNames"
        v-bind="ChartNameListOptions"
        :auto-i18n="true"
        :options="nameList"
        :value="name"
        @change="OnChartNameChange"/>
    <div
      v-else
        class="as-title">{{ChartTitle | i18n}}</div>
    <!--
      图表类型选择
    -->
    <TiSwitcher
      v-if="hasMultiChartTypes"
        :options="ChartTypeList"
        :value="ChartType"
        :allow-empty="false"
        @change="OnChartTypeChange"/>
    <!--
      时间选择
    -->
    <div class="as-date-range">
      <span>{{DateRangeText}}</span>
      <a @click.left="OnPickDateRange">{{'modify'|i18n}}</a>
    </div>
    <!--
      操作部分
    -->
    <TiActionbar align="right"
      :items="HeadActionBarItems"
      :status="myActionStatus"/>
  </div>
  <!---
    图表
  -->
  <div class="as-chart">
    <!--
      Show chart
    -->
    <component
      v-if="hasChartCom"
        class="ti-fill-parent"
        :is="myChartCom.comType"
        v-bind="myChartCom.comConf"
        :data="ChartData"/>
    <!--
      Show loading
    -->
    <ti-loading
      v-else
        class="as-mid-tip"/>
  </div>
</div>`);
//========================================
// JOIN <ti-chart-combo.mjs> ti/com/ti/chart/combo/ti-chart-combo.mjs
//========================================
Ti.Preload("ti/com/ti/chart/combo/ti-chart-combo.mjs", TI_PACK_EXPORTS['ti/com/ti/chart/combo/ti-chart-combo.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/chart/combo/_com.json
//========================================
Ti.Preload("ti/com/ti/chart/combo/_com.json", {
  "name" : "ti-chart-combo",
  "globally" : true,
  "template" : "./ti-chart-combo.html",
  "mixins"   : ["./ti-chart-combo.mjs"],
  "components" : [
    "@com:ti/actionbar",
    "@com:ti/form",
    "@com:ti/droplist",
    "@com:ti/switcher",
    "@com:ti/input/date",
    "@com:ti/chart/g2"
  ]
});
//========================================
// JOIN <ti-chart-g2.html> ti/com/ti/chart/g2/ti-chart-g2.html
//========================================
Ti.Preload("ti/com/ti/chart/g2/ti-chart-g2.html", `<div class="ti-chart ti-chart-g2"
  :class="TopClass"
  :style="TopStyle">
  <div ref="chart"
    class="chart-main ti-fill-parent"></div>
</div>`);
//========================================
// JOIN <ti-chart-g2.mjs> ti/com/ti/chart/g2/ti-chart-g2.mjs
//========================================
Ti.Preload("ti/com/ti/chart/g2/ti-chart-g2.mjs", TI_PACK_EXPORTS['ti/com/ti/chart/g2/ti-chart-g2.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/chart/g2/_com.json
//========================================
Ti.Preload("ti/com/ti/chart/g2/_com.json", {
  "name" : "ti-chart-g2",
  "globally" : true,
  "template" : "./ti-chart-g2.html",
  "mixins"   : ["./ti-chart-g2.mjs"],
  "components" : [],
  "deps" : [
    "@deps:antv/v4/g2/g2.min.js"
  ]
});
//========================================
// JOIN <ti-chart-raw-bar.html> ti/com/ti/chart/raw/bar/ti-chart-raw-bar.html
//========================================
Ti.Preload("ti/com/ti/chart/raw/bar/ti-chart-raw-bar.html", `<TiChartG2
  class="as-bar"
  :class-name="className"
  :data="data"
  :width="width"
  :height="height"
  :padding="padding"
  :append-padding="appendPadding"
  :auto-source="false"
  :setup="ChartSetup"/>`);
//========================================
// JOIN <ti-chart-raw-bar.mjs> ti/com/ti/chart/raw/bar/ti-chart-raw-bar.mjs
//========================================
Ti.Preload("ti/com/ti/chart/raw/bar/ti-chart-raw-bar.mjs", TI_PACK_EXPORTS['ti/com/ti/chart/raw/bar/ti-chart-raw-bar.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/chart/raw/bar/_com.json
//========================================
Ti.Preload("ti/com/ti/chart/raw/bar/_com.json", {
  "name" : "ti-chart-raw-bar",
  "globally" : true,
  "template" : "./ti-chart-raw-bar.html",
  "mixins"   : [
    "@com:ti/chart/raw/ti-chart-raw.mjs",
    "./ti-chart-raw-bar.mjs"],
  "components" : ["@com:ti/chart/g2"]
});
//========================================
// JOIN <ti-chart-raw-line.html> ti/com/ti/chart/raw/line/ti-chart-raw-line.html
//========================================
Ti.Preload("ti/com/ti/chart/raw/line/ti-chart-raw-line.html", `<TiChartG2
  class="as-line"
  :class-name="className"
  :data="data"
  :width="width"
  :height="height"
  :padding="padding"
  :append-padding="appendPadding"
  :auto-source="false"
  :setup="ChartSetup"/>`);
//========================================
// JOIN <ti-chart-raw-line.mjs> ti/com/ti/chart/raw/line/ti-chart-raw-line.mjs
//========================================
Ti.Preload("ti/com/ti/chart/raw/line/ti-chart-raw-line.mjs", TI_PACK_EXPORTS['ti/com/ti/chart/raw/line/ti-chart-raw-line.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/chart/raw/line/_com.json
//========================================
Ti.Preload("ti/com/ti/chart/raw/line/_com.json", {
  "name" : "ti-chart-raw-line",
  "globally" : true,
  "template" : "./ti-chart-raw-line.html",
  "mixins"   : [
    "@com:ti/chart/raw/ti-chart-raw.mjs",
    "./ti-chart-raw-line.mjs"],
  "components" : ["@com:ti/chart/g2"]
});
//========================================
// JOIN <ti-chart-raw-pie.html> ti/com/ti/chart/raw/pie/ti-chart-raw-pie.html
//========================================
Ti.Preload("ti/com/ti/chart/raw/pie/ti-chart-raw-pie.html", `<TiChartG2
  class="as-pie"
  :class-name="className"
  :data="data"
  :width="width"
  :height="height"
  :padding="padding"
  :append-padding="appendPadding"
  :auto-source="false"
  :setup="ChartSetup"/>`);
//========================================
// JOIN <ti-chart-raw-pie.mjs> ti/com/ti/chart/raw/pie/ti-chart-raw-pie.mjs
//========================================
Ti.Preload("ti/com/ti/chart/raw/pie/ti-chart-raw-pie.mjs", TI_PACK_EXPORTS['ti/com/ti/chart/raw/pie/ti-chart-raw-pie.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/chart/raw/pie/_com.json
//========================================
Ti.Preload("ti/com/ti/chart/raw/pie/_com.json", {
  "name" : "ti-chart-raw-pie",
  "globally" : true,
  "template" : "./ti-chart-raw-pie.html",
  "mixins"   : [
    "@com:ti/chart/raw/ti-chart-raw.mjs",
    "./ti-chart-raw-pie.mjs"],
  "components" : ["@com:ti/chart/g2"]
});
//========================================
// JOIN <ti-chart-raw-rank.html> ti/com/ti/chart/raw/rank/ti-chart-raw-rank.html
//========================================
Ti.Preload("ti/com/ti/chart/raw/rank/ti-chart-raw-rank.html", `<TiChartG2
  class="as-bar"
  :class-name="className"
  :data="data"
  :width="width"
  :height="height"
  :padding="padding"
  :append-padding="appendPadding"
  :auto-source="false"
  :setup="ChartSetup"/>`);
//========================================
// JOIN <ti-chart-raw-rank.mjs> ti/com/ti/chart/raw/rank/ti-chart-raw-rank.mjs
//========================================
Ti.Preload("ti/com/ti/chart/raw/rank/ti-chart-raw-rank.mjs", TI_PACK_EXPORTS['ti/com/ti/chart/raw/rank/ti-chart-raw-rank.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/chart/raw/rank/_com.json
//========================================
Ti.Preload("ti/com/ti/chart/raw/rank/_com.json", {
  "name" : "ti-chart-raw-rank",
  "globally" : true,
  "template" : "./ti-chart-raw-rank.html",
  "mixins"   : [
    "@com:ti/chart/raw/ti-chart-raw.mjs",
    "./ti-chart-raw-rank.mjs"],
  "components" : ["@com:ti/chart/g2"]
});
//========================================
// JOIN <ti-chart-raw.mjs> ti/com/ti/chart/raw/ti-chart-raw.mjs
//========================================
Ti.Preload("ti/com/ti/chart/raw/ti-chart-raw.mjs", TI_PACK_EXPORTS['ti/com/ti/chart/raw/ti-chart-raw.mjs']);
//========================================
// JOIN <ti-chart-simple.html> ti/com/ti/chart/simple/ti-chart-simple.html
//========================================
Ti.Preload("ti/com/ti/chart/simple/ti-chart-simple.html", `<div class="ti-chart ti-chart-simple">
  <header 
    v-if="title" 
    @click="drawAll">{{title}}</header>
  <aside v-if="aside"
    :class="asideClass">
    <slot name="aside">
      <span v-if="unit">{{unit}}</span>
    </slot>
  </aside>
  <section class="chart-main" ref="chart"></section>
  <div v-if="hasSlider"
    ref="slider"
    class="chart-slider">
  </div>
</div>`);
//========================================
// JOIN <ti-chart-simple.mjs> ti/com/ti/chart/simple/ti-chart-simple.mjs
//========================================
Ti.Preload("ti/com/ti/chart/simple/ti-chart-simple.mjs", TI_PACK_EXPORTS['ti/com/ti/chart/simple/ti-chart-simple.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/chart/simple/_com.json
//========================================
Ti.Preload("ti/com/ti/chart/simple/_com.json", {
  "name" : "ti-chart-simple",
  "globally" : true,
  "template" : "./ti-chart-simple.html",
  "mixins"   : ["./ti-chart-simple.mjs"],
  "components" : [],
  "deps" : []
});
//========================================
// JOIN <ti-color.html> ti/com/ti/color/ti-color.html
//========================================
Ti.Preload("ti/com/ti/color/ti-color.html", `<div class="ti-color" >
  <!--
    Color Matrix Table
  -->
  <div class="as-table">
    <table>
      <thead>
        <tr>
          <th v-for="color in colorGrays">
            <span 
              :style="colorItemStyle(color)" 
              @click="onColorClicked(color)"></span>
          </th>
        </tr>
        <tr>
            <th v-for="color in colorMajors">
              <span 
                :style="colorItemStyle(color)" 
                @click="onColorClicked(color)"></span>
            </th>
          </tr>
      </thead>
      <!--Matrix-->
      <tbody>
        <tr v-for="row in colorMatrix"
          class="as-row">
          <td v-for="color in row">
            <span 
              :style="colorItemStyle(color)" 
              @click="onColorClicked(color)"></span>
          </td>
        </tr>
      </tbody>
    </table>
  </div> <!-- End Matrix-->
  <!--
    Color Input
  -->
  <div class="as-input">
    <div class="as-hex">
        <input class="as-value" 
          spellcheck="false"
          :value="theHex"
          @change="onHexChanged"/>
    </div>
    <div class="as-alpha">
      <ti-input-num 
        :value="theAlpha"
        :max-value="100"
        :min-value="0"
        :step="10"
        width="100%"
        @change="onAlphaChanged"/>
    </div>
  </div>
  <!--
    Color Preview
  -->
  <div class="as-preview">
    <span>{{theColorValue}}</span>
  </div>
</div>`);
//========================================
// JOIN <ti-color.mjs> ti/com/ti/color/ti-color.mjs
//========================================
Ti.Preload("ti/com/ti/color/ti-color.mjs", TI_PACK_EXPORTS['ti/com/ti/color/ti-color.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/color/_com.json
//========================================
Ti.Preload("ti/com/ti/color/_com.json", {
  "name" : "ti-color",
  "globally" : true,
  "template" : "./ti-color.html",
  "mixins" : ["./ti-color.mjs"]
});
//========================================
// JOIN <ti-combo-box.html> ti/com/ti/combo/box/ti-combo-box.html
//========================================
Ti.Preload("ti/com/ti/combo/box/ti-combo-box.html", `<div class="ti-combo-box" 
  :class="topClass"
  :style="topStyle">
  <!--
    Box: Component
  -->
  <div class="as-box" ref="box" :style="theBoxStyle">
    <slot name="box"><div>ComboBox</div></slot>
  </div>
  <!--
    Mask & Drop
  -->
  <template v-if="'extended'==status">
    <!--Mask-->
    <div class="as-mask" @click.left="notifyCollapse()"></div>
    <!--Drop-->
    <div class="as-drop" ref="drop" :style="theDropStyle">
      <slot name="drop"><div>ComboBox Dropdown</div></slot>
    </div>
  </template>
</div>`);
//========================================
// JOIN <ti-combo-box.mjs> ti/com/ti/combo/box/ti-combo-box.mjs
//========================================
Ti.Preload("ti/com/ti/combo/box/ti-combo-box.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/box/ti-combo-box.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/combo/box/_com.json
//========================================
Ti.Preload("ti/com/ti/combo/box/_com.json", {
  "name" : "ti-combo-box",
  "globally" : true,
  "template" : "./ti-combo-box.html",
  "mixins" : ["./ti-combo-box.mjs"]
});
//========================================
// JOIN <ti-combo-filter-props.mjs> ti/com/ti/combo/filter/ti-combo-filter-props.mjs
//========================================
Ti.Preload("ti/com/ti/combo/filter/ti-combo-filter-props.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/filter/ti-combo-filter-props.mjs']);
//========================================
// JOIN <ti-combo-filter.html> ti/com/ti/combo/filter/ti-combo-filter.html
//========================================
Ti.Preload("ti/com/ti/combo/filter/ti-combo-filter.html", `<div class="ti-combo-filter"
  :class="TopClass">
  <!--
    Major type
  -->
  <TiDroplist
    v-if="myMajorKey && MajorConfig"
      class="as-major"
      v-bind="MajorConfig"
      :value="myMajorValue"
      @change="OnMajorChange"/>
  <!--
    Filter input box
  -->
  <ti-combo-box
    class="as-filter"
    :drop-width="dropWidth"
    :drop-height="dropHeight"
    :status="myDropStatus"
    @collapse="OnCollapse"
    v-ti-activable>
    <!--
      Box
    -->
    <template v-slot:box>
      <ti-input 
        v-bind="TheInputProps"

        :value="InputValue"
        :prefix-icon="ThePrefixIcon"
        :suffix-icon="TheSuffixIcon"

        @change="OnInputChanged"
        @input:focus="OnInputFocused"
        @prefix:icon="$notify('prefix:icon')"
        @suffix:icon="OnClickStatusIcon"/>
    </template>
    <!--
      Drop
    -->
    <template v-slot:drop="slotProps">
      <ti-form
        v-bind="form"
        :data="myFormData"
        @change="OnFormChange"/>
    </template>
  </ti-combo-box>
  <!--
    Sorter
  -->
</div>`);
//========================================
// JOIN <ti-combo-filter.mjs> ti/com/ti/combo/filter/ti-combo-filter.mjs
//========================================
Ti.Preload("ti/com/ti/combo/filter/ti-combo-filter.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/filter/ti-combo-filter.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/combo/filter/_com.json
//========================================
Ti.Preload("ti/com/ti/combo/filter/_com.json", {
  "name" : "ti-combo-filter",
  "globally" : true,
  "template" : "./ti-combo-filter.html",
  "props"    : [
    "@com:ti/input/ti-input-props.mjs",
    "@com:ti/combo/filter/ti-combo-filter-props.mjs"
  ],
  "mixins"   : "./ti-combo-filter.mjs",
  "components" : [
    "@com:ti/form",
    "@com:ti/combo/sorter"]
});
//========================================
// JOIN <ti-combo-input-props.mjs> ti/com/ti/combo/input/ti-combo-input-props.mjs
//========================================
Ti.Preload("ti/com/ti/combo/input/ti-combo-input-props.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/input/ti-combo-input-props.mjs']);
//========================================
// JOIN <ti-combo-input.html> ti/com/ti/combo/input/ti-combo-input.html
//========================================
Ti.Preload("ti/com/ti/combo/input/ti-combo-input.html", `<ti-combo-box 
  class="ti-combo-input full-field"
  :class="TopClass"
  :keep-width-when-drop="keepWidthWhenDrop"
  :drop-width="dropWidth"
  :drop-height="dropHeight"
  :status="myDropStatus"
  @collapse="OnCollapse"
  v-ti-activable>
  <!--
    Box
  -->
  <template v-slot:box>
    <ti-input 
      v-bind="TheInputProps"

      :value="InputValue"
      :prefix-icon="ThePrefixIcon"
      :suffix-icon="TheSuffixIcon"

      @change="OnInputChanged"
      @inputing="OnInputInputing"
      @input:focus="OnInputFocused"
      @prefix:icon="$notify('prefix:icon')"
      @suffix:icon="OnClickStatusIcon"/>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop="slotProps">
    <component 
      :is="DropComType"
      class="ti-fill-parent"
      blank-class="as-mid-tip"
      v-bind="DropComConf"
      :on-init="OnDropListInit"
      @select="OnDropListSelected"/>
  </template>
</ti-combo-box>`);
//========================================
// JOIN <ti-combo-input.mjs> ti/com/ti/combo/input/ti-combo-input.mjs
//========================================
Ti.Preload("ti/com/ti/combo/input/ti-combo-input.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/input/ti-combo-input.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/combo/input/_com.json
//========================================
Ti.Preload("ti/com/ti/combo/input/_com.json", {
  "name" : "ti-combo-input",
  "globally" : true,
  "template" : "./ti-combo-input.html",
  "props"    : [
    "@com:ti/input/ti-input-props.mjs",
    "./ti-combo-input-props.mjs"],
  "mixins"   : "./ti-combo-input.mjs",
  "components" : [
    "@com:ti/combo/box"]
});
//========================================
// JOIN <ti-combo-multi-input.html> ti/com/ti/combo/multi-input/ti-combo-multi-input.html
//========================================
Ti.Preload("ti/com/ti/combo/multi-input/ti-combo-multi-input.html", `<ti-combo-box 
  class="ti-combo-multi-input full-field"
  :class="TopClass"
  :drop-width="dropWidth"
  :drop-height="dropHeight"
  :status="myDropStatus"
  @collapse="OnCollapse"
  v-ti-activable>
  <!--
    Box
  -->
  <template v-slot:box>
    <ti-input-tags
      :input-value="myFilterValue"
      :value="InputTagValues"
      :value-case="valueCase"
      :trimed="trimed"
        :max-value-len="maxValueLen"
        :value-unique="valueUnique"
        :tag-options="tagOptions"
        :tag-mapping="tagMapping"

      :readonly="readonly"
      :focused="focused"
      :hover="hover"
      :auto-select="autoSelect"
        :can-input="canInput"
        :cancel-tag-bubble="cancelTagBubble"

      :placeholder="placeholder"
      :hide-border="hideBorder"
      :prefix-icon="prefixIcon"
      :prefix-hover-icon="prefixHoverIcon"
      :prefix-icon-for-clean="prefixIconForClean"
      :prefix-text="prefixText"
      :suffix-icon="TheSuffixIcon"
      :suffix-text="suffixText"
        :tag-item-icon-by="tagItemIconBy"
        :tag-item-default-icon="tagItemDefaultIcon"
        :tag-option-default-icon="tagOptionDefaultIcon"
      
      :width="width"
      :height="height"

      :input-change="OnInputChanged"

      @inputing="OnInputInputing"
      @input:focus="OnInputFocused"
      @change="OnTagListChanged"
      @prefix:icon="$notify('prefix:icon')"
      @suffix:icon="OnClickStatusIcon"/>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <component class="ti-fill-parent"
      :is="DropComType"
      blank-class="as-mid-tip"
      v-bind="DropComConf"
      :on-init="OnDropListInit"
      @select="OnDropListSelected"/>
  </template>
</ti-combo-box>`);
//========================================
// JOIN <ti-combo-multi-input.mjs> ti/com/ti/combo/multi-input/ti-combo-multi-input.mjs
//========================================
Ti.Preload("ti/com/ti/combo/multi-input/ti-combo-multi-input.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/multi-input/ti-combo-multi-input.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/combo/multi-input/_com.json
//========================================
Ti.Preload("ti/com/ti/combo/multi-input/_com.json", {
  "name" : "ti-combo-multi-input",
  "globally" : true,
  "template" : "./ti-combo-multi-input.html",
  "props"    : [
    "@com:ti/input/ti-input-props.mjs",
    "@com:ti/input/tags/ti-input-tags-props.mjs",
    "@com:ti/combo/input/ti-combo-input-props.mjs"],
  "mixins"   : ["./ti-combo-multi-input.mjs"],
  "components" : [
    "@com:ti/combo/box"]
});
//========================================
// JOIN <ti-combo-pair-auto-props.mjs> ti/com/ti/combo/pair-auto/ti-combo-pair-auto-props.mjs
//========================================
Ti.Preload("ti/com/ti/combo/pair-auto/ti-combo-pair-auto-props.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/pair-auto/ti-combo-pair-auto-props.mjs']);
//========================================
// JOIN <ti-combo-pair-auto.html> ti/com/ti/combo/pair-auto/ti-combo-pair-auto.html
//========================================
Ti.Preload("ti/com/ti/combo/pair-auto/ti-combo-pair-auto.html", `<ti-form
  class="full-field"
  :class="TopClass"
  :data="value"
  :fields="FormFields"
  :only-fields="onlyFields"
  :fixed="fixed"
  :default-com-type="defaultComType"
  :spacing="spacing"
  :width="width"
  :height="height"/>`);
//========================================
// JOIN <ti-combo-pair-auto.mjs> ti/com/ti/combo/pair-auto/ti-combo-pair-auto.mjs
//========================================
Ti.Preload("ti/com/ti/combo/pair-auto/ti-combo-pair-auto.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/pair-auto/ti-combo-pair-auto.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/combo/pair-auto/_com.json
//========================================
Ti.Preload("ti/com/ti/combo/pair-auto/_com.json", {
  "name" : "ti-combo-pair-auto",
  "globally" : true,
  "template" : "./ti-combo-pair-auto.html",
  "props"    : ["./ti-combo-pair-auto-props.mjs"],
  "mixins"   : "./ti-combo-pair-auto.mjs"
});
//========================================
// JOIN <ti-combo-pair-group-props.mjs> ti/com/ti/combo/pair-group/ti-combo-pair-group-props.mjs
//========================================
Ti.Preload("ti/com/ti/combo/pair-group/ti-combo-pair-group-props.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/pair-group/ti-combo-pair-group-props.mjs']);
//========================================
// JOIN <ti-combo-pair-group.html> ti/com/ti/combo/pair-group/ti-combo-pair-group.html
//========================================
Ti.Preload("ti/com/ti/combo/pair-group/ti-combo-pair-group.html", `<ti-gui
  class="ti-fill-parent full-field"
  :class="TopClass"
  :layout="TheLayout"
  :shown="TheShown"
  :keep-shown-to="keepShownTo"
  @block:shown="OnShownUpdate"/>`);
//========================================
// JOIN <ti-combo-pair-group.mjs> ti/com/ti/combo/pair-group/ti-combo-pair-group.mjs
//========================================
Ti.Preload("ti/com/ti/combo/pair-group/ti-combo-pair-group.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/pair-group/ti-combo-pair-group.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/combo/pair-group/_com.json
//========================================
Ti.Preload("ti/com/ti/combo/pair-group/_com.json", {
  "name" : "ti-combo-pair-group",
  "globally" : true,
  "template" : "./ti-combo-pair-group.html",
  "props"    : ["./ti-combo-pair-group-props.mjs"],
  "mixins"   : "./ti-combo-pair-group.mjs"
});
//========================================
// JOIN <ti-combo-pair-text-props.mjs> ti/com/ti/combo/pair-text/ti-combo-pair-text-props.mjs
//========================================
Ti.Preload("ti/com/ti/combo/pair-text/ti-combo-pair-text-props.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/pair-text/ti-combo-pair-text-props.mjs']);
//========================================
// JOIN <ti-combo-pair-text.html> ti/com/ti/combo/pair-text/ti-combo-pair-text.html
//========================================
Ti.Preload("ti/com/ti/combo/pair-text/ti-combo-pair-text.html", `<div class="ti-combo-pair-text full-field">
  <div
    v-for="it in Items"
      class="as-pair">
      <!--title-->
      <div class="as-title">
        <!--Icon-->
        <ti-icon
          v-if="it.icon" 
            :value="it.icon"/>
        <!--Text-->
        <div
          v-if="it.text" 
            class="as-text">{{it.text}}</div>
      </div>
      <!--Textarea-->
      <div
        class="as-textarea">
          <textarea 
            spellcheck="false"
            :style="TextStyle"
            :placeholder="it.placeholder"
            :value="it.value"
            :readonly="readonly"
            @change="OnTextChange(it.key, $event)"></textarea></div>
  </div>
</div>`);
//========================================
// JOIN <ti-combo-pair-text.mjs> ti/com/ti/combo/pair-text/ti-combo-pair-text.mjs
//========================================
Ti.Preload("ti/com/ti/combo/pair-text/ti-combo-pair-text.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/pair-text/ti-combo-pair-text.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/combo/pair-text/_com.json
//========================================
Ti.Preload("ti/com/ti/combo/pair-text/_com.json", {
  "name" : "ti-combo-pair-text",
  "globally" : true,
  "template" : "./ti-combo-pair-text.html",
  "props"    : ["./ti-combo-pair-text-props.mjs"],
  "mixins"   : "./ti-combo-pair-text.mjs"
});
//========================================
// JOIN <ti-combo-sorter-props.mjs> ti/com/ti/combo/sorter/ti-combo-sorter-props.mjs
//========================================
Ti.Preload("ti/com/ti/combo/sorter/ti-combo-sorter-props.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/sorter/ti-combo-sorter-props.mjs']);
//========================================
// JOIN <ti-combo-sorter.html> ti/com/ti/combo/sorter/ti-combo-sorter.html
//========================================
Ti.Preload("ti/com/ti/combo/sorter/ti-combo-sorter.html", `<div class="ti-combo-sorter"
  :class="TopClass"
  :style="TopStyle">
  <!--
    sorter box
  -->
  <ti-combo-box
    class="as-sorter"
    :drop-width="dropWidth"
    :drop-height="dropHeight"
    :drop-float="false"
    :status="myDropStatus"
    @collapse="OnCollapse"
    v-ti-activable>
    <!--
      Box
    -->
    <template v-slot:box>
      <!--
        Current Sort Box
      -->
      <div class="as-sort-box"
        @click.left="OnClickBox">
        <!--Sort Icon-->
        <ti-icon
          v-if="TheSortIcon"
          class="as-sort-icon"
            :value="TheSortIcon"/>
        <!--Preifx Icon-->
        <ti-icon 
          v-if="ThePrefixIcon"
            class="at-prefix"
            :value="ThePrefixIcon"/>
        <!--Title-->
        <div class="as-title">{{SortTitle|i18n}}</div>
      </div>
      <!--Status Icon-->
      <div  
        v-if="TheSuffixIcon"
          class="as-sort-btn"
          @click.left="OnClickSuffixIcon">
            <ti-icon :value="TheSuffixIcon"/>
      </div>
    </template>
    <!--
      Drop
    -->
    <template v-slot:drop="slotProps">
      <ti-list
        id-by="value"
        :data="myListData"
        :display="['<icon>', 'text']"
        :hoverable="true"
        :current-id="SortBy"
        @select="OnDropListSelected"/>
    </template>
  </ti-combo-box>
  <!--
    Sorter
  -->
</div>`);
//========================================
// JOIN <ti-combo-sorter.mjs> ti/com/ti/combo/sorter/ti-combo-sorter.mjs
//========================================
Ti.Preload("ti/com/ti/combo/sorter/ti-combo-sorter.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/sorter/ti-combo-sorter.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/combo/sorter/_com.json
//========================================
Ti.Preload("ti/com/ti/combo/sorter/_com.json", {
  "name" : "ti-combo-sorter",
  "globally" : true,
  "template" : "./ti-combo-sorter.html",
  "props"    : "@com:ti/combo/sorter/ti-combo-sorter-props.mjs",
  "mixins"   : "./ti-combo-sorter.mjs",
  "components" : ["@com:ti/combo/box"]
});
//========================================
// JOIN <ti-combo-table-props.mjs> ti/com/ti/combo/table/ti-combo-table-props.mjs
//========================================
Ti.Preload("ti/com/ti/combo/table/ti-combo-table-props.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/table/ti-combo-table-props.mjs']);
//========================================
// JOIN <ti-combo-table.html> ti/com/ti/combo/table/ti-combo-table.html
//========================================
Ti.Preload("ti/com/ti/combo/table/ti-combo-table.html", `<div class="ti-combo-table"
  :class="TopClass"
  :style="TopStyle">
  <!--wrap-->
  <div class="as-main-con">
    <!--
      Actions
    -->
    <TiActionbar
      :items="ActionItems"
      :align="actionAlign"/>
    <!--
      Table
    -->
    <TiTable
      v-bind="TableConfig"
      :on-init="OnInitTable"
      @select="OnTableRowSelect"
      @open="OnTableRowOpen"/>
  </div>
</div>`);
//========================================
// JOIN <ti-combo-table.mjs> ti/com/ti/combo/table/ti-combo-table.mjs
//========================================
Ti.Preload("ti/com/ti/combo/table/ti-combo-table.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/table/ti-combo-table.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/combo/table/_com.json
//========================================
Ti.Preload("ti/com/ti/combo/table/_com.json", {
  "name" : "ti-combo-table",
  "globally" : true,
  "template" : "./ti-combo-table.html",
  "props"    : "./ti-combo-table-props.mjs",
  "mixins"   : "./ti-combo-table.mjs",
  "components" : [
    "@com:ti/actionbar",
    "@com:ti/table",
    "@com:ti/form"]
});
//========================================
// JOIN <crumb-item.html> ti/com/ti/crumb/com/crumb-item/crumb-item.html
//========================================
Ti.Preload("ti/com/ti/crumb/com/crumb-item/crumb-item.html", `<div class="ti-crumb-item" 
  :class="TopClass"
  @click.left="OnClickTop">
  <!--
    Icon
  -->
  <ti-icon v-if="icon" 
    class="as-icon"
    :value="icon"/>
  <!--
    Text
  -->
  <template v-if="text">
    <a v-if="href"
      class="as-text"
      @click.prevent
      :href="href"
      :class="TextClass">{{TheText}}</a>
    <span v-else
      class="as-text"
      :class="TextClass">{{TheText}}</span>
  </template>
  <!--
    Asterisk
  -->
  <span v-if="asterisk"
    class="as-asterisk"
    ></span>
  <!--
    Path Icon
  -->
  <ti-icon v-if="!atLast"
    class="as-path-icon"
    :value="pathIcon"/>
</div>`);
//========================================
// JOIN <crumb-item.mjs> ti/com/ti/crumb/com/crumb-item/crumb-item.mjs
//========================================
Ti.Preload("ti/com/ti/crumb/com/crumb-item/crumb-item.mjs", TI_PACK_EXPORTS['ti/com/ti/crumb/com/crumb-item/crumb-item.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/crumb/com/crumb-item/_com.json
//========================================
Ti.Preload("ti/com/ti/crumb/com/crumb-item/_com.json", {
  "name" : "crumb-item",
  "globally" : false,
  "template" : "./crumb-item.html",
  "mixins" : ["./crumb-item.mjs"]
});
//========================================
// JOIN <ti-crumb.html> ti/com/ti/crumb/ti-crumb.html
//========================================
Ti.Preload("ti/com/ti/crumb/ti-crumb.html", `<div class="ti-crumb"
  :class="TopClass">
  <!--
    Loop items
  -->
  <crumb-item v-for="it in ItemList"
    :key="it.index"
    :path-icon="pathIcon"
    :cancel-bubble="cancelItemBubble"
    v-bind="it"/>
</div>`);
//========================================
// JOIN <ti-crumb.mjs> ti/com/ti/crumb/ti-crumb.mjs
//========================================
Ti.Preload("ti/com/ti/crumb/ti-crumb.mjs", TI_PACK_EXPORTS['ti/com/ti/crumb/ti-crumb.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/crumb/_com.json
//========================================
Ti.Preload("ti/com/ti/crumb/_com.json", {
  "name" : "ti-crumb",
  "globally" : true,
  "template" : "./ti-crumb.html",
  "mixins" : ["./ti-crumb.mjs"],
  "components" : [
    "./com/crumb-item"
  ]
});
//========================================
// JOIN <ti-datetime.html> ti/com/ti/datetime/ti-datetime.html
//========================================
Ti.Preload("ti/com/ti/datetime/ti-datetime.html", `<div class="ti-datetime">
  <!--Date-->
  <ti-calendar class="is-date"
    :value="theDate"
    :month-format="monthFormat"
    :begin-year="beginYear"
    :end-year="endYear"
    @change="onDateChanged"/>
  <!--Time-->
  <div class="is-time">
    <div class="as-time-text">{{theTimeText}}</div>
    <div class="as-time-cols">
      <ti-time
        :value="theTime"
        :mode="timeMode"
        width="100%"
        height="none"
        @change="onTimeChanged"/>
    </div>
  </div>
</div>`);
//========================================
// JOIN <ti-datetime.mjs> ti/com/ti/datetime/ti-datetime.mjs
//========================================
Ti.Preload("ti/com/ti/datetime/ti-datetime.mjs", TI_PACK_EXPORTS['ti/com/ti/datetime/ti-datetime.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/datetime/_com.json
//========================================
Ti.Preload("ti/com/ti/datetime/_com.json", {
  "name" : "ti-datetime",
  "globally" : true,
  "template" : "./ti-datetime.html",
  "mixins" : ["./ti-datetime.mjs"],
  "components" : [
    "@com:ti/time",
    "@com:ti/calendar"]
});
//========================================
// JOIN <ti-droplist.html> ti/com/ti/droplist/ti-droplist.html
//========================================
Ti.Preload("ti/com/ti/droplist/ti-droplist.html", `<component 
  :is="ComType"
  v-bind="this"
  :can-input="false"
  :must-in-list="true"
  :auto-collapse="true"
  @change="$notify('change', $event)"/>`);
//========================================
// JOIN <ti-droplist.mjs> ti/com/ti/droplist/ti-droplist.mjs
//========================================
Ti.Preload("ti/com/ti/droplist/ti-droplist.mjs", TI_PACK_EXPORTS['ti/com/ti/droplist/ti-droplist.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/droplist/_com.json
//========================================
Ti.Preload("ti/com/ti/droplist/_com.json", {
  "name" : "ti-droplist",
  "globally" : true,
  "template" : "./ti-droplist.html",
  "props"    : [
    "@com:ti/input/ti-input-props.mjs",
    "@com:ti/input/tags/ti-input-tags-props.mjs",
    "@com:ti/combo/input/ti-combo-input-props.mjs"],
  "mixins"   : ["./ti-droplist.mjs"],
  "components" : [
    "@com:ti/combo/input",
    "@com:ti/combo/multi-input"
  ]
});
//========================================
// JOIN <form-field-props.mjs> ti/com/ti/form/com/form-field/form-field-props.mjs
//========================================
Ti.Preload("ti/com/ti/form/com/form-field/form-field-props.mjs", TI_PACK_EXPORTS['ti/com/ti/form/com/form-field/form-field-props.mjs']);
//========================================
// JOIN <form-field.html> ti/com/ti/form/com/form-field/form-field.html
//========================================
Ti.Preload("ti/com/ti/form/com/form-field/form-field.html", `<div class="form-field"
  :class="TopClass"
  :style="ConStyle"
  v-ti-activable>
  <!--========================================
    Field Name
  -->
  <div 
    v-if="isShowTitle"
      class="field-name"
      :title="StatusText">
        <!--Status Icon-->
        <span 
          v-if="StatusIcon"
            class="name-status">
            <ti-icon :value="StatusIcon"/>
        </span>
        <!--Title Text-->
        <span class="name-title">{{TheTitle|i18n}}</span>
        <!--Field Icon-->
        <span 
          v-if="isShowIcon" 
            class="name-icon">
            <ti-icon :value="icon"/>
        </span>
  </div>
  <!--========================================
    Field Value
  -->
  <div class="field-value"
    :style="ConStyle">
    <!--
      UI Component
    -->
    <div v-if="isComReady"
      class="field-component"
      :class="ComClass"
      :style="ComStyle">
      <component 
        :is="myComType"
          v-bind="myComConf"
          @change="OnChange"/>
    </div>
    <!--
      Tips
    -->
    <div 
      v-if="isShowTip"
        class="field-tip">{{tip|i18n}}</div>
  </div>
</div>`);
//========================================
// JOIN <form-field.mjs> ti/com/ti/form/com/form-field/form-field.mjs
//========================================
Ti.Preload("ti/com/ti/form/com/form-field/form-field.mjs", TI_PACK_EXPORTS['ti/com/ti/form/com/form-field/form-field.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/form/com/form-field/_com.json
//========================================
Ti.Preload("ti/com/ti/form/com/form-field/_com.json", {
  "name" : "ti-form-field",
  "globally" : true,
  "template" : "./form-field.html",
  "methods"  : "@com:ti/support/field_display.mjs",
  "props" : "./form-field-props.mjs",
  "mixins" : ["./form-field.mjs"]
});
//========================================
// JOIN <form-group-props.mjs> ti/com/ti/form/com/form-group/form-group-props.mjs
//========================================
Ti.Preload("ti/com/ti/form/com/form-group/form-group-props.mjs", TI_PACK_EXPORTS['ti/com/ti/form/com/form-group/form-group-props.mjs']);
//========================================
// JOIN <form-group.html> ti/com/ti/form/com/form-group/form-group.html
//========================================
Ti.Preload("ti/com/ti/form/com/form-group/form-group.html", `<div class="form-group"
  :class="TopClass">
  <div
    v-if="title" 
      class="group-title">
      <ti-icon
        v-if="show.icon" 
        :value="icon"/>
      <span
        v-if="show.title"
        class="name-title">{{title|i18n}}</span>
  </div>
  <div class="group-fields">
      <ti-form-field v-for="fld in fields"
        :key="fld.key"
        v-bind="fld"
        :data="data"
        :field-status="fieldStatus"
        :status-icons="statusIcons"/>
  </div>
</div>`);
//========================================
// JOIN <form-group.mjs> ti/com/ti/form/com/form-group/form-group.mjs
//========================================
Ti.Preload("ti/com/ti/form/com/form-group/form-group.mjs", TI_PACK_EXPORTS['ti/com/ti/form/com/form-group/form-group.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/form/com/form-group/_com.json
//========================================
Ti.Preload("ti/com/ti/form/com/form-group/_com.json", {
  "name" : "form-group",
  "globally" : false,
  "template" : "./form-group.html",
  "props" : "./form-group-props.mjs",
  "mixins" : ["./form-group.mjs"]
});
//========================================
// JOIN <ti-form-props.mjs> ti/com/ti/form/ti-form-props.mjs
//========================================
Ti.Preload("ti/com/ti/form/ti-form-props.mjs", TI_PACK_EXPORTS['ti/com/ti/form/ti-form-props.mjs']);
//========================================
// JOIN <ti-form.html> ti/com/ti/form/ti-form.html
//========================================
Ti.Preload("ti/com/ti/form/ti-form.html", `<div class="ti-form"
  :class="TopClass"
  :style="TopStyle"
  v-ti-activable>
  <template v-if="hasData || !isAutoShowBlank">
    <!--
      Form Header
    -->
    <header class="form-header" v-if="hasHeader">
      <span v-if="icon"
        class="it-icon"><ti-icon :value="icon"/></span>
      <span v-if="title"
        class="it-text">{{title|i18n}}</span>
    </header>
    <!--
      Tabs for display:"tab"
    -->
    <div class="form-tab" v-if="isTabMode">
      <ul>
        <li v-for="tab in TabItems" 
          :class="tab.className"
          @click.left="OnClickTab(tab)">
          <ti-icon 
            class="tab-icon" v-if="tab.icon" :value="tab.icon"/>
          <span 
            class="tab-text" v-if="tab.title">{{tab.title|i18n}}</span>
        </li>
      </ul>
    </div>
    <!--
      Form Fields
    -->
    <div class="form-body" :class="FormBodyClass">
      <template v-for="fld in FieldsInCurrentTab">
        <!--
          For Group
        -->
        <form-group v-if="'Group' == fld.type"
          v-bind="fld"
          :data="data"
          :field-status="fieldStatus"
          :status-icons="statusIcons"
          @change="OnFieldChange"/>
        <!--
          For field
        -->
        <ti-form-field v-else
          :key="fld.key"
          v-bind="fld"
          :data="data"
          :field-status="fieldStatus"
          :status-icons="statusIcons"
          @change="OnFieldChange"/>
      </template>
    </div>
  </template>
  <!--
    Show Blank
  -->
  <ti-loading 
    v-else
      class="nil-data as-big-mask"
      v-bind="blankAs"/>
</div>`);
//========================================
// JOIN <ti-form.mjs> ti/com/ti/form/ti-form.mjs
//========================================
Ti.Preload("ti/com/ti/form/ti-form.mjs", TI_PACK_EXPORTS['ti/com/ti/form/ti-form.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/form/_com.json
//========================================
Ti.Preload("ti/com/ti/form/_com.json", {
  "name" : "ti-form",
  "globally" : true,
  "template" : "./ti-form.html",
  "methods"  : "@com:ti/support/field_display.mjs",
  "props" : "./ti-form-props.mjs",
  "mixins" : ["./ti-form.mjs"],
  "components" : [
    "./com/form-group",
    "./com/form-field",
    "@com:ti/input",
    "@com:ti/input/num",
    "@com:ti/input/tags",
    "@com:ti/input/color",
    "@com:ti/input/icon",
    "@com:ti/input/date",
    "@com:ti/input/time",
    "@com:ti/input/timerange",
    "@com:ti/input/month",
    "@com:ti/input/datetime",
    "@com:ti/input/daterange",
    "@com:ti/input/text",
    "@com:ti/combo/input",
    "@com:ti/combo/multi-input",
    "@com:ti/label",
    "@com:ti/toggle",
    "@com:ti/switcher",
    "@com:ti/droplist"]
});
//========================================
// JOIN <_hmaker.json> ti/com/ti/form/_hmaker.json
//========================================
Ti.Preload("ti/com/ti/form/_hmaker.json", {
  "icon"   : "im-task-o",
  "title"  : "i18n:com-form",
  "scenes" : ["desktop", "tablet"],
  "editComType" : "hmaker-edit-com-form",
  "editComConf" : {
    "value" : "=comConf"
  }
});
//========================================
// JOIN <ti-gui-block.html> ti/com/ti/gui/block/ti-gui-block.html
//========================================
Ti.Preload("ti/com/ti/gui/block/ti-gui-block.html", `<div class="ti-gui-block" 
  :class="TopClass"
  :style="TopStyle">
  <!--
    Header
  -->
  <div class="block-head" v-if="isShowHeader">
    <!--Icon-->
    <div class="as-icon" v-if="icon">
      <ti-icon :value="icon"/>
    </div>
    <!--Title-->
    <div class="as-title">
      <span v-if="title">{{title|i18n}}</span>
    </div>
    <!--Actions-->
    <div class="as-actions" v-if="hasActions">
      <ti-actionbar 
        :items="actions"
        :status="actionStatus"/>
    </div>
  </div>
  <!--
    Content
  -->
  <div class="block-main" v-if="TheCom">
    <div class="block-main-con"
      :class="MainConClass"
      :style="MainConStyle">
      <component 
        :class="MainComponentClass"
        :is="TheCom.comType"
        v-bind="TheCom.comConf"/>
    </div>
  </div>
  <!--Blank-->
  </div>`);
//========================================
// JOIN <ti-gui-block.mjs> ti/com/ti/gui/block/ti-gui-block.mjs
//========================================
Ti.Preload("ti/com/ti/gui/block/ti-gui-block.mjs", TI_PACK_EXPORTS['ti/com/ti/gui/block/ti-gui-block.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/gui/block/_com.json
//========================================
Ti.Preload("ti/com/ti/gui/block/_com.json", {
  "name" : "ti-gui-block",
  "globally" : true,
  "template" : "./ti-gui-block.html",
  "mixins"   : ["./ti-gui-block.mjs"]
});
//========================================
// JOIN <ti-gui-cols.html> ti/com/ti/gui/cols/ti-gui-cols.html
//========================================
Ti.Preload("ti/com/ti/gui/cols/ti-gui-cols.html", `<div class="ti-gui-cols" :class="topClass">
  <template v-if="hasBlocks">
    <template v-for="(block, index) in blocks">
      <ti-gui-block v-if="!block.hide"
        :key="index"
        embed-in="cols"
        v-bind="block"
        :schema="schema"
        :action-status="actionStatus"
        :shown="shown"/>
      </template>
  </template>
</div>`);
//========================================
// JOIN <ti-gui-cols.mjs> ti/com/ti/gui/cols/ti-gui-cols.mjs
//========================================
Ti.Preload("ti/com/ti/gui/cols/ti-gui-cols.mjs", TI_PACK_EXPORTS['ti/com/ti/gui/cols/ti-gui-cols.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/gui/cols/_com.json
//========================================
Ti.Preload("ti/com/ti/gui/cols/_com.json", {
  "name" : "ti-gui-cols",
  "globally" : true,
  "template" : "./ti-gui-cols.html",
  "mixins"   : ["./ti-gui-cols.mjs"],
  "components" : ["@com:ti/gui/block"]
});
//========================================
// JOIN <ti-gui-panel.html> ti/com/ti/gui/panel/ti-gui-panel.html
//========================================
Ti.Preload("ti/com/ti/gui/panel/ti-gui-panel.html", `<div class="ti-gui-panel"
  :class="TopClass"
  @click.left="OnClickMask">
  <div class="panel-con"
    :style="ConStyle"
    @click.left.stop>
    <!--
      Block
    -->
    <ti-gui-block
      embed-in="panel"
      flex="none"
      :type="type"
      :title="title"
      :icon="icon"
      :hide-title="hideTitle"
      :actions="actions"
      :action-status="actionStatus"
      :name="name"
      :blocks="blocks"
      :body="body"
      :main-con-class="mainConClass"
      :main-con-style="mainConStyle"
      :overflow="overflow"
      :schema="schema"
      :shown="shown"
      :capture-events="captureEvents"/>
    <!--
      Closer
    -->
    <div
      v-if="hasCloser"
        class="panel-closer"
        :class="CloserClass">
        <ti-icon
          value="zmdi-close"
          @click.native="OnClose"/>
    </div>
  </div>
</div>`);
//========================================
// JOIN <ti-gui-panel.mjs> ti/com/ti/gui/panel/ti-gui-panel.mjs
//========================================
Ti.Preload("ti/com/ti/gui/panel/ti-gui-panel.mjs", TI_PACK_EXPORTS['ti/com/ti/gui/panel/ti-gui-panel.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/gui/panel/_com.json
//========================================
Ti.Preload("ti/com/ti/gui/panel/_com.json", {
  "name" : "ti-gui-panel",
  "globally" : true,
  "template" : "./ti-gui-panel.html",
  "mixins"   : ["./ti-gui-panel.mjs"],
  "components" : ["@com:ti/gui/block"]
});
//========================================
// JOIN <ti-gui-rows.html> ti/com/ti/gui/rows/ti-gui-rows.html
//========================================
Ti.Preload("ti/com/ti/gui/rows/ti-gui-rows.html", `<div class="ti-gui-rows" :class="topClass">
  <template v-if="hasBlocks">
    <template v-for="(block, index) in blocks">
      <ti-gui-block v-if="!block.hide"
        :key="index"
        embed-in="rows"
        v-bind="block"
        :schema="schema"
        :action-status="actionStatus"
        :shown="shown"/>
    </template>
  </template>
</div>`);
//========================================
// JOIN <ti-gui-rows.mjs> ti/com/ti/gui/rows/ti-gui-rows.mjs
//========================================
Ti.Preload("ti/com/ti/gui/rows/ti-gui-rows.mjs", TI_PACK_EXPORTS['ti/com/ti/gui/rows/ti-gui-rows.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/gui/rows/_com.json
//========================================
Ti.Preload("ti/com/ti/gui/rows/_com.json", {
  "name" : "ti-gui-rows",
  "globally" : true,
  "template" : "./ti-gui-rows.html",
  "mixins"   : ["./ti-gui-rows.mjs"],
  "components" : ["@com:ti/gui/block"]
});
//========================================
// JOIN <ti-gui-tabs.html> ti/com/ti/gui/tabs/ti-gui-tabs.html
//========================================
Ti.Preload("ti/com/ti/gui/tabs/ti-gui-tabs.html", `<div class="ti-gui-tabs" :class="TopClass">
  <!--
    Tab title bar
  -->
  <header :class="TabClass">
    <ul>
      <li v-for="it in TabItems"
        :key="it.key"
        :class="it.className"
        @click="OnSetCurrentTabItem(it)">
        <!--Icon-->
        <ti-icon
          v-if="it.icon"
            class="it-icon"
            :value="it.icon"/>
        <!--Text-->
        <span class="it-text">{{it.title|i18n}}</span>
      </li>
    </ul>
  </header>
  <!--
    Current Block
  -->
  <section v-if="CurrentBlock">
    <ti-gui-block 
      embed-in="tabs"
      v-bind="CurrentBlock"
      :action-status="actionStatus"
      :schema="schema"
      :shown="shown"/>
  </section>
</div>`);
//========================================
// JOIN <ti-gui-tabs.mjs> ti/com/ti/gui/tabs/ti-gui-tabs.mjs
//========================================
Ti.Preload("ti/com/ti/gui/tabs/ti-gui-tabs.mjs", TI_PACK_EXPORTS['ti/com/ti/gui/tabs/ti-gui-tabs.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/gui/tabs/_com.json
//========================================
Ti.Preload("ti/com/ti/gui/tabs/_com.json", {
  "name" : "ti-gui-tabs",
  "globally" : true,
  "template" : "./ti-gui-tabs.html",
  "mixins"   : ["./ti-gui-tabs.mjs"],
  "components" : ["@com:ti/gui/block"]
});
//========================================
// JOIN <ti-gui-methods.mjs> ti/com/ti/gui/ti-gui-methods.mjs
//========================================
Ti.Preload("ti/com/ti/gui/ti-gui-methods.mjs", TI_PACK_EXPORTS['ti/com/ti/gui/ti-gui-methods.mjs']);
//========================================
// JOIN <ti-gui.html> ti/com/ti/gui/ti-gui.html
//========================================
Ti.Preload("ti/com/ti/gui/ti-gui.html", `<div class="ti-gui" :class="TopClass">
  <!--===========================================
    All normal layout
  -->
  <div class="gui-con">
    <!--
      Layout as rows
    -->
    <ti-gui-rows 
      v-if="isRowsLayout"
        class="ti-fill-parent"
        v-bind="TheLayout"
        :schema="schema"
        :shown="TheShown"
        :default-flex="defaultFlex"
        :action-status="actionStatus"
        :on-init="OnMainTypeInit"/>
    <!--
      Layout as cols
    -->
    <ti-gui-cols 
      v-else-if="isColsLayout"
        class="ti-fill-parent"
        v-bind="TheLayout"
        :schema="schema"
        :shown="TheShown"
        :default-flex="defaultFlex"
        :action-status="actionStatus"
        :on-init="OnMainTypeInit"/>
    <!--
      Layout as tabs
    -->
    <ti-gui-tabs 
      v-else-if="isTabsLayout"
        class="ti-fill-parent"
        v-bind="TheLayout"
        :schema="schema"
        :shown="TheShown"
        :default-flex="defaultFlex"
        :action-status="actionStatus"
        :on-init="OnMainTypeInit"/>
  </div>
  <!--===========================================
    All float panels
  -->
  <template 
    v-for="pan in ThePanels">
      <transition :name="pan.transName">
        <ti-gui-panel
          v-if="pan.visible"
            :key="pan.key"
            v-bind="pan.panel"
            :viewport-width="myViewportWidth"
            :viewport-height="myViewportHeight"
            :schema="schema"
            :shown="TheShown"
            :default-flex="defaultFlex"
            :action-status="actionStatus"/>
      </transition>
  </template>
  <!--===========================================
    Loading
  -->
  <div v-if="isLoading"
    class="ti-mask-loading">
    <ti-loading v-bind="TheLoading"/>
  </div>
</div>`);
//========================================
// JOIN <ti-gui.mjs> ti/com/ti/gui/ti-gui.mjs
//========================================
Ti.Preload("ti/com/ti/gui/ti-gui.mjs", TI_PACK_EXPORTS['ti/com/ti/gui/ti-gui.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/gui/_com.json
//========================================
Ti.Preload("ti/com/ti/gui/_com.json", {
  "name" : "ti-gui",
  "globally" : true,
  "template" : "./ti-gui.html",
  "methods"  : "./ti-gui-methods.mjs",
  "mixins"   : ["./ti-gui.mjs"],
  "components" : [
    "@com:ti/gui/cols",
    "@com:ti/gui/rows",
    "@com:ti/gui/tabs",
    "@com:ti/gui/panel"
  ]
});
//========================================
// JOIN <ti-icon-text.html> ti/com/ti/icon/text/ti-icon-text.html
//========================================
Ti.Preload("ti/com/ti/icon/text/ti-icon-text.html", `<div class="ti-icon-text" 
  :class="className">
  <!--Icon-->
  <ti-icon v-if="icon" class="as-icon" :value="icon"/>
  <!--Text-->
  <div v-if="text" class="as-text">{{text|i18n}}</div>
</div>`);
//========================================
// JOIN <ti-icon-text.mjs> ti/com/ti/icon/text/ti-icon-text.mjs
//========================================
Ti.Preload("ti/com/ti/icon/text/ti-icon-text.mjs", TI_PACK_EXPORTS['ti/com/ti/icon/text/ti-icon-text.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/icon/text/_com.json
//========================================
Ti.Preload("ti/com/ti/icon/text/_com.json", {
  "name" : "ti-icon-text",
  "globally" : true,
  "template" : "./ti-icon-text.html",
  "mixins" : ["./ti-icon-text.mjs"]
});
//========================================
// JOIN <ti-icon.html> ti/com/ti/icon/ti-icon.html
//========================================
Ti.Preload("ti/com/ti/icon/ti-icon.html", `<div 
  class="ti-icon" 
  :class="TopClass"
  @click.left="OnClickTop">
  <div class="icon-icon"
    :style="Icon.outerStyle">
    <!--Font icon-->
    <i v-if="'font'==Icon.type"
      :class="Icon.className"
      :style="Icon.innerStyle">
      <!--ligature font -->
      <template v-if="Icon.text">{{Icon.text}}</template>
    </i>
    <!--Svg/Image-->
    <img v-else-if="'svg'==Icon.type || 'image'==Icon.type"
        :src="Icon.value"
        :style="Icon.innerStyle"/>
    <!--
      Default output the value
    -->
    <em v-else>{{value}}</em>
  </div>
</div>`);
//========================================
// JOIN <ti-icon.mjs> ti/com/ti/icon/ti-icon.mjs
//========================================
Ti.Preload("ti/com/ti/icon/ti-icon.mjs", TI_PACK_EXPORTS['ti/com/ti/icon/ti-icon.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/icon/_com.json
//========================================
Ti.Preload("ti/com/ti/icon/_com.json", {
  "name" : "ti-icon",
  "globally" : true,
  "template" : "./ti-icon.html",
  "mixins" : ["./ti-icon.mjs"]
});
//========================================
// JOIN <ti-imgfile.html> ti/com/ti/imgfile/ti-imgfile.html
//========================================
Ti.Preload("ti/com/ti/imgfile/ti-imgfile.html", `<div class="ti-imgfile"
  :class="TopClass">
  <!--
    Hidden input file to choose files
  -->
  <input 
    type="file" 
    ref="file" 
    class="ti-hide"
    @change.stop.seft="OnSelectLocalFilesToUpload">
  <!--
    Major preview zone
  -->
  <div class="thumb-con"
    :style="ThumbStyle"
    @click="OnClickToEdit"
    v-drop-files.mask="OnDropFiles">
    <!--
      Preview
    -->
    <ti-obj-thumb 
      :preview="PreviewThumb"
      :progress="progress"
      :footer="false"/>
  </div>
  <!--
    Remove
  -->
  <div v-if="isShowRemoveIcon"
    class="thumb-actions">
    <!--remove-->
    <div class="thumb-opt as-del"
      @click="OnRemove">
      <ti-icon value="zmdi-delete"/>
      <span class="it-text">{{'clear'|i18n}}</span>
    </div>
    <!--open-->
    <div class="thumb-opt as-open"
      @click="OnOpen">
      <ti-icon value="zmdi-open-in-new"/>
      <span class="it-text">{{'open'|i18n}}</span>
    </div>
    <!--//////-->
  </div>
</div>`);
//========================================
// JOIN <ti-imgfile.mjs> ti/com/ti/imgfile/ti-imgfile.mjs
//========================================
Ti.Preload("ti/com/ti/imgfile/ti-imgfile.mjs", TI_PACK_EXPORTS['ti/com/ti/imgfile/ti-imgfile.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/imgfile/_com.json
//========================================
Ti.Preload("ti/com/ti/imgfile/_com.json", {
  "name" : "ti-imgfile",
  "globally" : true,
  "template" : "./ti-imgfile.html",
  "mixins" : ["./ti-imgfile.mjs"],
  "components" : ["@com:ti/obj/thumb"]
});
//========================================
// JOIN <ti-input-color.html> ti/com/ti/input/color/ti-input-color.html
//========================================
Ti.Preload("ti/com/ti/input/color/ti-input-color.html", `<ti-combo-box class="ti-input-color"
  :class="topClass"
  :drop-width="null"
  :status="status"
  @collapse="doCollapse">
  <!--
    Box
  -->
  <template v-slot:box>
    <span class="as-color"
      @click.left="onToggleDrop">
        <u class="as-bg"></u>
        <u class="as-fr" :style="colorStyle"></u>
    </span>
    <span class="as-clear" @click="onClearColor">
      <ti-icon value="zmdi-close"/>
    </span>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <ti-color 
      :value="value"
      @change="onColorChanged"/>
  </template>
</ti-combo-box>`);
//========================================
// JOIN <ti-input-color.mjs> ti/com/ti/input/color/ti-input-color.mjs
//========================================
Ti.Preload("ti/com/ti/input/color/ti-input-color.mjs", TI_PACK_EXPORTS['ti/com/ti/input/color/ti-input-color.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/color/_com.json
//========================================
Ti.Preload("ti/com/ti/input/color/_com.json", {
  "name" : "ti-input-color",
  "globally" : true,
  "template" : "./ti-input-color.html",
  "mixins" : ["./ti-input-color.mjs"],
  "components" : ["@com:ti/color"]
});
//========================================
// JOIN <ti-input-date.html> ti/com/ti/input/date/ti-input-date.html
//========================================
Ti.Preload("ti/com/ti/input/date/ti-input-date.html", `<ti-combo-box class="as-date"
  :class="topClass"
  :width="width"
  :drop-width="null"
  :status="status"
  @collapse="doCollapse">
  <!--
    Box
  -->
  <template v-slot:box>
    <ti-input 
      :readonly="!canInput"
      :hide-border="hideBorder"
      :placeholder="placeholder|i18n"
      :prefix-icon="icon"
      :suffix-icon="theStatusIcon"
      :value="theInputValue"
      :height="height"
      :focus="isExtended"
      @change="onChanged"
      @input:focus="onInputFocused"
      @suffix:icon="onClickStatusIcon"/>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <ti-calendar
      :value="theDropDate"
      :month-format="monthFormat"
      :begin-year="beginYear"
      :end-year="endYear"
      @change="onDateChanged"/>
  </template>
</ti-combo-box>`);
//========================================
// JOIN <ti-input-date.mjs> ti/com/ti/input/date/ti-input-date.mjs
//========================================
Ti.Preload("ti/com/ti/input/date/ti-input-date.mjs", TI_PACK_EXPORTS['ti/com/ti/input/date/ti-input-date.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/date/_com.json
//========================================
Ti.Preload("ti/com/ti/input/date/_com.json", {
  "name" : "ti-input-date",
  "globally" : true,
  "template" : "./ti-input-date.html",
  "mixins" : ["./ti-input-date.mjs"],
  "components" : [
    "@com:ti/combo/input",
    "@com:ti/calendar"]
});
//========================================
// JOIN <ti-input-daterange.html> ti/com/ti/input/daterange/ti-input-daterange.html
//========================================
Ti.Preload("ti/com/ti/input/daterange/ti-input-daterange.html", `<ti-combo-box class="as-daterange"
  :class="topClass"
  :drop-width="dropWidth"
  :status="status"
  @collapse="doCollapse">
  <!--
    Box
  -->
  <template v-slot:box>
    <ti-input 
      :readonly="!canInput"
      :hide-border="hideBorder"
      :placeholder="placeholder|i18n"
      :prefix-icon="icon"
      :suffix-icon="theStatusIcon"
      :value="theInputValue"
      :width="width"
      :height="height"
      :focus="isExtended"
      @change="onChanged"
      @input:focus="onInputFocused"
      @suffix:icon="onClickStatusIcon"/>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <ti-calendar
      :value="theDropRange"
      :range="true"
      :matrix-count="matrixCount"
      :month-format="monthFormat"
      :begin-year="beginYear"
      :end-year="endYear"
      @change="onDateRangeChanged"/>
  </template>
</ti-combo-box>`);
//========================================
// JOIN <ti-input-daterange.mjs> ti/com/ti/input/daterange/ti-input-daterange.mjs
//========================================
Ti.Preload("ti/com/ti/input/daterange/ti-input-daterange.mjs", TI_PACK_EXPORTS['ti/com/ti/input/daterange/ti-input-daterange.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/daterange/_com.json
//========================================
Ti.Preload("ti/com/ti/input/daterange/_com.json", {
  "name" : "ti-input-daterange",
  "globally" : true,
  "template" : "./ti-input-daterange.html",
  "mixins" : ["./ti-input-daterange.mjs"],
  "components" : [
    "@com:ti/combo/input",
    "@com:ti/calendar"]
});
//========================================
// JOIN <ti-input-datetime.html> ti/com/ti/input/datetime/ti-input-datetime.html
//========================================
Ti.Preload("ti/com/ti/input/datetime/ti-input-datetime.html", `<ti-combo-box class="as-datetime"
  :class="topClass"
  :width="width"
  :drop-width="'box'"
  :drop-overflow="'hidden'"
  :status="status"
  @collapse="doCollapse">
  <!--
    Box
  -->
  <template v-slot:box>
    <ti-input 
      :readonly="!canInput"
      :hide-border="hideBorder"
      :placeholder="placeholder|i18n"
      :prefix-icon="icon"
      :suffix-icon="theStatusIcon"
      :value="theInputValue"
      :height="height"
      :focus="isExtended"
      @change="onChanged"
      @input:focus="onInputFocused"
      @suffix:icon="onClickStatusIcon"/>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <ti-datetime
      :value="theDropDate"
      :month-format="monthFormat"
      :begin-year="beginYear"
      :end-year="endYear"
      @change="onDateChanged"/>
  </template>
</ti-combo-box>`);
//========================================
// JOIN <ti-input-datetime.mjs> ti/com/ti/input/datetime/ti-input-datetime.mjs
//========================================
Ti.Preload("ti/com/ti/input/datetime/ti-input-datetime.mjs", TI_PACK_EXPORTS['ti/com/ti/input/datetime/ti-input-datetime.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/datetime/_com.json
//========================================
Ti.Preload("ti/com/ti/input/datetime/_com.json", {
  "name" : "ti-input-datetime",
  "globally" : true,
  "template" : "./ti-input-datetime.html",
  "mixins" : ["./ti-input-datetime.mjs"],
  "components" : [
    "@com:ti/combo/input",
    "@com:ti/datetime"]
});
//========================================
// JOIN <ti-input-icon-props.mjs> ti/com/ti/input/icon/ti-input-icon-props.mjs
//========================================
Ti.Preload("ti/com/ti/input/icon/ti-input-icon-props.mjs", TI_PACK_EXPORTS['ti/com/ti/input/icon/ti-input-icon-props.mjs']);
//========================================
// JOIN <ti-input-icon.html> ti/com/ti/input/icon/ti-input-icon.html
//========================================
Ti.Preload("ti/com/ti/input/icon/ti-input-icon.html", `<ti-combo-box class="ti-input-icon"
  :class="TopClass"
  :drop-width="dropWidth"
  :drop-height="dropHeight"
  :status="status"
  @collapse="doCollapse">
  <!--
    Box
  -->
  <template v-slot:box>
    <span class="as-value"
      :style="ValueStyle"
      @click.left="OnToggleDrop">
      <!--Show Icon-->
      <ti-icon 
        v-if="hasValue"
          :value="value"/>
      <!--No Icon-->
      <span 
        v-else
          class="no-icon"><i class="zmdi zmdi-cake"></i></span>
    </span>
    <span class="as-clear" @click="OnClearIcon">
      <ti-icon value="zmdi-close"/>
    </span>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <div class="icon-input">
      <input ref="input"
        :placeholder="'i18n:icon-code-tip'|i18n"
        @change="OnChangedIcon">
    </div>
    <div class="icon-options">
      <ul>
        <li v-for="li of OptionIcons"
          @click.left="OnSelectIcon(li)"
          @dblclick.left="OnSelectIconAndCollapse(li)"
          @mouseenter="OnHoverIcon(li)"
          @mouseleave="OnLeaveIcon(li)">
          <ti-icon :value="li.value"/>
        </li>
      </ul>
    </div>
    <div class="icon-tip">
      <template v-if="TipIcon">
        <ti-icon :value="TipIcon"/>
        <span>{{TipIcon}}</span>
      </template>
      <template v-else>
        <span>...</span>
      </template>
    </div>
  </template>
</ti-combo-box>`);
//========================================
// JOIN <ti-input-icon.mjs> ti/com/ti/input/icon/ti-input-icon.mjs
//========================================
Ti.Preload("ti/com/ti/input/icon/ti-input-icon.mjs", TI_PACK_EXPORTS['ti/com/ti/input/icon/ti-input-icon.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/icon/_com.json
//========================================
Ti.Preload("ti/com/ti/input/icon/_com.json", {
  "name" : "ti-input-icon",
  "globally" : true,
  "template" : "./ti-input-icon.html",
  "props" : "./ti-input-icon-props.mjs",
  "mixins" : ["./ti-input-icon.mjs"]
});
//========================================
// JOIN <ti-input-month.html> ti/com/ti/input/month/ti-input-month.html
//========================================
Ti.Preload("ti/com/ti/input/month/ti-input-month.html", `<ti-combo-box class="as-month"
  :class="topClass"
  :width="width"
  :drop-width="dropWidth"
  :drop-height="dropHeight"
  :drop-overflow="'hidden'"
  :status="status"
  @collapse="doCollapse">
  <!--
    Box
  -->
  <template v-slot:box>
    <ti-input 
      :readonly="!canInput"
      :hide-border="hideBorder"
      :placeholder="placeholder|i18n"
      :prefix-icon="icon"
      :suffix-icon="theStatusIcon"
      :value="theInputValue"
      :height="height"
      :focus="isExtended"
      @change="onChanged"
      @input:focus="onInputFocused"
      @suffix:icon="onClickStatusIcon"/>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <ti-month
      :value="theDropDate"
      :height="dropHeight"
      :begin-year="beginYear"
      :end-year="endYear"
      @change="onMonthChanged"/>
  </template>
</ti-combo-box>`);
//========================================
// JOIN <ti-input-month.mjs> ti/com/ti/input/month/ti-input-month.mjs
//========================================
Ti.Preload("ti/com/ti/input/month/ti-input-month.mjs", TI_PACK_EXPORTS['ti/com/ti/input/month/ti-input-month.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/month/_com.json
//========================================
Ti.Preload("ti/com/ti/input/month/_com.json", {
  "name" : "ti-input-month",
  "globally" : true,
  "template" : "./ti-input-month.html",
  "mixins" : ["./ti-input-month.mjs"],
  "components" : [
    "@com:ti/combo/input",
    "@com:ti/month"]
});
//========================================
// JOIN <ti-input-num.html> ti/com/ti/input/num/ti-input-num.html
//========================================
Ti.Preload("ti/com/ti/input/num/ti-input-num.html", `<div
  class="ti-input-num ti-fill-parent"
  :class="TopClass"
  :style="TopStyle">
  <!--
    Button: -
  -->
  <div class="as-btn is-decrease"
    :class="DesreaseClass"
    @click="changeByStep(-1)">
    <ti-icon value="zmdi-minus"/>
  </div>
  <!--
    Input
  -->
  <div class="as-input">
    <input 
      spellcheck="false" 
      :value="TheValue"
      @change="onChanged">
  </div>
  <!--
    Button: +
  -->
  <div class="as-btn is-increase"
    :class="IncreaseClass"
    @click="changeByStep(1)">
    <ti-icon value="zmdi-plus"/>
  </div>
</div>`);
//========================================
// JOIN <ti-input-num.mjs> ti/com/ti/input/num/ti-input-num.mjs
//========================================
Ti.Preload("ti/com/ti/input/num/ti-input-num.mjs", TI_PACK_EXPORTS['ti/com/ti/input/num/ti-input-num.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/num/_com.json
//========================================
Ti.Preload("ti/com/ti/input/num/_com.json", {
  "name" : "ti-input-num",
  "globally" : true,
  "template" : "./ti-input-num.html",
  "mixins" : ["./ti-input-num.mjs"]
});
//========================================
// JOIN <ti-input-tags-props.mjs> ti/com/ti/input/tags/ti-input-tags-props.mjs
//========================================
Ti.Preload("ti/com/ti/input/tags/ti-input-tags-props.mjs", TI_PACK_EXPORTS['ti/com/ti/input/tags/ti-input-tags-props.mjs']);
//========================================
// JOIN <ti-input-tags.html> ti/com/ti/input/tags/ti-input-tags.html
//========================================
Ti.Preload("ti/com/ti/input/tags/ti-input-tags.html", `<ti-input
  class="ti-input-tags"
  :class-name="className"
  :value="inputValue"
  :value-case="valueCase"
  :trimed="trimed"

  :readonly="!canInput || readonly"
  :focused="focused"
  :hover="hover"
  :auto-select="autoSelect"

  :placeholder="thePlaceholder"
  :auto-i18n="autoI18n"
  :hide-border="hideBorder"
  :prefix-icon="prefixIcon"
  :prefix-hover-icon="prefixHoverIcon"
  :prefix-icon-for-clean="prefixIconForClean"
  :prefix-text="prefixText"
  :suffix-icon="suffixIcon"
  :suffix-text="suffixText"
  
  :width="width"
  :height="height"

  :on-init="onInputInit"
  
  @inputing="onInputInputing"
  @change="onInputChanged"
  @input:focus="$notify('input:focus')"
  @prefix:icon="$notify('prefix:icon')"
  @input:blur="$notify('input:blur')"
  @suffix:icon="$notify('suffix:icon')">
  <!--
    Tag List
  -->
  <div v-if="hasTags"
    class="as-tags">
    <ti-tags
      :value="theTags"
      :dict="dict"
      :removable="true"
      :item-options="tagOptions"
      :item-icon-by="tagItemIconBy"
      :item-default-icon="tagItemDefaultIcon"
      :option-default-icon="tagOptionDefaultIcon"
      :mapping="tagMapping"
      :cancel-item-bubble="cancelTagBubble"
      @change="$notify('change', $event)"/>
  </div>
</ti-input>`);
//========================================
// JOIN <ti-input-tags.mjs> ti/com/ti/input/tags/ti-input-tags.mjs
//========================================
Ti.Preload("ti/com/ti/input/tags/ti-input-tags.mjs", TI_PACK_EXPORTS['ti/com/ti/input/tags/ti-input-tags.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/tags/_com.json
//========================================
Ti.Preload("ti/com/ti/input/tags/_com.json", {
  "name" : "ti-input-tags",
  "globally" : true,
  "template" : "./ti-input-tags.html",
  "props" : [
      "@com:ti/input/ti-input-props.mjs",
      "./ti-input-tags-props.mjs"
    ],
  "mixins" : ["./ti-input-tags.mjs"],
  "components" : ["@com:ti/tags"]
});
//========================================
// JOIN <ti-input-text.html> ti/com/ti/input/text/ti-input-text.html
//========================================
Ti.Preload("ti/com/ti/input/text/ti-input-text.html", `<div class="ti-input-text full-field" 
  :class="topClass" 
  :style="topStyle"
  v-ti-activable>
  <!--
    Prefix
  -->
  <div class="as-bar is-prefix">
    <!--prefix:icon-->
    <div v-if="prefixIcon"
      class="as-icon at-prefix"
      :class="getHoverClass('prefixIcon')"
      @click.left.stop="onClickPrefixIcon"
      @mouseenter="pointerHover='prefixIcon'"
      @mouseleave="pointerHover=null">
      <ti-icon :value="thePrefixIcon"/>
    </div>
    <!--prefix:text-->
    <div v-if="prefixText" 
      class="as-text at-prefix"
      :class="getHoverClass('prefixText')"
      @click.left.stop="onClickPrefixText"
      @mouseenter="pointerHover='prefixText'"
      @mouseleave="pointerHover=null">
      <span>{{prefixText|i18n}}</span>
    </div>
  </div>
  <!--input-->
  <textarea ref="input"
    spellcheck="false" 
    :readonly="readonly"
    :value="theValue"
    :placeholder="placeholder | i18n"
    @compositionstart="onInputCompositionStart"
    @compositionend="onInputCompositionEnd"
    @input="onInputing"
    @keydown="onInputKeyDown"
    @change="onInputChanged"
    @focus="onInputFocus"
    @blur="onInputBlur"></textarea>
  <!--
    Suffox
  -->
  <div class="as-bar is-suffix">
    <!--suffix:text-->
    <div v-if="suffixText"
      class="as-text at-suffix"
      :class="getHoverClass('suffixText')"
      @click.left.stop="onClickSuffixIcon"
      @mouseenter="pointerHover='suffixText'"
      @mouseleave="pointerHover=null">
      <span>{{suffixText|i18n}}</span>
    </div>
    <!--suffix:icon-->
    <div v-if="suffixIcon"
      class="as-icon at-suffix"
      :class="getHoverClass('suffixIcon')"
      @click.left.stop="onClickSuffixIcon"
      @mouseenter="pointerHover='suffixIcon'"
      @mouseleave="pointerHover=null">
      <ti-icon :value="suffixIcon"/>
    </div>
  </div>
</div>`);
//========================================
// JOIN <ti-input-text.mjs> ti/com/ti/input/text/ti-input-text.mjs
//========================================
Ti.Preload("ti/com/ti/input/text/ti-input-text.mjs", TI_PACK_EXPORTS['ti/com/ti/input/text/ti-input-text.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/text/_com.json
//========================================
Ti.Preload("ti/com/ti/input/text/_com.json", {
  "name" : "ti-input-text",
  "globally" : true,
  "template" : "./ti-input-text.html",
  "mixins" : ["./ti-input-text.mjs"],
  "components" : []
});
//========================================
// JOIN <ti-input-props.mjs> ti/com/ti/input/ti-input-props.mjs
//========================================
Ti.Preload("ti/com/ti/input/ti-input-props.mjs", TI_PACK_EXPORTS['ti/com/ti/input/ti-input-props.mjs']);
//========================================
// JOIN <ti-input.html> ti/com/ti/input/ti-input.html
//========================================
Ti.Preload("ti/com/ti/input/ti-input.html", `<div class="ti-input full-field" 
  :class="TopClass" 
  :style="TopStyle"
  v-ti-activable>
  <!--prefix:icon-->
  <div v-if="prefixIcon"
    class="as-input-icon at-prefix"
    :class="getHoverClass('prefixIcon')"
    @click.left="OnClickPrefixIcon"
    @mouseenter="pointerHover='prefixIcon'"
    @mouseleave="pointerHover=null">
    <ti-icon :value="ThePrefixIcon"/>
  </div>
  <!--prefix:text-->
  <div v-if="prefixText" 
    class="as-input-text at-prefix"
    :class="getHoverClass('prefixText')"
    @click.left="OnClickPrefixText"
    @mouseenter="pointerHover='prefixText'"
    @mouseleave="pointerHover=null">
    <span>{{prefixText|i18n}}</span>
  </div>
  <!--PreSlot-->
  <slot></slot>
  <!--
    Input Box
  -->
  <div class="as-input">
    <input ref="input"
      spellcheck="false" 
      :readonly="readonly"
      :value="TheValue"
      :placeholder="placeholder|i18n"
      @compositionstart="OnInputCompositionStart"
      @compositionend="OnInputCompositionEnd"
      @input="OnInputing"
      @change="OnInputChanged"
      @focus="OnInputFocus"
      @blur="OnInputBlur">
    <!--suffix:text-->
    <div v-if="suffixText"
      class="as-input-text at-suffix"
      :class="getHoverClass('suffixText')"
      @click.left="OnClickSuffixIcon"
      @mouseenter="pointerHover='suffixText'"
      @mouseleave="pointerHover=null">
      <span>{{suffixText|i18n}}</span>
    </div>
    <!--suffix:icon-->
    <div v-if="suffixIcon"
      class="as-input-icon at-suffix"
      :class="getHoverClass('suffixIcon')"
      @click.left="OnClickSuffixIcon"
      @mouseenter="pointerHover='suffixIcon'"
      @mouseleave="pointerHover=null">
      <ti-icon :value="suffixIcon"/>
    </div>
  </div>
</div>`);
//========================================
// JOIN <ti-input.mjs> ti/com/ti/input/ti-input.mjs
//========================================
Ti.Preload("ti/com/ti/input/ti-input.mjs", TI_PACK_EXPORTS['ti/com/ti/input/ti-input.mjs']);
//========================================
// JOIN <ti-input-time.html> ti/com/ti/input/time/ti-input-time.html
//========================================
Ti.Preload("ti/com/ti/input/time/ti-input-time.html", `<ti-combo-box class="as-time"
  :class="topClass"
  :width="width"
  :drop-width="dropWidth"
  :drop-height="dropHeight"
  :drop-overflow="'hidden'"
  :status="status"
  @collapse="doCollapse">
  <!--
    Box
  -->
  <template v-slot:box>
    <ti-input 
      :readonly="!canInput"
      :hide-border="hideBorder"
      :placeholder="placeholder|i18n"
      :prefix-icon="icon"
      :suffix-icon="theStatusIcon"
      :value="theTimeText"
      :height="height"
      :focus="isExtended"
      @change="onChanged"
      @input:focus="onInputFocused"
      @suffix:icon="onClickStatusIcon"/>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <ti-time
      :value="theDropTime"
      :height="dropHeight"
      :mode="mode"
      @change="onTimeChanged"/>
  </template>
</ti-combo-box>`);
//========================================
// JOIN <ti-input-time.mjs> ti/com/ti/input/time/ti-input-time.mjs
//========================================
Ti.Preload("ti/com/ti/input/time/ti-input-time.mjs", TI_PACK_EXPORTS['ti/com/ti/input/time/ti-input-time.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/time/_com.json
//========================================
Ti.Preload("ti/com/ti/input/time/_com.json", {
  "name" : "ti-input-time",
  "globally" : true,
  "template" : "./ti-input-time.html",
  "mixins" : ["./ti-input-time.mjs"],
  "components" : [
    "@com:ti/combo/input",
    "@com:ti/time"]
});
//========================================
// JOIN <ti-input-timerange.html> ti/com/ti/input/timerange/ti-input-timerange.html
//========================================
Ti.Preload("ti/com/ti/input/timerange/ti-input-timerange.html", `<ti-combo-box class="as-timerange"
  :class="topClass"
  :width="width"
  :drop-width="null"
  :status="status"
  @collapse="doCollapse">
  <!--
    Box
  -->
  <template v-slot:box>
    <ti-input 
      :readonly="!canInput"
      :hide-border="hideBorder"
      :placeholder="placeholder|i18n"
      :prefix-icon="icon"
      :suffix-icon="theStatusIcon"
      :value="theRangeText"
      :height="height"
      :focus="isExtended"
      @change="onChanged"
      @input:focus="onInputFocused"
      @suffix:icon="onClickStatusIcon"/>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <ti-form
      :data="theDropRange"
      v-bind="theFormConfig"
      @change="onFormChanged"/>
  </template>
</ti-combo-box>`);
//========================================
// JOIN <ti-input-timerange.mjs> ti/com/ti/input/timerange/ti-input-timerange.mjs
//========================================
Ti.Preload("ti/com/ti/input/timerange/ti-input-timerange.mjs", TI_PACK_EXPORTS['ti/com/ti/input/timerange/ti-input-timerange.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/timerange/_com.json
//========================================
Ti.Preload("ti/com/ti/input/timerange/_com.json", {
  "name" : "ti-input-timerange",
  "globally" : true,
  "template" : "./ti-input-timerange.html",
  "mixins" : ["./ti-input-timerange.mjs"],
  "components" : [
    "@com:ti/combo/input"]
});
//========================================
// JOIN <_com.json> ti/com/ti/input/_com.json
//========================================
Ti.Preload("ti/com/ti/input/_com.json", {
  "name" : "ti-input",
  "globally" : true,
  "template" : "./ti-input.html",
  "props" : "./ti-input-props.mjs",
  "mixins" : ["./ti-input.mjs"],
  "components" : []
});
//========================================
// JOIN <ti-label-props.mjs> ti/com/ti/label/ti-label-props.mjs
//========================================
Ti.Preload("ti/com/ti/label/ti-label-props.mjs", TI_PACK_EXPORTS['ti/com/ti/label/ti-label-props.mjs']);
//========================================
// JOIN <ti-label.html> ti/com/ti/label/ti-label.html
//========================================
Ti.Preload("ti/com/ti/label/ti-label.html", `<div class="ti-label"
  :class="TopClass"
  :style="TopStyle"
  @dblclick.left="OnDblClick"
  :title="myDisplayText">
  <!--prefix:icon-->
  <div v-if="ThePrefixIcon"
    class="as-icon at-prefix"
    :class="getHoverClass('prefixIcon')"
    @click.left="OnClickPrefixIcon">
    <ti-icon :value="ThePrefixIcon"/>
  </div>
  <!--prefix:text-->
  <div v-if="prefixText" 
    class="as-text at-prefix"
    :class="getHoverClass('prefixText')"
    @click.left="OnClickPrefixText">
    <span>{{prefixText|i18n}}</span>
  </div>
  <!--Text-->
  <div class="as-value"
    :style="ValueStyle"
    @click.left="OnClickValue">
    <!--Link-->
    <a v-if="href || valueClickable"
        :href="href"
        :taget="newTab ? '_blank' : undefined"
        @click.left.prevent>{{myDisplayText}}</a>
    <!--Normal Text-->
    <span v-else>{{myDisplayText}}</span>
  </div>
  <!--suffix:text-->
  <div v-if="suffixText"
    class="as-text at-suffix"
    :class="getHoverClass('suffixText')"
    @click.left="OnClickSuffixIcon">
    <span>{{suffixText|i18n}}</span>
  </div>
  <!--suffix:icon-->
  <div v-if="suffixIcon"
    class="as-icon at-suffix"
    :class="getHoverClass('suffixIcon')"
    @click.left="OnClickSuffixIcon">
    <ti-icon :value="suffixIcon"/>
  </div>
</div>`);
//========================================
// JOIN <ti-label.mjs> ti/com/ti/label/ti-label.mjs
//========================================
Ti.Preload("ti/com/ti/label/ti-label.mjs", TI_PACK_EXPORTS['ti/com/ti/label/ti-label.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/label/_com.json
//========================================
Ti.Preload("ti/com/ti/label/_com.json", {
  "name" : "ti-label",
  "globally" : true,
  "template" : "./ti-label.html",
  "props" : "./ti-label-props.mjs",
  "mixins" : ["./ti-label.mjs"]
});
//========================================
// JOIN <_hmaker.json> ti/com/ti/label/_hmaker.json
//========================================
Ti.Preload("ti/com/ti/label/_hmaker.json", {
  "icon"   : "im-tag",
  "title"  : "i18n:com-label",
  "scenes" : ["desktop", "tablet", "phone"],
  "editComType" : "ti-form",
  "editComConf" : {
    "mode" : "tab",
    "data" : "=comConf",
    "fields" : [{
        "title": "i18n:hmk-aspect",
        "fields": [{
            "title": "i18n:hmk-placeholder",
            "name": "placeholder",
            "comType": "ti-input"
          }, {
            "title": "i18n:hmk-autoI18n",
            "name": "autoI18n",
            "type": "Boolean",
            "defaultAs": true,
            "comType": "ti-toggle"
          }, {
            "title": "i18n:hmk-prefixIcon",
            "name": "prefixIcon",
            "comType": "ti-input-icon"
          }, {
            "title": "i18n:hmk-prefixText",
            "name": "prefixText",
            "comType": "ti-input"
          }, {
            "title": "i18n:hmk-suffixIcon",
            "name": "suffixIcon",
            "comType": "ti-input-icon"
          }, {
            "title": "i18n:hmk-suffixText",
            "name": "suffixText",
            "comType": "ti-input"
          }]
      }, {
        "title": "i18n:hmk-behavior",
        "fields": [{
            "title": "i18n:hmk-href",
            "name": "href",
            "comType": "ti-input"
          }, {
            "title": "i18n:hmk-newTab",
            "name": "newTab",
            "type": "Boolean",
            "hidden" : {
              "href": "NoEmpty"
            },
            "comType": "ti-toggle"
          }, {
            "title": "i18n:hmk-breakLine",
            "name": "breakLine",
            "type": "Boolean",
            "defaultAs": true,
            "comType": "ti-toggle"
          }, {
            "title": "i18n:hmk-editable",
            "name": "editable",
            "type": "Boolean",
            "comType": "ti-toggle"
          }]
      }, {
      "title": "i18n:hmk-data",
      "fields": [{
          "title": "i18n:hmk-value",
          "name": "value",
          "comType": "ti-input"
        }, {
          "title": "i18n:hmk-dict",
          "name": "dict",
          "comType": "ti-input"
        }, {
          "title": "i18n:hmk-trimed",
          "name": "trimed",
          "type": "Boolean",
          "comType": "ti-toggle"
        }, {
          "title": "i18n:hmk-format",
          "name": "format",
          "comType": "ti-input",
          "comConf": {
            "autoJsValue": true
          }
        }]
    }, {
      "title": "i18n:hmk-measure",
      "fields": [{
          "title": "i18n:hmk-width",
          "name": "width",
          "comType": "ti-input"
        }, {
          "title": "i18n:hmk-height",
          "name": "height",
          "comType": "ti-input"
        }, {
          "title": "i18n:hmk-valueMaxWidth",
          "name": "valueMaxWidth",
          "comType": "ti-input"
        }]
    }]
  }
});
//========================================
// JOIN <ti-lbs-map-baidu.html> ti/com/ti/lbs/map/baidu/ti-lbs-map-baidu.html
//========================================
Ti.Preload("ti/com/ti/lbs/map/baidu/ti-lbs-map-baidu.html", `<div class="ti-lbs-map by-baidu ti-fill-parent">
  <div ref="arena" class="map-arena ti-fill-parent"></div>
</div>`);
//========================================
// JOIN <ti-lbs-map-baidu.mjs> ti/com/ti/lbs/map/baidu/ti-lbs-map-baidu.mjs
//========================================
Ti.Preload("ti/com/ti/lbs/map/baidu/ti-lbs-map-baidu.mjs", TI_PACK_EXPORTS['ti/com/ti/lbs/map/baidu/ti-lbs-map-baidu.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/lbs/map/baidu/_com.json
//========================================
Ti.Preload("ti/com/ti/lbs/map/baidu/_com.json", {
  "name" : "ti-lbs-map-baidu",
  "globally" : true,
  "template" : "./ti-lbs-map-baidu.html",
  "mixins"   : ["./ti-lbs-map-baidu.mjs"],
  "components" : []
});
//========================================
// JOIN <ti-lbs-map-google.html> ti/com/ti/lbs/map/google/ti-lbs-map-google.html
//========================================
Ti.Preload("ti/com/ti/lbs/map/google/ti-lbs-map-google.html", `<div class="ti-lbs-map by-google ti-fill-parent">
  <div ref="arena" class="map-arena ti-fill-parent"></div>
  <!--div style="background:#FF0;position: absolute; bottom:0;right:0;"
    @click="redrawLayers()">Redraw</div-->
</div>`);
//========================================
// JOIN <ti-lbs-map-google.mjs> ti/com/ti/lbs/map/google/ti-lbs-map-google.mjs
//========================================
Ti.Preload("ti/com/ti/lbs/map/google/ti-lbs-map-google.mjs", TI_PACK_EXPORTS['ti/com/ti/lbs/map/google/ti-lbs-map-google.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/lbs/map/google/_com.json
//========================================
Ti.Preload("ti/com/ti/lbs/map/google/_com.json", {
  "name" : "ti-lbs-map-google",
  "globally" : true,
  "template" : "./ti-lbs-map-google.html",
  "mixins"   : ["./ti-lbs-map-google.mjs"],
  "components" : []
});
//========================================
// JOIN <ti-lbs-map-tencent.html> ti/com/ti/lbs/map/tencent/ti-lbs-map-tencent.html
//========================================
Ti.Preload("ti/com/ti/lbs/map/tencent/ti-lbs-map-tencent.html", `<div class="ti-lbs-map by-tencent ti-fill-parent">
  <div ref="arena" class="map-arena ti-fill-parent"></div>
</div>`);
//========================================
// JOIN <ti-lbs-map-tencent.mjs> ti/com/ti/lbs/map/tencent/ti-lbs-map-tencent.mjs
//========================================
Ti.Preload("ti/com/ti/lbs/map/tencent/ti-lbs-map-tencent.mjs", TI_PACK_EXPORTS['ti/com/ti/lbs/map/tencent/ti-lbs-map-tencent.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/lbs/map/tencent/_com.json
//========================================
Ti.Preload("ti/com/ti/lbs/map/tencent/_com.json", {
  "name" : "ti-lbs-map-tencent",
  "globally" : true,
  "template" : "./ti-lbs-map-tencent.html",
  "mixins"   : ["./ti-lbs-map-tencent.mjs"],
  "components" : []
});
//========================================
// JOIN <ti-lbs-map.html> ti/com/ti/lbs/map/ti-lbs-map.html
//========================================
Ti.Preload("ti/com/ti/lbs/map/ti-lbs-map.html", `<div class="ti-lbs-map" 
  :class="TopClass"
  :style="TopStyle">
  <!--
    Show Map
  -->
  <div 
    v-if="apiLoaded"
      class="map-con">
      <!--
        Map Main
      -->
      <div class="as-main">
        <component 
          :is="MapComType"
            v-bind="MapComConf"
            @center:change="OnCenterChange"
            @zoom:change="OnZoomChange"/>
      </div>
      <!--
        Wait cooling
      -->
      <div
        v-if="CoolingIcon"
          class="as-wait-cooling"><TiIcon :value="CoolingIcon"/></div>
      <!--
        Map Controls
      -->
      <div class="as-controls">
        <TiActionbar v-bind="MapActionBar"/>
      </div>
      <!--
        Map Info
      -->
      <div
        v-if="infoBar && MapCenter"
          class="as-info">
          <ul class="as-laln">
            <li><span>{{'lat'|i18n}}:</span><em>{{MapCenter.lat|float(8)}}</em></li>
            <li><span>{{'lng'|i18n}}:</span><em>{{MapCenter.lng|float(8)}}</em></li>
            <li><span>ZOOM</span><em>{{myZoom || zoom}}</em></li>
          </ul>
      </div> <!--as-info-->
  </div>
  <!--
    Show Loading 
  -->
  <ti-loading
    v-else
      class="as-big-mask"/>
</div>`);
//========================================
// JOIN <ti-lbs-map.mjs> ti/com/ti/lbs/map/ti-lbs-map.mjs
//========================================
Ti.Preload("ti/com/ti/lbs/map/ti-lbs-map.mjs", TI_PACK_EXPORTS['ti/com/ti/lbs/map/ti-lbs-map.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/lbs/map/_com.json
//========================================
Ti.Preload("ti/com/ti/lbs/map/_com.json", {
  "name" : "ti-lbs-map",
  "globally" : true,
  "template" : "./ti-lbs-map.html",
  "mixins"   : ["./ti-lbs-map.mjs"],
  "components" : [
    "./tencent/_com.json",
    "./baidu/_com.json",
    "./google/_com.json",
    "@com:ti/button"
  ]
});
//========================================
// JOIN <ti-lbs-route.html> ti/com/ti/lbs/route/ti-lbs-route.html
//========================================
Ti.Preload("ti/com/ti/lbs/route/ti-lbs-route.html", `<div class="ti-lbs-route" 
  :class="TopClass"
  :style="TopStyle">
  <!--Map-->
  <TiLbsMap
    v-bind="this"
    :gesture-handling="TheGestureHandling"
    :value="ValueItems"
    mode="path"
    @change:fullscreen="OnFullscreenChange"/>
  <!--
    Edit Panel
  -->
  <template v-if="editable">
    <!--
      Route List
    -->
    <transition name="ti-trans-fade">
      <div
        v-if="isShowList"
          class="as-list">
            <TiList
              :data="ValueItems"
              v-bind="ListConf"
              blank-class="as-big"
              :current-id="myCurrentId"
              :checked-ids="myCheckedIds"
              :puppet-mode="true"
              @select="OnListSelect"
              @open="OnListOpen"/>
      </div>
    </transition>
    <!--
      Actions
    -->
    <div class="as-actions">
      <TiButton
        :setup="ActionButtons"/>
    </div>
  </template>
</div>`);
//========================================
// JOIN <ti-lbs-route.mjs> ti/com/ti/lbs/route/ti-lbs-route.mjs
//========================================
Ti.Preload("ti/com/ti/lbs/route/ti-lbs-route.mjs", TI_PACK_EXPORTS['ti/com/ti/lbs/route/ti-lbs-route.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/lbs/route/_com.json
//========================================
Ti.Preload("ti/com/ti/lbs/route/_com.json", {
  "name" : "ti-lbs-route",
  "globally" : true,
  "template" : "./ti-lbs-route.html",
  "mixins"   : ["./ti-lbs-route.mjs"],
  "components" : [
    "@com:ti/lbs/map"]
});
//========================================
// JOIN <list-row.html> ti/com/ti/list/com/list-row/list-row.html
//========================================
Ti.Preload("ti/com/ti/list/com/list-row/list-row.html", `<div class="list-row"
  :class="TopClass">
  <!--current actived row indicator-->
  <div class="row-actived-indicator"></div>
  <!--Changed Item-->
  <div 
    v-if="isChanged"
      class="row-changed-indicator"></div>
  <!-- Indents -->
  <div v-for="n in indent"
  class="row-indent"></div>
  <!--ICON: Handler-->
  <template v-if="icon">
    <ti-icon
      v-if="hasRealIcon"
        class="row-icon"
        :value="icon"
        @click.native.left.stop="OnClickIcon"/>
    <div v-else
      class="row-icon"></div>
  </template>
  <!--ICON: Checker-->
  <ti-icon v-if="checkable"
      class="row-checker"
      :value="theCheckIcon"
      @click.native.left.stop="OnClickChecker"/>
  <!-- Content -->
  <div
    class="row-con"
    @click.left="OnClickRow"
    @dblclick.left="OnDblClickRow"
    v-ti-activable>
    <component 
      v-for="(it, index) in myDisplayItems"
        :class="'item-'+index"
        :key="it.uniqueKey"
        :is="it.comType"
        v-bind="it.comConf"
        @change="onItemChanged(it, $event)"/>
  </div>

</div>`);
//========================================
// JOIN <list-row.mjs> ti/com/ti/list/com/list-row/list-row.mjs
//========================================
Ti.Preload("ti/com/ti/list/com/list-row/list-row.mjs", TI_PACK_EXPORTS['ti/com/ti/list/com/list-row/list-row.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/list/com/list-row/_com.json
//========================================
Ti.Preload("ti/com/ti/list/com/list-row/_com.json", {
  "name" : "list-row",
  "globally" : false,
  "template" : "./list-row.html",
  "methods"  : "@com:ti/support/field_display.mjs",
  "mixins" : [
    "@com:ti/support/list_item_mixins.mjs",
    "./list-row.mjs"]
});
//========================================
// JOIN <ti-list.html> ti/com/ti/list/ti-list.html
//========================================
Ti.Preload("ti/com/ti/list/ti-list.html", `<div class="ti-list"
  :class="TopClass"
  @click="OnClickTop"
  v-ti-activable>
  <!--
    Blank
  -->
  <ti-loading 
    v-if="isDataEmpty"
      class="nil-data"
      :class="blankClass"
      v-bind="blankAs"/>
  <!--
    Show Items
  -->
  <template v-else>
    <list-row
      v-for="row in TheData"
        :key="row.id"
        :row-id="row.id"
        :index="row.index"
        :icon="row.icon"
        :indent="row.indent"
        :data="row.rawData"
        :display="DisplayItems"
        :current-id="theCurrentId"
        :checked-ids="theCheckedIds"
        :changed-id="changedId"
        :checkable="checkable"
        :selectable="selectable"
        :openable="openable"
        :row-toggle-key="TheRowToggleKey"
        :class-name="itemClassName"
        @checker="OnRowCheckerClick"
        @select="OnRowSelect"
        @open="OnRowOpen"/>
  </template>
</div>`);
//========================================
// JOIN <ti-list.mjs> ti/com/ti/list/ti-list.mjs
//========================================
Ti.Preload("ti/com/ti/list/ti-list.mjs", TI_PACK_EXPORTS['ti/com/ti/list/ti-list.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/list/_com.json
//========================================
Ti.Preload("ti/com/ti/list/_com.json", {
  "name" : "ti-list",
  "globally" : true,
  "template" : "./ti-list.html",
  "props" : "@com:ti/support/list_props.mjs",
  "methods" : "@com:ti/support/field_display.mjs",
  "mixins" : [
    "@com:ti/support/list_mixins.mjs",
    "./ti-list.mjs"
  ],
  "components" : [
    "./com/list-row",
    "@com:ti/label"
  ]
});
//========================================
// JOIN <_hmaker.json> ti/com/ti/list/_hmaker.json
//========================================
Ti.Preload("ti/com/ti/list/_hmaker.json", {
  "icon"   : "im-data",
  "title"  : "i18n:com-list",
  "screen" : ["desktop", "tablet"],
  "manual" : true,
  "tutorial" : true,
  "video" : true,
  "editComType" : "ti-form",
  "editComConf" : {
    "fields" : []
  }
});
//========================================
// JOIN <ti-loading.html> ti/com/ti/loading/ti-loading.html
//========================================
Ti.Preload("ti/com/ti/loading/ti-loading.html", `<div class="ti-loading"
  :class="TopClass">
  <ti-icon class="as-icon" :value="icon"/>
  <div class="as-text">{{text|i18n}}</div>
</div>`);
//========================================
// JOIN <ti-loading.mjs> ti/com/ti/loading/ti-loading.mjs
//========================================
Ti.Preload("ti/com/ti/loading/ti-loading.mjs", TI_PACK_EXPORTS['ti/com/ti/loading/ti-loading.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/loading/_com.json
//========================================
Ti.Preload("ti/com/ti/loading/_com.json", {
  "name" : "ti-loading",
  "globally" : true,
  "template" : "./ti-loading.html",
  "mixins" : ["./ti-loading.mjs"]
});
//========================================
// JOIN <ti-logging.html> ti/com/ti/logging/ti-logging.html
//========================================
Ti.Preload("ti/com/ti/logging/ti-logging.html", `<div class="ti-logging"
  :class="TopClass"
  :style="TopStyle">
  <pre ref="pre"><div 
    v-for="(line, index) in lines"
      :data-index="index"
      >{{line || '&nbsp;'}}</div></pre>    
</div>`);
//========================================
// JOIN <ti-logging.mjs> ti/com/ti/logging/ti-logging.mjs
//========================================
Ti.Preload("ti/com/ti/logging/ti-logging.mjs", TI_PACK_EXPORTS['ti/com/ti/logging/ti-logging.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/logging/_com.json
//========================================
Ti.Preload("ti/com/ti/logging/_com.json", {
  "name" : "ti-logging",
  "globally" : true,
  "template" : "./ti-logging.html",
  "mixins" : ["./ti-logging.mjs"]
});
//========================================
// JOIN <ti-media-audio.html> ti/com/ti/media/audio/ti-media-audio.html
//========================================
Ti.Preload("ti/com/ti/media/audio/ti-media-audio.html", `<div class="ti-media-audio"
    :class="TopClass"
    :style="TopStyle"
    v-drag-off>
    <!--
      Audio
    -->
    <audio ref="audio"
      :src="src"
      controls
      @loadstart="OnLoadsStart"
      @loadedmetadata="OnLoadedMetaData"
      @canplay="OnCanPlay"
      @durationchange="OnDurationChange"
      @loadeddata="OnLoadedData"
      @ended="OnEnded"
      @play="OnPlay"
      @pause="OnPause"
      @seeked="OnSeeked"
      @seeking="OnSeeking"
      @timeupdate="OnTimeUpdate"
      @volumechange="OnVolumeChange"
      @stalled="OnStalled"
      @waiting="OnWaiting"/>
    <!--
      Display wrapper
    -->
    <div class="ti-media-control" 
      :class="ControlClass"
      :style="ControlStyle">
      <!--
        Play Icon
      -->
      <div class="as-play-icon"
        @click.left="togglePlay">
        <TiIcon :value="PlayIcon"/>
      </div>
      <!--
        Slide bar
      -->
      <TiSlideBar
        class="as-timeline hdl-auto-hide hdl-md bar-sm"
        v-bind="TimelineConfig"
        :value="currentTime"
        :max-value="duration"
        :mark-begin="bufferedBegin"
        :mark-end="bufferedEnd"
        @drag:begin="OnTimelineDragBegin"
        @drag:end="OnTimelineDragEnd"
        @change="OnTimelineChange"/>
        <!---
          Volume button
        -->
        <div class="as-volume abc">
          <TiSlideBar
            class="as-volume-bar hdl-lg bar-md"
            v-bind="VolumeConfig"
            :value="volume"
            @change="OnVolumeBarChange"/>
          <div class="as-volume-icon"
            @click.left="toggleMuted">
            <TiIcon :value="VolumeIcon"/>
          </div>
        </div>
    </div>
</div>`);
//========================================
// JOIN <ti-media-audio.mjs> ti/com/ti/media/audio/ti-media-audio.mjs
//========================================
Ti.Preload("ti/com/ti/media/audio/ti-media-audio.mjs", TI_PACK_EXPORTS['ti/com/ti/media/audio/ti-media-audio.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/media/audio/_com.json
//========================================
Ti.Preload("ti/com/ti/media/audio/_com.json", {
  "name" : "ti-media-audio",
  "globally" : true,
  "template" : "./ti-media-audio.html",
  "mixins" : ["./ti-media-audio.mjs"],
  "components" : [
    "@com:ti/slide/bar"
  ]
});
//========================================
// JOIN <ti-media-binary.html> ti/com/ti/media/binary/ti-media-binary.html
//========================================
Ti.Preload("ti/com/ti/media/binary/ti-media-binary.html", `<div class="ti-media-binary">
  <div class="tob-icon">
    <ti-icon v-if="icon" :value="icon" size="1.28rem"/>
  </div>
  <div class="tob-title">
    {{title}}
  </div>
  <div 
    v-if="download"
      class="tob-actions">
      <a :href="src">
        <ti-icon value="download"/>
        <span>{{'download'|i18n}}</span>
      </a>
  </div>
</div>`);
//========================================
// JOIN <ti-media-binary.mjs> ti/com/ti/media/binary/ti-media-binary.mjs
//========================================
Ti.Preload("ti/com/ti/media/binary/ti-media-binary.mjs", TI_PACK_EXPORTS['ti/com/ti/media/binary/ti-media-binary.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/media/binary/_com.json
//========================================
Ti.Preload("ti/com/ti/media/binary/_com.json", {
  "name" : "ti-media-binary",
  "globally" : true,
  "template" : "./ti-media-binary.html",
  "mixins" : ["./ti-media-binary.mjs"]
});
//========================================
// JOIN <ti-media-image.html> ti/com/ti/media/image/ti-media-image.html
//========================================
Ti.Preload("ti/com/ti/media/image/ti-media-image.html", `<div class="ti-media-image" 
     :class="topClass"
     :style="topStyle"
     :fit-mode="fitMode"
     v-drag-off>
  <div class="as-con" ref="con">
    <img ref="the_image"
      :src="src"
      :style="theImageStyle"
      @load="onImageLoaded"
      @dblclick.stop="onToggleImageFitMode">
  </div>
</div>`);
//========================================
// JOIN <ti-media-image.mjs> ti/com/ti/media/image/ti-media-image.mjs
//========================================
Ti.Preload("ti/com/ti/media/image/ti-media-image.mjs", TI_PACK_EXPORTS['ti/com/ti/media/image/ti-media-image.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/media/image/_com.json
//========================================
Ti.Preload("ti/com/ti/media/image/_com.json", {
  "name" : "ti-media-image",
  "globally" : true,
  "template" : "./ti-media-image.html",
  "mixins" : ["./ti-media-image.mjs"]
});
//========================================
// JOIN <ti-media-video.html> ti/com/ti/media/video/ti-media-video.html
//========================================
Ti.Preload("ti/com/ti/media/video/ti-media-video.html", `<div class="ti-media-video"
    :class="topClass"
    :style="topStyle"
    v-drag-off>
    <video ref="the_video"
      :src="src"
      controls
      @loadeddata="onVideoLoaded"/>
    <div class="tov-loading" v-if="loading">
      <ti-loading/>
    </div>
</div>`);
//========================================
// JOIN <ti-media-video.mjs> ti/com/ti/media/video/ti-media-video.mjs
//========================================
Ti.Preload("ti/com/ti/media/video/ti-media-video.mjs", TI_PACK_EXPORTS['ti/com/ti/media/video/ti-media-video.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/media/video/_com.json
//========================================
Ti.Preload("ti/com/ti/media/video/_com.json", {
  "name" : "ti-media-video",
  "globally" : true,
  "template" : "./ti-media-video.html",
  "mixins" : ["./ti-media-video.mjs"]
});
//========================================
// JOIN <ti-month.html> ti/com/ti/month/ti-month.html
//========================================
Ti.Preload("ti/com/ti/month/ti-month.html", `<div class="ti-col-data as-month" 
  :class="topClass" 
  :style="topStyle">
  <ti-list v-for="list in theListGroup"
    :key="list.key"
    :data="list.data"
    :display="'text'"
    :current-id="list.currentId"
    :cancelable="false"
    @select="onListSelected(list.key, $event)"/>
</div>`);
//========================================
// JOIN <ti-month.mjs> ti/com/ti/month/ti-month.mjs
//========================================
Ti.Preload("ti/com/ti/month/ti-month.mjs", TI_PACK_EXPORTS['ti/com/ti/month/ti-month.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/month/_com.json
//========================================
Ti.Preload("ti/com/ti/month/_com.json", {
  "name" : "ti-month",
  "globally" : true,
  "template" : "./ti-month.html",
  "mixins" : ["./ti-month.mjs"],
  "components" : ["@com:ti/list"]
});
//========================================
// JOIN <ti-obj-pair.html> ti/com/ti/obj/pair/ti-obj-pair.html
//========================================
Ti.Preload("ti/com/ti/obj/pair/ti-obj-pair.html", `<div class="ti-obj-pair full-field" 
    :class="TopClass">
  <!--
    Empty
  -->
  <ti-loading
    v-if="isEmpty && showEmpty"
      class="as-small-tip"
      v-bind="blankAs"/>
  <!--
    Show Pair
  -->
  <template v-else>
    <table cellpadding="0">
      <thead v-if="showHead">
        <tr>
          <th class="as-name" >{{nameText  | i18n}}</th>
          <th class="as-value">{{valueText | i18n}}</th>
        </tr>
      </thead>
      <tbody>
        <tr
          v-for="pa in myPairList">
            <!--
              Name
            -->
            <td class="as-name"  width="1%">
              <span>{{pa.title || pa.name}}</span>
            </td>
            <!--
              Value
            -->
            <td class="as-value" width="99%">
              <!--
                Customized display component
              -->
              <component
                v-if="pa.comType"
                  :is="pa.comType"
                  v-bind="pa.comConf"
                  :value="pa.value"
                  @change="OnPairComChange($event, pa)"/>
              <!--
                Value editable
              --> 
              <input 
                v-else-if="canEditValue"
                  :value="pa.value"
                  @change="OnPairValueChange($event, pa)"/>
              <!--
                Just show value
              -->
              <span
                v-else>{{pa.text || pa.value}}</span>
            </td>
        </tr>
      </tbody>
    </table>
  </template>
</div>`);
//========================================
// JOIN <ti-obj-pair.mjs> ti/com/ti/obj/pair/ti-obj-pair.mjs
//========================================
Ti.Preload("ti/com/ti/obj/pair/ti-obj-pair.mjs", TI_PACK_EXPORTS['ti/com/ti/obj/pair/ti-obj-pair.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/obj/pair/_com.json
//========================================
Ti.Preload("ti/com/ti/obj/pair/_com.json", {
  "name" : "ti-obj-pair",
  "globally" : true,
  "template" : "./ti-obj-pair.html",
  "mixins" : ["./ti-obj-pair.mjs"]
});
//========================================
// JOIN <ti-obj-thumb.html> ti/com/ti/obj/thumb/ti-obj-thumb.html
//========================================
Ti.Preload("ti/com/ti/obj/thumb/ti-obj-thumb.html", `<div class="ti-obj-thumb" 
    :class="TopClass">
  <!--
    Preview && Process Bar
  -->
  <header>
    <!--Preview Part-->
    <div class="as-preview">
      <!-- Local Image -->
      <template v-if="isLocalImage">
        <img ref="localImage" is-local-file>
      </template>
      <!-- Local File -->
      <template v-else-if="isLocalFile">
        <ti-icon :value="LocalFileIcon"/>
      </template>
      <!-- Remote Image -->
      <template v-else-if="'image'==preview.type">
        <img :src="preview.value">
      </template>
      <!-- Icon -->
      <template v-else>
        <ti-icon :value="preview"/>
      </template>
      <!--Badge-->
      <div
        v-for="bdg in ThumbBadges"
          :class="bdg.className">
          <!--Icon-->
          <ti-icon
            v-if="'icon' == bdg.type"
              :value="bdg.value"/>
          <!--Text-->
          <span
            v-else-if="'text' == bdg.type">{{bdg.value}}</span>
      </div>
    </div>
    <!--Process bar-->
    <div v-if="isShowProgress"
      class="as-progress ti-progress-bar">
      <span class="bar-tip">{{ProgressTip}}</span>
      <b class="bar-outer">
        <em class="bar-inner" 
            :style="ProgressStyle"></em>
      </b>
    </div>
  </header>
  <!--
    Status Mask
  -->
  <section class="as-status" v-if="status">
    <ti-icon 
      :value="status"
      font-size="2em"
      width="3em"
      height="3em"/>
  </section>
  <!--
    Footer for item title text
  -->
  <footer v-if="showFooter">
    <div class="as-title">
      <a v-if="hasHref"
        :href="TheHref"
        @click.left.prevent="OnClickTitle">{{TheTitle}}</a>
      <span v-else>{{TheTitle}}</span>
    </div>
  </footer>
  <!--
    Remove Icon
  -->
  <div 
    v-if="removeIcon"
      class="as-remove"
      @click.left.stop="OnRemove">
      <ti-icon :value="removeIcon"/>
  </div>
</div>`);
//========================================
// JOIN <ti-obj-thumb.mjs> ti/com/ti/obj/thumb/ti-obj-thumb.mjs
//========================================
Ti.Preload("ti/com/ti/obj/thumb/ti-obj-thumb.mjs", TI_PACK_EXPORTS['ti/com/ti/obj/thumb/ti-obj-thumb.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/obj/thumb/_com.json
//========================================
Ti.Preload("ti/com/ti/obj/thumb/_com.json", {
  "name" : "ti-obj-thumb",
  "globally" : true,
  "template" : "./ti-obj-thumb.html",
  "mixins" : ["./ti-obj-thumb.mjs"]
});
//========================================
// JOIN <ti-obj-tile.html> ti/com/ti/obj/tile/ti-obj-tile.html
//========================================
Ti.Preload("ti/com/ti/obj/tile/ti-obj-tile.html", `<div class="ti-obj-tile" 
    :class="topClass">
  <!--
    Preview Image
  -->
  <div class="as-preview">
    <a v-if="hasHref"
      :href="href"
      @click="onClick"
      ><ti-icon 
        :value="preview"
        :height="previewHeight"/></a>
    <ti-icon v-else
      :value="preview"
      :height="previewHeight"/>
  </div>
  <!--
    Title
  -->
  <div class="as-title">
    <a v-if="hasHref"
      :href="href"
      @click="onClick"
    >{{title}}</a>
    <!--
      Without Href
    -->
    <span v-else>{{title}}</span>
  </div>
  <!--
    Footer
  -->
  <div v-if="hasBrief"
    class="as-brief">
    <span>{{brief}}</span>
  </div>
</div>`);
//========================================
// JOIN <ti-obj-tile.mjs> ti/com/ti/obj/tile/ti-obj-tile.mjs
//========================================
Ti.Preload("ti/com/ti/obj/tile/ti-obj-tile.mjs", TI_PACK_EXPORTS['ti/com/ti/obj/tile/ti-obj-tile.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/obj/tile/_com.json
//========================================
Ti.Preload("ti/com/ti/obj/tile/_com.json", {
  "name" : "ti-obj-tile",
  "globally" : true,
  "template" : "./ti-obj-tile.html",
  "mixins" : ["./ti-obj-tile.mjs"]
});
//========================================
// JOIN <ti-paging-button.html> ti/com/ti/paging/button/ti-paging-button.html
//========================================
Ti.Preload("ti/com/ti/paging/button/ti-paging-button.html", `<div class="ti-paging-button"
  :class="TopClass">
  <div class="as-pg-btn is-prev" @click.left="JumpTo(PN-1)">
    <i class="im im-angle-left"></i>
    <span>{{'i18n:paging-prev'|i18n}}</span>
  </div>
  <template 
    v-for="btn of BtnList">
      <div
        v-if="btn.ellipsis"
          class="as-ellipsis">
          <span>...</span></div>
      <div
        v-else
          class="as-pg-btn"
          :class="btn.className"
          @click.left="JumpTo(btn.value)">
          <span>{{btn.value}}</span></div>
  </template>
  <div class="as-pg-btn is-next" @click.left="JumpTo(PN+1)">
    <span>{{'i18n:paging-next'|i18n}}</span>
    <i class="im im-angle-right"></i>
  </div>
</div>`);
//========================================
// JOIN <ti-paging-button.mjs> ti/com/ti/paging/button/ti-paging-button.mjs
//========================================
Ti.Preload("ti/com/ti/paging/button/ti-paging-button.mjs", TI_PACK_EXPORTS['ti/com/ti/paging/button/ti-paging-button.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/paging/button/_com.json
//========================================
Ti.Preload("ti/com/ti/paging/button/_com.json", {
  "name" : "ti-paging-button",
  "globally" : true,
  "template" : "./ti-paging-button.html",
  "mixins" : ["./ti-paging-button.mjs"]
});
//========================================
// JOIN <ti-paging-jumper.html> ti/com/ti/paging/jumper/ti-paging-jumper.html
//========================================
Ti.Preload("ti/com/ti/paging/jumper/ti-paging-jumper.html", `<div class="ti-paging-jumper"
  :class="TopClass">
  <div 
    class="pj-btn"
    :class="getBtnClass(1)"
    @click="OnJumpTo(1)">
      <ti-icon value="zmdi-skip-previous"/>
      <span class="it-text">{{'paging-first'|i18n}}</span></div>
  <div 
    class="pj-btn"
    :class="getBtnClass(value.pn-1)"
    @click="OnJumpTo(value.pn-1)">
      <ti-icon value="zmdi-chevron-left"/>
      <span class="it-text">{{'paging-prev'|i18n}}</span></div>
  <div 
    class="pj-current"
    :class="PageNumberClass"
    @click="OnClickCurrent">
    <b>{{value.pn}}</b>
  </div>
  <div 
    class="pj-btn"
    :class="getBtnClass(value.pn+1)"
    @click="OnJumpTo(value.pn+1)">
      <span class="it-text">{{'paging-next'|i18n}}</span>
      <ti-icon value="zmdi-chevron-right"/></div>
  <div 
    class="pj-btn"
    :class="getBtnClass(value.pgc)"
    @click="OnJumpTo(value.pgc)">
      <span class="it-text">{{'paging-last'|i18n}}</span>
      <ti-icon value="zmdi-skip-next"/></div>
  <div
    v-if="hasValue"
      class="pj-sum"
      :class="SumClass"
      @click="OnClickSum">{{'paging-sum'|i18n(value)}}</div>
</div>`);
//========================================
// JOIN <ti-paging-jumper.mjs> ti/com/ti/paging/jumper/ti-paging-jumper.mjs
//========================================
Ti.Preload("ti/com/ti/paging/jumper/ti-paging-jumper.mjs", TI_PACK_EXPORTS['ti/com/ti/paging/jumper/ti-paging-jumper.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/paging/jumper/_com.json
//========================================
Ti.Preload("ti/com/ti/paging/jumper/_com.json", {
  "name" : "ti-paging-jumper",
  "globally" : true,
  "template" : "./ti-paging-jumper.html",
  "mixins" : ["./ti-paging-jumper.mjs"]
});
//========================================
// JOIN <ti-roadblock.html> ti/com/ti/roadblock/ti-roadblock.html
//========================================
Ti.Preload("ti/com/ti/roadblock/ti-roadblock.html", `<div class="ti-roadblock"
  :class="TopClass">
  <div class="as-main">
    <div v-if="icon" class="as-icon">
      <ti-icon :value="icon"/>
    </div>
    <div v-if="text" class="as-text">
      <span>{{text | i18n}}</span>
    </div>
  </div>
</div>`);
//========================================
// JOIN <ti-roadblock.mjs> ti/com/ti/roadblock/ti-roadblock.mjs
//========================================
Ti.Preload("ti/com/ti/roadblock/ti-roadblock.mjs", TI_PACK_EXPORTS['ti/com/ti/roadblock/ti-roadblock.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/roadblock/_com.json
//========================================
Ti.Preload("ti/com/ti/roadblock/_com.json", {
  "name" : "ti-roadblock",
  "globally" : true,
  "template" : "./ti-roadblock.html",
  "mixins"   : ["./ti-roadblock.mjs"],
  "components" : []
});
//========================================
// JOIN <ti-session-badge.html> ti/com/ti/session/badge/ti-session-badge.html
//========================================
Ti.Preload("ti/com/ti/session/badge/ti-session-badge.html", `<div class="ti-session-badge"
  :class="TopClass">
  <!--
    Has Session, show account info
  -->
  <template v-if="hasSession">
    <!--Avatar-->
    <div v-if="hasAvatar"
      class="as-avatar">
      <img :src="myAvatar"/>
    </div>
    <!--User Icon-->
    <div v-else
      class="as-icon">
      <ti-icon :value="myIcon"/>
    </div>
    <!--User Name-->
    <div class="as-name">
      <!--Name Event-->
      <a
        v-if="nameEvent"
          @click.left="$notify(nameEvent)">{{myName}}</a>
      <!--Name display-->
      <span
        v-else>{{myName}}</span>
    </div>
    <!--Links-->
    <div v-for="li in theLinks"
      class="as-link">
      <!--Icon-->
      <ti-icon
        v-if="li.icon"
          class="it-icon"
          :value="li.icon"/>
      <!--Text-->
      <a
        @click.left="OnClickLink(li, $event)"
        :href="li.href"
        :target="li.newtab?'_blank':null">{{li.title|i18n}}</a>
    </div>
  </template>
  <!--
    Without session, show login link
  -->
  <template v-else>
    <div v-if="loginIcon"
      class="as-icon">
      <ti-icon :value="loginIcon"/>
    </div>
    <div class="as-link">
      <a @click="$notify(loginEvent)">{{'login'|i18n}}</a>
    </div>
  </template>
</div>`);
//========================================
// JOIN <ti-session-badge.mjs> ti/com/ti/session/badge/ti-session-badge.mjs
//========================================
Ti.Preload("ti/com/ti/session/badge/ti-session-badge.mjs", TI_PACK_EXPORTS['ti/com/ti/session/badge/ti-session-badge.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/session/badge/_com.json
//========================================
Ti.Preload("ti/com/ti/session/badge/_com.json", {
  "name" : "ti-session-badge",
  "globally" : true,
  "template" : "./ti-session-badge.html",
  "mixins" : ["./ti-session-badge.mjs"]
});
//========================================
// JOIN <ti-sheet-emoji.html> ti/com/ti/sheet/emoji/ti-sheet-emoji.html
//========================================
Ti.Preload("ti/com/ti/sheet/emoji/ti-sheet-emoji.html", `<div  class="ti-sheet-emoji" 
  :class="TopClass"
  :style="TopStyle">
  <!--
    Candidate List
  -->
  <div class="as-list">
    <div
      v-for="li in TheDataSheet"
        class="emoji-item"
        @click.left="myValue=li.value">
        <span>{{li.value}}</span>
    </div>
  </div>
</div>`);
//========================================
// JOIN <ti-sheet-emoji.mjs> ti/com/ti/sheet/emoji/ti-sheet-emoji.mjs
//========================================
Ti.Preload("ti/com/ti/sheet/emoji/ti-sheet-emoji.mjs", TI_PACK_EXPORTS['ti/com/ti/sheet/emoji/ti-sheet-emoji.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/sheet/emoji/_com.json
//========================================
Ti.Preload("ti/com/ti/sheet/emoji/_com.json", {
  "name" : "ti-sheet-emoji",
  "globally" : true,
  "template" : "./ti-sheet-emoji.html",
  "mixins" : ["./ti-sheet-emoji.mjs"]
});
//========================================
// JOIN <ti-slide-bar.html> ti/com/ti/slide/bar/ti-slide-bar.html
//========================================
Ti.Preload("ti/com/ti/slide/bar/ti-slide-bar.html", `<div class="ti-slide-bar" 
  :class="TopClass"
  :style="TopStyle" 
  v-ti-activable
  v-ti-draggable="Draggable">
  <!--Prefix text-->
  <div 
    v-if="isShowPreifx"
      class="as-text at-prefix"
      :style="TextStyle">{{ThePrefixText}}</div>
  <!--
    Bar
  -->
  <div ref="con"
    class="as-con" 
    @click.left="OnClickBar">
    <div class="as-bar" :style="BarStyle">
      <span class="as-marker" :style="BarMarkStyle"></span>
      <span class="as-inner"  :style="BarInnerStyle"></span>
    </div>
    <div class="as-hdl" :style="HandlerStyle" ref="hdl"></div>
  </div>
  <!--Suffix text-->
  <div 
    v-if="isShowSuffix"
      class="as-text at-suffix"
      :style="TextStyle">{{TheSuffixText}}</div>
</div>`);
//========================================
// JOIN <ti-slide-bar.mjs> ti/com/ti/slide/bar/ti-slide-bar.mjs
//========================================
Ti.Preload("ti/com/ti/slide/bar/ti-slide-bar.mjs", TI_PACK_EXPORTS['ti/com/ti/slide/bar/ti-slide-bar.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/slide/bar/_com.json
//========================================
Ti.Preload("ti/com/ti/slide/bar/_com.json", {
  "name" : "ti-slide-bar",
  "globally" : true,
  "template" : "./ti-slide-bar.html",
  "mixins" : ["./ti-slide-bar.mjs"]
});
//========================================
// JOIN <field_display.mjs> ti/com/ti/support/field_display.mjs
//========================================
Ti.Preload("ti/com/ti/support/field_display.mjs", TI_PACK_EXPORTS['ti/com/ti/support/field_display.mjs']);
//========================================
// JOIN <formed_list_methods.mjs> ti/com/ti/support/formed_list_methods.mjs
//========================================
Ti.Preload("ti/com/ti/support/formed_list_methods.mjs", TI_PACK_EXPORTS['ti/com/ti/support/formed_list_methods.mjs']);
//========================================
// JOIN <list_item_mixins.mjs> ti/com/ti/support/list_item_mixins.mjs
//========================================
Ti.Preload("ti/com/ti/support/list_item_mixins.mjs", TI_PACK_EXPORTS['ti/com/ti/support/list_item_mixins.mjs']);
//========================================
// JOIN <list_mixins.mjs> ti/com/ti/support/list_mixins.mjs
//========================================
Ti.Preload("ti/com/ti/support/list_mixins.mjs", TI_PACK_EXPORTS['ti/com/ti/support/list_mixins.mjs']);
//========================================
// JOIN <list_props.mjs> ti/com/ti/support/list_props.mjs
//========================================
Ti.Preload("ti/com/ti/support/list_props.mjs", TI_PACK_EXPORTS['ti/com/ti/support/list_props.mjs']);
//========================================
// JOIN <ti-switcher-props.mjs> ti/com/ti/switcher/ti-switcher-props.mjs
//========================================
Ti.Preload("ti/com/ti/switcher/ti-switcher-props.mjs", TI_PACK_EXPORTS['ti/com/ti/switcher/ti-switcher-props.mjs']);
//========================================
// JOIN <ti-switcher.html> ti/com/ti/switcher/ti-switcher.html
//========================================
Ti.Preload("ti/com/ti/switcher/ti-switcher.html", `<div class="ti-switcher"
  :class="TopClass">
  <!--
    Show Loading
  -->
  <ti-icon
    v-if="loading"
    value="zmdi-settings zmdi-hc-spin"/>
  <!--
    Options
  -->
  <div v-else
    class="switcher-con">
    <ul>
      <li v-for="it in TheItems" 
        :key="it.value"
        :class="it.className"
        @click="OnClickItem(it, $event)"
        @mousedown="OnMouseDown(it)">
        <ti-icon class="it-icon"
          size=".8em"
          v-if="it.icon" 
          :value="it.icon"/>
        <span
          class="it-text">{{it.text|i18n}}</span>
      </li>
    </ul>
  </div>
</div>`);
//========================================
// JOIN <ti-switcher.mjs> ti/com/ti/switcher/ti-switcher.mjs
//========================================
Ti.Preload("ti/com/ti/switcher/ti-switcher.mjs", TI_PACK_EXPORTS['ti/com/ti/switcher/ti-switcher.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/switcher/_com.json
//========================================
Ti.Preload("ti/com/ti/switcher/_com.json", {
  "name" : "ti-switcher",
  "globally" : true,
  "template" : "./ti-switcher.html",
  "props" : "./ti-switcher-props.mjs",
  "mixins" : ["./ti-switcher.mjs"]
});
//========================================
// JOIN <table-cell.html> ti/com/ti/table/com/table-row/com/table-cell/table-cell.html
//========================================
Ti.Preload("ti/com/ti/table/com/table-row/com/table-cell/table-cell.html", `<td class="table-cell"
  :class="TopClass"
  :col-index="index"
  v-ti-activable>
  <div class="cell-wrapper"
    :class="WrapperClass">
    <!--Slot for first column-->
    <slot></slot>
    <!--Fields-->
    <div class="cell-con">
      <component 
        v-for="(it, index) in cellItems"
          :class="'item-'+index"
          :key="it.uniqueKey"
          :is="it.comType"
          v-bind="it.comConf"
          @change="OnItemChanged(it, $event)"/>
    </div>
  </div>
</td>`);
//========================================
// JOIN <table-cell.mjs> ti/com/ti/table/com/table-row/com/table-cell/table-cell.mjs
//========================================
Ti.Preload("ti/com/ti/table/com/table-row/com/table-cell/table-cell.mjs", TI_PACK_EXPORTS['ti/com/ti/table/com/table-row/com/table-cell/table-cell.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/table/com/table-row/com/table-cell/_com.json
//========================================
Ti.Preload("ti/com/ti/table/com/table-row/com/table-cell/_com.json", {
  "name" : "table-cell",
  "globally" : false,
  "template" : "./table-cell.html",
  "methods"  : "@com:ti/support/field_display.mjs",
  "mixins"   : ["./table-cell.mjs"],
  "components" : ["@com:ti/label"]
});
//========================================
// JOIN <table-row.html> ti/com/ti/table/com/table-row/table-row.html
//========================================
Ti.Preload("ti/com/ti/table/com/table-row/table-row.html", `<tr class="table-row"
  :class="TopClass"
  @click.left="OnClickRow"
  @dblclick.left="OnDblClickRow"
  v-ti-activable>
  <!--
    Cells
  -->
  <table-cell v-for="fld in fields"
    :key="fld.index"
    v-bind="fld"
    :row-id="rowId"
    :row-index="index"
    :is-current="isCurrent"
    :is-checked="isChecked"
    :data="data">
    <template v-if="fld.index == 0">
      <div class="table-row-head">
        <!--current actived row indicator-->
        <div class="row-actived-indicator"></div>
        <!-- Indents -->
        <div v-for="n in indent"
            class="row-indent"></div>
        <!--ICON: Handler-->
        <template v-if="icon">
          <ti-icon
            v-if="hasRealIcon"
              class="row-icon row-handler"
              :value="icon"
              @click.native.left.stop="OnClickIcon"/>
          <div v-else
            class="row-icon"></div>
        </template>
        <!--Row Number-->
        <div 
          v-if="hasRowNumber"
            class="row-number">{{RowNumber}}</div>
        <!--ICON: Checker-->
        <ti-icon v-if="checkable"
            class="row-checker"
            :value="theCheckIcon"
            @click.native.left.stop="OnClickChecker"/>
      </div>
    </template>
  </table-cell>
</tr>`);
//========================================
// JOIN <table-row.mjs> ti/com/ti/table/com/table-row/table-row.mjs
//========================================
Ti.Preload("ti/com/ti/table/com/table-row/table-row.mjs", TI_PACK_EXPORTS['ti/com/ti/table/com/table-row/table-row.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/table/com/table-row/_com.json
//========================================
Ti.Preload("ti/com/ti/table/com/table-row/_com.json", {
  "name" : "table-row",
  "globally" : false,
  "template" : "./table-row.html",
  "mixins" : [
    "@com:ti/support/list_item_mixins.mjs",
    "./table-row.mjs"],
  "components" : [
      "./com/table-cell"
    ]
});
//========================================
// JOIN <ti-table-quick-action.mjs> ti/com/ti/table/quick/ti-table-quick-action.mjs
//========================================
Ti.Preload("ti/com/ti/table/quick/ti-table-quick-action.mjs", TI_PACK_EXPORTS['ti/com/ti/table/quick/ti-table-quick-action.mjs']);
//========================================
// JOIN <ti-table-quick-props.mjs> ti/com/ti/table/quick/ti-table-quick-props.mjs
//========================================
Ti.Preload("ti/com/ti/table/quick/ti-table-quick-props.mjs", TI_PACK_EXPORTS['ti/com/ti/table/quick/ti-table-quick-props.mjs']);
//========================================
// JOIN <ti-table-quick.html> ti/com/ti/table/quick/ti-table-quick.html
//========================================
Ti.Preload("ti/com/ti/table/quick/ti-table-quick.html", `<div class="ti-table as-quick is-head-frozen"
  :class="TopClass"
  :style="TopStyle"
  @click="OnClickTop">
  <!--
    Blank
  -->
  <ti-loading 
    v-if="isDataEmpty"
      class="nil-data"
      :class="blankClass"
      v-bind="blankAs"/>
  <!--
    Show thead/tbody
  -->
  <template v-else>
    <!--checker-->
    <div
      v-if="checkable && multi"
        class="as-checker"
        @click.left="OnClickHeadChecker">
        <ti-icon :value="HeadCheckerIcon"/>
    </div>
    <!--
      Table
    -->
    <table ref="table">
      <!--
        Head
      -->
      <thead
        class="table-head">
        <tr>
          <th
            v-for="fld in TableFields"
              :style="fld.headStyle"
              :col-index="fld.index">
            <span class="table-head-cell-text">{{fld.title|i18n}}</span>
          </th>
        </tr>
      </thead>
      <!--
        Body
      -->
      <tbody
        class="table-body">
        <tr
          v-for="row in TableData"
            :key="row.id"
            :index="row.index"
            :class="row.className"
            @click.left="OnClickRow(row, $event)">
            <!-- Begin Cell -->
            <td
              v-for="cell in row.cells"
                :key="cell.index">
                <div class="cell-wrapper">
                  <div 
                    v-if="0 == cell.index"
                      class="table-row-head">
                      <!--Indicator-->
                      <div class="row-actived-indicator"></div>
                      <!--Checker-->
                      <div
                        v-if="checkable"
                          class="row-checker"
                          @click.left.stop="OnClickRowChecker(row, $event)">
                          <i v-if="row.checked" class="fas fa-check-square"></i>
                          <i v-else class="far fa-square"></i>
                      </div>
                      <!--Row number-->
                      <div
                      v-if="row.showNumber"
                        class="row-number">{{row.number}}</div>
                  </div>
                  <div class="cell-con">
                    <!--Begin: Cell display items-->
                    <template
                      v-for="it in cell.items">
                      <!--
                        Icon
                      -->
                      <i
                        v-if="'icon' == it.type"
                          :class="[it.className, it.displayValue.className]"
                          >{{it.displayValue.text||""}}</i>
                      <!--
                        Image
                      -->
                      <img
                        v-else-if="'img' == it.type"
                          :class="it.className"
                          :src="it.displayValue">
                      <!--
                        Text
                      -->
                      <span
                        v-else
                          :class="it.className"
                          >{{it.displayValue}}</span>
                    </template>
                  </div>
                </div>
                <!--End: Cell display items-->
            </td>
            <!-- End Cell -->
        </tr>
      </tbody>
    </table>
  </template>
</div>`);
//========================================
// JOIN <ti-table-quick.mjs> ti/com/ti/table/quick/ti-table-quick.mjs
//========================================
Ti.Preload("ti/com/ti/table/quick/ti-table-quick.mjs", TI_PACK_EXPORTS['ti/com/ti/table/quick/ti-table-quick.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/table/quick/_com.json
//========================================
Ti.Preload("ti/com/ti/table/quick/_com.json", {
  "name" : "ti-table-quick",
  "globally" : true,
  "template" : "./ti-table-quick.html",
  "props" : "./ti-table-quick-props.mjs",
  "methods" : "./ti-table-quick-action.mjs",
  "mixins" : "./ti-table-quick.mjs"
});
//========================================
// JOIN <ti-table-props.mjs> ti/com/ti/table/ti-table-props.mjs
//========================================
Ti.Preload("ti/com/ti/table/ti-table-props.mjs", TI_PACK_EXPORTS['ti/com/ti/table/ti-table-props.mjs']);
//========================================
// JOIN <ti-table-resizes.mjs> ti/com/ti/table/ti-table-resizes.mjs
//========================================
Ti.Preload("ti/com/ti/table/ti-table-resizes.mjs", TI_PACK_EXPORTS['ti/com/ti/table/ti-table-resizes.mjs']);
//========================================
// JOIN <ti-table.html> ti/com/ti/table/ti-table.html
//========================================
Ti.Preload("ti/com/ti/table/ti-table.html", `<div class="ti-table"
  :class="TopClass"
  :style="TopStyle"
  @click="OnClickTop"
  v-ti-activable>
  <!--
    Blank
  -->
  <ti-loading 
    v-if="isDataEmpty"
      class="nil-data"
      :class="blankClass"
      v-bind="blankAs"/>
  <!--
    Show thead/tbody
  -->
  <template v-else>
    <!--checker-->
    <div
      v-if="checkable && multi && isShowHead"
        class="as-checker"
        @click.left="OnClickHeadChecker">
        <ti-icon :value="HeadCheckerIcon"/>
    </div>
    <!--
      Table
    -->
    <table ref="table">
      <!--
        Head
      -->
      <thead v-if="isShowHead"
        class="table-head"
        :style="TableStyle">
        <!--field titles-->
        <tr>
          <th
            v-for="fld in TableFields"
              :style="fld.headStyle"
              :col-index="fld.index">
            <span class="table-head-cell-text">{{fld.title|i18n}}</span>
          </th>
        </tr>
      </thead>
      <!--
        Body
      -->
      <tbody
        class="table-body"
        :style="TableStyle">
        <table-row
          v-for="row in myData"
            :key="row.id"
            :row-id="row.id"
            :index="row.index"
            :icon="row.icon"
            :indent="row.indent"
            :data="row.rawData"
            :item="row.item"
            :row-number-base="rowNumberBase"

            :checkable="row.checkable"
            :selectable="row.selectable"
            :openable="row.openable"

            :fields="TableFields"
            :current-id="theCurrentId"
            :checked-ids="theCheckedIds"
            :changed-id="changedId"

            @icon="$notify('icon', $event)"
            @checker="OnRowCheckerClick"
            @select="OnRowSelect"
            @open="OnRowOpen"/>
        </tbody>
    </table>
  </template>
</div>`);
//========================================
// JOIN <ti-table.mjs> ti/com/ti/table/ti-table.mjs
//========================================
Ti.Preload("ti/com/ti/table/ti-table.mjs", TI_PACK_EXPORTS['ti/com/ti/table/ti-table.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/table/_com.json
//========================================
Ti.Preload("ti/com/ti/table/_com.json", {
  "name" : "ti-table",
  "globally" : true,
  "template" : "./ti-table.html",
  "props" : [
    "@com:ti/support/list_props.mjs",
    "./ti-table-props.mjs"
  ],
  "methods" : "@com:ti/support/field_display.mjs",
  "mixins" : [
    "@com:ti/support/list_mixins.mjs",
    "./ti-table.mjs"
  ],
  "components" : [
    "./com/table-row"
  ]
});
//========================================
// JOIN <tags-item.html> ti/com/ti/tags/com/tags-item/tags-item.html
//========================================
Ti.Preload("ti/com/ti/tags/com/tags-item/tags-item.html", `<div class="ti-tags-item" 
  :class="topClass"
  @mouseenter="mouseEnter='top'"
  @mouseleave="mouseEnter=null"
  @click.left="onClickTop">
  <!--
    Deleter
  -->
  <ti-icon v-if="removable"
    class="as-del"
    :value="removeIcon"
    @mouseenter.native="mouseEnter='del'"
    @mouseleave.native="mouseEnter='top'"
    @click.native.stop="onClickDel"/>
  <!--
    Icon
  -->
  <ti-icon v-if="icon" 
    class="as-icon"
    :value="icon"/>
  <!--
    Text
  -->
  <template v-if="text">
    <a v-if="href"
      class="as-text"
      @click.prevent
      :href="href"
      :class="textClass">{{text|i18n}}</a>
    <span v-else
      class="as-text"
      :class="textClass">{{text|i18n}}</span>
  </template>
  <!--
    Status Icon
  -->
  <ti-icon v-if="hasOptions"
    class="as-status"
    :value="theStatusIcon"/>
  <!--
    Drop & Mask
  -->
  <template v-if="'extended' == status">
    <div class="as-mask" @click.stop="closeDrop"></div>
    <div class="as-drop" ref="drop"
      @click.stop>
      <ti-icon-text v-for="it in theOptions"
        :key="it.index"
        v-bind="it"
        @click.native="onClickOption(it)"/>
    </div>
  </template>
</div>`);
//========================================
// JOIN <tags-item.mjs> ti/com/ti/tags/com/tags-item/tags-item.mjs
//========================================
Ti.Preload("ti/com/ti/tags/com/tags-item/tags-item.mjs", TI_PACK_EXPORTS['ti/com/ti/tags/com/tags-item/tags-item.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/tags/com/tags-item/_com.json
//========================================
Ti.Preload("ti/com/ti/tags/com/tags-item/_com.json", {
  "name" : "tags-item",
  "globally" : false,
  "template" : "./tags-item.html",
  "mixins" : ["./tags-item.mjs"],
  "components" : ["@com:ti/icon/text"]
});
//========================================
// JOIN <ti-tags.html> ti/com/ti/tags/ti-tags.html
//========================================
Ti.Preload("ti/com/ti/tags/ti-tags.html", `<div class="ti-tags"
  :class="TopClass">
  <!--
    Loop piece
  -->
  <tags-item v-for="tag in myTags"
    :key="tag.index"
    v-bind="tag"
    :cancel-bubble="cancelItemBubble"
    :option-default-icon="optionDefaultIcon"
    :removable="removable"
    :remove-icon="removeIcon"
    :status-icons="statusIcons"
    @change="OnItemChanged"
    @remove="OnItemRemoved"
    @fire="OnItemFired"/>
</div>`);
//========================================
// JOIN <ti-tags.mjs> ti/com/ti/tags/ti-tags.mjs
//========================================
Ti.Preload("ti/com/ti/tags/ti-tags.mjs", TI_PACK_EXPORTS['ti/com/ti/tags/ti-tags.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/tags/_com.json
//========================================
Ti.Preload("ti/com/ti/tags/_com.json", {
  "name" : "ti-tags",
  "globally" : true,
  "template" : "./ti-tags.html",
  "mixins" : ["./ti-tags.mjs"],
  "components" : [
    "./com/tags-item"
  ]
});
//========================================
// JOIN <ti-text-json.html> ti/com/ti/text/json/ti-text-json.html
//========================================
Ti.Preload("ti/com/ti/text/json/ti-text-json.html", `<ti-gui
  class="ti-text-json"
  :class="className"
  keep-shown-to="ti-text-json-editor"
  :layout="TheLayout"
  :schema="TheSchema"
  :can-loading="true"
  @change="OnChange"/>`);
//========================================
// JOIN <ti-text-json.mjs> ti/com/ti/text/json/ti-text-json.mjs
//========================================
Ti.Preload("ti/com/ti/text/json/ti-text-json.mjs", TI_PACK_EXPORTS['ti/com/ti/text/json/ti-text-json.mjs']);
//========================================
// JOIN <json-tree-item.html> ti/com/ti/text/json/tree/item/json-tree-item.html
//========================================
Ti.Preload("ti/com/ti/text/json/tree/item/json-tree-item.html", `<div class="json-value"
  :class="TopClass"
  v-ti-activable>
  <!--
  //  - Label   : Readonly
  -->
  <span v-if="isLabel"
    class="as-editing as-label">{{theLabelDisplayText}}</span>
  <!--
  //  - Boolean : Editable boolean value
  -->
  <ti-toggle v-else-if="'Boolean' == valueType"
    class="as-editing"
    :value="value"
    @change="$notify('change', $event)"/>
  <!--
  //  - Integer : Editable integer value
  //  - Float   : Editable float value
  //  - String  : Editable string value
  //  - Nil     : Edtiable any value
  -->
  <ti-label v-else
    class="as-editing is-nowrap ti-fill-parent"
    :value="value"
    :class-name="theValueClassName"
    :format="theValueFormat"
    :editable="true"
    @change="$notify('change', $event)"/>
  <!--
    Action Menu
  -->
  <ti-actionbar
    v-if="showActions"
      class="as-actions"
      :items="theActionMenuData"
      :status="theActionMenuStatus"/>
</div>`);
//========================================
// JOIN <json-tree-item.mjs> ti/com/ti/text/json/tree/item/json-tree-item.mjs
//========================================
Ti.Preload("ti/com/ti/text/json/tree/item/json-tree-item.mjs", TI_PACK_EXPORTS['ti/com/ti/text/json/tree/item/json-tree-item.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/text/json/tree/item/_com.json
//========================================
Ti.Preload("ti/com/ti/text/json/tree/item/_com.json", {
  "name" : "ti-text-json-tree-item",
  "globally" : true,
  "template" : "./json-tree-item.html",
  "mixins" : ["./json-tree-item.mjs"]
});
//========================================
// JOIN <ti-text-json-tree.html> ti/com/ti/text/json/tree/ti-text-json-tree.html
//========================================
Ti.Preload("ti/com/ti/text/json/tree/ti-text-json-tree.html", `<ti-tree class="ti-text-json-tree"
  title="i18n:name"
  :main-width="mainWidth"
  :class="className"
  :border="border"
  :keep-open-by="keepOpenBy"
  :multi="true"
  :data="myTreeRoot"
  :display="TreeDisplay"
  :auto-open="autoOpen"
  :current-id="myTreeCurrentPathId"
  :default-open-depth="2"
  :fields="TreeFields"
  @select
  @node:item:change="OnNodeItemChange"
  @opened-status:changed="OnOpenedStatusChanged"/>`);
//========================================
// JOIN <ti-text-json-tree.mjs> ti/com/ti/text/json/tree/ti-text-json-tree.mjs
//========================================
Ti.Preload("ti/com/ti/text/json/tree/ti-text-json-tree.mjs", TI_PACK_EXPORTS['ti/com/ti/text/json/tree/ti-text-json-tree.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/text/json/tree/_com.json
//========================================
Ti.Preload("ti/com/ti/text/json/tree/_com.json", {
  "name" : "ti-text-json-tree",
  "globally" : true,
  "template" : "./ti-text-json-tree.html",
  "mixins" : ["./ti-text-json-tree.mjs"],
  "components" : [
    "@com:ti/tree",
    "@com:ti/text/json/tree/item"
  ]
});
//========================================
// JOIN <_com.json> ti/com/ti/text/json/_com.json
//========================================
Ti.Preload("ti/com/ti/text/json/_com.json", {
  "name" : "ti-text-json",
  "globally" : true,
  "template" : "./ti-text-json.html",
  "mixins" : ["./ti-text-json.mjs"],
  "components" : [
    "@com:ti/gui",
    "@com:ti/text/raw",
    "@com:ti/toggle",
    "@com:ti/text/json/tree"
  ]
});
//========================================
// JOIN <markdown-preview.html> ti/com/ti/text/markdown/preview/markdown-preview.html
//========================================
Ti.Preload("ti/com/ti/text/markdown/preview/markdown-preview.html", `<div class="ti-markdown-preview"
  :class="TopClass">
  <article 
    :class="ThemeClass"
    v-html="myHtml"></article>
  <!--pre>{{myHtml}}</pre-->
</div>`);
//========================================
// JOIN <markdown-preview.mjs> ti/com/ti/text/markdown/preview/markdown-preview.mjs
//========================================
Ti.Preload("ti/com/ti/text/markdown/preview/markdown-preview.mjs", TI_PACK_EXPORTS['ti/com/ti/text/markdown/preview/markdown-preview.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/text/markdown/preview/_com.json
//========================================
Ti.Preload("ti/com/ti/text/markdown/preview/_com.json", {
  "name" : "ti-text-markdown-preview",
  "globally" : true,
  "template" : "./markdown-preview.html",
  "mixins" : ["./markdown-preview.mjs"],
  "deps": [
    "@lib:code2a/cheap-markdown.mjs"
  ]
});
//========================================
// JOIN <ti-markdown-richeditor-delegate-methods.mjs> ti/com/ti/text/markdown/richeditor/ti-markdown-richeditor-delegate-methods.mjs
//========================================
Ti.Preload("ti/com/ti/text/markdown/richeditor/ti-markdown-richeditor-delegate-methods.mjs", TI_PACK_EXPORTS['ti/com/ti/text/markdown/richeditor/ti-markdown-richeditor-delegate-methods.mjs']);
//========================================
// JOIN <ti-markdown-richeditor-props.mjs> ti/com/ti/text/markdown/richeditor/ti-markdown-richeditor-props.mjs
//========================================
Ti.Preload("ti/com/ti/text/markdown/richeditor/ti-markdown-richeditor-props.mjs", TI_PACK_EXPORTS['ti/com/ti/text/markdown/richeditor/ti-markdown-richeditor-props.mjs']);
//========================================
// JOIN <ti-markdown-richeditor.html> ti/com/ti/text/markdown/richeditor/ti-markdown-richeditor.html
//========================================
Ti.Preload("ti/com/ti/text/markdown/richeditor/ti-markdown-richeditor.html", `<div class="ti-markdown-richeditor"
  :class="TopClass"
  v-ti-activable>
  <!--
    Toolbar
  -->
  <ti-actionbar 
  v-if="hasToolbar"
    class="as-toolbar"
    :items="ToolbarMenuData" 
    :align="toolbarAlign"
    :status="myToolbarStatus"
    @change="OnToolbarChange"/>
  <!--
    Stage
  -->
  <div ref="stage"
    class="as-stage"
    spellcheck="false"
    :class="ThemeClass"></div>
  <!--
    Show loading
  -->
  <TiLoading
    v-if="isContentLoading"
      class="as-nil-mask as-big-mask"
      v-bind="loadingAs"/>
  <!--
    Show blank
  -->
  <component
    v-else-if="isContentNil"
      :style="BlankComStyle"
      :is="blankAs.comType"
      v-bind="blankAs.comConf"/>
</div>`);
//========================================
// JOIN <ti-markdown-richeditor.mjs> ti/com/ti/text/markdown/richeditor/ti-markdown-richeditor.mjs
//========================================
Ti.Preload("ti/com/ti/text/markdown/richeditor/ti-markdown-richeditor.mjs", TI_PACK_EXPORTS['ti/com/ti/text/markdown/richeditor/ti-markdown-richeditor.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/text/markdown/richeditor/_com.json
//========================================
Ti.Preload("ti/com/ti/text/markdown/richeditor/_com.json", {
  "name" : "ti-text-markdown-richeditor",
  "globally" : true,
  "i18n" : "@i18n:ti-text-editor",
  "css" : "@deps:highlight/default.css",
  "template" : "./ti-markdown-richeditor.html",
  "props": "./ti-markdown-richeditor-props.mjs",
  "methods": "./ti-markdown-richeditor-delegate-methods.mjs",
  "mixins" : ["./ti-markdown-richeditor.mjs"],
  "components" : [
    "@com:wn/adaptlist"
  ],
  "deps" : [
    "@lib:code2a/cheap-markdown.mjs",
    "@deps:quill/1.3.6/quill.js",
    "@deps:highlight/highlight.js"
  ]
});
//========================================
// JOIN <br.blot.mjs> ti/com/ti/text/markdown/richeditor2/blot/br.blot.mjs
//========================================
Ti.Preload("ti/com/ti/text/markdown/richeditor2/blot/br.blot.mjs", TI_PACK_EXPORTS['ti/com/ti/text/markdown/richeditor2/blot/br.blot.mjs']);
//========================================
// JOIN <md-actionbar.mjs> ti/com/ti/text/markdown/richeditor2/md-actionbar.mjs
//========================================
Ti.Preload("ti/com/ti/text/markdown/richeditor2/md-actionbar.mjs", TI_PACK_EXPORTS['ti/com/ti/text/markdown/richeditor2/md-actionbar.mjs']);
//========================================
// JOIN <md-quill.mjs> ti/com/ti/text/markdown/richeditor2/md-quill.mjs
//========================================
Ti.Preload("ti/com/ti/text/markdown/richeditor2/md-quill.mjs", TI_PACK_EXPORTS['ti/com/ti/text/markdown/richeditor2/md-quill.mjs']);
//========================================
// JOIN <md-richeditor-delegates.mjs> ti/com/ti/text/markdown/richeditor2/md-richeditor-delegates.mjs
//========================================
Ti.Preload("ti/com/ti/text/markdown/richeditor2/md-richeditor-delegates.mjs", TI_PACK_EXPORTS['ti/com/ti/text/markdown/richeditor2/md-richeditor-delegates.mjs']);
//========================================
// JOIN <md-richeditor-props.mjs> ti/com/ti/text/markdown/richeditor2/md-richeditor-props.mjs
//========================================
Ti.Preload("ti/com/ti/text/markdown/richeditor2/md-richeditor-props.mjs", TI_PACK_EXPORTS['ti/com/ti/text/markdown/richeditor2/md-richeditor-props.mjs']);
//========================================
// JOIN <md-richeditor.html> ti/com/ti/text/markdown/richeditor2/md-richeditor.html
//========================================
Ti.Preload("ti/com/ti/text/markdown/richeditor2/md-richeditor.html", `<div class="ti-markdown-richeditor2"
  :class="TopClass"
  v-ti-activable>
  <!--
    Toolbar
  -->
  <ti-actionbar 
  v-if="hasToolbar"
    class="as-toolbar"
    :items="ToolbarMenuData" 
    :align="toolbarAlign"
    :status="myToolbarStatus"
    @change="OnToolbarChange"/>
  <!--
    Stage
  -->
  <div ref="stage" class="as-stage">
    <!--
      Editor
    -->
    <div ref="editing"
      class="as-editing"
      spellcheck="false"
      :class="ThemeClass"></div>
    <!--
      Side
    -->
    <div ref="aside"
      class="as-aside"
      @dblclick.left="OnClickPre">abc<br><pre>{{myDelta}}</pre></div>
  </div>
  <!--
    Show loading
  -->
  <TiLoading
    v-if="isContentLoading"
      class="as-nil-mask as-big-mask"
      v-bind="loadingAs"/>
  <!--
    Show blank
  -->
  <component
    v-else-if="isContentNil"
      :style="BlankComStyle"
      :is="blankAs.comType"
      v-bind="blankAs.comConf"/>
</div>`);
//========================================
// JOIN <md-richeditor.mjs> ti/com/ti/text/markdown/richeditor2/md-richeditor.mjs
//========================================
Ti.Preload("ti/com/ti/text/markdown/richeditor2/md-richeditor.mjs", TI_PACK_EXPORTS['ti/com/ti/text/markdown/richeditor2/md-richeditor.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/text/markdown/richeditor2/_com.json
//========================================
Ti.Preload("ti/com/ti/text/markdown/richeditor2/_com.json", {
  "name" : "ti-text-markdown-richeditor2",
  "globally" : true,
  "i18n" : "@i18n:ti-text-editor",
  "css" : "@deps:highlight/default.css",
  "template" : "./md-richeditor.html",
  "props": "./md-richeditor-props.mjs",
  "methods": "./md-richeditor-delegates.mjs",
  "mixins" : [
    "./md-richeditor.mjs",
    "./md-actionbar.mjs",
    "./md-quill.mjs"
  ],
  "components" : [
    "@com:wn/adaptlist"
  ],
  "deps" : [
    "@lib:code2a/cheap-markdown.mjs",
    "@deps:quill/1.3.6/quill.js",
    "@deps:highlight/highlight.js"
  ]
});
//========================================
// JOIN <ti-text-raw.html> ti/com/ti/text/raw/ti-text-raw.html
//========================================
Ti.Preload("ti/com/ti/text/raw/ti-text-raw.html", `<div class="ti-text-raw"
  :class="TopClass"
  v-ti-activable>
  <!--
    Header
  -->
  <div
    v-if="isShowHead"
      class="as-head">
      <ti-icon :value="icon"/>
      <span>{{title}}</span>
  </div>
  <!--
    Main
  -->
  <div class="as-main">
    <textarea ref="text" 
      spellcheck="false"
      :placeholder="placeholder | i18n"
      :value="myContent"
      :readonly="isReadonly"
      @compositionstart="OnInputCompositionStart"
      @compositionend="OnInputCompositionEnd"
      @input="OnInputing"
      @change="OnTextChanged"></textarea>
  </div>
</div>`);
//========================================
// JOIN <ti-text-raw.mjs> ti/com/ti/text/raw/ti-text-raw.mjs
//========================================
Ti.Preload("ti/com/ti/text/raw/ti-text-raw.mjs", TI_PACK_EXPORTS['ti/com/ti/text/raw/ti-text-raw.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/text/raw/_com.json
//========================================
Ti.Preload("ti/com/ti/text/raw/_com.json", {
  "name" : "ti-text-raw",
  "globally" : true,
  "template" : "./ti-text-raw.html",
  "mixins" : ["./ti-text-raw.mjs"]
});
//========================================
// JOIN <codeblock.mjs> ti/com/ti/text/rich/tinymce/plugin/codeblock.mjs
//========================================
Ti.Preload("ti/com/ti/text/rich/tinymce/plugin/codeblock.mjs", TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/codeblock.mjs']);
//========================================
// JOIN <preview.mjs> ti/com/ti/text/rich/tinymce/plugin/preview.mjs
//========================================
Ti.Preload("ti/com/ti/text/rich/tinymce/plugin/preview.mjs", TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/preview.mjs']);
//========================================
// JOIN <wn-image.mjs> ti/com/ti/text/rich/tinymce/plugin/wn-image.mjs
//========================================
Ti.Preload("ti/com/ti/text/rich/tinymce/plugin/wn-image.mjs", TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/wn-image.mjs']);
//========================================
// JOIN <rich-tinymce-props.mjs> ti/com/ti/text/rich/tinymce/rich-tinymce-props.mjs
//========================================
Ti.Preload("ti/com/ti/text/rich/tinymce/rich-tinymce-props.mjs", TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/rich-tinymce-props.mjs']);
//========================================
// JOIN <rich-tinymce.html> ti/com/ti/text/rich/tinymce/rich-tinymce.html
//========================================
Ti.Preload("ti/com/ti/text/rich/tinymce/rich-tinymce.html", `<div class="ti-text-rich-tinymce"
  :class="TopClass"
  v-ti-activable>
  <!--
    Editor
  -->
  <div class="as-editor">
    <textarea ref="editor"></textarea>
  </div>
  <!--
    Show loading
  -->
  <TiLoading
    v-if="isContentLoading"
      class="as-nil-mask as-big-mask"
      :style="BlankComStyle"
      v-bind="loadingAs"/>
  <!--
    Show blank
  -->
  <component
    v-else-if="isContentNil"
      :style="BlankComStyle"
      :is="blankAs.comType"
      v-bind="blankAs.comConf"/>
</div>`);
//========================================
// JOIN <rich-tinymce.mjs> ti/com/ti/text/rich/tinymce/rich-tinymce.mjs
//========================================
Ti.Preload("ti/com/ti/text/rich/tinymce/rich-tinymce.mjs", TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/rich-tinymce.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/text/rich/tinymce/_com.json
//========================================
Ti.Preload("ti/com/ti/text/rich/tinymce/_com.json", {
  "name" : "ti-text-rich-tinymce",
  "globally" : true,
  "template" : "./rich-tinymce.html",
  "props" : "./rich-tinymce-props.mjs",
  "mixins" : "./rich-tinymce.mjs",
  "deps" : [
    "@deps:tinymce/5.6.2/tinymce.min.js"
  ]
});
//========================================
// JOIN <ti-time.html> ti/com/ti/time/ti-time.html
//========================================
Ti.Preload("ti/com/ti/time/ti-time.html", `<div class="ti-col-data as-time" 
  :class="topClass" 
  :style="topStyle">
  <ti-list v-for="list in theListGroup"
    :key="list.key"
    :data="list.data"
    :display="'text'"
    :current-id="list.currentId"
    :cancelable="false"
    @select="onListSelected(list.key, $event)"/>
</div>`);
//========================================
// JOIN <ti-time.mjs> ti/com/ti/time/ti-time.mjs
//========================================
Ti.Preload("ti/com/ti/time/ti-time.mjs", TI_PACK_EXPORTS['ti/com/ti/time/ti-time.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/time/_com.json
//========================================
Ti.Preload("ti/com/ti/time/_com.json", {
  "name" : "ti-time",
  "globally" : true,
  "template" : "./ti-time.html",
  "mixins" : ["./ti-time.mjs"],
  "components" : ["@com:ti/list"]
});
//========================================
// JOIN <ti-toggle.html> ti/com/ti/toggle/ti-toggle.html
//========================================
Ti.Preload("ti/com/ti/toggle/ti-toggle.html", `<div class="ti-toggle"
  :class="topClass">
  <aside @click.left="onClick"><b></b></aside>
</div>`);
//========================================
// JOIN <ti-toggle.mjs> ti/com/ti/toggle/ti-toggle.mjs
//========================================
Ti.Preload("ti/com/ti/toggle/ti-toggle.mjs", TI_PACK_EXPORTS['ti/com/ti/toggle/ti-toggle.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/toggle/_com.json
//========================================
Ti.Preload("ti/com/ti/toggle/_com.json", {
  "name" : "ti-toggle",
  "globally" : true,
  "template" : "./ti-toggle.html",
  "mixins" : ["./ti-toggle.mjs"]
});
//========================================
// JOIN <ti-transfer-props.mjs> ti/com/ti/transfer/ti-transfer-props.mjs
//========================================
Ti.Preload("ti/com/ti/transfer/ti-transfer-props.mjs", TI_PACK_EXPORTS['ti/com/ti/transfer/ti-transfer-props.mjs']);
//========================================
// JOIN <ti-transfer.html> ti/com/ti/transfer/ti-transfer.html
//========================================
Ti.Preload("ti/com/ti/transfer/ti-transfer.html", `<div class="ti-transfer"
  :class="TopClass"
  :style="TopStyle">
  <!--=========================================
    Left: Candidates
  -->
  <div class="as-box as-can-list">
    <!--
      Head
    -->
    <div class="as-box-head">
      <div class="as-list-checker"
        @click.left="OnClickHeadChecker(can)">
        <ti-icon :value="GetHeadCheckerIcon(can)"/>
      </div>
      <!--Title-->
      <div class="as-title">{{canTitle|i18n}}</div>
      <!--Filter-->
      <div v-if="filter"
        class="as-filter">
          <component 
            :is="fltComType"
            v-bind="FilterComConf"
            :value="myFilterValue"
            @change="OnFilterChanged"
            /></div>
    </div>
    <!--
      component
    -->
    <div class="as-box-list">
      <component :is="CanListComType"
        class="as-box-main ti-fill-parent"
        v-bind="CanListComConf"
        @select="OnCanListSelected"/>
    </div>
    <!--
      Foot
    -->
    <div class="as-box-foot">
      <span>{{'total-count'|i18n({nb:can.data.length})}}</span>
    </div>
  </div>
  <!--=========================================
    Buttons
  -->
  <div class="as-buttons">
    <!--Add-->
    <div class="as-btn is-add"
      @click.left="canListToSel">
      <ti-icon :value="assignButtons.add"/>
    </div>
    <!--Remove-->
    <div class="as-btn is-remove"
      @click.left="selListToCan">
      <ti-icon :value="assignButtons.remove"/>
    </div>
  </div>
  <!--=========================================
    Right: Checked
  -->
  <div class="as-box as-sel-list">
    <!--
      Head
    -->
    <div class="as-box-head">
      <div class="as-list-checker"
        @click.left="OnClickHeadChecker(sel)">
        <ti-icon :value="GetHeadCheckerIcon(sel)"/>
      </div>
      <div class="as-title">{{selTitle|i18n}}</div>
      <div class="as-actions">
        <ti-actionbar v-bind="SelActions"/>
      </div>
    </div>
    <!--
      component
    -->
    <div class="as-box-list">
      <component :is="SelListComType"
        class="as-box-main ti-fill-parent"
        v-bind="SelListComConf"
        @select="OnSelListSelected"/>
    </div>
    <!--
      Foot
    -->
    <div class="as-box-foot">
      <span>{{'total-count'|i18n({nb:sel.data.length})}}</span>
    </div>
  </div>
</div>`);
//========================================
// JOIN <ti-transfer.mjs> ti/com/ti/transfer/ti-transfer.mjs
//========================================
Ti.Preload("ti/com/ti/transfer/ti-transfer.mjs", TI_PACK_EXPORTS['ti/com/ti/transfer/ti-transfer.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/transfer/_com.json
//========================================
Ti.Preload("ti/com/ti/transfer/_com.json", {
  "name" : "ti-transfer",
  "globally" : true,
  "template" : "./ti-transfer.html",
  "props" : "./ti-transfer-props.mjs",
  "mixins" : ["./ti-transfer.mjs"]
});
//========================================
// JOIN <ti-tree.html> ti/com/ti/tree/ti-tree.html
//========================================
Ti.Preload("ti/com/ti/tree/ti-tree.html", `<ti-table
  class="ti-tree"
  :class="TopClass"
  id-by="id"
  icon-by="icon"
  indent-by="indent"
  raw-data-by="rawData"
  :fields="TableFields"
  :data="myTreeTableData"
  :changed-id="changedId"
  :current-id="currentId"
  :checked-ids="checkedIds"
  :multi="multi"

  :row-checkable="isNodeCheckable"
  :row-selectable="isNodeSelectable"
  :row-cancelable="isNodeCancelable"
  :row-openable="isNodeOpenable"
  :row-hoverable="isNodeHoverable"

  :checkable="checkable"
  :selectable="selectable"
  :cancelable="cancelable"
  :openable="openable"
  :hoverable="hoverable"

  :puppet-mode="puppetMode"
  :width="width"
  :height="height"
  :head="TableHead"
  :border="border"
  :blank-as="blankAs"
  :auto-scroll-into-view="autoScrollIntoView"

  :on-init="OnTableInit"

  @icon="OnRowIconClick"
  @open="OnRowOpen"
  @select="OnRowSelect"
  @cell:item:change="OnCellItemChange"/>
  `);
//========================================
// JOIN <ti-tree.mjs> ti/com/ti/tree/ti-tree.mjs
//========================================
Ti.Preload("ti/com/ti/tree/ti-tree.mjs", TI_PACK_EXPORTS['ti/com/ti/tree/ti-tree.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/tree/_com.json
//========================================
Ti.Preload("ti/com/ti/tree/_com.json", {
  "name" : "ti-tree",
  "globally" : true,
  "template" : "./ti-tree.html",
  "mixins" : ["./ti-tree.mjs"],
  "components" : [
    "@com:ti/table"]
});
//========================================
// JOIN <ti-upload-file.html> ti/com/ti/upload/file/ti-upload-file.html
//========================================
Ti.Preload("ti/com/ti/upload/file/ti-upload-file.html", `<div class="ti-upload-file full-field"
  :class="TopClass">
  <!--
    Hidden input file to choose files
  -->
  <input 
    type="file" 
    ref="file" 
    class="ti-hide"
    @change.stop.seft="OnSelectLocalFilesToUpload">
  <!--
    Major preview zone
  -->
  <div ref="thumb"
    class="thumb-con"
    :style="ThumbStyle"
    @click="OnClickToEdit"
    v-drop-files.mask="OnDropFiles">
    <!--
      Preview
    -->
    <ti-obj-thumb 
      :preview="PreviewIcon"
      :progress="progress"
      :show-footer="false"/>
    <!--
      Remove
    -->
    <div ref="actions"
      v-if="isShowRemoveIcon"
        class="thumb-actions"
        :style="ActionsStyle">
        <!--remove-->
        <div class="thumb-opt as-del"
          @click.left.stop="OnRemove">
          <ti-icon value="zmdi-delete"/>
          <span class="it-text">{{'clear'|i18n}}</span>
        </div>
        <!--open-->
        <div class="thumb-opt as-open"
          @click.left.stop="OnOpen">
          <ti-icon value="zmdi-open-in-new"/>
          <span class="it-text">{{'open'|i18n}}</span>
        </div>
    </div>
    <!--//////-->
  </div>
</div>`);
//========================================
// JOIN <ti-upload-file.mjs> ti/com/ti/upload/file/ti-upload-file.mjs
//========================================
Ti.Preload("ti/com/ti/upload/file/ti-upload-file.mjs", TI_PACK_EXPORTS['ti/com/ti/upload/file/ti-upload-file.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/upload/file/_com.json
//========================================
Ti.Preload("ti/com/ti/upload/file/_com.json", {
  "name" : "ti-upload-file",
  "globally" : true,
  "template" : "./ti-upload-file.html",
  "mixins" : ["./ti-upload-file.mjs"]
});
//========================================
// JOIN <wall-tile.html> ti/com/ti/wall/com/wall-tile/wall-tile.html
//========================================
Ti.Preload("ti/com/ti/wall/com/wall-tile/wall-tile.html", `<div class="wall-tile"
  :class="TopClass"
  :style="TopStyle">
  <div v-if="myCom"
    class="tile-con"
    @click.left="OnClickRow"
    @dblclick.left="OnDblClickRow"
    v-ti-activable>
    <component   
      :is="myCom.comType" 
      v-bind="myCom.comConf"/>
  </div>
</div>`);
//========================================
// JOIN <wall-tile.mjs> ti/com/ti/wall/com/wall-tile/wall-tile.mjs
//========================================
Ti.Preload("ti/com/ti/wall/com/wall-tile/wall-tile.mjs", TI_PACK_EXPORTS['ti/com/ti/wall/com/wall-tile/wall-tile.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/wall/com/wall-tile/_com.json
//========================================
Ti.Preload("ti/com/ti/wall/com/wall-tile/_com.json", {
  "name" : "wall-tile",
  "globally" : false,
  "template" : "./wall-tile.html",
  "methods"  : "@com:ti/support/field_display.mjs",
  "mixins" : [
    "@com:ti/support/list_item_mixins.mjs",
    "./wall-tile.mjs"]
});
//========================================
// JOIN <ti-wall.html> ti/com/ti/wall/ti-wall.html
//========================================
Ti.Preload("ti/com/ti/wall/ti-wall.html", `<div class="ti-wall" 
  :class="TopClass"
  @click="OnClickTop"
  v-ti-activable>
  <!--
    Blank
  -->
  <ti-loading 
    v-if="isDataEmpty"
      class="nil-data"
      :class="blankClass"
      v-bind="blankAs"/>
  <!--
    Show tiles
  -->
  <template v-else>
    <!--tiles-->
    <wall-tile
      v-for="row in TheData"
        :key="row.id"
        :row-id="row.id"
        :index="row.index"
        :display="ItemDisplay"
        :data="row.rawData"
        :current-id="theCurrentId"
        :checked-ids="theCheckedIds"
        :changed-id="changedId"
        :checkable="checkable"
        :selectable="selectable"
        :openable="openable"
        :class-name="itemClassName"
        :width="itemWidth"
        :height="itemHeight"
        @select="OnRowSelect"
        @open="OnRowOpen"/>
    <!--Blank Tile-->
    <div v-for="bc in BlankCols"
      class="wall-tile"
      :style="bc">
    </div>
  </template>
</div>`);
//========================================
// JOIN <ti-wall.mjs> ti/com/ti/wall/ti-wall.mjs
//========================================
Ti.Preload("ti/com/ti/wall/ti-wall.mjs", TI_PACK_EXPORTS['ti/com/ti/wall/ti-wall.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/wall/_com.json
//========================================
Ti.Preload("ti/com/ti/wall/_com.json", {
  "name" : "ti-wall",
  "globally" : true,
  "template" : "./ti-wall.html",
  "props" : "@com:ti/support/list_props.mjs",
  "methods" : "@com:ti/support/field_display.mjs",
  "mixins" : [
    "@com:ti/support/list_mixins.mjs",
    "./ti-wall.mjs"
  ],
  "components" : [
    "./com/wall-tile",
    "@com:ti/label"
  ]
});
//========================================
// JOIN <wizard-step.html> ti/com/ti/wizard/com/wizard-step/wizard-step.html
//========================================
Ti.Preload("ti/com/ti/wizard/com/wizard-step/wizard-step.html", `<component 
  class="ti-fill-parent"
  :is="comType"
  v-bind="comConf"
  @change="OnChange"/>`);
//========================================
// JOIN <wizard-step.mjs> ti/com/ti/wizard/com/wizard-step/wizard-step.mjs
//========================================
Ti.Preload("ti/com/ti/wizard/com/wizard-step/wizard-step.mjs", TI_PACK_EXPORTS['ti/com/ti/wizard/com/wizard-step/wizard-step.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/wizard/com/wizard-step/_com.json
//========================================
Ti.Preload("ti/com/ti/wizard/com/wizard-step/_com.json", {
  "name" : "wizard-step",
  "globally" : true,
  "template" : "./wizard-step.html",
  "mixins" : ["./wizard-step.mjs"]
});
//========================================
// JOIN <ti-wizard.html> ti/com/ti/wizard/ti-wizard.html
//========================================
Ti.Preload("ti/com/ti/wizard/ti-wizard.html", `<div class="ti-wizard ti-fill-parent"
  :class="TopClass"><div class="wizard-con">
  <!--
    Header Indicators
  -->
  <div class="as-head">
    <!--Title-->
    <div
      v-if="TheTitle" 
        class="as-title">{{TheTitle | i18n}}</div>
    <!--Step indicators-->
    <ul>
      <li v-for="(step, index) in StepHeads"
        :key="step.stepKey"
        :class="step.className"
        @click.left="OnClickHeadItem(index, step)">
        <span class="as-indicator">
          <span class="as-line at-l"></span>
          <span class="as-dot">{{index+1}}</span>
          <span class="as-line at-r"></span>
        </span>
        <span class="as-text">{{step.title | i18n}}</span>
      </li>
    </ul>
  </div>
  <!--
    Current Step Component
  -->
  <div class="as-main">
    <WizardStep 
      v-bind="CurrentStep"
      @data:change="OnDataChange"
      @step:change="OnStepChange"
      @change:title="OnTitleChange"/>
  </div>
  <!--
    Footer Default Buttons
  -->
  <div v-if="BtnPrev || BtnNext"
    class="as-foot">
      <!--
        Btn: Prev
      -->
      <div
        v-if="BtnPrev" 
          class="as-btn is-prev"
          :class="BtnPrev.className"
          @click="OnClickBtnPrev">
          <span v-if="BtnPrev.icon"
            class="as-icon">
            <ti-icon :value="BtnPrev.icon"/>
          </span>
          <span class="as-sep"></span>
          <span class="as-text">{{BtnPrev.text|i18n}}</span>
      </div>
      <!--Sep-->
      <div class="as-space"></div>
      <!--
        Btn: Next
      -->
      <div
        v-if="BtnNext" 
          class="as-btn is-next"
          :class="BtnNext.className"
          @click="OnClickBtnNext">
          <span v-if="BtnNext.icon"
            class="as-icon">
            <ti-icon :value="BtnNext.icon"/>
          </span>
          <span class="as-sep"></span>
          <span class="as-text">{{BtnNext.text|i18n}}</span>
      </div>
  </div>
</div></div>`);
//========================================
// JOIN <ti-wizard.mjs> ti/com/ti/wizard/ti-wizard.mjs
//========================================
Ti.Preload("ti/com/ti/wizard/ti-wizard.mjs", TI_PACK_EXPORTS['ti/com/ti/wizard/ti-wizard.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/wizard/_com.json
//========================================
Ti.Preload("ti/com/ti/wizard/_com.json", {
  "name" : "ti-wizard",
  "globally" : true,
  "template" : "./ti-wizard.html",
  "mixins" : ["./ti-wizard.mjs"],
  "components" : [
    "./com/wizard-step"]
});
//========================================
// JOIN <auth-passwd.html> ti/com/web/auth/passwd/auth-passwd.html
//========================================
Ti.Preload("ti/com/web/auth/passwd/auth-passwd.html", `<div 
  class="web-auth-passwd web-simple-form" 
  :class="TopClass">
  <!--
    Reset Success
  -->
  <template v-if="doing">
    <div class="as-ing">
      <ti-loading class="as-hug" text="auth-reset-passwd-ing"/>
    </div>
  </template>
  <!--
    Reset Success
  -->
  <template v-else-if="myResetResult">
    <div
      class="as-done"
      :class="ResetDoneClass">
      <!--Loading Icon-->
      <ti-loading
        class="as-hug"
        :icon="ResetDoneIcon"
        :text="ResetDoneText"/>
      <!--Links-->
      <div class="as-links">
        <a @click.left="OnResetAgain">{{'auth-reset-passwd-again'|i18n}}</a>
      </div>
    </div>
  </template>
  <!--
    Reset form
  -->
  <template v-else>
    <!--
      Head text
    -->
    <header>{{ModeTitle|i18n}}</header>
    <!--
      Main Area
    -->
    <section>
      <!--
        ===================================================
        Mode: byVCode
      -->
      <template v-if="isByVode">
        <!--
          Input: name
        -->
        <div class="as-input">
          <input 
            spellcheck="false"
            :placeholder="VCodeNameTip|i18n"
            v-model="myForm.name"></div>
        <!--
          Input: vcode
        -->
        <div class="as-input">
          <input 
            spellcheck="false"
            :placeholder="VCodeCodeTip|i18n"
            v-model="myForm.vcode">
          <span>
            <em v-if="delay>0">{{'auth-vcode-delay'|i18n({sec:delay})}}</em>
            <a v-else
              @click="OnGetVcode">{{VCodeGetTip|i18n}}</a>
          </span>
        </div>
      </template>
      <!--
        ===================================================
        Mode: byPasswd
      -->
      <template v-else>
        <!--
          Passwd: old
        -->
        <div class="as-input">
          <input 
            spellcheck="false"
            :type="myPassInputType"
            :placeholder="'auth-reset-passwd-old'|i18n"
            v-model="myForm.passwd_old"></div>
      </template>
      <!--
        ===================================================
      -->
      <!--
        Passwd: new
      -->
      <div class="as-input" :class="PasswdClass">
        <input 
          spellcheck="false"
          :type="myPassInputType"
          :placeholder="'auth-reset-passwd-new'|i18n"
          v-model="myForm.passwd_new">
        <span 
          class="as-passwd-type-toggle"
          @click="OnTogglePasswdInputType">
          <ti-icon :value="PasswdInputTypeIcon"/>
        </span>
      </div>
      <!--
        Passwd: Indicator
      -->
      <div class="as-passtip">
        <!--Invalid pass-->
        <div 
          v-if="-2 == myPassTip"
            class="is-invalid">{{'passwd-invalid-char'|i18n}}</div>
        <!--No password-->
        <div 
          v-else-if="-1 == myPassTip"
            class="is-tip">{{'passwd-tip'|i18n}}</div>
        <!--Show tip bar-->
        <div 
          v-else
            class="is-tipbar">
            <span class="is-weak">{{'i18n:passwd-sl-1' | i18n}}</span>
            <u
              v-for="it in PasswdTipBar"
                :class="it.className"></u>
            <span class="is-strong">{{'i18n:passwd-sl-5' | i18n}}</span>
        </div>
      </div>
      <!--
        Passwd: repeat
      -->
      <div class="as-input" :class="PasswdClass">
        <input 
          spellcheck="false"
          :type="myPassInputType"
          :placeholder="'auth-reset-passwd-ren'|i18n"
          v-model="myForm.passwd_ren"></div>
      <!--
        Submit button
      -->
      <div class="as-btn">
        <button 
          :class="SubmitBtnClass"
          @click="OnSubmit">{{SubmitBtnText|i18n}}</button>
      </div>
      <!--
        Sublinks: switch mode / passwd-back
      -->
      <div 
        v-if="hasAltModes"
          class="as-links">
          <div
            v-for="it in AltModes"
              class="as-item">
              <a @click.left="OnChangeMode(it)">{{it.text|i18n}}</a>
          </div>
      </div>
    </section>
  </template>
</div>`);
//========================================
// JOIN <auth-passwd.mjs> ti/com/web/auth/passwd/auth-passwd.mjs
//========================================
Ti.Preload("ti/com/web/auth/passwd/auth-passwd.mjs", TI_PACK_EXPORTS['ti/com/web/auth/passwd/auth-passwd.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/auth/passwd/_com.json
//========================================
Ti.Preload("ti/com/web/auth/passwd/_com.json", {
  "name" : "web-auth-passwd",
  "globally" : true,
  "template" : "./auth-passwd.html",
  "mixins" : ["./auth-passwd.mjs"]
});
//========================================
// JOIN <auth-signup.html> ti/com/web/auth/signup/auth-signup.html
//========================================
Ti.Preload("ti/com/web/auth/signup/auth-signup.html", `<div 
  class="web-auth-signup web-simple-form" 
  :class="TopClass"
  v-ti-activable>
  <!--
    Top Logo
  -->
  <div 
    v-if="logo"
      class="as-logo">
      <ti-icon :value="logo"/>
  </div>
  <!--
    Head text
  -->
  <header>{{Msgs.title|i18n}}</header>
  <!--
    Main Area
  -->
  <section>
    <!--
      Input: Name
    -->
    <div class="as-input" :class="NameClass">
      <input 
        spellcheck="false"
        :placeholder="Msgs.nameTip|i18n"
        v-model="data.name"></div>
    <!--
      Input: Password
    -->
    <div class="as-input" :class="PasswdClass">
      <input 
        spellcheck="false"
        :type="PasswdInputType"
        :placeholder="Msgs.passwdTip|i18n"
        v-model="data.passwd">
      <span v-if="Msgs.codeGet">
        <em v-if="delay>0">{{'auth-vcode-delay'|i18n({sec:delay})}}</em>
        <a v-else
          @click="OnGetVcode">{{Msgs.codeGet|i18n}}</a>
      </span>
    </div>
    <!--
      Submit button
    -->
    <div class="as-btn">
      <button @click="OnAuthSubmit">{{Msgs.btnText|i18n}}</button>
    </div>
    <!--
      Sublinks: switch mode / passwd-back
    -->
    <ul 
      v-if="hasToggleMode"
        class="as-links">
        <li v-if="Msgs.linkLeft"
          class="at-left">
          <a @click="OnChangeMode">{{Msgs.linkLeft   |i18n}}</a></li>
        <li v-if="Msgs.linkRight"
          class="at-right">
          <a>{{Msgs.linkRight |i18n}}</a></li>
    </ul>
  </section>
  <!--
    Bottom link for oauth2
  -->
  <template v-if="hasOAuth2">
    <div class="as-spacing"></div>
    <footer>
      <a
        v-for="it in OAuth2Items"
          :href="it.href"
          :title="it.tip">
          <ti-icon :value="it.icon"/>
      </a>
    </footer>
  </template>
</div>`);
//========================================
// JOIN <auth-signup.mjs> ti/com/web/auth/signup/auth-signup.mjs
//========================================
Ti.Preload("ti/com/web/auth/signup/auth-signup.mjs", TI_PACK_EXPORTS['ti/com/web/auth/signup/auth-signup.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/auth/signup/_com.json
//========================================
Ti.Preload("ti/com/web/auth/signup/_com.json", {
  "name" : "web-auth-signup",
  "globally" : true,
  "template" : "./auth-signup.html",
  "mixins" : ["./auth-signup.mjs"]
});
//========================================
// JOIN <web-footer.html> ti/com/web/footer/web-footer.html
//========================================
Ti.Preload("ti/com/web/footer/web-footer.html", `<div class="ti-web-footer">
  I footer
</div>`);
//========================================
// JOIN <web-footer.mjs> ti/com/web/footer/web-footer.mjs
//========================================
Ti.Preload("ti/com/web/footer/web-footer.mjs", TI_PACK_EXPORTS['ti/com/web/footer/web-footer.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/footer/_com.json
//========================================
Ti.Preload("ti/com/web/footer/_com.json", {
  "name" : "web-footer",
  "globally" : true,
  "template" : "./web-footer.html",
  "mixins"   : ["./web-footer.mjs"]
});
//========================================
// JOIN <leaflet-mock-methods.mjs> ti/com/web/gis/leaflet/leaflet-mock-methods.mjs
//========================================
Ti.Preload("ti/com/web/gis/leaflet/leaflet-mock-methods.mjs", TI_PACK_EXPORTS['ti/com/web/gis/leaflet/leaflet-mock-methods.mjs']);
//========================================
// JOIN <leaflet-redraw-methods.mjs> ti/com/web/gis/leaflet/leaflet-redraw-methods.mjs
//========================================
Ti.Preload("ti/com/web/gis/leaflet/leaflet-redraw-methods.mjs", TI_PACK_EXPORTS['ti/com/web/gis/leaflet/leaflet-redraw-methods.mjs']);
//========================================
// JOIN <leaflet-tiles-methods.mjs> ti/com/web/gis/leaflet/leaflet-tiles-methods.mjs
//========================================
Ti.Preload("ti/com/web/gis/leaflet/leaflet-tiles-methods.mjs", TI_PACK_EXPORTS['ti/com/web/gis/leaflet/leaflet-tiles-methods.mjs']);
//========================================
// JOIN <web-gis-leaflet-props.mjs> ti/com/web/gis/leaflet/web-gis-leaflet-props.mjs
//========================================
Ti.Preload("ti/com/web/gis/leaflet/web-gis-leaflet-props.mjs", TI_PACK_EXPORTS['ti/com/web/gis/leaflet/web-gis-leaflet-props.mjs']);
//========================================
// JOIN <web-gis-leaflet.html> ti/com/web/gis/leaflet/web-gis-leaflet.html
//========================================
Ti.Preload("ti/com/web/gis/leaflet/web-gis-leaflet.html", `<div class="web-gsi-leaflet ti-fill-parent"
  :class="TopClass"
  :style="TopStyle">
  <!--
    Main for the map
  -->
  <div class="wgl-map-main ti-fill-parent" ref="main"></div>
  <!--
    Tip Info
  -->
  <div 
    v-if="isShowInfo"
      class="wgl-map-info">
      <!--
        Zoom
      -->
      <div class="info-ele" v-if="ShowInfo.zoom">
        <i class="fas fa-search-location"></i>
        <span>{{geo.zoom}}</span>
      </div>
      <!--
        Center
      -->
      <div class="info-ele" v-if="ShowInfo.center">
        <i class="fas fa-arrows-alt"></i>
        <span>{{GeoStr(geo.center.lat)}}, {{GeoStr(geo.center.lng)}}</span>
      </div>
      <!--
        Latitude range
      -->
      <div class="info-ele" v-if="ShowInfo.latRange">
        <i class="fas fa-arrows-alt-v"></i>
        <span>{{GeoStr(geo.N)}}</span>/<span>{{GeoStr(geo.S)}}</span>
      </div>
      <!--
        Longitude range
      -->
      <div class="info-ele" v-if="ShowInfo.lngRange">
        <i class="fas fa-arrows-alt-h"></i>
        <span>{{GeoStr(geo.W)}}</span>/<span>{{GeoStr(geo.E)}}</span>
      </div>
      <!--
        Pointer Hover
      -->
      <div 
        v-if="ShowInfo.pointerHover && !_.isEmpty(pointerHover)"
          class="info-ele">
          <i class="fas fa-map-marker"></i>
          <span>{{GeoStr(pointerHover.lat)}}, {{GeoStr(pointerHover.lng)}}</span>
      </div>
      <!--
        Pointer Click
      -->
      <div 
        v-if="ShowInfo.pointerClick && !_.isEmpty(pointerClick)"
          class="info-ele">
          <i class="fas fa-mouse" @click.left="pointerClick={}"></i>
          <span>{{GeoStr(pointerClick.lat)}}, {{GeoStr(pointerClick.lng)}}</span>
      </div>
  </div>
</div>`);
//========================================
// JOIN <web-gis-leaflet.mjs> ti/com/web/gis/leaflet/web-gis-leaflet.mjs
//========================================
Ti.Preload("ti/com/web/gis/leaflet/web-gis-leaflet.mjs", TI_PACK_EXPORTS['ti/com/web/gis/leaflet/web-gis-leaflet.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/gis/leaflet/_com.json
//========================================
Ti.Preload("ti/com/web/gis/leaflet/_com.json", {
  "name" : "web-gis-leaflet",
  "globally" : true,
  "template" : "./web-gis-leaflet.html",
  "props"   : "./web-gis-leaflet-props.mjs",
  "methods" : [
      "./leaflet-tiles-methods.mjs",
      "./leaflet-redraw-methods.mjs",
      "./leaflet-mock-methods.mjs"
    ],
  "mixins"   : ["./web-gis-leaflet.mjs"],
  "deps" : [
    "@deps:leaflet/leaflet.js",
    "@deps:leaflet/leaflet.css"
  ]
});
//========================================
// JOIN <web-media-image.html> ti/com/web/media/image/web-media-image.html
//========================================
Ti.Preload("ti/com/web/media/image/web-media-image.html", `<a class="web-media-image"
  :class="TopClass"
  :style="TopStyle"
  :href="TheHref"
  :target="isNewTab ? '_blank' : '_self'"
  @click.left="OnClickTop"
  @mousemove="OnMouseMove"
  @mouseleave="OnMouseLeave">
  <!--Image-->
  <div class="as-img-con">
    <img ref="img"
      v-if="TheSrc" 
        :src="TheSrc"
        @load="OnImageLoaded"/>
  </div>
  <!--Text-->
  <div
    v-if="TheText"
      class="as-text"
      :style="TextStyle">
      <span>{{TheText}}</span>
  </div>
  <!--Zoom len-->
  <template v-if="zoomLens">
    <!--Picker-->
    <div ref="pick"
      class="as-zoom-pick"
      :style="ZoomLenPickStyle"></div>
    <!--Docker-->
    <div ref="dock"
      v-if="showZoomPick"
        class="as-zoom-dock"
        :style="ZoomLenDockStyle"></div>
  </template>
</a>`);
//========================================
// JOIN <web-media-image.mjs> ti/com/web/media/image/web-media-image.mjs
//========================================
Ti.Preload("ti/com/web/media/image/web-media-image.mjs", TI_PACK_EXPORTS['ti/com/web/media/image/web-media-image.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/media/image/_com.json
//========================================
Ti.Preload("ti/com/web/media/image/_com.json", {
  "name" : "web-media-image",
  "globally" : true,
  "template" : "./web-media-image.html",
  "mixins"   : ["./web-media-image.mjs"]
});
//========================================
// JOIN <web-media-player.html> ti/com/web/media/player/web-media-player.html
//========================================
Ti.Preload("ti/com/web/media/player/web-media-player.html", `<div class="ti-web-image">
  
</div>`);
//========================================
// JOIN <web-media-player.mjs> ti/com/web/media/player/web-media-player.mjs
//========================================
Ti.Preload("ti/com/web/media/player/web-media-player.mjs", TI_PACK_EXPORTS['ti/com/web/media/player/web-media-player.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/media/player/_com.json
//========================================
Ti.Preload("ti/com/web/media/player/_com.json", {
  "name" : "web-media-player",
  "globally" : true,
  "template" : "./web-media-player.html",
  "mixins"   : ["./web-media-player.mjs"]
});
//========================================
// JOIN <web-meta-article.html> ti/com/web/meta/article/web-meta-article.html
//========================================
Ti.Preload("ti/com/web/meta/article/web-meta-article.html", `<div class="web-meta-article"
  :class="TopClass">
  <!--
    Title
  -->
  <h1
    v-if="title"
      class="as-title">{{title}}</h1>
  <!--
    Information
  -->
  <div
    v-if="hasInfo"
      class="as-info">
      <!--author-->
      <div v-if="author" class="as-author">{{author}}</div>
      <!--PubDateText-->
      <div v-if="PubDateText" class="as-pub-date">{{PubDateText}}</div>
      <!--Watch Count-->
      <div
        v-if="watchCount > 0"
          class="as-watch-count">
            <i class="zmdi zmdi-eye"></i>
            <span>{{watchCount}}</span></div>
      <!--PubDateText-->
      <div v-if="duration" class="as-duration">{{DurationText}}</div>
  </div>
  <!--
    Tags
  -->
  <ul 
  v-if="hasTags"
    class="as-tags">
    <li
      v-for="tag in TheTags">{{tag}}</li></ul>
  <!--
    Brief
  -->
  <blockquote
    v-if="brief"
      class="as-brief">{{brief}}</blockquote>
  <!--
    Bottom line
  -->
  <hr v-if="bottomLine" class="as-bottom-line">
</div>`);
//========================================
// JOIN <web-meta-article.mjs> ti/com/web/meta/article/web-meta-article.mjs
//========================================
Ti.Preload("ti/com/web/meta/article/web-meta-article.mjs", TI_PACK_EXPORTS['ti/com/web/meta/article/web-meta-article.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/meta/article/_com.json
//========================================
Ti.Preload("ti/com/web/meta/article/_com.json", {
  "name" : "web-meta-article",
  "globally" : true,
  "template" : "./web-meta-article.html",
  "mixins"   : ["./web-meta-article.mjs"]
});
//========================================
// JOIN <web-meta-badge.html> ti/com/web/meta/badge/web-meta-badge.html
//========================================
Ti.Preload("ti/com/web/meta/badge/web-meta-badge.html", `<div class="web-meta-badge"
  :class="TopClass">
  <!--==============================-->
  <ti-icon
    v-if="TheIcon"
      class="as-icon"
      :value="TheIcon"
      :style="IconStyle"/>
  <!--==============================-->
  <div
    v-if="TheTitle"
      class="as-title">{{TheTitle | i18n}}</div>
  <!--==============================-->
  <div
    v-if="TheBrief"
      class="as-brief">{{TheBrief | i18n}}</div>
  <!--==============================-->
  <div
    v-if="hasLinks"
      class="as-links">
      <ul>
        <li
          v-for="li in TheLinks">
            <a 
              @click.left="OnClickLink(li, $event)"
              :href="li.href"
              :target="li.newtab?'_blank':'_self'">
                <ti-icon v-if="li.icon" :value="li.icon"/>
                <span>{{li.text | i18n}}</span></a>
        </li>
      </ul>
  </div>
</div>`);
//========================================
// JOIN <web-meta-badge.mjs> ti/com/web/meta/badge/web-meta-badge.mjs
//========================================
Ti.Preload("ti/com/web/meta/badge/web-meta-badge.mjs", TI_PACK_EXPORTS['ti/com/web/meta/badge/web-meta-badge.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/meta/badge/_com.json
//========================================
Ti.Preload("ti/com/web/meta/badge/_com.json", {
  "name" : "web-meta-badge",
  "globally" : true,
  "template" : "./web-meta-badge.html",
  "mixins"   : ["./web-meta-badge.mjs"]
});
//========================================
// JOIN <web-meta-commodity.html> ti/com/web/meta/commodity/web-meta-commodity.html
//========================================
Ti.Preload("ti/com/web/meta/commodity/web-meta-commodity.html", `<div class="web-meta-commodity"
  :class="TopClass">
  <div class="as-main">
    <!--
      Left: Preview
    -->
    <div
      v-if="previewImageSrc"
        class="at-left">
      <WebMediaImage
        :src="previewImageSrc"/>
    </div>
    <!--
      Right: Information
    -->
    <div class="at-right">
      <!--Title-->
      <h1>{{MetaTitle}}</h1>
      <div class="as-form">
        <ti-form
          v-bind="form"
          :data="FormData"
          @change="OnFormChanged"/>
      </div>
      <div class="as-btns">
        <!--Buy Button-->
        <a class="ti-btn" @click="OnClickBuyNow">{{actions.buy|i18n}}</a>
      </div>
    </div>
  </div>
</div>`);
//========================================
// JOIN <web-meta-commodity.mjs> ti/com/web/meta/commodity/web-meta-commodity.mjs
//========================================
Ti.Preload("ti/com/web/meta/commodity/web-meta-commodity.mjs", TI_PACK_EXPORTS['ti/com/web/meta/commodity/web-meta-commodity.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/meta/commodity/_com.json
//========================================
Ti.Preload("ti/com/web/meta/commodity/_com.json", {
  "name" : "web-meta-commodity",
  "globally" : true,
  "template" : "./web-meta-commodity.html",
  "mixins"   : ["./web-meta-commodity.mjs"],
  "components" : [
    "@com:web/meta/preview"
  ]
});
//========================================
// JOIN <order-item.html> ti/com/web/meta/order/com/order-item/order-item.html
//========================================
Ti.Preload("ti/com/web/meta/order/com/order-item/order-item.html", `<div class="as-row order-item">
  <!--Thumb/Title-->
  <div class="as-cell">
    <div class="as-title">
      <ti-icon 
        :value="thumbObj" 
        width=".32rem" 
        height=".32rem"/>
      <span class="as-text">{{title}}</span>
    </div>
  </div>
  <!--price-->
  <div class="as-cell as-price">
    <span>{{price}}</span>
  </div>
  <!--amount-->
  <div class="as-cell as-amount">
    <span>{{amount}}</span>
  </div>
  <!--Total-->
  <div class="as-cell as-fee">
    <em class="ti-num is-md">{{feeText}}</em>
  </div>
</div>`);
//========================================
// JOIN <order-item.mjs> ti/com/web/meta/order/com/order-item/order-item.mjs
//========================================
Ti.Preload("ti/com/web/meta/order/com/order-item/order-item.mjs", TI_PACK_EXPORTS['ti/com/web/meta/order/com/order-item/order-item.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/meta/order/com/order-item/_com.json
//========================================
Ti.Preload("ti/com/web/meta/order/com/order-item/_com.json", {
  "name" : "order-item",
  "globally" : false,
  "template" : "./order-item.html",
  "mixins"   : ["./order-item.mjs"]
});
//========================================
// JOIN <web-meta-order.html> ti/com/web/meta/order/web-meta-order.html
//========================================
Ti.Preload("ti/com/web/meta/order/web-meta-order.html", `<div class="web-meta-order"
  :class="TopClass">
  <!--
    Head： Status
  -->
  <div class="as-or-box is-head">
    <!--
      Left: ID/status
    -->
    <div class="at-left is-status">
      <!--ID-->
      <div class="as-or-id">
        <span>{{'order-k-id'|i18n}}:</span>
        <em>{{OrderId}}</em>
      </div>
      <!--Status-->
      <div class="as-or-st">
        <span :class="OrderStatus">{{OrderStatus|i18n}}</span>
      </div>
    </div>
    <!--
      Right: Timestamp
    -->
    <div class="at-right is-timestamp">
      <div
        v-for="it in Timestamps"
          :class="it.className">
          <!--Item-->
          <template v-if="'item' == it.type">
            <ti-icon :value="it.icon"/>
            <div class="as-t-title">{{it.title|i18n}}</div>
            <div class="as-t-date">{{it.dateText}}</div>
            <div class="as-t-time">{{it.timeText}}</div>
          </template>
          <!--Line-->
          <template v-else>
            <ti-icon :value="it.icon"/>
          </template>
      </div>
    </div>
  </div>
  <!--
    TODO shipping address & physical distribution
  -->
  <!--
    Product list
  -->
  <div class="as-or-box is-products">
    <table>
      <thead>
        <tr>
          <th>{{'order-k-pro-title'|i18n}}</th>
          <th>{{'order-k-pro-price'|i18n}}</th>
          <th>{{'order-k-pro-amount'|i18n}}</th>
          <th>{{'order-k-pro-subtotal'|i18n}}</th>
        </tr>
      </thead>
      <tbody>
        <tr
          v-for="it in Products"
            class="as-pro-it">
            <!--Title-->
            <td class="as-pro-title">
              <a 
                :href="it.href"
                @click.left.prevent="OnClickProduct(it)"><img :src="it.src"/></a>
              <a 
                :href="it.href"
                @click.left.prevent="OnClickProduct(it)">{{it.title}}</a>
            </td>
            <!--Price-->
            <td class="as-price">{{CurrencyChar}}{{it.price}}</td>
            <!--Amount-->
            <td class="as-amount">{{it.amount}}</td>
            <!--Subtotal-->
            <td class="as-subtotal">{{CurrencyChar}}{{it.subtotal}}</td>
        </tr>
      </tbody>
    </table>
  </div>
  <!--
    Summary
  -->
  <div class="as-or-box is-summary">
    <table>
      <tr class="as-sum-price">
        <td class="as-s-key">{{'order-k-price'|i18n}}:</td>
        <td class="as-s-val">{{CurrencyChar}}{{Order.price}}</td>
      </tr>
      <tr class="as-sum-fee">
        <td class="as-s-key">{{'order-k-fee'|i18n}}:</td>
        <td class="as-s-val">{{CurrencyChar}}{{Order.fee}}</td>
      </tr>
    </table>
  </div>
</div>`);
//========================================
// JOIN <web-meta-order.mjs> ti/com/web/meta/order/web-meta-order.mjs
//========================================
Ti.Preload("ti/com/web/meta/order/web-meta-order.mjs", TI_PACK_EXPORTS['ti/com/web/meta/order/web-meta-order.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/meta/order/_com.json
//========================================
Ti.Preload("ti/com/web/meta/order/_com.json", {
  "name" : "web-meta-order",
  "globally" : true,
  "template" : "./web-meta-order.html",
  "mixins"   : ["./web-meta-order.mjs"],
  "components" : [
    "./com/order-item"
  ]
});
//========================================
// JOIN <web-meta-preview.html> ti/com/web/meta/preview/web-meta-preview.html
//========================================
Ti.Preload("ti/com/web/meta/preview/web-meta-preview.html", `<div class="ti-web-preview ti-fill-parent">
  <!--
    Top: Image
  -->
  <div class="as-preview">
    <ti-icon value="zmdi-image"/>
  </div>
  <!--
    Bottom: List
  -->
  
</div>`);
//========================================
// JOIN <web-meta-preview.mjs> ti/com/web/meta/preview/web-meta-preview.mjs
//========================================
Ti.Preload("ti/com/web/meta/preview/web-meta-preview.mjs", TI_PACK_EXPORTS['ti/com/web/meta/preview/web-meta-preview.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/meta/preview/_com.json
//========================================
Ti.Preload("ti/com/web/meta/preview/_com.json", {
  "name" : "web-meta-preview",
  "globally" : true,
  "template" : "./web-meta-preview.html",
  "mixins"   : ["./web-meta-preview.mjs"]
});
//========================================
// JOIN <nav-columns.html> ti/com/web/nav/columns/nav-columns.html
//========================================
Ti.Preload("ti/com/web/nav/columns/nav-columns.html", `<nav class="web-nav-columns"
  :class="TopClass">
  <!--=======================================-->
  <div v-for="it in TheItems"
    class="as-column">
    <div class="item-self">
      <a
        :key="it.index"
        class="link-item"
        :class="it.className"
        :href="it.href"
        :target="it.target"
        @click.left="OnClickLink($event, it)">
        <!--Icon-->
        <ti-icon
          v-if="it.icon"
            :value="it.icon"/>
        <!--Text-->
        <span
          v-if="it.title"
            class="as-text">{{it.title}}</span>
        </a>
      </div>
      <!--===================================-->
      <!--SubItems-->
      <div
        v-if="it.items"
          class="sub-items">
          <div class="items-con">
            <a
              v-for="sub in it.items"
                :key="sub.index"
                class="sub-item"
                :class="sub.className"
                :href="sub.href"
                :target="sub.target"
                @click.left="OnClickLink($event, sub)">
                <!--Icon-->
                <ti-icon
                  v-if="sub.icon"
                    :value="sub.icon"/>
                <!--Text-->
                <span
                  v-if="sub.title"
                    class="as-text">{{sub.title}}</span>
            </a>
          </div>
      </div>
      <!--===================================-->
  </div>
  <!--=======================================-->
</nav>`);
//========================================
// JOIN <nav-columns.mjs> ti/com/web/nav/columns/nav-columns.mjs
//========================================
Ti.Preload("ti/com/web/nav/columns/nav-columns.mjs", TI_PACK_EXPORTS['ti/com/web/nav/columns/nav-columns.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/nav/columns/_com.json
//========================================
Ti.Preload("ti/com/web/nav/columns/_com.json", {
  "name" : "web-nav-columns",
  "globally" : true,
  "template" : "./nav-columns.html",
  "mixins"   : [
    "@com:web/nav/support/web-nav-mixins.mjs",
    "./nav-columns.mjs"
  ],
  "components" : []
});
//========================================
// JOIN <nav-crumb.html> ti/com/web/nav/crumb/nav-crumb.html
//========================================
Ti.Preload("ti/com/web/nav/crumb/nav-crumb.html", `<nav class="web-nav-crumb"
  :class="TopClass">
  <!--=======================================-->
  <template 
    v-for="it in TheItems">
      <!--Href render to A-->
      <a
        v-if="it.href"
          :key="it.index"
          class="link-item"
          :class="it.className"
          :href="it.href"
          :target="it.target"
          @click.left="OnClickLink($event, it)">
          <!--Icon-->
          <ti-icon
            v-if="it.icon"
              :value="it.icon"/>
          <!--Text-->
          <span
            v-if="it.title"
              class="as-text">{{it.title | i18n}}</span>
      </a>
      <!--
        Just text
      -->
      <span
        v-else
          :key="it.index"
          class="link-item"
          :class="it.className">
          <!--Icon-->
          <ti-icon
            v-if="it.icon"
              :value="it.icon"/>
          <!--Text-->
          <span
            v-if="it.title"
              class="as-text">{{it.title | i18n}}</span>
      </span>
      <!--Sep-->
      <TiIcon :value="sep"/>
  </template>
  <!--=======================================-->
  <div 
    v-if="title"
      class="as-title">{{title|i18n}}</div>
  <!--=======================================-->
</nav>`);
//========================================
// JOIN <nav-crumb.mjs> ti/com/web/nav/crumb/nav-crumb.mjs
//========================================
Ti.Preload("ti/com/web/nav/crumb/nav-crumb.mjs", TI_PACK_EXPORTS['ti/com/web/nav/crumb/nav-crumb.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/nav/crumb/_com.json
//========================================
Ti.Preload("ti/com/web/nav/crumb/_com.json", {
  "name" : "web-nav-crumb",
  "globally" : true,
  "template" : "./nav-crumb.html",
  "mixins"   : [
    "@com:web/nav/support/web-nav-mixins.mjs",
    "./nav-crumb.mjs"
  ],
  "components" : []
});
//========================================
// JOIN <link-item.html> ti/com/web/nav/links/com/link-item/link-item.html
//========================================
Ti.Preload("ti/com/web/nav/links/com/link-item/link-item.html", `<div class="link-item" 
  :class="TopClass"
  @mouseenter.stop="OnOpenGroup"
  @mouseleave.stop="OnCloseGroup">
  <!--
    Self Info
  -->
  <div ref="info"
    class="it-info"
    @click.left="OnClickItemInfo">
    <!--Icon-->
    <span
      v-if="icon"
        class="it-info-icon">
        <ti-icon :value="icon"/>
    </span>
    <!--Group-->
    <span
      v-if="!hasHrefOrValue"
        class="it-info-text">{{title|i18n}}</span>
    <!--Item-->
    <a
      v-else
        class="it-info-text"
        :href="href"
        @click.left="OnClickItemLink($event)">{{title|i18n}}</a>
  </div>
  <!--
    Sub Container
  -->
  <div ref="con"
    v-if="hasSubItems && isOpened"
      class="it-con"><div class="it-con-wrapper">
        <LinkItem
          v-for="subIt in items"
            :key="subIt.id"
            v-bind="subIt"
            :opened-ids="openedIds"
            :opened-depth="openedDepth"/>
  </div></div>
</div>`);
//========================================
// JOIN <link-item.mjs> ti/com/web/nav/links/com/link-item/link-item.mjs
//========================================
Ti.Preload("ti/com/web/nav/links/com/link-item/link-item.mjs", TI_PACK_EXPORTS['ti/com/web/nav/links/com/link-item/link-item.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/nav/links/com/link-item/_com.json
//========================================
Ti.Preload("ti/com/web/nav/links/com/link-item/_com.json", {
  "name" : "link-item",
  "template" : "./link-item.html",
  "mixins" : [
    "@com:web/nav/support/web-nav-item-mixins.mjs",
    "./link-item.mjs"
  ]
});
//========================================
// JOIN <nav-links.html> ti/com/web/nav/links/nav-links.html
//========================================
Ti.Preload("ti/com/web/nav/links/nav-links.html", `<nav class="web-nav-links"
  :class="TopClass">
  <LinkItem
    v-for="it in TheItems"
      :key="it.id"
      class="link-item"
      v-bind="it"
      :opened-ids="myOpenedIds"
      @click:item="OnClickLink"
      @change:opened="OnChangeGroupOpened"/>
</nav>`);
//========================================
// JOIN <nav-links.mjs> ti/com/web/nav/links/nav-links.mjs
//========================================
Ti.Preload("ti/com/web/nav/links/nav-links.mjs", TI_PACK_EXPORTS['ti/com/web/nav/links/nav-links.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/nav/links/_com.json
//========================================
Ti.Preload("ti/com/web/nav/links/_com.json", {
  "name" : "web-nav-links",
  "globally" : true,
  "template" : "./nav-links.html",
  "mixins"   : [
    "@com:web/nav/support/web-nav-mixins.mjs",
    "./nav-links.mjs"
  ],
  "components" : ["./com/link-item"]
});
//========================================
// JOIN <nav-links.html> ti/com/web/nav/links/__bak/nav-links.html
//========================================
Ti.Preload("ti/com/web/nav/links/__bak/nav-links.html", `<nav class="web-nav-links"
  :class="TopClass">
  <!--=======================================-->
  <a
    v-for="it in TheItems"
      :key="it.index"
      class="link-item"
      :class="it.className"
      :href="it.href"
      :target="it.target"
      @click.left="OnClickLink($event, it)"
      @mouseenter="OnItemMouseEnter(it)"
      @mouseleave="OnItemMouseLeave(it)">
      <!--Icon-->
      <ti-icon
        v-if="it.icon"
          :value="it.icon"/>
      <!--Text-->
      <span
        v-if="it.title"
          class="as-text">{{it.title | i18n}}</span>
      <!--===================================-->
      <!--SubItems-->
      <div
        v-if="mySubItems && mySubIndex == it.index"
          class="sub-items">
          <div class="items-con">
            <a
              v-for="sub in mySubItems"
                :key="sub.index"
                class="sub-item"
                :class="sub.className"
                :href="sub.href"
                :target="sub.target"
                @click.left="OnClickLink($event, sub)">
                <!--Icon-->
                <ti-icon
                  v-if="sub.icon"
                    :value="sub.icon"/>
                <!--Text-->
                <span
                  v-if="sub.title"
                    class="as-text">{{sub.title | i18n}}</span>
            </a>
          </div>
      </div>
      <!--===================================-->
  </a>
  <!--=======================================-->
</nav>`);
//========================================
// JOIN <nav-links.mjs> ti/com/web/nav/links/__bak/nav-links.mjs
//========================================
Ti.Preload("ti/com/web/nav/links/__bak/nav-links.mjs", TI_PACK_EXPORTS['ti/com/web/nav/links/__bak/nav-links.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/nav/links/__bak/_com.json
//========================================
Ti.Preload("ti/com/web/nav/links/__bak/_com.json", {
  "name" : "web-nav-links",
  "globally" : true,
  "template" : "./nav-links.html",
  "mixins"   : [
    "@com:web/nav/support/web-nav-mixins.mjs",
    "./nav-links.mjs"
  ],
  "components" : ["./com/link-item"]
});
//========================================
// JOIN <side-item.html> ti/com/web/nav/side/com/side-item/side-item.html
//========================================
Ti.Preload("ti/com/web/nav/side/com/side-item/side-item.html", `<div class="side-item" 
  :class="TopClass">
  <!--
    Self Info
  -->
  <div class="it-info"
    @click.left="OnClickItemInfo">
    <!--Icon-->
    <span
      v-if="icon"
        class="it-info-icon">
        <ti-icon :value="icon"/>
    </span>
    <!--Group-->
    <span
      v-if="!hasHrefOrValue"
        class="it-info-text">{{title|i18n}}</span>
    <!--Item-->
    <a
      v-else
        class="it-info-text"
        :href="href"
        @click.left="OnClickItemLink($event)">{{title|i18n}}</a>
    <!--
      Status icon
    -->
    <TiIcon 
      v-if="isGroup"
        class="it-status-icon"
          :value="OpenStatusIcon"
          @click.native.left.stop="OnToggleGroupOpened"/>
  </div>
  <!--
    Sub Container
  -->
  <transition name="ti-trans-folder"
    @before-enter="OnTransBeforeEnter"
    @enter="OnTransEnter"
    @after-enter="OnTransAfterEnter"

    @before-leave="OnTransBeforeLeave"
    @leave="OnTransLeave"
    @after-leave="OnTransAfterLeave">
    <div 
      v-if="hasSubItems && isOpened"
        class="it-con">
          <SideItem
            v-for="subIt in items"
              :key="subIt.id"
              v-bind="subIt"
              :opened-ids="openedIds"
              :opened-depth="openedDepth"
              :opened-icons="openedIcons"/>
    </div>
  </transition>
</div>`);
//========================================
// JOIN <side-item.mjs> ti/com/web/nav/side/com/side-item/side-item.mjs
//========================================
Ti.Preload("ti/com/web/nav/side/com/side-item/side-item.mjs", TI_PACK_EXPORTS['ti/com/web/nav/side/com/side-item/side-item.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/nav/side/com/side-item/_com.json
//========================================
Ti.Preload("ti/com/web/nav/side/com/side-item/_com.json", {
  "name" : "side-item",
  "template" : "./side-item.html",
  "mixins" : [
    "@com:web/nav/support/web-nav-item-mixins.mjs",
    "./side-item.mjs"
  ]
});
//========================================
// JOIN <web-nav-side.html> ti/com/web/nav/side/web-nav-side.html
//========================================
Ti.Preload("ti/com/web/nav/side/web-nav-side.html", `<div class="web-nav-side"
  :class="TopClass"
  v-ti-activable>
  <SideItem
    v-for="it in TheItems"
      :key="it.id"
        v-bind="it"
        :opened-ids="myOpenedIds"
        :opened-depth="openedDepth"
        :opened-icons="openedIcons"
        @click:item="OnClickLink"
        @change:opened="OnChangeOpened"/>
</div>`);
//========================================
// JOIN <web-nav-side.mjs> ti/com/web/nav/side/web-nav-side.mjs
//========================================
Ti.Preload("ti/com/web/nav/side/web-nav-side.mjs", TI_PACK_EXPORTS['ti/com/web/nav/side/web-nav-side.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/nav/side/_com.json
//========================================
Ti.Preload("ti/com/web/nav/side/_com.json", {
  "name" : "web-nav-side",
  "globally" : true,
  "template" : "./web-nav-side.html",
  "mixins"   : [
    "@com:web/nav/support/web-nav-mixins.mjs",
    "./web-nav-side.mjs"
  ],
  "components" : ["./com/side-item"]
});
//========================================
// JOIN <web-nav-item-mixins.mjs> ti/com/web/nav/support/web-nav-item-mixins.mjs
//========================================
Ti.Preload("ti/com/web/nav/support/web-nav-item-mixins.mjs", TI_PACK_EXPORTS['ti/com/web/nav/support/web-nav-item-mixins.mjs']);
//========================================
// JOIN <web-nav-mixins.mjs> ti/com/web/nav/support/web-nav-mixins.mjs
//========================================
Ti.Preload("ti/com/web/nav/support/web-nav-mixins.mjs", TI_PACK_EXPORTS['ti/com/web/nav/support/web-nav-mixins.mjs']);
//========================================
// JOIN <web-pay-checkout-props.mjs> ti/com/web/pay/checkout/web-pay-checkout-props.mjs
//========================================
Ti.Preload("ti/com/web/pay/checkout/web-pay-checkout-props.mjs", TI_PACK_EXPORTS['ti/com/web/pay/checkout/web-pay-checkout-props.mjs']);
//========================================
// JOIN <web-pay-checkout.html> ti/com/web/pay/checkout/web-pay-checkout.html
//========================================
Ti.Preload("ti/com/web/pay/checkout/web-pay-checkout.html", `<div class="web-pay-checkout"
  :class="TopClass">
  <!--
    Blank
  -->
  <div 
    v-if="isEmpty"
      class="as-empty">
    <ti-loading
      class="as-big"
      icon="fas-shopping-basket"
      text="You should pick something to checkout!"/>
  </div>
  <!--
    List table
  -->
  <template v-else>
    <!--
      Tip
    -->
    <div class="as-tip">
      <ti-icon :value="tipIcon"/>
      <span>{{tipText | i18n}}</span>
    </div>
    <!--
      List
    -->
    <div class="as-list">
      <!--Show product in loop-->
      <table>
        <thead>
          <tr>
            <th><span>{{'pay-checkout-it-name'     | i18n}}</span></th>
            <th>
              <u>{{CurrencyChar}}</u>
              <span>{{'pay-checkout-it-price'      | i18n}}</span>
            </th>
            <th><span>{{'pay-checkout-it-amount'   | i18n}}</span></th>
            <th><span>{{'pay-checkout-it-subtotal' | i18n}}</span></th>
          </tr>
        </thead>
        <tbody>
          <tr
            v-for="it of TheItems"
              class="as-item">
              <td class="it-thumb">
                <a
                  v-if="it.thumbSrc" 
                    @click.prevent="OnShowProduct(it)" 
                    :href="it.href">
                    <img :src="it.thumbSrc"/>
                </a>
                <div class="it-title">
                  <a :href="it.href"
                    @click.prevent="OnShowProduct(it)">{{it.title}}</a>
                </div>
              </td>
              <td class="it-price">
                <em>{{CurrencyChar}}{{it.price}}</em>
              </td>
              <td class="it-amount">
                <span>{{it.amount}}</span>
              </td>
              <td class="it-subtotal">
                <em>{{CurrencyChar}}{{it.subtotal}}</em>
              </td>
            </tr>
          </tbody>
      </table>
    </div> <!--~as-list-->
    <!--
      Summary
    -->
    <div class="as-summary">
      <div class="at-left">
        <!--Maybe Coupon here-->
      </div>
      <div class="at-right">
        <div class="as-total">
          <span>Total:</span>
          <em>{{CurrencyChar}}{{TotalFee}}</em>
        </div>
      </div>
    </div>
    <!--
      Address
    -->
    <div
      v-if="'A' == orderType"
        class="as-address">
        <!--
          Current Address
        -->
        <div class="as-addr-current">
          <WebTileAddress 
            :value="currentAddr"
            title="订单收货地址"
            :countries="countries"
            :auto-highlight="false"
            :can="{remove:0,edit:0,default:0,choose:1,add:1}"
            :blank-as="{text:'i18n:order-shipaddr-nil',icon:'im-location'}"
            @choose="OnChooseAddr"
            @add="OnAddAddr"/>
        </div>
        <!--
          Address can-list
        -->
        <transition name="ti-trans-fade">
          <div
            v-if="showAddrCanList"
              class="as-can-list">
              <WebShelfList
                v-bind="AddrCanList"
                @select="OnSelectAddr"/>
              <div
                class="as-can-hide">
                <a @click.left="OnHideAddrCanList">
                  <i class="fas fa-angle-double-up"></i><br>
                  <span>{{'i18n:close'|i18n}}</span></a>
                </div>
          </div>
        </transition>
    </div>
  </template>
</div>`);
//========================================
// JOIN <web-pay-checkout.mjs> ti/com/web/pay/checkout/web-pay-checkout.mjs
//========================================
Ti.Preload("ti/com/web/pay/checkout/web-pay-checkout.mjs", TI_PACK_EXPORTS['ti/com/web/pay/checkout/web-pay-checkout.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/pay/checkout/_com.json
//========================================
Ti.Preload("ti/com/web/pay/checkout/_com.json", {
  "name" : "web-pay-checkout",
  "globally" : true,
  "template" : "./web-pay-checkout.html",
  "props"    : "./web-pay-checkout-props.mjs",
  "mixins"   : ["./web-pay-checkout.mjs"]
});
//========================================
// JOIN <web-pay-choose-props.mjs> ti/com/web/pay/choose/web-pay-choose-props.mjs
//========================================
Ti.Preload("ti/com/web/pay/choose/web-pay-choose-props.mjs", TI_PACK_EXPORTS['ti/com/web/pay/choose/web-pay-choose-props.mjs']);
//========================================
// JOIN <web-pay-choose.html> ti/com/web/pay/choose/web-pay-choose.html
//========================================
Ti.Preload("ti/com/web/pay/choose/web-pay-choose.html", `<div class="web-pay-choose"
  :class="TopClass">
  <!--Title-->
  <div class="as-title">{{'pay-step-choose-tip'|i18n}}</div>
  <!--Choosing-->
  <div class="as-options">
    <div
      v-for="op in options"
        class="as-pay-type"
        :class="getOptionClass(op)"
        @click.left="OnChooseOption(op)">
        <ti-icon :value="op.icon"/>
        <div class="as-text">{{op.text | i18n}}</div>
    </div>
  </div>
  <div class="as-tip">{{PayTypeText}}</div>
</div>`);
//========================================
// JOIN <web-pay-choose.mjs> ti/com/web/pay/choose/web-pay-choose.mjs
//========================================
Ti.Preload("ti/com/web/pay/choose/web-pay-choose.mjs", TI_PACK_EXPORTS['ti/com/web/pay/choose/web-pay-choose.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/pay/choose/_com.json
//========================================
Ti.Preload("ti/com/web/pay/choose/_com.json", {
  "name" : "web-pay-choose",
  "globally" : true,
  "template" : "./web-pay-choose.html",
  "props"    : "./web-pay-choose-props.mjs",
  "mixins"   : ["./web-pay-choose.mjs"]
});
//========================================
// JOIN <web-pay-done-props.mjs> ti/com/web/pay/done/web-pay-done-props.mjs
//========================================
Ti.Preload("ti/com/web/pay/done/web-pay-done-props.mjs", TI_PACK_EXPORTS['ti/com/web/pay/done/web-pay-done-props.mjs']);
//========================================
// JOIN <web-pay-done.html> ti/com/web/pay/done/web-pay-done.html
//========================================
Ti.Preload("ti/com/web/pay/done/web-pay-done.html", `<div class="web-pay-done"
  :class="TopClass">
  <!--
    Icon
  -->
  <div class="as-icon"><ti-icon :value="TheIcon"/></div>
  <!--
    Text
  -->
  <div class="as-text">{{TheText | i18n}}</div>
  <!--
    errMsg
  -->
  <div
    v-if="errMsg" 
      class="as-error">{{errMsg | i18n}}</div>
  <!--
    Links
  -->
  <div
    v-if="hasLinks"
      class="as-links">
      <ul>
        <li
          v-for="li in TheLinks">
          <a
            class="link-item"
            :href="li.href"
            @click.left.prevent="OnClickLink(li)">
            <ti-icon
              v-if="li.icon"
                :value="li.icon"/>
            <span class="it-text">{{li.text | i18n}}</span>
          </a>
        </li>
      </ul>
  </div>
</div>`);
//========================================
// JOIN <web-pay-done.mjs> ti/com/web/pay/done/web-pay-done.mjs
//========================================
Ti.Preload("ti/com/web/pay/done/web-pay-done.mjs", TI_PACK_EXPORTS['ti/com/web/pay/done/web-pay-done.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/pay/done/_com.json
//========================================
Ti.Preload("ti/com/web/pay/done/_com.json", {
  "name" : "web-pay-done",
  "globally" : true,
  "template" : "./web-pay-done.html",
  "props"    : "./web-pay-done-props.mjs",
  "mixins"   : ["./web-pay-done.mjs"]
});
//========================================
// JOIN <web-pay-proceed-props.mjs> ti/com/web/pay/proceed/web-pay-proceed-props.mjs
//========================================
Ti.Preload("ti/com/web/pay/proceed/web-pay-proceed-props.mjs", TI_PACK_EXPORTS['ti/com/web/pay/proceed/web-pay-proceed-props.mjs']);
//========================================
// JOIN <web-pay-proceed.html> ti/com/web/pay/proceed/web-pay-proceed.html
//========================================
Ti.Preload("ti/com/web/pay/proceed/web-pay-proceed.html", `<div class="web-pay-proceed">
  <!--
    Wait for create order
  -->
  <div 
    v-if="!hasOrder || !Payment"
      class="as-nil-order">
      <ti-loading
        class="as-big"
        :text="OrderLoadText"/>
  </div>
  <!--
    Show payment
  -->
  <template
    v-else>
    <!--QRCODE-->
    <div v-if="isQRCODE"
      class="as-main is-qrcode">
      <img 
        :style="QrcodeImageStyle"
        :src="PaymentDataAsQrcodeUrl">
    </div>
    <!--IFRAME-->
    <div v-else-if="isIFRAME"
      class="as-main is-iframe">
      <iframe 
        frameborder="0" 
        scrolling="no"
        :src="PaymentData"></iframe>
    </div>
    <!--
      JSON
    -->
    <div v-else-if="isJSON"
      class="as-main is-json">
      <!--The self/approve/update/capture links for PayPal-->
      <div
        v-if="'paypal' == payType"
          class="by-paypal">
        <!--Logo-->
        <div class="paypal-logo">
          <a 
            :href="myPaypalUrl"
            target="_blank"><i class="fab fa-paypal"></i></a>
        </div>
        <div class="paypal-tip">{{'paypal-approve-tip'|i18n}}</div>
      </div> <!--End PayPal-->
    </div>
    <!--
      Others
    -->
    <div
      v-else
        class="as-main">{{myOrder}}</div>
    <!--
      Check Button
    -->
    <div class="as-check">
      <div class="ti-btn is-huge"
        @click.left="OnClickCheckBtn">
        <ti-icon class="as-icon" :value="CheckBtnIcon"/>
        <div class="as-text">{{CheckBtnText|i18n}}</div>
      </div>
    </div>
  </template>
</div>`);
//========================================
// JOIN <web-pay-proceed.mjs> ti/com/web/pay/proceed/web-pay-proceed.mjs
//========================================
Ti.Preload("ti/com/web/pay/proceed/web-pay-proceed.mjs", TI_PACK_EXPORTS['ti/com/web/pay/proceed/web-pay-proceed.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/pay/proceed/_com.json
//========================================
Ti.Preload("ti/com/web/pay/proceed/_com.json", {
  "name" : "web-pay-proceed",
  "globally" : true,
  "template" : "./web-pay-proceed.html",
  "props": "./web-pay-proceed-props.mjs",
  "mixins"   : ["./web-pay-proceed.mjs"]
});
//========================================
// JOIN <web-pay.html> ti/com/web/pay/web-pay.html
//========================================
Ti.Preload("ti/com/web/pay/web-pay.html", `<div class="web-pay">
  <ti-wizard
    :current="0"
    :title="title"
    :steps="PaySteps"
    :value="myPayment"
    can-click-head-item="passed"
    @change="OnChange"/>
</div>`);
//========================================
// JOIN <web-pay.mjs> ti/com/web/pay/web-pay.mjs
//========================================
Ti.Preload("ti/com/web/pay/web-pay.mjs", TI_PACK_EXPORTS['ti/com/web/pay/web-pay.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/pay/_com.json
//========================================
Ti.Preload("ti/com/web/pay/_com.json", {
  "name" : "web-pay",
  "globally" : true,
  "template" : "./web-pay.html",
  "props"    : [
    "@com:web/pay/checkout/web-pay-checkout-props.mjs",
    "@com:web/pay/choose/web-pay-choose-props.mjs",
    "@com:web/pay/proceed/web-pay-proceed-props.mjs",
    "@com:web/pay/done/web-pay-done-props.mjs"
  ],
  "mixins"   : ["./web-pay.mjs"],
  "components": [
    "@com:ti/wizard",
    "@com:web/pay/checkout",
    "@com:web/pay/choose",
    "@com:web/pay/proceed",
    "@com:web/pay/done"
  ]
});
//========================================
// JOIN <web-row-article.html> ti/com/web/row/article/web-row-article.html
//========================================
Ti.Preload("ti/com/web/row/article/web-row-article.html", `<div class="web-row-article"
  :class="TopClass">
  <!--
    Left: Thumbnail
  -->
  <div 
    class="at-left"
      v-if="ThumbSrc">
      <a
        :href="ArticleLinkHref"
        :target="ArticleLinkTarget"
        @click.left="OnClickLink($event)">
        <img :src="ThumbSrc" :style="ThumbImageStyle"/>
      </a>
  </div>
  <!--
    Right: Comment
  -->
  <div class="at-right">
    <!-- Title -->
    <div class="as-title">
      <a
        :href="ArticleLinkHref"
        :target="ArticleLinkTarget"
        @click.left="OnClickLink($event)">{{Article.title}}</a>
    </div>
    <!--Info-->
    <div 
      v-if="hasInfo"
        class="as-info">
        <!--Date-->
        <div
          v-if="DateText" 
            class="as-date">{{DateText}}</div>
        <!--Watch count-->
        <div 
          v-if="Article.watchCount"
            class="as-watch-count">
            <i class="fas fa-eye"></i>
            <span>{{Article.watchCount}}</span></div>
        <!--Read time-->
        <div 
          v-if="Article.readTime"
            class="as-read-time">
            <span>{{'i18n:du-in-min'|i18n({n:Article.readTime})}}</span>
          </div>
    </div>
    <!--Brief-->
    <div class="as-brief">{{Article.brief}}</div>
  </div>
</div>`);
//========================================
// JOIN <web-row-article.mjs> ti/com/web/row/article/web-row-article.mjs
//========================================
Ti.Preload("ti/com/web/row/article/web-row-article.mjs", TI_PACK_EXPORTS['ti/com/web/row/article/web-row-article.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/row/article/_com.json
//========================================
Ti.Preload("ti/com/web/row/article/_com.json", {
  "name" : "web-row-article",
  "globally" : true,
  "template" : "./web-row-article.html",
  "mixins" : ["./web-row-article.mjs"]
});
//========================================
// JOIN <web-shelf-free.html> ti/com/web/shelf/free/web-shelf-free.html
//========================================
Ti.Preload("ti/com/web/shelf/free/web-shelf-free.html", `<div class="web-shelf-free"
  :class="TopClass"
  :style="TopStyle">
  <!--=============================-->
  <div class="free-main"
    :style="MainStyle">
    <div 
      v-for="it in itemList"
        :key="it.key"
        class="free-item"
        :class="it.className"
        :style="it.style">
        <component
          :is="it.comType"
          v-bind="it.comConf"/>
    </div>
  </div>
  <!--=============================-->
</div>`);
//========================================
// JOIN <web-shelf-free.mjs> ti/com/web/shelf/free/web-shelf-free.mjs
//========================================
Ti.Preload("ti/com/web/shelf/free/web-shelf-free.mjs", TI_PACK_EXPORTS['ti/com/web/shelf/free/web-shelf-free.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/shelf/free/_com.json
//========================================
Ti.Preload("ti/com/web/shelf/free/_com.json", {
  "name" : "web-shelf-free",
  "globally" : true,
  "template" : "./web-shelf-free.html",
  "mixins" : ["./web-shelf-free.mjs"]
});
//========================================
// JOIN <web-shelf-gallary.html> ti/com/web/shelf/gallary/web-shelf-gallary.html
//========================================
Ti.Preload("ti/com/web/shelf/gallary/web-shelf-gallary.html", `<div class="web-shelf-gallary"
  :class="TopClass"
  :style="TopStyle"
  @mouseleave="OnMouseLeave">
  <div ref="con" class="as-gallary-con">
    <!--
      Each component container
    -->
    <div
      v-for="it in myItemList"
        :key="it.index"
        :it-index="it.index"
        class="as-gallary-item"
        :style="getItemStyle(it.index)"
        @mouseenter="OnMouseEnterItem(it)">
      <!--
        Component
      -->
      <compnent
        v-if="it.comType"
          class="ti-fill-parent"
          :is="it.comType"
          v-bind="it.comConf"
          :abc="it.comConf.abc"/>
      <!--
        Placeholder
      -->
      <span v-else>Item {{it.index}}</span>
    </div>
</div></div>`);
//========================================
// JOIN <web-shelf-gallary.mjs> ti/com/web/shelf/gallary/web-shelf-gallary.mjs
//========================================
Ti.Preload("ti/com/web/shelf/gallary/web-shelf-gallary.mjs", TI_PACK_EXPORTS['ti/com/web/shelf/gallary/web-shelf-gallary.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/shelf/gallary/_com.json
//========================================
Ti.Preload("ti/com/web/shelf/gallary/_com.json", {
  "name" : "web-shelf-gallary",
  "globally" : true,
  "template" : "./web-shelf-gallary.html",
  "mixins" : ["./web-shelf-gallary.mjs"]
});
//========================================
// JOIN <web-shelf-iconbox.html> ti/com/web/shelf/iconbox/web-shelf-iconbox.html
//========================================
Ti.Preload("ti/com/web/shelf/iconbox/web-shelf-iconbox.html", `<div class="web-shelf-iconbox"
  :class="TopClass"
  :style="TopStyle">
  <!--
    Icon
  -->
  <div class="as-icon" @click.left="OnToggleMode">
    <ti-icon :value="icon" v-bind="iconConf"/>
  </div>
  <!--
    Mask
  -->
  <transition name="ti-trans-fade">
    <div
      v-if="isOpened"
        class="as-mask"
        @click.left="OnToggleMode"></div>
  </transition>
  <!--
    Panel
  -->
  <transition :name="PanelTransName">
    <div
      v-if="isOpened"
        class="as-panel"
        :style="PanelStyle"><div class="as-con">
        <!--Head-->
        <component
          v-if="hasHead"
            class="as-head"
            :is="head.comType"
            v-bind="head.comConf"/>
        <!--Body-->
        <component
          v-if="hasBody"
            class="as-body"
            :is="body.comType"
            v-bind="body.comConf"/>
        <!--Foot-->
        <component
          v-if="hasFoot"
            class="as-foot"
            :is="foot.comType"
            v-bind="foot.comConf"/>
        <!--Closer-->
        <div
          v-if="closeIcon"
            class="as-closer"
            @click.left="OnToggleMode">
            <ti-icon :value="closeIcon"/>
        </div>
    </div></div>
  </transition>
</div>`);
//========================================
// JOIN <web-shelf-iconbox.mjs> ti/com/web/shelf/iconbox/web-shelf-iconbox.mjs
//========================================
Ti.Preload("ti/com/web/shelf/iconbox/web-shelf-iconbox.mjs", TI_PACK_EXPORTS['ti/com/web/shelf/iconbox/web-shelf-iconbox.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/shelf/iconbox/_com.json
//========================================
Ti.Preload("ti/com/web/shelf/iconbox/_com.json", {
  "name" : "web-shelf-iconbox",
  "globally" : true,
  "template" : "./web-shelf-iconbox.html",
  "mixins" : ["./web-shelf-iconbox.mjs"]
});
//========================================
// JOIN <web-shelf-list.html> ti/com/web/shelf/list/web-shelf-list.html
//========================================
Ti.Preload("ti/com/web/shelf/list/web-shelf-list.html", `<div class="web-shelf-list"
  :class="TopClass">
  <!--
    Loading
  -->
  <ti-loading
    v-if="isLoading"
      class="as-big"
      v-bind="loadingAs"/>
  <!--
    Blank
  -->
  <ti-loading
    v-else-if="isEmpty"
      class="as-big"
      v-bind="blankAs"/>
  <!--
    Each Items in trans
  -->
  <template v-else-if="ItemTransName">
    <transition-group
      tag="div"
      :name="ItemTransName"
      class="list-con ti-trans">
      <div
        v-for="it in ItemList"
          class="list-item"
          :class="ItemTransSpeedClassName"
          :key="it.key">
          <component
            :is="it.comType"
            v-bind="it.comConf"/>    
      </div>
    </transition-group>
  </template>
  <!--
    Each Items no trans
  -->
  <div
    v-else
      class="list-con">
      <div
        v-for="it in ItemList"
          class="list-item"
          :class="ItemTransSpeedClassName"
          :key="it.key">
          <component
            :is="it.comType"
            v-bind="it.comConf"/>    
      </div>
  </div>
</div>`);
//========================================
// JOIN <web-shelf-list.mjs> ti/com/web/shelf/list/web-shelf-list.mjs
//========================================
Ti.Preload("ti/com/web/shelf/list/web-shelf-list.mjs", TI_PACK_EXPORTS['ti/com/web/shelf/list/web-shelf-list.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/shelf/list/_com.json
//========================================
Ti.Preload("ti/com/web/shelf/list/_com.json", {
  "name" : "web-shelf-list",
  "globally" : true,
  "template" : "./web-shelf-list.html",
  "mixins" : ["./web-shelf-list.mjs"]
});
//========================================
// JOIN <web-shelf-scroller.html> ti/com/web/shelf/scroller/web-shelf-scroller.html
//========================================
Ti.Preload("ti/com/web/shelf/scroller/web-shelf-scroller.html", `<div class="web-shelf-scroller"
  :class="TopClass">
  <!--=======================================-->
  <div class="scroll-btn at-left" :class="BtnLeftClass">
    <span @click.left="OnScrollLeft"><ti-icon :value="iconLeft"/></span>
  </div>
  <!--=======================================-->
  <div class="scroller-outer" ref="outer">
    <!--=====================================-->
    <div class="scroller-inner" ref="inner"
      :style="InnerStyle">
      <!--===================================-->
      <div
        v-for="it in ItemList"
          class="scroller-tile"
          :key="it.key"
          :style="ItemStyle"
          :class="it.className"
          @mouseenter="OnEnterTile(it.rawData)"
          @mouseleave="OnLeaveTile(it.rawData)">
          <component
            :is="it.comType"
            v-bind="it.comConf"/>
      </div>
      <!--===================================-->
    </div>
    <!--=====================================-->
  </div>
  <!--=======================================-->
  <div class="scroll-btn at-right" :class="BtnRightClass">
    <span @click.left="OnScrollRight"><ti-icon :value="iconRight"/></span>
  </div>
  <!--=======================================-->
</div>`);
//========================================
// JOIN <web-shelf-scroller.mjs> ti/com/web/shelf/scroller/web-shelf-scroller.mjs
//========================================
Ti.Preload("ti/com/web/shelf/scroller/web-shelf-scroller.mjs", TI_PACK_EXPORTS['ti/com/web/shelf/scroller/web-shelf-scroller.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/shelf/scroller/_com.json
//========================================
Ti.Preload("ti/com/web/shelf/scroller/_com.json", {
  "name" : "web-shelf-scroller",
  "globally" : true,
  "template" : "./web-shelf-scroller.html",
  "mixins" : ["./web-shelf-scroller.mjs"]
});
//========================================
// JOIN <web-shelf-slide.html> ti/com/web/shelf/slide/web-shelf-slide.html
//========================================
Ti.Preload("ti/com/web/shelf/slide/web-shelf-slide.html", `<div class="web-shelf-slide"
  :class="TopClass"
  :style="TopStyle">
  <!--
    Main
  -->
  <div class="as-main">
    <div
      v-for="it in ItemList"
        :key="it.key"
        class="as-con"
        :class="it.className">
        <component :is="it.comType" v-bind="it.comConf"/>
    </div>
  </div>
  <!--
    Item List
  -->
  <div class="as-indicator">
    <div
      v-for="it in ItemList"
        class="as-item"
        :class="it.className"
        @click.left.stop="OnClickIndicator(it)">
    </div>
  </div>
  <!--
    Btn: Prev
  -->
  <div class="as-btn is-prev" @click.left="prevItem">
    <i class="im im-angle-left"></i>
  </div>
  <!--
    Btn: Next
  -->
  <div class="as-btn is-next" @click.left="nextItem">
    <i class="im im-angle-right"></i>
  </div>
</div>`);
//========================================
// JOIN <web-shelf-slide.mjs> ti/com/web/shelf/slide/web-shelf-slide.mjs
//========================================
Ti.Preload("ti/com/web/shelf/slide/web-shelf-slide.mjs", TI_PACK_EXPORTS['ti/com/web/shelf/slide/web-shelf-slide.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/shelf/slide/_com.json
//========================================
Ti.Preload("ti/com/web/shelf/slide/_com.json", {
  "name" : "web-shelf-slide",
  "globally" : true,
  "template" : "./web-shelf-slide.html",
  "mixins" : ["./web-shelf-slide.mjs"]
});
//========================================
// JOIN <web-shelf-wall.html> ti/com/web/shelf/wall/web-shelf-wall.html
//========================================
Ti.Preload("ti/com/web/shelf/wall/web-shelf-wall.html", `<div class="web-shelf-wall"
  :class="TopClass">
  <!--
    Loading
  -->
  <ti-loading
    v-if="isLoading"
      class="as-big"
      v-bind="loadingAs"/>
  <!--
    Blank
  -->
  <ti-loading
    v-else-if="isEmpty"
      class="as-big"
      v-bind="blankAs"/>
  <!--
    Each Items
  -->
  <div v-else class="wall-group" ref="group">
    <!--
      ===========================================
      Items in row
    -->
    <div
      v-for="it in WallItems"
        :key="it.key"
        class="wall-tile is-com"
        :class="it.className"
        :style="it.style">
        <component :is="it.comType" v-bind="it.comConf"/>
    </div>
    <!--
      ===========================================
      Blank items
    -->
    <div
      v-for="it in BlankItems"
        :key="it.key"
        class="wall-tile is-blank"
        :class="it.className"
        :style="it.style"></div>
  </div> <!--End Row-->
</div>`);
//========================================
// JOIN <web-shelf-wall.mjs> ti/com/web/shelf/wall/web-shelf-wall.mjs
//========================================
Ti.Preload("ti/com/web/shelf/wall/web-shelf-wall.mjs", TI_PACK_EXPORTS['ti/com/web/shelf/wall/web-shelf-wall.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/shelf/wall/_com.json
//========================================
Ti.Preload("ti/com/web/shelf/wall/_com.json", {
  "name" : "web-shelf-wall",
  "globally" : true,
  "template" : "./web-shelf-wall.html",
  "mixins" : ["./web-shelf-wall.mjs"]
});
//========================================
// JOIN <web-text-article.html> ti/com/web/text/article/web-text-article.html
//========================================
Ti.Preload("ti/com/web/text/article/web-text-article.html", `<div class="web-text-article" :class="TopClass">
  <!--- Loading -->
  <TiLoading
    v-if="isLoading && loadingAs"
      v-bind="loadingAs"/>
  <!-- Blank -->
  <component
    v-else-if="isBlank && blankAs"
      :is="blankAs.comType"
      v-bind="blankAs.comConf"/>
  <!-- Render content -->
  <article ref="main"
    :class="ArticleClass"></article>
</div>`);
//========================================
// JOIN <web-text-article.mjs> ti/com/web/text/article/web-text-article.mjs
//========================================
Ti.Preload("ti/com/web/text/article/web-text-article.mjs", TI_PACK_EXPORTS['ti/com/web/text/article/web-text-article.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/text/article/_com.json
//========================================
Ti.Preload("ti/com/web/text/article/_com.json", {
  "name" : "web-text-article",
  "globally" : true,
  "template" : "./web-text-article.html",
  "mixins"   : ["./web-text-article.mjs"]
});
//========================================
// JOIN <web-text-heading.html> ti/com/web/text/heading/web-text-heading.html
//========================================
Ti.Preload("ti/com/web/text/heading/web-text-heading.html", `<div class="web-text-heading"
  :class="TopClass">
  <!--Icon-->
  <div
    v-if="icon"
      class="as-icon"><ti-icon :value="icon"/></div>
  <!--Title-->
  <a
    v-if="title"
      class="as-title"
      :class="TitleClass"
      :style="TitleStyle"
      :href="href"
      @click.left="OnClickTitle"><span>{{title | i18n}}</span></a>
  <!--Comments-->
  <div
    v-if="comment"
      class="as-comment"><span>{{comment | i18n}}</span></div>
  <!--View more-->
  <a
    v-if="showMore"
      class="as-more"
      :href="moreHref"
      @click.left="OnClickMore">
      <TiIcon v-if="moreIcon" :value="moreIcon"/>
      <span v-if="moreText">{{moreText | i18n}}</span>
  </a>
</div>`);
//========================================
// JOIN <web-text-heading.mjs> ti/com/web/text/heading/web-text-heading.mjs
//========================================
Ti.Preload("ti/com/web/text/heading/web-text-heading.mjs", TI_PACK_EXPORTS['ti/com/web/text/heading/web-text-heading.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/text/heading/_com.json
//========================================
Ti.Preload("ti/com/web/text/heading/_com.json", {
  "name" : "web-text-heading",
  "globally" : true,
  "template" : "./web-text-heading.html",
  "mixins"   : ["./web-text-heading.mjs"]
});
//========================================
// JOIN <web-text-raw.html> ti/com/web/text/raw/web-text-raw.html
//========================================
Ti.Preload("ti/com/web/text/raw/web-text-raw.html", `<div class="web-text-raw" :class="TopClass">
  <!--
    Icon
  -->
  <ti-icon 
    v-if="icon"
      :value="icon"/>
  <!--
    Value As Text
  -->
  <div
    v-if="hasValue"
      class="as-text">
      <template v-if="i18n">
        <div v-for="li in TheValue">{{li | i18n}}</div>
      </template>
      <template v-else>
        <div v-for="li in TheValue">{{li}}</div>
      </template>
  </div>
</div>`);
//========================================
// JOIN <web-text-raw.mjs> ti/com/web/text/raw/web-text-raw.mjs
//========================================
Ti.Preload("ti/com/web/text/raw/web-text-raw.mjs", TI_PACK_EXPORTS['ti/com/web/text/raw/web-text-raw.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/text/raw/_com.json
//========================================
Ti.Preload("ti/com/web/text/raw/_com.json", {
  "name" : "web-text-raw",
  "globally" : true,
  "template" : "./web-text-raw.html",
  "mixins"   : ["./web-text-raw.mjs"]
});
//========================================
// JOIN <web-tile-address.html> ti/com/web/tile/address/web-tile-address.html
//========================================
Ti.Preload("ti/com/web/tile/address/web-tile-address.html", `<div class="web-tile-address"
  :class="TopClass"
  @click.left="OnClickTop">
  <!--
    Center
  -->
  <div class="at-center">
    <!--Has Value-->
    <template v-if="hasValue">
      <div class="is-info">
        <div
          v-if="Item.consignee">
            <span>{{'address-consignee'|i18n}}:</span>
            <em>{{Item.consignee}}</em></div>
        <div
          v-if="Item.phone">
            <span>{{'address-k-phone'|i18n}}:</span>
            <em>{{Item.phone}}</em></div>
        <div
          v-if="Item.email">
            <span>{{'address-k-email'|i18n}}:</span>
            <em>{{Item.email}}</em></div>
      </div>
      <div class="is-big">
        <span class="as-street">{{Item.street}}</span>
        <span class="as-door">{{Item.door}}</span>
      </div>
    </template>
    <!--Blank-->
    <ti-loading
      v-else 
        class="as-big ti-fill-parent"
        style="padding:0"
        v-bind="blankAs"/>
  </div>
  <!--
    Left top
  -->
  <div class="at-left-top is-float">
    <template v-if="title">
      <span class="is-bold">{{title | i18n}}</span>
    </template>
    <template v-else>
      <a 
        v-if="can.default && !Item.dftaddr"
          @click="OnSetDefault">{{'address-set-dft'|i18n}}</a>
      <span
        v-else-if="Item.dftaddr"
          class="is-bold">{{'address-is-dft'|i18n}}</span>
    </template>
  </div>
  <!--
    Left-bottom
  -->
  <div class="at-left-bottom is-float">
    <span
      v-if="Item.city">{{Item.city}}</span>
    <span
      v-if="Item.province">{{Item.province}}</span>
    <span
      v-if="showCountry && Item.countryName">{{Item.countryName}}</span>
  </div>
  <!--
    Right-top
  -->
  <div
    v-if="can.remove || can.edit || can.choose" 
      class="at-right-top is-float">
      <a v-if="can.remove" @click="OnRemove">{{'del'|i18n}}</a>
      <a v-if="can.edit" @click="OnEdit">{{'edit'|i18n}}</a>
      <a v-if="can.choose" @click="OnChoose">{{'choose'|i18n}}</a>
      <a v-if="can.add" @click="OnAdd">{{'address-shipping-add'|i18n}}</a>
  </div>  
</div>`);
//========================================
// JOIN <web-tile-address.mjs> ti/com/web/tile/address/web-tile-address.mjs
//========================================
Ti.Preload("ti/com/web/tile/address/web-tile-address.mjs", TI_PACK_EXPORTS['ti/com/web/tile/address/web-tile-address.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/tile/address/_com.json
//========================================
Ti.Preload("ti/com/web/tile/address/_com.json", {
  "name" : "web-tile-address",
  "globally" : true,
  "template" : "./web-tile-address.html",
  "mixins" : ["./web-tile-address.mjs"]
});
//========================================
// JOIN <web-tile-article.html> ti/com/web/tile/article/web-tile-article.html
//========================================
Ti.Preload("ti/com/web/tile/article/web-tile-article.html", `<div class="web-tile-article"
  :class="TopClass"
  :style="TopStyle">
  <!--
    Title
  -->
  <header
    v-if="title"
      :style="HeaderStyle">{{title | i18n}}</header>
  <!--
    Content
  -->
  <article v-if="content" v-html="HtmlContent"></article>
  <!--
    Button
  -->
  <footer v-if="hasButton">
    <a class="as-btn" :href="href">
      <span v-if="btnText" class="as-text">{{btnText|i18n}}</span>
      <TiIcon v-if="btnIcon" :value="btnIcon"/>
    </a>
  </footer>
</div>`);
//========================================
// JOIN <web-tile-article.mjs> ti/com/web/tile/article/web-tile-article.mjs
//========================================
Ti.Preload("ti/com/web/tile/article/web-tile-article.mjs", TI_PACK_EXPORTS['ti/com/web/tile/article/web-tile-article.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/tile/article/_com.json
//========================================
Ti.Preload("ti/com/web/tile/article/_com.json", {
  "name" : "web-tile-article",
  "globally" : true,
  "template" : "./web-tile-article.html",
  "mixins" : ["./web-tile-article.mjs"]
});
//========================================
// JOIN <web-tile-comment.html> ti/com/web/tile/comment/web-tile-comment.html
//========================================
Ti.Preload("ti/com/web/tile/comment/web-tile-comment.html", `<div class="web-tile-comment"
  :class="TopClass">
  <!--
    Left: User Avator
  -->
  <div class="at-left">
    <ti-icon :value="AvatarIcon"/>
  </div>
  <!--
    Right: Comment
  -->
  <div class="at-right">
      <!--Head-->
      <div class="as-head">
        <span class="as-u-name">{{Post.userName}}</span>
        <span class="as-time">{{CreateTimeText}}</span>
      </div>
      <!--Content-->
      <div class="as-content">{{Post.content}}</div>
  </div>
</div>`);
//========================================
// JOIN <web-tile-comment.mjs> ti/com/web/tile/comment/web-tile-comment.mjs
//========================================
Ti.Preload("ti/com/web/tile/comment/web-tile-comment.mjs", TI_PACK_EXPORTS['ti/com/web/tile/comment/web-tile-comment.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/tile/comment/_com.json
//========================================
Ti.Preload("ti/com/web/tile/comment/_com.json", {
  "name" : "web-tile-comment",
  "globally" : true,
  "template" : "./web-tile-comment.html",
  "mixins" : ["./web-tile-comment.mjs"]
});
//========================================
// JOIN <web-tile-order.html> ti/com/web/tile/order/web-tile-order.html
//========================================
Ti.Preload("ti/com/web/tile/order/web-tile-order.html", `<div class="web-tile-order"
  :class="TopClass">
  <!--
    Summary
  -->
  <div class="as-summary">
    <!--ID-->
    <div class="or-field as-id">
      <span>{{'order-k-id'|i18n}}</span>
      <a 
        v-if="OrderHref"
          :href="OrderHref"
          @click.left.prevent="OnClickOrder">{{OrderId}}</a>
      <em
        v-else>{{OrderId}}</em>
    </div>
    <!--Date-->
    <div class="or-field as-datetime">
      <span>{{'wn-key-ct'|i18n}}</span>
      <em>{{Order.ct|datetime}}</em>
    </div>
    <!--Fee-->
    <div class="or-field as-price">
      <span>{{'order-k-fee'|i18n}}</span>
      <em>{{CurrencyChar}}{{Order.fee}}</em>
    </div>
    <!--Payment-->
    <div class="or-field as-pay_tp">
      <span>{{'order-k-pay_tp'|i18n}}</span>
      <em>{{'pay-by-'+Order.pay_tp|i18n}}</em>
    </div>
    <!--Status-->
    <div class="or-field as-st">
      <span>{{'order-k-st'|i18n}}</span>
      <em>{{OrderStatus|i18n}}</em>
    </div>
  </div>
  <!--
    Product list
  -->
  <div class="as-products">
    <table>
      <tr
        v-for="it in Products"
          class="as-pro-it">
          <!--Thumb-->
          <td><a 
              :href="it.href"
              @click.left.prevent="OnClickProduct(it)"><img :src="it.src"/></a></td>
          <!--Title-->
          <td>
              <a 
                :href="it.href"
                @click.left.prevent="OnClickProduct(it)">{{it.title}}</a>
          </td>
          <!--Price-->
          <td class="as-price">{{CurrencyChar}}{{it.price}}</td>
          <!--Amount-->
          <td class="as-amount">x{{it.amount}}</td>
          <!--Subtotal-->
          <td class="as-subtotal">{{CurrencyChar}}{{it.subtotal}}</td>
      </tr>
    </table>
  </div>
</div>`);
//========================================
// JOIN <web-tile-order.mjs> ti/com/web/tile/order/web-tile-order.mjs
//========================================
Ti.Preload("ti/com/web/tile/order/web-tile-order.mjs", TI_PACK_EXPORTS['ti/com/web/tile/order/web-tile-order.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/tile/order/_com.json
//========================================
Ti.Preload("ti/com/web/tile/order/_com.json", {
  "name" : "web-tile-order",
  "globally" : true,
  "template" : "./web-tile-order.html",
  "mixins" : ["./web-tile-order.mjs"]
});
//========================================
// JOIN <widget-frame.html> ti/com/web/widget/frame/widget-frame.html
//========================================
Ti.Preload("ti/com/web/widget/frame/widget-frame.html", `<div class="web-widget-frame"
  :class="TopClass">
  <template v-if="hasFrameSrce">
    <iframe :src="FrameSrce" class="ti-fill-parent" :style="FrameStyle"></iframe>
  </template>
</div>`);
//========================================
// JOIN <widget-frame.mjs> ti/com/web/widget/frame/widget-frame.mjs
//========================================
Ti.Preload("ti/com/web/widget/frame/widget-frame.mjs", TI_PACK_EXPORTS['ti/com/web/widget/frame/widget-frame.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/widget/frame/_com.json
//========================================
Ti.Preload("ti/com/web/widget/frame/_com.json", {
  "name" : "web-widget-frame",
  "globally" : true,
  "template" : "./widget-frame.html",
  "mixins"   : ["./widget-frame.mjs"],
  "components" : []
});
//========================================
// JOIN <widget-input-text.html> ti/com/web/widget/input/text/widget-input-text.html
//========================================
Ti.Preload("ti/com/web/widget/input/text/widget-input-text.html", `<div class="web-widget-input-text" 
  :class="TopClass" 
  :style="TopStyle"
  v-ti-activable>
  <!--
    Title
  -->
  <div
    v-if="hasTitle"
      class="as-title">
      <span>{{title|i18n}}</span>
      <template v-if="total">
        <i class="far fa-comments"></i>
        <em>{{total}}</em>
      </template>
  </div>
  <!--
    Text
  -->
  <div class="as-text">
    <textarea
      ref="text"
      spellcheck="false"
      :placeholder="placeholder | i18n"
      :value="TextValue"
      @change="OnTextChange"></textarea>
    <!--
      Bottom Bar
    -->
    <div class="as-bar">
      <!--
        Left
      -->
      <div class="at-left">
        <div class="as-btn btn-emoji"
          @click.left="OnBtnEmojiClick">
          <ti-icon 
            v-if="emojiBtnIcon"
              :value="emojiBtnIcon"/>
          <span>{{emojiBtnText|i18n}}</span>
        </div>
      </div> <!--Left-->
      <!--
        Right
      -->
      <div class="at-right">
        <div class="as-btn btn-post"
          @click.left="OnBtnPostClick">
          <ti-icon 
            v-if="postBtnIcon"
              :value="postBtnIcon"/>
          <span>{{postBtnText|i18n}}</span>
        </div>
      </div> <!-- Right -->
    </div> <!-- Bottom Bar-->
  </div>
</div>`);
//========================================
// JOIN <widget-input-text.mjs> ti/com/web/widget/input/text/widget-input-text.mjs
//========================================
Ti.Preload("ti/com/web/widget/input/text/widget-input-text.mjs", TI_PACK_EXPORTS['ti/com/web/widget/input/text/widget-input-text.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/widget/input/text/_com.json
//========================================
Ti.Preload("ti/com/web/widget/input/text/_com.json", {
  "name" : "web-widget-input-text",
  "globally" : true,
  "template" : "./widget-input-text.html",
  "mixins" : ["./widget-input-text.mjs"],
  "components" : [
    "@com:ti/sheet/emoji"]
});
//========================================
// JOIN <widget-sharebar.html> ti/com/web/widget/sharebar/widget-sharebar.html
//========================================
Ti.Preload("ti/com/web/widget/sharebar/widget-sharebar.html", `<div class="web-widget-sharebar"
  :class="TopClass">
  <!--
    Title
  -->
  <div
    v-if="title"
      class="as-title">{{title|i18n}}</div>
  <!--
    Items
  -->
  <div class="as-items">
    <a
      v-for="it in TheItems"
        class="bar-item"
        @click.left="OnClickItem(it)">
        <i :class="it.iconClass"></i>
    </a>
  </div>
</div>`);
//========================================
// JOIN <widget-sharebar.mjs> ti/com/web/widget/sharebar/widget-sharebar.mjs
//========================================
Ti.Preload("ti/com/web/widget/sharebar/widget-sharebar.mjs", TI_PACK_EXPORTS['ti/com/web/widget/sharebar/widget-sharebar.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/widget/sharebar/_com.json
//========================================
Ti.Preload("ti/com/web/widget/sharebar/_com.json", {
  "name" : "web-widget-sharebar",
  "globally" : true,
  "template" : "./widget-sharebar.html",
  "mixins"   : ["./widget-sharebar.mjs"],
  "components" : []
});
//========================================
// JOIN <widget-summary.html> ti/com/web/widget/summary/widget-summary.html
//========================================
Ti.Preload("ti/com/web/widget/summary/widget-summary.html", `<div class="web-widget-summary"
  :class="TopClass">
  <!--
    Title
  -->
  <div
    v-if="title"
      class="as-title">{{title|i18n}}</div>
  <!--
    Items
  -->
  <div class="as-list">
    <div
      v-for="it in TheItems"
        class="as-item">
      <!--Icon-->
      <ti-icon
        v-if="it.icon"
          :value="it.icon"/>
      <!--Value-->
      <div class="as-value">{{it.value}}</div>
      <!--Text-->
      <div
        v-if="it.text"
          class="as-text">{{it.text|i18n}}</div>
    </div>
  </div>
</div>`);
//========================================
// JOIN <widget-summary.mjs> ti/com/web/widget/summary/widget-summary.mjs
//========================================
Ti.Preload("ti/com/web/widget/summary/widget-summary.mjs", TI_PACK_EXPORTS['ti/com/web/widget/summary/widget-summary.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/widget/summary/_com.json
//========================================
Ti.Preload("ti/com/web/widget/summary/_com.json", {
  "name" : "web-widget-summary",
  "globally" : true,
  "template" : "./widget-summary.html",
  "mixins"   : ["./widget-summary.mjs"],
  "components" : []
});
//========================================
// JOIN <widget-user.html> ti/com/web/widget/user/widget-user.html
//========================================
Ti.Preload("ti/com/web/widget/user/widget-user.html", `<div class="web-widget-user"
  :class="TopClass">
  <!--
    Avatar
  -->
  <div class="as-avatar">
    <ti-icon :value="TheAvatar"/>
  </div>
  <!--
    Nickname
  -->
  <div class="as-title">
    <div class="as-nickname">{{TheNickname}}</div>
  </div>
  <!--
    Action bar
  -->
  <div class="as-actions">
    <div 
      class="ti-btn reset-passwd"
      @click="$notify('go:passwd:reset')">{{'passwd-reset'|i18n}}</div>
    <div
      class="ti-btn edit-profile"
      @click="$notify('go:my:profile')">{{'profile-edit'|i18n}}</div>
  </div>
</div>`);
//========================================
// JOIN <widget-user.mjs> ti/com/web/widget/user/widget-user.mjs
//========================================
Ti.Preload("ti/com/web/widget/user/widget-user.mjs", TI_PACK_EXPORTS['ti/com/web/widget/user/widget-user.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/widget/user/_com.json
//========================================
Ti.Preload("ti/com/web/widget/user/_com.json", {
  "name" : "web-widget-user",
  "globally" : true,
  "template" : "./widget-user.html",
  "mixins"   : ["./widget-user.mjs"],
  "components" : []
});
//========================================
// JOIN <wn-adaptlist-methods.mjs> ti/com/wn/adaptlist/wn-adaptlist-methods.mjs
//========================================
Ti.Preload("ti/com/wn/adaptlist/wn-adaptlist-methods.mjs", TI_PACK_EXPORTS['ti/com/wn/adaptlist/wn-adaptlist-methods.mjs']);
//========================================
// JOIN <wn-adaptlist-props.mjs> ti/com/wn/adaptlist/wn-adaptlist-props.mjs
//========================================
Ti.Preload("ti/com/wn/adaptlist/wn-adaptlist-props.mjs", TI_PACK_EXPORTS['ti/com/wn/adaptlist/wn-adaptlist-props.mjs']);
//========================================
// JOIN <wn-adaptlist.html> ti/com/wn/adaptlist/wn-adaptlist.html
//========================================
Ti.Preload("ti/com/wn/adaptlist/wn-adaptlist.html", `<div class="wn-adaptlist" 
  :class="TopClass"
  v-ti-activable>
  <div
    class="list-con ti-fill-parent"
    v-drop-files.mask="UploadDragAndDropHandler">
    <!--==================================
      Show Loading
    -->
    <ti-loading
      v-if="isReloading"
        class="as-reloading as-mid-tip"
        text="i18n:reloading"/>
    <!--==================================
      Data List
    -->
    <ti-wall
      v-else
        class="ti-fill-parent"
        :data="WallDataList"
        :spacing="spacing"
        :changed-id="changedId"
        :current-id="myCurrentId"
        :checked-ids="myCheckedIds"
        :multi="multi"
        :checkable="checkable"
        :blurable="blurable"
        :selectable="selectable"
        :display="WallItemDisplay"
        :puppet-mode="true"
        v-bind="listConf"
        :on-init="OnListInit"
        @select="OnItemSelecteItem"
        @open="OnItemOpen"/>
    <!--==================================
      Hidden file upload control
    -->
    <input 
      type="file" 
      ref="file" 
      class="ti-hide"
      :accept="AcceptUploadFiles"
      multiple
      @change.stop.seft="OnSelectLocalFilesToUpload">
    <!--==================================
      Uploading Pannel
    -->
    <div
      class="wal-uploading"
      :class="UploadingClass">
      <header>
        <ti-icon value="fas-spinner fa-pulse"/>
        <span>{{'uploading'|i18n}}</span>
      </header>
      <section>
        <ti-wall 
          :data="TheUploadingList"
          :spacing="spacing"
          :selectable="false"
          :multi="false"
          :checkable="false"
          :blurable="false"
          :display="UploadingItemDisplay"
          :puppet-mode="true"/>
      </section>
    </div>
    <!--==================================-->
  </div>
</div>`);
//========================================
// JOIN <wn-adaptlist.mjs> ti/com/wn/adaptlist/wn-adaptlist.mjs
//========================================
Ti.Preload("ti/com/wn/adaptlist/wn-adaptlist.mjs", TI_PACK_EXPORTS['ti/com/wn/adaptlist/wn-adaptlist.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/adaptlist/_com.json
//========================================
Ti.Preload("ti/com/wn/adaptlist/_com.json", {
  "name" : "wn-adaptlist",
  "globally" : true,
  "template" : "./wn-adaptlist.html",
  "props" : "./wn-adaptlist-props.mjs",
  "methods" : "./wn-adaptlist-methods.mjs",
  "mixins" : ["./wn-adaptlist.mjs"],
  "components" : [
    "@com:ti/obj/thumb",
    "@com:ti/wall"]
});
//========================================
// JOIN <wn-chart-combo.html> ti/com/wn/chart/combo/wn-chart-combo.html
//========================================
Ti.Preload("ti/com/wn/chart/combo/wn-chart-combo.html", `<div class="wn-chart-combo"
  :class="TopClass">
  <!--
    Chart List
  -->
  <div class="as-main">
    <TiChartCombo
      v-for="li of TheChartList" 
        :key="li.index"
        v-bind="li"
        :data="getChartData(li.index)"
        @change:chart:name="OnChangeChartName(li, $event)"
        @change:chart:type="OnChangeChartType(li, $event)"
        @change:chart:datespan="OnChangeChartDateSpan(li, $event)"
        @reload:data="OnReloadChartData(li, $event)"/>
  </div>
</div>`);
//========================================
// JOIN <wn-chart-combo.mjs> ti/com/wn/chart/combo/wn-chart-combo.mjs
//========================================
Ti.Preload("ti/com/wn/chart/combo/wn-chart-combo.mjs", TI_PACK_EXPORTS['ti/com/wn/chart/combo/wn-chart-combo.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/chart/combo/_com.json
//========================================
Ti.Preload("ti/com/wn/chart/combo/_com.json", {
  "name" : "wn-chart-combo",
  "globally" : true,
  "template" : "./wn-chart-combo.html",
  "mixins"   : ["./wn-chart-combo.mjs"],
  "components" : [
    "@com:ti/chart/combo"
  ],
  "deps" : []
});
//========================================
// JOIN <wn-cmd-panel.html> ti/com/wn/cmd/panel/wn-cmd-panel.html
//========================================
Ti.Preload("ti/com/wn/cmd/panel/wn-cmd-panel.html", `<div class="wn-cmd-panel">
  <!--Head-->
  <div 
    v-if="tipText"
      class="as-tip">
      <ti-icon 
        v-if="tipIcon"
          :value="tipIcon"/>
      <div class="as-text">{{tipText|i18n}}</div>
  </div>
  <!--Logging-->
  <pre ref="lines"
    class="as-lines"
    :class="TopClass"><div  
      v-for="(line, index) in lines"
        :key="index"
        class="as-line">{{line}}</div></pre>
</div>`);
//========================================
// JOIN <wn-cmd-panel.mjs> ti/com/wn/cmd/panel/wn-cmd-panel.mjs
//========================================
Ti.Preload("ti/com/wn/cmd/panel/wn-cmd-panel.mjs", TI_PACK_EXPORTS['ti/com/wn/cmd/panel/wn-cmd-panel.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/cmd/panel/_com.json
//========================================
Ti.Preload("ti/com/wn/cmd/panel/_com.json", {
  "name" : "wn-cmd-panel",
  "globally" : true,
  "template" : "./wn-cmd-panel.html",
  "mixins"   : ["./wn-cmd-panel.mjs"]
});
//========================================
// JOIN <wn-combo-edit-com.html> ti/com/wn/combo/edit-com/wn-combo-edit-com.html
//========================================
Ti.Preload("ti/com/wn/combo/edit-com/wn-combo-edit-com.html", `<ti-label
  class="wn-combo-edit-com"
  :class="className"
  :placeholder="placeholder"
  :prefix-icon="ComIcon"
  :value="ComTitle"
  :suffix-icon="'zmdi-delete'"
  @click:value="OnClickValue"
  @suffix:icon="OnClickSuffixIcon"/>
  `);
//========================================
// JOIN <wn-combo-edit-com.mjs> ti/com/wn/combo/edit-com/wn-combo-edit-com.mjs
//========================================
Ti.Preload("ti/com/wn/combo/edit-com/wn-combo-edit-com.mjs", TI_PACK_EXPORTS['ti/com/wn/combo/edit-com/wn-combo-edit-com.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/combo/edit-com/_com.json
//========================================
Ti.Preload("ti/com/wn/combo/edit-com/_com.json", {
  "name" : "wn-combo-edit-com",
  "globally" : true,
  "template" : "./wn-combo-edit-com.html",
  "mixins"   : "./wn-combo-edit-com.mjs"
});
//========================================
// JOIN <wn-combo-input.html> ti/com/wn/combo/input/wn-combo-input.html
//========================================
Ti.Preload("ti/com/wn/combo/input/wn-combo-input.html", `<ti-combo-input v-bind="this"
  
  :options="OptionsDict"
  :drop-com-type="DropComType"
  :prefix-icon="ThePrefixIcon"
  :drop-display="TheDropDisplay"
  
  @change="$notify('change', $event)"/>
  `);
//========================================
// JOIN <wn-combo-input.mjs> ti/com/wn/combo/input/wn-combo-input.mjs
//========================================
Ti.Preload("ti/com/wn/combo/input/wn-combo-input.mjs", TI_PACK_EXPORTS['ti/com/wn/combo/input/wn-combo-input.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/combo/input/_com.json
//========================================
Ti.Preload("ti/com/wn/combo/input/_com.json", {
  "name" : "wn-combo-input",
  "globally" : true,
  "template" : "./wn-combo-input.html",
  "props"    : [
    "@com:ti/input/ti-input-props.mjs",
    "@com:ti/combo/input/ti-combo-input-props.mjs"],
  "mixins"   : "./wn-combo-input.mjs",
  "components" : [
    "@com:ti/combo/input",
    "@com:wn/list",
    "@com:wn/obj/icon"]
});
//========================================
// JOIN <wn-combo-multi-input.html> ti/com/wn/combo/multi-input/wn-combo-multi-input.html
//========================================
Ti.Preload("ti/com/wn/combo/multi-input/wn-combo-multi-input.html", `<ti-combo-multi-input v-bind="this"

  :options="OptionsDict"
  :tag-mapping="TheTagMapping"
  :drop-com-type="DropComType"
  :prefix-icon="ThePrefixIcon"
  :tag-item-icon-by="TheTagItemIconBy"
  :drop-display="TheDropDisplay"
  
  @change="$notify('change', $event)"/>
  `);
//========================================
// JOIN <wn-combo-multi-input.mjs> ti/com/wn/combo/multi-input/wn-combo-multi-input.mjs
//========================================
Ti.Preload("ti/com/wn/combo/multi-input/wn-combo-multi-input.mjs", TI_PACK_EXPORTS['ti/com/wn/combo/multi-input/wn-combo-multi-input.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/combo/multi-input/_com.json
//========================================
Ti.Preload("ti/com/wn/combo/multi-input/_com.json", {
  "name" : "wn-combo-multi-input",
  "globally" : true,
  "template" : "./wn-combo-multi-input.html",
  "props"    : [
    "@com:ti/input/ti-input-props.mjs",
    "@com:ti/input/tags/ti-input-tags-props.mjs",
    "@com:ti/combo/input/ti-combo-input-props.mjs"],
  "mixins"   : "./wn-combo-multi-input.mjs",
  "components" : [
    "@com:ti/combo/multi-input",
    "@com:wn/list",
    "@com:wn/obj/icon"]
});
//========================================
// JOIN <wn-droplist.html> ti/com/wn/droplist/wn-droplist.html
//========================================
Ti.Preload("ti/com/wn/droplist/wn-droplist.html", `<component 
  :is="ComType"
  v-bind="this"
  :can-input="false"
  :must-in-list="true"
  :auto-collapse="true"
  @change="$notify('change', $event)"/>`);
//========================================
// JOIN <wn-droplist.mjs> ti/com/wn/droplist/wn-droplist.mjs
//========================================
Ti.Preload("ti/com/wn/droplist/wn-droplist.mjs", TI_PACK_EXPORTS['ti/com/wn/droplist/wn-droplist.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/droplist/_com.json
//========================================
Ti.Preload("ti/com/wn/droplist/_com.json", {
  "name" : "wn-droplist",
  "globally" : true,
  "template" : "./wn-droplist.html",
  "props"    : [
    "@com:ti/input/ti-input-props.mjs",
    "@com:ti/input/tags/ti-input-tags-props.mjs",
    "@com:ti/combo/input/ti-combo-input-props.mjs"],
  "mixins"   : ["./wn-droplist.mjs"],
  "components" : [
    "@com:wn/combo/input",
    "@com:wn/combo/multi-input"
  ]
});
//========================================
// JOIN <wn-entity-history.html> ti/com/wn/entity/history/wn-entity-history.html
//========================================
Ti.Preload("ti/com/wn/entity/history/wn-entity-history.html", `<ti-gui
  class="wn-entity-history"
  :class="TopClass"
  :layout="Layout"
  :schema="Schema"
  :shown="myShown"
  :can-loading="true"
  :loading-as="loading"
  @block:shown="OnShownChange"
  @filter::change="OnFilterChange"
  @sorter::change="OnSorterChange"
  @pager::change="OnPagerChange"
  @list::select="OnSelect"/>`);
//========================================
// JOIN <wn-entity-history.mjs> ti/com/wn/entity/history/wn-entity-history.mjs
//========================================
Ti.Preload("ti/com/wn/entity/history/wn-entity-history.mjs", TI_PACK_EXPORTS['ti/com/wn/entity/history/wn-entity-history.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/entity/history/_com.json
//========================================
Ti.Preload("ti/com/wn/entity/history/_com.json", {
  "name" : "wn-entity-history",
  "globally" : true,
  "template" : "./wn-entity-history.html",
  "mixins"   : ["./wn-entity-history.mjs"],
  "components": [
    "@com:ti/input/daterange",
    "@com:ti/combo/filter",
    "@com:ti/paging/jumper"
  ]
});
//========================================
// JOIN <wn-fileset-config.html> ti/com/wn/fileset/config/wn-fileset-config.html
//========================================
Ti.Preload("ti/com/wn/fileset/config/wn-fileset-config.html", `<div class="wn-fileset-config"
  :class="TopClass">
  <WnFilesetTabs
    v-bind="this"
    com-type="wn-fileset-list"
    :com-conf="FilesetListConf"
    :meta="myHomeDir"
    :on-init="OnTabsInit"/>
</div>`);
//========================================
// JOIN <wn-fileset-config.mjs> ti/com/wn/fileset/config/wn-fileset-config.mjs
//========================================
Ti.Preload("ti/com/wn/fileset/config/wn-fileset-config.mjs", TI_PACK_EXPORTS['ti/com/wn/fileset/config/wn-fileset-config.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/fileset/config/_com.json
//========================================
Ti.Preload("ti/com/wn/fileset/config/_com.json", {
  "name" : "wn-fileset-config",
  "globally" : true,
  "template" : "./wn-fileset-config.html",
  "mixins"   : [
    "@com:wn/support/wn-fileset-mixins.mjs",
    "./wn-fileset-config.mjs"],
  "components" : [
    "@com:wn/fileset/list",
    "@com:wn/fileset/tabs"
  ],
  "deps" : []
});
//========================================
// JOIN <wn-fileset-list.html> ti/com/wn/fileset/list/wn-fileset-list.html
//========================================
Ti.Preload("ti/com/wn/fileset/list/wn-fileset-list.html", `<TiGui
  class="wn-fileset-list"
  :class="TopClass"
  :layout="GUILayout"
  :schema="GUISchema"
  :can-loading="true"
  :loading-as="isGUILoading"
  :action-status="DetailActionStatus"
  @list::select="OnListSelect"
  @list::open="OnListOpen"
  @meta::change="OnMetaChange"
  @meta::field:change="OnMetaFieldChange"
  @detail::change="OnDetailChange"/>`);
//========================================
// JOIN <wn-fileset-list.mjs> ti/com/wn/fileset/list/wn-fileset-list.mjs
//========================================
Ti.Preload("ti/com/wn/fileset/list/wn-fileset-list.mjs", TI_PACK_EXPORTS['ti/com/wn/fileset/list/wn-fileset-list.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/fileset/list/_com.json
//========================================
Ti.Preload("ti/com/wn/fileset/list/_com.json", {
  "name" : "wn-fileset-list",
  "globally" : true,
  "template" : "./wn-fileset-list.html",
  "mixins"   : [
    "@com:wn/support/wn-fileset-mixins.mjs",
    "./wn-fileset-list.mjs"],
  "components" : [],
  "deps" : []
});
//========================================
// JOIN <wn-fileset-tabs.html> ti/com/wn/fileset/tabs/wn-fileset-tabs.html
//========================================
Ti.Preload("ti/com/wn/fileset/tabs/wn-fileset-tabs.html", `<TiGui
  class="wn-fileset-tabs"
  :class="TopClass"
  :layout="TabsGUILayout"
  :on-init="OnGuiInit"
  :shown="myShown"
  @block:shown="OnShownChange"/>`);
//========================================
// JOIN <wn-fileset-tabs.mjs> ti/com/wn/fileset/tabs/wn-fileset-tabs.mjs
//========================================
Ti.Preload("ti/com/wn/fileset/tabs/wn-fileset-tabs.mjs", TI_PACK_EXPORTS['ti/com/wn/fileset/tabs/wn-fileset-tabs.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/fileset/tabs/_com.json
//========================================
Ti.Preload("ti/com/wn/fileset/tabs/_com.json", {
  "name" : "wn-fileset-tabs",
  "globally" : true,
  "template" : "./wn-fileset-tabs.html",
  "mixins"   : [
    "@com:wn/support/wn-fileset-mixins.mjs",
    "./wn-fileset-tabs.mjs"],
  "components" : [],
  "deps" : []
});
//========================================
// JOIN <wn-gui-arena.html> ti/com/wn/gui/arena/wn-gui-arena.html
//========================================
Ti.Preload("ti/com/wn/gui/arena/wn-gui-arena.html", `<div class="wn-gui-arena">
  <component 
    :is="comType"
      class="ti-cover-parent"
      v-bind="comConf"/>
</div>`);
//========================================
// JOIN <wn-gui-arena.mjs> ti/com/wn/gui/arena/wn-gui-arena.mjs
//========================================
Ti.Preload("ti/com/wn/gui/arena/wn-gui-arena.mjs", TI_PACK_EXPORTS['ti/com/wn/gui/arena/wn-gui-arena.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/gui/arena/_com.json
//========================================
Ti.Preload("ti/com/wn/gui/arena/_com.json", {
  "name" : "wn-gui-arena",
  "globally" : true,
  "template" : "./wn-gui-arena.html",
  "mixins"   : ["./wn-gui-arena.mjs"]
});
//========================================
// JOIN <wn-gui-footer.html> ti/com/wn/gui/footer/wn-gui-footer.html
//========================================
Ti.Preload("ti/com/wn/gui/footer/wn-gui-footer.html", `<div class="wn-gui-footer">
  <!--
    Info
  -->
  <div class="as-info ti-flex-center">
    <ti-icon v-if="infoIcon"
      :value="infoIcon"/>
    <span v-if="infoText"
      >{{infoText|i18n}}</span>
  </div>
  <!--
    Message
  -->
  <div class="as-msg ti-flex-center">
    {{message}}
  </div>
  <!--
    Indicator
  -->
  <div class="as-indi">
    {{indicator}}
  </div>
</div>`);
//========================================
// JOIN <wn-gui-footer.mjs> ti/com/wn/gui/footer/wn-gui-footer.mjs
//========================================
Ti.Preload("ti/com/wn/gui/footer/wn-gui-footer.mjs", TI_PACK_EXPORTS['ti/com/wn/gui/footer/wn-gui-footer.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/gui/footer/_com.json
//========================================
Ti.Preload("ti/com/wn/gui/footer/_com.json", {
  "name" : "wn-gui-footer",
  "globally" : true,
  "template" : "./wn-gui-footer.html",
  "mixins"   : ["./wn-gui-footer.mjs"]
});
//========================================
// JOIN <side-nav-item.html> ti/com/wn/gui/side/nav/com/side-nav-item/side-nav-item.html
//========================================
Ti.Preload("ti/com/wn/gui/side/nav/com/side-nav-item/side-nav-item.html", `<div class="side-nav-item" 
  :class="TopClass">
  <!--
    Self Info
  -->
  <div class="it-info" >
    <!--Icon-->
    <span v-if="icon" class="it-info-icon">
      <ti-icon :value="icon" size=".16rem"/>
    </span>
    <!--Group-->
    <span v-if="!hasHref"
      class="it-info-text"
      @click.left="OnToggleGroupStatus">{{title|i18n}}</span>
    <!--Item-->
    <a v-else
      class="it-info-text"
      :href="href"
      @click.stop.prevent="OnClickItemInfo">
      {{title|i18n}}
    </a>
    <!--
      Group status icon
    -->
    <span
      v-if="isGroup"
        class="it-grp-status"
        @click.left="OnToggleGroupStatus">
        <ti-icon :value="GroupStatusIcon"/>
    </span>
  </div>
  <!--
    Sub Container
  -->
  <div class="it-con" v-if="items && items.length > 0">
      <side-nav-item v-for="subIt in items"
        :key="subIt.key"
        :group-status-store-key="subIt.key"
        :highlight-id="highlightId"
        v-bind="subIt"/>
  </div>
</div>`);
//========================================
// JOIN <side-nav-item.mjs> ti/com/wn/gui/side/nav/com/side-nav-item/side-nav-item.mjs
//========================================
Ti.Preload("ti/com/wn/gui/side/nav/com/side-nav-item/side-nav-item.mjs", TI_PACK_EXPORTS['ti/com/wn/gui/side/nav/com/side-nav-item/side-nav-item.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/gui/side/nav/com/side-nav-item/_com.json
//========================================
Ti.Preload("ti/com/wn/gui/side/nav/com/side-nav-item/_com.json", {
  "name" : "side-nav-item",
  "template" : "./side-nav-item.html",
  "mixins" : ["./side-nav-item.mjs"]
});
//========================================
// JOIN <wn-gui-side-nav.html> ti/com/wn/gui/side/nav/wn-gui-side-nav.html
//========================================
Ti.Preload("ti/com/wn/gui/side/nav/wn-gui-side-nav.html", `<div class="wn-gui-side-nav"
  :class="TopClass"
  v-ti-activable>
  <side-nav-item v-for="it in TheItems"
    :key="it.key"
    v-bind="it"
    @item:actived="onItemActived"/>
</div>`);
//========================================
// JOIN <wn-gui-side-nav.mjs> ti/com/wn/gui/side/nav/wn-gui-side-nav.mjs
//========================================
Ti.Preload("ti/com/wn/gui/side/nav/wn-gui-side-nav.mjs", TI_PACK_EXPORTS['ti/com/wn/gui/side/nav/wn-gui-side-nav.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/gui/side/nav/_com.json
//========================================
Ti.Preload("ti/com/wn/gui/side/nav/_com.json", {
  "name" : "wn-gui-side-nav",
  "globally" : true,
  "template" : "./wn-gui-side-nav.html",
  "mixins"   : ["./wn-gui-side-nav.mjs"],
  "components" : ["./com/side-nav-item"]
});
//========================================
// JOIN <wn-gui-side-tree.html> ti/com/wn/gui/side/tree/wn-gui-side-tree.html
//========================================
Ti.Preload("ti/com/wn/gui/side/tree/wn-gui-side-tree.html", `<ti-tree
  class="ti-fill-parent wn-gui-side-tree"
  id-by="value"
  name-by="name"
  :display="TreeDisplay"
  :data="myTreeData"
  :current-id="highlightItemId"
  :checked-ids="CheckedIds"
  keep-open-by="wn-gui-side-tree"
  :auto-open="true"
  :default-open-depth="2"
  :show-root="false"
  :puppet-mode="true"
  @select="onItemActived"/>`);
//========================================
// JOIN <wn-gui-side-tree.mjs> ti/com/wn/gui/side/tree/wn-gui-side-tree.mjs
//========================================
Ti.Preload("ti/com/wn/gui/side/tree/wn-gui-side-tree.mjs", TI_PACK_EXPORTS['ti/com/wn/gui/side/tree/wn-gui-side-tree.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/gui/side/tree/_com.json
//========================================
Ti.Preload("ti/com/wn/gui/side/tree/_com.json", {
  "name" : "wn-gui-side-tree",
  "globally" : true,
  "template" : "./wn-gui-side-tree.html",
  "mixins"   : ["./wn-gui-side-tree.mjs"],
  "components" : ["@com:ti/tree"]
});
//========================================
// JOIN <test.json> ti/com/wn/gui/test.json
//========================================
Ti.Preload("ti/com/wn/gui/test.json", {
  "layout" : {
    "type" : "cols",
    "border" : true,
    "blocks" : [{
      "name" : "C0",
      "icon"  : "im-award",
      "title" : "Test C0",
      "closer" : true,
      "actions" : [{
          "type" : "group",
          "icon" : "zmdi-more-vert",
          "items" :  [{
              "key" : "show-P1",
              "text" : "show P1",
              "type" : "action",
              "action" : "main:showBlock(P1)"
            }, {
              "key" : "hide-P1",
              "text" : "hide P1",
              "type" : "action",
              "action" : "main:hideBlock(P1)"
            }]
        }],
      "size" : "20%",
      "type" : "rows",
      "border" : true,
      "blocks" : [{
        "name" : "C0-1",
        "size" : 100,
        "body" : {
          "comType" : "ti-label",
          "comConf" : {"value" : "C0-1 content"}
        }
      }, {
        "name" : "C0-2",
        "body" : {
          "comType" : "ti-label",
          "comConf" : {"value" : "C0-2 content"}
        }
      }, {
        "name" : "C0-3",
        "body" : {
          "comType" : "ti-label",
          "comConf" : {"value" : "C0-3 content"}
        }
      }]
    }, {
      "name" : "C1",
      "icon"  : "im-award",
      "title" : "Test C1",
      "actions" : [{
          "type" : "group",
          "icon" : "zmdi-more-vert",
          "items" :  [{
              "key" : "show-P1",
              "text" : "show P1",
              "type" : "action",
              "action" : "main:showBlock(P1)"
            }, {
              "key" : "hide-P1",
              "text" : "hide P1",
              "type" : "action",
              "action" : "main:hideBlock(P1)"
            }]
        }],
      "size" : "stretch",
      "type" : "tabs",
      "blocks" : [{
        "name" : "C1-1",
        "size" : 100,
        "body" : {
          "comType" : "ti-label",
          "comConf" : {"value" : "C1-1 content"}
        }
      }, {
        "name" : "C1-2",
        "body" : {
          "comType" : "ti-label",
          "comConf" : {"value" : "C1-2 content"}
        }
      }, {
        "name" : "C1-3",
        "body" : {
          "comType" : "ti-label",
          "comConf" : {"value" : "C1-3 content"}
        }
      }]
    }, {
      "name" : "C2",
      "body" : "C2",
      "size" : 260
    }],
    "panels" : [{
      "name" : "P1",
      "closer" : "right",
      "position":"left-top",
      "width" : "50%",
      "height" : "50%",
      "mask" : true,
      "body" : {
        "comType" : "ti-label",
        "comConf" : {"value" : "P1"}
      }
    }]
  },
  "schema" : {
    "C1" : {
      "comType" : "ti-label",
      "comConf" : {
        "value" : "I am C11"
      }
    },
    "C2" : {
      "comType" : "ti-label",
      "comConf" : {
        "value" : "I am C22"
      }
    }
  },
  "actions" : [{
      "key"  : "reloading",
      "type" : "action",
      "icon" : "zmdi-refresh",
      "text" : "i18n:refresh",
      "altDisplay" : {
        "icon" : "zmdi-refresh zmdi-hc-spin",
        "text" : "i18n:loading"
      },
      "action" : "dispatch:main/reload",
      "shortcut" : "CTRL+R"
    }, {
      "key" : "show-P1",
      "text" : "show P1",
      "type" : "action",
      "action" : "main:showBlock(P1)"
    }, {
      "key" : "hide-P1",
      "text" : "hide P1",
      "type" : "action",
      "action" : "main:hideBlock(P1)"
    }] 
});
//========================================
// JOIN <wn-gui.html> ti/com/wn/gui/wn-gui.html
//========================================
Ti.Preload("ti/com/wn/gui/wn-gui.html", `<ti-gui
  v-bind="layout"
  :schema="schema"
  :shown="shown"
  @block:show="showBlock"
  @block:hide="hideBlock"/>`);
//========================================
// JOIN <wn-gui.mjs> ti/com/wn/gui/wn-gui.mjs
//========================================
Ti.Preload("ti/com/wn/gui/wn-gui.mjs", TI_PACK_EXPORTS['ti/com/wn/gui/wn-gui.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/gui/_com.json
//========================================
Ti.Preload("ti/com/wn/gui/_com.json", {
  "name" : "wn-gui",
  "globally" : true,
  "template" : "./wn-gui.html",
  "methods"  : "@com:ti/gui/ti-gui-methods.mjs",
  "mixins"   : ["./wn-gui.mjs"],
  "components" : ["@com:ti/gui"]
});
//========================================
// JOIN <wn-imgfile.html> ti/com/wn/imgfile/wn-imgfile.html
//========================================
Ti.Preload("ti/com/wn/imgfile/wn-imgfile.html", `<ti-imgfile
  :src="imageSrc"
  :width="width"
  :height="height"
  :progress="progress"
  :upload-file="uploadFile"
  :removable="removable"
  @upload="onUpload"
  @remove="onRemove"
  @open="onOpen"/>`);
//========================================
// JOIN <wn-imgfile.mjs> ti/com/wn/imgfile/wn-imgfile.mjs
//========================================
Ti.Preload("ti/com/wn/imgfile/wn-imgfile.mjs", TI_PACK_EXPORTS['ti/com/wn/imgfile/wn-imgfile.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/imgfile/_com.json
//========================================
Ti.Preload("ti/com/wn/imgfile/_com.json", {
  "name" : "wn-imgfile",
  "globally" : true,
  "template" : "./wn-imgfile.html",
  "mixins" : ["./wn-imgfile.mjs"],
  "components" : [
    "@com:ti/imgfile"
  ]
});
//========================================
// JOIN <wn-label.html> ti/com/wn/label/wn-label.html
//========================================
Ti.Preload("ti/com/wn/label/wn-label.html", `<ti-label
  :class-name="className"
  v-bind="this"
  :value-clickable="ValueClickable"
  @click:value="OnClickValue"/>`);
//========================================
// JOIN <wn-label.mjs> ti/com/wn/label/wn-label.mjs
//========================================
Ti.Preload("ti/com/wn/label/wn-label.mjs", TI_PACK_EXPORTS['ti/com/wn/label/wn-label.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/label/_com.json
//========================================
Ti.Preload("ti/com/wn/label/_com.json", {
  "name" : "wn-label",
  "globally" : true,
  "template" : "./wn-label.html",
  "props"    : [
    "@com:ti/label/ti-label-props.mjs"],
  "mixins" : ["./wn-label.mjs"],
  "components" : ["@com:ti/label"]
});
//========================================
// JOIN <wn-list.html> ti/com/wn/list/wn-list.html
//========================================
Ti.Preload("ti/com/wn/list/wn-list.html", `<ti-list
  v-bind="this"
  :display="DisplayItems"
  :on-init="OnSubListInit"
  @select="OnSelected"
  @open="$notify('open', $event)"/>`);
//========================================
// JOIN <wn-list.mjs> ti/com/wn/list/wn-list.mjs
//========================================
Ti.Preload("ti/com/wn/list/wn-list.mjs", TI_PACK_EXPORTS['ti/com/wn/list/wn-list.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/list/_com.json
//========================================
Ti.Preload("ti/com/wn/list/_com.json", {
  "name" : "wn-list",
  "globally" : true,
  "template" : "./wn-list.html",
  "props" : [
    "@com:ti/support/list_props.mjs"],
  "mixins" : [
    "@com:wn/support/wn_list_wrapper_mixins.mjs",
    "./wn-list.mjs"],
  "components" : [
    "@com:ti/table"]
});
//========================================
// JOIN <wn-obj-creation.html> ti/com/wn/obj/creation/wn-obj-creation.html
//========================================
Ti.Preload("ti/com/wn/obj/creation/wn-obj-creation.html", `<div class="wn-obj-creation"
  :class="TopClass"
  v-ti-activable>
  <!--
    Side type list
  -->
  <div class="oc-types"
    v-if="hasTypes">
    <ul>
      <li
        v-for="li of TypeList"
          :class="li.className"
          @click="setCurrentType(li.name)">
          <!--Icon-->
          <ti-icon
            v-if="li.icon"
              :value="li.icon"/>
          <!--Text-->
          <span class="as-text">{{li.text|i18n}}</span>
          <!--Suffix-->
          <em v-if="li.suffix">({{li.suffix}})</em>
      </li>
    </ul>
  </div>
  <!--
    Main Area
  -->
  <div class="oc-main">
    <!--
      Type Brief
    -->
    <div v-if="hasCurrentType"
      class="oc-info">
      <div class="oc-thumb">
        <ti-icon :value="CurrentType.thumb"/>
      </div>
      <div class="oc-text">{{CurrentType.text | i18n}}</div>
      <div v-if="!CurrentIsDIR"
        class="oc-name">*.{{CurrentType.name}}</div>
      <div class="oc-brief"
        v-if="CurrentType.brief">{{CurrentType.brief}}</div>
    </div>
    <!--
      Free create
    -->
    <div v-else
      class="oc-free">
      <span>{{'wn-oc-free'|i18n}}</span>
    </div>
    <!--
      Input value
    -->
    <div class="oc-input">
      <input
        ref="input" 
        :value="value.name"
        :placeholder="'wn-oc-tip'|i18n" 
        @change="OnInputChange" 
        spellcheck="false">
    </div>
  </div>
</div>`);
//========================================
// JOIN <wn-obj-creation.mjs> ti/com/wn/obj/creation/wn-obj-creation.mjs
//========================================
Ti.Preload("ti/com/wn/obj/creation/wn-obj-creation.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/creation/wn-obj-creation.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/creation/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/creation/_com.json", {
  "name" : "wn-obj-creation",
  "globally" : true,
  "template" : "./wn-obj-creation.html",
  "mixins" : ["./wn-obj-creation.mjs"]
});
//========================================
// JOIN <wn-obj-detail.html> ti/com/wn/obj/detail/wn-obj-detail.html
//========================================
Ti.Preload("ti/com/wn/obj/detail/wn-obj-detail.html", `<TiGui
  class="wn-obj-detail"
  :class="TopClass"
  :layout="Layout"
  :schema="Schema"/>`);
//========================================
// JOIN <wn-obj-detail.mjs> ti/com/wn/obj/detail/wn-obj-detail.mjs
//========================================
Ti.Preload("ti/com/wn/obj/detail/wn-obj-detail.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/detail/wn-obj-detail.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/detail/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/detail/_com.json", {
  "name" : "wn-obj-detail",
  "globally" : true,
  "template" : "./wn-obj-detail.html",
  "mixins" : ["./wn-obj-detail.mjs"],
  "components" : [
    "@com:wn/obj/form",
    "@com:wn/obj/preview"
  ]
});
//========================================
// JOIN <wn-obj-form-props.mjs> ti/com/wn/obj/form/wn-obj-form-props.mjs
//========================================
Ti.Preload("ti/com/wn/obj/form/wn-obj-form-props.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/form/wn-obj-form-props.mjs']);
//========================================
// JOIN <wn-obj-form.html> ti/com/wn/obj/form/wn-obj-form.html
//========================================
Ti.Preload("ti/com/wn/obj/form/wn-obj-form.html", `<ti-form 
  v-bind="this"
  :data="FormData"
  :fields="myFields"
  :auto-show-blank="isAutoShowBlank"
  :class-name="className"
  @field:change="OnFieldChange"
  @change="OnChange"
  @invalid="OnInvalid"/>`);
//========================================
// JOIN <wn-obj-form.mjs> ti/com/wn/obj/form/wn-obj-form.mjs
//========================================
Ti.Preload("ti/com/wn/obj/form/wn-obj-form.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/form/wn-obj-form.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/form/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/form/_com.json", {
  "name" : "wn-obj-form",
  "globally" : true,
  "template" : "./wn-obj-form.html",
  "props" : [
    "@com:ti/form/ti-form-props.mjs",
    "./wn-obj-form-props.mjs"
  ],
  "mixins" : ["./wn-obj-form.mjs"],
  "components" : [
    "@com:ti/form",
    "@com:wn/transfer",
    "@com:wn/droplist",
    "@com:wn/combo/input",
    "@com:wn/imgfile",
    "@com:wn/combo/multi-input"
  ]
});
//========================================
// JOIN <wn-obj-icon.html> ti/com/wn/obj/icon/wn-obj-icon.html
//========================================
Ti.Preload("ti/com/wn/obj/icon/wn-obj-icon.html", `<ti-icon 
  class="wn-obj-icon" 
  :class="topClass"
  :value="theIcon"/>`);
//========================================
// JOIN <wn-obj-icon.mjs> ti/com/wn/obj/icon/wn-obj-icon.mjs
//========================================
Ti.Preload("ti/com/wn/obj/icon/wn-obj-icon.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/icon/wn-obj-icon.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/icon/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/icon/_com.json", {
  "name" : "wn-obj-icon",
  "globally" : true,
  "template" : "./wn-obj-icon.html",
  "mixins" : ["./wn-obj-icon.mjs"]
});
//========================================
// JOIN <wn-obj-id.html> ti/com/wn/obj/id/wn-obj-id.html
//========================================
Ti.Preload("ti/com/wn/obj/id/wn-obj-id.html", `<div class="wn-obj-id"
  :class="TopClass"
  @mouseenter="OnMouseEnter"
  @mouseleave="OnMouseLeave">
  <!--
    Info Brief
  -->
  <div class="as-info-brief" ref="box">
    <!--
      ICON
    -->
    <div class="as-icon"><i class="fas fa-dna"></i></div>
    <!-- Empty -->
    <div 
      v-if="!value"
        class="as-text">
        <em>{{'i18n:blank' | i18n}}</em>
    </div>
    <!-- Simple ID -->
    <div
      v-else-if="!OID.homeId"
        class="as-text">
        <span>{{OID.myId}}</span>
    </div>
    <!-- Two stage ID-->
    <div 
      v-else
        class="as-text">
        <span>{{OID.myId}}</span>
    </div>
  </div>
  <!--
    Info Detail
  -->
  <div class="as-info-detail" ref="detail">
    <table>
      <tr v-if="OID.homeId"
        class="is-home-id">
        <td>HOME ID</td>
        <td>{{OID.homeId}}</td>
        <td class="as-copy">
          <a @click.left="OnCopyHomeId">{{'i18n:copy'|i18n}}</a>
        </td>
      </tr>
      <tr
        class="is-my-id">
        <td>MY ID</td>
        <td>{{OID.myId}}</td>
        <td class="as-copy">
          <a @click.left="OnCopyMyId">{{'i18n:copy'|i18n}}</a>
        </td>
      </tr>
    </table>
    <div
      v-if="OID.homeId" 
        class="as-copy">
        <a @click.left="OnCopyAll">{{'i18n:copy'|i18n}}</a>
    </div>
  </div>
</div>`);
//========================================
// JOIN <wn-obj-id.mjs> ti/com/wn/obj/id/wn-obj-id.mjs
//========================================
Ti.Preload("ti/com/wn/obj/id/wn-obj-id.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/id/wn-obj-id.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/id/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/id/_com.json", {
  "name" : "wn-obj-id",
  "globally" : true,
  "template" : "./wn-obj-id.html",
  "mixins" : ["./wn-obj-id.mjs"]
});
//========================================
// JOIN <wn-obj-json.html> ti/com/wn/obj/json/wn-obj-json.html
//========================================
Ti.Preload("ti/com/wn/obj/json/wn-obj-json.html", `<div class="wn-obj-json">
  <!--
    Show Text Editor
  -->
  <ti-text-json v-if="hasMeta"
    class="ti-fill-parent"
    :value="value"
    @change="onChangeContent"/>
  <!--
    Empty Data
  -->
  <ti-loading v-else/>
</div>`);
//========================================
// JOIN <wn-obj-json.mjs> ti/com/wn/obj/json/wn-obj-json.mjs
//========================================
Ti.Preload("ti/com/wn/obj/json/wn-obj-json.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/json/wn-obj-json.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/json/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/json/_com.json", {
  "name" : "wn-obj-json",
  "globally" : true,
  "template" : "./wn-obj-json.html",
  "mixins" : ["./wn-obj-json.mjs"],
  "components" : ["@com:ti/text/json"]
});
//========================================
// JOIN <wn-markdown-richeditor-props.mjs> ti/com/wn/obj/markdown/richeditor/wn-markdown-richeditor-props.mjs
//========================================
Ti.Preload("ti/com/wn/obj/markdown/richeditor/wn-markdown-richeditor-props.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/markdown/richeditor/wn-markdown-richeditor-props.mjs']);
//========================================
// JOIN <wn-markdown-richeditor.html> ti/com/wn/obj/markdown/richeditor/wn-markdown-richeditor.html
//========================================
Ti.Preload("ti/com/wn/obj/markdown/richeditor/wn-markdown-richeditor.html", `<TiTextMarkdownRicheditor
  v-bind="this"
  :actions="ToolbarActions"
  :markdown-media-src="TheMarkdownMediaSrc"
  :preview-media-src="ThePreviewMediaSrc"
  :value="TheValue"
  :on-init="OnEditorInit"/>`);
//========================================
// JOIN <wn-markdown-richeditor.mjs> ti/com/wn/obj/markdown/richeditor/wn-markdown-richeditor.mjs
//========================================
Ti.Preload("ti/com/wn/obj/markdown/richeditor/wn-markdown-richeditor.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/markdown/richeditor/wn-markdown-richeditor.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/markdown/richeditor/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/markdown/richeditor/_com.json", {
  "name" : "wn-obj-markdown-richeditor",
  "globally" : true,
  "template" : "./wn-markdown-richeditor.html",
  "props": [
    "@com:ti/text/markdown/richeditor/ti-markdown-richeditor-props.mjs",
    "./wn-markdown-richeditor-props.mjs"
  ],
  "methods": "@com:ti/text/markdown/richeditor/ti-markdown-richeditor-delegate-methods.mjs",
  "mixins" : ["./wn-markdown-richeditor.mjs"],
  "components" : [
    "@com:ti/text/markdown/richeditor"
  ]
});
//========================================
// JOIN <wn-obj-picker.html> ti/com/wn/obj/picker/wn-obj-picker.html
//========================================
Ti.Preload("ti/com/wn/obj/picker/wn-obj-picker.html", `<div class="wn-obj-picker"
  :class="TopClass">
  <!--
    Empty Items
  -->
  <div
    v-if="!hasItems"
      class="as-empty">
      <div class="as-empty-item"
        @click.left.stop="OnPickItem">
        <i class="im im-plus"></i>
      </div>
  </div>
  <!--
    Show Items
  -->
  <div ref="itemsCon"
    v-else
      class="as-items-con"
      @click.left="OnClickItemsCon">
      <div 
        v-for="(it, index) in DisplayItems"
          :key="it._key"
          class="as-item">
          <TiObjThumb 
              v-bind="it"
              @remove="OnRemoveItem"/>        
      </div>
      <!--For multi-->
      <div
        v-if="multi" 
          class="as-empty-item"
          @click.left.stop="OnPickItem">
          <i class="im im-plus"></i>
      </div>
  </div>
  <!--
    Loading
  -->
  <ti-loading
    v-if="loading"
      class="as-mid-tip-mask"/>
</div>`);
//========================================
// JOIN <wn-obj-picker.mjs> ti/com/wn/obj/picker/wn-obj-picker.mjs
//========================================
Ti.Preload("ti/com/wn/obj/picker/wn-obj-picker.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/picker/wn-obj-picker.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/picker/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/picker/_com.json", {
  "name" : "wn-obj-picker",
  "globally" : true,
  "template" : "./wn-obj-picker.html",
  "mixins"   : ["./wn-obj-picker.mjs"],
  "components" : [
    "@com:wn/adaptlist"],
  "deps": ["@deps:sortable.js"]
});
//========================================
// JOIN <preview-info-field.html> ti/com/wn/obj/preview/com/preview-info-field/preview-info-field.html
//========================================
Ti.Preload("ti/com/wn/obj/preview/com/preview-info-field/preview-info-field.html", `<div class="info-field">
  <div class="as-name" :style="theNameStyle">
    <ti-icon v-if="icon" class="it-icon" :value="icon"/>
    <span class="it-text">{{title|i18n}}</span>
  </div>
  <div class="as-value" :style="theValueStyle">{{theValue}}</div>
</div>`);
//========================================
// JOIN <preview-info-field.mjs> ti/com/wn/obj/preview/com/preview-info-field/preview-info-field.mjs
//========================================
Ti.Preload("ti/com/wn/obj/preview/com/preview-info-field/preview-info-field.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/preview/com/preview-info-field/preview-info-field.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/preview/com/preview-info-field/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/preview/com/preview-info-field/_com.json", {
  "name" : "wn-obj-preview-info-field",
  "globally" : true,
  "template" : "./preview-info-field.html",
  "mixins" : ["./preview-info-field.mjs"]
});
//========================================
// JOIN <wn-obj-preview.html> ti/com/wn/obj/preview/wn-obj-preview.html
//========================================
Ti.Preload("ti/com/wn/obj/preview/wn-obj-preview.html", `<div class="wn-obj-preview" :class="TopClass">
  <!--
    With content
  -->
  <div class="wop-con" v-if="hasMeta">
    <!--Main View-->
    <component class="as-main"
      :is="PreviewCom.comType"
      v-bind="PreviewCom.comConf"/>
    <!--ActionBar at top-->
    <div class="as-abar">
      <ul>
        <li v-for="it in TheActions"
          @click.left="OnAction(it.action)">
          <ti-icon class="it-icon" :value="it.icon"/>
        </li>
      </ul>
    </div>
    <!--Meta at bottom-->
    <div class="as-info" v-if="isShowInfo">
      <!--
        Head
      -->
      <div class="info-head">
        <!--Pin Status Icon-->
        <span class="it-icon" @click.left="toggleInfoFloat">
          <ti-icon :value="PreviewInfoPinIcon"/>
        </span>
        <!--Head text-->
        <span class="it-text">{{'i18n:info'|i18n}}</span>
        <!--Edit Button-->
        <span class="it-edit"
          @click.left="OnEditInfo">{{'i18n:edit'|i18n}}</span>
      </div>
      <!--
        Fields
      -->
      <div class="info-field-con">
        <wn-obj-preview-info-field
          v-for="fld in PrevewInfoFields"
          :key="fld.name"
          v-bind="fld"
          :data="meta"/>
      </div>
    </div>
  </div>
  <!--
    Blank 
  -->
  <ti-loading
    v-else
      v-bind="blankAs"
      class="ti-fill-parent"
      :class="blankClass"/>
</div>`);
//========================================
// JOIN <wn-obj-preview.mjs> ti/com/wn/obj/preview/wn-obj-preview.mjs
//========================================
Ti.Preload("ti/com/wn/obj/preview/wn-obj-preview.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/preview/wn-obj-preview.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/preview/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/preview/_com.json", {
  "name" : "wn-obj-preview",
  "globally" : true,
  "i18n" : "@i18n:wn-obj-preview",
  "template" : "./wn-obj-preview.html",
  "mixins" : ["./wn-obj-preview.mjs"],
  "components" : [
    "./com/preview-info-field",
    "@com:ti/media/binary",
    "@com:ti/media/image",
    "@com:ti/media/audio",
    "@com:ti/media/video"]
});
//========================================
// JOIN <wn-obj-puretext.html> ti/com/wn/obj/puretext/wn-obj-puretext.html
//========================================
Ti.Preload("ti/com/wn/obj/puretext/wn-obj-puretext.html", `<div class="wn-obj-puretext">
  <!--
    Show Text Editor
  -->
  <ti-text-raw v-if="hasMeta"
    class="ti-fill-parent"
    :icon="theIcon"
    :title="theTitle"
    :show-title="showTitle"
    :value="content"
    :content-is-changed="status.changed"
    :blank-text="blankText"
    @change="onChangeContent"/>
  <!--
    Empty Data
  -->
  <div v-else
    class="ti-blank is-big">
    <ti-icon value="zmdi-alert-circle-o"/>
    <span>{{"empty-data"|i18n}}</span>
  </div>
</div>`);
//========================================
// JOIN <wn-obj-puretext.mjs> ti/com/wn/obj/puretext/wn-obj-puretext.mjs
//========================================
Ti.Preload("ti/com/wn/obj/puretext/wn-obj-puretext.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/puretext/wn-obj-puretext.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/puretext/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/puretext/_com.json", {
  "name" : "wn-obj-puretext",
  "globally" : true,
  "template" : "./wn-obj-puretext.html",
  "mixins" : ["./wn-obj-puretext.mjs"],
  "components" : ["@com:ti/text/raw"]
});
//========================================
// JOIN <wn-obj-tree.html> ti/com/wn/obj/tree/wn-obj-tree.html
//========================================
Ti.Preload("ti/com/wn/obj/tree/wn-obj-tree.html", `<div class="wn-obj-tree"
  :class="TopClass"
  :style="TopStyle">
  <!--
    Tree
  -->
  <TiTree
    :data="treeRoot"
    :id-by="idBy"
    :name-by="nameBy"
    :children-by="childrenBy"
    :test-loading="isNodeLoading"
    :display="display"

    :opened-node-paths="myOpenedNodePaths"
    
    :auto-open="autoOpen"
    :show-root="showRoot"
    :multi="multi"

    :node-checkable="nodeCheckable"
    :node-selectable="nodeSelectable"
    :node-openable="nodeOpenable"
    :node-cancelable="nodeCancelable"
    :node-hoverable="nodeHoverable"

    :checkable="checkable"
    :selectable="selectable"
    :cancelable="cancelable"
    :openable="openable"
    :hoverable="hoverable"

    :on-node-select="onNodeSelect"

    :spacing="spacing"
    :border="border"
    :loading-node="loadingNode"
    :empty-node="emptyNode"
    height="100%"
    :leaf-by="{race:'FILE'}"
    :on-init="OnTreeInit"
    @select="OnNodeSelect"
    @opened="OnNodeOpened"
    @opened-status:changed="OnTreeOpenedStatusChange"/>
</div>`);
//========================================
// JOIN <wn-obj-tree.mjs> ti/com/wn/obj/tree/wn-obj-tree.mjs
//========================================
Ti.Preload("ti/com/wn/obj/tree/wn-obj-tree.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/tree/wn-obj-tree.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/tree/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/tree/_com.json", {
  "name" : "wn-obj-tree",
  "globally" : true,
  "template" : "./wn-obj-tree.html",
  "mixins"   : ["./wn-obj-tree.mjs"],
  "components" : ["@com:ti/tree"]
});
//========================================
// JOIN <wn-session-badge.html> ti/com/wn/session/badge/wn-session-badge.html
//========================================
Ti.Preload("ti/com/wn/session/badge/wn-session-badge.html", `<div class="wn-session-badge"
  :class="TopClass">
  <!--
    Ti Session Badge
  -->
  <div class="as-info" ref="info">
    <TiSessionBadge
      :me="me"
      :login-icon="TheLoginIcon"
      avatar-key="thumb"
      name-keys="nickname|nm"
      name-event="show:more"
      :auto-sign-link="false"
      @show:more="OnShowMore"/>
  </div>
  <!--
    More Information
  -->
  <template v-if="!collapse">
    <!--Mask-->
    <div class="as-mask" @click="collapse=true"></div>
    <!--Drop-->
    <div ref="drop" class="as-drop" :style="DropStyle">
      <!--
        Avatar
      -->
      <div class="as-avatar">
        <ti-icon :value="TheLoginIcon"/>
        <div class="as-name">
          <span>{{me.nickname}}</span>
          <span>{{me.nm}}</span>
        </div>
      </div>
      <!--
        Language
      -->
      <div class="as-lang">
        <div
          v-for="la in LangList"
            class="lang-item"
            :class="la.className"
            @click.left="OnChangeLang(la.lang)">
            <img :src="la.src"/>
            <div>{{la.text}}</div>
        </div>
      </div>
      <!--
        Foot: resetpasswd + logout
      -->
      <div class="as-foot">
        <a @click.left="OnResetPassword">{{'passwd-reset' | i18n}}</a>
        <a @click.left="$notify('do:logout')">{{'logout' | i18n}}</a>
      </div>
    </div>
  </template>
</div>`);
//========================================
// JOIN <wn-session-badge.mjs> ti/com/wn/session/badge/wn-session-badge.mjs
//========================================
Ti.Preload("ti/com/wn/session/badge/wn-session-badge.mjs", TI_PACK_EXPORTS['ti/com/wn/session/badge/wn-session-badge.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/session/badge/_com.json
//========================================
Ti.Preload("ti/com/wn/session/badge/_com.json", {
  "name" : "wn-session-badge",
  "globally" : true,
  "template" : "./wn-session-badge.html",
  "mixins" : ["./wn-session-badge.mjs"],
  "components" : [
    "@com:ti/session/badge"
  ]
});
//========================================
// JOIN <wn-fileset-mixins.mjs> ti/com/wn/support/wn-fileset-mixins.mjs
//========================================
Ti.Preload("ti/com/wn/support/wn-fileset-mixins.mjs", TI_PACK_EXPORTS['ti/com/wn/support/wn-fileset-mixins.mjs']);
//========================================
// JOIN <wn_list_wrapper_mixins.mjs> ti/com/wn/support/wn_list_wrapper_mixins.mjs
//========================================
Ti.Preload("ti/com/wn/support/wn_list_wrapper_mixins.mjs", TI_PACK_EXPORTS['ti/com/wn/support/wn_list_wrapper_mixins.mjs']);
//========================================
// JOIN <wn-table.html> ti/com/wn/table/wn-table.html
//========================================
Ti.Preload("ti/com/wn/table/wn-table.html", `<ti-table
  v-bind="this"
  :fields="TheFields"
  :on-init="OnSubListInit"
  @select="OnSelected"
  @open="$notify('open', $event)"/>`);
//========================================
// JOIN <wn-table.mjs> ti/com/wn/table/wn-table.mjs
//========================================
Ti.Preload("ti/com/wn/table/wn-table.mjs", TI_PACK_EXPORTS['ti/com/wn/table/wn-table.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/table/_com.json
//========================================
Ti.Preload("ti/com/wn/table/_com.json", {
  "name" : "wn-table",
  "globally" : true,
  "template" : "./wn-table.html",
  "props" : [
    "@com:ti/support/list_props.mjs",
    "@com:ti/table/ti-table-props.mjs"],
  "mixins" : [
    "@com:wn/support/wn_list_wrapper_mixins.mjs",
    "./wn-table.mjs"],
  "components" : [
    "@com:ti/table"]
});
//========================================
// JOIN <thing-creator.html> ti/com/wn/thing/manager/com/thing-creator/thing-creator.html
//========================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-creator/thing-creator.html", `<div class="thing-creator ti-box-relative">
  <ti-form
    :fields="fields"
    :only-fields="onlyFields"
    :fixed="fixed"
    :data="TheData"
    :on-init="OnFormInit"
    @field:change="OnFormFieldChange"
    @change="OnFormChange"
    @submit="OnSubmit"/>
  <hr class="no-space">
  <div class="ti-flex-center ti-padding-10">
    <div class="ti-btn is-big" 
      @click="OnCreate">
      <span>{{'create-now'|i18n}}</span>
    </div>
  </div>
  <div v-if="creating"
    class="ti-box-mask as-thin ti-flex-center">
    <ti-loading text="i18n:creating"/>
  </div>
</div>`);
//========================================
// JOIN <thing-creator.mjs> ti/com/wn/thing/manager/com/thing-creator/thing-creator.mjs
//========================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-creator/thing-creator.mjs", TI_PACK_EXPORTS['ti/com/wn/thing/manager/com/thing-creator/thing-creator.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/thing/manager/com/thing-creator/_com.json
//========================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-creator/_com.json", {
  "name" : "wn-thing-creator",
  "globally" : true,
  "template" : "./thing-creator.html",
  "mixins"   : ["./thing-creator.mjs"],
  "components" : []
});
//========================================
// JOIN <thing-files-props.mjs> ti/com/wn/thing/manager/com/thing-files/thing-files-props.mjs
//========================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-files/thing-files-props.mjs", TI_PACK_EXPORTS['ti/com/wn/thing/manager/com/thing-files/thing-files-props.mjs']);
//========================================
// JOIN <thing-files.html> ti/com/wn/thing/manager/com/thing-files/thing-files.html
//========================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-files/thing-files.html", `<div class="wn-thing-files"
  :class="TopClass">
  <!--
    With Data Home
  -->
  <template v-if="dataHome">
    <!--
      Head bar for switch dir and actions
    -->
    <div class="as-header">
      <div v-if="dirNameTip"
        class="as-tip">
        <span>{{dirNameTip|i18n}}</span>
      </div>
      <!--Left: select files home dirName-->
      <div class="as-name">
        <component 
          :is="dirNameComType"
          height=".3rem"
          :allow-empty="false"
          :options="dirNameOptions"
          :value="dirName"
          :prefix-icon-for-clean="false"
          @change="OnDirNameChanged"/>
      </div>
      <!--Right: Common Actions-->
      <div class="as-menu">
        <ti-actionbar 
          :items="actions"
          :status="myStatus"/>
      </div>
    </div>
    <!--
      File Preview
    -->
    <div class="as-preview">
      <wn-obj-preview
        class="ti-fill-parent"
        v-bind="ThePreview"
        :meta="CurrentFile"/>
    </div>
    <!--
      File List
    -->
    <div class="as-list">
      <wn-adaptlist
        class="ti-fill-parent"
        v-bind="TheFiles"
        :data="myData"
        :meta="myDataDirObj"
        :status="myStatus"
        :before-upload="checkDataDir"
        @uploaded="OnFileUploaded"
        @select="OnFileSelect"
        @open:wn:obj="OnFileOpen"
        :on-init="OnAdaptListInit"/>
    </div>
  </template>
  <!--
    Without Data Home
  -->
  <ti-loading
    v-else
      class="nil-datahome as-big-mask"
      :text="nilText"
      :icon="nilIcon"/>
</div>`);
//========================================
// JOIN <thing-files.mjs> ti/com/wn/thing/manager/com/thing-files/thing-files.mjs
//========================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-files/thing-files.mjs", TI_PACK_EXPORTS['ti/com/wn/thing/manager/com/thing-files/thing-files.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/thing/manager/com/thing-files/_com.json
//========================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-files/_com.json", {
  "name" : "wn-thing-files",
  "globally" : true,
  "template" : "./thing-files.html",
  "props" : "./thing-files-props.mjs",
  "mixins"   : ["./thing-files.mjs"],
  "components" : [
    "@com:wn/adaptlist"
  ]
});
//========================================
// JOIN <thing-filter.html> ti/com/wn/thing/manager/com/thing-filter/thing-filter.html
//========================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-filter/thing-filter.html", `<div class="wn-thing-filter"
  :class="TopClass">
  <!--
    Icon: Recycle Bin
  -->
  <div
    v-if="isInRecycleBin"
      class="as-recyclebin"
      @click="OnLeaveRecycleBin"><div>
        <!--Icon-->
        <div class="it-icon">
          <ti-icon value="fas-recycle"/>
          <ti-icon value="far-arrow-alt-circle-left"/>
        </div>
        <!--text-->
        <div class="it-text">{{'i18n:thing-recycle-bin'|i18n}}</div>
  </div></div>
  <!--
    Keyword
  -->
  <TiComboFilter
    class="as-filter"
    v-bind="filter"
    :placeholder="placeholder"
    :value="value.filter"
    @change="OnFilterChange"/>
  <!--
    Sorter
  -->
  <TiComboSorter
    v-if="hasSorter"
      class="as-sorter"
      v-bind="sorter"
      :value="value.sorter"
      @change="OnSorterChange"/>
</div>`);
//========================================
// JOIN <thing-filter.mjs> ti/com/wn/thing/manager/com/thing-filter/thing-filter.mjs
//========================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-filter/thing-filter.mjs", TI_PACK_EXPORTS['ti/com/wn/thing/manager/com/thing-filter/thing-filter.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/thing/manager/com/thing-filter/_com.json
//========================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-filter/_com.json", {
  "name" : "wn-thing-filter",
  "globally" : true,
  "template" : "./thing-filter.html",
  "mixins"   : ["./thing-filter.mjs"],
  "components" : [
    "@com:ti/combo/filter",
    "@com:ti/combo/sorter"
  ]
});
//========================================
// JOIN <_com.json> ti/com/wn/thing/manager/com/thing-markdown-editor/_com.json
//========================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-markdown-editor/_com.json", {
  "name" : "wn-thing-markdown-richeditor",
  "globally" : true,
  "template" : "./thing-markdown-richeditor.html",
  "mixins"   : ["./thing-markdown-richeditor.mjs"],
  "components" : []
});
//========================================
// JOIN <wn-thing-manager-methods.mjs> ti/com/wn/thing/manager/wn-thing-manager-methods.mjs
//========================================
Ti.Preload("ti/com/wn/thing/manager/wn-thing-manager-methods.mjs", TI_PACK_EXPORTS['ti/com/wn/thing/manager/wn-thing-manager-methods.mjs']);
//========================================
// JOIN <wn-thing-manager.html> ti/com/wn/thing/manager/wn-thing-manager.html
//========================================
Ti.Preload("ti/com/wn/thing/manager/wn-thing-manager.html", `<ti-gui
  class="wn-thing"
  :class="TopClass"
  v-ti-activable
  :layout="TheLayout"
  :schema="TheSchema"
  :shown="TheShown"
  :can-loading="true"
  :loading-as="GuiLoadingAs"
  :action-status="status"/>`);
//========================================
// JOIN <wn-thing-manager.mjs> ti/com/wn/thing/manager/wn-thing-manager.mjs
//========================================
Ti.Preload("ti/com/wn/thing/manager/wn-thing-manager.mjs", TI_PACK_EXPORTS['ti/com/wn/thing/manager/wn-thing-manager.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/thing/manager/_com.json
//========================================
Ti.Preload("ti/com/wn/thing/manager/_com.json", {
  "name" : "wn-thing-manager",
  "globally" : true,
  "i18n" : "@i18n:wn-thing",
  "template" : "./wn-thing-manager.html",
  "methods"  : "./wn-thing-manager-methods.mjs",
  "mixins"   : ["./wn-thing-manager.mjs"],
  "components" : [
    "./com/thing-files",
    "./com/thing-filter",
    "./com/thing-creator",
    "./com/thing-files",
    "@com:ti/gui",
    "@com:ti/combo/filter",
    "@com:ti/paging/jumper",
    "@com:wn/table",
    "@com:wn/obj/icon",
    "@com:wn/obj/puretext",
    "@com:wn/obj/preview",
    "@com:wn/obj/form",
    "@com:wn/upload/file"]
});
//========================================
// JOIN <thing-markdown-richeditor.html> ti/com/wn/thing/markdown/richeditor/thing-markdown-richeditor.html
//========================================
Ti.Preload("ti/com/wn/thing/markdown/richeditor/thing-markdown-richeditor.html", `<WnObjMarkdownRicheditor
  v-bind="this"
  :on-init="OnEditorInit"/>`);
//========================================
// JOIN <thing-markdown-richeditor.mjs> ti/com/wn/thing/markdown/richeditor/thing-markdown-richeditor.mjs
//========================================
Ti.Preload("ti/com/wn/thing/markdown/richeditor/thing-markdown-richeditor.mjs", TI_PACK_EXPORTS['ti/com/wn/thing/markdown/richeditor/thing-markdown-richeditor.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/thing/markdown/richeditor/_com.json
//========================================
Ti.Preload("ti/com/wn/thing/markdown/richeditor/_com.json", {
  "name" : "wn-thing-markdown-richeditor",
  "globally" : true,
  "template" : "./thing-markdown-richeditor.html",
  "props": [
    "@com:ti/text/markdown/richeditor/ti-markdown-richeditor-props.mjs",
    "@com:wn/obj/markdown/richeditor/wn-markdown-richeditor-props.mjs"
  ],
  "mixins"   : ["./thing-markdown-richeditor.mjs"],
  "components" : [
    "@com:wn/obj/markdown/richeditor"
  ],
  "deps" : [
    "@lib:code2a/cheap-markdown.mjs"
  ]
});
//========================================
// JOIN <wn-transfer.html> ti/com/wn/transfer/wn-transfer.html
//========================================
Ti.Preload("ti/com/wn/transfer/wn-transfer.html", `<ti-transfer v-bind="this"
  
  :options="OptionsDict"
  :can-com-type="TheCanComType"
  :sel-com-type="TheSelComType"
  :display="TheDisplay"

  @change="$notify('change', $event)"/>`);
//========================================
// JOIN <wn-transfer.mjs> ti/com/wn/transfer/wn-transfer.mjs
//========================================
Ti.Preload("ti/com/wn/transfer/wn-transfer.mjs", TI_PACK_EXPORTS['ti/com/wn/transfer/wn-transfer.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/transfer/_com.json
//========================================
Ti.Preload("ti/com/wn/transfer/_com.json", {
  "name" : "wn-transfer",
  "globally" : true,
  "template" : "./wn-transfer.html",
  "props" : "@com:ti/transfer/ti-transfer-props.mjs",
  "mixins" : ["./wn-transfer.mjs"],
  "components" : ["@com:ti/transfer"]
});
//========================================
// JOIN <wn-upload-file.html> ti/com/wn/upload/file/wn-upload-file.html
//========================================
Ti.Preload("ti/com/wn/upload/file/wn-upload-file.html", `<TiUploadFile
  :preview="PreviewIcon"
  :width="width"
  :height="height"
  :max-width="maxWidth"
  :max-height="maxHeight"
  :progress="progress"
  :upload-file="uploadFile"
  :removable="removable"
  @upload="onUpload"
  @remove="onRemove"
  @open="onOpen"/>`);
//========================================
// JOIN <wn-upload-file.mjs> ti/com/wn/upload/file/wn-upload-file.mjs
//========================================
Ti.Preload("ti/com/wn/upload/file/wn-upload-file.mjs", TI_PACK_EXPORTS['ti/com/wn/upload/file/wn-upload-file.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/upload/file/_com.json
//========================================
Ti.Preload("ti/com/wn/upload/file/_com.json", {
  "name" : "wn-upload-file",
  "globally" : true,
  "template" : "./wn-upload-file.html",
  "mixins" : ["./wn-upload-file.mjs"],
  "components" : [
    "@com:ti/upload/file"
  ]
});
Ti.Preload("ti/com/ti/text/markdown/richeditor2/blot/br.blot.mjs", TI_PACK_EXPORTS['ti/com/ti/text/markdown/richeditor2/blot/br.blot.mjs']);
//========================================
// JOIN <site-config-actions.mjs> ti/mod/hmaker/website/mod/site-config/site-config-actions.mjs
//========================================
Ti.Preload("ti/mod/hmaker/website/mod/site-config/site-config-actions.mjs", TI_PACK_EXPORTS['ti/mod/hmaker/website/mod/site-config/site-config-actions.mjs']);
//========================================
// JOIN <site-config.json> ti/mod/hmaker/website/mod/site-config/site-config.json
//========================================
Ti.Preload("ti/mod/hmaker/website/mod/site-config/site-config.json", {
  "meta" : null,
  "desktop" : {
    "mapping" : {
      "paths" : {
        "site-state.json" : "desktopSiteStateView"
      },
      "types" : {
      },
      "mimes" : {
        "application/json" : "desktopJsonView",
        "text/*, application/*" : "desktopTextView"
      },
      "races" : {
        "DIR"  : "desktopAdaptList",
        "FILE" : "desktopObjPreview"
      }
    }
  },
  "tablet" : "desktop",
  "phone" : "desktop",
  "views" : {
    "desktopSiteStateView" : {
      "comType" : "hmaker-site-state",
      "comConf" : {
        "home" : "=home",
        "content" : "=currentContent"
      },
      "actions" : [{
          "key"  : "saving",
          "type" : "action",
          "icon" : "zmdi-floppy",
          "text" : "i18n:save-change",
          "altDisplay" : {
            "icon" : "fas-spinner fa-pulse",
            "text" : "i18n:saving"
          },
          "enableBy" : "changed",
          "action" : "dispatch:main/saveCurrent",
          "shortcut" : "CTRL+S"
        }, {
          "key"  : "reloading",
          "type" : "action",
          "icon" : "zmdi-rotate-right",
          "text" : "i18n:revoke-change",
          "altDisplay" : {
            "icon" : "zmdi-refresh zmdi-hc-spin",
            "text" : "i18n:loading"
          },
          "action" : "dispatch:main/reloadCurrent"
        }, {
          "type" : "Group",
          "icon" : "zmdi-more-vert",
          "items" : [{
              "type" : "action",
              "icon" : "zmdi-info-outline",
              "text" : "i18n:properties",
              "action" : "main:editCurrentObjMeta"
            }]
          }]
    },
    "desktopTextView" : {
      "comType" : "ti-text-raw",
      "comConf" : {
        "showTitle" : false,
        "content" : "=currentContent",
        "contentIsChanged" : "=status.changed"
      },
      "actions" : [{
          "key"  : "saving",
          "type" : "action",
          "icon" : "zmdi-floppy",
          "text" : "i18n:save-change",
          "altDisplay" : {
            "icon" : "fas-spinner fa-pulse",
            "text" : "i18n:saving"
          },
          "enableBy" : "changed",
          "action" : "dispatch:main/saveCurrent",
          "shortcut" : "CTRL+S"
        }, {
          "key"  : "reloading",
          "type" : "action",
          "icon" : "zmdi-rotate-right",
          "text" : "i18n:revoke-change",
          "altDisplay" : {
            "icon" : "zmdi-refresh zmdi-hc-spin",
            "text" : "i18n:loading"
          },
          "action" : "dispatch:main/reloadCurrent"
        }, {
          "type" : "Group",
          "icon" : "zmdi-more-vert",
          "items" : [{
              "type" : "action",
              "icon" : "zmdi-info-outline",
              "text" : "i18n:properties",
              "action" : "main:editCurrentObjMeta"
            }]
          }]
    },
    "desktopJsonView" : {
      "comType" : "ti-text-json",
      "comConf" : {
        "data" : "=currentData"
      },
      "actions" : [{
          "key"  : "saving",
          "type" : "action",
          "icon" : "zmdi-floppy",
          "text" : "i18n:save-change",
          "altDisplay" : {
            "icon" : "fas-spinner fa-pulse",
            "text" : "i18n:saving"
          },
          "enableBy" : "changed",
          "action" : "dispatch:main/saveCurrent",
          "shortcut" : "CTRL+S"
        }, {
          "key"  : "reloading",
          "type" : "action",
          "icon" : "zmdi-rotate-right",
          "text" : "i18n:revoke-change",
          "altDisplay" : {
            "icon" : "zmdi-refresh zmdi-hc-spin",
            "text" : "i18n:loading"
          },
          "action" : "dispatch:main/reloadCurrent"
        }, {
          "type" : "Group",
          "icon" : "zmdi-more-vert",
          "items" : [{
              "type" : "action",
              "icon" : "zmdi-info-outline",
              "text" : "i18n:properties",
              "action" : "main:editCurrentObjMeta"
            }]
        }]
    },
    "desktopAdaptList" : {
      "comType" : "wn-adaptlist",
      "comConf" : {
        "list" : "=currentData.list"
      }
    },
    "desktopObjPreview" : {
      "comType" : "wn-obj-preview",
      "comConf" : {
        "meta" : "=currentMeta"
      }
    }
  },
  "status" : {
    "reloading" : false
  }
});
//========================================
// JOIN <site-config.mjs> ti/mod/hmaker/website/mod/site-config/site-config.mjs
//========================================
Ti.Preload("ti/mod/hmaker/website/mod/site-config/site-config.mjs", TI_PACK_EXPORTS['ti/mod/hmaker/website/mod/site-config/site-config.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/hmaker/website/mod/site-config/_mod.json
//========================================
Ti.Preload("ti/mod/hmaker/website/mod/site-config/_mod.json", {
  "name" : "hmaker-site-config",
  "namespaced" : true,
  "state" : "./site-config.json",
  "actions" : "./site-config-actions.mjs",
  "mixins" : "./site-config.mjs"
});
//========================================
// JOIN <site-tree-actions.mjs> ti/mod/hmaker/website/mod/site-tree/site-tree-actions.mjs
//========================================
Ti.Preload("ti/mod/hmaker/website/mod/site-tree/site-tree-actions.mjs", TI_PACK_EXPORTS['ti/mod/hmaker/website/mod/site-tree/site-tree-actions.mjs']);
//========================================
// JOIN <site-tree.json> ti/mod/hmaker/website/mod/site-tree/site-tree.json
//========================================
Ti.Preload("ti/mod/hmaker/website/mod/site-tree/site-tree.json", {
  "root" : {},
  "currentId" : null,
  "openedNodePaths" : {}
});
//========================================
// JOIN <site-tree.mjs> ti/mod/hmaker/website/mod/site-tree/site-tree.mjs
//========================================
Ti.Preload("ti/mod/hmaker/website/mod/site-tree/site-tree.mjs", TI_PACK_EXPORTS['ti/mod/hmaker/website/mod/site-tree/site-tree.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/hmaker/website/mod/site-tree/_mod.json
//========================================
Ti.Preload("ti/mod/hmaker/website/mod/site-tree/_mod.json", {
  "name" : "hmaker-site-tree",
  "namespaced" : true,
  "state" : "./site-tree.json",
  "actions" : "./site-tree-actions.mjs",
  "mixins" : "./site-tree.mjs"
});
//========================================
// JOIN <website-actions.mjs> ti/mod/hmaker/website/website-actions.mjs
//========================================
Ti.Preload("ti/mod/hmaker/website/website-actions.mjs", TI_PACK_EXPORTS['ti/mod/hmaker/website/website-actions.mjs']);
//========================================
// JOIN <website.json> ti/mod/hmaker/website/website.json
//========================================
Ti.Preload("ti/mod/hmaker/website/website.json", {
  "home": null,
  "status" : {
    "reloading"  : false,
    "doing"      : false,
    "saving"     : false,
    "deleting"   : false,
    "changed"    : false,
    "publishing" : false,
    "exposeHidden" : false
  }
});
//========================================
// JOIN <website.mjs> ti/mod/hmaker/website/website.mjs
//========================================
Ti.Preload("ti/mod/hmaker/website/website.mjs", TI_PACK_EXPORTS['ti/mod/hmaker/website/website.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/hmaker/website/_mod.json
//========================================
Ti.Preload("ti/mod/hmaker/website/_mod.json", {
  "name" : "hmaker-website",
  "namespaced" : true,
  "state" : "./website.json",
  "actions" : "./website-actions.mjs",
  "mixins" : "./website.mjs",
  "modules" : {
    "tree"    : "./mod/site-tree",
    "config"  : "./mod/site-config",
    "current" : "@mod:wn/obj-current"
  }
});
//========================================
// JOIN <ti-viewport.json> ti/mod/ti/viewport/ti-viewport.json
//========================================
Ti.Preload("ti/mod/ti/viewport/ti-viewport.json", {
  "mode" : "desktop",
  "activedIds" : []
});
//========================================
// JOIN <ti-viewport.mjs> ti/mod/ti/viewport/ti-viewport.mjs
//========================================
Ti.Preload("ti/mod/ti/viewport/ti-viewport.mjs", TI_PACK_EXPORTS['ti/mod/ti/viewport/ti-viewport.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/ti/viewport/_mod.json
//========================================
Ti.Preload("ti/mod/ti/viewport/_mod.json", {
  "state" : "./ti-viewport.json",
  "mixins" : "./ti-viewport.mjs"
});
//========================================
// JOIN <m-obj-axis-actions.mjs> ti/mod/wn/obj-axis/m-obj-axis-actions.mjs
//========================================
Ti.Preload("ti/mod/wn/obj-axis/m-obj-axis-actions.mjs", TI_PACK_EXPORTS['ti/mod/wn/obj-axis/m-obj-axis-actions.mjs']);
//========================================
// JOIN <m-obj-axis.json> ti/mod/wn/obj-axis/m-obj-axis.json
//========================================
Ti.Preload("ti/mod/wn/obj-axis/m-obj-axis.json", {
  "ancestors" : [], 
  "parent" : null, 
  "meta": null,
  "status" : {
    "changed"   : false,
    "saving"    : false,
    "reloading" : false
  }
});
//========================================
// JOIN <m-obj-axis.mjs> ti/mod/wn/obj-axis/m-obj-axis.mjs
//========================================
Ti.Preload("ti/mod/wn/obj-axis/m-obj-axis.mjs", TI_PACK_EXPORTS['ti/mod/wn/obj-axis/m-obj-axis.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/wn/obj-axis/_mod.json
//========================================
Ti.Preload("ti/mod/wn/obj-axis/_mod.json", {
  "name" : "wn-obj-axis",
  "namespaced" : true,
  "state" : "./m-obj-axis.json",
  "actions" : "./m-obj-axis-actions.mjs",
  "mixins" : "./m-obj-axis.mjs"
});
//========================================
// JOIN <m-obj-current-actions.mjs> ti/mod/wn/obj-current/m-obj-current-actions.mjs
//========================================
Ti.Preload("ti/mod/wn/obj-current/m-obj-current-actions.mjs", TI_PACK_EXPORTS['ti/mod/wn/obj-current/m-obj-current-actions.mjs']);
//========================================
// JOIN <m-obj-current.json> ti/mod/wn/obj-current/m-obj-current.json
//========================================
Ti.Preload("ti/mod/wn/obj-current/m-obj-current.json", {
  "meta" : null,
  "content" : null,
  "data" : null,
  "__saved_content" : null,
  "status" : {
    "changed"   : false,
    "saving"    : false,
    "reloading" : false,
    "publishing" : false
  },
  "fieldStatus" : {}
});
//========================================
// JOIN <m-obj-current.mjs> ti/mod/wn/obj-current/m-obj-current.mjs
//========================================
Ti.Preload("ti/mod/wn/obj-current/m-obj-current.mjs", TI_PACK_EXPORTS['ti/mod/wn/obj-current/m-obj-current.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/wn/obj-current/_mod.json
//========================================
Ti.Preload("ti/mod/wn/obj-current/_mod.json", {
  "name" : "wn-obj-current",
  "namespaced" : true,
  "state" : "./m-obj-current.json",
  "actions" : "./m-obj-current-actions.mjs",
  "mixins" : "./m-obj-current.mjs"
});
//========================================
// JOIN <m-obj-meta-actions.mjs> ti/mod/wn/obj-meta/m-obj-meta-actions.mjs
//========================================
Ti.Preload("ti/mod/wn/obj-meta/m-obj-meta-actions.mjs", TI_PACK_EXPORTS['ti/mod/wn/obj-meta/m-obj-meta-actions.mjs']);
//========================================
// JOIN <m-obj-meta.json> ti/mod/wn/obj-meta/m-obj-meta.json
//========================================
Ti.Preload("ti/mod/wn/obj-meta/m-obj-meta.json", {
  "ancestors" : [], 
  "parent" : null, 
  "meta": null,
  "status" : {
    "changed"   : false,
    "saving"    : false,
    "reloading" : false
  },
  "fieldStatus" : {}
});
//========================================
// JOIN <m-obj-meta.mjs> ti/mod/wn/obj-meta/m-obj-meta.mjs
//========================================
Ti.Preload("ti/mod/wn/obj-meta/m-obj-meta.mjs", TI_PACK_EXPORTS['ti/mod/wn/obj-meta/m-obj-meta.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/wn/obj-meta/_mod.json
//========================================
Ti.Preload("ti/mod/wn/obj-meta/_mod.json", {
  "state" : "./m-obj-meta.json",
  "actions" : "./m-obj-meta-actions.mjs",
  "mixins" : "./m-obj-meta.mjs"
});
//========================================
// JOIN <m-session.json> ti/mod/wn/session/m-session.json
//========================================
Ti.Preload("ti/mod/wn/session/m-session.json", {
  "id"     : null,
  "grp"    : null,
  "du"     : -1,
  "expi"   : 0,
  "pwd"    : "~",
  "ticket" : null,
  "uid"    : null,
  "unm"    : null,
  "me"     : null,
  "envs"   : {}
});
//========================================
// JOIN <m-session.mjs> ti/mod/wn/session/m-session.mjs
//========================================
Ti.Preload("ti/mod/wn/session/m-session.mjs", TI_PACK_EXPORTS['ti/mod/wn/session/m-session.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/wn/session/_mod.json
//========================================
Ti.Preload("ti/mod/wn/session/_mod.json", {
  "state" : "./m-session.json",
  "mixins" : ["./m-session.mjs"]
});
//========================================
// JOIN <m-thing-actions.mjs> ti/mod/wn/thing/m-thing-actions.mjs
//========================================
Ti.Preload("ti/mod/wn/thing/m-thing-actions.mjs", TI_PACK_EXPORTS['ti/mod/wn/thing/m-thing-actions.mjs']);
//========================================
// JOIN <m-thing-export.mjs> ti/mod/wn/thing/m-thing-export.mjs
//========================================
Ti.Preload("ti/mod/wn/thing/m-thing-export.mjs", TI_PACK_EXPORTS['ti/mod/wn/thing/m-thing-export.mjs']);
//========================================
// JOIN <m-thing-import.mjs> ti/mod/wn/thing/m-thing-import.mjs
//========================================
//========================================
// JOIN <m-thing.json> ti/mod/wn/thing/m-thing.json
//========================================
Ti.Preload("ti/mod/wn/thing/m-thing.json", {
  "meta": null,
  "currentDataDir"  : null,
  "currentDataHome" : null,
  "currentDataHomeObj" : null,
  "status" : {
    "reloading" : false,
    "doing"     : false,
    "saving"    : false,
    "deleting"  : false,
    "changed"   : false,
    "restoring" : false,
    "cleaning"  : false,
    "inRecycleBin" : false
  }
});
//========================================
// JOIN <m-thing.mjs> ti/mod/wn/thing/m-thing.mjs
//========================================
Ti.Preload("ti/mod/wn/thing/m-thing.mjs", TI_PACK_EXPORTS['ti/mod/wn/thing/m-thing.mjs']);
//========================================
// JOIN <m-thing-config-actions.mjs> ti/mod/wn/thing/mod/config/m-thing-config-actions.mjs
//========================================
Ti.Preload("ti/mod/wn/thing/mod/config/m-thing-config-actions.mjs", TI_PACK_EXPORTS['ti/mod/wn/thing/mod/config/m-thing-config-actions.mjs']);
//========================================
// JOIN <m-thing-config.json> ti/mod/wn/thing/mod/config/m-thing-config.json
//========================================
Ti.Preload("ti/mod/wn/thing/mod/config/m-thing-config.json", {
  "meta": null,
  "shown" : {
    "search"  : true,
    "meta"    : true,
    "content" : true,
    "files"   : false
  },
  "listOpen" : {
    "content" : true
  },
  "schema": {},
  "layout" : {
    "deskstop" : {},
    "tablet" : {},
    "phone" : {}
  },
  "actions" : [],
  "status" : {
    "reloading" : false,
    "saving"    : false
  }
});
//========================================
// JOIN <m-thing-config.mjs> ti/mod/wn/thing/mod/config/m-thing-config.mjs
//========================================
Ti.Preload("ti/mod/wn/thing/mod/config/m-thing-config.mjs", TI_PACK_EXPORTS['ti/mod/wn/thing/mod/config/m-thing-config.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/wn/thing/mod/config/_mod.json
//========================================
Ti.Preload("ti/mod/wn/thing/mod/config/_mod.json", {
  "namespaced" : true,
  "state" : "./m-thing-config.json",
  "actions" : "./m-thing-config-actions.mjs",
  "mixins" : "./m-thing-config.mjs"
});
//========================================
// JOIN <m-thing-current-actions.mjs> ti/mod/wn/thing/mod/current/m-thing-current-actions.mjs
//========================================
Ti.Preload("ti/mod/wn/thing/mod/current/m-thing-current-actions.mjs", TI_PACK_EXPORTS['ti/mod/wn/thing/mod/current/m-thing-current-actions.mjs']);
//========================================
// JOIN <m-thing-current.json> ti/mod/wn/thing/mod/current/m-thing-current.json
//========================================
Ti.Preload("ti/mod/wn/thing/mod/current/m-thing-current.json", {
  "meta" : null,
  "content" : null,
  "data" : null,
  "__saved_content" : null,
  "status" : {
    "changed"   : false,
    "saving"    : false,
    "reloading" : false,
    "publishing" : false
  },
  "fieldStatus" : {}
});
//========================================
// JOIN <m-thing-current.mjs> ti/mod/wn/thing/mod/current/m-thing-current.mjs
//========================================
Ti.Preload("ti/mod/wn/thing/mod/current/m-thing-current.mjs", TI_PACK_EXPORTS['ti/mod/wn/thing/mod/current/m-thing-current.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/wn/thing/mod/current/_mod.json
//========================================
Ti.Preload("ti/mod/wn/thing/mod/current/_mod.json", {
  "namespaced" : true,
  "state" : "./m-thing-current.json",
  "actions" : "./m-thing-current-actions.mjs",
  "mixins" : "./m-thing-current.mjs"
});
//========================================
// JOIN <m-thing-search-actions.mjs> ti/mod/wn/thing/mod/search/m-thing-search-actions.mjs
//========================================
Ti.Preload("ti/mod/wn/thing/mod/search/m-thing-search-actions.mjs", TI_PACK_EXPORTS['ti/mod/wn/thing/mod/search/m-thing-search-actions.mjs']);
//========================================
// JOIN <m-thing-search.json> ti/mod/wn/thing/mod/search/m-thing-search.json
//========================================
Ti.Preload("ti/mod/wn/thing/mod/search/m-thing-search.json", {
  "meta": null,
  "filter" : {},
  "sorter" : {
    "ct" : -1
  },
  "inRecycleBin" : false,
  "pager" : {
    "pn"   : 1,
    "pgsz" : 50,
    "pgc"  : 0,
    "sum"  : 0,
    "skip" : 0,
    "count": 0
  },
  "showKeys" : null,
  "count" : 0,
  "currentId" : null,
  "checkedIds" : [],
  "list" : [],
  "status" : {
    "reloading" : false,
    "saving"    : false,
    "deleting"  : false
  }
});
//========================================
// JOIN <m-thing-search.mjs> ti/mod/wn/thing/mod/search/m-thing-search.mjs
//========================================
Ti.Preload("ti/mod/wn/thing/mod/search/m-thing-search.mjs", TI_PACK_EXPORTS['ti/mod/wn/thing/mod/search/m-thing-search.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/wn/thing/mod/search/_mod.json
//========================================
Ti.Preload("ti/mod/wn/thing/mod/search/_mod.json", {
  "namespaced" : true,
  "state" : "./m-thing-search.json",
  "actions" : "./m-thing-search-actions.mjs",
  "mixins" : "./m-thing-search.mjs"
});
//========================================
// JOIN <_mod.json> ti/mod/wn/thing/_mod.json
//========================================
Ti.Preload("ti/mod/wn/thing/_mod.json", {
  "name" : "wn-thing",
  "namespaced" : true,
  "state" : "./m-thing.json",
  "actions" : [
    "./m-thing-actions.mjs",
    "./m-thing-import.mjs",
    "./m-thing-export.mjs"
  ],
  "mixins" : "./m-thing.mjs",
  "modules" : {
    "config" : "./mod/config",
    "search" : "./mod/search",
    "current" : "./mod/current"
  }
});
//========================================
// JOIN <site-main.html> ti/lib/www/com/site-main.html
//========================================
Ti.Preload("ti/lib/www/com/site-main.html", `<div class="site-main" @click.right="OnMouseRightClick">
  <ti-gui 
    class="site-page"
    v-bind="PageGUI"
    :loading-as="loading"
    :shown="page.shown"/>
  <!--pre>{{page}}</pre-->
</div>`);
//========================================
// JOIN <site-main.mjs> ti/lib/www/com/site-main.mjs
//========================================
Ti.Preload("ti/lib/www/com/site-main.mjs", TI_PACK_EXPORTS['ti/lib/www/com/site-main.mjs']);
//========================================
// JOIN <mod-address-actions.mjs> ti/lib/www/mod/auth/mod-address-actions.mjs
//========================================
Ti.Preload("ti/lib/www/mod/auth/mod-address-actions.mjs", TI_PACK_EXPORTS['ti/lib/www/mod/auth/mod-address-actions.mjs']);
//========================================
// JOIN <mod-auth-actions.mjs> ti/lib/www/mod/auth/mod-auth-actions.mjs
//========================================
Ti.Preload("ti/lib/www/mod/auth/mod-auth-actions.mjs", TI_PACK_EXPORTS['ti/lib/www/mod/auth/mod-auth-actions.mjs']);
//========================================
// JOIN <mod-profile-actions.mjs> ti/lib/www/mod/auth/mod-profile-actions.mjs
//========================================
Ti.Preload("ti/lib/www/mod/auth/mod-profile-actions.mjs", TI_PACK_EXPORTS['ti/lib/www/mod/auth/mod-profile-actions.mjs']);
//========================================
// JOIN <www-mod-auth.json> ti/lib/www/mod/auth/www-mod-auth.json
//========================================
Ti.Preload("ti/lib/www/mod/auth/www-mod-auth.json", {
  "ticket" : null,
  "expi"   : 0,
  "me"     : null,
  "profile": null,
  "countries"  : null,
  "countryMap" : null,
  "addresses": [],
  "defaultAddr": null,
  "paths"  : {
    "checkme"         : "auth/checkme",
    "login_by_wxcode" : "auth/login_by_wxcode",
    "login_by_phone"  : "auth/login_by_phone",
    "login_by_email"  : "auth/login_by_email",
    "login_by_passwd" : "auth/login_by_passwd",
    "bind_phone"      : "auth/bind_account",
    "bind_email"      : "auth/bind_account",
    "get_sms_vcode"   : "auth/get_sms_vcode",
    "get_email_vcode" : "auth/get_email_vcode",
    "check_name"      : "auth/check_name",
    "check_phone"     : "auth/check_phone",
    "logout"          : "auth/logout",
    "resetpasswd"     : "auth/resetpasswd",
    "countries"       : "lbs/countries",
    "addr_mine"       : "address/mine",
    "addr_create"     : "address/create",
    "addr_update"     : "address/update",
    "addr_delete"     : "address/delete",
    "profile_save"    : "auth/setme"
  }
});
//========================================
// JOIN <www-mod-auth.mjs> ti/lib/www/mod/auth/www-mod-auth.mjs
//========================================
Ti.Preload("ti/lib/www/mod/auth/www-mod-auth.mjs", TI_PACK_EXPORTS['ti/lib/www/mod/auth/www-mod-auth.mjs']);
//========================================
// JOIN <_mod.json> ti/lib/www/mod/auth/_mod.json
//========================================
Ti.Preload("ti/lib/www/mod/auth/_mod.json", {
  "name" : "www-mod-auth",
  "namespaced" : true,
  "state" : "./www-mod-auth.json",
  "actions": [
      "./mod-auth-actions.mjs",
      "./mod-address-actions.mjs",
      "./mod-profile-actions.mjs"
    ],
  "mixins" : "./www-mod-auth.mjs"
});
//========================================
// JOIN <www-mod-page.json> ti/lib/www/mod/page/www-mod-page.json
//========================================
Ti.Preload("ti/lib/www/mod/page/www-mod-page.json", {
  "className": null,
  "title" : null,
  "name"  : null,
  "href"  : null,
  "path"  : null,
  "pageUri": null,
  "pageUriWithParams" : true,
  "ready" : 0,
  "finger" : null,
  "params" : {},
  "anchor" : null,
  "apis" : {},
  "data" : {},
  "contextMenu": true,
  "explainDataKey": [],
  "layout" : {
    "desktop" : {},
    "tablet"  : "desktop",
    "phone"   : "desktop"
  },
  "shown" : {},
  "schema" : {},
  "actions" : {}
});
//========================================
// JOIN <www-mod-page.mjs> ti/lib/www/mod/page/www-mod-page.mjs
//========================================
Ti.Preload("ti/lib/www/mod/page/www-mod-page.mjs", TI_PACK_EXPORTS['ti/lib/www/mod/page/www-mod-page.mjs']);
//========================================
// JOIN <_mod.json> ti/lib/www/mod/page/_mod.json
//========================================
Ti.Preload("ti/lib/www/mod/page/_mod.json", {
  "name" : "www-mod-page",
  "namespaced" : true,
  "state" : "./www-mod-page.json",
  "mixins" : "./www-mod-page.mjs"
});
//========================================
// JOIN <www-mod-shop.json> ti/lib/www/mod/shop/www-mod-shop.json
//========================================
Ti.Preload("ti/lib/www/mod/shop/www-mod-shop.json", {
  "basket" : [],

  "payment" : null,

  "paths"  : {
    "buyIt"     : "entity/buy/it",
    "buyRemove" : "entity/buy/rm",
    "buyGetAll" : "entity/buy/all",
    "buyClean"  : "entity/buy/clean",
    "objs" : "objs",
    "buy"  : "pay/buy",
    "pay"  : "pay/pay",
    "checkOrder": "pay/check",
    "fetchOrder": "pay/order"
  }
});
//========================================
// JOIN <www-mod-shop.mjs> ti/lib/www/mod/shop/www-mod-shop.mjs
//========================================
Ti.Preload("ti/lib/www/mod/shop/www-mod-shop.mjs", TI_PACK_EXPORTS['ti/lib/www/mod/shop/www-mod-shop.mjs']);
//========================================
// JOIN <_mod.json> ti/lib/www/mod/shop/_mod.json
//========================================
Ti.Preload("ti/lib/www/mod/shop/_mod.json", {
  "name" : "www-mod-shop",
  "namespaced" : true,
  "state" : "./www-mod-shop.json",
  "mixins" : "./www-mod-shop.mjs"
});
//========================================
// JOIN <www-mod-site.mjs> ti/lib/www/mod/www-mod-site.mjs
//========================================
Ti.Preload("ti/lib/www/mod/www-mod-site.mjs", TI_PACK_EXPORTS['ti/lib/www/mod/www-mod-site.mjs']);
//========================================
// JOIN <layout.json> /a/load/wn.manager/gui/layout.json
//========================================
Ti.Preload("/a/load/wn.manager/gui/layout.json", {
  "desktop" : {
    "type" : "rows",
    "border" : true,
    "blocks" : [{
      "name" : "sky",
      "size" : 48,
      "type" : "rows",
      "border" : true,
      "blocks" : [{
          "type" : "cols",
          "blocks" : [{
              "name" : "logo",
              "size" : "auto",
              "body" : "pcSkyLogo"
            }, {
              "name" : "title",
              "size" : "stretch",
              "body" : "pcSkyTitle"
            }, {
              "name" : "session",
              "size" : "auto",
              "body" : "pcSkySession"
            }, {
              "name" : "menu",
              "size" : "auto",
              "body" : "pcSkyMenu"
            }]
      }]
    }, {
      "name" : "main",
      "size" : "100px",
      "flex" : "both",
      "type" : "cols",
      "border" : true,
      "blocks" : [{
          "name"  : "sidebar",
          "size" : "1.8rem",
          "body"  : "pcMainSideBar"
        }, {
          "name" : "arena",
          "size" : "stretch",
          "body" : "pcMainArena"
        }]
    }, {
      "name" : "footer",
      "size" : ".32rem",
      "body" : "pcFooter"
    }]
  },
  "tablet" : "desktop",
  "phone" : "desktop"
});
//========================================
// JOIN <schema.json> /a/load/wn.manager/gui/schema.json
//========================================
Ti.Preload("/a/load/wn.manager/gui/schema.json", {
  "pcSkyLogo" : {
    "comType" : "ti-icon",
    "comConf" : {
      "width" : "3em", 
      "fontSize" : "1.5em", 
      "value" : "=Logo"
    }
  },
  "pcSkyTitle" : {
    "comType" : "ti-crumb",
    "comConf" : "=Crumb"
  },
  "pcSkySession" : {
    "comType" : "wn-session-badge",
    "comConf" : "=SessionBadge"
  },
  "pcSkyMenu" : {
    "comType" : "ti-actionbar",
    "comConf" : "=ActionMenu"
  },
  "pcMainSideBar" : {
    "comType" : "wn-gui-side-nav",
    "comConf" : {
      "statusStoreKey" : "=sidebarStatusStoreKey",
      "items" : "=sidebar",
      "highlightItemId"   : "=MetaId",
      "highlightItemPath" : "=MetaPath"
    }
  },
  "pcMainArena" : {
    "comType" : "=comType",
    "comConf" : "=Arena"
  },
  "pcFooter" : {
    "comType" : "wn-gui-footer",
    "comConf" : "=Footer"
  }
});
//========================================
// JOIN <setup.json> /a/load/wn.manager/gui/setup.json
//========================================
Ti.Preload("/a/load/wn.manager/gui/setup.json", {
  "shown" : {
    "desktop" : {
      "logo"         : "==theLogo",
      "menu"         : "==theMenu",
      "sessionBadge" : "==theSessionBadge"
    },
    "tablet"  : {},
    "phone"   : {}
  },
  "canLoading" : true,
  "loadingAs" : false,
  "firstCrumbIndex" : 1,
  "crumbTitleBy" : "title",
  "logo" : "<:home>"
});
//========================================
// JOIN <wn-manager-computed.mjs> /a/load/wn.manager/wn-manager-computed.mjs
//========================================
Ti.Preload("/a/load/wn.manager/wn-manager-computed.mjs", TI_PACK_EXPORTS['/a/load/wn.manager/wn-manager-computed.mjs']);
//========================================
// JOIN <wn-manager-methods.mjs> /a/load/wn.manager/wn-manager-methods.mjs
//========================================
Ti.Preload("/a/load/wn.manager/wn-manager-methods.mjs", TI_PACK_EXPORTS['/a/load/wn.manager/wn-manager-methods.mjs']);
//========================================
// JOIN <wn-manager.html> /a/load/wn.manager/wn-manager.html
//========================================
Ti.Preload("/a/load/wn.manager/wn-manager.html", `<ti-gui
  class="wn-manager"
  :class="TopClass"
  :layout="GuiLayout"
  :schema="GuiSchema"
  :shown="GuiShown"
  :can-loading="GuiCanLoading"
  :loading-as="GuiLoadingAs"
  @sky::menu::update:me:vars="OnUpdateMyVars"
  @arena::expose-hidden="OnExposeHidden"
  @do:logout="OnLogout"
  @item:active="OnCurrentMetaChange"
  @open:wn:obj="OnCurrentMetaChange"
  @arena::change="OnCurrentDataChange"
  @arena::actions:update="OnUpdateActions"
  @arena::indicate="OnArenaIndicate"
  @arena::message="OnArenaMessage"
  @arena::update:view:status="OnArenaViewStatusUpdated"/>`);
//========================================
// JOIN <wn-manager.mjs> /a/load/wn.manager/wn-manager.mjs
//========================================
Ti.Preload("/a/load/wn.manager/wn-manager.mjs", TI_PACK_EXPORTS['/a/load/wn.manager/wn-manager.mjs']);
//========================================
// JOIN <hmaker.i18n.json> ti/i18n/en-us/hmaker.i18n.json
//========================================
Ti.Preload("ti/i18n/en-us/hmaker.i18n.json", {
  "hmk-css-c-auto" : "auto",
  "hmk-css-g-inherit" : "inherit",
  "hmk-css-g-initial" : "initial",
  "hmk-css-g-unset" : "unset",
  "hmk-css-edit" : "Edit css",
  "hmk-css-grp-texting" : "Text setup",
  "hmk-css-grp-aspect" : "Aspect setup",
  "hmk-css-grp-measure" : "Measure setup",
  "hmk-css-border" : "Border",
  "hmk-css-border-radius" : "Rounded",
  "hmk-css-margin" : "Margin",
  "hmk-css-padding" : "Padding",
  "hmk-css-color" : "Color",
  "hmk-css-background" : "Background",
  "hmk-css-background-color" : "BgColor",
  "hmk-css-box-shadow" : "Box shadow",
  "hmk-css-text-shadow" : "Text shadow",
  "hmk-css-overflow" : "Overflow",
  "hmk-css-overflow-scroll" : "scroll",
  "hmk-css-overflow-hidden" : "hidden",
  "hmk-css-overflow-clip" : "clip",
  "hmk-css-overflow-visible" : "visible",
  "hmk-css-width" : "Width",
  "hmk-css-height" : "Height",
  "hmk-css-max-width" : "Max width",
  "hmk-css-max-height" : "Max height",
  "hmk-css-min-width" : "Min width",
  "hmk-css-min-height" : "Min height",
  "hmk-css-line-height" : "Line height",
  "hmk-css-letter-spacing" : "Letter space",
  "hmk-class-pick" : "Edit class selector",
  "hmk-class-item-space" : "Item space",
  "hmk-class-flex" : "Flex",
  "hmk-class-flex-none" : "None",
  "hmk-class-flex-both" : "Both",
  "hmk-class-flex-grow" : "Grow",
  "hmk-class-flex-shrink" : "Shrink",
  "hmk-class-text" : "Text",
  "hmk-class-text-in" : "Inside",
  "hmk-class-text-out" : "Outside",
  "hmk-class-at" : "Position",
  "hmk-class-at-center" : "Center",
  "hmk-class-at-top" : "Top",
  "hmk-class-at-bottom" : "Bottom",
  "hmk-class-at-left" : "Left",
  "hmk-class-at-right" : "Right",
  "hmk-class-at-bottom-left" : "Left bottom",
  "hmk-class-at-bottom-right" : "Right bottom",
  "hmk-class-at-top-left" : "Left top",
  "hmk-class-at-top-right" : "Right top",
  "hmk-class-font-size" : "Size",
  "hmk-class-xs" : "XS",
  "hmk-class-sm" : "SM",
  "hmk-class-md" : "MD",
  "hmk-class-lg" : "LG",
  "hmk-class-xl" : "XL",
  "hmk-class-text-style" : "Text style",
  "hmk-class-ts-mask" : "Mask",
  "hmk-class-ts-shadow" : "Shadow",
  "hmk-class-hover" : "Hover",
  "hmk-class-hover-to-up" : "Up",
  "hmk-class-hover-to-zoom" : "Zoom",
  "com-form": "Form",
  "com-label": "Label",
  "com-list": "list",
  "hm-type-Array": "Array",
  "hm-type-Boolean": "Boolean",
  "hm-type-Group": "Group",
  "hm-type-Integer": "Integer",
  "hm-type-Number": "Number",
  "hm-type-Object": "Object",
  "hm-type-String": "String",
  "hm-type-icons": {
    "Array": "Zmdi-format-list-bulleted",
    "Boolean": "Zmdi-toll",
    "Group": "Zmdi-collection-bookmark",
    "Integer": "Zmdi-n-6-square",
    "Number": "Zmdi-input-svideo",
    "Object": "Zmdi-toys",
    "String": "Zmdi-translate"
  },
  "hmaker-com-conf-blank": "请选择一个控件设置其详情",
  "hmaker-com-type-blank": "选择一个控件",
  "hmaker-edit-form-del-group-all": "组以及全部字段",
  "hmaker-edit-form-del-group-confirm": "您是要删除组以及其内的全部字段，还是仅是组？",
  "hmaker-edit-form-del-group-only": "仅是组",
  "hmaker-edit-form-field-nil": "请选择一个字段编辑详情",
  "hmaker-edit-form-new-field": "新字段",
  "hmaker-edit-form-new-field-e0": "字段名不能以数字开头，内容只能为小写英文字母数字和下划线",
  "hmaker-edit-form-new-field-e1": "字段【${val}】已存在，请另选一个名称",
  "hmaker-edit-form-new-field-tip": "请输入新字段名（只能为小写英文字母数字和下划线）",
  "hmaker-edit-form-new-group": "新分组",
  "hmaker-edit-form-new-group-tip": "请输入新分组名",
  "hmaker-edit-form-nil-field": "请先选择一个字段",
  "hmaker-edit-form-not-current": "请选择一个字段或者字段组",
  "hmaker-layout-cols": "列布局",
  "hmaker-layout-rows": "行布局",
  "hmaker-layout-tabs": "标签布局",
  "hmaker-nav-blank-item": "请选择一个导航项目编辑",
  "hmaker-nav-k-display": "链接显示内容",
  "hmaker-nav-k-icon": "链接图标",
  "hmaker-nav-k-title": "链接文字",
  "hmaker-nav-k-type": "链接类型",
  "hmaker-nav-k-value": "链接目标",
  "hmaker-nav-tp-dispatch": "方法调用",
  "hmaker-nav-tp-href": "外部链接",
  "hmaker-nav-tp-page": "站点页面",
  "hmaker-site-k-apiBase": "接口路径",
  "hmaker-site-k-base": "资源路径",
  "hmaker-site-k-captcha": "验证码路径",
  "hmaker-site-k-domain": "所属域",
  "hmaker-site-k-entry": "着陆页",
  "hmaker-site-prop": "站点属性",
  "hmaker-site-state": "站点全局配置",
  "hmaker-site-state-actions": "全局动作表",
  "hmaker-site-state-apis": "接口集",
  "hmaker-site-state-blocks": "预定义布局",
  "hmaker-site-state-general": "通用配置",
  "hmaker-site-state-nav": "全局导航条",
  "hmaker-site-state-router": "页面路由",
  "hmaker-site-state-schema": "预定义控件",
  "hmaker-site-state-utils": "扩展函数",
  "hmaker-site-tree": "站点结构",
  "hmaker-site-tree-loading": "正在加载站点结构...",
  "hmk-adjustDelay": "调整延迟",
  "hmk-aspect": "外观",
  "hmk-autoI18n": "国际化",
  "hmk-behavior": "行为",
  "hmk-blankAs": "空白样式",
  "hmk-breakLine": "维持换行",
  "hmk-currentTab": "当前标签",
  "hmk-data": "数据",
  "hmk-dict": "数据字典",
  "hmk-editable": "可编辑",
  "hmk-field-checkEquals": "检查相等",
  "hmk-field-com": "编辑控件",
  "hmk-field-defaultAs": "默认值",
  "hmk-field-disabled": "失效条件",
  "hmk-field-height": "高度",
  "hmk-field-hidden": "隐藏条件",
  "hmk-field-icon": "图标",
  "hmk-field-name": "键名",
  "hmk-field-serializer": "自定义保存",
  "hmk-field-tip": "提示说明",
  "hmk-field-title": "显示名",
  "hmk-field-transformer": "自定义转换",
  "hmk-field-type": "类型",
  "hmk-field-width": "宽度",
  "hmk-fieldStatus": "字段状态",
  "hmk-fields": "字段",
  "hmk-fields-advance": "高级",
  "hmk-fields-general": "基本",
  "hmk-form-data": "数据源",
  "hmk-form-height": "表单高度",
  "hmk-form-onlyFields": "仅声明字段",
  "hmk-form-width": "表单宽度",
  "hmk-format": "格式化",
  "hmk-height": "控件高度",
  "hmk-href": "超链接",
  "hmk-icon": "表单图标",
  "hmk-measure": "尺寸",
  "hmk-mode": "显示方式",
  "hmk-mode-all": "全部",
  "hmk-mode-tab": "标签",
  "hmk-newTab": "新窗口",
  "hmk-placeholder": "占位文本",
  "hmk-prefixIcon": "前缀图标",
  "hmk-prefixText": "前缀文字",
  "hmk-spacing": "间距",
  "hmk-spacing-comfy": "舒适",
  "hmk-spacing-tiny": "紧凑",
  "hmk-suffixIcon": "后缀图标",
  "hmk-suffixText": "后缀文字",
  "hmk-tabAt": "标签位置",
  "hmk-tabAt-bottom-center": "下部居中",
  "hmk-tabAt-bottom-left": "下部居左",
  "hmk-tabAt-bottom-right": "下部居右",
  "hmk-tabAt-top-center": "上部居中",
  "hmk-tabAt-top-left": "上部居左",
  "hmk-tabAt-top-right": "上部居右",
  "hmk-title": "表单标题",
  "hmk-trimed": "修剪空白",
  "hmk-value": "输入值",
  "hmk-valueMaxWidth": "值最大宽度",
  "hmk-width": "控件宽度"
});
//========================================
// JOIN <ti-datetime.i18n.json> ti/i18n/en-us/ti-datetime.i18n.json
//========================================
Ti.Preload("ti/i18n/en-us/ti-datetime.i18n.json", {
  "Apr": "April",
  "Aug": "August",
  "Dec": "December",
  "Feb": "February",
  "Fri": "Fri",
  "Friday": "Friday",
  "Jan": "January",
  "Jul": "July",
  "Jun": "June",
  "Mar": "March",
  "May": "May",
  "Mon": "Mon",
  "Monday": "Monday",
  "Nov": "November",
  "Oct": "October",
  "Sat": "Sat",
  "Saturday": "Saturday",
  "Sep": "September",
  "Sun": "Sun",
  "Sunday": "Sunday",
  "Thu": "Thu",
  "Thursday": "Thursday",
  "Tue": "Tue",
  "Tuesday": "Tuesday",
  "Wed": "Wed",
  "Wednesday": "Wednesday",
  "blank-date": "Select a date",
  "blank-date-range": "Select a date range",
  "blank-datetime": "Select datetime",
  "blank-month": "Select month",
  "blank-time": "Select time",
  "blank-time-range": "Select a time range",
  "cal": {
    "abbr": {
      "Apr": "Apr",
      "Aug": "Aug",
      "Dec": "Dec",
      "Feb": "Feb",
      "Jan": "Jan",
      "Jul": "Jul",
      "Jun": "Jun",
      "Mar": "Mar",
      "May": "May",
      "Nov": "Nov",
      "Oct": "Oct",
      "Sep": "Sep"
    },
    "d-range-beyond-days": "${yy0}-${MM0}-${dd0} to ${dd1}",
    "d-range-beyond-months": "${yy0}-${MM0}-${dd0} to ${MM1}-${dd1}",
    "d-range-beyond-years": "${yy0}-${MM0}-${dd0} to ${yy1}-${MM1}-${dd1}",
    "d-range-in-same-day": "${yy0}-${MM0}-${dd0} whole day",
    "m-range-beyond-months": "${yy0}-${MT0} to ${MT1}",
    "m-range-beyond-years": "${yy0}-${MT0} to ${yy1}-${MT1}",
    "week": ["S", "M", "T", "W", "T", "F", "S"]
  },
  "du-in-min": "${n}Min",
  "time": {
    "any-time": "yyyy-M-d",
    "in-year": "M-dd",
    "past-in-min": "Just now",
    "past-in-hour": "In ${min}mins",
    "past-in-day": "In ${hour}hours",
    "past-in-week": "In ${day}days",
    "future-in-min": "Soon",
    "future-in-hour": "After ${min}mins",
    "future-in-day": "After ${hour}hours",
    "future-in-week": "After ${day}days"
  },
  "time-begin": "Begin Time",
  "time-end": "End Time",
  "time-ms": "Ms",
  "today": "Today",
  "tu-day": "Day",
  "tu-hou": "Hr",
  "tu-min": "Min",
  "tu-mon": "Month",
  "tu-sec": "Sec",
  "tu-week": "Week",
  "tu-year": "Year"
});
//========================================
// JOIN <ti-text-editor.i18n.json> ti/i18n/en-us/ti-text-editor.i18n.json
//========================================
Ti.Preload("ti/i18n/en-us/ti-text-editor.i18n.json", {
  "wordp-h0": "Main",
  "wordp-h1": "Heading 1",
  "wordp-h2": "Heading 2",
  "wordp-h3": "Heading 3",
  "wordp-h4": "Heading 4",
  "wordp-h5": "Heading 5",
  "wordp-h6": "Heading 6",
  "wordp-heading": "Heading levels",
  "wordp-link": "Hyperlink",
  "wordp-nil-sel": "Please select a paragraph first"
});
//========================================
// JOIN <web.i18n.json> ti/i18n/en-us/web.i18n.json
//========================================
Ti.Preload("ti/i18n/en-us/web.i18n.json", {
  "account": "Account",
  "account-flt-tip": "Filter by account name",
  "account-manage": "Accounts",
  "account-meta": "Account properties",
  "account-meta-tip": "Choose an account for detail",
  "address-consignee": "Consignee",
  "address-empty-list": "No shipping address",
  "address-flt-tip": "Filter by address name",
  "address-is-dft": "Default shipping address",
  "address-k-area": "Area",
  "address-k-city": "City",
  "address-k-code": "Addr code",
  "address-k-code-tip": "Your postcode",
  "address-k-consignee": "Consignee",
  "address-k-country": "Country",
  "address-k-dftaddr": "Default address",
  "address-k-door": "Door",
  "address-k-email": "Email",
  "address-k-phone": "Phone",
  "address-k-postcode": "Postcode",
  "address-k-province": "Province",
  "address-k-street": "Street",
  "address-k-title": "Address",
  "address-k-tp": "Addr Type",
  "address-k-tp-s": "SELLER",
  "address-k-tp-u": "USER",
  "address-k-uid": "User",
  "address-k-uid-tip": "Filter by username",
  "address-meta": "Address properties",
  "address-nil": "Address blank",
  "address-nil-detail": "Select an address for details",
  "address-rm-confirm": "Are you sure you want to delete this address?",
  "address-set-dft": "Set as default address",
  "address-shipping-add": "Add shipping address",
  "admin-flt-tip": "Filter by admin name",
  "admin-meta": "Admin properties",
  "admin-new": "New admin",
  "admin-nickname": "Admin nickname",
  "admin-no-detail": "Select an admin for detail",
  "ar-cate": "Catetory",
  "ar-content": "Content",
  "ar-duration": "Reading time",
  "ar-flt-tip": "Filter by article title",
  "ar-meta": "Article property",
  "ar-meta-tip": "Choose an article for detail",
  "ar-new": "New article",
  "ar-nm": "Name",
  "ar-pubat": "Publish at",
  "ar-thumb": "Thumbnail",
  "ar-title": "Title",
  "ar-watch-c": "Watch count",
  "auth-bind": "Bind",
  "auth-bind-email-title": "Bind email",
  "auth-bind-phone-title": "Bind phone",
  "auth-blank-email": "Blank email address not allowed",
  "auth-blank-name": "Blank name not allowed",
  "auth-blank-name-passwd": "Blank name or password",
  "auth-blank-phone": "Blank phone number not allowd",
  "auth-doing": "Verifying",
  "auth-email-tip": "Email address",
  "auth-email-title": "Sign by email",
  "auth-email-vcode": "Email password",
  "auth-email-vcode-get": "Get email password",
  "auth-go-email": "Sign by email",
  "auth-go-passwd": "Sign in by password",
  "auth-go-phone": "Sign by sms",
  "auth-login": "Sign in",
  "auth-login-NoSaltedPasswd": "Please switch to sign by [${ta?password}]，after sign in, go to [profile > reset password] to setup your password, thanks.",
  "auth-login-or-signup": "Sign up or sign in",
  "auth-logout-confirm": "Are you sure you want to log out?",
  "auth-ok": "Verify successful",
  "auth-passwd-getback": "Get back password",
  "auth-passwd-name-email-tip": "Email/Name",
  "auth-passwd-name-phone-tip": "Phone/Name",
  "auth-passwd-tip": "Password",
  "auth-passwd-title": "Sign in by password",
  "auth-phone-tip": "Phone number",
  "auth-phone-title": "Sign by sms",
  "auth-phone-vcode": "SMS password",
  "auth-phone-vcode-get": "Get sms password",
  "auth-reset-passwd": "Reset password ...",
  "auth-reset-passwd-again": "Reset password again",
  "auth-reset-passwd-btn-invalid": "Illegal characters",
  "auth-reset-passwd-btn-lack": "Lack information",
  "auth-reset-passwd-btn-ready": "Reset password",
  "auth-reset-passwd-btn-short": "Password too short (at least 6 chars)",
  "auth-reset-passwd-btn-unmatch": "The password is not consistent",
  "auth-reset-passwd-by-email": "Reset password by email",
  "auth-reset-passwd-by-email-sent": "The email password has been sent to your registered email address ${email}",
  "auth-reset-passwd-by-email-tip": "Registered email address",
  "auth-reset-passwd-by-passwd": "Reset by old password",
  "auth-reset-passwd-by-phone": "Reset by sms",
  "auth-reset-passwd-by-phone-sent": "The sms password has been sent to your mobile phone ${phone}",
  "auth-reset-passwd-by-phone-tip": "Registered phone number",
  "auth-reset-passwd-ing": "Reseting password ...",
  "auth-reset-passwd-lack-email": "Please enter your registered email address",
  "auth-reset-passwd-lack-phone": "Please enter your registered mobile phone number",
  "auth-reset-passwd-new": "New password (at least 6 chars)",
  "auth-reset-passwd-ok": "The password has been reset and will take effect the next time you log in",
  "auth-reset-passwd-old": "Old password",
  "auth-reset-passwd-ren": "Reconfirm",
  "auth-sending-vcode": "Sending verification code",
  "auth-sent-ok": "${ta?Password} has been sent, please check in ${by} in ${min} minutes",
  "auth-ta-by-email": "Your email",
  "auth-ta-by-phone": "Your sms",
  "auth-ta-email": "Email password",
  "auth-ta-phone": "SMS password",
  "auth-vcode-delay": "Resend after ${sec}s",
  "auth-vcode-lost": "Can't get password?",
  "base-info": "Base info",
  "blog": "Blog",
  "blog-manage": "Blog management",
  "buy-checkout-nil": "You have nothing to checkout",
  "cate": "Category",
  "cate-flt-tip": "Filter by category name",
  "cate-maj": "Major category",
  "cate-meta": "Category properties",
  "cate-new": "New category",
  "cate-nil-tip": "Select a category",
  "cate-no-detail": "Select a category for details",
  "cate-pa": "Parent category",
  "cate-pa-nil": "Select a parent category",
  "cate-sub": "Child category",
  "cate-sub-nil": "Select a child category",
  "cate-val": "Category value",
  "cmt-brief": "Comment brief",
  "cmt-content": "Comment content",
  "cmt-flt-tip": "Filter by a user id or comment",
  "cmt-meta": "Comment properties",
  "cmt-no-detail": "Select a role for detail",
  "cmt-target": "Comment target",
  "cmt-type": "Comment type",
  "cmt-user": "Comment account",
  "comments": "COMMENTS",
  "cover": "Cover",
  "cover-pic": "Cover pic",
  "detail-info": "Detail info",
  "dir-media": "Media dir",
  "e-cmd-passwd-old_invalid": "Old Password Invalid",
  "e-cmd-www_passwd-Blank": "Blank new password not allowed",
  "e-cmd-www_passwd-CheckBlankAccount": "Blank account",
  "e-cmd-www_passwd-CheckBlankCode": "Blank code",
  "e-cmd-www_passwd-CheckCodeFail": "Invalid code",
  "e-cmd-www_passwd-CheckFailed": "Verify failed",
  "e-cmd-www_passwd-CheckWeirdAccount": "Weird account",
  "e-cmd-www_passwd-InvalidNewPasswd": "Invalid new password",
  "e-cmd-www_passwd-LackTarget": "Missing target",
  "e-cmd-www_passwd-TooShort": "The new password is too short",
  "e-cmd-www_passwd-nopvg": "No permission to reset passwords",
  "e-run-action-test-fail": "Insufficient action preconditions",
  "e-www-captcha-fail_send_by_email": "The email failed to send. Please check the account",
  "e-www-invalid-captcha": "Invalid ${ta?captcha}",
  "e-www-login-invalid-passwd": "Invalid password",
  "e-www-login-noexists": "Account not exists",
  "e-www-order-OutOfStore": "Goods ${val?} insufficient stock",
  "invoice-k-bankaccount": "Bank account",
  "invoice-k-bankname": "Bank",
  "invoice-k-busiaddr": "Biz address",
  "invoice-k-busiphone": "Biz phone",
  "invoice-k-invdft": "Default title",
  "invoice-k-invtfn": "TFN",
  "invoice-k-invtitle": "Invoice title",
  "invoice-k-type": "Invoice Type",
  "invoice-k-uemail": "Taker email",
  "invoice-k-uid": "Owner account",
  "invoice-k-uid-tip": "Filter by username",
  "invoice-k-uname": "Taker name",
  "invoice-k-uphone": "Taker phone",
  "invoice-kg-bank": "Bank info",
  "invoice-kg-busi": "Biz info",
  "invoice-kg-inv": "Invoice info",
  "invoice-kg-u": "Taker info",
  "k-ct-date": "Create date",
  "k-lm": "Last modifed",
  "me-k-account": "Account",
  "me-k-avatar": "Avatar",
  "me-k-city": "City",
  "me-k-country": "Country",
  "me-k-email": "Email",
  "me-k-login": "Login",
  "me-k-nickname": "Nickname",
  "me-k-nm": "Login name",
  "me-k-phone": "Phone",
  "me-k-role": "Role",
  "me-k-sex": "Gender",
  "mine": "Mine",
  "my-favors": "My favorite",
  "my-favors-blog": "Favorite blog",
  "my-favors-goods": "Favorite goods",
  "my-favors-posts": "Favorite posts",
  "my-favors-spots": "Favorite spots",
  "my-favors-video": "Favorite video",
  "my-orders": "My orders",
  "my-orders-shop": "Shopping orders",
  "my-orders-video": "VOD order",
  "my-passwd": "Reset password",
  "my-profile": "My profile",
  "my-shipping-address": "Shipping address",
  "my-shopping-car": "Shopping car",
  "or-st-ca": "Canceled",
  "or-st-dn": "Done",
  "or-st-fa": "Fail to create order",
  "or-st-nw": "New order",
  "or-st-ok": "Pay ok",
  "or-st-sp": "Shipped",
  "or-st-wt": "Wait for pay",
  "ord-detail": "Order detail",
  "order-flt-tip": "Query by order id",
  "order-k-accounts": "Accounts",
  "order-k-addr_ship": "Ship address",
  "order-k-addr_ship_code": "Ship code",
  "order-k-addr_ship_country": "Ship country",
  "order-k-addr_ship_door": "Ship door",
  "order-k-addr_user": "User address",
  "order-k-addr_user_area": "Area",
  "order-k-addr_user_city": "City",
  "order-k-addr_user_code": "User code",
  "order-k-addr_user_country": "User country",
  "order-k-addr_user_door": "User door",
  "order-k-addr_user_province": "Province",
  "order-k-addr_user_street": "Street",
  "order-k-buyer_id": "Buyer",
  "order-k-ca_at": "Cancel at",
  "order-k-currency": "Currency",
  "order-k-discount": "Discount",
  "order-k-dn_at": "Done at",
  "order-k-fa_at": "Fail at",
  "order-k-fee": "Payment amount",
  "order-k-freight": "Freight",
  "order-k-freight-m": "Alt Freight",
  "order-k-freight-m-tip": "Enter 0 to waive shipping costs",
  "order-k-id": "Order id",
  "order-k-invoice": "Invoice",
  "order-k-nominal": "Nominal",
  "order-k-note": "Note",
  "order-k-ok_at": "OK at",
  "order-k-pay_id": "Payment id",
  "order-k-pay_tp": "Pay type",
  "order-k-payment": "Total",
  "order-k-prefee": "Base price",
  "order-k-prefee-m": "Alt Total",
  "order-k-prefee-m-tip": "Enter the new total price",
  "order-k-price": "Order price",
  "order-k-pro-amount": "Amount",
  "order-k-pro-price": "Price",
  "order-k-pro-retail": "Retail",
  "order-k-pro-subretail": "Sub-Retail",
  "order-k-pro-subtotal": "Subtotal",
  "order-k-pro-title": "Product Title",
  "order-k-products": "Goods",
  "order-k-profit": "Profit",
  "order-k-seller": "Seller",
  "order-k-sp_at": "Shipping at",
  "order-k-st": "Order status",
  "order-k-title": "Order title",
  "order-k-total": "Total",
  "order-k-user_email": "User email",
  "order-k-user_name": "User name",
  "order-k-user_phone": "User phone",
  "order-k-waybil": "Waybil",
  "order-k-waybil_com": "Waybil COM",
  "order-k-waybil_nb": "Waybil NB",
  "order-k-wt_at": "Pay at",
  "order-nil-detail": "Please select an order for details",
  "order-pay-id": "Pay ID",
  "order-pay-status": "Payment status",
  "order-shipaddr-nil": "Please specify a shipping address",
  "passwd-invalid-char": "Passwords can only include english numbers/upper and lower case letters/and special characters",
  "passwd-sl-1": "Weak",
  "passwd-sl-2": "Weaker",
  "passwd-sl-3": "Normal",
  "passwd-sl-4": "Stronger",
  "passwd-sl-5": "Strong",
  "passwd-tip": "Please enter a combination of english numerals/upper and lower case letters/special characters with a minimum of 6 characters",
  "pay-by-free": "Free",
  "pay-by-paypal": "PayPal",
  "pay-by-wx-jsapi": "WeChat jsapi",
  "pay-by-wx-qrcode": "WeChat scan code",
  "pay-by-wx-scan": "WeChat payment code",
  "pay-by-zfb-qrcode": "Alipay scan code",
  "pay-by-zfb-scan": "Alipay payment code",
  "pay-checkout-it-amount": "Amount",
  "pay-checkout-it-name": "Name",
  "pay-checkout-it-price": "Price",
  "pay-checkout-it-subtotal": "Subtotal",
  "pay-checkout-tip": "Please confirm the quantity and amount of your purchase",
  "pay-paypal": "PayPal",
  "pay-proceed-check": "Check payment",
  "pay-proceed-ing": "Checking for...",
  "pay-re-fail": "Payment failure",
  "pay-re-nil": "The payoff is a schrodinger's cat",
  "pay-re-ok": "Payment success",
  "pay-re-wait": "Pending payment",
  "pay-step-checkout-title": "Confirm order",
  "pay-step-choose-nil": "☝ please select one of the above payment methods 👆",
  "pay-step-choose-tip": "You may choose any of the following payment methods to pay for this order",
  "pay-step-choose-tip2": "You will pay for this order using ${val}",
  "pay-step-choose-title": "Mode of payment",
  "pay-step-choose-title2": "Choose payment",
  "pay-step-done-title": "Done",
  "pay-step-proceed-create-order": "Creating order ...",
  "pay-step-proceed-fetch-order": "Getting order ...",
  "pay-step-proceed-nil": "Please choose a method of payment",
  "pay-step-proceed-tip": "Pay for this order with ${val}",
  "pay-step-proceed-title": "Pay",
  "pay-tip-wx-qrcode": "Please pay in wechat scan within 15 minutes",
  "pay-tip-zfb-qrcode": "Please pay by alipay scan code within 15 minutes",
  "pay-title": "Payment",
  "pay-wx": "WeChat",
  "pay-zfb": "Alipay",
  "paypal-amount_value": "Payment Amount",
  "paypal-approve-tip": "Already in the new tab for you to open the paypal payment page, if there is no open, please click on ☝ the icon above. after payment, the page will automatically perceive, if there is no response, try to click 👇 [check payment] button below.",
  "paypal-cap-id": "Capture ID",
  "paypal-cap-status": "Capture status",
  "paypal-currency": "Currency",
  "paypal-id": "PayPal TID",
  "paypal-payer_email": "Payer email",
  "paypal-payer_id": "Payer ID",
  "photo": "Photo",
  "post-content-blank": "The content you post cannot be empty or less than 10 words",
  "profile-title": "My profile",
  "pubat": "Release date",
  "read-du": "Reading spend",
  "role": "Role",
  "role-as-guest": "Guest",
  "role-as-normal": "Normal",
  "role-as-vip": "VIP",
  "role-dft": "Default role",
  "role-flt-tip": "Filter by role name",
  "role-manage": "Roles",
  "role-meta": "Role propery",
  "role-meta-tip": "Choose an role for detail",
  "role-name": "Role name",
  "role-select-tip": "Select role",
  "role-val": "Role value",
  "shop-basket-clean-confirm": "Are you sure you want to empty the shopping cart? this is an operation that cannot be undone.",
  "shop-basket-remove-confirm": "Are you sure you want to remove this item from your shopping cart?",
  "topic": "Topic",
  "type-new": "New type",
  "video-title": "Video title",
  "watch_c": "View count",
  "waybil-com-ane": "AN NENG Logistics",
  "waybil-com-best": "BAISHI Express",
  "waybil-com-db": "DE BANG Express",
  "waybil-com-ems": "EMS Logistics",
  "waybil-com-jdl": "JING DONG Logistics",
  "waybil-com-pj": "PIN JUN Express",
  "waybil-com-sf": "SHUN FENG Express",
  "waybil-com-sto": "SHEN TONG Express",
  "waybil-com-uce": "YOU SU Express",
  "waybil-com-yto": "YUAN TONG Express",
  "waybil-com-yunda": "YUN DA Express",
  "waybil-com-zto": "ZHONG TONG Express"
});
//========================================
// JOIN <wn-manager.i18n.json> ti/i18n/en-us/wn-manager.i18n.json
//========================================
Ti.Preload("ti/i18n/en-us/wn-manager.i18n.json", {
  "ti-loading": "Load...",
  "wn-adaptlist": "Object explorer",
  "wn-create-fail": "Fail to create",
  "wn-create-invalid": "Illegal characters in object name",
  "wn-create-ok": "Create ok",
  "wn-create-too-long": "Object name too long",
  "wn-del-confirm": "Are you sure you want to delete the selected ${N} items? This is an irrevocable operation!",
  "wn-del-item": "Deleting: \"${name}\"",
  "wn-del-no-empty-folder": "The directory \"${nm}\" is not empty, do you want to delete all? click \"no\" to skip",
  "wn-del-none": "Please select at least one file to delete!",
  "wn-del-ok": "${N} objects have been removed",
  "wn-download-dir": "Object \"${nm}\" is a directory, click \"continue\" to skip it and download the next file, and click \"terminate\" to end this operation!",
  "wn-download-none": "Please select at least one file to download!",
  "wn-download-too-many": "We are going to download ${n} files one by one. continue?",
  "wn-expose-hidden-off": "Not show hidden objects",
  "wn-expose-hidden-on": "Show hidden objects",
  "wn-gui": "General gui",
  "wn-obj-preview": "Object preview",
  "wn-obj-puretext": "Plain text editor",
  "wn-obj-single-com": "Single control test suite",
  "wn-publish-done": "Publish success",
  "wn-publish-to-nil": "No publish target is set",
  "wn-publish-to-noexist": "The publish target does not exist",
  "wn-rename": "Rename object \"${name}\"",
  "wn-rename-fail": "Rename failed",
  "wn-rename-invalid": "The name cannot contain illegal characters",
  "wn-rename-none": "Please select a file to rename!",
  "wn-rename-ok": "Rename successful",
  "wn-rename-suffix-changed": "Your file suffix name has changed. do you need to complete the original suffix for you automatically?",
  "wn-rename-too-long": "The name is too long",
  "wn-thing-manager": "Data manager",
  "wn-view-opening": "Loading gui..."
});
//========================================
// JOIN <wn-obj-preview.i18n.json> ti/i18n/en-us/wn-obj-preview.i18n.json
//========================================
Ti.Preload("ti/i18n/en-us/wn-obj-preview.i18n.json", {
  "wop-fullscreen-enter": "Enter fullscreen",
  "wop-fullscreen-quit": "Exit fullscreen"
});
//========================================
// JOIN <wn-thing.i18n.json> ti/i18n/en-us/wn-thing.i18n.json
//========================================
Ti.Preload("ti/i18n/en-us/wn-thing.i18n.json", {
  "thing-clean": "Empty the recycle bin",
  "thing-cleaning": "Cleaning...",
  "thing-content": "Object content",
  "thing-content-hide": "Hide content",
  "thing-content-show": "Show content",
  "thing-create": "New object",
  "thing-create-in-recyclebin": "Exit recycle bin before create object",
  "thing-enter-recyclebin": "Enter recyclebin",
  "thing-export-c-expi": "Expire in",
  "thing-export-c-expi-14d": "14Days",
  "thing-export-c-expi-3d": "3Days",
  "thing-export-c-expi-7d": "7Days",
  "thing-export-c-expi-off": "Never",
  "thing-export-c-mapping": "Mapping",
  "thing-export-c-mode": "Export mode",
  "thing-export-c-mode-csv": "CSV File",
  "thing-export-c-mode-json": "JSON",
  "thing-export-c-mode-xls": "Spreadsheet",
  "thing-export-c-mode-zip": "Zip data",
  "thing-export-c-name": "Export name",
  "thing-export-c-page": "Data scope",
  "thing-export-c-page-all": "All page",
  "thing-export-c-page-current": "Current page",
  "thing-export-done": "Finished",
  "thing-export-done-ok": "Export success",
  "thing-export-done-tip": "Please click the link below to download",
  "thing-export-ing": "Processing",
  "thing-export-ing-tip": "The export script is running, please wait for a while",
  "thing-export-open-dir": "Open export history dir...",
  "thing-export-setup": "Export setup",
  "thing-files": "Object files",
  "thing-files-attachment": "Attachments",
  "thing-files-hide": "Hide files",
  "thing-files-media": "Medias",
  "thing-files-show": "Show files",
  "thing-filter-kwdplhd": "Enter the query criteria",
  "thing-leave-recyclebin": "Leave recyclebin",
  "thing-meta": "Object properties",
  "thing-meta-hide": "Hide properties",
  "thing-meta-show": "Show properties",
  "thing-recycle-bin": "Recycle bin",
  "thing-restore": "Restore",
  "thing-restore-none": "Select the data you want to recover first",
  "thing-restoring": "Restoring..."
});
//========================================
// JOIN <_net.i18n.json> ti/i18n/en-us/_net.i18n.json
//========================================
Ti.Preload("ti/i18n/en-us/_net.i18n.json", {
  "net-ct": "Created",
  "net-flt-nil": "Query by name",
  "net-vod-add-video": "Add video",
  "net-vod-cate": "Category",
  "net-vod-du-long": "Long video",
  "net-vod-du-short": "Short video",
  "net-vod-du-tv": "TV",
  "net-vod-duration": "Duration",
  "net-vod-size": "Video size",
  "net-vod-video-nil": "Please choose one video for detail"
});
//========================================
// JOIN <_ti.i18n.json> ti/i18n/en-us/_ti.i18n.json
//========================================
Ti.Preload("ti/i18n/en-us/_ti.i18n.json", {
  "img" : "Image",
  "img-add" : "Add image",
  "img-insert" : "Insert image",
  "img-remove" : "Remove image",
  "copy" : "Copy",
  "copy-all" : "Copy all",
  "preview": "Preview",
  "add": "Add",
  "add-item": "New item",
  "album": "Album",
  "albums": "Albums",
  "amount": "Amount",
  "attachment": "Attachment",
  "audio": "Audio",
  "audios": "Audios",
  "avatar": "Avatar",
  "banner": "Banner",
  "batch-none": "Please choose at least one item for batch updating",
  "batch-update": "Batch update...",
  "blank": "BLANK",
  "blank-to-edit": "Please choose item for editing",
  "brief": "Brief",
  "brief-d": "Brief",
  "brief-i": "Brief",
  "buy": "Buy",
  "buy-now": "Buy now",
  "cancel": "Cancel",
  "cancel-all": "Cancel all",
  "candidate": "Candidations",
  "captcha": "Captcha",
  "captcha-chagne": "Next",
  "captcha-tip": "Please enter the captcha",
  "chart": "Chart",
  "chart-bar": "Bar Chart",
  "chart-line": "Line Chart",
  "chart-pie": "Pie Chart",
  "chart-rank": "Rank Chart",
  "checked": "Checked",
  "choose": "Select",
  "choose-file": "Select file",
  "choose-obj": "Select object",
  "clean": "Clean",
  "clear": "Clear",
  "close": "Close",
  "confirm": "Confirm",
  "console": "Console",
  "content": "Content",
  "continue": "Continue",
  "create": "New",
  "create-now": "Create now",
  "creating": "Creating",
  "date": "Date",
  "db-col-type-AUTO": "AUTO",
  "db-col-type-BINARY": "BINARY",
  "db-col-type-BOOLEAN": "BOOLEAN",
  "db-col-type-CHAR": "CHAR",
  "db-col-type-FLOAT": "FLOAT",
  "db-col-type-INT": "INT",
  "db-col-type-TEXT": "TEXT",
  "db-col-type-TIMESTAMP": "TIMESTAMP",
  "db-col-type-VARCHAR": "VARCHAR",
  "debug": "Debug",
  "default": "Default",
  "del": "Delete",
  "del-checked": "Delete selected",
  "del-hard": "The selected item will be deleted directly. this operation is irrevocable. are you sure you want to continue?",
  "del-ing": "Deleting...",
  "del-none": "Please choose at least one item for deleting",
  "desktop": "Desktop",
  "detail": "Detail",
  "dis-name": "Display name",
  "disable": "Disable",
  "disabled": "Disabled",
  "doing": "Processing...",
  "download": "Download",
  "download-to-local": "Download to local",
  "drop-file-here-to-upload": "Drop file here to upload",
  "drop-here": "Drop here",
  "dt-in": "in ${val}",
  "dt-u-day": "Day",
  "dt-u-hour": "Hour",
  "dt-u-min": "Min",
  "dt-u-month": "Month",
  "dt-u-ms": "Milliseconds",
  "dt-u-sec": "Seconds",
  "dt-u-week": "Week",
  "dt-u-year": "Year",
  "e-auth-account-noexists": "Account not exists",
  "e-auth-home-forbidden": "Auth home forbidden",
  "e-auth-login-NoPhoneOrEmail": "Invalid phone number or email address",
  "e-auth-login-NoSaltedPasswd": "Password without salting",
  "e-auth-login-invalid-passwd": "Invalid password",
  "e-io-obj-BlankName": "The object name CANNOT be empty",
  "e-io-obj-InvalidName": "Invalid object name",
  "e-io-obj-exists": "Object already exists",
  "e-io-obj-noexists": "Object does't exists",
  "e-io-obj-noexistsf": "Object[${nm}] does't exists",
  "edit": "Edit",
  "edit-com": "Edit control",
  "email": "Email",
  "emoji": "Emoji",
  "empty": "Empty",
  "empty-data": "Empty data",
  "enable": "Enable",
  "enabled": "Enabled",
  "error": "Error",
  "export-data": "Export data...",
  "fail": "Failed",
  "false": "False",
  "favorites": "Favorite",
  "female": "Female",
  "filter": "Filter",
  "find": "Find",
  "find-data": "Find data",
  "gender": "Gender",
  "geo-alti": "Altitude",
  "geo-azimuth": "Azimuth",
  "geo-gcj02-lat": "GCJ02 Lat",
  "geo-gcj02-lng": "GCJ02 Lng",
  "geo-hash": "Geo hash",
  "geo-lat": "Latitude",
  "geo-lng": "Longitude",
  "geo-sate-cno": "Satellite Ava",
  "geo-sate-cnt": "Satellite used",
  "global-settings": "Global settings",
  "hierarchy": "Hierarchy",
  "history-record": "History record",
  "home": "HOME",
  "home-index" : "HOME",
  "i-known": "I known",
  "icon": "Icon",
  "icon-code-tip": "Please key-in code for icon, such as 'zmdi-case'",
  "import-data": "Import data ...",
  "index": "Index",
  "info": "Information",
  "init": "Initiate",
  "init-data": "Initiate data",
  "input": "Input",
  "input-tags": "Input tags",
  "java-type-Boolean": "Boolean",
  "java-type-Double": "Double",
  "java-type-Float": "Float",
  "java-type-Integer": "Integer",
  "java-type-JSON": "JSON",
  "java-type-List": "Object List",
  "java-type-Long": "Long",
  "java-type-Object": "Object",
  "java-type-SArray": "String Array",
  "java-type-String": "String",
  "json-Array": "Array",
  "json-Boolean": "Boolean",
  "json-Float": "Decimal",
  "json-Integer": "Integer",
  "json-Nil": "Nil",
  "json-Number": "Number",
  "json-Object": "Object",
  "json-String": "String",
  "json-new-key": "Enter a new key",
  "label": "Label",
  "lang": "Language",
  "lang-en-us": "En",
  "lang-zh-cn": "Cn",
  "lang-zh-hk": "Hk",
  "lang-zh-tw": "Tw",
  "lat": "Latitude",
  "lbs-place-add": "Add place",
  "lbs-ro-rnb-k-first": "Starting number",
  "lbs-ro-rnb-k-type": "Display type",
  "lbs-ro-rnb-k-type-alpha": "Alphabet",
  "lbs-ro-rnb-k-type-capital": "Capital",
  "lbs-ro-rnb-k-type-number": "Number",
  "lbs-ro-rnb-title": "Autosets line label",
  "link": "Link",
  "link-href": "Link target",
  "link-text": "Link text",
  "list": "List",
  "lng": "Longitude",
  "loading": "Loading...",
  "location": "Location",
  "login": "Sign in",
  "login-name": "Login name",
  "logout": "Sign out",
  "logout-ing": "Log out ...",
  "mail-as-html": "HTML Email",
  "mail-bcc": "BCC",
  "mail-cc": "CC",
  "mail-charset": "Email charset",
  "mail-notify": "Email notify",
  "mail-r-addr": "Email addr.",
  "mail-r-name": "Name",
  "mail-scene": "Email scenarios",
  "mail-scene-ctmpl": "Template",
  "mail-scene-flt-tip": "Filter by a scene name",
  "mail-scene-meta": "Email scenario properties",
  "mail-scene-nil-detail": "Please select a mail scene for details",
  "mail-scene-nm": "Scene name",
  "mail-scene-nm-tip": "Only include english letters or numbers or underline, and guarantee unique",
  "mail-scene-var-trans": "Trans script",
  "mail-scene-var-trans-placeholder": "Just like: jsc /path/to/script.js -vars",
  "mail-scene-var-trans-tip": "Take primary vars as JSON input, output another JSON string",
  "mail-setup": "Email setup",
  "mail-subject": "Subject",
  "mail-to": "TO",
  "male": "Male",
  "map-hybrid": "HYBIRD",
  "map-roadmap": "ROADMAP",
  "map-satellite": "SATELLITE",
  "map-terrain": "TERRAIN",
  "map-type": "Map type",
  "me": "Me",
  "media": "Media",
  "meta": "Meta data",
  "mine": "Mine",
  "modal": "Modal",
  "modify": "Modify",
  "more": "More",
  "move": "Move",
  "move-down": "Move down",
  "move-up": "Move up",
  "msg": "Message",
  "name": "Name",
  "new-item": "New item",
  "newsfeed": "Newfeed",
  "next": "Next",
  "nil": "Nil",
  "nil-content": "Nil content",
  "nil-detail": "Please choose one item for detail",
  "nil-item": "Please choose one item at first",
  "nil-obj": "Please choose one object",
  "no": "No",
  "no-saved": "You get data need to be saved",
  "no-selected": "None selected",
  "no-title": "No title",
  "obj": "Object",
  "off": "Off",
  "ok": "Ok",
  "on": "On",
  "open": "Open",
  "open-newtab": "Open in new tab",
  "others": "Others",
  "paging-change-pgsz": "Current page contains ${pgsz} records maximumly, you want to change it to：",
  "paging-change-pgsz-invalid": "Page size must be integer, and great than 0, but ... -_-!",
  "paging-change-pn": "Current page number is ${pn}, please enter number between 1 to ${pgc}:",
  "paging-change-pn-invalid": "Page number must be integer, and must between 1 to ${pgc}",
  "paging-first": "Head",
  "paging-last": "Tail",
  "paging-next": "Next",
  "paging-prev": "Prev",
  "paging-sum": "Total ${pgc} pages, ${sum} records，current ${count}/${pgsz}",
  "passwd": "Password",
  "passwd-reset": "Reset password",
  "path": "Path",
  "phone": "Phone",
  "phone-nb": "Phone number",
  "post": "Post",
  "prev": "Prev",
  "price": "Price",
  "profile": "Profile",
  "profile-edit": "Edit profile",
  "prompt": "Prompt",
  "properties": "Properties",
  "publish": "Publish",
  "publishing": "Publishing ...",
  "refresh": "Refresh",
  "refresh-hard": "Hard refresh",
  "refresh-hard-clear": "Clean cache & hard refresh",
  "reload": "Reload",
  "reloading": "Reloading ...",
  "remove": "Remove",
  "removing": "Removing ...",
  "rename": "Rename ...",
  "renaming": "Renameing ...",
  "reset": "Reset",
  "reset-change": "Reset change",
  "reset-data": "Reset data",
  "restore": "Restore",
  "revoke": "Revoke",
  "revoke-change": "Revoke change",
  "run": "Run",
  "run-finished": "Done for running script",
  "run-welcome": "Run script, please wait for a while ...",
  "save": "Save",
  "save-change": "Save change",
  "save-done": "Save success",
  "save-now": "Save now",
  "saving": "Saving ...",
  "score": "Score",
  "score-count": "Score count",
  "select": "Select",
  "select-all": "Select all",
  "send": "Send",
  "settings": "Settings",
  "slogan": "Slogan",
  "sms-scene-nm": "Scene name",
  "sms-scene-nm-tip": "Only include english letters or numbers or underline, and guarantee unique",
  "sms-setup": "SMS setup",
  "sort": "Sort",
  "sort-tip-asc": "The smaller at first",
  "sort-tip-desc": "The bigger at first",
  "sort-val": "Sort value",
  "source-code": "Source code",
  "stat-date-at": "Stat at",
  "stat-date-at-oor": "Statistics on this date are not ready yet",
  "stat-date-span": "Date span",
  "stop": "Stop",
  "structure": "Structure",
  "success": "Success",
  "sys-settings": "System settings",
  "tablet": "Tablet",
  "terminal": "Terminal",
  "terminate": "Terminate",
  "text": "Text",
  "timestamp": "Timestamp",
  "title": "Title",
  "total": "Total",
  "total-count": "Total ${nb?0} ${unit?items}",
  "total-items": "Total ${val} items",
  "trace": "Trace",
  "track": "Track message",
  "true": "True",
  "type": "Type",
  "under-construction": "Under construction",
  "unknown": "Unknown",
  "unzip": "Unzip",
  "unzipping": "Unzipping...",
  "upload": "Upload",
  "upload-done": "Done for upload",
  "upload-file": "Uploading files ...",
  "upload-nofinished": "Upload not finished",
  "uploading": "Uplading",
  "user-avator": "User avatar",
  "value": "Value",
  "video": "Video",
  "videos": "Videos",
  "view": "View",
  "view-resource": "View source code",
  "vu-mv": "Millivolt",
  "vu-v": "Volt",
  "warn": "Warn",
  "website": "Website",
  "www-admin-login": "Admin login GUI",
  "www-home": "WWW home",
  "www-title": "Website",
  "yes": "Yes",
  "zip": "Zip",
  "zipping": "Zipping..."
});
//========================================
// JOIN <_wn.i18n.json> ti/i18n/en-us/_wn.i18n.json
//========================================
Ti.Preload("ti/i18n/en-us/_wn.i18n.json", {
  "wn-admin-check-obj-thumb": "Check obj thumbnails ...",
  "wn-admin-tools": "Admin tools",
  "wn-ctt-css-text": "CSS File",
  "wn-ctt-folder-text": "Folder",
  "wn-ctt-html-text": "HTML FILE",
  "wn-ctt-js-text": "Javascript",
  "wn-ctt-json-text": "JSON File",
  "wn-ctt-less-text": "LESS File",
  "wn-ctt-md-text": "Markdown",
  "wn-ctt-mjs-text": "Module Javascript",
  "wn-ctt-sass-text": "SASS File",
  "wn-ctt-thing_set-text": "Thing Set",
  "wn-ctt-txt-text": "Pure text",
  "wn-ctt-wnml-text": "WNML File",
  "wn-ctt-xml-text": "XML File",
  "wn-edit-com-nil": "Default as label control",
  "wn-en-his-ct": "Created",
  "wn-en-his-flt-tip": "Please input user id or name to filtering",
  "wn-en-his-mor": "OP more",
  "wn-en-his-opt": "Operation",
  "wn-en-his-tar": "Target",
  "wn-en-his-tid": "Target id",
  "wn-en-his-tnm": "Target name",
  "wn-en-his-ttp": "Target type",
  "wn-en-his-uid": "User id",
  "wn-en-his-unm": "User name",
  "wn-en-his-usr": "User",
  "wn-en-his-utp": "User type",
  "wn-fsc-mail-scene-new": "New a email scenario",
  "wn-fsc-mail-tmpl-new": "Enter new unique name (such as 'signup')",
  "wn-invalid-mimes": "Unsupported mime \"${current}\", only \"${supports}\" allowed",
  "wn-invalid-types": "Unsupported type \"${current}\", only \"${supports}\" allowed",
  "wn-key-c": "Creater",
  "wn-key-ct": "Created",
  "wn-key-d0": "D0",
  "wn-key-d1": "D1",
  "wn-key-data": "Data",
  "wn-key-duration": "Duration",
  "wn-key-expi": "Expired",
  "wn-key-g": "Group",
  "wn-key-grp-advance": "Advance",
  "wn-key-grp-basic": "Basic",
  "wn-key-grp-customized": "Customized",
  "wn-key-grp-more": "More",
  "wn-key-grp-others": "Others",
  "wn-key-grp-privilege": "Privilege",
  "wn-key-grp-thumb": "Thumb",
  "wn-key-grp-timestamp": "Timestamp",
  "wn-key-height": "Height",
  "wn-key-icon": "Icon",
  "wn-key-id": "ID",
  "wn-key-len": "Length",
  "wn-key-lm": "Last modified",
  "wn-key-m": "Mender",
  "wn-key-md": "Mode",
  "wn-key-mime": "MIME",
  "wn-key-nm": "Name",
  "wn-key-ph": "Path",
  "wn-key-pid": "Parent",
  "wn-key-pvg": "Biz pvg",
  "wn-key-race": "Race",
  "wn-key-sha1": "SHA1",
  "wn-key-thumb": "Thumb",
  "wn-key-title": "Title",
  "wn-key-tp": "Type",
  "wn-key-width": "Width",
  "wn-obj-nosaved": "You have unsaved objects",
  "wn-oc-auto-type": "All types",
  "wn-oc-free": "Please enter the full name, including the extension, such as `myfile.xml`",
  "wn-oc-tip": "New object name",
  "wn-race-DIR": "DIRECTORY",
  "wn-race-FILE": "FILE",
  "wn-th-acc-pwd-choose-none": "Select the account to reset password (multiple allowed)",
  "wn-th-acc-pwd-done": "Password has been reset for ${n} users",
  "wn-th-acc-pwd-invalid": "Illegal characters found in password",
  "wn-th-acc-pwd-reset-tip": "Reset password to",
  "wn-th-acc-pwd-too-short": "Password too short, no less than 6 digits, better contains alphanumeric & special chars",
  "wn-th-recount-media": "Recalculate file number",
  "wn-th-recount-media-done": "Current number of files: ${n}"
});
//========================================
// JOIN <hmaker.i18n.json> ti/i18n/zh-cn/hmaker.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-cn/hmaker.i18n.json", {
  "hmk-css-c-auto" : "自动",
  "hmk-css-g-inherit" : "继承",
  "hmk-css-g-initial" : "初始",
  "hmk-css-g-unset" : "默认",
  "hmk-css-edit" : "编辑CSS样式",
  "hmk-css-grp-texting" : "文字设置",
  "hmk-css-grp-aspect" : "外观设置",
  "hmk-css-grp-measure" : "尺度设置",
  "hmk-css-border" : "边框",
  "hmk-css-border-radius" : "圆角",
  "hmk-css-margin" : "外边距",
  "hmk-css-padding" : "内边框",
  "hmk-css-color" : "文字颜色",
  "hmk-css-background" : "背景",
  "hmk-css-background-color" : "背景颜色",
  "hmk-css-box-shadow" : "块阴影",
  "hmk-css-text-shadow" : "文字阴影",
  "hmk-css-overflow" : "内容溢出",
  "hmk-css-overflow-scroll" : "滚动",
  "hmk-css-overflow-hidden" : "隐藏",
  "hmk-css-overflow-clip" : "剪裁",
  "hmk-css-overflow-visible" : "可见",
  "hmk-css-width" : "宽度",
  "hmk-css-height" : "高度",
  "hmk-css-max-width" : "最大宽度",
  "hmk-css-max-height" : "最大高度",
  "hmk-css-min-width" : "最小宽度",
  "hmk-css-min-height" : "最小高度",
  "hmk-css-line-height" : "行高",
  "hmk-css-letter-spacing" : "字间距",
  "hmk-class-pick" : "编辑类选择器",
  "hmk-class-item-space" : "项间距",
  "hmk-class-flex" : "自动伸缩",
  "hmk-class-flex-none" : "关闭",
  "hmk-class-flex-both" : "双向",
  "hmk-class-flex-grow" : "伸展",
  "hmk-class-flex-shrink" : "收缩",
  "hmk-class-text" : "文字",
  "hmk-class-text-in" : "居内",
  "hmk-class-text-out" : "居外",
  "hmk-class-at" : "位置",
  "hmk-class-at-center" : "居中",
  "hmk-class-at-top" : "上部",
  "hmk-class-at-bottom" : "下部",
  "hmk-class-at-left" : "左侧",
  "hmk-class-at-right" : "右侧",
  "hmk-class-at-bottom-left" : "左下",
  "hmk-class-at-bottom-right" : "右下",
  "hmk-class-at-top-left" : "左上",
  "hmk-class-at-top-right" : "右上",
  "hmk-class-font-size" : "文字大小",
  "hmk-class-xs" : "特小",
  "hmk-class-sm" : "较小",
  "hmk-class-md" : "正常",
  "hmk-class-lg" : "较大",
  "hmk-class-xl" : "特大",
  "hmk-class-text-style" : "文字风格",
  "hmk-class-ts-mask" : "遮罩",
  "hmk-class-ts-shadow" : "阴影",
  "hmk-class-hover" : "悬停效果",
  "hmk-class-hover-to-up" : "上浮",
  "hmk-class-hover-to-zoom" : "缩放",
  "com-form": "表单",
  "com-label": "标签",
  "com-list": "列表",
  "hm-type-Array": "数组",
  "hm-type-Boolean": "布尔",
  "hm-type-Group": "字段分组",
  "hm-type-Integer": "整数",
  "hm-type-Number": "数字",
  "hm-type-Object": "对象",
  "hm-type-String": "文本",
  "hm-type-icons": {
    "Array": "zmdi-format-list-bulleted",
    "Boolean": "zmdi-toll",
    "Group": "zmdi-collection-bookmark",
    "Integer": "zmdi-n-6-square",
    "Number": "zmdi-input-svideo",
    "Object": "zmdi-toys",
    "String": "zmdi-translate"
  },
  "hmaker-com-conf-blank": "请选择一个控件设置其详情",
  "hmaker-com-type-blank": "选择一个控件",
  "hmaker-edit-form-del-group-all": "组以及全部字段",
  "hmaker-edit-form-del-group-confirm": "您是要删除组以及其内的全部字段，还是仅是组？",
  "hmaker-edit-form-del-group-only": "仅是组",
  "hmaker-edit-form-field-nil": "请选择一个字段编辑详情",
  "hmaker-edit-form-new-field": "新字段",
  "hmaker-edit-form-new-field-e0": "字段名不能以数字开头，内容只能为小写英文字母数字和下划线",
  "hmaker-edit-form-new-field-e1": "字段【${val}】已存在，请另选一个名称",
  "hmaker-edit-form-new-field-tip": "请输入新字段名（只能为小写英文字母数字和下划线）",
  "hmaker-edit-form-new-group": "新分组",
  "hmaker-edit-form-new-group-tip": "请输入新分组名",
  "hmaker-edit-form-nil-field": "请先选择一个字段",
  "hmaker-edit-form-not-current": "请选择一个字段或者字段组",
  "hmaker-layout-cols": "列布局",
  "hmaker-layout-rows": "行布局",
  "hmaker-layout-tabs": "标签布局",
  "hmaker-nav-blank-item": "请选择一个导航项目编辑",
  "hmaker-nav-k-display": "链接显示内容",
  "hmaker-nav-k-icon": "链接图标",
  "hmaker-nav-k-title": "链接文字",
  "hmaker-nav-k-type": "链接类型",
  "hmaker-nav-k-value": "链接目标",
  "hmaker-nav-tp-dispatch": "方法调用",
  "hmaker-nav-tp-href": "外部链接",
  "hmaker-nav-tp-page": "站点页面",
  "hmaker-site-k-apiBase": "接口路径",
  "hmaker-site-k-base": "资源路径",
  "hmaker-site-k-captcha": "验证码路径",
  "hmaker-site-k-domain": "所属域",
  "hmaker-site-k-entry": "着陆页",
  "hmaker-site-prop": "站点属性",
  "hmaker-site-state": "站点全局配置",
  "hmaker-site-state-actions": "全局动作表",
  "hmaker-site-state-apis": "接口集",
  "hmaker-site-state-blocks": "预定义布局",
  "hmaker-site-state-general": "通用配置",
  "hmaker-site-state-nav": "全局导航条",
  "hmaker-site-state-router": "页面路由",
  "hmaker-site-state-schema": "预定义控件",
  "hmaker-site-state-utils": "扩展函数",
  "hmaker-site-tree": "站点结构",
  "hmaker-site-tree-loading": "正在加载站点结构...",
  "hmk-adjustDelay": "调整延迟",
  "hmk-aspect": "外观",
  "hmk-autoI18n": "国际化",
  "hmk-behavior": "行为",
  "hmk-blankAs": "空白样式",
  "hmk-breakLine": "维持换行",
  "hmk-currentTab": "当前标签",
  "hmk-data": "数据",
  "hmk-dict": "数据字典",
  "hmk-editable": "可编辑",
  "hmk-field-checkEquals": "检查相等",
  "hmk-field-com": "编辑控件",
  "hmk-field-defaultAs": "默认值",
  "hmk-field-disabled": "失效条件",
  "hmk-field-height": "高度",
  "hmk-field-hidden": "隐藏条件",
  "hmk-field-icon": "图标",
  "hmk-field-name": "键名",
  "hmk-field-serializer": "自定义保存",
  "hmk-field-tip": "提示说明",
  "hmk-field-title": "显示名",
  "hmk-field-transformer": "自定义转换",
  "hmk-field-type": "类型",
  "hmk-field-width": "宽度",
  "hmk-fieldStatus": "字段状态",
  "hmk-fields": "字段",
  "hmk-fields-advance": "高级",
  "hmk-fields-general": "基本",
  "hmk-form-data": "数据源",
  "hmk-form-height": "表单高度",
  "hmk-form-onlyFields": "仅声明字段",
  "hmk-form-width": "表单宽度",
  "hmk-format": "格式化",
  "hmk-height": "控件高度",
  "hmk-href": "超链接",
  "hmk-icon": "表单图标",
  "hmk-measure": "尺寸",
  "hmk-mode": "显示方式",
  "hmk-mode-all": "全部",
  "hmk-mode-tab": "标签",
  "hmk-newTab": "新窗口",
  "hmk-placeholder": "占位文本",
  "hmk-prefixIcon": "前缀图标",
  "hmk-prefixText": "前缀文字",
  "hmk-spacing": "间距",
  "hmk-spacing-comfy": "舒适",
  "hmk-spacing-tiny": "紧凑",
  "hmk-suffixIcon": "后缀图标",
  "hmk-suffixText": "后缀文字",
  "hmk-tabAt": "标签位置",
  "hmk-tabAt-bottom-center": "下部居中",
  "hmk-tabAt-bottom-left": "下部居左",
  "hmk-tabAt-bottom-right": "下部居右",
  "hmk-tabAt-top-center": "上部居中",
  "hmk-tabAt-top-left": "上部居左",
  "hmk-tabAt-top-right": "上部居右",
  "hmk-title": "表单标题",
  "hmk-trimed": "修剪空白",
  "hmk-value": "输入值",
  "hmk-valueMaxWidth": "值最大宽度",
  "hmk-width": "控件宽度"
});
//========================================
// JOIN <ti-datetime.i18n.json> ti/i18n/zh-cn/ti-datetime.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-cn/ti-datetime.i18n.json", {
  "Apr": "四月",
  "Aug": "八月",
  "Dec": "十二月",
  "Feb": "二月",
  "Fri": "周五",
  "Friday": "星期五",
  "Jan": "一月",
  "Jul": "七月",
  "Jun": "六月",
  "Mar": "三月",
  "May": "五月",
  "Mon": "周一",
  "Monday": "星期一",
  "Nov": "十一月",
  "Oct": "十月",
  "Sat": "周六",
  "Saturday": "星期六",
  "Sep": "九月",
  "Sun": "周日",
  "Sunday": "星期日",
  "Thu": "周四",
  "Thursday": "星期四",
  "Tue": "周二",
  "Tuesday": "星期二",
  "Wed": "周三",
  "Wednesday": "星期三",
  "blank-date": "请选择日期",
  "blank-date-range": "请选择日期范围",
  "blank-datetime": "请选择日期时间",
  "blank-month": "请选择月份",
  "blank-time": "请选择时间",
  "blank-time-range": "请选择时间范围",
  "cal": {
    "abbr": {
      "Apr": "四月",
      "Aug": "八月",
      "Dec": "十二",
      "Feb": "二月",
      "Jan": "一月",
      "Jul": "七月",
      "Jun": "六月",
      "Mar": "三月",
      "May": "五月",
      "Nov": "十一",
      "Oct": "十月",
      "Sep": "九月"
    },
    "d-range-beyond-days": "${yy0}年${MM0}月${dd0}至${dd1}日",
    "d-range-beyond-months": "${yy0}年${MM0}月${dd0}日至${MM1}月${dd1}日",
    "d-range-beyond-years": "${yy0}年${MM0}月${dd0}日至${yy1}年${MM1}月${dd1}日",
    "d-range-in-same-day": "${yy0}年${MM0}月${dd0}日全天",
    "m-range-beyond-months": "${yy0}年${MT0}至${MT1}",
    "m-range-beyond-years": "${yy0}年${MT0}至${yy1}年${MT1}",
    "week": ["日", "一", "二", "三", "四", "五", "六"]
  },
  "du-in-min": "${n}分钟",
  "time": {
    "any-time": "yyyy年M月d日",
    "in-year": "M月d日",
    "past-in-min": "刚刚",
    "past-in-hour": "${min}分钟前",
    "past-in-day": "${hour}小时前",
    "past-in-week": "${day}天前",
    "future-in-min": "即将",
    "future-in-hour": "${min}分钟后",
    "future-in-day": "${hour}小时后",
    "future-in-week": "${day}天后"
  },
  "time-begin": "开始时间",
  "time-end": "结束时间",
  "time-ms": "毫秒",
  "today": "今天",
  "tu-day": "天",
  "tu-hou": "小时",
  "tu-min": "分钟",
  "tu-mon": "月",
  "tu-sec": "秒",
  "tu-week": "周",
  "tu-year": "年"
});
//========================================
// JOIN <ti-text-editor.i18n.json> ti/i18n/zh-cn/ti-text-editor.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-cn/ti-text-editor.i18n.json", {
  "wordp-h0": "正文",
  "wordp-h1": "标题 1",
  "wordp-h2": "标题 2",
  "wordp-h3": "标题 3",
  "wordp-h4": "标题 4",
  "wordp-h5": "标题 5",
  "wordp-h6": "标题 6",
  "wordp-heading": "标题级别",
  "wordp-link": "超链接",
  "wordp-nil-sel": "请先选择一段文字"
});
//========================================
// JOIN <web.i18n.json> ti/i18n/zh-cn/web.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-cn/web.i18n.json", {
  "account": "账户",
  "account-flt-tip": "请输入账号名过滤",
  "account-manage": "账户管理",
  "account-meta": "账户属性",
  "account-meta-tip": "请选择一个账号查看详情",
  "address-consignee": "收货人",
  "address-empty-list": "未设置任何收货地址",
  "address-flt-tip": "请输入地址名过滤",
  "address-is-dft": "默认收货地址",
  "address-k-area": "区县",
  "address-k-city": "城市",
  "address-k-code": "地址编码",
  "address-k-code-tip": "12位国家地址编码",
  "address-k-consignee": "收货人姓名",
  "address-k-country": "国家",
  "address-k-dftaddr": "默认地址",
  "address-k-door": "门牌",
  "address-k-email": "邮箱",
  "address-k-phone": "电话",
  "address-k-postcode": "邮编",
  "address-k-province": "省/直辖市",
  "address-k-street": "乡镇/街道",
  "address-k-title": "地址",
  "address-k-tp": "地址类型",
  "address-k-tp-s": "卖家地址",
  "address-k-tp-u": "用户地址",
  "address-k-uid": "用户",
  "address-k-uid-tip": "输入关联用户名过滤",
  "address-meta": "地址属性",
  "address-nil": "空地址",
  "address-nil-detail": "请选择一个地址查看详情",
  "address-rm-confirm": "您确定要删除这个地址吗？",
  "address-set-dft": "设为默认地址",
  "address-shipping-add": "添加收货地址",
  "admin-flt-tip": "请输入管理员名过滤",
  "admin-meta": "管理员属性",
  "admin-new": "新管理员",
  "admin-nickname": "管理员昵称",
  "admin-no-detail": "请选择一个管理员查看详情",
  "ar-cate": "文章分类",
  "ar-content": "文章内容",
  "ar-duration": "阅读时长",
  "ar-flt-tip": "请输入文章标题过滤",
  "ar-meta": "文章属性",
  "ar-meta-tip": "请选择一篇文章查看详情",
  "ar-new": "新文章",
  "ar-nm": "文章名称",
  "ar-pubat": "发布日期",
  "ar-thumb": "缩略封面",
  "ar-title": "文章标题",
  "ar-watch-c": "浏览次数",
  "auth-bind": "绑定",
  "auth-bind-email-title": "绑定邮箱",
  "auth-bind-phone-title": "绑定手机",
  "auth-blank-email": "邮箱不能为空",
  "auth-blank-name": "名称不能为空",
  "auth-blank-name-passwd": "名称或者密码不能为空",
  "auth-blank-phone": "手机号不能为空",
  "auth-doing": "正在验证",
  "auth-email-tip": "邮箱地址",
  "auth-email-title": "邮件密码登录/注册",
  "auth-email-vcode": "邮件密码",
  "auth-email-vcode-get": "获取邮件密码",
  "auth-go-email": "邮件密码登录/注册",
  "auth-go-passwd": "账号密码登录",
  "auth-go-phone": "短信密码登录/注册",
  "auth-login": "登录",
  "auth-login-NoSaltedPasswd": "你还未初始化您的登录密码，请切换至【${ta?验证码}】登录，之后前往【用户中心 > 重置密码】初始化您的登录密码，谢谢",
  "auth-login-or-signup": "登录/注册",
  "auth-logout-confirm": "您确定要退出登录吗？",
  "auth-ok": "账号验证通过",
  "auth-passwd-getback": "找回密码",
  "auth-passwd-name-email-tip": "邮箱地址/登录名",
  "auth-passwd-name-phone-tip": "手机号/登录名",
  "auth-passwd-tip": "密码",
  "auth-passwd-title": "账号密码登录",
  "auth-phone-tip": "手机号",
  "auth-phone-title": "短信密码登录/注册",
  "auth-phone-vcode": "短信密码",
  "auth-phone-vcode-get": "获取短信密码",
  "auth-reset-passwd": "重置密码 ...",
  "auth-reset-passwd-again": "再次重置密码",
  "auth-reset-passwd-btn-invalid": "密码包含非法字符",
  "auth-reset-passwd-btn-lack": "请填写必要信息",
  "auth-reset-passwd-btn-ready": "立即重置密码",
  "auth-reset-passwd-btn-short": "密码至少6位",
  "auth-reset-passwd-btn-unmatch": "密码两次输入不一致",
  "auth-reset-passwd-by-email": "用邮箱重置密码",
  "auth-reset-passwd-by-email-sent": "已经向您的注册邮箱 ${email} 发送了邮件密码",
  "auth-reset-passwd-by-email-tip": "请输入注册邮箱地址",
  "auth-reset-passwd-by-passwd": "用旧密码重置密码",
  "auth-reset-passwd-by-phone": "用手机重置密码",
  "auth-reset-passwd-by-phone-sent": "已经向您的手机 ${phone} 发送了短信密码",
  "auth-reset-passwd-by-phone-tip": "请输入注册手机号码",
  "auth-reset-passwd-ing": "正在重置密码...",
  "auth-reset-passwd-lack-email": "请输入注册邮箱地址",
  "auth-reset-passwd-lack-phone": "请输入注册手机号",
  "auth-reset-passwd-new": "新密码（最少6位）",
  "auth-reset-passwd-ok": "密码已经重置，下次登录时生效",
  "auth-reset-passwd-old": "旧密码",
  "auth-reset-passwd-ren": "再次确认",
  "auth-sending-vcode": "正在发送验证码",
  "auth-sent-ok": "${ta?验证码}已发出，请在${by}查收，${min}分钟内有效",
  "auth-ta-by-email": "邮箱里",
  "auth-ta-by-phone": "手机上",
  "auth-ta-email": "邮件密码",
  "auth-ta-phone": "手机密码",
  "auth-vcode-delay": "${sec} 秒后重新发送",
  "auth-vcode-lost": "收不到验证码？",
  "base-info": "基本信息",
  "blog": "博客",
  "blog-manage": "博客管理",
  "buy-checkout-nil": "请选择要付款的商品",
  "cate": "分类",
  "cate-flt-tip": "请输入分类名过滤",
  "cate-maj": "主分类",
  "cate-meta": "分类属性",
  "cate-new": "新分类",
  "cate-nil-tip": "请选择一个分类",
  "cate-no-detail": "请选择一个分类查看详情",
  "cate-pa": "父分类",
  "cate-pa-nil": "请选择自己的父分类",
  "cate-sub": "子分类",
  "cate-sub-nil": "请选择自己的子分类",
  "cate-val": "分类值",
  "cmt-brief": "评论摘要",
  "cmt-content": "评论内容",
  "cmt-flt-tip": "请输入用户ID或者评论内容过滤",
  "cmt-meta": "评论属性",
  "cmt-no-detail": "请选择一个角色查看详情",
  "cmt-target": "评论目标",
  "cmt-type": "评论类型",
  "cmt-user": "评论账户",
  "comments": "评论",
  "cover": "封面",
  "cover-pic": "封面图片",
  "detail-info": "详细信息",
  "dir-media": "媒体目录",
  "e-cmd-passwd-old_invalid": "旧密码错误",
  "e-cmd-www_passwd-Blank": "新密码为空",
  "e-cmd-www_passwd-CheckBlankAccount": "空账户",
  "e-cmd-www_passwd-CheckBlankCode": "空验证码",
  "e-cmd-www_passwd-CheckCodeFail": "验证码错误",
  "e-cmd-www_passwd-CheckFailed": "校验错误",
  "e-cmd-www_passwd-CheckWeirdAccount": "诡异的账户",
  "e-cmd-www_passwd-InvalidNewPasswd": "新密码无效",
  "e-cmd-www_passwd-LackTarget": "缺少重置目标",
  "e-cmd-www_passwd-TooShort": "新密码太短",
  "e-cmd-www_passwd-nopvg": "没有重置密码的权限",
  "e-run-action-test-fail": "执行操作前置条件不足",
  "e-www-captcha-fail_send_by_email": "邮件密码发送失败，请检查邮件账户是否正确",
  "e-www-invalid-captcha": "${ta?验证码}错误",
  "e-www-login-invalid-passwd": "账号密码错误",
  "e-www-login-noexists": "账号不存在",
  "e-www-order-OutOfStore": "商品${val?}库存不足",
  "invoice-k-bankaccount": "银行账号",
  "invoice-k-bankname": "开户行",
  "invoice-k-busiaddr": "企业地址",
  "invoice-k-busiphone": "企业电话",
  "invoice-k-invdft": "默认抬头",
  "invoice-k-invtfn": "发票税号",
  "invoice-k-invtitle": "发票抬头",
  "invoice-k-type": "发票类型",
  "invoice-k-uemail": "收票人邮箱",
  "invoice-k-uid": "关联账户",
  "invoice-k-uid-tip": "输入关联用户名过滤",
  "invoice-k-uname": "收票人名称",
  "invoice-k-uphone": "收票人电话",
  "invoice-kg-bank": "银行信息",
  "invoice-kg-busi": "企业信息",
  "invoice-kg-inv": "发票信息",
  "invoice-kg-u": "收票人信息",
  "k-ct-date": "创建日期",
  "k-lm": "最后更新",
  "me-k-account": "账户",
  "me-k-avatar": "头像",
  "me-k-city": "城市",
  "me-k-country": "国家",
  "me-k-email": "邮箱",
  "me-k-login": "最后登录",
  "me-k-nickname": "用户昵称",
  "me-k-nm": "登录名",
  "me-k-phone": "手机号",
  "me-k-role": "角色",
  "me-k-sex": "性别",
  "mine": "我的",
  "my-favors": "我的收藏",
  "my-favors-blog": "收藏的博客",
  "my-favors-goods": "收藏的商品",
  "my-favors-posts": "收藏的文章",
  "my-favors-spots": "收藏的景点",
  "my-favors-video": "收藏的视频",
  "my-orders": "我的订单",
  "my-orders-shop": "购物订单",
  "my-orders-video": "视频订单",
  "my-passwd": "重置密码",
  "my-profile": "我的资料",
  "my-shipping-address": "收货地址",
  "my-shopping-car": "购物车",
  "or-st-ca": "已取消",
  "or-st-dn": "完成",
  "or-st-fa": "创建订单失败",
  "or-st-nw": "提交订单",
  "or-st-ok": "支付成功",
  "or-st-sp": "已发货",
  "or-st-wt": "待支付",
  "ord-detail": "订单详情",
  "order-flt-tip": "请输入订单ID查询",
  "order-k-accounts": "用户库",
  "order-k-addr_ship": "发货地址",
  "order-k-addr_ship_code": "发货地址编码",
  "order-k-addr_ship_country": "发货国家",
  "order-k-addr_ship_door": "发货门牌",
  "order-k-addr_user": "收货地址",
  "order-k-addr_user_area": "地区",
  "order-k-addr_user_city": "城市",
  "order-k-addr_user_code": "收货地址编码",
  "order-k-addr_user_country": "收货国家",
  "order-k-addr_user_door": "收货门牌",
  "order-k-addr_user_province": "省",
  "order-k-addr_user_street": "街道",
  "order-k-buyer_id": "买家",
  "order-k-ca_at": "取消时间",
  "order-k-currency": "货币单位",
  "order-k-discount": "优惠",
  "order-k-dn_at": "完成时间",
  "order-k-fa_at": "支付失败",
  "order-k-fee": "支付金额",
  "order-k-freight": "运费",
  "order-k-freight-m": "修改运费",
  "order-k-freight-m-tip": "可以在这里输入0为客户免去运费",
  "order-k-id": "订单号",
  "order-k-invoice": "发票信息",
  "order-k-nominal": "标称总价",
  "order-k-note": "备注",
  "order-k-ok_at": "支付成功",
  "order-k-pay_id": "支付单",
  "order-k-pay_tp": "支付类型",
  "order-k-payment": "支付信息",
  "order-k-prefee": "基础金额",
  "order-k-prefee-m": "修改总价",
  "order-k-prefee-m-tip": "为用户输入新的协商后的商品总价",
  "order-k-price": "订单金额",
  "order-k-pro-amount": "数量",
  "order-k-pro-price": "单价",
  "order-k-pro-retail": "零售价",
  "order-k-pro-subretail": "零计",
  "order-k-pro-subtotal": "小计",
  "order-k-pro-title": "商品标题",
  "order-k-products": "商品信息",
  "order-k-profit": "收益金额",
  "order-k-seller": "卖家",
  "order-k-sp_at": "发货时间",
  "order-k-st": "订单状态",
  "order-k-title": "订单标题",
  "order-k-total": "商品总价",
  "order-k-user_email": "收货人邮箱",
  "order-k-user_name": "收货人姓名",
  "order-k-user_phone": "收货人手机",
  "order-k-waybil": "物流信息",
  "order-k-waybil_com": "物流公司",
  "order-k-waybil_nb": "运单号",
  "order-k-wt_at": "支付时间",
  "order-nil-detail": "请选择一个订单查看详情",
  "order-pay-id": "支付单号",
  "order-pay-status": "交易状态",
  "order-shipaddr-nil": "请指定一个收货地址",
  "passwd-invalid-char": "密码只能包括英文数字/大小写字母/以及特殊字符",
  "passwd-sl-1": "弱",
  "passwd-sl-2": "较弱",
  "passwd-sl-3": "中",
  "passwd-sl-4": "较强",
  "passwd-sl-5": "强",
  "passwd-tip": "请输入最少6位的英文数字/大小写字母/特殊字符的组合",
  "pay-by-free": "免费",
  "pay-by-paypal": "PayPal",
  "pay-by-wx-jsapi": "微信JSAPI",
  "pay-by-wx-qrcode": "微信扫码",
  "pay-by-wx-scan": "微信付款码",
  "pay-by-zfb-qrcode": "支付宝扫码",
  "pay-by-zfb-scan": "支付宝付款码",
  "pay-checkout-it-amount": "数量",
  "pay-checkout-it-name": "商品名称",
  "pay-checkout-it-price": "单价",
  "pay-checkout-it-subtotal": "小计",
  "pay-checkout-tip": "请确认你购买的商品数量和金额",
  "pay-paypal": "PayPal",
  "pay-proceed-check": "检查支付结果",
  "pay-proceed-ing": "正在检查...",
  "pay-re-fail": "支付失败",
  "pay-re-nil": "支付结果是一只薛定谔的猫",
  "pay-re-ok": "支付成功",
  "pay-re-wait": "等待支付中",
  "pay-step-checkout-title": "确认订单",
  "pay-step-choose-nil": "☝ 请选择上面的一个支付方式 👆",
  "pay-step-choose-tip": "您可以选择下面任意一种支付方式支付本订单",
  "pay-step-choose-tip2": "您将使用${val}支付本订单",
  "pay-step-choose-title": "支付方式",
  "pay-step-choose-title2": "选择支付方式",
  "pay-step-done-title": "完成",
  "pay-step-proceed-create-order": "正在创建订单...",
  "pay-step-proceed-fetch-order": "正在获取订单...",
  "pay-step-proceed-nil": "您未选择任何支付方式",
  "pay-step-proceed-tip": "使用${val}支付本订单",
  "pay-step-proceed-title": "支付",
  "pay-tip-wx-qrcode": "请于15分钟内用微信扫一扫付款码",
  "pay-tip-zfb-qrcode": "请于15分钟内用支付宝扫一扫付款码",
  "pay-title": "支付流程",
  "pay-wx": "微信支付",
  "pay-zfb": "支付宝",
  "paypal-amount_value": "交易金额",
  "paypal-approve-tip": "已经在新标签里为您打开了PayPal支付页面，如果没有打开，请点击☝上面的图标。支付完毕，页面会自动感知到，如果没有反应，试着点击👇下面的【检查支付结果】按钮。",
  "paypal-cap-id": "记录ID",
  "paypal-cap-status": "记录状态",
  "paypal-currency": "货币单位",
  "paypal-id": "PayPal交易号",
  "paypal-payer_email": "交易账户邮箱",
  "paypal-payer_id": "交易账户ID",
  "photo": "照片",
  "post-content-blank": "您提交的内容不能为空，也不能少于10个字",
  "profile-title": "我的基本信息",
  "pubat": "发布日期",
  "read-du": "阅读时长",
  "role": "角色",
  "role-as-guest": "访客",
  "role-as-normal": "普通用户",
  "role-as-vip": "VIP用户",
  "role-dft": "默认角色",
  "role-flt-tip": "请输入角色名过滤",
  "role-manage": "角色管理",
  "role-meta": "角色属性",
  "role-meta-tip": "请选择一个角色查看详情",
  "role-name": "角色名",
  "role-select-tip": "请选择角色",
  "role-val": "角色值",
  "shop-basket-clean-confirm": "您确定要清空购物车内全部商品吗？这是一个不能撤回的操作。",
  "shop-basket-remove-confirm": "您确定要从购物车中删除这个商品吗？",
  "topic": "主题",
  "type-new": "新类型",
  "video-title": "视频标题",
  "watch_c": "浏览次数",
  "waybil-com-ane": "安能物流",
  "waybil-com-best": "百世快递",
  "waybil-com-db": "德邦快递",
  "waybil-com-ems": "中国邮政速递物流",
  "waybil-com-jdl": "京东物流",
  "waybil-com-pj": "品骏快递",
  "waybil-com-sf": "顺丰快递",
  "waybil-com-sto": "申通快递",
  "waybil-com-uce": "优速快递",
  "waybil-com-yto": "圆通速递",
  "waybil-com-yunda": "韵达快递",
  "waybil-com-zto": "中通快递"
});
//========================================
// JOIN <wn-manager.i18n.json> ti/i18n/zh-cn/wn-manager.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-cn/wn-manager.i18n.json", {
  "ti-loading": "加载中...",
  "wn-adaptlist": "对象浏览器",
  "wn-create-fail": "创建失败",
  "wn-create-invalid": "新对象名称不能包括非法字符",
  "wn-create-ok": "创建成功",
  "wn-create-too-long": "新对象名称过长",
  "wn-del-confirm": "您确定要删除选中的${N}个项目吗？这是一个不可撤销的操作！",
  "wn-del-item": "正在删除: \"${name}\"",
  "wn-del-no-empty-folder": "目录\"${nm}\"不是空的，您是否要全部删除？点击\"否\"跳过",
  "wn-del-none": "请选择至少一个对象进行删除!",
  "wn-del-ok": "已有 ${N} 个对象被移除",
  "wn-download-dir": "对象 \"${nm}\" 是一个目录，点击\"继续\"将跳过它并下载下一个文件，点击\"终止\"将结束本次操作!",
  "wn-download-none": "请选择至少一个文件进行下载!",
  "wn-download-too-many": "即将逐个下载 ${N} 个文件，继续吗？",
  "wn-expose-hidden-off": "不显示隐藏的对象",
  "wn-expose-hidden-on": "显示隐藏的对象",
  "wn-gui": "通用布局界面",
  "wn-obj-preview": "对象预览",
  "wn-obj-puretext": "纯文本编辑器",
  "wn-obj-single-com": "单控件测试套",
  "wn-publish-done": "发布成功",
  "wn-publish-to-nil": "未设置发布目标",
  "wn-publish-to-noexist": "发布目标不存在",
  "wn-rename": "重命名对象 \"${name}\"",
  "wn-rename-fail": "重命名失败",
  "wn-rename-invalid": "名称不能包括非法字符",
  "wn-rename-none": "请选择一个文件重命名!",
  "wn-rename-ok": "重命名成功",
  "wn-rename-suffix-changed": "您的文件后缀名发生变化，您需要自动为您补全原来的后缀吗？",
  "wn-rename-too-long": "名称过长",
  "wn-thing-manager": "数据管理器",
  "wn-view-opening": "正在加载界面..."
});
//========================================
// JOIN <wn-obj-preview.i18n.json> ti/i18n/zh-cn/wn-obj-preview.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-cn/wn-obj-preview.i18n.json", {
  "wop-fullscreen-enter": "进入全屏",
  "wop-fullscreen-quit": "退出全屏"
});
//========================================
// JOIN <wn-thing.i18n.json> ti/i18n/zh-cn/wn-thing.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-cn/wn-thing.i18n.json", {
  "thing-clean": "清空回收站",
  "thing-cleaning": "正在清空...",
  "thing-content": "对象内容",
  "thing-content-hide": "隐藏内容",
  "thing-content-show": "显示内容",
  "thing-create": "创建新对象",
  "thing-create-in-recyclebin": "请先退出回收站，再创建新对象",
  "thing-enter-recyclebin": "打开回收站",
  "thing-export-c-expi": "保存时间",
  "thing-export-c-expi-14d": "十四天",
  "thing-export-c-expi-3d": "三天",
  "thing-export-c-expi-7d": "七天",
  "thing-export-c-expi-off": "永远",
  "thing-export-c-mapping": "映射方式",
  "thing-export-c-mode": "导出模式",
  "thing-export-c-mode-csv": "CSV文件",
  "thing-export-c-mode-json": "JSON",
  "thing-export-c-mode-xls": "电子表格",
  "thing-export-c-mode-zip": "数据压缩包",
  "thing-export-c-name": "导出文件名称",
  "thing-export-c-page": "数据范围",
  "thing-export-c-page-all": "全部页",
  "thing-export-c-page-current": "当前页",
  "thing-export-done": "完成",
  "thing-export-done-ok": "导出成功",
  "thing-export-done-tip": "请点击下载链接下载",
  "thing-export-ing": "执行导出",
  "thing-export-ing-tip": "正在执行导出脚本，请稍后",
  "thing-export-open-dir": "打开导出历史目录...",
  "thing-export-setup": "导出设置",
  "thing-files": "对象文件表",
  "thing-files-attachment": "附件目录",
  "thing-files-hide": "隐藏文件表",
  "thing-files-media": "媒体目录",
  "thing-files-show": "显示文件表",
  "thing-filter-kwdplhd": "请输入查询条件",
  "thing-leave-recyclebin": "退出回收站",
  "thing-meta": "对象属性",
  "thing-meta-hide": "隐藏属性",
  "thing-meta-show": "显示属性",
  "thing-recycle-bin": "回收站",
  "thing-restore": "恢复选中",
  "thing-restore-none": "请先选择要恢复的数据",
  "thing-restoring": "正在恢复..."
});
//========================================
// JOIN <_net.i18n.json> ti/i18n/zh-cn/_net.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-cn/_net.i18n.json", {
  "net-ct": "创建时间",
  "net-flt-nil": "查找视频名称",
  "net-vod-add-video": "添加视频",
  "net-vod-cate": "视频分类",
  "net-vod-du-long": "长视频",
  "net-vod-du-short": "短视频",
  "net-vod-du-tv": "剧集视频",
  "net-vod-duration": "视频时长",
  "net-vod-size": "视频大小",
  "net-vod-video-nil": "请选择一个视频查看详情"
});
//========================================
// JOIN <_ti.i18n.json> ti/i18n/zh-cn/_ti.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-cn/_ti.i18n.json", {
  "img" : "图像",
  "img-add" : "添加图像",
  "img-insert" : "插入图像",
  "img-remove" : "删除图像",
  "copy" : "复制",
  "copy-all" : "全部复制",
  "preview": "预览",
  "add": "添加",
  "add-item": "添加新项",
  "album": "相册",
  "albums": "相册",
  "amount": "数量",
  "attachment": "附件",
  "audio": "音频",
  "audios": "音频",
  "avatar": "头像",
  "banner": "头图",
  "batch-none": "请从下面列表中选择至少一个对象进行批量更新",
  "batch-update": "批量更新...",
  "blank": "空白",
  "blank-to-edit": "请选择要编辑的项目",
  "brief": "摘要",
  "brief-d": "摘要描述",
  "brief-i": "摘要说明",
  "buy": "购买",
  "buy-now": "立即购买",
  "cancel": "取消",
  "cancel-all": "取消选中",
  "candidate": "备选项",
  "captcha": "验证码",
  "captcha-chagne": "换一张",
  "captcha-tip": "请输入图中的验证码",
  "chart": "图表",
  "chart-bar": "柱状图",
  "chart-line": "折线图",
  "chart-pie": "饼状图",
  "chart-rank": "条状图",
  "checked": "已选中",
  "choose": "选择",
  "choose-file": "选择文件",
  "choose-obj": "选择对象",
  "clean": "清理",
  "clear": "清除",
  "close": "关闭",
  "confirm": "确认",
  "console": "控制台",
  "content": "内容",
  "continue": "继续",
  "create": "新建",
  "create-now": "立即创建",
  "creating": "正在创建...",
  "date": "日期",
  "db-col-type-AUTO": "自动",
  "db-col-type-BINARY": "二进制",
  "db-col-type-BOOLEAN": "布尔",
  "db-col-type-CHAR": "定长字符",
  "db-col-type-FLOAT": "浮点数",
  "db-col-type-INT": "整数",
  "db-col-type-TEXT": "长文本",
  "db-col-type-TIMESTAMP": "时间戳",
  "db-col-type-VARCHAR": "变长字符",
  "debug": "调试",
  "default": "默认",
  "del": "删除",
  "del-checked": "删除选中",
  "del-hard": "选中项目即将被直接删除，此操作不可撤销，您确定要继续吗？",
  "del-ing": "正在删除...",
  "del-none": "请从下面列表中选择至少一个对象进行删除",
  "desktop": "桌面",
  "detail": "详情",
  "dis-name": "显示名",
  "disable": "禁用",
  "disabled": "禁用的",
  "doing": "正在执行...",
  "download": "下载",
  "download-to-local": "下载到本地",
  "drop-file-here-to-upload": "拖拽文件至此以便上传",
  "drop-here": "拖拽文件至此",
  "dt-in": "在${val}内",
  "dt-u-day": "天",
  "dt-u-hour": "小时",
  "dt-u-min": "分钟",
  "dt-u-month": "月",
  "dt-u-ms": "好眠",
  "dt-u-sec": "秒",
  "dt-u-week": "周",
  "dt-u-year": "年",
  "e-auth-account-noexists": "账户不存在",
  "e-auth-home-forbidden": "账户不具备进入主目录的权限",
  "e-auth-login-NoPhoneOrEmail": "错误的手机号或邮箱地址",
  "e-auth-login-NoSaltedPasswd": "未设置合法的密码",
  "e-auth-login-invalid-passwd": "账户密码未通过校验",
  "e-io-obj-BlankName": "对象名称不能为空",
  "e-io-obj-InvalidName": "对象名称非法",
  "e-io-obj-exists": "但是对象已然存在",
  "e-io-obj-noexists": "对象其实并不存在",
  "e-io-obj-noexistsf": "对象[${nm}]其实并不存在",
  "edit": "编辑",
  "edit-com": "编辑控件",
  "email": "邮箱",
  "emoji": "表情符合",
  "empty": "空",
  "empty-data": "无数据",
  "enable": "启用",
  "enabled": "启用的",
  "error": "错误",
  "export-data": "导出数据...",
  "fail": "失败",
  "false": "否",
  "favorites": "收藏",
  "female": "女",
  "filter": "过滤",
  "find": "查找",
  "find-data": "查找数据",
  "gender": "性别",
  "geo-alti": "海拔",
  "geo-azimuth": "方向角",
  "geo-gcj02-lat": "火星纬度",
  "geo-gcj02-lng": "火星经度",
  "geo-hash": "地理哈希",
  "geo-lat": "纬度",
  "geo-lng": "经度",
  "geo-sate-cno": "可见卫星数",
  "geo-sate-cnt": "使用卫星数",
  "global-settings": "全局设置",
  "hierarchy": "层级",
  "history-record": "历史记录",
  "home": "主目录",
  "home-index" : "首页",
  "i-known": "我知道了",
  "icon": "图标",
  "icon-code-tip": "请输入图标代码，如 zmdi-case",
  "import-data": "导入数据...",
  "index": "索引",
  "info": "信息",
  "init": "初始化",
  "init-data": "初始化数据",
  "input": "输入",
  "input-tags": "输入标签",
  "java-type-Boolean": "布尔",
  "java-type-Double": "双精度浮点",
  "java-type-Float": "浮点",
  "java-type-Integer": "整数",
  "java-type-JSON": "JSON对象",
  "java-type-List": "对象列表",
  "java-type-Long": "长整数",
  "java-type-Object": "对象",
  "java-type-SArray": "字符串数组",
  "java-type-String": "字符串",
  "json-Array": "数组",
  "json-Boolean": "布尔",
  "json-Float": "小数",
  "json-Integer": "整数",
  "json-Nil": "空值",
  "json-Number": "数字",
  "json-Object": "对象",
  "json-String": "字符串",
  "json-new-key": "请输入一个新键名",
  "label": "标签",
  "lang": "语言",
  "lang-en-us": "英",
  "lang-zh-cn": "简",
  "lang-zh-hk": "繁",
  "lang-zh-tw": "繁",
  "lat": "纬度",
  "lbs-place-add": "添加地点",
  "lbs-ro-rnb-k-first": "起始数字",
  "lbs-ro-rnb-k-type": "显示类型",
  "lbs-ro-rnb-k-type-alpha": "小写字母",
  "lbs-ro-rnb-k-type-capital": "大写字母",
  "lbs-ro-rnb-k-type-number": "数字",
  "lbs-ro-rnb-title": "自动设置线路标签",
  "link": "链接",
  "link-href": "链接目标",
  "link-text": "链接文字",
  "list": "列表",
  "lng": "经度",
  "loading": "加载中...",
  "location": "位置",
  "login": "登录",
  "login-name": "登录名",
  "logout": "退出",
  "logout-ing": "正在注销...",
  "mail-as-html": "HTML邮件",
  "mail-bcc": "密送",
  "mail-cc": "抄送",
  "mail-charset": "邮件字符编码",
  "mail-notify": "邮件通知",
  "mail-r-addr": "邮件地址",
  "mail-r-name": "名称",
  "mail-scene": "邮件场景",
  "mail-scene-ctmpl": "内容模板",
  "mail-scene-flt-tip": "请输入场景名称查询",
  "mail-scene-meta": "邮件场景属性",
  "mail-scene-nil-detail": "请选择一个邮件场景查看详情",
  "mail-scene-nm": "场景名称",
  "mail-scene-nm-tip": "请用半角英文数字或者下划线组合，并保证唯一",
  "mail-scene-var-trans": "转换脚本",
  "mail-scene-var-trans-placeholder": "譬如 jsc /path/to/script.js -vars",
  "mail-scene-var-trans-tip": "输入是原始变量的JSON，输出是一个JSON变量集合",
  "mail-setup": "邮件设置",
  "mail-subject": "邮件标题",
  "mail-to": "收信人",
  "male": "男",
  "map-hybrid": "俯瞰地图",
  "map-roadmap": "道路地图",
  "map-satellite": "卫星照片",
  "map-terrain": "地形地图",
  "map-type": "地图类型",
  "me": "我",
  "media": "媒体",
  "meta": "元数据",
  "mine": "我的",
  "modal": "模式",
  "modify": "修改",
  "more": "更多",
  "move": "移动",
  "move-down": "下移",
  "move-up": "上移",
  "msg": "消息",
  "name": "名称",
  "new-item": "新项目",
  "newsfeed": "消息流",
  "next": "下一步",
  "nil": "无",
  "nil-content": "无内容",
  "nil-detail": "请选择一项查看详情",
  "nil-item": "请先选择一项",
  "nil-obj": "请选择一个对象",
  "no": "否",
  "no-saved": "您有未保存的数据",
  "no-selected": "未选择",
  "no-title": "无标题",
  "obj": "对象",
  "off": "关",
  "ok": "确定",
  "on": "开",
  "open": "打开",
  "open-newtab": "在新标签打开",
  "others": "其他",
  "paging-change-pgsz": "当前每页有${pgsz}条记录，您想修改为：",
  "paging-change-pgsz-invalid": "页大小必须是整数数字，而且必须大于0，可您... -_-!",
  "paging-change-pn": "当前第${pn}页，您想跳转到：（请输入 1 至 ${pgc} 之间的数字）",
  "paging-change-pn-invalid": "页码必须是整数数字，而且必须为 1 至 ${pgc} 之间的数字",
  "paging-first": "首页",
  "paging-last": "尾页",
  "paging-next": "后一页",
  "paging-prev": "前一页",
  "paging-sum": "共${pgc}页${sum}条记录，当前${count}/${pgsz}",
  "passwd": "密码",
  "passwd-reset": "重置密码",
  "path": "路径",
  "phone": "手机",
  "phone-nb": "手机号",
  "post": "提交",
  "prev": "上一步",
  "price": "价格",
  "profile": "资料",
  "profile-edit": "编辑资料",
  "prompt": "询问",
  "properties": "属性",
  "publish": "发布",
  "publishing": "正在发布...",
  "refresh": "刷新",
  "refresh-hard": "硬性刷新",
  "refresh-hard-clear": "清空缓存并硬性刷新",
  "reload": "重新加载",
  "reloading": "重新加载数据...",
  "remove": "移除",
  "removing": "正在移除...",
  "rename": "重命名...",
  "renaming": "正在重命名...",
  "reset": "重置",
  "reset-change": "撤销修改",
  "reset-data": "重置数据",
  "restore": "恢复",
  "revoke": "撤销",
  "revoke-change": "撤销修改",
  "run": "运行",
  "run-finished": "脚本执行结束",
  "run-welcome": "正在运行脚本，请稍后 ...",
  "save": "保存",
  "save-change": "保存修改",
  "save-done": "保存成功",
  "save-now": "立即保存",
  "saving": "正在保存...",
  "score": "评分",
  "score-count": "打分人数",
  "select": "选择",
  "select-all": "全部选中",
  "send": "发送",
  "settings": "设置",
  "slogan": "标语",
  "sms-scene-nm": "场景名称",
  "sms-scene-nm-tip": "请用半角英文数字或者下划线组合，并保证唯一",
  "sms-setup": "短信配置",
  "sort": "排序",
  "sort-tip-asc": "越小越靠前",
  "sort-tip-desc": "越大越靠前",
  "sort-val": "排序值",
  "source-code": "源代码",
  "stat-date-at": "统计日期",
  "stat-date-at-oor": "这个日期的统计数据还未就绪",
  "stat-date-span": "时间跨度",
  "stop": "停止",
  "structure": "结构",
  "success": "成功",
  "sys-settings": "系统设置",
  "tablet": "平板",
  "terminal": "终端",
  "terminate": "终止",
  "text": "文字",
  "timestamp": "时间戳",
  "title": "标题",
  "total": "总共",
  "total-count": "共 ${nb?0} ${unit?项}",
  "total-items": "总共${val}项",
  "trace": "跟踪",
  "track": "消息",
  "true": "是",
  "type": "类型",
  "under-construction": "正在施工中",
  "unknown": "未知",
  "unzip": "解压缩",
  "unzipping": "正在解压缩...",
  "upload": "上传",
  "upload-done": "文件上传已完成",
  "upload-file": "上传文件...",
  "upload-nofinished": "文件上传还没有完成",
  "uploading": "正在上传",
  "user-avator": "用户头像",
  "value": "值",
  "video": "视频",
  "videos": "视频",
  "view": "查看",
  "view-resource": "查看源代码",
  "vu-mv": "毫伏",
  "vu-v": "伏特",
  "warn": "警告",
  "website": "网站",
  "www-admin-login": "后台登录界面",
  "www-home": "网站目录",
  "www-title": "前端网站",
  "yes": "是",
  "zip": "压缩",
  "zipping": "正在压缩..."
});
//========================================
// JOIN <_wn.i18n.json> ti/i18n/zh-cn/_wn.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-cn/_wn.i18n.json", {
  "wn-admin-check-obj-thumb": "检查图像缩略图...",
  "wn-admin-tools": "管理工具",
  "wn-ctt-css-text": "CSS样式文件",
  "wn-ctt-folder-text": "文件夹",
  "wn-ctt-html-text": "HTML文本",
  "wn-ctt-js-text": "JS脚本",
  "wn-ctt-json-text": "JSON文本",
  "wn-ctt-less-text": "LESS文本",
  "wn-ctt-md-text": "Markdown文本",
  "wn-ctt-mjs-text": "模块化JS脚本",
  "wn-ctt-sass-text": "SASS文本",
  "wn-ctt-thing_set-text": "数据集合",
  "wn-ctt-txt-text": "纯文本",
  "wn-ctt-wnml-text": "WNML源文件",
  "wn-ctt-xml-text": "XML文本",
  "wn-edit-com-nil": "默认为标签控件",
  "wn-en-his-ct": "创建时间",
  "wn-en-his-flt-tip": "请输入用户ID或者名称过滤",
  "wn-en-his-mor": "操作细节",
  "wn-en-his-opt": "操作",
  "wn-en-his-tar": "目标",
  "wn-en-his-tid": "目标ID",
  "wn-en-his-tnm": "目标名",
  "wn-en-his-ttp": "目标类型",
  "wn-en-his-uid": "用户ID",
  "wn-en-his-unm": "用户名",
  "wn-en-his-usr": "用户",
  "wn-en-his-utp": "用户类型",
  "wn-fsc-mail-scene-new": "新建一个邮件场景",
  "wn-fsc-mail-tmpl-new": "请输入新邮件模板的名称(要唯一，譬如 signup)",
  "wn-invalid-mimes": "不支持的文件内容类型 \"${current}\"，仅能支持 \"${supports}\"",
  "wn-invalid-types": "不支持的文件扩展名 \"${current}\"，仅能支持 \"${supports}\"",
  "wn-key-c": "创建者",
  "wn-key-ct": "创建时间",
  "wn-key-d0": "D0",
  "wn-key-d1": "D1",
  "wn-key-data": "数据",
  "wn-key-duration": "时长",
  "wn-key-expi": "过期时间",
  "wn-key-g": "主组",
  "wn-key-grp-advance": "高级",
  "wn-key-grp-basic": "基本",
  "wn-key-grp-customized": "自定义",
  "wn-key-grp-more": "更多",
  "wn-key-grp-others": "其他",
  "wn-key-grp-privilege": "权限",
  "wn-key-grp-thumb": "缩略图",
  "wn-key-grp-timestamp": "时间戳",
  "wn-key-height": "高",
  "wn-key-icon": "图标",
  "wn-key-id": "ID",
  "wn-key-len": "大小",
  "wn-key-lm": "修改",
  "wn-key-m": "修改者",
  "wn-key-md": "基本权限",
  "wn-key-mime": "内容类型",
  "wn-key-nm": "对象名",
  "wn-key-ph": "路径",
  "wn-key-pid": "父对象",
  "wn-key-pvg": "定制权限",
  "wn-key-race": "族类",
  "wn-key-sha1": "内容签名",
  "wn-key-thumb": "缩略图",
  "wn-key-title": "标题",
  "wn-key-tp": "类型",
  "wn-key-width": "宽",
  "wn-obj-nosaved": "您有未保存的对象",
  "wn-oc-auto-type": "全部类型",
  "wn-oc-free": "请输入对象完整名称，包括扩展名，譬如 `myfile.xml`",
  "wn-oc-tip": "新对象名称",
  "wn-race-DIR": "目录",
  "wn-race-FILE": "文件",
  "wn-th-acc-pwd-choose-none": "请选择要重置密码的账号（可多选）",
  "wn-th-acc-pwd-done": "已经为${n}名用户重置了密码",
  "wn-th-acc-pwd-invalid": "密码中不得包含单双引号星号等非法字符",
  "wn-th-acc-pwd-reset-tip": "将密码重置为",
  "wn-th-acc-pwd-too-short": "您输入的密码过短，不能少于6位，最好为数字字母以及特殊字符的组合",
  "wn-th-recount-media": "重新计算当前文件数量",
  "wn-th-recount-media-done": "当前文件数量: ${n}"
});
//========================================
// JOIN <hmaker.i18n.json> ti/i18n/zh-hk/hmaker.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-hk/hmaker.i18n.json", {
   "hmk-css-c-auto": "自動",
   "hmk-css-g-inherit": "繼承",
   "hmk-css-g-initial": "初始",
   "hmk-css-g-unset": "默認",
   "hmk-css-edit": "編輯CSS樣式",
   "hmk-css-grp-texting": "文字設置",
   "hmk-css-grp-aspect": "外觀設置",
   "hmk-css-grp-measure": "尺度設置",
   "hmk-css-border": "邊框",
   "hmk-css-border-radius": "圓角",
   "hmk-css-margin": "外邊距",
   "hmk-css-padding": "內邊框",
   "hmk-css-color": "文字顏色",
   "hmk-css-background": "背景",
   "hmk-css-background-color": "背景顏色",
   "hmk-css-box-shadow": "塊陰影",
   "hmk-css-text-shadow": "文字陰影",
   "hmk-css-overflow": "內容溢出",
   "hmk-css-overflow-scroll": "滾動",
   "hmk-css-overflow-hidden": "隱藏",
   "hmk-css-overflow-clip": "剪裁",
   "hmk-css-overflow-visible": "可見",
   "hmk-css-width": "寬度",
   "hmk-css-height": "高度",
   "hmk-css-max-width": "最大寬度",
   "hmk-css-max-height": "最大高度",
   "hmk-css-min-width": "最小寬度",
   "hmk-css-min-height": "最小高度",
   "hmk-css-line-height": "行高",
   "hmk-css-letter-spacing": "字間距",
   "hmk-class-pick": "編輯類選擇器",
   "hmk-class-item-space": "項間距",
   "hmk-class-flex": "自動伸縮",
   "hmk-class-flex-none": "關閉",
   "hmk-class-flex-both": "雙向",
   "hmk-class-flex-grow": "伸展",
   "hmk-class-flex-shrink": "收縮",
   "hmk-class-text": "文字",
   "hmk-class-text-in": "居內",
   "hmk-class-text-out": "居外",
   "hmk-class-at": "位置",
   "hmk-class-at-center": "居中",
   "hmk-class-at-top": "上部",
   "hmk-class-at-bottom": "下部",
   "hmk-class-at-left": "左側",
   "hmk-class-at-right": "右側",
   "hmk-class-at-bottom-left": "左下",
   "hmk-class-at-bottom-right": "右下",
   "hmk-class-at-top-left": "左上",
   "hmk-class-at-top-right": "右上",
   "hmk-class-font-size": "文字大小",
   "hmk-class-xs": "特小",
   "hmk-class-sm": "較小",
   "hmk-class-md": "正常",
   "hmk-class-lg": "較大",
   "hmk-class-xl": "特大",
   "hmk-class-text-style": "文字風格",
   "hmk-class-ts-mask": "遮罩",
   "hmk-class-ts-shadow": "陰影",
   "hmk-class-hover": "懸停效果",
   "hmk-class-hover-to-up": "上浮",
   "hmk-class-hover-to-zoom": "縮放",
   "com-form": "表單",
   "com-label": "標籤",
   "com-list": "列表",
   "hm-type-Array": "數組",
   "hm-type-Boolean": "布爾",
   "hm-type-Group": "字段分組",
   "hm-type-Integer": "整數",
   "hm-type-Number": "數字",
   "hm-type-Object": "對象",
   "hm-type-String": "文本",
   "hm-type-icons": "{\"Array\":\"zmdi-format-list-bulleted\",\"Boolean\":\"zmdi-toll\",\"Group\":\"zmdi-collection-bookmark\",\"Integer\":\"zmdi-n-6-square\",\"Number\":\"zmdi-input-svideo\",\"Object\":\"zmdi-toys\",\"String\":\"zmdi-translate\"}",
   "hmaker-com-conf-blank": "請選擇一個控件設置其詳情",
   "hmaker-com-type-blank": "選擇一個控件",
   "hmaker-edit-form-del-group-all": "組以及全部字段",
   "hmaker-edit-form-del-group-confirm": "您是要刪除組以及其內的全部字段，還是僅是組？",
   "hmaker-edit-form-del-group-only": "僅是組",
   "hmaker-edit-form-field-nil": "請選擇一個字段編輯詳情",
   "hmaker-edit-form-new-field": "新字段",
   "hmaker-edit-form-new-field-e0": "字段名不能以數字開頭，內容只能爲小寫英文字母數字和下劃線",
   "hmaker-edit-form-new-field-e1": "字段【${val}】已存在，請另選一個名稱",
   "hmaker-edit-form-new-field-tip": "請輸入新字段名（只能爲小寫英文字母數字和下劃線）",
   "hmaker-edit-form-new-group": "新分組",
   "hmaker-edit-form-new-group-tip": "請輸入新分組名",
   "hmaker-edit-form-nil-field": "請先選擇一個字段",
   "hmaker-edit-form-not-current": "請選擇一個字段或者字段組",
   "hmaker-layout-cols": "列布局",
   "hmaker-layout-rows": "行佈局",
   "hmaker-layout-tabs": "標籤佈局",
   "hmaker-nav-blank-item": "請選擇一個導航項目編輯",
   "hmaker-nav-k-display": "鏈接顯示內容",
   "hmaker-nav-k-icon": "鏈接圖標",
   "hmaker-nav-k-title": "鏈接文字",
   "hmaker-nav-k-type": "鏈接類型",
   "hmaker-nav-k-value": "鏈接目標",
   "hmaker-nav-tp-dispatch": "方法調用",
   "hmaker-nav-tp-href": "外部鏈接",
   "hmaker-nav-tp-page": "站點頁面",
   "hmaker-site-k-apiBase": "接口路徑",
   "hmaker-site-k-base": "資源路徑",
   "hmaker-site-k-captcha": "驗證碼路徑",
   "hmaker-site-k-domain": "所屬域",
   "hmaker-site-k-entry": "着陸頁",
   "hmaker-site-prop": "站點屬性",
   "hmaker-site-state": "站點全局配置",
   "hmaker-site-state-actions": "全局動作表",
   "hmaker-site-state-apis": "接口集",
   "hmaker-site-state-blocks": "預定義佈局",
   "hmaker-site-state-general": "通用配置",
   "hmaker-site-state-nav": "全局導航條",
   "hmaker-site-state-router": "頁面路由",
   "hmaker-site-state-schema": "預定義控件",
   "hmaker-site-state-utils": "擴展函數",
   "hmaker-site-tree": "站點結構",
   "hmaker-site-tree-loading": "正在加載站點結構...",
   "hmk-adjustDelay": "調整延遲",
   "hmk-aspect": "外觀",
   "hmk-autoI18n": "國際化",
   "hmk-behavior": "行爲",
   "hmk-blankAs": "空白樣式",
   "hmk-breakLine": "維持換行",
   "hmk-currentTab": "當前標籤",
   "hmk-data": "數據",
   "hmk-dict": "數據字典",
   "hmk-editable": "可編輯",
   "hmk-field-checkEquals": "檢查相等",
   "hmk-field-com": "編輯控件",
   "hmk-field-defaultAs": "默認值",
   "hmk-field-disabled": "失效條件",
   "hmk-field-height": "高度",
   "hmk-field-hidden": "隱藏條件",
   "hmk-field-icon": "圖標",
   "hmk-field-name": "鍵名",
   "hmk-field-serializer": "自定義保存",
   "hmk-field-tip": "提示說明",
   "hmk-field-title": "顯示名",
   "hmk-field-transformer": "自定義轉換",
   "hmk-field-type": "類型",
   "hmk-field-width": "寬度",
   "hmk-fieldStatus": "字段狀態",
   "hmk-fields": "字段",
   "hmk-fields-advance": "高級",
   "hmk-fields-general": "基本",
   "hmk-form-data": "數據源",
   "hmk-form-height": "表單高度",
   "hmk-form-onlyFields": "僅聲明字段",
   "hmk-form-width": "表單寬度",
   "hmk-format": "格式化",
   "hmk-height": "控件高度",
   "hmk-href": "超鏈接",
   "hmk-icon": "表單圖標",
   "hmk-measure": "尺寸",
   "hmk-mode": "顯示方式",
   "hmk-mode-all": "全部",
   "hmk-mode-tab": "標籤",
   "hmk-newTab": "新窗口",
   "hmk-placeholder": "佔位文本",
   "hmk-prefixIcon": "前綴圖標",
   "hmk-prefixText": "前綴文字",
   "hmk-spacing": "間距",
   "hmk-spacing-comfy": "舒適",
   "hmk-spacing-tiny": "緊湊",
   "hmk-suffixIcon": "後綴圖標",
   "hmk-suffixText": "後綴文字",
   "hmk-tabAt": "標籤位置",
   "hmk-tabAt-bottom-center": "下部居中",
   "hmk-tabAt-bottom-left": "下部居左",
   "hmk-tabAt-bottom-right": "下部居右",
   "hmk-tabAt-top-center": "上部居中",
   "hmk-tabAt-top-left": "上部居左",
   "hmk-tabAt-top-right": "上部居右",
   "hmk-title": "表單標題",
   "hmk-trimed": "修剪空白",
   "hmk-value": "輸入值",
   "hmk-valueMaxWidth": "值最大寬度",
   "hmk-width": "控件寬度"
});
//========================================
// JOIN <ti-datetime.i18n.json> ti/i18n/zh-hk/ti-datetime.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-hk/ti-datetime.i18n.json", {
   "Apr": "四月",
   "Aug": "八月",
   "Dec": "十二月",
   "Feb": "二月",
   "Fri": "週五",
   "Friday": "星期五",
   "Jan": "一月",
   "Jul": "七月",
   "Jun": "六月",
   "Mar": "三月",
   "May": "五月",
   "Mon": "週一",
   "Monday": "星期一",
   "Nov": "十一月",
   "Oct": "十月",
   "Sat": "週六",
   "Saturday": "星期六",
   "Sep": "九月",
   "Sun": "週日",
   "Sunday": "星期日",
   "Thu": "週四",
   "Thursday": "星期四",
   "Tue": "週二",
   "Tuesday": "星期二",
   "Wed": "週三",
   "Wednesday": "星期三",
   "blank-date": "請選擇日期",
   "blank-date-range": "請選擇日期範圍",
   "blank-datetime": "請選擇日期時間",
   "blank-month": "請選擇月份",
   "blank-time": "請選擇時間",
   "blank-time-range": "請選擇時間範圍",
   "cal": "{\"abbr\":{\"Apr\":\"四月\",\"Aug\":\"八月\",\"Dec\":\"十二\",\"Feb\":\"二月\",\"Jan\":\"一月\",\"Jul\":\"七月\",\"Jun\":\"六月\",\"Mar\":\"三月\",\"May\":\"五月\",\"Nov\":\"十一\",\"Oct\":\"十月\",\"Sep\":\"九月\"},\"d-range-beyond-days\":\"${yy0}年${MM0}月${dd0}至${dd1}日\",\"d-range-beyond-months\":\"${yy0}年${MM0}月${dd0}日至${MM1}月${dd1}日\",\"d-range-beyond-years\":\"${yy0}年${MM0}月${dd0}日至${yy1}年${MM1}月${dd1}日\",\"d-range-in-same-day\":\"${yy0}年${MM0}月${dd0}日全天\",\"m-range-beyond-months\":\"${yy0}年${MT0}至${MT1}\",\"m-range-beyond-years\":\"${yy0}年${MT0}至${yy1}年${MT1}\",\"week\":[\"日\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\"]}",
   "du-in-min": "${n}分鐘",
   "time": "{\"any-time\":\"yyyy年M月d日\",\"in-year\":\"M月d日\",\"past-in-min\":\"剛剛\",\"past-in-hour\":\"${min}分鐘前\",\"past-in-day\":\"${hour}小時前\",\"past-in-week\":\"${day}天前\",\"future-in-min\":\"即將\",\"future-in-hour\":\"${min}分鐘後\",\"future-in-day\":\"${hour}小時後\",\"future-in-week\":\"${day}天后\"}",
   "time-begin": "開始時間",
   "time-end": "結束時間",
   "time-ms": "毫秒",
   "today": "今天",
   "tu-day": "天",
   "tu-hou": "小時",
   "tu-min": "分鐘",
   "tu-mon": "月",
   "tu-sec": "秒",
   "tu-week": "周",
   "tu-year": "年"
});
//========================================
// JOIN <ti-text-editor.i18n.json> ti/i18n/zh-hk/ti-text-editor.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-hk/ti-text-editor.i18n.json", {
   "wordp-h0": "正文",
   "wordp-h1": "標題 1",
   "wordp-h2": "標題 2",
   "wordp-h3": "標題 3",
   "wordp-h4": "標題 4",
   "wordp-h5": "標題 5",
   "wordp-h6": "標題 6",
   "wordp-heading": "標題級別",
   "wordp-link": "超鏈接",
   "wordp-nil-sel": "請先選擇一段文字"
});
//========================================
// JOIN <web.i18n.json> ti/i18n/zh-hk/web.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-hk/web.i18n.json", {
   "account": "賬戶",
   "account-flt-tip": "請輸入賬號名過濾",
   "account-manage": "賬戶管理",
   "account-meta": "賬戶屬性",
   "account-meta-tip": "請選擇一個賬號查看詳情",
   "address-consignee": "收貨人",
   "address-empty-list": "未設置任何收貨地址",
   "address-flt-tip": "請輸入地址名過濾",
   "address-is-dft": "默認收貨地址",
   "address-k-area": "區縣",
   "address-k-city": "城市",
   "address-k-code": "地址編碼",
   "address-k-code-tip": "12位國家地址編碼",
   "address-k-consignee": "收貨人姓名",
   "address-k-country": "國家",
   "address-k-dftaddr": "默認地址",
   "address-k-door": "門牌",
   "address-k-email": "郵箱",
   "address-k-phone": "電話",
   "address-k-postcode": "郵編",
   "address-k-province": "省/直轄市",
   "address-k-street": "鄉鎮/街道",
   "address-k-title": "地址",
   "address-k-tp": "地址類型",
   "address-k-tp-s": "賣家地址",
   "address-k-tp-u": "用戶地址",
   "address-k-uid": "用戶",
   "address-k-uid-tip": "輸入關聯用戶名過濾",
   "address-meta": "地址屬性",
   "address-nil": "空地址",
   "address-nil-detail": "請選擇一個地址查看詳情",
   "address-rm-confirm": "您確定要刪除這個地址嗎？",
   "address-set-dft": "設爲默認地址",
   "address-shipping-add": "添加收貨地址",
   "admin-flt-tip": "請輸入管理員名過濾",
   "admin-meta": "管理員屬性",
   "admin-new": "新管理員",
   "admin-nickname": "管理員暱稱",
   "admin-no-detail": "請選擇一個管理員查看詳情",
   "ar-cate": "文章分類",
   "ar-content": "文章內容",
   "ar-duration": "閱讀時長",
   "ar-flt-tip": "請輸入文章標題過濾",
   "ar-meta": "文章屬性",
   "ar-meta-tip": "請選擇一篇文章查看詳情",
   "ar-new": "新文章",
   "ar-nm": "文章名稱",
   "ar-pubat": "發佈日期",
   "ar-thumb": "縮略封面",
   "ar-title": "文章標題",
   "ar-watch-c": "瀏覽次數",
   "auth-bind": "綁定",
   "auth-bind-email-title": "綁定郵箱",
   "auth-bind-phone-title": "綁定手機",
   "auth-blank-email": "郵箱不能爲空",
   "auth-blank-name": "名稱不能爲空",
   "auth-blank-name-passwd": "名稱或者密碼不能爲空",
   "auth-blank-phone": "手機號不能爲空",
   "auth-doing": "正在驗證",
   "auth-email-tip": "郵箱地址",
   "auth-email-title": "郵件密碼登錄/註冊",
   "auth-email-vcode": "郵件密碼",
   "auth-email-vcode-get": "獲取郵件密碼",
   "auth-go-email": "郵件密碼登錄/註冊",
   "auth-go-passwd": "賬號密碼登錄",
   "auth-go-phone": "短信密碼登錄/註冊",
   "auth-login": "登錄",
   "auth-login-NoSaltedPasswd": "你還未初始化您的登錄密碼，請切換至【${ta?驗證碼}】登錄，之後前往【用戶中心 > 重置密碼】初始化您的登錄密碼，謝謝",
   "auth-login-or-signup": "登錄/註冊",
   "auth-logout-confirm": "您確定要退出登錄嗎？",
   "auth-ok": "賬號驗證通過",
   "auth-passwd-getback": "找回密碼",
   "auth-passwd-name-email-tip": "郵箱地址/登錄名",
   "auth-passwd-name-phone-tip": "手機號/登錄名",
   "auth-passwd-tip": "密碼",
   "auth-passwd-title": "賬號密碼登錄",
   "auth-phone-tip": "手機號",
   "auth-phone-title": "短信密碼登錄/註冊",
   "auth-phone-vcode": "短信密碼",
   "auth-phone-vcode-get": "獲取短信密碼",
   "auth-reset-passwd": "重置密碼 ...",
   "auth-reset-passwd-again": "再次重置密碼",
   "auth-reset-passwd-btn-invalid": "密碼包含非法字符",
   "auth-reset-passwd-btn-lack": "請填寫必要信息",
   "auth-reset-passwd-btn-ready": "立即重置密碼",
   "auth-reset-passwd-btn-short": "密碼至少6位",
   "auth-reset-passwd-btn-unmatch": "密碼兩次輸入不一致",
   "auth-reset-passwd-by-email": "用郵箱重置密碼",
   "auth-reset-passwd-by-email-sent": "已經向您的註冊郵箱 ${email} 發送了郵件密碼",
   "auth-reset-passwd-by-email-tip": "請輸入註冊郵箱地址",
   "auth-reset-passwd-by-passwd": "用舊密碼重置密碼",
   "auth-reset-passwd-by-phone": "用手機重置密碼",
   "auth-reset-passwd-by-phone-sent": "已經向您的手機 ${phone} 發送了短信密碼",
   "auth-reset-passwd-by-phone-tip": "請輸入註冊手機號碼",
   "auth-reset-passwd-ing": "正在重置密碼...",
   "auth-reset-passwd-lack-email": "請輸入註冊郵箱地址",
   "auth-reset-passwd-lack-phone": "請輸入註冊手機號",
   "auth-reset-passwd-new": "新密碼（最少6位）",
   "auth-reset-passwd-ok": "密碼已經重置，下次登錄時生效",
   "auth-reset-passwd-old": "舊密碼",
   "auth-reset-passwd-ren": "再次確認",
   "auth-sending-vcode": "正在發送驗證碼",
   "auth-sent-ok": "${ta?驗證碼}已發出，請在${by}查收，${min}分鐘內有效",
   "auth-ta-by-email": "郵箱裏",
   "auth-ta-by-phone": "手機上",
   "auth-ta-email": "郵件密碼",
   "auth-ta-phone": "手機密碼",
   "auth-vcode-delay": "${sec} 秒後重新發送",
   "auth-vcode-lost": "收不到驗證碼？",
   "base-info": "基本信息",
   "blog": "博客",
   "blog-manage": "博客管理",
   "buy-checkout-nil": "請選擇要付款的商品",
   "cate": "分類",
   "cate-flt-tip": "請輸入分類名過濾",
   "cate-maj": "主分類",
   "cate-meta": "分類屬性",
   "cate-new": "新分類",
   "cate-nil-tip": "請選擇一個分類",
   "cate-no-detail": "請選擇一個分類查看詳情",
   "cate-pa": "父分類",
   "cate-pa-nil": "請選擇自己的父分類",
   "cate-sub": "子分類",
   "cate-sub-nil": "請選擇自己的子分類",
   "cate-val": "分類值",
   "cmt-brief": "評論摘要",
   "cmt-content": "評論內容",
   "cmt-flt-tip": "請輸入用戶ID或者評論內容過濾",
   "cmt-meta": "評論屬性",
   "cmt-no-detail": "請選擇一個角色查看詳情",
   "cmt-target": "評論目標",
   "cmt-type": "評論類型",
   "cmt-user": "評論賬戶",
   "comments": "評論",
   "cover": "封面",
   "cover-pic": "封面圖片",
   "detail-info": "詳細信息",
   "dir-media": "媒體目錄",
   "e-cmd-passwd-old_invalid": "舊密碼錯誤",
   "e-cmd-www_passwd-Blank": "新密碼爲空",
   "e-cmd-www_passwd-CheckBlankAccount": "空賬戶",
   "e-cmd-www_passwd-CheckBlankCode": "空驗證碼",
   "e-cmd-www_passwd-CheckCodeFail": "驗證碼錯誤",
   "e-cmd-www_passwd-CheckFailed": "校驗錯誤",
   "e-cmd-www_passwd-CheckWeirdAccount": "詭異的賬戶",
   "e-cmd-www_passwd-InvalidNewPasswd": "新密碼無效",
   "e-cmd-www_passwd-LackTarget": "缺少重置目標",
   "e-cmd-www_passwd-TooShort": "新密碼太短",
   "e-cmd-www_passwd-nopvg": "沒有重置密碼的權限",
   "e-run-action-test-fail": "執行操作前置條件不足",
   "e-www-captcha-fail_send_by_email": "郵件密碼發送失敗，請檢查郵件賬戶是否正確",
   "e-www-invalid-captcha": "${ta?驗證碼}錯誤",
   "e-www-login-invalid-passwd": "賬號密碼錯誤",
   "e-www-login-noexists": "賬號不存在",
   "e-www-order-OutOfStore": "商品${val?}庫存不足",
   "invoice-k-bankaccount": "銀行賬號",
   "invoice-k-bankname": "開戶行",
   "invoice-k-busiaddr": "企業地址",
   "invoice-k-busiphone": "企業電話",
   "invoice-k-invdft": "默認擡頭",
   "invoice-k-invtfn": "發票稅號",
   "invoice-k-invtitle": "發票擡頭",
   "invoice-k-type": "發票類型",
   "invoice-k-uemail": "收票人郵箱",
   "invoice-k-uid": "關聯賬戶",
   "invoice-k-uid-tip": "輸入關聯用戶名過濾",
   "invoice-k-uname": "收票人名稱",
   "invoice-k-uphone": "收票人電話",
   "invoice-kg-bank": "銀行信息",
   "invoice-kg-busi": "企業信息",
   "invoice-kg-inv": "發票信息",
   "invoice-kg-u": "收票人信息",
   "k-ct-date": "創建日期",
   "k-lm": "最後更新",
   "me-k-account": "賬戶",
   "me-k-avatar": "頭像",
   "me-k-city": "城市",
   "me-k-country": "國家",
   "me-k-email": "郵箱",
   "me-k-login": "最後登錄",
   "me-k-nickname": "用戶暱稱",
   "me-k-nm": "登錄名",
   "me-k-phone": "手機號",
   "me-k-role": "角色",
   "me-k-sex": "性別",
   "mine": "我的",
   "my-favors": "我的收藏",
   "my-favors-blog": "收藏的博客",
   "my-favors-goods": "收藏的商品",
   "my-favors-posts": "收藏的文章",
   "my-favors-spots": "收藏的景點",
   "my-favors-video": "收藏的視頻",
   "my-orders": "我的訂單",
   "my-orders-shop": "購物訂單",
   "my-orders-video": "視頻訂單",
   "my-passwd": "重置密碼",
   "my-profile": "我的資料",
   "my-shipping-address": "收貨地址",
   "my-shopping-car": "購物車",
   "or-st-ca": "已取消",
   "or-st-dn": "完成",
   "or-st-fa": "創建訂單失敗",
   "or-st-nw": "提交訂單",
   "or-st-ok": "支付成功",
   "or-st-sp": "已發貨",
   "or-st-wt": "待支付",
   "ord-detail": "訂單詳情",
   "order-flt-tip": "請輸入訂單ID查詢",
   "order-k-accounts": "用戶庫",
   "order-k-addr_ship": "發貨地址",
   "order-k-addr_ship_code": "發貨地址編碼",
   "order-k-addr_ship_country": "發貨國家",
   "order-k-addr_ship_door": "發貨門牌",
   "order-k-addr_user": "收貨地址",
   "order-k-addr_user_area": "地區",
   "order-k-addr_user_city": "城市",
   "order-k-addr_user_code": "收貨地址編碼",
   "order-k-addr_user_country": "收貨國家",
   "order-k-addr_user_door": "收貨門牌",
   "order-k-addr_user_province": "省",
   "order-k-addr_user_street": "街道",
   "order-k-buyer_id": "買家",
   "order-k-ca_at": "取消時間",
   "order-k-currency": "貨幣單位",
   "order-k-discount": "優惠",
   "order-k-dn_at": "完成時間",
   "order-k-fa_at": "支付失敗",
   "order-k-fee": "支付金額",
   "order-k-freight": "運費",
   "order-k-freight-m": "修改運費",
   "order-k-freight-m-tip": "可以在這裏輸入0爲客戶免去運費",
   "order-k-id": "訂單號",
   "order-k-invoice": "發票信息",
   "order-k-nominal": "標稱總價",
   "order-k-note": "備註",
   "order-k-ok_at": "支付成功",
   "order-k-pay_id": "支付單",
   "order-k-pay_tp": "支付類型",
   "order-k-payment": "支付信息",
   "order-k-prefee": "基礎金額",
   "order-k-prefee-m": "修改總價",
   "order-k-prefee-m-tip": "爲用戶輸入新的協商後的商品總價",
   "order-k-price": "訂單金額",
   "order-k-pro-amount": "數量",
   "order-k-pro-price": "單價",
   "order-k-pro-retail": "零售價",
   "order-k-pro-subretail": "零計",
   "order-k-pro-subtotal": "小計",
   "order-k-pro-title": "商品標題",
   "order-k-products": "商品信息",
   "order-k-profit": "收益金額",
   "order-k-seller": "賣家",
   "order-k-sp_at": "發貨時間",
   "order-k-st": "訂單狀態",
   "order-k-title": "訂單標題",
   "order-k-total": "商品總價",
   "order-k-user_email": "收貨人郵箱",
   "order-k-user_name": "收貨人姓名",
   "order-k-user_phone": "收貨人手機",
   "order-k-waybil": "物流信息",
   "order-k-waybil_com": "物流公司",
   "order-k-waybil_nb": "運單號",
   "order-k-wt_at": "支付時間",
   "order-nil-detail": "請選擇一個訂單查看詳情",
   "order-pay-id": "支付單號",
   "order-pay-status": "交易狀態",
   "order-shipaddr-nil": "請指定一個收貨地址",
   "passwd-invalid-char": "密碼只能包括英文數字/大小寫字母/以及特殊字符",
   "passwd-sl-1": "弱",
   "passwd-sl-2": "較弱",
   "passwd-sl-3": "中",
   "passwd-sl-4": "較強",
   "passwd-sl-5": "強",
   "passwd-tip": "請輸入最少6位的英文數字/大小寫字母/特殊字符的組合",
   "pay-by-free": "免費",
   "pay-by-paypal": "PayPal",
   "pay-by-wx-jsapi": "微信JSAPI",
   "pay-by-wx-qrcode": "微信掃碼",
   "pay-by-wx-scan": "微信付款碼",
   "pay-by-zfb-qrcode": "支付寶掃碼",
   "pay-by-zfb-scan": "支付寶付款碼",
   "pay-checkout-it-amount": "數量",
   "pay-checkout-it-name": "商品名稱",
   "pay-checkout-it-price": "單價",
   "pay-checkout-it-subtotal": "小計",
   "pay-checkout-tip": "請確認你購買的商品數量和金額",
   "pay-paypal": "PayPal",
   "pay-proceed-check": "檢查支付結果",
   "pay-proceed-ing": "正在檢查...",
   "pay-re-fail": "支付失敗",
   "pay-re-nil": "支付結果是一隻薛定諤的貓",
   "pay-re-ok": "支付成功",
   "pay-re-wait": "等待支付中",
   "pay-step-checkout-title": "確認訂單",
   "pay-step-choose-nil": "☝ 請選擇上面的一個支付方式 👆",
   "pay-step-choose-tip": "您可以選擇下面任意一種支付方式支付本訂單",
   "pay-step-choose-tip2": "您將使用${val}支付本訂單",
   "pay-step-choose-title": "支付方式",
   "pay-step-choose-title2": "選擇支付方式",
   "pay-step-done-title": "完成",
   "pay-step-proceed-create-order": "正在創建訂單...",
   "pay-step-proceed-fetch-order": "正在獲取訂單...",
   "pay-step-proceed-nil": "您未選擇任何支付方式",
   "pay-step-proceed-tip": "使用${val}支付本訂單",
   "pay-step-proceed-title": "支付",
   "pay-tip-wx-qrcode": "請於15分鐘內用微信掃一掃付款碼",
   "pay-tip-zfb-qrcode": "請於15分鐘內用支付寶掃一掃付款碼",
   "pay-title": "支付流程",
   "pay-wx": "微信支付",
   "pay-zfb": "支付寶",
   "paypal-amount_value": "交易金額",
   "paypal-approve-tip": "已經在新標籤裏爲您打開了PayPal支付頁面，如果沒有打開，請點擊☝上面的圖標。支付完畢，頁面會自動感知到，如果沒有反應，試着點擊👇下面的【檢查支付結果】按鈕。",
   "paypal-cap-id": "記錄ID",
   "paypal-cap-status": "記錄狀態",
   "paypal-currency": "貨幣單位",
   "paypal-id": "PayPal交易號",
   "paypal-payer_email": "交易賬戶郵箱",
   "paypal-payer_id": "交易賬戶ID",
   "photo": "照片",
   "post-content-blank": "您提交的內容不能爲空，也不能少於10個字",
   "profile-title": "我的基本信息",
   "pubat": "發佈日期",
   "read-du": "閱讀時長",
   "role": "角色",
   "role-as-guest": "訪客",
   "role-as-normal": "普通用戶",
   "role-as-vip": "VIP用戶",
   "role-dft": "默認角色",
   "role-flt-tip": "請輸入角色名過濾",
   "role-manage": "角色管理",
   "role-meta": "角色屬性",
   "role-meta-tip": "請選擇一個角色查看詳情",
   "role-name": "角色名",
   "role-select-tip": "請選擇角色",
   "role-val": "角色值",
   "shop-basket-clean-confirm": "您確定要清空購物車內全部商品嗎？這是一個不能撤回的操作。",
   "shop-basket-remove-confirm": "您確定要從購物車中刪除這個商品嗎？",
   "topic": "主題",
   "type-new": "新類型",
   "video-title": "視頻標題",
   "watch_c": "瀏覽次數",
   "waybil-com-ane": "安能物流",
   "waybil-com-best": "百世快遞",
   "waybil-com-db": "德邦快遞",
   "waybil-com-ems": "中國郵政速遞物流",
   "waybil-com-jdl": "京東物流",
   "waybil-com-pj": "品駿快遞",
   "waybil-com-sf": "順豐快遞",
   "waybil-com-sto": "申通快遞",
   "waybil-com-uce": "優速快遞",
   "waybil-com-yto": "圓通速遞",
   "waybil-com-yunda": "韻達快遞",
   "waybil-com-zto": "中通快遞"
});
//========================================
// JOIN <wn-manager.i18n.json> ti/i18n/zh-hk/wn-manager.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-hk/wn-manager.i18n.json", {
   "ti-loading": "加載中...",
   "wn-adaptlist": "對象瀏覽器",
   "wn-create-fail": "創建失敗",
   "wn-create-invalid": "新對象名稱不能包括非法字符",
   "wn-create-ok": "創建成功",
   "wn-create-too-long": "新對象名稱過長",
   "wn-del-confirm": "您確定要刪除選中的${N}個項目嗎？這是一個不可撤銷的操作！",
   "wn-del-item": "正在刪除: \"${name}\"",
   "wn-del-no-empty-folder": "目錄\"${nm}\"不是空的，您是否要全部刪除？點擊\"否\"跳過",
   "wn-del-none": "請選擇至少一個對象進行刪除!",
   "wn-del-ok": "已有 ${N} 個對象被移除",
   "wn-download-dir": "對象 \"${nm}\" 是一個目錄，點擊\"繼續\"將跳過它並下載下一個文件，點擊\"終止\"將結束本次操作!",
   "wn-download-none": "請選擇至少一個文件進行下載!",
   "wn-download-too-many": "即將逐個下載 ${N} 個文件，繼續嗎？",
   "wn-expose-hidden-off": "不顯示隱藏的對象",
   "wn-expose-hidden-on": "顯示隱藏的對象",
   "wn-gui": "通用佈局界面",
   "wn-obj-preview": "對象預覽",
   "wn-obj-puretext": "純文本編輯器",
   "wn-obj-single-com": "單控件測試套",
   "wn-publish-done": "發佈成功",
   "wn-publish-to-nil": "未設置發佈目標",
   "wn-publish-to-noexist": "發佈目標不存在",
   "wn-rename": "重命名對象 \"${name}\"",
   "wn-rename-fail": "重命名失敗",
   "wn-rename-invalid": "名稱不能包括非法字符",
   "wn-rename-none": "請選擇一個文件重命名!",
   "wn-rename-ok": "重命名成功",
   "wn-rename-suffix-changed": "您的文件後綴名發生變化，您需要自動爲您補全原來的後綴嗎？",
   "wn-rename-too-long": "名稱過長",
   "wn-thing-manager": "數據管理器",
   "wn-view-opening": "正在加載界面..."
});
//========================================
// JOIN <wn-obj-preview.i18n.json> ti/i18n/zh-hk/wn-obj-preview.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-hk/wn-obj-preview.i18n.json", {
   "wop-fullscreen-enter": "進入全屏",
   "wop-fullscreen-quit": "退出全屏"
});
//========================================
// JOIN <wn-thing.i18n.json> ti/i18n/zh-hk/wn-thing.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-hk/wn-thing.i18n.json", {
   "thing-clean": "清空回收站",
   "thing-cleaning": "正在清空...",
   "thing-content": "對象內容",
   "thing-content-hide": "隱藏內容",
   "thing-content-show": "顯示內容",
   "thing-create": "創建新對象",
   "thing-create-in-recyclebin": "請先退出回收站，再創建新對象",
   "thing-enter-recyclebin": "打開回收站",
   "thing-export-c-expi": "保存時間",
   "thing-export-c-expi-14d": "十四天",
   "thing-export-c-expi-3d": "三天",
   "thing-export-c-expi-7d": "七天",
   "thing-export-c-expi-off": "永遠",
   "thing-export-c-mapping": "映射方式",
   "thing-export-c-mode": "導出模式",
   "thing-export-c-mode-csv": "CSV文件",
   "thing-export-c-mode-json": "JSON",
   "thing-export-c-mode-xls": "電子表格",
   "thing-export-c-mode-zip": "數據壓縮包",
   "thing-export-c-name": "導出文件名稱",
   "thing-export-c-page": "數據範圍",
   "thing-export-c-page-all": "全部頁",
   "thing-export-c-page-current": "當前頁",
   "thing-export-done": "完成",
   "thing-export-done-ok": "導出成功",
   "thing-export-done-tip": "請點擊下載鏈接下載",
   "thing-export-ing": "執行導出",
   "thing-export-ing-tip": "正在執行導出腳本，請稍後",
   "thing-export-open-dir": "打開導出歷史目錄...",
   "thing-export-setup": "導出設置",
   "thing-files": "對象文件表",
   "thing-files-attachment": "附件目錄",
   "thing-files-hide": "隱藏文件表",
   "thing-files-media": "媒體目錄",
   "thing-files-show": "顯示文件表",
   "thing-filter-kwdplhd": "請輸入查詢條件",
   "thing-leave-recyclebin": "退出回收站",
   "thing-meta": "對象屬性",
   "thing-meta-hide": "隱藏屬性",
   "thing-meta-show": "顯示屬性",
   "thing-recycle-bin": "回收站",
   "thing-restore": "恢復選中",
   "thing-restore-none": "請先選擇要恢復的數據",
   "thing-restoring": "正在恢復..."
});
//========================================
// JOIN <_net.i18n.json> ti/i18n/zh-hk/_net.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-hk/_net.i18n.json", {
   "net-ct": "創建時間",
   "net-flt-nil": "查找視頻名稱",
   "net-vod-add-video": "添加視頻",
   "net-vod-cate": "視頻分類",
   "net-vod-du-long": "長視頻",
   "net-vod-du-short": "短視頻",
   "net-vod-du-tv": "劇集視頻",
   "net-vod-duration": "視頻時長",
   "net-vod-size": "視頻大小",
   "net-vod-video-nil": "請選擇一個視頻查看詳情"
});
//========================================
// JOIN <_ti.i18n.json> ti/i18n/zh-hk/_ti.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-hk/_ti.i18n.json", {
   "img": "圖像",
   "img-add": "添加圖像",
   "img-insert": "插入圖像",
   "img-remove": "刪除圖像",
   "copy": "複製",
   "copy-all": "全部複製",
   "preview": "預覽",
   "add": "添加",
   "add-item": "添加新項",
   "album": "相冊",
   "albums": "相冊",
   "amount": "數量",
   "attachment": "附件",
   "audio": "音頻",
   "audios": "音頻",
   "avatar": "頭像",
   "banner": "頭圖",
   "batch-none": "請從下面列表中選擇至少一個對象進行批量更新",
   "batch-update": "批量更新...",
   "blank": "空白",
   "blank-to-edit": "請選擇要編輯的項目",
   "brief": "摘要",
   "brief-d": "摘要描述",
   "brief-i": "摘要說明",
   "buy": "購買",
   "buy-now": "立即購買",
   "cancel": "取消",
   "cancel-all": "取消選中",
   "candidate": "備選項",
   "captcha": "驗證碼",
   "captcha-chagne": "換一張",
   "captcha-tip": "請輸入圖中的驗證碼",
   "chart": "圖表",
   "chart-bar": "柱狀圖",
   "chart-line": "折線圖",
   "chart-pie": "餅狀圖",
   "chart-rank": "條狀圖",
   "checked": "已選中",
   "choose": "選擇",
   "choose-file": "選擇文件",
   "choose-obj": "選擇對象",
   "clean": "清理",
   "clear": "清除",
   "close": "關閉",
   "confirm": "確認",
   "console": "控制檯",
   "content": "內容",
   "continue": "繼續",
   "create": "新建",
   "create-now": "立即創建",
   "creating": "正在創建...",
   "date": "日期",
   "db-col-type-AUTO": "自動",
   "db-col-type-BINARY": "二進制",
   "db-col-type-BOOLEAN": "布爾",
   "db-col-type-CHAR": "定長字符",
   "db-col-type-FLOAT": "浮點數",
   "db-col-type-INT": "整數",
   "db-col-type-TEXT": "長文本",
   "db-col-type-TIMESTAMP": "時間戳",
   "db-col-type-VARCHAR": "變長字符",
   "debug": "調試",
   "default": "默認",
   "del": "刪除",
   "del-checked": "刪除選中",
   "del-hard": "選中項目即將被直接刪除，此操作不可撤銷，您確定要繼續嗎？",
   "del-ing": "正在刪除...",
   "del-none": "請從下面列表中選擇至少一個對象進行刪除",
   "desktop": "桌面",
   "detail": "詳情",
   "dis-name": "顯示名",
   "disable": "禁用",
   "disabled": "禁用的",
   "doing": "正在執行...",
   "download": "下載",
   "download-to-local": "下載到本地",
   "drop-file-here-to-upload": "拖拽文件至此以便上傳",
   "drop-here": "拖拽文件至此",
   "dt-in": "在${val}內",
   "dt-u-day": "天",
   "dt-u-hour": "小時",
   "dt-u-min": "分鐘",
   "dt-u-month": "月",
   "dt-u-ms": "好眠",
   "dt-u-sec": "秒",
   "dt-u-week": "周",
   "dt-u-year": "年",
   "e-auth-account-noexists": "賬戶不存在",
   "e-auth-home-forbidden": "賬戶不具備進入主目錄的權限",
   "e-auth-login-NoPhoneOrEmail": "錯誤的手機號或郵箱地址",
   "e-auth-login-NoSaltedPasswd": "未設置合法的密碼",
   "e-auth-login-invalid-passwd": "賬戶密碼未通過校驗",
   "e-io-obj-BlankName": "對象名稱不能爲空",
   "e-io-obj-InvalidName": "對象名稱非法",
   "e-io-obj-exists": "但是對象已然存在",
   "e-io-obj-noexists": "對象其實並不存在",
   "e-io-obj-noexistsf": "對象[${nm}]其實並不存在",
   "edit": "編輯",
   "edit-com": "編輯控件",
   "email": "郵箱",
   "emoji": "表情符合",
   "empty": "空",
   "empty-data": "無數據",
   "enable": "啓用",
   "enabled": "啓用的",
   "error": "錯誤",
   "export-data": "導出數據...",
   "fail": "失敗",
   "false": "否",
   "favorites": "收藏",
   "female": "女",
   "filter": "過濾",
   "find": "查找",
   "find-data": "查找數據",
   "gender": "性別",
   "geo-alti": "海拔",
   "geo-azimuth": "方向角",
   "geo-gcj02-lat": "火星緯度",
   "geo-gcj02-lng": "火星經度",
   "geo-hash": "地理哈希",
   "geo-lat": "緯度",
   "geo-lng": "經度",
   "geo-sate-cno": "可見衛星數",
   "geo-sate-cnt": "使用衛星數",
   "global-settings": "全局設置",
   "hierarchy": "層級",
   "history-record": "歷史記錄",
   "home": "主目錄",
   "home-index": "首頁",
   "i-known": "我知道了",
   "icon": "圖標",
   "icon-code-tip": "請輸入圖標代碼，如 zmdi-case",
   "import-data": "導入數據...",
   "index": "索引",
   "info": "信息",
   "init": "初始化",
   "init-data": "初始化數據",
   "input": "輸入",
   "input-tags": "輸入標籤",
   "java-type-Boolean": "布爾",
   "java-type-Double": "雙精度浮點",
   "java-type-Float": "浮點",
   "java-type-Integer": "整數",
   "java-type-JSON": "JSON對象",
   "java-type-List": "對象列表",
   "java-type-Long": "長整數",
   "java-type-Object": "對象",
   "java-type-SArray": "字符串數組",
   "java-type-String": "字符串",
   "json-Array": "數組",
   "json-Boolean": "布爾",
   "json-Float": "小數",
   "json-Integer": "整數",
   "json-Nil": "空值",
   "json-Number": "數字",
   "json-Object": "對象",
   "json-String": "字符串",
   "json-new-key": "請輸入一個新鍵名",
   "label": "標籤",
   "lang": "語言",
   "lang-en-us": "英",
   "lang-zh-cn": "簡",
   "lang-zh-hk": "繁",
   "lang-zh-tw": "繁",
   "lat": "緯度",
   "lbs-place-add": "添加地點",
   "lbs-ro-rnb-k-first": "起始數字",
   "lbs-ro-rnb-k-type": "顯示類型",
   "lbs-ro-rnb-k-type-alpha": "小寫字母",
   "lbs-ro-rnb-k-type-capital": "大寫字母",
   "lbs-ro-rnb-k-type-number": "數字",
   "lbs-ro-rnb-title": "自動設置線路標籤",
   "link": "鏈接",
   "link-href": "鏈接目標",
   "link-text": "鏈接文字",
   "list": "列表",
   "lng": "經度",
   "loading": "加載中...",
   "location": "位置",
   "login": "登錄",
   "login-name": "登錄名",
   "logout": "退出",
   "logout-ing": "正在註銷...",
   "mail-as-html": "HTML郵件",
   "mail-bcc": "密送",
   "mail-cc": "抄送",
   "mail-charset": "郵件字符編碼",
   "mail-notify": "郵件通知",
   "mail-r-addr": "郵件地址",
   "mail-r-name": "名稱",
   "mail-scene": "郵件場景",
   "mail-scene-ctmpl": "內容模板",
   "mail-scene-flt-tip": "請輸入場景名稱查詢",
   "mail-scene-meta": "郵件場景屬性",
   "mail-scene-nil-detail": "請選擇一個郵件場景查看詳情",
   "mail-scene-nm": "場景名稱",
   "mail-scene-nm-tip": "請用半角英文數字或者下劃線組合，並保證唯一",
   "mail-scene-var-trans": "轉換腳本",
   "mail-scene-var-trans-placeholder": "譬如 jsc /path/to/script.js -vars",
   "mail-scene-var-trans-tip": "輸入是原始變量的JSON，輸出是一個JSON變量集合",
   "mail-setup": "郵件設置",
   "mail-subject": "郵件標題",
   "mail-to": "收信人",
   "male": "男",
   "map-hybrid": "俯瞰地圖",
   "map-roadmap": "道路地圖",
   "map-satellite": "衛星照片",
   "map-terrain": "地形地圖",
   "map-type": "地圖類型",
   "me": "我",
   "media": "媒體",
   "meta": "元數據",
   "mine": "我的",
   "modal": "模式",
   "modify": "修改",
   "more": "更多",
   "move": "移動",
   "move-down": "下移",
   "move-up": "上移",
   "msg": "消息",
   "name": "名稱",
   "new-item": "新項目",
   "newsfeed": "消息流",
   "next": "下一步",
   "nil": "無",
   "nil-content": "無內容",
   "nil-detail": "請選擇一項查看詳情",
   "nil-item": "請先選擇一項",
   "nil-obj": "請選擇一個對象",
   "no": "否",
   "no-saved": "您有未保存的數據",
   "no-selected": "未選擇",
   "no-title": "無標題",
   "obj": "對象",
   "off": "關",
   "ok": "確定",
   "on": "開",
   "open": "打開",
   "open-newtab": "在新標籤打開",
   "others": "其他",
   "paging-change-pgsz": "當前每頁有${pgsz}條記錄，您想修改爲：",
   "paging-change-pgsz-invalid": "頁大小必須是整數數字，而且必須大於0，可您... -_-!",
   "paging-change-pn": "當前第${pn}頁，您想跳轉到：（請輸入 1 至 ${pgc} 之間的數字）",
   "paging-change-pn-invalid": "頁碼必須是整數數字，而且必須爲 1 至 ${pgc} 之間的數字",
   "paging-first": "首頁",
   "paging-last": "尾頁",
   "paging-next": "後一頁",
   "paging-prev": "前一頁",
   "paging-sum": "共${pgc}頁${sum}條記錄，當前${count}/${pgsz}",
   "passwd": "密碼",
   "passwd-reset": "重置密碼",
   "path": "路徑",
   "phone": "手機",
   "phone-nb": "手機號",
   "post": "提交",
   "prev": "上一步",
   "price": "價格",
   "profile": "資料",
   "profile-edit": "編輯資料",
   "prompt": "詢問",
   "properties": "屬性",
   "publish": "發佈",
   "publishing": "正在發佈...",
   "refresh": "刷新",
   "refresh-hard": "硬性刷新",
   "refresh-hard-clear": "清空緩存並硬性刷新",
   "reload": "重新加載",
   "reloading": "重新加載數據...",
   "remove": "移除",
   "removing": "正在移除...",
   "rename": "重命名...",
   "renaming": "正在重命名...",
   "reset": "重置",
   "reset-change": "撤銷修改",
   "reset-data": "重置數據",
   "restore": "恢復",
   "revoke": "撤銷",
   "revoke-change": "撤銷修改",
   "run": "運行",
   "run-finished": "腳本執行結束",
   "run-welcome": "正在運行腳本，請稍後 ...",
   "save": "保存",
   "save-change": "保存修改",
   "save-done": "保存成功",
   "save-now": "立即保存",
   "saving": "正在保存...",
   "score": "評分",
   "score-count": "打分人數",
   "select": "選擇",
   "select-all": "全部選中",
   "send": "發送",
   "settings": "設置",
   "slogan": "標語",
   "sms-scene-nm": "場景名稱",
   "sms-scene-nm-tip": "請用半角英文數字或者下劃線組合，並保證唯一",
   "sms-setup": "短信配置",
   "sort": "排序",
   "sort-tip-asc": "越小越靠前",
   "sort-tip-desc": "越大越靠前",
   "sort-val": "排序值",
   "source-code": "源代碼",
   "stat-date-at": "統計日期",
   "stat-date-at-oor": "這個日期的統計數據還未就緒",
   "stat-date-span": "時間跨度",
   "stop": "停止",
   "structure": "結構",
   "success": "成功",
   "sys-settings": "系統設置",
   "tablet": "平板",
   "terminal": "終端",
   "terminate": "終止",
   "text": "文字",
   "timestamp": "時間戳",
   "title": "標題",
   "total": "總共",
   "total-count": "共 ${nb?0} ${unit?項}",
   "total-items": "總共${val}項",
   "trace": "跟蹤",
   "track": "消息",
   "true": "是",
   "type": "類型",
   "under-construction": "正在施工中",
   "unknown": "未知",
   "unzip": "解壓縮",
   "unzipping": "正在解壓縮...",
   "upload": "上傳",
   "upload-done": "文件上傳已完成",
   "upload-file": "上傳文件...",
   "upload-nofinished": "文件上傳還沒有完成",
   "uploading": "正在上傳",
   "user-avator": "用戶頭像",
   "value": "值",
   "video": "視頻",
   "videos": "視頻",
   "view": "查看",
   "view-resource": "查看源代碼",
   "vu-mv": "毫伏",
   "vu-v": "伏特",
   "warn": "警告",
   "website": "網站",
   "www-admin-login": "後臺登錄界面",
   "www-home": "網站目錄",
   "www-title": "前端網站",
   "yes": "是",
   "zip": "壓縮",
   "zipping": "正在壓縮..."
});
//========================================
// JOIN <_wn.i18n.json> ti/i18n/zh-hk/_wn.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-hk/_wn.i18n.json", {
   "wn-admin-check-obj-thumb": "檢查圖像縮略圖...",
   "wn-admin-tools": "管理工具",
   "wn-ctt-css-text": "CSS樣式文件",
   "wn-ctt-folder-text": "文件夾",
   "wn-ctt-html-text": "HTML文本",
   "wn-ctt-js-text": "JS腳本",
   "wn-ctt-json-text": "JSON文本",
   "wn-ctt-less-text": "LESS文本",
   "wn-ctt-md-text": "Markdown文本",
   "wn-ctt-mjs-text": "模塊化JS腳本",
   "wn-ctt-sass-text": "SASS文本",
   "wn-ctt-thing_set-text": "數據集合",
   "wn-ctt-txt-text": "純文本",
   "wn-ctt-wnml-text": "WNML源文件",
   "wn-ctt-xml-text": "XML文本",
   "wn-edit-com-nil": "默認爲標籤控件",
   "wn-en-his-ct": "創建時間",
   "wn-en-his-flt-tip": "請輸入用戶ID或者名稱過濾",
   "wn-en-his-mor": "操作細節",
   "wn-en-his-opt": "操作",
   "wn-en-his-tar": "目標",
   "wn-en-his-tid": "目標ID",
   "wn-en-his-tnm": "目標名",
   "wn-en-his-ttp": "目標類型",
   "wn-en-his-uid": "用戶ID",
   "wn-en-his-unm": "用戶名",
   "wn-en-his-usr": "用戶",
   "wn-en-his-utp": "用戶類型",
   "wn-fsc-mail-scene-new": "新建一個郵件場景",
   "wn-fsc-mail-tmpl-new": "請輸入新郵件模板的名稱(要唯一，譬如 signup)",
   "wn-invalid-mimes": "不支持的文件內容類型 \"${current}\"，僅能支持 \"${supports}\"",
   "wn-invalid-types": "不支持的文件擴展名 \"${current}\"，僅能支持 \"${supports}\"",
   "wn-key-c": "創建者",
   "wn-key-ct": "創建時間",
   "wn-key-d0": "D0",
   "wn-key-d1": "D1",
   "wn-key-data": "數據",
   "wn-key-duration": "時長",
   "wn-key-expi": "過期時間",
   "wn-key-g": "主組",
   "wn-key-grp-advance": "高級",
   "wn-key-grp-basic": "基本",
   "wn-key-grp-customized": "自定義",
   "wn-key-grp-more": "更多",
   "wn-key-grp-others": "其他",
   "wn-key-grp-privilege": "權限",
   "wn-key-grp-thumb": "縮略圖",
   "wn-key-grp-timestamp": "時間戳",
   "wn-key-height": "高",
   "wn-key-icon": "圖標",
   "wn-key-id": "ID",
   "wn-key-len": "大小",
   "wn-key-lm": "修改",
   "wn-key-m": "修改者",
   "wn-key-md": "基本權限",
   "wn-key-mime": "內容類型",
   "wn-key-nm": "對象名",
   "wn-key-ph": "路徑",
   "wn-key-pid": "父對象",
   "wn-key-pvg": "定製權限",
   "wn-key-race": "族類",
   "wn-key-sha1": "內容簽名",
   "wn-key-thumb": "縮略圖",
   "wn-key-title": "標題",
   "wn-key-tp": "類型",
   "wn-key-width": "寬",
   "wn-obj-nosaved": "您有未保存的對象",
   "wn-oc-auto-type": "全部類型",
   "wn-oc-free": "請輸入對象完整名稱，包括擴展名，譬如 `myfile.xml`",
   "wn-oc-tip": "新對象名稱",
   "wn-race-DIR": "目錄",
   "wn-race-FILE": "文件",
   "wn-th-acc-pwd-choose-none": "請選擇要重置密碼的賬號（可多選）",
   "wn-th-acc-pwd-done": "已經爲${n}名用戶重置了密碼",
   "wn-th-acc-pwd-invalid": "密碼中不得包含單雙引號星號等非法字符",
   "wn-th-acc-pwd-reset-tip": "將密碼重置爲",
   "wn-th-acc-pwd-too-short": "您輸入的密碼過短，不能少於6位，最好爲數字字母以及特殊字符的組合",
   "wn-th-recount-media": "重新計算當前文件數量",
   "wn-th-recount-media-done": "當前文件數量: ${n}"
});
//////////////////////////////////////////////////
// The End
})();