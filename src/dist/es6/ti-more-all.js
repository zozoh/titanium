// Pack At: 2023-06-29 10:26:32
// ============================================================
// OUTPUT TARGET IMPORTS
// ============================================================
(function(){
window.TI_PACK_EXPORTS = {};
// ============================================================
// LV1 : imports
// ============================================================
// ============================================================
// LV2 : imports - (0)
// ============================================================
// ============================================================
// EXPORT 'm-wn-obj-search.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/obj/m-wn-obj-search.mjs'] = (function(){
////////////////////////////////////////////////
const _M = {
  //----------------------------------------
  //
  // Selection
  //
  //----------------------------------------
  async selectMeta({ state, commit, dispatch, getters }, {
    currentId = null, checkedIds = {}
  } = {}) {
    state.LOG("selectMeta", currentId, checkedIds)
    // If current is nil but we got the chekced 
    // just pick one as the meta
    if (!currentId && !_.isEmpty(checkedIds)) {
      currentId = _.first(Ti.Util.truthyKeys(checkedIds))
    }
    else if (currentId && _.isEmpty(checkedIds)) {
      checkedIds = [currentId]
    }
    commit("setCurrentId", currentId)
    commit("setCheckedIds", checkedIds)
    // find <meta> by currentId from <list>
    commit("setCurrentMeta")
    // ? Load current content
    if (getters.contentLoadPath) {
      await dispatch("loadContent")
    }
  },
  //----------------------------------------
  //
  // Filter / Sorter / Pager
  //
  //----------------------------------------
  async applyFilter({ commit, getters, dispatch }, filter) {
    //console.log("applyFilter", filter)
    commit("setFilter", filter)
    // If pager enabled, should auto jump to first page
    if (getters.isPagerEnabled) {
      let pnKey = getters.isLongPager ? "pageNumber" : "pn"
      commit("assignPager", { [pnKey]: 1 })
    }
    await dispatch("queryList")
  },
  //----------------------------------------
  async applySorter({ commit, dispatch }, sorter) {
    //console.log("applySorter", sorter)
    commit("setSorter", sorter)
    await dispatch("queryList")
  },
  //----------------------------------------
  async applyPager({ commit, dispatch }, pager) {
    //console.log("applyPager", pager)
    commit("assignPager", pager)
    await dispatch("queryList")
  },
  //----------------------------------------
  //
  // Query
  //
  //----------------------------------------
  async queryList({ state, commit, getters, rootState }) {
    let {
      dirId,
      filter,
      fixedMatch,
      sorter,
      objKeys
    } = state
    // Query
    let input = JSON.stringify(_.assign({}, filter, fixedMatch))
    let exposeHidden = _.get(rootState, "viewport.exposeHidden")

    // Command
    let cmds = [`o 'id:${dirId}' @query`]

    if(exposeHidden){
      cmds.push('-hidden')
    }

    // Eval Pager
    if (getters.isPagerEnabled) {
      let limit = getters.searchPageSize * 1
      let skip = getters.searchPageSize * (getters.searchPageNumber - 1)
      cmds.push(`-pager -limit ${limit} -skip ${skip}`)
    }


    // Sorter
    if (!_.isEmpty(sorter)) {
      cmds.push(`-sort '${JSON.stringify(sorter)}'`)
    }

    // Show Thing Keys
    if (objKeys) {
      cmds.push(`@json '${objKeys}' -cqnl`)
    }
    // Output as json
    else {
      cmds.push('@json -cqnl')
    }

    // Process Query
    let cmdText = cmds.join(" ")
    commit("setStatus", { reloading: true })
    let reo = await Wn.Sys.exec2(cmdText, { input, as: "json" })

    // Update pager
    if (getters.isPagerEnabled) {
      commit("setPager", reo.pager)
    }
    commit("setList", reo.list)
    commit("setCurrentMeta")

    commit("setStatus", { reloading: false })
  },
  //--------------------------------------------
}
return _M;
;
})()
// ============================================================
// EXPORT 'net-fb-albums-gui.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/net/facebook/albums/net-fb-albums-gui.mjs'] = (function(){
/////////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////////
  computed: {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //---------------------------------------------------
    GuiActionStatus() {
      return {
        hasAlbum: this.hasCurrentAlbum,
        albumLoading: this.isLoadingAlbums,
        photoReloading: this.isLoadingPhotos
      }
    },
    //---------------------------------------------------
    GuiLayout() {
      return {
        type: "cols",
        border: true,
        blocks: [{
          type: "rows",
          size: "50%",
          border: true,
          blocks: [{
            name: "filter",
            size: 52,
            style: {
              padding: ".06rem"
            },
            body: "filter"
          }, {
            name: "albums",
            body: "albums"
          }, {
            name: "infos",
            size: 52,
            style: {
              padding: ".06rem"
            },
            body: "infos"
          }]
        }, {
          icon: "fab-facebook-square",
          title: this.CurrentAlbumTitle,
          actions: [{
            name: "photoReloading",
            icon: "zmdi-refresh",
            text: "i18n:refresh",
            altDisplay: {
              "icon": "zmdi-refresh zmdi-hc-spin"
            },
            enabled: "hasAlbum",
            action: async () => {
              await this.reloadAllPhotos(true)
            }
          }],
          name: "photos",
          body: "photos"
        }]
      }
    },
    //---------------------------------------------------
    GuiSchema() {
      return {
        filter: {
          comType: "TiInput",
          comConf: {
            placeholder: "Enter the album name to filter",
            value: this.myFilterKeyword
          }
        },
        infos: {
          comType: "TiLabel",
          comConf: {
            className: "align-right as-tip",
            value: this.FilteredAlbumSummary
          }
        },
        albums: {
          comType: "TiWall",
          comConf: {
            data: this.FilteredAlbumList,
            idBy: "id",
            multi: false,
            autoLoadMore: true,
            display: {
              key: "..",
              comType: "ti-obj-thumb",
              comConf: {
                "id": "=item.id",
                "title": "=item.name",
                "preview": "=item.preview",
                "badges": {
                  "NW": "fab-facebook-square",
                  "SE": {
                    type: "text",
                    className: "bchc-badge as-label",
                    value: "=item.count"
                  }
                }
              }
            },
            showLoadMore: this.myAlbumCursorAfter ? true : false,
            moreLoading: this.myAlbumMoreLoading
          }
        },
        photos: {
          comType: "WebShelfWall",
          comConf: {
            className: "ti-fill-parent flex-none item-space-sm",
            style: {
              "overflow": "auto",
              "padding": ".1rem"
            },
            data: this.AlbumPhotoData,
            itemWidth: "2rem",
            itemHeight: "1.5rem",
            comType: "WebMediaImage",
            comConf: {
              text: "=name",
              src: "=thumb_src",
              className: [
                "text-in", "at-bottom", "ts-shadow", "fs-sm",
                "of-con-visiable",
                "hover-to-up-img is-fit-auto"],
              imageStyle: {
                "border": "3px solid #EEE",
                "border-radius": "6px"
              }
            },
            showLoadMore: this.myPhotoCursorAfter ? true : false,
            moreLoading: this.myPhotoMoreLoading
          }
        }
      }
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods: {
    //---------------------------------------------------
    
    //---------------------------------------------------
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'form-field-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/form/com/form-field/form-field-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "type": {
    type: String,
    default: "String"
  },
  "required": {
    type: Boolean,
    default: false
  },
  "disabled": {
    type: Boolean,
    default: false
  },
  "uniqKey": {
    type: String,
    default: null
  },
  "name": {
    type: [String, Array],
    default: null
  },
  "icon": {
    type: String,
    default: null
  },
  "message": {
    type: String,
    default: null
  },
  "title": {
    type: String,
    default: null
  },
  "tip": {
    type: String,
    default: null
  },
  "fieldWidth": {
    type: [String, Number],
    default: undefined
  },
  "checkEquals": {
    type: Boolean,
    default: true
  },
  "undefinedAs": {
    default: undefined
  },
  "nullAs": {
    default: undefined
  },
  "nanAs": {
    type: Number,
    default: undefined
  },
  "emptyAs": {
    default: undefined
  },
  "defaultAs": {
    default: undefined
  },
  "display": {
    type: [String, Object, Boolean],
    default: false
  },
  "autoValue": {
    type: String,
    default: "value"
  },
  "serializer": {
    type: Function,
    default: _.identity
  },
  "transformer": {
    type: Function,
    default: _.identity
  },
  "data": {
    type: Object,
    default: null
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "fieldStatus": {
    type: Object,
    default: () => ({})
  },
  "comType": {
    type: String,
    default: "ti-label"
  },
  "comConf": {
    type: Object,
    default: () => ({})
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "screenMode": {
    type: String,
    default: "auto",
    validator: (val) => /^(auto|desktop|tablet|phone)$/.test(val)
  },
  "statusIcons": {
    type: Object,
    default: () => ({
      spinning: 'fas-spinner fa-spin',
      error: 'zmdi-alert-polygon',
      warn: 'zmdi-alert-triangle',
      ok: 'zmdi-check-circle',
    })
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width": {
    type: [String, Number],
    default: "stretch"
  },
  "height": {
    type: [String, Number],
    default: undefined
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'preview.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/preview.mjs'] = (function(){
function showPreivewDialog(html) {
  Ti.App.Open({
    title : "i18n:preview",
    position : "top",
    width  : "95%",
    height : "95%",
    maxWidth : "10rem",
    result : html,
    textOk : null,
    textCancel : null,
    comType : "WebTextArticle",
    comConf : {
      type  : "html",
      theme : "nice"
    },
    components : ["@com:web/text/article"]
  })
}

const __TI_MOD_EXPORT_VAR_NM = {
  name : "ti-preview",
  setup : function(editor, url){
    // Register toolbar actions
    editor.ui.registry.addButton("TiPreview", {
      text: Ti.I18n.text("i18n:preview"),
      onAction(menuBtn) {
        let html = editor.getContent();
        showPreivewDialog(html)
      },
    })

    return {
      getMetadata: function () {
        return  {
          name: 'Ti Preview plugin',
          url: 'http://site0.cn'
        };
      }
    };
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'net-fb-albums-prop.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/net/facebook/albums/net-fb-albums-prop.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "oDir": {
    type: Object
  },
  "domain": {
    type: String
  },
  "scope": {
    type: String
  },
  "userId": {
    type: String
  },
  "userName": {
    type: String
  },
  // "userAlbumIds" : {
  //   type : Array,
  //   default: ()=>[]
  // },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "apiVersion": {
    type: String,
    default: "v10.0"
  },
  "autoLogAppEvents": {
    type: Boolean,
    default: true
  },
  "xfbml": {
    type: Boolean,
    default: true
  },
  "notifyName": {
    type: String
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "thumbMinHeight": {
    type: Number,
    default: 320
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-combo-sorter-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/sorter/ti-combo-sorter-props.mjs'] = (function(){
const _M = {
  "placeholder" : {
    type : String,
    default : "i18n:no-title"
  },
  "options" : {
    type : Array,
    default : ()=>[]
  },
  /*
  {
    "CreateTime": 1  // 1:ASC, -1:DESC
  }
  */
  "value" : {
    type : Object,
    default : null
  },
  "width": {
    type : [Number, String],
    default : undefined
  },
  "height": {
    type : [Number, String],
    default : undefined
  },
  "dropWidth" : {
    type : [Number, String],
    default : "box"
  },
  "dropHeight" : {
    type : [Number, String],
    default : null
  },
  "sortIcons" : {
    type : Object,
    default : ()=>({
      asc  : "im-arrow-up",
      desc : "im-arrow-down"
    })
  },
  "suffixIcon" : {
    type : String,
    default : "im-menu-list"
  },
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-slide-stack.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/slide/stack/ti-slide-stack.mjs'] = (function(){
/////////////////////////////////////////////////////////
const DFT_BG = ["#08F", "#F80", "#080", "#AA0", "#0AA", "#A0A"]
/////////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////////
  data: () => ({
    myRect: null,
    myValue: {}
  }),
  ///////////////////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "value": {
      type: [Number, Object, Array],
      default: undefined
    },
    "valueType": {
      type: String,
      default: "auto",
      validator: v => /^(auto|Number|Array|Object)$/.test(v)
    },
    "precision": {
      type: Number,
      default: 2
    },
    "stacks": {
      type: [Array, Object],
      default: undefined
    },
    "capacity": {
      type: Number,
      default: undefined
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    // 0 : notify when dragging done
    // > 0 : notify during dragging with throttle
    "notifyFrequency": {
      type: Number,
      default: 0
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "mode": {
      type: String,
      default: "H",
      validator: v => /^(H|V)$/.test(v)
    },
    "format": {
      type: [Function, String],
      default: undefined
    },
    //-----------------------------------
    // Measure
    //-----------------------------------
    "inputWidth": {
      type: [String, Number]
    }
  },
  ///////////////////////////////////////////////////////
  computed: {
    //---------------------------------------------------
    TopClass() {
      let multi = this.StackItems.length > 1
      return this.getTopClass({
        "is-stack-single": !multi,
        "is-stack-multi": multi
      }, `is-mode-${this.mode}`)
    },
    //---------------------------------------------------
    LegendInputStyle() {
      if (this.inputWidth) {
        return Ti.Css.toStyle({
          width: this.inputWidth
        })
      }
    },
    //---------------------------------------------------
    TheValueType() {
      if ("auto" == this.valueType) {
        let N = this.StackItems.length
        if (N <= 1) {
          return "Number"
        }
        if (this.StackItems[0].name) {
          return "Object"
        }
        return "Array"
      }
      return this.valueType
    },
    //---------------------------------------------------
    StackItems() {
      let list = _.concat(this.stacks)
      let items = []
      _.forEach(list, (li, index) => {
        if (!li)
          return
        let name = li.name || `V${index}`
        let min = li.min || 0
        let max = li.max || 100
        let unit = li.unit || 1   // the value unit
        let dft = Ti.Util.fallback(li.dft, max)
        let background = li.background
        if (!background) {
          background = Ti.Util.nth(DFT_BG, index, "#000")
        }
        items.push({
          title: li.title,
          index, name, min, max, dft, unit,
          color: li.color || "#FFF",
          background
        })
      })
      return items;
    },
    //---------------------------------------------------
    StackMap() {
      let re = {}
      _.forEach(this.StackItems, (it) => {
        re[it.name] = it
      })
      return re
    },
    //---------------------------------------------------
    LogicMax() {
      if (this.capacity > 0) {
        return this.capacity
      }
      let re = 0
      _.forEach(this.StackItems, ({ max }) => {
        re += max
      })
      return re;
    },
    //---------------------------------------------------
    DisplaySize() {
      if ("V" == this.mode) {
        return _.get(this.myRect, "height")
      }
      return _.get(this.myRect, "width")
    },
    //---------------------------------------------------
    DisplayStackItems() {
      let list = []
      let sizeKey = "V" == this.mode ? "height" : "width"
      _.forEach(this.StackItems, it => {
        let {
          title, index, name, color, background, min, max
        } = it
        let val = _.get(this.myValue, name)
        let valueText = this.FormatValue(val)
        let percent = val / this.LogicMax
        let li = {
          title, index, name, min, max,
          value: val,
          valueText,
          percent,
          barStyle: {
            [sizeKey]: `${percent * 100}%`,
            background, color
          },
          legendNameStyle: {
            background, color
          }
        }
        list.push(li)
      })
      return list
    },
    //---------------------------------------------------
    FormatValue() {
      if (_.isString(this.format)) {
        if (this.format.startsWith("=>")) {
          let str = this.format.substring(2).trim()
          return Ti.Util.genInvoking(str, { partial: "right" })
        }
        return (val) => {
          return Ti.S.renderBy(this.format, { val })
        }
      }
      if (_.isFunction(this.format)) {
        return this.format;
      }
      return v => v
    },
    //---------------------------------------------------
    ThrottleSetVal() {
      if (this.notifyFrequency > 0) {
        return _.throttle(scale => {
          this.evalMyVal(scale)
        }, this.notifyFrequency)
      }
    },
    //---------------------------------------------------
    Draggable() {
      return {
        trigger: ".as-hdl",
        viewport: ".as-con",
        prepare: ({ scaleX }) => {
          let scale = _.clamp(scaleX, 0, 1)
          let value = this.calValue(scale)
          this.$notify("drag:begin", { value, scale })
        },
        dragging: ({ scaleX }) => {
          this.evalMyHdlLeft(scaleX)
          if (this.ThrottleSetVal) {
            this.ThrottleSetVal(this.myHdlLeft)
          }
        },
        done: ({ scaleX }) => {
          this.evalMyHdlLeft(scaleX)
          this.evalMyVal(scaleX)
          this.$notify("drag:end", {
            value: this.myValue,
            scale: this.myHdlLeft
          })
        }
      }
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods: {
    //---------------------------------------------------
    OnResize() {
      this.myRect = Ti.Rects.createBy(this.$refs.main)
    },
    //---------------------------------------------------
    OnItemChange(name, $event) {
      let v = _.trim($event.srcElement.value)
      let si = this.StackMap[name]
      //console.log(si)
      let v0 = v * 1
      if (isNaN(v0)) {
        return
      }
      v0 = Ti.Num.padTo(v0, si.unit)
      let v1 = Ti.Num.precise(v0, this.precision)
      let v2 = _.clamp(v1, si.min, si.max)
      let new0 = _.cloneDeep(this.myValue)
      new0[name] = v2
      let new1 = this.evalMyVal(new0)
      let new2 = this.padMyValToCapacity(new1, si.index)
      this.myValue = new2
      this.notifyChange()
    },
    //---------------------------------------------------
    // If capacity defined, auto pad the value to fit capcity
    padMyValToCapacity(val, fixIndex) {
      // Guard
      if (!(this.capacity > 0)) {
        return val
      }

      // 1. Get value sum
      let sum = 0;
      _.forEach(val, v => sum += v)

      // 2. Get remain
      let remain = this.capacity - sum

      if (remain == 0) {
        return val
      }

      // 3. Prepare the stack items
      let offset = Ti.Util.fallback(fixIndex, 0)
      let items = []
      let N = this.StackItems.length
      for (let i = 0; i < N; i++) {
        let itI = Ti.Num.scrollIndex(i + offset, N);
        if (itI != fixIndex) {
          let it = this.StackItems[itI]
          items.push(it)
        }
      }

      // 4. Assign remain
      let rev = _.cloneDeep(val)
      for (let it of items) {
        let { name, min, max, dft } = it
        let v = Ti.Util.fallback(val[name], dft)
        let v1 = v + remain
        let v2 = _.clamp(v1, min, max)
        rev[name] = v2
        let vd = v2 - v
        remain -= vd
        if (!remain) {
          break
        }
      }

      return rev
    },
    //---------------------------------------------------
    // make val to {V0: v ...}
    evalMyVal(val) {
      //console.log("evalMyVal", val)
      // Integer
      if (_.isNumber(val)) {
        val = [val]
      }
      let re = {};
      // Assign default value
      _.forEach(this.StackItems, ({ name, dft }) => {
        re[name] = dft
      })
      // Array
      if (_.isArray(val)) {
        let n = Math.min(val.length, this.StackItems.length)
        for (let i = 0; i < n; i++) {
          let si = this.StackItems[i]
          let v = val[i]
          if (v >= 0) {
            let k = si.name
            re[k] = Ti.Num.precise(v, this.precision)
          }
        }
      }
      // Must by Plain Object
      else {
        _.forEach(val, (v, k) => {
          let si = this.StackMap[k]
          if (si) {
            re[k] = Ti.Num.precise(v, this.precision)
          }
        })
      }
      // Done
      return re
    },
    //---------------------------------------------------
    tryEvalMyVal(newVal, oldVal) {
      if (Ti.Util.isNil(oldVal) || !_.isEqual(newVal, oldVal)) {
        this.myValue = this.evalMyVal(this.value)
      }
    },
    //---------------------------------------------------
    notifyChange() {
      let fn = ({
        "Number": () => {
          let si = _.first(this.StackItems)
          return Ti.Util.fallback(this.myValue[si.name], si.dft)
        },
        "Array": () => {
          let vs = []
          _.forEach(this.StackItems, ({ name, dft }) => {
            let v = Ti.Util.fallback(this.myValue[name], dft)
            vs.push(v)
          })
          return vs
        },
        "Object": () => {
          let re = {}
          _.forEach(this.StackItems, ({ name, dft }) => {
            let v = Ti.Util.fallback(this.myValue[name], dft)
            re[name] = v
          })
          return re;
        }
      })[this.TheValueType]
      let v = fn()
      this.$notify("change", v)
    }
    //---------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    "value": {
      handler: "tryEvalMyVal",
      immediate: true
    },
    "stacks": {
      handler: "tryEvalMyVal",
      immediate: true
    }
  },
  ///////////////////////////////////////////////////////
  mounted: function () {
    Ti.Viewport.watch(this, {
      resize: () => {
        this.OnResize()
      }
    })
    this.OnResize()
  },
  ///////////////////////////////////////////////////////
  beforeDestroy: function () {
    Ti.Viewport.unwatch(this)
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-files.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/files/wn-files.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data: () => ({
    isLoadingGui: false,
    detailGuiSetups: {}
  }),
  ////////////////////////////////////////////////////
  props: {
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "guiPathDefault": {
      type: String
    },
    "guiPath": {
      type: String
    },
    //-----------------------------------
    // GUI
    //-----------------------------------
    "filterConf": {
      type: Object,
      default: () => ({})
    },
    "schemaDetail": {
      type: Object,
      default: () => ({
        comType: "TiTextRaw",
        comConf: {
          value: "=content"
        }
      })
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    GuiLayout() {
      return {
        "type": "cols",
        "border": true,
        "blocks": [
          {
            "name": "search",
            "size": "38%",
            "type": "rows",
            "border": true,
            "blocks": [
              {
                "name": "filter",
                "size": 43,
                "body": "filter"
              },
              {
                "name": "list",
                "size": "stretch",
                "overflow": "cover",
                "body": "list"
              },
              {
                "name": "pager",
                "size": "auto",
                "body": "pager"
              }
            ]
          },
          {
            "name": "detail",
            "size": "stretch",
            "body": "detail"
          }
        ]
      };
    },
    //------------------------------------------------
    GuiSchemaFilter() {
      return {
        comType: "TiFilterbar",
        comConf: _.assign(
          {
            className: "is-nowrap",
            placeholder: "ID/标题",
            filter: "=filter",
            sorter: "=sorter",
            dialog: {
              "icon": "fas-search",
              "title": "i18n:search-adv",
              "position": "top",
              "width": "6.4rem",
              "height": "90%"
            },
            majors: [],
            matchKeywords: [
              {
                "test": "^[\\d\\w:]{26,}$",
                "key": "id"
              },
              {
                "test": "^[a-zA-Z0-9._-]+$",
                "key": "nm",
                "mode": ":=~"
              },
              {
                "key": "title",
                "mode": "~~"
              }
            ],
            filterTags: {
              "id": ":->ID【${val}】",
              "nm": ":=val",
              "title": ":=val"
            },
            sorterConf: {
              dropWidth: "1.6rem",
              options: [
                { "value": "nm", "text": "i18n:wn-key-nm" },
                { "value": "title", "text": "i18n:wn-key-title" },
                { "value": "sort", "text": "i18n:sort" },
                { "value": "ct", "text": "i18n:wn-key-ct" },
                { "value": "lm", "text": "i18n:wn-key-lm" }
              ]
            }
          },
          this.filterConf
        )
      };
    }, // The Filter
    //------------------------------------------------
    GuiSchemaDetail() {
      //console.log(this.currentId)
      if (this.isLoadingGui) {
        return {
          comType: "TiLoading",
          comConf: {
            className: "as-cover",
            text: "i18n:loading-gui",
            icon: "fas-cog fa-spin"
          }
        };
      }
      if (!this.currentId) {
        return {
          comType: "TiLoading",
          comConf: {
            className: "as-big",
            text: "i18n:nil-detail",
            icon: "zmdi-arrow-left"
          }
        };
      }
      // Load from configuration
      let gui = this.detailGuiSetups[this.currentId] || this.defaultDetail;
      if (!_.isEmpty(gui)) {
        return Ti.Util.explainObj(this, gui);
      }

      // Show default detail
      return Ti.Util.explainObj(this, this.schemaDetail);
    },
    //------------------------------------------------
    WallItemBadges() {
      return {
        "NW": (o) => {
          return this.getFileIcon(o);
        }
      };
    },
    //------------------------------------------------
    TableHeadDisplay() {
      return [
        {
          key: "..",
          transformer: ({ rawData } = {}) => {
            return this.getFileIcon(rawData);
          },
          comType: "TiIcon"
        }
      ];
    },
    //------------------------------------------------
    TableFields() {
      return [
        {
          title: "i18n:wn-key-title",
          display: "rawData.title|nm"
        },
        {
          title: "i18n:wn-key-nm",
          candidate: true,
          display: "rawData.nm"
        },
        {
          title: "i18n:wn-key-tp",
          display: "rawData.tp"
        },
        {
          title: "i18n:wn-key-mime",
          candidate: true,
          display: "rawData.mime"
        },
        {
          title: "i18n:wn-key-len",
          candidate: false,
          display: {
            key: "rawData.len",
            transformer: "Ti.S.sizeText",
            comConf: {
              className: "as-tip-block align-right flex-auto"
            }
          }
        },
        {
          title: "i18n:wn-key-ct",
          candidate: true,
          display: {
            key: "rawData.ct",
            transformer: "Ti.Types.formatDate('yy年MM月dd日 HH:mm')"
          }
        },
        {
          title: "i18n:wn-key-lm",
          candidate: true,
          display: {
            key: "rawData.lm",
            transformer: "Ti.Types.formatDate('yy年MM月dd日 HH:mm')"
          }
        }
      ];
    },
    //------------------------------------------------
    CurrentOfficialDoc() {
      return this.meta;
    },
    //------------------------------------------------
    GuiSchema() {
      return {
        filter: this.GuiSchemaFilter,
        list: {
          comConf: {
            itemBadges: this.WallItemBadges,
            tableFields: this.TableFields,
            tableViewConf: {
              headDisplay: this.TableHeadDisplay
            }
          }
        },
        detail: this.GuiSchemaDetail
      };
    },
    //------------------------------------------------
    GuiEvents() {
      return {
        "detail::change": (payload) => {
          //console.log("OnDetailChange", payload)
          let $a = this.getObjAdaptor();
          $a.dispatch("changeContent", payload);
        }
      };
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    // OnDetailChange(payload) {
    //   // let $a = this.getObjAdaptor()
    //   // $a.commit("setListItem", od)
    //   console.log("OnDetailChange", payload)
    // },
    //------------------------------------------------
    getFileIcon(o, dft = "fas-cog") {
      return Ti.Icons.get(o, dft);
    },
    //------------------------------------------------
    //
    // Utility Methods
    //
    //------------------------------------------------
    getObjAdaptor() {
      return this.findComBy(($com) => {
        return "WnObjAdaptor" == $com.tiComType;
      });
    },
    //------------------------------------------------
    async reloadDetailGuiSetup() {
      //console.log("reloadDetailGuiSetup")
      if (this.isLoadingGui) {
        return;
      }
      // Guard
      if (!this.meta) {
        return;
      }
      // Reload meta GUI
      let metaId = this.meta.id;

      // Match cache
      if (this.detailGuiSetups[metaId]) {
        return;
      }

      // Prepare the vars
      let vars = {
        ...this.meta,
        major: Ti.Util.getMajorName(this.meta.nm)
      };

      this.isLoadingGui = true;
      // Get gui path
      let oGuiDetail;
      let guiPath =
        this.meta.gui_path || _.get(this.oDir, "gui_path") || this.guiPath;
      if (guiPath) {
        let ph = Ti.S.renderBy(guiPath, vars);
        oGuiDetail = await Wn.Io.loadMeta(ph);
      }

      // Use the default GUI Path
      if (!oGuiDetail) {
        guiPath = _.get(this.oDir, "gui_path_dft") || this.guiPathDefault;
        if (guiPath) {
          let ph = Ti.S.renderBy(guiPath, vars);
          oGuiDetail = await Wn.Io.loadMeta(ph);
        }
      }

      // Load GUI Detail Content
      if (oGuiDetail) {
        let guiDetail = await Wn.Io.loadContent(oGuiDetail, { as: "json" });
        guiDetail = guiDetail || {};
        this.detailGuiSetups = _.assign(
          {
            [metaId]: guiDetail
          },
          this.detailGuiSetups
        );
        // Load components ...
        if (!_.isEmpty(guiDetail.components)) {
          await Ti.App(this).loadView({
            components: guiDetail.components
          });
        }
      }
      // Set the Empty
      else {
        this.detailGuiSetups = _.assign(
          {
            [metaId]: {}
          },
          this.detailGuiSetups
        );
      }
      this.$nextTick(() => {
        this.isLoadingGui = false;
      });
    },
    //------------------------------------------------
    // Delegates
    //------------------------------------------------
    async doCreate() {
      let $a = this.getObjAdaptor();
      return await $a.doCreate();
    },
    async doRename() {
      let $a = this.getObjAdaptor();
      return await $a.doRename();
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    "meta": {
      handler: "reloadDetailGuiSetup",
      immediate: true
    }
  }
  ////////////////////////////////////////////////////
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-filterlist.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/filterlist/ti-filterlist.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //////////////////////////////////////////
  data: () => ({
    myFilterValue: undefined
  }),
  //////////////////////////////////////////
  props: {
    "filterInput": {
      type: Object
    },
    "filterKeys": {
      type: [Array, String],
      default: "nickname,text,value,title,abbr,nm,id"
    },
    "filterBy": {
      type: [Function, String]
    },
    "list": {
      type: Object,
      default: () => ({
        dftLabelHoverCopy: false
      })
    },
    "listType": {
      type: String,
      default: "list",
      validator: v => /^(list|table|wall)$/.test(v)
    }
  },
  //////////////////////////////////////////
  computed: {
    //-------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //-------------------------------------
    ListFilterBy() {
      // Function
      if (_.isFunction(this.filterBy)) {
        return this.filterBy
      }
      // Invoking
      if (_.isString(this.filterBy) || _.isPlainObject(this.filterBy)) {
        return Ti.Util.genInvoking(this.filterBy)
      }
      // Auto get filter keys
      let itKeys = []
      let kss = _.concat([], this.filterKeys)
      for (let ks of kss) {
        let keys = Ti.S.splitIgnoreBlank(ks)
        if (!_.isEmpty(keys) && _.isArray(keys)) {
          itKeys.push(...keys)
        }
      }
      // Gen the function
      return (it, fltv) => {
        if (Ti.Util.isNil(fltv)) {
          return true
        }
        //console.log("filter", { it, fltv })
        for (let k of itKeys) {
          let v = (it.rawData || it)[k]
          if (Ti.Util.isNil(v)) {
            continue;
          }
          let s = v + ""
          if (s.indexOf(fltv) >= 0) {
            return true
          }
        }
        return false
      }
    },
    //-------------------------------------
    FilterInputComConf() {
      return _.assign({
        width: "100%",
        prefixIcon: "fas-filter",
        placeholder: "i18n:filter"
      }, this.filterInput)
    },
    //-------------------------------------
    ListComType() {
      return `ti-${this.listType}`
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //-------------------------------------
    OnInputChange(str) {
      this.myFilterValue = str || null
    }
    //-------------------------------------
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'gui-block-support.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/gui/gui-block-support.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data: () => ({
    isDragging: false
  }),
  /////////////////////////////////////////
  props: {
    "blocks": {
      type: Array,
      default: () => []
    },
    "adjustMode": {
      type: String,
      default: "auto",
      validator: (v) => /^(auto|px|%)$/.test(v)
    },
    "keepCustomizedTo": {
      type: String,
      default: undefined
    },
    "card": {
      type: String,
      validator: (v) => /^(none|comfy|normal|tiny)$/.test(v)
    },
    "outsideCardLayout": {
      type: Boolean,
      default: false
    },
    "border": {
      type: Boolean,
      default: false
    },
    "schema": {
      type: Object,
      default: () => ({})
    },
    "actionStatus": {
      type: Object,
      default: () => ({})
    },
    "shown": {
      type: Object,
      default: () => ({})
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return Ti.Css.mergeClassName(
        {
          "is-adjustable": this.adjustable,
          "show-border": this.border,
          "is-outside-card-layout": this.outsideCardLayout,
          "no-outside-card-layout": !this.outsideCardLayout
        },
        this.className
      );
    },
    //--------------------------------------
    hasBlocks() {
      return !_.isEmpty(this.blocks);
    },
    //--------------------------------------
    BlockAdjustMode() {
      if ("auto" == this.adjustMode) {
        for (let block of this.blocks) {
          if (!Ti.Util.isNil(block.size)) {
            if (/%$/.test(block.size)) {
              return "%";
            }
            return "px";
          }
        }
        return "px";
      }
      return this.adjustMode;
    },
    //--------------------------------------
    GuiBlocks() {
      let list = [];
      _.forEach(this.blocks, (block, index) => {
        let li = _.omit(block, "size");
        li.index = index;
        li.key = block.name || `B${index}`;
        if (this.card) {
          li.outsideCardLayout = true;
        }
        if (Ti.Util.isNil(li.minSize)) {
          li.minSize = 50;
        }
        if (this.adjustable && _.isFunction(this.getBlockAdjacentMode)) {
          li.resizeMode = this.resize_mode;
          if (li.index > 0) {
            let prevI = li.index - 1;
            let selfI = li.index;
            li.adjacentMode = this.getBlockAdjacentMode(prevI, selfI);
            li.adjustBarAt = this.adjust_bar_at;
            li.resizeMode = this.resize_mode;
            li.adjustIndex = [prevI, selfI];
          }
        }
        list.push(li);
      });
      return list;
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-input-text.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/text/ti-input-text.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data: () => ({
    "inputCompositionstart": false,
    "isFocused": false,
    "pointerHover": null
  }),
  ////////////////////////////////////////////////////
  watch: {
    "focus": function (v) {
      this.isFocused = v
    }
  },
  ////////////////////////////////////////////////////
  props: {
    "value": null,
    "format": {
      type: [String, Array, Object],
      default: undefined
    },
    "joinBy": {
      type: String,
      default: ","
    },
    "readonly": {
      type: Boolean,
      default: false
    },
    "valueCase": {
      type: String,
      default: null,
      validator: (cs) => (Ti.Util.isNil(cs) || Ti.S.isValidCase(cs))
    },
    "placeholder": {
      type: [String, Number],
      default: null
    },
    "trimed": {
      type: Boolean,
      default: true
    },
    "autoJsValue": {
      type: Boolean,
      default: false
    },
    "hideBorder": {
      type: Boolean,
      default: false
    },
    "width": {
      type: [Number, String],
      default: null
    },
    "height": {
      type: [Number, String],
      default: null
    },
    "prefixHoverIcon": {
      type: String,
      default: "zmdi-close-circle"
    },
    "prefixIconForClean": {
      type: Boolean,
      default: true
    },
    "prefixIcon": {
      type: String,
      default: null
    },
    "prefixText": {
      type: String,
      default: null
    },
    "suffixText": {
      type: String,
      default: null
    },
    "suffixIcon": {
      type: String,
      default: null
    },
    "focus": {
      type: Boolean,
      default: false
    },
    "hover": {
      type: [Array, String],
      default: () => ["prefixIcon", "suffixIcon"]
    },
    "autoSelect": {
      type: Boolean,
      default: false
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName(this.className, {
        "is-self-actived": this.isSelfActived,
        "is-actived": this.isActived,
        "is-focused": this.isFocused,
        "is-blurred": !this.isFocused,
        "is-readonly": this.readonly,
        "show-border": !this.hideBorder,
        "hide-border": this.hideBorder,
        "has-prefix-icon": this.thePrefixIcon,
        "has-prefix-text": this.prefixText,
        "has-suffix-icon": this.suffixIcon,
        "has-suffix-text": this.suffixText,
      })
    },
    //------------------------------------------------
    topStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    },
    //------------------------------------------------
    theValue() {
      // if(_.isArray(this.value)) {
      //   return this.value.join("\r\n")
      // }
      let valIsArray = _.isArray(this.value)
      if (this.autoJsValue) {
        if (valIsArray || _.isPlainObject(this.value)) {
          return JSON.stringify(this.value, null, '   ')
        }
      }
      if (valIsArray && !Ti.Util.isNil(this.joinBy)) {
        return this.value.join(this.joinBy)
      }
      return Ti.Types.toStr(this.value, this.format)
    },
    //------------------------------------------------
    thePrefixIcon() {
      if ("prefixIcon" == this.pointerHover
        && this.isCanHover("prefixIcon")) {
        return this.prefixHoverIcon || this.prefixIcon
      }
      return this.prefixIcon
    },
    //------------------------------------------------
    theHover() {
      let map = {}
      let hos = _.concat(this.hover)
      for (let ho of hos) {
        if (ho) {
          map[ho] = true
        }
      }
      return map
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    isCanHover(hoverName) {
      return this.theHover[hoverName] ? true : false
    },
    //------------------------------------------------
    getHoverClass(hoverName) {
      let canHover = this.isCanHover(hoverName)
      return {
        "can-hover": canHover,
        "for-look": !canHover
      }
    },
    //------------------------------------------------
    onInputCompositionStart() {
      this.inputCompositionstart = true
    },
    //------------------------------------------------
    onInputCompositionEnd() {
      this.inputCompositionstart = false
      this.doWhenInput()
    },
    //------------------------------------------------
    onInputing($event) {
      if (!this.inputCompositionstart) {
        this.doWhenInput()
      }
    },
    //------------------------------------------------
    doWhenInput(emitName = "inputing") {
      if (_.isElement(this.$refs.input)) {
        //console.log("doWhenInput", emitName)
        let val = this.$refs.input.value
        // Auto js value
        if (this.autoJsValue) {
          val = Ti.S.toJsValue(val, {
            autoNil: true,
            autoDate: false,
            trimed: this.trimed
          })
        }
        // Trim
        else if (this.trimed) {
          val = _.trim(val)
        }
        // case
        val = Ti.S.toCase(val, this.valueCase)
        // notify
        this.$notify(emitName, val)
      }
    },
    //------------------------------------------------
    onInputKeyDown($event) {
      let payload = _.pick($event,
        "code", "key", "keyCode",
        "altKey", "ctrlKey", "metaKey", "shiftKey")
      payload.uniqKey = Ti.Shortcut.getUniqueKey(payload)
      payload.$event = $event
      this.$notify("keypress", payload)
    },
    //------------------------------------------------
    onInputChanged() {
      this.doWhenInput("change")
    },
    //------------------------------------------------
    onInputFocus() {
      if (!this.readonly) {
        if (this.autoSelect) {
          this.$refs.input.select()
        } else {
          this.$refs.input.focus()
        }
      }
      this.isFocused = true
      this.$notify("input:focus")
      // Auto Actived
      if (!this.isActived) {
        this.setActived()
      }
    },
    //------------------------------------------------
    onInputBlur() {
      this.isFocused = false
      this.$notify("input:blur")
    },
    //------------------------------------------------
    onClickPrefixIcon() {
      if (this.prefixIconForClean) {
        this.$notify("change", null)
      }
      this.$notify("prefix:icon")
    },
    //------------------------------------------------
    onClickPrefixText() {
      this.$notify("prefix:text")
    },
    //------------------------------------------------
    onClickSuffixIcon() {
      this.$notify("suffix:icon")
    },
    //------------------------------------------------
    onClickSuffixText() {
      this.$notify("suffix:text")
    },
    //------------------------------------------------
    doAutoFocus() {
      if (this.focus && !this.isFocused) {
        this.onInputFocus()
      }
    },
    //--------------------------------------
    __ti_shortcut(uniqKey) {
      return { stop: true, quit: true }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    "focus": function () {
      this.doAutoFocus()
    }
  },
  ////////////////////////////////////////////////////
  mounted: function () {
    this.doAutoFocus()
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'tags-item.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/tags/com/tags-item/tags-item.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs: false,
  ////////////////////////////////////////////////////
  data: () => ({
    // null / top / del
    mouseEnter: null,
    // collapse / extended
    status: "collapse"
  }),
  ////////////////////////////////////////////////////
  props: {
    "index": {
      type: Number,
      default: -1
    },
    "atLast": {
      type: Boolean,
      default: false
    },
    "icon": {
      type: [String, Object],
      default: null
    },
    "text": {
      type: [String, Number],
      default: null
    },
    "href": {
      type: String,
      default: null
    },
    "value": {
      type: [String, Number, Boolean, Object],
      default: null
    },
    /***
     * Show drop list for changing the piece value
     * 
     * ```js
     * [{
     *   icon  : "zmdi-card-giftcard",
     *   text  : "随便什么礼物",
     *   value : "Gift"
     * }, {
     *   icon  : "zmdi-cocktail",
     *   text  : "鸡尾酒会",
     *   value : "Cocktail"
     * }, {
     *   icon  : "zmdi-nature-people",
     *   text  : "人在树下；雨在天空",
     *   value : "NaturePeople"
     * }]
     * ```
     */
    "options": {
      type: Array,
      default: () => []
    },
    "optionDefaultIcon": {
      type: String,
      default: null
    },
    "cancelBubble": {
      type: Boolean,
      default: false
    },
    "removable": {
      type: Boolean,
      default: false
    },
    "readonly": {
      type: Boolean,
      default: false
    },
    "removeIcon": {
      type: String,
      default: null
    },
    "statusIcons": {
      type: Object,
      default: () => ({
        collapse: "zmdi-chevron-down",
        extended: "zmdi-chevron-up"
      })
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName({
        "has-options": this.hasOptions,
        "is-enter-top": 'top' == this.mouseEnter && this.hasOptions,
        "is-enter-del": 'del' == this.mouseEnter
      }, this.className)
    },
    //------------------------------------------------
    textClass() {
      return {
        "without-icon": !this.hasIcon && !this.removable,
        "without-options": !this.hasOptions
      }
    },
    //------------------------------------------------
    hasIcon() {
      return this.icon ? true : false
    },
    //------------------------------------------------
    hasOptions() {
      return _.isArray(this.options) && this.options.length > 0
    },
    //------------------------------------------------
    /***
     * @return The objects list like:
     * 
     * ```js
     * [{
      *   icon  : "zmdi-phone",
      *   text  : "i18n:xxx",
      *   value : 100,
      *   options : [{icon,text,value}...]
      * }]
      * ```
      */
    theOptions() {
      let list = _.filter(_.concat(this.options), (v) => !Ti.Util.isNil(v))
      let tags = []
      _.forEach(list, (li, index) => {
        let tag
        // Object
        if (_.isPlainObject(li)) {
          tag = _.assign({ icon: this.optionDefaultIcon }, li, { index })
        }
        // String or simple value
        else {
          tag = {
            index: index,
            icon: this.optionDefaultIcon,
            text: Ti.Types.toStr(li),
            value: li
          }
        }
        // Join to
        if (!_.isEqual(tag.value, this.value)) {
          tags.push(tag)
        }
      })
      return tags
    },
    //------------------------------------------------
    theStatusIcon() {
      return this.statusIcons[this.status]
    },
    //------------------------------------------------
    theData() {
      return {
        index: this.index,
        icon: this.icon,
        text: this.text,
        value: this.value,
        href: this.href,
        atLast: this.atLast,
        asterisk: this.asterisk
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    OnClickDel() {
      if (this.readonly || !this.removable) {
        return
      }
      this.$notify("remove", this.theData)
    },
    //------------------------------------------------
    OnClickOption({ value, text, icon } = {}) {
      if (this.readonly) {
        return
      }
      this.$notify("change", {
        value, text, icon,
        index: this.index
      })
      this.closeDrop()
    },
    //------------------------------------------------
    OnClickTop($event) {
      if (this.readonly) {
        return
      }
      // Show Drop Down
      if (this.hasOptions) {
        $event.stopPropagation()
        this.openDrop()
      }
      // Stop Bubble Up
      else if (this.cancelBubble) {
        $event.stopPropagation()
      }
      // Emit event
      if (this.href) {
        this.$notify("fire", this.theData)
      }
    },
    //------------------------------------------------
    openDrop() {
      if (this.hasOptions) {
        this.status = "extended"
        this.$nextTick(() => {
          this.dockDrop()
        })
      }
    },
    //------------------------------------------------
    closeDrop() {
      this.status = "collapse"
      this.mouseEnter = null
    },
    //------------------------------------------------
    dockDrop() {
      let $drop = this.$refs.drop
      let $box = this.$el
      // Guard the elements
      if (!_.isElement($drop) || !_.isElement($box)) {
        return
      }
      // If drop opened, make the box position fixed
      // to at the top of mask
      if ("extended" == this.status) {
        let r_box = Ti.Rects.createBy($box)
        //..........................................
        // Make drop same width with box
        Ti.Dom.setStyle($drop, {
          "min-width": `${r_box.width}px`
        })
        //..........................................
        // Dock drop to box
        Ti.Dom.dockTo($drop, $box, {
          space: { y: 2 }, posListX: ["left", "right"]
        })
        //..........................................
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  mounted: function () {
    this.dockDrop()
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'bar-item-switcher.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/actionbar/com/bar-item-switcher/bar-item-switcher.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////
  inject: ["$bar"],
  ///////////////////////////////////////
  props : {
    //-----------------------------------
    // Same as <bar-item-info>
    //-----------------------------------
    "name": {
      type: String,
      default: undefined
    },
    "icon": {
      type: String,
      default: undefined
    },
    "hideIcon" : {
      type: Boolean,
      default: false
    },
    "text": {
      type: String,
      default: undefined
    },
    "tip": {
      type: String,
      default: undefined
    },
    "switcher" : {
      type: Object,
      default: ()=>({})
    },
    "enabled": {
      type: [String, Array, Object],
      default: undefined
    },
    "disabled": {
      type: [String, Array, Object],
      default: undefined
    },
    "depth": {
      type: Number,
      default: 0
    },
    "status" : {
      type : Object,
      default : ()=>({})
    },
    "dftValue" : undefined,
    //-----------------------------------
    // Self Props
    //-----------------------------------
    "action" : {
      type : [String, Object, Function],
      default: undefined
    },
    "notify" : {
      type : String,
      default: undefined
    },
    "payload" : undefined,
    "wait" : {
      type : Number,
      default: 0
    },
    "delay" : {
      type : Number,
      default: 0
    }
  },
  ///////////////////////////////////////
  computed: {
    //-----------------------------------
    TopClass() {
      return this.getTopClass({
        "is-enabled"  : this.isEnabled,
        "is-disabled" : this.isDisabled,
        "is-highlight": this.isHighlight,
        "is-top" : this.depth == 1,
        "is-sub" : this.depth > 1,
        "has-icon" : this.icon ? true : false,
        "no-icon"  : this.icon ? false : true,
        "show-icon": this.isShowIcon,
        "hide-icon": !this.isShowIcon
      }, `is-depth-${this.depth}`)
    },
    //-----------------------------------
    isShowIcon() {
      return !this.hideIcon || this.hasIcon
    },
    //-----------------------------------
    hasIcon() {
      return this.icon ? true : false
    },
    //-----------------------------------
    isEnabled() {
      if(!Ti.Util.isNil(this.enabled)) {
        return this.isMatchStatus(this.enabled)
      }
      if(!Ti.Util.isNil(this.disabled)) {
        if(this.isMatchStatus(this.disabled)) {
          return false
        }
      }
      return true
    },
    //-----------------------------------
    isDisabled() {
      return !this.isEnabled
    },
    //-----------------------------------
    TheSetup() {
      return _.assign({
        allowEmpty : false
      }, this.switcher)
    },
    //-----------------------------------
    TheValue() {
      return Ti.Util.fallback(_.get(this.status, this.name), this.dftValue)
    },
    //-----------------------------------
    TheAction() {
      if(_.isFunction(this.action) && this.wait > 0) {
        return _.debounce(this.action, this.wait, {leading:true})
      }
      return this.action
    }
    //-----------------------------------
  },
  ///////////////////////////////////////
  methods : {
    OnSwitcherChange(val) {
      // Call Action
      if(this.action) {
        let app = Ti.App(this)
        let invoking = Ti.Shortcut.genActionInvoking(this.TheAction, {
          $com : this.$bar.$parent,
          argContext: app.$state()
        })
        // Invoke it
        _.delay(()=>{
          invoking(val)
        }, this.delay)
      }

      // notify: eventName
      if(this.notify) {
        let payload = this.payload
        if(payload) {
          payload = Ti.Util.explainObj({
            name  : this.name,
            value : val
          }, payload)
        }
        _.delay(()=>{
          this.$bar.$notify(this.notify, payload)
        }, this.delay)
      }
    }
  }
  ///////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-gui-rows.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/gui/rows/ti-gui-rows.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data: () => ({
    adjust_bar_at: "top",
    resize_mode: "row-resize",
    offset_key: "offsetY",
    block_size_by: "height"
  }),
  /////////////////////////////////////////
  props: {
    "adjustable": {
      type: Boolean,
      default: false
    },
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------

    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'tiny-wn-yt-playlist.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/tiny-wn-yt-playlist.mjs'] = (function(){
const ALBUM_PREFIX = "YtPlaylist";
////////////////////////////////////////////////////
async function pickYtPlaylistAndInsertToDoc(editor, settings) {
  // Load information
  let playlists = await settings.loadPlaylists()

  // format
  let items = _.map(playlists, pl => {
    return {
      id: pl.id, title: pl.title, preview: pl.thumbUrl,
      badges: {
        NW: "fab-youtube-square",
        SE: {
          type: "text",
          className: "bchc-badge as-label as-year",
          value: pl.itemCount
        }
      }
    }
  })

  // Check base
  let reo = await Ti.App.Open({
    icon: "fab-youtube-square",
    title: "i18n:net-youtube-add-playlist",
    position: "top",
    width: "95%",
    height: "95%",
    model: { event: "select" },
    comType: "TiWall",
    comConf: {
      data: items,
      idBy: "id",
      multi: false,
      display: {
        key: "..",
        comType: "ti-obj-thumb",
        comConf: {
          "...": "${=..}"
        }
      }
    },
    components: [
      "@com:ti/wall"
    ]
  })

  // User canceled
  if (_.isEmpty(reo) || !reo.current) {
    return
  }
  //console.log("YTPlaylist", reo.current)
  // Do insert
  editor.execCommand("InsertYtPlaylist", editor, reo.current)
}
//--------------------------------------------------
function GetAlbumWidget($album) {
  return Ti.Widget.Album.getOrCreate($album, {
    attrPrefix: "wn-ytpl-",
    itemToPhoto: {
      name: "=title",
      link: "->https://www.youtube.com/watch?v=${id}",
      thumb: "=thumbUrl",
      src: "=coverUrl",
      brief: "=description",
    }
  })
}
//--------------------------------------------------
function UpdateYtPlaylistTagInnerHtml(editor, $album, settings, {
  album, photos, items
} = {}) {
  console.log("UpdateYtPlaylistTagInnerHtml")
  // Bind widget and get the data
  let AB = GetAlbumWidget($album);
  // If insert new album, the params will be passed
  if (!album) {
    album = AB.getData()
  } else {
    AB.setData(album)
  }
  // Mark content editable
  $album.contentEditable = false

  // Explain items to photos
  if (items) {
    photos = AB.covertToPhotos(items)
  }

  // Reload photo from remote
  if (_.isEmpty(photos)) {
    // Show loading
    AB.showLoading()

    // Load and rendering
    //console.log("YTPL:: setting.load")
    settings.loadVideos(album).then((data) => {
      //console.log("load PL videos", data)
      AB.renderItems(data)
      // Force sync content
      editor.__rich_tinymce_com.syncContent()
    })
  }
  // Just render
  else {
    AB.renderPhotos(photos)
    // Force sync content
    editor.__rich_tinymce_com.syncContent()
  }
}
////////////////////////////////////////////////////
function CmdInsertAlbum(editor, ytPlaylist) {
  if (!ytPlaylist)
    return

  // Prepare range
  let rng = editor.selection.getRng()

  // Create image fragments
  let $doc = rng.commonAncestorContainer.ownerDocument
  let $album = Ti.Dom.createElement({
    tagName: "div",
    attrs: {
      tiAlbumType: "yt-playlist"
    },
    className: "wn-media as-yt-playlist"
  }, $doc)

  // Update INNER HTML
  UpdateYtPlaylistTagInnerHtml(editor, $album, editor.wn_yt_playlist_settings, {
    album: ytPlaylist
  })

  // Remove content
  if (!rng.collapsed) {
    rng.deleteContents()
  }

  // Insert fragments
  rng.insertNode($album)

}
////////////////////////////////////////////////////
function CmdReloadAlbum(editor, settings) {
  let $album = GetCurrentAlbumElement(editor)
  // Guard
  if (!_.isElement($album)) {
    return
  }
  // Reload content
  UpdateYtPlaylistTagInnerHtml(editor, $album, settings)
}
////////////////////////////////////////////////////
function GetCurrentAlbumElement(editor) {
  let sel = editor.selection
  let $nd = sel.getNode()
  // Guard
  return Ti.Dom.closest($nd, (el) => {
    return 'DIV' == el.tagName && Ti.Dom.hasClass(el, "wn-media", "as-yt-playlist")
  }, { includeSelf: true })
}
////////////////////////////////////////////////////
function CmdSetAlbumStyle(editor, css = {}) {
  let $album = GetCurrentAlbumElement(editor)
  // Guard
  if (!_.isElement($album)) {
    return
  }
  // Clear float
  Ti.Dom.setStyle($album, css)
  // Force sync content
  editor.__rich_tinymce_com.syncContent()
}
////////////////////////////////////////////////////
async function CmdShowAlbumProp(editor, settings) {
  let $album = GetCurrentAlbumElement(editor)
  // Guard
  if (!_.isElement($album)) {
    return
  }
  // Gen the properties
  let AB = GetAlbumWidget($album)
  let data = AB.getData()
  //console.log(data)

  // Show dialog
  let reo = await Ti.App.Open({
    icon: "fab-youtube-square",
    title: "i18n:hmk-w-edit-yt-playlist",
    width: "37%",
    height: "100%",
    position: "right",
    closer: "left",
    clickMaskToClose: true,
    result: data,
    model: { prop: "data", event: "change" },
    comType: "TiForm",
    comConf: Ti.Widget.Album.getEditFormConfig(ALBUM_PREFIX),
    components: []
  })
  //console.log(reo)

  // 用户取消
  if (!reo)
    return

  //................................................
  let photos = AB.getPhotos()
  UpdateYtPlaylistTagInnerHtml(editor, $album, settings, {
    album: reo, photos
  })
  //................................................
  // clean cache
  $album.removeAttribute("data-mce-src")
  $album.removeAttribute("data-mce-style")
  //................................................
  // Force sync content
  editor.__rich_tinymce_com.syncContent()
}
////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  name: "wn-yt-playlists",
  //------------------------------------------------
  init: function (conf = {}) {
  },
  //------------------------------------------------
  setup: function (editor, url) {
    //..............................................
    let settings = _.assign({
      meta: "~"
    }, _.get(editor.settings, "wn_yt_playlist_config"));
    //console.log("setup", editor.settings)
    //..............................................
    // Reload meta content
    settings.loadVideos = async function ({ id }) {
      if (!this.config) {
        await this.loadConfig()
      }
      return await Wn.Youtube.getAllVideos(this.config, id)
    }
    //..............................................
    settings.loadConfig = async function () {
      let oMeta = await Wn.Io.loadMeta(this.meta)
      if (!oMeta) {
        return await Ti.Toast.Open({
          content: "i18n:e-ph-noexists",
          type: "warn",
          val: meta
        })
      }
      if (oMeta.race != "FILE") {
        return await Ti.Toast.Open({
          content: "i18n:e-obj-invalid",
          type: "warn",
          val: meta
        })
      }

      // Load playlists
      let { domain, channelId } = await Wn.Io.loadContent(oMeta, { as: "json" })
      this.domain = domain
      this.channelId = channelId
      this.config = await Wn.Youtube.loadConfig({
        domain, channelId
      })
      return this.config
    }
    //..............................................
    settings.loadPlaylists = async function () {
      // Loaded already!
      if (!this.config) {
        await this.loadConfig()
      }
      return await Wn.Youtube.getAllPlaylists(this.config)
    }
    //..............................................
    editor.wn_yt_playlist_settings = settings
    //..............................................
    // Register toolbar actions
    editor.ui.registry.addButton("WnYtPlaylistPick", {
      icon: "youtube-square-brands",
      tooltip: Ti.I18n.text("i18n:album-insert"),
      onAction: function (menuBtn) {
        pickYtPlaylistAndInsertToDoc(editor, settings)
      },
    })
    //..............................................
    let {
      CMD_SET_STYLE, CMD_RELOAD, CMD_PROP
    } = Ti.Widget.Album.registryTinyMceMenuItem(editor, {
      prefix: ALBUM_PREFIX,
      settings,
      GetCurrentAlbumElement
    })
    //..............................................
    // Register plugin command
    editor.addCommand("InsertYtPlaylist", CmdInsertAlbum)
    editor.addCommand(CMD_SET_STYLE, CmdSetAlbumStyle)
    editor.addCommand(CMD_RELOAD, CmdReloadAlbum)
    editor.addCommand(CMD_PROP, CmdShowAlbumProp)
    //..............................................
    let $vm = editor.__rich_tinymce_com
    $vm.registerContentCallback("wn-yt-playlists", function () {
      let els = editor.$('.wn-media.as-yt-playlist')
      for (let i = 0; i < els.length; i++) {
        let el = els[i]
        UpdateYtPlaylistTagInnerHtml(editor, el, settings)
      }
    })
    //..............................................
    return {
      getMetadata: function () {
        return {
          name: 'Wn Youtube playlist plugin',
          url: 'http://site0.cn'
        };
      }
    };
    //..............................................
  }
  //------------------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-pay-done.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/pay/done/web-pay-done.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  props : {
    "payOk" : {
      type : Boolean,
      default : undefined
    },
    "errMsg" : {
      type : String,
      default : undefined
    },
    "orderId": {
      type: String,
      default: undefined
    }
  },
  //////////////////////////////////////////////////
  computed : {
    //----------------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-wait" : this.isWait,
        "is-ok"   : !this.isWait && this.payOk,
        "is-fail" : !this.isWait && !this.payOk
      })
    },
    //----------------------------------------------
    isWait() {
      return _.isUndefined(this.payOk)
    },
    //----------------------------------------------
    TheIcon() {
      if(_.isUndefined(this.payOk)) {
        return this.waitIcon
      }
      return this.payOk
        ? this.okIcon
        : this.failIcon
    },
    //----------------------------------------------
    TheText() {
      if(_.isUndefined(this.payOk)) {
        return this.waitText
      }
      return this.payOk
        ? this.okText
        : this.failText
    },
    //----------------------------------------------
    TheLinks() {
      let list = _.cloneDeep(this.payOk
        ? _.concat(this.okLinks, this.doneLinks)
        : _.concat(this.failLinks, this.doneLinks))

      let links = []
      _.forEach(list, li=> {
        links.push(_.defaults(Ti.Util.explainObj(this, li), {
          icon: 'zmdi-chevron-right'
        }))
      })
      return links
    },
    //----------------------------------------------
    hasLinks() {
      return !_.isEmpty(this.TheLinks)
    }
    //----------------------------------------------
  },
  //////////////////////////////////////////////////
  methods: {
    OnClickLink({path, params}={}) {
      if(path) {
        this.$notify("nav:to", {
          value: path,
          params
        })
      }
    }
  }
  //////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-adaptlist-methods.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/adaptlist/ti-adaptlist-methods.mjs'] = (function(){
const OBJ = {
  //--------------------------------------------
  async doUpload(files = []) {
    // Guard
    if(!_.isFunction(this.uploadBy)) {
      return await Ti.Toast.Open('TiAdaptlist::uploadBy without defined!')
    }

    // Pre-process
    if (_.isFunction(this.beforeUpload)) {
      await this.beforeUpload()
    }

    // Prepare the list
    let ups = _.map(files, (file, index) => ({
      id: `U${index}_${Ti.Random.str(6)}`,
      file: file,
      total: file.size,
      current: 0
    }))

    // Show Uploading
    this.myUploadigFiles = ups

    // Prepare the list
    let newIds = {}
    // Do upload file one by one
    for (let up of ups) {
      let file = up.file
      let { ok, data } = await this.uploadBy(file, {
        target: `id:${this.meta.id}`,
        progress: function (pe) {
          up.current = pe.loaded
        }
      })
      if (ok) {
        newIds[data.id] = true
      }
    }

    // All done, hide upload
    _.delay(() => {
      this.myUploadigFiles = []
    }, 1000)

    if (_.isEmpty(newIds)) {
      return
    }

    // Tell user ...
    Ti.Toast.Open("i18n:upload-done", "success")


    // Call reload
    await this._run("reload")

    // Make it checked
    let checkIds = Ti.Util.truthyKeys(newIds)
    if (!this.multi) {
      checkIds = _.first(checkIds)
    }
    this.$innerList.checkRow(checkIds, { reset: true })
  }
  //--------------------------------------------
}
return OBJ;;
})()
// ============================================================
// EXPORT 'widget-user.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/widget/user/widget-user.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    "me": {
      type: Object,
      default: ()=>({})
    },
    "avatarSrc": {
      type: String,
      default: undefined
    },
    "avatarIcons": {
      type: Object,
      default: ()=>({
        "unknown": "far-user",
        "male": "im-user-male",
        "female": "im-user-female"
      })
    }
  },
  /////////////////////////////////////////
  computed : {
    //------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------
    TheAvatar() {
      let me = this.me || {}
      if(this.avatarSrc && me.thumb) {
        return {
          type: "image",
          value: Ti.S.renderVars(me.thumb, this.avatarSrc)
        }
      }
      // Icon: male
      if(me.sex == 1) {
        return this.avatarIcons.male
      }
      // Icon: female
      if(me.sex == 2) {
        return this.avatarIcons.female
      }
      // Icon: unknown
      return this.avatarIcons.unknown || "far-user"
    },
    //------------------------------------
    TheNickname() {
      let me = this.me || {}
      return me.nickname 
             || me.email
             || me.phone
             || me.nm
             || me.id
             || "Anonymity"
    }
    //------------------------------------
  },
  /////////////////////////////////////////
  methods : {
    //------------------------------------
    
    //------------------------------------
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-input-dval.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/dval/ti-input-dval.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  props: {
    //------------------------------------------------
    // Data
    //------------------------------------------------
    "value": undefined,
    //------------------------------------------------
    // Behaviors
    //------------------------------------------------
    "dialog": {
      type: Object
    },
    //------------------------------------------------
    // Aspect
    //------------------------------------------------

  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-toggle": "Boolean" == this.DyVal.type
      })
    },
    //------------------------------------------------
    /*
    {
      //.................................
      // "Undefined": undefined
      // "Null"     : null
      // "Number"   : 23.6 or 89
      // "Boolean"  : true
      // "String"   : "xxx"
      // "Object"   : {...}
      // "Array"    : [...]
      // "Function" : {__function:true, name, args}
      // "Invoking" : {__invoke:true, name, args}
      // "Tmpl"     : "->xxxx"
      // "BoolVar"  : "==xxx"
      // "GetVar"   : "=xxx"
      type:"Number|Boolean|String...|Tmpl|BoolVar|GetVar",
      //.................................
      value: Any,
      //.................................
      // "Array" only
      list: [DyVal ..]
      // "Object" only
      fields: [{name,title,value:DyVal}]
      //.................................
      // "Var"
      dftVal: String,
      // "GetVar"
      dftAutoJs: true,
      // "BoolVar"
      isNot: false,
      //.................................
      // Var | Function | Invoking only
      name : "FuncName",
      // Function | Invoking only
      args : [
        DyVal, ...
      ],
      partial: "left"
    }
    */
    DyVal() {
      // Guard : parsed already
      if (this.value && this.value.$dynamic_parsed) {
        return this.value
      }
      //.......................................
      const wrapDyVal = (vo) => {
        vo.$dynamic_parsed = true
        return vo
      }
      //.......................................
      const parseVal = (anyValue) => {
        let theValue = anyValue
        //.....................................
        // Undefined
        if (_.isUndefined(theValue)) {
          return wrapDyVal({ type: "Undefined" })
        }
        //.....................................
        // Null
        if (_.isNull(theValue)) {
          return wrapDyVal({ type: "Null", value: null })
        }
        //.....................................
        // Number
        if (_.isNumber(theValue)) {
          return wrapDyVal({ type: "Number", value: theValue })
        }
        //.....................................
        // Boolean
        if (_.isBoolean(theValue)) {
          return wrapDyVal({ type: "Boolean", value: theValue })
        }
        //.....................................
        // String
        if (_.isString(theValue)) {
          let m_type, m_val, m_dft, dft_autoJs;
          // Match template or function call
          let m = /^(==>>?|=>>?|->)(.+)$/.exec(theValue)
          if (m) {
            m_type = m[1]
            m_val = _.trim(m[2])
          }
          // Match var value
          else {
            m = /^(==?|!=)([^?]+)(\?(.*))?$/.exec(theValue)
            if (m) {
              m_type = m[1]
              m_val = _.trim(m[2])
              m_dft = m[4]
              // starts with "=" auto covert to JS value
              if (/^=/.test(m_dft) || "==" == m_type) {
                m_dft = Ti.S.toJsValue(m_dft)
                dft_autoJs = true
              } else if (m_dft) {
                m_dft = _.trim(m_dft)
                dft_autoJs = false
              }
            }
          }

          //
          // Eval by type
          //
          // Matched
          if (m_type) {
            //................................
            let fn = ({
              // Just get function: partial left
              "==>": (val) => {
                let invoke = Ti.Util.parseInvoking(val)
                return {
                  type: "Function",
                  name: invoke.name,
                  args: invoke.args,
                  partial: "left"
                }
              },
              // Just get function: partial right
              "==>>": (val) => {
                let invoke = Ti.Util.parseInvoking(val)
                return {
                  type: "Function",
                  name: invoke.name,
                  args: invoke.args,
                  partial: "right"
                }
              },
              // ==xxx  # Get Boolean value now
              "==": (val) => {
                return {
                  type: "BoolVar",
                  name: val,
                  dftVal: Ti.Util.fallbackNil(m_dft, false),
                  dftAutoJs: dft_autoJs,
                  isNot: false
                }
              },
              // !=xxx  # Revert Boolean value now
              "!=": (val) => {
                return {
                  type: "BoolVar",
                  name: val,
                  dftVal: Ti.Util.fallbackNil(m_dft, true),
                  dftAutoJs: dft_autoJs,
                  isNot: true
                }
              },
              // =xxx   # Get Value Now
              "=": (val, dft) => {
                return {
                  type: "GetVar",
                  name: val,
                  dftVal: m_dft,
                  dftAutoJs: dft_autoJs
                }
              },
              // =>Ti.Types.toStr(meta)
              "=>>": (val) => {
                let invoke = Ti.Util.parseInvoking(val)
                return {
                  type: "Invoking",
                  name: invoke.name,
                  args: invoke.args,
                  partial: "right"
                }
              },
              // =>Ti.Types.toStr(meta)
              "=>": (val) => {
                let invoke = Ti.Util.parseInvoking(val)
                return {
                  type: "Invoking",
                  name: invoke.name,
                  args: invoke.args,
                  partial: "left"
                }
              },
              // Render template
              "->": (val) => {
                return {
                  type: "Tmpl"
                }
              }
            })[m_type]
            //................................
            // Check Function
            if (_.isFunction(fn)) {
              let rev = fn(m_val, m_dft)
              rev.value = m_val
              return wrapDyVal(rev)
            }
          } // Matched

          // Default as String
          return wrapDyVal({ type: "String", value: theValue })
        }
        //.....................................
        // Array
        if (_.isArray(theValue)) {
          let list = []
          for (let v of theValue) {
            let v2 = parseVal(v)
            list.push(v2)
          }
          return wrapDyVal({
            type: "Array",
            value: theValue,
            list
          })
        }
        //.....................................
        // Object
        if (_.isPlainObject(theValue)) {
          let type = "Object"
          // Invoking
          if (theValue.__invoke && theValue.name) {
            type = "Invoking"
          }
          // Function
          else if (theValue.__function && theValue.name) {
            type = "Function"
          }

          // Invoking || Function
          if (/^(Invoking|Function)$/.test(type)) {
            let { name, args } = theValue
            args = parseVal(Ti.Util.fallback(args || []))
            return wrapDyVal({ type, name, args })
          }

          // Plain Object
          let flds = []
          _.forEach(theValue, (v, k) => {
            let dv = parseVal(v)
            flds.push({
              name: k,
              title: k,
              value: dv
            })
          })
          return wrapDyVal({
            type: "Object",
            value: theValue,
            fields: flds,
          })
        } // ~Object
        //.....................................
        // Default as String
        return wrapDyVal({
          type: "String",
          value: theValue
        })
      } // ~ parseVal
      return parseVal(this.value)
    },
    //------------------------------------------------
    InputValue() {
      return this.DyVal.value
    },
    //------------------------------------------------
    InputConf() {
      let dvType = this.DyVal.type
      //......................................
      let prefixIcon = ({
        "Number": "zmdi-n-2-square",
        "Boolean": "fas-toggle-on",
        "String": "zmdi-font",
        "Object": "zmdi-toys",
        "Array": "zmdi-format-list-numbered",
        "Function": "fas-fire-extinguisher",
        "Invoking": "fas-fire-alt",
        "Tmpl": "im-plugin",
        "BoolVar": "im-toggle",
        "GetVar": "zmdi-key"
      })[dvType]
      //......................................
      let prefixText = ({
        "Function": this.DyVal.partial == "right" ? ":==>>" : ":==>",
        "Invoking": this.DyVal.partial == "right" ? ":=>>" : ":=>",
        "Tmpl": ":->",
        "BoolVar": ":==",
        "GetVar": ":="
      })[dvType]
      //......................................
      let placeholder = ({
        "Undefined": "i18n:undefined",
        "Null": "i18n:null"
      })[dvType]
      //......................................
      let readonly = /^(Object|Array)$/.test(dvType)
      //......................................
      return {
        placeholder,
        prefixIcon,
        prefixText,
        readonly
      }
      //......................................
    },
    //------------------------------------------------
    ObjInfo() {
      if ("Object" == this.DyVal.type) {
        let ss = _.map(this.DyVal.fields, ({ name, title }) => title || name)
        return _.isEmpty(ss) ? Ti.I18n.get("empty") : ss.join(", ")
      }
    },
    //------------------------------------------------
    ArrayInfo() {
      if ("Array" == this.DyVal.type) {
        let ss = _.map(this.DyVal.list, ({ type }) => type)
        return _.isEmpty(ss) ? Ti.I18n.get("empty") : ss.join(", ")
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    async OnOpenEditForm() {
      let reo = await Ti.App.Open(_.assign(
        {
          title: "i18n:edit",
          position: "top",
          width: "5.4rem",
          height: "61.8%",
        },
        this.dialog,
        {
          result: this.DyVal,
          model: { event: "change", prop: "data" },
          comType: "TiForm",
          comConf: {
            spacing: "comfy",
            omitHiddenFields: true,
            gridColumnHint: 1,
            fields: [
              {
                title: "i18n:type",
                name: "type",
                defaultAs: "String",
                comType: "TiDroplist",
                comConf: {
                  options: "#HmValTypes",
                  suffixText: "${=value}"
                }
              },
              /*---------------------------*/
              {
                title: "i18n:value",
                name: "value",
                visible: {
                  type: "^(String|Tmpl)$"
                },
                comType: "TiInput"
              },
              {
                title: "i18n:value",
                name: "value",
                type: "Boolean",
                visible: {
                  type: "Boolean"
                },
                comType: "TiToggle"
              },
              {
                title: "i18n:value",
                name: "value",
                type: "Number",
                nanAs: 0,
                visible: {
                  type: "Number"
                },
                comType: "TiInput"
              },
              {
                title: "i18n:value",
                name: "value",
                type: "Array",
                visible: {
                  type: "Array"
                },
                nameVAlign: "top",
                comType: "TiInputList"
              },
              {
                title: "i18n:value",
                name: "value",
                type: "Object",
                visible: {
                  type: "Object"
                },
                nameVAlign: "top",
                comType: "TiInputPair"
              },
              /*---------------------------*/
              {
                title: "i18n:name",
                name: "name",
                visible: {
                  type: "^((Bool|Get)Var|Function|Invoking)$"
                },
                comType: "TiInput"
              },
              /*---------------------------*/
              {
                title: "i18n:hm-args",
                name: "args",
                type: "Array",
                visible: {
                  type: "^(Function|Invoking)$"
                },
                nameVAlign: "top",
                comType: "TiInputList"
              },
              {
                title: "i18n:hm-args-partial",
                name: "partial",
                visible: {
                  type: "^(Function|Invoking)$"
                },
                comType: "TiSwitcher",
                comConf: {
                  options: "#HmArgsPartials"
                }
              },
              /*---------------------------*/
              // Array, Object

              /*---------------------------*/
            ]
          }
        }
      )) // await Ti.App.Open

      // User cancel
      if (!reo) {
        return
      }

      // Update the value
      let fn = ({
        "Undefined": () => {
          return undefined
        },
        "Null": () => {
          return null
        },
        "Number": ({ value }) => {
          return value * 1
        },
        "Boolean": ({ value }) => {
          return value ? true : false
        },
        "String": ({ value }) => {
          return Ti.Types.toStr(value)
        },
        "Object": ({ value }) => {
          // TODO ...
          return value
        },
        "Array": ({ value }) => {
          // TODO ...
          return value
        },
        "Function": ({ name, args, partial }) => {
          if (_.isEmpty(args)) {
            return "right" == partial
              ? `==>>${name}`
              : `==>${name}`
          }
          return {
            __function: true,
            name, args, partial
          }
        },
        "Invoking": ({ name, args, partial }) => {
          if (_.isEmpty(args)) {
            return "right" == partial
              ? `=>>${name}`
              : `=>${name}`
          }
          return {
            __invoke: true,
            name, args, partial
          }
        },
        "Tmpl": ({ value }) => {
          return `->${value}`
        },
        "BoolVar": ({ name, dftVal, isNot }) => {
          let re = [isNot ? "!" : "=", "=", name]
          if (!Ti.Util.isNil(dftVal)) {
            re.push(`?${dftVal}`)
          }
          return re.join("")
        },
        "GetVar": ({ name, dftVal, dftAutoJs }) => {
          let re = ["=", name]
          if (!Ti.Util.isNil(dftVal)) {
            if (dftAutoJs) {
              re.push(`?=${dftVal}`)
            } else {
              re.push(`?${dftVal}`)
            }
          }
          return re.join("")
        }
      })[reo.type]

      if (_.isFunction(fn)) {
        let val = fn(reo)
        this.tryNotifyChange(val)
      }
    },
    //------------------------------------------------
    OnInputChange(val) {
      let dvType = this.DyVal.type
      // Update the value
      let v2, re, invoke;
      let dyVal = _.cloneDeep(this.DyVal)
      switch (dvType) {
        case "Undefined":
        case "Null":
        case "Number":
        case "Boolean":
        case "String":
          v2 = Ti.S.toJsValue(val);
          break;
        case "Object":
        case "Array":
          v2 = JSON.parse(val);
          break;
        case "Function":
          invoke = Ti.Util.parseInvoking(val)
          v2 = _.assign(dyVal, { __function: true }, invoke);
          break;
        case "Invoking":
          invoke = Ti.Util.parseInvoking(val)
          v2 = _.assign(dyVal, { __invoke: true }, invoke);
          break;
        case "Tmpl":
          v2 = `->${val}`;
          break;
        case "BoolVar":
          re = [dyVal.isNot ? "!" : "=", "=", dyVal.name]
          if (!Ti.Util.isNil(dyVal.dftVal)) {
            re.push(`?${dyVal.dftVal}`)
          }
          re.join("");
          break;
        case "GetVar":
          re = ["=", dyVal.name]
          if (!Ti.Util.isNil(dyVal.dftVal)) {
            if (dyVal.dftAutoJs) {
              re.push(`?=${dyVal.dftVal}`)
            } else {
              re.push(`?${dyVal.dftVal}`)
            }
          }
          re.join("");
          break;
      }


      // Try to notify
      this.tryNotifyChange(v2)
    },
    //------------------------------------------------
    tryNotifyChange(val) {
      if (!_.isEqual(this.value, val)) {
        this.$notify("change", val)
      }
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-filterbar-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/filterbar/ti-filterbar-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  /* {a:100, b:99 ...} */
  "filter": {
    type: Object
  },
  /* {ct:-1} */
  "sorter": {
    type: Object
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  /*
   Test the input keyword, auto get the filter key
   [{
      // If without declare, take it as default case
      // If RegExp, it will update match group $0,$1...
      // Then the key/val can get the render context
      // {test:'^(name)=(.+)', key:"${1}", val:"${2}"}
      // Else, the match group only has the `${0}` as input value
      test  : AutoMatch | RegExp,
      match : "^xxx",
      key:"${1}", 
      val:"${2}", 
      type:"Integer", 
      mode:"=="
    },
    {
      key:"id"
    }
  ]
   [mode]
     == : Actually equal
     ~= : Ends with: "^.*xxx$"
     =~ : Starts with: "^xxx"
     ~~ : Contains: "^.*xxx"
  */
  "matchKeywords": {
    type: Array,
    default: () => []
  },
  /*
   Major filter items:
   {key:"abc", placeholder:"xxx", options:"#xxx", width:200}
  */
  "majors": {
    type: [Object, Array],
    default: () => []
  },
  "topMajors": {
    type: [Object, Array, String, Boolean],
    default: false
  },
  /*
   How to show the filter data as readable tags
   {xyz: Function|Explain|Dict}
  */
  "filterTags": {
    type: Object,
    default: () => ({})
  },
  /* 
  Advance search dialog form. If declared, show the [Suffix Icon]
  */
  "advanceForm": {
    type: Object,
    default: undefined
  },
  // The dependance components which the advanceForm relay on
  "advanceComponents": {
    type: [String, Array]
  },
  "sorterConf": {
    type: Object,
    default: undefined
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "placeholder": {
    type: [String, Number],
    default: "i18n:nil"
  },
  // Advance search dialog setting
  "dialog": {
    type: Object,
    default: undefined
  },
  "prefixIcon": {
    type: String,
    default: "im-filter"
  },
  "suffixIcon": {
    type: String,
    default: "fas-bars"
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'thing-files.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/thing/manager/com/thing-files/thing-files.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////
  inject: ["$ThingManager"],
  ///////////////////////////////////////////
  data: ()=>({
    myDataDirObj: null,
    myData: {},
    myStatus: {
      reloading: false
    },
    myCurrentId: null
  }),
  ///////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    hasDataHome() {
      return this.dataHome ? true : false
    },
    //--------------------------------------
    hasDirNameOptions() {
      return !_.isEmpty(this.dirNameOptions)
    },
    //--------------------------------------
    CurrentFile(){
      if(this.myCurrentId && this.myData.list){
        for(let it of this.myData.list) {
          if(this.myCurrentId == it.id){
            return it
          }
        }
      }
    },
    //--------------------------------------
    ThePreview() {
      let preview = Ti.Util.getFallback(this.preview, this.dirName, "@default") 
                    || this.preview 
                    || {}

      return {
        showInfo  : false,
        floatInfo : false,
        infoPosition  : "left",
        infoNameWidth : 40,
        infoValueWidth : 120,
        stateLocalKey : this.getStateLocalKey("preview"),
        // Customized
        ...preview,
        // Edit Info 
        editInfoBy : ()=>{
          this.editPreviewInfo()
        }
      }
    },
    //--------------------------------------
    TheFiles() {
      return _.assign({}, this.files, {
        routers : {
          "reload" : async ()=>{
            await this.reloadData()
          }
        }
      })
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnAdaptListInit($adaptlist){this.$adaptlist = $adaptlist},
    //--------------------------------------
    // Events
    //--------------------------------------
    OnDirNameChanged(dirName) {
      this.$ThingManager.commit("setCurrentDataDir", dirName)
      
      this.$nextTick(()=>{
        this.reloadData()
      })
    },
    //--------------------------------------
    OnFileSelect({currentId}) {
      this.myCurrentId = currentId
    },
    //--------------------------------------
    OnFileOpen(obj) {
      this.$notify("file:open", obj)
    },
    //--------------------------------------
    async OnFileUploaded(files=[]){
      let f = _.first(files)
      if(f) {
        this.$adaptlist.myCurrentId = f.id
        this.myCurrentId = f.id
      }
      await this.$ThingManager.dispatch("autoSyncCurrentFilesCount")
    },
    //--------------------------------------
    // Untility
    //--------------------------------------
    getStateLocalKey(name) {
      if(this.stateLocalKey && name) {
        return  `${this.stateLocalKey}_${name}`
      }
    },
    //--------------------------------------
    async doDeleteSelected(){
      await this.$adaptlist.doDelete()
      await this.$ThingManager.dispatch("autoSyncCurrentFilesCount")
    },
    //--------------------------------------
    async checkDataDir() {
      // Guard
      if(!this.hasDataHome) {
        return
      }
      // If empty data home, create one
      if(!this.myDataDirObj) {
        let pos = this.dataHome.indexOf('/')
        let tsDataPh = this.dataHome.substring(0, pos)
        let dirPath = Ti.Util.appendPath(this.dataHome.substring(pos+1), this.dirName)
        let newMeta = {
          race : "DIR",
          nm   : dirPath
        }
        let json = JSON.stringify(newMeta)
        let cmdText = `obj "${tsDataPh}" -IfNoExists -new '${json}' -cqno`
        //console.log(cmdText)
        let dataDirObj = await Wn.Sys.exec2(cmdText, {as:"json"})
        let dataHomeObj = await Wn.Io.loadMetaBy(this.dataHome)

        // Update local state
        this.$ThingManager.commit("setCurrentDataHomeObj", dataHomeObj)
        this.myDataDirObj = dataDirObj
      }
    },
    //--------------------------------------
    async doUploadFiles() {
      // Guard
      await this.checkDataDir()
      
      // Do upload
      if(this.myDataDirObj) {
        this.$adaptlist.openLocalFileSelectdDialog()
      }
      // Impossible
      else {
        throw "Impossible!!!"
      }
    },
    //--------------------------------------
    async editPreviewInfo() {
      //console.log("showPreviewObjInfo:", this.preview)
      if(this.CurrentFile) {
        let options = _.get(this.previewEdit, this.dirName)
        let reo = await Wn.EditObjMeta(this.CurrentFile, options)
        if(reo && reo.data) {
          this.updateItemInDataList(reo.data)
        }
      }
    },
    //--------------------------------------
    updateItemInDataList(meta) {
      if(meta && this.myData && _.isArray(this.myData.list)) {
        this.myData.list = _.map(
          this.myData.list,
          it => it.id == meta.id ? meta : it)
      }
    },
    //--------------------------------------
    // Reloading
    //--------------------------------------
    async reloadData() {
      if(this.dataHome) {
        this.myStatus.reloading = true
        let hmph = Ti.Util.appendPath(this.dataHome, this.dirName)
        //console.log("reloadData:", hmph)
        let home = await Wn.Io.loadMeta(hmph)
        // Guard
        if(!home) {
          this.myDataDirObj = null
          this.myData = {}
        }
        // Update data
        else {
          let reo = await Wn.Io.loadChildren(home)
          this.myDataDirObj = home
          this.myData = reo
        }
        _.delay(()=>{
          this.myStatus.reloading = false
        }, 100)
      }
      // Reset
      else {
        this.myDataDirObj = null
        this.myData = {}
      }
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  watch : {
    "dirName" : {
      handler : "reloadData",
      immediate : true
    },
    "dataHome" : {
      handler : "reloadData",
      immediate : true
    }
  },
  ///////////////////////////////////////////
  mounted : function() {
    this.$ThingManager.$files = this
  }
  ///////////////////////////////////////////
}
return _M;
;
})()
// ============================================================
// EXPORT 'wn-obj-picker.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/picker/wn-obj-picker.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data: () => ({
    "loading": false,
    "dragging": false,
    "skipReload": false,
    "myItems": []
  }),
  /////////////////////////////////////////
  props: {
    "empty": {
      type: Object,
      default: () => ({
        text: "i18n:no-selected",
        value: undefined
      })
    },
    "value": {
      type: [Object, String, Array],
      default: null
    },
    // raw value is WnObj
    // If declare the valueType
    // It will transform the WnObj
    // to relaitve value mode
    "valueType": {
      type: String,
      default: "idPath",
      validator: v => /^(obj|path|fullPath|idPath|id|nm|wnobj)$/.test(v)
    },
    // avaliable only when valueType=="obj"
    "valueKeys": {
      type: Array,
      default: () => [
        'id', 'nm', 'thumb', 'title', 'brief', 'mime', 'tp', 'sha1', 'len',
        'href', 'newtab'
      ]
    },
    "dict": {
      type: [String, Ti.Dict],
      default: undefined
    },
    "base": {
      type: [Object, String],
      default: "~"
    },
    "asThingSet": {
      type: Boolean,
      default: false
    },
    "multi": {
      type: Boolean,
      default: false
    },
    // Key of meta to show as text
    // If undefined, use "title -> nm"
    "titleBy": {
      type: [String, Array, Function],
      default: null
    },
    "filterBy": {
      type: [Object, String, Function, Boolean],
      default: () => ({
        "race": ["isEqual", "FILE"]
      })
    },
    "titleEditable": {
      type: Boolean,
      default: true
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-multi": this.multi,
        "is-single": !this.multi,
        "is-dragging": this.dragging
      })
    },
    //--------------------------------------
    ItemTitleKey() {
      if (_.isFunction(this.titleBy)) {
        return this.titleBy()
      }
      return this.titleBy
    },
    //--------------------------------------
    DisplayItems() {
      let exposeHidden = _.get(Ti.App(this).$state(), "viewport/exposeHidden")
      exposeHidden = Ti.Util.fallback(exposeHidden, false)
      let list = []
      for (let i = 0; i < this.myItems.length; i++) {
        let obj = this.myItems[i]
        let it = Wn.Util.getObjThumbInfo(obj, {
          titleKey: this.ItemTitleKey,
          exposeHidden,
          badges: {
            NW: ["href", "fas-link"],
            SE: ["newtab", "fas-external-link-alt"]
          }
        })
        it.index = i;
        it._key = `${it.id}_${it.index}`
        it.removeIcon = "im-x-mark"
        if (this.titleEditable) {
          it.onTitle = (payload) => {
            this.OnEditItem(payload)
          }
        }
        //it.removeIcon = "im-trash-can"
        list.push(it)
      }
      return list
    },
    //--------------------------------------
    FirstItem() {
      return _.first(this.myItems)
    },
    //--------------------------------------
    hasItems() {
      return !_.isEmpty(this.myItems)
    },
    //--------------------------------------
    theChooseIcon() {
      return _.isEmpty(this.myItems) ? this.chooseIcon : null
    },
    //--------------------------------------
    Dict() {
      if (this.dict) {
        // Already Dict
        if (this.dict instanceof Ti.Dict) {
          return this.dict
        }
        // Get back
        let { name } = Ti.DictFactory.explainDictName(this.dict)
        return Ti.DictFactory.CheckDict(name)
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    async OnPickItem() {
      // Prepare result
      let objs;

      // ThingSet
      if (this.asThingSet) {
        let reo = await Wn.OpenThingManager(this.base, {
          multi: this.multi
        })
        objs = _.get(reo, "checked")
      }
      // Normal DIR
      else {
        let meta = this.FirstItem
        // Use base to open the folder
        // Then it should be auto-open the folder
        if (!meta || _.isEmpty(meta)) {
          meta = this.base || "~"
          if (_.isString(meta)) {
            meta = await Wn.Io.loadMeta(meta)
          }
        }
        // Open the parent folder of the current item
        else if (meta.pid) {
          meta = await Wn.Io.loadMeta(`id:${meta.pid}`)
        }
        // Reload 
        else {
          console.warn("WnObjPicker: Meta without pid", meta)
          meta = await Wn.Io.loadMeta(`id:${meta.id}`)
        }

        // Eval Filter
        //console.log("hahha")
        let filter;
        if (this.filterBy) {
          filter = Ti.AutoMatch.parse(this.filterBy)
        }

        // Pick objs
        objs = await Wn.OpenObjSelector(meta, {
          multi: this.multi,
          selected: this.myItems,
          filter,
          titleBy: this.ItemTitleKey
        })
      }

      // user cancel
      if (_.isEmpty(objs)) {
        return
      }

      // format value
      let items;
      if (this.multi) {
        items = _.concat(this.myItems, objs)
      }
      // Single value
      else {
        items = objs
      }

      this.notifyChange(items)
    },
    //--------------------------------------
    OnClickItemsCon() {
      this.OnPickItem()
    },
    //--------------------------------------
    OnRemoveItem({ id, index } = {}) {
      let items = []
      for (let i = 0; i < this.myItems.length; i++) {
        let it = this.myItems[i]
        if (index != i) {
          items.push(it)
        }
      }
      this.notifyChange(items)
    },
    //--------------------------------------
    OnClearItems() {
      this.notifyChange([])
    },
    //--------------------------------------
    async OnEditItem({ index }) {
      let it = this.myItems[index]

      let reo = await Ti.App.Open({
        title: "i18n:edit",
        width: 640,
        height: 480,
        result: _.pick(it, "title", "brief", "href", "newtab"),
        model: { prop: "data", event: "change" },
        comType: "ti-form",
        comConf: {
          fields: [
            {
              title: "i18n:title",
              name: "title",
              comType: "ti-input"
            },
            {
              title: "i18n:brief",
              name: "brief",
              comType: "ti-input"
            },
            {
              title: "i18n:href",
              name: "href",
              comType: "ti-input"
            },
            {
              title: "i18n:newtab",
              name: "newtab",
              type: "Boolean",
              comType: "ti-toggle"
            }
          ]
        }
      })

      //console.log(reo)
      // User Cancel
      if (_.isUndefined(reo)) {
        return
      }

      it = _.cloneDeep(it)
      it.title = reo.title
      it.brief = reo.brief
      it.href = reo.href
      it.newtab = reo.newtab

      let items = _.cloneDeep(this.myItems)
      items.splice(index, 1, it)
      this.myItems = items
      this.skipReload = true

      this.notifyChange()
      _.delay(() => {
        this.skipReload = false
      }, 100)
    },
    //--------------------------------------
    notifyChange(items = this.myItems) {
      let value = null;
      let keys = this.valueKeys
      if (this.multi) {
        value = []
        for (let it of items) {
          let v = Wn.Io.formatObjPath(it, this.valueType, keys)
          value.push(v)
        }
      }
      // Single value
      else if (!_.isEmpty(items)) {
        value = Wn.Io.formatObjPath(items[0], this.valueType, keys)
      }

      this.$notify("change", value)
    },
    //--------------------------------------
    switchItem(fromIndex, toIndex) {
      if (fromIndex != toIndex) {
        let items = _.cloneDeep(this.myItems)
        Ti.Util.moveInArray(items, fromIndex, toIndex)
        this.myItems = items
        this.notifyChange()
      }
    },
    //--------------------------------------
    initSortable() {
      if (this.multi && this.$refs.itemsCon) {
        new Sortable(this.$refs.itemsCon, {
          animation: 300,
          filter: ".as-empty-item",
          onStart: () => {
            this.dragging = true
          },
          onEnd: ({ oldIndex, newIndex }) => {
            this.dragging = false
            this.skipReload = true
            this.switchItem(oldIndex, newIndex)
            _.delay(() => {
              this.skipReload = false
            }, 100)
          }
        })
      }
    },
    //--------------------------------------
    async reload() {
      this.loading = true
      await this.doReload()
      this.loading = false
    },
    //--------------------------------------
    async doReload() {
      let vals = this.value ? [].concat(this.value) : []
      let items = []
      // Loop each value item
      for (let it of vals) {
        let it2 = await this.reloadItem(it)
        if (it2)
          items.push(it2)
        if (!this.multi && items.length > 0)
          break
      }
      // Update value, it will be trigger the computed attribute
      // Then it will be passed to <ti-box> as formed list
      // the <ti-box> will show it reasonablely obey the `multi` options
      this.myItems = items
    },
    //--------------------------------------
    async reloadItem(it) {
      if (!it || _.isEmpty(it))
        return null
      // path id:xxxx
      if (_.isString(it)) {
        if (this.Dict) {
          return await this.Dict.getItem(it)
        }
        return await Wn.Io.loadMetaBy(it)
      }
      // object {id:xxx}
      else if (it.id) {
        // let obj = await Wn.Io.loadMetaById(it.id)
        // obj.title = it.title || obj.title || obj.nm
        // obj.href = it.href
        // obj.newtab = it.newtab
        return it
      }
      // Unsupported form of value
      else {
        throw Ti.Err.make("e-wn-obj-picker-unsupported-value-form", it)
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "value": function (newVal, oldVal) {
      if (!_.isEqual(newVal, oldVal) && !this.skipReload) {
        this.reload()
      }
    },
    "hasItems": function (newVal, oldVal) {
      if (newVal && !oldVal) {
        this.$nextTick(() => {
          this.initSortable()
        })
      }
    }
  },
  /////////////////////////////////////////
  mounted: async function () {
    await this.reload()
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'www-mod-page.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/lib/www/mod/page/www-mod-page.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////
  getters: {
    //--------------------------------------------
    wxJsApiList(state, getters, rootState) {
      let { wxJsApiList } = state
      let { wxJsGlobalApiList } = rootState
      let list = []
      if (wxJsApiList) {
        // If page redefine wxJsApiList=[] it will cancel js-sdk init
        if (!_.isEmpty(wxJsApiList)) {
          let [a0, ...apis] = wxJsApiList
          if ("+" == a0) {
            if (!_.isEmpty(wxJsGlobalApiList)) {
              list.push(...wxJsGlobalApiList)
            }
            list.push(...apis)
          } else {
            list.push(...wxJsApiList)
          }
        }
      }
      // Use wxJsGlobalApiList defined in site
      else if (!_.isEmpty(wxJsGlobalApiList)) {
        list.push(...wxJsGlobalApiList)
      }
      return list
    },
    //--------------------------------------------
    // 似乎直接采用 pageUri 就好，这个木有必要了
    // 观察一段时间木有用就删了吧
    // pageLink({href, params, anchor}) {
    //   let link = [href]
    //   // Join QueryString
    //   if(!_.isEmpty(params)) {
    //     let qs = []
    //     _.forEach(params, (v, k)=>{
    //       if(!Ti.Util.isNil(v)) {
    //         qs.push(`${k}=${encodeURIComponent(v)}`)
    //       }
    //     })
    //     if(!_.isEmpty(qs)) {
    //       link.push(`?${qs.join("&")}`)
    //     }
    //   }
    //   // Join Anchor
    //   if(anchor) {
    //     link.push(`#${anchor}`)
    //   }
    //   return link.join("")
    // },
    //--------------------------------------------
    // Merget page api and the site api
    pageApis(state, getters, rootState, rootGetters) {
      return Ti.WWW.hydrateApi({
        base: rootState.apiBase,
        siteApis: rootState.apis,
        apis: state.apis
      })
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  mutations: {
    //--------------------------------------------
    set(state, all) {
      _.assign(state, all)
    },
    //--------------------------------------------
    setActiveElement(state, el) {
      state.activeElement = el
    },
    //--------------------------------------------
    setTitle(state, title) {
      state.title = title
    },
    //--------------------------------------------
    setPath(state, path) {
      state.path = path
    },
    //--------------------------------------------
    setPath(state, path) {
      state.path = path
    },
    //--------------------------------------------
    setPageUri(state, uri) {
      state.pageUri = uri
    },
    //--------------------------------------------
    setParams(state, params) {
      state.params = params
    },
    //--------------------------------------------
    setModuleNames(state, names = []) {
      state.moduleNames = names
    },
    //--------------------------------------------
    updateParams(state, { key, value } = {}) {
      //console.log("updateParams", { key, value })
      // kay-value pair is required
      if (!key || _.isUndefined(value)) {
        return
      }
      let vobj = _.set({}, key, value)
      state.params = _.assign({}, state.params, vobj)
    },
    //--------------------------------------------
    mergeParams(state, params) {
      if (!_.isEmpty(params) && _.isPlainObject(params)) {
        state.params = _.merge({}, state.params, params)
      }
    },
    //--------------------------------------------
    setData(state, data) {
      state.data = data
    },
    //--------------------------------------------
    removeDataKeys(state, keys = []) {
      let ks = _.concat(keys)
      let data = _.cloneDeep(state.data)
      for (let k of ks) {
        if (k) {
          _.set(data, k, undefined)
        }
      }
      state.data = data
    },
    //--------------------------------------------
    updateData(state, { key, value } = {}) {
      // kay-value pair is required
      if (!key || _.isUndefined(value)) {
        return
      }
      let vobj = _.set({}, key, value)
      state.data = _.assign({}, state.data, vobj)
    },
    //--------------------------------------------
    updateDataBy(state, { key, value }) {
      if (!key || _.isUndefined(value)) {
        return
      }
      let data = _.cloneDeep(state.data)
      _.set(data, key, value)
      state.data = data
    },
    //--------------------------------------------
    inserToDataList(state, { key, item, pos = 0 } = {}) {
      // Guard
      if (Ti.Util.isNil(item)) {
        return;
      }
      // Find the list
      let list = _.get(state.data, key)
      if (!_.isArray(list))
        return

      // Insert the data
      Ti.Util.insertToArray(list, pos, item)
    },
    //--------------------------------------------
    updateToDataList(state, { key, item, idBy = "id" } = {}) {
      // Guard
      if (Ti.Util.isNil(item)) {
        return;
      }
      // Find the list
      let list = _.get(state.data, key)
      if (!_.isArray(list))
        return

      // Replace item
      let list2 = _.map(list, li => {
        let id0 = _.get(li, idBy)
        let id1 = _.get(item, idBy)
        if (id0 == id1)
          return item
        return li
      })
      _.set(state.data, key, list2)
    },
    //--------------------------------------------
    mergeToDataList(state, { key, value } = {}) {
      // Guard
      if (Ti.Util.isNil(value)) {
        return;
      }
      // Find the list
      let list = _.get(state.data, key)
      if (!_.isArray(list))
        return

      // Replace item
      let list2 = _.map(list, li => {
        return _.assign(li, value)
      })
      _.set(state.data, key, list2)
    },
    //--------------------------------------------
    mergeData(state, data) {
      if (!_.isEmpty(data) && _.isPlainObject(data)) {
        state.data = _.merge({}, state.data, data)
      }
    },
    //--------------------------------------------
    setLayout(state, layout) {
      state.layout = layout
    },
    //--------------------------------------------
    setShown(state, shown) {
      state.shown = _.assign({}, state.shown, shown)
    },
    //--------------------------------------------
    // 0: before reload setting -> @page:init
    // 1: after reload setting  -> @page:prepare
    // 2: after preload data    -> @page:ready
    setReady(state, ready) {
      state.ready = ready
    },
    //--------------------------------------------
    // Page finger to indicate the page changed
    // watch the filter can auto update document title
    updateFinger(state) {
      state.LOG("updateFinger")
      let ss = [state.path, state.params, state.anchor, state.data]
      let sha1 = Ti.Alg.sha1(ss)
      state.finger = sha1
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  actions: {
    //--------------------------------------------
    showBlock({ commit }, name) {
      commit("setShown", { [name]: true })
    },
    //--------------------------------------------
    hideBlock({ commit }, name) {
      commit("setShown", { [name]: false })
    },
    //--------------------------------------------
    resetData({ commit }, data = {}) {
      commit("setData", data)
    },
    //--------------------------------------------
    resetDataByKey({ state, commit }, data = {}) {
      if (!_.isEmpty(data)) {
        let d2 = _.cloneDeep(state.data)
        _.forEach(data, (v, k) => {
          _.set(d2, k, v);
        })
        commit("setData", d2)
      }
    },
    //--------------------------------------------
    changeParams({ commit }, args) {
      let params = Ti.Util.merge({}, args)
      commit("mergeParams", params)
      commit("updateFinger")
    },
    //--------------------------------------------
    pickDataTo({ commit, state }, {
      from,  /* source key in data, point to a list */
      to,    /* target key in data */
      by,    /* AutoMatch */
      dft = null
    } = {}) {
      state.LOG({ from, to, by })
      let val = dft
      if (!_.isEmpty(by)) {
        let am = Ti.AutoMatch.parse(by)
        let list = _.get(state.data, from)
        if (_.isArray(list) && !_.isEmpty(list)) {
          for (let li of list) {
            if (am(li)) {
              val = li
              break
            }
          }
        }
      }
      commit("updateDataBy", {
        key: to,
        value: val
      })
    },
    //--------------------------------------------
    /***
     * Usage:
     * 
     * - OBJ: `changeData({KEY1:VAL1, KEY2:VAL2})
     * - Array: `changeData([{KEY1:VAL1}, {KEY2:VAL2}])
     * 
     * @param key{String} : the field name in "page.data", falsy for whole data
     * @param args{Object|Array} : `{name,value}` Object or Array
     */
    changeData({ state, commit }, args) {
      state.LOG("changeData", args)
      let data = Ti.Util.merge({}, args)
      commit("mergeData", data)
    },
    //--------------------------------------------
    changeDataBy({ state, commit }, payload) {
      state.LOG("changeDataBy", payload)
      commit("updateDataBy", payload)
    },
    //--------------------------------------------
    insertItemToData({ commit }, payload) {
      commit("inserToDataList", payload)
    },
    //--------------------------------------------
    updateItemToData({ commit }, payload) {
      console.log("updateItemToData", payload)
      commit("updateToDataList", payload)
    },
    //--------------------------------------------
    mergeItemToData({ commit }, payload) {
      state.LOG("mergeItemToData", payload)
      commit("mergeToDataList", payload)
    },
    //--------------------------------------------
    removeItemInDataById({ state, commit }, { key, id, idKey = "id" } = {}) {
      console.log("removeItemInDataById", { key, id, idKey })
      // Guard
      if (Ti.Util.isNil(id))
        return

      // Find the list
      let list = _.get(state.data, key)
      if (!_.isArray(list))
        return

      // Remove the data
      let list2 = _.filter(list, li => li[idKey] != id)
      commit("updateDataBy", {
        key, value: list2
      })
    },
    //--------------------------------------------
    /***
     * Mutate the data fields in params `offset`, each field
     * should be `Number`
     * 
     * @param offsets{Object} - the offset number set. "a.b.c" suppored
     */
    shiftData({ state, commit }, offsets = {}) {
      if (!_.isEmpty(offsets) && _.isPlainObject(offsets)) {
        let d2 = {}
        // Do shift
        Ti.Util.walk(offsets, {
          leaf: (off, path) => {
            let val = _.get(state.data, path)
            // Offset
            if (_.isNumber(val) && _.isString(off) && /^[+-][0-9.]+$/.test(off)) {
              _.set(d2, path, val + off * 1)
            }
            // Others Replace
            else {
              _.set(d2, path, off)
            }
          }
        })
        // Do Merge
        commit("mergeData", d2)
      }
    },
    //--------------------------------------------
    /***
     * Assert page data under a group of restrictions 
     */
    assertPage({ rootState, dispatch }, { checkList = [], fail = {} } = {}) {
      // Prepare check result
      let assertFail = false
      // Loop the checkList
      for (let cl of checkList) {
        let val = _.get(rootState, cl.target)
        if (!Ti.Validate.checkBy(cl.assert, val)) {
          assertFail = true
          break
        }
      }
      state.LOG(assertFail)
      // Do Fail
      if (assertFail && fail.action) {
        dispatch("doAction", fail, { root: true })
      }
    },
    //--------------------------------------------
    async initWeixinJSSDK({ rootState, state, getters, dispatch }) {
      // 站点未配置 JS-SDK
      let { wxJsSDK } = rootState
      if (!wxJsSDK) {
        return
      }

      // 本页无需js-api 也不用加载了
      let jsApiList = getters.wxJsApiList
      if (_.isEmpty(jsApiList)) {
        state.LOG("initWeixinJSSDK Not Need: Empty jsApiList")
        return
      }

      if (!window.wx && !_.isFunction(wx.conifg)) {
        console.error("!WeiXin JS-SDK Not Installed Yet!!!")
        return
      }
      // 获取页面 URL
      let url = window.location.href
      let pos = url.lastIndexOf('#')
      if (pos > 0) {
        url = url.substring(0, pos)
      }
      state.LOG("initWeixinJSSDK", url)
      // 获取配置对象
      let reo = await dispatch("doApi", {
        key: wxJsSDK,
        params: { url }
      })

      //初始化 jssdk
      let wxConfig = { ...reo, jsApiList }
      wx.ready(() => {
        state.LOG("initWeixinJSSDK: SDK is ready")
        window.wxJSApiReady = true
        dispatch("invokeAction", { name: "@wxjsapi:ready" }, { root: true })
      })
      wx.error((res) => {
        state.LOG("initWeixinJSSDK: SDK init failed", res)
      })
      state.LOG("initWeixinJSSDK: config", wxConfig)
      wx.config(wxConfig)
    },
    //--------------------------------------------
    async scrollToTop({ state }) {
      Ti.Be.ScrollWindowTo({ y: 0 })
    },
    //--------------------------------------------
    async doApi({ state, getters, commit, dispatch }, {
      key,        // The Api Key
      params = {},  // params will override the defaults
      vars = {},
      body = null,
      ok, fail
    } = {}) {
      //.....................................
      let api = _.get(getters.pageApis, key)
      state.LOG("doApi", { key, api, params, vars, body })
      //.....................................
      // Guard
      if (!api) {
        return await Ti.Toast.Open("e.www.page.ApiNotFound: " + key, "warn");
      }
      //.......................................
      commit("setLoading", true, { root: true })
      let reo = await dispatch("__run_api", { api, params, vars, body, ok, fail })
      commit("setLoading", false, { root: true })

      return reo
    },
    //--------------------------------------------
    async showApiError({ }, {
      api, url, options, err, errText
    } = {}) {
      let msg = Ti.I18n.translate(errText)
      await Ti.Alert(msg, { type: "error" })
    },
    //--------------------------------------------
    //
    // Run One Page API
    //
    //--------------------------------------------
    async __run_api({ state, commit, dispatch, rootState }, {
      api,
      vars,
      params,
      headers,
      body,
      ok, fail }) {
      //.....................................  
      // Preset api result
      if (api.autoResetData) {
        let needResetData = true
        if (_.isString(api.autoResetData)) {
          let method = (api.method || "GET").toUpperCase()
          needResetData = method == api.autoResetData.toUpperCase()
        }
        if (needResetData) {
          let dc = { ...rootState, params, vars };
          let key = Ti.Util.explainObj(dc, api.dataKey);
          let rkey = Ti.Util.explainObj(dc, api.rawDataKey);
          commit("removeDataKeys", [key, rkey])
        }
      }
      //.....................................  
      // if (api && api.path == "obj/read") {
      //   console.log("page.__run_api", api);
      // }
      return await Ti.WWW.runApiAndPrcessReturn(rootState, api, {
        vars,
        params,
        headers,
        body,
        dispatch,
        ok, fail,
        mergeData: function (payload) {
          commit("mergeData", payload)
        },
        updateData: function (payload) {
          commit("updateData", payload)
        },
        doAction: async function (at) {
          await dispatch("doAction", at, { root: true })
        }
      })
    },
    //--------------------------------------------
    /***
     * Reload page data by given api keys
     */
    async reloadData({ state, commit, getters, dispatch, rootState }, keys = []) {
      state.LOG(" # -> page.reloadData", keys)
      //.......................................
      // The api list to reload
      let isAll = _.isEmpty(keys)
      let apis = _.filter(getters.pageApis, (api, k) => {
        // Auto preload
        if ((isAll && api.preload > 0) || _.indexOf(keys, k) >= 0) {
          if (api.preloadWhen) {
            return Ti.AutoMatch.test(api.preloadWhen, rootState)
          }
          return true
        }
        return false
      })
      //.......................................
      // Sort preload
      // apis.sort((a1, a2)=>{
      //   return a1.preload - a2.preload
      // })
      //.......................................
      // Mark Loading
      commit("setLoading", true, { root: true })
      //.......................................
      // Prepare the Promises
      let allApis = []
      for (let api of apis) {
        state.LOG("  # -> page.reloadData -> prepareApi", api)
        if (api.test && !Ti.AutoMatch.test(api.test, rootState)) {
          continue;
        }
        let test = Ti.Util.explainObj(rootState, api.explainTest)
        if (test && !Ti.AutoMatch.test(test, rootState)) {
          continue;
        }
        allApis.push(dispatch("__run_api", { api }))
      }
      //.......................................
      // Run all
      await Promise.all(allApis)
      //.......................................
      // Unmark loading
      commit("setLoading", false, { root: true })
      //.......................................
      // // Get return value
      // let reKeys = []
      // for(let api of apis) {
      //   reKeys.push(api.dataKey)
      // }
      // //.......................................
      // return _.pick(state.data, reKeys)
    },
    //--------------------------------------------
    explainData({ commit, state, rootState }, keys) {
      keys = keys || state.explainDataKey
      // Guard
      if (_.isEmpty(keys) || !_.isArray(keys))
        return
      // Explain one be one
      let data = {}
      for (let key of keys) {
        let val = _.get(state.data, key)
        let v2 = Ti.Util.explainObj(rootState, val)
        _.set(data, key, v2)
      }
      commit("mergeData", data)
    },
    //--------------------------------------------
    // update pageFinger and pageUri
    changeFingerAndUri({ commit, state, rootState }) {
      if (state.pageUriWithParams) {
        let base = rootState.base
        let link = Ti.Util.Link({
          url: state.href,
          params: state.params,
          ignoreNil: true
        })
        let uri = Ti.Util.appendPath(base, link.toString())
        commit("setPageUri", uri)
      }
      commit("updateFinger")
    },
    //--------------------------------------------
    /***
     * Reload whole page
     */
    async reload({ state, commit, dispatch, getters, rootGetters, rootState }, {
      path,
      anchor = null,
      params = {}
    } = {}) {
      state.LOG = () => { }
      //state.LOG = console.log
      state.LOG(" # -> page.reload", { path, params, anchor })
      state.LOG(" == routerList == ", rootGetters.routerList)
      let roInfo;
      //.....................................
      // Apply routerList
      for (let router of rootGetters.routerList) {
        roInfo = router(path)
        if (roInfo) {
          break
        }
      }
      if (!roInfo) {
        throw `Fail to find route for "${path}"`
      }
      //.....................................
      // Preload page data by router info
      let roDataKey;
      if (roInfo.preload) {
        let roApiName = roInfo.preload.apiName;
        roDataKey = roInfo.preload.dataKey;
        if (roApiName) {
          let roApi = _.get(rootGetters.globalApis, roApiName)
          let roParams = Ti.Util.explainObj(roInfo.context, roInfo.preload.params);
          let reo = await Ti.WWW.runApi(rootState, roApi, {
            params: roParams,
            dispatch
          })
          roInfo.context.resp = reo
        }
      }
      //.....................................
      // Explain the page Info
      let pinfo = Ti.Util.explainObj(roInfo.context, roInfo.page);
      //.....................................
      // The router declare "apiName", it will preload data
      // because the data will indicate the specific page json Path
      // Then the "path" template will 
      //.....................................
      if (!pinfo || !pinfo.path) {
        return await Ti.Toast.Open("Page ${path} not found!", {
          type: "error",
          position: "center",
          vars: { path }
        })
      }
      //.....................................
      // Notify: init
      state.LOG("@page:init ...")
      commit("setReady", 0)
      await dispatch("invokeAction", { name: "@page:init" }, { root: true })
      //.....................................
      // Load the page json
      let json = Ti.WWW.getSSRData("page-json", { as: "json" })
      if (!json) {
        let m = /^(.+)(\.html?)$/.exec(pinfo.path)
        let jsonPath = m ? m[1] : pinfo.path;
        jsonPath += ".json"
        json = await Ti.Load(`@Site:${jsonPath}`)
      }
      //.....................................
      let $store = TiWebApp.$store()
      //.....................................
      // Load page components
      let { components, extModules } = json
      let view = await TiWebApp.loadView({ components, extModules })
      state.LOG("loadView", view)
      //.....................................
      // Remove old moudle
      if (state.moduleNames) {
        for (let name of state.moduleNames) {
          $store.unregisterModule(name)
        }
      }
      //.....................................
      // Add new module
      if (!_.isEmpty(view.modules)) {
        // Append new
        let names = []
        for (let modName in view.modules) {
          let mod = view.modules[modName]
          $store.registerModule(modName, mod)
          names.push(modName)
        }
        commit("setModuleNames", names)
      }
      //.....................................
      // merge info
      if (anchor) {
        pinfo.anchor = anchor
      }
      pinfo.params = _.merge({}, pinfo.params, params)
      pinfo.path = pinfo.path || path
      pinfo.name = Ti.Util.getMajorName(pinfo.path)
      pinfo.href = path
      //.....................................
      // Update Path url
      let { pageUriWithParams, pageAnchorTo } = json
      pageUriWithParams = Ti.Util.fallback(
        pageUriWithParams,
        rootState.pageUriWithParams,
        true)
      let base = rootState.base
      let link = Ti.Util.Link({
        url: path,
        params: pageUriWithParams ? params : null,
        anchor
      })
      pinfo.pageUri = Ti.Util.appendPath(base, link.toString())
      pinfo.pageUriWithParams = pageUriWithParams
      //.....................................
      let page = _.merge({
        "className": null,
        "title": null,
        "apis": {},
        "data": {},
        "contextMenu": Ti.Util.fallback(rootState.contextMenu, true),
        "forbidCopy": Ti.Util.fallback(rootState.forbidCopy, false),
        "bodyStyle": rootState.bodyStyle,
        "explainDataKey": [],
        "layout": {},
        "params": {},
        "shown": {},
        "schema": {},
        "actions": {}
      }, json, pinfo)
      //.....................................
      // Forbid copy content
      let preventContentCopy = function (evt) {
        evt.preventDefault()
      }
      if (page.forbidCopy) {
        document.body.addEventListener("copy", preventContentCopy, true)
        document.body.addEventListener("cut", preventContentCopy, true)
      } else {
        document.body.removeEventListener("copy", preventContentCopy, true)
        document.body.removeEventListener("cut", preventContentCopy, true)
      }
      //.....................................
      // Prepare anchor to data
      if (pageAnchorTo && anchor) {
        _.set(page, pageAnchorTo, anchor)
      }
      //.....................................
      // Update page 
      commit("set", page)
      state.LOG(" #### page.loaded", _.cloneDeep(page))
      //.....................................
      // Update page data by router api preload data
      if (roDataKey) {
        commit("updateData", {
          key: roDataKey,
          value: roInfo.context.resp.data
        })
      }
      //.....................................
      // Notify: Prepare
      state.LOG("@page:prepare ...")
      commit("setReady", 1)
      // 
      // Sometimes or offently, the @page:prepare will check the status
      // and maybe navTo to another page. Such as login protection.
      // So, we need remember the pageUri before "@page:prepare"
      // if it was changed after "@page:prepare", we need cancel the remian 
      // procedure, because other page will take over the rendering.
      //
      let beforePreparePageUri = state.pageUri
      await dispatch("invokeAction", { name: "@page:prepare" }, { root: true })
      //
      // Page Uri changed, the next procedure will not be necessary
      if (beforePreparePageUri != state.pageUri) {
        return
      }
      //.....................................
      // Conclude the api loading keys
      let { preloads, afterLoads } = Ti.WWW.groupPreloadApis(getters.pageApis, (k, api) => {
        return api.force || !roDataKey || roDataKey != k
      })
      state.LOG({ preloads, afterLoads })
      //.....................................
      // init: data
      for (let keys of preloads) {
        await dispatch("reloadData", keys)
      }
      //.....................................
      // 执行 dynamicPreload 这个是个高级方法，可以根据 state 尤其是data 段
      // 根据一个自定义函数生成一组api对象，交给 __run_api 去加载
      // 【缘起】在 zoo 应用，可以支持自定义布局，布局块包括数据展示方式和数据源路径
      // 因此无法在 api 段写死固定的加载参数，此时根据归档的字段（一个块数组）为，每个
      // 块生成独立数据加载api，在页面初始化的时候只调用一次，这是一个相对精巧的解决方案
      if (!_.isEmpty(state.dynamicPreloads)) {
        let dynpre = Ti.Util.explainObj(rootState, state.dynamicPreloads)
        if (_.isFunction(dynpre.factory)) {
          let dynapis = dynpre.factory(dynpre.payload)
          if (!_.isEmpty(dynapis)) {
            let dapis = Ti.WWW.hydrateApi({
              base: rootState.apiBase,
              siteApis: rootState.apis,
              apis: dynapis,
              joinSiteGlobal: false
            })
            let dapiLoad = []
            for (let kapi of _.keys(dapis)) {
              let dapi = dapis[kapi]
              dapiLoad.push(dispatch("__run_api", { api: dapi }))
            }
            await Promise.all(dapiLoad)
          }
        }
      }
      //.....................................
      // explain data
      await dispatch("explainData")
      //.....................................
      // Scroll window to top
      dispatch("scrollToTop")
      //.....................................
      await dispatch("initWeixinJSSDK")
      //.....................................
      // Notify: Ready
      state.LOG("@page:ready ...")
      commit("setReady", 2)
      await dispatch("invokeAction", { name: "@page:ready" }, { root: true })
      //.....................................
      // Load the after page api
      if (!_.isEmpty(afterLoads.length)) {
        await dispatch("reloadData", afterLoads)
      }
      //.....................................
      commit("updateFinger")
    }
    //--------------------------------------------
  }
  ////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-gui-block.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/gui/block/ti-gui-block.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////
  inject: ["$gui"],
  /////////////////////////////////////////
  data: () => ({
    myRect: undefined
  }),
  /////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "type": {
      type: String,
      default: null,
      validator: (v) => {
        return Ti.Util.isNil(v) || /^(cols|rows|tabs)$/.test(v);
      }
    },
    "name": {
      type: String,
      default: null
    },
    "body": {
      type: [String, Object],
      default: null
    },
    "icon": {
      type: [String, Object],
      default: null
    },
    "title": {
      type: String,
      default: null
    },
    "embedIn": {
      type: String,
      default: null,
      validator: (v) => /^(panel|rows|cols|tabs|grid)$/.test(v)
    },
    "blocks": {
      type: Array,
      default: () => []
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "actions": {
      type: Array,
      default: () => []
    },
    "actionStatus": {
      type: Object,
      default: () => ({})
    },
    "actionVars": {
      type: [Object, Function]
    },
    "comClass": {
      type: String,
      default: undefined
    },
    "overflow": {
      type: String,
      default: undefined,
      validator: (v) => _.isUndefined(v) || /^(auto|none|fill|cover)$/.test(v)
    },
    "flex": {
      type: String,
      default: undefined,
      validator: (v) =>
        _.isUndefined(v) || /^(nil|auto|grow|shrink|both|none)$/.test(v)
    },
    "order": {
      type: Number
    },
    // TODO 这个属性是干啥的？ 有点忘记了，好像没用
    "captureEvents": {
      type: Object,
      default: () => ({})
    },
    "resizeMode": {
      type: String
    },
    "adjacentMode": {
      type: String
    },
    "adjustBarAt": {
      type: String
    },
    "adjustIndex": {
      type: Array
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    // "gap": {
    //   type: Object
    // },
    "hideTitle": {
      type: Boolean,
      default: false
    },
    "mainStyle": {
      type: Object,
      default: undefined
    },
    "mainConClass": undefined,
    "mainConStyle": {
      type: Object,
      default: undefined
    },
    //-----------------------------------
    // Measure
    //-----------------------------------
    "size": {
      type: [String, Number],
      default: null
    },
    "minSize": {
      type: Number,
      default: 50
    },
    "schema": {
      type: Object,
      default: () => ({})
    },
    "shown": {
      type: Object,
      default: () => ({})
    },
    // Those 3 props for by-pass to sub-(cols/rows)
    "tabAt": undefined,
    "adjustable": undefined,
    "border": undefined,
    "keepCustomizedTo": undefined,
    "card": undefined,
    "outsideCardLayout": undefined
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      let fillParent =
        /^(tabs|panel)$/.test(this.embedIn) && "auto" != this.size;
      return this.getTopClass(
        {
          [`gui-block-${this.name}`]: this.name ? true : false,
          "is-show-header": this.isShowHeader,
          "is-hide-header": !this.isShowHeader,
          "ti-fill-parent":fillParent,
          "inside-nocard": this.card ? false : true
        },
        `is-flex-${this.FlexName}`
      );
    },
    //--------------------------------------
    TopStyle() {
      let css = {
        //..................................
        rows: () => ({
          height: this.BlockSize
        }),
        //..................................
        cols: () => ({
          width: this.BlockSize
        }),
        //..................................
        tabs: () => ({}),
        //..................................
        panel: () => ({})
        //..................................
      }[this.embedIn]();
      if (!Ti.Util.isNil(this.order)) {
        css.order = this.order;
      }
      return Ti.Css.toStyle(css);
    },
    //--------------------------------------
    hasAdjustBar() {
      return this.adjustBarAt && "none" != this.adjustBarAt;
    },
    //--------------------------------------
    MainStyle() {
      return Ti.Css.toStyle(this.mainStyle);
    },
    //--------------------------------------
    MainConClass() {
      let klass = {};
      if (!this.isFlexNil) {
        _.assign(klass, {
          "fill-parent": "fill" == this.TheOverflow,
          "cover-parent": "cover" == this.TheOverflow
        });
      }
      return Ti.Css.mergeClassName(klass, this.mainConClass);
    },
    //--------------------------------------
    MainConStyle() {
      return Ti.Css.toStyle(this.mainConStyle);
    },
    //--------------------------------------
    MainComponentClass() {
      return Ti.Css.mergeClassName(this.$gui.defaultComClass, this.comClass);
    },
    //--------------------------------------
    TheOverflow() {
      let ov = this.overflow || this.$gui.defaultOverflow || "auto";
      if ("auto" == ov) {
        if (this.isFlexNone) {
          return "fill";
        }
        if (/^(both|shrink)$/.test(this.FlexName)) {
          return "cover";
        }
      }
      return ov;
    },
    //--------------------------------------
    BlockSize() {
      let size = this.size;
      return /^(auto|stretch)$/.test(size) ? null : size;
    },
    //--------------------------------------
    FlexName() {
      let flex = this.flex || this.$gui.defaultFlex || "auto";
      if ("auto" == flex) {
        if ("stretch" == this.size || Ti.Util.isNil(this.size)) {
          return "both";
        }
        return "none";
      }
      return flex || "both";
    },
    //--------------------------------------
    isFlexNil() {
      return "nil" == this.FlexName;
    },
    //--------------------------------------
    isFlexNone() {
      return "none" == this.FlexName;
    },
    //--------------------------------------
    isShowHeader() {
      if (this.hideTitle || "tabs" == this.embedIn) {
        return false;
      }
      if (this.title || this.hasActions) {
        return true;
      }
      return false;
    },
    //--------------------------------------
    hasActions() {
      return !_.isEmpty(this.actions);
    },
    //--------------------------------------
    TheActionVars() {
      if (this.actionVars) {
        return () => {
          let ctx = {
            $main: this.$main(),
            state: Ti.App(this).$state()
          };
          return Ti.Util.explainObj(ctx, this.actionVars, {
            evalFunc: true
          });
        };
      }
    },
    //--------------------------------------
    TheCom() {
      //console.log("block TheCom", this.name)
      //....................................
      // Body -> Component
      if (this.body) {
        let com = _.isString(this.body) ? this.schema[this.body] : this.body;
        if (com) {
          let parent = this.schema[com.extends];
          let self = _.omit(com, "extends");
          com = _.merge({}, parent, self);
          return _.defaults(com, {
            comType: "ti-label",
            comConf: {}
          });
        }
      }
      //....................................
      // Sub GUI
      if (!_.isEmpty(this.blocks)) {
        let comType = `ti-gui-${this.type || "cols"}`;
        let comConf = {
          tabAt: this.tabAt,
          border: this.border,
          adjustable: this.adjustable,
          keepCustomizedTo: this.keepCustomizedTo,
          blocks: this.blocks,
          schema: this.schema,
          actionStatus: this.actionStatus,
          shown: this.shown,
          defaultFlex: this.defaultFlex,
          card: this.card,
          outsideCardLayout: this.outsideCardLayout
        };
        return {
          comType,
          comConf
        };
      }
      //....................................
    },
    //--------------------------------------
    isMinimumSize() {
      if (this.myRect) {
        if ("col-resize" == this.resizeMode) {
          return Math.floor(this.myRect.width) <= this.minSize;
        }
        if ("row-resize" == this.resizeMode) {
          return Math.floor(this.myRect.height) <= this.minSize;
        }
      }
    },
    //--------------------------------------
    isPrevMinimumSize() {
      if (this.adjustIndex && this.adjustIndex.length == 2) {
        let prevI = this.adjustIndex[0];
        return this.$parent.isBlockSizeMinimum(prevI);
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    __before_bubble({ name, args }) {
      if (this.name) {
        return {
          name: `${this.name}::${name}`,
          args
        };
      }
    },
    //--------------------------------------
    $main() {
      return _.last(this.$children);
    },
    //--------------------------------------
    OnResize() {
      if (_.isElement(this.$el)) {
        this.myRect = Ti.Rects.createBy(this.$el);
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "name": {
      handler: function (newVal, oldVal) {
        // Guard
        if (!this.$gui) return;
        // Unregister old
        if (oldVal) {
          this.$gui.unregisterBlock(oldVal);
        }
        // Register self
        if (newVal) {
          this.$gui.registerBlock(newVal, this);
        }
      },
      immediate: true
    },
    "size": {
      handler: function (newVal, oldVal) {
        if (newVal != oldVal) {
          this.OnResize();
        }
      },
      immediate: true
    }
  },
  //////////////////////////////////////////
  mounted() {
    Ti.Viewport.watch(this, {
      resize: () => {
        this.OnResize();
      }
    });
    this.OnResize();
  },
  //////////////////////////////////////////
  beforeDestroy: function () {
    Ti.Viewport.unwatch(this);
    if (this.name) {
      this.$gui.unregisterBlock(this.name);
    }
  }
  //////////////////////////////////////////
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'm-th-obj-mutations.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/th/obj/m-th-obj-mutations.mjs'] = (function(){
////////////////////////////////////////////////
function saveLocalBehavior(state, key, val) {
  if (state.lbkAt && !state.lbkOff) {
    // Ignore ?
    if (state.lbkIgnore && state.lbkIgnore(key)) {
      return;
    }
    // Save to local
    let be = Ti.Storage.local.getObject(state.lbkAt);
    be[key] = val;
    Ti.Storage.local.setObject(state.lbkAt, be);
  }
}
////////////////////////////////////////////////
const _M = {
  //----------------------------------------
  setModuleName(state, moduleName) {
    state.moduleName = moduleName;
  },
  //----------------------------------------
  setAutoQueryList(state, autoQueryList) {
    state.autoQueryList = autoQueryList;
  },
  //----------------------------------------
  setPvg(state, pvg) {
    state.pvg = pvg;
  },
  //----------------------------------------
  assignPvg(state, pvg) {
    let po = _.cloneDeep(state.pvg || {});
    _.assign(po, pvg);
    state.pvg = po;
  },
  //----------------------------------------
  setLoad(state, load = {}) {
    state.load = load;
  },
  //----------------------------------------
  assignLoad(state, load = {}) {
    let d = _.cloneDeep(state.load);
    _.assign(d, load);
    state.load = d;
  },
  //----------------------------------------
  setView(state, view) {
    state.view = view;
  },
  //----------------------------------------
  setLocalBehaviorKeepAt(state, keyAt) {
    state.localBehaviorKeepAt = keyAt;
  },
  //----------------------------------------
  explainLocalBehaviorKeepAt(state) {
    let keyAt = state.localBehaviorKeepAt;
    state.lbkAt = Ti.Util.explainObj(state, keyAt);
    state.lbkIgnore = Ti.AutoMatch.parse(state.localBehaviorIgnore);
    state.schemaBeIgnore = Ti.AutoMatch.parse(state.schemaBehaviorIgnore);
  },
  //----------------------------------------
  setLbkOff(state, off = true) {
    state.lbkOff = off;
  },
  setLbkOn(state, on = true) {
    state.lbkOff = !on;
  },
  //----------------------------------------
  assignExportSettings(state, settings) {
    let se = _.cloneDeep(state.exportSettings || {});
    _.assign(se, settings);
    state.exportSettings = se;
    let lse = _.pick(se, "mapping", "fields", "type", "mode", "scope", "expi");
    state.LOG("Keep Export Settings", lse);
    saveLocalBehavior(state, "exportSettings", lse);
  },
  //----------------------------------------
  setExportSettings(state, settings) {
    state.exportSettings = settings;
    let lse = _.pick(
      settings,
      "mapping",
      "fields",
      "type",
      "mode",
      "scope",
      "expi"
    );
    state.LOG("Keep Export Settings", lse);
    saveLocalBehavior(state, "exportSettings", lse);
  },
  //----------------------------------------
  assignImportSettings(state, settings) {
    let se = _.cloneDeep(state.importSettings || {});
    _.assign(se, settings);
    state.importSettings = se;
    let lse = _.pick(se, "mapping", "fields", "type", "mode", "scope", "expi");
    state.LOG("Keep Import Settings", lse);
    saveLocalBehavior(state, "exportSettings", lse);
  },
  //----------------------------------------
  setImportSettings(state, settings) {
    state.importSettings = settings;
    let lse = _.pick(
      settings,
      "mapping",
      "fields",
      "type",
      "mode",
      "scope",
      "expi"
    );
    state.LOG("Keep Import Settings", lse);
    saveLocalBehavior(state, "importSettings", lse);
  },
  //----------------------------------------
  setGuiShown(state, shown) {
    let guiShown = _.pickBy(shown, (v) => v);
    state.guiShown = guiShown;
    saveLocalBehavior(state, "guiShown", guiShown);
  },
  //----------------------------------------
  assignGuiShown(state, shown) {
    let shown2 = _.cloneDeep(state.guiShown);
    _.assign(shown2, shown);
    state.guiShown = _.pickBy(shown2, (v) => v);
    saveLocalBehavior(state, "guiShown", state.guiShown);
  },
  //----------------------------------------
  assignGuiShownNoKeep(state, shown) {
    let shown2 = _.cloneDeep(state.guiShown);
    _.assign(shown2, shown);
    state.guiShown = _.pickBy(shown2, (v) => v);
  },
  //----------------------------------------
  keepShownToLocal(state) {
    let shown = _.pickBy(state.guiShown, (v) => v);
    saveLocalBehavior(state, "guiShown", shown);
  },
  //----------------------------------------
  //
  // Thing Set
  //
  //----------------------------------------
  setThingSetId(state, thingSetId) {
    state.thingSetId = thingSetId;
  },
  //----------------------------------------
  setThingSet(state, oTs) {
    state.oTs = oTs;
  },
  //----------------------------------------
  //
  // Search
  //
  //----------------------------------------
  setFixedMatch(state, fm) {
    state.fixedMatch = _.cloneDeep(fm);
  },
  //----------------------------------------
  /*
  agg: {
    "$ResultKey": {
      ignore: "name",   // AutoMatch filterKey to ignore when agg
      by: "value=COUNT:id name=name name:DESC" // agg setting
    }
  }
  */
  setAgg(state, agg) {
    state.agg = _.cloneDeep(agg);
  },
  //----------------------------------------
  /*
  aggResult: {
    "$ResultKey": [{
        "value": 13,
        "name": "T111"
      }, {
        "value": 18,
        "name": "T109"
      }]
  }
  */
  setAggResult(state, { key, result = [] } = {}) {
    if (key) {
      let re = _.clone(state.aggResult);
      re[key] = result;
      state.aggResult = re;
    }
  },
  //----------------------------------------
  setAggQuery(state, aggQuery) {
    state.aggQuery = aggQuery;
  },
  //----------------------------------------
  setAggAutoReload(state, aggAutoReload) {
    state.aggAutoReload = aggAutoReload;
  },
  //----------------------------------------
  setFilter(state, filter) {
    state.filter = _.omitBy(filter, (v) => Ti.Util.isNil(v));
    saveLocalBehavior(state, "filter", filter);
  },
  //----------------------------------------
  assignFilter(state, filter) {
    let flt = _.assign({}, state.filter, filter);
    flt = _.omitBy(flt, (v) => Ti.Util.isNil(v));
    state.filter = flt;
    saveLocalBehavior(state, "filter", filter);
  },
  //----------------------------------------
  setSorter(state, sorter) {
    state.sorter = sorter;
    saveLocalBehavior(state, "sorter", sorter);
  },
  //----------------------------------------
  setThingObjKeys(state, thingObjKeys) {
    state.thingObjKeys = thingObjKeys;
  },
  //----------------------------------------
  setList(state, list) {
    state.list = list;
  },
  //----------------------------------------
  prependListItem(state, newItem) {
    Ti.Util.UpsertStateDataItemAt(state, newItem, -1, "..");
  },
  //----------------------------------------
  appendListItem(state, newItem) {
    Ti.Util.UpsertStateDataItemAt(state, newItem, 1, "..");
  },
  //----------------------------------------
  setListItem(state, newItem) {
    Ti.Util.UpsertStateDataItemAt(state, newItem, 0, "..");
  },
  //----------------------------------------
  mergeListItem(state, theItem) {
    Ti.Util.MergeStateDataItem(state, theItem, "..");
  },
  //----------------------------------------
  removeListItems(state, items = []) {
    Ti.Util.RemoveStateDataItems(state, items, "..");
  },
  //----------------------------------------
  listCancelAll(state) {
    state.currentId = null;
    state.checkedIds = {};
  },
  //----------------------------------------
  setCurrentId(state, currentId) {
    state.currentId = currentId;
    state.status = _.assign({}, state.status, {
      "hasCurrent": !Ti.Util.isNil(currentId)
    });
    saveLocalBehavior(state, "currentId", currentId);
  },
  //----------------------------------------
  setCheckedIds(state, checkedIds) {
    let ids;
    if (_.isArray(checkedIds)) {
      ids = {};
      _.forEach(checkedIds, (v) => (ids[v] = true));
    } else {
      ids = _.pickBy(checkedIds, (v) => v);
    }
    state.checkedIds = ids;
    state.status = _.assign({}, state.status, {
      "hasChecked": !_.isEmpty(ids)
    });
    saveLocalBehavior(state, "checkedIds", ids);
  },
  //----------------------------------------
  setPager(state, pager) {
    state.pager = pager;
    let pageSize = Ti.Util.getValue(state.pager, "pageSize", "pgsz") || 0;
    saveLocalBehavior(state, "pageSize", pageSize);
  },
  //----------------------------------------
  assignPager(state, pager) {
    let pg = _.cloneDeep(state.pager || {});
    _.forEach(pager, (v, k) => {
      if (!Ti.Util.isNil(v)) {
        pg[k] = v;
      }
    });
    state.pager = pg;
    let pageSize = Ti.Util.getValue(state.pager, "pageSize", "pgsz") || 0;
    saveLocalBehavior(state, "pageSize", pageSize);
  },
  //----------------------------------------
  //
  // Meta / Date
  //
  //----------------------------------------
  setCurrentMeta(state) {
    let currentId = state.currentId;
    state.LOG("setCurrentMeta", currentId);
    let hasCurrent = true;
    // Clear current meta
    if (Ti.Util.isNil(currentId) || _.isEmpty(state.list)) {
      hasCurrent = false;
    }
    // Find current meta
    else {
      hasCurrent = false;
      for (let it of state.list) {
        if (it.id == currentId) {
          state.meta = it;
          hasCurrent = true;
          break;
        }
      }
    }
    // Reset current/checkedIds
    if (!hasCurrent) {
      state.meta = null;
      state.currentId = null;
      state.checkedIds = {};
      state.status = _.assign({}, state.status, {
        "hasMeta": false,
        "hasCurrent": false,
        "hasChecked": false
      });
    }
  },
  //----------------------------------------
  setMeta(state, meta) {
    state.meta = meta;
  },
  //--------------------------------------------
  assignMeta(state, meta) {
    state.meta = _.assign({}, state.meta, meta);
  },
  //--------------------------------------------
  mergeMeta(state, meta) {
    state.meta = _.merge({}, state.meta, meta);
  },
  //----------------------------------------
  setContent(state, content) {
    state.LOG("setContent", content);
    if (content && !_.isString(content)) {
      content = JSON.stringify(content, null, "   ");
    }
    state.content = content;
  },
  //----------------------------------------
  setSavedContent(state, content) {
    state.LOG("setSavedContent", content);
    state.__saved_content = content;
  },
  //----------------------------------------
  setContentPath(state, contentPath) {
    //console.log("setContentPath", contentPath)
    state.contentPath = contentPath;
  },
  //----------------------------------------
  setContentType(state, contentType) {
    state.contentType = contentType;
  },
  //----------------------------------------
  setContentData(state, contentData) {
    state.contentData = contentData;
  },
  //----------------------------------------
  setStatus(state, status) {
    state.status = _.assign({}, state.status, status);
  },
  //----------------------------------------
  clearStatus(state) {
    state.status = {};
  },
  //----------------------------------------
  syncStatusChanged(state) {
    if (Ti.Util.isNil(state.content) && Ti.Util.isNil(state.__saved_content)) {
      state.status.changed = false;
    } else {
      state.status.changed = !_.isEqual(state.content, state.__saved_content);
    }
  },
  //----------------------------------------
  setFieldStatus(state, { name, type, text } = {}) {
    if (name) {
      let ukey = _.concat(name).join("-");
      Vue.set(state.fieldStatus, ukey, { type, text });
    }
  },
  //----------------------------------------
  clearFieldStatus(state, names = []) {
    // Clean All
    if (_.isEmpty(names)) {
      state.fieldStatus = {};
    }
    // Clear one
    else {
      state.fieldStatus = _.omit(state.fieldStatus, names);
    }
  },
  //----------------------------------------
  //
  // Files
  //
  //----------------------------------------
  setDataDirName(state, dirName) {
    state.dataDirName = dirName;
    saveLocalBehavior(state, "dataDirName", dirName);
  },
  setDataHome(state, dataHome) {
    state.dataHome = dataHome;
  },
  autoDataHome(state) {
    if (state.thingSetId && state.meta && state.meta.id) {
      state.dataHome = `id:${state.thingSetId}/data/${state.meta.id}/`;
    } else {
      state.dataHome = null;
    }
  },
  //----------------------------------------
  //
  // GUI Settings
  //
  //----------------------------------------
  setActionsPath(state, actionsPath) {
    state.actionsPath = actionsPath;
  },
  setLayoutPath(state, layoutPath) {
    state.layoutPath = layoutPath;
  },
  setSchemaPath(state, schemaPath) {
    state.schemaPath = schemaPath;
  },
  setMethodPaths(state, methodPaths) {
    state.methodPaths = methodPaths;
  },
  joinMethodPaths(state, methodPaths) {
    if (_.isArray(state.methodPaths)) {
      state.methodPaths = _.uniq(_.concat(state.methodPaths, methodPaths));
    } else {
      state.methodPaths = methodPaths;
    }
  },
  //----------------------------------------
  setThingActions(state, thingActions = {}) {
    state.thingActions = thingActions;
  },
  setLayout(state, layout = {}) {
    state.layout = layout;
  },
  setSchema(state, schema = {}) {
    state.schema = schema;
  },
  assignSchema(state, schema = {}) {
    state.schema = _.assign({}, state.schema, schema);
  },
  mergeSchema(state, schema = {}) {
    let sc = _.cloneDeep(state.schema);
    state.schema = _.merge(sc, schema);
  },
  setThingMethods(state, thingMethods = {}) {
    state.thingMethods = thingMethods;
  },
  assignThingMethods(state, thingMethods = {}) {
    state.thingMethods = _.assign({}, state.thingMethods, thingMethods);
  },
  //----------------------------------------
  //
  // Operations for dataDirFiles
  //
  //----------------------------------------
  setDataDirFiles(
    state,
    files = {
      list: [],
      pager: {}
    }
  ) {
    state.dataDirFiles = files;
  },
  //----------------------------------------
  setDataDirCurrentId(state, currentId) {
    state.dataDirCurrentId = currentId;
    saveLocalBehavior(state, "dataDirCurrentId", currentId);
  },
  //----------------------------------------
  setDataDirCheckedIds(state, checkedIds = {}) {
    let ids = _.pickBy(checkedIds, (v) => v);
    state.dataDirCheckedIds = ids;
    saveLocalBehavior(state, "dataDirCheckedIds", ids);
  },
  //----------------------------------------
  prependDataDirFile(state, newItem) {
    Ti.Util.UpsertStateDataItemAt(state, newItem, -1, "dataDirFiles");
  },
  //----------------------------------------
  appendDataDirFile(state, newItem) {
    Ti.Util.UpsertStateDataItemAt(state, newItem, 1, "dataDirFiles");
  },
  //----------------------------------------
  setDataDirFile(state, newItem) {
    Ti.Util.UpsertStateDataItemAt(state, newItem, 0, "dataDirFiles");
  },
  //----------------------------------------
  mergeDataDirFile(state, theItem) {
    Ti.Util.MergeStateDataDirFile(state, theItem, "dataDirFiles");
  },
  //----------------------------------------
  removeDataItems(state, items = []) {
    Ti.Util.RemoveStateDataItems(state, items, "dataDirFiles");
  },
  //----------------------------------------
  resetState(state) {
    _.assign(state, {
      "thingSetId": null,
      "oTs": null,
      "fixedMatch": {},
      "filter": {},
      "sorter": {
        "ct": -1
      },
      "thingObjKeys": null,
      "list": [],
      "currentId": null,
      "checkedIds": {},
      "pager": {
        "pn": 1,
        "pgsz": 50,
        "pgc": 0,
        "sum": 0,
        "skip": 0,
        "count": 0
      },
      "meta": null,
      "content": null,
      "__saved_content": null,
      "contentPath": [
        {
          "test": {
            "guiShown": {
              "content": true
            }
          },
          "path": "<self>"
        }
      ],
      "contentType": "<MIME>",
      "contentData": null,
      "dataHome": null,
      "dataDirName": null,
      "keepDataDirNameToLocal": true,
      "dataDirFiles": {
        "list": [],
        "pager": {
          "pn": 1,
          "pgsz": 50,
          "pgc": 0,
          "sum": 0,
          "skip": 0,
          "count": 0
        }
      },
      "dataDirCurrentId": null,
      "dataDirCheckedIds": {},
      "status": {
        "reloading": false,
        "doing": false,
        "saving": false,
        "deleting": false,
        "changed": false,
        "restoring": false,
        "hasChecked": false,
        "hasCurrent": true
      },
      "fieldStatus": {},
      "guiShown": {},
      "thingActions": null,
      "layout": {},
      "schema": {},
      "thingMethods": {}
    });
  }
  //----------------------------------------
};
return _M;;
})()
// ============================================================
// EXPORT 'ti-adaptlist-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/adaptlist/ti-adaptlist-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "meta": {
    type: Object,
    default: null
  },
  // {list:[], pager:{..}}
  "data": {
    type: [Object, Array],
    default: null
  },
  "currentId": {
    type: String,
    default: null
  },
  "checkedIds": {
    type: [Array, Object],
    default: undefined
  },
  "changedId": {
    type: String,
    default: null
  },
  "status": {
    type: Object,
    default: () => ({
      reloading: false
    })
  },
  "itemTitleKey": {
    type: String,
    default: "title|text|nm"
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  // Drop files to upload
  "droppable": {
    type: Boolean,
    default: true
  },
  // multi-selectable
  // effected when selectable is true
  "multi": {
    type: Boolean,
    default: true
  },
  "checkable": {
    type: Boolean,
    default: true
  },
  "blurable": {
    type: Boolean,
    default: true
  },
  "selectable": {
    type: Boolean,
    default: true
  },
  // aspect: list item spacing
  // `xs|sm|md|lg|xl`
  "spacing": {
    type: String,
    default: "sm"
  },
  "routers": {
    type: Object,
    default: () => ({
      "reload": "dispatch:main/reload"
    })
  },
  "listConf": {
    type: Object
  },
  "wallViewConf": {
    type: Object
  },
  "listViewConf": {
    type: Object
  },
  "tableViewConf": {
    type: Object
  },
  "acceptUpload": {
    type: [Array, String]
  },
  "exposeHidden": {
    type: Boolean,
  },
  "viewType": {
    type: String,
    default: "wall"
  },
  "avaViewTypes": {
    type: Array,
    default: () => ["wall", "table", "list"]
  },
  "listDisplay": {
    type: [Array, String, Object],
    default: () => ["@<thumb>", "title|nm::flex-auto", "nm::as-tip-block"]
  },
  "tableFields": {
    type: Array,
    default: () => ["title", "c", "g", "tp", "len", "lm"]
  },
  "moveToConf": {
    type: Object
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "rowNumberBase": {
    type: Number,
    default: undefined
  },
  "itemClassName": {
    type: String
  },
  "itemBadges": {
    type: [Object, Function]
  },
  "viewTypeIcons": {
    type: Object,
    default: () => ({
      "wall": "zmdi-view-module",
      "table": "zmdi-view-subtitles",
      "list": "zmdi-view-headline"
    })
  },
  "thumbBy": {
    type: Function
  },
  //-----------------------------------
  // Callback
  //-----------------------------------
  "beforeUpload": {
    type: Function
  },
  /**
   * Callback function:
   * ```
   * function(File, {
   *    target,
   *    progress: {loaded, current}
   * })
   * ```
   */
  "uploadBy": {
    type: Function
  },
  "onViewTypeChange": {
    type: Function,
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-transfer.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/transfer/ti-transfer.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////////
  data: () => ({
    myFilterValue: null,
    myOptionsData: [],
    can: {
      data: [],
      checkedIds: []
    },
    sel: {
      data: [],
      checkedIds: []
    },
    selIdMap: {},
    loading: true
  }),
  ///////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    },
    //------------------------------------------------
    Values() {
      return Ti.S.toArray(this.value)
    },
    //------------------------------------------------
    CanListComType() { return this.canComType || "ti-list" },
    SelListComType() { return this.selComType || "ti-list" },
    //------------------------------------------------
    CanListComConf() {
      return this.genComConf(this.canComConf, this.can)
    },
    SelListComConf() {
      return this.genComConf(this.selComConf, this.sel)
    },
    //------------------------------------------------
    SelActions() {
      return {
        items: [{
          name: "moveUp",
          type: "action",
          icon: "zmdi-long-arrow-up",
          action: () => {
            this.selMoveUp()
          }
        }, {
          name: "moveDown",
          type: "action",
          icon: "zmdi-long-arrow-down",
          action: () => {
            this.selMoveDown()
          }
        }]
      }
    },
    //------------------------------------------------
    FilterComConf() {
      return _.assign({
        trimed: true,
        width: "100%",
        prefixIcon: this.loading
          ? "fas-spinner fa-spin"
          : "zmdi-filter-list",
        placeholder: "i18n:filter",
        hover: ['prefixIcon', 'suffixText', 'suffixIcon'],
        loading: this.loading
      }, this.fltComConf)
    },
    //------------------------------------------------
    GetValueBy() {
      return it => this.Dict.getValue(it)
    },
    //------------------------------------------------
    ReverMapping() {
      if (this.mapping) {
        Ti.Util.reverMapping(this.mapping)
      }
    },
    //------------------------------------------------
    Dict() {
      // Customized
      if (this.options instanceof Ti.Dict) {
        return this.options
      }
      // Refer dict
      if (_.isString(this.options)) {
        let dictName = Ti.DictFactory.DictReferName(this.options)
        if (dictName) {
          return Ti.DictFactory.CheckDict(dictName)
        }
      }
      let query;
      if (_.isFunction(this.options)) {
        query = this.options
      }
      // Auto Create
      return Ti.DictFactory.CreateDict({
        data: this.options,
        query,
        getValue: Ti.Util.genGetter(this.valueBy || "value"),
        getText: Ti.Util.genGetter(this.textBy || "text|name"),
        getIcon: Ti.Util.genGetter(this.textBy || "icon")
      })
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods: {
    //---------------------------------------------------
    OnCanListSelected({ checkedIds }) {
      this.can.checkedIds = Ti.Util.truthyKeys(checkedIds)
    },
    //---------------------------------------------------
    OnSelListSelected({ checkedIds }) {
      this.sel.checkedIds = Ti.Util.truthyKeys(checkedIds)
    },
    //---------------------------------------------------
    OnClickHeadChecker(list) {
      let { data, checkedIds } = list
      // All -> none
      if (data.length == checkedIds.length) {
        list.checkedIds = []
      }
      // Others to All
      else {
        let idMap = this.rebuildIdMap(data)
        list.checkedIds = Ti.Util.truthyKeys(idMap)
      }
    },
    //---------------------------------------------------
    async OnFilterChanged(val) {
      //console.log("OnFilterChanged", val)
      this.myFilterValue = val
      this.myOptionsData = await this.Dict.queryData(val)
      this.evalShownCanList()
    },
    //---------------------------------------------------
    GetHeadCheckerIcon({ data, checkedIds }) {
      if (data.length > 0) {
        // All
        if (data.length == checkedIds.length) {
          return "fas-check-square"
        }
        // Partally
        if (checkedIds.length > 0) {
          return "fas-minus-square"
        }
      }
      return "far-square" // none
    },
    //---------------------------------------------------
    // Core Methods
    //---------------------------------------------------
    canListToSel() {
      // Guard
      if (_.isEmpty(this.can.checkedIds))
        return
      // Assign
      let { src, tag } = this.assignToList(this.can, this.sel)
      this.can = src
      this.sel = tag
    },
    //---------------------------------------------------
    selListToCan() {
      // Guard
      if (_.isEmpty(this.sel.checkedIds))
        return
      // Assign
      let { src, tag } = this.assignToList(this.sel, this.can)
      this.can = tag
      this.sel = src
    },
    //---------------------------------------------------
    selMoveUp() {
      let {
        remains, checks, minIndex, maxIndex, checkedIds
      } = this.evalTheList(this.sel)
      if (!_.isEmpty(checks) && minIndex > 0) {
        Ti.Util.insertToArray(remains, minIndex - 1, ...checks)
        this.sel = {
          data: remains,
          checkedIds
        }
      }
    },
    //---------------------------------------------------
    selMoveDown() {
      let {
        remains, checks, minIndex, maxIndex, checkedIds
      } = this.evalTheList(this.sel)
      if (!_.isEmpty(checks)) {
        if (maxIndex < remains.length) {
          maxIndex++
        }
        Ti.Util.insertToArray(remains, maxIndex, ...checks)
        this.sel = {
          data: remains,
          checkedIds
        }
      }
    },
    //---------------------------------------------------
    // Utility
    //---------------------------------------------------
    // Eval the can/sel List 
    evalTheList(list = {}) {
      let remains = []
      let checks = []
      let checkedIds = []
      let idMap = {}
      let minIndex = list.data.length
      let maxIndex = -1
      // Build ID map
      _.forEach(list.checkedIds, id => {
        idMap[id] = true
      })
      // Eval checked and remains
      _.forEach(list.data, (li, index) => {
        let id = this.GetValueBy(li)
        if (idMap[id]) {
          minIndex = Math.min(index, minIndex)
          maxIndex = Math.max(index, maxIndex)
          checkedIds.push(id)
          checks.push(li)
        } else {
          remains.push(li)
        }
      })
      // Done for eval
      return {
        remains, checks,
        minIndex,
        maxIndex: maxIndex - checks.length + 1,
        checkedIds
      }
    },
    //---------------------------------------------------
    assignToList({ data, checkedIds }, ta) {
      // Make ids map
      let ids = {}
      _.forEach(checkedIds, v => ids[v] = true)
      // pick remove list
      let remains = []
      let joins = []
      _.forEach(data, it => {
        let itV = this.Dict.getValue(it)
        if (ids[itV]) {
          joins.push(it)
        } else {
          remains.push(it)
        }
      })
      // Merge checked ids
      _.forEach(ta.checkedIds, v => ids[v] = true)
      // Join to new list
      return {
        src: {
          data: remains, checkedIds: []
        },
        tag: {
          data: _.concat(ta.data, joins),
          checkedIds: []
        }
      }
    },
    //---------------------------------------------------
    genComConf(comConf, { data, checkedIds }) {
      return _.assign({
        idBy: this.GetValueBy,
        display: this.display || "text"
      }, comConf, {
        data, checkedIds,
        multi: true,
        checkable: true,
        puppetMode: true,
        autoCheckCurrent: false,
      })
    },
    //---------------------------------------------------
    evalShownCanList() {
      let list = []
      _.forEach(this.myOptionsData, it => {
        let itV = this.Dict.getValue(it)
        //console.log(itV)
        if (!this.selIdMap[itV]) {
          list.push(it)
        }
      })
      this.can.data = list
      this.can.checkedIds = []
    },
    //---------------------------------------------------
    async reloadCanList() {
      //console.log("reloadCanList")
      this.loading = true
      this.myOptionsData = await this.Dict.queryData(this.myFilterValue)
      this.evalShownCanList()
      this.loading = false
    },
    //---------------------------------------------------
    async reloadSelList(vals = this.Values) {
      //console.log("reloadSelList")
      this.loading = true
      let list = []
      for (let val of vals) {
        let v = this.evalValue(val)
        let it = await this.Dict.getItem(v)
        if (it) {
          list.push(it)
        } else {
          list.push(v)
        }
      }
      this.sel = {
        data: list,
        checkedIds: _.get(this.sel, "checkedIds") || []
      }
      this.loading = false
    },
    //---------------------------------------------------
    rebuildIdMap(data) {
      let ids = {}
      _.forEach(data, it => {
        let itV = this.Dict.getValue(it)
        ids[itV] = true
      })
      return ids
    },
    //---------------------------------------------------
    rebuildSelIdMap() {
      this.selIdMap = this.rebuildIdMap(this.sel.data)
    },
    //---------------------------------------------------
    evalValue(val) {
      // Guard
      if (Ti.Util.isNil(val)) {
        return val
      }
      // Cases
      return ({
        id: v => v,
        obj: v => {
          if (this.ReverMapping) {
            v = Ti.Util.translate(v, this.ReverMapping)
          }
          return _.get(v, this.idBy)
        },
        item: v => {
          if (this.ReverMapping) {
            v = Ti.Util.translate(v, this.ReverMapping)
          }
          return _.get(v, "value")
        }
      })[this.valueType](val)
    },
    //---------------------------------------------------
    async genValue() {
      let ids = _.keys(this.selIdMap)
      // Guard
      if (_.isEmpty(ids))
        return []
      // Parse
      return await ({
        id: ids => {
          return ids
        },
        obj: async ids => {
          let list = []
          for (let id of ids) {
            let it = await this.Dict.getItem(id)
            if (it)
              if (this.mapping) {
                it = Ti.Util.translate(it, this.mapping)
              }
            list.push(it)
          }
          return list
        },
        item: async ids => {
          let list = []
          for (let id of ids) {
            let obj = await this.Dict.getItem(id)
            let it = {
              text: this.Dict.getText(obj),
              value: this.Dict.getValue(obj)
            }
            if (it) {
              if (this.mapping) {
                it = Ti.Util.translate(it, this.mapping)
              }
              list.push(it)
            }
          }
          return list
        }
      })[this.valueType](ids)
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  watch: {
    "value": function (newVal, oldVal) {
      if (!_.isEqual(newVal, oldVal)) {
        this.reloadSelList()
      }
    },
    "options": function (newVal, oldVal) {
      if (!_.isEqual(newVal, oldVal)) {
        this.reloadCanList()
      }
    },
    "sel.data": async function () {
      this.rebuildSelIdMap()
      let val = await this.genValue()
      if (this.changeEventName && !_.isEqual(val, this.Values)) {
        this.$notify(this.changeEventName, val)
      }
    }
  },
  ///////////////////////////////////////////////////////
  mounted: async function () {
    await this.reloadSelList()
    await this.reloadCanList()
  }
  ///////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'tiny-wn-web-image.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/tiny-wn-web-image.mjs'] = (function(){
////////////////////////////////////////////////////
async function pickWebImageAndInsertToDoc(editor, {
  base = "~",
  autoCreate = null,
  fallbackPath,
}) {
  // Check base
  if (_.isPlainObject(autoCreate)) {
    let oBase = await Wn.Io.loadMeta(base)
    if (!oBase) {
      let pph = Ti.Util.getParentPath(base)
      let dnm = Ti.Util.getFileName(base)
      let baseMeta = _.assign({}, autoCreate, {
        race: 'DIR', nm: dnm
      })
      let baseJson = JSON.stringify(baseMeta)
      let cmdText = `o @create '${baseJson}' -p ${pph} -auto @json -cqn`
      oBase = await Wn.Sys.exec2(cmdText, { as: "json" })
    }
    base = oBase
  }

  // Show dialog
  let reo = await Wn.OpenObjSelector(base, {
    icon: "fas-image",
    title: "i18n:img-insert",
    position: "top",
    width: "95%",
    height: "95%",
    multi: false,
    fallbackPath
  })

  // User canceled
  if (_.isEmpty(reo)) {
    return
  }

  // Do insert image
  editor.execCommand("InsertWebImage", editor, reo)
}
////////////////////////////////////////////////////
function GetElContext(el) {
  if (_.isElement(el)) {
    let con = Ti.Dom.closest(el, p => {
      return Ti.Dom.hasClass(p, "as-image-con")
    }, { includeSelf: true })
    if (!con) {
      return {
        con: el,
        img: el
      }
    }
    else {
      return {
        con: con,
        img: Ti.Dom.find("img", con),
        alt: Ti.Dom.find("span.as-img-alt", con),
      }
    }
  }
  return el
}
////////////////////////////////////////////////////
function GetWebImageDataByElement(elOrCtx) {
  let IMC = GetElContext(elOrCtx)
  let { img, con } = IMC
  //
  // Read from $img
  //
  let obj = Ti.Dom.attrs(img, name => {
    let m = /^(wn-obj-)(.+)$/.exec(name)
    if (m) {
      return _.camelCase(m[2])
    }
  })
  // Read from $con
  obj.link = con.getAttribute("href")
  obj.newtab = "_blank" == con.getAttribute("target")
  //
  // Read style
  //
  obj.imgStyle = _.assign({},
    Ti.Dom.getOwnStyle(IMC.con),
    Ti.Dom.getOwnStyle(IMC.img))
  obj.altStyle = Ti.Dom.getOwnStyle(IMC.alt)
  //
  // Done
  //
  return obj
}
////////////////////////////////////////////////////
function FormatWebImageObjData(obj) {
  return _.pick(obj,
    "id", "sha1", "title", "link", "newtab", "mime", "tp", "width", "height",
    "imgStyle", "altStyle")
}
////////////////////////////////////////////////////
const OUTER_STYLE_NAMES = [
  "margin", "float", "width", "height",
  "minWidth", "minHeight",
  "maxWidth", "maxHeight"
]
////////////////////////////////////////////////////
function UpdateWebImageStyle(editor, el, data) {
  let IMC = GetElContext(el)
  let { con, img, alt } = IMC
  //console.log(IMC)
  // Set data to element
  if (data) {
    let attrs = FormatWebImageObjData(data)
    attrs.imgStyle = null
    attrs.altStyle = null
    //
    // Update top element
    let { link, newtab } = attrs
    Ti.Dom.setAttrs(con, {
      href: link || null,
      target: newtab ? "_blank" : null
    })
    //
    // Update Image data
    //
    attrs = _.omit(attrs, "link", "newtab")
    Ti.Dom.setAttrs(img, attrs, "wn-obj-")
  }
  // Get data from element
  else {
    data = GetWebImageDataByElement(IMC)
  }
  //console.log(data)
  //............................................
  data.imgStyle = Ti.Dom.formatStyle(data.imgStyle, "camel")
  data.altStyle = Ti.Dom.formatStyle(data.altStyle, "camel")
  //............................................
  let conStyle = _.pick(data.imgStyle, OUTER_STYLE_NAMES)
  let imgStyle = _.omit(data.imgStyle, OUTER_STYLE_NAMES)
  let altStyle = Ti.Css.renderCssRule(data.altStyle)
  conStyle = Ti.Css.renderCssRule(conStyle)
  imgStyle = Ti.Css.renderCssRule(imgStyle)
  //............................................
  // Wrap image by span
  if (con == img && "IMG" == con.tagName) {
    if (!Ti.Dom.closest(con, $con => {
      return Ti.Dom.hasClass($con, "as-image-con")
    }, { includeSelf: true })) {
      let $con = Ti.Dom.createElement({
        tagName: "a",
        className: "wn-media as-image-con"
      })
      Ti.Dom.wrap(con, $con)
      con = $con
    }
  }
  //............................................
  if (img) {
    img.style = imgStyle
    Ti.Dom.setAttrs(img, {
      "ti-resize-target": null
    })
  }
  //............................................
  if (alt) {
    if (!data.title || Ti.S.isBlank(data.title)) {
      Ti.Dom.remove(alt)
    } else {
      alt.style = altStyle
      alt.innerText = data.title || ""
    }
  } else if (data.title && !Ti.S.isBlank(data.title)) {
    alt = Ti.Dom.createElement({
      $p: con,
      tagName: "span",
      className: "as-img-alt",
    })
    alt.style = altStyle
    alt.innerText = data.title || ""
  }
  //............................................
  if (con) {
    con.style = conStyle
    con.contentEditable = false
    Ti.Dom.setAttrs(con, {
      "ti-tinymce-obj-resizable": "style"
    })
    // Update resize handler
    editor.__rich_tinymce_com.redrawResizeHandler(con)
  }
}
////////////////////////////////////////////////////
function CmdInsertWebImage(editor, oImgs) {
  if (_.isEmpty(oImgs))
    return

  // Prepare range
  let rng = editor.selection.getRng()

  // Create image fragments
  let $doc = rng.commonAncestorContainer.ownerDocument
  let frag = new DocumentFragment()
  for (let oImg of oImgs) {
    let $con = Ti.Dom.createElement({
      tagName: "a",
      className: "wn-media as-image-con"
    })
    $con.contentEditable = false
    let $img = Ti.Dom.createElement({
      $p: $con,
      tagName: "img",
      className: "wn-media as-image",
      attrs: {
        src: `/o/content?str=id:${oImg.id}`
      }
    }, $doc)
    Ti.Dom.setAttrs($img, FormatWebImageObjData(oImg), "wn-obj-")

    frag.appendChild($con)

    // Update style
    UpdateWebImageStyle(editor, $con)
  }

  // Remove content
  if (!rng.collapsed) {
    rng.deleteContents()
  }

  // Insert fragments
  rng.insertNode(frag)
}
////////////////////////////////////////////////////
function GetCurrentWebImageElement(editor) {
  let sel = editor.selection
  let $nd = sel.getNode()
  // Guard
  return Ti.Dom.closest($nd, (el) => {
    if (Ti.Dom.hasClass(el, "wn-media", "as-image-con")) {
      return true
    }
    if ("IMG" == el.tagName && Ti.Dom.hasClass(el, "wn-media", "as-image")) {
      return true
    }
  }, { includeSelf: true })
}
////////////////////////////////////////////////////
function CmdSetWebImageStyle(editor, css = {}) {
  let $con = GetCurrentWebImageElement(editor)
  let IMC = GetElContext($con)
  // Guard
  if (!_.isElement($con)) {
    return
  }
  // Save to element
  let data = GetWebImageDataByElement(IMC)
  data.imgStyle = _.assign({}, data.imgStyle, css)
  UpdateWebImageStyle(editor, IMC, data)

  // Force sync content
  editor.__rich_tinymce_com.syncContent()
}
////////////////////////////////////////////////////
async function CmdShowWebImageProp(editor, settings) {
  let $img = GetCurrentWebImageElement(editor)
  let IMC = GetElContext($img)
  // Guard
  if (!_.isElement($img)) {
    return
  }
  // Get margin style
  let stl = Ti.Dom.getStyle($img, /^(float|(margin-(left|right|top|bottom)))$/)
  stl.float = stl.float || "none"
  //console.log("stl", stl)
  // Gen the properties
  let data = GetWebImageDataByElement($img)
  //console.log(data)

  // Show dialog
  let reo = await Ti.App.Open({
    icon: "fas-image",
    title: "i18n:hmk-w-edit-img-prop",
    width: "37%",
    height: "100%",
    position: "right",
    closer: "left",
    clickMaskToClose: true,
    result: data,
    model: { prop: "data", event: "change" },
    comType: "TiForm",
    comConf: {
      onlyFields: false,
      spacing: "tiny",
      fields: [{
        title: "i18n:hmk-w-edit-img-info",
        fields: [
          {
            title: "i18n:hmk-w-edit-img-pic",
            name: "id",
            rowSpan: 3,
            comType: "WnObjPicker",
            comConf: {
              valueType: "id",
              base: settings.base,
              titleEditable: false
            }
          },
          {
            title: "i18n:hmk-w-edit-img-title",
            name: "title",
            comType: "TiInput",
            comConf: {
              placeholder: "i18n:hmk-w-edit-img-title-tip"
            }
          },
          {
            title: "i18n:hmk-w-edit-img-link",
            name: "link",
            comType: "TiInput",
            comConf: {
              placeholder: "i18n:hmk-w-edit-img-link-tip"
            }
          },
          {
            title: "i18n:hmk-w-edit-img-newtab",
            name: "newtab",
            type: "Boolean",
            comType: "TiToggle"
          }
        ]
      },
      {
        title: "i18n:hmk-aspect",
        fields: [
          Wn.Hm.getCssPropField("margin", { name: "imgStyle.margin" }),
          Wn.Hm.getCssPropField("float", { name: "imgStyle.float" }),
          Wn.Hm.getCssPropField("width", { name: "imgStyle.width" }),
          Wn.Hm.getCssPropField("height", { name: "imgStyle.height" }),
          Wn.Hm.getCssPropField("object-fit", { name: "imgStyle.objectFit" }),
        ]
      },
      {
        title: "i18n:hmk-aspect-more",
        fields: [{
          title: "i18n:hmk-w-edit-img-style",
          name: "imgStyle",
          type: "Object",
          emptyAs: null,
          comType: "HmPropCssRules",
          comConf: {
            rules: "#IMG"
          }
        },
        {
          title: "i18n:hmk-w-edit-alt-style",
          name: "altStyle",
          type: "Object",
          emptyAs: null,
          comType: "HmPropCssRules",
          comConf: {
            rules: "#TEXT-BLOCK"
          }
        }]
      }]
    },
    components: [
      "@com:wn/obj/picker"
    ]
  })

  // 用户取消
  if (!reo)
    return

  // Update image
  console.log(reo)
  //................................................
  // src
  if (data.id != reo.id) {
    // Remove Image
    if (!reo.id) {
      Ti.Dom.remove(IMC.con)
      return
    }
    // 读取对象详情
    let oImg = await Wn.Io.loadMetaById(reo.id)
    reo = FormatWebImageObjData(_.assign(reo, oImg))
    // Switch image src
    IMC.img.src = `/o/content?str=id:${reo.id}`
  }
  //................................................
  //console.log(reo)
  UpdateWebImageStyle(editor, IMC, reo)
  //................................................
  // clean cache
  IMC.con.removeAttribute("data-mce-style")
  IMC.con.removeAttribute("data-mce-href")
  IMC.img.removeAttribute("data-mce-src")
  IMC.img.removeAttribute("data-mce-style")
  //................................................
  // Force sync content
  editor.__rich_tinymce_com.syncContent()
}
////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  name: "wn-web-image",
  //------------------------------------------------
  init: function (conf = {}) {
  },
  //------------------------------------------------
  setup: function (editor, url) {
    //..............................................
    let settings = _.assign({
      base: "~"
    }, _.get(editor.settings, "wn_web_image_config"));
    //console.log("setup", editor.settings)
    //..............................................
    // Register plugin command
    editor.addCommand("InsertWebImage", CmdInsertWebImage)
    editor.addCommand("SetWebImageStyle", CmdSetWebImageStyle)
    editor.addCommand("ShowWebImageProp", CmdShowWebImageProp)
    //..............................................
    // Register toolbar actions
    editor.ui.registry.addButton("WnWebImgPick", {
      icon: "image",
      tooltip: Ti.I18n.text("i18n:img-insert"),
      onAction: function (menuBtn) {
        pickWebImageAndInsertToDoc(editor, settings)
      },
    })
    //..............................................
    editor.ui.registry.addMenuItem("WnWebImgClrSize", {
      icon: "edit-image",
      text: Ti.I18n.text("i18n:hmk-w-edit-img-clrsz"),
      onAction() {
        editor.execCommand("SetWebImageStyle", editor, {
          width: "", height: "",
          minWidth: "", minHeight: "",
          maxWidth: "", maxHeight: ""
        })
      }
    })
    //..............................................
    editor.ui.registry.addMenuItem("WnWebImgAutoFitWidth", {
      text: Ti.I18n.text("i18n:hmk-autofit"),
      onAction() {
        editor.execCommand("SetWebImageStyle", editor, {
          width: "100%", height: "",
          margin: "",
          minWidth: "", minHeight: "",
          maxWidth: "", maxHeight: ""
        })
      }
    })
    //..............................................
    editor.ui.registry.addMenuItem("WnWebImgAutoScaleByWidth", {
      text: Ti.I18n.text("i18n:hmk-autoscale"),
      onAction() {
        let $con = GetCurrentWebImageElement(editor)
        let IMC = GetElContext($con)
        let scale = IMC.img.naturalWidth / IMC.img.naturalHeight
        let { width, height } = Ti.Rects.createBy(IMC.img)
        height = Math.round(width / scale)

        editor.execCommand("SetWebImageStyle", editor, {
          width, height,
          margin: "",
          minWidth: "", minHeight: "",
          maxWidth: "", maxHeight: ""
        })
      }
    })
    //..............................................
    editor.ui.registry.addNestedMenuItem('WnWebImgFloat', {
      text: Ti.I18n.text("i18n:hmk-float"),
      getSubmenuItems: function () {
        return [{
          type: "menuitem",
          icon: "align-left",
          text: Ti.I18n.text("i18n:hmk-float-left"),
          onAction() {
            editor.execCommand("SetWebImageStyle", editor, { float: "left" })
          }
        }, {
          type: "menuitem",
          icon: "align-right",
          text: Ti.I18n.text("i18n:hmk-float-right"),
          onAction() {
            editor.execCommand("SetWebImageStyle", editor, { float: "right" })
          }
        }, {
          type: "menuitem",
          text: Ti.I18n.text("i18n:hmk-float-clear"),
          onAction() {
            editor.execCommand("SetWebImageStyle", editor, { float: "" })
          }
        }];
      }
    });
    //..............................................
    editor.ui.registry.addNestedMenuItem('WnWebImgMargin', {
      text: Ti.I18n.text("i18n:hmk-w-edit-img-margin"),
      getSubmenuItems: function () {
        const __check_margin_size = function (api, expectSize) {
          let $img = GetCurrentWebImageElement(editor)
          let IMC = GetElContext($img)
          let state = true
          if (IMC.con) {
            state = (expectSize == IMC.con.style.margin)
          }
          api.setActive(state);
          return function () { };
        }
        return [{
          type: "togglemenuitem",
          text: Ti.I18n.text("i18n:hmk-margin-sm"),
          onAction() {
            editor.execCommand("SetWebImageStyle", editor, { margin: "1em" })
          },
          onSetup: function (api) {
            return __check_margin_size(api, '1em')
          }
        }, {
          type: "togglemenuitem",
          text: Ti.I18n.text("i18n:hmk-margin-md"),
          onAction() {
            editor.execCommand("SetWebImageStyle", editor, { margin: "2em" })
          },
          onSetup: function (api) {
            return __check_margin_size(api, '2em')
          }
        }, {
          type: "togglemenuitem",
          text: Ti.I18n.text("i18n:hmk-margin-lg"),
          onAction() {
            editor.execCommand("SetWebImageStyle", editor, { margin: "3em" })
          },
          onSetup: function (api) {
            return __check_margin_size(api, '3em')
          }
        }, {
          type: "menuitem",
          text: Ti.I18n.text("i18n:hmk-margin-no"),
          onAction() {
            editor.execCommand("SetWebImageStyle", editor, { margin: "" })
          }
        }];
      }
    });
    //..............................................
    editor.ui.registry.addMenuItem("WnWebImgProp", {
      text: Ti.I18n.text("i18n:hmk-w-edit-img-prop"),
      onAction() {
        editor.execCommand("ShowWebImageProp", editor, settings)
      }
    })
    //..............................................
    editor.ui.registry.addContextMenu("wn-web-image", {
      update: function (el) {
        //console.log("wn-web-image context menu", el)
        let sel = editor.selection
        let $nd = sel.getNode()
        let IMC = GetElContext($nd)
        if (IMC && IMC.img && IMC.img.hasAttribute("wn-obj-id")
          && "IMG" == IMC.img.tagName
          && Ti.Dom.hasClass(IMC.img, "wn-media", "as-image")) {
          return [
            "WnWebImgClrSize WnWebImgAutoFitWidth WnWebImgAutoScaleByWidth",
            "WnWebImgFloat WnWebImgMargin",
            "WnWebImgProp"
          ].join(" | ")
        }
        return []
      }
    })
    //..............................................
    editor.on("ExecCommand", async function ({ command, value } = {}) {
      if ("mceInsertContent" == command && value.content) {
        let REG = /^<img +src="data:(image\/(png|jpeg));base64, *([^"]+)" *\/>$/
        let m = REG.exec(value.content)
        if (m) {
          let mime = m[1]
          let base64 = m[3]
          // Save image content
          let ftp = ({
            "image/png": "png",
            "image/jpeg": "jpg"
          })[mime] || "png"
          let fnm = Ti.DateTime.format(new Date(), "'Snapshot'-yyyyMMdd-HHmmss")
          let fph = Ti.Util.appendPath(settings.base, fnm + "." + ftp)
          let obj = Wn.Io.saveContentAsText(fph, base64, {
            createIfNoExists: true,
            asBase64: true
          })
          editor.execCommand("InsertWebImage", editor, [obj])
        }
      }
    })
    //..............................................
    let $vm = editor.__rich_tinymce_com
    $vm.registerContentCallback("wn-web-image", function () {
      //console.log("SetContent image")
      let els = editor.$('img[wn-obj-mime]')
      for (let i = 0; i < els.length; i++) {
        let el = els[i]
        UpdateWebImageStyle(editor, el)
      }
    })
    //..............................................
    return {
      getMetadata: function () {
        return {
          name: 'Wn Web Image plugin',
          url: 'http://site0.cn'
        };
      }
    };
    //..............................................
  }
  //------------------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-gui-footer.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/gui/footer/wn-gui-footer.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  /////////////////////////////////////////
  props : {
    "infoIcon" : {
      type : [String, Object],
      default : undefined
    },
    "infoText" : {
      type : String,
      default : undefined
    },
    "message" : {
      type : String,
      default : undefined
    },
    "indicator" : {
      type : String,
      default : undefined
    }
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-fileset-tabs.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/fileset/tabs/wn-fileset-tabs.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data: ()=>({
    myShown : {},
    myList : [],
    dataReady : false
  }),
  ////////////////////////////////////////////////////
  props : {
    "comType" : {
      type : String,
      default : undefined
    },
    "comConf" : {
      type : Object,
      default : ()=>({})
    },
    "keepShownTo" : {
      type : String,
      default : "keep_shown_${id}"
    },
    "tabAt": undefined
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TabsGUILayout() {
      let gui = {
        type : "tabs",
        tabAt: this.tabAt,
        blocks : []
      }
      _.forEach(this.myList, o => {
        let comConf = Ti.Util.explainObj({
          dataReady : this.dataReady,
          home : this.meta,
          meta : o
        }, this.comConf)
        let li = {
          title : o.title || o.nm,
          name  : o.nm,
          icon  : o.icon,
          body : {
            comType : this.comType,
            comConf
          }
        }
        gui.blocks.push(li)
      })

      if(gui.blocks.length == 1) {
        this.myShown = {
          [gui.blocks[0].name] : true
        }
      }

      return gui
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnGuiInit($gui) {
      this.$gui = $gui
    },
    //------------------------------------------------
    OnShownChange(shown) {
      this.myShown = shown

      let shownKey = this.getShownKey()
      if(shownKey) {
        Ti.Storage.session.setObject(shownKey, shown)
      }
    },
    //------------------------------------------------
    $MainBlock() {
      let keys = [];
      _.forEach(this.myShown, (v, k)=>{
        if(v)
        keys[0] = k
      })
      let key = _.nth(keys, 0)
      if(key) {
        return this.$gui.$block(key)
      }
    },
    //------------------------------------------------
    $MainCom() {
      let $b = this.$MainBlock()
      if($b)
        return $b.$main()
    },
    //------------------------------------------------
    getShownKey() {
      if(this.keepShownTo && this.meta) {
        return Ti.S.renderBy(this.keepShownTo, this.meta)
      }
    },
    //------------------------------------------------
    async reload() {
      this.dataReady = false
      //console.log("do reload")
      this.myList = await this.reloadChildren()
      this.dataReady = true

      let shownKey = this.getShownKey()
      if(shownKey) {
        this.myShown = Ti.Storage.session.getObject(shownKey)
      }
    } 
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-gui-grid.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/gui/grid/ti-gui-grid.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data: () => ({
    myBlockAreas: [],
    myWatchAreas: [
      /*{index, type:"row|column", rect}*/
    ],
    myView: undefined, // Rect
    myGrid: {
      /*columns,rows,lineV,lineH */
    },
    myCustomizedTracks: {
      /*columns:[...],
      rows:[...]*/
    }
  }),
  /////////////////////////////////////////
  props: {
    "adjustMode": {
      type: String,
      default: "none",
      validator: (v) => /^(none|both|column|row)$/.test(v)
    },
    "grid": {
      type: Object
    },
    "lineRadius": {
      type: Number,
      default: 4
    },
    "cellMinWidth": {
      type: Number,
      default: 50
    },
    "cellMinHeight": {
      type: Number,
      default: 50
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopStyle() {
      let re = {
        display: "grid"
      };
      _.forEach(this.grid, (val, key) => {
        let k = _.kebabCase(key);
        re[k] = val;
      });
      if (this.border) {
        _.defaults(re, {
          "grid-gap": "1px"
        });
      }
      //
      // patch customized track columns/rows
      //
      if (this.myCustomizedTracks) {
        let { columns, rows } = this.myCustomizedTracks;
        if (!_.isEmpty(columns)) {
          re["grid-template-columns"] = columns.join(" ");
        }
        if (!_.isEmpty(rows)) {
          re["grid-template-rows"] = rows.join(" ");
        }
      }
      //
      // patch columns/rows setting during dragging
      //
      if (this.isDragging && this.myTrackScales) {
        let cssProp = {
          column: "grid-template-columns",
          row: "grid-template-rows"
        }[this.myDragArea.type];

        // auto 有毒， 还是不要这么搞了，这个逻辑没用了应该
        // let autoIxs = {
        //   column: this.AutoColTrackIndexes,
        //   row: this.AutoRowTrackIndexes
        // }[this.myDragArea.type];

        let scales = _.map(this.myTrackScales, (v, index) => {
          // if (_.indexOf(autoIxs, index) >= 0) {
          //   return "auto";
          // }
          return v;
        });
        re[cssProp] = scales.join(" ");
      }
      return re;
    }
    //--------------------------------------
    // auto 有毒， 还是不要这么搞了，这两个函数没用了应该
    // AutoColTrackIndexes() {
    //   return this.getAutoTrackIndexes(
    //     _.get(this.grid, "grid-template-columns")
    //   );
    // },
    //--------------------------------------
    // AutoRowTrackIndexes() {
    //   return this.getAutoTrackIndexes(_.get(this.grid, "grid-template-rows"));
    // }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnResize() {
      this.debounceEvalGridMeasure();
    },
    //--------------------------------------
    OnResetTracks() {
      this.LOG("OnResetTracks");
      this.clearDragging();
      Ti.Viewport.resize();
      this.myCustomizedTracks = {};
      this.trySaveLocalCustomized();
    },
    //--------------------------------------
    clearDragging() {
      this.isDragging = false;
      this.myDragX = undefined;
      this.myDragY = undefined;
      this.myDragArea = undefined;
      this.myTrackScales = undefined;
    },
    //--------------------------------------
    drawWatchingArea() {
      _.forEach(this.myWatchAreas, ({ type, rect }) => {
        Ti.Dom.createElement({
          $p: this.$el,
          style: _.assign(
            {
              position: "fixed",
              backgroundColor: {
                column: "#F00",
                row: "#00F"
              }[type]
            },
            rect.toCss()
          )
        });
      });

      _.forEach(this.myBlockAreas, ({ rect }) => {
        Ti.Dom.createElement({
          $p: this.$el,
          style: _.assign(
            {
              position: "fixed",
              backgroundColor: "rgba(255,255,0,0.3)"
            },
            rect.toCss()
          )
        });
      });
    },
    //--------------------------------------
    getAutoTrackIndexes(track) {
      let re = [];
      if (_.isString(track)) {
        let ss = Ti.S.splitIgnoreBlank(track, /\s+/g);
        for (let i = 0; i < ss.length; i++) {
          if (/^auto$/i.test(ss[i])) {
            re.push(i);
          }
        }
      }
      return re;
    },
    //--------------------------------------
    evalGridMeasure() {
      this.LOG("evalGridMeasure", this.$el);
      let $blocks = Ti.Dom.findAll(":scope > main> .ti-gui-block", this.$el);

      // Guard
      if (_.isEmpty($blocks)) {
        this.LOG("No blocks found");
        return;
      }

      let N = $blocks.length;
      this.LOG(`Loop ${N} blocks`);

      //
      // Collect each row and column top/bottom, left/right
      //
      let MEA = {
        view: Ti.Rects.createBy(this.$el),
        tops: [],
        bottoms: [],
        lefts: [],
        rights: [],
        //.............................................
        push: function (rect = {}) {
          //rect.relative(this.view);
          let { left, right, top, bottom } = rect;

          this.tops.push(Math.round(top));
          this.lefts.push(Math.round(left));
          this.rights.push(Math.round(right));
          this.bottoms.push(Math.round(bottom));
        },
        //.............................................
        uniquely: function () {
          const _uniq_sort = (list) => {
            return _.uniq(_.clone(list)).sort((a, b) => a - b);
          };
          this.tops = _uniq_sort(this.tops);
          this.lefts = _uniq_sort(this.lefts);
          this.rights = _uniq_sort(this.rights);
          this.bottoms = _uniq_sort(this.bottoms);
          if (this.tops.length != this.bottoms.length) {
            console.error(_.pick(this, "tops", "bottoms"));
            throw `Unmatched row top/bottom`;
          }
          if (this.lefts.length != this.rights.length) {
            console.error(_.pick(this, "lefts", "rights"));
            throw `Unmatched column left/right`;
          }
        },
        //.............................................
        /*
        return {
          columns: [{left,right}],
          rows: [{top,bottom}],
          lineV : [N,..],
          lineH : [N,..]
        }
        */
        toGrid: function () {
          let columns = [];
          let rows = [];

          for (let i = 0; i < this.lefts.length; i++) {
            columns.push({
              left: this.lefts[i],
              right: this.rights[i]
            });
          }

          for (let i = 0; i < this.tops.length; i++) {
            rows.push({
              top: this.tops[i],
              bottom: this.bottoms[i]
            });
          }

          let lineV = [];
          let lineH = [];

          for (let i = 1; i < columns.length; i++) {
            let col0 = columns[i - 1];
            let col1 = columns[i];
            lineV.push(Math.round(col0.right + (col1.left - col0.right) / 2));
          }

          for (let i = 1; i < rows.length; i++) {
            let row0 = rows[i - 1];
            let row1 = rows[i];
            lineH.push(Math.round(row0.bottom + (row1.top - row0.bottom) / 2));
          }

          return { columns, rows, lineV, lineH };
        },
        //.............................................
        getWatchAreas(radius = 5, grid) {
          if (!grid) {
            grid = this.toGrid();
          }
          let { top, bottom, left, right } = this.view;
          let areas = [];
          let { lineH, lineV } = grid;
          //
          // Watch column border(vertical line)
          for (let i = 0; i < lineV.length; i++) {
            let v = lineV[i];
            areas.push({
              index: i,
              type: "column",
              rect: Ti.Rects.create({
                left: v - radius,
                right: v + radius,
                top,
                bottom
              })
            });
          }
          //
          // Watch column border(vertical line)
          for (let i = 0; i < lineH.length; i++) {
            let v = lineH[i];
            areas.push({
              index: i,
              type: "row",
              rect: Ti.Rects.create({
                left,
                right,
                top: v - radius,
                bottom: v + radius
              })
            });
          }

          return areas;
        },
        //.............................................
        toGridString(grid) {
          if (!grid) {
            grid = this.toGrid();
          }
          let ss = ["COLs:"];
          ss[1] = _.map(grid.columns, ({ left, right }, I) => {
            let s = `${I}:${left}-${right}`;
            if (I < grid.lineV.length) {
              s += ` |<${grid.lineV[I]}>|`;
            }
            return s;
          }).join(" ");
          ss[2] = "ROWs:";
          ss[3] = _.map(grid.rows, ({ top, bottom }, I) => {
            let s = `${I}:${top}-${bottom}`;
            if (I < grid.lineH.length) {
              s += ` |<${grid.lineH[I]}>|`;
            }
            return s;
          }).join(" ");
          return ss.join("\n");
        }
        //.............................................
      }; // ~ MEA

      // Collection each block
      let blockAreas = [];
      for (let i = 0; i < N; i++) {
        let $B = $blocks[i];

        // Join block the measure, to eval the watching area
        // to show the adjust bar
        let R = Ti.Rects.createBy($B);
        MEA.push(R);

        // Add block rect to list , when mouse move in it
        // will not show the adjust bar,
        // in case one block span 2 row/cols ,
        let bR = R.clone();
        bR.width = bR.width - this.lineRadius * 2;
        bR.height = bR.height - this.lineRadius * 2;

        blockAreas.push({
          index: i,
          rect: bR.update("xywh")
        });
        this.LOG(`${i}) ${R.toString()}`);
      }
      MEA.uniquely();
      this.LOG(_.pick(MEA, "tops", "bottoms", "lefts", "rights"));
      let grid = MEA.toGrid();
      this.LOG(MEA.toGridString(grid));

      let watchAreas = MEA.getWatchAreas(this.lineRadius);
      this.LOG("Watch Areas:", watchAreas);

      this.myGrid = grid;
      this.myView = MEA.view;
      this.myBlockAreas = blockAreas;
      this.myWatchAreas = watchAreas;

      //this.drawWatchingArea();
    },
    //--------------------------------------
    tryEvalGridMeasure() {
      this.LOG("tryEvalGridMeasure");
      // Guard
      if (!_.isElement(this.$el)) {
        return;
      }
      this.LOG("delay call evalGridMeasure");
      _.delay(() => {
        this.evalGridMeasure();
      }, 200);
    },
    //--------------------------------------
    trySaveLocalCustomized() {
      if (this.keepCustomizedTo) {
        let tracks = _.isEmpty(this.myCustomizedTracks)
          ? null
          : this.myCustomizedTracks;
        Ti.Storage.local.setObject(this.keepCustomizedTo, tracks);
      }
    },
    //--------------------------------------
    tryRestoreLocalCustomized() {
      if (this.keepCustomizedTo) {
        let tracks = Ti.Storage.local.getObject(this.keepCustomizedTo);
        if (!_.isEmpty(tracks)) {
          this.myCustomizedTracks = tracks;
        }
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "GuiBlocks": "tryEvalGridMeasure"
  },
  //////////////////////////////////////////
  created: function () {
    this.debounceEvalGridMeasure = _.debounce(() => {
      this.tryEvalGridMeasure();
    }, 500);
    this.LOG = () => {};
    //this.LOG = console.log;
  },
  //////////////////////////////////////////
  mounted: function () {
    Ti.Viewport.watch(this, {
      resize: () => {
        this.OnResize();
      }
    });
    this.tryEvalGridMeasure();
    this.tryRestoreLocalCustomized();
  },
  ///////////////////////////////////////////////////
  beforeDestroy: function () {
    Ti.Viewport.unwatch(this);
  }
  //////////////////////////////////////////
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'm-wn-obj-cud.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/obj/m-wn-obj-cud.mjs'] = (function(){
////////////////////////////////////////////////
async function getContentMeta(state, path) {
  state.LOG("getContentMeta", path)
  // Guard
  if (!path || !state.dirId) {
    return
  }
  let meta;
  if ("<self>" != path) {
    let aph;
    // absolute path
    if (/^([\/~]\/|id:)/.test(path)) {
      aph = path
    }
    // In parent dir
    else {
      aph = Ti.Util.appendPath(`id:${state.dirId}/`, path)
    }
    meta = await Wn.Io.loadMeta(aph)
    // If not exists, then create it
    if (!meta) {
      let cmdText = `touch '${aph}'`
      await Wn.Sys.exec2(cmdText)
      meta = await Wn.Io.loadMeta(aph)
    }
  }
  // User self
  else {
    meta = state.meta
  }

  return meta
}
////////////////////////////////////////////////
const _M = {
  //--------------------------------------------
  //
  //               Create 
  //
  //--------------------------------------------
  async doCreate({ state, dispatch }) {
    // Guard
    if (!state.dirId) {
      throw "doCreate without dirId";
    }
    // Load the creation setting
    let {
      types,
      freeCreate
    } = await Wn.Sys.exec(`ti creation -cqn id:${state.dirId}`, { as: "json" })

    // Get creation information
    let no = await Ti.App.Open({
      title: "i18n:create",
      type: "info",
      position: "top",
      width: 640,
      height: "61.8%",
      comType: "wn-obj-creation",
      comConf: {
        types, freeCreate,
        autoFocus: true,
        enterEvent: "ok"
      },
      components: ["@com:wn/obj/creation"]
    })

    // User cancel
    if (!no || !no.name) {
      return
    }

    // Check the newName contains the invalid char
    if (no.name.search(/[%;:"'*?`\t^<>\/\\]/) >= 0) {
      return await Ti.Alert('i18n:wn-create-invalid')
    }
    // Check the newName length
    if (no.length > 256) {
      return await Ti.Alert('i18n:wn-create-too-long')
    }

    // Default Race
    no.race = no.race || "FILE"

    if ("folder" == no.type) {
      no.type = undefined
    }

    // Auto type
    if ("FILE" == no.race) {
      if (!no.type) {
        no.type = Ti.Util.getSuffixName(no.name)
      }

      // Auto append suffix name
      if (!no.name.endsWith(no.type)) {
        no.name += `.${no.type}`
      }
    }

    // Prepare the obj
    let obj = {
      ...no.meta,
      nm: no.name,
      tp: no.type,
      race: no.race,
      mime: no.mime
    }
    state.LOG("doCreate", obj)

    await dispatch("create", obj)
  },
  //--------------------------------------------
  async create({ state, commit, dispatch, getters }, obj = {}) {
    // Guard
    if (!getters.isCanCreate) {
      return await Ti.Alert('i18n:e-pvg-fobidden', { type: "warn" })
    }
    if (!state.dirId) {
      return await Ti.Alert('State Has No dirId', { type: "warn" })
    }
    // Prepare the command
    let json = JSON.stringify(obj)
    let dirId = state.dirId

    // Mark reloading
    commit("setStatus", { doing: true })

    // Do Create
    let cmdText = `o @create -p 'id:${dirId}' @json -cqn`;
    let newMeta = await Wn.Sys.exec2(cmdText, { input: json, as: "json" })

    if (newMeta && !(newMeta instanceof Error)) {
      // Append To Search List as the first 
      commit("prependListItem", newMeta)

      // Set it as current
      dispatch("selectMeta", {
        currentId: newMeta.id,
        checkedIds: {
          [newMeta.id]: true
        }
      })
    }

    // Mark reloading
    commit("setStatus", { doing: false })

    // Return the new object
    return newMeta
  },
  //--------------------------------------------
  //
  //               Rename
  //
  //--------------------------------------------
  async doRename({ state, commit, getters }) {
    // Guard
    if (!getters.isCanUpdate) {
      return await Ti.Alert('i18n:e-pvg-fobidden', { type: "warn" })
    }
    if (!state.meta) {
      return await Ti.Toast.Open('i18n:wn-rename-none', "warn")
    }

    let it = state.meta
    state.LOG("doRename", it.id)

    // Get new name
    let newName = await Ti.Prompt({
      text: 'i18n:wn-rename',
      vars: { name: it.nm }
    }, {
      title: "i18n:rename",
      placeholder: it.nm,
      value: it.nm
    })
    newName = _.trim(newName)

    // User cancel
    if (!newName) {
      return
    }

    // Check name invalid or not
    if (!Wn.Obj.isValidName(newName)) {
      return
    }

    // Check the suffix Name
    let oldSuffix = Ti.Util.getSuffix(it.nm)
    let newSuffix = Ti.Util.getSuffix(newName)
    if ('FILE' == it.race && oldSuffix && oldSuffix != newSuffix) {
      let repair = await Ti.Confirm("i18n:wn-rename-suffix-changed")
      if (repair) {
        newName += oldSuffix
      }
    }

    // Rename it
    let itemStatus = { [it.id]: "processing" }

    commit("setStatus", { renaming: true })
    commit("setItemStatus", itemStatus)

    try {
      let newMeta = await Wn.Sys.exec2(
        `o id:${it.id} @update 'nm:"${newName}"' @json -cqn`,
        { as: "json" })

      // Error
      if (newMeta instanceof Error) {
        return await Ti.Toast.Open("i18n:wn-rename-fail", "error")
      }

      // Replace the data
      commit("setListItem", newMeta);
      commit("setCurrentMeta");
    }
    // Clean status
    finally {
      _.delay(async () => {
        commit("setStatus", { renaming: false })
        commit("clearItemStatus")
      }, 500)
    }
  },
  //--------------------------------------------
  //
  //               Delete
  //
  //--------------------------------------------
  async removeChecked({ state, commit, dispatch, getters }, {
    hard, // hard remove or just move to recycleBin
    confirm,  // A general warnning
    warnNotEmpty = true  // If delete none-empty dir, warn it at first
  } = {}) {
    // Guard
    if (!getters.isCanRemove) {
      await Ti.Alert('i18n:e-pvg-fobidden', { type: "warn" })
      return false
    }
    if (!state.dirId) {
      throw 'removeChecked: State Has No dirId'
    }

    let ids = Ti.Util.getTruthyKeyInArray(state.checkedIds)
    if (_.isEmpty(ids)) {
      await Ti.Alert('i18n:del-none')
      return false
    }
    state.LOG("removeChecked", ids)

    // Config is hard
    hard = Ti.Util.fallback(hard, getters.isHardRemove, false)

    if (_.isUndefined(confirm) && (hard || getters.isInRecycleBin)) {
      confirm = "i18n:del-hard"
    }

    // If confirm
    if (confirm) {
      if (!(await Ti.Confirm(confirm, {
        type: "warn",
        vars: { N: ids.length }
      }))) {
        return false
      }
    }

    // If contains dir
    if (warnNotEmpty && getters.checkedItems) {
      let notEmptyDirs = []
      let notEmptyQuery = []
      for (let it of getters.checkedItems) {
        if ("DIR" == it.race) {
          notEmptyQuery.push(Wn.Sys.exec2(`count id:${it.id}`).then(re => {
            let n = parseInt(_.trim(re))
            if (n > 0) {
              notEmptyDirs.push(it)
            }
          }))
        }
      }
      await Promise.all(notEmptyQuery)

      if (!_.isEmpty(notEmptyDirs)) {
        let N = notEmptyDirs.length
        let tip = _.map(notEmptyDirs, dir => dir.title || dir.nm).join(", ")
        if (!await Ti.Confirm("i18n:del-not-empty-dir", {
          type: "warn",
          vars: { N, tip }
        })) {
          return false
        }
      }
    }

    let itemStatus = {}
    _.forEach(ids, id => itemStatus[id] = "processing")

    commit("setStatus", { deleting: true })
    commit("setItemStatus", itemStatus)

    // Prepare the cmds
    let cmd = ["o"]
    for (let id of ids) {
      cmd.push(`@get ${id}`)
    }
    cmd.push("@delete -r")
    let cmdText = cmd.join(" ")
    await Wn.Sys.exec2(cmdText)

    _.forEach(ids, id => itemStatus[id] = "removed")
    commit("setItemStatus", itemStatus)

    //console.log("getback current", current)
    _.delay(async () => {
      // Remove it from search list
      commit("removeListItems", ids)

      // Update current
      await dispatch("selectMeta")

      commit("setStatus", { deleting: false })
      commit("clearItemStatus")
    }, 500)

    return true
  },
  //--------------------------------------------
  //
  //               Move to
  //
  //--------------------------------------------
  async moveTo({ state, commit, dispatch, getters }, setup = {}) {
    // Guard
    if (!getters.isCanUpdate) {
      return await Ti.Alert('i18n:e-pvg-fobidden', { type: "warn" })
    }
    if (!state.dirId) {
      throw 'moveTo: State Has No dirId'
    }

    // Get the meta list
    let list = _.filter(state.list, li => state.checkedIds[li.id])
    state.LOG("moveTo", list)

    if (_.isEmpty(list)) {
      return await Ti.Toast.Open('i18n:nil-item', "warn")
    }

    // Dialog
    await Wn.Io.moveTo(list, _.assign({}, setup, {
      base: state.oDir,
      // leafBy: [
      //   { race: "FILE" },
      //   { race: "DIR", tp: "article" }
      // ],
      // objMatch: {
      //   race: "DIR"
      // },
      markItemStatus: (itId, status) => {
        commit("setItemStatus", { [itId]: status })
      },
      doneMove: async () => {
        await dispatch("queryList")
      }
    }))
  },
  //--------------------------------------------
  //
  //                 Open
  //
  //--------------------------------------------
  async openContentEditor({ state, commit, dispatch, getters }) {
    // Guard
    let meta = await getContentMeta(state, getters.contentLoadPath)
    if (!meta) {
      return await Ti.Toast.Open("i18n:empty-data", "warn")
    }

    // Open Editor
    let newContent = await Wn.EditObjContent(meta, {
      content: state.content
    })

    // Cancel the editing
    if (_.isUndefined(newContent)) {
      return
    }

    // Update the current editing
    await dispatch("changeContent", newContent)
    commit("syncStatusChanged")
  },
  //--------------------------------------------
  async openCurrentMetaEditor({ state, commit, dispatch, getters }) {
    // Guard
    if (!state.meta && !state.oDir) {
      return await Ti.Toast.Open("i18n:empty-data", "warn")
    }
    //.........................................
    // For current selected
    //.........................................
    if (state.meta) {
      let meta = await Wn.Sys.exec2(`o id:${state.meta.id} @json -path -cqn`, {
        as: "json"
      })
      // Edit current meta
      let reo = await Wn.EditObjMeta(meta, {
        fields: "default", autoSave: false
      })

      // Cancel the editing
      if (_.isUndefined(reo)) {
        return
      }

      // Update the current editing
      let { updates } = reo
      if (!_.isEmpty(updates)) {
        if (!getters.isCanUpdate) {
          return await Ti.Alert('i18n:e-pvg-fobidden', { type: "warn" })
        }
        return await dispatch("updateMeta", updates)
      }
      return state.meta
    }
    //.........................................
    // For Whole thing thing
    //.........................................
    let meta = await Wn.Sys.exec2(`o id:${state.oDir.id} @json -path -cqn`, {
      as: "json"
    })
    let reo = await Wn.EditObjMeta(meta, {
      fields: "auto", autoSave: getters.isCanUpdate
    })
    // Cancel the editing
    if (!reo) {
      return
    }
    commit("setDir", reo.data)
    return reo.data
  },
  //--------------------------------------------
  async openCurrentPrivilege({ state, commit, dispatch }) {
    let meta = state.meta || state.oDir

    if (!meta) {
      await Ti.Toast.Open("i18n:nil-obj")
      return
    }

    let newMeta = await Wn.EditObjPvg(meta)

    // Update to current list
    if (newMeta) {
      // Update Current Meta
      //console.log("pvg", newMeta)
      if (state.meta && state.meta.id == newMeta.id) {
        commit("setMeta", newMeta)
      }
      // Update Thing Set
      else {
        await dispatch("reload", newMeta)
      }
    }

    return newMeta
  },
  //--------------------------------------------
  //
  //                 Update
  //
  //--------------------------------------------
  async updateDirField({ state, commit, dispatch }, { name, value } = {}) {
    state.LOG("updateDirFields", { name, value })

    let uniqKey = Ti.Util.anyKey(name)
    Wn.Util.setFieldStatusBeforeUpdate({ commit }, uniqKey)


    let data = Ti.Types.toObjByPair({ name, value })
    let reo = await dispatch("updateDir", data)

    Wn.Util.setFieldStatusAfterUpdate({ commit }, uniqKey, reo)
  },
  //--------------------------------------------
  async updateDir({ dispatch }, data = {}) {
    await dispatch("updateMetaOrDir", { data, forMeta: false })
  },
  //--------------------------------------------
  async updateMetaField({ state, commit, dispatch }, { name, value } = {}) {
    state.LOG("updateMetaFields", { name, value })

    let uniqKey = Ti.Util.anyKey(name)
    Wn.Util.setFieldStatusBeforeUpdate({ commit }, uniqKey)


    let data = Ti.Types.toObjByPair({ name, value })
    let reo = await dispatch("updateMeta", data)

    Wn.Util.setFieldStatusAfterUpdate({ commit }, uniqKey, reo)

    return reo
  },
  //--------------------------------------------
  async updateMeta({ dispatch }, data = {}) {
    return await dispatch("updateMetaOrDir", { data, forMeta: true })
  },
  //--------------------------------------------
  async updateMetaOrDir({ state, commit, getters }, {
    forMeta = true,
    data = {}
  } = {}) {
    // Guard
    if (!getters.isCanUpdate) {
      return await Ti.Alert('i18n:e-pvg-fobidden', { type: "warn" })
    }
    let taName = forMeta ? "meta" : "oDir";
    state.LOG("updateMetaOrDir", `(${taName})`, data)

    // Get obj
    let obj = forMeta ? state.meta : state.oDir;

    // Check Necessary
    if (_.isMatchWith(obj, data, _.isEqual)) {
      return obj
    }

    if (!obj) {
      await Ti.Toast.Open(
        `WnObj ${taName} without defined`,
        "warn")
      return obj
    }

    if (!state.dirId) {
      await Ti.Toast.Open("WnObj dirId without defined", "warn")
      return obj
    }

    let uniqKey = Ti.Util.anyKey(_.keys(data))

    // Mark field status
    Wn.Util.setFieldStatusBeforeUpdate({ commit }, uniqKey)
    _.forEach(data, (_, name) => {
      Wn.Util.setFieldStatusBeforeUpdate({ commit }, name)
    })

    // Do the update
    let json = JSON.stringify(data)
    let oid = obj.id
    let cmdText = `o id:${oid} @update @json -cqn`
    let reo = await Wn.Sys.exec2(cmdText, { input: json, as: "json" })
    let isError = reo instanceof Error;

    if (!isError && !Ti.Util.isNil(reo)) {
      if (forMeta) {
        commit("setMeta", reo)
        commit("setListItem", reo)
      }
      // For oDir
      else {
        commit("setDir", reo)
      }
    }

    Wn.Util.setFieldStatusAfterUpdate({ commit }, uniqKey, reo)
    _.forEach(data, (_, name) => {
      Wn.Util.setFieldStatusAfterUpdate({ commit }, name, reo)
    })

    return reo
  },
  //--------------------------------------------
  async batchUpdateCheckedItemsField({ state, commit, dispatch }, { name, value } = {}) {
    state.LOG("batchUpdateCheckedItemsField", { name, value })

    let uniqKey = Ti.Util.anyKey(name)
    Wn.Util.setFieldStatusBeforeUpdate({ commit }, uniqKey)

    let data = Ti.Types.toObjByPair({ name, value })
    let reo = await dispatch("batchUpdateCheckedItems", data)

    Wn.Util.setFieldStatusAfterUpdate({ commit }, uniqKey, reo)
  },
  //--------------------------------------------
  async batchUpdateCheckedItems({ state, commit, getters }, data = {}) {
    state.LOG("batchUpdateCheckedItems", data)
    // Guard
    if (!getters.isCanUpdate) {
      return await Ti.Alert('i18n:e-pvg-fobidden', { type: "warn" })
    }
    if (!state.dirId) {
      return await Ti.Alert('State Has No dirId', "warn")
    }

    let ids = Ti.Util.getTruthyKeyInArray(state.checkedIds)
    if (_.isEmpty(ids)) {
      return await Ti.Alert('i18n:nil-item')
    }

    let uniqKey = Ti.Util.anyKey(_.keys(data))

    // Mark field status
    Wn.Util.setFieldStatusBeforeUpdate({ commit }, uniqKey)
    _.forEach(data, (_, name) => {
      Wn.Util.setFieldStatusBeforeUpdate({ commit }, name)
    })

    // Do update
    let json = JSON.stringify(data)
    let th_set = state.thingSetId
    let cmds = [`o`]
    for (let id of ids) {
      cmds.push(`@get ${id}`)
    }
    cmds.push("@update @json -cqnl")
    let cmdText = cmds.join(" ")
    state.LOG("Batch Command:", json, ">", cmdText)
    let reo = await Wn.Sys.exec2(cmdText, { input: json, as: "json" })
    state.LOG("Batch Result", reo)

    let isError = reo instanceof Error;

    if (!isError && _.isArray(reo)) {
      for (let it of reo) {
        if (state.meta && state.meta.id == it.id) {
          commit("setMeta", it)
        }
        commit("setListItem", it)
      }
    }

    // Recover field status
    Wn.Util.setFieldStatusAfterUpdate({ commit }, uniqKey, reo)
    _.forEach(data, (_, name) => {
      Wn.Util.setFieldStatusAfterUpdate({ commit }, name, reo)
    })
  },
  //--------------------------------------------
  //
  //  Content About
  //
  //--------------------------------------------
  async parseContentData({ state, commit, getters }) {
    try {
      let content = state.content
      let contentType = state.contentType

      // Eval mime
      if ("<MIME>" == contentType) {
        let pathInfo = getters.contentLoadInfo || {}
        let { path, mime } = pathInfo
        if (!mime) {
          if ("<self>" == path) {
            contentType = _.get(state, "meta.mime")
          }
          // Load mime from server side
          else {
            let type = Ti.Util.getSuffixName(path)
            if (type) {
              mime = await Wn.Sys.exec2(`o @mime ${type} -as value`)
              contentType = _.trim(mime)
            }
            // Use text plain
            else {
              contentType = "text/plain"
            }
          }
        }
        // Use mime
        else {
          contentType = mime
        }
      }

      state.LOG("parseContentData", contentType)

      let contentData = null
      if (/^(application|text)\/json$/.test(contentType)) {
        let str = _.trim(content)
        contentData = JSON.parse(str || null)
        state.LOG("parseContentData -> ", contentData)
      }
      commit("setContentData", contentData)
    }
    catch (E) {
      if (!state.contentQuietParse) {
        throw E
      }
    }
  },
  //--------------------------------------------
  changeContent({ commit, dispatch }, payload) {
    commit("setContent", payload)
    commit("syncStatusChanged");

    // Try parse content
    dispatch("parseContentData")
  },
  //----------------------------------------
  updateContent({ commit, getters, dispatch }, content) {
    commit("setContent", content)
    commit("setSavedContent", content)
    commit("syncStatusChanged")


    // Try parse content
    dispatch("parseContentData")
  },
  //--------------------------------------------
  async saveContent({ state, commit, getters }) {
    //console.log("saveContent")
    // Guard: ing
    if (state.status.saving || !state.status.changed) {
      return
    }

    // Which content should I load?
    let path = getters.contentLoadPath
    if (!path) {
      return
    }
    let meta = await getContentMeta(state, getters.contentLoadPath)

    // Guard
    if (!meta) {
      return await Ti.Toast.Open("saveContent nil Meta!")
    }

    // Do save content
    commit("setStatus", { saving: true })

    let content = state.content
    let newMeta = await Wn.Io.saveContentAsText(meta, content)

    commit("setStatus", { saving: false })
    if ("<self>" == path) {
      commit("setMeta", newMeta)
    }
    commit("setSavedContent", content)
    commit("syncStatusChanged")

    // return the new meta
    return newMeta
  }
  //--------------------------------------------
}
return _M;
;
})()
// ============================================================
// EXPORT 'ti-color.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/color/ti-color.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////////
  props: {
    //---------------------------------------------------
    // Data
    //---------------------------------------------------
    "value": {
      type: [String, Number],
      default: null
    },
    //---------------------------------------------------
    // Behavior
    //---------------------------------------------------
    "majorColors": {
      type: Array,
      default: () => ["#980000", "#ff0000", "#ff9900", "#ffff00", "#00ff00",
        "#00ffff", "#4a86e8", "#0000ff", "#9900ff", "#ff00ff"]
    },
    // List the colors at first rows
    "topColors": {
      type: Array,
      default: () => ["#e6b8af", "#f4cccc", "#fce5cd", "#fff2cc", "#d9ead3",
        "#d0e0e3", "#c9daf8", "#cfe2f3", "#d9d2e9", "#ead1dc"]
    },
    // List the colors at last rows
    // it should same lenght with topColors
    "bottomColors": {
      type: Array,
      default: () => ["#5b0f00", "#660000", "#783f04", "#7f6000", "#274e13",
        "#0c343d", "#1c4587", "#073763", "#20124d", "#4c1130"]
    },
    // How many middle colors between the head and bottom
    "middleDegree": {
      type: Number,
      default: 5
    },
    "showAlpha": {
      type: Boolean,
      default: true
    },
    "notifyClick": {
      type: String,
      default: "change"
    },
    "notifyHex": {
      type: String,
      default: "change"
    },
    "notifyAlpha": {
      type: String,
      default: "change"
    }
  },
  ///////////////////////////////////////////////////////
  computed: {
    //---------------------------------------------------
    theColor() {
      return Ti.Types.toColor(this.value, null)
    },
    //---------------------------------------------------
    theHex() {
      if (this.theColor)
        return this.theColor.hex
    },
    //---------------------------------------------------
    theAlpha() {
      if (this.theColor)
        return Math.round(this.theColor.alpha * 100)
    },
    //---------------------------------------------------
    theColorValue() {
      if (this.theColor)
        return this.theColor.rgba
      return Ti.I18n.get("empty")
    },
    //---------------------------------------------------
    colCount() {
      return this.topColors.length
    },
    //---------------------------------------------------
    colorGrays() {
      let grays = []
      let step = 255 / this.colCount
      for (let i = 0; i < this.colCount; i++) {
        let v = Math.round((i + 1) * step)
        grays.push(Ti.Types.toColor(v))
      }
      return grays
    },
    //---------------------------------------------------
    colorMajors() {
      let majors = []
      for (let v of this.majorColors) {
        majors.push(Ti.Types.toColor(v))
      }
      return majors
    },
    //---------------------------------------------------
    colorMatrix() {
      // Head Colors
      let tops = []
      for (let v of this.topColors) {
        tops.push(Ti.Types.toColor(v))
      }
      // Bottom colors
      let bottoms = []
      for (let v of this.bottomColors) {
        bottoms.push(Ti.Types.toColor(v))
      }
      // Middle Colors
      let matrix = [tops]
      for (let y = 0; y < this.middleDegree - 1; y++) {
        let rows = []
        for (let x = 0; x < this.colCount; x++) {
          let top = tops[x]
          let bottom = bottoms[x]
          let pos = (y + 1) / this.middleDegree
          let color = top.between(bottom, pos)
          color.adjustByHSL({ s: .5 })
          rows.push(color)
        }
        matrix.push(rows)
      }
      // The bottom
      matrix.push(bottoms)
      // Return the matrix
      return matrix
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods: {
    //---------------------------------------------------
    colorItemStyle(color) {
      return {
        "background-color": color.rgb
      }
    },
    //---------------------------------------------------
    OnHexChanged(evt) {
      if (this.notifyHex) {
        let hex = _.trim(evt.target.value)
        if (/^[0-9a-f]{3,6}$/i.test(hex)) {
          hex = "#" + hex
        }
        let co = Ti.Types.toColor(hex)
        if (this.showAlpha && _.isNumber(this.theAlpha)) {
          co.alpha = this.theAlpha / 100
        }
        this.$notify(this.notifyHex, co)
      }
    },
    //---------------------------------------------------
    OnAlphaChanged(a) {
      if (this.notifyAlpha && this.showAlpha) {
        let co = this.theColor
          ? this.theColor.clone()
          : Ti.Types.toColor("black")
        co.alpha = a / 100
        this.$notify(this.notifyAlpha, co)
      }
    },
    //---------------------------------------------------
    OnColorClicked(color) {
      if (this.notifyClick) {
        let co = color.clone()
        if (this.showAlpha && _.isNumber(this.theAlpha)) {
          co.alpha = this.theAlpha / 100
        }
        this.$notify(this.notifyClick, co)
      }
    }
    //---------------------------------------------------
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-filterbar.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/filterbar/ti-filterbar.mjs'] = (function(){
////////////////////////////////////////////
const DATERANGE_FILTER_TAG = [
  "=>Ti.DateTime.formatMsDateRange(val",
  "'i18n:date-fmt'",
  "'i18n:dt-range-unknown'",
  "'i18n:dt-range-to'",
  "''",
  "'i18n:dt-range-from'",
  "''",
  "'')"
].join(",");
////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  //////////////////////////////////////////
  data: () => ({
    myMajorValues: [],
    myTags: [],
    mySideMajors: [],
    myTopMajors: []
  }),
  //////////////////////////////////////////
  computed: {
    //-------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-mode-v": "V" == this.mode,
        "is-mode-h": "H" == this.mode
      });
    },
    //-------------------------------------
    MajorItems() {
      let list = [];
      if (this.majors) {
        if (_.isArray(this.majors)) {
          list = _.cloneDeep(this.majors);
        } else {
          list = [_.cloneDeep(this.majors)];
        }
      }
      _.forEach(list, (li, index) => {
        li.index = index;
      });
      return _.filter(list, (li) => li.key);
    },
    //-------------------------------------
    MajorIndexMap() {
      let re = {};
      _.forEach(this.MajorItems, (it, index) => {
        re[it.key] = index;
      });
      return re;
    },
    //-------------------------------------
    hasSideMajors() {
      return !_.isEmpty(this.mySideMajors);
    },
    //-------------------------------------
    hasTopMajors() {
      return !_.isEmpty(this.myTopMajors);
    },
    //-------------------------------------
    FilterInputConf() {
      let comConf = {
        placeholder: this.placeholder,
        prefixIcon: this.prefixIcon,
        prefixIconForClean: false,
        prefixIconNotifyName: "input:clean",
        suffixIconNotifyName: "open:advance"
      };
      if (!_.isEmpty(this.advanceForm)) {
        comConf.suffixIcon = this.suffixIcon;
      }
      return comConf;
    },
    //-------------------------------------
    FilterTagConf() {
      return {
        placeholder: null,
        removable: true
      };
    },
    //-------------------------------------
    hasFilter() {
      return !_.isEmpty(this.filter);
    },
    //-------------------------------------
    hasSorter() {
      return !_.isEmpty(this.sorter);
    },
    //-------------------------------------
    showSorter() {
      return !_.isEmpty(this.sorterConf);
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //-------------------------------------
    OnSorterChange(val) {
      if (!_.isEqual(val, this.sorter)) {
        this.$notify("sorter:change", val);
        this.$notify("change", {
          filter: this.filter,
          sorter: val
        });
      }
    },
    //-------------------------------------
    OnMajorChange(val, it) {
      //console.log("OnMajorChange", { val, it });
      if (_.isEmpty(val) && (_.isArray(val) || _.isObject(val))) {
        val = null;
      }
      let { index } = it;
      this.myMajorValues[index] = val;
      this.notifyFilterChange();
    },
    //-------------------------------------
    OnInputChange(val) {
      let str = _.trim(val);
      let newFlt = this.evalKeywords(str);
      this.notifyFilterChange({ newFlt });
    },
    //-------------------------------------
    OnTagsChange(val) {
      let newFlt = {};
      _.forEach(val, ({ key, val }) => {
        newFlt[key] = val;
      });
      this.notifyFilterChange({ newFlt, withTags: false });
    },
    //-------------------------------------
    OnInputClean() {
      this.notifyFilterChange({ withTags: false });
    },
    //-------------------------------------
    async OnOpenAdvance() {
      let reo = await Ti.App.Open(
        _.assign(
          {
            "icon": "fas-search",
            "title": "i18n:search-adv",
            "position": "left",
            "width": "6rem",
            "height": "100%",
            "clickMaskToClose": true
          },
          this.dialog,
          {
            result: this.filter,
            model: { event: "change", prop: "data" },
            comType: "TiForm",
            comConf: this.advanceForm,
            components: this.advanceComponents
          }
        )
      );
      // User cancel
      if (!reo) {
        return;
      }
      // Notify change
      this.notifyFilterChange({ newFlt: reo, withTags: false });
    },
    //-------------------------------------
    notifyFilterChange({ newFlt = {}, withTags = true } = {}) {
      let flt = {};
      // Get the majorValue
      _.forEach(this.MajorItems, ({ index, key }) => {
        let val = _.get(this.myMajorValues, index);
        if (!Ti.Util.isNil(val)) {
          flt[key] = val;
        }
      });
      // Get the tags value
      if (withTags) {
        _.forEach(this.myTags, (tag) => {
          let { key, val } = tag.value;
          flt[key] = val;
        });
      }
      // Merge with new filter
      _.assign(flt, newFlt);

      // Do Notify
      if (!_.isEqual(this.filter, flt)) {
        this.$notify("filter:change", flt);
        this.$notify("change", {
          filter: flt,
          sorter: this.sorter
        });
      }
    },
    //-------------------------------------
    tryEvalMajors(newVal, oldVal) {
      if (!_.isEqual(newVal, oldVal)) {
        this.evalMajors();
      }
    },
    //-------------------------------------
    evalMajors(items = this.MajorItems) {
      let isAtTop = Ti.AutoMatch.parse(this.topMajors);
      let sides = [];
      let tops = [];
      _.forEach(items, (it, index) => {
        let value = _.get(this.myMajorValues, index);
        let li = {
          key: it.key,
          index,
          comType: it.comType || "TiDroplist",
          comConf: _.assign(
            {
              placeholder: it.placeholder,
              options: it.options,
              width: it.width,
              dropWidth: it.dropWidth,
              dropDisplay: it.dropDisplay
            },
            it.comConf,
            {
              value
            }
          )
        };
        if (isAtTop(it.key)) {
          tops.push(li);
        } else {
          sides.push(li);
        }
      });
      this.mySideMajors = sides;
      this.myTopMajors = tops;
    },
    //-------------------------------------
    evalKeywords(input) {
      //console.log("evalKeywords", input);
      let flt = _.cloneDeep(this.filter) || {};
      for (let mk of this.matchKeywords) {
        let { test, key, val = "${0}", type, mode = "==", toCase } = mk;
        let m = [input];
        if (test) {
          if (_.isRegExp(test) || /^\^/.test(test)) {
            let reg = new RegExp(test);
            m = reg.exec(input);
          }
          // Auto Test
          else if (!Ti.AutoMatch.test(test, input)) {
            continue;
          }
        }
        if (m) {
          // Prepare the render context
          let c = {};
          _.forEach(m, (v, i) => (c[i] = v));
          // Render key and value
          let k = Ti.S.renderBy(key, c);
          if (!k) {
            continue;
          }
          let v = Ti.S.renderBy(val, c);
          // Covert case
          if (toCase) {
            v = Ti.S.toCase(v, toCase);
          }
          // Covert to type
          if (type) {
            let toType = Ti.Types.getFuncByType(type);
            v = Ti.Types[toType](v);
          }
          let v2 = {
            "==": (v) => v,
            "~=": (v) => `^.*${v}$`,
            "=~": (v) => `^${v}`,
            "~~": (v) => `^.*${v}`
          }[mode](v);
          // Set to result
          flt[k] = v2;
          break;
        }
      }
      return flt;
    },
    //-------------------------------------
    async evalFilter() {
      let mjvs = [];
      let tags = [];
      let keys = _.keys(this.filter);
      for (let key of keys) {
        let val = this.filter[key];
        // Is Major
        let mi = this.MajorIndexMap[key];
        if (mi >= 0) {
          mjvs[mi] = val;
          continue;
        }
        // Defined tag display
        let ft = this.filterTags[key];

        // Default value
        if (!ft) {
          tags.push({ text: `${key}=${val}`, value: { key, val } });
          continue;
        }

        // Quick ft name
        if ("<MsDateRange>" == ft) {
          ft = DATERANGE_FILTER_TAG;
        }

        // Customized function
        if (_.isFunction(ft)) {
          let text = await ft(val, key);
          tags.push({ text, value: { key, val } });
          continue;
        }

        // Dict
        let dictName = Ti.DictFactory.DictReferName(ft);
        if (dictName) {
          let d = Ti.DictFactory.CheckDict(dictName);
          let text = await d.getItemText(val);
          tags.push({ text, value: { key, val } });
          continue;
        }
        // Template
        let text = Ti.Util.explainObj({ key, val }, ft);
        tags.push({ text, value: { key, val } });
      }
      this.myMajorValues = mjvs;
      this.myTags = tags;
      this.evalMajors();
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "filter": {
      handler: "evalFilter",
      immediate: true
    },
    "MajorItems": "tryEvalMajors",
    "topMajors": "tryEvalMajors"
  },
  //////////////////////////////////////////
  mounted() {
    this.evalMajors();
  }
  //////////////////////////////////////////
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-pay-checkout.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/pay/checkout/web-pay-checkout.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data: ()=>({
    showAddrCanList : false
  }),
  //////////////////////////////////////////
  props : {
    "currentAddr": {
      type: Object,
      default: undefined
    },
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    isEmpty() {
      return _.isEmpty(this.items)
    },
    //--------------------------------------
    CurrencyChar(){
      return Ti.Bank.getCurrencyChar(this.currency)
    },
    //--------------------------------------
    TheItems() {
      let list = []
      _.forEach(this.items, it=>{
        list.push({
          ... it,
          subtotal: Ti.Num.precise(it.price * it.amount)
        })
      })
      return list
    },
    //--------------------------------------
    TotalFee() {
      let fee = 0;
      _.forEach(this.TheItems, it=>fee+=(it.price*it.amount))
      return Ti.Num.precise(fee)
    },
    //--------------------------------------
    AddrCanList() {
      return {
        data : this.addresses,
        blankAs : {
          "className" : "ti-fill-parent",
          "icon": "fas-map",
          "text": "i18n:address-empty-list"
        },
        comType : "WebTileAddress",
        comConf : {
          value : "=..",
          countries: this.countries,
          can: {
            remove: false,
            edit: false,
            select: false,
            default: false
          },
          selectable : true,
          currentId: _.get(this.currentAddr, "id")
        }
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnShowProduct({id}={}) {
      this.$notify("show:product", id)
    },
    //--------------------------------------
    OnChooseAddr() {
      this.showAddrCanList = true
    },
    //--------------------------------------
    OnHideAddrCanList() {
      this.showAddrCanList = false
    },
    //--------------------------------------
    OnAddAddr() {
      this.$notify("add:address")
    },
    //--------------------------------------
    OnSelectAddr(addr) {
      this.showAddrCanList = false
      this.$emit("change", {
        address: addr
      })
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-upload-file-box.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/upload/file-box/ti-upload-file-box.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  data: () => ({
    mouseEnterPrefix: false
  }),
  /////////////////////////////////////////
  props: {
    //------------------------------------------------
    // Data
    //------------------------------------------------
    // The source to display image
    "preview": {
      type: [String, Object],
      default: null
    },
    // The value must be a LocalFile object
    // to prerender the LocalFile during uploading
    "uploadFile": {
      type: File,
      default: null
    },
    "text": {
      type: String
    },
    "href": {
      type: String
    },
    // Show the process `0.0-1.0` during the uploading
    "progress": {
      type: Number,
      default: -1
    },
    // Input a image link directly
    "exlink": {
      type: Boolean,
      default: false
    },
    //------------------------------------------------
    // Behavior
    //------------------------------------------------
    // support remove the objects
    "removable": {
      type: Boolean,
      default: true
    },
    "openable": {
      type: Boolean,
      default: true
    },
    "readonly": {
      type: Boolean,
      default: false
    },
    "downloadable": {
      type: Boolean,
      default: true
    },
    "actions": {
      type: Array,
      default: () => []
    },
    //------------------------------------------------
    // Aspect
    //------------------------------------------------
    "prefixHoverIcon": {
      type: String,
      default: "zmdi-close-circle"
    },
    "placeholder": {
      type: String,
      default: "i18n:no-selected"
    },
    "hideBorder": {
      type: Boolean,
      default: false
    }
    //------------------------------------------------
    // Measure
    //------------------------------------------------
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "hover-prefix": this.mouseEnterPrefix,
        "has-preview": this.hasPreview,
        "show-border": !this.hideBorder && !this.readonly,
        "hide-border": this.hideBorder,
        "is-readonly": this.readonly,
        "no-readonly": !this.readonly,
        "has-text": this.hasText,
        "no-text": !this.hasText
      });
    },
    //--------------------------------------
    hasPreview() {
      return this.preview ? true : false;
    },
    //--------------------------------------
    hasText() {
      return this.text ? true : false;
    },
    //--------------------------------------
    hasHref() {
      return this.href ? true : false;
    },
    //--------------------------------------
    isEditable() {
      return !this.readonly;
    },
    //--------------------------------------
    isShowProgress() {
      return this.progress > 0;
    },
    //--------------------------------------
    ProgressTip() {
      return Ti.S.toPercent(this.progress, { fixed: 1, auto: false });
    },
    //--------------------------------------
    ProgressStyle() {
      return { width: this.ProgressTip };
    },
    //--------------------------------------
    PreviewIcon() {
      if (this.uploadFile) {
        let file = this.uploadFile;
        return Ti.Icons.get({
          type: Ti.Util.getSuffixName(file.name),
          mime: file.type,
          race: Ti.Util.isNil(file.type) ? "DIR" : "FILE"
        });
      }
      // Tip Remove
      if (this.hasText && this.mouseEnterPrefix) {
        return this.prefixHoverIcon;
      }
      // Normal image
      if (this.preview) {
        return this.preview;
      }
      // Show Icon
      return "zmdi-folder-outline";
    },
    //--------------------------------------
    BoxItemText() {
      if (this.text) {
        return this.text;
      }
      return Ti.I18n.text(this.placeholder);
    },
    //--------------------------------------
    ActionItems() {
      let items = [];
      let mores = [];

      let itActions = {
        select: {
          icon: "fas-upload",
          text: "i18n:select",
          action: () => {
            this.$refs.file.click();
          }
        },
        download: {
          icon: "zmdi-cloud-download",
          text: "i18n:download",
          className: "as-download",
          action: () => {
            this.OnDownload();
          }
        },
        open: {
          icon: "zmdi-open-in-new",
          text: "i18n:open",
          className: "as-open",
          action: () => {
            this.OnOpen();
          }
        }
      };

      if (this.isEditable) {
        items.push(_.omit(itActions.select, "text"));
        if (this.hasPreview) {
          mores.push(itActions.download, itActions.open);
        }
      }
      // Readonly
      else if (this.hasPreview) {
        items.push(_.omit(itActions.open, "text"));
        mores.push(itActions.download);
      }

      // More actions
      if (_.isArray(this.actions)) {
        for (let at of this.actions) {
          let handler;
          if (_.isString(at.action)) {
            handler = () => {
              this.$notify(at.action, at.payload);
            };
          }
          if (_.isFunction(at.action)) {
            handler = () => {
              at.action(at.payload, this);
            };
          }
          mores.push({
            icon: at.icon,
            text: at.text,
            className: at.className,
            handler
          });
        }
      }

      if (!_.isEmpty(mores)) {
        items.push({
          icon: "zmdi-more-vert",
          topHoverOpen: true,
          items: mores
        });
      }

      return items;
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnMouseEnterPrefix() {
      if (this.hasText) this.mouseEnterPrefix = true;
    },
    //--------------------------------------
    OnMouseLeaverPrefix() {
      this.mouseEnterPrefix = false;
    },
    //--------------------------------------
    OnRemove() {
      this.mouseEnterPrefix = false;
      this.$notify("remove");
    },
    //--------------------------------------
    OnClickToEdit() {
      if (this.readonly) {
        this.$notify("open");
      } else {
        this.$refs.file.click();
      }
    },
    //--------------------------------------
    async OnDropFiles(files) {
      let file = _.get(files, 0);
      if (file && !this.readonly) {
        this.$notify("upload", file);
      }
    },
    //--------------------------------------
    async OnSelectLocalFilesToUpload(evt) {
      await this.OnDropFiles(evt.target.files);
      this.$refs.file.value = "";
    },
    //--------------------------------------
    OnRemove() {
      this.$notify("remove");
    },
    //--------------------------------------
    OnOpen() {
      this.$notify("open");
    },
    //--------------------------------------
    OnExlink() {
      this.$notify("exlink");
    },
    //--------------------------------------
    OnDownload() {
      this.$notify("download");
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'www-mod-shop.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/lib/www/mod/shop/www-mod-shop.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////
  getters : {
    //--------------------------------------------
    urls(state, getters, rootState, rootGetters) {
      let map = {}
      _.forEach(state.paths, (ph, key)=>{
        map[key] = rootGetters.getApiUrl(ph)
      })
      return map
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  mutations : {
    //--------------------------------------------
    appendBasket(state, buyIt) {
      state.basket = _.concat(state.basket, buyIt)
    },
    //--------------------------------------------
    setBasket(state, buyIts=[]) {
      state.basket = buyIts
    },
    //--------------------------------------------
    setPayment(state, pay) {
      state.payment = pay
    },
    //--------------------------------------------
    setPaths(state, paths) {
      state.paths = _.cloneDeep(paths)
    },
    //--------------------------------------------
    mergePaths(state, paths) {
      _.assign(state.paths, paths)
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  actions : {
    //--------------------------------------------
    async fetchOrder({getters, rootState}, {orderId}={}) {
      if(!orderId) {
        return 
      }
      let reo = await Ti.Http.get(getters.urls.fetchOrder, {
        params: {
          ticket: rootState.auth.ticket,
          id: orderId
        },
        as: "json"
      })
      // Success
      if(reo.ok) {
        return reo.data
      }
      // Fail
      else {
        console.warn("Fail to loadOrder", {items, reo})
      }
    },
    //--------------------------------------------
    async payOrder({getters, rootState}, {orderId, payType}={}) {
      if(!orderId) {
        return 
      }
      let reo = await Ti.Http.get(getters.urls.pay, {
        params: {
          ticket: rootState.auth.ticket,
          id: orderId,
          pt: payType
        },
        as: "json"
      })
      // Success
      if(reo.ok) {
        return reo.data
      }
      // Fail
      else {
        console.warn("Fail to payOrder", {items, reo})
      }
    },
    //--------------------------------------------
    async createOrder({getters, rootState}, {
      payType, 
      items,
      orderType,
      orderTitle,
      address,
      fail
    }={}) {
      if(!payType || _.isEmpty(items)) {
        return 
      }

      // Prepare the post obj
      let postObj = {
        title: orderTitle,
        tp: orderType,
        pay_tp: payType,
        products: items,
        // Address
      }
      if(address) {
        postObj.addr_user_country = _.get(address, "country")
        postObj.addr_user_code    = _.get(address, "code")
        postObj.addr_user_door    = _.get(address, "door")
        postObj.user_name  = _.get(address, "consignee")
        postObj.user_phone = _.get(address, "phone")
        postObj.user_email = _.get(address, "email")
        postObj.addr_user_province = _.get(address, "province")
        postObj.addr_user_city     = _.get(address, "city")
        postObj.addr_user_area     = _.get(address, "area")
        postObj.addr_user_street   = _.get(address, "street")
      }
      try{
        let reo = await Ti.Http.post(getters.urls.buy, {
          params: {
            ticket: rootState.auth.ticket
          },
          headers: {
            "Content-Type": "application/json;charset=utf-8"
          },
          body: JSON.stringify(postObj),
          as: "json"
        })
        // Success
        if(reo.ok) {
          return reo.data
        }
        // Fail
        else {
          console.warn("Fail to createOrder", {items, reo})
        }
      }
      // Handle error
      catch(resp) {
        let txt = _.trim(resp.responseText)
        let msg = Ti.I18n.explain(txt)
        Ti.Toast.Open(msg, 'error')
        if(_.isFunction(fail)) {
          fail(msg)
        }
      }
    },
    //--------------------------------------------
    async checkOrder({getters, rootState}, orderId) {
      console.log("checkOrder")
      if(!orderId) {
        return 
      }
      let reo = await Ti.Http.get(getters.urls.checkOrder, {
        params: {
          ticket: rootState.auth.ticket,
          id: orderId
        },
        as: "json"
      })
      // Success
      if(reo.ok) {
        return reo.data
      }
      // Fail
      else {
        console.warn("Fail to checkOrder", {items, reo})
      }
    },
    //--------------------------------------------
    /***
     * Load a group of item by `urls.objs`, and set the result
     * to `Store` by `@commitTarget` and `commitDataKey`
     * 
     * @param items{Array}: each element is string, whicn in form
     * `AMOUNT:ID` like `"4:4r..7a"`
     * 
     * @param commitDataKey{String} after loaded, which key in `page.data`
     * should be updated
     * @param commitTarget{String} after loaded, where to update
     */
    async loadBuyItems({getters, commit}, {
      items= [],
      commitDataKey= "goods",
      commitTarget= "page/updateData"
    }) {
      console.log("loadBuyItems", items)
      // Gether ids
      let ids = []
      let amounts = {}
      _.forEach(items, it=>{
        let m = /^(\d+):(.+)$/.exec(it)
        if(m) {
          let amount = m[1] * 1
          let id = m[2]
          if(id && amount > 0) {
            ids.push(`id:${id}`)
            amounts[id] = amount
          }
        }
      })

      // Guard
      if(_.isEmpty(ids)) {
        return
      }

      // ask remote for 
      let reo =  await Ti.Http.get(getters.urls.objs, {
        params : {phs: ids.join(" ")},
        as : "json"
      })

      // OK
      if(reo.ok) {
        let its = []
        _.forEach(reo.data, obj=> {
          let id = obj.id
          let amount = amounts[id]
          its.push({
            id, amount, obj
          })
        })

        commit(commitTarget, {
          key: commitDataKey,
          value: its
        }, {root:true})
      }
      // Fail
      else {
        console.warn("Fail to loadBuyItems", {items, reo})
      }
    },
    //--------------------------------------------
    async checkoutItems({dispatch}, {
      items=[],
      checkoutPage="page/shop/checkout.html",
      newtab=false,
      orderType="A",
      orderTitle
    }={}) {
      // Prepare the list
      let list = []
      _.forEach(items, (it)=> {
        if(it.id && it.amount > 0) {
          list.push(_.pick(it, "id", "amount"))
        }
      })

      // Do the checkout
      if(!_.isEmpty(items)) {
        await dispatch("checkout", {
          items, checkoutPage, newtab, orderType, orderTitle
        })
      }
      // Just warn it
      else {
        console.warn("!checkoutItems: Empty Item List!")
      }
    },
    //--------------------------------------------
    async checkoutBasket({state, dispatch}, {
      checkedNames = {},
      checkoutPage="page/shop/checkout.html",
      newtab=false
    }={}) {
      // Prepare the list
      let items = []
      _.forEach(state.basket, (it)=> {
        if(it.name && it.count > 0 && 
          (!checkedNames || checkedNames[it.name])) {
          items.push({
            id: it.name,
            amount: it.count
          })
        }
      })

      // Nil to buy
      if(_.isEmpty(items)) {
        Ti.Toast.Open('i18n:buy-checkout-nil', "warn")
        return
      }

      // Do the checkout
      if(!_.isEmpty(items)) {
        await dispatch("checkout", {
          items, checkoutPage, newtab
        })
      }
      // Just warn it
      else {
        console.warn("!checkoutBasket: Empty Basket")
      }
    },
    //--------------------------------------------
    /***
     * @param items{Array} - Array with item `{id:xxx, amount:1}`
     */
    async checkout({dispatch, rootGetters}, {
      items=[],
      checkoutPage="page/shop/checkout.html",
      newtab=false,
      orderType="A",
      orderTitle
    }={}) {
      //console.log("checkout", items)

      // encode the items as params
      let its = []
      _.forEach(items, it => {
        if(it.id && it.amount > 0)
          its.push(`${it.amount}:${it.id}`)
      })

      // Guard
      if(_.isEmpty(its)) {
        console.warn("!checkout: Empty Item");
        return
      }

      // Params
      let params= {
        its: its.join(","),
        tp: orderType,
        ot: orderTitle
      }

      // Open page in new tab
      if(newtab) {
        let url = rootGetters.getUrl(checkoutPage)
        await dispatch("openUrl", {
          url, 
          target:"_blank",
          params
        }, {root:true})
      }
      // Goto page
      else {
        await dispatch("navTo", {
          value: checkoutPage,
          params
        }, {root:true})
      }

    },
    //--------------------------------------------
    /***
     * @param id{String} - Product ID
     * @param n{Integer} - Product buy count, 1 as default
     * @param reset{Boolean} If true, `n` will be take as the final buy count.
     *  else if false, `n` will be take as increasment. Of cause, 
     *  negative `n` will cause the decreasment.
     */
    async updateBasket({commit, dispatch, getters, rootState}, {
      id, n=1, reset=false, success, fail, invalid, noTicket
    }={}) {
      console.log("shop:addToBasket", {id, success, fail})
      //..........................................
      // N is 0, do nothing
      if(n === 0 && !reset) {
        return
      }
      //..........................................
      // Guard Ticket
      let ticket  = rootState.auth.ticket
      if(!ticket) {
        // Customized exception handler
        if(noTicket) {
          return await dispatch(noTicket.action, noTicket.payload, {root:true})
        }
        // Default just notify
        else {
          Ti.Alert("Without Session Ticket!!!")
          return          
        }
      }
      //..........................................
      // Guard id
      if(!id) {
        // Customized exception handler
        if(invalid) {
          return await dispatch(invalid.action, invalid.payload, {root:true})
        }
        // Default just notify
        else {
          Ti.Alert("Without Product ID!!!")
          return
        }
      }
      //..........................................
      // Warn user for remove
      if(reset && n <= 0) {
        if(! (await Ti.Confirm("i18n:shop-basket-remove-confirm"))) {
          return
        }
      }
      //..........................................
      // Check to remote
      commit("setLoading", true, {root:true})
      //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      let reo =  await Ti.Http.get(getters.urls.buyIt, {
        params : {
          ticket, id, n, r:reset
        },
        as : "json"
      })
      // success
      if(reo.ok) {
        commit("setBasket", reo.data)

        // Success
        if(success) {
          await dispatch(success.action, success.payload, {root:true})
        }
      }
      // Fail
      else if(fail){
        await dispatch(fail.action, fail.payload, {root:true})
      }
      // Show error
      else {
        console.warn("shop.updateBasket fail:", reo)
      }
      //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      commit("setLoading", false, {root:true})
    },
    //--------------------------------------------
    async cleanBasket({commit, getters, rootState}) {
      console.log("shop:cleanBasket")
      //..........................................
      // Guard Ticket
      let ticket  = rootState.auth.ticket
      if(!ticket) {
        return
      }
      //..........................................
      // Confirm
      if(!await Ti.Confirm("i18n:shop-basket-clean-confirm")) {
        return
      }
      //..........................................
      // Check to remote
      commit("setLoading", true, {root:true})
      // Current Session ...
      let reo =  await Ti.Http.get(getters.urls.buyClean, {
        params : {
          ticket
        },
        as : "json"
      })
      commit("setLoading", false, {root:true})
      //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      // success
      if(reo.ok) {
        commit("setBasket", [])
      }
      //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      // Fail
      else{
        console.error("www/shop module: Fail to reloadBasket", reo)
      }
      //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    },
    //--------------------------------------------
    async reloadBasket({commit, getters, rootState}) {
      //console.log("shop:reloadBasket")
      //..........................................
      // Guard Ticket
      let ticket  = rootState.auth.ticket
      if(!ticket) {
        return
      }
      //..........................................
      // Check to remote
      commit("setLoading", true, {root:true})
      // Current Session ...
      let reo =  await Ti.Http.get(getters.urls.buyGetAll, {
        params : {
          ticket
        },
        as : "json"
      })
      commit("setLoading", false, {root:true})
      //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      // success
      if(reo.ok) {
        commit("setBasket", reo.data)
      }
      //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      // Fail
      else{
        console.error("www/shop module: Fail to reloadBasket", reo)
      }
      //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    }
    //--------------------------------------------
  } // actions : {
  ////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'm-thing-search.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/thing/mod/search/m-thing-search.mjs'] = (function(){
function saveToLocal(meta, key, val) {
  if (!meta) {
    return
  }
  //console.log("saveToLocal", key, val)
  let local = Ti.Storage.session.getObject(meta.id) || {}
  _.defaults(local, {
    filter: {},
    sorter: {},
    pager: {}
  })
  local[key] = val
  Ti.Storage.session.setObject(meta.id, local)
}
//---------------------------------------
const _M = {
  ///////////////////////////////////////////////////////
  getters: {
    //---------------------------------------------------
    currentItem(state) {
      if (state.currentId) {
        for (let it of state.list) {
          if (it.id == state.currentId) {
            return it
          }
        }
      }
      return null
    },
    //---------------------------------------------------
    checkedItems(state) {
      // Make the idsMap
      let checkedMap = {}
      for (let id of state.checkedIds) {
        checkedMap[id] = true
      }
      // Join the items
      let list = []
      for (let it of state.list) {
        if (checkedMap[it.id]) {
          list.push(it)
        }
      }
      // done
      return list
    },
    //---------------------------------------------------
    isPagerEnabled(state) {
      return state.pager && state.pager.pn > 0 && state.pager.pgsz > 0
    },
    //---------------------------------------------------
    filterObj(state) {
      let flt = Wn.Util.getMatchByFilter(state.filter, {
        match: state.fixedMatch,
        majorKey: state.majorKey,
        defaultKey: state.defaultKey,
        keyword: state.keyword
      })

      // InRecycleBin 
      flt.th_live = state.inRecycleBin ? -1 : 1

      return flt
    },
    //---------------------------------------------------
    filterStr(state, getters) {
      let flt = getters['filterObj']
      return _.isEmpty(flt)
        ? undefined
        : JSON.stringify(flt)
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  mutations: {
    setMeta(state, meta) {
      state.meta = meta
    },
    //---------------------------------------------------
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    },
    //---------------------------------------------------
    setFixedMatch(state, match) {
      state.fixedMatch = _.cloneDeep(match)
    },
    setMajorKey(state, majorKey) {
      state.majorKey = majorKey
    },
    setDefaultKey(state, defaultKey) {
      state.defaultKey = defaultKey
    },
    setKeyword(state, keyword) {
      state.keyword = keyword || {}
    },
    //---------------------------------------------------
    setFilter(state, filter = {}) {
      //console.log("setFilter", JSON.stringify(filter))
      state.filter = filter
      saveToLocal(state.meta, "filter", state.filter)
    },
    updateFilter(state, flt = {}) {
      //console.log("updateFilter", JSON.stringify(flt))
      state.filter = _.assign({}, state.filter, flt)
      saveToLocal(state.meta, "filter", state.filter)
    },
    setSorter(state, sorter) {
      state.sorter = sorter
      saveToLocal(state.meta, "sorter", state.sorter)
    },
    //---------------------------------------------------
    setPager(state, pager) {
      state.pager = pager
      saveToLocal(state.meta, "pager", state.pager)
    },
    updatePager(state, pg) {
      state.pager = _.defaults({}, pg, state.pager)
    },
    //---------------------------------------------------
    setInRecycleBin(state, inRecycleBin = false) {
      state.inRecycleBin = inRecycleBin
    },
    //---------------------------------------------------
    setList(state, list) {
      state.list = list
      state.count = _.size(list)
    },
    //---------------------------------------------------
    setCurrentId(state, id) {
      state.currentId = id || null
    },
    //---------------------------------------------------
    setShowKeys(state, showKeys = null) {
      state.showKeys = showKeys
    },
    //---------------------------------------------------
    setCheckedIds(state, ids = []) {
      state.checkedIds = _.union(ids)
    },
    //---------------------------------------------------
    selectItem(state, id) {
      if (state.currentId != id) {
        state.currentId = id
        state.checkedIds = []
        if (id) {
          state.checkedIds.push(id)
        }
      }
    },
    //---------------------------------------------------
    removeItems(state, ids = []) {
      // Find the current item index, and take as the next Item index
      //console.log("search.remove", ids)
      let index = -1
      if (state.currentId) {
        for (let i = 0; i < state.list.length; i++) {
          let it = state.list[i]
          if (it.id == state.currentId) {
            index = i
            break
          }
        }
      }
      // Make the idsMap
      let idsMap = {}
      if (_.isArray(ids)) {
        for (let id of ids) {
          idsMap[id] = true
        }
      } else if (_.isPlainObject(ids)) {
        idsMap = ids
      }
      // Remove the ids
      let list2 = []
      for (let it of state.list) {
        if (!idsMap[it.id]) {
          list2.push(it)
        }
      }
      // Then get back the current
      index = Math.min(index, list2.length - 1)
      let nextCurrent = null
      if (index >= 0) {
        nextCurrent = list2[index]
        state.currentId = nextCurrent.id
        state.checkedIds = [nextCurrent.id]
      }
      // No currentId
      else {
        state.currentId = null
        state.checkedIds = []
      }
      // Reset the list
      state.list = list2
      if (state.pager) {
        state.pager.count = list2.length
        state.pager.sum = state.pager.pgsz * (state.pager.pgc - 1) + list2.length
      }
      // console.log("the next current", nextCurrent)
    },
    //---------------------------------------------------
    updateItem(state, it) {
      let list = []
      for (let li of state.list) {
        if (li.id == it.id) {
          list.push({ ...it, __updated_time: Date.now() })
        } else {
          list.push(li)
        }
      }
      state.list = list
    },
    //---------------------------------------------------
    appendToList(state, it) {
      if (it) {
        state.list = [].concat(state.list, it)
      }
    },
    //---------------------------------------------------
    prependToList(state, it) {
      if (it) {
        state.list = [].concat(it, state.list)
      }
    }
    //---------------------------------------------------
  }
  ///////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-combo-input.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/combo/input/wn-combo-input.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data : ()=>({
    loading : false
  }),
  ////////////////////////////////////////////////////
  // props 
  props : {
    "itemBy" : {
      type : [String, Function],
      default : undefined
    },
    "findBy" : {
      type : [String, Function],
      default : undefined
    },
    "loadingIcon" : {
      type : String,
      default : "zmdi-settings zmdi-hc-spin"
    },
    "canInput" : {
      type : Boolean,
      default : true
    },
    "autoCollapse" : {
      type : Boolean,
      default : false
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    DropComType() {
      return this.dropComType || "wn-list"
    },
    //------------------------------------------------
    ThePrefixIcon() {
      if(this.loading) {
        return this.loadingIcon
      }
      return this.prefixIcon
    },
    //---------------------------------------------------
    OptionsDict() {
      if(this.dictKey) {
        console.log("haha", this)
      }
      return Wn.Dict.evalOptionsDict(this, ({loading}) => {
        this.loading = loading
      })
    },
    //---------------------------------------------------
    TheDropDisplay() {
      return this.dropDisplay || ["@<thumb>", "title|text"]
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-imgfile.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/imgfile/ti-imgfile.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  props : {
    // The source to display image
    "src" : {
      type : String,
      default : null
    },
    // The value must be a LocalFile object
    // to prerender the LocalFile during uploading
    "uploadFile" :{
      type : File,
      default : null
    },
    // Show the process `0.0-1.0` during the uploading
    "progress" : {
      type : Number,
      default : -1
    },
    // Display width
    "width" : {
      type : [String, Number],
      default : 100
    },
    // Display height
    "height" : {
      type : [String, Number],
      default : 100
    },
    // support remove the objects
    "removable" : {
      type : Boolean,
      default : true
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    ThumbStyle(){
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //--------------------------------------
    isShowRemoveIcon() {
      if(!this.uploadFile && this.src) {
        return true
      }
      return false
    },
    //--------------------------------------
    PreviewThumb() {
      if(this.uploadFile) {
        return {type:"localFile", value:this.uploadFile}
      }
      // Normal image
      if(this.src) {
        return {type:"image", value:this.src}
      }
      // Show Icon
      return {type:"font", value:"zmdi-plus"}
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickToEdit() {
      this.$refs.file.click()
    },
    //--------------------------------------
    async OnDropFiles(files) {
      let file = _.get(files, 0)
      if(file) {
        this.$notify("upload", file)
      }
    },
    //--------------------------------------
    async OnSelectLocalFilesToUpload(evt) {
      await this.OnDropFiles(evt.target.files)
      this.$refs.file.value = ""
    },
    //--------------------------------------
    OnRemove() {
      this.$notify("remove")
    },
    //--------------------------------------
    OnOpen() {
      this.$notify("open")
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'm-obj-browser.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/obj-browser/m-obj-browser.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////
  getters: {
    currentObj(state) {
      if(state.currentId) {
        let list = _.get(state.data, "list")
        return _.find(list, li => {
          return li.id == state.currentId
        })
      }
    }
  },
  ////////////////////////////////////////////
  mutations: {
    //----------------------------------------
    setMeta(state, meta) {
      state.meta = meta
    },
    //----------------------------------------
    setKeepSearch(state, keepSearch) {
      state.keepSearch = keepSearch
    },
    //----------------------------------------
    setPath(state, path) {
      state.path = path
    },
    //----------------------------------------
    setSearch(state, search) {
      state.search = _.cloneDeep(search)
    },
    //----------------------------------------
    setSearchMatch(state, match) {
      let search = _.cloneDeep(state.search)
      search.match = match || {}
      state.search = search
    },
    //----------------------------------------
    mergeSearchMatch(state, match) {
      let search = _.cloneDeep(state.search)
      _.merge(search.match, match)
      state.search = search
    },
    //----------------------------------------
    mergeSearchMatchOmitNil(state, match) {
      let search = _.cloneDeep(state.search)
      _.merge(search.match, match)
      search.match = _.omitBy(search.match, (val) => {
        return Ti.Util.isNil(val)
      })
      state.search = search
    },
    //----------------------------------------
    setFilter(state, filter) {
      state.filter = _.cloneDeep(filter)
    },
    //----------------------------------------
    setFilterBy(state, filterBy) {
      state.filterBy = filterBy
    },
    //----------------------------------------
    clearFilter(state) {
      let flt = _.cloneDeep(state.filter)
      flt.keyword = null
      flt.match = {}
      state.filter = flt
    },
    //----------------------------------------
    setCurrentId(state, currentId) {
      state.currentId = currentId
    },
    //----------------------------------------
    setSorter(state, sorter) {
      state.sorter = _.cloneDeep(sorter)
    },
    //----------------------------------------
    setPager(state, { pageNumber, pageSize } = {}) {
      if (_.isNumber(pageNumber)) {
        state.pageNumber = pageNumber
      }
      if (_.isNumber(pageSize)) {
        state.pageSize = pageSize
      }
    },
    //----------------------------------------
    setPageNumber(state, pageNumber = 1) {
      state.pageNumber = pageNumber
    },
    //----------------------------------------
    setPageSize(state, pageSize = 100) {
      state.pageSize = pageSize
    },
    //----------------------------------------
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    },
    //----------------------------------------
    prependDataItem(state, newItem) {
      Ti.Util.UpsertStateDataItemAt(state, newItem, -1)
    },
    //----------------------------------------
    appendDataItem(state, newItem) {
      Ti.Util.UpsertStateDataItemAt(state, newItem, 1)
    },
    //----------------------------------------
    setDataItem(state, newItem) {
      Ti.Util.UpsertStateDataItemAt(state, newItem, 0)
    },
    //----------------------------------------
    mergeDataItem(state, theItem) {
      Ti.Util.MergeStateDataItem(state, theItem)
    },
    //----------------------------------------
    removeDataItems(state, items = []) {
      Ti.Util.RemoveStateDataItems(state, items)
    },
    //----------------------------------------
    setData(state, data) {
      state.data = data
    },
    //----------------------------------------
    setFieldStatus(state, { name, type, text } = {}) {
      if (name) {
        let ukey = _.concat(name).join("-")
        Vue.set(state.fieldStatus, ukey, { type, text })
      }
    },
    //----------------------------------------
    clearFieldStatus(state, names = []) {
      // Clean All
      if (_.isEmpty(names)) {
        state.fieldStatus = {}
      }
      // Clear one
      else {
        state.fieldStatus = _.omit(state.fieldStatus, names)
      }
    }
    //----------------------------------------
  }
  ////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-sheet-emoji.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/sheet/emoji/ti-sheet-emoji.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////////
  data : ()=>({
    myValue : null
  }),
  ///////////////////////////////////////////////////////
  props : {
    "value" : {
      type : [String,Object,Number],
      default : null
    },
    "width" : {
      type : [Number, String],
      default : "100%"
    },
    "height" : {
      type : [Number, String],
      default : "100%"
    },
    "data" : {
      type : [String, Array],
      default : ()=>[
        "😀 😃 😄 😁 😆 😅 🤣 😂 🙂 🙃 😉 😊 😇",
        "🥰 😍 🤩 😘 😗 😚 😙 😋 😛 😜 🤪 😝 🤑",
        "🤗 🤭 🤫 🤔 🤐 🤨 😐 😑 😶 😏 😒 🙄 😬",
        "🤥 😌 😔 😪 🤤 😴 😷 🤒 🤕 🤢 🤮 🤧 🥵",
        "🥶 🥴 😵 🤯 🤠 🥳 😎 🤓 🧐 😕 😟 🙁 ☹️",
        "😮 😯 😲 😳 🥺 😦 😧 😨 😰 😥 😢 😭 😱",
        "😖 😣 😞 😓 😩 😫 🥱 😤 😡 😠 🤬 😈 👿",
        "💀 ☠️ 💩 🤡 👹 👺 👻 👽 👾 🤖 😺 😸 😹",
        "😻 😼 😽 🙀 😿 😾 🙈 🙉 🙊 "
      ]
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //---------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    },
    //---------------------------------------------------
    hasValue() {
      return this.TheValue ? true : false
    },
    //---------------------------------------------------
    TheValue() {
      return this.myValue || this.value
    },
    //---------------------------------------------------
    TheDataSheet() {
      let list = []
      let sheet = _.flattenDeep(this.data).join("").replace(/[ ]/g, "")
      // 逐字解析
      for(let i=0; i<sheet.length; i+=2) {
        let c = sheet.substring(i, i+2);
        list.push({
          value : c
        })
      }
      return list
    }
    //---------------------------------------------------
  },
  methods : {
    //---------------------------------------------------
    OnClickTop() {
      if(this.notifyName) {
        this.$notify(this.notifyName, this.notifyConf)
      }
    }
    //---------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    "myValue" : function() {
      this.$notify("change", this.myValue)
    }
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-chart-raw-rank.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/chart/raw/rank/ti-chart-raw-rank.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  props : {
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    ChartSetup() {
      return (chart, data)=>{
        //console.log(data)
        let {list} = this.evalXYData(data)
        if(_.isEmpty(list))
          return

        // Set data
        //list.reverse()
        chart.data(list);

        // Axis/Tick/Tooltip ...
        this.applyChartSetup(chart)

        chart.coordinate().transpose();

        let view = chart.interval().position(this.ChartPosition)
        this.applyViewOptions(view, this.view)
       
        chart.interaction('element-active');
        

      } // ~ function
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-obj-detail.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/detail/wn-obj-detail.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data: () => ({
    myFormFields: [],
    myCurrentTab: 0
  }),
  /////////////////////////////////////////
  props: {
    "value": {
      type: Object,
      default: undefined
    },
    "fields": {
      type: [Array, String],
      default: undefined
    },
    "fixedKeys": {
      type: Array,
      default: () => ["title", "sort"]
    },
    "fieldStatus": {
      type: Object,
      default: () => ({})
    },
    "preview": {
      type: Object,
      default: () => ({})
    },
    "form": {
      type: Object,
      default: () => ({})
    }
  },
  /////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    isNil() {
      return Ti.Util.isNil(this.value)
    },
    //--------------------------------------
    Layout() {
      return {
        type: "rows",
        border: true,
        blocks: [
          {
            size: "37%",
            body: "preview",
          }, {
            body: "form"
          }
        ]
      }
    },
    //--------------------------------------
    Schema() {
      return {
        preview: {
          comType: "WnObjPreview",
          comConf: {
            ... this.preview,
            meta: this.value
          }
        },
        form: {
          comType: "TiForm",
          comConf: {
            spacing: "comfy",
            mode: "tab",
            tabAt: "bottom-center",
            ... this.form,
            fields: this.myFormFields,
            fieldStatus: this.fieldStatus,
            currentTab: this.myCurrentTab,
            autoShowBlank: true,
            data: this.value
          }
        }
      }
    }
    //--------------------------------------
  },
  /////////////////////////////////////////
  methods: {
    //--------------------------------------
    async evalObjFormField(fields = this.fields) {
      let reo = await Wn.Obj.genObjFormFields({
        meta: this.value,
        fields,
        currentTab: 0,
        fixedKeys: this.fixedKeys
      })
      this.myCurrentTab = reo.currentTab;
      this.myFormFields = reo.fields
    },
    //--------------------------------------
    async tryEvalObjFormField(newVal, oldVal) {
      if (!_.isEqual(newVal, oldVal)) {
        await this.evalObjFormField(this.fields)
      }
    }
    //--------------------------------------
  },
  /////////////////////////////////////////
  watch: {
    "value": "tryEvalObjFormField",
    "fields": "tryEvalObjFormField"
  },
  /////////////////////////////////////////
  mounted() {
    this.evalObjFormField()
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'm-obj-meta.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/obj-meta/m-obj-meta.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////
  getters : {
    //-------------------------------------------
    get(state){return state},
    //-------------------------------------------
    getHome(state) {
      let obj = state.meta
      let ans = state.ancestors
      if(!_.isEmpty(ans)) {
        // for /home/xiaobai
        if(1 == ans.length) {
          if("home" == ans[0].nm) {
            return obj
          }
        }
        // for /home/xiaobai/path/to/file
        if("home" == ans[0].nm) {
          return ans[1]
        }
      }
      // for /root
      else if(obj && "root" == obj.nm) {
        return obj
      }
      // Dont't known how to find the home
      return null
    },
    //-------------------------------------------
    hasParent (state) {
      // console.log(state.ancestors)
      // console.log(state.parent)
      return state.parent ? true : false
    },
    //-------------------------------------------
    parentIsHome(state) {
      if(!_.isEmpty(state.ancestors) && state.parent && state.meta) {
        if(/^\/home\//.test(state.meta.ph)) {
          return state.parent.pid == state.ancestors[0].id
        }
      }
      return false
    },
    //-------------------------------------------
    isHome (state) {
      if(!_.isEmpty(state.ancestors) && state.meta) {
        if(/^\/home\//.test(state.meta.ph)) {
          return state.meta.pid == state.ancestors[0].id
        }
      }
      return false
    }
    //-------------------------------------------
  },
  ////////////////////////////////////////////////
  mutations : {
    //-------------------------------------------
    reset(state) {
      _.assign(state, {
        "ancestors" : [], 
        "parent" : null, 
        "meta": null,
        "status" : {
          "changed"   : false,
          "saving"    : false,
          "reloading" : false
        },
        "fieldStatus" : {}
      })
    },
    //-------------------------------------------
    setAncestors(state, ancestors=[]) {
      state.ancestors = _.concat(ancestors)
    },
    //-------------------------------------------
    setParent(state, parent) {
      state.parent = parent
    },
    //-------------------------------------------
    setMeta(state, meta) {
      state.meta = meta
    },
    //------------------------------------------
    setFieldStatus(state, {name, message, status}={}) {
      if(name){
        let st = status ? {status, message} : null
        let ukey = _.concat(name).join("-")
        Vue.set(state.fieldStatus, ukey, st)
      }
    },
    //------------------------------------------
    clearFieldStatus(state, names=[]) {
      // Clean All
      if(_.isEmpty(names)) {
        state.fieldStatus = {}
      }
      // Clear one
      else {
        state.fieldStatus = _.omit(state.fieldStatus, names)
      }
    },
    //------------------------------------------
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    }
    //-------------------------------------------
  }
  ////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-obj-form.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/form/wn-obj-form.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////////////////
  data : ()=>({
    myFields : []
  }),
  //////////////////////////////////////////////////////
  computed : {
    //--------------------------------------------------
    isAutoShowBlank() {
      return Ti.Util.fallback(this.autoShowBlank, true)
    },
    //--------------------------------------------------
    FormData() {
      if(_.isString(this.data)) {
        try{
          return JSON.parse(this.data)
        }catch(E){
          return {}
        }
      }
      return this.data
    }
    //--------------------------------------------------
  },
  //////////////////////////////////////////////////////
  methods : {
    //--------------------------------------------------
    doAction(emitName, action, payload) {
      // {method, target}
      if(_.isPlainObject(action)) {
        Ti.App(this)[action.method](action.target, payload)
      }
      // "method:target"
      else if(_.isString(action)) {
        Ti.App(this).exec(action, payload)
      }
      // Just notify $parent
      else if(action){
        this.$notify(emitName, payload)
      }
    },
    //--------------------------------------------------
    OnFieldChange({name, value}={}) {
      //console.log(" <--- @field:changed", {name, value})
      this.doAction("field:change", this.updateBy, {name, value})
    },
    //--------------------------------------------------
    OnChange(data) {
      //console.log(" <- @changed", data)
      this.doAction("change", this.setDataBy, data)
    },
    //--------------------------------------------------
    OnInvalid(err) {
      //console.log("wn-form.invalid", err)
      let payload = {
        name    : err.name,
        message : [err.errMessage, err.value].join(" :: "),
        status  : "warn"
      }
      this.doAction("invalid", this.setFieldStatusBy, payload)
    },
    //--------------------------------------------------
    async evalMyFields() {
      if(_.isArray(this.fields)) {
        this.myFields = this.fields
      }
      // Dynamic call
      else if(_.isFunction(this.fields)) {
        this.myFields = await this.fields()
      }
      // Load from server side
      else if(_.isString(this.fields)) {
        let o = await Wn.Io.loadMeta(this.fields)
        if(null!=o) {
          this.myFields = await Wn.Io.loadContent(o,  {as:"json"})
        } else {
          this.myFields = []
        }
      }
    }
    //--------------------------------------------------
  },
  //////////////////////////////////////////////////////
  watch : {
    "fields" : {
      handler : "evalMyFields",
      immediate : true
    }
  }
  //////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-input-icon-data.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/icon/ti-input-icon-data.mjs'] = (function(){
//////////////////////////////////////////////////////
const ICONS = {
  /* Starts Icons */
  starts : ["fas-allergies","fas-ambulance","fas-anchor","fas-angry","fas-archive","fas-archway",
  "fas-atlas","fas-baby-carriage","fas-bacteria","fas-bacterium","fas-balance-scale",
  "fas-band-aid","fas-bath","fas-bed","fas-binoculars","fas-biohazard","fas-birthday-cake",
  "fas-bone","fas-bong","fas-book","fas-book-medical","fas-brain","fas-briefcase",
  "fas-briefcase-medical","fas-building","fas-bullhorn","fas-bullseye","fas-burn",
  "fas-bus","fas-bus-alt","fas-business-time","fas-calculator","fas-calendar","fas-calendar-alt",
  "fas-campground","fas-candy-cane","fas-cannabis","fas-capsules","fas-car","fas-caravan",
  "fas-carrot","fas-certificate","fas-chart-area","fas-chart-bar","fas-chart-line",
  "fas-chart-pie","fas-church","fas-city","fas-clinic-medical","fas-clipboard","fas-cocktail",
  "fas-coffee","fas-columns","fas-comment-dollar","fas-comment-medical","fas-comments-dollar",
  "fas-compass","fas-concierge-bell","fas-cookie-bite","fas-copy","fas-copyright",
  "fas-crutch","fas-cut","fas-dharmachakra","fas-diagnoses","fas-dice","fas-dice-five",
  "fas-disease","fas-dizzy","fas-dna","fas-door-closed","fas-door-open","fas-dumbbell",
  "fas-dungeon","fas-edit","fas-envelope","fas-envelope-open","fas-envelope-open-text",
  "fas-envelope-square","fas-eraser","fas-fax","fas-file","fas-file-alt","fas-file-medical",
  "fas-file-medical-alt","fas-file-prescription","fas-first-aid","fas-flushed","fas-folder",
  "fas-folder-minus","fas-folder-open","fas-folder-plus","fas-frog","fas-frown","fas-frown-open",
  "fas-funnel-dollar","fas-gift","fas-gifts","fas-glass-cheers","fas-glass-martini",
  "fas-glass-martini-alt","fas-glasses","fas-globe","fas-globe-africa","fas-globe-americas",
  "fas-globe-asia","fas-globe-europe","fas-gopuram","fas-graduation-cap","fas-grimace",
  "fas-grin","fas-grin-alt","fas-grin-beam","fas-grin-beam-sweat","fas-grin-hearts",
  "fas-grin-squint","fas-grin-squint-tears","fas-grin-stars","fas-grin-tears","fas-grin-tongue",
  "fas-grin-tongue-squint","fas-grin-tongue-wink","fas-grin-wink","fas-hand-holding-medical",
  "fas-hat-cowboy","fas-hat-cowboy-side","fas-hat-wizard","fas-head-side-cough","fas-head-side-cough-slash",
  "fas-head-side-mask","fas-head-side-virus","fas-heart","fas-heartbeat","fas-highlighter",
  "fas-holly-berry","fas-home","fas-hospital","fas-hospital-alt","fas-hospital-symbol",
  "fas-hospital-user","fas-hot-tub","fas-hotel","fas-house-damage","fas-id-card-alt",
  "fas-igloo","fas-industry","fas-infinity","fas-joint","fas-kaaba","fas-key","fas-kiss",
  "fas-kiss-beam","fas-kiss-wink-heart","fas-landmark","fas-laptop-house","fas-laptop-medical",
  "fas-laugh","fas-laugh-beam","fas-laugh-squint","fas-laugh-wink","fas-lightbulb",
  "fas-luggage-cart","fas-lungs","fas-lungs-virus","fas-mail-bulk","fas-map","fas-map-marked",
  "fas-map-marked-alt","fas-marker","fas-meh","fas-meh-blank","fas-meh-rolling-eyes",
  "fas-microscope","fas-mitten","fas-monument","fas-mortar-pestle","fas-mosque","fas-mug-hot",
  "fas-notes-medical","fas-pager","fas-paperclip","fas-passport","fas-paste","fas-pen",
  "fas-pen-alt","fas-pen-fancy","fas-pen-nib","fas-pen-square","fas-pencil-alt","fas-percent",
  "fas-phone","fas-phone-alt","fas-phone-slash","fas-phone-square","fas-phone-square-alt",
  "fas-phone-volume","fas-pills","fas-place-of-worship","fas-poop","fas-prescription-bottle",
  "fas-prescription-bottle-alt","fas-print","fas-procedures","fas-project-diagram",
  "fas-pump-medical","fas-radiation","fas-radiation-alt","fas-registered","fas-sad-cry",
  "fas-sad-tear","fas-save","fas-school","fas-search-dollar","fas-search-location",
  "fas-shield-virus","fas-ship","fas-shoe-prints","fas-shower","fas-shuttle-van","fas-sitemap",
  "fas-skull-crossbones","fas-sleigh","fas-smile","fas-smile-beam","fas-smile-wink",
  "fas-smoking","fas-smoking-ban","fas-snowflake","fas-snowman","fas-socks","fas-spa",
  "fas-star-of-life","fas-stethoscope","fas-sticky-note","fas-store","fas-store-alt",
  "fas-suitcase","fas-suitcase-rolling","fas-surprise","fas-swimmer","fas-swimming-pool",
  "fas-synagogue","fas-syringe","fas-table","fas-tablets","fas-tag","fas-tags","fas-tasks",
  "fas-taxi","fas-thermometer","fas-thumbtack","fas-tired","fas-tooth","fas-torii-gate",
  "fas-trademark","fas-tram","fas-tshirt","fas-tv","fas-umbrella-beach","fas-university",
  "fas-user-md","fas-user-nurse","fas-user-tie","fas-utensils","fas-vial","fas-vials",
  "fas-vihara","fas-virus","fas-virus-slash","fas-viruses","fas-wallet","fas-warehouse",
  "fas-water","fas-weight","fas-wheelchair","fas-wifi","fas-wind","fas-wine-glass",
  "fas-wine-glass-alt","fas-x-ray","zmdi-airplane","zmdi-album","zmdi-archive","zmdi-assignment-account",
  "zmdi-assignment-alert","zmdi-assignment-check","zmdi-assignment-o","zmdi-assignment",
  "zmdi-attachment-alt","zmdi-attachment","zmdi-audio","zmdi-badge-check","zmdi-balance-wallet",
  "zmdi-balance","zmdi-battery-flash","zmdi-battery","zmdi-bike","zmdi-boat","zmdi-book-image",
  "zmdi-book","zmdi-bookmark-outline","zmdi-bookmark","zmdi-brush","zmdi-bug","zmdi-bus",
  "zmdi-cake","zmdi-car-taxi","zmdi-car-wash","zmdi-car","zmdi-card-giftcard","zmdi-card-membership",
  "zmdi-card-travel","zmdi-card","zmdi-case","zmdi-chart-donut","zmdi-chart","zmdi-city-alt",
  "zmdi-city","zmdi-close-circle-o","zmdi-close-circle","zmdi-close","zmdi-cocktail",
  "zmdi-code-setting","zmdi-code-smartphone","zmdi-code","zmdi-coffee","zmdi-collection-bookmark",
  "zmdi-collection-case-play","zmdi-collection-folder-image","zmdi-collection-image-o",
  "zmdi-collection-image","zmdi-collection-item-1","zmdi-collection-item-2","zmdi-collection-item-3",
  "zmdi-collection-item-4","zmdi-collection-item-5","zmdi-collection-item-6","zmdi-collection-item-7",
  "zmdi-collection-item-8","zmdi-collection-item-9-plus","zmdi-collection-item-9",
  "zmdi-collection-item","zmdi-collection-music","zmdi-collection-pdf","zmdi-collection-plus",
  "zmdi-collection-speaker","zmdi-collection-text","zmdi-collection-video","zmdi-compass",
  "zmdi-cutlery","zmdi-delete","zmdi-dialpad","zmdi-dns","zmdi-drink","zmdi-edit",
  "zmdi-email-open","zmdi-email","zmdi-eye-off","zmdi-eye","zmdi-eyedropper","zmdi-favorite-outline",
  "zmdi-favorite","zmdi-fire","zmdi-flag","zmdi-flare","zmdi-flash-auto","zmdi-flash-off",
  "zmdi-flash","zmdi-flip","zmdi-flower-alt","zmdi-flower","zmdi-gas-station","zmdi-gesture",
  "zmdi-globe-alt","zmdi-globe-lock","zmdi-globe","zmdi-graduation-cap","zmdi-home",
  "zmdi-hospital-alt","zmdi-hospital","zmdi-hotel","zmdi-hourglass-alt","zmdi-hourglass-outline",
  "zmdi-hourglass","zmdi-http","zmdi-image","zmdi-inbox","zmdi-invert-colors-off",
  "zmdi-invert-colors","zmdi-key","zmdi-label-alt-outline","zmdi-label-alt","zmdi-label-heart",
  "zmdi-label","zmdi-labels","zmdi-lamp","zmdi-landscape","zmdi-library","zmdi-link",
  "zmdi-lock-open","zmdi-lock-outline","zmdi-lock","zmdi-mail-send","zmdi-mall","zmdi-map",
  "zmdi-money-box","zmdi-money","zmdi-movie-alt","zmdi-movie","zmdi-nature-people",
  "zmdi-nature","zmdi-navigation","zmdi-open-in-browser","zmdi-open-in-new","zmdi-palette",
  "zmdi-parking","zmdi-pizza","zmdi-plaster","zmdi-power-setting","zmdi-power","zmdi-print",
  "zmdi-puzzle-piece","zmdi-railway","zmdi-receipt","zmdi-roller","zmdi-ruler","zmdi-scissors",
  "zmdi-seat","zmdi-settings-square","zmdi-settings","zmdi-shape","zmdi-shield-check",
  "zmdi-shield-security","zmdi-shopping-basket","zmdi-shopping-cart-plus","zmdi-shopping-cart",
  "zmdi-storage","zmdi-store-24","zmdi-store","zmdi-subway","zmdi-sun","zmdi-tag",
  "zmdi-thumb-up","zmdi-ticket-star","zmdi-toll","zmdi-toys","zmdi-traffic","zmdi-truck",
  "zmdi-turning-sign","zmdi-wallpaper","zmdi-washing-machine"]
  ,
  /* Icons for role */
  role: ["fas-user-tie","fas-user-tag","fas-user-shield","fas-user-secret","fas-user-nurse",
  "fas-user-ninja","fas-user-minus","fas-user-md","fas-user-lock","fas-user-circle",
  "fas-user","fas-user-astronaut","fas-user-injured","fas-user-graduate","fas-user-alt",
  "im-user-male","im-user-female","zmdi-account-o","zmdi-account","zmdi-face","fas-user-friends",
  "fas-users","fas-wheelchair","fas-walking","fas-swimmer","fas-street-view","fas-snowboarding",
  "fas-skiing-nordic","fas-skiing","fas-skating","fas-running","fas-restroom","fas-pray",
  "fas-person-booth","fas-male","fas-hiking","fas-female","fas-child","fas-chalkboard-teacher",
  "fas-blind","fas-biking","fas-bed","fas-baby","fas-smile","fas-meh","fas-frown",
  "far-smile","far-meh","far-frown","fas-otter","fas-hippo","fas-dog","fas-spider",
  "fas-kiwi-bird","fas-horse-head","fas-horse","fas-frog","fas-fish","fas-feather-alt",
  "fas-feather","fas-dragon","fas-dove","fas-crow","fas-cat","fas-chess-rook","fas-chess-queen",
  "fas-chess-pawn","fas-chess-knight","fas-chess-king","fas-chess-bishop","fas-chess"]
};
//////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  queryIcons(key="starts") {
    return ICONS[key] || ICONS.starts
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'thing-filter.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/thing/manager/com/thing-filter/thing-filter.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////
  data : ()=>({
    keywordFocus : false
  }),
  ///////////////////////////////////////////
  props : {
    "filter" : {
      type : Object,
      default : ()=>({})
    },
    "sorter" : {
      type : Object,
      default : ()=>({})
    },
    "placeholder" : {
      type : String,
      default : 'i18n:find-data'
    },
    "status" : {
      type : Object,
      default : ()=>({})
    },
    "value" : {
      type : Object,
      default : ()=>({})
    },
  },
  ///////////////////////////////////////////
  computed : {
    //---------------------------------------
    TopClass() {
      return this.getTopClass({
        "in-recyclebin" : this.isInRecycleBin
      })
    },
    //---------------------------------------
    hasSorter() {
      return !_.isEmpty(this.sorter)
    },
    //---------------------------------------
    isInRecycleBin() {
      return this.status.inRecycleBin
    }
    //---------------------------------------
  },
  ///////////////////////////////////////////
  methods : {
    //---------------------------------------
    OnFilterChange(payload) {
      this.$notify("filter::change", payload)
    },
    //---------------------------------------
    OnSorterChange(payload) {
      this.$notify("sorter::change", payload)
    },
    //---------------------------------------
    // When this func be invoked, the recycleBin must be true
    OnLeaveRecycleBin() {
      Ti.App(this).dispatch('main/toggleInRecycleBin')
    }
    //---------------------------------------
  }
  ///////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-shelf-free.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/shelf/free/web-shelf-free.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data : ()=>({
    itemStyles: {},
    itemList: []
  }),
  //////////////////////////////////////////
  props : {
    "preview": {
      type: Object,
      default: undefined
    },
    /*
    Each item should obey the form below:
    {
      position: "top|left|bottom|right|center|free",
      className: "item-class-selector",
      style: {...},
      comType: "xxx",
      comConf: {...}
    }
    */
    "items" : {
      type : Array,
      default : ()=>[]
    },
    "background": {
      type: [String, Object],
      default: undefined
    },
    "color": {
      type: String,
      default: undefined
    },
    "width": {
      type: [String, Number],
      default: undefined
    },
    "height": {
      type: [String, Number],
      default: undefined
    },
    "mainBackground": {
      type: [String, Object],
      default: undefined
    },
    "mainWidth": {
      type: [String, Number],
      default: undefined
    },
    "mainHeight": {
      type: [String, Number],
      default: undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height,
        color: this.color,
        ...this.evalBackgroundStyle(this.background)
      })
    },
    //--------------------------------------
    MainStyle() {
      return Ti.Css.toStyle({
        width  : this.mainWidth,
        height : this.mainHeight,
        ...this.evalBackgroundStyle(this.mainBackground)
      })
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    evalItemList() {
      if(!_.isArray(this.items)) {
        this.itemList = []
        return
      }
      
      let vm = this;
      let list = []      
      _.forEach(this.items, (it, index)=>{
        // Eval the class
        let klass = [`at-${it.position||"free"}`, `i-${index}`]
        if(it.className) {
          klass.push(it.className)
        }

        // Gen Key
        let itKey = `It-${index}`

        // Style
        let self = Ti.Css.toStyle(it.style)
        let appear = Ti.Css.toStyle(it.appear)

        // Transition
        if(!_.isEmpty(appear)) {
          _.delay(()=>{
            let it = _.cloneDeep(this.itemList[index])
            it.style = self
            vm.$set(this.itemList, index, it)
          }, 0)
        }
        
        // Join
        list.push({
          key: itKey,
          index,
          className: Ti.Css.mergeClassName(klass),
          style: _.assign({}, self, appear),
          comType: it.comType || "WebTextRaw",
          comConf: it.comConf
        })
      })
      // Get the result
      this.itemList = list
    },
    //--------------------------------------
    evalBackgroundStyle(bg) {
      if(_.isEmpty(bg)){
        return {}
      }
      // Background image
      if(_.isObject(bg)) {
        return {
          backgroundImage: `url("${Ti.WWW.evalObjPreviewSrc(bg, this.preview)}")`
        }
      }

      // Backgrund color
      if(/^(#[0-9A-Fa-f]{3,6}|rgba?\([0-9, ]+\))$/.test(bg)) {
        return {backgroundColor: bg}
      }

      // Default as background Image
      return {
        backgroundImage: `url("${bg}")`
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "items": {
      handler: function() {
        this.evalItemList()    
      },
      immediate: true
    }
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-combo-pair-group.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/pair-group/ti-combo-pair-group.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    myFieldNames : [],
    myFieldMap  : {},
    myCurrentTabName : null
  }),
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    ValueObj() {
      if(Ti.Util.isNil(this.value) || _.isEmpty(this.value)) {
        return {}
      }
      if(_.isString(this.value)) {
        let str = _.trim(this.value)
        if(!str) {
          return {}
        }
        return JSON.parse(this.value)
      }
      if(_.isPlainObject(this.value)) {
        return this.value
      }
      console.warn("Unsupported value object:", this.value)
    },
    //------------------------------------------------
    TheBlocks() {
      // Update Block Keys, add the key noexists in map
      let names = _.cloneDeep(this.myFieldNames)
      _.forEach(this.ValueObj, (block, key)=>{
        if(_.indexOf(names, key) < 0) {
          names.push(key)
        }
      })
      this.myFieldNames = names

      // Gen-block by keys
      let list = []
      for(let name of names) {
        let val = _.get(this.ValueObj, name)
        let field = _.get(this.myFieldMap, name) || {}
        // Explain block
        let b2 = Ti.Util.explainObj(val, {
          title : name,
          name  : name,
          ... _.pick(field, "title", "name", "icon"),
          body : {
            comType : field.comType || "ti-input-text",
            comConf : field.comConf || { value: "=.." }
          }
        })
        list.push(b2)
      }
      return list
    },
    //------------------------------------------------
    TheLayout() {
      return {
        type  : "tabs",
        tabAt : this.tabAt,
        blocks : this.TheBlocks
      }
    },
    //------------------------------------------------
    TheShown() {
      if(this.keepShownTo) {
        return
      }
      let shown = {}
      _.forEach(this.myFieldNames, name => {
        shown[name] = (name == this.myCurrentTabName)
      })
      return shown
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    __on_events(eventFullName, payload) {
      let [key, eventName] = eventFullName.split("::")
      //console.log(key, eventName, payload)
      // For Change
      if("change" == eventName && this.$parent) {
        return ()=>{
          let data = _.cloneDeep(this.ValueObj)
          _.set(data, key, payload)
          this.$parent.$notify("change", data)
          return true
        }
      }
      // Cancel others bubble
      return ()=>true
    },
    //------------------------------------------------
    OnShownUpdate(shown) {
      let keys = Ti.Util.truthyKeys(shown)
      this.myCurrentTabName = _.first(keys)
    },
    //------------------------------------------------
    evalBlocks() {
      let map = {}
      let keys = []
      _.forEach(this.fields, block => {
        map[block.name] = block
        keys.push(block.name)
      })
      this.myFieldNames = keys
      this.myFieldMap = map
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    //-----------------------------------------------
    "blocks" : {
      handler : "evalBlocks",
      immediate : true
    }
    //-----------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-media-video.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/media/video/ti-media-video.mjs'] = (function(){
const resize = function(evt){
  this.doResizeVideo()
}
//-----------------------------------
const __TI_MOD_EXPORT_VAR_NM = {
  data: ()=>({
    naturalWidth  : -1,
    naturalHeight : -1,
    fitMode  : "none",
    loading : true
  }),
  props : {
    "src" : {
      type : String
    },
    /* video/mp4 or video/webm */
    "mime" : {
      type : String
    },
    "width" : {
      type : [String, Number],
      default : ""
    },
    "height" : {
      type : [String, Number],
      default : ""
    }
  },
  computed : {
    topClass() {
      return {
        "as-none"    : this.fitMode=="none",
        "as-contain" : this.fitMode=="contain",
        "as-loading" : this.loading
      }
    },
    topStyle() {
      return {
        width  : this.width, 
        height : this.height
      }
    }
  },
  methods : {
    onVideoLoaded() {
      let $video = this.$refs.the_video
      if(!_.isElement($video)) {
        return
      }
      this.naturalWidth  = $video.videoWidth
      this.naturalHeight = $video.videoHeight
      //console.log(this.naturalWidth, this.naturalHeight)
      this.loading = false
      //$video.volume = 1
      this.doResizeVideo()
    },
    isContainsByViewport() {
      // Get the viewport
      let vpRect = Ti.Rects.createBy(this.$el)
      let imRect = Ti.Rects.create({
        ...vpRect.raw("tl"),
        width  : this.naturalWidth,
        height : this.naturalHeight
      })
      // console.log("vpRect", vpRect.toString())
      // console.log("imRect", imRect.toString())
      return vpRect.contains(imRect)
    },
    doResizeVideo() {
      // Image is in viewport
      if(this.isContainsByViewport()) {
        this.fitMode = "none"
      }
      // Image is too big, mark "cover"
      else {
        this.fitMode = "contain"
      }
    },
  },
  mounted : function(){
    Ti.Viewport.watch(this, {resize})
  },
  beforeDestroy : function(){
    Ti.Viewport.unwatch(this)
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-table-data.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/table/ti-table-data.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////
  data: () => ({
    tblRows: [
      /*
      {
        __processed: true,   // had been evalTableRows
        groupTitleComs:[{comType,comConf}],
      }
      {
        __processed: true,   // had been evalTableRows
        className.is-current is-checked
        id,index
        icon,indent,
        displayIndex,asGroupTitle,
        checkable,selectable,openable,cancelable,hoverable,
        rawData,item,
        cells:[{
          index,
          displayItems:[{comType,comConf}]
        }]
      }
    */
    ],
    myData: []
  }),
  ///////////////////////////////////////////////////
  computed: {
    //--------------------------------------
    TheData() {
      return this.tblRows;
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////////////
  methods: {
    //--------------------------------------
    async genDisplays(it = {}, display = [], opt = {}) {
      //this.LOG("genDisplays", it, display)
      let { id, index } = it;
      let list = [];
      if (!_.isEmpty(display)) {
        for (let i = 0; i < display.length; i++) {
          let disIt = await this.evalDataForFieldDisplayItem({
            itemData: it.rawData,
            displayItem: display[i],
            vars: {
              rowId: id
            },
            ...opt,
            uniqKey: `row${id}-cell${index}-${i}`
          });
          if (disIt) {
            disIt.className = `item-${i}`;
            // 判断是否可以快速渲染不用真的弄个真控件
            // 如果就是最朴素的 Label
            let { comType, comConf = {} } = disIt;
            if (/^(TiLabel|ti-label)$/.test(comType)) {
              let {
                style,
                className,
                hoverCopy,
                value,
                newTab,
                href,
                dict,
                dictVars,
                format,
                placeholder,
                autoLoadDictIcon = Ti.Config.getComProp(
                  "TiLabel",
                  "autoLoadDictIcon",
                  true
                ),
                prefixIcon,
                editable,
                multiValSep = ",",
                valueMustInDict = true,
                inDictsplitBy = /[,;]+/g,
                enterNotifyName,
                leaveNotifyName
              } = comConf;
              if (
                !editable &&
                !enterNotifyName &&
                !leaveNotifyName &&
                _.isEmpty(dictVars)
              ) {
                let text = value;
                let icon = prefixIcon;
                let isBlank = false;
                // Show empty placeholder
                if (Ti.Util.isNil(text) || (_.isString(text) && !text)) {
                  text = Ti.Util.fallback(placeholder, "i18n:blank");
                  isBlank = true;
                }
                // Explain Dict
                else if (dict) {
                  let $d = Ti.DictFactory.CheckDict(dict);
                  // Uniform the values to array
                  let vals;
                  if (_.isString(value) && inDictsplitBy) {
                    vals = Ti.S.splitIgnoreBlank(value, inDictsplitBy);
                  } else {
                    vals = _.concat([], value);
                  }

                  // explain the value or values
                  if (vals.length > 1) {
                    let ss = [];
                    for (let v of vals) {
                      let it = await $d.getItem(v);
                      let s = $d.getText(it);
                      if (!Ti.Util.isNil(s) || valueMustInDict) {
                        ss.push(s);
                      } else {
                        ss.push(v);
                      }
                    }
                    text = ss.join(multiValSep);
                  } else if (vals.length > 0) {
                    text = await $d.getItemText(vals[0]);
                    if (autoLoadDictIcon) {
                      icon = await $d.getItemIcon(vals[0]);
                    }
                  } else {
                    text = "i18n:empty";
                    isBlank = true;
                  }
                }
                // Normal value
                else if (_.isArray(value)) {
                  let ss = [];
                  _.forEach(value, (val) => {
                    if (_.isString(val)) {
                      ss.push(val);
                    } else {
                      ss.push(JSON.stringify(val));
                    }
                  });
                  text = ss.join(multiValSep);
                }
                // Formater
                if (format) {
                  if (_.isFunction(format)) {
                    text = format(text);
                  }
                }
                // I18n ...
                if (/^i18n:/.test(text)) {
                  text = Ti.I18n.text(text);
                }
                // Define quick label
                disIt.quickLabel = {
                  style,
                  className: Ti.Css.mergeClassName(className, disIt.className, {
                    "is-hover-copy": hoverCopy,
                    "is-blank": isBlank
                  }),
                  hoverCopy,
                  newTab,
                  href,
                  target: newTab ? "_blank" : undefined,
                  text
                };
                if (icon) {
                  disIt.quickLabel.iconHtml = Ti.Icons.fontIconHtml(icon);
                }
              }
            }
            // Quick Icon
            else if (/^(TiIcon|ti-icon)$/.test(comType) && !comConf.dict) {
              let { value, className } = comConf;
              let icon = Ti.Icons.parseFontIcon(value);
              if (icon && icon.className) {
                disIt.quickIcon = {
                  className: Ti.Css.mergeClassName(className, disIt.className),
                  iconClass: icon.className
                };
              }
            }
            list.push(disIt);
          }
        }
        return list;
      }
    },
    //--------------------------------------
    async genTableCells(it = {}) {
      let cells = [];
      for (let i = 0; i < this.TableFields.length; i++) {
        let fld = this.TableFields[i];
        let hasAlign = fld.className && fld.className.indexOf("align-") >= 0;
        let cell = _.cloneDeep(fld);
        cell.index = i;
        cell.className = Ti.Css.mergeClassName(cell.className, {
          "has-align": hasAlign,
          "not-align": !hasAlign
        });
        cell.WrapperClass = {
          "is-nowrap": fld.nowrap
        };
        cell.displayItems = await this.genDisplays(it, fld.display);
        cells.push(cell);
      }
      return cells;
    },
    //--------------------------------------
    async evalOneTableRow(rows, index, count = {}) {
      let it = rows[index];

      // Alreay prcessed
      if (it.__processed) {
        return;
      }

      // Out of scope
      let VI0 = this.RowScopeFrom;
      let VI1 = this.RowScopeTo;
      if (index < VI0 || index >= VI1) {
        return;
      }

      // check group row
      if (it.asGroupTitle) {
        it.groupTitleComs = await this.genDisplays(
          it,
          this.RowGroupTitleDisplay,
          {
            autoIgnoreNil: false,
            autoIgnoreBlank: false
          }
        );
      }
      // tidy rowNumber
      else if (_.isNumber(this.rowNumberBase)) {
        it.hasRowNumber = true;
        let rn = this.rowNumberBase + it.displayIndex;
        if (this.rowNumberWidth > 1) {
          rn = _.padStart(rn, this.rowNumberWidth, "0");
        }
        it.RowNumber = rn;
      }
      //
      // Generate each cells
      it.cells = await this.genTableCells(it);

      //
      // Update status
      this.evalOneRowStatus(it);
      it.__processed = true;
      count.N++;
    },
    //--------------------------------------
    async evalTableRows() {
      this.LOG("evalTableRows begin");
      let rows = this.tblRows;
      let promiseLoadRows = [];
      let count = { N: 0 };
      for (let i = 0; i < rows.length; i++) {
        promiseLoadRows.push(this.evalOneTableRow(rows, i, count));
      }
      await Promise.all(promiseLoadRows);
      if (count.N > 0) {
        this.rowsRenderedAt = Date.now();
      }
      this.LOG("evalTableRows end");
    },
    //--------------------------------------
    evalOneRowStatus(
      row,
      { currentId = this.theCurrentId, checkedIds = this.theCheckedIds } = {}
    ) {
      //this.LOG("evalOneRowStatus")
      if (!row) {
        return;
      }
      row.current = row.id == currentId;
      row.checked = checkedIds[row.id] ? true : false;
      row.checkerIcon = row.checked ? this.checkIcons.on : this.checkIcons.off;
      row.disClassName = Ti.Css.mergeClassNameBy(row, row.className, {
        "is-current": row.current,
        "is-checked": row.checked,
        "no-checked": !row.checked
      });
    },
    //--------------------------------------
    async evalListData() {
      if (_.isElement(this.$el)) {
        this.$el.scrollTop = 0;
      }
      //let beginMs = Date.now()
      this.LOG("1. evalListData begin");
      let list = await this.evalData((it) => {
        it.icon = this.getRowIcon(it.item);
        if (it.icon) {
          let ico = Ti.Icons.parseFontIcon(it.icon);
          if (ico) {
            it.iconClass = ico.className;
          }
        }
        it.showIcon = it.icon && _.isString(it.icon);
        it.indent = this.getRowIndent(it.item);
      });
      this.tblRows = list;
      this.LOG("2. evalListData end");

      // this.evalMyRows();
      // this.LOG("4. evalMyRows end")
      // let du = Date.now() - beginMs
      // this.LOG("evalListData in", `${du}ms`)
      // Scroll into view
    },
    //--------------------------------------
    async __eval_row_after_data() {
      this.LOG("__eval_row_after_data: evalTableRows");
      await this.evalTableRows();

      this.LOG("__eval_row_after_data: wait for scroll");
      // _.delay(() => {
      //   this.scrollCurrentIntoView();
      // }, 0);
      // make sure it scrolled, maybe dom render so long ..
      // _.delay(() => {
      //   this.scrollCurrentIntoView()
      // }, 300)
    },
    //--------------------------------------
    async reEvalRows(ids = {}, { currentId, checkedIds } = {}) {
      let indexes = [];
      _.forEach(this.tblRows, (it) => {
        if (ids[it.id]) {
          indexes.push(it.index);
        }
      });

      this.LOG("reEvalRows", { currentId, checkedIds });
      this.LOG("reEvalRows - theCurrentId", this.theCurrentId);
      this.LOG("reEvalRows - myCurrentId", this.myCurrentId);
      this.LOG("reEvalRows - currentId", this.currentId);
      this.LOG("reEvalRows - theCheckedIds", this.theCheckedIds);
      this.LOG("reEvalRows - myCheckedIds", this.myCheckedIds);
      this.LOG("reEvalRows - checkedIds", this.checkedIds);
      //let rows = _.cloneDeep(this.myRows)
      //this.LOG("cloned")
      for (let i of indexes) {
        let row = this.tblRows[i];
        this.evalOneRowStatus(row, { currentId, checkedIds });
        this.$set(this.tblRows, i, row);
        this.LOG("evalOneRowStatus", i);
      }
      this.LOG("reEvalRows done");

      _.delay(() => {
        this.scrollCurrentIntoView();
      }, 100);
    },
    //--------------------------------------
    // 采用这个，是为了绕开 VUe 的监听机制能快点得到响应
    // 因为渲染数据的时间是在省不了
    __handle_select({ currentId, checkedIds, oldCurrentId, oldCheckedIds }) {
      this.LOG("__handle_select", currentId, checkedIds);
      let ids = _.assign({}, oldCheckedIds, checkedIds);
      if (currentId) {
        ids[currentId] = true;
      }
      if (oldCurrentId) {
        ids[oldCurrentId] = true;
      }
      this.reEvalRows(ids, { currentId, checkedIds });
    }
    //--------------------------------------
  }
  ///////////////////////////////////////////////////F
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'tiny-wn-attachment.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/tiny-wn-attachment.mjs'] = (function(){
////////////////////////////////////////////////////
async function pickAttachmentAndInsertToDoc(editor, {
  base = "~",
  autoCreate = null,
  sideItems, sideWidth,
  fallbackPath,
}) {
  // Check base
  if (_.isPlainObject(autoCreate)) {
    let oBase = await Wn.Io.loadMeta(base)
    if (!oBase) {
      let pph = Ti.Util.getParentPath(base)
      let dnm = Ti.Util.getFileName(base)
      let baseMeta = _.assign({}, autoCreate, {
        race: 'DIR', nm: dnm
      })
      let baseJson = JSON.stringify(baseMeta)
      let cmdText = `o @create '${baseJson}' -p ${pph} -auto @json -cqn`
      oBase = await Wn.Sys.exec2(cmdText, { as: "json" })
    }
    base = oBase
  }

  // Show dialog
  let reo = await Wn.OpenObjSelector(base, {
    icon: "fas-paperclip",
    title: "i18n:attachment-insert",
    position: "top",
    width: "95%",
    height: "95%",
    multi: false,
    sideItems, sideWidth,
    fallbackPath
  })

  // User canceled
  if (_.isEmpty(reo)) {
    return
  }

  // Do insert image
  editor.execCommand("InsertAttachment", editor, reo)
}
////////////////////////////////////////////////////
function GetAttachmentAttrsByElement(elAttachment) {
  let stl = Ti.Dom.getStyle(elAttachment,
    /^(font-(size|bold)|text-transform)$/)
  return {
    oid: elAttachment.getAttribute("wn-obj-id"),
    nm: elAttachment.getAttribute("wn-obj-nm"),
    title: elAttachment.getAttribute("wn-obj-title"),
    sha1: elAttachment.getAttribute("wn-obj-sha1"),
    mime: elAttachment.getAttribute("wn-obj-mime"),
    tp: elAttachment.getAttribute("wn-obj-tp"),
    icon: elAttachment.getAttribute("wn-obj-icon"),
    ...stl
  }
}
////////////////////////////////////////////////////
function GetAttachmentAttrsByObj(oAttachment) {
  return {
    "wn-obj-id": oAttachment.id,
    "wn-obj-nm": oAttachment.nm,
    "wn-obj-title": oAttachment.title,
    "wn-obj-sha1": oAttachment.sha1,
    "wn-obj-mime": oAttachment.mime,
    "wn-obj-tp": oAttachment.tp,
    "wn-obj-icon": oAttachment.icon
  }
}
////////////////////////////////////////////////////
function UpdateAttachmentTagInnerHtml(elAttachment) {
  let obj = GetAttachmentAttrsByElement(elAttachment)
  let icon = Ti.Icons.get(obj, "fas-paperclip")
  // console.log(obj, icon)
  let iconHtml = Ti.Icons.fontIconHtml(icon, `<i class="fas fa-paperclip"></i>`)
  let html = `<span class="as-icon">${iconHtml}</span>`
  if (obj.title) {
    html += `<span class="as-title">${obj.title}</span>`
  }
  let $inner = Ti.Dom.createElement({
    tagName: "span",
    className: "attachment-inner"
  })
  $inner.innerHTML = html
  elAttachment.innerHTML = null
  elAttachment.contentEditable = false
  Ti.Dom.appendTo($inner, elAttachment)
}
////////////////////////////////////////////////////
function CmdInsertAttachment(editor, oAttachments) {
  if (_.isEmpty(oAttachments))
    return

  // Prepare range
  let rng = editor.selection.getRng()

  // Create image fragments
  let $doc = rng.commonAncestorContainer.ownerDocument
  let frag = new DocumentFragment()
  for (let oAttachment of oAttachments) {
    let attrs = GetAttachmentAttrsByObj(oAttachment)
    if (!attrs['wn-obj-title']) {
      attrs['wn-obj-title'] = oAttachment.nm
    }
    let $attachment = Ti.Dom.createElement({
      tagName: "span",
      className: "wn-attachment",
      attrs
    }, $doc)
    UpdateAttachmentTagInnerHtml($attachment)
    frag.appendChild($attachment)
  }

  // Remove content
  if (!rng.collapsed) {
    rng.deleteContents()
  }

  // Insert fragments
  rng.insertNode(frag)

}
////////////////////////////////////////////////////
function GetCurrentAttachmentElement(editor) {
  let sel = editor.selection
  let $nd = sel.getNode()
  // Guard
  return Ti.Dom.closest($nd, (el) => {
    return 'SPAN' == el.tagName && Ti.Dom.hasClass(el, "wn-attachment")
  }, { includeSelf: true })
}
////////////////////////////////////////////////////
function CmdSetAttachmentAttrs(editor, attrs = {}) {
  let $attachment = GetCurrentAttachmentElement(editor)
  // Guard
  if (!_.isElement($attachment)) {
    return
  }
  // Update the attribute
  Ti.Dom.setAttrs($attachment, attrs)
  // Force sync content
  editor.__rich_tinymce_com.syncContent()
}
////////////////////////////////////////////////////
function CmdSetAttachmentStyle(editor, css = {}) {
  let $attachment = GetCurrentAttachmentElement(editor)
  // Guard
  if (!_.isElement($attachment)) {
    return
  }
  // Clear float
  Ti.Dom.setStyle($attachment, css)
  // Force sync content
  editor.__rich_tinymce_com.syncContent()
}
////////////////////////////////////////////////////
async function CmdShowAttachmentProp(editor, settings) {
  let $attachment = GetCurrentAttachmentElement(editor)
  // Guard
  if (!_.isElement($attachment)) {
    return
  }
  //console.log("stl", stl)
  // Gen the properties
  let data = GetAttachmentAttrsByElement($attachment)
  console.log(data)

  // Show dialog
  let reo = await Ti.App.Open({
    icon: "fas-paperclip",
    title: "i18n:hmk-w-edit-attachment-prop",
    width: "37%",
    height: "100%",
    position: "right",
    closer: "left",
    clickMaskToClose: true,
    result: data,
    model: { prop: "data", event: "change" },
    comType: "TiForm",
    comConf: {
      linkFields: {
        "oid": async ({ name, value }) => {
          if (!value)
            return
          let obj = await Wn.Io.loadMetaById(value)
          let re = _.pick(obj, "nm", "title", "icon")
          re.title = re.title || re.nm
          return re
        }
      },
      spacing: "tiny",
      fields: [{
        title: "i18n:attachments",
        name: "oid",
        comType: "WnObjPicker",
        comConf: {
          valueType: "id",
          base: settings.base,
          titleEditable: false
        }
      }, {
        title: "i18n:style",
        fields: [{
          title: "i18n:font-size",
          name: "fontSize",
          comType: "TiInput",
          comConf: {
            placeholder: `Such as: .16rem`
          }
        }, {
          title: "i18n:font-weight",
          name: "fontWeight",
          comType: "TiSwitcher",
          comConf: {
            options: [
              { value: "inherit", text: "i18n:inherit" },
              { value: "normal", text: "i18n:font-w-normal" },
              { value: "bold", text: "i18n:font-w-bold" }
            ]
          }
        }, {
          title: "i18n:font-transform",
          name: "textTransform",
          comType: "TiSwitcher",
          comConf: {
            options: [
              { value: "inherit", text: "i18n:inherit" },
              { value: "capitalize", text: "i18n:font-t-capitalize" },
              { value: "uppercase", text: "i18n:font-t-uppercase" },
              { value: "lowercase", text: "i18n:font-t-lowercase" }
            ]
          }
        }]
      }, {
        title: "i18n:content-setup",
        fields: [{
          title: "i18n:icon",
          name: "icon",
          comType: "TiInputIcon",
          comConf: {
            options: [
              "fas-paperclip",
              "fas-volume-up",
              "fas-film",
              "fas-file-word",
              "fas-file-video",
              "fas-file-powerpoint",
              "fas-file-pdf",
              "fas-file-image",
              "fas-file-excel",
              "fas-file-code",
              "fas-file-audio",
              "fas-file-archive",
              "fas-file-alt",
              "fas-file",
              "fas-file-upload",
              "fas-file-signature",
              "fas-file-prescription",
              "fas-file-medical-alt",
              "fas-file-medical",
              "fas-file-invoice-dollar",
              "fas-file-invoice",
              "fas-file-import",
              "fas-file-export",
              "fas-file-download",
              "fas-file-csv",
              "fas-file-contract"
            ]
          }
        }, {
          title: "i18n:title",
          name: "title",
          comType: "TiInput"
        }, {
          title: "i18n:name",
          name: "nm"
        }]
      }]
    },
    components: [
      "@com:wn/obj/picker"
    ]
  })

  // 用户取消
  if (!reo)
    return

  // Update image
  //................................................
  // src
  let attrs = {}
  if (data.oid != reo.oid) {
    // Remove Attachment
    if (!reo.oid) {
      Ti.Dom.remove($attachment)
      return
    }
    // 读取对象详情
    let oAttachment = await Wn.Io.loadMetaById(reo.oid)
    // Switch image src
    attrs = GetAttachmentAttrsByObj(oAttachment)
    Ti.Dom.setAttrs($attachment, attrs)
  }
  // Attributes
  else {
    attrs = GetAttachmentAttrsByObj(reo)
  }
  Ti.Dom.setAttrs($attachment, attrs)
  //................................................
  // Styling
  const _attachment_style = function (styName, v, oldValue) {
    if (oldValue == v)
      return
    if (!v || "none" == v) {
      $attachment.style[styName] = ""
    } else if (_.isNumber(v) || /^\d+(\.\d+)?$/.test(v)) {
      $attachment.style[styName] = `${v}px`
    } else {
      $attachment.style[styName] = v
    }
  }
  //................................................
  _attachment_style("fontSize", reo.fontSize, data.fontSize)
  _attachment_style("fontWeight", reo.fontWeight, data.fontWeight)
  _attachment_style("textTransform", reo.textTransform, data.textTransform)
  //................................................
  // clean cache
  $attachment.removeAttribute("data-mce-src")
  $attachment.removeAttribute("data-mce-style")
  //................................................
  // Update inner HTML
  UpdateAttachmentTagInnerHtml($attachment)
  //................................................
  // Force sync content
  editor.__rich_tinymce_com.syncContent()
}
////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  name: "wn-attachment",
  //------------------------------------------------
  init: function (conf = {}) {
  },
  //------------------------------------------------
  setup: function (editor, url) {
    //..............................................
    let settings = _.assign({
      base: "~"
    }, _.get(editor.settings, "wn_attachment_config"));
    //console.log("setup", editor.settings)
    //..............................................
    // Register plugin command
    editor.addCommand("InsertAttachment", CmdInsertAttachment)
    editor.addCommand("SetAttachmentAttrs", CmdSetAttachmentAttrs)
    editor.addCommand("SetAttachmentStyle", CmdSetAttachmentStyle)
    editor.addCommand("ShowAttachmentProp", CmdShowAttachmentProp)
    //..............................................
    // Register toolbar actions
    editor.ui.registry.addButton("WnAttachmentPick", {
      icon: "paperclip-solid",
      tooltip: Ti.I18n.text("i18n:attachment-insert"),
      onAction: function (menuBtn) {
        pickAttachmentAndInsertToDoc(editor, settings)
      },
    })
    //..............................................
    editor.ui.registry.addMenuItem("WnAttachmentClrStyle", {
      text: Ti.I18n.text("清除附件样式"),
      onAction() {
        editor.execCommand("CmdSetAttachmentStyle", editor, {
          fontSize: null,
          fontWeight: null,
          textTransform: null
        })
      }
    })
    //..............................................
    editor.ui.registry.addNestedMenuItem('WnAttachmentFontSize', {
      text: Ti.I18n.text("文字大小"),
      getSubmenuItems: function () {
        return [{
          type: "menuitem",
          text: Ti.I18n.text("特小"),
          onAction() {
            editor.execCommand("SetAttachmentStyle", editor, { fontSize: ".8em" })
          }
        }, {
          type: "menuitem",
          text: Ti.I18n.text("较小"),
          onAction() {
            editor.execCommand("SetAttachmentStyle", editor, { fontSize: ".9em" })
          }
        }, {
          type: "menuitem",
          text: Ti.I18n.text("正常"),
          onAction() {
            editor.execCommand("SetAttachmentStyle", editor, { fontSize: "1em" })
          }
        }, {
          type: "menuitem",
          text: Ti.I18n.text("较大"),
          onAction() {
            editor.execCommand("SetAttachmentStyle", editor, { fontSize: "1.2em" })
          }
        }, {
          type: "menuitem",
          text: Ti.I18n.text("特大"),
          onAction() {
            editor.execCommand("SetAttachmentStyle", editor, { fontSize: "1.5em" })
          }
        }];
      }
    });
    //..............................................
    editor.ui.registry.addNestedMenuItem('WnAttachmentFontWeight', {
      text: Ti.I18n.text("文字粗细"),
      getSubmenuItems: function () {
        return [{
          type: "menuitem",
          text: Ti.I18n.text("继承"),
          onAction() {
            editor.execCommand("SetAttachmentStyle", editor, { fontWeight: "inherit" })
          }
        }, {
          type: "menuitem",
          text: Ti.I18n.text("正常"),
          onAction() {
            editor.execCommand("SetAttachmentStyle", editor, { fontWeight: "normal" })
          }
        }, {
          type: "menuitem",
          text: Ti.I18n.text("加粗"),
          onAction() {
            editor.execCommand("SetAttachmentStyle", editor, { fontWeight: "bold" })
          }
        }];
      }
    });
    //..............................................
    editor.ui.registry.addNestedMenuItem('WnAttachmentTextTransform', {
      text: Ti.I18n.text("文字转换"),
      getSubmenuItems: function () {
        return [{
          type: "menuitem",
          text: Ti.I18n.text("继承"),
          onAction() {
            editor.execCommand("SetAttachmentStyle", editor, {
              textTransform: "inherit"
            })
          }
        }, {
          type: "menuitem",
          text: Ti.I18n.text("首字母大写"),
          onAction() {
            editor.execCommand("SetAttachmentStyle", editor, {
              textTransform: "capitalize"
            })
          }
        }, {
          type: "menuitem",
          text: Ti.I18n.text("全大写"),
          onAction() {
            editor.execCommand("SetAttachmentStyle", editor, {
              textTransform: "uppercase"
            })
          }
        }, {
          type: "menuitem",
          text: Ti.I18n.text("全小写"),
          onAction() {
            editor.execCommand("SetAttachmentStyle", editor, {
              textTransform: "lowercase"
            })
          }
        }];
      }
    });
    //..............................................
    editor.ui.registry.addMenuItem("WnAttachmentProp", {
      text: Ti.I18n.text("附件属性"),
      onAction() {
        editor.execCommand("ShowAttachmentProp", editor, settings)
      }
    })
    //..............................................
    editor.ui.registry.addContextMenu("wn-attachment", {
      update: function (el) {
        let $attachment = GetCurrentAttachmentElement(editor)
        // Guard
        if (!_.isElement($attachment)) {
          return []
        }
        return [
          "WnAttachmentClrStyle",
          "WnAttachmentFontSize WnAttachmentFontWeight WnAttachmentTextTransform",
          "WnAttachmentProp"
        ].join(" | ")
      }
    })
    //..............................................
    let $vm = editor.__rich_tinymce_com
    $vm.registerContentCallback("wn-attachment", function () {
      //console.log("SetContent attachment")
      let els = editor.$('.wn-attachment')
      for (let i = 0; i < els.length; i++) {
        let el = els[i]
        UpdateAttachmentTagInnerHtml(el)
      }
    })
    //..............................................
    return {
      getMetadata: function () {
        return {
          name: 'Wn Attachment plugin',
          url: 'http://site0.cn'
        };
      }
    };
    //..............................................
  }
  //------------------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-row-article.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/row/article/web-row-article.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  props : {
    "value" : {
      type : Object,
      default : ()=>({})
    },
    "previewKey" : {
      type:String,
      default: "thumb"
    },
    "previewObj" : {
      type:String,
      default: "thumb_obj"
    },
    "mapping": {
      type: Object,
      default: ()=>({
        id : "id",
        title : "title",
        brief : "brief",
        watchCount : "watch_c",
        readTime    : "duration",
        date : "pubat"
      })
    },
    "hrefTmpl": {
      type: String,
      default: undefined
    },
    "emitName": {
      type: String,
      default: undefined
    },
    "payload": undefined,
    "newtab": {
      type: Boolean,
      default: false
    },
    "apiTmpl": {
      type: String,
      default: undefined
    },
    "cdnTmpl": {
      type: String,
      default: undefined
    },
    "dftThumbSrc": {
      type: String,
      default: undefined
    },
    "imgStyle" : {
      type: Object,
      default: undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    Article() {
      let it = Ti.Util.translate(this.value, this.mapping)
      return it || {}
    },
    //--------------------------------------
    ThumbSrc() {
      return Ti.WWW.evalObjPreviewSrc(this.value, {
        previewKey : this.previewKey,
        previewObj : this.previewObj,
        apiTmpl    : this.apiTmpl,
        cdnTmpl    : this.cdnTmpl,
        dftSrc     : this.dftThumbSrc
      })
    },
    //--------------------------------------
    ThumbImageStyle() {
      return Ti.Css.toStyle(this.imgStyle)
    },
    //--------------------------------------
    ArticleLinkHref() {
      if(this.hrefTmpl) {
        return Ti.S.renderBy(this.hrefTmpl, this.value)
      }
    },
    //--------------------------------------
    ArticleLinkTarget() {
      return this.newtab ? "_blank" : undefined
    },
    //--------------------------------------
    hasInfo() {
      return this.DateText
        || this.Article.watchCount
        || this.Article.readTime
    },
    //--------------------------------------
    DateText() {
      if(this.Article.date)
        return Ti.DateTime.timeText(this.Article.date)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickLink(evt) {
      if(this.emitName) {
        evt.preventDefault()
        let payload = Ti.Util.explainObj(this.value, this.payload)
        this.$notify(this.emitName, payload)
      }
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-chart-g2.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/chart/g2/ti-chart-g2.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    "data" : {
      type : Array,
      default : ()=>[]
    },
    "width" : {
      type : [Number, String],
      default : undefined
    },
    "height" : {
      type : [Number, String],
      default : undefined
    },
    "padding" : {
      type : [Number, Array, String],
      default : "auto"
    },
    "appendPadding" : {
      type : [Number, Array, String],
      default : undefined
    },
    // Function(chart, data):void
    "setup" : {
      type : Function,
      default : _.identity
    },
    "autoSource" : {
      type : Boolean,
      default : true
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //--------------------------------------
    hasData() {
      return !_.isEmpty(this.data)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    draw_chart() {
      let $container = this.$refs.chart
      //let rect = Ti.Rects.createBy($container)
      //let {width, height} = rect
      //--------------------------------------.
      // Create The Chart
      let chart = new G2.Chart({
        container: $container,
        padding : this.padding,
        appendPadding : this.appendPadding,
        autoFit: true,
        //width, height
      })
      //--------------------------------------.
      // Set datasource
      if(this.autoSource && this.hasData)
        chart.data(this.data)
      //--------------------------------------.
      // Setup chart
      if(_.isFunction(this.setup)) {
        this.setup(chart, this.data)
      }
      //--------------------------------------.
      // 渲染并返回
      chart.render()
      return chart
    },
    //--------------------------------------
    redrawChart() {
      if(!_.isElement(this.$refs.chart)) {
        return
      }
      if(this.$G2Chart) {
        try{
          this.$G2Chart.destroy()
        }catch(E){}
        $(this.$refs.chart).empty()
      }
      this.$G2Chart = this.draw_chart(this)
    },
    drawAll() {
      //console.log("I am drawAll")
      this.$nextTick(()=>{
        this.redrawChart()
      })
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "data" : "drawAll"
  },
  //////////////////////////////////////////
  mounted : function() {
    this.drawAll()

    // 监控窗口尺寸变化
    Ti.Viewport.watch(this, {
      resize: function() {
        let chart = this.$G2Chart
        if(chart) {
          this.$notify("before_resize")
          // let $container = this.$refs.chart
          // let rect = Ti.Rects.createBy($container)
          // let {width, height} = rect
          //chart.changeSize({width, height})
          chart.forceFit()
        }
      }
    })
  },
  //////////////////////////////////////////
  beforeDestroy : function(){
    if(this.$G2Chart) {
      this.$G2Chart.destroy()
    }
    // 解除窗口监控
    Ti.Viewport.unwatch(this)
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-th-adaptor-methods.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/th/adaptor/wn-th-adaptor-methods.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //--------------------------------------------
  doNothing() {},
  //--------------------------------------
  //
  //  Show/Hide block
  //
  //--------------------------------------
  updateBlockShown(shown = {}) {
    let guiShown = {};
    _.forEach(shown, (v, k) => {
      if (v) {
        guiShown[k] = true;
      }
    });
    this.commit("setGuiShown", guiShown);
  },
  //--------------------------------------
  showBlock(blockName) {
    let blockNames = Ti.S.splitIgnoreBlank(blockName, /[;,\s]+/g);
    //console.log(blockNames)
    let guiShown = {};
    _.forEach(blockNames, (nm) => {
      guiShown[nm] = true;
    });
    this.commit("setGuiShown", guiShown);
  },
  //--------------------------------------
  hideBlock(blockName) {
    let blockNames = Ti.S.splitIgnoreBlank(blockName, /[;,\s]+/g);
    //console.log(blockNames)
    let guiShown = _.cloneDeep(this.guiShown) || {};
    _.forEach(blockNames, (nm) => {
      guiShown[nm] = false;
    });
    this.commit("setGuiShown", guiShown);
  },
  //--------------------------------------------
  fire(name, payload) {
    let func = this.__on_events(name, payload);
    if (_.isFunction(func)) {
      func.apply(this, [payload]);
    }
  },
  //--------------------------------------------
  async invoke(fnName, ...args) {
    //console.log("invoke ", fnName, args)
    let fn = _.get(this.thingMethods, fnName);
    // Invoke the method
    if (_.isFunction(fn)) {
      try {
        return await fn.apply(this, args);
      } catch (E) {
        console.error(
          `Fail to Invoke "${fnName}"`,
          "with args:",
          args,
          "Reason:",
          E
        );
      }
    }
    // Throw the error
    else {
      throw Ti.Err.make("e.thing.fail-to-invoke", fnName);
    }
  },
  //--------------------------------------
  //
  //  Utility
  //
  //--------------------------------------
  async dispatch(name, payload) {
    let path = Ti.Util.appendPath(this.moduleName, name);
    return await Ti.App(this).dispatch(path, payload);
  },
  //--------------------------------------
  commit(name, payload) {
    let path = Ti.Util.appendPath(this.moduleName, name);
    return Ti.App(this).commit(path, payload);
  },
  //--------------------------------------
  getCheckedItems(noneAsAll = false) {
    let items = this.GuiExplainContext.checkedItems;
    if (noneAsAll && _.isEmpty(items)) {
      return this.list || [];
    }
    return items;
  },
  //--------------------------------------------
  //
  // Open
  //
  //--------------------------------------------
  async openContentEditor() {
    return await this.dispatch("openContentEditor");
  },
  //--------------------------------------------
  async openCurrentMetaEditor() {
    return await this.dispatch("openCurrentMetaEditor");
  },
  //--------------------------------------------
  async openCurrentPrivilege() {
    return await this.dispatch("openCurrentPrivilege");
  }
  //--------------------------------------------
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-th-adaptor-gui.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/th/adaptor/wn-th-adaptor-gui.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////
  data: () => ({}),
  ///////////////////////////////////////////
  computed: {
    //--------------------------------------
    GuiExplainContext() {
      let load = Ti.Util.explainObj(this, this.load);
      return {
        moduleName: this.moduleName,
        rootState: this.rootState,
        rootGetters: this.rootGetters,
        guiShown: this.guiShown,
        //------------------------------
        thingSetId: this.thingSetId,
        oTs: this.oTs,
        //------------------------------
        load,
        //------------------------------
        aggQuery: this.aggQuery,
        agg: this.agg,
        aggResult: this.aggResult,
        fixedMatch: this.fixedMatch,
        filter: this.filter,
        sorter: this.sorter,
        list: this.list,
        currentId: this.currentId,
        checkedIds: this.checkedIds,
        pager: this.pager,
        //------------------------------
        meta: this.meta,
        content: this.content,
        contentData: this.contentData,
        //------------------------------
        dataDirFiles: this.dataDirFiles,
        dataHome: this.dataHome,
        dataHomeObj: this.dataHomeObj,
        dataDirName: this.dataDirName,
        dataDirCurrentId: this.dataDirCurrentId,
        dataDirCheckedIds: this.dataDirCheckedIds,
        //------------------------------
        status: this.status,
        fieldStatus: this.fieldStatus,
        //------------------------------
        viewType: this.viewType,
        exposeHidden: this.exposeHidden,
        //------------------------------
        methods: this.thingMethods,
        //------------------------------
        // Adapte old thing set data model
        //------------------------------
        currentDataHome: this.dataHome,
        currentDataHomeObj: this.dataHomeObj,
        currentDataDirName: this.dataDirName,
        //------------------------------
        ...this.getters
      };
    },
    //--------------------------------------
    GuiLayout() {
      let c = this.GuiExplainContext;
      return Ti.Util.explainObj(c, this.layout);
    },
    //--------------------------------------
    GuiSchema() {
      let c = this.GuiExplainContext;
      let schema = _.omit(
        this.schema,
        "components",
        "events",
        "behavior",
        "methods"
      );
      return Ti.Util.explainObj(c, schema);
    },
    //--------------------------------------
    GuiVars() {
      return {};
    },
    //--------------------------------------
    GuiLoadingAs() {
      return {
        "reloading": {
          icon: "fas-spinner fa-spin",
          text: "i18n:loading"
        },
        "doing": {
          icon: "zmdi-settings fa-spin",
          text: "i18n:doing"
        },
        "saving": {
          icon: "zmdi-settings fa-spin",
          text: "i18n:saving"
        },
        "deleting": {
          icon: "zmdi-refresh fa-spin",
          text: "i18n:del-ing"
        },
        "publishing": {
          icon: "zmdi-settings zmdi-hc-spin",
          text: "i18n:publishing"
        },
        "restoring": {
          icon: "zmdi-time-restore zmdi-hc-spin",
          text: "i18n:thing-restoring"
        },
        "cleaning": {
          icon: "zmdi-settings zmdi-hc-spin",
          text: "i18n:thing-cleaning"
        }
      };
    },
    //--------------------------------------
    GuiIsLoading() {
      return this.status.reloading ||
        this.status.doing ||
        this.status.saving ||
        this.status.deleting ||
        this.status.publishing ||
        this.status.restoring ||
        this.status.cleaning
        ? true
        : false;
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  methods: {}
  ///////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'wn-obj-json.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/json/wn-obj-json.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////
  props : {
    "meta" : {
      type : Object,
      default : ()=>({})
    },
    "value" : {
      type: String,
      default: null
    },
    "status" : {
      type : Object,
      default : ()=>({})
    }
  },
  ////////////////////////////////////////////
  computed : {
    //----------------------------------------
    hasMeta() {
      return this.meta ? true : false
    }
    //----------------------------------------
  },
  ////////////////////////////////////////////
  methods : {
    onChangeContent(newData) {
      this.$notify("change", newData)
    }
  },
  ////////////////////////////////////////////
  mounted : function(){
    //----------------------------------------
    Ti.Fuse.getOrCreate().add({
      key : "wn-obj-json",
      everythingOk : ()=>{
        return !this.status.changed
      },
      fail : ()=>{
        Ti.Toast.Open("i18n:wn-obj-nosaved", "warn")
      }
    })
    //----------------------------------------
  },
  ////////////////////////////////////////////
  beforeDestroy : function(){
    Ti.Fuse.get().remove("wn-obj-json")
  }
  ////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'm-th-obj-search.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/th/obj/m-th-obj-search.mjs'] = (function(){
////////////////////////////////////////////////
const _M = {
  //----------------------------------------
  //
  // Export Data
  //
  //----------------------------------------
  async openExportDataDir({ getters }) {
    let taDir = getters.exportDataDir;
    let oDir = await Wn.Io.loadMeta(taDir);
    let link = Wn.Util.getAppLink(oDir);
    Ti.Be.Open(link.url, { params: link.params });
  },
  //----------------------------------------
  async exportData({ state, commit, dispatch, getters }) {
    // Guard
    if (!getters.isCanUpdate) {
      return await Ti.Alert("i18n:e-pvg-fobidden", { type: "warn" });
    }
    if (!state.thingSetId) {
      return await Ti.Toast.Open("ThObj thingSetId without defined", "warn");
    }

    let modes = ["current", "scope", "all"];
    let ids = Ti.Util.getTruthyKeyInArray(state.checkedIds);
    if (!_.isEmpty(ids)) {
      modes.splice(0, 0, "checked");
    }

    //console.log(modes);
    let tsName = Ti.Util.getFallback(state.oTs, "title", "nm") || "export";
    let tsTitle = Ti.I18n.text(tsName);

    // Settings
    let settings = _.cloneDeep(state.exportSettings) || {};
    _.defaults(settings, {
      "mappingPath": `id:${state.thingSetId}/export/`,
      "defaultMappingName": undefined,
      "outputName": `${tsTitle}-\${now}`,
      "outputTarget": `id:${state.thingSetId}/tmp/export/\${name}.\${type}`,
      "outputModeOptions": modes,
      "outputMode": _.first(modes)
    });
    settings = Ti.Util.explainObj(state, settings);
    state.LOG("export settings:", settings);

    // Open Dialog Wizard to export data
    let re = await Ti.App.Open({
      icon: "fas-file-download",
      title: "i18n:export-data",
      position: "top",
      minWidth: "90%",
      height: "90%",
      result: settings,
      model: { event: "change", prop: "data" },
      comType: "WnDataExporterForm",
      comConf: settings,
      components: ["@com:wn/data/exporter-form"]
    });

    // User Cancel
    if (!re) {
      return;
    }
    state.LOG("Export Data By:", re);

    // Prepare command
    /*
    expi: "1d",
    fields: ['title', 'con_name', 'con_phone', 'con_email'],
    mapping: "0678suw2...",
    mode: "checked"
    name: "export-2023-02-28_101858"
    type: "xlsx|json"
    */
    let { type, expi } = re;
    re.outputPath = Ti.Util.appendPath(getters.exportDataDir, re.name);
    state.LOG("Export To:", re.outputPath);

    let _gen_command = {
      //.....................................
      //
      //             As XLSX
      //
      //.....................................
      xlsx: async ({
        mode,
        scope,
        mapping,
        fields = [],
        outputPath,
        expi
      } = {}) => {
        let cmds = [`thing id:${state.thingSetId} query -cqn`];

        // Prepare the fields for thing query
        let fldReg = _.isEmpty(fields) ? null : `^(${fields.join("|")})$`;
        if (fldReg) {
          cmds.push(`-e '${fldReg}'`);
        }

        // Eval Sorter
        if (!_.isEmpty(state.sorter)) {
          let sort = JSON.stringify(state.sorter);
          cmds.push(`-sort '${sort}'`);
        }

        //
        // Filter Condition
        //
        let fltInput = JSON.stringify(
          _.assign({}, state.filter, state.fixedMatch)
        );

        //.........................
        // Current Page
        if ("current" == mode) {
          let limit = getters.searchPageSize || 1000;
          let skip = Math.max(limit * (getters.searchPageNumber - 1), 0);
          cmds.push(`-limit ${limit}`);
          cmds.push(`-skip  ${skip}`);
        }
        //.........................
        // Scope
        else if ("scope" == mode) {
          let { skip, limit } = Ti.Num.scopeToLimit(scope);

          if (limit > 1000) {
            if (
              !(await Ti.Confirm("i18n:wn-export-confirm-many", {
                type: "warn"
              }))
            ) {
              return;
            }
          }

          cmds.push(`-limit ${limit}`);
          cmds.push(`-skip  ${skip}`);
        }
        //.........................
        // Checked ids
        else if ("checked" == mode) {
          fltInput = JSON.stringify({
            id: Ti.Util.getTruthyKeyInArray(state.checkedIds)
          });
        }
        //.........................
        // All
        else if ("all" == mode) {
          let sum = _.get(state, "pager.sum") || 100000;
          if (sum > 1000) {
            if (
              !(await Ti.Confirm("i18n:wn-export-confirm-many", {
                type: "warn"
              }))
            ) {
              return;
            }
          }
          // if limit is 0 mean unlimited, so we just give it a big number, such as 10W
          cmds.push(`-limit ${sum}`);
        }
        //.........................
        // Invalid Mode
        else {
          throw Ti.Err.make("e.export_data.UnknownMode", mode);
        }
        state.LOG("Export Filter Input", fltInput);

        // Join the export
        cmds.push('| sheet -process "<auto>" -tpo xlsx');
        if (fldReg) {
          cmds.push(`-keys '${fldReg}'`);
        }

        // Mapping data
        if (mapping) {
          cmds.push(`-mapping id:${mapping}`);
        }

        // Join output path
        outputPath = `${outputPath}.xls`;
        cmds.push(`-out '${outputPath}';\n`);

        return {
          cmdText: cmds.join(" "),
          input: fltInput,
          outputPath
        };
      }
      //.....................................
      //
      //             As JSON
      //
      //.....................................
      //json: async (mode, scope, mapping, fields = []) => {},
    }[type];

    if (!_.isFunction(_gen_command)) {
      return await Ti.Alert("i18n:wn-export-c-type-unknown", { type: "warn" });
    }

    // Then Generated the command
    let cmdText, input, outputPath;
    try {
      let gre = await _gen_command(re);

      // Save Settings
      commit("assignExportSettings", re);

      // Get Return Params
      cmdText = gre.cmdText;
      input = gre.input;
      outputPath = gre.outputPath;
      state.LOG("Export Data:", cmdText, input, outputPath);
    } catch (E) {
      // Fail to Generate the command
      Ti.Alert(E.toString() || "Some Erro Happend IN Gen Command", {
        type: "error"
      });
      throw E;
    }

    // User cancel
    if (!cmdText) {
      return;
    }

    // Process command
    commit("setStatus", {
      doing: {
        icon: "zmdi-settings fa-spin",
        text: `i18n:wn-export-ing-tip`
      }
    });

    let oOut;
    try {
      re = await Wn.Sys.exec2(cmdText, { input });
      state.LOG("output done ", re);

      // Fetch back the outputFile
      let cmds = [`o '${outputPath}'`];
      if (expi) {
        cmds.push(`@update 'expi:"%ms:now+${expi}"'`);
      }
      cmds.push("@json -cqn");
      cmdText = cmds.join(" ");
      state.LOG("Get back ouput file ", cmdText);
      oOut = await Wn.Sys.exec2(cmdText, { as: "json" });
    } finally {
      // Clean the status
      commit("setStatus", { doing: false });
    }

    // Tip Done
    state.LOG("Get Back Output", oOut);
    let isOK = oOut && !(oOut instanceof Error) ? true : false;
    await Ti.App.Open({
      title: "i18n:wn-export-done",
      type: isOK ? "success" : "error",
      position: "top",
      width: "4.8rem",
      height: "5rem",
      textOk: null,
      textCancel: "i18n:close",
      result: oOut,
      comType: "WebMetaBadge",
      comConf: {
        className: isOK ? "is-success" : "is-error",
        value: oOut,
        icon: isOK ? "fas-check-circle" : "zmdi-alert-triangle",
        title: isOK ? "i18n:wn-export-done-ok" : "i18n:wn-export-done-fail",
        brief: isOK
          ? "i18n:wn-export-done-ok-tip"
          : "i18n:wn-export-done-fail-tip",
        links: isOK
          ? [
              {
                icon: "fas-download",
                text: ":=nm",
                href: ":->/o/content?str=id:${id}&d=true",
                newtab: true
              },
              {
                icon: "fas-external-link-alt",
                text: "i18n:wn-export-open-dir",
                href: Wn.Util.getAppLink(oOut.pid),
                newtab: true
              }
            ]
          : []
      },
      components: ["@com:web/meta/badge"]
    });
  },
  //----------------------------------------
  //
  // Import Data
  //
  //----------------------------------------
  async importData(
    { state, commit, dispatch, getters },
    { moreFields = [], fixedDefaults = {} } = {}
  ) {
    // Guard
    if (!getters.isCanUpdate) {
      return await Ti.Alert("i18n:e-pvg-fobidden", { type: "warn" });
    }
    if (!state.thingSetId) {
      return await Ti.Toast.Open("ThObj thingSetId without defined", "warn");
    }
    let {
      defaultMappingName,
      mappingPath,
      uploadTarget,
      uniqKey,
      withHook,
      process
    } = state.importSettings || {};

    let reo = await Ti.App.Open({
      icon: "fas-file-import",
      title: "i18n:import-data",
      position: "left",
      minWidth: "90%",
      height: "100%",
      result: _.cloneDeep(state.importSettings) || {},
      model: { event: "change", prop: "data" },
      comType: "WnDataImporterForm",
      comConf: {
        "mappingPath": mappingPath || `id:${state.thingSetId}/import/`,
        "defaultMappingName": defaultMappingName,
        "uploadTarget": uploadTarget || `id:${state.thingSetId}/tmp/import/`,
        moreFields
      },
      components: ["@com:wn/data/importer-form"]
    });

    // User Cancel
    if (!reo) {
      return;
    }

    let { fileId, mode, scope, fields, mapping } = reo;
    // Check Import File
    if (!fileId) {
      return await Ti.Alert("i18n:wn-import-WithoutInput", { type: "warn" });
    }

    // 获取默认字段元数据
    let dftMetas = _.assign(
      {},
      fixedDefaults,
      _.omit(reo, [
        "fileId",
        "mode",
        "scope",
        "fields",
        "mapping",
        "expi",
        "defaultMappingName",
        "process",
        "uniqKey",
        "withHook"
      ])
    );

    // Check data Scope
    let { skip, limit } = Ti.Num.scopeToLimit(scope, { skip: 0, limit: 0 });
    // if limit is 0 mean unlimited, so we just give it a big number, such as 10W
    if (!limit) {
      limit = 100000;
    }
    if (limit > 1000) {
      if (
        !(await Ti.Confirm("i18n:wn-import-confirm-many", {
          type: "warn"
        }))
      ) {
        return;
      }
    }

    // Check filtering fields
    let fldReg = _.isEmpty(fields) ? null : `^(${fields.join("|")})$`;
    let fnames = fldReg ? `-names '${fldReg}'` : "";

    // From settings
    uniqKey = Ti.Util.fallback(reo.uniqKey, uniqKey);
    withHook = Ti.Util.fallback(reo.withHook, withHook);
    let unique = uniqKey ? `-unique ${uniqKey}` : "";
    let nohook = withHook ? "" : "-nohook";

    // Generate import commands
    var cmds = [
      "ooml id:" + fileId,
      `@xlsx @sheet @mapping -f 'id:${mapping}' ${fnames} -only`
    ];
    if (!_.isEmpty(dftMetas)) {
      cmds.push(`-defaults '${JSON.stringify(dftMetas)}'`);
    }
    cmds.push(
      "@beans -limit " + limit + " -skip " + skip,
      `| thing 'id:${state.thingSetId}' create -fields ${unique} ${nohook} `,
      `-process '${process || "<auto>"}'`
    );
    let cmdText = cmds.join(" ");
    //console.log(cmdText);

    // Process in Command panel
    await Wn.OpenCmdPanel(cmdText, {
      title: "i18n:import-data"
    });

    // 刷新主界面
    await this.dispatch("main/reloadData");
  },
  //----------------------------------------
  //
  // RecycelBin
  //
  //----------------------------------------
  async toggleInRecycleBin({ state, commit, dispatch }) {
    // Toggle filter
    let flt;
    if (-1 == _.get(state.filter, "th_live")) {
      flt = _.omit(state.filter, "th_live");
    } else {
      flt = _.assign({}, state.filter, { th_live: -1 });
    }
    commit("setFilter", flt);

    // Reload Search
    await dispatch("queryList");
  },
  //----------------------------------------
  async cleanRecycleBin({ state, commit, dispatch, getters }) {
    commit("setStatus", { cleaning: true });

    // Run command
    let th_set = state.thingSetId;
    let cmdText = `thing ${th_set} clean -limit 3000`;
    await Wn.Sys.exec2(cmdText);

    commit("setStatus", { cleaning: false });

    if (getters.isInRecycleBin) {
      await dispatch("queryList");
    }
  },
  //----------------------------------------
  async restoreRecycleBin({ state, commit, dispatch }) {
    // Require user to select some things at first
    let ids = state.checkedIds;
    if (!_.isArray(ids)) {
      ids = Ti.Util.truthyKeys(ids);
    }
    if (_.isEmpty(ids)) {
      return await Ti.Alert("i18n:thing-restore-none");
    }
    commit("setStatus", { restoring: true });

    // Run command
    let th_set = state.thingSetId;
    let cmdText = `thing ${th_set} restore -quiet -cqn -l ${ids.join(" ")}`;
    await Wn.Sys.exec2(cmdText, { as: "json" });

    // Reload
    await dispatch("queryList");

    // Update current
    dispatch("selectMeta", { currentId: null, checkedIds: {} });

    commit("setStatus", { restoring: false });
  },
  //----------------------------------------
  //
  // Selection
  //
  //----------------------------------------
  async selectMeta(
    { state, commit, dispatch, getters },
    { currentId = null, checkedIds = {} } = {}
  ) {
    state.LOG("selectMeta", currentId, checkedIds);
    // If current is nil but we got the chekced
    // just pick one as the meta
    if (!currentId && !_.isEmpty(checkedIds)) {
      currentId = _.first(Ti.Util.truthyKeys(checkedIds));
    } else if (currentId && _.isEmpty(checkedIds)) {
      checkedIds = [currentId];
    }
    commit("setCurrentId", currentId);
    commit("setCheckedIds", checkedIds);
    // find <meta> by currentId from <list>
    commit("setCurrentMeta");
    // eval data home by <meta>
    commit("autoDataHome");
    // ? Load current content
    if (getters.contentLoadPath) {
      await dispatch("loadContent");
    }
    // ? Load current data dir
  },
  //----------------------------------------
  //
  // Filter / Sorter / Pager
  //
  //----------------------------------------
  async applySearch({ state, commit, getters, dispatch }, { filter, sorter }) {
    //console.log("applySearch", {filter, sorter})
    if (filter) {
      commit("setFilter", filter);
    }
    if (sorter) {
      commit("setSorter", sorter);
    }
    // If pager enabled, should auto jump to first page
    if (getters.isPagerEnabled && filter) {
      commit("assignPager", { pn: 1 });
    }
    // Reload data by new search condition
    await dispatch("queryList");
    // Reload AGG
    if (state.aggAutoReload && filter) {
      await dispatch("queryAggResult");
    }
  },
  //----------------------------------------
  async applyFilter({ state, commit, getters, dispatch }, filter) {
    await dispatch("applySearch", { filter });
  },
  //----------------------------------------
  async applySorter({ commit, dispatch }, sorter) {
    await dispatch("applySearch", { sorter });
  },
  //----------------------------------------
  async applyPager({ commit, dispatch }, pager) {
    //console.log("applyPager", pager)
    commit("assignPager", pager);
    await dispatch("queryList");
  },
  //----------------------------------------
  //
  // Query
  //
  //----------------------------------------
  async loadAggResult({ dispatch }) {
    return await dispatch("queryAggResult");
  },
  //----------------------------------------
  async queryAggResult(
    { state, commit },
    { aggName, flt = {}, dft = [] } = {}
  ) {
    aggName = aggName || state.aggQuery;
    if (!aggName) {
      return dft;
    }
    state.LOG("async queryAggResult", aggName);
    let agg = _.get(state.agg, aggName);
    if (_.isEmpty(agg) || !agg.by) {
      state.LOG("!! Bad Agg Setting", agg);
      return;
    }

    // Ignore the specil keys in filter to agg more data
    let ignore = Ti.AutoMatch.parse(agg.ignore);
    let { thingSetId, filter, fixedMatch } = state;
    // Query
    let qmeta = _.assign({}, filter, fixedMatch, flt);
    qmeta = _.omitBy(qmeta, (v, k) => {
      return ignore(k);
    });
    _.assign(qmeta, agg.match);
    let input = JSON.stringify(qmeta);

    // Prepare the command
    commit("setStatus", { reloading: true });
    let cmdText = `o id:${thingSetId}/index @agg ${agg.by} -match -cqn`;
    let reo = await Wn.Sys.exec2(cmdText, { input, as: "json" });

    // Update
    commit("setAggResult", { key: aggName, result: reo });
    // Done
    commit("setStatus", { reloading: false });
  },
  //----------------------------------------
  async reloadList({ dispatch }) {
    return await dispatch("queryList");
  },
  //----------------------------------------
  async queryList({ state, commit, getters }, flt = {}) {
    state.LOG("async queryList");
    let { thingSetId, filter, fixedMatch, sorter, thingObjKeys } = state;
    // Query
    let qmeta = _.assign({}, filter, fixedMatch, flt);
    let input = JSON.stringify(qmeta);

    // Command
    let cmds = [`thing ${thingSetId} query -cqn`];

    // Eval Pager
    if (getters.isPagerEnabled) {
      let limit = getters.searchPageSize * 1;
      let skip = getters.searchPageSize * (getters.searchPageNumber - 1);
      cmds.push(`-pager -limit ${limit} -skip ${skip}`);
    }

    // Sorter
    if (!_.isEmpty(sorter)) {
      cmds.push(`-sort '${JSON.stringify(sorter)}'`);
    }

    // Show Thing Keys
    if (thingObjKeys) {
      cmds.push(`-e '${thingObjKeys}'`);
    }

    // Process Query
    let cmdText = cmds.join(" ");
    commit("setStatus", { reloading: true });
    let reo = await Wn.Sys.exec2(cmdText, { input, as: "json" });

    state.LOG(" - ", cmdText, input);

    // Update pager
    if (getters.isPagerEnabled) {
      commit("setPager", reo.pager);
    }
    commit("setList", reo.list);
    commit("setCurrentMeta");

    commit("setStatus", { reloading: false });
    state.LOG(" - query done:", reo);
  }
  //--------------------------------------------
};
return _M;;
})()
// ============================================================
// EXPORT 'mod-address-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/lib/www/mod/auth/mod-address-actions.mjs'] = (function(){
const _M = {
  //--------------------------------------------
  async reloadMyAddresses({state, commit, getters}){
    let url = getters.urls.addr_mine

    commit("setLoading", true, {root:true})
    let reo = await Ti.Http.get(url, {
      params: {
        ticket: state.ticket 
      },
      as:"json"
    })
    commit("setLoading", false, {root:true})
    commit("setAddresses", reo)
  },
  //--------------------------------------------
  async editOrCreateAddress({state, getters, commit, dispatch}, addr={}) {
    //console.log("openAddressEditor", addr)
    // Pick the data
    let result = _.pick(addr, 
        "id", "country", "code",
        "province", "city", "area", "street", "door", "dftaddr",
        "consignee", "phone", "email")
    // Add Default Value
    _.defaults(result, {
      country : "CN",
      tp : "U",
      dftaddr : false
    })

    // Prepare the Edit form
    let newAddr = await Ti.App.Open({
      title: "i18n:edit",
      position: "top",
      width: 640,
      height: "90%",
      result: result,
      comType: "TiForm",
      comConf: {
        onlyFields: false,
        data: "=result",
        fields: [{
            "title"   : "i18n:address-k-country",
            "name"    : "country",
            "comType" : "ti-combo-input",
            "comConf" : {
              "mustInList": true,
              "autoCollapse": true,
              "valueCase": "upper",
              "dropDisplay": "name",
              "options": state.countries,
              "valueBy": "key",
              "textBy" : "name"
            }
          },{
            "title"   : "i18n:address-k-code",
            "name"    : "code",
            "tip"     : "i18n:address-k-code-tip",
            "comType" : "ti-input",
            "comConf" : {
              "valueCase": "upper"
            }
          },{
            "title"   : "i18n:address-k-province",
            "name"    : "province",
            "comType" : "ti-input"
          },{
            "title"   : "i18n:address-k-city",
            "name"    : "city",
            "comType" : "ti-input"
          },{
            "title"   : "i18n:address-k-area",
            "name"    : "area",
            "comType" : "ti-input"
          },{
            "title"   : "i18n:address-k-street",
            "name"    : "street",
            "comType" : "ti-input"
          },{
            "title"   : "i18n:address-k-door",
            "name"    : "door",
            "comType" : "ti-input"
          },{
            "title"   : "i18n:address-k-dftaddr",
            "name"    : "dftaddr",
            "type"    : "Boolean",
            "comType" : "ti-toggle"
          },{
            "title"   : "i18n:address-k-consignee",
            "name"    : "consignee",
            "comType" : "ti-input"
          },{
            "title"   : "i18n:address-k-phone",
            "name"    : "phone",
            "comType" : "ti-input"
          },{
            "title"   : "i18n:address-k-email",
            "name"    : "email",
            "comType" : "ti-input"
          }]
      }
    })
    // User cancel
    if(_.isUndefined(newAddr)) {
      return
    }

    // No change
    if(_.isEqual(newAddr, result)) {
      return
    }

    console.log("!!!", newAddr)
    // Eval the url
    let url;
    // Create
    if(!newAddr.id) {
      url = getters.urls.addr_create
    }
    // Update
    else {
      url = getters.urls.addr_update
    }

    // Prepare http options
    let params = {
      ticket: state.ticket,
      id: newAddr.id
    }
    let body = JSON.stringify(newAddr)

    commit("setLoading", true, {root:true})

    // Send request
    await Ti.Http.post(url, {
      params, body, as:"json"
    })

    // Then reload
    await dispatch("reloadMyAddresses")

    commit("setLoading", false, {root:true})
  },
  //--------------------------------------------
  async removeAddress({state, commit, getters, dispatch}, {id}={}){
    // Guard
    if(!id) {
      return
    }

    // Confirm
    if(!(await Ti.Confirm("i18n:address-rm-confirm"))) {
      return
    }

    commit("setLoading", true, {root:true})

    // Process delete
    let url = getters.urls.addr_delete
    await Ti.Http.get(url, {
      params: {
        ticket: state.ticket,
        id: id
      },
      as:"json"
    })
    
    // Then reload
    await dispatch("reloadMyAddresses")

    commit("setLoading", false, {root:true})
  },
  //--------------------------------------------
  async setAddressDefault({state, commit, getters, dispatch}, {id}={}){
    // Guard
    if(!id) {
      return
    }

    // Process delete
    let url = getters.urls.addr_update
    // Prepare http options
    let params = {
      ticket: state.ticket,
      id: id
    }
    let body = JSON.stringify({dftaddr:true})

    commit("setLoading", true, {root:true})

    // Send request
    await Ti.Http.post(url, {
      params, body, as:"json"
    })
    
    // Then reload
    await dispatch("reloadMyAddresses")

    commit("setLoading", false, {root:true})
  },
  //--------------------------------------------
  async initCountries({state, getters, commit}) {
    if(!state.countries) {
      let url = getters.urls.countries
      let reo = await Ti.Http.get(url, {as:"json"})
      commit("setCountries", reo)
    }
  }
  //--------------------------------------------
}
return _M;;
})()
// ============================================================
// EXPORT 'web-text-article-methods.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/text/article/web-text-article-methods.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //--------------------------------------
  doInflateBlankParagraph($div) {
    let $ps = Ti.Dom.findAll("p", $div);
    for (let $p of $ps) {
      if (Ti.Dom.isEmpty($p)) {
        $p.innerHTML = "&nbsp;";
      }
    }
  },
  //--------------------------------------
  cleanMediaSize($div) {
    let $medias = Ti.Dom.findAll(".wn-media", $div);
    for (let $media of $medias) {
      // User force keep the style
      if ("off" == $media.getAttribute("wn-raw-size")) {
        continue;
      }
      let css = { width: "", height: "", margin: "" };
      if ($media.style.float && "none" != $media.style.float) {
        css.float = "";
        Ti.Dom.addClass($media, "as-phone-block");
      }
      Ti.Dom.updateStyle($media, css);
    }
  },
  //--------------------------------------
  deconstructTable($div) {
    let $tables = Ti.Dom.findAll(":scope > table, :scope > * > table", $div);
    let $freg = new DocumentFragment();
    const tidyHtml = function (el) {
      let html = el.innerHTML;
      if (1 == el.childElementCount) {
        return html.replace(/(<p[^>]*>)|(<\/p>)/g, "");
      }
      return _.trim(html);
    };
    const createHr = function () {
      return Ti.Dom.createElement({
        tagName: "hr",
        className: "decon-table as-table-tr"
      });
    };
    for (let $table of $tables) {
      //
      // Table caption
      //
      let $caption = Ti.Dom.find("caption", $table);
      if ($caption) {
        let $caP = Ti.Dom.createElement({
          tagName: "p",
          className: "decon-table as-table-caption"
        });
        $caP.innerHTML = $caption.innerHTML;
        $freg.appendChild(createHr());
        $freg.appendChild($caP);
      }
      //
      // Found thead
      //
      let $rows;
      let $thead = Ti.Dom.find("thead", $table);
      let headers = [];
      if ($thead) {
        $rows = Ti.Dom.findAll("tr", $thead);
        if (!_.isEmpty($rows)) {
          for (let $row of $rows) {
            let $cells = Ti.Dom.findAll("td,th", $row);
            let offX = 0;
            for (let x = 0; x < $cells.length; x++) {
              let $cell = $cells[x];
              let span = $cell.getAttribute("colspan") * 1 || 1;
              let cellHtml = tidyHtml($cell);
              for (let i = 0; i < span; i++) {
                let headHtml = headers[offX];
                if (headHtml && "&nbsp;" != headHtml) {
                  headHtml += " " + cellHtml;
                } else {
                  headHtml = cellHtml;
                }
                headers[offX] = headHtml;
                offX++;
              }
            }
          }
        }
        Ti.Dom.remove($thead);
      }
      //console.log($table)
      // Begin Table
      $freg.appendChild(createHr());
      // Decon each row
      $rows = Ti.Dom.findAll("tr", $table);
      for (let $row of $rows) {
        // Each cell
        let $cells = Ti.Dom.findAll("td", $row);
        for (let i = 0; i < $cells.length; i++) {
          let $cell = $cells[i];
          let html = tidyHtml($cell);
          // Ignore the empty cell
          if (!html || "&nbsp;" == html) {
            continue;
          }
          let $p = Ti.Dom.createElement({
            tagName: "p",
            className: "decon-table as-table-cess"
          });
          let headHtml = _.get(headers, i);
          if (headHtml) {
            html = headHtml + "<span>:</span> " + html;
          }
          $p.innerHTML = html;
          $freg.appendChild($p);
        }
        // End row
        $freg.appendChild(createHr());
      }
      // Insert before table
      $table.parentElement.insertBefore($freg, $table);
      Ti.Dom.remove($table);
    }
  },
  //--------------------------------------
  explainJsHref($div) {
    let $links = Ti.Dom.findAll("a[href]", $div);
    for (let $link of $links) {
      let href = $link.getAttribute("href");
      let m = /^js:(.+)$/.exec(href);
      if (m) {
        if (this.allowJsHref) {
          $link.setAttribute("href", `javascript:${m[1]}`);
        } else {
          $link.removeAttribute("href");
        }
      }
    }
  },
  //--------------------------------------
  explainWnImage($div) {
    let $imgs = Ti.Dom.findAll("img[wn-obj-id]", $div);
    for (let $img of $imgs) {
      //console.log($img)
      // Prepare the obj
      let obj = Ti.Dom.attrs($img, (key) => {
        if (key.startsWith("wn-obj-")) {
          return _.camelCase(key.substring(7));
        }
      });
      // Eval the src
      let src = Ti.WWW.evalObjPreviewSrc(obj, {
        previewKey: "..",
        previewObj: "..",
        apiTmpl: this.apiTmpl,
        cdnTmpl: this.cdnTmpl,
        dftSrc: this.dftImgSrc
      });
      $img.src = src;
    }
  },
  //--------------------------------------
  explainWnAttachment($div) {
    let $els = Ti.Dom.findAll(".wn-attachment", $div);
    for (let $el of $els) {
      // Prepare the obj
      let obj = Ti.Dom.attrs($el, (key) => {
        if (key.startsWith("wn-obj-")) {
          return _.camelCase(key.substring(7));
        }
      });
      // Eval the src
      let href = Ti.WWW.evalObjPreviewSrc(obj, {
        previewKey: "..",
        previewObj: "..",
        apiTmpl: this.downTmpl || this.apiTmpl
      });
      let $an = Ti.Dom.createElement({
        tagName: "A",
        className: "wn-attachment",
        attrs: { href }
      });
      let icon = Ti.Icons.get(obj, "fas-paperclip");
      let iconHtml = Ti.Icons.fontIconHtml(icon);
      let html = `<span class="as-icon">${iconHtml}</span>`;
      if (obj.title) {
        html += `<span class="as-title">${obj.title}</span>`;
      }
      $an.innerHTML = html;
      Ti.Dom.replace($el, $an);
    }
  },
  //--------------------------------------
  explainWnMediaVideo($div) {
    let $els = Ti.Dom.findAll(".wn-media.as-video", $div);
    for (let $el of $els) {
      // Prepare the obj
      let obj = Ti.Dom.attrs($el, (key) => {
        if (key.startsWith("wn-obj-")) {
          return _.camelCase(key.substring(7));
        }
      });
      // Eval the src
      let src = Ti.WWW.evalObjPreviewSrc(obj, {
        previewKey: "..",
        previewObj: "..",
        apiTmpl: this.apiTmpl,
        cdnTmpl: this.cdnTmpl,
        dftSrc: this.dftImgSrc
      });
      let $video = Ti.Dom.createElement({
        tagName: "video",
        attrs: {
          src,
          controls: true
        },
        style: {
          width: "100%",
          height: "100%"
        }
      });
      $el.innerHTML = null;
      Ti.Dom.appendTo($video, $el);
    }
  },
  //--------------------------------------
  explainWnMediaAudio($div) {
    let $els = Ti.Dom.findAll(".wn-media.as-audio", $div);
    for (let $el of $els) {
      // Prepare the obj
      let obj = Ti.Dom.attrs($el, (key) => {
        if (key.startsWith("wn-obj-")) {
          return _.camelCase(key.substring(7));
        }
      });
      //console.log(obj)
      // Eval the src
      let src = Ti.WWW.evalObjPreviewSrc(obj, {
        previewKey: "..",
        previewObj: "..",
        apiTmpl: this.apiTmpl,
        cdnTmpl: this.cdnTmpl,
        dftSrc: this.dftImgSrc
      });
      let $audio = Ti.Dom.createElement({
        tagName: "audio",
        attrs: {
          src,
          controls: true
        },
        style: {
          width: "100%",
          height: "100%"
        }
      });
      $el.innerHTML = null;
      Ti.Dom.appendTo($audio, $el);
    }
  },
  //--------------------------------------
  explainWnMediaYoutube($div) {
    let $els = Ti.Dom.findAll(".wn-media.as-youtube", $div);
    for (let $el of $els) {
      // Prepare the obj
      let obj = Ti.Dom.attrs($el, (key) => {
        if (key.startsWith("wn-yt-")) {
          return key.substring(6);
        }
      });
      //console.log(obj)
      // Eval the src
      let $frame = Ti.Dom.createElement({
        tagName: "iframe",
        attrs: {
          src: `//www.youtube.com/embed/${obj.id}`,
          allow: obj.allow,
          allowfullscreen: obj.allowfullscreen
        },
        style: {
          width: "100%",
          height: "100%"
        }
      });
      $el.innerHTML = null;
      Ti.Dom.appendTo($frame, $el);
    }
  },
  //--------------------------------------
  getTiAlbumObj($el) {
    let albumType = $el.getAttribute("ti-album-type");
    let styleUrlRewrite;
    if (this.apiTmpl) {
      styleUrlRewrite = (bgUrl) => {
        let m =
          /^url\(['"]?\/o\/content\?str=id:([^&'")]+)([^)'"]*)['"]?\)?$/.exec(
            bgUrl
          );
        if (m) {
          let id = m[1];
          let src = Ti.S.renderBy(this.apiTmpl, { id });
          return `url('${src}')`;
        }
        return bgUrl;
      };
    }
    //
    // Get album setup by type
    //
    let setup = {
      "album": {
        attrPrefix: "wn-obj-",
        itemToPhoto: {
          name: "=title",
          link: "=href",
          src: (obj) => {
            return Ti.WWW.evalObjPreviewSrc(obj, {
              previewKey: "..",
              previewObj: "..",
              apiTmpl: this.apiTmpl,
              cdnTmpl: this.cdnTmpl,
              dftSrc: this.dftImgSrc
            });
          },
          thumb: (obj) => {
            return Ti.WWW.evalObjPreviewSrc(obj, {
              previewKey: "thumb",
              previewObj: "thumbObj",
              apiTmpl: this.apiTmpl,
              cdnTmpl: this.cdnTmpl,
              dftSrc: this.dftImgSrc
            });
          },
          brief: "=brief"
        },
        styleUrlRewrite
      },
      "fb-album": {
        attrPrefix: "wn-fb-",
        itemToPhoto: {
          name: "=name",
          link: "=link",
          thumb: "=thumbSrc", // "thumb_src" will be camelCase
          src: "=src"
        },
        styleUrlRewrite
      },
      "yt-playlist": {
        attrPrefix: "wn-ytpl-",
        itemToPhoto: {
          name: "=title",
          link: `->${this.ytPlayerTmpl}`,
          thumb: "=thumbUrl",
          src: "=coverUrl",
          brief: "=description"
        },
        styleUrlRewrite
      }
    }[albumType || "album"];

    //
    // Create widget
    //
    return Ti.Widget.Album.getOrCreate(
      $el,
      _.assign(setup, {
        live: true
      })
    );
  },
  //--------------------------------------
  async explainTiAlbum($div) {
    let $els = Ti.Dom.findAll(".ti-widget-album", $div);
    for (let $el of $els) {
      //
      // Create widget
      //
      let AB = this.getTiAlbumObj($el);

      // Get album info
      let album = AB.getData();
      let items;

      // Reload album data
      if (this.fbAlbumApiTmpl && "fb-album" == album.type) {
        //console.log(album)
        //console.log("local items", AB.getItems())

        let url = Ti.S.renderBy(this.fbAlbumApiTmpl, album);
        //console.log(url)
        items = await Ti.Http.get(url, { as: "json" });
        //console.log("server items", items)
        Ti.WWW.FB.setObjListPreview(items);
      }
      // Get data from album DOM
      else {
        items = AB.getItems();
      }

      // Rewrite style
      Ti.Dom.setStyle($el, album.style);

      // Redraw
      //console.log(album, items)
      AB.renderItems(items);
    }
  },
  //--------------------------------------
  bindLiveWidgets($div) {
    let vm = this;
    //................................................
    const OnWidgetBeforeClose = () => {
      if (vm.albumBeforeCloseNotifyName) {
        vm.$notify(vm.albumBeforeCloseNotifyName);
      }
      if (_.isFunction(vm.whenAlbumBeforeClose)) {
        vm.whenAlbumBeforeClose();
      }
    };
    //................................................
    const OnWidgetClosed = () => {
      if (vm.albumClosedNotifyName) {
        vm.$notify(vm.albumClosedNotifyName);
      }
      if (_.isFunction(vm.whenAlbumClosed)) {
        vm.whenAlbumClosed();
      }
    };
    //................................................
    let LIVE_WIDGETS = {
      "album-fullpreview": function ($el) {
        Ti.Widget.PhotoGallery.bind($el, {
          titleKey: $el.getAttribute("ti-live-title-key") || "title",
          showOpener: vm.photoGalleryShowOpener,
          ignoreSrcElement: ($el) => {
            if (Ti.Dom.closest($el, ".album-ex-link")) {
              return true;
            }
            return false;
          },
          getData: function () {
            let AB = vm.getTiAlbumObj($el);
            let photos = AB.getPhotos();
            return _.map(photos, (it, index) => {
              return {
                index,
                srcThumb: it.thumb,
                srcLarge: it.src,
                src: it.src,
                title: it.name,
                link: it.link
              };
            });
          },
          onBeforeClose: OnWidgetBeforeClose,
          onClosed: OnWidgetClosed
        });
      }
    };
    //
    // Open album photo gallery
    //
    let $els = Ti.Dom.findAll("[ti-live-widget]", $div);
    for (let $el of $els) {
      let widgetType = $el.getAttribute("ti-live-widget");
      let initFunc = LIVE_WIDGETS[widgetType];
      if (_.isFunction(initFunc)) {
        initFunc($el);
      }
      // Invalid live widget type, warn user
      else {
        console.warn("Invalid widget type", widgetType);
      }
    }
    //
    // Open image photo gallery
    // It will browser all page image as on gallery
    //
    if (this.showImageGallery) {
      $els = Ti.Dom.findAll("img.wn-media.as-image", $div);
      let arMediaImages = _.map($els, ($el, index) => {
        let src = $el.getAttribute("src");
        let $link = Ti.Dom.closest($el, "a.wn-media");
        let $alt = Ti.Dom.find($link, ".as-img-alt");
        let link, title;
        if ($link) {
          link = $link.getAttribute("href");
        }
        if ($alt) {
          title = $alt.innerText;
        }
        return {
          $el,
          index,
          link,
          title,
          src,
          srcThumb: src,
          srcLarge: src
        };
      });
      for (let arMI of arMediaImages) {
        if (arMI.link) {
          continue;
        }
        Ti.Widget.PhotoGallery.bind(arMI.$el, {
          showOpener: vm.photoGalleryShowOpener,
          getData: function () {
            return arMediaImages;
          },
          onBeforeClose: OnWidgetBeforeClose,
          onClosed: OnWidgetClosed
        });
      }
    }
  },
  //--------------------------------------
  async redrawContent() {
    // Guard
    if (!_.isElement(this.$refs.main)) return false;

    // Prepare HTML
    let html = this.ArticleHtml || "";
    html = html.replace("<script", "[SCRIPT");
    if (this.ignoreBlank && Ti.S.isBlank(html)) {
      return;
    }

    // Create fragment
    let $div = Ti.Dom.createElement({
      tagName: "div"
    });
    $div.innerHTML = html;

    // Auto Decon-Table
    if (this.deconTable) {
      this.deconstructTable($div);
    }

    // Media raw-size
    if (this.mediaRawSize) {
      this.cleanMediaSize($div);
    }

    // Image
    this.explainWnImage($div);

    // Image
    this.explainJsHref($div);

    // Attachment
    this.explainWnAttachment($div);

    // Video
    this.explainWnMediaVideo($div);

    // Audio
    this.explainWnMediaAudio($div);

    // Youtube video
    this.explainWnMediaYoutube($div);

    // Album: (album/FbAlbum/YtPlaylist)
    await this.explainTiAlbum($div);

    if (this.inflateBlankP) {
      this.doInflateBlankParagraph($div);
    }

    // Update the article content
    this.$refs.main.innerHTML = $div.innerHTML;
    //console.log("redrawContent", this.$el.className, `【${$div.innerHTML}】`)

    // Found all outer resource
    let $imgs = Ti.Dom.findAll("img", this.$refs.main);
    let medias = [];
    for (let i = 0; i < $imgs.length; i++) {
      let $img = $imgs[i];
      medias[i] = false;
      $img.__resource_index = i;
      $img.addEventListener(
        "load",
        (evt) => {
          let img = evt.target || evt.srcElement;
          let iX = img.__resource_index;
          this.myMedias[iX] = true;
          _.delay(() => {
            this.checkContentReady();
          });
        },
        { once: true }
      );
    }
    this.myMedias = medias;

    // Bind Live widget
    this.bindLiveWidgets(this.$refs.main);

    // Customized redraw
    if (this.afterRedraw) {
      let fn = Ti.Util.genInvoking(this.afterRedraw);
      if (_.isFunction(fn)) {
        fn({
          $el: this.$el,
          $main: this.$refs.main
        });
      }
    }

    // Notify
    if (this.redrawnNotifyName) {
      this.$notify(this.redrawnNotifyName, {
        $el: this.$el,
        $main: this.$refs.main
      });
    }

    //console.log("redraw article done")

    // Auto first open
    let selector = [
      '.ti-widget-album[wn-obj-fullpreview="true"][wn-obj-autoopen="true"]',
      '.ti-widget-album[wn-fb-fullpreview="true"][wn-fb-autoopen="true"]'
    ].join(",");
    let $album = Ti.Dom.find(selector, this.$refs.main);
    if ($album) {
      $album.click();
    }

    return true;
  },
  //--------------------------------------
  checkContentReady() {
    for (let m of this.myMedias) {
      if (!m) {
        return;
      }
    }

    // Customized redraw
    if (this.whenReady) {
      let fn = Ti.Util.genInvoking(this.whenReady);
      if (_.isFunction(fn)) {
        fn({
          $el: this.$el,
          $main: this.$refs.main
        });
      }
    }

    // Notify
    if (this.readyNotifyName) {
      this.$notify(this.readyNotifyName, {
        $el: this.$el,
        $main: this.$refs.main
      });
    }
  }
  //--------------------------------------
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'form-support.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/form/form-support.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////////////////
  data: () => ({
    // Save the changed data
    myData: {},

    myReadonly: undefined,
    myScreenMode: "desktop",

    myCandidateFormFields: [],

    myKeysInFields: [],
    myFormFields: [],
    myFormFieldMap: {},
    myActivedFieldKey: null,

    /*field white list*/
    myFieldWhiteList: {},
    /*field black list*/
    myFieldBlackList: {},

    /*auto conclude batch mode editable fields*/
    myBatchEditableFields: {},
    myForceEditableFields: {},

    /*
    Field evaluation
    // mark curetn evaluation: assemble the watcher fields finger
    - current_finger : "xxx"
    // if current evaluation still processing, join the finger to wating list
    // It will be invoke the last finger after current processing done
    - waiting_list : ["Another finger"]
    */
    eval_current_finger: undefined,
    eval_waitings: []
  }),
  //////////////////////////////////////////////////////
  computed: {
    //--------------------------------------------------
    isReadonly() {
      return Ti.Util.fallback(this.myReadonly, this.readonly, false);
    },
    //--------------------------------------------------
    isBatchMode() {
      return _.isArray(this.batchHint) && this.batchHint.length > 1;
    },
    //--------------------------------------------------
    isBatchReadonly() {
      if (this.batchReadonly) {
        return Ti.AutoMatch.parse(this.batchReadonly);
      }
      return () => false;
    },
    //--------------------------------------------------
    isIgnoreAutoReadonly() {
      if (_.isFunction(this.ignoreAutoReadonly)) {
        return this.ignoreAutoReadonly;
      }
      if (_.isString(this.ignoreAutoReadonly)) {
        let reg = new RegExp(this.ignoreAutoReadonly);
        return ({ comType }) => {
          return reg.test(comType);
        };
      }
      return () => false;
    },
    //--------------------------------------------------
    FormNotifyMode() {
      if (this.isBatchMode && this.batchNotifyMode) {
        return this.batchNotifyMode;
      }
      if ("auto" == this.notifyMode) {
        return this.isReadonly ? "none" : "immediate";
      }
      return this.notifyMode;
    },
    //--------------------------------------------------
    isFormNotifyImmediate() {
      return "immediate" == this.FormNotifyMode;
    },
    isFormNotifyDataOnly() {
      return "data" == this.FormNotifyMode;
    },
    isFormNotifyFieldOnly() {
      return "field" == this.FormNotifyMode;
    },
    isFormNotifyConfirm() {
      return "confirm" == this.FormNotifyMode;
    },
    isFormNotifyNone() {
      return "none" == this.FormNotifyMode;
    },
    //--------------------------------------------------
    FormDataMode() {
      if ("auto" == this.dataMode) {
        return this.isFormNotifyConfirm ? "diff" : "all";
      }
      return this.dataMode;
    },
    //--------------------------------------------------
    isFormDataModeDiff() {
      return "diff" == this.FormDataMode;
    },
    isFormDataModeAll() {
      return "all" == this.FormDataMode;
    },
    //--------------------------------------------------
    isFormReadonlyConfirm() {
      return this.readonly && this.isFormNotifyConfirm;
    },
    //--------------------------------------------------
    FormData() {
      return this.filterData(this.myData);
    },
    //--------------------------------------------------
    isFormDataChanged() {
      return !_.isEmpty(this.getDiffData());
    },
    //--------------------------------------------------
    hasFieldWhiteList() {
      return !_.isEmpty(this.myFieldWhiteList);
    },
    //--------------------------------------------------
    hasFieldBlackList() {
      return !_.isEmpty(this.myFieldBlackList);
    },
    //--------------------------------------------------
    hasCustomizedWhiteFields() {
      if (!this.hasFieldWhiteList) {
        return false;
      }
      let whites = Ti.Util.truthyKeys(this.myFieldWhiteList);
      return !_.isEqual(whites, this.whiteFields);
    },
    //--------------------------------------------------
    FormLinkFields() {
      let re = {};
      _.forEach(this.linkFields, (lnkFld, key) => {
        // By dict
        if (lnkFld && lnkFld.dict && lnkFld.target) {
          let { dict, target } = lnkFld;
          // Guard
          if (!target) {
            return;
          }
          // Get dict
          let { name, dynamic, dictKey } = Ti.DictFactory.explainDictName(dict);
          //.......................................................
          let getItemFromDict = async function (value, data) {
            let d;
            // Dynamic
            if (dynamic) {
              let key = _.get(data, dictKey);
              let vars = Ti.Util.explainObj(data, lnkFld.dictVars || {});
              d = Ti.DictFactory.GetDynamicDict({ name, key, vars });
            }
            // Static Dictionary
            else {
              d = Ti.DictFactory.CheckDict(name);
            }
            // Get item data
            if (d) {
              // Multi value
              if (_.isArray(value)) {
                let list = [];
                for (let v of value) {
                  let v2 = await d.getItem(v);
                  list.push(v2);
                }
                return list;
              }
              // Single value
              return await d.getItem(value);
            }
          };
          //.......................................................
          let fn;
          //.......................................................
          // Pick
          if (_.isArray(target)) {
            fn = async function ({ value }, data) {
              let it = await getItemFromDict(value, data);
              return _.pick(it, target);
            };
          }
          // Explain target
          else if (lnkFld.explainTargetAs) {
            fn = async function ({ value, name }, data) {
              let it = await getItemFromDict(value, data);
              let ctx = _.assign({}, data, {
                [lnkFld.explainTargetAs]: it
              });
              let newVal = Ti.Util.explainObj(ctx, target);
              // console.log(name, value, "->", newVal)
              return newVal;
            };
          }
          // Simple Translate
          else {
            fn = async function ({ value }, data) {
              let it = await getItemFromDict(value, data);
              return Ti.Util.translate(it, target, (v) =>
                Ti.Util.fallback(v, null)
              );
            };
          }
          // join to map
          re[key] = fn;
        }
        // Statice value
        else if (lnkFld && lnkFld.target) {
          re[key] = ({ name, value }, data) => {
            let tc = _.assign({}, { "$update": { name, value } }, data);
            if (lnkFld.test && !Ti.AutoMatch.test(lnkFld.test, tc)) {
              return;
            }
            return Ti.Util.explainObj(tc, lnkFld.target);
          };
        }
        // Customized Function
        else if (_.isFunction(lnkFld)) {
          re[key] = lnkFld;
        }
      });
      return re;
    }
    //--------------------------------------------------
  },
  //////////////////////////////////////////////////////
  methods: {
    //--------------------------------------------------
    async OnFieldChange({ name, value } = {}) {
      //console.log("OnFieldChange", name, value)
      //
      // Confirm, store the change to temp-data at first
      // whatever `confirm` or `immediate` we need the `myData`
      // switch to new version ASAP.
      // Then the GUI will keep show the new value, rather than
      // back to old version in a eywink.
      //
      // support name as ".." or [..]
      // Of cause, if name as `[..]`, the value must be a `{..}`
      //console.log("OnFieldChange", { name, value })
      let data = Ti.Types.toObjByPair(
        { name, value },
        {
          dft: _.cloneDeep(this.FormData)
        }
      );
      let linkdedChanged = await this.applyLinkedFields({
        name,
        value,
        data
      });
      // Merge linked change
      _.assign(data, linkdedChanged);

      // Keep temp data to confirm
      if (this.isFormNotifyConfirm || this.isFormNotifyNone) {
        this.myData = data;
      }
      //
      // Notify change immediately
      //
      else {
        // Notify at first
        //console.log("OnFieldChange", { name, value })
        if (this.isFormNotifyImmediate || this.isFormNotifyFieldOnly) {
          this.$notify("field:change", { name, value });

          // Link fields
          _.forEach(linkdedChanged, (v, k) => {
            this.$notify("field:change", { name: k, value: v });
          });
        }

        // Notify later ...
        // Wait for a tick to give a chance to parent of 'data' updating
        if (
          (this.isFormNotifyImmediate && this.notifyDataImmediate) ||
          this.isFormNotifyDataOnly
        ) {
          this.$nextTick(() => {
            let nd = this.getData(data);
            //console.log("notify data", nd)
            this.$notify("change", nd);
          });
        }
      }
    },
    //--------------------------------------------------
    async OnToggleForceEditable(fld) {
      let ids = _.cloneDeep(this.myForceEditableFields);
      if (ids[fld.uniqKey]) {
        delete ids[fld.uniqKey];
      } else {
        ids[fld.uniqKey] = true;
      }
      this.myForceEditableFields = ids;
      await this.evalFormFieldList();
    },
    //--------------------------------------------------
    //
    //           EVAL FORM DATA
    //
    //--------------------------------------------------
    getData(data = this.FormData) {
      if (this.isFormDataModeAll) {
        return _.cloneDeep(data) || {};
      }
      return this.getDiffData(data);
    },
    //--------------------------------------------------
    getDiffData(data = this.FormData) {
      let diff = {};
      _.forEach(data, (v, k) => {
        let vOld = _.get(this.data, k);
        if (!_.isEqual(v, vOld)) {
          diff[k] = v;
        }
      });
      return this.filterData(diff);
    },
    //--------------------------------------------------
    filterData(data = {}) {
      let re = data || {};
      if (this.onlyFields) {
        re = _.pick(re, this.myKeysInFields);
      }
      if (this.omitHiddenFields) {
        re = _.omitBy(re, (v, k) => {
          if (this.myFormFieldMap[k]) {
            return false;
          }
          return true;
        });
      }
      return re;
    },
    //--------------------------------------------------
    //
    //           TIDY FORM FIELDS
    //
    //--------------------------------------------------
    getFlattenFormFields(fields = []) {
      let list = [];
      const __join_fields = function (fields = []) {
        for (let fld of fields) {
          if ("Group" == fld.race || _.isArray(fld.fields)) {
            __join_fields(fld.fields);
          }
          // Join normal fields
          else {
            // Replace the last Label
            let lastFld = _.nth(list, -1);
            if (lastFld && "Label" == lastFld.race && "Label" == fld.race) {
              list[list.length - 1] = fld;
            }
            // Join
            else {
              list.push(fld);
            }
          }
        }
      };
      __join_fields(fields);
      return list;
    },
    //--------------------------------------------------
    getGroupedFormFields(fields = [], otherGroupTitle) {
      let list = [];
      let otherFields = [];
      for (let fld of fields) {
        if (this.isGroup(fld)) {
          // Join others
          if (!_.isEmpty(otherFields)) {
            list.push({
              type: "Group",
              index: list.length,
              fields: otherFields
            });
            otherFields = [];
          }
          // Join self
          list.push(
            _.assign({}, fld, {
              index: list.length
            })
          );
        }
        // Collect to others
        else {
          otherFields.push(fld);
        }
      }
      // Join others
      if (!_.isEmpty(otherFields)) {
        list.push({
          type: "Group",
          index: list.length,
          title: otherGroupTitle,
          fields: otherFields
        });
      }
      // Done
      return list;
    },
    //--------------------------------------------------
    evalMyScreenMode() {
      if ("auto" == this.screenMode) {
        let state = Ti.App(this).$state().viewport;
        this.myScreenMode = _.get(state, "mode") || "desktop";
      } else {
        this.myScreenMode = this.screeMode;
      }
    },
    //--------------------------------------------------
    //
    //           Apply linked fields
    //
    //--------------------------------------------------
    async applyLinkedFields({ name, value, data = {}, callback }) {
      let uniqKey = Ti.Util.anyKey(name);
      let linkFunc = this.FormLinkFields[uniqKey];

      // Guard
      if (!linkFunc) {
        return;
      }

      let obj = await linkFunc({ name, value }, data);
      if (_.isFunction(callback) && !_.isEmpty(obj)) {
        callback(obj);
      }

      return obj;
    },
    //--------------------------------------------------
    //
    //           FORM FIELD WHITE/BLOCK LIST
    //
    //--------------------------------------------------
    __eval_form_filter_list(fields = []) {
      let re = {};
      _.forEach(fields, (k) => {
        re[k] = true;
      });
      return re;
    },
    evalFormWhiteFieldList(fields = this.whiteFields) {
      this.myFieldWhiteList = this.__eval_form_filter_list(fields);
    },
    evalFormBlackFieldList(fields = this.blackFields) {
      this.myFieldBlackList = this.__eval_form_filter_list(fields);
    },
    //--------------------------------------------------
    //
    //           EVAL FORM FIELDS
    //
    //--------------------------------------------------
    isGroup(fld) {
      return "Group" == fld.race || _.isArray(fld.fields);
    },
    //--------------------------------------------------
    isLabel(fld) {
      return "Label" == fld.race || !fld.name;
    },
    //--------------------------------------------------
    isNormal(fld) {
      return "Normal" == fld.race || fld.name;
    },
    //--------------------------------------------------
    async evalFormFieldList() {
      let list = [];
      let cans = [];
      let keys = [];
      let fmap = {};
      //................................................
      if (_.isArray(this.fields)) {
        //console.log("async evalFormFieldList() x ", this.fields.length);
        for (let index = 0; index < this.fields.length; index++) {
          let fld = this.fields[index];
          if (_.isEmpty(fld)) {
            continue;
          }
          let fld2 = await this.evalFormField(fld, [index], { cans, fmap });
          if (fld2) {
            list.push(fld2);
          }
          // Gather field names
          if (fld.name) {
            keys.push(..._.concat(fld.name));
          }
          // Join sub-group keys
          _.forEach(fld.fields, (fld) => {
            if (fld && fld.name) {
              keys.push(..._.concat(fld.name));
            }
          });
        }
      }
      //................................................
      // Remove the adjacent Label fields
      let list2 = [];
      for (let i = 0; i < list.length; i++) {
        let item = list[i];
        let next = _.nth(list, i + 1);
        if ("Label" == item.race) {
          if (!next || "Label" == next.race) {
            continue;
          }
        }
        list2.push(item);
      }
      //................................................
      this.myKeysInFields = _.flattenDeep(keys);
      //................................................
      this.myFormFields = list2;
      this.myFormFieldMap = fmap;
      this.myCandidateFormFields = cans;
    },
    //--------------------------------------------------
    async evalFormField(
      fld = {},
      nbs = [],
      { cans = [], grp = this, fmap = {} } = {}
    ) {
      // The key
      let fldKey = Ti.Util.anyKey(fld.name || nbs);

      // Visibility
      let { hidden, disabled } = Ti.Types.getFormFieldVisibility(
        fld,
        this.myData
      );

      //............................................
      let field;
      let omitKeys = ["hidden", "disabled", "enabled", "visible"];
      // For group
      if (this.isGroup(fld)) {
        let group = _.assign(_.omit(fld, omitKeys), {
          disabled,
          race: "Group",
          key: fldKey,
          fields: []
        });

        // Group fields
        if (_.isArray(fld.fields)) {
          for (let index = 0; index < fld.fields.length; index++) {
            let subfld = fld.fields[index];
            let newSubFld = await this.evalFormField(subfld, [...nbs, index], {
              cans,
              grp: group,
              fmap
            });
            if (newSubFld) {
              group.fields.push(newSubFld);
            }
          }
        }
        // Done
        field = group;
      }
      //............................................
      // Label
      else if (this.isLabel(fld)) {
        field = _.assign(_.omit(fld, omitKeys), {
          disabled,
          race: "Label",
          key: fldKey
        });
      }
      //............................................
      // For Normal Field
      else if (this.isNormal(fld)) {
        let comType = grp.defaultComType || this.defaultComType || "TiLabel";
        let comConf = _.cloneDeep(grp.defaultComConf) || {};
        field = _.defaults(_.omit(fld, omitKeys), {
          race: "Normal",
          key: fldKey,
          isActived: this.myActivedFieldKey == fldKey,
          type: this.defaultFieldType || "String",
          checkEquals: Ti.Util.fallback(fld.checkEquals, true),
          comType,
          comConf: {},
          disabled
        });
        _.defaults(field.comConf, comConf);
        field.comType = Ti.S.toComType(field.comType);

        // The UniqKey of field
        field.uniqKey = Ti.Util.anyKey(field.name);
        fmap[field.uniqKey] = field;

        // Batch mode, auto disabled the un-editable fields
        if (this.isBatchMode && !field.disabled) {
          if (_.isUndefined(field.batchReadonly)) {
            field.batchReadonly = this.isBatchReadonly(field);
          }

          if (field.batchReadonly) {
            field.disabled = true;
          }

          if (
            false === this.myBatchEditableFields[field.uniqKey] &&
            !field.disabled
          ) {
            field.disabled = this.myForceEditableFields[field.uniqKey]
              ? false
              : true;
            field.batchDisabled = true;
          }
        }

        // Default
        if (!field.serializer) {
          let fnName = Ti.Types.getFuncByType(
            field.type || "String",
            "serializer"
          );
          field.serializer = `Ti.Types.${fnName}`;
        }
        if (!field.transformer) {
          let fnName = Ti.Types.getFuncByType(
            field.type || "String",
            "transformer"
          );
          field.transformer = `Ti.Types.${fnName}`;
        }

        // Tidy form function
        field.serializer = Ti.Util.genInvoking(field.serializer, {
          context: this,
          args: fld.serialArgs,
          partial: "right"
        });
        field.transformer = Ti.Util.genInvoking(field.transformer, {
          context: this,
          args: fld.transArgs,
          partial: "right"
        });
        if (fld.required) {
          if (_.isBoolean(fld.required)) {
            field.required = true;
          } else {
            field.required = Ti.AutoMatch.test(fld.required, this.myData);
          }
        }

        // Display Com
        field.com = await this.evalFieldCom(field, grp);

        // Layout style
        this.applyFieldDefault(field, grp);
      }
      //............................................
      // Panice
      else {
        throw "Invalid field: " + JSON.stringify(fld, null, "   ");
      }
      //............................................
      // Join to candidate
      cans.push(field);

      //............................................
      if ("Normal" == field.race) {
        // No-In White List
        if (this.hasFieldWhiteList) {
          if (!this.myFieldWhiteList[fldKey]) {
            return;
          }
        }

        // In Black List
        if (this.hasFieldBlackList) {
          if (this.myFieldBlackList[fldKey]) {
            return;
          }
        }
      }

      //............................................
      // Ignore hidden
      if (hidden) {
        return;
      }

      //............................................
      // Ignore empty group
      if ("Group" == field.race) {
        if (_.isEmpty(field.fields)) {
          return;
        }
      }

      // Done
      return field;
    },
    //--------------------------------------------------
    applyFieldDefault(field, grp = this) {
      _.defaults(field, {
        "nameClass": grp.fieldNameClass || this.fieldNameClass,
        "nameStyle": grp.fieldNameStyle || this.fieldNameStyle,
        "nameAlign": grp.fieldNameAlign || this.fieldNameAlign,
        "nameVAlign": grp.fieldNameVAlign || this.fieldNameVAlign,
        "nameWrap": grp.fieldNameWrap || this.fieldNameWrap,
        "valueClass": grp.fieldValueClass || this.fieldValueClass,
        "valueStyle": grp.fieldValueStyle || this.fieldValueStyle,
        "valueVAlign": grp.fieldValueVAlign || this.fieldValueVAlign,
        "valueWrap": grp.fieldValueWrap || this.fieldValueWrap,
        "rowSpan": grp.fieldRowSpan || this.fieldRowSpan,
        "colSpan": grp.fieldColSpan || this.fieldColSpan
      });
    },
    //--------------------------------------------------
    async evalFieldCom(fld, grp) {
      let displayItem;
      // UnActived try use display
      if (!fld.isActived || this.isReadonly) {
        displayItem = this.evalFieldDisplay(fld);
      }
      // Use default form component
      if (!displayItem) {
        displayItem = {
          key: fld.name,
          ..._.omit(fld, "name", "key")
        };
      }
      // Explain field com
      let com = await this.evalDataForFieldDisplayItem({
        itemData: this.myData,
        displayItem,
        vars: fld,
        autoIgnoreNil: false,
        autoIgnoreBlank: false,
        autoValue: fld.autoValue || "value"
      });
      // force set readonly
      if (this.isReadonly || fld.disabled) {
        _.assign(com.comConf, {
          readonly: true
        });
        if (com.comConf.editable) {
          com.comConf.editable = false;
        }
      }

      return com;
    },
    //--------------------------------------------------
    evalFieldDisplay(field = {}) {
      let { name, display, transformer, comType, comConf } = field;
      // Guard
      if (!display) {
        // Auto gen display
        if (
          this.autoReadonlyDisplay &&
          this.isReadonly &&
          !this.isIgnoreAutoReadonly(field) &&
          !/^(TiLabel|WnObjId)$/.test(comType)
        ) {
          let labelConf = _.pick(comConf, "placeholder");
          labelConf.className = field.labelClass || "is-nowrap";
          // If options
          if (comConf && comConf.options) {
            let dictName = Ti.DictFactory.DictReferName(comConf.options);
            if (dictName) {
              labelConf.dict = dictName;
            }
            // Array to create dict instance
            else if (_.isArray(comConf.options)) {
              let dict = Ti.DictFactory.CreateDict({
                data: comConf.options
              });
              labelConf.dict = dict;
            }
          }
          // Date field
          if (/^TiInputDate$/.test(comType)) {
            labelConf.format = comConf.format || Ti.Types.getDateFormatValue;
            labelConf.placeholder = comConf.placeholder || "i18n:nil";
          }
          // If AMS
          else if ("AMS" == field.type || /^TiInputDatetime/.test(comType)) {
            labelConf.format = comConf.format || Ti.Types.formatDateTime;
          }

          // Just pure value
          return {
            key: name,
            transformer,
            comType: "TiLabel",
            comConf: labelConf
          };
        }
        return;
      }
      // Eval setting
      if (!_.isBoolean(display) && display) {
        // Call field_display.mjs
        return this.evalFieldDisplayItem(display, {
          defaultKey: name
        });
      }
      // return default.
      return {
        key: name,
        comType: "TiLabel",
        comConf: {}
      };
    },
    //--------------------------------------------------
    async tryEvalFormFieldList(newVal, oldVal) {
      //console.log("tryEvalFormFieldList");
      if (!_.isEqual(newVal, oldVal)) {
        // get the finger of curent form for sorting field evaluation
        let finger = Ti.Alg.sha1([
          this.fields,
          this.myData,
          this.isReadonly,
          this.myActivedFieldKey,
          this.batchHint
        ]);
        //console.log(" - get finger=>", finger);
        // already is in process
        if (this.eval_current_finger === finger) {
          //console.log("== Match current finger", finger);
          return;
        }

        // another finger is in process,join current one to wating list
        if (this.eval_current_finger) {
          this.eval_waitings.push(finger);
          //console.log("== Join waitings", this.eval_waitings);
          return;
        }

        // mark current finger
        this.eval_current_finger = finger;

        //console.log(" - evalFormFieldList() >>>>>>", finger);
        this.evalBatchEditableFields();
        await this.evalFormFieldList();

        // Then process the last element in  waiting list
        while (true) {
          let next = _.last(this.eval_waitings);
          if (!next) {
            break;
          }
          //console.log(" - <<<<<< PROCESS NEXT >>>>>>>", aa, next);
          this.eval_current_finger = next;
          this.eval_waitings = [];

          this.evalBatchEditableFields();
          await this.evalFormFieldList();
        }

        // Clean marker
        this.eval_current_finger = undefined;
        this.eval_waitings = [];
        //console.log(" - <<<<<< OK this.evalFormFieldList()", aa, finger);
      }
    },
    //--------------------------------------------------
    evalBatchEditableFields() {
      // conclude each key hint
      let editables = {};
      let vals = {}; // Store the first appeared value
      let keys = {}; // Key of obj is equal
      if (this.isBatchMode) {
        for (let it of this.batchHint) {
          _.forEach(it, (v, k) => {
            // Already no equals
            if (false === keys[k]) {
              return;
            }
            // Test val
            let v2 = vals[k];
            if (_.isUndefined(v2)) {
              vals[k] = v;
              keys[k] = true;
            }
            // Test
            else if (!_.isEqual(v, v2)) {
              keys[k] = false;
            }
          });
        }
        // Join flat fields
        let fields = this.getFlattenFormFields(this.fields);
        //console.log("batch", this.isBatchMode, { keys, vals })
        // Update the batch editable fields
        for (let fld of fields) {
          // Ignore label
          if (!fld.name) {
            continue;
          }

          let editable = true;
          // Compose keys
          if (_.isArray(fld.name)) {
            for (let fldName of fld.name) {
              if (false === keys[fldName]) {
                editable = false;
                break;
              }
            }
          }
          // Simple key
          else {
            editable = false === keys[fld.name] ? false : true;
          }
          let uniqKey = Ti.Util.anyKey(fld.name);
          editables[uniqKey] = editable;
        }
      }
      //console.log("editables", editables)
      this.myBatchEditableFields = editables;
    }
    //--------------------------------------------------
  }
  //////////////////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'list-row.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/list/com/list-row/list-row.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs: false,
  ///////////////////////////////////////////////////
  data: () => ({
    myDisplayItems: []
  }),
  ///////////////////////////////////////////////////
  props: {
    "indent": {
      type: Number,
      default: 0
    },
    "icon": {
      type: [Boolean, String],
      default: null
    },
    "display": {
      type: Array,
      default: () => []
    }
  },
  ///////////////////////////////////////////////////
  computed: {
    //-----------------------------------------------
    TopClass() {
      return this.getListItemClass(
        {
          "is-group": this.asGroupTitle,
          "is-selectable": !this.asGroupTitle && this.selectable,
          "is-checkable": !this.asGroupTitle && this.checkable,
          "is-openable": !this.asGroupTitle && this.openable
        },
        `row-indent-${this.indent}`
      );
    },
    //-----------------------------------------------
    hasRealIcon() {
      return this.icon && _.isString(this.icon);
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods: {
    //-----------------------------------------------
    async evalMyDisplayItems() {
      let items = [];
      // if(this.data && this.data.title && this.data.type) {
      //   console.log("evalCellDisplayItems", this.data)
      // }
      // Eval each items
      let diss = this.asGroupTitle ? this.groupTitleDisplay : this.display;
      // Override by current row data
      if (this.data && this.data._row_display) {
        diss = this.data._row_display;
      }

      diss = diss || this.display || [];
      for (let displayItem of diss) {
        let it = await this.evalDataForFieldDisplayItem({
          itemData: this.data,
          displayItem,
          vars: {
            "isCurrent": this.isCurrent,
            "isChecked": this.isChecked,
            "isChanged": this.isChanged,
            "isActived": this.isActived,
            "rowId": this.rowId
          }
          // autoIgnoreNil: !this.asGroupTitle,
          // autoIgnoreBlank: !this.asGroupTitle
        });
        if (it) {
          items.push(it);
        }
      }
      // Update and return
      this.myDisplayItems = items;
    },
    //-----------------------------------------------
    onItemChanged({ name, value } = {}) {
      this.$notify("item:changed", {
        name,
        value,
        rowId: this.rowId,
        data: this.data
      });
    },
    //-----------------------------------------------
    OnClickIcon($event) {
      this.$notify("icon", {
        rowId: this.rowId,
        shift: $event.shiftKey,
        toggle: $event.ctrlKey || $event.metaKey
      });
    },
    //--------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("ti-list-row", uniqKey)
      if (!_.isEmpty(this.rowToggleKey)) {
        if (this.isRowToggleKey(uniqKey)) {
          this.onClickChecker({});
          return { prevent: true, stop: true, quit: true };
        }
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch: {
    "display": function () {
      this.evalMyDisplayItems();
    },
    "data": function () {
      //console.log("data changed")
      this.evalMyDisplayItems();
    },
    "isCurrent": function () {
      this.evalMyDisplayItems();
    },
    "isChecked": function () {
      this.evalMyDisplayItems();
    }
  },
  ///////////////////////////////////////////////////
  mounted: function () {
    this.evalMyDisplayItems();
  }
  ///////////////////////////////////////////////////
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-time.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/time/ti-time.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  props : {
    "value" : {
      type : [String, Number, Date, Ti.Types.Time],
      default : null
    },
    /***
     * Value unit when value is Number
     */
    "valueUnit" : {
      type : String,
      default : "s",
      validator : function(unit) {
        return /^(ms|s|min|hr)$/.test(unit)
      }
    },
    // Display mode
    "mode" : {
      type : String,
      default : "auto",
      /***
       * - `sec`  : "HH:mm:ss"
       * - `min`  : "HH:mm"
       * - `auto` : "HH:mm:ss"
       */
      validator : function(unit) {
        return /^(sec|min|auto)$/.test(unit)
      }
    },
    // the height of drop list
    "width" : {
      type : [Number, String],
      default : null
    },
    // the height of drop list
    "height" : {
      type : [Number, String],
      default : 200
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    topStyle() {
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //------------------------------------------------
    theTime() {
      return Ti.Types.toTime(this.value||0, {
        unit: this.valueUnit
      })
    },
    //------------------------------------------------
    theListGroup() {
      let re = [
        this.createList("hours",   0, 24, this.theTime.hours),
        this.createList("minutes", 0, 60, this.theTime.minutes)
      ]
      if(/^(auto|sec)$/.test(this.mode)) {
        re.push(this.createList("seconds", 0, 60, this.theTime.seconds))
      }
      return re
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    createList(key, fromVal, toVal, currentVal=0) {
      let list = {
        key,
        currentId : `R-${currentVal}`,
        data    : []
      }
      for(let i=fromVal; i<toVal; i++) {
        list.data.push({
          id : `R-${i}`,
          value : i,
          text  : _.padStart(i, 2, '0')
        })
      }
      return list
    },
    //------------------------------------------------
    onListSelected(key, {current}={}) {
      let tm = this.theTime.clone()
      tm[key] = _.get(current, "value") || 0
      this.$notify("change", tm)
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-thing-manager.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/thing/manager/wn-thing-manager.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////
  provide: function () {
    return {
      $ThingManager: this
    }
  },
  ///////////////////////////////////////////
  data: () => ({
    "myRouting": {},
    "myHandlers": {
      // SAVE | DELETE | VIEWSOURCE | PROP
    }
  }),
  ///////////////////////////////////////////
  props: {
    // Thing Set Home
    "meta": {
      type: Object,
      default: () => ({})
    },
    "moduleName": {
      type: String,
      default: "main"
    },
    "currentDataHome": {
      type: String,
      default: undefined
    },
    "currentDataHomeObj": {
      type: Object,
      default: undefined
    },
    "currentDataDir": {
      type: String,
      default: undefined
    },
    "status": {
      type: Object,
      default: () => ({})
    },
    "rootState": {
      type: Object
    },
    "config": {
      type: Object,
      default: () => ({})
    },
    "search": {
      type: Object,
      default: () => ({})
    },
    "current": {
      type: Object,
      default: () => ({})
    },
    "files": {
      type: Object,
      default: () => ({})
    },
    "preview": {
      type: Object,
      default: () => ({})
    },
    "emitChange": {
      type: Boolean,
      default: false
    },
    "keepLastSelection": {
      type: Boolean,
      default: true
    },
    //-----------------------------------
    // Callback
    //-----------------------------------
    "whenCreated": {
      type: Function
    },
    "whenMounted": {
      type: Function
    },
    "whenBeforeDestroy": {
      type: Function
    }
  },
  ///////////////////////////////////////////
  computed: {
    //--------------------------------------
    currentItem() {
      let path = Ti.Util.appendPath(this.moduleName, "search/currentItem")
      return Ti.App(this).$store().getters[path]
    },
    //--------------------------------------
    checkedItems() {
      let path = Ti.Util.appendPath(this.moduleName, "search/checkedItems")
      return Ti.App(this).$store().getters[path]
    },
    //--------------------------------------
    StoreState() {
      return Ti.App(this).$store().state[this.moduleName]
    },
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    TheShown() {
      return _.get(this.config, "shown") || {}
    },
    //--------------------------------------
    TheKeepLastKey() {
      if (this.keepLastSelection) {
        return _.get(this.meta, "id") + ":currentId";
      }
    },
    //--------------------------------------
    TheGuiVars() {
      return this
    },
    //--------------------------------------
    CurrentIsDead() {
      return -1 == _.get(this.current, "meta.th_live")
    },
    //--------------------------------------
    CurrentHeadClass() {
      if (this.CurrentIsDead) {
        return "current-in-recyclebin"
      }
    },
    //--------------------------------------
    TheLayout() {
      return Ti.Util.explainObj(this, this.config.layout)
    },
    //--------------------------------------
    TheSchema() {
      // schema.behavior has been explain already when store reload
      // here we need skip it
      let schema = {}
      _.forEach(this.config.schema, (val, key) => {
        if (/^(behavior)$/.test(key)) {
          return
        }
        let v2 = Ti.Util.explainObj(this, val)
        schema[key] = v2
      })
      return schema
    },
    //--------------------------------------
    TheLoadingAs() {
      return _.assign({
        "reloading": {
          icon: "fas-spinner fa-spin",
          text: "i18n:loading"
        },
        "doing": {
          icon: "zmdi-settings fa-spin",
          text: "i18n:doing"
        },
        "saving": {
          icon: "zmdi-settings fa-spin",
          text: "i18n:saving"
        },
        "deleting": {
          icon: "zmdi-refresh fa-spin",
          text: "i18n:del-ing"
        },
        "publishing": {
          icon: "zmdi-settings zmdi-hc-spin",
          text: "i18n:publishing"
        },
        "restoring": {
          icon: "zmdi-time-restore zmdi-hc-spin",
          text: "i18n:thing-restoring"
        },
        "cleaning": {
          icon: "zmdi-settings zmdi-hc-spin",
          text: "i18n:thing-cleaning"
        }
      }, _.get(this.TheSchema, "loadingAs"))
    },
    //--------------------------------------
    ChangedRowId() {
      if (this.currentItem && this.current.status.changed) {
        return this.currentItem.id
      }
    },
    //--------------------------------------
    GuiLoadingAs() {
      let key = _.findKey(this.status, v => v ? true : false)
      let val = this.status[key]
      if (_.isBoolean(val)) {
        return _.get(this.TheLoadingAs, key)
      }
      if (_.isPlainObject(val)) {
        return _.assign({
          icon: "fas-spinner fa-spin",
          text: "i18n:loading"
        }, val)
      }
    },
    //--------------------------------------
    GuiIsLoading() {
      let key = _.findKey(this.status, (v, key) => v && !/^(changed)$/.test(key))
      return key ? true : false
    },
    //--------------------------------------
    curentThumbTarget() {
      if (this.currentItem) {
        let th_set = this.meta.id
        return `id:${th_set}/data/${this.currentItem.id}/thumb.jpg`
      }
      return ""
    },
    //--------------------------------------
    SchemaMethods() {
      if (this.TheSchema && this.TheSchema.methods) {
        return Ti.Util.merge({}, this.TheSchema.methods)
      }
      return {}
    },
    //--------------------------------------
    EventRouting() {
      return _.assign({
        "block:show": "showBlock",
        "block:hide": "hideBlock",
        "block:shown": "changeShown",
        "filter::change": "OnFilterChange",
        "sorter::change": "OnSorterChange",
        "list::select": "OnListSelect",
        "list::open": "OnListOpen",
        "content::change": "OnContentChange",
        "pager::change": "OnPagerChange"
      }, _.get(this.TheSchema, "events"), this.myRouting)
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  methods: {
    //--------------------------------------
    //
    //  Event handler
    //
    //--------------------------------------
    async OnFilterChange(filter) {
      this.commit("search/setFilter", filter)
      await this.dispatch("reloadSearch")
    },
    //--------------------------------------
    async OnSorterChange(sort = {}) {
      this.commit("search/setSorter", sort)
      await this.dispatch("reloadSearch")
    },
    //--------------------------------------
    OnListSelect({ current, currentId, checkedIds, checked }) {
      //console.log("OnListSelect", current)
      this.dispatch("setCurrentThing", {
        meta: current,
        currentId,
        checkedIds
      })

      if (this.emitChange) {
        this.$emit("change", { current, currentId, checkedIds, checked })
      }
    },
    //--------------------------------------
    OnListOpen({ rawData }) {
      this.dispatch("config/updateShown", this.config.listOpen)
      // Update Current
      this.dispatch("setCurrentThing", { meta: rawData })
    },
    //--------------------------------------
    OnContentChange(content) {
      this.dispatch("current/changeContent", content)
      this.commit("syncStatusChanged")
    },
    //--------------------------------------
    OnPagerChange({ pn, pgsz } = {}) {
      //console.log("OnPagerChange", {pn, pgsz})
      this.commit("search/updatePager", { pn, pgsz })
      this.dispatch("reloadSearch")
    },
    //--------------------------------------
    OnViewCurrentSource() {
      this.viewCurrentSource()
    },
    //--------------------------------------
    //
    //  Actions
    //
    //--------------------------------------
    getCustomizedHandlerPayload() {
      return {
        config: this.config,
        search: this.search,
        current: this.current,
        currentItem: this.currentItem,
        checkedItems: this.checkedItems,
        commit: this.commit,
        dispatch: this.dispatch,
        fire: this.fire,
        app: Ti.App(this)
      }
    },
    //--------------------------------------
    async doSaveChange() {
      let fn = this.myHandlers["SAVE"]
      if (_.isFunction(fn)) {
        let pld = this.getCustomizedHandlerPayload()
        await fn(pld)
      } else {
        await this.dispatch("saveCurrent")
      }
    },
    //--------------------------------------
    //
    //  Inside Handlers
    //
    //--------------------------------------
    __set_handler(name, callback) {
      this.myHandlers[name] = callback
    },
    setSaveHandler(callback) {
      this.__set_handler("SAVE", callback)
    },
    setDeleteHandler(callback) {
      this.__set_handler("DEL", callback)
    },
    setViewsourceHandler(callback) {
      this.__set_handler("VIEWSOURCE", callback)
    },
    setPropHandler(callback) {
      this.__set_handler("PROP", callback)
    },
    //--------------------------------------
    //
    //  Utility
    //
    //--------------------------------------
    addEventRouting(eventName, handler) {
      this.$set(this.myRouting, eventName, handler)
    },
    removeEventRouting(...names) {
      let routing = _.omitBy(this.myRouting, (_, key) => names.indexOf(key) >= 0)
      this.myRouting = routing
    },
    async dispatch(name, payload) {
      let path = Ti.Util.appendPath(this.moduleName, name)
      return await Ti.App(this).dispatch(path, payload)
    },
    commit(name, payload) {
      let path = Ti.Util.appendPath(this.moduleName, name)
      return Ti.App(this).commit(path, payload)
    },
    //--------------------------------------
    //
    // Events
    //
    //--------------------------------------
    fire(name, payload) {
      let func = this.__on_events(name, payload)
      if (_.isFunction(func)) {
        func.apply(this, [payload])
      }
    },
    //--------------------------------------
    //
    // Callback
    //
    //--------------------------------------
    // For Event Bubble Dispatching
    __on_events(name, payload) {
      //console.log("__on_events", name, payload)
      // Try to get handler
      let fn = _.get(this.EventRouting, name)
      if (!fn) {
        fn = this.$tiEventTryFallback(name, this.EventRouting)
      }

      // callPath -> Function
      let func;
      if (_.isString(fn)) {
        func = _.get(this, fn)
        if (!_.isFunction(func)) {
          func = Ti.Util.genInvoking(fn, {
            context: this.currentItem,
            dft: null,
            funcSet: this
          })
        }
      }
      if (_.isFunction(func)) {
        if (!_.isUndefined(payload)) {
          return () => {
            func(payload)
          }
        }
        return func
      }
    },
    // Shortcut 
    __ti_shortcut(uniqKey) {
      //console.log("ti-form", uniqKey)
      if ("ESCAPE" == uniqKey) {
        if (this.TheShown.creator) {
          this.hideBlock("creator")
        }
      }
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  created: function () {
    if (_.isFunction(this.whenCreated)) {
      this.whenCreated(this)
    }
  },
  ///////////////////////////////////////////
  mounted: async function () {
    // Mark self in order to let `thing-files` set self
    // to root `wn-thing-manager` instance
    // then `openLocalFileSelectdDialogToUploadFiles`
    // can assess the `thing-files` instance directly.
    this.THING_MANAGER_ROOT = true

    // Update the customized actions
    let actions = _.get(this.config, "actions")
    if (_.isArray(actions)) {
      this.$notify("actions:update", actions)
    }

    if (_.isFunction(this.whenMounted)) {
      this.whenMounted(this)
    }
  },
  ///////////////////////////////////////////
  beforeDestroy: function () {
    if (_.isFunction(this.whenBeforeDestroy)) {
      this.whenBeforeDestroy(this)
    }
  }
  ///////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wall-tile.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/wall/com/wall-tile/wall-tile.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////
  inject: ["$wall"],
  ///////////////////////////////////////////////////
  data : ()=>({
    myCom : null
  }),
  ///////////////////////////////////////////////////
  props : {
    "display" : {
      type : Object,
      default : null
    },
    // Wall-Tile width
    "width" : {
      type : [String, Number],
      default : null
    },
    // Wall-Tile height
    "height" : {
      type : [String, Number],
      default : null
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    TopClass() {
      return this.getListItemClass()
    },
    //--------------------------------------
    TopStyle() {
      let css = {}
      if(this.width) {
        css.width = this.width
      }
      if(this.height) {
        css.height = this.height
      }
      return Ti.Css.toStyle(css)
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    async evalMyDisplayCom() {
      //console.log("evalMyDisplayCom", this.data)
      this.$wall.reportReady(this.index, !Ti.Util.isNil(this.myCom))
      let com = await this.evalDataForFieldDisplayItem({
        itemData : this.data, 
        displayItem : this.display, 
        vars : {
          "isCurrent" : this.isCurrent,
          "isChecked" : this.isChecked,
          "isChanged" : this.isChanged,
          "isActived" : this.isActived,
          "rowId"     : this.rowId,
          ... this.$vars
        }
      })

      // Update and return
      let old = Ti.Util.pureCloneDeep(this.myCom)
      let nit = Ti.Util.pureCloneDeep(com)
      if(!_.isEqual(old, nit)) {
        //console.log(`-> Cell[${this.rowIndex}-${this.index}]:`, {old, nit})
        this.myCom = com
      }
      // report ready
      this.$wall.reportReady(this.index, true)
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "data" : {
      handler : "evalMyDisplayCom",
      immediate : true
    },
    "isCurrent" : "evalMyDisplayCom",
    "isChecked" : "evalMyDisplayCom"
  }
  ///////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-combo-input-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/input/ti-combo-input-props.mjs'] = (function(){
const COM_TYPE = "TiComboInput";
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "options": {
    type: [String, Array, Function, Ti.Dict],
    default: () => []
  },
  "optionVars": {
    type : Object,
    default: ()=>({})
  },
  "optionFilter": {
    type : [Function, Object, Array],
    default: undefined
  },
  "showCleanOption": {
    type:Boolean,
    default: Ti.Config.getComProp(COM_TYPE, "showCleanOption", false)
  },
  "prefixIconForClean": {
    type: Boolean,
    default: Ti.Config.getComProp(COM_TYPE, "prefixIconForClean", true)
  },
  // If dynamic dictionary: options = '#DickName(=varName)'
  // it will use Ti.DictFactory.CheckDynamicDict,
  // The key of the instance name, should explain for the vars set
  "dictVars": {
    type: Object,
    default: ()=>({})
  },
  "valueBy": {
    type: [String, Function],
    default: undefined
  },
  "textBy": {
    type: [String, Function],
    default: undefined
  },
  "iconBy": {
    type: [String, Function],
    default: undefined
  },
  "childrenBy": {
    type: [String, Function],
    default: undefined
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "dropComType": {
    type: String,
    default: undefined
  },
  "dropComConf": {
    type: Object,
    default: undefined
  },
  "mustInList": {
    type: Boolean,
    default: false
  },
  "autoFocusExtended": {
    type: Boolean,
    default: true
  },
  "filter": {
    type: Boolean,
    default: true
  },
  "delay": {
    type: Number,
    default: 500
  },
  "autoValueTip": {
    type: Boolean,
    default: true
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "autoI18n": {
    type: Boolean,
    default: true
  },
  "statusIcons": {
    type: Object,
    default: () => ({
      collapse: "zmdi-chevron-down",
      extended: "zmdi-chevron-up"
    })
  },
  "inputValueDisplay": {
    type: [Object, String, Function],
    default: undefined
  },
  "inputPrefixTextDisplay": {
    type: [Object, String, Function],
    default: undefined
  },
  "inputSuffixTextDisplay": {
    type: [Object, String, Function],
    default: undefined
  },
  "dropDisplay": {
    type: [Object, String, Array],
    default: undefined
  },
  "dropItemBorder": {
    type: Boolean,
    default: true
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "keepWidthWhenDrop": {
    type: Boolean,
    default: undefined
  },
  "dropWidth": {
    type: [Number, String],
    default: "box"
  },
  "dropHeight": {
    type: [Number, String],
    default: null
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-label.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/label/ti-label.mjs'] = (function(){
const COM_TYPE = "TiLabel";
const _M = {
  //////////////////////////////////////////
  data: () => ({
    isNilDisplay: false,
    myDisplayIcon: undefined,
    myDisplayText: undefined,
    myDictValKey: ".text"
  }),
  //////////////////////////////////////////
  props: {
    "autoLoadDictIcon": {
      type: Boolean,
      default: Ti.Config.getComProp(COM_TYPE, "autoLoadDictIcon", true)
    },
    "valueTip": {
      type: [Boolean, String, Object],
      default: Ti.Config.getComProp(COM_TYPE, "valueTip", false)
    },
    "valueClickable": {
      type: Boolean,
      default: false
    },
    "fullField": {
      type: Boolean,
      default: true
    },
    "multiValSep": {
      type: String,
      default: ", "
    },
    "inDictsplitBy": {
      type: [RegExp, String],
      default: () => /[,;]+/g
    },
    "hoverable": {
      type: Boolean,
      default: false
    },
    "enterNotifyName": {
      type: String,
      default: "enter"
    },
    "leaveNotifyName": {
      type: String,
      default: "leave"
    },
    "hoverNotifyPayload": undefined,
    "cancelClickBubble": false,
    "cancelDblClickBubble": false,
    "hoverCopy": {
      type: Boolean,
      default: undefined
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-nil-display": this.isNilDisplay,
        "is-hover-copy": this.isHoverCopy,
        "is-blank": this.isBlank,
        "is-nowrap": this.valueMaxWidth > 0,
        "full-field": this.fullField
      });
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      });
    },
    //--------------------------------------
    isBlank() {
      if (Ti.Util.isNil(this.value)) {
        return true;
      }
      if (
        _.isDate(this.value) ||
        _.isNumber(this.value) ||
        _.isBoolean(this.value)
      ) {
        return false;
      }
      if (_.isEmpty(this.value)) {
        return true;
      }
      return false;
    },
    //--------------------------------------
    LabelVarText() {
      return JSON.stringify(this.vars || {});
    },
    //--------------------------------------
    LabelValueTip() {
      let tip = this.valueTip;
      if (tip) {
        let re = {
          mode: "V",
          size: "auto",
          type: "secondary",
          contentType: "html",
          text: () => {
            let isComplexObj = false;
            if (_.isArray(this.value)) {
              if (this.value.length > 5) {
                isComplexObj = true;
              } else if (this.value.length >= 1) {
                let it0 = this.value[0];
                if (_.isObject(it0) && _.keys(it0).length > 3) {
                  isComplexObj = true;
                }
              }
            } else if (_.isObject(this.value)) {
              if (_.keys(this.value).length >= 3) {
                isComplexObj = true;
              }
            }
            let val_str;
            if (_.isDate(this.value)) {
              val_str = `Date(${this.value})=${this.value.getTime()}`;
            }
            // complex object
            else if (isComplexObj) {
              val_str = JSON.stringify(this.value, null, "   ");
            }
            // Other Object
            else {
              val_str = JSON.stringify(this.value);
            }

            if (!_.isEmpty(this.vars)) {
              return `<pre>${val_str}
              \n------------ VARS ----------\n${JSON.stringify(
                this.vars,
                null,
                "   "
              )}</pre>`;
            }

            return isComplexObj
              ? `<pre>${val_str}</pre>`
              : `<code>${val_str}</code>`;
          },
          keyboard: "ctrl"
        };
        // Dynamic call tip
        if (_.isFunction(tip)) {
          tip = tip(this);
        }

        if (_.isString(tip)) {
          re.text = tip;
        }
        // Complex tip
        else if (_.isObject(tip)) {
          _.assign(re, tip);
        }

        // Explain it
        let reTip = Ti.Util.explainObj(this, re, { evalFunc: true });
        return Ti.Toptip.toTipBind(reTip);
      }
    },
    //--------------------------------------
    TheFormat() {
      if (this.format) {
        // Customized format
        if (_.isFunction(this.format)) {
          return this.format;
        }
        // Simple format
        if (_.isString(this.format)) {
          if (this.autoI18n) {
            let str = Ti.I18n.text(this.format);
            return (val) => {
              return Ti.S.renderVars(val, str);
            };
          }
          return (val) => {
            return Ti.S.renderVars(val, this.format);
          };
        }
        // Complex format
        if (_.isObject(this.format) && this.format.name) {
          return Ti.Util.genInvoking(this.format, {
            context: this.vars || {},
            partial: "right"
          });
        }
      }
    },
    //--------------------------------------
    ValueStyle() {
      return Ti.Css.toStyle({
        maxWidth: this.valueMaxWidth
      });
    },
    //--------------------------------------
    ThePrefixIcon() {
      if (null === this.prefixIcon) return null;
      return this.myDisplayIcon || this.prefixIcon;
    },
    //--------------------------------------
    ThePrefixText() {
      return Ti.Util.explainObj(this, this.prefixText);
    },
    //--------------------------------------
    TheSuffixText() {
      return Ti.Util.explainObj(this, this.suffixText);
    },
    //--------------------------------------
    TheSuffixIcon() {
      if (this.suffixIcon) {
        return this.suffixIcon;
      }
      if (this.suffixIconForCopy && !this.isNilDisplay) {
        return "far-copy";
      }
    },
    //--------------------------------------
    TheHover() {
      let map = {};
      let hos = _.concat(this.hover);
      for (let ho of hos) {
        if (ho) {
          map[ho] = true;
        }
      }
      return map;
    },
    //--------------------------------------
    TheValue() {
      let str = this.value;
      // Auto trim
      if (this.trim && _.isString(str)) {
        return _.trim(str);
      }
      // Return it directly
      return str;
    },
    //--------------------------------------
    TheHref() {
      if (this.href) {
        let c;
        // Array
        if (_.isArray(this.TheValue)) {
          c = { val: this.TheValue.join(",") };
        }
        // Object
        else if (_.isObject(this.TheValue)) {
          c = _.assign({}, this.TheValue);
        }
        // Take it as simple value
        else {
          c = { val: this.TheValue };
        }
        return Ti.Util.explainObj(c, this.href, {
          evalFunc: true
        });
      }
    },
    //--------------------------------------
    isHoverCopy() {
      if (_.isBoolean(this.hoverCopy)) {
        return this.hoverCopy;
      }
      if (this.Dict || this.suffixIconForCopy || this.isNilDisplay) {
        return false;
      }
      return true;
    },
    //--------------------------------------
    Dict() {
      if (this.dict) {
        // Already Dict
        if (this.dict instanceof Ti.Dict) {
          this.myDictValKey = ".text";
          return this.dict;
        }
        // Get back
        let dictInput = /^(@Dict:|#)/.test(this.dict)
          ? this.dict
          : `#${this.dict}`;
        return Ti.DictFactory.CreateDictBy(dictInput, {
          vars: this.dictVars,
          callbackValueKey: (vkey) => {
            this.myDictValKey = vKey || ".text";
          }
        });
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnMouseEnter() {
      if (this.hoverable && this.enterNotifyName) {
        let pld = _.assign(
          {
            $el: this.$el,
            value: this.value
          },
          this.hoverNotifyPayload
        );
        this.$notify(this.enterNotifyName, pld);
      }
    },
    //--------------------------------------
    OnMouseLeave() {
      if (this.hoverable && this.leaveNotifyName) {
        let pld = _.assign(
          {
            $el: this.$el,
            value: this.value
          },
          this.hoverNotifyPayload
        );
        this.$notify(this.leaveNotifyName, pld);
      }
    },
    //--------------------------------------
    isCanHover(hoverName) {
      return this.TheHover[hoverName] ? true : false;
    },
    //------------------------------------------------
    getHoverClass(hoverName) {
      let canHover = this.isCanHover(hoverName);
      return {
        "can-hover": canHover,
        "for-look": !canHover,
        "is-prefix-icon-hover": "prefixIcon" == hoverName
      };
    },
    //--------------------------------------
    OnClick(evt) {
      let ck = evt.ctrlKey || evt.metaKey;
      // Cancel bubble
      let cancelBub = Ti.Util.fallback(this.cancelClickBubble, ck, false);
      if (cancelBub) {
        evt.stopPropagation();
      }
      // Copy value
      if (this.isHoverCopy && ck) {
        this.copyValueToClipboard();
      }
    },
    //--------------------------------------
    OnDblClick(evt) {
      let cancelBub = Ti.Util.fallback(
        this.cancelDblClickBubble,
        this.editable,
        false
      );
      if (cancelBub) {
        evt.stopPropagation();
      }
      if (this.editable) {
        Ti.Be.EditIt(this.$el, {
          text: this.TheValue,
          ok: (newVal) => {
            let val = Ti.S.toCase(newVal, this.valueCase);
            this.$notify("change", val);
          }
        });
      }
    },
    //------------------------------------------------
    OnClickLink(evt) {
      console.log(evt);
      if (this.editable || !this.navigable) {
        evt.preventDefault();
      }
      if (this.notifyName) {
        this.$notify(this.notifyName, this.notifyPayload);
      }
    },
    //------------------------------------------------
    OnClickPrefixIcon() {
      this.$notify("prefix:icon", {
        value: this.TheValue
      });
    },
    //------------------------------------------------
    OnClickPrefixText() {
      this.$notify("prefix:text", {
        value: this.TheValue
      });
    },
    //------------------------------------------------
    OnClickValue() {
      if (this.valueClickable) {
        this.$notify("click:value", {
          value: this.TheValue
        });
      }
    },
    //------------------------------------------------
    OnClickSuffixIcon() {
      if (this.suffixIconForCopy) {
        this.copyValueToClipboard();
      }
      // Notify
      else {
        this.$notify("suffix:icon", {
          value: this.TheValue
        });
      }
    },
    //------------------------------------------------
    OnClickSuffixText() {
      this.$notify("suffix:text", {
        value: this.TheValue
      });
    },
    //--------------------------------------
    copyValueToClipboard() {
      let val = this.TheValue;
      Ti.Be.BlinkIt(this.$refs.value);
      Ti.Be.writeToClipboard(val);
    },
    //--------------------------------------
    async evalDisplay(val) {
      if (_.isString(val) && Ti.S.isBlank(val)) {
        this.isNilDisplay = true;
        return Ti.I18n.text(this.placeholder);
      }
      // By Dict Item
      if (this.Dict) {
        // Array value
        if (_.isArray(val)) {
          this.myDisplayIcon = undefined;
          let ss = [];
          for (let v of val) {
            let it = await this.Dict.getItem(v);
            let s = this.Dict.getBy(this.myDictValKey, it, v);
            if (!Ti.Util.isNil(s) || this.valueMustInDict) {
              ss.push(s);
            } else {
              ss.push(v);
            }
          }
          val = ss.join(this.multiValSep);
        }
        // Single value
        else {
          let it = await this.Dict.getItem(val);
          if (it) {
            // It very wierd, somethings this function has been re-enter
            // the Dict will change to undefined here
            if (!this.Dict) {
              return;
            }
            if (this.autoLoadDictIcon) {
              this.myDisplayIcon = this.Dict.getIcon(it);
            }
            let v2 = this.Dict.getBy(this.myDictValKey, it, val);
            if (!Ti.Util.isNil(v2) || this.valueMustInDict) {
              val = v2;
            }
          } else if (this.valueMustInDict) {
            val = null;
            this.myDisplayIcon = null;
          }
        }
      }
      // Test nil display
      this.isNilDisplay = false;
      // Number
      if (_.isNumber(val)) {
        if (this.TheFormat) {
          return Ti.Types.toStr(val, this.TheFormat);
        }
        return val;
      }
      // Collection
      if (_.isArray(val)) {
        if (this.format) {
          let ss = [];
          for (let v of val) {
            // [{...}, {...}]
            if (_.isPlainObject(v)) {
              ss.push(Ti.S.renderBy(this.format, v));
            }
            // ['xxx',  'xxx']
            else {
              ss.push(Ti.S.renderBy(this.format, { val: v }));
            }
          }
          return ss.join(this.multiValSep);
        }
        if (val.length > 1 && (_.isPlainObject(val[0]) || _.isArray(val[0]))) {
          return JSON.stringify(val);
        }
        return val.join(this.multiValSep);
      }
      // Auto format
      if (_.isFunction(this.TheFormat)) {
        let rev = this.TheFormat(val);
        if (Ti.Util.isNil(rev)) {
          this.isNilDisplay = true;
          return Ti.I18n.text(this.placeholder);
        }
        return rev;
      }
      // Object
      if (_.isPlainObject(val)) {
        return JSON.stringify(val, null, "  ");
      }
      // Normal value
      if (Ti.Util.isNil(val)) {
        this.isNilDisplay = true;
        return Ti.I18n.text(this.placeholder);
      }
      // Date
      if (_.isDate(val)) {
        return Ti.Types.toStr(val, this.TheFormat);
      }
      // Return & auto-i18n
      return this.autoI18n ? Ti.I18n.text(val) : val;
    },
    //--------------------------------------
    async reloadMyDisplay() {
      this.myDisplayIcon = null;
      this.myDisplayText = await this.evalDisplay(this.TheValue);
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "value": {
      handler: "reloadMyDisplay",
      immediate: true
    },
    "dict": {
      handler: "reloadMyDisplay"
    }
  }
  //////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'ti-paging-button.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/paging/button/ti-paging-button.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////
  props : {
    "maxNumber": {
      type : Number,
      default : 10
    }
  },
  ///////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-first" : 1 == this.PN,
        "is-last"  : this.PN == this.LastPN
      })
    },
    //--------------------------------------
    // 1base
    PN() {
      return _.get(this.PageValue, "pn")
    },
    //--------------------------------------
    // 1base
    LastPN() {
      return _.get(this.PageValue, "pgc")
    },
    //--------------------------------------
    isFirstPage() {
      return 1 == this.PN
    },
    //--------------------------------------
    isLastPage() {
      return this.LastPN == this.PN
    },
    //--------------------------------------
    BtnList() {
      let fullnb = this.maxNumber-2
      let remain = this.LastPN - 2
      let list = []
      if(remain < fullnb) {
        for(let pn = 1; pn<=this.LastPN; pn++) {
          list.push(this.genBtn(pn))
        }
      }
      // Move view port
      else {
        let half = fullnb / 2
        let from = Math.round(this.PN - half)
        let to   = Math.round(this.PN + half)
        if(from<=1) {
          to += (1-from)
          from = 2
        } else if(to>=this.LastPN){
          from -= (to - this.LastPN)
          to = this.LastPN - 1
        }
        else {
          to --
        }
        list.push(this.genBtn(1))
        if(from>2) {
          list.push(this.genBtn(".."))
        }
        for(let i=from; i<=to; i++) {
          list.push(this.genBtn(i))
        }
        if(to < (this.LastPN-2)) {
          list.push(this.genBtn(".."))
        }
        list.push(this.genBtn(this.LastPN))
      }

      return list
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  methods : {
    //--------------------------------------
    genBtn(pn) {
      if(".." == pn) {
        return {ellipsis:true}
      }
      return {
        value: pn, 
        className: {
          "is-current" : this.PN == pn
        }
      }
    },
    //--------------------------------------
    JumpTo(pn) {
      if(pn!=this.PN && pn>=1 && pn<=this.LastPN) {
        // this.$notify("change", {
        //   skip :  this.PageValue.pgsz * (pn-1),
        //   limit :  this.PageValue.pgsz, 
        //   pn   : pn, 
        //   pgsz : this.PageValue.pgsz
        // })
        this.notifyChange({
          skip :  this.PageValue.pgsz * (pn-1),
          limit :  this.PageValue.pgsz, 
          pn   : pn, 
          pgsz : this.PageValue.pgsz
        })
      }
    }
  }
  ///////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'widget-summary.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/widget/summary/widget-summary.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    "title": {
      type: String,
      default: undefined
    },
    "items" : {
      type : Array,
      default : ()=>[]
    }
  },
  /////////////////////////////////////////
  computed : {
    //------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------
    TheItems() {
      let list = []
      _.forEach(this.items, (it, index)=>{
        list.push({
          key: `it-${index}`,
          index,
          icon: it.icon,
          text: it.text,
          value: it.value || 0
        })
      })
      return list
    }
    //------------------------------------
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-session-badge.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/session/badge/ti-session-badge.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  props : {
    "me" : {
      type : Object,
      default : null
    },
    // Key to indicate Avatar existing
    // null - will not support avatar
    "avatarKey" : {
      type : String,
      default : null
    },
    // Avatar Source Template
    // null - will not support avatar
    "avatarSrc" : {
      type : String,
      default : null
    },
    "loginIcon" : {
      type : [String, Object],
      default : "zmdi-account-circle"
    },
    "nameKeys" : {
      type : [String, Array],
      default : "name"
    },
    "nameEvent": {
      type: String,
      default: "go:dashboard"
    },
    "loginEvent" : {
      type : String,
      default : "do:login"
    },
    "logoutEvent" : {
      type : String,
      default : "do:logout"
    },
    /***
     * The customized link before `login/logout`.
     * 
     * ```
     * {
     *    icon   : "im-xxx",
     *    text   : "i18n:xxx",
     *    href   : "/path/to/uri"  // The <a href>
     *    newtab : false,        // if href, the open target
     *    emit   : "do:login"      // Mutex(href)
     * }
     * ```
     */
    "links" : {
      type : Array,
      default : ()=>[]
    },
    "autoSignLink" : {
      type : Boolean,
      default : true
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    theLinks() {
      let list = _.cloneDeep(this.links) || []
      //---------------------------
      // // Join the links
      // for(let li of this.links) {
      //   // Ignore out-of-session link
      //   if(li.inSession && !this.hasSession) {
      //     continue;
      //   }
      //   // Join
      //   list.push(li)
      // }
      //---------------------------
      // Add the Login/Logout link
      if(this.autoSignLink) {
        if(this.hasSession) {
          list.push({
            title : "i18n:logout",
            emit  : this.logoutEvent
          })
        }
        // Login 
        else {
          list.push({
            title : "i18n:login",
            emit  : this.loginEvent
          })
        }
      }
      //---------------------------
      return list
    },
    //--------------------------------------
    myName() {
      if(this.me) {
        return Ti.Util.getOrPick(this.me, this.nameKeys) 
               || Ti.I18n.get("mine")
      }
    },
    //--------------------------------------
    myIcon() {
      if(this.me) {
        if(2 == this.me.sex) {
          return "im-user-female"
        }
        return "im-user-male"
      }
      return "far-user"
    },
    //--------------------------------------
    myAvatar() {
      if(this.avatarSrc) {
        return Ti.S.renderBy(this.avatarSrc, this.me)
      }
    },
    //--------------------------------------
    hasAvatar() {
      return this.avatarSrc
        && this.avatarKey
        && this.me
        && this.me[this.avatarKey]
    },
    //--------------------------------------
    hasSession() {
      return this.me ? true : false
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickLink(link, $event) {
      // Emit
      if(link.emit) {
        $event.preventDefault()
        this.$notify(link.emit)
      }
      // Href: do nothing
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'widget-frame.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/widget/frame/widget-frame.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "src": {
      type: String,
      default: undefined
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "postPayload": {
      type: [String, Object, Number, Boolean, Array]
    },
    "postEvents": {
      type: [String, Array]
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "frameStyle": {
      type: Object
    },
    //-----------------------------------
    // Measure
    //-----------------------------------
    "width": {
      type: [Number, String]
    },
    "height": {
      type: [Number, String]
    }
  },
  /////////////////////////////////////////
  computed: {
    //------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    },
    //------------------------------------
    FrameSrc() {
      return _.trim(this.src)
    },
    //------------------------------------
    hasFrameSrc() {
      return this.FrameSrc ? true : false
    },
    //------------------------------------
    FrameStyle() {
      return Ti.Css.toStyle(_.assign({
        border: 0
      }, this.frameStyle))
    },
    //------------------------------------
    PostEventNames() {
      if (this.postEvents) {
        return _.concat(this.postEvents)
      }
    },
    //------------------------------------
    hasPostEventNames() {
      return !_.isEmpty(this.PostEventNames)
    }
    //------------------------------------
  },
  /////////////////////////////////////////
  methods: {
    //------------------------------------
    OnFrameLoaded() {
      //console.log("OnFrameLoaded")
      this.postEventToFrame()
    },
    //------------------------------------
    postEventToFrame() {
      // Guard
      if (!this.hasPostEventNames) {
        return
      }
      // Then post event one by one
      let $fm = this.$refs.frame
      let $fw = $fm.contentWindow
      for (let eventName of this.PostEventNames) {
        $fw.postMessage({
          name: eventName,
          payload: this.postPayload
        })
      }
    }
    //------------------------------------
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'form-field.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/form/com/form-field/form-field.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////////
  data: () => ({
    isComReady: false,
    myComType: null,
    myComConf: null
  }),
  //////////////////////////////////////////////
  computed: {
    //----------------------------------------
    TopClass() {
      return this.getTopClass({
        "no-status-icons": !this.hasStatusIcons,
        "has-status-icons": this.hasStatusIcons,
        "is-disabled": this.disabled
      },
        //`as-${this.screenMode}`,
        (this.StatusType ? `is-${this.StatusType}` : null))
    },
    //----------------------------------------
    isShowTitle() { return !Ti.Util.isNil(this.title) },
    isShowIcon() { return !Ti.Util.isNil(this.icon) },
    isShowTip() { return !Ti.Util.isNil(this.tip) },
    hasStatusIcons() { return !_.isEmpty(this.statusIcons) },
    //----------------------------------------
    isNumberType() {
      return /^(Number|Integer|Float)$/.test(this.type)
    },
    //----------------------------------------
    UniqName() {
      return _.isArray(this.name)
        ? this.name.join("-")
        : this.name
    },
    //----------------------------------------
    TheTitle() {
      return this.title || this.UniqName
    },
    //----------------------------------------
    ComClass() {
      let auto = "auto" == this.width
      let full = "full" == this.width
      let stretch = "stretch" == this.width
      let fixed = !auto && !full && !stretch && !Ti.Util.isNil(this.width)
      return {
        "is-size-auto": auto,
        "is-size-full": full,
        "is-size-stretch": stretch,
        "is-size-fixed": fixed
      }
    },
    //----------------------------------------
    ConStyle() {
      return Ti.Css.toStyle({
        height: this.height,
        width: this.fieldWidth
      })
    },
    //----------------------------------------
    ComStyle() {
      let css = {
        height: this.height
      }
      if (this.width && !/^(auto|stretch)$/.test(this.width)) {
        css.width = Ti.Css.toSize(this.width)
      }
      return Ti.Css.toStyle(css)
    },
    //----------------------------------------
    TheDisplay() {
      // Guard
      if (!this.display) {
        return
      }
      // Eval setting
      if (!_.isBoolean(this.display) && this.display) {
        return this.evalFieldDisplayItem(this.display, {
          //funcSet    : this.funcSet,
          defaultKey: this.name
        })
      }
      // return default.
      return {
        comType: "ti-label",
        comConf: {}
      }
    },
    //----------------------------------------
    CurrentDisplayItem() {
      // Display Mode
      let dis = this.TheDisplay || {}

      // If Actived reset the display
      if (this.isActived || !this.display) {
        dis = {
          defaultAs: this.defaultAs,
          comType: this.comType,
          comConf: this.comConf,
        }
      }

      // Assign the default value and return
      return _.defaults(_.cloneDeep(dis), {
        comType: "ti-label",
        key: this.name,
        type: this.type,
        dict: this.dict,
        transformer: this.transformer
      })
    },
    //----------------------------------------
    Status() {
      return _.get(this.fieldStatus, this.uniqKey)
    },
    //----------------------------------------
    StatusType() {
      return _.get(this.Status, "type")
    },
    //----------------------------------------
    StatusText() {
      return _.get(this.Status, "text")
    },
    //----------------------------------------
    StatusIcon() {
      if (this.Status && this.hasStatusIcons) {
        return this.statusIcons[this.Status.type]
      }
    },
    //----------------------------------------
  },
  ////////////////////////////////////////////////
  methods: {
    //--------------------------------------------
    __before_bubble({ name, args }) {
      if (this.name) {
        return {
          name: `${this.UniqName}::${name}`,
          args
        }
      }
    },
    //--------------------------------------------
    OnChange(val) {
      // apply default
      let v2 = this.evalInputValue(val)

      try {
        //console.log("this.serializer(val):", v2)
        v2 = this.serializer(v2)
        //console.log("field changed", val, v2)
      }
      // Invalid 
      catch (error) {
        this.$notify("invalid", {
          errMessage: "" + error,
          name: this.name,
          value: val
        })
        return
      }

      // apply default
      v2 = this.evalInputValue(v2)

      // Com Value
      let comValue = _.get(this.myComConf, this.autoValue)

      // emit event
      if (!this.checkEquals || !_.isEqual(v2, comValue)) {
        //console.log("  #field.change:", this.name, v2)
        this.$notify("change", {
          name: this.name,
          value: v2
        })
      }
    },
    //--------------------------------------------
    async evalTheCom() {
      let theCom = await this.evalDataForFieldDisplayItem({
        itemData: this.data,
        displayItem: this.CurrentDisplayItem,
        vars: {
          "isActived": this.isActived,
          "disabled": this.disabled
        },
        autoIgnoreNil: false,
        autoIgnoreBlank: false,
        autoValue: this.autoValue
      })
      // console.log("evalTheCom", {
      //   myUID      : this._uid,
      //   isActived  : this.isActived,
      //   oldComType : this.myComType,
      //   oldComConf : _.cloneDeep(this.myComConf),
      //   newComType : theCom.comType,
      //   newComConf : _.cloneDeep(theCom.comConf),
      // })

      if (!theCom) {
        this.myComType = undefined
        this.myComConf = undefined
        this.isComReady = false
        return
      }

      if (this.myComType != theCom.comType) {
        this.myComType = theCom.comType
      }
      if (!_.isEqual(this.myComConf, theCom.comConf)) {
        this.myComConf = theCom.comConf
      }

      this.isComReady = true
    },
    //--------------------------------------------
    evalInputValue(val) {
      let re = val;
      //console.log("evalInputValue", val)
      // apply default
      if (_.isUndefined(val)) {
        re = _.cloneDeep(
          Ti.Util.fallback(this.undefinedAs, this.defaultAs)
        )
      }
      else if (_.isNull(val)) {
        re = _.cloneDeep(
          Ti.Util.fallback(this.nullAs, this.defaultAs, null)
        )
      }
      else if (this.isNumberType && isNaN(val)) {
        re = _.cloneDeep(
          Ti.Util.fallback(this.nanAs, this.defaultAs, NaN)
        )
      }
      else if (
        !(_.isBoolean(val) || _.isNumber(val))
        && _.isEmpty(val)
      ) {
        if (_.isString(val)) {
          re = _.cloneDeep(
            Ti.Util.fallback(this.emptyAs, this.defaultAs, "")
          )
        } else {
          re = Ti.Util.fallback(this.emptyAs, val)
        }
      }

      if ("~~undefined~~" == re)
        return
      return re
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  watch: {
    "CurrentDisplayItem": "evalTheCom",
    "data": {
      handler: "evalTheCom",
      immediate: true
    }
  }
  ////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-obj-tree.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/tree/wn-obj-tree.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data: () => ({
    treeRoot: null,
    myCurrentId: null,
    myLoadingNodeId: null,
    myOpenedNodePaths: {}
  }),
  ////////////////////////////////////////////////////
  props: {
    //------------------------------------------------
    // Data
    //------------------------------------------------
    "meta": {
      type: Object,
      default: undefined
    },
    "idBy": {
      type: String,
      default: "id"
    },
    "nameBy": {
      type: String,
      default: "nm"
    },
    "referBy": {
      type: String,
      default: "pid"
    },
    "childrenBy": {
      type: String,
      default: "children"
    },
    "sortBy": {
      type: Object,
      default: () => ({ nm: 1 })
    },
    "leafBy": {
      type: [Object, Array, Function],
      default: () => ({ race: 'FILE' })
    },
    "openedNodePath": {
      type: [String, Array, Object]
    },
    "currentId": String,
    "objMatch": [Object, Function],
    "objFilter": {
      type: [Function, Array, Object]
    },
    //------------------------------------------------
    // Behavior
    //------------------------------------------------
    "autoOpen": undefined,
    "showRoot": undefined,
    "multi": undefined,

    "nodeCheckable": undefined,
    "nodeSelectable": undefined,
    "nodeOpenable": undefined,
    "nodeCancelable": undefined,
    "nodeHoverable": undefined,

    "checkable": undefined,
    "selectable": undefined,
    "openable": undefined,
    "cancelable": undefined,
    "hoverable": undefined,

    "onNodeSelect": undefined,

    // Local store to save the tree open status
    "keepOpenBy": {
      type: String,
      default: undefined
    },
    "keepCurrentBy": {
      type: String,
      default: undefined
    },
    //------------------------------------------------
    // Aspect
    //------------------------------------------------
    "display": {
      type: [String, Object, Array],
      default: () => [{
        key: ['race', 'tp', 'mime', 'icon'],
        transformer: Ti.Icons.evalIcon,
        comType: "ti-icon"
      }, "title|nm"]
    },
    "spacing": undefined,
    "border": undefined,
    "loadingNode": {
      type: Object,
      default: () => ({
        title: "i18n:loading"
      })
    },
    "emptyNode": {
      type: Object,
      default: () => ({
        icon: "fas-braille",
        title: "i18n:empty-data"
      })
    },
    //------------------------------------------------
    // Measure
    //------------------------------------------------
    "width": {
      type: [Number, String],
      default: undefined
    },
    "height": {
      type: [Number, String],
      default: undefined
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    },
    //------------------------------------------------
    isNodeLoading() {
      return ({ id }) => {
        return id == this.myLoadingNodeId
      }
    },
    //------------------------------------------------
    TreeRowClassBy() {
      return (it) => {
        if (/^\./.test(it.name)) {
          return "is-weak"
        }
      }
    },
    //------------------------------------------------
    TreeRowFilter() {
      if (!this.objFilter) {
        return () => true
      }
      return Ti.AutoMatch.parse(this.objFilter)
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    OnTreeInit($tree) {
      this.$tree = $tree
    },
    //------------------------------------------------
    OnTreeOpenedStatusChange(openedPath) {
      this.myOpenedNodePaths = _.omitBy(openedPath, v => !v)
      if (this.keepOpenBy) {
        Ti.Storage.session.setObject(this.keepOpenBy, openedPath)
      }
    },
    //------------------------------------------------
    OnNodeSelect({ currentId }) {
      this.myCurrentId = currentId
      if (this.keepCurrentBy) {
        Ti.Storage.session.set(this.keepCurrentBy, currentId)
      }
      return false
    },
    //------------------------------------------------
    async OnNodeOpened({ id, leaf, path, rawData }) {
      let hie = this.getHierarchyById(id)
      if (hie) {
        //console.log(hie)
        // Not need reload
        if (!_.isEmpty(_.get(hie.node, this.childrenBy))) {
          return
        }

        // Do reload
        await this.openNode(hie)
      }
    },
    //------------------------------------------------
    async replaceNode(obj) {
      let nodeId = _.get(obj, this.idBy)
      let hie = this.getHierarchyById(nodeId)

      // Guard
      if (!hie)
        return

      //console.log(hie)
      // Keep the exists children
      let oldPathId = hie.path.join("/")
      let children = _.get(hie.node, this.childrenBy)
      if (!_.isEmpty(children)) {
        _.set(obj, this.childrenBy, children)
      }

      // Replace in tree and redraw
      Ti.Trees.replace(hie, obj)

      // Remove the opened path
      hie = this.getHierarchyById(nodeId)
      let openeds = {}
      _.forEach(this.myOpenedNodePaths, (v, k) => {
        if (v) {
          if (k == oldPathId) {
            k = hie.path.join("/")
          }
          openeds[k] = true
        }
      })

      // soft redraw
      if (!_.isEqual(openeds, this.myOpenedNodePaths)) {
        this.myOpenedNodePaths = openeds
      }
      // Force redraw
      else {
        await this.$tree.evalTreeTableData()
      }
    },
    //------------------------------------------------
    getHierarchyById(id, root = this.treeRoot) {
      return Ti.Trees.getById(root, id, { nameBy: this.nameBy })
    },
    //------------------------------------------------
    getHierarchyByPath(path, root = this.treeRoot) {
      return Ti.Trees.getByPath(root, path, { nameBy: this.nameBy })
    },
    //------------------------------------------------
    getcloseNodesByPath(path) {
      let pathId = _.isArray(path) ? path.join("/") : path
      let openeds = {}
      _.forEach(this.myOpenedNodePaths, (v, k) => {
        if (v && k.length > pathId.length && k.startsWith(pathId)) {
          return
        }
        if (v) {
          openeds[k] = true
        }
      })
      return openeds
    },
    //------------------------------------------------
    selectNodeById(id) {
      this.$tree.selectNodeById(id)
    },
    //--------------------------------------
    isOpened(rowOrId) {
      return this.$tree.isOpened(rowOrId)
    },
    //--------------------------------------
    closeRow(rowOrId) {
      this.$tree.closeRow(rowOrId)
    },
    //------------------------------------------------
    selectNodeByPath(path) {
      let hie = this.getHierarchyByPath(path)
      if (hie) {
        this.$tree.selectNodeById(hie.id)
      }
    },
    //------------------------------------------------
    async openNodeById(id) {
      let hie = this.getHierarchyById(id)
      if (hie) {
        return await this.openNode(hie)
      }
    },
    //------------------------------------------------
    async openNodeByPath(id) {
      let hie = this.getHierarchyByPath(path)
      if (hie) {
        return await this.openNode(hie)
      }
    },
    //------------------------------------------------
    async openNode({ id, node, path }) {
      // Show loading
      this.myLoadingNodeId = id
      await this.$tree.evalTreeTableData()

      // Do reload
      await this.reloadChildren(node)
      this.myLoadingNodeId = null

      // Closed the children nodes
      let pathId = Ti.Trees.path(path).join("/")
      let openeds = this.getcloseNodesByPath(pathId)
      openeds[pathId] = true

      // soft redraw
      if (!_.isEqual(openeds, this.myOpenedNodePaths)) {
        this.myOpenedNodePaths = openeds
      }
      // Force redraw
      else {
        await this.$tree.evalTreeTableData()
      }
    },
    //------------------------------------------------
    async reloadChildren(obj) {
      // Get the parent refer value
      let prVal = _.get(obj, this.idBy)
      if (Ti.Util.isNil(prVal))
        return

      // Get match
      let match = {}
      if (_.isFunction(this.objMatch)) {
        _.assign(match, this.objMatch(obj))
      } else {
        _.assign(match, this.objMatch)
      }
      _.set(match, this.referBy, prVal)

      // Reload top 
      let query = {
        skip: 0, limit: 0, sort: this.sortBy, mine: true, match
      }
      let { list } = await Wn.Io.find(query)

      // Filter obj
      let list2 = _.filter(list, this.TreeRowFilter)

      //_.set(obj, this.childrenBy, list);
      this.$set(obj, this.childrenBy, list2)
    },
    //------------------------------------------------
    async quietOpenNode(path = [], node = this.treeRoot) {
      if ('DIR' != node.race)
        return

      if (_.isEmpty(path))
        return
      let nodeName = _.first(path)
      let hie = this.getHierarchyByPath(nodeName, node)
      // Need to load the children
      if (!hie) {
        await this.reloadChildren(node)
        // fetch again
        hie = this.getHierarchyByPath(nodeName, node)
      }

      // The child is lost
      if (!hie)
        return

      // Load the sub-level
      let subPath = path.slice(1)

      // Just open current node
      if (_.isEmpty(subPath)) {
        await this.reloadChildren(hie.node)
      }
      // Recur
      else {
        await this.quietOpenNode(subPath, hie.node)
      }
    },
    //------------------------------------------------
    async deleteNodeById(id, confirm) {
      let hie = this.getHierarchyById(id)
      if (hie) {
        return await this.deleteNode(hie, confirm)
      }
    },
    //------------------------------------------------
    async deleteNodeByPath(path, confirm) {
      let hie = this.getHierarchyByPath(path)
      if (hie) {
        return await this.deleteNode(hie, confirm)
      }
    },
    //------------------------------------------------
    async deleteNode(hie, confirm) {
      // Confirm
      if (confirm) {
        if (_.isBoolean(confirm)) {
          confirm = {
            text: "i18n:wn-del-confirm",
            vars: { N: 1 }
          }
        }
        if (!(await Ti.Confirm(confirm, { type: "warn" }))) {
          return
        }
      }

      // Get the condidate
      let can = Ti.Trees.nextCandidate(hie)

      // Remove the object
      let cmdText = `rm -rf 'id:${hie.id}'`
      await Wn.Sys.exec(cmdText)

      // Get pareth path
      let pPath = hie.path.slice(0, hie.path.length - 1)
      await this.reloadNodeByPath(pPath)

      // Tip user
      await Ti.Toast.Open({
        position: "top",
        content: "i18n:wn-del-ok",
        vars: { N: 1 },
        type: "info"
      })

      // Highlight next
      if (can) {
        let nextNodeId = _.get(can.node, this.idBy)
        _.delay(() => {
          this.selectNodeById(nextNodeId)
        }, 200)
      }
    },
    //------------------------------------------------
    async reloadNodeById(id) {
      let hie = this.getHierarchyById(id)
      if (hie) {
        return await this.reloadNode(hie)
      }
    },
    //------------------------------------------------
    async reloadNodeByPath(path) {
      let hie = this.getHierarchyByPath(path)
      if (hie) {
        return await this.reloadNode(hie)
      }
    },
    //------------------------------------------------
    async reloadNode({ id, node, path }) {
      // Show loading
      this.myLoadingNodeId = id
      await this.$tree.evalTreeTableData()

      // Do reload
      await this.reloadChildren(node)
      this.myLoadingNodeId = null

      // Closed the children nodes
      let openeds = this.getcloseNodesByPath(path)

      // soft redraw
      if (!_.isEqual(openeds, this.myOpenedNodePaths)) {
        this.myOpenedNodePaths = openeds
      }
      // Force redraw
      else {
        await this.$tree.evalTreeTableData()
      }
    },
    //------------------------------------------------
    async reload() {
      // Guard
      if (!this.meta)
        return

      // Make tree root
      let root = _.cloneDeep(this.meta)

      // Load children
      await this.reloadChildren(root)

      // Open the node 
      let openPathIds = Ti.Util.truthyKeys(this.myOpenedNodePaths)
      for (let pathId of openPathIds) {
        let path = Ti.Trees.path(pathId)
        await this.quietOpenNode(path, root)
      }

      // Check the currentId
      if (this.myCurrentId) {
        // is it already loaded ?
        let hie = this.getHierarchyById(this.myCurrentId, root)

        // if not exists try to reload
        if (!hie) {
          // Load ancestors 
          let ans = await Wn.Io.loadAncestors(`id:${this.myCurrentId}`)

          // find the first index of 
          let index = 0
          let homeId = _.get(this.meta, this.idBy)
          for (; index < ans.length; index++) {
            let an = ans[index]
            if (_.get(an, this.idBy) == homeId) {
              break
            }
          }

          // Get the path
          let currentPath = []
          for (index++; index < ans.length; index++) {
            let an = ans[index]
            currentPath.push(_.get(an, this.nameBy))
          }

          // Open to it
          await this.quietOpenNode(currentPath, root)

          // Make sure current is opened
          let openeds = {}
          for (let i = 1; i <= currentPath.length; i++) {
            openeds[currentPath.slice(0, i).join("/")] = true
          }
          this.myOpenedNodePaths = _.defaults({}, this.myOpenedNodePaths, openeds)
        }

        // Restore the current node
        _.delay(() => {
          this.$tree.selectNodeById(this.myCurrentId)
        }, 300)
      }

      // set to data
      this.treeRoot = root
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    "meta": {
      handler: function (newVal, oldVal) {
        if (!_.isEqual(newVal, oldVal)) {
          this.reload()
        }
      },
      immediate: true
    },
    "currentId": {
      handler: function (newVal) {
        this.myCurrentId = newVal
      },
      immediate: true
    },
    "openedNodePath": {
      handler: function (newVal) {
        // Single path
        if (_.isString(newVal)) {
          _.set(this.myOpenedNodePaths, newVal, true)
        }
        // Path array
        else if (_.isArray(newVal)) {
          for (let ph of newVal) {
            _.set(this.myOpenedNodePaths, ph, true)
          }
        }
        // Object
        else {
          _.assign(this.myOpenedNodePaths, newVal)
        }
      },
      immediate: true
    }
  },
  ////////////////////////////////////////////////////
  created: function () {
    if (this.keepCurrentBy) {
      this.myCurrentId = Ti.Storage.session.getString(this.keepCurrentBy)
    }
    if (this.keepOpenBy) {
      this.myOpenedNodePaths = Ti.Storage.session.getObject(this.keepOpenBy)
    }
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'grid-container.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/form/grid/com/grid-container/grid-container.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////////////////
  data: () => ({
    myFields: []
  }),
  //////////////////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "data": Object,
    "fields": Array,
    "status": Object,
    "lang": String,
    //-----------------------------------
    // Behaviors
    //-----------------------------------
    "readonly": {
      type: Boolean,
      default: false
    },
    "batchReadonly": {
      type: [Function, Array, Object]
    },
    "tipAsPopIcon": {
      type: Boolean,
      default: false
    },
    "autoFieldNameTip": {
      type: [Boolean, String, Object],
      default: false
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "fieldBorder": String,
    "statusIcons": Object,
    //-----------------------------------
    // Measure
    //-----------------------------------
    "fieldNameMaxWidth": [Number, String],
    "gridColumnCount": Number
  },
  //////////////////////////////////////////////////////
  computed: {
    //--------------------------------------------------
    TopClass() {
      return this.getTopClass(`is-field-border-${this.fieldBorder}`);
    },
    //--------------------------------------------------
    TopStyle() {
      if (this.gridColumnCount > 0) {
        return {
          "grid-template-columns": _.repeat("auto 1fr ", this.gridColumnCount)
        };
      }
      return {
        "grid-template-columns": "1fr"
      };
    },
    //--------------------------------------------------
    canShowBatchEditableSwitcher() {
      return !this.readonly;
    }
    //--------------------------------------------------
  },
  //////////////////////////////////////////////////////
  methods: {
    //--------------------------------------------------
    OnClickComValue(fld) {
      this.$parent.myActivedFieldKey = fld.uniqKey;
    },
    //--------------------------------------------------
    OnFldChange(fld, value) {
      // Define how to apply field default value
      const __apply_fld_default = (val) => {
        let re = val;
        //console.log("evalInputValue", val)
        // apply default
        if (_.isUndefined(val)) {
          re = _.cloneDeep(Ti.Util.fallback(fld.undefinedAs, fld.defaultAs));
        } else if (_.isNull(val)) {
          re = _.cloneDeep(Ti.Util.fallback(fld.nullAs, fld.defaultAs, null));
        } else if (isNaN(val) && /^(Number|Integer|Float)$/.test(fld.type)) {
          re = _.cloneDeep(Ti.Util.fallback(fld.nanAs, fld.defaultAs, NaN));
        } else if (!(_.isBoolean(val) || _.isNumber(val)) && _.isEmpty(val)) {
          if (_.isString(val)) {
            re = _.cloneDeep(Ti.Util.fallback(fld.emptyAs, fld.defaultAs, ""));
          } else {
            re = Ti.Util.fallback(fld.emptyAs, val);
          }
        }

        if ("~~undefined~~" == re) {
          return;
        }
        return re;
      };

      // Firstly apply the default
      let v1 = __apply_fld_default(value);

      // Serilizing
      try {
        //console.log("this.serializer(val):", fld.name, v1)
        v1 = fld.serializer(v1);
        //console.log("field changed", fld.name, v1)
      } catch (error) {
        // Invalid
        console.warn(error);
        this.$notify("invalid", {
          errMessage: "" + error,
          name: fld.name,
          value: value
        });
        return;
      }

      // Apply again
      let v2 = __apply_fld_default(v1);

      // Compare the value
      let oldValue = _.get(fld.comConf, fld.autoValue || "value");

      // Try to notify
      if (!fld.checkEquals || !_.isEqual(oldValue, v2)) {
        this.$emit("field:change", {
          name: fld.name,
          value: v2
        });
      }
    },
    //--------------------------------------------------
    cloneAssignFieldGrid(fields = this.fields) {
      let list = _.cloneDeep(fields) || [];

      // Grid layout
      let realGridColCount = this.gridColumnCount * 2 || 1;

      let gridI = 0; // Current grid cell col index
      let gridRowUsed = 0; // Current grid cell row span
      let gridColUsed = 0; // Current grid cell col span
      for (let i = 0; i < list.length; i++) {
        let fld = list[i];
        // if (realGridColCount > 1) {
        //   console.log(i, gridI, fld.name, realGridColCount)
        // }

        // Show name
        fld.showName = fld.icon || fld.title ? true : false;
        fld.rowSpan = fld.rowSpan || 1;

        let colSpan = fld.colSpan || 1;
        let fldGridColSpan = Math.min(colSpan * 2, realGridColCount);

        // Remain grid
        let remainGrid = realGridColCount - gridI;

        // Grid overflow
        if (fldGridColSpan > remainGrid) {
          // Wrap line
          gridI = 0;
          // Assign remain grid to prev fldValue
          if (i > 0) {
            let prevFld = list[i - 1];
            prevFld.valueGridSpan += remainGrid;
          }
        }

        // Label
        if ("Label" == fld.race) {
          fld.gridStart = 0;
          fld.gridSpan = realGridColCount;
          gridI = 0;
          continue;
        }

        // Grid with field name
        if (fld.showName) {
          fld.nameGridStart = gridI;
          fld.nameGridSpan = 1;
          fld.valueGridStart = gridI + 1;
          fld.valueGridSpan = fldGridColSpan - 1;
        }
        // None name field
        else {
          fld.nameGridStart = 0;
          fld.nameGridSpan = 0;
          fld.valueGridStart = gridI;
          fld.valueGridSpan = fldGridColSpan;
        }

        // Move grid and test wrap
        gridI = fld.valueGridStart + fld.valueGridSpan;
        if (gridI >= realGridColCount) {
          gridI = 0;
        }
      }

      return list;
    },
    //--------------------------------------------------
    evalFields(fields = this.fields) {
      //console.log("evalFields", fields)
      // if (fields.length == 3) {
      //   console.log("evalFields", fields)
      // }
      let list = this.cloneAssignFieldGrid(fields);

      // each fields
      for (let fld of list) {
        // Maybe race="Label"
        if (fld.com) {
          fld.comType = fld.com.comType;
          fld.comConf = fld.com.comConf;
        }

        let nmStyle, valStyle;

        // Label
        if ("Label" == fld.race) {
          nmStyle = {
            "grid-column-start": fld.gridStart + 1,
            "grid-column-end": `span ${fld.gridSpan}`
          };
        }
        // Normal field
        else {
          fld.tipAsPopIcon = Ti.Util.fallback(
            fld.tipAsPopIcon,
            this.tipAsPopIcon
          );
          // Grid with field name
          if (fld.showName) {
            fld.title = Ti.I18n.text(fld.title);
            this.setFieldTip(fld, "tipObj", fld.tip);
            this.setFieldNameTip(fld);

            nmStyle = {
              //"grid-column-start": fld.nameGridStart + 1,
              "grid-column-end": `span ${fld.nameGridSpan}`,
              "grid-row-end": `span ${fld.rowSpan}`
            };
            if ("auto" == fld.nameAlign) {
              fld.nameAlign = this.gridColumnCount > 0 ? "right" : "left";
            }

            if (this.gridColumnCount > 0 && this.fieldNameMaxWidth) {
              fld.nameTextStyle = {
                maxWidth: Ti.Css.toSize(this.fieldNameMaxWidth)
              };
            }
          }

          valStyle = {
            //"grid-column-start": fld.valueGridStart + 1,
            "grid-column-end": `span ${fld.valueGridSpan}`,
            "grid-row-end": `span ${fld.rowSpan}`
          };

          if (!Ti.Util.isNil(fld.width)) {
            let fldWidth =
              "full" == fld.width ? "100%" : Ti.Css.toSize(fld.width);
            fld.comStyle = _.assign(
              {
                "width": fldWidth,
                "flex": "0 0 auto"
              },
              fld.comStyle
            );
          }
        }

        // Update field name
        fld.nameStyle = _.assign({}, fld.nameStyle, nmStyle);
        fld.valueStyle = _.assign({}, fld.valueStyle, valStyle);

        // Name class
        if (fld.nameClass) {
          fld.nameClass = Ti.Css.mergeClassName(fld.nameClass);
        }

        // Value class
        fld.valueClass = Ti.Css.mergeClassName(fld.valueClass, {
          "is-disabled": fld.disabled,
          "is-batch-disabled": fld.batchDisabled
        });

        // Status
        this.setFieldStatus(fld);
      } // for (let fld of fields) {

      this.myFields = list;
    },
    //--------------------------------------------------
    setFieldTip(
      fld,
      taKey,
      tip,
      {
        mode = "H",
        size = "auto",
        type = "paper",
        contentType = "text",
        text
      } = {}
    ) {
      // Guard
      if (!taKey || !tip) {
        return;
      }

      //console.log("setFieldNameTip", fld)
      let tipObj = { vars: {} };
      // String as template
      if (_.isString(tip)) {
        tipObj.text = tip;
      }
      // Full Dedefined
      else if (_.isObject(tip)) {
        _.assign(tipObj, tip);
      }
      _.defaults(tipObj, {
        vars: {},
        mode,
        size,
        type,
        contentType,
        text
      });
      // Guard again
      if (!tipObj.text) {
        return;
      }

      _.defaults(tipObj.vars, {
        title: fld.title,
        name: _.concat(fld.name).join(", ")
      });
      let tipAttrs = {};
      _.forEach(tipObj, (v, k) => {
        // 设置变量
        if ("vars" == k) {
          _.forEach(v, (varVal, key) => {
            let varName = _.kebabCase(key);
            tipAttrs[`data-ti-tip-vars-${varName}`] = varVal;
          });
        }
        // 设置数据
        else if ("text" == k) {
          tipAttrs[`data-ti-tip`] = v;
        }
        // 普通设置
        else {
          tipAttrs[`data-ti-tip-${k}`] = v;
        }
      });
      fld[taKey] = tipAttrs;
    },
    //--------------------------------------------------
    setFieldNameTip(fld) {
      let autoNameTip = Ti.Util.fallback(
        fld.autoNameTip,
        this.autoFieldNameTip
      );
      this.setFieldTip(fld, "nameTip", autoNameTip, {
        mode: "V",
        size: "auto",
        type: "success",
        contentType: "text",
        text: "${title}: ${name}"
      });
    },
    //--------------------------------------------------
    setFieldStatus(fld = {}) {
      let { type, text } = _.get(this.status, fld.uniqKey) || {};
      if (type) {
        fld.statusIcon = _.get(this.statusIcons, type);
        fld.statusText = Ti.I18n.text(text);
        fld.nameClass = Ti.Css.mergeClassName(fld.nameClass, `is-${type}`);
        fld.valueClass = Ti.Css.mergeClassName(fld.valueClass, `is-${type}`);
      }
    },
    //--------------------------------------------------
    tryEvalFields(newVal, oldVal) {
      if (!_.isEqual(newVal, oldVal)) {
        this.evalFields();
      }
    }
    //--------------------------------------------------
  },
  //////////////////////////////////////////////////////
  watch: {
    "fields": "tryEvalFields",
    "status": "tryEvalFields",
    "gridColumnCount": "tryEvalFields",
    "fieldNameWidth": "tryEvalFields"
  },
  //////////////////////////////////////////////////////
  mounted() {
    this.evalFields();
  }
  //////////////////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'ti-input-month.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/month/ti-input-month.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data : ()=>({
    "runtime" : null,
    "status"  : "collapse"
  }),
  ////////////////////////////////////////////////////
  props : {
    "canInput" : {
      type : Boolean,
      default : true
    },
    "value" : {
      type : [String, Number, Date],
      default : undefined
    },
    "text" : {
      type : String,
      default : undefined
    },
    "icon" : {
      type : String,
      default : "far-calendar"
    },
    "format" : {
      type : String,
      default : "yyyy-MM"
    },
    "placeholder" : {
      type : [String, Number],
      default : "i18n:blank-month"
    },
    "hideBorder" : {
      type : Boolean,
      default : false
    },
    "width" : {
      type : [Number, String],
      default : "1.6rem"
    },
    "height" : {
      type : [Number, String],
      default : undefined
    },
    "dropWidth" : {
      type : [Number, String],
      default : "box"
    },
    // the height of drop list
    "dropHeight" : {
      type : [Number, String],
      default : 200
    },
    "beginYear" : {
      type : [Number, String],
      default : undefined
    },
    "endYear" : {
      type : [Number, String],
      default : undefined
    },
    "statusIcons" : {
      type : Object,
      default : ()=>({
        collapse : "zmdi-chevron-down",
        extended : "zmdi-chevron-up"
      })
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName(this.className)
    },
    //------------------------------------------------
    isCollapse() {return "collapse"==this.status},
    isExtended() {return "extended"==this.status},
    //------------------------------------------------
    theDate() {
      return Ti.Types.toDate(this.value, null)
    },
    //------------------------------------------------
    theDropDate() {
      return this.runtime || this.theDate
    },
    //------------------------------------------------
    theInputValue() {
      if(this.isExtended) {
        return this.getDateText(this.theDropDate, this.format)
      }
      return this.text || this.getDateText(this.theDropDate, this.format)
    },
    //------------------------------------------------
    theStatusIcon() {
      return this.statusIcons[this.status]
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    applyRuntime() {
      if(this.runtime) {
        let dt = this.runtime
        this.runtime = null
        let str = this.getDateText(dt)
        this.$notify("change", str)
      }
    },
    //-----------------------------------------------
    doExtend() {
      this.status = "extended"
    },
    //-----------------------------------------------
    doCollapse({escaped=false}={}) {
      this.status = "collapse"
      // Drop runtime
      if(escaped) {
        this.runtime = null
      }
      // Apply Changed for runtime
      else {
        this.applyRuntime()
      }
    },
    //------------------------------------------------
    onInputFocused() {
      this.doExtend()
    },
    //------------------------------------------------
    onChanged(val) {
      // Empty value as null
      if(_.isEmpty(val)) {
        this.$notify("change", null);
      }
      // Parsed value
      else {
        let dt  = Ti.Types.toDate(val)
        let str = this.getDateText(dt)
        this.$notify("change", str)
      }
    },
    //------------------------------------------------
    onClickStatusIcon() {
      // extended -> collapse
      if(this.isExtended) {
        this.doCollapse()
      }
      // collapse -> extended
      else {
        this.doExtend()
      }
    },
    //------------------------------------------------
    onMonthChanged(dt) {
      this.runtime = dt
    },
    //------------------------------------------------
    getDateText(dt, fmt="yyyy-MM") {
      let dt2 = Ti.Types.toDate(dt, null)
      return Ti.Types.formatDate(dt2, fmt)
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-thing-manager-methods.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/thing/manager/wn-thing-manager-methods.mjs'] = (function(){
const _M = {
  //--------------------------------------
  //
  //           Batch Update
  //
  //--------------------------------------
  async batchUpdate() {
    //....................................
    // Prepare the data
    if(_.isEmpty(this.checkedItems)) {
      return Ti.Toast.Open("i18n:batch-none", "warn")
    }
    let current = _.first(this.checkedItems)
    //....................................
    let batch = _.get(this.config, "schema.behavior.batch") || {}
    _.defaults(batch, {
      "comType" : "wn-obj-form",
      "comConf" : {},
      "fields" : "schema.meta.comConf.fields",
      "names" : null,
      "valueKey": "data"
    })
    batch.comType = _.kebabCase(batch.comType)
    // Add default setting
    if(/^(ti-|wn-obj-)(form)$/.test(batch.comType)) {
      _.defaults(batch.comConf, {
        autoShowBlank: false,
        updateBy: true,
        setDataBy: true
      })
    }
    //....................................
    let name_filter;
    if(_.isString(batch.names)) {
      if(batch.names.startsWith("^")){
        let regex = new RegExp(batch.names)
        name_filter = fld => regex.test(fld.name)
      }
      else if(batch.names.startsWith("!^")){
        let regex = new RegExp(batch.names.substring(1))
        name_filter = fld => !regex.test(fld.name)
      }
      else {
        let list = Ti.S.toArray(batch.names)
        name_filter = fld => list.indexOf(fld.name)>=0
      }
    }
    // Filter by Array
    // TODO maybe I should use the validate
    else if(_.isArray(batch.names) && !_.isEmpty(batch.names)) {
      name_filter = v => batch.name.indexOf(v)>=0
    }
    // Allow all
    else {
      name_filter = fld => {
        //console.log(fld)
        // It is dangour when batch update
        // Many thing item may refer to same file
        if(/^(wn-upload-file|wn-imgfile)$/.test(fld.comType))
          return false
        return true
      }
    }

    //....................................
    // Prepare the fields
    let fields = _.get(this.config, batch.fields)
    //....................................
    // Define the filter processing
    let vm = this
    const do_filter_fields = function(flds=[], filter) {
      let list = []
      for(let fld of flds) {
        // Group
        if(_.isArray(fld.fields)) {
          let f2 = _.cloneDeep(fld)
          f2.fields = do_filter_fields(fld.fields, filter)
          if(!_.isEmpty(f2.fields)) {
            list.push(f2)
          }
        }
        // Fields
        else if(filter(fld)) {
          let f2 = Ti.Util.explainObj(vm, fld)
          list.push(f2)
        }
      }
      return list
    }
    //....................................
    // filter each fields
    fields = do_filter_fields(fields, name_filter)
    //....................................
    // Open the Modal
    let updates = await Ti.App.Open({
      title: "i18n:batch-update",
      width: 640,
      height: "90%",
      position: "top",
      //............................
      comType: "inner-body",
      //............................
      components: [{
        name: "inner-body",
        globally : false,
        data: {
          update: {},
          value: current,
          innerComConf: {
            ... batch.comConf,
            fields
          }
        },
        template: `<${batch.comType}
          v-bind="innerComConf"
          :${batch.valueKey}="value"
          @field:change="OnFieldChange"
          @change="OnChange"/>`,
        methods: {
          OnFieldChange({name, value}){
            _.set(this.update, name, value)
            this.$notify("change", this.update)
          },
          OnChange(payload) {
            this.value = payload
          }
        }
      }]
      //............................
    })
    //....................................
    if(!_.isEmpty(updates)) {
      // Get all checkes
      await this.dispatch("batchUpdateMetas", updates)
    }
  },
  //--------------------------------------
  //
  //      Utility: show/hide block
  //
  //--------------------------------------
  changeShown(shown={}) {
    this.dispatch("doChangeShown", shown)
  },
  //--------------------------------------
  showBlock(name) {
    //console.log("showBlock", name)
    // If creator, then must leave the recycle bin
    if("creator" == name) {
      if(this.status.inRecycleBin) {
        Ti.Alert("i18n:thing-create-in-recyclebin", {
          title : "i18n:warn",
          icon  : "im-warning",
          type  : "warn"
        })
        return
      }
    }
    if("files" == name) {
      this.dispatch("reloadFiles")
    }
    else if("content" == name) {
      this.dispatch("current/reload")
    }
    // Mark block
    this.dispatch("doChangeShown", {[name]:true})
  },
  //--------------------------------------
  hideBlock(name) {
    this.dispatch("doChangeShown", {[name]:false})
  },
  //--------------------------------------
  toggleBlock(name) {
    this.dispatch("doChangeShown", {
      [name]: !this.TheShown[name]
    })
  },
  //--------------------------------------
  //
  //           Utility: Others
  // 
  //--------------------------------------
  async invoke(fnName, ...args) {
    //console.log("invoke ", fnName, args)
    let fn = _.get(this.SchemaMethods, fnName)
    // Invoke the method
    if(_.isFunction(fn)) {
      return await fn.apply(this, args)
    }
    // Throw the error
    else {
      throw Ti.Err.make("e.thing.fail-to-invoke", fnName)
    }
  }
  //--------------------------------------
}
return _M;;
})()
// ============================================================
// EXPORT 'leaflet-mock-methods.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/gis/leaflet/leaflet-mock-methods.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //--------------------------------------
  // @return [lat, lng]
  mockPair(lat_lng=true) {
    let lat = this.geo.S + (this.geo.N - this.geo.S) * Math.random()
    let lng = this.geo.W + (this.geo.E - this.geo.W) * Math.random()
    return lat_lng 
      ? [lat, lng]
      : [lng, lat]
  },
  //--------------------------------------
  mockPairList(n = 100, lat_lng=true) {
    let list = []
    for(let i=0; i<n; i++){
      list.push(this.mockPair(lat_lng))
    }
    return list
  }
  //--------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-obj-privilege.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/privilege/wn-obj-privilege.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //////////////////////////////////////////
  data: () => ({
    myPrivilegeData: [],
    //
    // Account
    //
    myAccountHome: null,
    myAccounts: [],
    myAccountMap: {},
    //
    // Roles
    //
    myRoleHome: null,
    myRoles: [],
    myRoleMap: {},
    //
    // Companies
    //
    myCompanyBy: null,
    myCompanies: [],
    myCompanyMap: {},
    //
    // Departments
    //
    myDeptBy: null,
    myDeptCache: {}, /*{$ComId: {children:[Department]}}*/
    myDeptMap: {},  /*{$ComId: {deptId: Department, ...}}*/
    //
    // Projects
    //
    myProjectBy: null,
    myProjects: [],
    myProjectMap: {},
    //
    // Status
    //
    myCurrentId: null,
    loading: false
  }),
  //////////////////////////////////////////
  props: {
    "value": {
      type: Object,
      default: () => ({})
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    hasAccounts() { return !_.isEmpty(this.myAccounts) },
    hasRoles() { return !_.isEmpty(this.myRoles) },
    //--------------------------------------
    GuiLoadingAs() {
      if (!this.hasAccounts)
        return {
          text: "i18n:empty",
          icon: "fas-border-none"
        }
    },
    //--------------------------------------
    ActionItems() {
      let items = []
      if (!_.isEmpty(this.myAccounts)) {
        items.push({
          icon: "fas-user-plus",
          text: "i18n:account-add",
          action: () => { this.OnAddAccounts() }
        })
      }
      //
      // Roles
      //
      if (!_.isEmpty(this.myRoles)) {
        if (items.length > 0) {
          items.push({ type: "line" })
        }
        items.push({
          icon: "fas-ribbon",
          text: "i18n:role-add",
          action: () => { this.OnAddRoles() }
        })
      }
      //
      // Companies
      //
      if (!_.isEmpty(this.myCompanies)) {
        if (items.length > 0) {
          items.push({ type: "line" })
        }
        items.push({
          icon: "fas-building",
          text: "i18n:org-add",
          action: () => { this.OnAddCompanies() }
        })
        // Begin Departments
        if (items.length > 0) {
          items.push({ type: "line" })
        }
        if (!_.isEmpty(this.myDeptBy)) {
          items.push({
            icon: "fas-briefcase",
            text: "i18n:dept-add",
            action: () => { this.OnAddDepts() }
          })
        }
        // End Departments
      }
      //
      // Projects
      //
      if (!_.isEmpty(this.myProjects)) {
        if (items.length > 0) {
          items.push({ type: "line" })
        }
        items.push({
          icon: "fas-chess-queen",
          text: "i18n:project-add",
          action: () => { this.OnAddProjects() }
        })
      }

      //
      // Delete
      //
      items.push({
        type: "line"
      }, {
        icon: "far-trash-alt",
        text: "i18n:del-checked",
        action: () => { this.OnRemoveSelected() }
      })

      return items;
    },
    //--------------------------------------
    Layout() {
      return {
        type: "rows",
        border: true,
        defaultFlex: "both",
        blocks: [{
          size: 42,
          body: "actions"
        }, {
          type: "cols",
          border: true,
          blocks: [{
            name: "list",
            body: "list"
          }, {
            name: "data",
            body: "data"
          }]
        }]
      }
    },
    //--------------------------------------
    Schema() {
      return {
        actions: {
          comType: "TiActionbar",
          comConf: {
            items: this.ActionItems
          }
        },
        list: {
          comType: "TiList",
          comConf: {
            checkable: true,
            multi: true,
            data: this.myPrivilegeData,
            idBy: "key",
            display: [
              "<icon>", "text", "tip::as-tip-block"
            ],
            onInit: ($list) => {
              this.$list = $list
            }
          }
        },
        data: {
          comType: "TiForm",
          comConf: {
            spacing: "tiny",
            data: this.CurrentItem,
            autoShowBlank: true,
            blankAs: {
              text: "i18n:blank-to-edit",
              icon: "fas-arrow-left"
            },
            fields: [{
              title: "i18n:type",
              name: "type"
            }, {
              title: "i18n:name",
              name: "text"
            }, {
              title: "i18n:key",
              name: "key",
              comConf: {
                className: "is-nowrap",
                fullField: false
              }
            }, {
              title: "i18n:wn-md-readable",
              name: "readable",
              type: "Boolean",
              comType: "TiToggle"
            }, {
              title: "i18n:wn-md-writable",
              name: "writable",
              type: "Boolean",
              comType: "TiToggle"
            }, {
              title: "i18n:wn-md-excutable",
              name: "excutable",
              type: "Boolean",
              comType: "TiToggle"
            }]
          }
        }
      }
    },
    //--------------------------------------
    CurrentItem() {
      for (let it of this.myPrivilegeData) {
        if (this.myCurrentId == it.key) {
          return it
        }
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnListSelect({ currentId }) {
      this.myCurrentId = currentId
    },
    //--------------------------------------
    OnDataChange(data) {
      let key = data.key
      let m0 = Wn.Obj.mode0FromObj(data)
      let md = (7 << 6) | (7 << 3) | (m0)
      let val = _.cloneDeep(this.value)
      val[key] = md
      this.$notify("change", val)
    },
    //--------------------------------------
    async OnAddAccounts() {
      let accounts = _.filter(this.myAccounts, acc => {
        let md = _.get(this.value, acc.id)
        return _.isUndefined(md)
      })

      let reo = await Ti.App.Open({
        icon: "fas-user-plus",
        title: "i18n:account-add",
        position: "top",
        width: 480,
        height: "90%",
        model: { prop: "value", event: "select" },
        comType: "TiList",
        comConf: {
          multi: true,
          checkable: true,
          data: accounts,
          display: ["<icon:zmdi-account>", "nickname", "nm::as-tip-block"]
        }
      })

      // User cancel
      if (!reo)
        return

      // Nothing selected
      let checkeds = Ti.Util.truthyKeys(reo.checkedIds)
      if (_.isEmpty(checkeds)) {
        return
      }

      // Update value
      let val = _.cloneDeep(this.value)
      for (let id of checkeds) {
        val[id] = 508
      }
      this.$notify("change", val)
    },
    //--------------------------------------
    async OnAddRoles() {
      let roles = _.filter(this.myRoles, role => {
        let md = _.get(this.value, `@${role.nm}`)
        return _.isUndefined(md)
      })

      let reo = await Ti.App.Open({
        icon: "fas-user-plus",
        title: "i18n:roles-add",
        position: "top",
        width: 480,
        height: "90%",
        model: { prop: "value", event: "select" },
        comType: "TiList",
        comConf: {
          multi: true,
          checkable: true,
          idBy: "nm",
          data: roles,
          display: ["<icon:far-smile>", "title|th_nm", "nm::as-tip-block"]
        }
      })

      // User cancel
      if (!reo)
        return

      // Nothing selected
      let checkeds = Ti.Util.truthyKeys(reo.checkedIds)
      if (_.isEmpty(checkeds)) {
        return
      }

      // Update value
      let val = _.cloneDeep(this.value)
      for (let nm of checkeds) {
        val[`@${nm}`] = 508
      }
      this.$notify("change", val)
    },
    //--------------------------------------
    async OnAddCompanies() {
      let companies = _.filter(this.myCompanies, com => {
        let md = _.get(this.value, `org:${com.id}`)
        return _.isUndefined(md)
      })

      let reo = await Ti.App.Open({
        icon: "fas-building",
        title: "i18n:org-add",
        position: "top",
        width: 480,
        height: "90%",
        model: { prop: "value", event: "select" },
        comType: "WnList",
        comConf: {
          multi: true,
          checkable: true,
          idBy: "id",
          data: companies,
          display: ["@<thumb>", "title|nm", "id::as-tip-block"]
        }
      })

      // User cancel
      if (!reo)
        return

      // Nothing selected
      let checkeds = Ti.Util.truthyKeys(reo.checkedIds)
      if (_.isEmpty(checkeds)) {
        return
      }

      // Update value
      let val = _.cloneDeep(this.value)
      for (let id of checkeds) {
        val[`org:${id}`] = 508
      }
      this.$notify("change", val)
    },
    //--------------------------------------
    async OnAddDepts() {
      // Choose one company
      let reo = await Ti.App.Open({
        icon: "fas-building",
        title: "i18n:org-choose",
        position: "top",
        width: 480,
        height: "65%",
        model: { prop: "value", event: "select" },
        comType: "WnList",
        comConf: {
          multi: false,
          checkable: false,
          idBy: "id",
          data: this.myCompanies,
          display: ["@<thumb>", "title|nm", "id::as-tip-block"]
        }
      })
      let com = _.get(reo, "current")

      // User canceled
      if (!com) {
        return
      }

      // Prepare the commands
      let depts = await this.reloadDepartments(com)

      reo = await Ti.App.Open({
        icon: "fas-briefcase",
        title: "i18n:dept-add",
        position: "top",
        width: 480,
        height: "90%",
        model: { prop: "value", event: "select" },
        comType: "TiTree",
        comConf: {
          multi: true,
          checkable: true,
          autoOpen: true,
          defaultOpenDepth: 100,
          showRoot: false,
          data: depts,
          display: [
            "@<icon>", "name::flex-auto", "id::as-tip-block align-right"]
        }
      })

      // User cancel
      if (!reo)
        return

      // Nothing selected
      let checkeds = Ti.Util.truthyKeys(reo.checkedIds)
      if (_.isEmpty(checkeds)) {
        return
      }

      // Update value
      let val = _.cloneDeep(this.value)
      for (let id of checkeds) {
        val[`dept:${com.id}>${id}`] = 508
      }
      this.$notify("change", val)
    },
    //--------------------------------------
    async OnAddProjects() {
      let projects = _.filter(this.myProjects, proj => {
        let md = _.get(this.value, `prj:${proj.id}`)
        return _.isUndefined(md)
      })

      let reo = await Ti.App.Open({
        icon: "fas-chess-queen",
        title: "i18n:project-add",
        position: "top",
        width: 480,
        height: "90%",
        model: { prop: "value", event: "select" },
        comType: "WnList",
        comConf: {
          multi: true,
          checkable: true,
          idBy: "id",
          data: projects,
          display: ["@<thumb>", "title|nm", "id::as-tip-block"]
        }
      })

      // User cancel
      if (!reo)
        return

      // Nothing selected
      let checkeds = Ti.Util.truthyKeys(reo.checkedIds)
      if (_.isEmpty(checkeds)) {
        return
      }

      // Update value
      let val = _.cloneDeep(this.value)
      for (let id of checkeds) {
        val[`prj:${id}`] = 508
      }
      this.$notify("change", val)
    },
    //--------------------------------------
    OnRemoveSelected() {
      let checked = this.$list.getChecked()
      if (_.isEmpty(checked)) {
        Ti.Toast.Open("i18n:nil-obj", "warn")
        return
      }
      // Build key map
      let keyMap = {}
      _.forEach(checked, it => {
        keyMap[it.key] = true
      })

      // Remove from value
      let val = {}
      _.forEach(this.value, (md, key) => {
        if (!keyMap[key]) {
          val[key] = md
        }
      })

      this.$notify("change", val)
    },
    //--------------------------------------
    buildMap(list = [], key = "id") {
      let re = {}
      _.forEach(list, li => {
        if (!li)
          return
        let k = li[key]
        if (k) {
          re[k] = li
        }
      })
      return re
    },
    //--------------------------------------
    async evalPrivilegeData() {
      let pvgData = []
      _.forEach(this.value, (md, id) => {
        pvgData.push({ md, id })
      })


      let list = []
      for (let pvgIt of pvgData) {
        let { md, id } = pvgIt
        //console.log("pvg data", { md, id })
        let { other } = Wn.Obj.parseMode(md)
        //
        // Tip to indicate the RWX
        //
        let tips = []
        if (other.readable)
          tips.push(Ti.I18n.get("wn-md-R"))
        if (other.writable)
          tips.push(Ti.I18n.get("wn-md-W"))
        if (other.excutable)
          tips.push(Ti.I18n.get("wn-md-X"))
        let tip = tips.join("") || Ti.I18n.get("nil");
        //
        // Company | Organization
        let m = /^org:(.+)$/.exec(id)
        if (m) {
          let comId = m[1]
          let com = _.get(this.myCompanyMap, comId)
          if (com) {
            list.push({
              type: "org",
              icon: Wn.Util.getObjThumbIcon2(com, 'fas-building'),
              text: com.title || com.nm,
              key: id,
              tip,
              ...other
            })
          } else {
            list.push({
              type: "org",
              icon: 'fas-building',
              text: comId,
              key: id,
              tip,
              ...other
            })
          }
          continue;
        }
        //
        // Department
        m = /^dept:([^>]+)>(.+)$/.exec(id)
        if (m) {
          let comId = m[1]
          let deptId = m[2]
          let com = this.myCompanyMap[comId]
          let dept;
          if (com) {
            await this.reloadDepartments(com)
            dept = _.get(this.myDeptMap, `${comId}.${deptId}`)
          }
          if (com && dept) {
            list.push({
              type: "dept",
              icon: Wn.Util.getObjThumbIcon2(dept, 'fas-briefcase'),
              text: `${com.title || com.nm} > ${dept.name || dept.title || dept.text || dept.nm}`,
              key: id,
              tip,
              ...other
            })
          } else {
            list.push({
              type: "dept",
              icon: 'fas-briefcase',
              text: deptId,
              key: id,
              tip,
              ...other
            })
          }
          continue;
        }
        //
        // Projects
        m = /^prj:(.+)$/.exec(id)
        if (m) {
          let projId = m[1]
          let proj = _.get(this.myProjectMap, projId)
          if (proj) {
            list.push({
              type: "proj",
              icon: Wn.Util.getObjThumbIcon2(proj, 'fas-chess-queen'),
              text: proj.title || proj.nm,
              key: id,
              tip,
              ...other
            })
          } else {
            list.push({
              type: "org",
              icon: 'fas-building',
              text: projId,
              key: id,
              tip,
              ...other
            })
          }
          continue;
        }
        // Role
        m = /^@(.+)$/.exec(id)
        if (m) {
          let roleName = m[1]
          let role = _.get(this.myRoleMap, roleName)
          if (role) {
            list.push({
              type: "role",
              icon: role.icon || 'far-smile',
              text: role.title || role.nm,
              key: id,
              tip,
              ...other
            })
          } else {
            list.push({
              type: "role",
              icon: 'far-smile',
              text: roleName,
              key: id,
              tip,
              ...other
            })
          }
          continue;
        }
        //
        // Account
        let user = _.get(this.myAccountMap, id)
        if (user) {
          list.push({
            type: "account",
            icon: user.icon || 'zmdi-account',
            thumb: user.thumb,
            text: user.nickname || user.nm,
            key: id,
            tip,
            ...other
          })
        } else {
          list.push({
            type: "account",
            icon: 'zmdi-account',
            text: id,
            key: id,
            tip,
            ...other
          })
        }
      }
      // Update to state
      this.myPrivilegeData = list
    },
    //--------------------------------------
    async reloadDepartments(com) {
      let comId = com.id
      let deptRoot = _.get(this.myDeptCache, comId)
      if (_.isEmpty(deptRoot)) {
        let cmdText = Ti.S.renderBy(this.myDeptBy, com)
        deptRoot = await Wn.Sys.exec2(cmdText, { as: "json" })
        this.myDeptCache[comId] = deptRoot
        // Build Map
        let deptMap = {}
        Ti.Trees.walkDeep(deptRoot, ({ id, node }) => {
          //console.log("dept", id, node)
          deptMap[id] = node
        })
        this.myDeptMap[comId] = deptMap
      }
      return deptRoot
    },
    //--------------------------------------
    async reload() {
      this.loading = true
      // Reload accountHome and roleHome
      let cmdText = 'domain site -cqn -keys "^(id|nm|ph|title)$"'
      let site = await Wn.Sys.exec2(cmdText, { as: "json" })
      this.myAccountHome = _.get(site, "accountHome")
      this.myRoleHome = _.get(site, "roleHome")
      this.myCompanyBy = _.get(site, "companyBy")
      this.myDeptBy = _.get(site, "deptBy")
      this.myProjectBy = _.get(site, "projectBy")

      // Reload Accounts
      let km = '^(id|nm|title|nickname|icon|thumb)$';
      if (this.myAccountHome) {
        cmdText = `thing id:${this.myAccountHome.id} query -cqn -e '${km}'`
        this.myAccounts = await Wn.Sys.exec2(cmdText, { as: "json" })
      } else {
        this.myAccounts = []
      }

      // Reload Roles
      if (this.myRoleHome) {
        cmdText = `thing id:${this.myRoleHome.id} query -cqn -e '${km}'`
        this.myRoles = await Wn.Sys.exec2(cmdText, { as: "json" })
      } else {
        this.myRoles = []
      }

      // Reload companies
      if (this.myCompanyBy) {
        cmdText = this.myCompanyBy
        this.myCompanies = await Wn.Sys.exec2(cmdText, { as: "json" })
      } else {
        this.myCompanies = []
      }

      // Reload projects
      if (this.myProjectBy) {
        cmdText = this.myProjectBy
        this.myProjects = await Wn.Sys.exec2(cmdText, { as: "json" })
      } else {
        this.myProjects = []
      }

      // Build map
      this.myAccountMap = this.buildMap(this.myAccounts, "id")
      this.myRoleMap = this.buildMap(this.myRoles, "nm")
      this.myCompanyMap = this.buildMap(this.myCompanies, "id")
      this.myProjectMap = this.buildMap(this.myProjects, "id")

      // Eval data
      await this.evalPrivilegeData()

      this.loading = false
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "value": "evalPrivilegeData"
  },
  //////////////////////////////////////////
  mounted: function () {
    this.reload()
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-table-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/table/ti-table-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  "iconBy": {
    type: [String, Function],
    default: null
  },
  "indentBy": {
    type: [String, Function],
    default: null
  },
  "fields": {
    type: Array,
    default: () => []
  },
  "head": {
    type: String,
    default: "frozen",
    validator: v =>
      Ti.Util.isNil(v)
      || /^(frozen|none|normal)$/.test(v)
  },
  "border": {
    type: String,
    default: "cell",
    validator: v => /^(row|column|cell|none)$/.test(v)
  },
  "autoScrollIntoView": {
    type: Boolean,
    default: true
  },
  // Virtual render neccessary rows (subset of the larget list)
  // we need a hint of row height
  "virtualRowHeight": {
    type: Number,
    default: 40
  },
  "headDisplay": {
    type: [String, Object, Array],
    default: undefined
  },
  "columnResizable": {
    type: Boolean,
    default: false
  },
  "canCustomizedFields": {
    type: Boolean,
    default: false
  },
  "keepCustomizedTo": {
    type: String,
    default: undefined
  },
  "enableScope": {
    type: Boolean,
    default: false
  },
  "checkIcons": {
    type: Object,
    default: () => ({
      on: "fas-check-square",
      off: "far-square"
    })
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-obj-preview.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/preview/wn-obj-preview.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //////////////////////////////////////////
  data: () => ({
    isInFullScreen: false,
    isShowInfo: false,
    isFloatInfo: false,
    uploading: 0,
    uploadedTimestamp: undefined
  }),
  //////////////////////////////////////////
  props: {
    "meta": {
      type: Object,
      default: () => ({})
    },
    "status": {
      type: Object,
      default: () => ({})
    },
    "blankAs": {
      type: Object,
      default: () => ({
        icon: "fas-braille",
        text: "i18n:empty"
      })
    },
    "blankClass": {
      type: String,
      default: "as-big",
      validator: v => /^as-(big|hug|big-mask|mid-tip)$/.test(v)
    },
    "actions": {
      type: Array,
      default: () => ["fullscreen", "newtab", "download", "info"]
    },
    "writable": {
      type: Boolean,
      default: false
    },
    "browserBuiltIn": {
      type: [String, RegExp, Function, Object, Array],
      default: () => /^(application\/pdf)$/
    },
    "showInfo": {
      type: Boolean,
      default: false
    },
    "floatInfo": {
      type: Boolean,
      default: false
    },
    "editInfoBy": {
      type: [Function, String],
      default: null
    },
    "infoPosition": {
      type: String,
      default: "bottom",
      validator: (val) => /^(bottom|left)$/.test(val)
    },
    "infoNameWidth": {
      type: [String, Number],
      default: 50
    },
    "infoValueWidth": {
      type: [String, Number],
      default: 200
    },
    "infoFields": {
      type: Array,
      default: () => ["nm", "tp", "mime", "width", "height", "len", "duration"]
    },
    // Store the status in Local
    "stateLocalKey": {
      type: String,
      default: null
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    hasMeta() {
      return _.isEmpty(this.meta) ? false : true
    },
    //--------------------------------------
    MetaId() {
      return _.get(this.meta, "id")
    },
    //--------------------------------------
    MetaMime() {
      return _.get(this.meta, "mime")
    },
    //--------------------------------------
    TopClass() {
      return {
        "is-fullscreen": this.isInFullScreen,
        "is-show-info": this.isShowInfo,
        "is-float-info": this.isFloatInfo,
        [`is-info-at-${this.infoPosition}`]: true
      }
    },
    //--------------------------------------
    DataSource() {
      if (!this.meta)
        return ""
      let link = Wn.Util.getDownloadLink(this.meta, {
        mode: "auto",
        timestamp: this.uploadedTimestamp
      })
      return link.toString();
    },
    //--------------------------------------
    DataIcon() {
      return Wn.Util.getIconObj(this.meta)
    },
    //--------------------------------------
    DataTitle() {
      return Wn.Util.getObjDisplayName(this.meta)
    },
    //--------------------------------------
    BrowserCanPreviewBuiltin() {
      if (this.browserBuiltIn) {
        let fn = Ti.AutoMatch.parse(this.browserBuiltIn)
        let bbf = this.browserBuiltIn
        if (_.isString(bbf) || _.isRegExp(bbf)) {
          return (o) => {
            return fn(o.mime)
          }
        }
        return fn
      }
      return () => false
    },
    //--------------------------------------
    PreviewCom() {
      if (this.meta) {
        // File
        let mime = this.MetaMime
        let m = /^(video|audio|image)\/.+$/.exec(mime)
        // Video/Audio/Image
        if (m) {
          return {
            comType: `ti-media-${m[1]}`,
            comConf: {
              src: this.DataSource
            }
          }
        }
        // Browser built-in preview
        if (this.BrowserCanPreviewBuiltin(this.meta)) {
          return {
            comType: 'WebWidgetFrame',
            comConf: {
              src: `/o/content?str=id:${this.meta.id}&d=raw`,
              width: "100%",
              height: "100%"
            }
          }
        }
        // Pure text 
        if (/^text\//.test(mime)) {
          return {
            comType: "WnObjText",
            comConf: {
              meta: this.meta
            }
          }
        }
        // Youtube
        if ("youtube" == this.meta.tp && this.meta.yt_video_id) {
          let thumbUrl;
          let preview = Wn.Util.genPreviewObj(this.meta)
          if ("image" == preview.type) {
            thumbUrl = preview.value
          }
          return {
            comType: "NetYoutubePlayer",
            comConf: {
              value: {
                id: this.meta.yt_video_id,
                thumbUrl
              }
            }
          }
        }
        // Binary
        return {
          comType: "ti-media-binary",
          comConf: {
            src: this.DataSource,
            icon: this.DataIcon,
            title: this.DataTitle,
            download: this.meta.race == 'FILE'
          }
        }
      }
    },
    //--------------------------------------
    PreviewInfoPinIcon() {
      return this.isFloatInfo
        ? 'fas-thumbtack'
        : 'zmdi-layers'
    },
    //--------------------------------------
    PrevewInfoFields() {
      return Wn.Obj.evalFields(this.meta, this.infoFields, (fld) => {
        if (fld.quickName && _.isUndefined(fld.value)) {
          return
        }
        if ("Group" == fld.type) {
          return fld
        }
        return _.defaults(fld, {
          nameWidth: this.infoNameWidth,
          valueWidth: this.infoValueWidth
        })
      })
    },
    //--------------------------------------
    TheActions() {
      let list = []
      if (this.hasMeta) {
        _.forEach(this.actions, (it) => {
          //..........................
          // full screen
          if ("fullscreen" == it) {
            if (!this.isInFullScreen) {
              list.push({
                icon: "zmdi-fullscreen",
                text: "i18n:wop-fullscreen-enter",
                action: () => this.enterFullscreen()
              })
            }
            // Exit FullScreen
            else {
              list.push({
                icon: "zmdi-fullscreen-exit",
                text: "i18n:wop-fullscreen-quit",
                action: () => this.exitFullscreen()
              })
            }
          }
          //..........................
          // Open
          else if ("newtab" == it) {
            list.push({
              icon: "zmdi-open-in-new",
              text: "i18n:open-newtab",
              action: () => this.openInNewTab()
            })
          }
          //..........................
          // Download
          else if ("download" == it) {
            list.push({
              icon: "zmdi-download",
              text: "i18n:download-to-local",
              action: () => this.download()
            })
          }
          //..........................
          // Toggle Info
          else if ("info" == it) {
            if (!this.isShowInfo) {
              list.push({
                icon: "zmdi-info",
                text: "i18n:info",
                action: () => this.doShowInfo()
              })
            }
            // Show Info
            else {
              list.push({
                icon: "zmdi-info-outline",
                text: "i18n:info",
                action: () => this.doHideInfo()
              })
            }
          }
          //..........................
          else if (_.isPlainObject(it) && it.action) {
            list.push(it)
          }
          //..........................
        })
      }
      //................................
      return list
    },
    //--------------------------------------
    UploadDragAndDropHandler() {
      if (this.writable) {
        return this.OnDropFile
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnClipBoardPoste({ clipboardData } = {}) {
      // Guard
      if (!/^image\//.test(this.MetaMime)) {
        return
      }
      //console.log("OnClipBoardPoste", clipboardData)
      let imgF = Ti.Dom.getImageDataFromClipBoard(clipboardData)
      if (imgF) {
        this.OnDropFile([imgF])
      }
    },
    //--------------------------------------
    OnAction(action) {
      // Exec command
      if (_.isString(action)) {
        Ti.App(this).exec(actionName)
      }
      // Call function
      else if (_.isFunction(action)) {
        action()
      }
    },
    //--------------------------------------
    OnEditInfo() {
      if (this.meta) {
        // Command
        if (_.isString(this.editInfoBy)) {
          Ti.App(this).exec(this.editInfoBy, this.meta)
        }
        // Function Invoking
        else if (_.isFunction(this.editInfoBy)) {
          this.editInfoBy(this.meta)
        }
        // Default to open the dialog
        else {
          Wn.EditObjMeta(this.meta)
        }
      }
    },
    //--------------------------------------
    async OnDropFile(files) {
      // console.log("OnDropFiles", files)
      if (!this.writable || !this.MetaId)
        return

      // It will upload the first file
      let file = _.first(files)
      let total = file.size
      //console.log("Drop file", file)

      let needConvImg = false
      if (!file || this.MetaMime != file.type) {
        let vars = { newType: file.type, oldType: this.MetaMime }
        needConvImg = /^image\//.test(this.MetaMime)
        // Maybe I can auto-covert image for user ...
        if (needConvImg) {
          if (!(await Ti.Confirm("i18n:wn-o-type-miss-match-convimg", {
            vars, type: "warn"
          }))) {
            return
          }
        }
        // not image, can not auto-convert
        else {
          return await Ti.Toast.Open("i18n:wn-o-type-miss-match", {
            vars, type: "warn"
          });
        }
      }

      let { ok, data } = await Wn.Io.uploadFile(file, {
        target: `id:${this.MetaId}`,
        mode: "s",
        progress: ({ loaded = 0 } = {}) => {
          this.uploading = loaded / total
          //console.log(this.uploading)
        }
      })

      if (ok) {
        // Auto covert image
        if (needConvImg) {
          let oph = `id:${this.meta.id}`
          let ofmt = this.meta.tp || "jpeg"
          let cmdText = `imagic ${oph} -format ${ofmt} -out inplace; o ${oph} @json -cqn`
          data = await Wn.Sys.exec2(cmdText, { as: "json" })
        }

        // Notify change
        this.$notify("obj:write", data)
        this.uploading = 0
        this.uploadedTimestamp = Date.now()
      }
    },
    //--------------------------------------
    async OnSelectLocalFilesToUpload(evt) {
      await this.OnDropFile(evt.target.files)
      this.$refs.file.value = ""
    },
    //--------------------------------------
    openLocalFileSelectdDialog() {
      this.$refs.file.click()
    },
    //--------------------------------------
    enterFullscreen() {
      this.isInFullScreen = true
      this.resizeMediaViewport()
    },
    //--------------------------------------
    exitFullscreen() {
      this.isInFullScreen = false
      this.resizeMediaViewport()
    },
    //--------------------------------------
    doShowInfo() {
      this.isShowInfo = true
      this.saveStateToLocal()
      this.resizeMediaViewport()
    },
    //--------------------------------------
    doHideInfo() {
      this.isShowInfo = false
      this.saveStateToLocal()
      this.resizeMediaViewport()
    },
    //--------------------------------------
    toggleInfoFloat() {
      this.isFloatInfo = !this.isFloatInfo
      this.saveStateToLocal()
      this.resizeMediaViewport()
    },
    //--------------------------------------
    resizeMediaViewport() {
      for (let $child of this.$children) {
        if (_.isFunction($child.onResizeViewport)) {
          this.$nextTick(() => {
            $child.onResizeViewport()
          })
        }
      }
    },
    //--------------------------------------
    openInNewTab() {
      let link = Wn.Util.getAppLink(this.meta)
      Ti.Be.OpenLink(link)
    },
    //--------------------------------------
    download() {
      let link = Wn.Util.getDownloadLink(this.meta)
      Ti.Be.OpenLink(link)
    },
    //--------------------------------------
    saveStateToLocal() {
      if (this.stateLocalKey) {
        Ti.Storage.session.mergeObject(this.stateLocalKey, {
          isShowInfo: this.isShowInfo,
          isFloatInfo: this.isFloatInfo
        })
        // let state = Ti.Storage.session.getObject(this.stateLocalKey)
        // console.log("-> saveStateToLocal", state)
      }
    },
    //--------------------------------------
    loadStateFromLocal() {
      if (this.stateLocalKey) {
        let state = Ti.Storage.session.getObject(this.stateLocalKey)
        //console.log("<- loadStateFromLocal", state)
        _.defaults(state, {
          isShowInfo: this.isShowInfo,
          isFloatInfo: this.isFloatInfo
        })
        this.isShowInfo = state.isShowInfo
        this.isFloatInfo = state.isFloatInfo
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "showInfo": function (val) {
      //console.log("showInfo watched")
      this.isShowInfo = val
    },
    "floatInfo": function (val) {
      //console.log("floatInfo watched")
      this.isFloatInfo = val
    }
  },
  //////////////////////////////////////////
  created: function () {
    this.OnPaste = evt => {
      this.OnClipBoardPoste(evt)
    }
  },
  //////////////////////////////////////////
  mounted: function () {
    this.isShowInfo = this.showInfo
    this.isFloatInfo = this.floatInfo
    this.$nextTick(() => {
      this.loadStateFromLocal()
    })
    // Watch the clipboard
    window.addEventListener("paste", this.OnPaste)
  },
  //////////////////////////////////////////
  beforeDestroy: function () {
    window.removeEventListener("paste", this.OnPaste)
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-label-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/label/ti-label-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "value": null,
  "dict": {
    type: [String, Ti.Dict],
    default: undefined
  },
  // @see TiComboInputProp#dictVars
  "dictVars": {
    type: Object,
    default: () => ({})
  },
  "valueMustInDict": {
    type: Boolean,
    default: true
  },
  "valueCase": {
    type: String,
    default: undefined,
    validator: (cs) => Ti.Util.isNil(cs) || Ti.S.isValidCase(cs)
  },
  "trimed": {
    type: Boolean,
    default: true
  },
  // Context vars for prop format
  "vars": {
    type: Object
  },
  "format": {
    type: [String, Function, Object],
    default: undefined
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "href": {
    type: [String, Function],
    default: undefined
  },
  "newTab": {
    type: Boolean,
    default: false
  },
  "editable": {
    type: Boolean,
    default: false
  },
  "navigable": {
    type: Boolean,
    default: false
  },
  "hover": {
    type: [Array, String],
    default: () => ["suffixIcon"]
  },
  "suffixIconForCopy": {
    type: Boolean,
    default: false
  },
  "notifyName": {
    type: String
  },
  "notifyPayload": undefined,
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "placeholder": {
    type: [String, Number],
    default: "i18n:nil"
  },
  "autoI18n": {
    type: Boolean,
    default: true
  },
  "prefixIcon": {
    type: String,
    default: undefined
  },
  "prefixText": {
    type: [String, Number],
    default: undefined
  },
  "suffixText": {
    type: [String, Number],
    default: undefined
  },
  "suffixIcon": {
    type: [String, Number],
    default: undefined
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width": {
    type: [Number, String],
    default: undefined
  },
  "height": {
    type: [Number, String],
    default: undefined
  },
  "valueMaxWidth": {
    type: [Number, String],
    default: undefined
  }
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-obj-form-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/form.bak/wn-obj-form-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  "fuse" : {
    type : Object,
    default : ()=>({
      key  : "wn-obj-form",
      noti : undefined
    })
  },
  // {method : "dispatch", target : "main/onChanged"}
  "setDataBy" : {
    type : [String, Object, Boolean],
    default : undefined
  },
  // {method : "dispatch", target : "main/changeMeta"}
  "updateBy" : {
    type : [String, Object, Boolean],
    default : undefined
  },
  // {method : "commit", target : "main/setFieldStatus"}
  "setFieldStatusBy" : {
    type : [String, Object, Boolean],
    default : undefined
  },
  // Load fields setting 
  "fields" : {
    type : [String, Array, Function],
    default : ()=>[]
  },
  // Load fields setting 
  "data" : {
    type : [String, Object],
    default : undefined
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-exporter-form.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/data/exporter-form/wn-exporter-form.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////////
  data: () => ({
    myData: {},
    myMappingFiles: [],
    myCanFields: {
      /*mappingName : []*/
    },
    forceShowMapping: false
  }),
  ///////////////////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    // candicate mapping files
    // If DIR, then get all json in it is option mapping files.
    // It will show drop list when multi mapping files.
    // Anyway, it need a mapping file, to get all avaliable fields.
    // [required]
    mappingPath: {
      type: [String, Array]
    },
    // If multi mapping paths, the first one(order by name) will
    // be used defaultly. But you can indicate it in this prop.
    // [optional]
    defaultMappingName: {
      type: String
    },
    // A Tmpl to get the output target path
    // the base render context :
    // {
    //   type: "xlsx",        // <- this.oututMode
    //   yy:"2023",MM:"02",dd:"19",HH:"12",mm:"00",ss:"00"
    //   today:"2023-02-19", now:"2023-02-19_120000"
    // }
    // If function, it will be invoke as `(context={}):String`
    // [required]
    outputName: {
      type: [String, Function]
    },
    // TODO: Maybe allow user to choose the output folder in futrue
    outputTarget: {
      type: [String, Function]
      // sunc as "~/tmp/${name}"
    },
    // additional render vars for output target
    vars: {
      type: Object,
      default: () => ({})
    },
    data: {
      type: Object
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    outputType: {
      type: String,
      default: "xlsx"
    },
    outputTypeOptions: {
      type: Array,
      default: () => ["xlsx", "json"]
    },
    outputMode: {
      type: String,
      default: "checked"
    },
    outputModeOptions: {
      type: Array,
      default: () => ["checked", "current", "scope"]
    },
    // Auto remove target when expired.
    // null, never expired
    targetExpi: {
      type: String,
      default: "1h"
    },
    targetExpiOptions: {
      type: Array,
      default: () => ["1h", "6h", "1d", "never"]
    },
    // AutoMatch expression Object, to filter the default mapping fields
    // if nil, all fields will be selected
    // defaultFields: {
    //   type: [String, Array, Object],
    // },
    // A Tmpl as export command, which context:
    /*{
      ... this.vars,          // <- this.vars
      type: "xlsx",           // <- this.oututMode
      mappingId:"89ju...",    // <- this.mappingPath
      name :"xxx.xlsx",     // <- this.outputName
      fields: ['a','b'],      // output field white list
      fieldMatch : "^(a|b)$", // output field AutoMatch String
      expi: "%ms:now+1d",     // <- this.targetExpi
    }*/
    // If function, it will be invoke as `(context={}):String`
    // command: {
    //   type: [String, Function],
    // },
    // // command input, if Array it will auto-stringify to JSON
    // commandInput: {
    //   type: [String, Array],
    // },
    // // additional render vars for output target
    // vars: {
    //   type: Object,
    //   default: () => ({}),
    // },

    //-----------------------------------
    // Aspect
    //-----------------------------------
    title: {
      type: String,
      default: undefined
    },
    gridColumnHint: {
      type: [String, Array],
      default: "[[5,1500],[4,1200],[3,900],[2,600],[1,300],0]"
    },
    fieldsGridColumnHint: {
      type: [String, Array],
      default: "[[6,1500],[5,1250],[4,1000],[3,750],[2,500],1]"
    }
  },
  ///////////////////////////////////////////////////////
  computed: {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass({});
    },
    //---------------------------------------------------
    MappingFileId() {
      return _.get(this.myData, "mapping");
    },
    //---------------------------------------------------
    MappingFields() {
      return _.get(this.myCanFields, this.MappingFileId) || [];
    },
    //---------------------------------------------------
    OutputModeOptions() {
      //console.log("computed OutputModeOptions",this.outputModeOptions)
      return this.explainOptions(
        this.outputModeOptions,
        this.explainOutputModeOption
      );
    },
    //---------------------------------------------------
    OutputTypeOptions() {
      return this.explainOptions(
        this.outputTypeOptions,
        this.explainOutputTypeOption
      );
    },
    //---------------------------------------------------
    TargetExpiOptions() {
      return this.explainOptions(
        this.targetExpiOptions,
        this.explainExpiOption
      );
    },
    //---------------------------------------------------
    FormFields() {
      let fields = [];

      //
      // Choose mapping file
      //
      if (this.myMappingFiles.length > 1 || this.forceShowMapping) {
        fields.push({
          title: "i18n:wn-export-c-mapping",
          name: "mapping",
          tip: {
            text: "i18n:wn-export-c-mapping-tip",
            size: "normal"
          },
          comType: "TiDroplist",
          comConf: {
            placeholder: "i18n:wn-export-c-mapping-phd",
            options: this.myMappingFiles,
            iconBy: "icon",
            valueBy: "id",
            textBy: "title|nm",
            dropDisplay: ["<icon:fas-exchange-alt>", "title|nm"]
          }
        });
      }

      //
      // Choose Fiels
      //
      fields.push(
        {
          name: "fields",
          type: "Array",
          colSpan: 10,
          comType: "TiBulletCheckbox",
          comConf: {
            title: "i18n:wn-export-choose-fields",
            options: this.MappingFields,
            gridColumnHint: this.fieldsGridColumnHint,
            autoI18n: true
          }
        },
        {
          icon: "zmdi-settings",
          title: "i18n:wn-export-setup"
        }
      );

      //
      // More Setting
      //

      // choose output type
      if (this.OutputTypeOptions.length > 1) {
        fields.push({
          title: "i18n:wn-export-c-type",
          name: "type",
          comType: "TiSwitcher",
          comConf: {
            allowEmpty: false,
            options: this.OutputTypeOptions
          }
        });
      }

      // Output target mode
      if (this.OutputModeOptions.length > 1) {
        fields.push({
          title: "i18n:wn-export-c-mode",
          name: "mode",
          comType:
            this.OutputModeOptions.length > 3 ? "TiDroplist" : "TiSwitcher",
          comConf: {
            allowEmpty: false,
            options: this.OutputModeOptions
          }
        });
      }
      fields.push({
        title: "i18n:wn-data-scope",
        name: "scope",
        tip: "[small]i18n:wn-data-scope-tip",
        visible: {
          mode: "scope"
        },
        comType: "TiInput",
        comConf: {
          placeholder: "i18n:wn-data-scope-phd",
          width: "2rem"
        }
      });

      if (this.TargetExpiOptions.length > 1) {
        fields.push({
          title: "i18n:wn-export-c-expi",
          name: "expi",
          tip: "i18n:wn-export-c-expi-tip",
          comType:
            this.TargetExpiOptions.length > 3 ? "TiDroplist" : "TiSwitcher",
          comConf: {
            allowEmpty: false,
            options: this.TargetExpiOptions
          }
        });

        // Output target name
        fields.push({
          title: "i18n:wn-export-c-name",
          name: "name",
          tip: "i18n:wn-export-c-name-tip",
          colSpan: 2,
          comType: "TiInput",
          comConf: {
            placeholder: "i18n:wn-export-c-name-phd",
            hover: ["prefixIcon", "suffixText"],
            prefixIcon: "zmdi-minus",
            suffixText: "i18n:reset",
            suffixTextNotifyName: "target_name:reset"
          }
        });
      }
      return fields;
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods: {
    //---------------------------------------------------
    OnChange(data) {
      this.changeData(data);
    },
    //---------------------------------------------------
    OnOutputFieldsChange(fields = []) {
      this.changeData({ fields });
    },
    //---------------------------------------------------
    OnResetTargetName() {
      let name = this.genOutputName();
      this.changeData({ name });
    },
    //---------------------------------------------------
    genOutputName(target = this.outputName) {
      //console.log(target)
      let d = new Date();
      let payload = Ti.DateTime.genFormatContext(d);
      payload.today = Ti.DateTime.format(d, "yyyy-MM-dd");
      payload.now = Ti.DateTime.format(d, "yyyy-MM-dd_HHmmss");
      _.assign(payload, this.vars);
      if (_.isFunction(target)) {
        return target(payload);
      }
      if (_.isString(target)) {
        let taTmpl = Ti.Tmpl.parse(target);
        return taTmpl.render(payload);
      }
      throw `Invalid target: [${target}]`;
    },
    //---------------------------------------------------
    explainOptions(options = [], fn = _.identity) {
      let re = [];
      if (!_.isEmpty(options)) {
        for (let it of options) {
          let li = fn(it);
          if (!Ti.Util.isNil(li)) {
            re.push(li);
          }
        }
      }
      return re;
    },
    //---------------------------------------------------
    explainOutputTypeOption(it) {
      if (_.isString(it)) {
        return {
          "xlsx": { value: "xlsx", text: "i18n:wn-export-c-type-xls" },
          "json": { value: "json", text: "i18n:wn-export-c-type-json" }
        }[it];
      }
      return it;
    },
    //---------------------------------------------------
    explainOutputModeOption(it) {
      if (_.isString(it)) {
        return {
          "checked": {
            value: "checked",
            text: "i18n:wn-export-c-mode-checked"
          },
          "current": {
            value: "current",
            text: "i18n:wn-export-c-mode-current"
          },
          "scope": { value: "scope", text: "i18n:wn-data-scope" },
          "all": { value: "all", text: "i18n:wn-export-c-mode-all" }
        }[it];
      }
      return it;
    },
    //---------------------------------------------------
    explainExpiOption(it) {
      if (_.isString(it)) {
        return (
          {
            "1h": { value: "1h", text: "i18n:wn-expi-1h" },
            "2h": { value: "2h", text: "i18n:wn-expi-2h" },
            "6h": { value: "6h", text: "i18n:wn-expi-6h" },
            "12h": { value: "12h", text: "i18n:wn-expi-12h" },

            "1d": { value: "1d", text: "i18n:wn-expi-1d" },
            "3d": { value: "3d", text: "i18n:wn-expi-3d" },
            "7d": { value: "7d", text: "i18n:wn-expi-7d" },
            "14d": { value: "14d", text: "i18n:wn-expi-14d" },
            "30d": { value: "30d", text: "i18n:wn-expi-30d" },

            "never": { value: null, text: "i18n:wn-expi-never" }
          }[it] || { text: it, value: it }
        );
      }
      return it;
    },
    //---------------------------------------------------
    async reloadMappingFields(mappingId = this.MappingFileId) {
      if (mappingId && !this.myCanFields[mappingId]) {
        let oMapping = await Wn.Io.loadMetaById(mappingId);
        if (!oMapping) {
          this.forceShowMapping = true;
          return;
        }
        // Try Cache
        let json = await Wn.Io.loadContent(oMapping);
        let cans = [];
        if (!Ti.S.isBlank(json)) {
          let list = JSON.parse(json);
          _.forEach(list, (li, key) => {
            // Group:  "Genaral": "-------------",
            if (/^[-]{5,}$/.test(li)) {
              cans.push({ title: key });
            }
            // Simple: "nm": "Name",
            else if (_.isString(li)) {
              cans.push({
                text: li,
                value: key
              });
            }
            // Complex: "race": {...}
            else if (li.name) {
              cans.push({
                text: li.name,
                value: key,
                asDefault: li.asDefault
              });
            }
          });
        }
        this.myCanFields = _.assign({}, this.myCanFields, {
          [this.MappingFileId]: cans
        });
      }
    },
    //---------------------------------------------------
    async reload() {
      //console.log("WDE:reload");
      // reload all option mapping paths
      let paths = _.concat(this.mappingPath);
      let fld = "^(id|race|tp|mime|nm|name|title)$";
      let list = [];
      for (let path of paths) {
        if (!path) {
          continue;
        }
        let oF = await Wn.Sys.exec2(`o '${path}' @name @json '${fld}' -cqn`, {
          as: "json"
        });
        if (oF && oF.id) {
          if ("DIR" == oF.race) {
            let files = await Wn.Sys.exec2(
              `o 'id:${oF.id}' @query 'tp:"json"' @name @json '${fld}' -cqnl`,
              { as: "json" }
            );
            if (_.isArray(files)) {
              list.push(...files);
            }
          }
          // Just a file
          else {
            list.push(oF);
          }
        }
      }
      // Found the default
      let mappingId = _.get(this.data, "mapping");
      if (!_.isEmpty(list) && !mappingId && _.isEmpty(this.MappingFields)) {
        mappingId = _.first(list).id;
        if (this.defaultMappingName) {
          for (let li of list) {
            if (li.name == this.defaultMappingName) {
              mappingId = li.id;
              break;
            }
          }
        }
      }
      // Try reload mapping fields
      this.reloadMappingFields(mappingId);

      // Notify change
      let data = {
        type: this.outputType,
        mode: this.outputMode,
        mapping: mappingId,
        name: this.genOutputName(
          _.get(this.data, "outputName") || this.outputName
        )
      };
      if (this.targetExpi) {
        data.expi = `${this.targetExpi}`;
      }
      if (this.data) {
        _.assign(data, this.data);
      }
      this.changeData(data);

      this.myMappingFiles = list;
    },
    //---------------------------------------------------
    changeData(data) {
      this.myData = _.assign({}, this.myData, data);
      this.tryNotifyChange(this.myData);
    },
    //---------------------------------------------------
    tryNotifyChange(data) {
      if (!_.isEqual(this.data, data)) {
        this.$notify("change", data);
      }
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  watch: {
    "data.mapping" : "reloadMappingFields"
  },
  ///////////////////////////////////////////////////////
  mounted: async function () {
    //console.log("mouned")
    await this.reload();
  }
  ///////////////////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'web-shelf-gallery.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/shelf/gallery/web-shelf-gallery.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data : ()=>({
    myHoverIndex: -1,
    myRect: {width:0, height:0},
    myItemList: []
  }),
  //////////////////////////////////////////
  props : {
    //-----------------------------------
    // Data
    //-----------------------------------
    "data" : {
      type : Array,
      default : ()=>[]
    },
    "currentIndex" : {
      type : Number,
      default : -1
    },
    "vars" : {
      type : Object,
      default : undefined
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "comType" : {
      type: String,
      default : undefined
    },
    "comConf" : {
      type : Object,
      default : ()=>({})
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "minScale" : {
      type : Number,
      default : 0.5
    },
    //-----------------------------------
    // Measure
    //-----------------------------------
    // item scale = width/height
    "itemWH" : {
      type : Number,
      default : undefined
    },
    "width" : {
      type : [Number, String],
      default : undefined
    },
    "height" : {
      type : [Number, String],
      default : undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    },
    //--------------------------------------
    DataItems() {
      return this.data || []
    },
    //--------------------------------------
    ItemStyles() {
      if(_.isEmpty(this.data) || this.myHoverIndex < 0){
        return []
      }
      // Measure: viewport sizing
      let items = this.data || []
      let {width, height} = this.myRect
      let n = this.DataItems.length
      let half = width / (n+1)
      let unit = half * 2

      // Scale
      let hoveI = this.myHoverIndex
      let lastI = n - 1
      let scale = 1 - this.minScale

      // At left
      // 0 -> [][][][][]V[][] <- last
      //              hoveI
      let stepL = hoveI > 0 ? scale / hoveI  : 0
      let stepR = hoveI < lastI ? scale / (lastI - hoveI) : 0


      // Loop for style
      let itW = this.itemWH ? (height*this.itemWH) : 0
      let list = []
      for(let i=0; i<this.DataItems.length; i++) {
        let left  = half * i
        let width = itW || unit
        if(itW) {
          left -= (itW - unit) / 2
        }
        // About scale
        let d = Math.abs(i - hoveI)
        let transform = null
        // Need to transform scale
        if(i != hoveI) {
          let s = i < hoveI
                    ? d * stepL
                    : d * stepR
          transform = `scale(${1-s})`
        }
        list.push(Ti.Css.toStyle({
          left, width, transform,
          zIndex : n - d
        }))
      }

      return list
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnResize() {
      this.myRect = Ti.Rects.createBy(this.$refs.con)
    },
    //--------------------------------------
    OnMouseLeave() {
      let index = this.currentIndex
      if(index>=0) {
        index = _.clamp(this.currentIndex, 0, this.DataItems.length)
      } else {
        index = parseInt(this.DataItems.length / 2)
      }
      this.myHoverIndex = index
    },
    //--------------------------------------
    OnMouseEnterItem({index}) {
      this.myHoverIndex = index
    },
    //--------------------------------------
    getItemClass(index) {
      return {
        "is-current" : index == this.myHoverIndex
      }
    },
    //--------------------------------------
    getItemStyle(index) {
      return _.get(this.ItemStyles, index)
    },
    //--------------------------------------
    evalDataItemList() {
      this.myHoverIndex = this.currentIndex;
      let vars = _.cloneDeep(this.vars)
      let list = []
      _.forEach(this.data, (it, index) => {
        let comType = Ti.Util.explainObj(it, this.comType)
        let comConf;
        if(vars) {
          vars.item = it
          comConf = Ti.Util.explainObj(vars, this.comConf) 
        } else {
          comConf = Ti.Util.explainObj(it, this.comConf)
        }
        list.push({
          index,
          comType, comConf
        })
      })
      this.myItemList = list
      if(this.myHoverIndex<0 || this.myHoverIndex>=list.length) {
        this.myHoverIndex = parseInt(list.length / 2)
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "data" : "evalDataItemList",
    "currentIndex" : {
      handler : function(newVal) {
        this.myHoverIndex = newVal
      },
      immediate: true
    }
  },
  //////////////////////////////////////////
  mounted: function() {
    this.OnResize()
    this.evalDataItemList()

    Ti.Viewport.watch(this, {
      resize : _.debounce(()=>this.OnResize(), 10)
    })
  },
  ///////////////////////////////////////////////////
  beforeDestroy : function(){
    Ti.Viewport.unwatch(this)
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-fileset-list.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/fileset/list/wn-fileset-list.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data: ()=>({
    updating : false,
    saving : false,
    reloading : undefined,
    listData : [],
    currentIndex : undefined,
    currentMeta : undefined,
    currentContent : undefined,
    loadedCurrentContent : undefined,
    metaFieldStatus : {}
  }),
  ////////////////////////////////////////////////////
  props : {
    "match" : {
      type : Object,
      default : ()=>({
        race : "FILE"
      })
    },
    "createTip" : {
      type : String,
      default : "i18n:wn-fsc-mail-tmpl-new"
    },
    "listSize" : {
      type : [Number, String],
      default : 0.3
    },
    "listIcon" : {
      type : String,
      default : "far-list-alt"
    },
    "listTitle" : {
      type : String,
      default : "i18n:list"
    },
    "listType" : {
      type : String,
      default : "TiList"
    },
    "listConf" : {
      type : Object,
      default : ()=>({})
    },
    "metaSize" : {
      type : [Number, String],
      default : 0.3
    },
    "metaIcon" : {
      type : String,
      default : "fas-info-circle"
    },
    "metaTitle" : {
      type : String,
      default : "i18n:properties"
    },
    "metaType" : {
      type : String,
      default : "TiForm"
    },
    "metaConf" : {
      type : Object,
      default : ()=>({})
    },
    "detailSize" : {
      type : [Number, String],
      default : undefined
    },
    "detailIcon" : {
      type : String,
      default : "fas-info-circle"
    },
    "detailTitle" : {
      type : String,
      default : "i18n:detail"
    },
    "detailType" : {
      type : String,
      default : "TiTextRaw"
    },
    "detailConf" : {
      type : Object,
      default : ()=>({})
    },
    "autoSelect" : {
      type : Boolean,
      default : true
    },
    "autoKeepSelectBy" : {
      type : String,
      default : "CURRENT_ID"
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    isCurrentContentChanged() {
      if(this.currentMeta) {
        return this.currentContent != this.loadedCurrentContent
      }
    },
    //------------------------------------------------
    hasCurrent() {
      return this.currentMeta ? true : false
    },
    //------------------------------------------------
    isGUILoading() {
      return this.updating || this.reloading || this.saving
    },
    //------------------------------------------------
    CurrentId() {
      return _.get(this.currentMeta, "id")
    },
    //------------------------------------------------
    GUILayout() {
      let listBlock = {
        title : this.listTitle,
        icon  : this.listIcon,
        name  : "list",
        size  : this.listSize,
        body  : "list"
      }
      let metaBlock = {
        title : this.metaTitle,
        icon  : this.metaIcon,
        size  : this.metaSize,
        name  : "meta",
        body  : "meta"
      }
      let detailBlock = {
        title : this.detailTitle,
        icon  : this.detailIcon,
        size  : this.detailSize,
        name  : "detail",
        body  : "detail",
        actions : [{
            name : "saving",
            text : "i18n:save",
            icon : "zmdi-floppy",
            altDisplay : {
              "icon" : "fas-spinner fa-pulse",
              "text" : "i18n:saving"
            },
            enabled : "changed",
            action : ()=> {
              this.doSaveCurrentContent()
            }
          }, {
            name : "reloading", 
            text : "i18n:reload",
            icon : "fas-sync",
            altDisplay : {
              "icon" : "fas-sync fa-pulse",
              "text" : "i18n:reloading"
            },
            enabled : "current",
            action : ()=> {
              this.doReloadCurrentContent()
            }
          }]
      }
      if(this.metaType && this.detailType) {
        return {
          type : "cols",
          border : true,
          blocks : [listBlock, {
              type : "rows",
              border : true,
              blocks : [metaBlock, detailBlock]
            }]
        }
      }
      if(this.metaType) {
        return {
          type : "cols",
          className : "show-border",
          blocks : [listBlock, metaBlock]
        }
      }
      return {
        type : "cols",
        className : "show-border",
        blocks : [listBlock, detailBlock]
      }
    },
    //------------------------------------------------
    GUISchema() {
      //..............................................
      let listConf = _.defaults({}, this.listConf, {
        onBeforeChangeSelect : async ()=>{
          if(!(await Ti.Fuse.get().fire())) {
            return false
          }
        },
        changedId : this.isCurrentContentChanged
          ? this.CurrentId
          : undefined,
        display : ["<icon:far-file>", "title|nm"],
        data : "=listData",
        onInit : ($list) => {
          this.$list = $list
        }
      })
      //..............................................
      let metaConf = _.defaults({}, this.metaConf, {
        autoShowBlank : true,
        blankAs : {
          icon : "fas-brush",
          text : "i18n:blank-to-edit"
        },
        data : "=currentMeta",
        fieldStatus : "=metaFieldStatus",
        fields : [{
          title: "i18n:wn-key-title",
          name : "title",
          comType : "ti-input"
        }, {
          title: "i18n:wn-key-nm",
          name : "nm",
          comType : "ti-input"
        }]
      })
      //..............................................
      let detailConf = _.defaults({}, this.detailConf, {
        value : "=currentContent"
      })
      //..............................................
      return {
        list : {
          comType : this.listType,
          comConf : Ti.Util.explainObj(this, listConf)
        },
        meta : {
          comType : this.metaType,
          comConf : Ti.Util.explainObj(this, metaConf)
        },
        detail : {
          comType : this.detailType,
          comConf : Ti.Util.explainObj(this, detailConf)
        }
      }
    },
    //------------------------------------------------
    DetailActionStatus() {
      return {
        saving : this.saving,
        reloading : this.reloading,
        changed : this.isCurrentContentChanged,
        current : this.hasCurrent
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    async OnListSelect({current, currentIndex}) {
      if(!current) {
        this.currentIndex = undefined
        this.currentMeta = undefined
        this.currentContent = undefined
      } else {
        this.currentIndex = currentIndex
        this.currentMeta = current
        await this.doReloadCurrentContent()
        this.metaFieldStatus = {}
      }
    },
    //------------------------------------------------
    OnListOpen() {
      // DO nothing
    },
    //------------------------------------------------
    OnMetaChange(payload) {
      // DO nothing
    },
    //------------------------------------------------
    async OnMetaFieldChange({name, value}) {
      if(this.hasCurrent) {
        this.updating = true
        this.metaFieldStatus = {
          [name] : {type : "spinning"}
        }
        try {
          let reo = await Wn.Io.update(this.currentMeta, {
            [name]: value
          })
          this.updateCurrentMeta(reo)

          this.$nextTick(()=>{
            this.metaFieldStatus = {
              [name] : {type : "ok"}
            }
            _.delay(()=>{
              this.metaFieldStatus = {}
            }, 800)
          })
        }
        // Error
        catch(err) {
          this.metaFieldStatus = {
            [name] : {
              type : "error",
              text : err.errMsg
            }
          }
        }
        // unmark
        finally {
          this.updating = false
        }
      }
    },
    //------------------------------------------------
    OnDetailChange(content) {
      this.currentContent = content
    },
    //------------------------------------------------
    async doCreate() {
      //console.log("doCreate for ", this.meta.ph)
      let newName = _.trim(await Ti.Prompt(this.createTip))

      if(!newName)
        return

      let cmdText = `touch id:${this.meta.id}/${newName}`
      await Wn.Sys.exec(cmdText)

      // Reload
      await this.reload()

      // Highlight it
      let li = this.findDataInListByName(newName)

      if(li && this.$list) {
        this.$nextTick(()=>{
          this.$list.selectRow(li.id)          
        })
      }
      
    },
    //------------------------------------------------
    async doDelete() {
      if(this.hasCurrent && this.findIndexInList() >= 0) {
        this.reloading = true
        await Wn.Sys.exec(`rm id:${this.currentMeta.id}`)
        await this.reload()
        this.currentIndex = undefined
        this.currentMeta = undefined
        this.currentContent = undefined
      }
      // Warn user
      else {
        return await Ti.Toast.Open('i18n:wn-del-none', "warn")
      }
    },
    //------------------------------------------------
    async doRename() {
      if(this.hasCurrent && this.findIndexInList() >= 0) {
        // Get newName from User input
        let newName = await Ti.Prompt({
          text : 'i18n:wn-rename',
          vars : {name:this.currentMeta.nm}
        }, {
          title : "i18n:rename",
          placeholder : this.currentMeta.nm,
          value : this.currentMeta.nm
        })

        // Check name invalid or not
        if(!Wn.Obj.isValidName(newName)) {
          return
        }

        this.reloading = true
        // Do the rename
        let newMeta = await Wn.Sys.exec2(
          `obj id:${this.CurrentId} -cqno -u 'nm:"${newName}"'`,
          {as:"json"})

        // Error
        if(newMeta instanceof Error) {
          await Ti.Toast.Open("i18n:wn-rename-fail", "error")
        }
        // Replace the data
        else {
          await Ti.Toast.Open("i18n:wn-rename-ok", "success")
          this.updateCurrentMeta(newMeta)
        }
        this.$nextTick(()=>{
          this.reloading = false
        })
      }
      // Warn user
      else {
        return await Ti.Toast.Open('i18n:wn-rename-none', "warn")
      }
    },
    //------------------------------------------------
    async openCurrentMeta() {
      let reo = await Wn.EditObjMeta(this.currentMeta, {fields:"auto"})

      if(reo) {
        let {data, saved} = reo
        if(saved) {
          this.updateCurrentMeta(data)
        }
      }
    },
    //------------------------------------------------
    async openContentEditor() {
      let text = await Wn.EditObjContent(this.currentMeta, {
        autoSave : true
      })

      // User cancel
      if(Ti.Util.isNil(text))
        return

      // Update content
      this.currentContent = text
      this.loadedCurrentContent = text
    },
    //------------------------------------------------
    findIndexInList(meta=this.currentMeta) {
      if(meta) {
        let i = -1;
        for(let li of this.listData) {
          i++
          if(li.id == meta.id)
            return  i
        }
      }
      return -1
    },
    //------------------------------------------------
    findDataInListByName(name) {
      if(name) {
        for(let li of this.listData) {
          if(li.nm == name)
            return  li
        }
      }
    },
    //------------------------------------------------
    getCurrentMeta() {
      return _.cloneDeep(this.currentMeta)
    },
    //------------------------------------------------
    updateCurrentMeta(meta) {
      if(this.hasCurrent) {
        this.currentMeta = meta
        this.listData.splice(this.currentIndex, 1, meta)
        if(this.$list) {
          this.$nextTick(()=>{
            this.$list.selectRow(meta.id, {quiet:true})
          })
        }
      }
    },
    //------------------------------------------------
    async doSaveCurrentContent() {
      if(this.hasCurrent && this.isCurrentContentChanged) {
        this.saving = true
        await Wn.Io.saveContentAsText(this.currentMeta, this.currentContent)
        this.loadedCurrentContent = this.currentContent
        this.$nextTick(()=>{
          this.saving = false
        })
      }
    },
    //------------------------------------------------
    async doReloadCurrentContent() {
      if(this.hasCurrent) {
        this.reloading = true
        this.currentContent = await Wn.Io.loadContent(this.currentMeta, {as:"text"})
        this.loadedCurrentContent = this.currentContent
        this.$nextTick(()=>{
          this.reloading = false
        })
      }
    },
    //------------------------------------------------
    autoSelectItem() {
      if(!this.autoSelect)
        return

      if(_.isEmpty(this.listData)) 
        return

      // Recover current selected before
      let rowId;
      if(this.autoKeepSelectBy) {
        let key = `${this.meta.id}_${this.autoKeepSelectBy}`
        rowId = Ti.Storage.session.get(key)
      }

      // Select the first one
      if(Ti.Util.isNil(rowId)) {
        let row = this.$list.getRow(0)
        rowId = _.get(row,  "id")
      }
      
      // Recover the previous selection
      if(!Ti.Util.isNil(rowId)) {
        this.$list.selectRow(rowId)
      }
    },
    //------------------------------------------------
    async reload() {
      this.reloading = true
      this.listData = await this.reloadChildren()
      this.$nextTick(()=>{
        this.reloading = false
        this.$nextTick(()=>{
          this.autoSelectItem()
        })
      })
    }
    //------------------------------------------------
  },
  watch : {
    "isCurrentContentChanged" : function(changed) {
      Ti.App(this).commit("current/setStatus", {
        changed
      })
    },
    "currentMeta" : function(newVal, oldVal) {
      if(this.meta && !_.isEqual(newVal, oldVal) && this.autoKeepSelectBy) {
        let key = `${this.meta.id}_${this.autoKeepSelectBy}`
        if(newVal) {
          Ti.Storage.session.set(key, newVal.id)
        } else {
          Ti.Storage.session.remove(key)
        }
      }
    }
  },
  ////////////////////////////////////////////////////
  mounted : function(){
    //------------------------------------------------
    Ti.Fuse.getOrCreate().add({
      key : "wn-fileset-list",
      everythingOk : ()=>{
        return !this.isCurrentContentChanged
      },
      fail : ()=>{
        Ti.Toast.Open("i18n:wn-obj-nosaved", "warn")
      }
    })
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  beforeDestroy : function(){
    Ti.Fuse.get().remove("wn-fileset-list")
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-chart-raw-bar.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/chart/raw/bar/ti-chart-raw-bar.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  props : {
    "scaleX" : {
      type : Object,
      default : ()=>({
        "range": [0.1, 0.9]
      })
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    ChartSetup() {
      return (chart, data)=>{
        //console.log(data)
        let {list} = this.evalXYData(data)
        if(_.isEmpty(list))
          return

        // Set data
        chart.data(list);

        // Axis/Tick/Tooltip ...
        this.applyChartSetup(chart)

        // Setup view
        let view = chart.interval().position(this.ChartPosition)
        this.applyViewOptions(view, this.view)

      } // ~ function
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-adaptlist-methods.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/adaptlist/wn-adaptlist-methods.mjs'] = (function(){
const OBJ = {
  //---------------------------------------
  /***
   * Create new object
   */
  async doCreate() {
    // Load the creation setting
    let {
      types,
      freeCreate
    } = await Wn.Sys.exec(`ti creation -cqn id:${this.meta.id}`, { as: "json" })

    let no = await Ti.App.Open({
      title: "i18n:create",
      type: "info",
      position: "top",
      width: 640,
      height: "61.8%",
      comType: "wn-obj-creation",
      comConf: {
        types, freeCreate,
        autoFocus: true,
        enterEvent: "ok"
      },
      components: ["@com:wn/obj/creation"]
    })

    //console.log(no)

    // Do Create
    // Check the newName
    if (no && no.name) {
      // Check the newName contains the invalid char
      if (no.name.search(/[%;:"'*?`\t^<>\/\\]/) >= 0) {
        return await Ti.Alert('i18n:wn-create-invalid')
      }
      // Check the newName length
      if (no.length > 256) {
        return await Ti.Alert('i18n:wn-create-too-long')
      }

      // Default Race
      no.race = no.race || "FILE"

      if ("folder" == no.type) {
        no.type = undefined
      }

      // Auto type
      if ("FILE" == no.race) {
        if (!no.type) {
          no.type = Ti.Util.getSuffixName(no.name)
        }

        // Auto append suffix name
        if (!no.name.endsWith(no.type)) {
          no.name += `.${no.type}`
        }
      }

      // Do the creation
      let json = JSON.stringify({
        ...no.meta,
        nm: no.name,
        tp: no.type,
        race: no.race,
        mime: no.mime
      })
      // console.log(json)
      let newMeta = await Wn.Sys.exec2(
        `o @create -p id:${this.meta.id} @json -cqn`,
        { as: "json", input: json })
      // Error
      if (newMeta instanceof Error) {
        Ti.Toast.Open("i18n:wn-create-fail", "error")
      }
      // Replace the data
      else {
        Ti.Toast.Open("i18n:wn-create-ok", "success")
        await this._run("reload")

        // Make it checked
        // this.myCheckedIds = [newMeta.id]
        // this.myCurrentId = newMeta.id
        this.$innerList.selectRow(newMeta.id)
      }
    }  // ~ if(newName)
  },
  //--------------------------------------------
  async doRename() {
    let it = this.getCurrentItem()
    if (!it) {
      return await Ti.Toast.Open('i18n:wn-rename-none', "warn")
    }
    try {
      // Get newName from User input
      let newName = await Ti.Prompt({
        text: 'i18n:wn-rename',
        vars: { name: it.nm }
      }, {
        title: "i18n:rename",
        placeholder: it.nm,
        value: it.nm
      })
      // Check the newName
      if (newName) {
        // Check name invalid or not
        if (!Wn.Obj.isValidName(newName)) {
          return
        }
        // Check the suffix Name
        let oldSuffix = Ti.Util.getSuffix(it.nm)
        let newSuffix = Ti.Util.getSuffix(newName)
        if ('FILE' == it.race && oldSuffix && oldSuffix != newSuffix) {
          let repair = await Ti.Confirm("i18n:wn-rename-suffix-changed")
          if (repair) {
            newName += oldSuffix
          }
        }
        // Mark renaming
        this.setItemStatus(it.id, "processing")
        // Do the rename
        let newMeta = await Wn.Sys.exec2(
          `obj id:${it.id} -cqno -u 'nm:"${newName}"'`,
          { as: "json" })
        // Error
        if (newMeta instanceof Error) {
          await Ti.Toast.Open("i18n:wn-rename-fail", "error")
        }
        // Replace the data
        else {
          await Ti.Toast.Open("i18n:wn-rename-ok", "success")
          this.setItem(newMeta)
        }
      }  // ~ if(newName)
    }
    // reset the status
    finally {
      this.setItemStatus(it.id, null)
    }
  },
  //--------------------------------------------
  async doBatchUpdate({ reloadWhenDone = true } = {}) {
    let list = this.getCheckedItems()
    // Guard
    if (_.isEmpty(list)) {
      return await Ti.Toast.Open('i18n:nil-item', "warn")
    }
    // Open batch update form
    let meta = await Ti.App.Open({
      title: "i18n:edit",
      width: "80%",
      height: "80%",
      result: {},
      comType: "TiTextJson",
      components: [
        "@com:ti/text/json"
      ]
    })
    // Parse
    if (_.isString(meta)) {
      meta = JSON.parse(meta)
    }
    // User cancel
    if (_.isEmpty(meta)) {
      return
    }

    // Update each items
    let metaJson = JSON.stringify(meta)
    for (let it of list) {
      // Duck check
      if (!it || !it.id || !it.nm)
        continue
      // Ignore obsolete item
      if (it.__is && (it.__is.loading || it.__is.removed))
        continue

      // Mark item is processing
      this.setItemStatus(it.id, "loading")

      // Update
      await Wn.Sys.exec2(`o id:${it.id} @update @json -cqn`, {
        as: "json", input: metaJson
      })

      this.setItemStatus(it.id, "ok")
    }

    // Reload
    if (reloadWhenDone) {
      await this._run("reload")
    }
  },
  //--------------------------------------------
  async doDelete(confirm = false, reloadWhenDone = true) {
    let list = this.getCheckedItems()
    // Guard
    if (_.isEmpty(list)) {
      return await Ti.Toast.Open('i18n:wn-del-none', "warn")
    }

    // Confirm
    if (confirm) {
      if (!(await Ti.Confirm({
        text: "i18n:wn-del-confirm",
        vars: { N: list.length }
      }, {
        type: "warn"
      }))) {
        return
      }
    }

    let delCount = 0
    // make removed files. it remove a video
    // it will auto-remove the `videoc_dir` in serverside also
    // so, in order to avoid delete the no-exists file, I should
    // remove the `videoc_dir` ID here, each time loop, check current
    // match the id set or not, then I will get peace
    let exRemovedIds = {}
    try {
      // Loop items
      for (let it of list) {
        // Duck check
        if (!it || !it.id || !it.nm)
          continue
        // Ignore obsolete item
        if (it.__is && (it.__is.loading || it.__is.removed))
          continue
        // Ignore the exRemovedIds
        if (exRemovedIds[it.id])
          continue

        // Mark item is processing
        this.setItemStatus(it.id, "loading")
        // If DIR, check it is empty or not
        if ('DIR' == it.race) {
          let count = await Wn.Sys.exec(`count -A id:${it.id}`)
          count = parseInt(count)
          if (count > 0) {
            // If user confirmed, then rm it recurently
            if (!(await Ti.Confirm({
              text: 'i18n:wn-del-no-empty-folder', vars: { nm: it.nm }
            }))) {
              this.setItemStatus(it.id, null)
              continue
            }
          }
        }
        // Do delete
        await Wn.Sys.exec(`rm ${'DIR' == it.race ? "-r" : ""} id:${it.id}`)
        // Mark item removed
        this.setItemStatus(it.id, "removed")
        // If video result folder, mark it at same time
        let m = /^id:(.+)$/.exec(it.videoc_dir)
        if (m) {
          let vdId = m[1]
          exRemovedIds[vdId] = true
          this.setItemStatus(vdId, "removed")
        }
        // Counting
        delCount++
        // Then continue the loop .......^
      }
      // Do reload
      if (reloadWhenDone) {
        await this._run("reload")
      }
      return list
    }
    // End deleting
    finally {
      Ti.Toast.Open("i18n:wn-del-ok", { N: delCount }, "success")
    }

  },
  //--------------------------------------------
  async doMoveTo(confirm = false, reloadWhenDone = true) {
    let list = this.getCheckedItems()
    // Move dialog
    await Wn.Io.moveTo(list, _.assign({}, this.moveToConf, {
      base: this.meta,
      confirm,
      markItemStatus: (itId, status) => {
        this.setItemStatus(itId, status)
      },
      doneMove: async () => {
        if (reloadWhenDone) {
          return await this._run("reload")
        }
      }
    }))
  },
  //--------------------------------------------
  async doUpload(files = []) {
    //console.log("doUpload", files)
    if (_.isFunction(this.beforeUpload)) {
      await this.beforeUpload()
    }

    // Guard upload target
    if (!this.hasUploadTarget) {
      return await Ti.Toast.Open('i18n:upload-forbidden', 'warn')
    }

    // Prepare the list
    let ups = _.map(files, (file, index) => ({
      id: `U${index}_${Ti.Random.str(6)}`,
      file: file,
      total: file.size,
      current: 0
    }))

    // Show Uploading
    this.myUploadigFiles = ups

    // Prepare the list
    let newIds = {}
    // Do upload file one by one
    for (let i = 0; i < ups.length; i++) {
      let up = ups[i]
      let file = up.file
      let type = Ti.Util.getSuffixName(file.name, true)
      let vars = {
        type,
        name: file.name,
        majorName: Ti.Util.getMajorName(file.name),
        oDir: this.meta
      }
      let target = Ti.Util.explainObj(vars, this.uploadTarget, {
        evalFunc: true
      })
      //console.log("upload", file, "to", target)
      if (!target) {
        let msg = Ti.I18n.get("upload-notarget-continue") + " : " + file.name;
        if (await Ti.Confirm(msg, {
          type: "warn",
          textYes: "i18n:continue",
          textNo: "i18n:cancel"
        })) {
          continue
        }
        // Break the loop
        else {
          break;
        }
      }
      let reo = await Wn.Io.uploadFile(file, {
        target,
        mode: this.uploadMode,
        progress: function (pe) {
          up.current = pe.loaded
        }
      })
      //console.log(reo)
      let { ok, data, errCode } = reo

      // Join the new IDS
      if (ok) {
        newIds[data.id] = true
        //console.log("upload OK:", data)
        // Append customized upload meta
        if (this.hasUploadMeta) {
          let uploadMeta = Ti.Util.explainObj(vars, this.uploadMeta, {
            evalFunc: true
          })
          data = await Wn.Sys.exec2(`o id:${data.id} @update @json -cqn`, {
            input: JSON.stringify(uploadMeta),
            as: "json"
          })
        }
      }
      // Confirm continue
      else if (i < (ups.length - 1)) {
        let msg = Ti.I18n.get(errCode) + " : " + data;
        if (await Ti.Confirm(msg, {
          type: "warn",
          textYes: "i18n:continue",
          textNo: "i18n:cancel"
        })) {
          continue
        }
        // Break the loop
        else {
          break;
        }
      }
      // Show error message
      else {
        let msg = Ti.I18n.get(errCode) + " : " + data;
        await Ti.Alert(msg, { type: "warn" })
      }
    }

    // All done, hide upload
    _.delay(() => {
      this.myUploadigFiles = []
    }, 1000)

    if (_.isEmpty(newIds)) {
      return
    }

    // Tell user ...
    Ti.Toast.Open("i18n:upload-done", "success")

    // Call reload
    await this._run("reload")

    // Make it checked
    let checkIds = Ti.Util.truthyKeys(newIds)
    if (!this.multi) {
      checkIds = _.first(checkIds)
    }
    this.$innerList.checkRow(checkIds, { reset: true })

    // Callback
    if (_.isFunction(this.afterUpload)) {
      await this.afterUpload(checkIds)
    }
  },
  //--------------------------------------------
  async doDownload() {
    let list = this.getCheckedItems()
    if (_.isEmpty(list)) {
      return await Ti.Toast.Open('i18n:wn-download-none', "warn")
    }
    // Too many, confirm at first
    if (list.length > 5) {
      if (!await Ti.Confirm({
        text: "i18n:wn-download-too-many",
        vars: { N: list.length }
      })) {
        return
      }
    }
    // Do the download
    for (let it of list) {
      if ('FILE' != it.race) {
        if (!await Ti.Confirm({
          text: "i18n:wn-download-dir",
          vars: it
        }, {
          textYes: "i18n:continue",
          textNo: "i18n:terminate"
        })) {
          return
        }
        continue;
      }
      let link = Wn.Util.getDownloadLink(it)
      Ti.Be.OpenLink(link)
    }
  }
  //--------------------------------------------
}
return OBJ;;
})()
// ============================================================
// EXPORT 'wn_list_wrapper_mixins.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/support/wn_list_wrapper_mixins.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////
  data : ()=>({
    myData : []
  }),
  ///////////////////////////////////////////////////
  props : {
    // The context of the data if dynamic
    "value" : {
      type: Object,
      default: ()=>({})
    }
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    explainDisplayItems(display=[]) {
      let displayItems = _.concat(display)
      let list = []
      _.forEach(displayItems, (it)=>{
        // Guard
        if(Ti.Util.isNil(it)) {
          return
        }
        // Quick: table.field.display:: thumb->icon
        if(_.isString(it)) {
          let m = /^@<thumb(:([^>:]*))?(:([^>]*))?>$/.exec(it)
          if(m) {
            let candidateIcon = m[2] || undefined
            let key = m[4]
            if(!key) {
              key = ["icon", "thumb", "tp", "mime", "race", "__updated_time"]
            } else {
              key = key.split(",")
              if(key.length == 1) {
                key = key[0]
              }
            }
            list.push({
              key,
              type : "Object",
              transformer : {
                name : "Ti.Types.toObject",
                args : {
                  icon  : "icon",
                  thumb : "thumb",
                  type  : "tp",
                  mime  : "mime",
                  race  : "race",
                  timestamp : "__updated_time"
                }
              },
              comType  : "wn-obj-icon",
              comConf : {
                "..." : "${=value}",
                "candidateIcon" : candidateIcon,
                //"className"   : "thing-icon"
              }
            })
            return
          }
        }
        // Other, just join
        list.push(it)
      })
      return list
    },
    //-----------------------------------------------
    async evalMyData() {
      // Just array data
      if(_.isArray(this.data)) {
        this.myData = _.cloneDeep(this.data)
        return
      }
      // Process function
      let reo = this.data
      while(_.isFunction(reo)) {
        reo = await data(this.value)
      }
      // Process command
      if(_.isString(reo)) {
        let cmdText = Ti.S.renderBy(reo, this.value)
        reo = await Wn.Sys.exec2(cmdText, {as:"json"})
      }
      // Update my data
      if(_.isArray(reo)) {
        this.myData = reo
      } else if(_.isArray(reo.list)) {
        this.myData = reo.list
      } else {
        this.myData = [reo]
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "data": {
      handler : "evalMyData",
      immediate: true
    }
  }
  ///////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'youtube-browser.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/net/youtube/browser/youtube-browser.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////////
  data : ()=>({
    myCurrentId : undefined,
    currentPlayListId : undefined,
    ytConfig : undefined,
    ytPlaylists : undefined,
    ytVideos : undefined,

    currentVideoIds : []
  }),
  ///////////////////////////////////////////////////////
  props : {
    //-----------------------------------
    // Data
    //-----------------------------------
    "oDir" : {
      type : Object
    },
    "domain": {
      type : String
    },
    "channelId" : {
      type : String
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "multi" : {
      type : Boolean,
      default : false
    },
    "notifyName" : {
      type : String
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //---------------------------------------------------
    hasCurrent() {
      return this.myCurrentId ? true : false
    },
    //---------------------------------------------------
    CurrentPlaylist() {
      return this.getPlaylistObj(this.currentPlayListId)
    },
    //---------------------------------------------------
    CurrentVideo() {
      return this.getVideoObj(this.myCurrentId)
    },
    //---------------------------------------------------
    TheSearch() {
      return {
        filter : {
          majorKey : "playlistId",
          majorValue : this.currentPlayListId,
          keyword : this.currentVideoIds.join(",")
        }
      }
    },
    //---------------------------------------------------
    GuiLayout(){
      return {
        type: "cols",
        border:true,
        blocks: [/*{
          icon  : "fab-youtube",
          title : "Playlists",
          name : "nav",
          size : "20%",
          body : "pcNav"
        }, */{
          type : "rows",
          size : "65%",
          blocks : [{
              name : "filter",
              size : 42,
              body : "pcFilter"
            }, {
              name : "list",
              body : "pcList"
            }]
        }, {
          name : "detail",
          body : "pcDetail"
        }]
      }
    },
    //---------------------------------------------------
    GuiSchema() {
      return {
        pcFilter : {
          comType : "wn-thing-filter",
          comConf : {
            placeholder : "Comma-separated Video ID(s)",
            value: this.TheSearch,
            filter : {
              major: {
                placeholder : "Choose Playlist",
                options : this.ytPlaylists,
                style: {
                  width : "50%"
                },
                iconBy : "thumbUrl",
                textBy : "title",
                valueBy : "id",
                dropDisplay: [
                  "<thumbUrl:fas-youtube>", "itemCount::as-tip", "title"
                ],
                dropWidth : 500
              }
            },
            // sorter: {
            //   options: [
            //     { "value": "nm", "text": "i18n:wn-key-nm" },
            //     { "value": "ct", "text": "i18n:wn-key-ct" }
            //   ]
            // }
          }
        },
        pcList: {
          comType: "TiWall",
          comConf: {
            data: this.WallItemList,
            idBy: "id",
            multi: this.multi,
            display: {
              key : "..",
              comType : "ti-obj-thumb",
              comConf : {
                "..." : "${=value}"
              }
            }
          }
        },
        pcDetail: {
          comType: "NetYoutubeDetail",
          comConf: {
            value: this.CurrentVideo
          }
        }
      }
    },
    //---------------------------------------------------
    WallItemList() {
      if(!this.ytVideos)
        return
      let list = _.map(this.ytVideos, video=>{
        return {
          id : video.id,
          title : video.title,
          preview : video.thumbUrl,
          badges : {
            "SE" : {
              type : "text",
              className : "bchc-badge as-label",
              value : video.du_in_str
            }
          }
        }
      })
      return list
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods :{
    //---------------------------------------------------
    // async OnNavSelect({currentId}) {
    //   this.currentPlayListId = currentId
    //   await this.reloadVideos()
    // },
    //---------------------------------------------------
    OnListSelect({currentId, checkedIds}) {
      this.myCurrentId = currentId
      
      if(this.notifyName) {
        let payload;
        // Multi
        if(this.multi) {
          payload = this.findVideoObjs(checkedIds) 
        }
        // Single
        else {
          payload = _.cloneDeep(this.CurrentVideo)
        }
        this.$notify(this.notifyName, payload)
      }
      return {stop:false, name:"select"}
    },
    //---------------------------------------------------
    async OnFilterChange(payload) {
      let {majorValue, keyword, match} = payload
      //console.log("OnFilterChange", payload)
      this.currentPlayListId = majorValue
      this.currentVideoIds = Ti.S.splitIgnoreBlank(keyword, /[, ;\r\n]/g)
      //console.log(this.currentVideoIds)
      await this.reloadVideos()
    },
    //---------------------------------------------------
    getVideoObj(videoId) {
      if(videoId && _.isArray(this.ytVideos)) {
        for(let video of this.ytVideos) {
          if(video.id == videoId) {
            return video
          }
        }
      }
    },
    //---------------------------------------------------
    findVideoObjs(videoIds) {
      // Build Map
      let idMap = {}
      if(_.isArray(videoIds)) {
        _.forEach(videoIds, id=>idMap[id] = true)
      } else if(_.isString(videoIds)) {
        idMap[videoIds] = true
      } else if(_.isPlainObject(videoIds)) {
        idMap = videoIds
      }
      // Find 
      return _.filter(this.ytVideos, v=>idMap[v.id]?true:false)
    },
    //---------------------------------------------------
    getPlaylistObj(playlistId, playlists=this.ytPlaylists) {
      if(!playlists || !_.isArray(playlists))
        return

      for(let pl of playlists) {
        if(playlistId == pl.id) {
          return pl
        }
      }
    },
    //---------------------------------------------------
    async reloadVideos(plId = this.currentPlayListId) {
      //console.log("reloadVideos")
      this.ytVideos = undefined
      let config = this.ytConfig
      let videos;
      // Reload by videoIds 
      if(!_.isEmpty(this.currentVideoIds)) {
        videos = await Wn.Youtube.getVideoDetails(config, this.currentVideoIds)
      }
      // Reload by playlist
      else {
        videos = await Wn.Youtube.getAllVideos(config, plId)
      }
      this.ytVideos = videos
    },
    //---------------------------------------------------
    async reload(force=false) {
      // Guard
      if(!this.domain || !this.channelId)
        return

      this.ytVideos = undefined

      // Reload config
      let config = await Wn.Youtube.loadConfig({
        domain : this.domain,
        channelId : this.channelId,
        force
      })
      let playlists = await Wn.Youtube.getAllPlaylists(config, {force})
      let plId = this.currentPlayListId
      if(playlists.length > 0) {
        let pl = this.getPlaylistObj(plId, playlists)
        if(!pl) {
          pl = _.nth(playlists, 0)
        }
        plId = _.get(pl, "id")
      }
      let videos = await Wn.Youtube.getAllVideos(config, plId)

      // Reload playlist
      this.currentPlayListId = plId
      this.ytConfig = config
      this.ytPlaylists = playlists
      this.ytVideos = videos
    },
    //--------------------------------------------
    async openCurrentMeta() {
      // 显示当前的视频
      if (this.CurrentVideo) {
        let json = JSON.stringify(this.CurrentVideo, null, '    ')
        let re = Ti.EditCode(json,{mode:"json",width:"90%", height:"80%"})
        console.log(re)
        return
      }

      // 显示当前的视频
      if (this.CurrentPlaylist) {
        let json = JSON.stringify(this.CurrentPlaylist, null, '    ')
        let re = Ti.EditCode(json,{mode:"json",width:"90%", height:"80%"})
        console.log(re)
        return
      }

      // 显示集合属性
      await Ti.App(this).dispatch("main/openCurrentMetaEditor")
    },
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  watch : {
    "domain" : "reload",
    "channelId" : "reload"
  },
  ///////////////////////////////////////////////////////
  mounted : async function() {
    await this.reload();
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-obj-tile.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/obj/tile/ti-obj-tile.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  ////////////////////////////////////////////////
  props : {
    "index" : {
      type : Number,
      default : -1
    },
    "id" : {
      type : String,
      default : null
    },
    // The URL of thumb
    "preview" : {
      type : [Object, String],
      default : ()=>({
        type : "font",
        value : "broken_image"
      })
    },
    // The preview part height
    "previewHeight" : {
      type : [String, Number],
      default : null
    },
    "hover" : {
      type : String,
      default : null,
      validator : function(val) {
        return !val || /^(up|down|left|right|zoom)$/.test(val)
      }
    },
    // The text to present the object
    "title" : {
      type : String,
      default : null
    },
    "href" : {
      type : String,
      default : null
    },
    // true - alwasy show the footer part
    "brief" : {
      type : String,
      default : null
    },
    "emitBy" : {
      type : Object,
      default : ()=>({
        evantName : null,
        payload : {}
      })
    }
  },
  ////////////////////////////////////////////////
  computed : {
    topClass() {
      let klass =[this.className]
      if(this.hover) {
        klass.push("on-hover")
        klass.push(`on-hover-${this.hover}`)
      }
      return klass
    },
    hasHref() {
      return this.href ? true : false
    },
    hasBrief() {
      return this.brief ? true : false
    }
  },
  ////////////////////////////////////////////////
  methods : {
    //--------------------------------------------
    onClick(evt) {
      // Prevent default and emit event
      if(this.emitBy.eventName) {
        evt.preventDefault()
        let eventName = this.emitBy.eventName
        let payload = this.emitBy.payload || {}
        //............................
        console.log("onClick", eventName, payload)
        this.$notify(eventName, payload)
      }
    }
    //--------------------------------------------
  }
  ////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-combo-pair-auto.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/pair-auto/ti-combo-pair-auto.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    FormFields() {
      if(this.group) {
        return this.genFormFieldsByGroup()
      }
      return this.genFormFields(this.value)
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    genFormFieldsByGroup(){
      let list = []
      _.forEach(this.value, (val, key)=>{
        let grp = _.defaults(this.getFieldDefine(key), {
          title : key,
          name  : key,
          fields : this.genFormFields(val, key)
        })
        list.push(grp)
      })
      return list
    },
    //-----------------------------------------------
    genFormFields(data={}, groupName) {
      let list = []
      let keys = groupName ? [groupName] : []
      _.forEach(data, (v, k) => {
        let fld = _.defaults(this.getFieldDefine(k, groupName), {
          title : k,
          name  : _.concat(keys, k).join(".")
        })
        list.push(fld)
      })
      return list
    },
    //-----------------------------------------------
    getFieldDefine(name, group) {
      let keys = []
      if(group) {
        keys.push(`${group}.${name}`)
      }
      keys.push(name)
      keys.push("@default")

      let fld = Ti.Util.getFallbackNil(this.fields, ...keys)
      if(fld && fld.title) {
        fld = _.cloneDeep(fld)
        fld.title = Ti.S.renderBy(fld.title, {name, group})
      }
      return fld
    }
    //-----------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'widget-rawhtml.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/widget/rawhtml/widget-rawhtml.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    //-----------------------------------
    // Data
    //-----------------------------------
    "html": {
      type : String,
      default: undefined
    }
  },
  /////////////////////////////////////////
  computed : {
    //------------------------------------
    TopClass() {
      return this.getTopClass()
    }
    //------------------------------------
  },
  /////////////////////////////////////////
  methods: {
    //-------------------------------------
    renderHTML(html = this.html) {
      if(this.$el) {
        this.$el.innerHTML = html || ""
      }
    }
    //-------------------------------------
  },
  /////////////////////////////////////////
  watch: {
    "html": {
      handler: function(newVal, oldVal){
        this.renderHTML(newVal)
      }
    }
  },
  /////////////////////////////////////////
  mounted: function() {
    this.renderHTML()
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-obj-form.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/form.bak/wn-obj-form.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////////////////
  data : ()=>({
    myFields : []
  }),
  //////////////////////////////////////////////////////
  computed : {
    //--------------------------------------------------
    isAutoShowBlank() {
      return Ti.Util.fallback(this.autoShowBlank, true)
    },
    //--------------------------------------------------
    FormData() {
      if(_.isString(this.data)) {
        try{
          return JSON.parse(this.data)
        }catch(E){
          return {}
        }
      }
      return this.data
    }
    //--------------------------------------------------
  },
  //////////////////////////////////////////////////////
  methods : {
    //--------------------------------------------------
    doAction(emitName, action, payload) {
      // {method, target}
      if(_.isPlainObject(action)) {
        Ti.App(this)[action.method](action.target, payload)
      }
      // "method:target"
      else if(_.isString(action)) {
        Ti.App(this).exec(action, payload)
      }
      // Just notify $parent
      else if(action){
        this.$notify(emitName, payload)
      }
    },
    //--------------------------------------------------
    OnFieldChange({name, value}={}) {
      console.log(" <--- @field:changed", {name, value})
      this.doAction("field:change", this.updateBy, {name, value})
    },
    //--------------------------------------------------
    OnChange(data) {
      //console.log(" <- @changed", data)
      this.doAction("change", this.setDataBy, data)
    },
    //--------------------------------------------------
    OnInvalid(err) {
      //console.log("wn-form.invalid", err)
      let payload = {
        name    : err.name,
        message : [err.errMessage, err.value].join(" :: "),
        status  : "warn"
      }
      this.doAction("invalid", this.setFieldStatusBy, payload)
    },
    //--------------------------------------------------
    async evalMyFields() {
      if(_.isArray(this.fields)) {
        this.myFields = this.fields
      }
      // Dynamic call
      else if(_.isFunction(this.fields)) {
        this.myFields = await this.fields()
      }
      // Load from server side
      else if(_.isString(this.fields)) {
        let o = await Wn.Io.loadMeta(this.fields)
        if(null!=o) {
          this.myFields = await Wn.Io.loadContent(o,  {as:"json"})
        } else {
          this.myFields = []
        }
      }
    }
    //--------------------------------------------------
  },
  //////////////////////////////////////////////////////
  watch : {
    "fields" : {
      handler : "evalMyFields",
      immediate : true
    }
  }
  //////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-th-files.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/th/files/wn-th-files.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////
  data: () => ({
    $ta: null,
    myDataDirObj: null
  }),
  ///////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    hasDataHome() {
      return this.dataHome ? true : false
    },
    //--------------------------------------
    hasDirNameOptions() {
      return !_.isEmpty(this.dirNameOptions)
    },
    //--------------------------------------
    DataList() {
      return _.get(this.data, "list") || []
    },
    //--------------------------------------
    DataPager() {
      return _.get(this.data, "pager") || {}
    },
    //--------------------------------------
    CurrentFile() {
      if (this.currentId && this.DataList) {
        for (let it of this.DataList) {
          if (this.currentId == it.id) {
            return it
          }
        }
      }
    },
    //--------------------------------------
    ThePreview() {
      let preview = Ti.Util.getFallback(this.preview, this.dirName, "@default")
        || this.preview
        || {}

      return {
        showInfo: false,
        floatInfo: false,
        infoPosition: "left",
        infoNameWidth: 40,
        infoValueWidth: 120,
        stateLocalKey: this.getStateLocalKey("preview"),
        // Customized
        ...preview,
        // Edit Info 
        editInfoBy: () => {
          this.editPreviewInfo()
        }
      }
    },
    //--------------------------------------
    TheFiles() {
      return _.assign({}, this.files, {
        currentId: this.currentId,
        checkedIds: this.checkedIds,
        routers: {
          "reload": async () => {
            await this.reloadData()
          }
        }
      })
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnAdaptListInit($adaptlist) { this.$adaptlist = $adaptlist },
    //--------------------------------------
    // Events
    //--------------------------------------
    async OnDirNameChanged(dirName) {
      this.$ta.commit("setDataDirName", dirName)
      await this.reloadData();
    },
    //--------------------------------------
    OnFileSelect({ currentId, checkedIds }) {
      this.$ta.dispatch("selectDataFile", { currentId, checkedIds })
    },
    //--------------------------------------
    OnFileOpen(obj) {
      this.$notify("file:open", obj)
    },
    //--------------------------------------
    async OnFileUploaded(files = []) {
      if (!_.isEmpty(files)) {
        let checkedIds = {}
        for (let file of files) {
          checkedIds[file.id] = true
        }
        this.OnFileSelect({
          currentId: files[0].id,
          checkedIds
        })
      }
    },
    //--------------------------------------
    // Untility
    //--------------------------------------
    getStateLocalKey(name) {
      if (this.stateLocalKey && name) {
        return `${this.stateLocalKey}_${name}`
      }
    },
    //--------------------------------------
    getThAdaptor() {
      return this.tiParentCom("WnThAdaptor")
    },
    //--------------------------------------
    async doDeleteSelected() {
      await this.$ta.dispatch("dfRemoveChecked")
    },
    //--------------------------------------
    async checkDataDir() {
      // Guard
      if (!this.hasDataHome) {
        return
      }
      // If empty data home, create one
      if (!this.myDataDirObj && this.dirName) {
        let cmdText = `o @create -p ${this.dataHome} -auto -race DIR '${this.dirName}'`
        console.log(cmdText)
        await Wn.Sys.exec2(cmdText)

        this.myDataDirObj = await this.loadDataDirObj()
      }
    },
    //--------------------------------------
    async doUploadFiles() {
      // Guard
      await this.checkDataDir()

      // Do upload
      if (this.myDataDirObj) {
        this.$adaptlist.openLocalFileSelectdDialog()
      }
      // Impossible
      else {
        throw "Impossible!!!"
      }
    },
    //--------------------------------------
    async editPreviewInfo() {
      //console.log("showPreviewObjInfo:", this.preview)
      if (this.CurrentFile) {
        let options = _.get(this.previewEdit, this.dirName)
        let reo = await Wn.EditObjMeta(this.CurrentFile, options)
        if (reo && reo.data) {
          this.updateItemInDataList(reo.data)
        }
      }
    },
    //--------------------------------------
    updateItemInDataList(meta) {
      if (meta && this.myData && _.isArray(this.myData.list)) {
        this.myData.list = _.map(
          this.myData.list,
          it => it.id == meta.id ? meta : it)
      }
    },
    //--------------------------------------
    // Reloading
    //--------------------------------------
    async loadDataDirObj() {
      if (this.dataHome) {
        let aph = Ti.Util.appendPath(this.dataHome, this.dirName)
        return await Wn.Io.loadMeta(aph)
      }
    },
    //--------------------------------------
    async reloadData() {
      if (this.dataHome && this.$ta) {
        this.myDataDirObj = await this.loadDataDirObj()
        if (this.myDataDirObj) {
          await this.$ta.dispatch("dfQueryFiles")
        } else {
          this.$ta.commit("setDataDirFiles")
        }
      }
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  watch: {
    "dirName": "reloadData"
  },
  ///////////////////////////////////////////
  mounted: async function () {
    this.$ta = this.getThAdaptor()
    await this.reloadData()
  }
  ///////////////////////////////////////////
}
return _M;
;
})()
// ============================================================
// EXPORT 'ti-input.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/ti-input.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  model: {
    prop: "value",
    event: "change"
  },
  ////////////////////////////////////////////////////
  data: () => ({
    inputCompositionstart: false,
    isFocused: false,
    pointerHover: null,
    inputingValue: undefined
  }),
  ////////////////////////////////////////////////////
  props: {
    "focusValue": {
      type: [String, Number]
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    TopClass() {
      let hasWidth = !Ti.Util.isNil(this.width);
      return this.getTopClass({
        "is-focused": this.isFocused,
        "is-blurred": !this.isFocused,
        "is-readonly": this.readonly,
        "no-readonly": !this.readonly,
        "show-border": !this.hideBorder,
        "hide-border": this.hideBorder,
        "has-width": hasWidth,
        "nil-width": !hasWidth,
        "full-field": !hasWidth,
        "has-prefix-icon": this.prefixIcon ? true : false,
        "has-prefix-text": !Ti.Util.isNil(this.prefixText),
        "has-suffix-icon": this.suffixIcon ? true : false,
        "has-suffix-text": !Ti.Util.isNil(this.suffixText)
      });
    },
    //------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      });
    },
    //------------------------------------------------
    InputValueTip() {
      let tip = this.valueTip;
      if (this.valueTip) {
        if (_.isString(this.valueTip)) {
          return {
            "data-ti-tip": this.valueTip
          };
        }
      }
      return tip;
    },
    //------------------------------------------------
    TheValue() {
      if (!_.isUndefined(this.inputingValue)) {
        return this.inputingValue;
      }
      //console.log("input value:", this.value)
      let val = this.value;
      if (this.isFocused && !Ti.Util.isNil(this.focusValue)) {
        val = this.focusValue;
      }
      val = Ti.Types.toStr(val, this.format);
      if (this.autoI18n) {
        return Ti.I18n.text(val);
      }
      return val;
    },

    //------------------------------------------------
    ThePrefixIcon() {
      let icon = Ti.Util.trueGet(
        this.prefixIcon,
        "zmdi-close",
        this.prefixIcon
      );
      let hove = this.prefixHoverIcon;
      if ("prefixIcon" == this.pointerHover && this.isCanHover("prefixIcon")) {
        return hove || icon;
      }
      return icon;
    },
    //--------------------------------------
    ThePrefixText() {
      return Ti.Util.explainObj(this, this.prefixText);
    },
    //--------------------------------------
    TheSuffixText() {
      return Ti.Util.explainObj(this, this.suffixText);
    },
    //------------------------------------------------
    TheHover() {
      let map = {};
      let hos = _.concat(this.hover);
      for (let ho of hos) {
        if (ho) {
          map[ho] = true;
        }
      }
      return map;
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    isCanHover(hoverName) {
      return this.TheHover[hoverName] ? true : false;
    },
    //------------------------------------------------
    getHoverClass(hoverName) {
      let canHover = this.isCanHover(hoverName);
      return {
        "can-hover": canHover,
        "for-look": !canHover,
        "is-prefix-icon-hover": "prefixIcon" == hoverName
      };
    },
    //------------------------------------------------
    OnInputCompositionStart() {
      this.inputCompositionstart = true;
    },
    //------------------------------------------------
    OnInputCompositionEnd() {
      this.inputCompositionstart = false;
      this.doWhenInput();
    },
    //------------------------------------------------
    OnInputing($event) {
      if (!this.inputCompositionstart) {
        this.doWhenInput();
      }
    },
    //------------------------------------------------
    doWhenInput() {
      let val = this.getInputValue(false);
      if (!Ti.Util.isNil(val)) {
        this.inputingValue = val;
        this.$notify("inputing", val);
      }
    },
    //------------------------------------------------
    // OnInputKeyDown($event) {
    //   let payload = _.pick($event,
    //     "code","key","keyCode",
    //     "altKey","ctrlKey","metaKey","shiftKey")
    //   payload.uniqueKey = Ti.Shortcut.getUniqueKey(payload)
    //   payload.$event = $event
    //   this.$notify("keypress", payload)
    // },
    //------------------------------------------------
    OnInputChanged() {
      //console.log("OnInputChanged");
      let val = this.getInputValue(this.autoJsValue);
      // validate
      let checker = this.genValidating();
      if (!checker(val)) {
        this.$notify("invalid", val);
        return;
      }
      //console.log("OnInputChange", JSON.stringify(val))
      this.$notify("change", val);
      _.delay(() => {
        this.inputingValue = undefined;
      }, 100);
    },
    //------------------------------------------------
    OnClickInput() {
      if (!this.readonly) {
        this.isFocused = true;
      }
      if (!this.isActived) {
        this.setActived();
      }
      this.$notify("input:click");
    },
    //------------------------------------------------
    OnInputFocus() {
      if (this.readonly) return;
      if (this.autoSelect) {
        this.$refs.input.select();
      } else {
        this.$refs.input.focus();
      }
      this.isFocused = true;
      this.$notify("input:focus");
      // Auto Actived
      if (!this.isActived) {
        this.setActived();
      }
    },
    //------------------------------------------------
    OnInputBlur() {
      this.isFocused = false;
      this.$notify("input:blur");
    },
    //------------------------------------------------
    OnClickPrefixIcon() {
      if (this.prefixIconForClean) {
        this.$notify("change", null);
      }
      if (this.prefixIconNotifyName) {
        this.$notify(this.prefixIconNotifyName);
      }
    },
    //------------------------------------------------
    OnClickPrefixText() {
      if (this.prefixTextNotifyName) this.$notify(this.prefixTextNotifyName);
    },
    //------------------------------------------------
    OnClickSuffixIcon() {
      if (this.suffixIconNotifyName) {
        this.$notify(this.suffixIconNotifyName);
      }
    },
    //------------------------------------------------
    OnClickSuffixText() {
      //console.log("suffix")
      if (this.suffixTextNotifyName) this.$notify(this.suffixTextNotifyName);
    },
    //------------------------------------------------
    OnInputKeyPress($event) {
      if (13 == $event.which) {
        if (this.enterKeyNotifyName) {
          let val = this.getInputValue(this.autoJsValue);
          this.$notify(this.enterKeyNotifyName, val);
        }
      }
    },
    //------------------------------------------------
    // Utility
    //------------------------------------------------
    getInputValue(autoJsValue = false) {
      if (_.isElement(this.$refs.input)) {
        //console.log("doWhenInput", emitName)
        let val = this.$refs.input.value;
        // Auto js value
        if (autoJsValue) {
          val = Ti.S.toJsValue(val, {
            autoNil: true,
            autoDate: false,
            trimed: this.trimed
          });
        }
        // Keep value as string
        else {
          // Trim
          if (this.trimed) {
            val = _.trim(val);
          }
          // emptyAsNull
          if (this.emptyAsNull && !val) {
            val = null;
          }
        }
        // case
        if (this.valueCase) {
          val = Ti.S.toCase(val, this.valueCase);
        }

        // notify
        return val;
      }
    },
    //------------------------------------------------
    genValidating() {
      if (this.validator) {
        let { test, message } = this.validator;
        if (test) {
          let am = Ti.AutoMatch.parse(test);
          return (v) => {
            if (Ti.Util.isNil(v)) {
              return true;
            }
            if (!am(v)) {
              Ti.Toast.Open(message || "i18n:invalid-val", "warn");
              return false;
            }
            return true;
          };
        }
      }
      return (v) => true;
    },
    //------------------------------------------------
    doAutoFocus() {
      if (this.focused && !this.isFocused) {
        this.OnInputFocus();
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    "focused": "doAutoFocus"
  },
  ////////////////////////////////////////////////////
  mounted: function () {
    this.doAutoFocus();
  }
  ////////////////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'ti-gui-methods.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/gui/ti-gui-methods.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //--------------------------------------
  formatGuiBlock(b={}, shown={}, float=false) {
    // ClassName
    let klass = [`at-${b.position||"center"}`]
    // Show/hide
    let isShown = shown[b.name]
    if(_.isUndefined(isShown)) {
      // hide panel block in default
      if(float) {
        isShown = false
      }
      // show normal block in default
      else {
        isShown = true
      }
    }
    // Mask
    if(b.mask) {
      klass.push("show-mask")
    } else {
      klass.push("no-mask")
    }
    // Transition Name
    let transName = b.position ? `gui-panel-${b.position}` : null
    // Block Info
    let pickKeys = [
      "className", "actionDisplayMode", "flex",
      "icon","title","actions","name", "adjustable", "closer", 
      "position", "overflow", "status"]
    let panelSize = {}
    // !!!
    // If block is float, that mean it in a panel
    // keep the width/height outside block info
    // it should not set to the block but the panel
    // !!!
    if(!float || b.mask) {
      pickKeys.push("width")
      pickKeys.push("height")
    }
    // panelSize should be assign to top
    else {
      // left/right:  panel hold the with
      if(/^(left|right)$/.test(b.position)) {
        pickKeys.push("height")
        panelSize.width = b.width
      }
      // top/bottom:  panel hold the height
      else if(/^(top|bottom)$/.test(b.position)) {
        pickKeys.push("width")
        panelSize.height = b.height
      }
      // center, block hold the size
      else if("center"==b.position){
        pickKeys.push("width")
        pickKeys.push("height")
      }
      // Others, panel hold the size
      else {
        panelSize.width = b.width
        panelSize.height = b.height
      }
    }
    let info = _.pick(b, pickKeys)
    // Sizing
    if(b.size && "stretch"!=b.size) {
      // Cols
      if("cols" == this.type) {
        info.width = b.size
      }
      // Rows
      else if("rows" == this.type) {
        info.height = b.size
      }
    }
    // ComType as body
    let comType, comConf
    if(b.body) {
      let com = b.body || {}
      if(_.isString(com)) {
        let sch = this.schema[com]
        // Define the detail in schema
        if(_.isPlainObject(sch)) {
          com = sch
          // explain the "extends"
          if(com.extends) {
            let parentSchema = this.schema[com.extends]
            let mySchema = _.omit(com, ["extends"])
            com = _.merge({}, parentSchema, mySchema)
          }
        }
        // Just a com-type
        else {
          com = {comType:com, comConf:{}}
        }
      }
      comType = com.comType || "ti-label"
      comConf = com.comConf || {value:b.name||"GUI"}
    }
    // ComType as layout/block
    else if(!_.isEmpty(b.blocks)){
      comType = "ti-gui"
      comConf = _.pick(b, [
        "type", "blocks", "adjustable", "border"
      ])
      _.defaults(comConf, {
        type : "cols",
        schema : this.schema,
        shown : this.shown
      })
    }
    // Join to result list
    return {
      className: klass.join(" "), 
      panelStyle : Ti.Css.toStyle(panelSize),
      name : b.name,
      isShown, transName,
      info, comType, comConf
    }
  },
  //--------------------------------------
  getFormedBlockList(list=[], shown={}, float=false) {
    let list2 = []
    if(_.isArray(list)) {
      for(let b of list) {
        let b2 = this.formatGuiBlock(b, shown, float)
        list2.push(b2)
      }
    }
    //console.log(list2)
    return list2
  },
  //--------------------------------------
  /***
   * Create new plain object to represent the blocks shown.
   * 
   * @param show{Object} : The primary shown object to be merge
   * @param name{String|Array|Object} : Value to marge.
   *  - `String` : Set the single key to the `value`
   *  - `Array`  : Batch set a group of keys to the `value`
   *  - `Object` : Merge to `shown` directly, the third argument `value` willl 
   *               be ignored.
   * @param value{Any} : if `name` is string, it will be taken as value.
   */
  createGuiBlockShown(shown={}, name, value) {
    let re = {...shown}
    // String
    if(_.isString(name)) {
      re[name] = value
    }
    // Array
    else if(_.isArray(name)) {
      for(let nm of name) {
        re[nm] = value
      }
    }
    // Object
    else if(_.isPlainObject(name)) {
      _.assign(re, name)
    }
    return re
  }
  //--------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-form-grid.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/form/grid/ti-form-grid.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////////////////
  data: () => ({
    myRect: undefined,
    currentTabIndex: 0
  }),
  //////////////////////////////////////////////////////
  computed: {
    //--------------------------------------------------
    TopClass() {
      return this.getTopClass(
        [
          `as-spacing-${this.spacing || "comfy"}`,
          `field-border-${this.fieldBorder}`,
          `setup-menu-at-${this.setupMenuAt}`,
          `actionbar-at-${this.actionBarAt}`
        ],
        {
          "is-mode-flat": this.isFlatMode,
          "is-mode-group": this.isGroupMode,
          "is-mode-tab": this.isTabMode,
          "has-title": this.hasTitle,
          "nil-title": !this.hasTitle,
          "has-footer": this.showFooterActions,
          "nil-footer": !this.showFooterActions,
          "has-aside": this.showSetupMenu,
          "nil-aside": !this.showSetupMenu
        }
      );
    },
    //--------------------------------------------------
    MainClass() {
      let className = [];
      if (this.isTabMode) {
        className.push(
          `tab-at-${this.tabAt}`,
          `tab-at-${this.TheTabAtX}`,
          `tab-at-${this.TheTabAtY}`
        );
      }
      return Ti.Css.mergeClassName(className);
    },
    //--------------------------------------------------
    TabBodyStyle() {
      return Ti.Css.toStyle(this.tabBodyStyle);
    },
    //--------------------------------------------------
    hasTitle() {
      return this.title || this.icon ? true : false;
    },
    //--------------------------------------------------
    hasData() {
      return !Ti.Util.isNil(this.data);
    },
    //--------------------------------------------------
    FormMode() {
      return (
        {
          "flat": "flat",
          "all": "group",
          "group": "group",
          "tab": "tab"
        }[this.mode] || "group"
      );
    },
    //--------------------------------------------------
    isFlatMode() {
      return "flat" == this.FormMode;
    },
    isGroupMode() {
      return "group" == this.FormMode;
    },
    isTabMode() {
      return "tab" == this.FormMode;
    },
    isAutoShowBlank() {
      return Ti.Util.fallback(this.autoShowBlank, false);
    },
    //--------------------------------------------------
    TheTabAt() {
      return this.tabAt.split("-");
    },
    TheTabAtX() {
      return this.TheTabAt[1];
    },
    TheTabAtY() {
      return this.TheTabAt[0];
    },
    //--------------------------------------------------
    GridContext() {
      // console.log("eval GridContext")
      return {
        ...(this.myRect || {}),
        screen: this.myScreenMode,
        lang: this.myLang
      };
    },
    //--------------------------------------------------
    GridFieldNameMaxWidth() {
      // console.log("eval FieldNameWidth")
      return Ti.Util.selectValue(this.GridContext, this.fieldNameMaxWidth, {
        by: ([v, m], { width, lang }) => {
          if (!m || m == lang || width >= m) {
            return v;
          }
        }
      });
    },
    //--------------------------------------------------
    GridColumnCount() {
      if (this.isTabMode && this.CurrentTabGroup) {
        let ch = Ti.Util.fallbackNil(
          this.CurrentTabGroup.gridColumnHint,
          this.gridColumnHint
        );
        //console.log(ch)
        return this.evalGridColumnCount(ch);
      }
      return this.evalGridColumnCount(this.gridColumnHint);
    },
    //--------------------------------------------------
    FormFields() {
      if (this.isFlatMode) {
        return this.getFlattenFormFields(this.myFormFields);
      }
      if (this.isTabMode) {
        return this.getGroupedFormFields(this.myFormFields, "i18n:others");
      }
      return this.getGroupedFormFields(this.myFormFields);
    },
    //--------------------------------------------------
    GridFormFields() {
      if (this.isFlatMode) {
        return this.FormFields;
      }
      if (this.CurrentTabGroup) {
        return this.CurrentTabGroup.fields;
      }
      // Eval group count for each group
      let fields = [];
      for (let grp of this.FormFields) {
        let gf = _.cloneDeep(grp);
        if (!Ti.Util.isNil(gf.gridColumnHint)) {
          gf.gridColumnCount = this.evalGridColumnCount(gf.gridColumnHint);
        } else {
          gf.gridColumnCount = this.GridColumnCount;
        }
        fields.push(gf);
      }
      return fields;
    },
    //--------------------------------------------------
    FormTabIndex() {
      let index = Math.max(0, this.currentTabIndex);
      index = Math.min(index, this.FormFields.length - 1);
      return index;
    },
    //--------------------------------------------------
    CurrentTabGroup() {
      if (this.isTabMode) {
        let CI = this.FormTabIndex;
        for (let li of this.FormFields) {
          if (li.index == CI) {
            let grp = _.cloneDeep(li);
            grp.bodyStyle = _.assign({}, this.TabBodyStyle, li.bodyStyle);
            return grp;
          }
        }
        return {};
      }
    },
    //--------------------------------------------------
    // add "current" to theTabList
    TabItems() {
      let items = [];
      let CI = this.FormTabIndex;
      _.forEach(this.FormFields, (li, index) => {
        let isCurrent = index == CI;
        items.push(
          _.assign({}, li, {
            index,
            isCurrent,
            className: Ti.Css.mergeClassName(
              {
                "is-current": isCurrent
              },
              li.className
            )
          })
        );
      });
      return items;
    },
    //--------------------------------------------------
    GridContainerConf() {
      return {
        tipAsPopIcon: this.tipAsPopIcon,
        autoFieldNameTip: this.autoFieldNameTip,
        data: this.myData,
        status: this.fieldStatus,
        fieldBorder: this.fieldBorder,
        statusIcons: this.statusIcons,
        fieldNameMaxWidth: this.GridFieldNameMaxWidth,
        readonly: this.isReadonly,
        batchReadonly: this.isBatchReadonly
      };
    },
    //--------------------------------------------------
    GridSetupMenu() {
      let items = [];
      if (this.canCustomizedFields) {
        items.push(
          _.assign(
            {
              icon: "fas-tools",
              text: "i18n:setup-fields"
            },
            this.setupFieldsAction,
            {
              eventName: "form:setup:open"
            }
          )
        );
        items.push(
          _.assign(
            {
              icon: "zmdi-time-restore-setting",
              text: "i18n:setup-reset"
            },
            this.setupFieldsCleanAction,
            {
              eventName: "form:setup:clean",
              disabled: !this.hasCustomizedWhiteFields
            }
          )
        );
      }
      if (!_.isEmpty(items)) {
        if (this.setupMoreIcon) {
          return _.assign(
            {
              items: [
                {
                  icon: this.setupMoreIcon,
                  items
                }
              ]
            },
            this.setupMenuConf
          );
        }
        return _.assign(
          {
            items
          },
          this.setupMenuConf
        );
      }
    },
    //--------------------------------------------------
    GridActionButtons() {
      let setup = [];

      // Submit
      if (this.canSubmit) {
        setup.push(
          _.assign(
            {
              text: "i18n:submit"
            },
            this.submitButton,
            {
              eventName: "form:submit"
            }
          )
        );
      }

      // Confirm Change
      if (this.isFormNotifyConfirm) {
        // Edit
        if (this.isReadonly) {
          setup.push(
            _.assign(
              {
                text: "i18n:edit-content"
              },
              this.editButton,
              {
                eventName: "form:edit"
              }
            )
          );
        }
        // Confirm | Reset
        else {
          // Confirm
          setup.push(
            _.assign(
              {
                icon: "far-check-circle",
                text: "i18n:ok"
              },
              this.confirmButton,
              {
                eventName: "form:confirm",
                disabled: !this.isFormDataChanged
              }
            )
          );
          // Reset
          setup.push(
            _.assign(
              {
                icon: "zmdi-time-restore",
                text: "i18n:cancel"
              },
              this.resetButton,
              {
                eventName: "form:reset"
              }
            )
          );
        }
      }

      // Others Customized action
      _.forEach(this.actionButtonSetup, (a) => setup.push(a));

      // Done
      if (!_.isEmpty(setup)) {
        return _.assign(
          {
            className: `btn-r4 at-${this.actionAlign}`,
            size: "tiny" == this.spacing ? "tiny" : "small",
            setup
          },
          this.actionButtonConf
        );
      }
    },
    //--------------------------------------------------
    showSetupMenu() {
      return !_.isEmpty(this.GridSetupMenu);
    },
    //--------------------------------------------------
    showFooterActions() {
      return !_.isEmpty(this.GridActionButtons);
    }
    //--------------------------------------------------
  },
  //////////////////////////////////////////////////////
  methods: {
    //--------------------------------------------------
    OnMainScroll(evt) {
      Ti.Viewport.notifyScroll(evt);
    },
    //--------------------------------------------------
    OnTabBodyScroll(evt) {
      Ti.Viewport.notifyScroll(evt);
    },
    //--------------------------------------------------
    OnClickFormTop() {
      this.myActivedFieldKey = null;
    },
    //--------------------------------------------------
    OnResize() {
      this.evalMyScreenMode();
      if (_.isElement(this.$el)) {
        this.myRect = Ti.Rects.createBy(this.$el);
      }
    },
    //--------------------------------------------------
    OnClickTab({ index }) {
      this.currentTabIndex = index;
      if (this.keepTabIndexBy) {
        Ti.Storage.session.set(this.keepTabIndexBy, index);
      }
    },
    //--------------------------------------------------
    OnFormEdit() {
      this.myReadonly = false;
    },
    //--------------------------------------------------
    OnFormConfirm() {
      //console.log("OnFormConfirm");
      // Check Required
      let data = this.getData();
      let formData = _.assign(_.cloneDeep(this.myData), data);
      let errMsg = Ti.Util.checkFormRequiredFields(this.myFormFields, formData);
      if (errMsg) {
        Ti.Alert(errMsg, { type: "error" });
        return;
      }

      this.$notify("change", data);
      this.myReadonly = this.readonly;
    },
    //--------------------------------------------------
    OnFormReset() {
      this.myData = _.cloneDeep(this.data) || {};
      this.myReadonly = this.readonly;
    },
    //--------------------------------------------------
    OnFormSubmit() {
      let data = this.getData();
      let formData = _.assign(_.cloneDeep(this.myData), data);
      let errMsg = Ti.Util.checkFormRequiredFields(this.myFormFields, formData);
      if (errMsg) {
        Ti.Alert(errMsg, { type: "error" });
        return;
      }

      this.$notify("submit", data);
    },
    //--------------------------------------------------
    async OnFormSetupClean() {
      if (this.keepCustomizedTo) {
        let cuo = Ti.Storage.local.getObject(this.keepCustomizedTo);
        cuo.whiteFields = undefined;
        Ti.Storage.local.setObject(this.keepCustomizedTo, cuo);
      }

      // Update the new field key
      this.evalFormBlackFieldList();
      this.evalFormWhiteFieldList();
      await this.evalFormFieldList();
    },
    //--------------------------------------------------
    async OnFormSetupOpen() {
      let cans = _.map(this.myCandidateFormFields, ({ race, key, title }) => {
        if ("Normal" == race) {
          return { text: title, value: key };
        }
      });
      let vals = [];
      const _join_selected_fields = (fields = []) => {
        for (let fld of fields) {
          let { race, key, fields } = fld;
          if ("Normal" == race) {
            vals.push(key);
          } else if ("Group" == race && !_.isEmpty(fields)) {
            _join_selected_fields(fields);
          }
        }
      };
      _join_selected_fields(this.myFormFields);

      // CleanUp
      cans = _.without(cans, undefined);
      vals = _.without(vals, undefined);

      // Show the dialog
      let whiteFields = await Ti.App.Open(
        _.assign(
          {
            title: "i18n:choose-fields",
            width: "6.4rem",
            height: "90%",
            position: "bottom"
          },
          this.customizeDialog,
          {
            result: vals,
            comType: "TiTransfer",
            comConf: {
              options: cans
            },
            components: ["@com:ti/transfer"]
          }
        )
      );

      // User cancel
      if (!whiteFields) {
        return;
      }

      // Store to local
      if (this.keepCustomizedTo) {
        let cuo = Ti.Storage.local.getObject(this.keepCustomizedTo);
        cuo.whiteFields = whiteFields;
        Ti.Storage.local.setObject(this.keepCustomizedTo, cuo);
      }

      // Update the new field key
      this.evalFormWhiteFieldList(whiteFields);

      // Customized white list will cause prop.blackField be ignored
      this.myFieldBlackList = {};

      await this.evalFormFieldList();
    },
    //--------------------------------------------------
    //
    //           Utility
    //
    //--------------------------------------------------
    evalGridColumnCount(columnHint) {
      if (columnHint >= 1) {
        return columnHint;
      }
      return Ti.Util.selectValue(this.GridContext, columnHint, {
        by: ([v, m], { width, screen }) => {
          if (!m || m == screen || width >= m) {
            return v;
          }
        }
      });
    },
    //--------------------------------------------------
    restoreCurrentTabIndexFromLocal() {
      if (this.keepTabIndexBy) {
        this.currentTabIndex = Ti.Storage.session.getInt(
          this.keepTabIndexBy,
          0
        );
      }
    },
    //--------------------------------------------------
    restoreCustomizedFromLocal() {
      let re = {
        whiteFields: undefined
      };
      if (this.keepCustomizedTo) {
        let cus = Ti.Storage.local.getObject(this.keepCustomizedTo);
        _.assign(re, cus);
      }
      return re;
    },
    //--------------------------------------------------
    tryEvalData(newVal, oldVal) {
      if (!_.isEqual(newVal, oldVal)) {
        this.myData = _.cloneDeep(newVal) || {};
      }
    }
    //--------------------------------------------------
  },
  //////////////////////////////////////////////////////
  watch: {
    "fields": "tryEvalFormFieldList",
    //"myData": "tryEvalFormFieldList",
    "data": {
      handler: "tryEvalData",
      immediate: true
    },
    "myData": "tryEvalFormFieldList",
    "isReadonly": "tryEvalFormFieldList",
    "myActivedFieldKey": "tryEvalFormFieldList",
    "batchHint": "tryEvalFormFieldList"
  },
  //////////////////////////////////////////////////////
  created: function () {
    // Current tab
    this.restoreCurrentTabIndexFromLocal();

    // Curstomzed Setting
    let cus = this.restoreCustomizedFromLocal();
    // Customized white list will cause prop.blackField be ignored
    if (_.isEmpty(cus.whiteFields) || !_.isEmpty(this.blackFields)) {
      this.evalFormBlackFieldList();
    }
    if (this.canCustomizedFields || !_.isEmpty(this.whiteFields)) {
      this.evalFormWhiteFieldList(cus.whiteFields);
    }

    // Screen
    this.evalMyScreenMode();
  },
  //////////////////////////////////////////////////////
  mounted: async function () {
    Ti.Viewport.watch(this, {
      resize: () => {
        this.OnResize();
      }
    });
    _.delay(() => {
      this.OnResize();
    }, this.adjustDelay || 0);
    //...................................
    this.evalBatchEditableFields();
    await this.evalFormFieldList();
  },
  ///////////////////////////////////////////////////
  beforeDestroy: function () {
    Ti.Viewport.unwatch(this);
  }
  //////////////////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'thing-creator.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/thing/manager/com/thing-creator/thing-creator.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////
  //inject: ["$ThingManager"],
  ///////////////////////////////////////////
  data : ()=>({
    "myData" : undefined,
    "creating" : false
  }),
  ///////////////////////////////////////////
  props : {
    "fields" : {
      type : Array,
      default : ()=>[]
    },
    "data" : {
      type : Object,
      default : ()=>({})
    },
    "form": {
      type : Object,
      default : ()=>({})
    },
    "fixed": {
      type: Object,
      default: undefined
    }
  },
  ///////////////////////////////////////////
  computed: {
    TheData() {
      return this.myData || this.data
    },
    TheForm() {
      return _.assign({
        onlyFields: false,
        adjustDelay: 0
      }, this.form)
    }
  },
  ///////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnFormInit($form) {
      this.$form = $form
    },
    //--------------------------------------
    OnFormFieldChange(pair={}) {
      //console.log("OnFormFieldChange", pair)
      this.myData = this.$form.getData(pair)
    },
    //--------------------------------------
    OnFormChange(data) {
      //console.log("OnFormChange", data)
      this.myData = data
    },
    //--------------------------------------
    async OnCreate() {
      this.creating = true
      let reo;
      let $ThingManager = this.tiParentCom("WnThingManager")
      if(!$ThingManager) {
        $ThingManager = this.tiParentCom("WnThAdaptor")
      }
      reo = await $ThingManager.dispatch("create", this.myData)
      this.creating = false
      if(reo && !(reo instanceof Error)) {
        this.$notify("block:hide", "creator")
      }
    },
    //--------------------------------------
    async OnSubmit() {
      this.$nextTick(()=>{
        this.OnCreate()
      })
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  mounted() {
    this.myData = this.$form.getData()
  }
  ///////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-tile-article.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/tile/article/web-tile-article.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  props : {
    //-----------------------------------
    // Data
    //-----------------------------------
    "title" : String,
    "content" : String,
    "contentType" : {
      type : String,
      default : "text",
      validator : v=>/^(text|html|markdown)$/.test(v)
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "href" : String,
    "newtab" : {
      type: Boolean,
      default: false
    },
    "emitName" : String,
    "payload" : undefined,
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "headerStyle" : Object,
    "articleStyle" : Object,
    "footerStyle" : Object,
    "btnIcon" : String,
    "btnText" : String,
    "backgroundSrc" : {
      type : [String, Object]
    },
    "backgroundPreview" : Object,
    "backgroundAtHeader" : Boolean,
    //-----------------------------------
    // Measure
    //-----------------------------------
    "headerHeight" : {
      type : [Number, String]
    },
    "width" : {
      type : [Number, String]
    },
    "height" : {
      type : [Number, String]
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-bg-at-top"  : !this.backgroundAtHeader,
        "is-bg-at-head" : this.backgroundAtHeader,
        "has-content" : this.hasContent,
        "nil-content" : !this.hasContent,
        "has-button" : this.hasButton,
        "nil-button" : !this.hasButton,
      })
    },
    //--------------------------------------
    TopStyle() {
      let backgroundImage = null
      if(this.TheBackgroundImageSrc && !this.backgroundAtHeader) {
        backgroundImage = `url('${this.TheBackgroundImageSrc}')`
      }
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height,
        backgroundImage
      })
    },
    //--------------------------------------
    TheHeaderStyle() {
      let backgroundImage = null
      if(this.TheBackgroundImageSrc && this.backgroundAtHeader) {
        backgroundImage = `url('${this.TheBackgroundImageSrc}')`
      }
      return Ti.Css.toStyle(_.assign({
        height : this.headerHeight,
        backgroundImage
      }, this.headerStyle))
    },
    //--------------------------------------
    hasButton() {
      return this.btnText || this.btnIcon
    },
    //--------------------------------------
    TheBackgroundImageSrc() {
      return Ti.WWW.evalObjPreviewSrc(this.backgroundSrc, this.backgroundPreview)
    },
    //--------------------------------------
    LinkTarget() {
      return this.newtab ? '_blank' : undefined
    },
    //--------------------------------------
    hasContent() {
      return !Ti.S.isBlank(this.content)
    },
    //--------------------------------------
    HtmlContent() {
      if(this.hasContent) {
        if("text" == this.contentType) {
          return this.content.replace(/\r?\n/g, '<br>')
        }
        if("markdown" == this.contentType) {
          // TODO convert markdown
          return this.content
        }
        // Raw HTML
        return this.content
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-obj-text.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/text/wn-obj-text.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////
  data: () => ({
    myContent: undefined
  }),
  ////////////////////////////////////////////
  props: {
    "meta": {
      type: Object,
      default: () => ({})
    },
    "blankAs": {
      type: Object,
      default: () => ({
        className: "as-big",
        icon: "fas-align-justify",
        text: "i18n:empty"
      })
    },
  },
  ////////////////////////////////////////////
  computed: {
    //----------------------------------------
    isEmpty() {
      return _.isEmpty(this.myContent)
    }
    //----------------------------------------
  },
  ////////////////////////////////////////////
  methods: {
    //----------------------------------------
    async reloadContent() {
      if (!this.meta) {
        this.myContent = undefined
      } else {
        this.myContent = await Wn.Io.loadContent(this.meta)
      }
    }
    //----------------------------------------
  },
  ////////////////////////////////////////////
  watch: {
    "meta": {
      handler: "reloadContent",
      immediate: true
    }
  }
  ////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'm-obj-browser-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/obj-browser/m-obj-browser-actions.mjs'] = (function(){
////////////////////////////////////////////
function getKeepSearchAs(state) {
  if (state.meta && state.keepSearch) {
    return `browser-search-${state.meta.id}`
  }
}
////////////////////////////////////////////
const _M = {
  //----------------------------------------
  async updateCurrentMeta({ dispatch }, { name, value }) {
    console.log("hahah", name, value)
    if (name) {
      await dispatch("updateCurrentMetas", {
        [name]: value
      })
    }
  },
  //----------------------------------------
  async updateCurrentMetas({ state, commit }, data = {}) {
    //console.log("I will update current by", data)
    if (state.data && state.currentId && !_.isEmpty(data)) {
      // Get current 
      let current = _.find(state.data.list, ({ id }) => id == state.currentId)
      //console.log("find current", current)
      // Check Necessary
      if (_.isMatchWith(current, data, _.isEqual)) {
        return
      }

      // Mark field status
      _.forEach(data, (val, name) => {
        commit("setFieldStatus", { name, type: "spinning", text: "i18n:saving" })
      })

      // Save current meta field
      let json = JSON.stringify(data)
      let id = current.id
      let cmdText = `o id:${id} @update @json -cqn`
      let reo = await Wn.Sys.exec2(cmdText, { input: json, as: "json" })
      let isError = reo instanceof Error;

      // Update state
      if (!isError && !Ti.Util.isNil(reo)) {
        commit("setDataItem", reo)
      }

      _.forEach(data, (val, name) => {
        if (isError) {
          commit("setFieldStatus", {
            name,
            type: "warn",
            text: reo.message || "i18n:fail"
          })
        } else {
          commit("setFieldStatus", {
            name,
            type: "ok",
            text: "i18n:ok"
          })
          _.delay(() => { commit("clearFieldStatus", name) }, 500)
        }
      })
    }
  },
  //----------------------------------------
  saveSearchSetting({ state, commit }, { filter, sorter, pager } = {}) {
    if (filter) {
      commit("setFilter", filter)
    }
    if (sorter) {
      commit("setSorter", sorter)
    }
    if (pager) {
      commit("setPager", pager)
    }

    let keepAs = getKeepSearchAs(state)
    if (keepAs) {
      Ti.Storage.session.setObject(keepAs, {
        filter: state.filter,
        sorter: state.sorter,
        pager: {
          pageNumber: state.pageNumber,
          pageSize: state.pageSize
        }
      })
    }
  },
  //----------------------------------------
  recoverSearchSetting({ state, commit }) {
    let loc = Ti.Util.parseHref(window.location.href)
    let afo = Ti.Util.parseAnchorFilter(loc.anchor)

    let keepAs = getKeepSearchAs(state)
    if (keepAs) {
      //................................
      let {
        filter, sorter, pager
      } = Ti.Storage.session.getObject(keepAs, {})
      //................................
      if(afo) {
        filter = filter || {}
        filter.keyword = afo.keyword || filter.keyword
        filter.match = afo.match || filter.match

        sorter = afo.sort || sorter
      }
      //................................
      pager = _.assign({}, {
        pageNumber: state.pageNumber || 1,
        pageSize: state.pageSize || 1000
      }, pager)
      //................................
      if (filter) {
        //console.log("filter", filter)
        commit("setFilter", filter)
      }
      //................................
      if (sorter) {
        //console.log("sorter", sorter)
        commit("setSorter", sorter)
      }
      //................................
      if (pager) {
        commit("setPager", pager)
      }
      //................................
    }
  },
  //----------------------------------------
  async mergeSearchMatchOmitNilAndQuery({commit, dispatch}, match) {
    commit("mergeSearchMatchOmitNil", match)
    await dispatch("reloadData")
  },
  //----------------------------------------
  async query({ dispatch }, search = {}) {
    //console.log("browser query", search)
    dispatch("saveSearchSetting", search)
    return await dispatch("reloadData")
  },
  //----------------------------------------
  async reloadData({ state, commit, dispatch }) {
    if (state.status.reloading) {
      return
    }
    //......................................
    // Init content as null
    commit("setStatus", { reloading: true })
    //......................................
    let cmds = ['o']
    if (state.path) {
      cmds.push(`'${state.path}'`)
    }
    cmds.push('@query -pager -mine -hidden')
    //
    // Setup pager
    //
    if (state.pageSize > 0) {
      let pgsz = state.pageSize
      let pn = state.pageNumber || 1
      let skip = Math.max(0, pgsz * (pn - 1))
      if (skip > 0) {
        cmds.push(`-skip ${skip}`)
      }
      cmds.push(`-limit ${pgsz}`)
    }
    //
    // Setup sort
    //
    if (state.sorter) {
      cmds.push(`-sort '${JSON.stringify(state.sorter)}'`)
    }
    //
    // Query 
    //
    let input;
    if (state.search) {
      let flt = Wn.Util.getMatchByFilter(state.filter, state.search)
      // Empty filter, force update it again
      if (_.isEmpty(flt)) {
        commit("clearFilter")
        dispatch("saveSearchSetting", { filter: state.filter })
      }
      //console.log("customized filter", flt)
      // Customized filter
      let filterBy = Ti.Util.explainObj(state, state.filterBy)
      if (_.isFunction(filterBy)) {
        flt = filterBy({ state }, flt) || flt
      }
      input = JSON.stringify(flt)
    }
    cmds.push('@json -cqnl')
    let data = await Wn.Sys.exec2(cmds.join(' '), { as: "json", input })
    commit("setData", data)
    //......................................
    // Just update the meta   
    commit("setStatus", { reloading: false })
  },
  //----------------------------------------
  async reloadSettings({ state, commit }) {
    commit("setStatus", { reloading: true })
    let config = await Wn.Io.loadContent(state.meta, { as: "json" })
    commit("setStatus", { reloading: false })
    //
    // Commit to state
    //
    commit("setKeepSearch", Ti.Util.fallback(
      config.keepSearch, state.keepSearch, true))
    commit("setSearch", Ti.Util.fallback(config.search, state.search, {}))
    commit("setFilter", Ti.Util.fallback(config.filter, state.filter, {}))
    commit("setFilterBy", Ti.Util.fallback(config.filterBy, state.filterBy))
    commit("setSorter", Ti.Util.fallback(config.sorter, state.sorter, { nm: 1 }))
    commit("setPageNumber", Ti.Util.fallback(config.pageNumber, state.pageNumber, 1))
    commit("setPageSize", Ti.Util.fallback(config.pageSize, state.pageSize, 1000))
  },
  //----------------------------------------
  async reload({ state, commit, dispatch }, meta) {
    if (state.status.reloading
      || state.status.saving) {
      return
    }
    //......................................
    // Use the default meta
    if (_.isUndefined(meta)) {
      meta = state.meta
    }
    //......................................
    if (_.isString(meta)) {
      meta = await Wn.Io.loadMeta(meta)
    }
    else if (meta && meta.id) {
      meta = await Wn.Io.loadMetaById(meta.id)
    }
    //......................................
    // Guard
    if (!meta) {
      commit("setMeta", null)
    }
    // Save current meta as config object
    commit("setMeta", meta)
    //console.log("m-obj-current.reload", meta.id)
    //......................................
    // Reload the config
    await dispatch("reloadSettings")

    // Reload from local
    dispatch("recoverSearchSetting")

    // Reload data
    await dispatch("reloadData")
    //......................................
    // Just update the meta   
    commit("setStatus", { reloading: false })
  }
  //----------------------------------------
}
return _M;;
})()
// ============================================================
// EXPORT 'json-tree-item.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/json/tree/item/json-tree-item.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //////////////////////////////////////////
  data: () => ({

  }),
  //////////////////////////////////////////
  props: {
    "value": null,
    "valueType": {
      type: String,
      default: "Nil"
    },
    "valuePath": {
      type: [String, Array],
      default: () => []
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return Ti.Css.mergeClassName({
        "is-self-actived": this.isSelfActived,
        "is-actived": this.isActived
      })
    },
    //--------------------------------------
    isLabel() {
      return /^(Array|Object)$/.test(this.valueType)
    },
    //--------------------------------------
    isTop() {
      return this.theValuePath.length == 0
    },
    //--------------------------------------
    theLabelDisplayText() {
      if ('Array' == this.valueType) {
        return '[..]'
      }
      if ('Object' == this.valueType) {
        return '{..}'
      }
      return '???'
    },
    //--------------------------------------
    theValuePath() {
      if (_.isArray(this.valuePath)) {
        return this.valuePath
      }
      if (_.isString(this.valuePath)) {
        return _.without(this.valuePath.split(/[\/.]/g), "")
      }
      return []
    },
    //--------------------------------------
    theValueClassName() {
      return _.kebabCase(`is${this.valueType}`)
    },
    //--------------------------------------
    theValueFormat() {
      if ('String' == this.valueType) {
        return function (val) {
          if (val) {
            return `"${val}"`
          }
          return '""'
        }
      }
    },
    //--------------------------------------
    theActionMenuData() {
      //................................
      let jvTypes = [{
        name: "jvTypeArray",
        text: "i18n:json-Array",
        type: "action",
        altDisplay: {
          icon: "zmdi-check",
          capture: false
        },
        action: () => {
          this.$notify("change", { jsonMutate: "ChangeValueType", args: "Array" })
        }
      }, {
        name: "jvTypeObject",
        text: "i18n:json-Object",
        type: "action",
        altDisplay: {
          icon: "zmdi-check",
          capture: false
        },
        action: () => {
          this.$notify("change", { jsonMutate: "ChangeValueType", args: "Object" })
        }
      }]
      //................................
      // Add
      let menuData = [{
        name: "jv-add",
        type: "action",
        icon: "zmdi-plus",
        action: () => {
          this.$notify("change", { jsonMutate: "Add" })
        }
      }]
      //................................
      // Remove : If not the top
      if (!this.isTop) {
        menuData.push({
          type: "line"
        })
        // Can not remove top node
        menuData.push({
          name: "jv-remove",
          type: "action",
          icon: "zmdi-delete",
          action: () => {
            this.$notify("change", { jsonMutate: "Remove" })
          }
        })
        // Add More Types
        jvTypes.push({})

        // AddType: Boolean
        jvTypes.push({
          name: "jvTypeBoolean",
          text: "i18n:json-Boolean",
          type: "action",
          altDisplay: {
            icon: "zmdi-check",
            capture: false
          },
          action: () => {
            this.$notify("change", { jsonMutate: "ChangeValueType", args: "Boolean" })
          }
        })
        // AddType: Number
        jvTypes.push({
          name: "jvTypeNumber",
          text: "i18n:json-Number",
          type: "action",
          altDisplay: {
            icon: "zmdi-check",
            capture: false
          },
          action: () => {
            this.$notify("change", { jsonMutate: "ChangeValueType", args: "Number" })
          }
        })
        // AddType: String
        jvTypes.push({
          name: "jvTypeString",
          text: "i18n:json-String",
          type: "action",
          altDisplay: {
            icon: "zmdi-check",
            capture: false
          },
          action: () => {
            this.$notify("change", { jsonMutate: "ChangeValueType", args: "String" })
          }
        })
        // AddType: Nil
        jvTypes.push({
          name: "jvTypeNil",
          text: "i18n:json-Nil",
          type: "action",
          altDisplay: {
            icon: "zmdi-check",
            capture: false
          },
          action: () => {
            this.$notify("change", { jsonMutate: "ChangeValueType", args: "Nil" })
          }
        })
      }
      //................................
      // More: Change Type
      menuData.push({})
      menuData.push({
        key: "jv-types",
        type: "group",
        icon: "zmdi-more",
        items: jvTypes
      })
      // Done
      return menuData
    },
    //--------------------------------------
    theActionMenuStatus() {
      return {
        jvTypeBoolean: "Boolean" == this.valueType,
        jvTypeInteger: "Integer" == this.valueType,
        jvTypeFloat: "Float" == this.valueType,
        jvTypeNumber: "Number" == this.valueType,
        jvTypeString: "String" == this.valueType,
        jvTypeArray: "Array" == this.valueType,
        jvTypeObject: "Object" == this.valueType,
        jvTypeNil: "Nil" == this.valueType
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------

    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {

  },
  //////////////////////////////////////////
  mounted: function () {

  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-input-num.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/num/ti-input-num.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  props : {
    "value" : null,
    "defaultValue" : {
      type : Number,
      default : 0
    },
    "placeholder" : {
      type : [Number, String]
    },
    "maxValue" : {
      type : Number,
      default : undefined
    },
    "minValue" : {
      type : Number,
      default : undefined
    },
    "step" : {
      type : Number,
      default : 1
    },
    "width" : {
      type : [Number, String],
      default : 200
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    TopClass() {
      return this.getTopClass()
    },
    TopStyle() {
      return Ti.Css.toStyleRem100({
        width: this.width
      })
    },
    DesreaseClass() {
      if(!_.isUndefined(this.minValue) && this.value <= this.minValue) {
        return "is-disabled"
      }
      return "is-enabled"
    },
    IncreaseClass() {
      if(!_.isUndefined(this.maxValue) && this.value >= this.maxValue) {
        return "is-disabled"
      }
      return "is-enabled"
    },
    TheValue() {
      if(isNaN(this.value) 
         || !_.isNumber(this.value)) {
        return
      }
      return this.getValue(this.value)
    }
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    getValue(val) {
      if(isNaN(val) || !_.isNumber(val)) {
        return this.defaultValue
      }
      if(!_.isUndefined(this.minValue) && val < this.minValue) {
        return this.minValue
      }
      if(!_.isUndefined(this.maxValue) && val > this.maxValue) {
        return this.maxValue
      }
      return val
    },
    //------------------------------------------------
    changeByStep(n=0) {
      let val = this.TheValue
      // Start with default value
      if(_.isUndefined(val)) {
        val = this.defaultValue
      }
      // change by step
      else {
        val += (n * this.step)
      }
      // Eval the min/max range
      val = this.getValue(val)

      // Emit change
      if(val != this.value) {
        this.$notify("change", val)
      }
    },
    //------------------------------------------------
    onChanged($event) {
      let $in = $event.target
      if(_.isElement($in)) {
        let str = _.trim($in.value)
        // Notify nil
        if(_.isEmpty(str)) {
          this.$notify("change", null)  
        }
        // Notify value
        else {
          let val = str ? str * 1 : this.defaultValue
          if(!isNaN(val)) {
            let v2 = this.getValue(val)
            this.$notify("change", v2)  
          }
        }
      }
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'm-charts.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/charts/m-charts.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////
  mutations : {
    //----------------------------------------
    setMeta(state, meta) {
      state.meta = meta
    },
    //--------------------------------------------
    setChildren(state, children) {
      state.children = children
      let list = []
      _.forEach(children, ({nm,title,icon})=>{
        list.push({name:nm, title, icon})
      })
      state.chartNameList = list
      // Check current chartName
      let {name} = state.chartStatus
      if(name && _.findIndex(list, li=>li.name==name)<0) {
        if(!_.isEmpty(list)) {
          state.chartStatus.name = _.first(list).name
        }
      }
    },
    //--------------------------------------------
    setChartType(state, type) {
      state.chartStatus.type = type
    },
    //--------------------------------------------
    setChartStatus(state, chartStatus) {
      state.chartStatus = chartStatus
    },
    //--------------------------------------------
    updateChartStatus(state, chartStatus) {
      state.chartStatus = _.assign({}, state.chartStatus, chartStatus)
    },
    //--------------------------------------------
    saveChartStatus(state) {
      if(state.global.keepToLocal) {
        let key = `wn-chart-status-${state.meta.id}`
        Ti.Storage.session.setObject(key, state.chartStatus)
      }
    },
    //--------------------------------------------
    loadChartStatus(state) {
      if(state.global.keepToLocal) {
        let key = `wn-chart-status-${state.meta.id}`
        state.chartStatus = Ti.Storage.session.getObject(key, {})
      }
    },
    //--------------------------------------------
    setGlobal(state, global) {
      state.global = global
    },
    //--------------------------------------------
    setChart(state, chart) {
      state.chart = chart

      // Check current chartType
      let {type} = state.chartStatus
      //console.log("check current type:", type)
      if(!type || _.findIndex(state.chart.chartTypes, ct=>ct==type)<0) {
        state.chartStatus.type = _.first(state.chart.chartTypes)
      }
    },
    //----------------------------------------
    setChartData(state, chartData) {
      state.chartData = chartData
    },
    //----------------------------------------
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    }
    //----------------------------------------
  }
  ////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-meta-order.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/meta/order/web-meta-order.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  props : {
    "value" : {
      type : Object,
      default : ()=>({})
    },
    "proThumbSrc": {
      type : String,
      default : undefined
    },
    "proHref": {
      type : String,
      default : undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass(
        `is-${this.OrderStatus}`
      )
    },
    //--------------------------------------
    Order() {
      return this.value || {}
    },
    //--------------------------------------
    OrderId() {
      let orId = this.Order.id;
      if(orId) {
        let pos = orId.indexOf(':')
        if(pos > 0) {
          return _.trim(orId.substring(pos+1))
        }
        return orId
      }
      return '- unknown -'
    },
    //--------------------------------------
    OrderStatus() {
      return `or-st-${_.toLower(this.Order.or_st)}`
    },
    //--------------------------------------
    CurrencyChar() {
      return Ti.Bank.getCurrencyChar(this.Order.currency||"RMB")
    },
    //--------------------------------------
    Products() {
      let list = []
      _.forEach(this.value.products, it=>{
        let pro = {...it}
        if(this.proThumbSrc) {
          pro.src = Ti.S.renderBy(this.proThumbSrc, it)
        }
        if(this.proHref) {
          pro.href = Ti.S.renderBy(this.proHref, it)
        }
        pro.subtotal = Ti.Num.precise(it.price * it.amount)
        list.push(pro)
      })
      return list
    },
    //--------------------------------------
    Timestamps() {
      let list = []
      list.push(this.genTimestampItem(
        "fas-file-invoice-dollar","i18n:or-st-nw", this.Order.ct))
      list.push(this.genTimestampLine(this.Order.ok_at))
      list.push(this.genTimestampItem(
        "far-credit-card","i18n:or-st-ok", this.Order.ok_at))
      list.push(this.genTimestampLine(this.Order.sp_at))
      list.push(this.genTimestampItem(
        "fas-shipping-fast","i18n:or-st-sp", this.Order.sp_at))
      list.push(this.genTimestampLine(this.Order.dn_at))
      list.push(this.genTimestampItem(
        "fas-clipboard-check","i18n:or-st-dn", this.Order.dn_at, true))
      return list
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickProduct({id}) {
      this.$notify("open:product", id)
    },
    //--------------------------------------
    genTimestampItem(icon, title, t, atLast=false) {
      let it = {type:"item", icon, title, time:t}
      let isOn = (t && t>0)
      it.className =  {
        "is-item": true,
        "is-on": isOn,
        "is-off": !isOn,
        "at-last": atLast
      }
      if(isOn) {
        it.dateText = Ti.DateTime.format(t, "yyyy-MM-dd")
        it.timeText = Ti.DateTime.format(t, "HH:mm:ss")
      }
      return it
    },
    //--------------------------------------
    genTimestampLine(t) {
      let isOn = (t && t>0)
      return {
        type:"line",
        isOn,
        icon: isOn
          ? "fas-chevron-right"
          : "fas-circle",
        className : {
          "is-line": true,
          "is-on": isOn,
          "is-off": !isOn
        }
      }
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'm-wn-obj-mutations.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/obj/m-wn-obj-mutations.mjs'] = (function(){
////////////////////////////////////////////////
function saveLocalBehavior(state, key, val) {
  if (state.lbkAt && !state.lbkOff) {
    // Ignore ?
    if (state.lbkIgnore && state.lbkIgnore(key)) {
      return;
    }
    // Save to local
    let be = Ti.Storage.local.getObject(state.lbkAt);
    be[key] = val;
    Ti.Storage.local.setObject(state.lbkAt, be);
  }
}
////////////////////////////////////////////////
const _M = {
  //----------------------------------------
  setModuleName(state, moduleName) {
    state.moduleName = moduleName;
  },
  //----------------------------------------
  setPvg(state, pvg) {
    state.pvg = pvg;
  },
  //----------------------------------------
  assignPvg(state, pvg) {
    let po = _.cloneDeep(state.pvg || {});
    _.assign(po, pvg);
    state.pvg = po;
  },
  //----------------------------------------
  setView(state, view) {
    state.view = view;
  },
  //----------------------------------------
  setLocalBehaviorKeepAt(state, keyAt) {
    state.localBehaviorKeepAt = keyAt;
  },
  //----------------------------------------
  explainLocalBehaviorKeepAt(state) {
    let keyAt = state.localBehaviorKeepAt;
    state.lbkAt = Ti.Util.explainObj(state, keyAt);
    state.lbkIgnore = Ti.AutoMatch.parse(state.localBehaviorIgnore);
  },
  //----------------------------------------
  setLbkOff(state, off = true) {
    state.lbkOff = off;
  },
  setLbkOn(state, on = true) {
    state.lbkOff = !on;
  },
  //----------------------------------------
  setGuiShown(state, shown) {
    let guiShown = _.pickBy(shown, (v) => v);
    state.guiShown = guiShown;
    saveLocalBehavior(state, "guiShown", guiShown);
  },
  //----------------------------------------
  //
  // Object DIR
  //
  //----------------------------------------
  setDirId(state, dirId) {
    state.dirId = dirId;
  },
  //----------------------------------------
  setDir(state, oDir) {
    state.oDir = oDir;
  },
  //----------------------------------------
  setMappingDirPath(state, dirPath) {
    state.mappingDirPath = dirPath;
  },
  //----------------------------------------
  //
  // Search
  //
  //----------------------------------------
  setFixedMatch(state, fm) {
    state.fixedMatch = _.cloneDeep(fm);
  },
  //----------------------------------------
  setFilter(state, filter) {
    state.filter = _.omitBy(filter, (v) => Ti.Util.isNil(v));
    saveLocalBehavior(state, "filter", filter);
  },
  //----------------------------------------
  setSorter(state, sorter) {
    state.sorter = sorter;
    saveLocalBehavior(state, "sorter", sorter);
  },
  //----------------------------------------
  setObjKeys(state, objKeys) {
    state.objKeys = objKeys;
  },
  //----------------------------------------
  setList(state, list) {
    state.list = list;
  },
  //----------------------------------------
  prependListItem(state, newItem) {
    Ti.Util.UpsertStateDataItemAt(state, newItem, -1, "..");
  },
  //----------------------------------------
  appendListItem(state, newItem) {
    Ti.Util.UpsertStateDataItemAt(state, newItem, 1, "..");
  },
  //----------------------------------------
  setListItem(state, newItem) {
    Ti.Util.UpsertStateDataItemAt(state, newItem, 0, "..");
    if (newItem && newItem.id == state.currentId) {
      state.meta = newItem;
    }
  },
  //----------------------------------------
  mergeListItem(state, theItem) {
    Ti.Util.MergeStateDataItem(state, theItem, "..");
  },
  //----------------------------------------
  removeListItems(state, items = []) {
    Ti.Util.RemoveStateDataItems(state, items, "..");
  },
  //----------------------------------------
  listCheckAll(state) {
    let ids = {};
    _.forEach(state.list, (li) => (ids[li.id] = true));
    state.checkedIds = ids;
  },
  //----------------------------------------
  listCancelAll(state) {
    state.currentId = null;
    state.checkedIds = {};
  },
  //----------------------------------------
  setCurrentId(state, currentId) {
    state.currentId = currentId;
    state.status = _.assign({}, state.status, {
      hasCurrent: !Ti.Util.isNil(currentId)
    });
    saveLocalBehavior(state, "currentId", currentId);
  },
  //----------------------------------------
  setCheckedIds(state, checkedIds) {
    let ids;
    if (_.isArray(checkedIds)) {
      ids = {};
      _.forEach(checkedIds, (v) => (ids[v] = true));
    } else {
      ids = _.pickBy(checkedIds, (v) => v);
    }
    state.checkedIds = ids;
    state.status = _.assign({}, state.status, {
      hasChecked: !_.isEmpty(ids)
    });
    saveLocalBehavior(state, "checkedIds", ids);
  },
  //----------------------------------------
  setPager(state, pager) {
    state.pager = pager;
    let pageSize = Ti.Util.getValue(state.pager, "pageSize", "pgsz") || 0;
    saveLocalBehavior(state, "pageSize", pageSize);
  },
  //----------------------------------------
  assignPager(state, pager) {
    let pg = _.cloneDeep(state.pager || {});
    _.forEach(pager, (v, k) => {
      if (!Ti.Util.isNil(v)) {
        pg[k] = v;
      }
    });
    state.pager = pg;
    let pageSize = Ti.Util.getValue(state.pager, "pageSize", "pgsz") || 0;
    saveLocalBehavior(state, "pageSize", pageSize);
  },
  //----------------------------------------
  //
  // Meta / Date
  //
  //----------------------------------------
  setCurrentMeta(state) {
    let currentId = state.currentId;
    state.LOG("setCurrentMeta", currentId);
    let hasCurrent = true;
    // Clear current meta
    if (Ti.Util.isNil(currentId) || _.isEmpty(state.list)) {
      hasCurrent = false;
    }
    // Find current meta
    else {
      hasCurrent = false;
      for (let it of state.list) {
        if (it.id == currentId) {
          state.meta = it;
          hasCurrent = true;
          break;
        }
      }
    }
    // Reset current/checkedIds
    if (!hasCurrent) {
      state.meta = null;
      state.currentId = null;
    }
    // Update status
    state.status = _.assign({}, state.status, {
      "hasMeta": state.meta ? true : false,
      "hasCurrent": hasCurrent,
      "hasChecked": !_.isEmpty(state.checkedIds)
    });
  },
  //----------------------------------------
  setMeta(state, meta) {
    state.meta = meta;
    state.status = _.assign({}, state.status, {
      hasMeta: meta ? true : false
    });
  },
  //--------------------------------------------
  assignMeta(state, meta) {
    state.meta = _.assign({}, state.meta, meta);
  },
  //--------------------------------------------
  mergeMeta(state, meta) {
    state.meta = _.merge({}, state.meta, meta);
  },
  //----------------------------------------
  setContent(state, content) {
    if (content && !_.isString(content)) {
      content = JSON.stringify(content, null, "   ");
    }
    state.content = content;
  },
  //----------------------------------------
  setSavedContent(state, content) {
    state.__saved_content = content;
  },
  //----------------------------------------
  setContentPath(state, contentPath) {
    state.contentPath = contentPath;
  },
  //----------------------------------------
  setContentType(state, contentType) {
    state.contentType = contentType;
  },
  //----------------------------------------
  setContentData(state, contentData) {
    state.contentData = contentData;
  },
  //----------------------------------------
  setContentQuietParse(state, quietParse) {
    state.contentQuietParse = quietParse;
  },
  //----------------------------------------
  setStatus(state, status) {
    state.status = _.assign({}, state.status, status);
  },
  //----------------------------------------
  clearStatus(state) {
    state.status = {};
  },
  //----------------------------------------
  syncStatusChanged(state) {
    if (Ti.Util.isNil(state.content) && Ti.Util.isNil(state.__saved_content)) {
      state.status.changed = false;
    } else {
      state.status.changed = !_.isEqual(state.content, state.__saved_content);
    }
  },
  //----------------------------------------
  setItemStatus(state, status = {}) {
    state.itemStatus = _.assign({}, state.itemStatus, status);
  },
  //----------------------------------------
  clearItemStatus(state, names = []) {
    // Clean All
    if (_.isEmpty(names)) {
      state.itemStatus = {};
    }
    // Clear one
    else {
      state.itemStatus = _.omit(state.itemStatus, names);
    }
  },
  //----------------------------------------
  setFieldStatus(state, { name, type, text } = {}) {
    if (name) {
      let ukey = Ti.Util.anyKey(name);
      Vue.set(state.fieldStatus, ukey, { type, text });
    }
  },
  //----------------------------------------
  clearFieldStatus(state, names = []) {
    // Clean All
    if (_.isEmpty(names)) {
      state.fieldStatus = {};
    }
    // Clear one
    else {
      state.fieldStatus = _.omit(state.fieldStatus, names);
    }
  },
  //----------------------------------------
  //
  // GUI Settings
  //
  //----------------------------------------
  setActionsPath(state, actionsPath) {
    state.actionsPath = actionsPath;
  },
  setLayoutPath(state, layoutPath) {
    state.layoutPath = layoutPath;
  },
  setSchemaPath(state, schemaPath) {
    state.schemaPath = schemaPath;
  },
  setMethodPaths(state, methodPaths) {
    state.methodPaths = methodPaths;
  },
  //----------------------------------------
  setObjActions(state, objActions = {}) {
    state.objActions = objActions;
  },
  setLayout(state, layout = {}) {
    state.layout = layout;
  },
  setSchema(state, schema = {}) {
    state.schema = schema;
  },
  assignSchema(state, schema = {}) {
    state.schema = _.assign({}, state.schema, schema);
  },
  mergeSchema(state, schema = {}) {
    let sc = _.cloneDeep(state.schema);
    state.schema = _.merge(sc, schema);
  },
  setObjMethods(state, objMethods = {}) {
    state.objMethods = objMethods;
  },
  assignObjMethods(state, objMethods = {}) {
    state.objMethods = _.assign({}, state.objMethods, objMethods);
  },
  //----------------------------------------
  resetState(state) {
    _.assign(state, {
      "dirId": null,
      "oDir": null,
      "mappingDirPath": null,
      "fixedMatch": {},
      "filter": {},
      "sorter": {
        "nm": 1
      },
      "objKeys": null,
      "list": [],
      "currentId": null,
      "checkedIds": {},
      "pager": {
        "pn": 1,
        "pgsz": 50,
        "pgc": 0,
        "sum": 0,
        "skip": 0,
        "count": 0
      },
      "meta": null,
      "content": null,
      "__saved_content": null,
      "contentPath": "<self>",
      "contentType": "<MIME>",
      "contentData": null,
      "contentQuietParse": false,
      "status": {
        "reloading": false,
        "doing": false,
        "saving": false,
        "deleting": false,
        "changed": false,
        "restoring": false,
        "hasCurrent": false,
        "hasChecked": false,
        "hasMeta": false
      },
      "fieldStatus": {},
      "guiShown": {},
      "objActions": null,
      "layout": {},
      "schema": {},
      "objMethods": {}
    });
  }
  //----------------------------------------
};
return _M;;
})()
// ============================================================
// EXPORT 'wn-combo-edit-com.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/combo/edit-com/wn-combo-edit-com.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data : ()=>({
    myCom: null
  }),
  ////////////////////////////////////////////////////
  // props 
  props : {
    "value" : {
      type : Object,
      default : ()=>({})
    },
    "placeholder" : {
      type: String,
      default: "i18n:wn-edit-com-nil"
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    Dict() {
      return Wn.Dict.hMakerComponents()
    },
    //------------------------------------------------
    ComIcon() {
      return _.get(this.myCom, "icon")
    },
    //------------------------------------------------
    ComTitle() {
      return _.get(this.myCom, "title")
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    async OnClickValue() {
      //console.log("click", this.value)
      let com = await Wn.EditTiComponent(this.value)
      if(com) {
        this.notifyChange(com)
      }
    },
    //--------------------------------------
    OnClickSuffixIcon() {
      this.notifyChange({})
    },
    //--------------------------------------
    notifyChange(com={}) {
      if(!com.comType) {
        com.comType = undefined
        com.comConf = undefined
      }
      this.$notify("change", com)
    },
    //--------------------------------------
    async reloadMyCom() {
      if(!_.isEmpty(this.value)) {
        let {comType} = this.value
        this.myCom = await this.Dict.getItem(comType)
      }
      // Empty
      else {
        this.myCom = null
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    "value" : {
      handler: "reloadMyCom",
      immediate : true
    }
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-meta-commodity.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/meta/commodity/web-meta-commodity.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    "meta" : {
      type : Object,
      default : ()=>({})
    },
    "previewSrc": {
      type: String,
      default: null
    },
    "titleKey" : {
      type : String,
      default : "title"
    },
    "buyAmount" : {
      type : Number,
      default : 1
    },
    "form" : {
      type : Object,
      default : ()=>({})
    },
    "actions": {
      type: Object,
      default: ()=>({
        "buy" : "i18n:buy-now"
      })
    }
  },
  //////////////////////////////////////////
  computed : {
    //......................................
    TopClass() {
      return this.getTopClass()
    },
    //......................................
    FormData() {
      return {
        ...this.meta,
        buyAmount : this.buyAmount
      }
    },
    //......................................
    previewImageSrc() {
      if(this.previewSrc && this.meta) {
        return Ti.S.renderBy(this.previewSrc, this.meta)
      }
    },
    //......................................
    MetaTitle() {
      if(this.titleKey) {
        return _.get(this.meta, this.titleKey)
      }
      return "NoTitle"
    }
    //......................................
  },
  //////////////////////////////////////////
  methods : {
    //......................................
    OnClickBuyNow() {
      this.$notify("buy:now")
    },
    //......................................
    OnFormChanged({name, value}) {
      this.$notify("meta:changed", {name, value})
    }
    //......................................
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-text-json.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/json/ti-text-json.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  props: {
    "tabAt": {
      type: String,
      default: "bottom-left",
      validator: (v) => /^(top|bottom)-(left|center|right)$/.test(v)
    },
    "value": undefined,
    "valueType": {
      type: String,
      default: "text",
      validator: v => /^(text|obj)$/.test(v)
    },
    "jsonIndent": {
      type: String,
      default: '   '
    },
    "tree": {
      type: Object,
      default: () => ({})
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TheData() {
      if (!Ti.Util.isNil(this.value)) {
        if (_.isString(this.value)) {
          return Ti.Types.safeParseJson(this.value, Ti.Err.make("e.json.syntax"))
        }
        return this.value
      }
      return null
    },
    //--------------------------------------
    isSyntaxError() {
      return this.TheData instanceof Error
    },
    //--------------------------------------
    TheSource() {
      if (!Ti.Util.isNil(this.value)) {
        if (_.isString(this.value)) {
          return this.value
        }
        return JSON.stringify(this.value, null, '  ')
      }
      return ""
    },
    //--------------------------------------
    TheLayout() {
      return {
        type: "tabs",
        tabAt: this.tabAt,
        blocks: [{
          title: "i18n:structure",
          name: "tree",
          body: "desktop-tree"
        }, {
          title: "i18n:source-code",
          name: "source",
          body: "desktop-source"
        }]
      }
    },
    //--------------------------------------
    TheSchema() {
      //....................................
      // Source Conf
      let desktopTree;
      if (this.isSyntaxError) {
        desktopTree = {
          comType: "TiLoading",
          comConf: {
            className: "is-error",
            icon: "im-warning",
            text: "i18n:json-syntax-err-tip"
          }
        }
      }
      //
      else {
        desktopTree = {
          comType: "TiTextJsonTree",
          comConf: _.assign({}, this.tree, {
            value: this.TheData
          })
        }
      }
      //....................................
      // Done
      return {
        "desktop-tree": desktopTree,
        "desktop-source": {
          comType: "TiTextCodeAce",
          comConf: {
            mode: "json",
            value: this.TheSource
          }
        }
      }
      //....................................
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnChange(payload) {
      //console.log("TiObjJson->OnChange", payload)
      if ("obj" == this.valueType) {
        if (_.isString(payload)) {
          try {
            payload = JSON.parse(payload)
          } catch (E) {
            return
          }
        }
        this.$notify("change", payload)
      }
      // Pure text
      else {
        payload = Ti.Util.fallback(payload, null)
        if(!_.isString(payload)) {
          payload = JSON.stringify(payload, null, '  ')
        }
        this.$notify('change', payload)
      }
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-combo-table.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/table/ti-combo-table.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      });
    },
    //------------------------------------------------
    ActionItems() {
      let items = [
        {
          icon: this.newItemIcon,
          text: this.newItemText,
          action: () => {
            this.doAddNewItem();
          }
        },
        {},
        {
          icon: "far-trash-alt",
          tip: "i18n:del-checked",
          action: () => {
            this.removeChecked();
          }
        }
      ];
      if (this.itemEditable) {
        items.push(
          {
            icon: "far-edit",
            tip: "i18n:edit",
            action: () => {
              this.doEditCurrentMeta();
            }
          },
          {}
        );
      }
      items.push(
        {
          icon: "fas-long-arrow-alt-up",
          tip: "i18n:move-up",
          action: () => {
            this.moveCheckedUp();
          }
        },
        {
          icon: "fas-long-arrow-alt-down",
          tip: "i18n:move-down",
          action: () => {
            this.moveCheckedDown();
          }
        },
        {},
        {
          icon: "fas-code",
          tip: "i18n:source",
          action: () => {
            this.doEditCurrentSource();
          }
        }
      );
      if (!_.isEmpty(this.moreActions)) {
        items.push({});
        _.forEach(this.moreActions, (ma) => {
          let handler = ma.action;
          if (_.isFunction(handler)) {
            items.push({
              icon: ma.icon,
              text: ma.text,
              tip: ma.tip,
              altDisplay: ma.altDisplay,
              enabled: ma.enabled,
              disabled: ma.disabled,
              highlight: ma.highlight,
              action: () => {
                this.doInvokeAction(handler);
              }
            });
          }
        });
      }
      return items;
    },
    //------------------------------------------------
    TheValue() {
      if (!this.value) {
        return [];
      }
      if (_.isString(this.value)) {
        return JSON.parse(this.value);
      }
      return this.value;
    },
    //------------------------------------------------
    isQuickTable() {
      if (_.isString(this.quickTable)) {
        return Ti.Util.explainObj(this, this.quickTable);
      }
      return Ti.AutoMatch.test(this.quickTable, this.vars);
    },
    //------------------------------------------------
    TableConfig() {
      let config = this.getDataByVars(this.list);
      config.data = this.TheValue;
      _.defaults(config, {
        blankAs: _.assign(
          {
            className: "as-mid-tip",
            icon: "fab-deezer",
            text: "empty-data"
          },
          this.blankAs
        ),
        multi: true,
        checkable: true
      });
      return config;
    },
    //------------------------------------------------
    GenNewItemId() {
      if (this.newItemIdBy) {
        return Ti.Util.genInvoking(this.newItemIdBy);
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //-----------------------------------------------
    OnInitTable($table) {
      this.$table = $table;
    },
    //-----------------------------------------------
    OnTableRowSelect({ currentId, current, currentIndex, checkedIds }) {
      // this.myCurrentData = current
      // this.myCurrentId = currentId
      // this.myCurrentIndex = currentIndex
      // this.myCheckedIds = checkedIds
    },
    //-----------------------------------------------
    async OnTableRowOpen({ index, rawData }) {
      let reo = await this.openDialogForMeta(rawData);

      // User cancel
      if (_.isUndefined(reo)) return;

      // Join to
      let list = _.cloneDeep(this.TheValue || []);
      list.splice(index, 1, reo);
      this.notifyChange(list);
    },
    //-----------------------------------------------
    async doInvokeAction(handler = _.identity) {
      let currentId = this.$table.theCurrentId;
      let checkedIds = this.$table.theCheckedIds;
      let payload = this.$table.getEmitContext(currentId, checkedIds);
      let newVal = await handler(payload, this.TheValue);
      console.log(newVal);
      if (newVal && _.isArray(newVal)) {
        this.notifyChange(newVal);
      }
    },
    //-----------------------------------------------
    async doAddNewItem() {
      //console.log("doAddNewItem")
      let newItHandle;
      if (_.isFunction(this.onAddNewItem)) {
        newItHandle = this.onAddNewItem;
      }
      // Dynamic string
      else if (_.isString(this.onAddNewItem)) {
        newItHandle = Ti.Util.genInvoking(this.onAddNewItem);
      }
      // Default
      else {
        newItHandle = async () => {
          let newIt = _.assign({}, _.cloneDeep(this.newItemData));
          if (this.newItemIdKey && _.isFunction(this.GenNewItemId)) {
            let newItId = this.GenNewItemId(this.TheValue);
            if (newItId) {
              newIt[this.newItemIdKey] = newItId;
            }
          }
          return await this.openDialogForMeta(newIt);
        };
      }

      // Do add
      let reo = await newItHandle(this.TheValue);

      //console.log(reo);
      // User cancel
      if (_.isUndefined(reo)) return;

      let newItems = _.concat([], reo);

      // Assign new ID
      if (_.isFunction(this.GenNewItemId) && !_.isEmpty(newItems)) {
        for (let it of newItems) {
          if (Ti.Util.isNil(it[this.newItemIdKey])) {
            let itemId = this.GenNewItemId(this.TheValue);
            _.set(it, this.newItemIdKey, itemId);
          }
        }
      }

      // Join to
      let list = _.cloneDeep(this.TheValue || []);
      let val = _.concat(list || [], newItems);
      this.notifyChange(val);
    },
    //-----------------------------------------------
    async doEditCurrentMeta() {
      let row = this.$table.getCurrentRow();
      if (!row) {
        return await Ti.Toast.Open("i18n:nil-item", "warn");
      }
      let { rawData, index } = row;
      let reo = await this.openDialogForMeta(rawData);

      // User cancel
      if (_.isUndefined(reo)) return;

      // Join to
      let list = _.cloneDeep(this.TheValue || []);
      list.splice(index, 1, reo);
      this.notifyChange(list);
    },
    //-----------------------------------------------
    async doEditCurrentSource() {
      let json = this.value || "[]";
      if (!_.isString(json)) {
        json = JSON.stringify(json, null, "   ");
      }
      json = await this.openDialogForSource(json);

      // User cancel
      if (_.isUndefined(json)) return;

      // Join to
      try {
        let str = _.trim(json) || "[]";
        let list = JSON.parse(str);
        this.notifyChange(list);
      } catch (E) {
        // Invalid json
        await Ti.Toast.Open("" + E);
      }
    },
    //-----------------------------------------------
    removeChecked() {
      let { checked, remains } = this.$table.removeChecked();
      if (_.isEmpty(checked)) return;

      this.notifyChange(remains);
    },
    //-----------------------------------------------
    moveCheckedUp() {
      let { list, nextCheckedIds } = this.$table.moveChecked(-1);

      this.notifyChange(list);
      this.$nextTick(() => {
        this.$table.checkRow(nextCheckedIds);
      });
    },
    //-----------------------------------------------
    moveCheckedDown() {
      let { list, nextCheckedIds } = this.$table.moveChecked(1);

      this.notifyChange(list);
      this.$nextTick(() => {
        this.$table.checkRow(nextCheckedIds);
      });
    },
    //-----------------------------------------------
    async openDialogForMeta(result = {}) {
      //console.log("openDialogForMeta")
      let dialog = this.getDataByVars(this.dialog);
      let form = this.getDataByVars(this.form);
      let dialogSetting = _.assign(
        {
          title: "i18n:edit",
          width: 500,
          height: 500,
          explainComConf: false
        },
        dialog,
        {
          result,
          model: { prop: "data", event: "change" },
          comType: this.formType,
          comConf: form
        }
      );
      return await Ti.App.Open(dialogSetting);
    },
    //-----------------------------------------------
    async openDialogForSource(json = "[]") {
      let dialog = _.assign({
        title: "i18n:edit",
        position: "bottom",
        width: "73%",
        height: "96%",
        clickMaskToClose: false,
        result: json,
        comType: "TiInputText",
        comConf: {
          height: "100%"
        }
      });

      return await Ti.App.Open(dialog);
    },
    //-----------------------------------------------
    //
    // Utility
    //
    //-----------------------------------------------
    getDataByVars(cans = []) {
      if (_.isArray(cans)) {
        for (let can of cans) {
          let { test, data } = can;
          if (Ti.Util.isNil(test) || Ti.AutoMatch.test(test, this.vars)) {
            return _.cloneDeep(data);
          }
        }
        return _.cloneDeep(_.last(cans));
      }
      return _.cloneDeep(cans);
    },
    //-----------------------------------------------
    notifyChange(val = []) {
      if ("String" == this.valueType) {
        val = JSON.stringify(val, null, "   ");
      }
      this.$notify("change", val);
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    //-----------------------------------------------
    //-----------------------------------------------
  }
  ////////////////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'm-thing-config-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/thing/mod/config/m-thing-config-actions.mjs'] = (function(){
// Ti required(Wn)
////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  //----------------------------------------
  updateShown({commit}, shown) {
    commit("mergeShown", shown)
    commit("persistShown")
  },
  //----------------------------------------
  async reloadSchema({state, commit}) {
    //console.log("reloadSchema")
    let aph  = `id:${state.meta.id}/thing-schema.json`
    let obj  = await Wn.Io.loadMeta(aph)
    let schema = await Wn.Io.loadContent(obj, {as:"json"})

    // Load extends methods
    if(schema.methods) {
      let methods = await Ti.Load(schema.methods, {
        dynamicAlias: new Ti.Config.AliasMapping({
          "^\./": `/o/content?str=id:${state.meta.id}/`
        })
      })
      if(!_.isArray(methods)) {
        methods = [methods]
      }
      schema.methods = methods
    }
    // Load extends components
    if(!_.isEmpty(schema.components)) {
      let components = _.concat(schema.components)
      await Ti.App.topInstance().loadView({components})
    }
    //console.log("setSchema", schema)
    commit("setSchema", schema)
    return schema
  },
  //----------------------------------------
  async reloadLayout({state, commit}) {
    //console.log("reloadLayout")
    let aph  = `id:${state.meta.id}/thing-layout.json`
    let obj  = await Wn.Io.loadMeta(aph)
    let json = await Wn.Io.loadContent(obj, {as:"json"})

    //console.log("setLayout", json)
    commit("setLayout", json)

    // Load shown from local before reload config
    commit("restoreShown")

    return json
  },
  //----------------------------------------
  async reloadActions({state, commit}) {
    // console.log("reloadActions")
    let aph  = `id:${state.meta.id}/thing-actions.json`
    let obj  = await Wn.Io.loadMeta(aph)
    let json = await Wn.Io.loadContent(obj, {as:"json"})
    //console.log("setActions", json)
    commit("setActions", json)
    return json
  },
  //----------------------------------------
  async reload({state, commit, dispatch}, meta) {
    //console.log("thing-manager-config.reload", state)
    // Update New Meta
    if(meta) {
      commit("setMeta", meta)
    }
    // Get meta back
    else {
      meta = state.meta
    }
    // Mark reloading
    commit("setStatus", {reloading:true})

    await dispatch("reloadSchema")
    await dispatch("reloadLayout")
    await dispatch("reloadActions")

    // All done
    commit("setStatus", {reloading:false})
  }
  //----------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'website.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/hmaker/website/website.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////
  getters : {
    TREE_OPEND_KEY(state) {
      if(state.home) {
        return `website_tree_openeds_${state.home.id}`
      }
    },
    TREE_SELECTED_KEY(state) {
      if(state.home) {
        return `website_tree_selected_${state.home.id}`
      }
    }
  },
  ////////////////////////////////////////////////
  mutations : {
    //--------------------------------------------
    setHome(state, home) {
      state.home = home
    },
    //--------------------------------------------
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    },
    //--------------------------------------------
    setExposeHidden(state, exposeHidden) {
      state.status.exposeHidden = exposeHidden
    },
    //--------------------------------------------
    syncStatusChanged(state){
      if(state.current) {
        //console.log("do sync")
        state.status.changed = state.current.status.changed
      }
    }
    //--------------------------------------------
  }
  ////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'm-th-obj-datadir.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/th/obj/m-th-obj-datadir.mjs'] = (function(){
////////////////////////////////////////////////
const _M = {
  //----------------------------------------
  //
  // Remove
  //
  //----------------------------------------
  async dfRemoveChecked({ state, commit, dispatch }, hard) {
    state.LOG("async dfRemoveChecked")
    // Guard
    if (!state.thingSetId) {
      return await Ti.Alert('State Has No ThingSetId', "warn")
    }

    let ids = _.cloneDeep(state.dataDirCheckedIds)
    if (!_.isArray(ids)) {
      ids = Ti.Util.truthyKeys(ids)
    }
    if (_.isEmpty(ids)) {
      return await Ti.Alert('i18n:del-none')
    }

    commit("setStatus", { deleting: true })

    // Prepare the cmds
    let cmd = ["o"]
    for (let id of ids) {
      cmd.push(`@get ${id}`)
    }
    cmd.push("@delete")
    let cmdText = cmd.join(" ")
    await Wn.Sys.exec2(cmdText)

    //console.log("getback current", current)
    // Update current
    await dispatch("selectDataFile")
    await dispatch("dfQueryFiles")

    commit("setStatus", { deleting: false })
  },
  //----------------------------------------
  //
  // Selection
  //
  //----------------------------------------
  selectDataFile({ commit }, {
    currentId = null, checkedIds = {}
  } = {}) {
    commit("setDataDirCurrentId", currentId)
    commit("setDataDirCheckedIds", checkedIds)
  },
  //----------------------------------------
  //
  // Query
  //
  //----------------------------------------
  async dfQueryFiles({ state, commit, getters }, flt = {}) {
    state.LOG("async dfQueryFiles")
    let {
      dataHome,
      dataDirName
    } = state
    // Command
    let aph = Ti.Util.appendPath(dataHome, dataDirName)
    let cmdText = `o ${aph} @query -pager -limit 1000 -sort 'nm:1' @json -cqnl`

    // Process Query
    commit("setStatus", { reloading: true })
    let reo = await Wn.Sys.exec2(cmdText, { as: "json" })

    state.LOG(" - ", cmdText, reo)

    // Update pager
    commit("setDataDirFiles", reo)
    commit("setCurrentMeta")

    commit("setStatus", { reloading: false })
    state.LOG(" - query done:", reo)
  },
  //--------------------------------------------
}
return _M;
;
})()
// ============================================================
// EXPORT 'ti-input-group.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/group/ti-input-group.mjs'] = (function(){
// edit Object {a,b} => Input [a] - [b]
const _M = {
  ////////////////////////////////////////////////////
  props: {
    //------------------------------------------------
    // Data
    //------------------------------------------------
    "value": {
      type: Object
    },
    //------------------------------------------------
    // Behaviors
    //------------------------------------------------
    // [{placeholder:"xxx", toCase:"upper",key:"abc",width:".5rem"}]
    "fields": {
      type: Array,
      default: "TiInput"
    },
    "readonly": {
      type: Boolean
    },
    //------------------------------------------------
    // Aspect
    //------------------------------------------------
    "sepChar": {
      type: String,
      default: "-"
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //------------------------------------------------
    GroupFields() {
      let re = [];
      _.forEach(this.fields, (fld, index) => {
        let val = _.get(this.value, fld.key);
        val = Ti.Util.fallback(val, fld.defaultAs, null);
        let inputConfig = _.assign(
          { readonly: this.readonly },
          _.omit(fld, "key")
        );
        re.push({
          index,
          key: fld.key,
          input: inputConfig,
          value: val,
          sepChar: index > 0 ? this.sepChar : null
        });
      });
      return re;
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    OnInputChange({ key }, val) {
      console.log(key, val);
      let data = _.cloneDeep(this.value || {});
      _.set(data, key, val);
      this.tryNotifyChange(data);
    },
    //------------------------------------------------
    tryNotifyChange(data) {
      if (!_.isEqual(data, this.value)) {
        this.$notify("change", data);
      }
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'web-nav-side.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/nav/side/web-nav-side.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  data: ()=>({
    myOpenedIds : {}
  }),
  /////////////////////////////////////////
  props : {
    "openedDepth" : {
      type : Number,
      default : 1
    },
    "openedIcons" : {
      type : Object,
      default: ()=>({
        opened : "im-angle-up",
        closed : "im-angle-down"
      })
    }
  },
  //////////////////////////////////////////
  computed : {
    //-------------------------------------
    //-------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //-------------------------------------\
    OnChangeOpened({id, opened}) {
      this.myOpenedIds = _.assign({}, this.myOpenedIds, {
        [id] : opened
      })
    }
    //-------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'code-ace.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/code/ace/code-ace.mjs'] = (function(){
const OPTION_CSS = ["fontSize", "fontFamily", "lineHeight"];
/////////////////////////////////////////////////////
const _M = {
  ///////////////////////////////////////////////////
  data: () => ({
    myValue: undefined
  }),
  ///////////////////////////////////////////////////
  computed: {
    //-----------------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //-----------------------------------------------
    EditorStyle() {
      let css = _.pick(this.options, OPTION_CSS);
      return Ti.Css.toStyle(css);
    },
    //-----------------------------------------------
    EditorOption() {
      return _.omit(this.options, OPTION_CSS);
    },
    //-----------------------------------------------
    EditorTheme() {
      if ("auto" == this.theme) {
        let sysTheme = Ti.Env("theme") || "light";
        if (/dark/.test(sysTheme)) {
          return "terminal";
        }
        //return "clouds"
        return "chrome";
        //return "github"
      }
      return this.theme;
    },
    //-----------------------------------------------
    EditorLoadingAs() {
      return _.assign(
        {
          className: "as-nil-mask as-big-mask",
          icon: undefined,
          text: undefined
        },
        this.loadingAs
      );
    },
    //-----------------------------------------------
    EditorBlankAs() {
      return _.assign(
        {
          className: "as-nil-mask as-big-mask",
          icon: "far-keyboard",
          text: "i18n:empty"
        },
        this.blankAs
      );
    },
    //-----------------------------------------------
    ContentMode() {
      let mode = this.mode || this.mime;
      return (
        {
          "txt": "text",
          "md": "markdown",
          "js": "javascript",
          "htm": "html",
          "json": "json",
          "html": "html",
          "xml": "xml",
          "css": "css",
          "text/json": "json",
          "text/html": "html",
          "text/css": "css",
          "text/xml": "xml",
          "text/markdown": "markdown",
          "application/json": "json"
        }[mode] ||
        this.mode ||
        "text"
      );
    },
    //-----------------------------------------------
    BlankComStyle() {
      return {
        position: "absolute",
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        zIndex: 10
      };
    },
    //-----------------------------------------------
    isContentBlank() {
      if (_.isBoolean(this.blank)) {
        return this.blank;
      }
      return Ti.Util.isNil(this.value);
    },
    //-----------------------------------------------
    isContentLoading() {
      return _.isUndefined(this.value);
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods: {
    //-----------------------------------------------
    initEditor() {
      // Create editor
      let editor = ace.edit(this.$refs.edit);
      editor.setTheme(`ace/theme/${this.EditorTheme}`);
      //console.log(this.EditorOption)
      editor.setOptions(this.EditorOption);
      editor.session.setMode(`ace/mode/${this.ContentMode}`);
      editor.session.setValue(this.value || "");

      // Readonly Mode
      if (this.readonly) {
        editor.setReadOnly(true);
      }
      // Events
      else {
        editor.session.on("change", (delta) => {
          if (this.isContentBlank || this.isContentLoading) return;
          let str = editor.getValue() || "";
          this.myValue = str;
          this.$notify("change", str);
        });
      }

      // Save instance
      this.$editor = editor;
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch: {
    "mode": function (newVal, oldVal) {
      if (newVal && newVal != oldVal) {
        this.$editor.session.setMode(`ace/mode/${newVal}`);
      }
    },
    "theme": function (newVal, oldVal) {
      if (newVal && newVal != oldVal) {
        this.$editor.setTheme(`ace/theme/${newVal}`);
      }
    },
    "value": function (newVal) {
      if (Ti.Util.isNil(this.myValue) || newVal != this.myValue) {
        this.$editor.session.setValue(newVal || "");
      }
    }
  },
  ///////////////////////////////////////////////////
  mounted: async function () {
    this.initEditor();
  }
  ///////////////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'm-th-obj-cud.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/th/obj/m-th-obj-cud.mjs'] = (function(){
////////////////////////////////////////////////
async function getContentMeta(state, path) {
  // Guard
  if (!path || !state.dataHome) {
    return;
  }
  let meta;
  if ("<self>" != path) {
    let aph;
    // absolute path
    if (/^([\/~]\/|id:)/.test(path)) {
      aph = path;
    }
    // In parent dir
    else {
      aph = Ti.Util.appendPath(state.dataHome, path);
    }
    meta = await Wn.Io.loadMeta(aph);
    // If not exists, then create it
    if (!meta) {
      let cmdText = `touch '${aph}'`;
      await Wn.Sys.exec2(cmdText);
      meta = await Wn.Io.loadMeta(aph);
    }
  }
  // User self
  else {
    meta = state.meta;
  }

  return meta;
}
////////////////////////////////////////////////
const _M = {
  //--------------------------------------------
  //
  //               Create
  //
  //--------------------------------------------
  async create({ state, commit, dispatch, getters }, obj = {}) {
    // Guard
    if (!getters.isCanCreate) {
      return await Ti.Alert("i18n:e-pvg-fobidden", { type: "warn" });
    }
    if (!state.thingSetId) {
      return await Ti.Alert("State Has No ThingSetId", { type: "warn" });
    }

    // Special setting for create
    let beCreate = _.get(state.schema, "behavior.create") || {};
    let { unique, after, fixed } = beCreate;

    // Prepare the command
    let json = JSON.stringify(obj);
    let th_set = state.thingSetId;
    let cmds = [`thing ${th_set} create -cqn -fields`];

    // Join `-unique`
    if (!_.isEmpty(unique) && _.isString(unique)) {
      cmds.push(` -unique '${unique}'`);
    }

    // Join `-fixed`
    if (!_.isEmpty(fixed) && _.isString(unique)) {
      cmds.push(` -fixed '${JSON.stringify(fixed)}'`);
    }

    // Join `-after`
    if (!_.isEmpty(after) && _.isString(after)) {
      cmds.push(` -after '${after}'`);
    }

    // Mark reloading
    commit("setStatus", { reloading: true });

    // Do Create
    let cmdText = cmds.join(" ");
    let newMeta = await Wn.Sys.exec2(cmdText, { input: json, as: "json" });
    //console.log(newMeta);
    if (newMeta && !(newMeta instanceof Error)) {
      // Append To Search List as the first
      commit("prependListItem", newMeta);

      // Set it as current
      dispatch("selectMeta", {
        currentId: newMeta.id,
        checkedIds: {
          [newMeta.id]: true,
        },
      });
    }

    // Mark reloading
    commit("setStatus", { reloading: false });

    // Return the new object
    return newMeta;
  },
  //--------------------------------------------
  //
  //               Delete
  //
  //--------------------------------------------
  async removeChecked(
    { state, commit, dispatch, getters },
    { hard, confirm, hardTipMessage = "i18n:del-hard" } = {}
  ) {
    // Guard
    if (!getters.isCanRemove) {
      await Ti.Alert("i18n:e-pvg-fobidden", { type: "warn" });
      return false;
    }
    if (!state.thingSetId) {
      await Ti.Alert("State Has No ThingSetId", "warn");
      return false;
    }

    let ids = Ti.Util.getTruthyKeyInArray(state.checkedIds);
    if (_.isEmpty(ids)) {
      await Ti.Alert("i18n:del-none");
      return false;
    }

    // Config is hard
    hard = Ti.Util.fallback(hard, getters.isHardRemove, false);

    if (_.isUndefined(confirm)) {
      confirm = hard || getters.isInRecycleBin;
    }

    // If hard, warn at first
    if (confirm) {
      if (
        !(await Ti.Confirm(hardTipMessage, {
          type: "warn",
          vars: { N: ids.length },
        }))
      ) {
        return false;
      }
    }

    commit("setStatus", { deleting: true });

    // Prepare the ids which fail to remove
    let failIds = {};

    // Prepare the cmds
    let th_set = state.thingSetId;
    let cmdText = `thing ${th_set} delete ${
      hard ? "-hard" : ""
    } -cqn -l ${ids.join(" ")}`;
    let reo = await Wn.Sys.exec2(cmdText, {
      as: "json",
      errorAs: ({ data }) => {
        let id = _.trim(data);
        failIds[id] = true;
      },
    });

    // Get the removeIds
    let removeIds = _.filter(ids, (id) => !failIds[id]);
    //console.log("removeIds:", removeIds)

    // Remove it from search list
    if (!_.isEmpty(removeIds)) {
      commit("removeListItems", removeIds);
    }

    //console.log("getback current", current)
    // Update current
    await dispatch("selectMeta");

    commit("setStatus", { deleting: false });
    return true;
  },
  //--------------------------------------------
  //
  //                 Open
  //
  //--------------------------------------------
  async openContentEditor({ state, commit, dispatch, getters }) {
    // Guard
    let meta = await getContentMeta(state, getters.contentLoadPath);
    if (!meta) {
      return await Ti.Toast.Open("i18n:empty-data", "warn");
    }

    // Open Editor
    let newContent = await Wn.EditObjContent(meta, {
      content: state.content,
    });

    // Cancel the editing
    if (_.isUndefined(newContent)) {
      return;
    }

    // Update the current editing
    await dispatch("changeContent", newContent);
    commit("syncStatusChanged");

    return newContent;
  },
  //--------------------------------------------
  async openCurrentMetaEditor({ state, dispatch, getters }) {
    //console.log("openCurrentMetaEditor");
    // Guard
    if (!state.meta && !state.oTs) {
      return await Ti.Toast.Open("i18n:empty-data", "warn");
    }
    //.........................................
    // For current selected
    //.........................................
    if (state.meta) {
      // Edit current meta
      let reo = await Wn.EditObjMeta(state.meta, {
        fields: "default",
        autoSave: false,
      });

      // Cancel the editing
      if (_.isUndefined(reo)) {
        return;
      }

      // Update the current editing
      let { updates } = reo;
      if (!_.isEmpty(updates)) {
        if (!getters.isCanUpdate) {
          return await Ti.Alert("i18n:e-pvg-fobidden", { type: "warn" });
        }
        return await dispatch("updateMeta", updates);
      }
      return state.meta;
    }
    //.........................................
    // For Whole thing thing
    //.........................................
    return await Wn.EditObjMeta(state.oTs, {
      fields: "auto",
      autoSave: getters.isCanUpdate,
    });
  },
  //--------------------------------------------
  async openCurrentPrivilege({ state, commit, dispatch }) {
    let meta = state.meta || state.oTs;

    if (!meta) {
      await Ti.Toast.Open("i18n:nil-obj");
      return;
    }

    let newMeta = await Wn.EditObjPvg(meta);

    // Update to current list
    if (newMeta) {
      // Update Current Meta
      //console.log("pvg", newMeta)
      if (state.meta && state.meta.id == newMeta.id) {
        commit("setMeta", newMeta);
      }
      // Update Thing Set
      else {
        await dispatch("reload", newMeta);
      }
    }

    return newMeta;
  },
  //--------------------------------------------
  //
  //                 Update
  //
  //--------------------------------------------
  async updateMetaField({ state, commit, dispatch }, { name, value } = {}) {
    state.LOG("updateMetaFields", { name, value });

    let uniqKey = Ti.Util.anyKey(name);
    Wn.Util.setFieldStatusBeforeUpdate({ commit }, uniqKey);

    let data = Ti.Types.toObjByPair({ name, value });
    let reo = await dispatch("updateMeta", data);

    Wn.Util.setFieldStatusAfterUpdate({ commit }, uniqKey, reo);

    return reo;
  },
  //--------------------------------------------
  async updateMeta({ state, commit, getters }, data = {}) {
    state.LOG("updateMeta", data);
    // Guard
    if (!getters.isCanUpdate) {
      return await Ti.Alert("i18n:e-pvg-fobidden", { type: "warn" });
    }
    // Check Necessary
    if (_.isMatchWith(state.meta, data, _.isEqual)) {
      return state.meta;
    }

    if (!state.meta) {
      await Ti.Toast.Open("ThObj meta without defined", "warn");
      return state.meta;
    }

    if (!state.thingSetId) {
      await Ti.Toast.Open("ThObj thingSetId without defined", "warn");
      return state.meta;
    }

    let uniqKey = Ti.Util.anyKey(_.keys(data));

    // Mark field status
    Wn.Util.setFieldStatusBeforeUpdate({ commit }, uniqKey);
    _.forEach(data, (_, name) => {
      Wn.Util.setFieldStatusBeforeUpdate({ commit }, name);
    });

    // Do the update
    let json = JSON.stringify(data);
    let th_set = state.thingSetId;
    let th_id = state.meta.id;
    let cmdText = `thing id:${th_set} update ${th_id} -fields -cqn`;
    let reo = await Wn.Sys.exec2(cmdText, { input: json, as: "json" });
    let isError = reo instanceof Error;

    if (!isError && !Ti.Util.isNil(reo)) {
      commit("setMeta", reo);
      commit("setListItem", reo);
    }

    Wn.Util.setFieldStatusAfterUpdate({ commit }, uniqKey, reo);
    _.forEach(data, (_, name) => {
      Wn.Util.setFieldStatusAfterUpdate({ commit }, name, reo);
    });

    return state.meta;
  },
  //--------------------------------------------
  async batchUpdateCheckedItemsField(
    { state, commit, dispatch },
    { name, value } = {}
  ) {
    state.LOG("batchUpdateCheckedItemsField", { name, value });

    let uniqKey = Ti.Util.anyKey(name);
    Wn.Util.setFieldStatusBeforeUpdate({ commit }, uniqKey);

    let data = Ti.Types.toObjByPair({ name, value });
    let reo = await dispatch("batchUpdateCheckedItems", data);

    Wn.Util.setFieldStatusAfterUpdate({ commit }, uniqKey, reo);
  },
  //--------------------------------------------
  async batchUpdateCheckedItems({ state, commit, getters }, data = {}) {
    state.LOG("batchUpdateCheckedItems", data);
    // Guard
    if (!getters.isCanUpdate) {
      return await Ti.Alert("i18n:e-pvg-fobidden", { type: "warn" });
    }
    if (!state.thingSetId) {
      return await Ti.Toast.Open("ThObj thingSetId without defined", "warn");
    }

    let ids = Ti.Util.getTruthyKeyInArray(state.checkedIds);
    if (_.isEmpty(ids)) {
      return await Ti.Alert("i18n:nil-item");
    }

    let uniqKey = Ti.Util.anyKey(_.keys(data));

    // Mark field status
    Wn.Util.setFieldStatusBeforeUpdate({ commit }, uniqKey);
    _.forEach(data, (_, name) => {
      Wn.Util.setFieldStatusBeforeUpdate({ commit }, name);
    });

    // Do update
    let json = JSON.stringify(data);
    let th_set = state.thingSetId;
    let cmds = [`thing id:${th_set} update`];
    for (let id of ids) {
      cmds.push(id);
    }
    cmds.push("-fields -cqnl");
    let cmdText = cmds.join(" ");
    state.LOG("Batch Command:", json, ">", cmdText);
    let reo = await Wn.Sys.exec2(cmdText, { input: json, as: "json" });
    state.LOG("Batch Result", reo);

    let isError = reo instanceof Error;

    if (!isError && _.isArray(reo)) {
      for (let it of reo) {
        if (state.meta && state.meta.id == it.id) {
          commit("setMeta", it);
        }
        commit("setListItem", it);
      }
    }

    // Recover field status
    Wn.Util.setFieldStatusAfterUpdate({ commit }, uniqKey, reo);
    _.forEach(data, (_, name) => {
      Wn.Util.setFieldStatusAfterUpdate({ commit }, name, reo);
    });
  },
  //--------------------------------------------
  async parseContentData({ state, commit, getters }) {
    try {
      let content = state.content;
      let contentType = state.contentType;

      // Eval mime
      if ("<MIME>" == contentType) {
        let pathInfo = getters.contentLoadInfo || {};
        let { path, mime } = pathInfo;
        if (!mime) {
          if ("<self>" == path) {
            contentType = _.get(state, "meta.mime");
          }
          // Load mime from server side
          else {
            let type = Ti.Util.getSuffixName(path);
            if (type) {
              mime = await Wn.Sys.exec2(`o @mime ${type} -as value`);
              contentType = _.trim(mime);
            }
            // Use text plain
            else {
              contentType = "text/plain";
            }
          }
        }
        // Use mime
        else {
          contentType = mime;
        }
      }

      state.LOG("parseContentData", contentType);

      let contentData = null;
      if (/^(application|text)\/json$/.test(contentType)) {
        let str = _.trim(content);
        contentData = JSON.parse(str || null);
        state.LOG("parseContentData -> ", contentData);
      }
      commit("setContentData", contentData);
    } catch (E) {
      if (!state.contentQuietParse) {
        throw E;
      }
    }
  },
  //--------------------------------------------
  changeContent({ commit, dispatch }, payload) {
    //console.log("changeContent", payload)
    commit("setContent", payload);
    commit("syncStatusChanged");

    // Try parse content
    dispatch("parseContentData");
  },
  //----------------------------------------
  updateContent({ commit, dispatch }, content) {
    commit("setContent", content);
    commit("setSavedContent", content);
    commit("syncStatusChanged");

    // Try parse content
    dispatch("parseContentData");
  },
  //--------------------------------------------
  async saveContent({ state, commit, getters }) {
    state.LOG("saveContent ... ", state.status);
    // Guard: ing
    if (state.status.saving || !state.status.changed) {
      return;
    }

    // Which content should I load?
    let path = getters.contentLoadPath;
    if (!path) {
      return;
    }
    let meta = await getContentMeta(state, getters.contentLoadPath);

    state.LOG("saveContent -> ", meta, state.content);

    // Do save content
    commit("setStatus", { saving: true });

    let content = state.content;
    let newMeta = await Wn.Io.saveContentAsText(meta, content);

    commit("setStatus", { saving: false });
    if ("<self>" == path) {
      commit("setMeta", newMeta);
    }
    commit("setSavedContent", content);
    commit("syncStatusChanged");

    // return the new meta
    return newMeta;
  },
  //--------------------------------------------
};
return _M;;
})()
// ============================================================
// EXPORT 'auth-signup.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/auth/signup/auth-signup.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////////
  data: () => ({
    "data": {
      "name": null,
      "passwd": null
    },
    "guarding": false,
    "currentMode": "login_by_passwd",
    // String, Array
    "invalidField": null,
    // delay to get the next captcha to prevent robot
    "delay": -1
  }),
  ///////////////////////////////////////////////////////
  props: {
    // - "login_by_passwd"
    // - "login_by_phone"
    // - "login_by_email"
    // - "bind_phone"
    // - "bind_email"
    "mode": {
      type: String,
      default: "login_by_passwd"
    },
    "toggleMode": {
      type: String,
      default: "login_by_phone"
    },
    "nameTip": {
      type: String
    },
    "captcha": {
      type: String,
      required: true,
      default: null
    },
    "scenes": {
      type: Object,
      default: () => ({
        robot: "robot",
        bind_phone: "auth",
        bind_email: "auth",
        login_by_email: "auth",
        login_by_phone: "auth",
        login_by_passwd: "auth"
      })
    },
    // The interval of get capche to prevent robot
    // (in second)
    "getDelay": {
      type: Number,
      default: 60
    },
    // "invalidField" : {
    //   type : [String, Array],
    //   default : null
    // }
    "logo": {
      type: String,
      default: undefined
    },
    "oauth2": {
      type: Array,
      default: () => []
    },
    "bottomTip": {
      type: String
    },
    "bottomTipAsHtml": {
      type: Boolean,
      default: false
    }
  },
  ///////////////////////////////////////////////////////
  computed: {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //---------------------------------------------------
    Msgs() {
      // Login by password
      if ("login_by_passwd" == this.currentMode) {
        return {
          "title": "i18n:auth-passwd-title",
          "nameTip": this.nameTip || (
            "login_by_email" == this.toggleMode
              ? "i18n:auth-passwd-name-email-tip"
              : "i18n:auth-passwd-name-phone-tip"
          ),
          "passwdTip": "i18n:auth-passwd-tip",
          "btnText": "i18n:auth-login",
          "linkLeft": (
            "login_by_email" == this.toggleMode
              ? "i18n:auth-go-email"
              : "i18n:auth-go-phone"
          ),
          "linkRight": "i18n:auth-passwd-getback",
          "blankName": "i18n:auth-blank-name"
        }
      }
      // Login by Phone
      if ("login_by_phone" == this.currentMode) {
        return {
          "title": "i18n:auth-phone-title",
          "nameTip": "i18n:auth-phone-tip",
          "passwdTip": "i18n:auth-phone-vcode",
          "codeGet": "i18n:auth-phone-vcode-get",
          "btnText": "i18n:auth-login-or-signup",
          "linkLeft": "i18n:auth-go-passwd",
          "linkRight": "i18n:auth-vcode-lost",
          "blankName": "i18n:auth-blank-phone"
        }
      }
      // Login by email
      if ("login_by_email" == this.currentMode) {
        return {
          "title": "i18n:auth-email-title",
          "nameTip": "i18n:auth-email-tip",
          "passwdTip": "i18n:auth-email-vcode",
          "codeGet": "i18n:auth-email-vcode-get",
          "btnText": "i18n:auth-login-or-signup",
          "linkLeft": "i18n:auth-go-passwd",
          // "linkRight" : "i18n:auth-vcode-lost",
          "linkRight": undefined,
          "blankName": "i18n:auth-blank-email"
        }
      }
      // Bind the phone
      if ("bind_phone" == this.currentMode) {
        return {
          "title": "i18n:auth-bind-phone-title",
          "nameTip": "i18n:auth-phone-tip",
          "passwdTip": "i18n:auth-phone-vcode",
          "codeGet": "i18n:auth-phone-vcode-get",
          "btnText": "i18n:auth-bind",
          //"linkLeft"  : "i18n:auth-bind-link-left",
          //"linkRight" : "i18n:auth-vcode-lost",
          "linkRight": undefined,
          "blankName": "i18n:auth-blank-phone"
        }
      }
      // Bind the email
      if ("bind_email" == this.currentMode) {
        return {
          "title": "i18n:auth-bind-email-title",
          "nameTip": "i18n:auth-email-tip",
          "passwdTip": "i18n:auth-email-vcode",
          "codeGet": "i18n:auth-email-vcode-get",
          "btnText": "i18n:auth-bind",
          //"linkLeft"  : "i18n:auth-bind-link-left",
          "linkRight": "i18n:auth-vcode-lost",
          "blankName": "i18n:auth-blank-email"
        }
      }
      // Invalid mode
      throw Ti.Err.make("e.com.combo.auth.invalid-mode", this.currentMode)
    },
    //---------------------------------------------------
    Params() {
      return _.mapValues(this.data, (str) => _.trim(str))
    },
    //---------------------------------------------------
    isBlankName() {
      return this.Params.name ? false : true
    },
    //---------------------------------------------------
    isBlankNameOrPasswd() {
      let { name, passwd } = this.Params
      return !name || !passwd
    },
    //---------------------------------------------------
    Invalid() {
      return {
        name: this.isInvalid("name"),
        passwd: this.isInvalid("passwd")
      }
    },
    //---------------------------------------------------
    NameClass() {
      if (this.guarding &&
        (this.Invalid.name || !this.Params.name))
        return "is-invalid"
    },
    //---------------------------------------------------
    PasswdClass() {
      if (this.guarding &&
        (this.Invalid.passwd || !this.Params.passwd))
        return "is-invalid"
    },
    //---------------------------------------------------
    PasswdInputType() {
      return "login_by_passwd" == this.currentMode
        ? "password"
        : "text"
    },
    //---------------------------------------------------
    OAuth2Items() {
      return _.cloneDeep(this.oauth2)
    },
    //---------------------------------------------------
    hasOAuth2() {
      return !_.isEmpty(this.OAuth2Items)
    },
    //---------------------------------------------------
    hasToggleMode() {
      return !_.isEmpty(this.toggleMode)
    },
    //---------------------------------------------------
    hasBottomTip() {
      return this.bottomTip ? true : false
    },
    //---------------------------------------------------
    // 验证码发送目标的名称（i18n）
    ToggleModeName() {
      return ({
        "login_by_phone": "i18n:auth-ta-phone",
        "login_by_email": "i18n:auth-ta-email",
        "bind_phone": "i18n:auth-ta-phone",
        "bind_email": "i18n:auth-ta-email"
      })[this.toggleMode]
    },
    //---------------------------------------------------
    // 验证码发送目标的名称（i18n）
    vCodeTargetName() {
      return ({
        "login_by_phone": "i18n:auth-ta-phone",
        "login_by_email": "i18n:auth-ta-email",
        "bind_phone": "i18n:auth-ta-phone",
        "bind_email": "i18n:auth-ta-email"
      })[this.currentMode]
    },
    //---------------------------------------------------
    // 验证码发送目标的名称（i18n）
    vCodeTargetBy() {
      return ({
        "login_by_phone": "i18n:auth-ta-by-phone",
        "login_by_email": "i18n:auth-ta-by-email",
        "bind_phone": "i18n:auth-ta-by-phone",
        "bind_email": "i18n:auth-ta-by-email"
      })[this.currentMode]
    },
    //---------------------------------------------------
    // 不同模式下的场景
    vCodeScene() {
      return _.get(this.scenes, this.currentMode) || "auth"
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods: {
    //---------------------------------------------------
    OnChangeMode() {
      // -> login-by-vcode
      if ("login_by_passwd" == this.currentMode) {
        this.currentMode = this.toggleMode
      }
      // -> login-by-passwd
      else {
        this.currentMode = "login_by_passwd"
      }
      Ti.Be.BlinkIt(this.$el)
    },
    //---------------------------------------------------
    OnAuthSubmit() {
      this.guarding = true
      // Guarding
      if (this.isBlankNameOrPasswd) {
        return Ti.Toast.Open("i18n:auth-blank-name-passwd", "warn")
      }
      // Mask GUI
      let toast = Ti.Toast.Open({
        icon: "fas-spinner fa-spin",
        content: "i18n:auth-doing",
        position: "center",
        duration: 0,
        closer: false
      })

      // Do Auth
      this.$notify("auth:send", {
        type: this.currentMode,
        name: this.Params.name,
        passwd: this.Params.passwd,
        // Close loading toast
        done: () => {
          toast.close()
          this.InvalidField = null
        },
        ok: () => {
          Ti.Toast.Open({
            type: "success",
            position: "top",
            content: "i18n:auth-ok",
            duration: 2000
          })
          this.$notify("auth:ok")
        },
        noexist: () => {
          this.InvalidField = "name"
        },
        invalid: () => {
          this.InvalidField = "passwd"
        },
        others: () => {
          this.InvalidField = ["name", "passwd"]
        },
        fail: ({ errCode, data } = {}) => {
          // VCode Error
          if ("e.auth.captcha.invalid" == errCode) {
            Ti.Toast.Open({
              type: "warn",
              position: "top",
              content: `i18n:e-www-invalid-captcha`,
              vars: {
                ta: Ti.I18n.text(this.vCodeTargetName)
              },
              duration: 5000
            })
          }
          // NoSaltedPasswd
          else if ("e.auth.login.NoSaltedPasswd" == errCode) {
            Ti.Alert("i18n:auth-login-NoSaltedPasswd", {
              title: "i18n:e-auth-login-NoSaltedPasswd",
              icon: "zmdi-shield-security",
              textOk: "i18n:i-known",
              vars: {
                ta: Ti.I18n.text(this.ToggleModeName)
              }
            })
          }
          // Others Error
          else {
            Ti.Toast.Open({
              type: "warn",
              position: "top",
              content: `i18n:${errCode}`,
              duration: 5000
            })
          }
        }
      })
    },
    //---------------------------------------------------
    async OnGetVcode() {
      this.guarding = true
      // The Account Name is required
      if (this.isBlankName) {
        this.InvalidField = "name"
        Ti.Toast.Open(this.Msgs["blankName"], "warn")
        return
      }

      // Reset invalid
      this.guarding = false
      this.InvalidField = null

      // Show the image captcha to prevent robot
      //console.log("captcha", this.captcha)
      let vars = {
        scene: this.scenes.robot,
        account: this.Params.name
      }
      //let src = "/api/joysenses/auth/captcha?site=rv340tg5gcigsp6p5hvigc2gjb&account=18501211423"
      let src = Ti.S.renderBy(this.captcha, vars)
      let captcha = await Ti.Captcha(src)
      if (!captcha)
        return

      // Mask GUI
      let toast = Ti.Toast.Open({
        icon: "fas-spinner fa-spin",
        content: "i18n:auth-sending-vcode",
        position: "center",
        duration: 0,
        closer: false
      })

      // use the captcha to get code
      this.$notify("get:vcode", {
        type: this.currentMode,
        scene: this.vCodeScene,
        account: this.data.name,
        captcha,
        done: () => {
          toast.close()
          this.InvalidField = null
          this.data.passwd = ""
        },
        ok: ({ duInMin = 60 } = {}) => {
          console.log(arguments)
          this.delay = this.getDelay
          Ti.Toast.Open({
            type: "success",
            position: "top",
            content: "i18n:auth-sent-ok",
            vars: {
              ta: Ti.I18n.text(this.vCodeTargetName),
              by: Ti.I18n.text(this.vCodeTargetBy),
              min: duInMin
            },
            duration: 5000
          })
        },
        fail: ({ errCode, data } = {}) => {
          console.log("haha")
          Ti.Toast.Open({
            type: "warn",
            position: "top",
            content: `i18n:${errCode}`,
            duration: 5000
          })
        }
      })
    },
    //---------------------------------------------------
    isInvalid(name = "") {
      if (_.isArray(this.InvalidField)) {
        return _.indexOf(this.InvalidField, name) >= 0
      }
      return name == this.InvalidField
    },
    //-----------------------------------------------
    // Callback
    //-----------------------------------------------
    __ti_shortcut(uniqKey) {
      //....................................
      // If droplist is actived, should collapse it
      if ("ENTER" == uniqKey) {
        if (!this.isBlankNameOrPasswd) {
          this.$nextTick(() => {
            this.OnAuthSubmit()
          })
          return { stop: true, quit: true }
        }
      }
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  watch: {
    "currentMode": function () {
      this.guarding = false
      //this.data.name = ""
      this.data.passwd = ""
    }
  },
  ///////////////////////////////////////////////////////
  mounted: function () {
    if (this.mode) {
      this.currentMode = this.mode
    }
    // count the secound
    this.__H = window.setInterval(() => {
      if (this.delay >= 0)
        this.delay--
    }, 1000)
  },
  ///////////////////////////////////////////////////////
  beforeDestroy: function () {
    if (this.__H) {
      window.clearInterval(this.__H)
    }
  }
  ///////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-manager-computed.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['/a/load/wn.manager/wn-manager-computed.mjs'] = (function(){
const _M = {
  //.........................................
  Logo() {
    if("<:home>" == this.setup.logo) {
      let crIt = _.nth(this.CrumbData, 0)
      return crIt ? crIt.icon : null
    }
    // Then it is the static icon
    return this.setup.logo
  },
  //.........................................
  CrumbData() {
    let titleBy = Ti.Util.explainObj(this.TheStatus, this.setup.crumbTitleBy)
    return Wn.Obj.evalCrumbData({
      meta      : this.meta,
      ancestors : this.ancestors,
      fromIndex : this.setup.firstCrumbIndex,
      homePath  : this.setup.skyHomePath,
      titleBy,
      iteratee : (item, i, {nm}={}) => {
        if(!this.exposeHidden && nm && nm.startsWith(".")) {
          return
        }
        return item
      },
      self : (item)=>{
        item.asterisk = this.isChanged
      }
    })
  },
  //.........................................
  Crumb() {
    let crumbs = _.cloneDeep(this.CrumbData)
    // Remove the first one for grace look
    if(this.Logo && !_.isEmpty(crumbs)) {
      crumbs[0].icon = null
    }
    return {data: crumbs}
  },
  //.........................................
  SessionBadge() {
    let me = _.get(this.session, "me")
    if(me) {
      return {
        me,
        avatarKey : "thumb",
        avatarSrc : null,
        loginIcon : me.sex == 1 ? "im-user-male" : "im-user-female",
        nameKeys  : "nickname|nm"
      }
    }
  },
  //.........................................
  ActionMenu() {
    if(_.isArray(this.actions) && !_.isEmpty(this.actions)) {
      return {
        className : `wn-top-menu is-${this.viewportMode}`,
        items  : this.actions,
        status : this.TheStatus,
        delay  : 500
      }
    }
  },
  //.........................................
  Arena() {
    if(this.hasView) {
      // explain comConf
      //console.log("re-arena", this.comConf)
      // prepare the vars
      let app = Ti.App(this);
      let comConf = Ti.Util.explainObj(this, this.comConf) || {
        ancestors : this.ancestors,
        parent    : this.parent,
        meta      : this.meta,
        content   : this.MainContent,
        data      : this.MainData,
        status    : this.status,
        exposeHidden : this.exposeHidden,
        viewType : this.listViewType
      }
      //let actions = this.actions
      // Add init hook to store the $main
      comConf.onInit = function(){
        //console.log("onInit:", this.tiComId)
        app.$vmMain(this)
      }
      // Done
      return comConf
    }
  },
  //.........................................
  Footer() {
    return {
      infoIcon  : this.comIcon,
      infoText  : this.comType,
      message   : this.myMessage || this.StatusText,
      indicator : this.myIndicator
    }
  }
  //.........................................
}
return _M;;
})()
// ============================================================
// EXPORT 'website-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/hmaker/website/website-actions.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //--------------------------------------------
  setTreeOpenedNodePaths({getters, commit}, openeds={}) {
    if(getters.TREE_OPEND_KEY) {
      openeds = _.pickBy(openeds, val=>val)
      commit("tree/setOpenedNodePaths", openeds)
      Ti.Storage.session.setObject(getters.TREE_OPEND_KEY, openeds)
    }
  },
  //--------------------------------------------
  async setTreeSelected({getters, commit, dispatch}, currentId=null) {
    if(getters.TREE_SELECTED_KEY) {
      commit("tree/setCurrentId", currentId)
      Ti.Storage.session.set(getters.TREE_SELECTED_KEY, currentId)

      commit("setStatus", {reloading:true})
      // Load current
      let meta = null
      if(currentId) {
        meta = await Wn.Io.loadMetaById(currentId)
      }
      await dispatch("current/reload", meta)

      commit("setStatus", {reloading:false})
      commit("syncStatusChanged")
    }
  },
  //--------------------------------------------
  onCurrentChanged({commit, dispatch}, payload) {
    dispatch("current/onChanged", payload)
    commit("syncStatusChanged")
  },
  //--------------------------------------------
  async saveCurrent({state, commit, dispatch}) {
    if(state.current.meta) {
      commit("setStatus", {saving:true})
      await dispatch("current/save")
      commit("setStatus", {saving:false})
      commit("syncStatusChanged")
    }
  },
  //--------------------------------------------
  async reloadCurrent({commit, dispatch}, meta) {
    commit("setStatus", {reloading:true})
    await dispatch("current/reload", meta)
    commit("setStatus", {reloading:false})
    commit("syncStatusChanged")
  },
  //--------------------------------------------
  async reloadConfig({state, dispatch}) {
    await dispatch("config/reload")
  },
  //--------------------------------------------
  async reloadTree({getters, state, commit, dispatch}) {
    // Restore openeds
    if(getters.TREE_OPEND_KEY) {
      let openeds = Ti.Storage.session.getObject(getters.TREE_OPEND_KEY)
      commit("tree/setOpenedNodePaths", openeds)
    }

    // Reload the tree root
    await dispatch("tree/reloadRoot", state.home)

    // Restore currentId
    if(getters.TREE_SELECTED_KEY) {
      let currentId = Ti.Storage.session.getString(getters.TREE_SELECTED_KEY)
      commit("tree/setCurrentId", currentId)
      if(currentId) {
        await dispatch("setTreeSelected", currentId)
      }
    }
  },
  //--------------------------------------------
  async reloadTreeNode({commit, dispatch}, payload) {
    commit("setStatus", {reloading:true})
    await dispatch("tree/reloadNode", payload)
    commit("setStatus", {reloading:false})
  },
  //--------------------------------------------
  async reload({state, commit, dispatch}, home) {
    //console.log("thing-manager.reload", state)
    // Update New Meta
    if(home) {
      commit("setHome", home)
    }
    // Get home back
    else {
      home = state.home
    }
    
    // Mark reloading
    commit("setStatus", {reloading:true})

    // Reloading
    await dispatch("reloadConfig")
    await dispatch("reloadTree")

    // Auto Select the first item
    // TODO


    // All done
    commit("setStatus", {reloading:false})
  }
  //--------------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'code-ace-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/code/ace/code-ace-props.mjs'] = (function(){
const _M = {
  //...............................................
  // Data
  //...............................................
  "value": {
    type: String,
    default: undefined
  },
  "blank": {
    type: Boolean,
    default: undefined
  },
  //...............................................
  // Behavior
  //...............................................
  "mode": {
    type: String
  },
  "mime": {
    type: String
  },
  "readonly": {
    type: Boolean,
    defaula: false
  },
  //...............................................
  // Aspact
  //...............................................
  "theme": {
    type: String,
    default: "auto"
    //default : "monokai"
  },
  "options": {
    type: Object,
    default: () => ({
      fontFamily: "Consolas, 'Courier New', monospace",
      lineHeight: "1.5em",
      fontSize: "14px"
    })
  },
  "loadingAs": {
    type: Object,
    default: () => ({
      className: "as-nil-mask as-big-mask",
      icon: undefined,
      text: undefined
    })
  },
  "blankAs": {
    type: Object,
    default: () => ({
      className: "as-nil-mask as-big-mask",
      icon: "far-keyboard",
      text: "i18n:empty"
    })
  }
};
return _M;;
})()
// ============================================================
// EXPORT 'web-shelf-rolling-cards.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/shelf/rolling-cards/web-shelf-rolling-cards.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data: () => ({
    myCurrentIndex: -1,
    myRect: undefined,
    myDisplayCards: [],
    myCardWidth: undefined,
    myCardHeight: undefined,
    myDraggingOffset: 0,
    isInDragging: false,
    lastCardIn: true
  }),
  //////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "data": {
      type: Array,
      default: () => []
    },
    "currentIndex": {
      type: Number,
      default: -1
    },
    // Indicate the id key, in order to trace card lifecycle
    "idBy": {
      type: String,
      default: "id"
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "comType": {
      type: String,
      default: undefined
    },
    "comConf": {
      type: Object,
      default: () => ({})
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "cardMaxNumber": {
      type: Number,
      default: 20
    },
    "blankAs": {
      type: [Object, Boolean],
      default: () => ({
        text: "i18n:empty",
        icon: "fas-box-open"
      })
    },
    "loadingAs": {
      type: [Object, Boolean],
      default: () => ({})
    },
    "mainStyle": {
      type: Object
    },
    "cardStyle": {
      type: Object
    },
    //-----------------------------------
    // Measure
    // cardScale/cardHeight/cardWidth must have 2 properties 
    //-----------------------------------
    // cardWidth/cardHeight
    "cardScale": {
      type: Number,
      default: 0.5
    },
    // The candidate card scale down
    "cardScaleDown": {
      type: Number,
      default: 0.9
    },
    // Auto eval by cardWidth/cardScale
    // If indicate the value, it is higher priority
    "cardWidth": {
      type: [Number, String],
      default: "61.8%"
    },
    // Auto eval by cardWidth/cardScale
    // If indicate the value, it is higher priority
    "cardHeight": {
      type: [Number, String],
      default: undefined
    },
    // Stack card offsetX the percent base one cardWidth/Height
    "cardOffsetX": {
      type: [Number, String],
      default: "10%"
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "in-dragging": this.isInDragging,
        "no-dragging": !this.isInDragging
      })
    },
    //--------------------------------------
    MainStyle() {
      return Ti.Css.toStyle(_.assign({
        height: this.myCardHeight
      }, this.mainStyle))
    },
    //--------------------------------------
    DataItems() {
      return this.data || []
    },
    //--------------------------------------
    hasMultiItems() { return this.CardData.length > 1 },
    //--------------------------------------
    isLoading() {
      return _.isUndefined(this.myDisplayCards)
    },
    //--------------------------------------
    isEmpty() {
      return _.isEmpty(this.myDisplayCards)
    },
    //--------------------------------------
    // Eval the card id/comType/comConf
    CardData() {
      if (_.isEmpty(this.data)) {
        return []
      }
      // Measure: viewport sizing
      let list = []
      _.forEach(this.data, (it, index) => {
        let id = _.get(it, this.idBy) || `card-${index}`
        let comType = it.comType || this.comType
        let comConf;
        // Customized it comConf
        if (it.comConf) {
          comConf = it.comConf
        }
        // Explain comConf
        else {
          comConf = Ti.Util.explainObj(it, this.comConf)
        }

        list.push({
          id, index, comType, comConf, data: it
        })
      })
      return list
    },
    //--------------------------------------
    Draggable() {
      return {
        trigger: ".part-card",
        viewport: ($trigger) => {
          return Ti.Dom.closest($trigger, ".part-main")
        },
        actived: (ctx) => {
          if(!this.hasMultiItems) {
            return
          }
          this.isInDragging = true
        },
        dragging: (ctx) => {
          if(!this.hasMultiItems) {
            return
          }
          let { offsetX } = ctx
          if (Math.abs(offsetX) > 5) {
            this.myDraggingOffset = offsetX
          } else {
            this.myDraggingOffset = 0
          }
          //console.log("dragging", offsetX)
          this.evalMyDisplayCards()
        },
        done: (ctx) => {
          if(!this.hasMultiItems) {
            return
          }
          //let {viewport, $trigger, $viewport, offsetX, speed} = ctx
          let { offsetX } = ctx
          //console.log("dragging done", offsetX)
          let threshold = this.myCardWidth / -4
          if (offsetX < threshold) {
            this.myCurrentIndex++
          }
          this.isInDragging = false
          this.myDraggingOffset = 0
          this.lastCardIn = false
          this.evalMyDisplayCards()
          _.delay(()=>{
            this.lastCardIn = true
          }, 10)
        }
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnResize() {
      let rect = Ti.Rects.createBy(this.$refs.con)
      this.evalCardMeasure(rect)
      this.myRect = rect
    },
    //--------------------------------------
    evalCardMeasure(rect = this.myRect) {
      // Eval the card width & height
      //console.log("evalCardMeasure")
      let remBase = Ti.Dom.getRemBase(this.$el)
      let cdW = Ti.Css.toAbsPixel(this.cardWidth, {
        base: rect.width, remBase
      })
      let cdH = Ti.Css.toAbsPixel(this.cardHeight, {
        base: rect.height, remBase
      })
      if (!cdW || cdW <= 0) {
        cdW = cdH * this.cardScale
      }
      if (!cdH || cdH <= 0) {
        cdH = cdW / this.cardScale
      }
      this.myCardWidth = cdW
      this.myCardHeight = cdH
    },
    //--------------------------------------
    evalMyDisplayCards() {
      // Guard
      if (_.isEmpty(this.myRect)) {
        this.myDisplayCards = undefined
        return
      }
      //...............................................
      // Guard 2
      if (_.isEmpty(this.CardData)) {
        this.myDisplayCards = []
        return
      }
      //...............................................
      let cdW = this.myCardWidth
      let cdH = this.myCardHeight
      //...............................................
      // Eval each card diff
      let remBase = Ti.Dom.getRemBase(this.$el)
      let offsetX = Ti.Css.toAbsPixel(this.cardOffsetX, {
        base: cdW, remBase
      })
      //...............................................
      // Count start position
      let len = Math.min(this.CardData.length, this.cardMaxNumber)
      let opacity = _.clamp(this.myDraggingOffset / this.myCardWidth, -1, 0)
      opacity = 1 + opacity
      //...............................................
      let width = cdW
      let height = cdH
      let left = 0
      let right = width
      let csdw = this.cardScaleDown
      let lastI = len - 1
      //...............................................
      let list = []
      for (let i = 0; i < len; i++) {
        let cardI = Ti.Num.scrollIndex(i + this.myCurrentIndex, len)
        let card = _.cloneDeep(this.CardData[cardI])
        let cardLeft = `${left}px`
        let zIndex = len - i + 1

        // For last card
        if(i == lastI) {
          zIndex = 0
          if(!this.lastCardIn) {
            cardLeft = this.myRect.width + 'px'
          }
        }

        // Position Y
        let top = (cdH - height) / 2
        card.style = _.assign({}, this.cardStyle, {
          top: `${top}px`,
          left: cardLeft, 
          zIndex
        })
        // Multi items, follow the card stack
        if (this.hasMultiItems) {
          _.assign(card.style, {
            width: `${width}px`,
            height: `${height}px`,
          })
        }
        // Signle item, fit to main
        else {
          _.assign(card.style, {
            right: 0, bottom: 0
          })
        }

        // Mark current class
        card.className = {
          "is-current": i == 0,
          "is-candidate": i != 0
        }

        // transform the first card (current card)
        if (i == 0 && this.myDraggingOffset != 0) {
          card.style.opacity = opacity
          let transX = Math.min(this.myDraggingOffset, 0)
          if (transX < 0) {
            card.style.transform = `translateX(${transX}px)`
          }
        }

        // Add to list
        list.push(card)

        // Precard mesure
        let preWidth = width
        let preHeight = height
        let preRight = right

        // Scale down the second card
        csdw = csdw * this.cardScaleDown
        width = cdW * csdw
        height = cdH * csdw
        right += offsetX * csdw
        // In dragging, zoom dynamicly
        if (opacity < 1) {
          let dragScale = 1 - opacity
          let diffW = preWidth - width
          let diffH = preHeight - height
          let diffR = preRight - right
          width = Math.min(width + diffW * dragScale, preWidth)
          height = Math.min(height + diffH * dragScale, preHeight)
          right = Math.max(right + diffR * dragScale / 2, preRight)
          //console.log(i, opacity, right, preRight)
        }
        left = right - width
      }

      this.myDisplayCards = list
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "myRect": "evalMyDisplayCards",
    "data": "evalMyDisplayCards",
    "myCurrentIndex": "evalMyDisplayCards",
    "lastCardIn": "evalMyDisplayCards",
    "cardWidth": function () {
      this.evalCardMeasure()
    },
    "cardHeight": function () {
      this.evalCardMeasure()
    },
    "currentIndex": {
      handler: function (newVal) {
        this.myCurrentIndex = newVal
      },
      immediate: true
    }
  },
  //////////////////////////////////////////
  mounted: function () {
    this.OnResize()

    Ti.Viewport.watch(this, {
      resize: _.debounce(() => this.OnResize(), 10)
    })
  },
  ///////////////////////////////////////////////////
  beforeDestroy: function () {
    Ti.Viewport.unwatch(this)
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-adaptlist.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/adaptlist/ti-adaptlist.mjs'] = (function(){
/////////////////////////////////////////////////
const _M = {
  ////////////////////////////////////////////////
  data: () => ({
    myCurrentId: null,
    myCheckedIds: {},
    myUploadigFiles: [],
    myItemStatus: {},
    myExposeHidden: true,
    myData: null
  }),
  ////////////////////////////////////////////////
  computed: {
    //--------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------------
    isLoading() {
      return !this.viewType || _.get(this.status, "reloading")
    },
    //--------------------------------------------
    MainComType() {
      return ({
        "wall": "TiWall",
        "list": "WnList",
        "table": "WnTable"
      })[this.viewType] || "TiWall"
    },
    //--------------------------------------------
    MainComConf() {
      let listDisplay = _.concat(this.listDisplay)
      let conf = ({
        list: () => ({
          rowClassBy: "->is-${visibility}",
          display: _.map(listDisplay, li => {
            let m = /^@<thumb(:([^:]*)(:([^:]*))?)?>$/.exec(li)
            if (m) {
              return Wn.Obj.getObjThumbDisplay("rawData", {
                dftIcon: m[2] || undefined,
                className: m[4] || undefined
              })
            }
            return li
          })
        }),
        table: () => ({
          rowClassBy: "->is-${visibility}",
          fields: _.map(this.tableFields, key => {
            return Wn.Obj.getTableField(key)
          })
        }),
        wall: () => ({
          spacing: this.spacing,
          display: {
            key: "..",
            // transformer : {
            //   name : "Wn.Util.getObjThumbInfo",
            //   args : [{
            //       status : this.myItemStatus,
            //       exposeHidden : this.myExposeHidden
            //     }]
            // },
            comType: 'ti-obj-thumb',
            comConf: {
              "...": "${=value}"
            }
          }
        })
      })[this.viewType]()

      // Extend customized config
      _.merge(conf, this.listConf)
      _.merge(conf, _.get(this, `${this.viewType}ViewConf`))

      // Done
      return conf
    },
    //--------------------------------------------
    // MainComData() {
    //   if("wall" == this.viewType) {
    //     return this.WallDataList
    //   }
    //   return this.DataList
    // },
    //--------------------------------------------
    CurrentViewType() {
      return {
        type: this.viewType,
        icon: _.get(this.viewTypeIcons, this.viewType)
      }
    },
    //--------------------------------------------
    TheAvaViewTypes() {
      let list = []
      _.forEach(this.avaViewTypes, vt => {
        if (vt == this.viewType) {
          return;
        }
        list.push({
          type: vt,
          icon: _.get(this.viewTypeIcons, vt)
        })
      })
      return list
    },
    //--------------------------------------------
    UploadingItemDisplay() {
      return {
        key: "..",
        comType: 'ti-obj-thumb',
        comConf: {
          "...": "${=value}"
        }
      }
    },
    //--------------------------------------------
    DataList() {
      //console.log("eval DataList")
      if (this.myData) {
        if (_.isArray(this.myData)) {
          return this.myData
        }
        if (_.isArray(this.myData.list)) {
          return this.myData.list
        }
      }
      return []
    },
    //--------------------------------------------
    hasDataList() {
      return !_.isEmpty(this.DataList)
    },
    //--------------------------------------------
    WallDataList() {
      if (!this.hasDataList) {
        return []
      }
      //console.log("eval WallDataList", this.DataList.length)
      let list = []
      for (let it of this.DataList) {
        if (!this.isHiddenItem(it)) {
          let li;
          if (_.isFunction(this.thumbBy)) {
            li = this.thumbBy(it, {
              status: this.myItemStatus,
              exposeHidden: this.myExposeHidden,
              titleKey: this.itemTitleKey,
              badges: this.itemBadges
            })
          } else {
            li = {
              id: it.id,
              nm: it.nm,
              title: Ti.Util.getOrPick(it, this.itemTitleKey),
              preview: undefined,
              href: undefined,
              visibility,
              status: status[it.id],
              progress: progress[it.id],
              badges: undefined,
              rawData: meta
            }
          }
          list.push(li)
          //list.push(it)
        }
      }
      return list
    },
    //--------------------------------------------
    /***
     * Show uploading list
     */
    TheUploadingList() {
      let list = this.myUploadigFiles
      let re = []
      if (_.isArray(list)) {
        for (let it of list) {
          // Gen Preview for local image
          let mime = it.file.type
          let tp = Ti.Util.getSuffixName(it.file.name)
          let preview;
          if (/^image\//.test(mime)) {
            preview = {
              type: "localFile",
              value: it.file
            }
          } else {
            preview = Ti.Icons.get({ tp, mime })
          }
          // Join to result list
          re.push({
            id: it.id,
            title: it.file.name,
            preview,
            progress: (it.current / it.total)
          })
        }
      }
      return re
    },
    //--------------------------------------------
    AcceptUploadFiles() {
      if (this.acceptUpload) {
        if (_.isString(this.acceptUpload)) {
          return this.acceptUpload
        }
        if (_.isArray(this.acceptUpload)) {
          return this.acceptUpload.join(",")
        }
      }
    },
    //--------------------------------------------
    /***
     * has uploading
     */
    hasUploading() {
      return this.myUploadigFiles.length > 0
    },
    //--------------------------------------------
    UploadingClass() {
      return this.hasUploading ? "up-show" : "up-hide"
    },
    //--------------------------------------------
    UploadDragAndDropHandler() {
      if (this.droppable) {
        return this.OnDropFiles
      }
    }
    //--------------------------------------------
  },  // ~ computed
  ////////////////////////////////////////////////
  methods: {
    //--------------------------------------------
    OnListInit($list) { this.$innerList = $list },
    //--------------------------------------------
    // Events
    //--------------------------------------------
    OnSwitchViewType(vt) {
      this.$notify("listviewtype:change", vt)
      if (_.isFunction(this.onViewTypeChange)) {
        this.onViewTypeChange(vt)
      }
    },
    //--------------------------------------------
    OnItemSelecteItem({ currentId, checkedIds, currentIndex }) {
      //console.log("OnSelected", currentId, checkedIds)
      // For Desktop
      this.myCurrentId = currentId
      this.myCheckedIds = checkedIds

      let context = {
        current: this.getCurrentItem(),
        checked: this.getCheckedItems(),
        checkedIds, currentId, currentIndex,
      }

      // Notify the real objects
      this.$notify("select", context)

      return { stop: true }
    },
    //--------------------------------------------
    OnItemOpen() {
      //console.log("open item")
      let obj = this.getCurrentItem()
      if (obj) {
        this.$notify("open:obj", obj)
      }
    },
    //--------------------------------------
    OnClipBoardPoste({ clipboardData } = {}) {
      // Guard
      //console.log("OnClipBoardPoste", clipboardData)
      let imgF = Ti.Dom.getImageDataFromClipBoard(clipboardData)
      if (imgF) {
        let imgTp = Ti.Util.getSuffix(imgF.name)
        let dateS = Ti.DateTime.format(new Date(), "'Snapshot'-yyyyMMdd-HHmmss")
        imgF.uploadName = dateS + imgTp
        this.OnDropFiles([imgF])
      }
    },
    //--------------------------------------------
    async OnDropFiles(files) {
      // console.log("OnDropFiles", files)
      if (!this.droppable)
        return
      let fs = [...files]
      await this.doUpload(fs)

      // Wait the computed result and notify
      this.$nextTick(() => {
        // Find my checked files
        let objs = []
        if (this.hasDataList) {
          _.forEach(this.DataList, it => {
            if (this.myCheckedIds[it.id]) {
              objs.push(it)
            }
          })
        }

        // Emit events
        this.$notify("uploaded", objs)
      })
    },
    //--------------------------------------------
    async OnSelectLocalFilesToUpload(evt) {
      await this.OnDropFiles(evt.target.files)
      this.$refs.file.value = ""
    },
    //--------------------------------------------
    // Getters
    //--------------------------------------------
    getCurrentItem() {
      if (this.myCurrentId && this.hasDataList) {
        return _.find(this.DataList, it => it.id == this.myCurrentId)
      }
    },
    //--------------------------------------------
    getCheckedItems() {
      if (this.hasDataList)
        return _.filter(this.DataList, it => this.myCheckedIds[it.id])
      return []
    },
    //--------------------------------------------
    setItem(newItem) {
      if (newItem && this.hasDataList) {
        let list = _.map(this.DataList, it => {
          return it.id == newItem.id
            ? newItem
            : it
        })
        if (_.isArray(this.myData)) {
          this.myData = list
        } else {
          this.myData = _.assign({}, this.myData, { list })
        }
      }
    },
    //--------------------------------------------
    setItemStatus(id, status = "loading") {
      this.myItemStatus = _.assign({}, this.myItemStatus, {
        [id]: status
      })
    },
    //--------------------------------------------
    findRowById(rowId) {
      return this.$innerList.findRowById(rowId)
    },
    //--------------------------------------------
    getItemById(id) {
      let row = this.$innerList.findRowById(id)
      if (row) {
        return row.rawData
      }
    },
    //--------------------------------------------
    selectItem(id) {
      this.$innerList.selectRow(id)
    },
    //--------------------------------------------
    selectItemByIndex(index) {
      this.$innerList.selectRowByIndex(index)
    },
    //--------------------------------------------
    checkItem(id) {
      let ids = {}
      _.forEach(this.myCheckedIds, (v, k) => {
        if (v)
          ids[k] = true
      });
      ids[id] = true
      this.myCheckedIds = ids
    },
    //--------------------------------------------
    toggleItem(id) {
      let ids = {}
      _.forEach(this.myCheckedIds, (v, k) => {
        if (k == id) {
          ids[k] = v ? false : true
        }
        else if (v)
          ids[k] = true
      });
      ids[id] = true
      this.myCheckedIds = ids
    },
    //--------------------------------------------
    setItemSelect(id) {
      this.$innerList.setRowSelect(id)
    },
    //--------------------------------------------
    // For global menu invoke checkAll/cancleAll
    invokeList(methodName) {
      Ti.InvokeBy(this.$innerList, methodName)
    },
    //--------------------------------------------
    isHiddenItem(it) {
      if (it && it.nm && it.nm.startsWith(".") && !this.myExposeHidden) {
        return true
      }
      return false
    },
    //--------------------------------------------
    // Utility
    //--------------------------------------------
    async _run(nm, payload) {
      let target = (this.routers || {})[nm]
      // Run by customized function
      if (_.isFunction(target)) {
        await target()
      }
      // In app
      else if (target) {
        let app = Ti.App(this)
        return await app.exec(target, payload)
      }
    },
    //--------------------------------------------
    // toggleExposeHidden() {
    //   let newVal = !this.myExposeHidden
    //   this.myExposeHidden = newVal
    //   if(this.keeyHiddenBy) {
    //     Ti.Storage.session.set(this.keeyHiddenBy, newVal)
    //   }
    // },
    //--------------------------------------------
    openLocalFileSelectdDialog() {
      this.$refs.file.click()
    },
    //--------------------------------------------
    async openCurrentMeta() {
      let meta = this.getCurrentItem() || this.meta

      if (!meta) {
        await Ti.Toast.Open("i18n:nil-obj")
        return
      }

      let reo = await Wn.EditObjMeta(meta, { fields: "auto" })

      // Update to current list
      if (reo) {
        let { updates, data } = reo
        // TODO if update the "thumb" may need to force reload the preview
        // Update to list
        this.setItem(data)

        return data
      }
    },
    //--------------------------------------------
    async openCurrentPrivilege() {
      let meta = this.getCurrentItem() || this.meta

      if (!meta) {
        await Ti.Toast.Open("i18n:nil-obj")
        return
      }

      let newMeta = await Wn.EditObjPrivilege(meta)

      // Update to current list
      if (newMeta) {
        if (this.meta.id == newMeta.id) {
          await Ti.App(this).dispatch("main/reload", newMeta)
        } else {
          await Ti.App(this).commit("main/setDataItem", newMeta)
          //this.setItem(newMeta)
        }
        return newMeta
      }
    },
    //--------------------------------------------
    syncMyData() {
      //console.log("syncMyData")
      // 有时候直接改了 myData， 竟然会导致这个函数被触发
      // 我也是醉了，不知道为啥
      // 这会导致通过 setItem 修改列表，修改不了
      // 因为会被同步回来
      // 是否做一点脏脏的事情呢？
      //  - setItem 的时候做一个时间戳，在 500ms 内， 让 sync 不工作？
      this.myData = _.cloneDeep(this.data) || {
        list: [], pager: {}
      }
      this.myItemStatus = {}
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  watch: {
    // "myData" : function(newVal, oldVal) {
    //   console.log("MyData changed:", {
    //     "newVal" : _.get(newVal, "list.0.nm"),
    //     "oldVal" : _.get(oldVal, "list.0.nm"),
    //   })
    // },
    // myData : function(newVal, oldVal) {
    //   console.log("myData Changed", newVal)
    // },
    //--------------------------------------------
    "data": {
      handler: "syncMyData",
      immediate: true
    },
    //--------------------------------------------
    "exposeHidden": {
      handler: function (eh) {
        this.myExposeHidden = eh
      },
      immediate: true
    },
    //--------------------------------------------
    "currentId": {
      handler: function (newVal, oldVal) {
        //console.log("currentId changed", {newVal, oldVal})
        if (!_.isEqual(newVal, oldVal)) {
          this.myCurrentId = newVal
        }
      },
      immediate: true
    },
    //--------------------------------------------
    "checkedIds": {
      handler: function (newVal, oldVal) {
        //console.log("checkedIds changed", {newVal, oldVal})
        if (!_.isEqual(newVal, oldVal)) {
          if (_.isArray(newVal)) {
            let ids = {}
            _.forEach(newVal, id => ids[id] = true)
            this.myCheckedIds = ids
          } else {
            this.myCheckedIds = _.cloneDeep(newVal)
          }
        }
      },
      immediate: true
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  created: function () {
    this.OnPaste = evt => {
      this.OnClipBoardPoste(evt)
    }
  },
  ////////////////////////////////////////////////
  mounted: function () {
    //--------------------------------------------
    // Guart the uploading
    Ti.Fuse.getOrCreate().add({
      key: "wn-list-adaptview-check-uploading",
      everythingOk: () => {
        return !this.hasUploading
      },
      fail: () => {
        Ti.Toast.Open("i18n:upload-nofinished", "warn")
      }
    })
    // Watch the clipboard
    window.addEventListener("paste", this.OnPaste)
    // Restore the exposeHidden
    // if(this.keeyHiddenBy) {
    //   this.myExposeHidden = Ti.Storage.session.getBoolean(this.keeyHiddenBy)
    // }
  },
  //--------------------------------------------
  beforeDestroy: function () {
    Ti.Fuse.get().remove("wn-list-adaptview-check-uploading")
    window.removeEventListener("paste", this.OnPaste)
  }
  //--------------------------------------------
  ////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-text-heading.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/text/heading/web-text-heading.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "value": undefined,
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "href": String,
    "showBackward": false,
    "titleNotifyName": {
      type: String,
      default: "fire"
    },
    "moreNotifyName": {
      type: String,
      default: "more"
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "icon": String,
    "title": String,
    "titleIcon": String,
    "titleClass": {
      type: [String, Array, Object]
    },
    "titleStyle": Object,
    "comment": String,
    "moreTip": String,
    "moreIconType": String,
    "moreIcon": [String, Object, Array],
    "moreIconStyle": Object,
    "moreIconConf": Object,
    "morePreview": Object,
    "moreText": String,
    "moreHref": String,
    "moreNewTab": {
      type: Boolean,
      default: true
    }
  },
  //////////////////////////////////////////
  computed: {
    TopClass() {
      return this.getTopClass({
        "show-backward": this.showBackward
      })
    },
    //--------------------------------------
    TitleClass() {
      return Ti.Css.mergeClassName(this.titleClass)
    },
    //--------------------------------------
    TitleStyle() {
      return Ti.Css.toStyle(this.titleStyle)
    },
    //--------------------------------------
    showMoreIcon() {
      return !_.isEmpty(this.TheMoreIcon)
    },
    //--------------------------------------
    TheMoreTarget() {
      return this.moreNewTab ? "_blank" : undefined
    },
    //--------------------------------------
    TheMoreIcon() {
      let list = []
      let icons = _.concat(this.moreIcon)
      for (let moreIcon of icons) {
        if (!moreIcon) {
          continue
        }
        let src = Ti.WWW.evalObjPreviewSrc(moreIcon, this.morePreview)
        if (!src) {
          continue
        }
        let icon = {
          type: this.moreIconType || "image",
          value: src
        }
        icon.tip = Ti.Util.explainObj(moreIcon, this.moreTip)
        icon.href = Ti.Util.explainObj(moreIcon, this.moreHref)
        list.push(icon)
      }
      return list
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnClickBackward() {
      if (history && _.isFunction(history.back)) {
        history.back()
      }
    },
    //--------------------------------------
    OnClickTitle() {
      if (this.titleNotifyName) {
        this.$notify(this.titleNotifyName, this.value)
      }
    },
    //--------------------------------------
    OnClickMore(moreIcon={}) {
      if (this.moreNotifyName) {
        this.$notify(this.moreNotifyName, moreIcon)
      }
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-switcher.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/switcher/ti-switcher.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////////////////
  data: () => ({
    loading: false,
    myFixedOptionsData: [],
    myOptionsData: [],
    myValueMap: {},
    myLastIndex: 0,
    myFocusIndex: -1
  }),
  /////////////////////////////////////////////////////
  computed: {
    //-------------------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //-------------------------------------------------
    FixedDict() {
      return this.genDict(this.fixedOptions);
    },
    //-------------------------------------------------
    Dict() {
      return this.genDict(this.options);
    },
    //-------------------------------------------------
    TheItems() {
      let list = [];
      const __gen_items = (it, index) => {
        let itV = this.Dict.getValue(it);
        let text = this.Dict.getText(it);
        text = Ti.I18n.text(text);
        let tip = this.Dict.getTip(it);
        if (!tip && this.autoValueTip) {
          tip = {
            "data-ti-tip": `<strong>${text}</strong>: <codd>${itV}</code>`,
            "data-ti-tip-mode": "H",
            "data-ti-tip-size": "auto",
            "data-ti-tip-type": "paper",
            "data-ti-tip-content-type": "html",
            "data-ti-keyboard": "ctrl"
          };
        }
        if(_.isString(tip)){
          tip = {
            "data-ti-tip": tip,
            "data-ti-tip-mode": "H",
            "data-ti-tip-size": "auto",
            "data-ti-tip-type": "paper",
            "data-ti-tip-content-type": "text"
          };
        }
        let selected =
          this.myValueMap[itV] ||
          (Ti.Util.isNil(itV) && Ti.Util.isNil(this.value) && !this.multi);
        return {
          index,
          className: {
            "is-selected": selected,
            "is-focused": index == this.myFocusIndex
          },
          text,
          tip,
          value: itV,
          icon: this.Dict.getIcon(it) || this.defaultIcon
        };
      };

      _.forEach(this.myFixedOptionsData, (it, index) => {
        let item = __gen_items(it, index);
        if (item) {
          list.push(item);
        }
      });

      _.forEach(this.myOptionsData, (it, index) => {
        let item = __gen_items(it, index);
        //console.log(item);
        if (item) {
          list.push(item);
        }
      });

      return list;
    }
    //-------------------------------------------------
  },
  /////////////////////////////////////////////////////
  methods: {
    //-------------------------------------------------
    OnClickItem({ value, index }, $event) {
      if (this.readonly) return;
      let toggle = $event.ctrlKey || $event.metaKey || this.autoToggle;
      let shift = $event.shiftKey;
      // Multi + Shift Mode
      if (shift && this.multi) {
        this.selectItemsToCurrent(value, index);
      }
      // Multi + Toggle Mode
      else if (toggle && this.multi) {
        this.toggleItem(value);
      }
      // Toggle Mode
      else if (this.allowEmpty) {
        this.toggleItem(value);
      }
      // Single Mode
      else {
        this.tryNotifyChanged({ [value]: true });
      }
      // Last Index
      this.myLastIndex = index;
    },
    //-------------------------------------------------
    OnMouseDown({ index }) {
      if (this.readonly) return;
      this.myFocusIndex = index;
    },
    //-------------------------------------------------
    // Utility
    //-------------------------------------------------
    findItemIndexByValue(val) {
      for (let it of this.TheItems) {
        if (it.value == val) return it.index;
      }
      return -1;
    },
    //-------------------------------------------------
    selectItemsToCurrent(val) {
      let vmap = _.cloneDeep(this.myValueMap);
      let index = this.findItemIndexByValue(val);
      if (index >= 0) {
        let fromIndex = Math.min(index, this.myLastIndex);
        let toIndex = Math.max(index, this.myLastIndex);
        if (fromIndex < 0) {
          fromIndex = 0;
        }
        for (let i = fromIndex; i <= toIndex; i++) {
          let it = this.TheItems[i];
          vmap[it.value] = true;
        }
      }
      this.tryNotifyChanged(vmap);
    },
    //-------------------------------------------------
    toggleItem(val) {
      let oldV = this.myValueMap[val];
      let vmap;
      if (this.multi) {
        vmap = _.assign({}, this.myValueMap, {
          [val]: !oldV
        });
      } else {
        vmap = { [val]: !oldV };
      }
      this.tryNotifyChanged(vmap);
    },
    //-------------------------------------------------
    tryNotifyChanged(valMap = this.myValueMap) {
      let vals = [];
      _.forEach(this.TheItems, ({ value }) => {
        if (valMap[value]) {
          vals.push(value);
        }
      });
      if (!_.isEqual(vals, this.Values)) {
        let v;
        if (_.isFunction(this.joinBy)) {
          v = this.joinBy(vals);
        } else if (this.multi) {
          if (this.joinBy) {
            v = vals.join(this.joinBy);
          } else {
            v = vals;
          }
        } else if (vals.length > 1) {
          v = vals.join(this.joinBy || ",");
        } else {
          v = _.first(vals);
        }
        //console.log("tryNotifyChanged", v);
        if (!_.isEqual(v, this.value)) {
          if (!_.isNumber(v) && !_.isBoolean(v) && _.isEmpty(v)) {
            v = this.emptyAs;
          }
          if ("null" === v) {
            v = null;
          }
          this.$notify("change", v);
        }
      }
    },
    //......................................
    async reloadMyOptionsData() {
      this.myFixedOptionsData = await this.FixedDict.getData();
      this.myOptionsData = await this.Dict.getData();
    },
    //......................................
    reloadMyValueMap() {
      let sep = null;
      if (this.autoSplitValue) {
        if (_.isBoolean(this.autoSplitValue)) {
          sep = /[:,;\t\n\/]+/g;
        } else {
          sep = this.autoSplitValue;
        }
      }

      let vals = Ti.S.toArray(this.value, { sep });
      let vmap = {};
      _.forEach(vals, (v) => (vmap[v] = true));
      this.myValueMap = vmap;
    },
    //......................................
    genDict(options) {
      // Customized
      if (options instanceof Ti.Dict) {
        return options;
      }
      // Refer dict
      if (_.isString(options)) {
        let dictName = Ti.DictFactory.DictReferName(options);
        if (dictName) {
          return Ti.DictFactory.CheckDict(dictName, ({ loading }) => {
            this.loading = loading;
          });
        }
      }
      return Ti.DictFactory.GetOrCreate(
        {
          data: options,
          getValue: Ti.Util.genGetter(this.valueBy || "value"),
          getText: Ti.Util.genGetter(this.textBy || "text|name"),
          getIcon: Ti.Util.genGetter(this.iconBy || "icon")
        },
        {
          hooks: ({ loading }) => (this.loading = loading)
        }
      );
    }
    //......................................
  },
  /////////////////////////////////////////
  watch: {
    "options": {
      handler: "reloadMyOptionsData",
      immediate: true
    },
    "value": {
      handler: "reloadMyValueMap",
      immediate: true
    }
  },
  /////////////////////////////////////////
  mounted: async function () {
    Ti.Dom.watchDocument("mouseup", () => (this.myFocusIndex = -1));
  },
  /////////////////////////////////////////
  beforeDestroy: function () {
    Ti.Dom.unwatchDocument("mouseup", this.__on_mouseup);
  }
  /////////////////////////////////////////
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'bar-item-line.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/actionbar/com/bar-item-line/bar-item-line.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////
  inject: ["$bar"],
  ///////////////////////////////////////
  props : {
    "depth": {
      type: Number,
      default: 0
    }
  },
  ///////////////////////////////////////
  computed : {
    //-----------------------------------
    TopClass() {
      return this.getTopClass({
        "is-top" : this.depth == 1,
        "is-sub" : this.depth > 1
      })
    }
    //-----------------------------------
  }
  ///////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'list_mixins.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/support/list_mixins.mjs'] = (function(){
const LIST_MIXINS = {
  ///////////////////////////////////////////////////
  provide: function () {
    return {
      "$vars": this.vars || {}
    }
  },
  ///////////////////////////////////////////////////
  data: () => ({
    myLastIndex: -1,      // The last row index selected by user
    myCurrentId: null,    // Current row ID
    myCheckedIds: {},     // Which row has been checked

    myMoreIsPendingAt: -1,
    myMorePendingOffset: -1,
    myMorePendingExpectTop: -1,
    myMoreBtnOrgHeight: -1
  }),
  ///////////////////////////////////////////////////
  // props -> list_props.mjs
  ///////////////////////////////////////////////////
  computed: {
    //-----------------------------------------------
    TopStyle() {
      let w = this.width
      let h = this.height
      return Ti.Css.toStyle({
        width: w,
        height: h
      })
    },
    //-----------------------------------------------
    BlankLoadingConf() {
      return _.assign({
        className: "as-big-mask",
        icon: "far-list-alt",
        text: "i18n:empty-data"
      }, this.blankAs)
    },
    //-----------------------------------------------
    hasRowToggleKey() {
      return !_.isEmpty(this.rowToggleKey)
    },
    //-----------------------------------------------
    TheRowToggleKey() {
      return _.without(_.concat(this.rowToggleKey), undefined)
    },
    //-----------------------------------------------
    getRowId() {
      return Ti.Util.genRowIdGetter(this.idBy)
    },
    //-----------------------------------------------
    getRowData() {
      return Ti.Util.genRowDataGetter(this.rawDataBy)
    },
    //-----------------------------------------------
    testRowAsGroupTitle() {
      if (this.rowAsGroupTitle) {
        return Ti.AutoMatch.parse(this.rowAsGroupTitle)
      }
      return () => false
    },
    //--------------------------------------
    RowGroupTitleDisplay() {
      if (this.rowGroupTitleDisplay) {
        return this.evalFieldDisplay(this.rowGroupTitleDisplay, "..")
      }
    },
    //-----------------------------------------------
    RowNumberWidth() {
      if (this.rowNumberBase >= 0 && !_.isEmpty(this.myData)) {
        let lastI = this.rowNumberBase + this.myData.length;
        if (lastI >= 1000) {
          return 4;
        }
        if (lastI >= 100) {
          return 3;
        }
        if (lastI >= 10) {
          return 2;
        }
        if (lastI > 0) {
          return 1;
        }
        return 0;
      }
    },
    //-----------------------------------------------
    isDataPending() {
      return Ti.Util.isNil(this.TheData)
    },
    //-----------------------------------------------
    isDataEmpty() {
      return !_.isArray(this.data) || _.isEmpty(this.data)
    },
    //-----------------------------------------------
    isAllChecked() {
      // Empty list, nothing checked
      if (this.isDataEmpty) {
        return false
      }
      // Checking ...
      for (let row of this.TheData) {
        if (!this.theCheckedIds[row.id])
          return false;
      }
      return true
    },
    //-----------------------------------------------
    hasChecked() {
      for (let it of this.data) {
        let itId = this.getRowId(it)
        if (this.theCheckedIds[itId])
          return true
      }
      return false
    },
    //-----------------------------------------------
    theCurrentRowId() {
      return this.wrapRowId(this.currentId)
    },
    //-----------------------------------------------
    theCurrentId() {
        return this.puppetMode
        ? this.theCurrentRowId
        : this.myCurrentId
    },
    //-----------------------------------------------
    theCheckedIds() {
      return this.puppetMode
        ? this.getCheckedIdsMap(this.checkedIds)
        : this.myCheckedIds
    },
    //-----------------------------------------------
    isRowCheckable() {
      return Ti.AutoMatch.parse(
        this.rowCheckable
        || (() => this.checkable))
    },
    isRowSelectable() {
      return Ti.AutoMatch.parse(
        this.rowSelectable
        || (() => this.selectable))
    },
    isRowOpenable() {
      return Ti.AutoMatch.parse(
        this.rowOpenable
        || (() => this.openable))
    },
    isRowCancelable() {
      return Ti.AutoMatch.parse(
        this.rowCancelable
        || (() => this.cancelable))
    },
    isRowHoverable() {
      return Ti.AutoMatch.parse(
        this.rowHoverable
        || (() => this.hoverable))
    },
    //-----------------------------------------------
    LoadingMoreBtn() {
      if (this.moreLoading) {
        return {
          icon: "fas-spinner fa-spin",
          text: "i18n:loading"
        }
      }
      if (this.myMorePendingExpectTop > 0) {
        return {
          icon: "fas-spinner fa-spin",
          text: "i18n:load-more-pull"
        }
      }
      return {
        icon: "fas-angle-down",
        text: "i18n:more"
      }
    },
    //-----------------------------------------------
    // fnSet() {
    //   return _.assign({}, Ti.GlobalFuncs(), this.extendFunctionSet)
    // },
    //-----------------------------------------------
    Dict() {
      if (this.dict) {
        // Already Dict
        if (this.dict instanceof Ti.Dict) {
          return this.dict
        }
        // Get back
        let { name } = Ti.DictFactory.explainDictName(this.dict)
        return Ti.DictFactory.CheckDict(name)
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods: {
    //-----------------------------------------------
    OnClickLoadMore() {
      //console.log("load more")
      if (!this.moreLoading && this.myMorePendingExpectTop < 0) {
        this.$notify("load:more")
      }
    },
    //-----------------------------------------------
    wrapRowId(rowId) {
      if (_.isNumber(rowId)) {
        return "" + rowId
      }
      return rowId
    },
    //--------------------------------------
    evalFieldDisplay(displayItems = [], defaultKey) {
      // Force to Array
      displayItems = _.concat(displayItems)
      // Prepare the return list
      let items = []
      // Loop each items
      for (let li of displayItems) {
        let item = this.evalFieldDisplayItem(li, { defaultKey })
        if (item) {
          if (item.comType == "TiLabel") {
            _.defaults(item.comConf, {
              hoverCopy: this.dftLabelHoverCopy
            })
          }
          items.push(item)
        }
      }
      // // Gen transformer for each item
      // for(let it of items) {
      //   // Transformer
      //   it.transformer = Ti.Types.getFuncBy(it, "transformer", this.fnSet)
      // }
      // Array to pick
      return items
    },
    //-----------------------------------------------
    async evalListDataWhenMarkChanged(newVal, oldVal) {
      //console.log("evalListDataWhenMarkChanged", {newVal, oldVal})
      if (!_.isEqual(newVal, oldVal)) {
        //console.log("begin for await this.evalListData()")
        await this.evalListData()
        //console.log("done for await this.evalListData()")
        if(_.isFunction(this.__eval_row_after_data)){
          await this.__eval_row_after_data()
        }
      }
    },
    //-----------------------------------------------
    async evalData(iteratee = _.identity) {
      let data = this.data
      //............................................
      // May need translate
      if (this.Dict) {
        // Query by value
        if (_.isString(data)) {
          data = await this.Dict.queryData(data)
        }
        // Check Each data item
        else if (_.isArray(data)) {
          let data2 = []
          for (let i = 0; i < data.length; i++) {
            let it = data[i]
            // Check the real item
            if (_.isString(it)) {
              let it2 = await this.Dict.getItem(it)
              if (it2) {
                data2.push(it2)
              }
            }
            // Primary
            else {
              data2.push(it)
            }
          }
          data = data2
        }
        // All data of Dict
        else {
          data = await this.Dict.getData()
        }
      }
      //............................................
      //let hasFilterValue = !Ti.Util.isNil(this.filterValue)
      //let hasFilterFunc = _.isFunction(this.filterBy)
      let FnFilter = this.filterBy
        ? Ti.AutoMatch.parse(this.filterBy)
        : undefined
      //............................................
      // Then format the list
      let list = []
      let displayIndex = 0
      _.forEach(data, (it, index) => {
        let className;
        if (this.rowClassBy) {
          className = Ti.Util.explainObj(it, this.rowClassBy, {
            evalFunc: true
          })
        }
        let asGroupTitle = this.testRowAsGroupTitle(it)
        let itemId = this.getRowId(it, index)
        //console.log("evalDataItem", index, itemId, asGroupTitle)
        let item = {
          className, index, displayIndex, asGroupTitle,
          id: itemId,
          rawData: this.getRowData(it),
          checkable: this.isRowCheckable(it),
          selectable: this.isRowSelectable(it),
          openable: this.isRowOpenable(it),
          cancelable: this.isRowCancelable(it),
          hoverable: this.isRowHoverable(it),
          item: it
        }
        item = iteratee(item) || item
        // Apply filter
        if (FnFilter) {
          if (!FnFilter(item, this.filterValue)) {
            return;
          }
        }
        // Increase display index
        if (!asGroupTitle) {
          displayIndex++
        }
        // Join
        list.push(item)
      })
      //............................................
      return list
    },
    //-----------------------------------------------
    findRowIndexById(rowId) {
      for (let row of this.TheData) {
        if (row.id == rowId) {
          return row.index
        }
      }
      return -1
    },
    //-----------------------------------------------
    findRowById(rowId) {
      for (let row of this.TheData) {
        if (row.id == rowId) {
          return row
        }
      }
    },
    //-----------------------------------------------
    getRow(index = 0) {
      return _.nth(this.TheData, index)
    },
    //------------------------------------------
    getCurrentRow(currentId = this.theCurrentId) {
      return this.findRowById(currentId)
    },
    //------------------------------------------
    getCurrent(currentId = this.theCurrentId) {
      let row = this.getCurrentRow(currentId)
      return row
        ? row.rawData
        : null
    },
    //------------------------------------------
    getCheckedRow(idMap = this.theCheckedIds) {
      let list = []
      for (let row of this.TheData) {
        if (idMap[row.id]) {
          list.push(row)
        }
      }
      return list
    },
    //------------------------------------------
    getChecked(idMap = this.theCheckedIds) {
      let rows = this.getCheckedRow(idMap)
      return _.map(rows, row => row.rawData)
    },
    //-----------------------------------------------
    removeCheckedRow(idMap = this.theCheckedIds) {
      let checkedIds = this.getCheckedIdsMap(idMap, false)
      let minIndex = -1
      let maxIndex = -1
      let remainsRows = []
      let checkedRows = []

      _.forEach(this.TheData, row => {
        if (idMap[row.id]) {
          minIndex = minIndex < 0
            ? row.index
            : Math.min(row.index, minIndex);

          maxIndex = maxIndex < 0
            ? row.index
            : Math.max(row.index, maxIndex);

          checkedRows.push(row)
        } else {
          remainsRows.push(row)
        }
      })

      return {
        remainsRows, checkedRows, minIndex, maxIndex, checkedIds
      }
    },
    //-----------------------------------------------
    removeChecked(idMap = this.theCheckedIds) {
      let re = this.removeCheckedRow(idMap)
      re.remains = _.map(re.remainsRows, row => row.rawData)
      re.checked = _.map(re.checkedRows, row => row.rawData)
      return re
    },
    //-----------------------------------------------
    moveCheckedRow(offset = 0, idMap = this.theCheckedIds) {
      idMap = this.getCheckedIdsMap(idMap, false)
      //console.log(idMap)
      if (offset == 0 || _.isEmpty(idMap))
        return { rows: this.TheData, nextCheckedIds: idMap }

      let {
        checkedIds,
        minIndex,
        maxIndex,
        remainsRows,
        checkedRows
      } = this.removeCheckedRow(idMap)

      // targetIndex in remains[] list
      let targetIndex = Math.max(0, minIndex - 1)
      if (offset > 0) {
        targetIndex = Math.min(maxIndex - checkedRows.length + 2, remainsRows.length)
      }
      // Insert
      let rows = _.cloneDeep(remainsRows)
      rows.splice(targetIndex, 0, ...checkedRows)

      if (_.isEmpty(rows))
        return { rows: [], nextCheckedIds: {} }

      // If the index style ID, adjust them
      let nextCheckedIds = checkedIds
      if (/^Row-\d+$/.test(rows[0].id)) {
        nextCheckedIds = {}
        for (let i = 0; i < checkedRows.length; i++) {
          nextCheckedIds[`Row-${i + targetIndex}`] = true
        }
      }

      return { rows, nextCheckedIds }
    },
    //-----------------------------------------------
    moveChecked(offset = 0, idMap = this.theCheckedIds) {
      let re = this.moveCheckedRow(offset, idMap)
      re.list = _.map(re.rows, row => row.rawData)
      return re
    },
    //-----------------------------------------------
    getEmitContext(currentId, checkedIds = {}) {
      // Guard
      if (_.isArray(checkedIds)) {
        let idMap = {}
        _.forEach(checkedIds, id => {
          idMap[id] = true
        })
        checkedIds = idMap
      }
      let oldCurrentId = this.theCurrentId
      let oldCheckedIds = _.cloneDeep(this.theCheckedIds)
      let checked = []
      let current = null
      let currentIndex = -1
      let currentDisplayIndex = -1
      for (let row of this.TheData) {
        if (row.id == currentId) {
          current = row.rawData
          currentIndex = row.index
          currentDisplayIndex = row.displayIndex
        }
        if (checkedIds[row.id]) {
          checked.push(row.rawData)
        }
      }
      return {
        currentIndex, currentDisplayIndex,
        current, currentId,
        checked, checkedIds,
        oldCurrentId, oldCheckedIds
      }
    },
    //-----------------------------------------------
    async canSelectRow(payload) {
      if (_.isFunction(this.onBeforeChangeSelect)) {
        let canSelect = await this.onBeforeChangeSelect(payload)
        if (false === canSelect) {
          return false
        }
      }
      return true
    },
    //-----------------------------------------------
    async selectRow(rowId, {
      quiet = false,
      checkedIds,
      payload,
      autoCheckCurrent
    } = {}) {
      //console.log("list_mixins:selectRow", rowId, checkedIds)
      let idMap = {}
      let curId = null
      // Change the current & checked
      let acc = Ti.Util.fallback(autoCheckCurrent, this.autoCheckCurrent, true)
      if (acc) {
        idMap = rowId ? { [rowId]: true } : {}
        curId = rowId || null
      }
      // Just change to current
      else {
        idMap = _.cloneDeep(checkedIds || this.myCheckedIds)
        curId = rowId
      }

      let emitContext = this.getEmitContext(curId, idMap)

      if (!(await this.canSelectRow(emitContext))) {
        return;
      }

      // Private Mode
      if (!this.puppetMode) {
        this.myCheckedIds = emitContext.checkedIds
        this.myCurrentId = emitContext.currentId
      }
      this.myLastIndex = this.findRowIndexById(rowId)
      // Notify Changes
      if (!quiet) {
        _.defaults(emitContext, payload)
        //console.log("doNotifySelect")
        this.doNotifySelect(emitContext)
      }
    },
    //-----------------------------------------------
    selectRowByIndex(rowIndex, options) {
      //console.log(rowIndex)
      let index = rowIndex
      if (this.scrollIndex) {
        index = Ti.Num.scrollIndex(rowIndex, this.TheData.length)
      }
      if (_.inRange(index, 0, this.TheData.length)) {
        let row = this.TheData[index]
        this.selectRow(row.id, options)
      }
    },
    //-----------------------------------------------
    selectPrevRow(options) {
      this.selectRowByIndex(Math.max(-1, this.myLastIndex - 1), options)
    },
    //-----------------------------------------------
    selectNextRow(options) {
      this.selectRowByIndex(this.myLastIndex + 1, options)
    },
    //-----------------------------------------------
    selectRowsToCurrent(rowId) {
      let idMap = _.cloneDeep(this.theCheckedIds)
      let curId = this.theCurrentId
      let index = this.findRowIndexById(rowId)
      if (index >= 0) {
        let fromIndex = Math.min(index, this.myLastIndex)
        let toIndex = Math.max(index, this.myLastIndex)
        if (fromIndex < 0) {
          fromIndex = 0
        }
        for (let i = fromIndex; i <= toIndex; i++) {
          let row = this.TheData[i]
          idMap[row.id] = true
        }
        // Eval context
        let emitContext = this.getEmitContext(curId, idMap)
        // Private Mode
        if (!this.puppetMode) {
          this.myCheckedIds = idMap
          this.myCurrentId = curId
        }
        this.myLastIndex = index
        // Notify Changes
        this.doNotifySelect(emitContext)
      }
    },
    //-----------------------------------------------
    checkRow(rowId, { quiet = false, payload, reset = false } = {}) {
      let idMap = _.cloneDeep(this.theCheckedIds)
      let curId = this.theCurrentId
      let index = this.myLastIndex
      let rowIndex = this.findRowIndexById(rowId)
      //console.log("checkRow", quiet)
      // Reset
      if (reset) {
        curId = null
        idMap = {}
      }

      // All rows
      if (_.isUndefined(rowId)) {
        idMap = {}
        _.forEach(this.TheData, (row) => {
          idMap[row.id] = true
        })
      }
      // Multi rows
      else if (_.isArray(rowId)) {
        let lastRowId = _.last(rowId)
        _.forEach(rowId, (r_id) => {
          idMap[r_id] = true
        })
        if (this.autoCheckCurrent) {
          index = this.findRowIndexById(lastRowId)
        }
      }
      // Object
      else if (_.isPlainObject(rowId)) {
        idMap = _.cloneDeep(rowId)
        if (this.autoCheckCurrent) {
          let lastRowId = undefined
          for (let key in idMap) {
            lastRowId = key
            break;
          }
          index = this.findRowIndexById(lastRowId)
        }
      }
      // Single row
      else {
        idMap[rowId] = true
        if (this.autoCheckCurrent) {
          index = rowIndex
        }
      }
      // Eval context
      let emitContext = this.getEmitContext(curId, idMap)
      // Private Mode
      if (!this.puppetMode) {
        this.myCheckedIds = idMap
        this.myCurrentId = curId
      }
      this.myLastIndex = rowIndex
      // Notify Changes
      if (!quiet) {
        _.defaults(emitContext, payload)
        this.doNotifySelect(emitContext)
      }
    },
    //-----------------------------------------------
    async cancelRow(rowId, { quiet = false, payload } = {}) {
      let idMap = _.cloneDeep(this.theCheckedIds)
      let curId = this.theCurrentId
      let index = -1
      //console.log("cancelRow", rowId)
      if (Ti.Util.isNil(rowId)) {
        idMap = {}
        curId = null
      }
      // Single row
      else {
        index = this.findRowIndexById(rowId)
        idMap[rowId] = false
        if (this.autoCheckCurrent && curId == rowId) {
          curId = null
        }
      }
      // Eval context
      let emitContext = this.getEmitContext(curId, idMap)

      if (!(await this.canSelectRow(emitContext))) {
        return;
      }

      // Private Mode
      if (!this.puppetMode) {
        this.myCheckedIds = idMap
        this.myCurrentId = curId
        this.myLastIndex = index
      }
      // Notify Changes
      if (!quiet) {
        _.defaults(emitContext, payload)
        this.doNotifySelect(emitContext)
      }
    },
    //-----------------------------------------------
    toggleRow(rowId, { quiet = false, payload } = {}) {
      if (this.theCheckedIds[rowId]) {
        this.cancelRow(rowId, { quiet, payload })
      } else {
        this.checkRow(rowId, { quiet, payload })
      }
    },
    //-----------------------------------------------
    doNotifySelect(emitContext) {
      //console.log("doNotifySelect")
      if (_.isFunction(this.__handle_select)) {
        this.__handle_select(emitContext)
      }
      if (this.notifySelectName) {
        this.$notify(this.notifySelectName, emitContext)
      }
      if (_.isFunction(this.onSelect)) {
        this.onSelect(emitContext)
      }
    },
    //-----------------------------------------------
    OnRowCheckerClick({ rowId, shift } = {}) {
      if (this.multi) {
        // Shift Mode
        if (shift) {
          this.selectRowsToCurrent(rowId)
        }
        // Simple Toggle Mode
        else {
          this.toggleRow(rowId)
        }
      }
      // Single Mode
      else {
        this.selectRow(rowId)
      }
    },
    //-----------------------------------------------
    OnRowSelect({ rowId, shift, toggle } = {}) {
      //console.log("OnRowSelect", rowId)
      // Multi + Shift Mode
      if (shift && this.multi) {
        this.selectRowsToCurrent(rowId)
      }
      // Multi + Toggle Mode
      else if (toggle && this.multi) {
        this.toggleRow(rowId)
      }
      // Toggle Mode
      else if (!Ti.Util.isNil(rowId) && !this.autoCheckCurrent) {
        this.toggleRow(rowId)
      }
      // Single Mode
      else {
        this.selectRow(rowId)
      }
    },
    //-----------------------------------------------
    OnRowOpen({ rowId } = {}) {
      //console.log("OnRowOpen", rowId)
      let row = this.findRowById(rowId)
      if (row) {
        if (this.notifyOpenName) {
          this.$notify(this.notifyOpenName, row)
        }
        if (_.isFunction(this.onOpen)) {
          this.onOpen(row)
        }
      }
    },
    //-----------------------------------------------
    getCheckedIdsMap(idList = [], autoCheckCurrent = this.autoCheckCurrent) {
      let idMap = {}
      // ID List
      if (_.isArray(idList)) {
        _.forEach(idList, (rowId) => {
          idMap[rowId] = true
        })
      }
      // Map
      else {
        _.forEach(idList, (checked, rowId) => {
          if (checked) {
            idMap[rowId] = true
          }
        })
      }
      // Force to check current
      if (autoCheckCurrent && !Ti.Util.isNil(this.theCurrentId)) {
        idMap[this.theCurrentId] = true
      }
      return idMap
    },
    //-----------------------------------------------
    setRowSelect({ currentId, checkedIds = {}, quiet } = {}) {
      //console.log("setRotSelect", { currentId, checkedIds, quiet })
      let idMap = {}
      if (_.isArray(checkedIds)) {
        for (let id of checkedIds) {
          idMap[id] = true
        }
      } else {
        _.assign(idMap, checkedIds)
      }

      if (currentId) {
        this.selectRow(currentId, { quiet })
      } else {
        this.cancelRow(currentId, { quiet })
      }
      this.myCheckedIds = idMap
    },
    //-----------------------------------------------
    syncCurrentId() {
      //console.log("syncCurrentId",this.puppetMode,this.theCurrentRowId)
      if (!this.puppetMode && this.theCurrentId != this.theCurrentRowId) {
        //console.log("syncCurrentId", this.theCurrentRowId, this.checkedIds)
        this.selectRow(this.theCurrentRowId, {
          quiet: true,
          checkedIds: this.checkedIds,
          autoCheckCurrent: false
        })
      }
      // Just update the last
      else {
        this.myLastIndex = this.findRowIndexById(this.theCurrentRowId)
      }
      //console.log("syncCurrentId done",this.puppetMode,this.theCurrentRowId)
    },
    //-----------------------------------------------
    syncCheckedIds() {
      if (!this.puppetMode) {
        this.myCheckedIds = this.getCheckedIdsMap(this.checkedIds)
      }
    },
    //-----------------------------------------------
    resetMorePending({ $more, $moreBtn } = {}) {
      this.myMoreIsPendingAt = -1
      this.myMorePendingOffset = -1
      this.myMorePendingExpectTop = -1
      this.myMoreBtnOrgHeight = -1
      if (_.isElement($more)) {
        Ti.Dom.updateStyle($more, {
          "margin-bottom": ""
        })
      }
      if (_.isElement($moreBtn)) {
        Ti.Dom.updateStyle($moreBtn, {
          height: ""
        })
      }
    },
    //-----------------------------------------------
    pendingMoreWhenScrolling({ $view, $more, $moreBtn } = {}) {
      // Not more
      if (this.moreLoading
        || !this.autoLoadMore
        || !_.isElement($more)
        || !_.isElement($moreBtn)
      ) {
        return
      }
      // Get the more position
      let view = Ti.Rects.createBy($view)
      let vsTop = $view.scrollTop
      let viewH = $view.scrollHeight
      // Pending more
      if (this.myMoreIsPendingAt > 0) {
        // Cancel pendding
        if (vsTop < this.myMoreIsPendingAt) {
          //console.log("cancel pending")
          this.resetMorePending({ $more, $moreBtn })
        }
        // Add pending
        else {
          let orgH = this.myMoreBtnOrgHeight
          let off = Math.min(orgH * 2, vsTop - this.myMoreIsPendingAt)
          this.myMorePendingOffset = off
          let btnH = Math.max(orgH, off)
          Ti.Dom.updateStyle($moreBtn, {
            height: btnH
          })
          // Reach the bottom check delay
          if (this.myMorePendingExpectTop <= 0 && Math.ceil(view.height + vsTop) >= viewH) {
            this.myMorePendingExpectTop = vsTop
            //console.log("check in 500ms")
            _.delay(() => {
              let expTop = this.myMorePendingExpectTop
              if (expTop > 0 && $view.scrollTop >= expTop) {
                //console.log("fire load more!")
                this.$notify("load:more")
                this.resetMorePending({ $more, $moreBtn })
              }
            }, 500)
          }
        }
        return
      }

      // Detact pending
      let more = Ti.Rects.createBy($more)
      let moin = view.contains(more, -3)
      //console.log(moin, vsTop, view.toString(), more.toString())
      if (moin) {
        this.myMoreIsPendingAt = vsTop
        this.myMoreBtnOrgHeight = $moreBtn.clientHeight
        Ti.Dom.updateStyle($more, {
          "margin-bottom": this.myMoreBtnOrgHeight * 2
        })
      } else {
        this.resetMorePending({ $more, $moreBtn })
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch: {
    "currentId": function () {
      this.syncCurrentId()
    },
    "checkedIds": function () {
      this.syncCheckedIds()
    },
    "data": function () {
      if (this.theCurrentId) {
        this.myLastIndex = this.findRowIndexById(this.theCurrentId)
      }
    }
  },
  ///////////////////////////////////////////////////
  mounted: async function () {
    //.................................
    this.syncCheckedIds()
    this.syncCurrentId()
    //.................................
  }
  ///////////////////////////////////////////////////
}
return LIST_MIXINS;
;
})()
// ============================================================
// EXPORT 'web-meta-badge.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/meta/badge/web-meta-badge.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data: ()=>({
    myData: undefined
  }),
  /////////////////////////////////////////
  props : {
    //--------------------------------------
    // Data
    //--------------------------------------
    "value" : undefined,
    "transformer" : {
      type : [String, Function, Object],
      default : undefined
    },
    //--------------------------------------
    // Behavior
    //--------------------------------------
    // ...
    //--------------------------------------
    // Aspect
    //--------------------------------------
    // "=xxx" : get icon from value
    // F(this.value)
    // "fas-xx"  : static value
    // "xxx.png" : static image (SVG supported)
    "icon" : {
      type : [String, Function],
      default : "=icon"
    },
    "title" : {
      type : [String, Function],
      default : "=title"
    },
    "brief" : {
      type : [String, Function],
      default : "=brief"
    },
    // [{icon, text, href, newtab, emitName, payload}]
    "links" : {
      type : [Array, String, Function, Object],
      default : "=links"
    },
    //--------------------------------------
    // Measure
    //--------------------------------------
    "iconWidth" : {
      type : [String, Number],
      default : undefined
    },
    "iconHeight" : {
      type : [String, Number],
      default : undefined
    },
    "iconSize" : {
      type : [String, Number],
      default : undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass(_.get(this.myData, "className"))
    },
    //--------------------------------------
    IconStyle() {
      return Ti.Css.toStyle({
        width: this.iconWidth,
        height : this.iconHeight,
        fontSize : this.iconSize
      })
    },
    //--------------------------------------
    TheIcon() {
      return Ti.Util.explainObj(this.myData, this.icon);
    },
    //--------------------------------------
    TheTitle() {
      return Ti.Util.explainObj(this.myData, this.title);
    },
    //--------------------------------------
    TheBrief() {
      return Ti.Util.explainObj(this.myData, this.brief);
    },
    //--------------------------------------
    TheLinks() {
      let links = Ti.Util.explainObj(this.myData, this.links);
      if(!links)
        return []
      if(!_.isArray(links)) {
        links = [links]
      }
      let list = []
      for(let i=0; i<links.length; i++) {
        let li = links[i]
        if(li.text) {
          list.push({index: i, ... li})
        }
      }
      return list
    },
    //--------------------------------------
    hasLinks() {
      return !_.isEmpty(this.TheLinks)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickLink({href, emitName, payload}={}, evn) {
      if(!href) {
        evn.preventDefault()
        if(emitName) {
          this.$notify(emitName, payload)
        }
      }
    },
    //--------------------------------------
    async evalData() {
      if(this.transformer) {
        if(_.isFunction(this.transformer)) {
          this.myData = await this.transformer(this.value)
        } else {
          this.myData = Ti.Util.explainObj(this.value, this.transformer)
        }
      } else {
        this.myData = this.value
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "value" : {
      handler: "evalData",
      immediate : true
    }
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-bullet-radio.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/bullet/radio/ti-bullet-radio.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data: () => ({
    myTypeName: "ti-radio-list"
  }),
  //////////////////////////////////////////
  props: {
    "bulletIconOn": {
      type: String,
      default: "fas-dot-circle"
    },
    "bulletIconOff": {
      type: String,
      default: "far-circle"
    },
    // override for checkbox
    "groupSelectable": {
      type: Boolean,
      default: false,
    },
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnClickOptionItem({ value }) {
      this.tryNotifyChange(value)
    },
    //--------------------------------------
    isItemChecked(itValue, val = this.value) {
      return !_.isUndefined(val)
        && !_.isUndefined(itValue)
        && _.isEqual(itValue, val)
    },
    //--------------------------------------
    getItemsCheckMode(items=[]){
      return "none"
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'list_props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/support/list_props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "data": {
    type: [Array, String],
    default: undefined
  },
  // If input the value(ID) Array
  // it can translate by this Dict
  "dict": {
    type: [String, Ti.Dict],
    default: null
  },
  "idBy": {
    type: [String, Function],
    default: "id"
  },
  "rawDataBy": {
    type: [Object, String, Function],
    default: _.identity
  },
  "currentId": {
    type: [String, Number, Boolean],
    default: null
  },
  "checkedIds": {
    type: [Array, Object],
    default: () => []
  },
  "changedId": {
    type: String,
    default: null
  },
  "rowAsGroupTitle": {
    type: [String, Object, Array, Function]
  },
  "rowGroupTitleDisplay": {
    type: [String, Object, Array, Function]
  },
  // "extendFunctionSet" : {
  //   type : Object,
  //   default : ()=>({})
  // },
  "vars": {
    type: Object,
    default: () => ({})
  },
  //-----------------------------------
  "filterValue": {
    type: [String, Object, Number, Boolean, Date, RegExp],
    default: undefined
  },
  "filterBy": {
    type: Function,
    default: undefined
  },
  //-----------------------------------
  "showLoadMore": Boolean,
  "moreLoading": Boolean,
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "dftLabelHoverCopy": {
    type: Boolean,
    default: undefined
  },
  "multi": {
    type: Boolean,
    default: false
  },
  // in selectRow(), auto check current and drop primary checked rows?
  "autoCheckCurrent": {
    type: Boolean,
    default: true
  },
  // in multi mode, which key to toggle row checker?
  "rowToggleKey": {
    type: [String, Array],
    default: () => ["SPACE"]
  },
  "rowCheckable": {
    type: [Object, Function],
    default: undefined
  },
  "rowSelectable": {
    type: [Object, Function],
    default: undefined
  },
  "rowOpenable": {
    type: [Object, Function],
    default: undefined
  },
  "rowCancelable": {
    type: [Object, Function],
    default: undefined
  },
  "rowHoverable": {
    type: [Object, Function],
    default: undefined
  },
  "checkable": {
    type: Boolean,
    default: false
  },
  "selectable": {
    type: Boolean,
    default: true
  },
  "openable": {
    type: Boolean,
    default: true
  },
  "cancelable": {
    type: Boolean,
    default: true
  },
  "hoverable": {
    type: Boolean,
    default: false
  },
  "puppetMode": {
    type: Boolean,
    default: false
  },
  "scrollIndex": {
    type: Boolean,
    default: false
  },
  "onBeforeChangeSelect": {
    type: Function,
    default: undefined
  },
  "onSelect": {
    type: Function,
    default: undefined
  },
  "onOpen": {
    type: Function,
    default: undefined
  },
  "autoLoadMore": {
    type: Boolean,
    default: false
  },
  "notifySelectName": {
    type: String,
    default: "select"
  },
  "notifyOpenName": {
    type: String,
    default: "open"
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "rowClassBy": {
    type: [Function, String]
  },
  "blankAs": {
    type: Object
  },
  "loadingAs": {
    type: Object,
    default: () => ({
      className: "as-nil-mask as-big-mask",
      icon: "fas-spinner fa-spin",
      text: "i18n:loading"
    })
  },
  "rowNumberBase": {
    type: Number,
    default: undefined
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width": {
    type: [Number, String],
    default: undefined
  },
  "height": {
    type: [Number, String],
    default: undefined
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-gui-cols.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/gui/cols/ti-gui-cols.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data: () => ({
    adjust_bar_at: "left",
    resize_mode: "col-resize",
    offset_key: "offsetX",
    block_size_by: "width"
  }),
  /////////////////////////////////////////
  props: {
    "adjustable": {
      type: Boolean,
      default: true
    },
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------

    //--------------------------------------
  },
  //////////////////////////////////////////
  mounted() {

  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'table-cell.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/table_old/com/table-row/com/table-cell/table-cell.mjs'] = (function(){
/////////////////////////////////////////////////////
const _M = {
  ///////////////////////////////////////////////////
  inject : ["$table"],
  ///////////////////////////////////////////////////
  data: ()=>({
    isEditingMode : false,
    cellItems : [],
    myCellSize : -1
  }),
  ///////////////////////////////////////////////////
  props : {
    "index" : {
      type : Number,
      default : -1
    },
    "rowId" : {
      type : String,
      default : null
    },
    "rowIndex" : {
      type : Number,
      default : -1
    },
    //..........................
    "title" : {
      type : String,
      default : null
    },
    "nowrap" : {
      type : Boolean,
      default : true
    },
    //..........................
    "display" : {
      type : Array,
      default : ()=>[]
    },
    //..........................
    "name" : {
      type : [String, Array],
      default : null
    },
    "type" : {
      type : String,
      default : "String"
    },
    "dict" : {
      type : String,
      default : "String"
    },
    "comType" : {
      type : String,
      default : null
    },
    "comConf" : {
      type : Object,
      default : ()=>({})
    },
    "serializer" : {
      type : Function,
      default : _.identity
    },
    "transformer" : {
      type : Function,
      default : _.identity
    },
    //..........................
    "data" : {
      type : Object,
      default : ()=>({})
    },
    //..........................
    "isCurrent" : {
      type : Boolean,
      default : false
    },
    "isChecked" : {
      type : Boolean,
      default : false
    },
    //..........................
    "ignoreNil" : {
      type : Boolean,
      default : true
    },
    //..........................
    "focusBy" : {
      type : String,
      default : "focus"
    }
    //..........................
  },
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    TopClass() {
      let hasAlign = this.className && this.className.indexOf("align-")>=0
      return this.getTopClass({
        "has-align" : hasAlign,
        "not-align" : !hasAlign
      })
    },
    //-----------------------------------------------
    WrapperClass() {
      return {
        "is-nowrap" : this.nowrap,
        "is-editing-mode" : this.isEditingMode
      }
    },
    //-----------------------------------------------
    theCurrentDisplayItems() {
      // Edit Mode
      if((this.isActived && this.comType) || _.isEmpty(this.display)) {
        //...........................................
        this.isEditingMode = true
        //...........................................
        let comConf = _.assign({}, this.comConf)
        if(this.focusBy) {
          comConf[this.focusBy] = "${=isActived}"
        }
        //...........................................
        return [{
          comType : this.comType,
          comConf,
          key  : this.name,
          type : this.type,
          dict : this.dict,
          transformer : this.transformer,
          ignoreNil : false
        }]
        //...........................................
      }
      // Display Mode
      this.isEditingMode = false
      return this.display
    },
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    OnClickCell($event){
     this.$emit("cell:click",$event)
    },
    //-----------------------------------------------
    OnDblClickCell($event){
      his.$emit("cell:dblclick",$event)
    },
    //-----------------------------------------------
    async evalCellDisplayItems() {
      //console.log("evalCellDisplayItems",this.index)
      let items = []
      // Eval each items
      for(let i=0; i<this.theCurrentDisplayItems.length; i++) {
        let displayItem = this.theCurrentDisplayItems[i]
        let it = await this.evalDataForFieldDisplayItem({
            itemData : this.data, 
            displayItem, 
            vars : {
              "rowId"     : this.rowId,
              "isCurrent" : this.isCurrent
            },
            autoIgnoreNil : true,
            uniqKey: `row${this.rowId}-cell${this.index}-${i}`
        })
        if(it) {
          items.push(it)
        }
      }
      //if(0 == this.rowIndex && 1==this.index) {
      //console.log("evalCellDisplayItems", this.rowIndex, this.index)
      //}
      // Update and return
      let old = Ti.Util.pureCloneDeep(this.cellItems)
      let nit = Ti.Util.pureCloneDeep(items)
      if(!_.isEqual(old, nit)) {
        //console.log(`-> Cell[${this.rowIndex}-${this.index}]:`, {old, nit})
        this.cellItems = items
      }
    },
    //-----------------------------------------------
    OnItemChanged(item, payload) {
      this.$table.$notify("cell:item:change", {
        rowId     : this.rowId,
        rowData   : this.data,
        cellIndex : this.index,
        index     : this.rowIndex,
        name      : item.key,
        value     : payload
      })
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "data" : {
      handler : "evalCellDisplayItems",
      immediate : true
    },
    //"isCurrent" : "evalCellDisplayItems",
    "display" : "evalCellDisplayItems"
  }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-text-json-tree.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/json/tree/ti-text-json-tree.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data: () => ({
    myTreeRoot: [],
    myTreeCurrentPathId: null,
    myTreeOpenedStatus: {}
  }),
  //////////////////////////////////////////
  props: {
    "value": null,
    "mainWidth": {
      type: [String, Number],
      default: .372
    },
    "border": {
      type: String,
      default: "cell",
      validator: v => /^(row|column|cell|none)$/.test(v)
    },
    "keepOpenBy": {
      type: String,
      default: null
    },
    "autoOpen": {
      type: Boolean,
      default: false
    },
    "defaultOpenDepth": {
      type: Number,
      default: 3
    },
    "showRoot": {
      type: Boolean,
      default: true
    },
    "editing": {
      type: Object,
      default: () => ({})
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    NodeIdBy() {
      return it => Ti.Util.getFallbackNil(it, "id")
    },
    //--------------------------------------
    NodeNameBy() {
      return it => Ti.Util.getFallbackNil(it, "name", "nm", "id")
    },
    //--------------------------------------
    TreeDisplay() {
      return {
        key: "name",
        comType: "ti-label",
        comConf: (it) => ({
          className: {
            [_.kebabCase(`is-${it.nameType}`)]: true,
            "flex-auto": true
          },
          editable: 'Key' == it.nameType,
          hoverCopy: false,
          format: ({
            "Index": v => `[${v}]`,
            "Label": v => Ti.I18n.text(`i18n:json-${v}`)
          })[it.nameType]
        })
      }
    },
    //--------------------------------------
    TreeFields() {
      return [{
        title: "i18n:value",
        width: .618,
        display: {
          key: "value",
          ignoreNil: false,
          ignoreBlank: false,
          comType: "ti-text-json-tree-item",
          comConf: {
            valueType: "${valueType}",
            valuePath: "${=rowId}",
            showActions: "${=isCurrent}"
          }
        }
      }]
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    evalTreeData() {
      let list = []
      // Join the top data
      this.joinTreeTableRow(list, this.value)

      // Update Tree Data
      this.myTreeRoot = _.first(list)
    },
    //--------------------------------------
    getJsValueType(val) {
      if (Ti.Util.isNil(val))
        return "Nil"

      if (_.isArray(val))
        return "Array"

      if (_.isNumber(val)) {
        return "Number"
      }

      return _.upperFirst(typeof val)
    },
    //--------------------------------------
    joinTreeTableRow(list = [], item, key) {
      let nameType;
      let valueType = this.getJsValueType(item)
      // Default itemKey is self-type
      // For top leval
      if (_.isUndefined(key)) {
        key = valueType
        nameType = "Label"
      }
      // Index key
      else if (_.isNumber(key)) {
        nameType = "Index"
      }
      // String key
      else {
        nameType = "Key"
      }
      //................................
      // undefined
      if (_.isUndefined(item)) {
        list.push({
          nameType, valueType,
          name: key,
          value: undefined
        })
      }
      //................................
      // null
      else if (_.isNull(item)) {
        list.push({
          nameType, valueType,
          name: key,
          value: null
        })
      }
      //................................
      // Array
      if (_.isArray(item)) {
        // Create self
        let node = {
          nameType, valueType: "Array",
          name: key,
          value: item,
          children: []
        }
        // Join Children
        for (let i = 0; i < item.length; i++) {
          let child = item[i]
          this.joinTreeTableRow(node.children, child, i)
        }
        // Join self
        list.push(node)
      }
      //................................
      // Object
      else if (_.isPlainObject(item)) {
        // Create self
        let node = {
          nameType, valueType: "Object",
          name: key,
          value: item,
          children: []
        }
        // Join Children
        _.forEach(item, (v, k) => {
          this.joinTreeTableRow(node.children, v, k)
        })
        // Join self
        list.push(node)
      }
      //................................
      // Boolean
      else if (_.isBoolean(item)) {
        list.push({
          nameType, valueType,
          name: key,
          value: item ? true : false
        })
      }
      //................................
      // Number 
      else if (_.isNumber(item)) {
        list.push({
          nameType, valueType,
          name: key,
          value: item * 1
        })
      }
      //................................
      // String
      else if (_.isString(item)) {
        list.push({
          nameType, valueType,
          name: key,
          value: item + ""
        })
      }
    },
    //--------------------------------------
    async doAdd(root = {}, path = []) {
      // Looking for the target from data
      let hie = Ti.Trees.getByPath(this.myTreeRoot, path)
      let target = _.isEmpty(path) ? root : _.get(root, path)
      let isOpened = this.myTreeOpenedStatus[path.join("/")]
      //console.log({root, path, target, hie, isOpened})
      //.....................................
      // Guard: Fail to find the target
      if (!hie) {
        return
      }
      //.....................................
      // If Opened Array
      if (isOpened && _.isArray(target)) {
        // just append the nil at tail
        target.push(null)
      }
      //.....................................
      // If Opened Object
      else if (isOpened && _.isPlainObject(target)) {
        // ask the key
        let newKey = await Ti.Prompt("i18n:json-new-key")
        if (Ti.Util.isNil(newKey)) {
          return
        }
        // and insert nil at the tail
        target[newKey] = null
      }
      //.....................................
      // Other, it must be simple value
      else if (path.length >= 0) {
        //...................................
        // get the parent node
        let p_ph = path.slice(0, path.length - 1);
        let parent = _.isEmpty(p_ph) ? root : _.get(root, p_ph);
        let keyOrIndex = _.last(path)
        //...................................
        // Prepare the new data
        let stub;
        //...................................
        // If array, insert nil after current
        if (_.isArray(parent)) {
          stub = parent
          let pos = Ti.Util.fallback(keyOrIndex, -1) + 1
          Ti.Util.insertToArray(parent, pos, null)
        }
        //...................................
        // If Object
        else if (_.isPlainObject(parent)) {
          // ask the key
          let newKey = await Ti.Prompt("i18n:json-new-key")
          if (Ti.Util.isNil(newKey)) {
            return
          }
          // and insert nil after current path
          stub = Ti.Util.appendToObject(parent, keyOrIndex, {
            [newKey]: null
          })
        }
        //...................................
        // If root, return the stub 
        if (p_ph.length == 0) {
          return stub
        }
        // Set stub
        _.set(root, p_ph, stub)
      }
      //.....................................
      return root
    },
    //--------------------------------------
    doRemove(root = {}, path = []) {
      // Forbid to remove the top
      if (_.isEmpty(path)) {
        return
      }
      //...................................
      // get the candidate for next highlight
      let hie = Ti.Trees.getByPath(this.myTreeRoot, path)
      let can = Ti.Trees.nextCandidate(hie)
      //...................................
      // get the parent node
      let p_ph = path.slice(0, path.length - 1);
      let parent = _.isEmpty(p_ph) ? root : _.get(root, p_ph);
      let keyOrIndex = _.last(path)
      //...................................
      // Prepare the new data
      let stub;
      //...................................
      // If array, insert nil after current
      if (_.isArray(parent)) {
        stub = []
        _.forEach(parent, (val, index) => {
          if (index != keyOrIndex) {
            stub.push(val)
          }
        })
      }
      //...................................
      // If Object
      else if (_.isPlainObject(parent)) {
        stub = {}
        // and insert nil after current path
        _.forEach(parent, (val, key) => {
          if (key != keyOrIndex) {
            stub[key] = val
          }
        })
      }
      //.....................................
      // Highlight the next
      if (can && can.node) {
        let nextPathId = _.concat(can.path, can.node.name).join("/")
        this.$nextTick(() => {
          this.myTreeCurrentPathId = nextPathId
        })
      }
      //...................................
      // If root, return the stub 
      if (p_ph.length == 0) {
        return stub
      }
      // Set stub
      _.set(root, p_ph, stub)
      //.....................................
      return root
    },
    //--------------------------------------
    doChangeValueType(root = {}, path = [], type) {
      // Get the source
      let isRoot = _.isEmpty(path);
      let src = isRoot ? root : _.get(root, path)
      //.....................................
      // Prepare converter
      let convert = ({
        //...................................
        "Boolean": (src) => {
          return src ? true : false
        },
        //...................................
        "Number": (src) => {
          let nb = src * 1
          return isNaN(nb) ? -1 : nb
        },
        //...................................
        "Integer": (src) => {
          let nb = parseInt(src)
          return isNaN(nb) ? -1 : nb
        },
        //...................................
        "Float": (src) => {
          let nb = src * 1
          return isNaN(nb) ? -1 : nb
        },
        //...................................
        "String": (src) => {
          // Array/Object
          if (_.isArray(src) || _.isObject(src)) {
            return JSON.stringify(src)
          }
          // Other value
          return src + ""
        },
        //...................................
        "Array": (src) => {
          // Array
          if (_.isArray(src)) {
            return
          }
          // Nil
          else if (Ti.Util.isNil(src)) {
            return []
          }
          // Wrap to array
          else {
            return [src]
          }
        },
        //...................................
        "Object": (src) => {
          // Array
          if (_.isArray(src)) {
            // Try array as pairs
            let pairs = _.fromPairs(src)
            let stub = {}
            _.forEach(pairs, (val, key) => {
              if (!Ti.Util.isNil(key) && !_.isUndefined(val)) {
                stub[key] = val
              }
            })
            // Maybe merget it 
            if (_.isEmpty(stub) && !_.isEmpty(src)) {
              Ti.Util.merge(stub, src)
            }
            // Whatever return the object
            return stub
          }
          // Object
          else if (_.isPlainObject(src)) {
            return
          }
          // String try to JSON
          else if (_.isString(src)) {
            return Ti.Types.safeParseJson(src, {
              "value": src
            })
          }
          // Other value, just wrap to Object
          return { "value": src }
        },
        //...................................
        "Nil": (src) => {
          return null
        }
        //...................................
      })[type]
      //.....................................
      // Do convert
      if (_.isFunction(convert)) {
        let stub = convert(src)
        // Canceled
        if (_.isUndefined(stub)) {
          return
        }
        // Root object, return directly
        if (isRoot) {
          return stub
        }
        // Update to main data
        _.set(root, path, stub)
        return root
      }
      //.....................................
      // Fail to find the converter, return undeinfed to cancel
    },
    //--------------------------------------
    async OnNodeItemChange({ name, value, data, node, nodeId } = {}) {
      //console.log("OnNodeItemChange", { name, value, data, node, nodeId })
      //....................................
      // Guard it
      if (!node.id) {
        return;
      }
      //....................................
      // Prepare the new Data
      let newData = _.cloneDeep(this.value)
      //....................................
      // Get the target JSON path
      let path = node.path
      //....................................
      // Mutate JSON structure
      if (value && value.jsonMutate) {
        let fn = ({
          Add: this.doAdd,
          Remove: this.doRemove,
          ChangeValueType: this.doChangeValueType
        })[value.jsonMutate]
        // Invoke it
        newData = await Ti.DoInvoke(fn, _.concat([newData, path], value.args), this)

        // Canceled the mutation
        if (_.isUndefined(newData)) {
          return
        }
      }
      //....................................
      // Modify the Array/Object
      else {
        // Set the Key
        if ("name" == name) {
          newData = Ti.Util.setKey(newData, path, value)
        }
        // Set the Value
        else if ("value" == name) {
          // Eval the value smartly
          let fn = ({
            "Integer": (v) => {
              let v2 = parseInt(v)
              if (isNaN(v2)) {
                return v
              }
              return v2
            },
            "Float": (v) => {
              let v2 = v * 1
              if (isNaN(v2)) {
                return v
              }
              return v2
            },
            "Number": (v) => {
              let v2 = v * 1
              if (isNaN(v2)) {
                return v
              }
              return v2
            },
            "Nil": (v) => {
              return Ti.S.toJsValue(v, {
                autoDate: false
              })
            }
          })[data.valueType]
          let v2 = _.isFunction(fn) ? fn(value) : value

          // Set it to data
          _.set(newData, path, v2)
        }
      }
      //....................................
      // Emit the change
      this.$notify("change", newData)
    },
    //--------------------------------------
    OnOpenedStatusChanged(opened) {
      this.myTreeOpenedStatus = opened
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "value": function () {
      this.evalTreeData()
    }
  },
  //////////////////////////////////////////
  mounted: function () {
    this.evalTreeData()
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-form-grid-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/form/grid/ti-form-grid-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "data": {
    type: Object,
    default: undefined
  },
  "fields": {
    type: Array,
    default: () => []
  },
  "fieldStatus": {
    type: Object,
    default: () => ({})
  },
  // merge each time data change
  "fixed": {
    type: Object,
    default: undefined
  },
  // Batch fields hint
  "batchHint": {
    type: Array,
    default: undefined
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "readonly": {
    type: Boolean,
    default: false
  },
  "batchReadonly": {
    type: [Function, Array, Object]
  },
  // if call getData, which will return:
  // - `all` : all data will be taken and return
  // - `diff` : only changed field will be taken
  // - `auto` : `diff` if `notifyMode` is `confirm`, else as `all`
  "dataMode": {
    type: String,
    default: "auto",
    validator: v => /^(all|diff|auto)$/.test(v)
  },
  "onlyFields": {
    type: Boolean,
    default: true
  },
  "omitHiddenFields": {
    type: Boolean,
    default: false
  },
  // When field change, how to notify:
  // - `immediate` : notify immediately both field and data
  // - `data` : notify immediately only data
  // - `field` : notify immediately only field
  // - `confirm` : show confirm button, and to confirm change
  // - `none` : never notify
    // - `auto` : `none` if readonly, else as `immediate`
  "notifyMode": {
    type: String,
    default: "auto",
    validator: v => /^(immediate|data|field|confirm|none|auto)$/.test(v)
  },
  "batchNotifyMode": {
    type: String,
    default: "confirm",
    validator: v => /^(immediate|confirm|none)$/.test(v)
  },
  // If notifyMode=="immediate", when field change,
  // notify the data change 
  "notifyDataImmediate": {
    type: Boolean,
    default: true
  },
  // If current is readonly, try to gen display setting by comType
  "autoReadonlyDisplay": {
    type: Boolean,
    default: true
  },
  "ignoreAutoReadonly": {
    type: [String, Function]
  },
  "defaultFieldType": {
    type: String,
    default: "String"
  },
  "defaultComType": {
    type: String,
    default: "ti-label"
  },
  "defaultComConf": {
    type: Object,
    default: () => ({})
  },
  "linkFields": {
    type: Object,
    default: undefined
  },
  "currentTab": {
    type: Number,
    default: 0
  },
  "keepTabIndexBy": {
    type: String,
    default: undefined
  },
  "autoShowBlank": {
    type: Boolean,
    default: undefined
  },
  "canCustomizedFields": {
    type: Boolean,
    default: false
  },
  "keepCustomizedTo": {
    type: String,
    default: undefined
  },
  // Only those fields will be shown
  "whiteFields": {
    type: Array,
  },
  // Those fields will be ignore
  "blackFields": {
    type: Array,
  },
  "canSubmit": {
    type: Boolean,
    default: false
  },
  // More customized actions
  // TiButton.setup 
  // <BuiltIn actions>
  //  - "form:setup:open"
  //  - "form:setup:clean"
  //  - "form:submit"
  //  - "form:edit"
  //  - "form:readonly"
  //  - "form:confirm"
  //  - "form:reset"
  "actionButtonSetup": {
    type: Array,
    default: () => []
  },
  "actionMenuItems": {
    type: Array,
    default: () => []
  },
  // If use form in GuiPanel, should delay a while 
  // for waiting the transision done
  "adjustDelay": {
    type: Number,
    default: 0
  },
  "tipAsPopIcon": {
    type: Boolean,
    default: true
  },
  /*
  true  => {text: "${title}: ${name}"}
  "xxx" => {text: "xxx"}
  {
    text: "${title}: ${name}",
    vars: {...},  // more vars, built-in:(title, name)
    mode: "V"
  }
  */
  "autoFieldNameTip": {
    type: [Boolean,String,Object],
    default: true
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "mode": {
    type: String,
    default: "group", // compated with old form.mode == all
    validator: (val) => /^(flat|group|tab|all)$/.test(val)
  },
  "screenMode": {
    type: String,
    default: "auto",
    validator: (val) => /^(auto|desktop|tablet|phone)$/.test(val)
  },
  "tabAt": {
    type: String,
    default: "top-center",
    validator: (v) => /^(top|bottom)-(left|center|right)$/.test(v)
  },
  "tabBodyStyle": {
    type: Object
  },
  "fieldBorder": {
    type: String,
    default: "dashed",
    validator: (v) => /^(none|dashed|solid|dotted)$/.test(v)
  },
  "fieldNameAlign": {
    type: String,
    default: "auto",
    validator: (v) => /^(auto|left|right|center|justify)$/.test(v)
  },
  "fieldNameVAlign": {
    type: String,
    default: "center",
    validator: (v) => /^(top|bottom|center)$/.test(v)
  },
  "fieldNameClass": {
    type: [Array, String, Object],
    default: undefined
  },
  "fieldNameStyle": {
    type: Object,
    default: () => ({})
  },
  "fieldNameWrap": {
    type: String,
    default: "nowrap",
    validator: (v) => /^(wrap|nowrap)$/.test(v)
  },
  "fieldValueClass": {
    type: [Array, String, Object],
    default: undefined
  },
  "fieldValueStyle": {
    type: Object,
    default: () => ({})
  },
  "fieldValueVAlign": {
    type: String,
    default: "center",
    validator: (v) => /^(top|bottom|center)$/.test(v)
  },
  "fieldValueWrap": {
    type: String,
    default: "auto",
    validator: (v) => /^(auto|wrap|nowrap)$/.test(v)
  },
  "blankAs": {
    type: Object,
    default: () => ({
      icon: "fab-deezer",
      text: "i18n:empty"
    })
  },
  "icon": {
    type: String,
    default: undefined
  },
  "title": {
    type: String,
    default: undefined
  },
  "titleClass": {
    type: String,
    default: undefined
  },
  "statusIcons": {
    type: Object,
    default: () => ({
      spinning: 'fas-spinner fa-spin',
      error: 'zmdi-alert-polygon',
      warn: 'zmdi-alert-triangle',
      ok: 'zmdi-check-circle',
    })
  },
  "spacing": {
    type: String,
    default: "comfy",
    validator: v => /^(comfy|tiny)$/.test(v)
  },
  //......................................
  // Setup Menu
  //......................................
  // If null, it will flat show setup/reset button
  "setupMoreIcon": {
    type: String,
    default: "fas-cog"
  },
  "setupFieldsAction": {
    type: Object
  },
  "setupFieldsCleanAction": {
    type: Object
  },
  "actionBarAt": {
    type: String,
    default: "bottom",
    validator: (v) => /^(top|bottom)$/.test(v)
  },
  "actionAlign": {
    type: String,
    default: "center",
    validator: (v) => /^(left|center|right)$/.test(v)
  },
  "setupMenuAt": {
    type: String,
    default: "bottom-right",
    validator: (v) => /^(top|bottom)-(left|right)$/.test(v)
  },
  "setupMenuConf": {
    type: Object,
    default: () => {
      /*@see ti-actionbar */
    }
  },
  //......................................
  // Action button
  //......................................
  "submitButton": {
    type: Object
  },
  "editButton": {
    type: Object
  },
  "confirmButton": {
    type: Object
  },
  "resetButton": {
    type: Object
  },
  //......................................
  "actionButtonConf": {
    type: Object,
    default: () => {
      /*className, size, align ... @see ti-button*/
    }
  },
  //......................................
  "customizeDialog": {
    type: Object,
    default: () => ({
      title: "i18n:choose-fields",
      width: "6.4rem",
      height: "90%",
      position: "bottom"
    })
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "fieldNameMaxWidth": {
    type: [Number, String, Array],
  },
  "gridColumnHint": {
    type: [Number, String, Array],
    default: () => [
      [4, 1280],
      [3, 960],
      [2, 640],
      [1, 320],
      0
    ]
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-pay-checkout-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/pay/checkout/web-pay-checkout-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  "tipIcon": {
    type: String,
    default: "fas-clipboard-check"
  },
  "tipText": {
    type: String,
    default: "i18n:pay-checkout-tip"
  },
  /**
   * Items Array should like:
   * {
   *   id: "xxx",      // Item ID
   *   title: "xxx",   // Item display name
   *   price: 34,      // Item price
   *   amount: 2,      // Buy number
   *   thumbSrc        // [optional] Item preview src
   *   href            // [optional] Item link
   * }
   */
  "items" : {
    type : Array,
    default : ()=>[]
  },
  "currency": {
    type: String,
    default: "RMB"
  },
  "orderType": {
    type: String,
    default: "A"
  },
  "addresses": {
    type: Array,
    default: ()=>[]
  },
  // The country map
  "countries" : {
    type: Object,
    default: undefined
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-obj-adaptor-gui.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/adaptor/wn-obj-adaptor-gui.mjs'] = (function(){
/////////////////////////////////////////////
const _M = {
  ///////////////////////////////////////////
  data: () => ({}),
  ///////////////////////////////////////////
  computed: {
    //--------------------------------------
    GuiStdLayout() {
      return {
        desktop: {
          "type": "cols",
          "border": false,
          "card": "normal",
          "blocks": [
            {
              "name": "search",
              "size": "62%",
              "type": "rows",
              "border": false,
              "card": "normal",
              "blocks": [
                {
                  "name": "filter",
                  "size": "auto",
                  "body": "filter"
                },
                {
                  "name": "list",
                  "size": "stretch",
                  "overflow": "cover",
                  "body": "list"
                },
                {
                  "name": "pager",
                  "size": "auto",
                  "body": "pager"
                }
              ]
            },
            {
              "name": "meta",
              "size": "stretch",
              "body": "meta"
            }
          ]
        },
        tablet: "desktop",
        phone: "desktop"
      };
    },
    //--------------------------------------
    GuiStdSchema() {
      return {
        filter: {
          "comType": "TiFilterbar",
          "comConf": {
            "className": "is-nowrap",
            "placeholder": "i18n:search",
            "filter": "=filter",
            "sorter": "=sorter",
            "dialog": {},
            "majors": [],
            "matchKeywords": [
              {
                "test": "^[\\d\\w:]{26,}$",
                "key": "id"
              },
              {
                "test": "^[\\d\\w:.-_]+$",
                "key": "nm",
                "mode": "=~"
              },
              {
                "key": "title",
                "mode": "~~"
              }
            ],
            "filterTags": {
              "id": ":->ID【${val}】",
              "nm": ":=val",
              "title": ":=val",
              "ct": ":=>Ti.DateTime.formatMsDateRange(val, 'yyyy年M月d日','未知日期范围','至','','从','','')",
              "lm": ":=>Ti.DateTime.formatMsDateRange(val, 'yyyy年M月d日','未知日期范围','至','','从','','')"
            },
            "sorterConf": {
              "options": [
                {
                  "value": "ct",
                  "text": "i18n:wn-key-ct"
                },
                {
                  "value": "lm",
                  "text": "i18n:wn-key-lm"
                },
                {
                  "value": "nm",
                  "text": "i18n:wn-key-nm"
                },
                {
                  "value": "sort",
                  "text": "i18n:sort"
                }
              ]
            }
          }
        },
        list: {
          "comType": "WnAdaptlist",
          "comConf": {
            "rowNumberBase": 1,
            "meta": "=oDir",
            "data": {
              "list": "=list",
              "pager": "=pager"
            },
            "currentId": "=currentId",
            "checkedIds": "=checkedIds",
            "status": "=status",
            "exposeHidden": "=exposeHidden",
            "viewType": "=viewType",
            "routers": {
              /*"reload": `dispatch:${this.moduleName}/reloadData`*/
            },
            "itemBadges": {
              "NE": function (obj) {
                if (_.isNumber(obj.sort)) {
                  return {
                    type: "text",
                    className: "as-circle is-track as-label-60 ",
                    value: obj.sort || 0
                  };
                }
              }
            },
            "tableViewConf": {
              "columnResizable": true,
              "canCustomizedFields": true,
              "keepCustomizedTo": "->WnObjAdaptorTableState-${oDir.id}"
            },
            "itemStatus": "=itemStatus",
            "afterUpload": async (checkedIds) => {
              let currentId = _.first(checkedIds);
              await this.dispatch("queryList");
              await this.dispatch("selectMeta", { currentId, checkedIds });
            }
          }
        },
        pager: {
          "comType": "TiPagingJumper",
          "comConf": {
            "value": "=pager",
            "valueType": "longName"
          }
        },
        meta: {
          "comType": "WnObjDetail",
          "comConf": {
            "value": "=meta",
            "fieldStatus": "=fieldStatus"
          }
        }
      };
    },
    //--------------------------------------
    GuiExplainContext() {
      return {
        moduleName: this.moduleName,
        //------------------------------
        dirId: this.dirId,
        oDir: this.oDir,
        //------------------------------
        fixedMatch: this.fixedMatch,
        filter: this.filter,
        sorter: this.sorter,
        list: this.list,
        currentId: this.currentId,
        checkedIds: this.checkedIds,
        pager: this.pager,
        //------------------------------
        meta: this.meta,
        content: this.content,
        contentData: this.contentData,
        //------------------------------
        status: this.status,
        fieldStatus: this.fieldStatus,
        itemStatus: this.itemStatus,
        //------------------------------
        viewType: this.viewType,
        exposeHidden: this.exposeHidden,
        //------------------------------
        ...this.getters
      };
    },
    //--------------------------------------
    GuiLayout() {
      let c = this.GuiExplainContext;
      let layout = this.layout;
      if (_.isEmpty(layout)) {
        layout = this.GuiStdLayout;
      }
      return Ti.Util.explainObj(c, layout);
    },
    //--------------------------------------
    GuiSchema() {
      let c = this.GuiExplainContext;
      let names = _.keys(this.GuiStdSchema);
      _.forEach(this.schema, (_, k) => names.push(k));
      names = _.uniq(names);

      // Merge schame
      let schema = {};
      for (let bodyName of names) {
        // Guard
        if (/^(components|localBehaviorKeepAt|events)$/.test(bodyName)) {
          continue;
        }
        // Merge from std schema
        let com = _.cloneDeep(this.GuiStdSchema[bodyName]) || {};
        _.defaults(com, { comConf: {} });

        // Get customized configration
        let cus = _.get(this.schema, bodyName);
        if (cus && !_.isEmpty(cus)) {
          schema[bodyName] = com;
          let { comType, comConf, mergeMode = "merge" } = cus;
          // ComType
          com.comType = comType || com.comType;
          // ComConf
          if ("merge" == mergeMode) {
            _.merge(com.comConf, comConf);
          }
          // Assign
          else if ("assign" == mergeMode) {
            _.assign(com.comConf, comConf);
          }
          // Reset
          else {
            com.comConf = comConf;
          }
        }

        // Join to schema
        schema[bodyName] = com;
      }

      return Ti.Util.explainObj(c, schema);
    },
    //--------------------------------------
    GuiVars() {
      return {};
    },
    //--------------------------------------
    GuiLoadingAs() {
      return {
        "reloading": {
          icon: "fas-spinner fa-spin",
          text: "i18n:loading"
        },
        "reloadContent": {
          icon: "fas-spinner fa-spin",
          text: "i18n:loading"
        },
        "doing": {
          icon: "zmdi-settings fa-spin",
          text: "i18n:doing"
        },
        "saving": {
          icon: "zmdi-settings fa-spin",
          text: "i18n:saving"
        },
        "deleting": {
          icon: "zmdi-refresh fa-spin",
          text: "i18n:del-ing"
        },
        "publishing": {
          icon: "zmdi-settings zmdi-hc-spin",
          text: "i18n:publishing"
        },
        "restoring": {
          icon: "zmdi-time-restore zmdi-hc-spin",
          text: "i18n:thing-restoring"
        },
        "cleaning": {
          icon: "zmdi-settings zmdi-hc-spin",
          text: "i18n:thing-cleaning"
        }
      };
    },
    //--------------------------------------
    GuiIsLoading() {
      return this.status.reloading ||
        this.status.reloadContent ||
        this.status.doing ||
        this.status.saving ||
        this.status.deleting ||
        this.status.publishing ||
        this.status.restoring ||
        this.status.cleaning
        ? true
        : false;
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  methods: {}
  ///////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'youtube-player.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/net/youtube/player/youtube-player.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////////
  data : ()=>({
    showPlayer : false
  }),
  ///////////////////////////////////////////////////////
  props : {
    //-----------------------------------
    // Data: {id:"QH3zuJCW3Lo", thumbUrl:"https://i.ytimg.com/vi/QH3z..."}
    // Or "QH3zuJCW3Lo"
    //-----------------------------------
    "value" : {
      type : [Object, String]
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "allow" : {
      type : [String, Array],
      default : "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    },
    "allowFullScreen" : {
      type : Boolean,
      default : true
    },
    //-----------------------------------
    // Aspace
    //-----------------------------------
    "blankAs" : {
      type : Object,
      default : ()=>({
        className : "as-big",
        icon : "fab-deezer",
        text : "i18n:empty"
      })
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //---------------------------------------------------
    TopStyle() {
      if(this.hasValue && this.value.thumbUrl) {
        return {
          "background-image" : `url("${this.value.thumbUrl}")`
        }
      }
    },
    //---------------------------------------------------
    TheValue() {
      if(_.isString(this.value)) {
        return {id: this.value}
      }
      return this.value
    },
    //---------------------------------------------------
    hasValue() {
      return (this.TheValue && this.TheValue.id) ? true : false
    },
    //---------------------------------------------------
    VideoSrc() {
      if(this.hasValue) {
        return `//www.youtube.com/embed/${this.TheValue.id}`
      }
    },
    //---------------------------------------------------
    VideoAllow() {
      if(_.isString(this.allow)) {
        return this.allow
      }
      if(_.isArray(this.allow)) {
        return this.allow.join(";")
      }
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  watch : {
    "value" : function(newVal, oldVal) {
      if(newVal && !_.isEqual(newVal, oldVal)) {
        this.showPlayer = false
      }
    }
  },
  ///////////////////////////////////////////////////////
  methods :{
    //---------------------------------------------------
    
    //---------------------------------------------------
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'tree-picker-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/tree-picker/tree-picker-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "value": {
    type: [String, Array, Number],
    default: undefined
  },
  // The given tree data
  "options": {
    type: [Object, Function, String]
  },
  "vars": {
    type: Object
  },
  "dict": {
    type: String
  },
  "format": {
    type: Function
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "onlyLeaf": {
    type: Boolean
  },
  "multi": {
    type: Boolean
  },
  "defaultOpenDepth": {
    type: Number,
    default: 5
  },
  "readonly": {
    type: Boolean
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "dialog": {
    type: Object
  },
  "placeholder": {
    type: String
  },
  "pickingIcon": {
    type: String,
    default: "fas-cog fa-spin"
  },
  "pickingText": {
    type: String,
    default: "..."
  },
  "tree": {
    type: Object
  },
  "prefixIcon": {
    type: String,
    default: "zmdi-minus"
  },
  "suffixIcon": {
    type: String,
    default: "fas-cog"
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-actionbar.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/actionbar/ti-actionbar.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////
  provide : function(){
    return {
      "$bar"  : this,
      "depth" : 0
    }
  },
  ///////////////////////////////////////////
  data: ()=>({
    mySeq : 0,
    myGroups: {}
  }),
  ///////////////////////////////////////////
  props : {
    "items" :{
      type : Array,
      default : ()=>[]
    },
    "vars" :{
      type : [Object, Function]
    },
    "align" : {
      type : String,
      default : "left",
      validator : v => /^(left|right|center)$/.test(v)
    },
    "status" : {
      type : Object,
      default : ()=>({})
    }
  },
  ///////////////////////////////////////////
  computed : {
    //---------------------------------------
    TopClass() {
      return this.getTopClass(`align-${this.align}`)
    },
    //---------------------------------------
    BarItems() {
      //console.log("EvalBarItems")
      let list = []
      _.forEach(this.items, it => {
        let bi = this.evalBarItem(it)
        if(bi) {
          list.push(bi)
        }
      })
      return list
    }
    //---------------------------------------
  },
  ///////////////////////////////////////////
  methods : {
    //---------------------------------------
    allocGroup($big) {
      //console.log("allocGroup", $big.name)
      this.myGroups[$big.name] = $big
    },
    //---------------------------------------
    freeGroup($big) {
      //console.log("freeGroup", $big.name)
      delete this.myGroups[$big.name]
    },
    //---------------------------------------
    notifyChange({name, value}={}) {
      if(name) {
        this.$notify("change", {name, value})
      }
    },
    //---------------------------------------
    getBarItems(items=[]) {
      let list = []
      let lastItemType;
      _.forEach(items, it => {
        let bi = this.evalBarItem(it)
        if(bi && (bi.type != "line" || bi.type!=lastItemType)) {
          lastItemType = bi.type
          list.push(bi)
        }
      })
      return list
    },
    //---------------------------------------
    evalBarItem(it){
      // Guard
      if(!it)
        return

      // Test hidden
      if(it.hidden) {
        if(Ti.AutoMatch.test(it.hidden, this.status)){
          return
        }
      }

      // Test vibible
      if(it.visible) {
        if(!Ti.AutoMatch.test(it.visible, this.status)){
          return
        }
      }

      // Eval bar item
      let type = this.getItemType(it)
      let key = this.getItemKey(type)
      let bi = {
        type, key,
        comType: `bar-item-${type}`,
        comConf: _.defaults(_.omit(it, "items"), {
            name: key
          })
      }
      if("group" == type && _.isArray(it.items)) {
        bi.items = this.getBarItems(it.items)
      }
      return bi
    },
    //---------------------------------------
    getItemType(bi) {
      if(bi.type) {
        return _.toLower(bi.type)
      }
      // Line
      if(_.isEmpty(bi)) {
        return "line"
      }
      // Group
      else if(_.isArray(bi.items)) {
        return "group"
      }
      // TODO support switcher
      // Default is action
      return "action"
    },
    //---------------------------------------
    getItemKey(type="BarItem") {
      return `${type}-${this.mySeq++}`
    },
    //---------------------------------------
    collapseAllGroup() {
      _.forEach(this.myGroups, $big=>{
        $big.doCollapse()
      })
    },
    //---------------------------------------
    __ti_shortcut(uniqKey) {
      Ti.InvokeBy({"ESCAPE":()=>this.collapseAllGroup()}, uniqKey)
    }
    //---------------------------------------
  },
  ///////////////////////////////////////////
  mounted: function(){
    Ti.Viewport.watch(this, {resize:()=>this.collapseAllGroup()})
  },
  ///////////////////////////////////////////
  beforeDestroy: function(){
    Ti.Viewport.unwatch(this)
  }
  ///////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-table.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/table_old/ti-table.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////
  provide: function () {
    return {
      "$table": this
    }
  },
  ///////////////////////////////////////////////////
  data: () => ({
    //myFieldKeys: undefined,
    myFieldWidths: undefined,

    allFields: [],
    myFields: [],
    myTableRect: null,
    myData: []
  }),
  ///////////////////////////////////////////////////
  // props -> ti-table-props.mjs
  ///////////////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      let klass = this.getTopClass({
        // "is-cells-no-ready" : !this.myCellsReady,
        // "is-layout-ready" : this.myCellsReady,
        "is-hoverable": this.hoverable
      }, [
        `is-border-${this.border}`,
        `is-head-${this.head || "none"}`
      ])
      // Auto judgement table layout
      if (!klass['is-layout-fixed'] && !klass['is-layout-auto']) {
        let tableLayout = "auto"
        for (let i = 0; i < this.myFields.length; i++) {
          let fld = this.myFields[i]
          if (!Ti.Util.isNil(fld.width)) {
            tableLayout = "fixed"
            break
          }
        }
        klass[`is-layout-${tableLayout}`] = true
      }
      return klass
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    },
    //--------------------------------------
    TableStyle() {
      if (this.myTableWidth > 0) {
        return Ti.Css.toStyle({
          "width": this.myTableWidth
        })
      }
    },
    //--------------------------------------
    getRowIndent() {
      if (_.isFunction(this.indentBy)) {
        return it => this.indentBy(it)
      }
      if (_.isString(this.indentBy)) {
        return it => _.get(it, this.indentBy)
      }
      return it => 0
    },
    //--------------------------------------
    getRowIcon() {
      if (_.isFunction(this.iconBy)) {
        return it => this.iconBy(it)
      }
      if (_.isString(this.iconBy)) {
        return it => _.get(it, this.iconBy)
      }
      return it => null
    },
    //--------------------------------------
    TheData() {
      return this.myData
    },
    //--------------------------------------
    isShowHead() {
      return /^(frozen|normal)$/.test(this.head)
    },
    //--------------------------------------
    HeadCheckerIcon() {
      if (this.isAllChecked) {
        return "fas-check-square"
      }
      if (this.hasChecked) {
        return "fas-minus-square"
      }
      return "far-square"
    },
    //--------------------------------------
    TableFields() {
      if (!this.myTableRect) {
        return
      }
      let fields = []
      let lastI = this.myFields.length - 1
      for (let i = 0; i < this.myFields.length; i++) {
        let fld = this.myFields[i]
        //..................................
        if (_.isBoolean(fld.visible) && !fld.visible) {
          continue
        }
        if (_.isBoolean(fld.hidden) && fld.hidden) {
          continue
        }
        //..................................
        let display = this.evalFieldDisplay(fld.display, fld.name)
        //..................................
        let fldWidth = _.nth(this.myFieldWidths, i)
        fldWidth = Ti.Util.fallbackNil(fldWidth, fld.width, "stretch")
        //..................................
        if (_.isString(fldWidth)) {
          // Percent
          if (/^\d+(\.\d+)?%$/.test(fldWidth)) {
            fldWidth = fldWidth.substring(0, fldWidth.length - 1) / 100;
          }
          // Auto or stretch
          else if (!/^(auto|stretch)$/.test(fldWidth)) {
            fldWidth = "stretch"
          }
        }
        // Must be number
        else if (!_.isNumber(fldWidth)) {
          fldWidth = "stretch"
        }
        //..................................
        let cell = {
          index: i,
          isFirst: 0 == i,
          isLast: lastI == i,
          title: fld.title,
          nowrap: fld.nowrap,
          width: fldWidth,
          className: fld.className,
          //.....................
          name: fld.name,
          display,
          //.....................
          type: fld.type,
          comType: fld.comType,
          comConf: fld.comConf,
          transformer: fld.transformer,
          serializer: fld.serializer
        }
        //..................................
        cell.headStyle = this.getHeadCellStyle(cell)
        //..................................
        fields.push(cell)
        //..................................
      }
      return fields
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnClickHeadChecker() {
      // Cancel All
      if (this.isAllChecked) {
        this.cancelRow()
      }
      // Check All
      else {
        this.checkRow()
      }
    },
    //--------------------------------------
    OnClickTop($event) {
      if (this.cancelable) {
        // Click The body or top to cancel the row selection
        if (Ti.Dom.hasOneClass($event.target,
          'ti-table', 'table-body',
          'table-head-cell',
          'table-head-cell-text')) {
          this.cancelRow()
        }
      }
    },
    //--------------------------------------
    async OnCustomizeFields() {
      // Found all avaliable fields
      let cans = _.map(this.allFields, ({ title, key }) => {
        return { text: title, value: key }
      })
      let vals = _.map(this.myFields, fld => fld.key)

      // Show the dialog
      let reo = await Ti.App.Open({
        title: "i18n:choose-fields",
        width: "6.4rem",
        height: "90%",
        position: "top",
        actions: [
          {
            text: "i18n:ok",
            handler: ({ result }) => result
          },
          {
            icon: "fas-history",
            text: "i18n:reset",
            handler: () => []
          },
          {
            text: "i18n:cancel"
          }
        ],
        result: vals,
        comType: "TiTransfer",
        comConf: {
          options: cans
        },
        components: [
          "@com:ti/transfer"
        ]
      })

      // User cancel
      if (!reo) {
        return
      }

      // Store to local
      if (this.keepCustomizedTo) {
        //this.myFieldKeys = reo
        let cuo = Ti.Storage.local.getObject(this.keepCustomizedTo)
        cuo.shownFieldKeys = reo
        // Clear to reset width at same time
        if(_.isEmpty(reo)) {
          cuo.setFieldsWidth = []
        }
        Ti.Storage.local.setObject(this.keepCustomizedTo, cuo)
      }

      // Update the new field key
      this.updateMyFieldsByKey(reo)
      if(_.isEmpty(reo)) {
        this.myFieldWidths = []
      }
    },
    //--------------------------------------
    OnColumnResizeBegin(index) {
      // Get Each column width
      let vm = this;
      let $doc = this.$el.ownerDocument;
      let $ths = Ti.Dom.findAll("thead th", this.$refs.table)
      let colWidths = []
      for (let $th of $ths) {
        let w = $th.getBoundingClientRect().width
        colWidths.push(w)
      }
      let TW = _.sum(colWidths)
      //
      // Prepare the dragging context
      //
      let DRG = {
        // Sum the column width 
        viewWidth: TW,
        // Get a virtual rect (remove the scrollbar width)
        // so it should be TableRect + SUM(columnsWith)
        vRect: Ti.Rects.create(_.assign({}, this.myTableRect, {
          width: TW
        }, "tlwh")),
        // Get the current column left
        left: _.sum(colWidths.slice(0, index + 1))
      }
      //
      // evel the indic-bar rect
      //
      let R = 1.5
      DRG.moveLeft = DRG.left + DRG.vRect.left
      DRG.indicBarRect = Ti.Rects.create({
        top: DRG.vRect.top,
        left: DRG.moveLeft - R,
        width: R * 2,
        height: DRG.vRect.height
      })
      //
      // Create indicBar
      //
      DRG.$indic = Ti.Dom.createElement({
        $p: $doc.body,
        tagName: "DIV",
        className: "ti-table-resizing-indicbar",
        style: {
          zIndex: 99999999,
          ...DRG.indicBarRect.toCss()
        }
      })
      //
      // Update indicBar
      //
      DRG.updateIndicBar = function () {
        let mvL = this.moveLeft - R
        Ti.Dom.setStyleValue(this.$indic, "left", mvL)
      }
      // 
      // Mouse move 
      //
      const OnBodyMouseMove = function ({ clientX }) {
        let { left, right } = DRG.vRect
        DRG.moveLeft = _.clamp(clientX, left, right)
        DRG.updateIndicBar()
      }
      //
      // Rlease
      //
      const DeposAll = function () {
        $doc.removeEventListener("mousemove", OnBodyMouseMove, true)
        $doc.removeEventListener("mouseup", DeposAll, true)
        Ti.Dom.remove(DRG.$indic)
        // Is need to update fields width?
        let rL0 = Math.round(DRG.left)
        let rL1 = Math.round(DRG.moveLeft - DRG.vRect.left)
        if (Math.abs(rL0 - rL1) > R) {
          vm.updateColumnWidth({
            index, colWidths, left: rL1
          })
        }
      }
      //
      // Bind events
      //
      $doc.addEventListener("mousemove", OnBodyMouseMove, true)
      $doc.addEventListener("mouseup", DeposAll, true)
    },
    //--------------------------------------
    updateColumnWidth({ index, colWidths, left }) {
      let TW = _.sum(colWidths)
      // Get the ajacent columns
      let ajColsWs = colWidths.slice(index, index + 2)
      let ajLeft = _.sum(colWidths.slice(0, index))
      let ajSumW = _.sum(ajColsWs)
      // Aj-Columns with after resize
      let ajColsW2 = []
      ajColsW2[0] = _.clamp(left - ajLeft, 0, ajSumW)
      ajColsW2[1] = ajSumW - ajColsW2[0]

      // Merge together
      let colWs = _.concat(colWidths)
      colWs[index] = ajColsW2[0]
      colWs[index + 1] = ajColsW2[1]

      // Eval each coumns percent
      let sumW = _.sum(colWs)
      let colPs = _.map(colWs, w => w / sumW)
      // console.log({
      //   index,
      //   before: ajColsWs.join(", "),
      //   after: ajColsW2.join(", "),
      //   ps: colPs.join(", "),
      //   psum: _.sum(colPs)
      // })
      this.myFieldWidths = _.map(colPs, p => Ti.S.toPercent(p))
      // Persistance
      if (this.keepCustomizedTo) {
        let cuo = Ti.Storage.local.getObject(this.keepCustomizedTo)
        cuo.setFieldsWidth = this.myFieldWidths
        Ti.Storage.local.setObject(this.keepCustomizedTo, cuo)
      }
    },
    //--------------------------------------
    getHeadCellStyle(fld) {
      if (fld && !Ti.Util.isNil(fld.width)
        && this.myTableRect && this.myTableRect.width > 0) {
        // Copy width
        let width = fld.width

        // Number
        if (_.isNumber(width)) {
          // -100: it will conver to percent
          if (width < 0) {
            let per = Math.abs(width / this.myTableRect.width)
            width = Math.round(per * 100) + "%"
          }
          // 0-1: => Percent
          else if (width >= 0 && width < 1) {
            width = Math.round(width * 100) + "%"
          }
          // 100: => pixcel
          else {
            width = `${width}px`
          }
        }

        return { width }
      }
    },
    //--------------------------------------
    scrollCurrentIntoView() {
      //console.log("scrollCurrentIntoView", this.myLastIndex)
      if (this.autoScrollIntoView && this.theCurrentId) {
        let index = this.findRowIndexById(this.theCurrentId)
        //console.log("scroll", index)
        let $view = this.$el
        let $row = Ti.Dom.find(`.table-row:nth-child(${index + 1})`, $view)

        if (!_.isElement($view) || !_.isElement($row)) {
          return
        }

        let r_view = Ti.Rects.createBy($view)
        let r_row = Ti.Rects.createBy($row)

        // test it need to scroll or not
        if (!r_view.contains(r_row)) {
          // at bottom
          if (r_row.bottom > r_view.bottom) {
            $view.scrollTop += r_row.bottom - r_view.bottom
          }
          // at top
          else {
            $view.scrollTop += r_row.top - r_view.top
          }
        }
      }
    },
    //--------------------------------------
    OnResize() {
      this.myTableRect = Ti.Rects.createBy(this.$el)
    },
    //--------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("ti-table", uniqKey)
      if ("ARROWUP" == uniqKey) {
        this.selectPrevRow({
          payload: { byKeyboardArrow: true }
        })
        this.scrollCurrentIntoView()
        return { prevent: true, stop: true, quit: true }
      }

      if ("ARROWDOWN" == uniqKey) {
        this.selectNextRow({
          payload: { byKeyboardArrow: true }
        })
        this.scrollCurrentIntoView()
        return { prevent: true, stop: true, quit: true }
      }
    },
    //--------------------------------------
    async evalListData() {
      //let ms =Date.now()
      this.myData = await this.evalData((it) => {
        it.icon = this.getRowIcon(it.item)
        it.indent = this.getRowIndent(it.item)
      })
      // Check ready 
      if (_.isEmpty(this.data)) {
        this.$nextTick(() => {
          this.myCellsReady = true
        })
      }

      // Resize fields
      this.OnResize()

      //let du = Date.now() - ms
      //console.log("evalListData", `${du}ms`)
      // Scroll into view
      _.delay(() => {
        this.scrollCurrentIntoView()
      }, 300)
    },
    //--------------------------------------
    updateMyFieldsByKey(keys = []) {
      let list;
      // Empty to all fields
      if (_.isEmpty(keys)) {
        list = []
        _.forEach(this.allFields, fld => {
          if (!fld.candidate) {
            list.push(_.cloneDeep(fld))
          }
        })
      }
      // Pick fields
      else {
        // Make Map by all fields
        let fldMap = {}
        for (let fld of this.allFields) {
          fldMap[fld.key] = fld
        }
        // Load the field
        list = _.map(keys, k => _.cloneDeep(fldMap[k]))
      }
      // Merge first column display
      if (list.length > 0 && this.headDisplay) {
        list[0].display = _.concat(this.headDisplay, list[0].display)
      }
      // Up to data
      this.myFields = _.without(list, undefined, null)
    },
    //--------------------------------------
    setupAllFields(fields = []) {
      let list = []
      _.forEach(fields, (fld, i) => {
        let f2 = _.cloneDeep(fld)
        f2.key = f2.key || `C${i}`
        list.push(f2)
      })
      this.allFields = list
    },
    //--------------------------------------
    restoreLocalSettings() {
      if (this.keepCustomizedTo) {
        let cuo = Ti.Storage.local.getObject(this.keepCustomizedTo) || {}
        this.myShownFieldKeys = cuo.shownFieldKeys
        this.myFieldWidths = cuo.setFieldsWidth
      }
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////////////
  watch: {
    "data": {
      handler: "evalListDataWhenMarkChanged",
      immediate: true
    },
    "dict": {
      handler: "evalListDataWhenMarkChanged",
      immediate: true
    },
    "fields": {
      handler: function (newVal, oldVal) {
        if (!_.isEqual(newVal, oldVal)) {
          this.restoreLocalSettings()
          this.setupAllFields(newVal)
          this.updateMyFieldsByKey(this.myShownFieldKeys)
        }
      },
      immediate: true
    },
    "selectable": "evalListDataWhenMarkChanged",
    "checkable": "evalListDataWhenMarkChanged",
    "hoverable": "evalListDataWhenMarkChanged",
    "filterValue": "evalListDataWhenMarkChanged"
  },
  ///////////////////////////////////////////////////
  mounted: function () {
    Ti.Viewport.watch(this, {
      resize: _.debounce(() => this.OnResize(), 10)
    })
    this.$nextTick(() => this.OnResize())
    if (this.autoScrollIntoView) {
      _.delay(() => {
        this.scrollCurrentIntoView()
      }, 0)
    }
    // Eval the table viewport Rect
    this.myTableRect = Ti.Rects.createBy(this.$el)
  },
  ///////////////////////////////////////////////////
  beforeDestroy: function () {
    Ti.Viewport.unwatch(this)
  }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-upload-file.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/upload/file/ti-upload-file.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  data: () => ({
    myArea: 0,
    myActionsWidth: 0,
    showMoreActions: false
  }),
  /////////////////////////////////////////
  props: {
    //------------------------------------------------
    // Data
    //------------------------------------------------
    // The source to display image
    "preview": {
      type: [String, Object],
      default: null
    },
    // The value must be a LocalFile object
    // to prerender the LocalFile during uploading
    "uploadFile": {
      type: File,
      default: null
    },
    // Show the process `0.0-1.0` during the uploading
    "progress": {
      type: Number,
      default: -1
    },
    // Input a image link directly
    "exlink": {
      type: Boolean,
      default: false
    },
    //------------------------------------------------
    // Behavior
    //------------------------------------------------
    "previewType": {
      type: String,
      default: "obj",
      validator: (v) => /^(obj|link)$/.test(v)
    },
    // support remove the objects
    "removable": {
      type: Boolean,
      default: true
    },
    "openable": {
      type: Boolean,
      default: true
    },
    "readonly": {
      type: Boolean,
      default: false
    },
    "downloadable": {
      type: Boolean,
      default: true
    },
    "actions": {
      type: Array,
      default: () => []
    },
    //------------------------------------------------
    // Aspect
    //------------------------------------------------
    "prefixHoverIcon": {
      type: String,
      default: "zmdi-close-circle"
    },
    "actionLimit": {
      type: Number,
      default: 3
    },
    "areaSize": {
      type: Object,
      default: () => ({
        //xl: (800 * 800),
        xs: 100 * 100,
        sm: 200 * 200,
        md: 400 * 400,
        lg: 600 * 600
      })
    },
    //------------------------------------------------
    // Measure
    //------------------------------------------------
    "maxWidth": {
      type: [String, Number],
      default: undefined
    },
    "maxHeight": {
      type: [String, Number],
      default: undefined
    },
    // Display width
    "width": {
      type: [String, Number],
      default: 120
    },
    // Display height
    "height": {
      type: [String, Number],
      default: 120
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass(`is-area-${this.AreaType}`);
    },
    //--------------------------------------
    AreaType() {
      let AS = this.areaSize;
      let ar = this.myArea;
      if (ar <= 0) {
        return "nil";
      }
      if (_.inRange(ar, 0, AS.xs + 1)) return "xs";
      if (_.inRange(ar, AS.xs, AS.sm + 1)) return "sm";
      if (_.inRange(ar, AS.sm, AS.md + 1)) return "md";
      if (_.inRange(ar, AS.md, AS.lg + 1)) return "lg";

      return "xl";
    },
    //--------------------------------------
    ThumbStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height,
        maxWidth: this.maxWidth,
        maxHeight: this.maxHeight
      });
    },
    //--------------------------------------
    ActionsStyle() {
      if (/^(xs|sm)$/.test(this.AreaType)) {
        return {
          right: Ti.Css.toSize(this.myActionsWidth * -1)
        };
      }
    },
    //--------------------------------------
    hasPreview() {
      return this.preview ? true : false;
    },
    //--------------------------------------
    isShowActions() {
      return !_.isEmpty(this.ActionItems);
    },
    //--------------------------------------
    ActionItems() {
      let items = [];
      if (this.isShowRemoveIcon) {
        items.push({
          icon: "zmdi-delete",
          text: "i18n:clear",
          className: "as-del",
          handler: () => {
            this.OnRemove();
          }
        });
      }
      if (this.isShowOpenIcon) {
        items.push({
          icon: "zmdi-open-in-new",
          text: "i18n:open",
          className: "as-open",
          handler: () => {
            this.OnOpen();
          }
        });
      }
      if (this.isShowExlink) {
        items.push({
          icon: "fas-link",
          text: "i18n:link",
          className: "as-exlink",
          handler: () => {
            this.OnExlink();
          }
        });
      }
      if (this.isShowDownloadIcon) {
        items.push({
          icon: "zmdi-cloud-download",
          text: "i18n:download",
          className: "as-download",
          handler: () => {
            this.OnDownload();
          }
        });
      }
      if (_.isArray(this.actions)) {
        for (let at of this.actions) {
          let handler;
          if (_.isString(at.action)) {
            handler = () => {
              this.$notify(at.action, at.payload);
            };
          }
          if (_.isFunction(at.action)) {
            handler = () => {
              at.action(at.payload, this);
            };
          }
          items.push({
            icon: at.icon,
            text: at.text,
            className: at.className,
            handler
          });
        }
      }

      return items;
    },
    //--------------------------------------
    TopActionItems() {
      let items = this.ActionItems;
      let N = this.actionLimit;
      if (items.length > N) {
        let I = N - 1;
        let list = items.slice(0, I);
        list.push({
          icon: "zmdi-settings",
          text: "i18n:more",
          hoverMore: true
        });
        return list;
      }
      return items;
    },
    //--------------------------------------
    MoreActionItems() {
      let items = this.ActionItems;
      let N = this.actionLimit;
      if (items.length > N) {
        let I = N - 1;
        return items.slice(I);
      }
    },
    //--------------------------------------
    isShowRemoveIcon() {
      if (!this.uploadFile && this.hasPreview && !this.readonly) {
        return true;
      }
      return false;
    },
    //--------------------------------------
    isShowOpenIcon() {
      return this.openable && this.hasPreview;
    },
    //--------------------------------------
    isShowDownloadIcon() {
      return this.downloadable && this.hasPreview;
    },
    //--------------------------------------
    isShowExlink() {
      return this.exlink && !this.hasPreview;
    },
    //--------------------------------------
    PreviewIcon() {
      if (this.uploadFile) {
        return { type: "localFile", value: this.uploadFile };
      }
      // Normal image
      if (this.preview) {
        return this.preview;
      }
      // Show Icon
      return "zmdi-plus";
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnMouseEnter({ hoverMore } = {}) {
      if (!hoverMore) {
        return;
      }
      this.showMoreActions = true;
      this.$nextTick(() => {});
    },
    //--------------------------------------
    OnClickToEdit() {
      if ("link" == this.previewType) {
        this.$notify("exlink");
      } else if (this.readonly) {
        this.$notify("open");
      } else {
        this.$refs.file.click();
      }
    },
    //--------------------------------------
    async OnDropFiles(files) {
      let file = _.get(files, 0);
      if (file && !this.readonly) {
        this.$notify("upload", file);
      }
    },
    //--------------------------------------
    async OnSelectLocalFilesToUpload(evt) {
      await this.OnDropFiles(evt.target.files);
      this.$refs.file.value = "";
    },
    //--------------------------------------
    OnRemove() {
      this.$notify("remove");
    },
    //--------------------------------------
    OnOpen() {
      this.$notify("open");
    },
    //--------------------------------------
    OnExlink() {
      this.$notify("exlink");
    },
    //--------------------------------------
    OnDownload() {
      this.$notify("download");
    },
    //--------------------------------------
    recountArea() {
      let rect = Ti.Rects.createBy(this.$refs.thumb);
      if (_.isEmpty(rect)) return;
      this.myArea = rect.width * rect.height;
      if (this.$refs.actions) {
        this.myActionsWidth = this.$refs.actions.getBoundingClientRect().width;
      } else {
        this.myActionsWidth = 0;
      }
    },
    //--------------------------------------
    shouldRecountArea() {
      _.delay(() => {
        this.recountArea();
      }, 10);
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "preview": "shouldRecountArea",
    "width": "shouldRecountArea",
    "height": "shouldRecountArea",
    "removable": "shouldRecountArea",
    "areaSize": "shouldRecountArea"
  },
  //////////////////////////////////////////
  created: function () {
    Ti.Viewport.watch(this, {
      resize: () => {
        this.recountArea();
      }
    });
  },
  //////////////////////////////////////////
  mounted: function () {
    this.$nextTick(() => this.recountArea());
  },
  //////////////////////////////////////////
  beforeDestroy: function () {
    Ti.Viewport.unwatch(this);
  }
  //////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'rich-tinymce.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/rich-tinymce.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////
  data: () => ({
    myPlugins: [],
    myHtmlCode: undefined,
    /*
    [{
      key : "xxx",
      index : 0,
      level : 1,  // H1~6
      title : "xxx",
      children : [{..}]
    }]
    */
    myOutlineTree: undefined,
    myCurrentHeadingId: undefined,
    myContentCallbacks: {},
    myContentDirty: true
  }),
  ///////////////////////////////////////////////////
  computed: {
    //-----------------------------------------------
    TopClass() {
      return this.getTopClass({
        "nil-content": this.isContentNil,
        "has-content": !this.isContentNil
      })
    },
    //-----------------------------------------------
    TheToolbar() {
      let tb = this.toolbar
      if (true === this.toolbar
        || (_.isArray(this.toolbar) && _.isEmpty(this.toolbar))) {
        tb = "#quick"
      }
      let m = /^#(.+)$/.exec(tb)
      if (m) {
        let tbName = m[1]
        let tbd = ({
          markdown: [
            'formatselect',
            'bold italic link',
            'blockquote bullist numlist',
            'edit removeformat'],
          quick: [
            'formatselect',
            'bold italic underline link',
            'blockquote bullist numlist',
            'blocks',
            'edit removeformat'],
          full: [
            'formatselect',
            'bold italic underline link',
            'blockquote bullist numlist',
            'blocks table',
            [
              'WnImgPick', 'WnWebImgPick', 'WnVideoPick', 'WnAudioPick',
              'WnAttachmentPick', 'WnAlbumPick'
            ].join(' '),
            ['WnYoutubePick', 'WnYtPlaylistPick', 'WnFbAlubmPick'].join(' '),
            'superscript subscript',
            'edit removeformat']
        })[tbName]
        return tbd ? tbd.join("|") : false
      }
      if (_.isArray(this.toolbar)) {
        return this.toolbar.join("|")
      }
      return this.toolbar
    },
    //------------------------------------------------
    ContentCssPath() {
      let css = _.concat(
        Ti.Config.url(`@theme:tinymce/doc_${this.theme}.css`),
        Ti.Config.url(`@deps:zmdi/css/material-design-iconic-font.css`),
        Ti.Config.url(`@deps:fontawesome/5.15.1-web/css/all.css`),
        Ti.Config.url(`@deps:iconmonstr/css/iconmonstr-iconic-font.css`),
      )
      return css.join(",")
    },
    //-----------------------------------------------
    BlankComStyle() {
      return {
        position: "absolute",
        top: 0, right: 0, bottom: 0, left: 0,
        zIndex: 10
      }
    },
    //-----------------------------------------------
    isContentLoading() {
      return this.loading || _.isUndefined(this.value)
    },
    //-----------------------------------------------
    isContentNil() {
      return this.nilContent || Ti.Util.isNil(this.value)
    },
    //-----------------------------------------------
    ExplainPluginUrl() {
      // String
      if (_.isString(this.pluginUrl)) {
        return Ti.Util.genInvoking(this.pluginUrl, { partial: "right" })
      }
      // Customized function
      if (_.isFunction(this.pluginUrl)) {
        return this.pluginUrl
      }
      // Default
      return function (url) {
        let m = /^[#](.+)$/.exec(url)
        if (m) {
          return `@com:ti/text/rich/tinymce/plugin/${m[1]}.mjs`
        }
        return url
      }
    },
    //-----------------------------------------------
    TheLang() {
      let ss = _.kebabCase(this.lang).split(/[_-]/)
      let s0 = _.lowerCase(ss[0])
      if ("en" == s0)
        return null
      let s1 = _.upperCase(ss[1])
      return [s0, s1].join("_")
    },
    //-----------------------------------------------
    TheTinyEditor() {
      let plugNames = _.map(this.myPlugins, ({ name } = {}) => name)
      //.........................................
      let tinyConfig = _.omit(this.tinyConfig, "plugins")
      let tinyPlugins = _.get(this.tinyConfig, "plugins")
      //.........................................
      let plugins = _.concat('paste lists advlist table searchreplace', plugNames, tinyPlugins)
      //.........................................
      return _.assign({
        plugins: plugins.join(" "),
        content_css: this.ContentCssPath,
        auto_focus: true,
        statusbar: false,
        menubar: false,
        resize: false,
        br_in_pre: false,
        convert_urls: false,
        // urlconverter_callback: function(url, node, on_save, name) {
        //   // Do some custom URL conversion
        //   console.log("urlconverter_callback", {url, node, on_save, name})

        //   // Return new URL
        //   return url;
        // },
        table_advtab: false,
        table_cell_advtab: false,
        table_row_advtab: false,
        table_toolbar: [
          'tableinsertrowbefore tableinsertrowafter tabledeleterow', 'tableinsertcolbefore tableinsertcolafter tabledeletecol',
          'tabledelete'].join("|"),
        table_use_colgroups: true
      }, tinyConfig)
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnClipBoardPoste({ clipboardData } = {}) {
      console.log("OnClipBoardPoste", clipboardData)
      let imgF = Ti.Dom.getImageDataFromClipBoard(clipboardData)
      if (imgF) {
        console.log(imgF)
      }
    },
    //-----------------------------------------------
    OnHeadingChange($node, { resetOutlineId = false } = {}) {
      let $h = Ti.Dom.closest($node, el => {
        return /^(sub-)?title$/.test(el.getAttribute("doc-heading"))
          || /^H[1-6]$/.test(el.tagName)
      }, { includeSelf: true })
      if ($h) {
        if (resetOutlineId && $h.getAttribute("ti-outline-id")) {
          let nodeId = Ti.Random.str(12);
          $h.setAttribute("ti-outline-id", nodeId)
        }
        //console.log("OnHeadingChange", $h.outerHTML)
        this.evalOutline()
      }
    },
    //-----------------------------------------------
    setElementEditable(editable, selector) {
      // Direct element
      if (_.isElement(selector)) {
        selector.contentEditable = editable
        return
      }
      // Guard
      if (_.isEmpty(selector)) {
        return
      }
      // Batch
      if (_.isArray(selector)) {
        for (let sel of selector) {
          this.setElementEditable(editable, sel)
        }
        return
      }

      // Find
      if (_.isString(selector)) {
        let els = this.$editor.$(selector)
        for (let i = 0; i < els.length; i++) {
          els[i].contentEditable = editable
        }
      }
    },
    //-----------------------------------------------
    syncContent() {
      //console.log("tinymce syncContent")
      // Clear the style cache
      this.$editor.$("[data-mce-style]").attr({
        "data-mce-style": null
      })
      let str = this.$editor.getContent()
      //console.log("content", typeof str, `【${str}】`, this.value)
      this.myHtmlCode = str
      //console.log("syncContent", str)
      //this.$notify("change", str);
      return str
    },
    //-----------------------------------------------
    evalCurrentHeading() {
      let $node = this.$editor.selection.getNode()
      let $h = Ti.Dom.closestByTagName($node, /^H[1-6]$/)

      // Looking previous
      if (!$h) {
        let $body = $node.ownerDocument.body
        let $top = $node
        while ($top.parentElement && $top.parentElement != $body) {
          $top = $top.parentElement
        }
        $h = Ti.Dom.prevByTagName($top, /^H[1-6]$/)
      }

      if ($h) {
        this.myCurrentHeadingId = $h.getAttribute("ti-outline-id")
      }
    },
    //-----------------------------------------------
    evalOutline() {
      //console.log("evalOutline")
      let list = []
      this.$editor.$('h1,h2,h3,h4,h5,h6,[doc-heading]').each((index, el) => {
        let nodeId = el.getAttribute("ti-outline-id")
        if (!nodeId) {
          nodeId = Ti.Random.str(12)
          el.setAttribute("ti-outline-id", nodeId)
        }

        let headingName = el.getAttribute("doc-heading");
        let level = 0;
        if ("title" == headingName) {
          level = 1
        } else if ("sub-title" == headingName) {
          level = 2
        } else if (/^H[1-9]$/.test(el.tagName)) {
          level = parseInt(el.tagName.substring(1)) + 2
        } else {
          return
        }

        list.push({
          id: nodeId,
          index, level,
          name: el.innerText,
          className: el.className,
          tagName: el.tagName,
          attrs: Ti.Dom.attrs(el)
        })
      })

      // Groupping to tree
      let tree = {
        id: "@OUTLINE",
        level: 0,
        name: "Document",
        children: []
      }
      let rootHie = Ti.Trees.getById(tree, "@OUTLINE")


      if (!_.isEmpty(list)) {
        let hie = rootHie
        for (let i = 0; i < list.length; i++) {
          let it = list[i]
          // Join the child
          if (it.level > hie.node.level) {
            hie = Ti.Trees.append(hie, it, { autoChildren: true }).hierarchy
          }
          // add sibling
          else if (it.level == hie.node.level) {
            hie = Ti.Trees.insertAfter(hie, it).hierarchy
          }
          // add parent
          else {
            // Seek to sibling
            while (hie.parent && hie.parent.node.level > 0) {
              hie = hie.parent
              if (it.level >= hie.node.level) {
                break;
              }
            }
            hie = Ti.Trees.insertAfter(hie, it).hierarchy
          }
        }
      }
      //console.log(tree)
      if (tree.children.length == 1) {
        tree = tree.children[0];
      }

      // Set
      this.myOutlineTree = tree
    },
    //-----------------------------------------------
    resortMediaSrc(){
      this.$editor.$('img.wn-media[wn-obj-id]').each((index, el) => {
        let objId = el.getAttribute("wn-obj-id")
        let src = el.getAttribute("src")
        let shouldSrc = `/o/content?str=id:${objId}`
        if (src!=shouldSrc) {
          el.setAttribute("src", shouldSrc)
        }
      })
    },
    //-----------------------------------------------
    scrollIntoView(selector) {
      let $ta;
      if (_.isElement(selector)) {
        $ta = selector
      } else {
        let q = this.$editor.$(selector).first()
        if (q.length > 0) {
          $ta = q[0]
        }
      }
      if (!$ta)
        return

      let $view = Ti.Dom.ownerWindow($ta)
      let r_view = Ti.Rects.createBy($view)
      let r_targ = Ti.Rects.createBy($ta)

      // test it need to scroll or not
      if (!r_view.contains(r_targ)) {
        $view.scroll({
          top: r_targ.top + $view.scrollY,
          behavior: "smooth"
        })
      }
      // console.log("r_view: " + r_view)
      // console.log("r_targ: " + r_targ)
    },
    //-----------------------------------------------
    async initEditor() {
      // Guard
      if (this.$editor)
        return
      // Prepare the configuration
      const conf = {
        target: this.$refs.editor,
        ... this.TheTinyEditor,
        icons: "ti_tiny_icon_pack",
        language: this.TheLang,
        readonly: this.readonly,
        placeholder: Ti.I18n.text(this.placeholder),
        formats: {
          underline: { inline: 'u' },
          docTitle: {
            selector: 'p,h1,h2,h3,h4,h5,h6,div',
            block: "p",
            attributes: { "doc-heading": "title" }
          },
          docSubTitle: {
            selector: 'p,h1,h2,h3,h4,h5,h6,div',
            block: "p",
            attributes: { "doc-heading": "sub-title" }
          },
        },
        toolbar: this.TheToolbar,
        toolbar_groups: {
          edit: {
            icon: 'edit-block',
            tooltip: 'edit',
            items: 'copy cut paste pastetext | undo redo | searchreplace',
          },
          alignment: {
            icon: 'align-justify',
            tooltip: 'alignment',
            items: 'alignleft aligncenter alignright alignjustify',
          },
          blocks: {
            icon: 'align-justify',
            tooltip: 'alignment',
            items: 'alignleft aligncenter alignright alignjustify | indent outdent',
          },
        },
        setup: (editor) => {
          editor.__rich_tinymce_com = this
          editor.on("SetContent", this.OnEditorSetContent)
          // Event: change
          editor.on("Change", (evt) => {
            //console.log("Change ", evt)
            //this.myHtmlCode = editor.getContent()
            editor.__rich_tinymce_com.debounceSyncContent();
          })
          editor.on("keyup", (evt) => {
            //console.log("keyup", evt.key, evt.which)

            // 在标题里回车，可能会导致大纲级别变动
            if (/^(Enter|Delete)$/.test(evt.key)) {
              let $node = editor.selection.getNode()
              this.OnHeadingChange($node, { resetOutlineId: true })
            }
            editor.__rich_tinymce_com.$notify("keyup", evt)
            editor.__rich_tinymce_com.debounceSyncContent();
          })
          editor.on("paste", (evt) => {
            editor.__rich_tinymce_com.debounceSyncContent();
          })
          // Event: get outline
          editor.on("input", (evt) => {
            let $node = editor.selection.getNode()
            //console.log("input!!", $node)
            this.OnHeadingChange($node)
          })
          // Event: watch the command to update
          editor.on("ExecCommand", (evt) => {
            //console.log("command fired!!", evt)
            this.myHtmlCode = editor.getContent()
            this.evalOutline()
            if ("mceInsertTable" == evt.command) {
              this.$notify("mce:insert:table")
            }
          })
          editor.on("SelectionChange", (evt) => {
            //console.log("SelectionChange ", evt)
            this.evalCurrentHeading()
          })
          editor.on("NodeChange", (evt) => {
            if (Ti.Dom.hasClass(evt.element, "ti-tinymce-obj-resize-handler")) {
              evt.preventDefault();
              evt.stopPropagation();
              return false
            } else {
              this.redrawResizeHandler(evt.element)
            }
          })
          editor.on("ResizeWindow", (evt) => {
            editor.$('.ti-tinymce-obj-resize-handler').remove()
          })
          editor.on('init', () => {
            let $html = editor.$('html')[0]
            let $win = Ti.Dom.ownerWindow($html)
            Ti.Dom.watchAutoRootFontSize({
              phoneMaxWidth: 640,
              tabletMaxWidth: 900,
              designWidth: 1200,
              max: 100, min: 70,
            }, ({ $root, mode, fontSize }) => {
              $root.style.fontSize = fontSize + "px"
              $root.setAttribute("as", mode)
            }, $win)
          })
          //
          // Shortcute
          //
          editor.addShortcut('ctrl+s', "Save content", () => {
            Ti.App(this).fireShortcut("CTRL+S");
          });
          editor.addShortcut('alt+shift+v', "View source", () => {
            Ti.App(this).fireShortcut("ALT+SHIFT+V");
          });
          editor.addShortcut('alt+shift+P', "Properties", () => {
            Ti.App(this).fireShortcut("ALT+SHIFT+P");
          });
          // Customized
          if (_.isFunction(this.tinySetup)) {
            this.tinySetup(editor)
          }
          // Remember instance
          this.$editor = editor
        }
      }
      // Extends valid element
      let { extended_valid_elements } = conf

      conf.extended_valid_elements = _.concat(
        extended_valid_elements,
        'img[ti-*|wn-*|src|width|height|style|class]',
        'div[ti-*|wn-*|style|class]',
        'p[doc-heading|style]',
        'span[ti-*|wn-*|style|class]'
      ).join(",")
      // Init customized plugins
      for (let plug of this.myPlugins) {
        tinymce.PluginManager.add(plug.name, plug.setup)
        if (_.isFunction(plug.init)) {
          plug.init(conf)
        }
      }

      // :: Setup tinyMCE
      // The init() method return Promise object for some result async loading.
      // We need to await all them done before invoke setContent method of
      // the editor instance.
      await tinymce.init(conf);

      // init content
      if (this.value) {
        this.myContentDirty = true
        this.myHtmlCode = this.value
        this.$editor.setContent(this.value)

        // Then generate the outline
        this.evalOutline()

        // restore src for image element by wn-obj-id
        this.resortMediaSrc()
      }
      //.............................................
    },
    //-----------------------------------------------
    registerContentCallback(name, callback) {
      this.myContentCallbacks[name] = callback
    },
    //-----------------------------------------------
    tellPluginsContentChange() {
      if (_.isArray(this.myPlugins)) {
        let funcs = _.values(this.myContentCallbacks)
        for (let func of funcs) {
          func(this.$editor)
        }
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch: {
    "myHtmlCode": function (newVal, oldVal) {
      if (
        !this.loading
        && !this.nilContent
        && !_.isEqual(newVal, oldVal)
        && !_.isEqual(newVal, this.value)
      ) {
        //console.log("myHtmlCode", {newVal, oldVal})
        this.$notify("change", newVal);
      }
    },
    "myOutlineTree": function (newVal, oldVal) {
      if (!_.isEqual(newVal, oldVal)) {
        this.$notify("outline:change", this.myOutlineTree)
      }
    },
    "myCurrentHeadingId": function (newVal, oldVal) {
      if (!_.isEqual(newVal, oldVal)) {
        this.$notify("current:heading", newVal)
      }
    },
    "value": function (newVal, oldVal) {
      // Guard
      if (!this.$editor) {
        return
      }
      //console.log("value", {newVal, oldVal})
      if (!this.myHtmlCode ||
        (!_.isEqual(newVal, oldVal) && !_.isEqual(newVal, this.myHtmlCode))) {
        //console.log("dirty it")
        this.myContentDirty = true
        this.myHtmlCode = newVal
        this.$editor.setContent(newVal || "")
      }
    }
  },
  //////////////////////////////////////////
  created: function () {
    this.OnPaste = evt => {
      this.OnClipBoardPoste(evt)
    }
  },
  ///////////////////////////////////////////////////
  created: function () {
    this.OnEditorSetContent = () => {
      //console.log("OnEditorSetContent", this.myContentDirty)
      if (this.myContentDirty) {
        this.tellPluginsContentChange()
        this.myContentDirty = false
      } else {
        //console.log("???")
      }
    }
    //
    // Debound sync content
    this.debounceSyncContent = _.debounce(() => {
      this.syncContent()
    }, 500)
  },
  ///////////////////////////////////////////////////
  mounted: async function () {
    if (!_.isEmpty(this.plugins)) {
      let list = _.map(this.plugins, this.ExplainPluginUrl)
      this.myPlugins = await Ti.Load(list)
    }
    _.delay(() => {
      this.initEditor()
    }, this.delayInit || 0)
  },
  //////////////////////////////////////////
  beforeDestroy: function () {
    window.removeEventListener("paste", this.OnPaste)
  }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-obj-adaptor.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/adaptor/wn-obj-adaptor.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////
  data: () => ({
  }),
  ///////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    EventRouting() {
      let routing = {
        "block:shown": "updateBlockShown",
        "block:show": "showBlock",
        "block:hide": "hideBlock",
        "meta::field:change": "OnMetaFieldChange",
        "content::change": "OnContentChange",
        "save:change": "OnSaveChange",
        "search::list::select": "OnSearchListSelect",
        "filter::filter:change": "OnSearchFilterChange",
        "filter::sorter:change": "OnSearchSorterChange",
        "pager::change": "OnSearchPagerChange"
      }

      // Define the expend function
      const expendEvent = (v, k) => {
        let old = routing[k]
        if (!old) {
          routing[k] = v
          return
        }
        // Array to join
        if (_.isArray(v)) {
          routing[k] = _.concat(old, v)
        }
        // Another to replace
        else {
          routing[k] = v
        }
      }

      // Expend from prop
      _.forEach(this.events, expendEvent)

      // Expend from schema
      _.forEach(_.get(this.schema, "events"), expendEvent)

      // Then done
      return routing
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  methods: {
    //--------------------------------------
    async OnSearchListSelect({ currentId, checkedIds, checked }) {
      await this.dispatch("selectMeta", { currentId, checkedIds })
      this.$notify("indicate", `${checked.length} items selected`)
    },
    //--------------------------------------
    async OnSearchFilterChange(payload) {
      await this.dispatch("applyFilter", payload)
    },
    //--------------------------------------
    async OnSearchSorterChange(payload) {
      await this.dispatch("applySorter", payload)
    },
    //--------------------------------------
    async OnSearchPagerChange(payload) {
      await this.dispatch("applyPager", payload)
    },
    //--------------------------------------
    async OnMetaFieldChange(payload) {
      //console.log("Adaptor BuiltIn:OnMetaFieldChange", payload)
      await this.dispatch("updateMetaField", payload)
    },
    //--------------------------------------
    OnContentChange(payload) {
      this.dispatch("changeContent", payload)
    },
    //--------------------------------------
    async OnSaveChange() {
      await this.dispatch("saveContent")
    },
    //--------------------------------------
    //
    //  Show/Hide block
    //
    //--------------------------------------
    updateBlockShown(shown = {}) {
      //console.log("WnObjAdaptor.updateBlockShow", shown)
      let guiShown = {}
      _.forEach(shown, (v, k) => {
        if (v) {
          guiShown[k] = true
        }
      })
      this.commit("setGuiShown", guiShown)
    },
    //--------------------------------------
    showBlock(blockName) {
      let blockNames = Ti.S.splitIgnoreBlank(blockName, /[;,\s]+/g)
      //console.log(blockNames)
      let guiShown = {}
      _.forEach(blockNames, nm => {
        guiShown[nm] = true
      })
      this.commit("setGuiShown", guiShown)
    },
    //--------------------------------------
    hideBlock(blockName) {
      let blockNames = Ti.S.splitIgnoreBlank(blockName, /[;,\s]+/g)
      //console.log(blockNames)
      let guiShown = _.cloneDeep(this.guiShown) || {}
      _.forEach(blockNames, nm => {
        guiShown[nm] = false
      })
      this.commit("setGuiShown", guiShown)
    },
    //--------------------------------------
    //
    //  Utility
    //
    //--------------------------------------
    async dispatch(name, payload) {
      let path = Ti.Util.appendPath(this.moduleName, name)
      return await Ti.App(this).dispatch(path, payload)
    },
    //--------------------------------------
    commit(name, payload) {
      let path = Ti.Util.appendPath(this.moduleName, name)
      return Ti.App(this).commit(path, payload)
    },
    //--------------------------------------
    getCheckedItems(noneAsAll = false) {
      let items = this.GuiExplainContext.checkedItems;
      if (noneAsAll && _.isEmpty(items)) {
        return this.list || []
      }
      return items
    },
    //--------------------------------------
    //
    // Events / Callback
    //
    //--------------------------------------
    fire(name, payload) {
      let func = this.__on_events(name, payload)
      if (_.isFunction(func)) {
        func.apply(this, [payload])
      }
    },
    //--------------------------------------
    // For Event Bubble Dispatching
    __on_events(name, payload) {
      // ByPass
      if (/^(indicate)$/.test(name)) {
        return () => ({ stop: false })
      }
      //if (/select$/.test(name)) {
      //console.log("WnObjAdaptor.__on_events", name, payload)
      //}

      // Try routing
      let fns = _.get(this.EventRouting, name)
      if (!fns) {
        fns = this.$tiEventTryFallback(name, this.EventRouting)
      }
      let fnList = _.without(_.concat(fns), undefined, null)

      // callPath -> Function
      let funcList = [];
      for (let fn of fnList) {
        // Direct call
        if (_.isFunction(fn)) {
          funcList.push(fn)
        }
        // Gen invoking
        else if (_.isString(fn)) {
          let func = _.get(this, fn)
          if (!_.isFunction(func)) {
            func = Ti.Util.genInvoking(fns, {
              context: this.GuiExplainContext,
              dft: null,
              funcSet: this
            })
          }
          if (_.isFunction(func)) {
            funcList.push(func)
          }
        }
      }

      // Return for invoke
      if (!_.isEmpty(funcList)) {
        if (!_.isUndefined(payload)) {
          return () => {
            for (let func of funcList) {
              func.apply(this, [payload])
            }
          }
        }
        if (funcList.length > 1) {
          return () => {
            for (let func of funcList) {
              func.apply(this)
            }
          }
        }
        return funcList[0]
      }
    },
    //--------------------------------------
    // __ti_shortcut(uniqKey) {      
    // }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  created: function () {
  },
  ///////////////////////////////////////////
  mounted: async function () {
    // Update the customized actions
    let actions = this.objActions || null
    if (_.isArray(actions)) {
      this.$notify("actions:update", actions)
    }
  },
  ///////////////////////////////////////////
  beforeDestroy: function () {
  }
  ///////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-media-player.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/media/player/web-media-player.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  /////////////////////////////////////////
  props : {
    "src" : {
      type : String,
      default : undefined
    },
    "value": {
      type : [String, Number],
      default : undefined
    },
    "bgColor": {
      type : [String, Number],
      default: "#000000"
    },
    // [{text:"xxx", className:"xxx", cssStyle:""}]
    // [{src:"xxx",  className:"xxx", cssStyle:""}]
    "items" : {
      type : [Array],
      default : ()=>[]
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TheItems() {
      let list = []
      _.forEach(this.items, it => {

      })
      return list
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-combo-watcher.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/watcher/ti-combo-watcher.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data: () => ({
    $sortable: undefined,
    dragging: false,
    myTabSet: {
      /*
      _current: "TabName",
      "TabName": {filter:{..}, sorter:{..}}      
    */
    }
  }),
  ////////////////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    /*
    Watch list in Tab, 
    this is a local store key, it will store the filter/sorter
    to Local: 
    {
      "TabNameA": {
        filter: {..},
        sorter: {..}
      }
    }
    */
    "tabs": {
      type: String
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "addWatchText": {
      type: String,
      default: "i18n:add-watch"
    },
    "addWatchTip": {
      type: String,
      default: "i18n:add-watch-tip"
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    LocalKey() {
      if (_.isString(this.tabs) && this.tabs) {
        return this.tabs;
      }
    },
    //------------------------------------------------
    CurrentTab() {
      return _.get(this.myTabSet, "_current");
    },
    //------------------------------------------------
    hasCurrentTab() {
      return this.CurrentTab ? true : false;
    },
    //------------------------------------------------
    hasTabItems() {
      return !_.isEmpty(this.TabItems);
    },
    //------------------------------------------------
    TabItems() {
      let list = [];
      for (let text of _.keys(this.myTabSet)) {
        if ("_current" == text) {
          continue;
        }
        let index = list.length;
        let current = this.CurrentTab == text;
        list.push({
          index,
          text,
          current,
          className: current ? "is-current" : null
        });
      }
      return list;
    },
    //------------------------------------------------
    ActionItems() {
      return [
        {
          icon: "zmdi-filter-list",
          items: [
            {
              icon: "zmdi-alarm-plus",
              text: "i18n:add-watch-create",
              action: () => {
                this.OnCreateWatch();
              }
            },
            {
              icon: "far-edit",
              text: "i18n:rename",
              action: () => {
                this.OnRenameCurrentWatch();
              }
            },
            {
              icon: "fas-trash-alt",
              text: "i18n:add-watch-remove",
              action: () => {
                this.OnDeleteCurrentWatch();
              }
            },
            {},
            {
              icon: "fas-snowplow",
              text: "i18n:add-watch-clear",
              action: () => {
                this.OnClearAllWatch();
              }
            }
          ]
        }
      ];
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    async OnCreateWatch() {
      let key = await this.getNewWatchName();
      if (!key) {
        return;
      }
      if (this.myTabSet[key]) {
        return Ti.Alert("i18n:add-watch-exists", { type: "warn" });
      }
      let tabs = _.cloneDeep(this.myTabSet);
      tabs._current = key;
      tabs[key] = {
        filter: this.filter,
        sorter: this.sorter
      };
      this.saveToLocal(tabs);
    },
    //------------------------------------------------
    async OnRenameCurrentWatch() {
      let tabs = _.cloneDeep(this.myTabSet);
      let oldKey = tabs._current;
      if (!oldKey) {
        return;
      }
      let newKey = await this.getNewWatchName(oldKey);
      if (!newKey) {
        return;
      }
      if (this.myTabSet[newKey]) {
        return Ti.Alert("i18n:add-watch-exists", { type: "warn" });
      }
      delete tabs[oldKey];
      tabs[newKey] = {
        filter: this.filter,
        sorter: this.sorter
      };
      tabs._current = newKey;
      this.saveToLocal(tabs);
    },
    //------------------------------------------------
    async getNewWatchName(oldName) {
      let key = await Ti.Prompt("i18n:add-watch-create-tip", {
        value: oldName
      });
      key = _.trim(key);
      if (!key) {
        return;
      }
      return key;
    },
    //------------------------------------------------
    async OnSelectTab({ text }) {
      // Guard
      if (text == this.CurrentTab) {
        return;
      }
      let tabs = _.cloneDeep(this.myTabSet);
      tabs._current = text;
      this.saveToLocal(tabs);
      let data = tabs[text] || {};
      let { filter, sorter } = data;
      this.$notify("change", { filter, sorter });
    },
    //------------------------------------------------
    OnDeleteCurrentWatch() {
      // Guard
      if (!this.hasCurrentTab || !this.hasTabItems) {
        return;
      }

      // Get next Item
      let data;
      let tabs = _.cloneDeep(this.myTabSet);
      let nextTab = _.find(this.TabItems, (it) => {
        return it.text != this.CurrentTab;
      });
      if (nextTab) {
        data = tabs[nextTab.text];
        tabs._current = nextTab.text;
      } else {
        tabs._current = null;
      }

      delete tabs[this.CurrentTab];
      this.saveToLocal(tabs);

      if (data) {
        this.$notify("change", data);
      }
    },
    //------------------------------------------------
    OnClearAllWatch() {
      this.saveToLocal({});
    },
    //------------------------------------------------
    OnFilterChange({ filter, sorter }) {
      console.log("OnFilterChange", { filter, sorter });
      let tabs = _.cloneDeep(this.myTabSet);
      let key = tabs._current;
      if (key) {
        _.assign(tabs[key], {
          filter,
          sorter
        });
        this.saveToLocal(tabs);
      }
      return { stop: false };
    },
    //------------------------------------------------
    saveToLocal(data = {}) {
      // Guard
      if (!this.LocalKey) {
        return;
      }
      Ti.Storage.local.setObject(this.LocalKey, data);
      this.myTabSet = data;
    },
    //------------------------------------------------
    reloadFromLocal() {
      // Guard
      if (!this.LocalKey) {
        return;
      }
      let tabs = Ti.Storage.local.getObject(this.LocalKey);
      this.myTabSet = tabs;
    },
    //------------------------------------------------
    reload() {
      this.reloadFromLocal();
      this.tryInitSortable();
    },
    //------------------------------------------------
    switchItem(fromIndex, toIndex) {
      if (fromIndex != toIndex) {
        //console.log("switchItem", { fromIndex, toIndex });
        let keys = _.without(_.keys(this.myTabSet), "_current");
        Ti.Util.moveInArray(keys, fromIndex, toIndex);
        let tabs = { _current: this.CurrentTab };
        for (let key of keys) {
          tabs[key] = this.myTabSet[key];
        }
        this.saveToLocal(tabs);
      }
    },
    //------------------------------------------------
    initSortable() {
      this.$sortable = new Sortable(this.$refs.tabs, {
        animation: 300,
        //filter: ".as-nil-tip",
        onStart: () => {
          this.dragging = true;
        },
        onEnd: ({ oldIndex, newIndex }) => {
          this.switchItem(oldIndex, newIndex);
          _.delay(() => {
            this.dragging = false;
          }, 100);
        }
      });
    },
    //------------------------------------------------
    tryInitSortable() {
      if (_.isElement(this.$refs.tabs)) {
        if (!this.$sortable) {
          this.initSortable();
        }
      }
      // Destroy sortable: (com reused)
      else {
        if (this.$sortable) {
          this.$sortable.destroy();
          this.$sortable = undefined;
        }
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    //-----------------------------------------------
    "tabs": {
      handler: "reload",
      immediate: true
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  mounted: function () {
    this.tryInitSortable();
  },
  ///////////////////////////////////////////////////
  beforeDestroy: function () {
    if (this.$sortable) {
      this.$sortable.destroy();
      this.$sortable = undefined;
    }
  }
  ////////////////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'm-obj-children-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/obj-children/m-obj-children-actions.mjs'] = (function(){
////////////////////////////////////////////
function getKeepSearchAs(state) {
  if (state.meta && state.keepSearch) {
    return `browser-search-${state.meta.id}`
  }
}
////////////////////////////////////////////
const _M = {
  //----------------------------------------
  async updateCurrentMeta({ dispatch }, { name, value }) {
    if (name) {
      await dispatch("updateCurrentMetas", {
        [name]: value
      })
    }
  },
  //----------------------------------------
  async updateCurrentMetas({ state, commit }, data = {}) {
    //console.log("I will update current by", data)
    if (state.data && state.currentId && !_.isEmpty(data)) {
      // Get current 
      let current = _.find(state.data.list, ({ id }) => id == state.currentId)
      //console.log("find current", current)
      // Check Necessary
      if (_.isMatchWith(current, data, _.isEqual)) {
        return
      }

      // Mark field status
      _.forEach(data, (val, name) => {
        commit("setFieldStatus", { name, type: "spinning", text: "i18n:saving" })
      })

      // Save current meta field
      let json = JSON.stringify(data)
      let id = current.id
      let cmdText = `o id:${id} @update @json -cqn`
      let reo = await Wn.Sys.exec2(cmdText, { input: json, as: "json" })
      let isError = reo instanceof Error;

      // Update state
      if (!isError && !Ti.Util.isNil(reo)) {
        commit("setDataItem", reo)
      }

      _.forEach(data, (val, name) => {
        if (isError) {
          commit("setFieldStatus", {
            name,
            type: "warn",
            text: reo.message || "i18n:fail"
          })
        } else {
          commit("setFieldStatus", {
            name,
            type: "ok",
            text: "i18n:ok"
          })
          _.delay(() => { commit("clearFieldStatus", name) }, 500)
        }
      })
    }
  },
  //----------------------------------------
  saveSearchSetting({ state, commit }, { filter, sorter, pager } = {}) {
    if (filter) {
      commit("setFilter", filter)
    }
    if (sorter) {
      commit("setSorter", sorter)
    }
    if (pager) {
      commit("setPager", pager)
    }

    let keepAs = getKeepSearchAs(state)
    if (keepAs) {
      Ti.Storage.session.setObject(keepAs, {
        filter: state.filter,
        sorter: state.sorter,
        pager: {
          pageNumber: state.pageNumber,
          pageSize: state.pageSize
        }
      })
    }
  },
  //----------------------------------------
  recoverSearchSetting({ state, commit }) {
    let loc = Ti.Util.parseHref(window.location.href)
    let afo = Ti.Util.parseAnchorFilter(loc.anchor)

    let keepAs = getKeepSearchAs(state)
    if (keepAs) {
      //................................
      let {
        filter, sorter, pager
      } = Ti.Storage.session.getObject(keepAs, {})
      //................................
      if (afo) {
        filter = filter || {}
        filter.keyword = afo.keyword || filter.keyword
        filter.match = afo.match || filter.match

        if (!_.isEmpty(afo.sort)) {
          sorter = afo.sort
        }
      }
      //................................
      pager = _.assign({}, {
        pageNumber: state.pageNumber || 1,
        pageSize: state.pageSize || 1000
      }, pager)
      //................................
      if (filter) {
        //console.log("filter", filter)
        commit("setFilter", filter)
      }
      //................................
      if (sorter) {
        //console.log("sorter", sorter)
        commit("setSorter", sorter)
      }
      //................................
      if (pager) {
        commit("setPager", pager)
      }
      //................................
    }
  },
  //----------------------------------------
  async query({ dispatch }, search = {}) {
    //console.log("browser query", search)
    dispatch("saveSearchSetting", search)
    return await dispatch("reloadData")
  },
  //----------------------------------------
  async reloadData({ state, commit, dispatch }) {
    if (state.status.reloading || !state.meta) {
      return
    }
    //console.log("obj-children reloadData")
    //......................................
    let { meta } = state
    //......................................
    // Init content as null
    commit("setStatus", { reloading: true })
    //......................................
    let cmds = ['o', '@query -pager -mine -hidden']
    //
    // Setup pager
    //
    if (state.pageSize > 0) {
      let pgsz = state.pageSize
      let pn = state.pageNumber || 1
      let skip = Math.max(0, pgsz * (pn - 1))
      if (skip > 0) {
        cmds.push(`-skip ${skip}`)
      }
      cmds.push(`-limit ${pgsz}`)
    }
    //
    // Setup sort
    //
    if (state.sorter) {
      cmds.push(`-sort '${JSON.stringify(state.sorter)}'`)
    }
    //
    // Query 
    //
    let input;
    if (state.search) {
      let flt = Wn.Util.getMatchByFilter(state.filter, state.search)
      // Empty filter, force update it again
      if (_.isEmpty(flt)) {
        commit("clearFilter")
        dispatch("saveSearchSetting", { filter: state.filter })
      }
      // Add the parentID
      flt.pid = meta.id
      // Customized filter
      let filterBy = Ti.Util.explainObj(state, state.filterBy)
      if (_.isFunction(filterBy)) {
        flt = filterBy({ state }, flt) || flt
      }
      input = JSON.stringify(flt)
    }
    cmds.push('@json -cqnl')
    let data = await Wn.Sys.exec2(cmds.join(' '), { as: "json", input })

    commit("setData", data)
    //......................................
    // Just update the meta   
    commit("setStatus", { reloading: false })
  },
  //----------------------------------------
  async reloadSettings({ state, commit }) {
    let config = {}
    if (state.meta.search_settings) {
      commit("setStatus", { reloading: true })
      let oSettings = await Wn.Io.loadMeta(state.meta.search_settings);
      if (oSettings) {
        config = await Wn.Io.loadContent(oSettings, { as: "json" })
      }
      commit("setStatus", { reloading: false })
    }
    //
    // Commit to state
    //
    commit("setKeepSearch", Ti.Util.fallback(
      config.keepSearch, state.meta.keep_search, state.keepSearch, false))
    commit("setSearch", Ti.Util.fallback(config.search, state.search, {}))
    commit("setFilter", Ti.Util.fallback(config.filter, state.filter, {}))
    commit("setSorter", Ti.Util.fallback(config.sorter, state.sorter, { nm: 1 }))
    commit("setPageNumber", Ti.Util.fallback(config.pageNumber, state.pageNumber, 1))
    commit("setPageSize", Ti.Util.fallback(config.pageSize, state.pageSize, 1000))
  },
  //----------------------------------------
  async reload({ state, commit, dispatch }, meta) {
    if (state.status.reloading
      || state.status.saving) {
      return
    }
    //console.log("obj-children reload", _.get(meta, "ph"), meta)
    //......................................
    // Use the default meta
    if (_.isUndefined(meta)) {
      meta = state.meta
    }
    //......................................
    if (_.isString(meta)) {
      meta = await Wn.Io.loadMeta(meta)
    }
    else if (meta && meta.id) {
      meta = await Wn.Io.loadMetaById(meta.id)
    }
    //......................................
    // Guard
    if (!meta) {
      commit("setMeta", null)
      return
    }
    // Save current meta as config object
    commit("setMeta", meta)
    //console.log("m-obj-current.reload", meta.id)
    //......................................
    // Reload the config
    await dispatch("reloadSettings")

    // Reload from local
    dispatch("recoverSearchSetting")

    // Reload data
    await dispatch("reloadData")
    //......................................
    // Just update the meta   
    commit("setStatus", { reloading: false })
  }
  //----------------------------------------
}
return _M;;
})()
// ============================================================
// EXPORT 'leaflet-tiles-methods.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/gis/leaflet/leaflet-tiles-methods.mjs'] = (function(){
const TILES = {
  // 高德路网：
  "GAODE_ROADMAP" : {
    tmpl : "https://wprd0{s}.is.autonavi.com/appmaptile?x={x}&y={y}&z={z}&lang={lang}&size=1&scl=2&style={style}&ltype={type}",
    vars : {subdomains: "1234", style: "8", type: "11", lang: "zh_cn"},
    coords : "GCJ02"
  },
  // 高德影像：
  "GAODE_SATElITE" : {
    tmpl : "https://webst0{s}.is.autonavi.com/appmaptile?style={style}&x={x}&y={y}&z={z}",
    vars : {subdomains: "1234", style: "6"},
    coords : "GCJ02"
  },
  // 高德矢量：
  "GAODE_VECTOR" : {
    tmpl : "http://wprd0{s}.is.autonavi.com/appmaptile?lang={lang}&size=1&style={style}&x={x}&y={y}&z={z}",
    vars : {subdomains: "1234", style: "7", lang: "zh_cn"},
    coords : "GCJ02"
  },
  // 腾讯地图矢量：
  "QQ_VECTOR_NOTE" : {
    tmpl : "http://rt{s}.map.gtimg.com/realtimerender?z={z}&x={x}&y={-y}&type={type}&style={style}",
    vars : {subdomains: "0123", style: "0", type: "vector"},
    coords : "GCJ02"
  },
  // 谷歌矢量：
  "GOOGLE_VECTOR_CN" : {
    tmpl : "http://mt{s}.google.cn/vt/lyrs=m&scale=2&hl={lang}&gl=cn&x={x}&y={y}&z={z}",
    vars : {subdomains: "0123", lang: "zh-CN"},
    coords : "WGS84"
  },
  // 谷歌矢量：
  "GOOGLE_VECTOR" : {
    tmpl : "http://mt{s}.google.com/vt/lyrs=m&scale=2&hl={lang}&gl=cn&x={x}&y={y}&z={z}",
    vars : {subdomains: "0123", lang: "en-US"},
    coords : "WGS84"
  },
  // 谷歌路网：
  "GOOGLE_ROADMAP" : {
    tmpl : "https://mt{s}.google.com/vt/lyrs=h&x={x}&y={y}&z={z}",
    vars : {subdomains: "0123"},
    coords : "WGS84"
  },
  // 谷歌影像：
  "GOOGLE_SATElITE" : {
    tmpl : "http://www.google.cn/maps/vt?lyrs=s@189&gl=${lang}&x={x}&y={y}&z={z}",
    vars : {subdomains: "0123", lang: "cn"},
    coords : "WGS84"
  },
  // 谷歌影像带注记：
  "GOOGLE_SATElITE_NOTE" : {
    tmpl : "https://mt{s}.google.com/vt/lyrs=y&x={x}&y={y}&z={z}",
    vars : {subdomains: "0123"},
    coords : "WGS84"
  },
  // 谷歌地形：
  "GOOGLE_TERRAIN" : {
    tmpl : "https://mt{s}.google.com/vt/lyrs=t&x={x}&y={y}&z={z}",
    vars : {subdomains: "0123"},
    coords : "WGS84"
  },
  // 谷歌地图矢量带地形渲染：
  "GOOGLE_VECTOR_TERRAIN" : {
    tmpl : "https://mt{s}.google.com/vt/lyrs=r&x={x}&y={y}&z={z}",
    vars : {subdomains: "0123"},
    coords : "WGS84"
  },
  // 街景地图：
  "OPENSTREAT" : {
    tmpl : "https://tile.openstreetmap.org/{z}/{x}/{y}.png",
    vars : {},
    coords : "WGS84"
  },
  // CartoDB
  "CARTO" : {
    tmpl : "https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png",
    vars : {},
    coords : "WGS84"
  },
  "CARTO_ALL" : {
    tmpl : "https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png",
    vars : {},
    coords : "WGS84"
  },
  "CARTO_LABEL" : {
    tmpl : "https://{s}.basemaps.cartocdn.com/light_only_labels/{z}/{x}/{y}.png",
    vars : {},
    coords : "WGS84"
  },
  // 天地图影像：
  "TIANDITU_SATElITE" : {
    tmpl : "http://t7.tianditu.gov.cn/img_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=img&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&tk=e3b434f191257368fc43c5b011ab5911",
    vars : {},
    coords : "WGS84"
  },
  // 天地图影像注记：
  "TIANDITU_SATElITE_NOTE" : {
    tmpl : "http://t7.tianditu.gov.cn/cia_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=cia&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&tk=e3b434f191257368fc43c5b011ab5911",
    vars : {},
    coords : "WGS84"
  },
  // 天地矢量：
  "TIANDITU_VECTOR" : {
    tmpl : "http://t7.tianditu.gov.cn/vec_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=vec&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&tk=e3b434f191257368fc43c5b011ab5911",
    vars : {},
    coords : "WGS84"
  },
  // 天地矢量注记：
  "TIANDITU_VECTOR_NOTE" : {
    tmpl : "http://t7.tianditu.gov.cn/cva_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=cva&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&tk=e3b434f191257368fc43c5b011ab5911",
    vars : {},
    coords : "WGS84"
  },
  // 天地图地形：
  "TIANDITU_TERRAIN" : {
    tmpl : "http://t7.tianditu.gov.cn/ter_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=ter&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&tk=e3b434f191257368fc43c5b011ab5911",
    vars : {},
    coords : "WGS84"
  },
  // 天地图地形注记：
  "TIANDITU_TERRAIN_NOTE" : {
    tmpl : "http://t7.tianditu.gov.cn/cta_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=cta&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&tk=e3b434f191257368fc43c5b011ab5911",
    vars : {},
    coords : "WGS84"
  }
}
////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  getTileCoords(type) {
    return _.get(TILES[type], "coords")
  },
  createTileLayer(type, vars) {
    let it = TILES[type]
    if(!it) {
      throw `Unknown tile layer type '${type}'`
    }
    let options = _.assign({}, it.vars, vars)
    return L.tileLayer(it.tmpl, options)
  }
}
////////////////////////////////////////////
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-list-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/list/ti-list-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  "iconBy": {
    type: [String, Function],
    default: null
  },
  "indentBy": {
    type: [String, Function],
    default: null
  },
  "itemClassName": undefined,
  "display": {
    type: [Object, String, Array],
    default: () => ({
      key: "..",
      comType: "ti-label"
    })
  },
  "border": {
    type: Boolean,
    default: true
  },
  "autoScrollIntoView": {
    type: Boolean,
    default: true
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'rich-tinymce-obj-resizing.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/rich-tinymce-obj-resizing.mjs'] = (function(){
///////////////////////////////////////////////////
function CreateHandler($body, name) {
  return Ti.Dom.createElement({
    $p : $body,
    tagName : "div",
    className : `ti-tinymce-obj-resize-handler at-${name}`,
    attrs : {
      "hdl-name" : name
    }
  })
}
///////////////////////////////////////////////////
function UpdateHandlerStyle(rect, {NW,NE,SW,SE}) {
  NW.style.left = rect.left+'px'
  NE.style.left = rect.right+'px'
  SW.style.left = rect.left+'px'
  SE.style.left = rect.right+'px'

  NW.style.top = rect.top+'px'
  NE.style.top = rect.top+'px'
  SW.style.top = rect.bottom+'px'
  SE.style.top = rect.bottom+'px'
}
///////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------------------
  redrawResizeHandler(el) {
    let editor = this.$editor
    // Remove old handler
    let $hs = editor.$('.ti-tinymce-obj-resize-handler')
    $hs.remove()

    // Guard
    if(!_.isElement(el) || !el.getAttribute("data-mce-selected")){
      return
    }

    // Get resize target
    let resizeMode = el.getAttribute("ti-tinymce-obj-resizable")
    // Guard
    if("style" != resizeMode) {
      return
    }

    // Find resize obj
    let $ta = Ti.Dom.find("[ti-resize-target]", el) || el

    //console.log("redrawResizeHandler", el)
    // Create rect
    let $body = editor.$('body')[0]
    if(el == $body) {
      return
    }

    // Prepare two window obj
    const winIn  = $body.ownerDocument.defaultView
    const winOut =  this.$el.ownerDocument.defaultView

    // Count measure
    let rect = Ti.Rects.createBy($ta)
    rect.y += winIn.scrollY
    rect.updateBy("xywh")

    

    // Draw new resize handler
    let hdls = {}
    hdls.NW = CreateHandler($body, "nw")
    hdls.NE = CreateHandler($body, "ne")
    hdls.SW = CreateHandler($body, "sw")
    hdls.SE = CreateHandler($body, "se")
    UpdateHandlerStyle(rect, hdls)

    // Current handler
    let currentHdl = {}

    const OnMouseMove = (evt)=>{
      let {startX, startY, width, height} = currentHdl
      let {pageX, pageY} = evt
      let offX = Math.round(pageX - startX)
      let offY = Math.round(pageY - startY)
      let w = Math.max(10, width  + offX)
      let h = Math.max(10, height + offY)

      // Keep scale 
      if(evt.shiftKey) {
        h =  Math.round(w / currentHdl.scale)
      }

      //console.log({offX,offY,w, h}, target)
      $ta.style.width  = w + 'px';
      $ta.style.height = h + 'px';
      // rect.width  = w
      // rect.height = h
      // rect.updateBy()
      let rect = Ti.Rects.createBy($ta)
      rect.y += winIn.scrollY
      rect.updateBy("xywh")
      UpdateHandlerStyle(rect, hdls)
    }

    // Prepare the callback functions
    const OnMouseUp = ()=>{
      //console.log("mouseup")

      // Remove event handler
      winIn.removeEventListener("mousemove", OnMouseMove, true)
      winIn.removeEventListener("mouseup", OnMouseUp, true)
      winOut.removeEventListener("mouseup", OnMouseUp, true)

      $ta.removeAttribute("data-mce-style");

      _.delay(()=>{
        $body.removeAttribute("ti-tinymce-no-select")
        $body.contentEditable = true
        this.syncContent()
      }, 100)
    }

    // Start
    const OnMouseDown = (evt)=>{
      evt.stopPropagation()
      currentHdl.target = evt.target
      currentHdl.name = evt.target.getAttribute("hdl-name")
      let hR = Ti.Rects.createBy(evt.target)
      currentHdl.startX = hR.x
      currentHdl.startY = hR.y + winIn.scrollY
      currentHdl.width  = rect.width
      currentHdl.height = rect.height
      currentHdl.scale = rect.width / rect.height
      // Stop selection
      $body.setAttribute("ti-tinymce-no-select", true)
      $body.contentEditable = false
      //console.log("mousedown", evt)
      // Watch the mouse up
      winIn.addEventListener("mousemove", OnMouseMove, true)
      winIn.addEventListener("mouseup", OnMouseUp, true)
      winOut.addEventListener("mouseup", OnMouseUp, true)
    }

    // Attache events
    hdls.NW.addEventListener("mousedown", OnMouseDown, true)
    hdls.NE.addEventListener("mousedown", OnMouseDown, true)
    hdls.SW.addEventListener("mousedown", OnMouseDown, true)
    hdls.SE.addEventListener("mousedown", OnMouseDown, true)
    // Add event listener
  }
  //-----------------------------------------------
  //-----------------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-combo-pair-auto-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/pair-auto/ti-combo-pair-auto-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "value": {
    type: Object,
    default: undefined
  },
  "group" : {
    type : Boolean,
    default : true
  },
  "fields" : {
    type : Object,
    default : ()=>({})
  },
  "onlyFields" : {
    type: Boolean,
    default: true
  },
  // merge each time data change
  "fixed": {
    type: Object,
    default: undefined
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "defaultComType" : {
    type : String,
    default : "ti-input"
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "spacing" : {
    type : String,
    default : undefined
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width" : {
    type : [Number, String],
    default : undefined
  },
  "height" : {
    type : [Number, String],
    default : undefined
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-input-tags-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/tags/ti-input-tags-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "dict": {
    type: [String, Ti.Dict],
    default: null
  },
  "inputValue": null,
  // +1 from the begin
  // -1 from the last
  "maxValueLen": {
    type: Number,
    default: 0
  },
  "valueUnique": {
    type: Boolean,
    default: true
  },
  "tagOptions": {
    type: [Array, Function],
    default: () => []
  },
  "tagMapping": {
    type: Object,
    default: undefined
  },
  "tagExplainMapping": {
    type: Boolean,
    default: false
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "canInput": {
    type: Boolean,
    default: true
  },
  "cancelTagBubble": {
    type: Boolean,
    default: false
  },
  "tagKeyBy": {
    type: [String, Function],
    default: "value"
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "tagItemIconBy": {
    type: [String, Function],
    default: undefined
  },
  "tagItemDefaultIcon": {
    type: String,
    default: null
  },
  "tagOptionDefaultIcon": {
    type: String,
    default: undefined
  }
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-calendar.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/calendar/ti-calendar.mjs'] = (function(){
///////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data: ()=>({
    "view_date" : null
  }),
  /////////////////////////////////////////
  props : {
    "value" : {
      type : [String, Number, Date, Array],
      default : null
    },
    /***
     * The value represent a **Date Range**.
     * It must be a Array with two elements, first one is begin date
     * of the range, the last one is the end of the range.
     * Both the two date is includsive of the range.
     * 
     * If the value passed in is not array, It will be taken as 
     * the begin date
     */
    "range" : {
      type : Boolean,
      default : false
    },
    // Which day is first day
    //  0 - Sunday
    //  1 - Monday
    "firstDayInWeek" : {
      type : [Number, String],  // 0, or "Sun" or "Sunday"
      default : 0
    },
    /***
     * How to decide the matrix end date
     * 
     * - "monthly" : show whole month
     * - "weekly"  : show few weeks defined by `matrixCount`
     */ 
    "matrixMode" : {
      type : String,
      default : "monthly"
    },
    /***
     * Define the matrix block count by `matrixMode`
     * 
     * - "monthly" - how many calenars should be shown in same time
     * - "weekly"  - how many week should be shown in block
     */
    "matrixCount" : {
      type : Number,
      default : 1
    },
    // true : can write time directly
    "monthEditable" : {
      type : Boolean,
      default : true
    },
    "monthFormat" : {
      type : String,
      default : "yyyy-MM-dd" 
    },
    "beginYear" : {
      type : [Number, String],
      default : undefined
    },
    "endYear" : {
      type : [Number, String],
      default : undefined
    }
  },
  //////////////////////////////////////////
  watch : {
    // If the value changed outside,
    // and if the value our-of-view
    // It should auto switch the viewDate
    "value" : function(newVal, oldVal) {
      if(!_.isEmpty(newVal) && !_.isEqual(newVal, oldVal)) {
        let [v0] = [].concat(newVal)
        let dt = Ti.Types.toDate(v0)
        let ms = dt.getTime()
        if(!_.inRange(ms, ...this.theMatrixRangeInMs)) {
          this.view_date = null
        }
      }
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    switcherClass() {
      if(this.isMonthly && this.matrixCount>1) {
        return "sz-double"
      }
    },
    //--------------------------------------
    isMonthly() {
      return "monthly" == this.matrixMode
    },
    isWeekly() {
      return "weekly" == this.matrixMode
    },
    //--------------------------------------
    today() {
      return new Date()
    },
    todayName() {
      return Ti.Types.formatDate(this.today, "yyyy-MM-dd")
    },
    //--------------------------------------
    theDate() {
      if(_.isArray(this.value)) {
        if(this.value.length > 0) {
          return Ti.Types.toDate(this.value[0])
        }
        return null
      }
      return Ti.Types.toDate(this.value, null)
    },
    //--------------------------------------
    theRangeInMs() {
      // Move to 00:00:00
      let dt0 = new Date(this.theDate)
      // Define the dt1
      let dt1;
      if(_.isArray(this.value) && this.value.length > 1) {
        dt1 = Ti.Types.toDate(this.value[1])
      }
      // The End of the Day
      else {
        dt1 = new Date(dt0)
      }
      // Make the range
      let msRange = [dt0.getTime(), dt1.getTime()].sort()

      // dt0 start of the day
      dt0 = Ti.DateTime.setTime(new Date(msRange[0]))
      // dt1 end of the day
      dt1 = Ti.DateTime.setDayLastTime(new Date(msRange[1]))

      // rebuild the range
      return [dt0.getTime(), dt1.getTime()]
    },
    //--------------------------------------
    theRangeInText() {
      return Ti.Types.formatDate(this.theRangeInMs, "yyyy-MM-dd")
    },
    //--------------------------------------
    theRangeBeginDate() {
      return new Date(this.theRangeInMs[0])
    },
    //--------------------------------------
    theRangeEndDate() {
      return new Date(this.theRangeInMs[1])
    },
    //--------------------------------------
    theMatrixRangeInMs() {
      let c0 = this.dateMatrixList[0][0][0]
      let i = this.dateMatrixList.length - 1
      let y = this.dateMatrixList[i].length - 1
      let x = this.dateMatrixList[i][y].length - 1
      let c1 = this.dateMatrixList[i][y][x]

      let dt0 = new Date(c0.raw)
      let dt1 = new Date(c1.raw)
      Ti.DateTime.setTime(dt0)
      Ti.DateTime.setDayLastTime(dt1)
      return [dt0.getTime(), dt1.getTime()]
    },
    //--------------------------------------
    theMatrixRange() {
      let dt0 = new Date(this.theMatrixRangeInMs[0])
      let dt1 = new Date(this.theMatrixRangeInMs[1])
      return [dt0, dt1]
    },
    //--------------------------------------
    theViewRange() {
      let i = this.dateMatrixList.length - 1
      let y = this.dateMatrixList[i].length - 1
      let x = this.dateMatrixList[i][y].length - 1
      let c1 = this.dateMatrixList[i][y][x]
      while(c1.type!="in-month" && x>0) {
        c1 = this.dateMatrixList[i][y][--x]
      }

      let dt0 = new Date(this.theViewDate)
      let dt1 = new Date(c1.raw)
      Ti.DateTime.setTime(dt0)
      Ti.DateTime.setDayLastTime(dt1)
      return [dt0, dt1]
    },
    //--------------------------------------
    theViewRangeText() {
      let dt0 = this.theViewRange[0]
      if(this.isMonthly && this.matrixCount > 1) {
        let dt1 = this.theViewRange[1]
        let yy0 = dt0.getFullYear()
        let MM0 = dt0.getMonth()
        let yy1 = dt1.getFullYear()
        let MM1 = dt1.getMonth()
        let abbr0 = Ti.DateTime.getMonthAbbr(MM0)
        let abbr1 = Ti.DateTime.getMonthAbbr(MM1)
        let MT0 = Ti.I18n.get(`cal.abbr.${abbr0}`)
        let MT1 = Ti.I18n.get(`cal.abbr.${abbr1}`)

        MM0++;  MM1++;  // Month change to 1 base

        let vars = {
          yy0, yy1,
          MM0, MM1,
          MT0, MT1
        }
        // Beyound year
        if(yy0 != yy1) {
          return Ti.I18n.getf("cal.m-range-beyond-years", vars)
        }
        // Beyound month
        if(MM0 != MM1) {
          return Ti.I18n.getf("cal.m-range-beyond-months", vars)
        }
      }
      return Ti.Types.formatDate(dt0, this.monthFormat)
    },
    //--------------------------------------
    theDateName() {
      return Ti.Types.formatDate(this.theDate, "yyyy-MM-dd")
    },
    //--------------------------------------
    theViewDate() {
      return this.view_date || this.theDate || new Date()
    },
    //--------------------------------------
    theViewYear() {
      return this.theViewDate.getFullYear()
    },
    //--------------------------------------
    theViewMonth() {
      return this.theViewDate.getMonth()
    },
    theViewMonthAbbr() {
      return Ti.DateTime.getMonthAbbr(this.theViewMonth)
    },
    //--------------------------------------
    weekTitles() {
      let day = this.firstDayInWeek
      // Week day index
      if(_.isNumber(day)) {
        day = _.clamp(day, 0, 6)
      }
      // Week day abbr or name
      else if(_.isString(day)) {
        let dayName = _.lowerCase(day)
        day = Ti.DateTime.getWeekDayValue(dayName, 0)
      }
      // Join list
      let list = []
      for(let i=0; i<7; i++) {
        list.push({
          day,
          title : Ti.I18n.get(["cal","week",day])
        })
        if(++day >=7 ) {
          day = 0
        }
      }
      // Return it
      return list
    },
    //--------------------------------------
    weekFirstDayValue() {
      if(_.isString(this.firstDayInWeek)) {
        return Ti.DateTime.getWeekDayValue(this.firstDayInWeek, 0)
      }
      return _.clamp(this.firstDayInWeek, 0, 6)
    },
    //--------------------------------------
    dateMatrixList() {
      let beginDate = new Date(this.theViewDate)
      //............................
      let list = []
      let theYear  = this.theViewYear
      let theMonth = this.theViewMonth
      // Monthly: may create multi-matrix
      if(this.isMonthly) {
        for(let i=0; i<this.matrixCount; i++) {
          let {matrix, lastDate} = this.createMatrix(
            beginDate, theYear, theMonth
          )
          list.push(matrix)
          beginDate = Ti.DateTime.moveDate(new Date(lastDate), 1)
          theMonth ++
          if(theMonth >= 12) {
            theMonth = 0
            theYear ++
          }
        }
      }
      // Weekly
      else {
        let {matrix} = this.createMatrix(beginDate)
        list.push(matrix)
      }
      return list
      //............................
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    /***
     * Create a date matrix
     */
    createMatrix(beginDate, theYear, theMonth) {
      // Move to the first date in month
      if(this.isMonthly) {
        beginDate.setDate(1)
      }
      //............................
      // Move the first day of week
      let wfdv = this.weekFirstDayValue
      while(beginDate.getDay() > wfdv) {
        Ti.DateTime.moveDate(beginDate, -1)
      }
      while(beginDate.getDay() < wfdv) {
        Ti.DateTime.moveDate(beginDate, 1)
      }
      //............................
      // Build the matrix
      let len = 7
      let y = 0
      let matrix = []
      let lastDate = null
      while(true) {
        let row = []
        for(let x=0; x<len; x++) {
          let index = y*len + x
          lastDate = Ti.DateTime.createDate(beginDate, index)
          let month = lastDate.getMonth()
          let date  = lastDate.getDate()
          let name  = Ti.Types.formatDate(lastDate, "yyyy-MM-dd")
          let isSelected = false
          // Range: match begin/end date
          if(this.range) {
            isSelected = _.inRange(lastDate.getTime(), ...this.theRangeInMs)
          }
          // Single: match the date
          else {
            isSelected = name == this.theDateName
          }
          let type = {
            "is-prev"  : month < theMonth,
            "is-next"  : month > theMonth,
            "in-month" : month == theMonth,
            "is-today" : this.todayName == name,
            "is-selected" : isSelected
          }
          // Eval displayText in cell
          // The first day of month should the Abbr
          let text = ""+date
          if(1 == date && (
              (this.isMonthly && this.matrixCount>1)
              || this.isWeekly
          )) {
            let abbr = Ti.DateTime.getMonthAbbr(month)
            text = Ti.I18n.get(`cal.abbr.${abbr}`)
          }
          // Join to the row
          row.push({
            x, y, index, type, name, text,
            year  : lastDate.getFullYear(),
            month,
            day   : lastDate.getDay(),
            date  : lastDate.getDate(),
            raw   : lastDate
          })
        }
        // Move to next row
        y++
        // End by week count
        if(this.isWeekly) {
          let count = _.clamp(this.matrixCount, 1, 100)
          if(y>count)
            break
        }
        // End by next month
        else if(this.isMonthly) {
          if((
              row[0].year  == theYear &&
              row[0].month  > theMonth
            ) || row[0].year > theYear) {
            break
          }
        }
        // Invalid mode, break now
        else {
          break
        }
        // Join to matrix
        matrix.push(row)
      }
      //............................
      return {
        matrix, lastDate
      }
    },
    //--------------------------------------
    gotoToday() {
      this.view_date = new Date()
    },
    //--------------------------------------
    gotoMatrix(offset=0) {
      let cd = this.theViewDate
      let dt = new Date(cd.getFullYear(), cd.getMonth(), cd.getDate())

      // Monthly
      if(this.isMonthly) {
        Ti.DateTime.moveMonth(dt, offset)
      }
      // Weekly
      else if(this.isWeekly) {
        Ti.DateTime.moveDate(dt, offset*7*this.matrixCount)
      }
      // Invalid mode
      else {
        return
      }

      // Switch the current view
      this.view_date = dt
    },
    //--------------------------------------
    onMonthChanged(month) {
      let dt = Ti.Types.toDate(month)
      this.view_date = dt
    },
    //--------------------------------------
    onClickCell(cell) {
      // Range
      if(this.range) {
        // If array ...
        if(_.isArray(this.value)) {
          //console.log(this.value)
          // Finish the range
          if(this.value.length == 1) {
            let msRange = [cell.raw.getTime(), this.theDate.getTime()].sort()
            let dt0 = Ti.Types.toDate(msRange[0])
            let dt1 = Ti.Types.toDate(msRange[1])
            this.$notify("change", [dt0, dt1])
          }
          // Start a new range
          else {
            this.$notify("change", [cell.raw])
          }
        }
        // Has Value
        else {
          this.$notify("change", [cell.raw])
        }
      }
      // Single value
      else {
        this.$notify("change", cell.raw)
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  mounted : function() {
    this.view_date = this.theDate || new Date()
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'org-icons.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/organization/org-icons.mjs'] = (function(){
/////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////
  computed: {
    //-----------------------------------------------
    OrgOptionIcons() {
      return [
        "fas-globe",
        "fas-globe-asia",
        "fas-globe-africa",
        "fas-globe-europe",
        "fas-globe-americas",
        "fas-atlas",
        "fas-splotch",
        "fas-building",
        "far-building",
        "fas-church",
        "fas-city",
        "fas-dungeon",
        "fas-gopuram",
        "fas-home",
        "fas-hospital",
        "far-hospital",
        "fas-hospital-alt",
        "fas-hotel",
        "fas-house-damage",
        "fas-industry",
        "fas-kaaba",
        "fas-landmark",
        "fas-monument",
        "fas-mosque",
        "fas-place-of-worship",
        "fas-school",
        "fas-store",
        "fas-store-alt",
        "fas-synagogue",
        "fas-torii-gate",
        "fas-university",
        "fas-vihara",
        "fas-warehouse",
        "fas-store-alt-slash",
        "fas-store-slash",
        "fas-archway",
        "fas-campground",
        "fas-clinic-medical",
        "fas-hospital-user",
        "fas-igloo",
        "fas-briefcase",
        "fas-briefcase-medical",
        "fas-briefcase-medical",
        "fas-gavel",
        "fas-suitcase-rolling",
        "fas-people-arrows",
        "fas-people-carry",
        "fas-person-booth",
        "fas-baby",
        "fas-blind",
        "fas-female",
        "fas-hiking",
        "fas-male",
        "fas-running",
        "fas-skating",
        "fas-skiing",
        "fas-skiing-nordic",
        "fas-snowboarding",
        "fas-swimmer",
        "fas-universal-access",
        "fas-user",
        "far-user",
        "fas-user-alt",
        "fas-user-alt-slash",
        "fas-user-check",
        "fas-user-circle",
        "far-user-circle",
        "fas-user-clock",
        "fas-user-cog",
        "fas-user-edit",
        "fas-user-friends",
        "fas-user-graduate",
        "fas-user-injured",
        "fas-user-lock",
        "fas-user-secret",
        "fas-user-shield",
        "fas-user-tag",
        "fas-users",
        "fas-users-cog",
        "fas-walking",
        "fas-wheelchair",
        "fas-address-book",
        "far-address-book",
        "fas-address-card",
        "far-address-card",
        "fas-bed",
        "fas-biking",
        "fas-chalkboard-teacher",
        "fas-child",
        "fas-frown",
        "far-frown",
        "fas-id-badge",
        "far-id-badge",
        "fas-id-card",
        "far-id-card",
        "fas-id-card-alt",
        "fas-meh",
        "far-meh",
        "fas-portrait",
        "fas-pray",
        "fas-smile",
        "far-smile",
        "fas-street-view",
        "fas-user-astronaut",
        "fas-user-md",
        "fas-user-ninja",
        "fas-user-nurse",
        "fas-user-plus",
        "fas-user-tie",
        /*---------------*/
        "fas-money-bill",
        "fas-coins",
        "fas-piggy-bank",
        "fas-comment-dollar",
        "fas-credit-card",
        "far-credit-card",
        "fas-wallet",
        "fas-user-edit",
        "fas-keyboard",
        "fas-newspaper",
        "fas-edit",
        "fas-user-edit",
        "fas-glasses",
        "fas-icons",
        "fas-tools",
        "fas-trash",
        "fas-pen",
        "fas-pen-nib",
        "fas-pencil-alt",
        "fas-pencil-ruler",
        "fas-ruler-combined",
        "fas-spray-can",
        "fas-swatchbook",
        "fas-ruler",
        "fas-tape",
        "fas-calculator",
        "fas-camera",
        "fas-brush",
        "fas-fill-drip",
        "fas-music",
        "fas-layer-group",
        "fas-magic",
        "fas-paint-brush",
        "fas-paint-roller",
        "fas-stamp"
      ]
    }
    //-----------------------------------------------
  }
  ///////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-droptree.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/droptree/ti-droptree.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  props : {
    "multi" : {
      type : Boolean,
      default : false
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    ComType() {
      return this.multi
        ? "ti-combo-multi-input"
        : "ti-combo-input"
    }
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'tiny-wn-image.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/tiny-wn-image.mjs'] = (function(){
////////////////////////////////////////////////////
async function pickImageAndInsertToDoc(editor, {
  base = "~", 
  autoCreate=null, 
  fallbackPath,
}) {
  // Check base
  if(_.isPlainObject(autoCreate)) {
    let oBase = await Wn.Io.loadMeta(base)
    if(!oBase) {
      let pph = Ti.Util.getParentPath(base)
      let dnm = Ti.Util.getFileName(base)
      let baseMeta = _.assign({}, autoCreate, {
        race: 'DIR', nm : dnm
      })
      let baseJson = JSON.stringify(baseMeta)
      let cmdText = `o @create '${baseJson}' -p ${pph} -auto @json -cqn`
      oBase = await Wn.Sys.exec2(cmdText, {as:"json"})
    }
    base = oBase
  }

  // Show dialog
  let reo = await Wn.OpenObjSelector(base, {
    icon  : "fas-image",
    title : "i18n:img-insert",
    position : "top",
    width  : "95%",
    height : "95%",
    multi : false,
    fallbackPath
  })

  // User canceled
  if(_.isEmpty(reo)) {
    return
  }

  // Do insert image
  editor.execCommand("InsertImage", editor, reo)
}
////////////////////////////////////////////////////
function CmdInsertImage(editor, oImgs) {
  if(_.isEmpty(oImgs))
    return
  
  // Prepare range
  let rng = editor.selection.getRng()
  
  // Create image fragments
  let $doc = rng.commonAncestorContainer.ownerDocument
  let frag = new DocumentFragment()
  for(let oImg of oImgs) {
    let $img = Ti.Dom.createElement({
      tagName : "img",
      className : "wn-media as-image",
      attrs : {
        src : `/o/content?str=id:${oImg.id}`,
        "wn-obj-id" : oImg.id,
        "wn-obj-sha1" : oImg.sha1,
        "wn-obj-mime" : oImg.mime,
        "wn-obj-tp"   : oImg.tp,
        "wn-obj-width" : oImg.width,
        "wn-obj-height" : oImg.height
      }
    }, $doc)
    frag.appendChild($img)
  }
  
  // Remove content
  if(!rng.collapsed) {
    rng.deleteContents()
  }

  // Insert fragments
  rng.insertNode(frag)

}
////////////////////////////////////////////////////
function PastImageData(editor, content) {

}
////////////////////////////////////////////////////
function GetCurrentImageElement(editor) {
  let sel = editor.selection
  let $img = sel.getNode()
  // Guard
  if("IMG" != $img.tagName) {
    return
  }
  return $img
}
////////////////////////////////////////////////////
function CmdSetImageSize(editor, {width=null, height=null}={}) {
  let $img = GetCurrentImageElement(editor)
  // Guard
  if(!_.isElement($img)) {
    return
  }
  // Clear the attribute
  Ti.Dom.setAttrs($img, {width, height})
  // Force sync content
  editor.__rich_tinymce_com.syncContent()
}
////////////////////////////////////////////////////
function CmdSetImageStyle(editor, css={}) {
  let $img = GetCurrentImageElement(editor)
  // Guard
  if(!_.isElement($img)) {
    return
  }
  // Clear float
  Ti.Dom.updateStyle($img, css)
  // Force sync content
  editor.__rich_tinymce_com.syncContent()
}
////////////////////////////////////////////////////
async function CmdShowImageProp(editor, settings) {
  let $img = GetCurrentImageElement(editor)
  // Guard
  if(!_.isElement($img)) {
    return
  }
  // Get margin style
  let stl = Ti.Dom.getStyle($img, /^(float|(margin-(left|right|top|bottom)))$/)
  stl.float = stl.float || "none"
  //console.log("stl", stl)
  // Gen the properties
  let data = {
    oid    : $img.getAttribute("wn-obj-id"),
    src    : $img.getAttribute("src"),
    width  : $img.getAttribute("width")  || undefined,
    height : $img.getAttribute("height") || undefined,
    displayWidth  : $img.width,
    displayHeight : $img.height,
    naturalWidth  : $img.naturalWidth,
    naturalHeight : $img.naturalHeight,
    ... stl
  }

  //console.log(data)
  // Show dialog
  let reo = await Ti.App.Open({
    icon  : "fas-image",
    title : "i18n:hmk-w-edit-img-prop",
    width  : "37%",
    height : "100%",
    position : "right",
    closer : "left",
    clickMaskToClose : true,
    result : data,
    model : {prop:"data", event:"change"},
    comType : "TiForm",
    comConf : {
      spacing : "tiny",
      fields : [{
          title : "i18n:hmk-w-edit-img-pic",
          name  : "oid",
          comType : "WnObjPicker",
          comConf : {
            valueType : "id",
            base : settings.base,
            titleEditable : false
          }
        }, {
          title : "i18n:hmk-size",
          fields: [{
            title : "i18n:width",
            name  : "width",
            comType : "TiInput",
            comConf : {
              placeholder: `${data.displayWidth}/${data.naturalWidth}px`
            }
          }, {
            title : "i18n:height",
            name  : "height",
            comType : "TiInput",
            comConf : {
              placeholder: `${data.displayHeight}/${data.naturalHeight}px`
            }
          }]
        }, {
          title : "i18n:hmk-float",
          name  : "float",
          comType : "TiSwitcher",
          comConf : {
            allowEmpty : false,
            options : [
              {
                icon:"fas-align-justify",
                value: "none",
                text: "i18n:hmk-float-none"
              },
              {
                icon:"fas-align-left",
                value: "left",
                text: "i18n:hmk-float-left"
              },
              {
                icon:"fas-align-right",
                value: "right",
                text: "i18n:hmk-float-right"
              }
            ]
          }
        }, {
          title : "i18n:hmk-w-edit-img-margin",
          fields : [{
              title : "i18n:top",
              name  : "marginTop",
              comType : "TiInput",
              comConf : {
                placeholder : "0px"
              }
            }, {
              title : "i18n:right",
              name  : "marginRight",
              comType : "TiInput",
              comConf : {
                placeholder : "0px"
              }
            }, {
              title : "i18n:bottom",
              name  : "marginBottom",
              comType : "TiInput",
              comConf : {
                placeholder : "0px"
              }
            }, {
              title : "i18n:left",
              name  : "marginLeft",
              comType : "TiInput",
              comConf : {
                placeholder : "0px"
              }
            }]
        }]
    },
    components : [
      "@com:wn/obj/picker"
    ]
  })

  // 用户取消
  if(!reo)
    return

  // Update image
  //................................................
  // src
  if(data.oid != reo.oid) {
    // Remove Image
    if(!reo.oid) {
      Ti.Dom.remove($img)
      return
    }
    // 读取对象详情
    let oImg = await Wn.Io.loadMetaById(reo.oid)
    // Switch image src
    $img.src = `/o/content?str=id:${reo.oid}`
    $img.setAttribute("wn-obj-id", oImg.id)
    $img.setAttribute("wn-obj-sha1", oImg.sha1)
    $img.setAttribute("wn-obj-mime", oImg.mime)
    $img.setAttribute("wn-obj-tp", oImg.tp)
  }
  //................................................
  // Measure
  const _img_size = function(attrName, sz, oldSize) {
    if(oldSize == sz)
      return
    if(!sz) {
      $img.removeAttribute(attrName)
    } else {
      $img.setAttribute(attrName, sz)
    }
  }
  //................................................
  // Width/height
  _img_size("width",  reo.width,  data.width)
  _img_size("height", reo.height, data.height)
  //................................................
  // Styling
  const _img_style = function(styName, v, oldValue) {
    if(oldValue == v)
      return
    if(!v || "none" == v) {
      $img.style[styName] = ""
    } else if(_.isNumber(v)) {
      $img.style[styName] = `${v}px`
    } else {
      $img.style[styName] = v
    }
  }
  //................................................
  _img_style("float", reo.float, data.float)
  _img_style("marginLeft",   reo.marginLeft,   data.marginLeft)
  _img_style("marginRight",  reo.marginRight,  data.marginRight)
  _img_style("marginTop",    reo.marginTop,    data.marginTop)
  _img_style("marginBottom", reo.marginBottom, data.marginBottom)
  //................................................
  // clean cache
  $img.removeAttribute("data-mce-src")
  $img.removeAttribute("data-mce-style")
  //................................................
  // Force sync content
  editor.__rich_tinymce_com.syncContent()
}
////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  name : "wn-image",
  //------------------------------------------------
  init : function(conf={}) {
  },
  //------------------------------------------------
  setup : function(editor, url){
    //..............................................
    let settings = _.assign({
        base : "~"
      }, _.get(editor.settings, "wn_image_config"));
    //console.log("setup", editor.settings)
    //..............................................
    // Register plugin command
    editor.addCommand("InsertImage",   CmdInsertImage)
    editor.addCommand("SetImageSize",  CmdSetImageSize)
    editor.addCommand("SetImageStyle", CmdSetImageStyle)
    editor.addCommand("ShowImageProp", CmdShowImageProp)
    //..............................................
    // Register toolbar actions
    editor.ui.registry.addButton("WnImgPick", {
      icon : "image",
      tooltip : Ti.I18n.text("i18n:img-insert"),
      onAction : function(menuBtn) {
        pickImageAndInsertToDoc(editor, settings)
      },
    })
    //..............................................
    editor.ui.registry.addMenuItem("WnImgClrSize", {
      icon : "edit-image",
      text : Ti.I18n.text("i18n:hmk-w-edit-img-clrsz"),
      onAction() {
        editor.execCommand("SetImageSize", editor)
      }
    })
    //..............................................
    editor.ui.registry.addMenuItem("WnImgAutoFitWidth", {
      text : Ti.I18n.text("i18n:hmk-autofit"),
      onAction() {
        editor.execCommand("SetImageSize", editor, {width:"100%"})
      }
    })
    //..............................................
    editor.ui.registry.addNestedMenuItem('WnImgFloat', {
      text: Ti.I18n.text('i18n:hmk-css-float'),
      getSubmenuItems: function () {
        return [{
          type : "menuitem",
          icon : "align-left",
          text : Ti.I18n.text("i18n:hmk-float-left"),
          onAction() {
            editor.execCommand("SetImageStyle", editor, {float:"left"})
          }
        }, {
          type : "menuitem",
          icon : "align-right",
          text : Ti.I18n.text("i18n:hmk-float-right"),
          onAction() {
            editor.execCommand("SetImageStyle", editor, {float:"right"})
          }
        }, {
          type : "menuitem",
          text : Ti.I18n.text("i18n:hmk-float-clear"),
          onAction() {
            editor.execCommand("SetImageStyle", editor, {float:""})
          }
        }];
      }
    });
    //..............................................
    editor.ui.registry.addNestedMenuItem('WnImgMargin', {
      text : Ti.I18n.text("i18n:hmk-w-edit-img-margin"),
      getSubmenuItems: function () {
        const __check_margin_size = function(api, expectSize) {
          let $img = GetCurrentImageElement(editor)
          let state = true
          if($img) {
            let sz = $img.style.marginLeft || $img.style.marginRight
            state = expectSize == sz
          }
          api.setActive(state);
          return function() {};
        }
        return [{
          type : "togglemenuitem",
          text : Ti.I18n.text("i18n:hmk-margin-sm"),
          onAction() {
            editor.execCommand("SetImageStyle", editor, {margin:"1em"})
          },
          onSetup: function(api) {
            return __check_margin_size(api, '1em')
          }
        }, {
          type : "togglemenuitem",
          text : Ti.I18n.text("i18n:hmk-margin-md"),
          onAction() {
            editor.execCommand("SetImageStyle", editor, {margin:"2em"})
          },
          onSetup: function(api) {
            return __check_margin_size(api, '2em')
          }
        }, {
          type : "togglemenuitem",
          text : Ti.I18n.text("i18n:hmk-margin-lg"),
          onAction() {
            editor.execCommand("SetImageStyle", editor, {margin:"3em"})
          },
          onSetup: function(api) {
            return __check_margin_size(api, '3em')
          }
        }, {
          type : "menuitem",
          text : Ti.I18n.text("i18n:hmk-margin-no"),
          onAction() {
            editor.execCommand("SetImageStyle", editor, {margin:""})
          }
        }];
      }
    });
    //..............................................
    editor.ui.registry.addMenuItem("WnImgProp", {
      text : Ti.I18n.text("i18n:hmk-w-edit-img-prop"),
      onAction() {
        editor.execCommand("ShowImageProp", editor, settings)
      }
    })
    //..............................................
    editor.ui.registry.addContextMenu("wn-image", {
      update: function (el) {
        let sel = editor.selection
        let $nd = sel.getNode()
        if($nd.hasAttribute("wn-obj-id")
          && "IMG" == $nd.tagName
          && Ti.Dom.hasClass($nd, "wn-media", "as-image")) {
          return [
            "WnImgClrSize WnImgAutoFitWidth",
            "WnImgFloat WnImgMargin",
            "WnImgProp"
          ].join(" | ")
        }
        return []
      }
    })
    //..............................................
    editor.on("ExecCommand", async function({command, value}={}){
      if("mceInsertContent" == command && value.content) {
        let REG = /^<img +src="data:(image\/(png|jpeg));base64, *([^"]+)" *\/>$/
        let m = REG.exec(value.content)
        if(m) {
          let mime = m[1]
          let base64 = m[3]
          // Save image content
          let ftp = ({
            "image/png" : "png",
            "image/jpeg" : "jpg"
          })[mime] || "png"
          let fnm = Ti.DateTime.format(new Date(), "'Snapshot'-yyyyMMdd-HHmmss")
          let fph = Ti.Util.appendPath(settings.base, fnm + "." + ftp)
          // Show loading
          let $loading = Ti.Dom.createElement({
            tagName: "span",
            className: "wn-media as-loading",
            attrs: {
              "ti-tinymce-no-select": true
            }
          })
          $loading.innerHTML = '<i class="fas fa-spinner fa-spin"></i>'
          let rng = editor.selection.getRng()
          rng.insertNode($loading)
          // Upload
          let obj = await Wn.Io.saveContentAsText(fph, base64, {
            createIfNoExists:true,
            asBase64:true
          })
          editor.selection.select($loading)
          // Insert
          editor.execCommand("InsertImage", editor, [obj])
          Ti.Dom.remove($loading)
        }
      }
    })
    //..............................................
    let $vm = editor.__rich_tinymce_com
    $vm.registerContentCallback("wn-image", function() {
      //console.log("SetContent image")
      let els = editor.$('img[wn-obj-mime]')
      for(let i=0; i<els.length; i++) {
        let el = els[i]
        let mime = el.getAttribute("wn-obj-mime")
        if(/^image\//.test(mime) && !Ti.Dom.hasClass(el, "wn-media", "as-image")) {
          Ti.Dom.addClass(el, "wn-media", "as-image")
        }
      }
    })
    //..............................................
    return {
      getMetadata: function () {
        return  {
          name: 'Wn Image plugin',
          url: 'http://site0.cn'
        };
      }
    };
    //..............................................
  }
  //------------------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'm-thing.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/thing/m-thing.mjs'] = (function(){
//---------------------------------------
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////
  getters : {
    hasCurrent(state) {
      return state.current && state.current.meta
    },
    isInRecycleBin(state) {
      return state.search.inRecycleBin
    }
  },
  ////////////////////////////////////////////
  mutations : {
    setMeta(state, meta) {
      state.meta = meta
    },
    setFixedSchema(state, schema={}) {
      state.fixedSchema = _.cloneDeep(schema)
    },
    mergeFixedSchema(state, schema={}) {
      state.fixedSchema = _.merge({}, state.fixedSchema, schema)
    },
    setCurrentDataDir(state, dirName) {
      state.currentDataDir = dirName
      if(state.meta) {
        let localDirNameKey = `${state.meta.id}_dirname`
        Ti.Storage.session.set(localDirNameKey, dirName)
      }
    },
    setCurrentDataHome(state, dataHome) {
      state.currentDataHome = dataHome
    },
    setCurrentDataHomeObj(state, dataHomeObj) {
      state.currentDataHomeObj = _.cloneDeep(dataHomeObj)
    },
    setAutoSelect(state, autoSelect) {
      state.autoSelect = Ti.Util.fallback(autoSelect, false)
    },
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    },
    syncStatusChanged(state){
      if(state.current) {
        //console.log("do sync")
        state.status.changed = state.current.status.changed
      }
    }
  }
  ////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'form-group.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/form/com/form-group/form-group.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////
  computed : {
    //----------------------------------------
    TopClass() {
      let klass = [`as-${this.screenMode}`]
      if(this.className) {
        klass.push(this.className)
      }
      return klass
    },
    //----------------------------------------
    show() {
      return {
        title : this.title ? true : false,
        icon  : this.icon  ? true : false
      }
    }
    //----------------------------------------
  }
  ///////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'rich-tinymce-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/rich-tinymce-props.mjs'] = (function(){
const _M = {
  //...............................................
  // Data
  //...............................................
  "mediaBase": {
    type: String,
    default: undefined
  },
  "value": {
    type: String,
    default: undefined
  },
  "loading": {
    type: Boolean,
    default: false
  },
  "nilContent": {
    type: Boolean,
    default: false
  },
  //...............................................
  // Behavior
  //...............................................
  // Ext-toolbar item defination
  "toolbar": {
    type: [Boolean, Array, String],
    default: true
  },
  "plugins": {
    type: Array,
    default: () => []
  },
  "pluginUrl": {
    type: [String, Function],
    default: undefined
  },
  "readonly": {
    type: Boolean,
    default: false
  },
  "tinyConfig": {
    type: Object,
    default: () => ({})
  },
  "tinySetup": {
    type: Function,
    default: undefined
  },
  // Sometimes, put the editor in panel, the animation will cause
  // the editing area invalid. we need a delay a while, then rendering the editor.
  "delayInit": {
    type: Number,
    default: 0
  },
  //...............................................
  // Aspact
  //...............................................
  "lang": {
    type: String,
    default: "zh-cn"
  },
  "placeholder": {
    type: String,
    default: "i18n:blank"
  },
  "theme": {
    type: String,
    default: "light"
  },
  "loadingAs": {
    type: Object,
    default: () => ({
      className: "as-nil-mask as-big-mask",
      icon: undefined,
      text: undefined
    })
  },
  "blankAs": {
    type: Object,
    default: () => ({
      comType: "TiLoading",
      comConf: {
        className: "as-nil-mask as-big-mask",
        icon: "fas-coffee",
        text: null
      }
    })
  }
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-transfer-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/transfer/ti-transfer-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  // option() -> all list
  // option(inputing) -> condition list
  "options" : {
    type : [String, Array, Function, Ti.Dict],
    default : ()=>[]
  },
  "valueBy" : {
    type : [String, Function],
    default : undefined
  },
  "textBy" : {
    type : [String, Function],
    default : undefined
  },
  "iconeBy" : {
    type : [String, Function],
    default : undefined
  },
  "value" : undefined,
  // Value format
  // If declare the valueType
  // It will transform the WnObj
  // to relaitve value mode
  "valueType": {
    type: String,
    default: "id",
    validator: v => /^(id|obj|item)$/.test(v)
  },
  // for valueType=="obj", which key is id => value
  // The key is for the primary obj, not the result
  // of mapping translate if you declare the mapping option.
  "idBy": {
    type: String,
    default: "id"
  },
  // for valueType=="obj|item", translate the value
  "mapping": {
    type: Object,
    default: undefined
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "canComType" : {
    type : String,
    default : undefined
  },
  "canComConf" : {
    type : Object,
    default : undefined
  },
  "selComType" : {
    type : String,
    default : undefined
  },
  "selComConf" : {
    type : Object,
    default : undefined
  },
  "filter" : {
    type : Boolean,
    default : true
  },
  "fltComType" : {
    type : String,
    default : "ti-input"
  },
  "fltComConf" : {
    type : Object,
    default : undefined
  },
  "changeEventName":{
    type : String,
    default : "change"
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "display" : {
    type : [Object, String, Array],
    default : undefined
  },
  "assignButtons" : {
    type : Object,
    default : ()=>({
      add    : "fas-angle-double-right",
      remove : "fas-angle-double-left"
    })
  },
  "canTitle" : {
    type : String,
    default : "i18n:candidate"
  },
  "selTitle" : {
    type : String,
    default : "i18n:checked"
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width" : {
    type : [Number, String],
    default : null
  },
  "height" : {
    type : [Number, String],
    default : null
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-tree.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/tree/ti-tree.mjs'] = (function(){
const TI_TREE = {
  //////////////////////////////////////////
  data: () => ({
    "myTreeTableData": [],
    "myOpenedNodePaths": {},
    "myCurrentId": null
  }),
  //////////////////////////////////////////
  props: {
    "nodeClassName": {
      type: String,
      default: undefined
    },
    // The list to be rendered
    "data": {
      type: [Object, Array],
      default: undefined
    },
    "testLoading": {
      type: [Object, Function],
      default: undefined
    },
    // If date is array
    // it can auto group to tree like structure
    // but I need the obj parent Id
    "autoGroupBy": {
      type: String,
      default: undefined
    },
    // the key of obj to match children parentId(autoGroupBy)
    "autoGroupIdKey": {
      type: String,
      default: "id"
    },
    "autoGroupTo": {
      type: String,
      default: "children"
    },
    "otherGroup": {
      type: Object,
      default: undefined
    },
    "idBy": {
      type: [String, Function],
      default: () => it => Ti.Util.getFallbackEmpty(it, "id", "value")
      // default: function(it){
      //   return Ti.Util.getFallbackEmpty(it, "id", "value")
      // } 
    },
    "nameBy": {
      type: [String, Function],
      default: () => it => Ti.Util.getFallbackEmpty(it, "name", "nm", "id")
    },
    "childrenBy": {
      type: [String, Function],
      default: "children"
    },
    "leafBy": {
      type: [String, Object, Function, Array],
      default: () => ({
        "children": ""
      })
    },
    "loadingNode": {
      type: Object,
      default: () => ({
        name: "i18n:loading"
      })
    },
    "emptyNode": {
      type: Object,
      default: () => ({
        icon: "fas-braille",
        name: "i18n:empty"
      })
    },
    "title": {
      type: String,
      default: 'i18n:title'
    },
    "mainWidth": {
      type: [String, Number],
      default: 'stretch'
    },
    "display": {
      type: [String, Object, Array],
      default: "name"
    },
    "rowClassBy": {
      type: [Function, String]
    },
    // Default to open the node in depth.
    // the top node depth is 1, which is eqausl the path array length.
    // If 0, it will close all top leavel nodes
    "defaultOpenDepth": {
      type: Number,
      default: 0
    },
    // Local store to save the tree open status
    "keepOpenBy": {
      type: String,
      default: null
    },
    "keepCurrentBy": {
      type: String,
      default: null
    },
    "changedId": {
      type: String,
      default: null
    },
    "currentId": {
      type: String,
      default: null
    },
    "checkedIds": {
      type: [Array, Object],
      default: () => []
    },
    "openedNodePaths": {
      type: Object,
      default: () => ({})
    },
    "multi": {
      type: Boolean,
      default: false
    },
    "nodeCheckable": {
      type: [Object, Function],
      default: undefined
    },
    "nodeSelectable": {
      type: [Object, Function],
      default: undefined
    },
    "nodeOpenable": {
      type: [Object, Function],
      default: undefined
    },
    "nodeCancelable": {
      type: [Object, Function],
      default: undefined
    },
    "nodeHoverable": {
      type: [Object, Function],
      default: undefined
    },
    "checkable": {
      type: Boolean,
      default: false
    },
    // select item
    "selectable": {
      type: Boolean,
      default: true
    },
    "cancelable": {
      type: Boolean,
      default: true
    },
    "openable": {
      type: Boolean,
      default: true
    },
    "hoverable": {
      type: Boolean,
      default: false
    },
    "onNodeSelect": {
      type: Function,
      default: undefined
    },
    "width": {
      type: [String, Number],
      default: null
    },
    "puppetMode": {
      type: Boolean,
      default: false
    },
    "height": {
      type: [String, Number],
      default: null
    },
    "spacing": {
      type: String,
      default: "comfy",
      validator: v => /^(comfy|tiny)$/.test(v)
    },
    "autoScrollIntoView": {
      type: Boolean,
      default: true
    },
    "columnResizable": {
      type: Boolean,
      default: false
    },
    "keepCustomizedTo": {
      type: String,
      default: undefined
    },
    "autoOpen": {
      type: Boolean,
      default: false
    },
    "showRoot": {
      type: Boolean,
      default: true
    },
    "nodeHandleIcons": {
      type: Array,
      default: () => [
        "zmdi-chevron-right",
        "zmdi-chevron-down"]
    },
    "border": {
      type: String,
      default: "column",
      validator: v => /^(row|column|cell|none)$/.test(v)
    },
    "rowNumberBase": {
      type: Number,
      default: undefined
    },
    // "extendFunctionSet" : {
    //   type : Object,
    //   default : ()=>({})
    // },
    "fields": {
      type: Array,
      default: () => []
    },
    "blankAs": undefined
  },
  //////////////////////////////////////////
  watch: {

  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-selectable": this.selectable,
        "is-hoverable": this.hoverable
      }, `as-spacing-${this.spacing}`)
    },
    //--------------------------------------
    getNodeId() {
      if (_.isFunction(this.idBy)) {
        return (it) => this.idBy(it)
      }
      return (it) => _.get(it, this.idBy)
    },
    //--------------------------------------
    getNodeName() {
      if (_.isFunction(this.nameBy)) {
        return it => this.nameBy(it)
      }
      return it => _.get(it, this.nameBy)
    },
    //--------------------------------------
    isNodeLeaf() {
      if (_.isFunction(this.leafBy)) {
        return it => (this.leafBy(it) ? true : false)
      }
      // Auto Match
      let mat = Ti.AutoMatch.parse(this.leafBy)
      return it => mat(it)
    },
    //--------------------------------------
    isNodeLoading() {
      if (!this.testLoading) {
        return () => false
      }
      if (_.isFunction(this.testLoading)) {
        return this.testLoading
      }
      return Ti.AutoMatch.parse(this.testLoading)
    },
    //--------------------------------------
    isNodeCheckable() {
      return this.evalBehaviorsMatcher(this.nodeCheckable, this.checkable)
    },
    //--------------------------------------
    isNodeSelectable() {
      return this.evalBehaviorsMatcher(this.nodeSelectable, this.selectable)
    },
    //--------------------------------------
    isNodeCancelable() {
      return this.evalBehaviorsMatcher(this.nodeCancelable, this.cancelable)
    },
    //--------------------------------------
    isNodeOpenable() {
      return this.evalBehaviorsMatcher(this.nodeOpenable, this.openable)
    },
    //--------------------------------------
    isNodeHoverable() {
      return this.evalBehaviorsMatcher(this.nodeHoverable, this.hoverable)
    },
    //--------------------------------------
    getNodeChildren() {
      if (_.isFunction(this.childrenBy)) {
        return it => this.childrenBy(it)
      }
      return it => _.get(it, this.childrenBy)
    },
    //--------------------------------------
    isTable() {
      return _.isArray(this.fields) && !_.isEmpty(this.fields)
    },
    //--------------------------------------
    TableHead() {
      if (this.isTable) {
        return "frozen"
      }
      return "none"
    },
    //--------------------------------------
    TableFields() {
      let mainCol = {
        title: this.title,
        width: this.mainWidth,
        nowrap: true,
        display: this.display
      }
      if (this.isTable) {
        return _.concat(mainCol, this.fields)
      }
      return [mainCol]
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnTableInit($table) {
      this.$table = $table
    },
    //--------------------------------------
    evalBehaviorsMatcher(cust, dft) {
      let fn;
      if (cust) {
        fn = Ti.AutoMatch.parse(cust)
      }
      return (row) => {
        if (row.fake)
          return false

        let re;
        if (fn)
          re = fn(row)

        return Ti.Util.fallback(re, dft)
      }
    },
    //--------------------------------------
    async evalTreeTableData() {
      // if(_.get(this.data, "value.title"))
      //     console.log("evalTreeTableData", _.get(this.data, "value.title"))
      let tableData = []

      //if(this.showRoot)
      //console.log("evalTreeTableData", this.data)

      // Array push to root
      if (_.isArray(this.data)) {
        let list = this.data
        // Pre group data
        if (this.autoGroupBy) {
          list = this.groupTreeData(list)
        }

        await this.joinTreeTableRow(tableData, {}, null, list)
      }
      // already has root
      else if (this.data) {
        await this.joinTreeTableRow(tableData, this.data, null)
      }

      this.myTreeTableData = tableData
    },
    //--------------------------------------
    async joinTreeTableRow(rows = [], item = {}, path = [], children) {
      // if(this.showRoot)
      //console.log("joinTreeTableRow", item)
      let self = {}
      //....................................
      // For ROOT
      if (!path) {
        self.name = this.getNodeName(item) || "$ROOT$"
        self.path = []
        self.pathId = "/"
        self.id = Ti.Util.fallbackNil(this.getNodeId(item), self.pathId)
        self.indent = 0
        self.leaf = false
        // self.opened = !this.showRoot
        //   ? true 
        //   : Ti.Util.fallback(
        //       this.myOpenedNodePaths[self.pathId], 
        //       self.indent < this.defaultOpenDepth);
        self.opened = !this.showRoot || this.myOpenedNodePaths[self.pathId]
        self.defaultOpen = self.indent < this.defaultOpenDepth
        self.shouldTryOpen = Ti.Util.fallback(self.opened, self.defaultOpen)
      }
      // Others node
      else {
        self.name = this.getNodeName(item)
        self.path = _.concat(path, self.name)
        self.pathId = self.path.join("/")
        self.id = Ti.Util.fallbackNil(this.getNodeId(item), self.pathId)
        self.indent = self.path.length
        self.leaf = this.isNodeLeaf(item)
        // self.opened = Ti.Util.fallback(
        //   this.myOpenedNodePaths[self.pathId], 
        //   self.indent < this.defaultOpenDepth);
        self.opened = this.myOpenedNodePaths[self.pathId]
        self.defaultOpen = self.indent < this.defaultOpenDepth
        self.shouldTryOpen = Ti.Util.fallback(self.opened, self.defaultOpen)
      }
      //....................................
      // Join the rawData
      self.rawData = item
      //....................................
      // Add root if necesssary
      if (this.showRoot) {
        rows.push(self)
      }
      // If not show root, minus depth
      else {
        self.indent--
        if (self.indent >= 0) {
          rows.push(self)
        }
      }
      //....................................
      // Join Children
      if (self.shouldTryOpen && !self.leaf) {
        if (!children) {
          children = await this.getNodeChildren(item)
        }
        // Empty or loading node
        if (!_.isArray(children) || _.isEmpty(children)) {
          // Loading node
          if (this.isNodeLoading(self)) {
            rows.push(this.genFakeLoadingNode(self.indent))
          }
          // Empty node
          else if (self.opened) {
            rows.push(this.genFakeEmptyNode(self.indent))
          }
        }
        // Load children
        else {
          self.opened = true   // Make sure the node is opend
          for (let child of children) {
            await this.joinTreeTableRow(rows, child, self.path)
          }
        }
      }
      // After join children, we can finnaly decide the tree state icon (handle)
      self.icon = self.leaf ? true : this.nodeHandleIcons[self.opened ? 1 : 0]
      //....................................
    },
    //--------------------------------------
    genFakeLoadingNode(indent = 0) {
      return {
        indent: indent + 2,
        leaf: true,
        fake: true,
        icon: "fas-spinner fa-spin",
        rawData: this.loadingNode
      }
    },
    //--------------------------------------
    genFakeEmptyNode(indent = 0) {
      return {
        indent: indent + 3,
        leaf: true,
        fake: true,
        rawData: this.emptyNode
      }
    },
    //--------------------------------------
    groupTreeData(data = [], groupBy = this.autoGroupBy) {
      if (!groupBy)
        return
      // Clone data
      data = _.cloneDeep(data)

      // Other data
      let others = []

      // Build map
      let map = {}
      _.forEach(data, it => {
        let key = it[this.autoGroupIdKey]
        if (!Ti.Util.isNil(key))
          map[key] = it
      })

      // Group to parent
      // Find the top list (nil value for autoGroupBy)
      let tops = []
      _.forEach(data, it => {
        let pKey = it[this.autoGroupBy]
        // Group to parent
        if (!Ti.Util.isNil(pKey)) {
          let pIt = map[pKey]
          if (pIt) {
            Ti.Util.pushValue(pIt, this.autoGroupTo, it);
          }
          // Join to others
          else {
            others.push(it)
          }
        }
        // Join to tops
        else {
          tops.push(it)
        }
      })

      // Auto show others
      if (this.otherGroup && !_.isEmpty(others)) {
        let topOther = _.cloneDeep(this.otherGroup)
        _.set(topOther, this.autoGroupTo, others)
        tops.push(topOther)
      }

      // done
      if (!_.isEmpty(tops))
        return tops

      return data
    },
    //--------------------------------------
    findTableRow(rowId) {
      if (!Ti.Util.isNil(rowId)) {
        for (let row of this.myTreeTableData) {
          if (row.id == rowId) {
            return row
          }
        }
      }
    },
    //--------------------------------------
    OnCellItemChange({ name, value, rowId } = {}) {
      console.log("OnCellItemChange", {name, value, rowId})
      let row = this.findTableRow(rowId)
      if (row) {
        this.$notify("node:item:change", {
          name,
          value,
          node: row,
          nodeId: rowId,
          data: row.rawData
        })
      }
    },
    //--------------------------------------
    OnRowSelect(payload = {}) {
      let current, node, selected = []
      let {
        currentId,
        checkedIds = {}
      } = payload

      // Has selected
      if (currentId) {
        let currentRow;
        for (let row of this.myTreeTableData) {
          if (row.id == currentId) {
            currentRow = row
            current = row.rawData
          }
          if (checkedIds[row.id]) {
            selected.push(row.rawData)
          }
        }
        // Auto Open
        if (currentRow && this.autoOpen) {
          this.openRow(currentRow)
        }
        // Store current Id
        this.myCurrentId = _.get(currentRow, "id")
        node = currentRow
      }
      // Cancel current row
      else {
        this.myCurrentId = null
      }
      // Save local status
      if (this.keepCurrentBy) {
        if (!this.puppetMode) {
          Ti.Storage.session.set(this.keepCurrentBy, this.myCurrentId)
        }
      }

      // Prepare context
      let evtCtxt = _.assign({}, payload, {
        node,
        current, selected,
        currentId, checkedIds
      })

      // Callback
      if (_.isFunction(this.onNodeSelect)) {
        this.onNodeSelect.apply(this, [evtCtxt])
      }

      // Emit the value
      this.$notify("select", evtCtxt)
    },
    //--------------------------------------
    OnRowIconClick({ rowId } = {}) {
      let row = this.findTableRow(rowId)
      // Open it
      if (row && !row.leaf && !row.opened) {
        this.openRow(row)
      }
      // Close it
      else {
        this.closeRow(row)
      }
    },
    //--------------------------------------
    OnRowOpen(payload = {}) {
      let { id } = payload
      let row = this.findTableRow(id)
      if (row && !row.leaf && !row.opened) {
        this.openRow(row)
      }
      return { stop: false }
    },
    //--------------------------------------
    openRow(rowOrId) {
      let row = _.isString(rowOrId)
        ? this.findTableRow(rowOrId)
        : rowOrId
      if (row && !row.leaf && !row.opened) {
        this.$set(this.myOpenedNodePaths, row.pathId, true)
        // Notify status changed
        this.$notify("opened", row)
        // Save to Local
        this.saveNodeOpenStatus()
      }
    },
    //--------------------------------------
    selectNodeById(rowId) {
      this.$table.selectRow(rowId)
    },
    //--------------------------------------
    selectPrevRow(options) {
      this.$table.selectPrevRow(options)
    },
    //--------------------------------------
    selectNextRow(options) {
      console.log("ti-tree.selectNextRow", options)
      this.$table.selectNextRow(options)
    },
    //--------------------------------------
    isOpened(rowOrId) {
      let row = _.isString(rowOrId)
        ? this.findTableRow(rowOrId)
        : rowOrId
      return row ? row.opened : false
    },
    //--------------------------------------
    closeRow(rowOrId) {
      let row = _.isString(rowOrId)
        ? this.findTableRow(rowOrId)
        : rowOrId
      if (row && !row.leaf && row.opened) {
        this.$set(this.myOpenedNodePaths, row.pathId, false)
        // Notify status changed
        this.$notify("closed", row)
        // Save to Local
        this.saveNodeOpenStatus()
      }
    },
    //--------------------------------------
    saveNodeOpenStatus() {
      if (this.keepOpenBy) {
        Ti.Storage.session.setObject(this.keepOpenBy, this.myOpenedNodePaths)
      }
      this.$notify("opened-status:changed", this.myOpenedNodePaths)
    },
    //--------------------------------------
    syncOpenedNodePaths() {
      this.myOpenedNodePaths = _.assign({}, this.openedNodePaths)
    },
    //--------------------------------------
    __ti_shortcut(uniqKey) {
      if ("ARROWLEFT" == uniqKey) {
        this.closeRow(this.myCurrentId)
      }

      if ("ARROWRIGHT" == uniqKey) {
        this.openRow(this.myCurrentId)
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "data": async function (newVal, oldVal) {
      //console.log("change data")
      if (!_.isEqual(newVal, oldVal)) {
        await this.evalTreeTableData()
      }
    },
    "openedNodePaths": function (newVal, oldVal) {
      if (!_.isEqual(newVal, oldVal)) {
        //console.log("tree openedNodePaths changed")
        this.syncOpenedNodePaths()
      }
    }
  },
  //////////////////////////////////////////
  mounted: async function () {
    //.................................
    this.syncOpenedNodePaths()
    //.................................
    // Ti.Dom.watchDocument("mouseup", this.__on_mouseup)
    // Recover the open status from local store
    if (this.keepOpenBy) {
      this.myOpenedNodePaths = Ti.Storage.session.getObject(this.keepOpenBy)
      if (!this.puppetMode) {
        this.$notify("opened-status:changed", this.myOpenedNodePaths)
      }
    }
    //................................
    // Eval Data
    await this.evalTreeTableData()
    //................................
    // Watch Deep
    this.$watch("myOpenedNodePaths", () => {
      this.evalTreeTableData()
    }, { deep: true })
    //................................
    // Recover the current
    if (this.keepCurrentBy) {
      let currentId = Ti.Storage.session.get(this.keepCurrentBy)
      if (!Ti.Util.isNil(currentId)) {
        this.$nextTick(() => {
          this.$children[0].selectRow(currentId)
        })
      }
    }
    //................................
  },
  //////////////////////////////////////////
  beforeDestroy: function () {
    //Ti.Dom.unwatchDocument("mouseup", this.__on_mouseup)
  }
  //////////////////////////////////////////
}
return TI_TREE;
;
})()
// ============================================================
// EXPORT 'ti-sheet-table.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/sheet/table/ti-sheet-table.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////////
  data: () => ({
    myNextRowAmount: 10,
    myMatrix: [],
    myActivedCellKey: null,
    myActivedCellComType: null,
    myActivedCellComConf: {}
  }),
  ///////////////////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "data": {
      type: Object,
      default: undefined
    },
    "dataWidth": {
      type: Number,
      default: 10
    },
    "dataHeight": {
      type: Number,
      default: 100
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "extension": {
      type: String,
      default: "rows",
      validator: v => /^(none|cols|rows|both)$/.test(v)
    },
    "columns": {
      type: Array,
      default: undefined
    },
    "cellComType": {
      type: String,
    },
    "cellComConf": {
      type: Object,
      default: undefined
    },
    "cellReadonly": {
      type: Boolean,
      default: false
    },
    "cellChangeEventName": {
      type: String,
      default: "change:cell"
    },
    "rowChangEventeName": {
      type: String,
      default: "change:row"
    },
    "dataChangeEventName": {
      type: String,
      default: "change"
    },
    "removeRowEventName": {
      type: String,
      default: "remove:row"
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "indexWidth": {
      type: Number,
      default: 40
    },
    "defaultCellWidth": {
      type: Number,
      default: 120
    }
  },
  ///////////////////////////////////////////////////////
  computed: {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //---------------------------------------------------
    SheetData() {
      return _.isEmpty(this.data) ? {} : this.data
    },
    //---------------------------------------------------
    isCanExtendCols() { return /^(cols|both)$/.test(this.extension) },
    isCanExtendRows() { return /^(rows|both)$/.test(this.extension) },
    isCanRemoveRow() { return this.removeRowEventName ? true : false },
    //---------------------------------------------------
    SheetColumnList() {
      let list = []
      // Make list by dataWidth
      if (_.isEmpty(this.columns)) {
        for (let i = 0; i < this.dataWidth; i++) {
          let colKey = Ti.Num.toBase26(i);
          let col = {
            index: i,
            key: colKey,
            name: colKey,
            title: colKey,
            width: this.defaultCellWidth,
            comType: this.cellComType || "TiInput",
            comConf: this.cellComConf || {
              autoSelect: true,
              focused: true,
              value: "=@CellValue"
            }
          }
          list.push(col)
        }
      }
      // Upgrade defination by default
      else {
        _.forEach(this.columns, ({
          name, title, width = this.defaultCellWidth,
          readonly = this.cellReadonly,
          dict, transformer, type, display,
          autoSort, emptyAsNull = true,
          comType, comConf, mergeConf = true
        }, index) => {
          //.....................................
          let key = Ti.Num.toBase26(index)
          //.....................................
          if (mergeConf) {
            let conf = _.cloneDeep(this.cellComConf) || {
              autoSelect: true,
              focused: true,
              value: "=@CellValue"
            }
            comConf = _.merge(conf, comConf)
          }
          //.....................................
          let col = {
            index, key, readonly,
            autoSort, emptyAsNull,
            name: name || key,
            title: title || name || key,
            type, width, display,
            comType: comType || this.cellComType || "TiInput",
            comConf
          }
          //.....................................
          if (dict) {
            col.$dict = Ti.DictFactory.CheckDict(dict)
          }
          //.....................................
          if (transformer) {
            col.transformer = Ti.Util.genInvoking(transformer)
          }
          //.....................................
          list.push(col)
        })
      }
      // Done
      return list
    },
    //---------------------------------------------------
    /**
     * @returns Column index map by:
     *   - `index` : "#0"
     *   - `key`   : "@A"
     *   - `name`  : "age"
     */
    SheetColumnMap() {
      let re = {}
      _.forEach(this.SheetColumnList, (col) => {
        let { index, key, name } = col
        re[`#${index}`] = col
        re[`@${key}`] = col
        re[name] = col
      })
      return re
    },
    //---------------------------------------------------
    /**
     * The sheet display columns, by max-value of dataWidth and columns.length,
     * if columns is not empty
     */
    SheetDisplayColumns() {
      return this.SheetColumnList
    }
    //---------------------------------------------------
  },
  methods: {
    //---------------------------------------------------
    OnClickCell({ cellKey, x, y }) {
      // Eval com
      this.evalActivedCellCom(cellKey, x, y)
      // Then display it
      this.myActivedCellKey = cellKey
    },
    //---------------------------------------------------
    OnCancelCell() {
      this.evalActivedCellCom(null)
    },
    //---------------------------------------------------
    OnCellChange(val, { cellKey, x, y }) {
      //console.log("SheetTable CellChanged", { cellKey, x, y, val })
      // Default, empty value as null
      let col = this.SheetColumnList[x]
      let { type, emptyAsNull, autoSort } = col
      // pre-treat value
      if (emptyAsNull && (
        Ti.Util.isNil(val)
        || (_.isArray(val) && _.isEmpty(val))
      )) {
        val = null
      }
      // sort value when array
      if (autoSort && _.isArray(val)) {
        val.sort()
      }
      // Convert type
      if (type) {
        let fnName = Ti.Types.getFuncByType(type)
        let typeFn = Ti.Types.evalFunc(fnName)
        val = typeFn(val)
      }
      // Notify cell change
      if (this.cellChangeEventName) {
        this.$notify(this.cellChangeEventName, {
          x, y,
          key: cellKey,
          name: col.name,
          title: col.title,
          value: val
        })
      }

      // Notify row change
      if (this.rowChangEventeName) {
        let item = this.getRowDataByIndex(y)
        if (Ti.Util.isNil(val)) {
          delete item[col.name]
        } else {
          item[col.name] = val
        }
        this.$notify(this.rowChangEventeName, {
          index: y,
          col, item
        })
      }

      // Notify change
      if (this.dataChangeEventName) {
        let data = _.cloneDeep(this.SheetData)
        data[cellKey] = val
        this.$notify(this.dataChangeEventName, data)
      }
    },
    //---------------------------------------------------
    OnClickRowCreator() {
      if (this.myNextRowAmount) {
        this.$notify("create:row", this.myNextRowAmount)
      }
    },
    //---------------------------------------------------
    OnClickRowDeletor(row) {
      if (this.removeRowEventName) {
        //console.log("SheetTable CellRemove", row)
        this.$notify("remove:row", row)
      }
    },
    //---------------------------------------------------
    /**
     * 
     * @param {String} cellKey cell key like `A1`
     * 
     * @return `{x:0, y:0}`
     */
    getCellIndexByKey(cellKey) {
      let m = /^([A-Z]+)(\d+)$/.exec(cellKey)
      if (!m) {
        throw `Invalid cellKey format : "${cellKey}"`
      }
      return {
        x: Ti.Num.fromBase26(m[1]),
        y: parseInt(m[2]) - 1,
      }
    },
    //---------------------------------------------------
    /**
     * Get a data key 
     * 
     * @param {Number} x 0 base column index
     * @param {Number} y 0 base row index
     */
    getCellKeyByIndex(x = 0, y = 0) {
      let key = Ti.Num.toBase26(x)
      return `${key}${y + 1}`
    },
    //---------------------------------------------------
    /**
     * Gen a var-context for dataKey rendering.
     * 
     * @param {Number} x 0 base column index
     * @param {Number} y 0 base row index
     */
    getCellValueByIndex(x, y) {
      let key = this.getCellKeyByIndex(x, y)
      let val = this.SheetData[key]
      return val
    },
    //---------------------------------------------------
    /**
     * 
     * @param {Number} y 0 base row index
     */
    getRowDataByIndex(y) {
      let re = {}
      for (let col of this.SheetColumnList) {
        let { index, name } = col
        let val = this.getCellValueByIndex(index, y)
        if (!_.isUndefined(val)) {
          re[name] = val
        }
      }
      return re
    },
    //---------------------------------------------------
    getRowDataList() {
      let list = []
      for (let row of this.SheetRowList) {
        let obj = this.getRowDataByIndex(row.index)
        list.push(obj)
      }
      return list
    },
    //---------------------------------------------------
    evalActivedCellCom(cellKey, x, y) {
      // Cancel Actived cell com
      if (!cellKey) {
        this.myActivedCellKey = null
        this.myActivedCellComType = null
        this.myActivedCellComConf = {}
        return
      }
      // Get back x/y from cellKey
      if (_.isUndefined(x)) {
        let pos = this.getCellIndexByKey(cellKey)
        x = pos.x
        y = pos.y
      }
      let col = this.SheetColumnList[x]
      let item = this.getRowDataByIndex(y)
      item["@CellValue"] = this.SheetData[cellKey]
      let comConf = _.cloneDeep(col.comConf)
      if (!comConf.value) {
        comConf.value = "=@CellValue"
      }
      // Setup editing component
      this.myActivedCellComType = col.comType
      this.myActivedCellComConf = Ti.Util.explainObj(item, comConf)
    },
    //---------------------------------------------------
    /**
     * let myMatrix = [{
     *    // extend {SheetRowList}
     *    index: 0,      // 0 base row index
     *    // extend {SheetColumnList}
     *    cells: [
     *       {
     *          index, key, name, title, readonly,
     *          value, displayText,
     *          actived, className,
     *          rowIndex, x, y
     *       }
     *    ]
     * }]
     */
    async evalSheetMatrix() {
      //console.log("evalSheetMatrix()", this.dataHeight)
      // Eval display text
      const genCellDisplayText = async (cellVal, col) => {
        if (_.isArray(cellVal)) {
          let vList = []
          for (let cv of cellVal) {
            let v2 = await genCellDisplayText(cv, col)
            vList.push(v2)
          }
          return vList.join(",")
        }
        let displayText = cellVal
        if (col.$dict) {
          displayText = await col.$dict.getItemText(cellVal)
        }
        if (_.isFunction(col.transformer)) {
          displayText = col.transformer(displayText)
        }
        return displayText
      }
      // Gen matrix
      let matrix = []
      for (let y = 0; y < this.dataHeight; y++) {
        // Explain cells
        let cells = []
        for (let col of this.SheetDisplayColumns) {
          let x = col.index
          //................................
          let cellKey = this.getCellKeyByIndex(x, y)
          let cellVal = this.SheetData[cellKey]
          let actived = this.myActivedCellKey == cellKey
          //................................
          let displayText = await genCellDisplayText(cellVal, col)
          let context = {
            text: displayText,
            value: cellVal
          }
          //................................
          // Eval display
          let dis = col.display || {
            major: "=text"
          }
          let display = Ti.Util.explainObj(context, dis)
          //................................
          let cell = _.assign(_.cloneDeep(col), {
            actived,
            className: {
              "is-actived": actived,
              "no-actived": !actived,
              "is-readonly": col.readonly,
              "no-readonly": !col.readonly,
            },
            cellKey,
            rowIndex: y,
            x, y,
            value: cellVal,
            ...display,
            showMajor: !Ti.Util.isNil(display.major),
            showSuffix: !Ti.Util.isNil(display.suffix)
          })
          //................................
          cells.push(cell)
        }

        // Join to matrix
        matrix.push({
          index: y,
          cells
        })
      }
      this.myMatrix = matrix
      //console.log("evalSheetMatrix() -> ", matrix.length)
      // Re-eval actived com if it has had
      if (this.myActivedCellKey) {
        this.evalActivedCellCom(this.myActivedCellKey)
      }
    },
    //---------------------------------------------------
    tryEvalMatrix(newVal, oldVal) {
      if (!_.isEqual(newVal, oldVal)) {
        this.evalSheetMatrix()
      }
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  watch: {
    "data": "tryEvalMatrix",
    "dataWidth": "tryEvalMatrix",
    "dataHeight": "tryEvalMatrix",
    "myActivedCellKey": "tryEvalMatrix"
  },
  ///////////////////////////////////////////////////////
  mounted: async function () {
    await this.evalSheetMatrix();
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-pay-proceed.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/pay/proceed/web-pay-proceed.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////////////
  data : ()=>({
    __WS : null,   // The handle of websocket
    myOrder: null,
    isChecking: false,
    myPaypalUrl: ""
  }),
  //////////////////////////////////////////////////
  props : {
    "payType" : {
      type : String,
      default : null
    },
    "items" : {
      type : Array,
      default : ()=>[]
    },
    "orderId" : {
      type : String,
      default : undefined
    },
    "payOk" : {
      type : Boolean,
      default : undefined
    },
    "currency": {
      type: String,
      default: "RMB"
    },
    "address": {
      type: Object,
      default: undefined
    }
  },
  //////////////////////////////////////////////////
  computed : {
    TopClass() {
      return this.getTopClass({
        "has-paytype": this.hasPayType,
        "nil-paytype": !this.hasPayType
      }, `is-${this.PayTypeName}`)
    },
    //----------------------------------------------
    hasPayType() {
      return Ti.Bank.isValidPayType(this.payType)
    },
    //----------------------------------------------
    PayTypeName() {
      if(_.isString(this.payType)) {
        return this.payType.replace(".", "-");
      }
    },
    //----------------------------------------------
    PayTypeText() {
      return Ti.Bank.getPayTypeChooseI18nText(this.payType, {
        text:'pay-step-proceed-tip',
        nil:'pay-step-proceed-nil'
      })
    },
    //----------------------------------------------
    OrderLoadText() {
      return this.orderId
        ? "pay-step-proceed-fetch-order"
        : "pay-step-proceed-create-order"
    },
    //----------------------------------------------
    hasOrder() {
      return !_.isEmpty(this.myOrder)
    },
    //----------------------------------------------
    Payment() {
      return _.get(this.myOrder, "pay_re")
    },
    //----------------------------------------------
    PaymentId() {
      return _.get(this.Payment, "payObjId")
    },
    //----------------------------------------------
    PaymentStatus() {
      return _.get(this.Payment, "status")
    },
    //----------------------------------------------
    PaymentData() {
      return _.get(this.Payment, "data")
    },
    //----------------------------------------------
    PaymentDataType() {
      return _.get(this.Payment, "dataType")
    },
    //----------------------------------------------
    isPaymentCreated() {
      return _.get(this.Payment, "payObjId") ? true : false
    },
    //----------------------------------------------
    isQRCODE() {
      return "QRCODE" == this.PaymentDataType
    },
    //----------------------------------------------
    isIFRAME() {
      return "IFRAME" == this.PaymentDataType
    },
    //----------------------------------------------
    isLINK() {
      return "LINK" == this.PaymentDataType
    },
    //----------------------------------------------
    isJSON() {
      return "JSON" == this.PaymentDataType
    },
    //----------------------------------------------
    isTEXT() {
      return "TEXT" == this.PaymentDataType
    },
    //----------------------------------------------
    PaymentDataAsQrcodeUrl() {
      return `/gu/qrcode?d=${this.PaymentData}&s=${this.qrcodeSize}&_=${Date.now()}`
    },
    //----------------------------------------------
    PayPalLinksMap() {
      let map = {}
      if(this.hasOrder 
        && "paypal" == this.myOrder.pay_tp) {
        _.forEach(this.PaymentData.links, li=> {
          map[li.rel] = li
        })
      }
      return map;
    },
    //----------------------------------------------
    QrcodeImageStyle() {
      return Ti.Css.toStyleRem100({
        width: this.qrcodeSize,
        height: this.qrcodeSize
      })
    },
    //----------------------------------------------
    CheckBtnIcon(){
      if(this.isChecking) {
        return "fas-spinner fa-spin"
      }
      return "zmdi-assignment-check"
    },
    //----------------------------------------------
    CheckBtnText(){
      if(this.isChecking)
        return "i18n:pay-proceed-ing"
      return "i18n:pay-proceed-check"
    }
    //----------------------------------------------
  },
  //////////////////////////////////////////////////
  methods : {
    //----------------------------------------------
    async OnClickCheckBtn() {
      if(_.isFunction(this.checkOrder)) {
        this.isChecking = true
        this.myOrder = await this.checkOrder(this.orderId)
        this.isChecking = false
      }
    },
    //----------------------------------------------
    // Wait for payment be created
    // Maybe the processing still in the MessageQueue
    async checkPayment() {
      if(!this.Payment) {
        _.delay(async ()=>{
          this.myOrder = await this.fetchOrder(this.orderId)
          
          this.$nextTick(()=>{
            this.checkPayment()
          })

        }, this.checkPaymentInterval)
      }
      // With payment, do something special for PayPal
      else {
        this.tryEvalPayPal()
      }
    },
    //----------------------------------------------
    async checkOrCreateOrder() {
      if(this.hasOrder) {
        return await this.checkPayment()
      }
      // Get Back
      if(this.orderId) {
        if(_.isFunction(this.fetchOrder)) {
          this.myOrder = await this.payOrder(this.orderId, this.payType)
        }
      }
      // Create new one
      else {
        if(_.isFunction(this.createOrder)) {
          let payItems = _.map(this.items, it=>({
            id: it.id,
            amount: it.amount || 1,
            cate : it.cate,
            title: it.title,
            price: it.price
          }))
          let order = await this.createOrder({
            payType: this.payType,
            items: payItems,
            orderType: this.orderType,
            orderTitle: this.orderTitle,
            address: this.address,
            fail: (msg)=>{
              this.$emit("change", {
                payOk  : false,
                errMsg : msg
              })
              this.$notify("step:change", "@next")
            }
          })
          this.$emit("change", {orderId: _.get(order, "id")})
          this.myOrder = order
        }
      }

      // If without payment, check it by remote
      return await this.checkPayment()

      // Finally watch the payment change
      //this.watchPaymentChanged();
    },
    //----------------------------------------------
    // PayPal need open a new link
    async tryEvalPayPal() {
      // Open Link for PayPal approve
      if("paypal" == this.payType && this.isPaymentCreated) {
        let href = _.get(this.PayPalLinksMap, "approve.href")
        let link = Ti.Util.parseHref(href)
        let url = `${link.protocol}://${link.host}${link.path}`
        console.log("🤳", {href, link, url})

        if(this.returnUrl) {
          link.params.returnurl = this.returnUrl
        }

        this.myPaypalUrl = link.toString()

        await Ti.Be.Open(url, {
          // params: _.assign({
          //     returnurl: "http://onchina.local.io:8080/page/shop/payok.html"
          //   },link.params),
          params: link.params,
          delay: 1000
        })
      }
    },
    //----------------------------------------------
    watchPaymentChanged() {
      // Guard
      if(this.__WS 
        || !this.watchUser 
        || !this.hasOrder
        || !this.isPaymentCreated) {
        return
      }
      // Watch Remote
      console.log("【🦅】watchPaymentChanged")
      this.__WS = Ti.Websocket.listenRemote({
        watchTo : {
          method : "watch",
          user   : this.watchUser,
          match  : {
            id : this.PaymentId
          }
        },
        received : (wso)=>{
          console.log("【🦅】websocket", wso)
          this.OnClickCheckBtn()
        },
        closed : ()=>{
          this.unwatchPaymentChanged()
        }
      })
    },
    //----------------------------------------------
    unwatchPaymentChanged() {
      if(this.__WS) {
        this.__WS.close();
      }
    }
    //----------------------------------------------
  },
  //////////////////////////////////////////////////
  watch: {
    "PaymentStatus": function(status) {
      // Fail
      if("FAIL" == status) {
        this.$emit("change", {
          payOk: false,
          errMsg: JSON.stringify(this.PaymentData)
        })
        this.$notify("step:change", "@next")
      }
      // OK
      else if("OK" == status) {
        this.$emit("change", {
          payOk: true
        })
        this.$notify("step:change", "@next")
      }
    }
  },
  //////////////////////////////////////////////////
  mounted : function() {
    this.$notify("change:title", this.PayTypeText)
    this.$nextTick(()=>{
      this.checkOrCreateOrder()
    })
  },
  //////////////////////////////////////////////////
  beforeDestroy : function(){
    this.unwatchPaymentChanged()
  }
  //////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'mod-auth-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/lib/www/mod/auth/mod-auth-actions.mjs'] = (function(){
const _M = {
  //--------------------------------------------
  async showMyInfo({ state }) {
    let me = state.me
    if (!me) {
      return await Ti.Toast.Open("Without session user", "warn")
    }
    let data = _.pick(me, "nm", "nickname", "email", "phone")
    data.id = _.get(me.OID, "myId") || me.id
    data.sex = _.nth(["i18n:unknown","i18n:male","i18n:female"], me.sex||0)
    await Ti.App.Open({
      title: "i18n:account",
      position: "top",
      width: "6.4rem",
      height: "80%",
      textOk: null,
      textCancel: "i18n:close",
      comType: "TiForm",
      comConf: {
        data,
        fields: [
          {
            title: "ID",
            name: "id"
          },
          {
            title: "me-k-nickname",
            name: "nickname"
          },
          {
            title: "me-k-nm",
            name: "nm"
          },
          {
            title: "me-k-phone",
            name: "phone"
          },
          {
            title: "me-k-email",
            name: "email"
          },
          {
            title: "me-k-sex",
            name: "sex"
          }
        ]
      }
    })
  },
  //--------------------------------------------
  async doCheckMe({ commit, dispatch, getters, rootState }, {
    force = false,
    ok, fail, nophone, noemail
  } = {}) {
    //console.log("I am doCheckMe", {force, ok, fail, nophone})
    // console.log(" -urls", getters.urls)
    // Guard SiteId
    let siteId = rootState.siteId
    if (!siteId) {
      Ti.Alert("Without siteId!!!")
      return
    }

    // Get Back the Ticket
    let ticket = Ti.Storage.local.getString(`www-ticket-${siteId}`, "")

    // Check to remote
    commit("setLoading", true, { root: true })
    // Current Session ...
    let reo = getters.sessionState
    // Need to re-checkme from remote
    if (ticket && (force || !reo.ok)) {
      reo = await Ti.Http.get(getters.urls["checkme"], {
        params: {
          site: siteId,
          ticket
        },
        as: "json"
      })
    }
    commit("setLoading", false, { root: true })
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    // success
    if (reo.ok) {
      //console.log("checkme OK", reo)
      commit("setTicket", reo.data.ticket)
      commit("setExpi", reo.data.expi)
      commit("setMe", reo.data.me)

      // Check Phone
      if (nophone) {
        let me = reo.data.me
        if (!me.phone) {
          return await dispatch("doAction", [nophone, reo], { root: true })
        }
      }
      // Check Phone
      if (noemail) {
        let me = reo.data.me
        if (!me.email) {
          return await dispatch("doAction", [noemail, reo], { root: true })
        }
      }

      // Success
      if (ok) {
        return await dispatch("doAction", [ok, reo], { root: true })
      }
    }
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    // Fail
    else if (fail) {
      return await dispatch("doAction", [fail, reo], { root: true })
    }
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  },
  //--------------------------------------------
  async autoCheckmeOrAuthByWxghCode({ dispatch }, {
    codeKey = "code",
    codeTypeBy = "ct",
    force = false,
    fail, nophone, noemail
  } = {}) {
    //console.log("autoCheckmeOrAuthByWxghCode")
    dispatch("doCheckMe", {
      force,
      fail: {
        action: "auth/authByWxghCode",
        payload: {
          codeKey, codeTypeBy,
          //......................................
          fail,
          //......................................
          ok: async (reo = {}) => {
            let me = reo.data
            console.log("autoCheckmeOrAuthByWxghCode->ok:me", me)
            if (nophone) {
              if (!me.phone) {
                return await dispatch("doAction", [nophone, reo], { root: true })
              }
            }
            if (noemail) {
              if (!me.email) {
                return await dispatch("doAction", [noemail, reo], { root: true })
              }
            }
          }
          //......................................
        }
      }
    })
  },
  //--------------------------------------------
  async authByWxghCode({ commit, dispatch, getters, rootState }, {
    codeKey = "code",
    codeTypeBy = "ct",
    done, ok, fail, invalid, others
  } = {}) {
    // Guard code
    let code = rootState.page.params[codeKey]
    if (!code) {
      return
    }

    let codeType = rootState.page.params[codeTypeBy]

    //console.log("authByWxghCode", {codeType, code})

    // Guard SiteId
    let siteId = rootState.siteId
    if (!siteId) {
      Ti.Alert("Without siteId!!!")
      return
    }
    // Eval URL
    let url = getters.urls["login_by_wxcode"]

    let params = {
      site: siteId,
      code: code,
      ct: codeType
    }

    let reo = await Ti.Http.get(url, { params, as: "json" })
    console.log(reo)

    // Callback: done
    await dispatch("doAction", [done, reo], { root: true })

    // Success
    if (reo.ok && reo.data) {
      // save ticket
      Ti.Storage.local.set(
        `www-ticket-${siteId}`,
        reo.data.ticket
      )
      // Save session info
      commit("setTicket", reo.data.ticket)
      commit("setExpi", reo.data.expi)
      commit("setMe", reo.data.me)
      // Callback
      await dispatch("doAction", [ok, reo], { root: true })
    }
    // Fail 
    else {
      // Fail : invalid
      if (/^e.www.login.invalid/.test(reo.errCode)) {
        await dispatch("doAction", [invalid, reo], { root: true })
      }
      // Fail : others
      else {
        await dispatch("doAction", [others, reo], { root: true })
      }
      // Callback
      await dispatch("doAction", [fail, reo], { root: true })
    }
  },
  //--------------------------------------------
  async doAuth({ commit, dispatch, getters, rootState }, {
    type = "login_by_passwd",
    name, passwd,
    done, ok, fail, noexist, invalid, others
  } = {}) {
    // console.log("doAuth", name, passwd)

    // Guard SiteId
    let siteId = rootState.siteId
    if (!siteId) {
      Ti.Alert("Without siteId!!!")
      return
    }

    // Eval URL
    let url = getters.urls[type]

    // Prepare params
    let ticket = Ti.Storage.local.getString(`www-ticket-${siteId}`, "")
    let passKey = ({
      "login_by_passwd": "passwd",
      "login_by_phone": "vcode",
      "login_by_email": "vcode",
      "bind_phone": "vcode",
      "bind_email": "vcode"
    })[type]

    if (!passKey) {
      throw "Unknown auth type: " + type
    }

    let params = {
      site: siteId,
      name,
      [passKey]: passwd,
      ticket,
      ajax: true
    }

    // Call Remote
    let reo = await Ti.Http.post(url, { params, as: "json" })
    //console.log(reo)

    // Callback: done
    await dispatch("doAction", [done, reo], { root: true })

    // Success
    if (reo.ok && reo.data) {
      // save ticket
      Ti.Storage.local.set(
        `www-ticket-${siteId}`,
        reo.data.ticket
      )
      // Commit session to local
      commit("setTicket", reo.data.ticket)
      commit("setExpi", reo.data.expi)
      commit("setMe", reo.data.me)
      // Callback
      await dispatch("doAction", [ok, reo], { root: true })
    }
    // Fail 
    else {
      // Fail : noexist
      if ("e.www.login.noexists" == reo.errCode) {
        await dispatch("doAction", [noexist, reo], { root: true })
      }
      // Fail : invalid
      else if (/^e.www.login.invalid/.test(reo.errCode)) {
        await dispatch("doAction", [invalid, reo], { root: true })
      }
      // Fail : others
      else {
        await dispatch("doAction", [others, reo], { root: true })
      }
      // Callback
      await dispatch("doAction", [fail, reo], { root: true })
    }
  },
  //--------------------------------------------
  async doGetVcode({ getters, dispatch, rootState }, {
    type = "login_by_phone",
    scene = "auth",
    account, captcha,
    done, ok, fail, error
  } = {}) {
    console.log("getVcode", { type, scene, account, captcha })

    // Guard SiteId
    let siteId = rootState.siteId
    if (!siteId) {
      Ti.Alert("Without siteId!!!")
      return
    }

    // Eval URL
    let api = ({
      "login_by_phone": "get_sms_vcode",
      "login_by_email": "get_email_vcode",
      "bind_phone": "get_sms_vcode",
      "bind_email": "get_email_vcode",
      "phone": "get_sms_vcode",
      "email": "get_email_vcode"
    })[type]
    let url = getters.urls[api]

    if (!api || !url) {
      return await Ti.Toast.Open(`Invalid type: ${type}`, "error");
    }

    // Prepare params
    let params = {
      site: siteId,
      scene, account, captcha
    }

    // Call Remote
    let reo;
    try {
      reo = await Ti.Http.get(url, { params, as: "json" })
      //console.log(reo)

      // Success
      if (reo.ok && reo.data) {
        await dispatch("doAction", [ok, reo.data], { root: true })
      }
      // Fail 
      else {
        await dispatch("doAction", [fail, reo], { root: true })
      }
    }
    // Error
    catch (err) {
      reo = err
      // Customized error handling
      if (error) {
        await dispatch("doAction", [error, err], { root: true })
      } else {
        await Ti.Alert(err.responseText, "error");
      }
    }
    // Done
    finally {
      // Callback: done
      await dispatch("doAction", [done, reo], { root: true })
    }
  },
  //--------------------------------------------
  async doResetPasswd({ getters, dispatch, rootState }, {
    scene = "resetpasswd",
    account, vcode, newpwd, oldpwd,
    done, ok, fail
  } = {}) {
    //console.log("doResetPasswd", {scene, account, vcode, newpwd, oldpwd})

    // Guard SiteId
    let siteId = rootState.siteId
    if (!siteId) {
      Ti.Alert("Without siteId!!!")
      return
    }

    // Guard Ticket
    let ticket = rootState.auth.ticket
    let me = rootState.auth.me
    if (!me) {
      Ti.Alert("Without Login!!!")
      return
    }

    // Eval URL
    let url = getters.urls.resetpasswd

    if (!url) {
      console.error("doResetPasswd url is nil")
      return
    }

    // Prepare params
    let params = {
      site: siteId,
      ticket
    }
    let body = {
      account, vcode, newpwd, oldpwd,
    }

    // Call Remote
    let reo = await Ti.Http.post(url, {
      params,
      body: JSON.stringify(body),
      as: "json"
    }).catch(({ responseText }) => {
      return { ok: false, errCode: _.trim(responseText) }
    })
    //console.log(reo)

    // Callback: done
    await dispatch("doAction", [done, reo], { root: true })

    // Success
    if (reo.ok) {
      await dispatch("doAction", [ok, reo], { root: true })
    }
    // Fail 
    else {
      await dispatch("doAction", [fail, reo], { root: true })
    }
  },
  //--------------------------------------------
  async doLogout({ state, commit, dispatch, getters, rootState }, {
    done, ok, fail
  } = {}) {
    //console.log("doLogout")
    // Guard SiteId
    let siteId = rootState.siteId
    if (!siteId) {
      Ti.Alert("Without siteId!!!")
      return
    }

    // Confirm with user
    if (!(await Ti.Confirm("i18n:auth-logout-confirm"))) {
      return
    }

    // Always force remove
    Ti.Storage.local.remove(`www-ticket-${siteId}`)

    // No Session, ignore
    if (!getters.hasSession) {
      dispatch("invokeAction", fail, { root: true })
      return
    }

    // Eval URL
    let url = getters.urls["logout"]
    let params = {
      site: siteId,
      ticket: state.ticket
    }

    commit("setLoading", true, { root: true })

    // Call Remote
    let reo = await Ti.Http.get(url, { params, as: "json" })
    //console.log(reo)

    commit("setTicket", null)
    commit("setExpi", 0)
    commit("setMe", null)

    commit("setLoading", false, { root: true })

    // Callback: done
    await dispatch("doAction", [done, reo], { root: true })

    // Success
    if (reo.ok) {
      dispatch("doAction", [ok, reo], { root: true })
    }
    // Fail 
    else {
      dispatch("doAction", [fail, reo], { root: true })
    }
  }
  //--------------------------------------------
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-lbs-map.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/lbs/map/ti-lbs-map.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  inject: {
    '$vars': {default: {}}
  },
  /////////////////////////////////////////
  data : ()=>({
    myUpTime: undefined,  
    myWaitCooling: false,  
    myFullscreen : false,
    myMapCenter: undefined,
    myZoom: undefined,
    myMapType: undefined,
    apiLoaded: false
  }),
  /////////////////////////////////////////
  props : {
    // tencent|baidu|google ...
    "by" : {
      type : String,
      default : "tencent"
    },
    // Map security key pattern 
    // it will find the key from "$vars" which injected to the com.
    // default, if by=google, the mapKey in "$vars" should be "googleMapKey"
    "secretKey": {
      type: String,
      default: "${by}MapKey"
    },
    // All Map api support URL
    // key by 'by' prop
    "apiUrls": {
      type: Object,
      default: ()=>({
        "google": '!js://maps.googleapis.com/maps/api/js?key=${key}'
      })
    },
    // @see https://lbs.qq.com/javascript_v2/doc/maptypeid.html
    // @see http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference_3_0.html#a5b0
    // ROADMAP | SATELLITE | HYBRID | TERRAIN(google only)
    "mapType" : {
      type : String,
      default : "ROADMAP"
    },
    // Sometime, the lat/lng valued by integer
    // this prop defined how to translate them to float
    "autoFloat" : {
      type : Number,
      default : 10000000
    },
    // Map width
    "width" : {
      type : [String, Number],
      default : 400
    },
    // Map height
    "height" : {
      type : [String, Number],
      default : 400
    },
    "zoom" : {
      type : Number,
      default : 8
    },
    // The Coordinate System for input LatLng (center/value...)
    //  - WGS84 : Standard GPS 
    //  - BD09  : for Baidu Map
    //  - GCJ02 : (Mars) QQ/GaoDe/AliYun ...
    "coordinate" : {
      type : String,
      default : "WGS84"
    },
    // A LatLng Point Object or Polygon Array in map
    // Point - Map center will be it
    // Polygon - Auto count the map center
    "value" : {
      type : [Object, Array],
      default : null
    },
    // Display mode
    //  - auto  : base on the value
    //  - point : show marker on map by value
    //  - path  : show path on map by value
    //  - area  : show polygon on map by value
    "mode" : {
      type: String,
      default: "auto",
      validator: v=>/^(auto|point|path|area)$/.test(v)
    },
    "keepStateBy": {
      type: String,
      default: undefined
    },
    "cooling": {
      type: Number,
      default: 1200
    },
    "maxZoom": {
      type: Number,
      default: 22
    },
    "minZoom": {
      type: Number,
      default: 1
    },
    "infoBar": {
      type: Boolean,
      default: true
    },
    "iconSize": {
      type: Object,
      default: undefined
    },
    "iconSizeHoverScale": {
      type: Number,
      default: 1.3
    },
    "boundPadding": {
      type: [Object, Number],
      default: 10
    },
    "pointClickable": {
      type: Boolean,
      default: true
    },
    // Refer by goole map api: gestureHandling
    // https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions
    "gestureHandling": {
      type: String,
      default: "auto",
      validator: v=>/^(cooperative|greedy|none|auto)$/.test(v)
    },
    "clustering": {
      type: Object,
      default: undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //-------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-fullscreen": this.myFullscreen,
        "is-embed": !this.myFullscreen
      })
    },
    //-------------------------------------
    TopStyle() {
      if(!this.myFullscreen) {
        return Ti.Css.toStyle({
          width  : this.width,
          height : this.height
        })
      }
    },
    //-------------------------------------
    TheMapSecretKey() {
      let vnm = Ti.S.renderBy(this.secretKey, this)
      return _.get(this.$vars, vnm)
    },
    //-------------------------------------
    TheMapApiUrl() {
      let url = _.get(this.apiUrls, this.by)
      url = Ti.S.renderBy(url, {key:this.TheMapSecretKey})
      return url
    },
    //-------------------------------------
    TheGestureHandling() {
      if(this.myFullscreen){
        return "greedy"
      }
      return this.gestureHandling
    },
    //-------------------------------------
    ToggleIcon() {
      return this.myFullscreen
        ? "zmdi-fullscreen-exit"
        : "zmdi-fullscreen"
    },
    //-------------------------------------
    MapComType() {
      return `ti-lbs-map-${this.by}`
    },
    //-------------------------------------
    MapComConf() {
      return {
        "secretKey": this.TheMapSecretKey,
        "center"  : this.MapCenter,
        "mapType" : this.myMapType,
        "zoom"    : this.myZoom,
        "maxZoom" : this.maxZoom,
        "minZoom" : this.minZoom,
        "boundPadding": this.boundPadding,
        "gestureHandling" : this.TheGestureHandling,
        "clustering" : this.clustering,
        ...this.MapComConfByMode
      }
    },
    //-------------------------------------
    MapComConfByMode() {
      // Prepare mode functions
      let fns = {
        //.........................
        auto:(val)=>{
          if(_.isArray(val)) {
            return fns.path(val)
          }
          return fns.point(val)
        },
        //.........................
        point:(val)=>{
          // Show markers
          if(_.isArray(val)) {
            return {
              layers: [{
                type: "point",
                items: _.concat(val),
                iconSize: this.iconSize,
                iconSizeHoverScale: this.iconSizeHoverScale,
                clickable: this.pointClickable
              }]
            }
          }
          // Edit mode
          return {
            pinCenter: true
          }
        },
        //.........................
        path:(val)=>{
          if(!val)
            return {}
          return {
            layers: [{
              type: "path",
              items: _.concat(val),
              iconSize: this.iconSize
            }]
          }
        },
        //.........................
        area:(val)=>{
          if(!val)
            return {}
          return {
            layers: [{
              type: "area",
              items: _.concat(val),
              iconSize: this.iconSize
            }]
          }
        }
        //.........................
      }
      return fns[this.mode](this.LalValue)
    },
    //-------------------------------------
    TargetCoordinate() {
      return ({
        "tencent" : "GCJ02",
        "baidu"   : "BD09",
        "ali"     : "GCJ02"
      })[this.by] || "WGS84"
    },
    //-------------------------------------
    LalValue() {
      // Guard
      if(_.isEmpty(this.value)) {
        return {lat:39.908765655793395, lng:116.39748860418158}
      }
      // Polygon
      if(_.isArray(this.value)) {
        let list = []
        for(let it of this.value) {
          let lal = this.genLngLat(it)
          // Transform preview src
          let src = it.src
          if(it.obj, it.preview) {
            src = Ti.WWW.evalObjPreviewSrc(it.obj, it.preview)
          }
          list.push(_.assign({}, it, lal, {src}))
        }
        return list
      }
      // Point
      let lal = this.genLngLat(this.value)
      return _.assign({}, this.value, lal)
    },
    //-------------------------------------
    MapCenter() {
      if(this.myMapCenter) {
        return this.myMapCenter
      }
      // Guard
      if(!this.LalValue) {
        return
      }
      // Polygon
      if(_.isArray(this.LalValue)) {
        return Ti.GPS.getBounds(this.LalValue)
      }
      // Point
      return _.pick(this.LalValue, "lng", "lat")
    },
    //-------------------------------------
    MapActionBar() {
      return {
        items: [{
            className: "big-icon",
            icon: this.myFullscreen
              ? "im-minimize"
              : "im-maximize",
            action: ()=>this.myFullscreen = !this.myFullscreen
          }, {
            icon: "far-map",
            text: "i18n:map-type",
            altDisplay: [{
                icon: "fas-road",
                text: "i18n:map-roadmap",
                match: {myMapType:"ROADMAP"}
              }, {
                icon: "fas-satellite",
                text: "i18n:map-satellite",
                match: {myMapType:"SATELLITE"}
              }, {
                icon: "fas-globe-asia",
                text: "i18n:map-hybrid",
                match: {myMapType:"HYBRID"}
              }, {
                icon: "fas-drafting-compass",
                text: "i18n:map-terrain",
                match: {myMapType:"TERRAIN"}
              }],
            items: [{
                icon: "fas-road",
                text: "i18n:map-roadmap",
                highlight: {myMapType:"ROADMAP"},
                action: ()=>this.myMapType = "ROADMAP"
              }, {
                icon: "fas-globe-asia",
                text: "i18n:map-hybrid",
                highlight: {myMapType:"HYBRID"},
                action: ()=>this.myMapType = "HYBRID"
              }, {
                icon: "fas-satellite",
                text: "i18n:map-satellite",
                highlight: {myMapType:"SATELLITE"},
                action: ()=>this.myMapType = "SATELLITE"
              }, {
                icon: "fas-drafting-compass",
                text: "i18n:map-terrain",
                highlight: {myMapType:"TERRAIN"},
                action: ()=>this.myMapType = "TERRAIN"
              }]
          }, {
            className: "big-icon",
            icon: "im-plus",
            wait: 1200,
            action: ()=>this.zoomMap(1)
          }, {
            className: "big-icon",
            icon: "im-minus",
            wait: 1200,
            action: ()=>this.zoomMap(-1)
          }],
        status: this
      }
    },
    //-------------------------------------
    CoolingIcon() {
      if(this.myUpTime > 0) {
        if(this.myWaitCooling){
          return "fas-spinner fa-spin"
        }
        return "zmdi-check-circle"
      }
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //-------------------------------------
    OnCenterChange(lal) {
      this.myMapCenter = lal
      if(this.MapComConfByMode.pinCenter) {
        this.myUpTime = Date.now()
        if(!this.myWaitCooling) {
          this.checkUpdate()
        }
      }
    },
    //-------------------------------------
    OnZoomChange(zoom) {
      this.myZoom = zoom
      this.saveState({zoom})
    },
    //-------------------------------------
    zoomMap(offset) {
      let zoom = this.myZoom + offset
      if(_.inRange(zoom, this.minZoom, this.maxZoom+1)) {
        this.myZoom = zoom
        this.saveState({zoom})
      }
    },
    //-------------------------------------
    isCoolDown() {
      if(!this.myUpTime) {
        return true
      }
      let du = Date.now() - this.myUpTime
      return du > this.cooling
    },
    //-------------------------------------
    checkUpdate() {
      if(this.isCoolDown()) {
        let lal = _.pick(this.myMapCenter, "lng", "lat")
        //console.log("notify change", lal)
        this.$notify("change", lal)
        this.myWaitCooling = false
        _.delay(()=>{
          this.myUpTime = undefined
        }, 1000)
      }
      // Wait
      else {
        this.myWaitCooling = true
        let du = Date.now() - this.myUpTime
        //console.log("wait cooling", this.cooling, du)
        _.delay(()=>{
          this.checkUpdate()
        }, this.cooling)
      }
    },
    //-------------------------------------
    autoLatLng(val) {
      if(val > 360) {
        return val / this.autoFloat
      }
      return val
    },
    //-------------------------------------
    genLngLat({lat, lng}={}) {
      lat = this.autoLatLng(lat)
      lng = this.autoLatLng(lng)

      // Transform coordinate
      let from = this.coordinate
      let to   = this.TargetCoordinate

      if(from == to) {
        return {lat, lng}
      }

      // find the trans-methods
      let methodName = `${from}_TO_${to}`

      // like `WGS84_TO_BD09` or `WGS84_TO_GCJ02`
      let fn = Ti.GPS[methodName]

      return fn(lat, lng)
    },
    //-------------------------------------
    saveState(st) {
      if(this.keepStateBy) {
        let state = Ti.Storage.session.getObject(this.keepStateBy)
        _.assign(state, st)
        Ti.Storage.session.setObject(this.keepStateBy, state)
      }
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "value": function() {
      if(_.isUndefined(this.myUpTime)) {
        this.myMapCenter = undefined
      }
    },
    "myFullscreen": function(newVal, oldVal) {
      if(!_.isEqual(newVal, oldVal)) {
        this.$notify("change:fullscreen", newVal)
      }
    }
  },
  //////////////////////////////////////////
  created: function() {
    // Init private data
    this.myMapType = this.mapType
    this.myZoom = this.zoom
    if(this.keepStateBy) {
      let state = Ti.Storage.session.getObject(this.keepStateBy)
      this.myMapType = state.mapType || this.mapType
      this.myZoom = state.zoom || this.zoom
    }
  },
  //////////////////////////////////////////
  mounted: async function() {
    // Load Map API
    let url = this.TheMapApiUrl
    if(url) {
      //console.log("TiLoad", url)
      await Ti.Load(url)
      this.apiLoaded = true
    }
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'table-row.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/table_old/com/table-row/table-row.mjs'] = (function(){
/////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////
  props : {
    "indent" : {
      type : Number,
      default : 0
    },
    "icon" : {
      type : [Boolean, String],
      default : null
    },
    "fields" : {
      type : Array,
      default : ()=>[]
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    TopClass() {
      //console.error("row TopClass begin", this.index, this.rowId, this.tiComId)
      let re = this.getListItemClass({
        "is-fake"   : this.item.fake
      }, `row-indent-${this.indent}`)
      //console.log("row TopClass end", this.index, this.rowId, this.tiComId)
      return re
    },
    //-----------------------------------------------
    hasRealIcon() {
      return this.icon && _.isString(this.icon)
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    OnClickIcon($event) {
      this.$notify("icon", {
        rowId  : this.rowId,
        shift  : $event.shiftKey,
        toggle : ($event.ctrlKey || $event.metaKey)
      })
    }
    //-----------------------------------------------
  }
  ///////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-manager-methods.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['/a/load/wn.manager/wn-manager-methods.mjs'] = (function(){
const _M = {
  //.........................................
  async reloadMain() {
    //console.log("reloadMain")
    // Check meta
    let meta = this.meta
    if (!meta) {
      return await Ti.Toast.Open("i18n:wn-manager-no-meta", "warn")
    }

    // Guard loading
    if (this.isLoading) {
      //console.log("!!!")
      return await Ti.Toast.Open("i18n:wn-manager-is-loading", "warn")
    }
    // Mark loading
    this.loading = true
    this.comType = "ti-loading"
    this.comConf = {}
    try {
      //..................................
      // Get back the viewName from hash
      // User can use `#!text-editor` to force open any view
      let m = /^#!(.+)$/.exec(window.location.hash)
      let viewName = m ? m[1] : null

      //..................................
      // Prepare to read view detail from server
      let cmdText;
      if (viewName) {
        cmdText = `ti views -cqn -name '${viewName}'`
      }
      // Query by current object
      else {
        cmdText = `ti views -cqn id:${meta.id}`
      }
      //..................................
      // Load the main view
      let viewInfo = await Wn.Sys.exec2(cmdText, { as: "json" })
      let $app = Ti.App(this)
      let view = await $app.loadView(viewInfo, meta)
      //console.log("after loadView", view)
      //..................................
      if (Ti.IsInfo("app/wn.manager")) {
        console.log("TiView Loaded:", view)
      }
      //....................................
      // then try to unregisterModule safely
      // if(this.view && this.view.modType) {
      //   console.log("depose modType", this.view.modType)
      //   try{
      //     this.$store.unregisterModule("main")
      //   }catch(E){
      //     console.error("Error when unregisterModule", E)
      //   }
      // }
      //..................................
      // register main module
      if (view && view.modType) {
        if (this.Main) {
          this.$store.unregisterModule("main")
        }
        //
        // Main module
        //
        if (view && view.mod) {
          this.$store.registerModule("main", view.mod)
        }

        // 
        // Extends modules
        //
        if (this.view && !_.isEmpty(this.view.modules)) {
          for (let moName in this.view.modules) {
            this.$store.unregisterModule(moName)
          }
        }
        if (view && view.modules) {
          for (let moName in view.modules) {
            let mod = view.modules[moName]
            this.$store.registerModule(moName, mod)
          }
        }

        // Reload mod data
        await $app.dispatch("main/reload", meta)
      }
      //..................................
      this.comType = view.comName
      this.comIcon = view.comIcon
      this.comConf = view.comConf
      this.view = view
      this.myMessage = null
      this.myIndicator = null
      this.mainViewStatus = {}
      this.OnUpdateActions(view.actions)
      this.$nextTick(() => {
        this.myViewReady = true
      })
    }
    // Clean
    finally {
      this.loading = false
    }
  },
  //.........................................
  async reloadAncestors() {
    if (this.hasMeta) {
      // this.ancestors = await Wn.Io.loadAncestors("id:"+this.MetaId)
      // this.parent = _.last(this.ancestors)
      await Ti.App(this).dispatch("axis/reload", this.meta)
    }
  },
  //.........................................
  async reloadSidebar() {
    let cmdText = Wn.Session.env("SIDEBAR_BY") || "ti sidebar -cqn";
    let reo = await Wn.Sys.exec(cmdText, { as: "json" });
    this.sidebar = reo.sidebar
    this.sidebarStatusStoreKey = reo.statusStoreKey
  },
  //.........................................
  async reloadPrivilege() {
    this.privilege = await Wn.Sys.exec("www pvg -cqn", { as: "json" });
  },
  //.........................................
  async reloadCurrent() {
    let r0 = Ti.App(this).dispatch("current/reload")
    let r1 = this.reloadSidebar()
    let r2 = this.reloadPrivilege()
    let r3 = this.reloadAncestors()
    return await Promise.all([r0, r1, r2, r3])
  },
  //--------------------------------------------
  async openCurrentMetaEditor() {
    // Guard
    if (!this.meta) {
      return await Ti.Toast.Open("i18n:empty-data", "warn")
    }
    //.........................................
    // For current selected
    //.........................................
    if (this.meta) {
      // Edit current meta
      let reo = await Wn.EditObjMeta(this.meta, {
        fields: "default", autoSave: false
      })

      // Cancel the editing
      if (_.isUndefined(reo)) {
        return
      }

      // Update the current editing
      let { updates } = reo
      if (!_.isEmpty(updates)) {
        await this.reloadCurrent()
      }
      return
    }
  },
  //--------------------------------------------
  async openCurrentPrivilege() {
    let meta = this.meta

    if (!meta) {
      await Ti.Toast.Open("i18n:nil-obj")
      return
    }

    let newMeta = await Wn.EditObjPvg(meta, {
      organization: "~/.domain/organization.json"
    })

    // Update to current list
    if (newMeta) {
      await this.reloadCurrent()
    }

    return newMeta
  },
  //.........................................
  async execEvent(eventName, payload, dftCommand) {
    let cmd = _.get(this.view.events, eventName) || dftCommand
    await Ti.App(this).exec(cmd, payload)
  },
  //.........................................
  getDocumentTitle(meta) {
    let title = Ti.Util.getFallback(meta, "title", "nm", "id")
    return Ti.Util.explainObj(meta, title)
  },
  //.........................................
  updateDocumentTitle(meta) {
    let title = this.getDocumentTitle(meta)
    if (title) {
      title = Ti.I18n.text(title)
      document.title = title
    }
    return title
  },
  //.........................................
  pushHistory(meta) {
    // Push history to update the browser address bar
    //console.log("pushHistory", meta.id)
    let his = window.history
    if (his && meta) {
      // Done push duplicate state
      if (his.state && his.state.id == meta.id) {
        //console.log("pushHistory ~ignore~")
        return
      }
      // Push to history stack
      let newLink = Wn.Util.getAppLinkStr(meta)
      let title = this.updateDocumentTitle(meta)
      let obj = _.cloneDeep(meta)
      //console.log(title , "->", newLink)
      his.pushState(obj, title, newLink)
      // Update the Title
      document.title = Ti.I18n.text(title);
    }
  }
  //.........................................
}
return _M;;
})()
// ============================================================
// EXPORT 'site-config-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/hmaker/website/mod/site-config/site-config-actions.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //----------------------------------------
  async reload({state, commit}, meta) {
    if(state.status.reloading
      || state.status.saving){
      return
    }

    
  }
  //----------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-input-daterange.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/daterange/ti-input-daterange.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data: () => ({
    "runtime": null,
    "status": "collapse"
  }),
  ////////////////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "value": {
      type: [String, Number, Date, Array],
      default: null
    },
    "valueType": {
      type: String,
      default: "ms-range",
      validator: (v) =>
        /^(ms-(array|range)|ds-(array|range)|date-array)$/.test(v)
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "canInput": {
      type: Boolean,
      default: true
    },
    "matrixCount": {
      type: Number,
      default: 2
    },
    "monthFormat": {
      type: String,
      default: "yyyy-MM-dd"
    },
    "beginYear": {
      type: [Number, String],
      default: 1970
    },
    "endYear": {
      type: [Number, String],
      default: new Date().getFullYear() + 1
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------

    "icon": {
      type: String,
      default: "fas-calendar-alt"
    },
    "format": {
      type: String,
      default: "yyyy-MM-dd HH:mm:ss"
    },
    "placeholder": {
      type: String,
      default: "i18n:blank-date-range"
    },
    "hideBorder": {
      type: Boolean,
      default: false
    },
    "statusIcons": {
      type: Object,
      default: () => ({
        collapse: "zmdi-chevron-down",
        extended: "zmdi-chevron-up"
      })
    },
    //-----------------------------------
    // Measure
    //-----------------------------------
    "width": {
      type: [Number, String],
      default: "3rem"
    },
    "height": {
      type: [Number, String],
      default: undefined
    },
    "dropWidth": {
      type: [Number, String],
      default: null
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName(this.className);
    },
    //------------------------------------------------
    isCollapse() {
      return "collapse" == this.status;
    },
    isExtended() {
      return "extended" == this.status;
    },
    //--------------------------------------
    theValue() {
      if (_.isEmpty(this.value)) {
        return null;
      }
      if (_.isString(this.value)) {
        let str = _.trim(this.value);
        let m = /^[[(](.+)[\])]$/.exec(str);
        if (m) {
          str = _.trim(m[1]);
        }
        let ss = Ti.S.toArray(str, { sep: "," });
        if (ss.length > 0) {
          return Ti.Types.toDate(ss);
        }
        return Ti.Types.toDate(str);
      }
      return Ti.Types.toDate(this.value);
    },
    //--------------------------------------
    theDate() {
      if (_.isArray(this.theValue) && !_.isEmpty(this.theValue)) {
        return Ti.Types.toDate(this.theValue[0]);
      }
      if (this.theValue) {
        return Ti.Types.toDate(this.theValue);
      }
    },
    //--------------------------------------
    theRangeInMs() {
      if (!this.theDate) {
        return [];
      }
      // Move to 00:00:00
      let dt0 = new Date(this.theDate);
      // Define the dt1
      let dt1;
      if (_.isArray(this.theValue) && this.theValue.length > 1) {
        dt1 = Ti.Types.toDate(this.theValue[1]);
      }
      // The End of the Day
      else {
        dt1 = new Date(dt0);
      }
      // Make the range
      let msRange = [dt0.getTime(), dt1.getTime()].sort();

      // dt0 start of the day
      dt0 = Ti.DateTime.setTime(new Date(msRange[0]));
      // dt1 end of the day
      dt1 = Ti.DateTime.setDayLastTime(new Date(msRange[1]));

      // rebuild the range
      return [dt0.getTime(), dt1.getTime()];
    },
    //------------------------------------------------
    theRange() {
      if (_.isEmpty(this.theRangeInMs)) {
        return [];
      }
      return [new Date(this.theRangeInMs[0]), new Date(this.theRangeInMs[1])];
    },
    //------------------------------------------------
    theDropRange() {
      return this.runtime || this.theRange;
    },
    //------------------------------------------------
    theRangeValue() {
      return this.formatRangeValue(this.theRange, {
        valueType: "ds-array",
        format: "yyyy-MM-dd",
        collapse: true
      }).join(", ");
    },
    //------------------------------------------------
    theRangeText() {
      if (!_.isEmpty(this.theRange)) {
        let dt0 = this.theRange[0];
        let dt1 = this.theRange[1];
        let yy0 = dt0.getFullYear();
        let MM0 = dt0.getMonth();
        let dd0 = dt0.getDate();
        let yy1 = dt1.getFullYear();
        let MM1 = dt1.getMonth();
        let dd1 = dt1.getDate();
        let MA0 = Ti.DateTime.getMonthAbbr(MM0);
        let MA1 = Ti.DateTime.getMonthAbbr(MM1);
        let MT0 = Ti.I18n.get(MA0);
        let MT1 = Ti.I18n.get(MA1);

        MM0++;
        MM1++; // Month change to 1 base

        let vars = {
          yy0,
          yy1,
          MM0,
          MM1,
          dd0,
          dd1,
          MA0,
          MA1,
          MT0,
          MT1
        };
        // Beyond year
        if (yy0 != yy1) {
          return Ti.I18n.getf("cal.d-range-beyond-years", vars);
        }
        // Beyond month
        if (MM0 != MM1) {
          return Ti.I18n.getf("cal.d-range-beyond-months", vars);
        }
        // Beyond day
        if (dd0 != dd1) {
          return Ti.I18n.getf("cal.d-range-beyond-days", vars);
        }
        // Same day
        return Ti.I18n.getf("cal.d-range-in-same-day", vars);
      }
    },
    //------------------------------------------------
    theInputValue() {
      if (this.isExtended) {
        return this.theRangeValue;
      }
      return this.theRangeText;
    },
    //------------------------------------------------
    theStatusIcon() {
      return this.statusIcons[this.status];
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    applyRuntime() {
      if (this.runtime) {
        let rg = this.runtime;
        this.runtime = null;
        let rg2 = this.formatRangeValue(rg);
        this.$notify("change", rg2);
      }
    },
    //-----------------------------------------------
    doExtend() {
      this.status = "extended";
    },
    //-----------------------------------------------
    doCollapse({ escaped = false } = {}) {
      this.status = "collapse";
      // Drop runtime
      if (escaped) {
        this.runtime = null;
      }
      // Apply Changed for runtime
      else {
        this.applyRuntime();
      }
    },
    //------------------------------------------------
    onInputFocused() {
      this.doExtend();
    },
    //------------------------------------------------
    onChanged(val) {
      let rg = this.parseDateRange(val);
      // Empty Range
      if (_.isEmpty(rg)) {
        this.$notify("change", null);
      }
      // Format the Range
      else {
        let rg2 = this.formatRangeValue(rg);
        this.$notify("change", rg2);
      }
    },
    //------------------------------------------------
    onClickStatusIcon() {
      // extended -> collapse
      if (this.isExtended) {
        this.doCollapse();
      }
      // collapse -> extended
      else {
        this.doExtend();
      }
    },
    //------------------------------------------------
    onDateRangeChanged(rg) {
      this.runtime = rg;
    },
    //------------------------------------------------
    parseDateRange(val) {
      console.log("parseDateRange", val);
      // Empty value as null
      if (_.isEmpty(val)) {
        return [];
      }
      // Parsed value
      let ss = val.split(",");
      // Empty
      if (_.isEmpty(ss)) {
        return [];
      }
      // One date
      if (ss.length == 1) {
        let dt0 = Ti.Types.toDate(ss[0]);
        Ti.DateTime.setTime(dt0);
        let dt1 = new Date(dt0.getTime());
        Ti.DateTime.setDayLastTime(dt1);
        return [dt0, dt1];
      }
      // range
      let dt0 = Ti.Types.toDate(ss[0]);
      Ti.DateTime.setTime(dt0);
      let dt1 = Ti.Types.toDate(ss[1]);
      Ti.DateTime.setDayLastTime(dt1);
      return [dt0, dt1].sort((dt0, dt1) => {
        return dt0.getTime() - dt1.getTime();
      });
    },
    //------------------------------------------------
    formatRangeValue(range, { valueType, format, collapse = false } = {}) {
      //console.log("formatRangeValue", range)
      let [d0, d1] = range || [];
      if (!d0) {
        return [];
      }
      if (!d1) {
        d1 = new Date(d0);
      }
      // Padding date
      Ti.DateTime.setTime(d0);
      Ti.DateTime.setDayLastTime(d1);
      // Check the value type
      valueType = valueType || this.valueType;
      format = format || this.format;
      // as range
      let func = {
        "ms-range": () => {
          return `[${d0.getTime()},${d1.getTime()}]`;
        },
        "ms-array": () => {
          return [d0.getTime(), d1.getTime()];
        },
        "ds-range": () => {
          return (
            "[" +
            [
              Ti.Types.formatDate(d0, format),
              Ti.Types.formatDate(d1, format)
            ].join(",") +
            "]"
          );
        },
        "ds-array": () => [
          Ti.Types.formatDate(d0, format),
          Ti.Types.formatDate(d1, format)
        ],
        "date-array": () => [d0, d1]
      }[valueType];
      // As array
      let re = func();

      if (collapse) {
        if (re[0] == re[1]) return [re[0]];
      }
      return re;
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'auth-passwd.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/auth/passwd/auth-passwd.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////////
  data : ()=>({
    "myPassInputType": "password",
    "myForm" : {
      "name"  : null,
      "vcode" : null,
      "passwd_old" : null,
      "passwd_new" : null,
      "passwd_ren" : null
    },
    "myPassTip": -1,
    "myMode"  : "passwd",
    // delay to get the next captcha to prevent robot
    "delay" : -1,
    "myResetResult": null,
    "doing": false
  }),
  ///////////////////////////////////////////////////////
  props : {
    // - "passwd"
    // - "phone"
    // - "email"
    "mode" : {
      type : String,
      default : "passwd"
    },
    "allowModes": {
      type: Object,
      default: ()=>({
        "passwd" : true,
        "phone"  : true,
        "email"  : true
      })
    },
    "captcha" : {
      type : String,
      //required : true,
      default : null
    },
    "scenes" : {
      type : Object,
      default: ()=>({
        "robot"  : "robot",
        "passwd" : "resetpasswd",
        "email"  : "resetpasswd",
        "phone"  : "resetpasswd"
      })
    },
    // The interval of get capche to prevent robot
    // (in second)
    "getDelay" : {
      type : Number,
      default : 60
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //---------------------------------------------------
    PasswdClass() {

    },
    //---------------------------------------------------
    TheAllowModes() {
      return Ti.Util.truthyKeys(this.allowModes)
    },
    //---------------------------------------------------
    isByVode() {
      return "passwd" != this.myMode
    },
    //---------------------------------------------------
    ModeTitle() {
      return `i18n:auth-reset-passwd-by-${this.myMode}`
    },
    //---------------------------------------------------
    VCodeNameTip() {
      return `i18n:auth-reset-passwd-by-${this.myMode}-tip`
    },
    //---------------------------------------------------
    VCodeCodeTip() {
      if("email" == this.myMode) {
        return "i18n:auth-email-vcode"
      }
      return "i18n:auth-phone-vcode"
    },
    //---------------------------------------------------
    VCodeGetTip() {
      if("email" == this.myMode) {
        return "i18n:auth-email-vcode-get"
      }
      return "i18n:auth-phone-vcode-get"
    },
    //---------------------------------------------------
    PasswdInputTypeIcon() {
      return ({
        "password": "fas-eye-slash",
        "text": "fas-eye"
      })[this.myPassInputType]
    },
    //---------------------------------------------------
    AltModes() {
      let list = []
      for(let md of this.TheAllowModes) {
        if(md != this.myMode) {
          list.push({
            text : `i18n:auth-reset-passwd-by-${md}`,
            mode : md
          })
        }
      }
      return list
    },
    //---------------------------------------------------
    hasAltModes() {
      return !_.isEmpty(this.AltModes)
    },
    //---------------------------------------------------
    PasswdTipBar() {
      let items = []
      for(let i=1; i<=5; i++) {
        items.push({
          text: `i18n:passwd-sl-${i}`,
          className: (i>this.myPassTip?"is-off":"is-on")
        })
      }
      return items;
    },
    //---------------------------------------------------
    FormStatus() {
      // passwd: Lake params
      if("passwd" == this.myMode) {
        if(!_.trim(this.myForm.passwd_old)
          || !_.trim(this.myForm.passwd_new)
          || !_.trim(this.myForm.passwd_ren)) {
          return "lack"
        }
      }
      // vcode: Lake params
      else if(!_.trim(this.myForm.name)
          || !_.trim(this.myForm.vcode)
          || !_.trim(this.myForm.passwd_new)
          || !_.trim(this.myForm.passwd_ren)) {
        return "lack"
      }

      // vcode: new password too short
      if(this.myForm.passwd_new.length < 6) {
        return "short"
      }

      // Check the chart, must in 0x21[33](!) - 0x7E[126](~)
      for(let c of this.myForm.passwd_new) {
        let cd = c.charCodeAt(0)
        if(cd > 126 || cd < 33) {
          return "invalid"
        }
      }

      // two password unmatched
      if(this.myForm.passwd_new != this.myForm.passwd_ren) {
        return "unmatch"
      }

      return "ready"
    },
    //---------------------------------------------------
    SubmitBtnText() {
      return `i18n:auth-reset-passwd-btn-${this.FormStatus}`
    },
    //---------------------------------------------------
    SubmitBtnClass() {
      return `is-${this.FormStatus}`
    },
    //---------------------------------------------------
    ResetOK() {
      return _.get(this.myResetResult, "ok") ? true : false
    },
    //---------------------------------------------------
    ResetDoneClass() {
      return this.ResetOK
        ? 'is-ok'
        : 'is-fail'
    },
    //---------------------------------------------------
    ResetDoneIcon() {
      return this.ResetOK
        ? "im-check-mark-circle"
        : "im-warning"
    },
    //---------------------------------------------------
    ResetDoneText() {
      return this.ResetOK
        ? "i18n:auth-reset-passwd-ok"
        : _.get(this.myResetResult, "errCode")
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods :{
    //---------------------------------------------------
    OnChangeMode({mode}) {
      this.myMode = mode
    },
    //---------------------------------------------------
    OnTogglePasswdInputType() {
      this.myPassInputType = ({
        "password": "text",
        "text": "password"
      })[this.myPassInputType]
    },
    //---------------------------------------------------
    OnResetAgain() {
      this.myResetResult=null
      _.assign(this.myForm, {
        "name"  : null,
        "vcode" : null,
        "passwd_old" : null,
        "passwd_new" : null,
        "passwd_ren" : null
      })
    },
    //---------------------------------------------------
    OnSubmit() {
      if("ready" == this.FormStatus) {
        this.doing = true
        this.$notify("passwd:reset", {
          mode  : this.myMode,
          scene :  _.get(this.scenes, this.myMode),
          account : _.trim(this.myForm.name),
          vcode   : _.trim(this.myForm.vcode),
          oldpwd  : _.trim(this.myForm.passwd_old),
          newpwd  : _.trim(this.myForm.passwd_new),
          done: (reo)=>{
            this.doing = false
            this.myResetResult = reo
          }
        })
      }
    },
    //---------------------------------------------------
    async OnGetVcode() {
      let name = _.trim(this.myForm.name)
      if(!name) {
        Ti.Toast.Open(`i18n:auth-reset-passwd-lack-${this.myMode}`, "warn")
        return 
      }

      let vars = {
        scene   : this.scenes.robot,
        account : name
      }

      // Get the captcha
      let src = Ti.S.renderBy(this.captcha, vars)
      let captcha = await Ti.Captcha(src)
      if(!captcha)
        return

      // Mask GUI
      let toast = Ti.Toast.Open({
        icon : "fas-spinner fa-spin",
        content : "i18n:auth-sending-vcode",
        position : "center",
        duration : 0,
        closer : false
      })

      // Process to get vcode
      this.$notify("get:vcode", {
        type: this.myMode,
        scene: _.get(this.scenes, this.myMode),
        account: name,
        captcha,
        done: ()=>{
          toast.close()
          this.myForm.vcode = null
        },
        ok : ({duInMin=60}={})=>{
          this.delay = this.getDelay
          Ti.Toast.Open({
            type : "success",
            position : "top",
            content : "i18n:auth-sent-ok",
            vars : {
              ta  : Ti.I18n.get(`auth-ta-${this.myMode}`),
              by  : Ti.I18n.get(`auth-ta-by-${this.myMode}`),
              min : duInMin
            },
            duration : 5000
          })
        },
        fail : ({errCode, data}={})=> {
          Ti.Toast.Open({
            type : "warn",
            position : "top",
            content : `i18n:${errCode}`,
            duration : 5000
          })
        }
      })
    },
    //---------------------------------------------------
    evalCurrentMode(mode) {
      //console.log("evalCurrentMode", mode)
      // Find the first allowed modes
      if(!_.get(this.allowModes, mode)) {
        if(_.isEmpty(this.TheAllowModes)) {
          throw `mode[${mode}] push me to corner!`
        }
        return _.first(this.TheAllowModes)
      }
      // The mode seems ok
      return mode
    },
    //---------------------------------------------------
    updatePasswordTip(passwd=this.myForm.passwd_new) {
      if(_.isEmpty(passwd) || !_.isString(passwd) || passwd.length < 6) {
        this.myPassTip = -1
        return
      }
      // Score the passwd
      let score = 0
      //  > 8
      if(passwd.length > 8) {
        score += 1
      }
      // Count char type
      let map = {
        a_z: 0,
        A_Z: 0,
        dig: 0,
        spe: 0
      }
      for(let i=0; i<passwd.length; i++) {
        let code = passwd.charCodeAt(i)
        // a-z
        if(code>=97 && code<=122) {
          map.a_z = 1
        }
        // A-Z
        else if(code>=65 && code<=90) {
          map.A_Z = 1
        }
        // 0-9
        else if(code>=48 && code<=57) {
          map.dig = 1
        }
        // Special char
        else if(code>=20 && code<=128){
          map.spe = 1
        }
        // Invalid char
        else {
          this.myPassTip = -2
          return
        }
      }
      // Count score
      score += _.sum(_.values(map))

      this.myPassTip = score
    },
    //---------------------------------------------------
    syncCurrentMode() {
      this.myMode = this.evalCurrentMode(this.mode)
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  watch: {
    "mode": {
      handler: "syncCurrentMode"
    },
    "allowModes": {
      handler: "syncCurrentMode"
    },
    "myForm.passwd_new": "updatePasswordTip"
  },
  ///////////////////////////////////////////////////////
  mounted : function() {
    this.syncCurrentMode()
    // count the secound
    this.__H = window.setInterval(()=>{
      if(this.delay>=0)
        this.delay --
    }, 1000)
  },
  ///////////////////////////////////////////////////////
  beforeDestroy : function() {
    if(this.__H) {
      window.clearInterval(this.__H)
    }
  }
  ///////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'nav-links.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/nav/links/nav-links.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data: ()=>({
    myOpenedIds: {}
  }),
  /////////////////////////////////////////
  props : {
    "align" : {
      type : String,
      default : "left",
      validator: v => /^(left|center|right)$/.test(v)
    },
    "spacing" : {
      type : String,
      validator: v => /^(tiny|comfy|wide)$/.test(v)
    },
    "border" : {
      type : String,
      default : "solid",
      validator: v => /^(none|solid|dashed|dotted)$/.test(v)
    }
  },
  /////////////////////////////////////////
  computed : {
    //------------------------------------
    TopClass() {
      return this.getTopClass(
        `is-spacing-${this.spacing}`,
        `is-align-${this.align}`,
        ()=> {
          if(this.border)
            return `is-border-${this.border}`
        }
      )
    }
    //------------------------------------
  },
  /////////////////////////////////////////
  methods : {
    //------------------------------------
    OnChangeGroupOpened({idPath, opened}) {
      let ids = {}
      for(let id of idPath) {
        ids[id] = true
      }
      if(!opened) {
        ids[_.last(idPath)] = false
      }
      this.myOpenedIds = ids
    }
    //------------------------------------
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-obj-form-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/form/wn-obj-form-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  "fuse" : {
    type : Object,
    default : ()=>({
      key  : "wn-obj-form",
      noti : undefined
    })
  },
  // {method : "dispatch", target : "main/onChanged"}
  "setDataBy" : {
    type : [String, Object, Boolean],
    default : undefined
  },
  // {method : "dispatch", target : "main/changeMeta"}
  "updateBy" : {
    type : [String, Object, Boolean],
    default : undefined
  },
  // {method : "commit", target : "main/setFieldStatus"}
  "setFieldStatusBy" : {
    type : [String, Object, Boolean],
    default : undefined
  },
  // Load fields setting 
  "fields" : {
    type : [String, Array, Function],
    default : ()=>[]
  },
  // Load fields setting 
  "data" : {
    type : [String, Object],
    default : undefined
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-gui.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/gui/ti-gui.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////
  provide: function () {
    return {
      "$gui": this
    };
  },
  /////////////////////////////////////////
  data: () => ({
    $inner: undefined,
    myLayout: {},
    myShown: {},
    myViewportWidth: 0,
    myViewportHeight: 0,
    myBlockMap: {},
    myPanelVisibles: {}
  }),
  /////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "layout": {
      type: Object,
      default: () => ({
        desktop: {},
        tablet: "desktop",
        phone: "desktop"
      })
    },
    "schema": {
      type: Object,
      default: () => ({})
    },
    "activeElement": {
      type: [Element, Object] /*null type is Object*/
    },
    "shown": {
      type: Object,
      default: () => ({})
    },
    "vars": {
      type: Object,
      default: () => ({})
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "defaultFlex": {
      type: String,
      default: undefined,
      validator: (v) =>
        _.isUndefined(v) || /^(nil|auto|grow|shrink|both|none)$/.test(v)
    },
    "defaultOverflow": {
      type: String,
      default: undefined,
      validator: (v) => _.isUndefined(v) || /^(auto|none|fill|cover)$/.test(v)
    },
    "defaultComClass": {
      type: String,
      default: "ti-fill-parent"
    },
    "keepShownTo": {
      type: String,
      default: undefined
    },
    "actionStatus": {
      type: Object,
      default: () => ({})
    },
    "shownEmitName": {
      type: String,
      default: undefined
    },
    "shownNotifyName": {
      type: String,
      default: undefined
    },
    "canLoading": {
      type: Boolean,
      default: false
    },
    "hideWhenLoading": {
      type: Boolean,
      default: false
    },
    "maskWhenLoading": {
      type: Boolean,
      default: true
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    // value should be prop of ti-loading
    "loadingAs": {
      type: Object,
      default: undefined
    },
    "loading": {
      type: [Boolean, String],
      default: false
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-loading": this.isLoading
      });
    },
    //--------------------------------------
    LayoutType() {
      return _.get(this.myLayout, "type");
    },
    //--------------------------------------
    isShowMainArea() {
      if (this.isLoading && this.hideWhenLoading) {
        return false;
      }
      return true;
    },
    //--------------------------------------
    BlockNames() {
      if (!this.layout) {
        return {};
      }
      return this.joinBlockNames({}, this.layout.blocks);
    },
    //--------------------------------------
    ThePanels() {
      let list = [];

      // Join Global Panels
      this.joinThePanels(list, this.layout.panels, "G");

      // Join Current Mode Panels
      if (this.layout != this.myLayout) {
        this.joinThePanels(list, this.myLayout.panels, this.viewportMode);
      }

      // Done
      return list;
    },
    //--------------------------------------
    TheShown() {
      return this.keepShownTo ? this.myShown : this.shown;
    },
    //--------------------------------------
    isLoading() {
      return this.canLoading && this.loading ? true : false;
    },
    //--------------------------------------
    TheLoading() {
      let as = this.loadingAs || {};
      if (_.isString(this.loading)) {
        if (as[this.loading]) {
          return as[this.loading];
        }
      }
      let keys = Ti.Util.truthyKeys(this.actionStatus);
      for (let key of keys) {
        let val = this.actionStatus[key];
        if (_.isObject(val)) {
          return val;
        }
        if (as[key]) {
          return as[key];
        }
      }
      if (as.reloading) {
        return as.reloading;
      }
      return as;
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnMainTypeInit($innerCom) {
      this.$inner = $innerCom;
    },
    //--------------------------------------
    OnPanelAfterEnter(pan) {
      this.myPanelVisibles = _.assign(
        {},
        {
          [pan.key]: pan.visible
        }
      );
    },
    //--------------------------------------
    joinBlockNames(names = {}, blocks = []) {
      _.forEach(blocks, ({ name, blocks } = {}) => {
        if (name) {
          names[name] = true;
        }
        if (_.isArray(blocks)) {
          this.joinBlockNames(names, blocks);
        }
      });
      return names;
    },
    //--------------------------------------
    isShown(...names) {
      for (let name of names) {
        if (this.TheShown[name]) return true;
      }
      return false;
    },
    //--------------------------------------
    joinThePanels(list = [], panels = [], keyPrefix = "") {
      if (_.isArray(panels) && panels.length > 0) {
        for (let i = 0; i < panels.length; i++) {
          let pan = panels[i];
          if (!pan) {
            continue;
          }
          let pos = Ti.Util.fallback(pan.position, "center");
          let index = list.length;
          list.push({
            index,
            visible: this.isShown(pan.name),
            key: pan.name || `panel-${keyPrefix}-${index}`,
            transName: `ti-gui-panel-${pos}`,
            panel: pan
          });
        }
      }
    },
    //--------------------------------------
    updateShown(shown) {
      this.syncMyShown(shown);
      this.persistMyStatus();
    },
    //--------------------------------------
    OnBlockShow(name) {
      // Update privated status
      if (this.keepShownTo) {
        this.updateShown({ [name]: true });
      }
      // Leave it to parent
      else {
        this.$notify("block:show", name);
      }
    },
    //--------------------------------------
    OnBlockHide(name) {
      // Update privated status
      if (this.keepShownTo) {
        this.updateShown({ [name]: false });
      }
      // Leave it to parent
      else {
        this.$notify("block:hide", name);
      }
    },
    //--------------------------------------
    OnBlockShownUpdate(shown) {
      //console.log(shown)
      // Update privated status
      if (this.keepShownTo) {
        this.updateShown(shown);
      }
      // Leave it to parent
      else {
        this.$notify("block:shown", shown);
      }
    },
    //--------------------------------------
    evalLayout() {
      //console.log("evalLayout");
      let lay = {};
      if (_.isEmpty(this.layout)) return lay;
      //....................................
      // Raw layout
      if (/^(rows|cols|tabs|grid)$/.test(this.layout.type)) {
        lay = this.layout;
      }
      //....................................
      // Auto adapt viewMode
      else {
        lay = this.layout[this.viewportMode];
        // Refer onece
        if (_.isString(lay)) {
          lay = this.layout[lay];
        }
        // Refer twice (I think it is enough for most of cases)
        if (_.isString(lay)) {
          lay = this.layout[lay];
        }
      }
      //....................................
      // Filter block
      if (lay) {
        lay = _.cloneDeep(lay);
        lay.blocks = this.filterBlocks(lay.blocks, lay.type);
      }
      //....................................
      // Done
      return lay || {};
    },
    //--------------------------------------
    filterShown(shown = {}) {
      return _.omitBy(shown, (v, k) => {
        if (!v) return true;
        if (!this.BlockNames[k]) return true;
        return false;
      });
    },
    //--------------------------------------
    syncMyShown(...showns) {
      if (this.keepShownTo) {
        let shown = _.assign({}, this.myShown, ...showns);
        this.myShown = shown;
        if (this.shownEmitName) {
          this.$emit(this.shownEmitName, this.myShown);
        }

        if (this.shownNotifyName) {
          this.$notify(this.shownNotifyName, this.myShown);
        }
      }
    },
    //--------------------------------------
    persistMyStatus() {
      if (this.keepShownTo) {
        let shown = this.filterShown(this.myShown);
        Ti.Storage.local.setObject(this.keepShownTo, shown);
      }
    },
    //--------------------------------------
    loadMyStatus() {
      if (this.keepShownTo) {
        let shown = Ti.Storage.local.getObject(this.keepShownTo);
        this.syncMyShown(this.shown, shown);
      }
    },
    //--------------------------------------
    syncViewportMeasure() {
      let rect = Ti.Rects.createBy(this.$el);
      //console.log(rect.toString())
      this.myViewportWidth = rect.width;
      this.myViewportHeight = rect.height;
    },
    //--------------------------------------
    filterBlocks(blocks, type) {
      let reBlocks = [];
      //let shown = JSON.stringify(this.TheShown)
      _.forEach(blocks, (bl) => {
        //console.log(bl.name, shown)
        let isShow = true;
        if ("tabs" != type && bl.name) {
          isShow = _.get(this.TheShown, bl.name);
          isShow = Ti.Util.fallback(isShow, true);
        }
        if (isShow) {
          reBlocks.push(bl);
          if (bl.blocks) {
            bl.blocks = this.filterBlocks(bl.blocks, bl.type);
          }
        }
      });
      return reBlocks;
    },
    //--------------------------------------
    $block(name) {
      return this.myBlockMap[name];
    },
    //--------------------------------------
    registerBlock(name, $block) {
      //console.log("registerBlock", name, $block.tiComId)
      this.myBlockMap[name] = $block;
    },
    //--------------------------------------
    unregisterBlock(name) {
      if (this.myBlockMap[name]) {
        delete this.myBlockMap[name];
      }
    },
    //--------------------------------------
    tryUpdateLayout(newVal, oldVal) {
      if (!_.isEqual(newVal, oldVal)) {
        this.myLayout = this.evalLayout();
        this.$nextTick(() => {
          this.syncViewportMeasure();
        });
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "shown": {
      handler: function (shown, old) {
        if (old && !_.isEqual(shown, old)) {
          //console.log(`ti-gui: ${this.$parent.tiComId} shown changed`, shown);
          this.syncMyShown(shown);
          this.myLayout = this.evalLayout();
          this.$nextTick(() => {
            this.syncViewportMeasure();
          });
        }
      },
      immediate: true
    },
    "loadingAs": "syncViewportMeasure",
    "loading": "syncViewportMeasure",
    "layout": {
      handler: "tryUpdateLayout",
      immediate: true
    }
  },
  //////////////////////////////////////////
  mounted: function () {
    //......................................
    Ti.Viewport.watch(this, {
      resize: _.debounce(() => this.syncViewportMeasure(), 100)
    });
    //......................................
    this.loadMyStatus();
    //......................................
    _.delay(() => {
      this.syncViewportMeasure();
    });
    //......................................
  },
  ///////////////////////////////////////////////////
  beforeDestroy: function () {
    Ti.Viewport.unwatch(this);
  }
  //////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'm-obj-content.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/obj-content/m-obj-content.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////
  mutations : {
    //----------------------------------------
    setMeta(state, meta) {
      state.meta = meta
    },
    //----------------------------------------
    setContent(state, content) {
      let meta = state.meta;
      //console.log("setContent", content)
      // Guard
      if(!meta || _.isUndefined(content)) {
        state.content = null
        state.data = null
        state.__saved_content = null
        state.status.changed = false
        return
      }
      //......................................
      // DIR
      if("DIR" == meta.race) {
        state.content = null
        state.__saved_content = null
        state.data = content
      }
      //......................................
      // File
      else if("FILE" == meta.race) {
        //....................................
        // String content
        if(_.isString(content)) {
          state.content = content
          // JSON
          if(Wn.Util.isMimeJson(meta.mime)) {
            try{
              state.data = JSON.parse(content)
            } catch(E) {
              state.data = null
            }
          }
          // Pure Text
          else if(Wn.Util.isMimeText(meta.mime)) {
            state.data = null
          }
        }
        //....................................
        // null value
        else if(Ti.Util.isNil(content)) {
          state.content = ""
          state.data = null
        }
        //....................................
        // Take content as plain object or Array
        else {
          state.content = JSON.stringify(content, null, '  ')
          // JSON
          if(Wn.Util.isMimeJson(meta.mime)) {
            state.data = content
          }
          // Pure Text
          else if(Wn.Util.isMimeText(meta.mime)) {
            state.data = null
          }
        }
        //....................................
      }
    },
    //----------------------------------------
    setData(state, data) {
      state.data = data
    },
    //----------------------------------------
    setSavedContent(state, content) {
      state.__saved_content = content
    },
    //----------------------------------------
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    },
    //----------------------------------------
    syncStatusChanged(state){
      if(Ti.Util.isNil(state.content) && Ti.Util.isNil(state.__saved_content)) {
        state.status.changed = false
      } else {
        state.status.changed = !_.isEqual(state.content, state.__saved_content)
      }
    }
    //----------------------------------------
  }
  ////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'gui-adjustbar.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/gui/adjustbar/gui-adjustbar.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data: () => ({
    blockSizes: undefined
  }),
  /////////////////////////////////////////
  props: {
    "prevMinimum": {
      type: Boolean,
      default: false
    },
    "selfMinimum": {
      type: Boolean,
      default: false
    },
    "adjacentMode": {
      type: String,
      default: "none",
      validator: v => /^(none|prev|self|both)$/.test(v)
    },
    "adjustBarAt": {
      type: String,
      default: "none",
      validator: v => /^(none|left|right|top|bottom)$/.test(v)
    },
    "adjustIndex": {
      type: Array,
      validator: v => _.isUndefined(v)
        || (_.isArray(v) && 2 == v.length)
    },
    "resizeMode": {
      type: String,
      validator: v => _.isUndefined(v)
        || /^(col|row)-resize$/.test(v)
    },
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return Ti.Css.mergeClassName(
        `at-${this.adjustBarAt}`,
        this.className
      )
    },
    //--------------------------------------
    PrevIsHead() {
      return this.adjustIndex && 0 === this.adjustIndex[0]
    },
    //--------------------------------------
    ArrowCanDirections() {
      if ("col-resize" == this.resizeMode) {
        return ["left", "right"]
      }
      return ["up", "down"]
    },
    //--------------------------------------
    hasMiniArrow() {
      return this.MiniArrowAt ? true : false
    },
    //--------------------------------------
    MiniArrowAt() {
      let arrows = this.ArrowCanDirections;
      if ("prev" == this.adjacentMode) {
        return arrows[1];
      }
      else if ("self" == this.adjacentMode) {
        return arrows[0];
      }
      else if ("both" == this.adjacentMode) {
        if (this.PrevIsHead) {
          return arrows[1];
        }
        return arrows[0];
      }
    },
    //--------------------------------------
    MiniArrowTo() {
      // Arrows
      let arrows = this.ArrowCanDirections;

      // Then get the arrow
      let I = 0;
      if ("prev" == this.adjacentMode) {
        I = this.prevMinimum ? 1 : 0
      }
      else if ("self" == this.adjacentMode) {
        I = this.selfMinimum ? 0 : 1
      }
      else if ("both" == this.adjacentMode) {
        if (this.PrevIsHead) {
          I = this.prevMinimum ? 1 : 0
        } else {
          I = this.selfMinimum ? 0 : 1
        }
      }

      // Done
      return arrows[I];
    },
    //--------------------------------------
    MiniArrowClass() {
      let miniTo = this.MiniArrowTo
      if (miniTo) {
        return `zmdi zmdi-chevron-${miniTo}`
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    genNotifyContext() {
      return {
        prevMinimum: this.prevMinimum,
        selfMinimum: this.selfMinimum,
        adjacentMode: this.adjacentMode,
        resizeMode: this.resizeMode,
        adjustBarAt: this.adjustBarAt,
        adjustIndex: this.adjustIndex
      }
    },
    //--------------------------------------
    OnClickReset() {
      let payload = this.genNotifyContext()
      this.$notify("bar:reset", payload)
    },
    //--------------------------------------
    OnClickMini() {
      //console.log("OnClickMini")
      let payload = this.genNotifyContext()
      this.$notify("bar:toggle:size", payload)
    },
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-shelf-slide.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/shelf/slide/web-shelf-slide.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data: () => ({
    myCurrentIndex: 0
  }),
  //////////////////////////////////////////
  props: {
    //-------------------------------------
    // Data
    //-------------------------------------
    "data": {
      type: Array,
      default: () => []
    },
    "idBy": {
      type: String,
      default: "id"
    },
    //-------------------------------------
    // Behavior
    //-------------------------------------
    // Item comType
    "comType": {
      type: String,
      default: "ti-label"
    },
    "comConf": {
      type: [Object, String],
      default: () => ({
        value: "=.."
      })
    },
    "interval": {
      type: Number,
      default: 0
    },
    //-------------------------------------
    // Aspect
    //-------------------------------------
    "indicatorType": {
      type: String,
      default: "dashed",
      validator: v => /^(dashed|dotted|square)$/.test(v)
    },
    "indicatorAlign": {
      type: String,
      default: "bottom-center",
      validator: v => {
        return /^(top|bottom)-(left|center|right)$/.test(v)
          || /^(left|right)-(top|bottom)$/.test(v)
      }
    },
    "width": {
      type: [Number, String],
      default: undefined
    },
    "height": {
      type: [Number, String],
      default: undefined
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    IndicatorClass() {
      return Ti.Css.mergeClassName([
        `indicator-is-${this.indicatorType}`,
        `indicator-at-${this.indicatorAlign}`
      ])
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    },
    //--------------------------------------
    isLeftEnabled() { return true; },
    isRightEnabled() { return true; },
    //--------------------------------------
    hasMultiItems() { return this.ItemList.length > 1 },
    //--------------------------------------
    BtnLeftClass() {
      return {
        "is-enabled": this.isLeftEnabled,
        "is-disabled": !this.isLeftEnabled
      }
    },
    //--------------------------------------
    BtnRightClass() {
      return {
        "is-enabled": this.isRightEnabled,
        "is-disabled": !this.isRightEnabled
      }
    },
    //--------------------------------------
    ItemList() {
      if (!_.isArray(this.data))
        return []

      let list = []
      for (let i = 0; i < this.data.length; i++) {
        let it = this.data[i]
        let current = i == this.myCurrentIndex
        let className = current ? "is-current" : null
        let comConf = Ti.Util.explainObj(it, this.comConf, {
          evalFunc: true
        })
        list.push({
          key: this.getItemKey(it, i),
          index: i,
          className,
          comType: this.comType,
          comConf
        })
      }

      // Get the result
      return list
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnClickIndicator({ index }) {
      this.myCurrentIndex = index
    },
    //--------------------------------------
    getItemKey(it, index) {
      let key = _.get(it, this.idBy)
      return key || `It-${index}`
    },
    //--------------------------------------
    prevItem() {
      let index = Ti.Num.scrollIndex(this.myCurrentIndex - 1, this.ItemList.length)
      this.myCurrentIndex = index
    },
    //--------------------------------------
    nextItem() {
      let index = Ti.Num.scrollIndex(this.myCurrentIndex + 1, this.ItemList.length)
      this.myCurrentIndex = index
    },
    //--------------------------------------
    autoPlayNextItem() {
      if (this.interval > 0) {
        _.delay(() => {
          if (!this.mousein) {
            this.nextItem()
          }
          this.autoPlayNextItem()
        }, this.interval * 1000)
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "interval": function (interv) {
      if (interv > 0) {
        this.autoPlayNextItem()
      }
    }
  },
  //////////////////////////////////////////
  mounted() {
    this.autoPlayNextItem();
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-shelf-audio-icons.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/shelf/audio-icons/web-shelf-audio-icons.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data : ()=>({
    myCurrentIndex: 0
  }),
  //////////////////////////////////////////
  props : {
    //-----------------------------------
    // Data
    //-----------------------------------
    "data" : {
      type : Array,
      default : ()=>[]
    },
    "audioItem" : {
      type : Object,
      default : ()=>({
        title : "=title"
      })
    },
    "preview" : {
      type: Object
    },
    "mime": {
      type : [String, Function],
      default : "=mime"
    },
    "type" : {
      type : [String, Function],
      default : "=type"
    },
    "title" : {
      type : [String, Function],
      default : "=title"
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "audioConf" : {
      type : Object
    },
    "youtubeConf" : {
      type : Object
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    CurrentAudioData() {
      return _.nth(this.data, this.myCurrentIndex)
    },
    //--------------------------------------
    CurrentAudioMime() {
      return this.getItemValueBy(this.CurrentAudioData, this.mime)
    },
    //--------------------------------------
    CurrentAudioType() {
      return this.getItemValueBy(this.CurrentAudioData, this.type)
    },
    //--------------------------------------
    CurrentAudioTitle() {
      return this.getItemValueBy(this.CurrentAudioData, this.title)
    },
    //--------------------------------------
    CurrentAudioCom() {
      // Youtube Audio
      if("youtube" == this.CurrentAudioType) {
        return {
          comType : "NetYoutubePlayer",
          comConf : _.assign({}, this.youtubeConf, {
            value : {
              id : this.CurrentAudioData.yt_video_id,
              thumbUrl : this.CurrentAudioData.thumb
            }
          })
        }
      }
      // Normal audio
      else {
        let src = Ti.WWW.evalObjPreviewSrc(this.CurrentAudioData, this.preview)
        return {
          comType : "TiMediaAudio",
          comConf :_.assign({}, this.audioConf, {
            src
          })
        }
      }
    },
    //--------------------------------------
    hasAudios() {
      return !_.isEmpty(this.data)
    },
    //--------------------------------------
    hasMultiAudios() {
      return this.hasAudios && this.data.length > 1
    },
    //--------------------------------------
    AudioItems() {
      return _.map(this.data, (it, index) => {
        let re = Ti.Util.explainObj(it, this.audioItem) || {}
        if(!re.title) {
          re.title = index + 1;
        }
        re.current = index == this.myCurrentIndex
        re.className = {
          "is-current" : re.current
        }
        re.index = index
        return re
      })
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnGoTo({index}) {
      this.myCurrentIndex = index
    },
    //--------------------------------------
    getItemValueBy(item={}, key) {
      // Customized
      if(_.isFunction(key)) {
        return key(item)
      }
      // Explain
      if(item) {
        if(_.isString(item)) {
          return key
        }
        return Ti.Util.explainObj(item, key)
      }
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-input-color.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/color/ti-input-color.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data: () => ({
    hideBorder: false,
    status: "collapse"
  }),
  ////////////////////////////////////////////////////
  props: {
    "value": {
      type: [String, Number],
      default: null
    },
    "autoCollapse": {
      type: Boolean,
      default: true
    },
    "showAlpha": {
      type: Boolean,
      default: true
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName({
        "is-empty": !this.hasValue,
        "is-valued": this.hasValue,
        "show-border": !this.hideBorder,
        "hide-border": this.hideBorder,
      }, this.className)
    },
    //------------------------------------------------
    colorStyle() {
      let color = Ti.Types.toColor(this.value, null)
      if (color) {
        return { "background": color.rgba }
      }
    },
    //------------------------------------------------
    isCollapse() { return "collapse" == this.status },
    isExtended() { return "extended" == this.status },
    //------------------------------------------------
    hasValue() {
      return !Ti.Util.isNil(this.value)
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    OnToggleDrop() {
      this.status = ({
        "collapse": "extended",
        "extended": "collapse"
      })[this.status]
    },
    //------------------------------------------------
    OnClearColor() {
      this.$notify("change", null)
    },
    //------------------------------------------------
    OnColorChange(color, mode) {
      //console.log("OnColorChanged", color, mode)
      let co = Ti.Types.toColor(color)
      this.$notify("change", co ? co.toString() : null)
      if (this.autoCollapse && "color" == mode) {
        this.status = "collapse"
      }
    },
    //------------------------------------------------
    doCollapse() {
      this.status = "collapse"
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-obj-edit-tree.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/obj/edit-tree/ti-obj-edit-tree.mjs'] = (function(){
/////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////
  data: () => ({
    myCurrentId: undefined,
    myCheckedIds: []
  }),
  ///////////////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "value": {
      type: [Object, String],
      default: undefined
    },
    "newNodeData": {
      type: Object,
      default: undefined
    },
    "idBy": {
      type: [String, Function],
      default: "id"
    },
    "nameBy": {
      type: [String, Function],
      default: "name"
    },
    "childrenBy": {
      type: [String, Function],
      default: "children"
    },
    "leafBy": {
      type: [String, Object, Function],
      default: () => ({
        "children": ""
      })
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "actions": {
      type: Array,
      default: () => [
        "create",
        "|", "remove",
        "|", "up", "down",
        "|", "left", "right"
      ]
    },
    "nodeForm": {
      type: Object,
      default: () => ({
        fields: [
          {
            title: "ID",
            name: "id",
            comConf: {
              editable: true
            }
          },
          {
            title: "Name",
            name: "name",
            comType: "TiInput"
          }
        ]
      })
    },
    "treeConf": {
      type: Object,
      default: () => ({})
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    // value should be prop of ti-loading
    "loadingAs": {
      type: Object,
      default: undefined
    },
    "loading": {
      type: Boolean,
      default: false
    }
  },
  ///////////////////////////////////////////////////
  computed: {
    //-----------------------------------------------
    TreeData() {
      if (_.isString(this.value)) {
        return JSON.parse(this.value)
      }
      return this.value || {}
    },
    //-----------------------------------------------
    TreeHieSetup() {
      return {
        idBy: this.idBy,
        nameBy: this.nameBy,
        childrenBy: this.childrenBy,
        autoChildren: true
      }
    },
    //-----------------------------------------------
    hasCurrent() {
      return this.myCurrentId ? true : false
    },
    //-----------------------------------------------
    hasChecked() {
      return !_.isEmpty(this.myCheckedIds)
    },
    //-----------------------------------------------
    CurrentNodeData() {
      if (this.hasCurrent) {
        let hie = Ti.Trees.getById(this.TreeData, this.myCurrentId, this.TreeHieSetup)
        if (hie) {
          return hie.node
        }
      }
    },
    //-----------------------------------------------
    ActionItems() {
      let items = []
      for (let li of this.actions) {
        // Maybe quick action item
        if (_.isString(li)) {
          let it = ({
            "create": {
              name: "create",
              text: "i18n:create",
              icon: "zmdi-plus",
              eventName: "do:create"
            },
            "remove": {
              name: "remove",
              icon: "far-trash-alt",
              enabled: {
                "hasChecked": true
              },
              eventName: "do:remove"
            },
            "|": {},
            "up": {
              name: "move_up",
              icon: "fas-long-arrow-alt-up",
              enabled: {
                "hasChecked": true
              },
              eventName: "do:move:up"
            },
            "down": {
              name: "move_down",
              icon: "fas-long-arrow-alt-down",
              enabled: {
                "hasChecked": true
              },
              eventName: "do:move:down"
            },
            "left": {
              name: "move_up",
              icon: "fas-long-arrow-alt-left",
              enabled: {
                "hasChecked": true
              },
              eventName: "do:move:left"
            },
            "right": {
              name: "move_down",
              icon: "fas-long-arrow-alt-right",
              enabled: {
                "hasChecked": true
              },
              eventName: "do:move:right"
            }
          })[li]
          if (it) {
            items.push(it)
          }
        }
        // Pure action item
        else {
          items.push(li)
        }
      }
      return items;
    },
    //-----------------------------------------------
    GUILayout() {
      return {
        type: "cols",
        border: true,
        blocks: [
          {
            type: "rows",
            border: true,
            size: "62%",
            blocks: [
              {
                name: "actions",
                size: ".43rem",
                body: "actions"
              },
              {
                name: "tree",
                body: "tree"
              }
            ]
          },
          {
            title: "i18n:properties",
            name: "node",
            body: "node"
          }
        ]
      }
    },
    //-----------------------------------------------
    GUISchema() {
      return {
        "actions": {
          comType: "TiActionbar",
          comConf: {
            style: {
              padding: "0 .04rem"
            },
            items: this.ActionItems,
            status: {
              "hasCurrent": this.hasCurrent,
              "hasChecked": this.hasChecked
            }
          }
        },
        "tree": {
          comType: "TiTree",
          comConf: _.assign(
            {
              checkable: false,
              multi: false,
              autoOpen: false,
              defaultOpenDepth: 2
            },
            this.treeConf,
            {
              data: this.TreeData,
              puppetMode: true,
              currentId: this.myCurrentId,
              checkedIds: this.myCheckedIds,
              idBy: this.idBy,
              nameBy: this.nameBy,
              childrenBy: this.childrenBy,
              leafBy: this.leafBy,
              onInit: ($tree) => {
                this.$tree = $tree
              }
            }
          )
        },
        "node": {
          comType: "TiForm",
          comConf: _.assign({
            gridColumnHint: 1
          }, this.nodeForm, {
            data: this.CurrentNodeData,
            autoShowBlank: true
          })
        }
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods: {
    //-----------------------------------------------
    OnSelectTreeNode(payload) {
      //console.log("OnSelectTreeNode", payload)
      let { currentId, checkedIds, current } = payload
      this.myCurrentId = currentId
      this.myCheckedIds = checkedIds
    },
    //-----------------------------------------------
    OnMetaFieldChange() { },
    //-----------------------------------------------
    OnMetaChange(item) {
      //console.log(item)
      // Get Node
      let data = _.cloneDeep(this.TreeData)
      let hie = this.getCurrentHie(data)
      //console.log(hie)
      // Update the root node
      if (hie.depth == 0) {
        item[this.childrenBy] = data[this.childrenBy]
        data = item
      }
      // Update the tree node
      else {
        item.children = _.get(hie.node, this.childrenBy)
        Ti.Trees.replace(hie, item, this.TreeHieSetup)
      }

      // Tell change
      this.tryNotifyChange(data)

      // Try to update current ID
      this.$nextTick(() => {
        let itemId = item[this.idBy]
        this.$tree.selectNodeById(itemId)
      })
    },
    //-----------------------------------------------
    OnMoveUpTreeNode() {
      let data = _.cloneDeep(this.TreeData)
      let hie = this.getCurrentHie(data)
      if (!hie) {
        return
      }
      // Guard: for root
      if (0 == hie.depth || !hie.parent) {
        return
      }
      // Guard: for first node
      if (hie.index == 0) {
        return
      }
      // swith to prev
      let children = _.get(hie.parent.node, this.childrenBy)
      let i1 = hie.index - 1
      let n0 = hie.node
      let n1 = children[i1]
      children[hie.index] = n1
      children[i1] = n0
      // Tell change
      this.tryNotifyChange(data)
    },
    //-----------------------------------------------
    OnMoveDownTreeNode() {
      let data = _.cloneDeep(this.TreeData)
      let hie = this.getCurrentHie(data)
      if (!hie) {
        return
      }
      // Guard: for root
      if (0 == hie.depth || !hie.parent) {
        return
      }
      // Guard: for last node
      let children = _.get(hie.parent.node, this.childrenBy)
      let lastI = children.length - 1
      if (hie.index >= lastI) {
        return
      }
      // swith to prev
      let i1 = hie.index + 1
      let n0 = hie.node
      let n1 = children[i1]
      children[hie.index] = n1
      children[i1] = n0
      // Tell change
      this.tryNotifyChange(data)
    },
    //-----------------------------------------------
    OnMoveLeftTreeNode() {
      let data = _.cloneDeep(this.TreeData)
      let hie = this.getCurrentHie(data)
      if (!hie) {
        return
      }
      // Guard: for root or top
      if (hie.depth <= 1 || !hie.parent) {
        return
      }
      //console.log("MoveLeft:", hie)
      
      // Then try move left
      let { parent, node } = hie

      // Remove current node
      Ti.Trees.remove(hie)

      // Insert current node after parent
      let grandpa = parent.parent
      let uncles = _.get(grandpa.node, this.childrenBy)
      let pos = parent.index + 1
      Ti.Util.insertToArray(uncles, pos, node)

      // Tell change
      this.tryNotifyChange(data)
    },
    //-----------------------------------------------
    OnMoveRightTreeNode() {
      let data = _.cloneDeep(this.TreeData)
      let hie = this.getCurrentHie(data)
      if (!hie) {
        return
      }
      // Guard: for root or the first node
      if (hie.depth == 0 || !hie.parent || hie.index == 0) {
        return
      }
      //console.log("MoveRight:", hie)

      // Check prev node, and it must be group
      let children = _.get(hie.parent.node, this.childrenBy)
      let prevNode = children[hie.index - 1]
      let prevId = _.get(prevNode, this.idBy)
      let node = hie.node
      let prevHie = this.getTreeHie(data, prevId)

      // prev must be group
      if(!prevHie || this.$tree.isNodeLeaf(prevNode)) {
        return
      }

      // Remove current node
      Ti.Trees.remove(hie)

      // Insert current node after parent
      Ti.Trees.append(prevHie, node, this.TreeHieSetup)
      this.$tree.openRow(prevId)

      // Tell change
      this.tryNotifyChange(data)
    },
    //-----------------------------------------------
    OnCreateTreeNode() {
      // Auto Gen a node ID
      let newNodeId = Ti.Random.str(8)

      // Then create the node
      this.createTreeNode(newNodeId);
    },
    //-----------------------------------------------
    createTreeNode(newNodeId) {
      let data = _.cloneDeep(this.TreeData)

      // Get the node
      let hie;
      let opened;
      // Default use the root node
      if (!this.myCurrentId) {
        hie = Ti.Trees.getByPath(data, "/", this.TreeHieSetup)
        opened = true
      } else {
        hie = Ti.Trees.getById(data, this.myCurrentId, this.TreeHieSetup)
        opened = this.$tree.isOpened(this.myCurrentId)
      }
      let { depth, leaf } = hie

      // Prepare new node
      let newNode = _.assign({
        [this.idBy]: newNodeId,
        [this.nameBy]: Ti.I18n.get("new-item")
      }, this.newNodeData)

      // Root node, append to last child
      // Group node, if opened, append to last child too.
      if (0 == depth || (opened && !leaf)) {
        Ti.Trees.append(hie, newNode, this.TreeHieSetup)
      }
      // closed group node or leaf node, insert after it
      else {
        Ti.Trees.insertAfter(hie, newNode, this.TreeHieSetup)
      }

      // Then tell the change
      this.tryNotifyChange(data)

      // Switch to new node
      this.$tree.selectNodeById(newNodeId)
    },
    //-----------------------------------------------
    removeTreeNode(nodeId) {
      // Guard
      if (!nodeId) {
        return
      }
      // Find node
      let data = _.cloneDeep(this.TreeData)
      let hie = Ti.Trees.getById(data, nodeId, this.TreeHieSetup)
      if (!hie) {
        console.warn(`Fail to found treeNode [${nodeId}]`)
        return
      }
      // Get next candidate
      let next = Ti.Trees.nextCandidate(hie)
      //console.log("next:", next)

      // Remove
      Ti.Trees.remove(hie)
      this.tryNotifyChange(data)

      // Try to select next
      if (next && next.node) {
        let nextNodeId = _.get(next.node, this.idBy)
        if (nextNodeId) {
          this.$tree.selectNodeById(nextNodeId)
        }
      }

    },
    //-----------------------------------------------
    tryNotifyChange(data = {}) {
      if (!_.isEqual(data, this.TreeData)) {
        this.$notify("change", data)
      }
    },
    //-----------------------------------------------
    getCurrentHie(treeData = this.TreeData) {
      if (this.hasCurrent) {
        return this.getTreeHie(treeData)
      }
    },
    //-----------------------------------------------
    getTreeHie(treeData = this.TreeData, nodeId = this.myCurrentId) {
      if (this.hasCurrent) {
        return Ti.Trees.getById(treeData, nodeId, this.TreeHieSetup)
      }
    }
    //-----------------------------------------------
  }
  ///////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-fileset-config.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/fileset/config/wn-fileset-config.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data: ()=>({
    myHomeDir : undefined
  }),
  ////////////////////////////////////////////////////
  props : {
    // relative path to "meta"
    "dirHome" : {
      type : String,
      default : undefined
    },
    "mainConf" : {
      type : Object,
      default : ()=>({})
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    FilesetListConf() {
      return {
        meta : "=meta",
        ... this.mainConf
      }
    }    
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnTabsInit($tabs) {
      this.$tabs = $tabs
    },
    //------------------------------------------------
    doCreate(payload) {
      let $mcom = this.$tabs.$MainCom()
      if($mcom) {
        $mcom.doCreate(payload)
      }
    },
    //------------------------------------------------
    doDelete(payload) {
      let $mcom = this.$tabs.$MainCom()
      if($mcom) {
        $mcom.doDelete(payload)
      }
    },
    //------------------------------------------------
    doRename(payload) {
      let $mcom = this.$tabs.$MainCom()
      if($mcom) {
        $mcom.doRename(payload)
      }
    },
    //------------------------------------------------
    async openCurrentMeta() {
      let $mcom = this.$tabs.$MainCom()
      if($mcom && $mcom.hasCurrent) {
        return await $mcom.openCurrentMeta()
      }
      await Ti.App(this).dispatch("current/openMetaEditor")
    },
    //------------------------------------------------
    async reloadAll() {
      Ti.App(this).commit("current/setStatus", {reloading:true})
      // Reload self
      await this.reload()

      // Reload tabs
      await this.$tabs.reload()

      // Reload main
      let $mcom = this.$tabs.$MainCom()
      if($mcom) {
        await $mcom.reload()
      }
      Ti.App(this).commit("current/setStatus", {reloading:false})
    },
    //------------------------------------------------
    async reload() {
      if(this.meta && this.meta.id) {
        //console.log("reload", this.meta.ph, this.viewReady)
        if(this.dirHome) {
          let ph = `id:${this.meta.id}/${this.dirHome}`
          this.myHomeDir = await Wn.Io.loadMeta(ph)
        }
        // Meta is dirHome
        else {
          this.myHomeDir = this.meta
        }
      }
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'crumb-item.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/crumb/com/crumb-item/crumb-item.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  props: {
    "index": {
      type: Number,
      default: -1
    },
    "atLast": {
      type: Boolean,
      default: false
    },
    "icon": {
      type: [String, Object],
      default: null
    },
    "text": {
      type: String,
      default: null
    },
    "href": {
      type: String,
      default: null
    },
    "value": {
      type: [String, Number, Boolean, Object],
      default: null
    },
    "pathIcon": {
      type: String,
      default: null
    },
    "asterisk": {
      type: Boolean,
      default: false
    },
    "cancelBubble": {
      type: Boolean,
      default: true
    },
    "eventName": {
      type: [Boolean, String]
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    TopClass() {
      return Ti.Css.mergeClassName({
        "at-tail": this.atLast,
        "at-path": !this.atLast,
        "is-asterisk": this.asterisk,
        "has-event": this.hasEvent,
      }, this.className)
    },
    //------------------------------------------------
    TextClass() {
      return {
        "without-icon": !this.hasIcon && !this.removeIcon
      }
    },
    //------------------------------------------------
    hasIcon() {
      return this.icon ? true : false
    },
    //------------------------------------------------
    TheText() {
      return Ti.I18n.text(this.text);
    },
    //------------------------------------------------
    hasEvent() {
      return this.eventName ? true : false
    },
    //------------------------------------------------
    TheEventName() {
      if (this.eventName) {
        if (_.isBoolean(this.eventName)) {
          return "item:active"
        }
        return this.eventName
      }
    },
    //------------------------------------------------
    TheData() {
      return {
        index: this.index,
        icon: this.icon,
        text: this.text,
        value: this.value,
        href: this.href,
        atLast: this.atLast,
        asterisk: this.asterisk
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    OnClickTop($event) {
      // Show Drop Down
      if (this.hasOptions) {
        $event.stopPropagation()
        this.openDrop()
      }
      // Stop Bubble Up
      else if (this.cancelBubble) {
        $event.stopPropagation()
      }
      // Prevent
      if (this.hasEvent) {
        $event.preventDefault()
      }
      // Emit event
      let name = this.getEventName()
      if (this.href) {
        this.$notify(name, this.TheData)
      }
      // Just notify event
      else if (this.hasEvent) {
        this.$notify(name, this.TheData)
      }
    },
    //------------------------------------------------
    getEventName(dftEventName = "item:active") {
      if (this.eventName) {
        if (_.isBoolean(this.eventName)) {
          return dftEventName
        }
        return this.eventName
      }
      return dftEventName
    },
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-th-adaptor.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/th/adaptor/wn-th-adaptor.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////
  data: () => ({}),
  ///////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //--------------------------------------
    EventRouting() {
      let routing = _.get(this.schema, "events") || {};
      return _.assign(
        {
          "block:shown": "updateBlockShown",
          "block:show": "showBlock",
          "block:hide": "hideBlock",
          "meta::change": "doNothing",
          "meta::field:change": "dispatch('batchUpdateCheckedItemsField')",
          "content::change": "OnContentChange",
          "save:change": "OnSaveChange",
          "list::select": "OnSearchListSelect",
          "filter::change": "OnSearchChange",
          "pager::change": "OnSearchPagerChange"
        },
        routing,
        _.get(this.view, "events")
      );
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  methods: {
    //--------------------------------------
    async OnSearchListSelect({ currentId, checkedIds, checked }) {
      await this.dispatch("selectMeta", { currentId, checkedIds });
      this.$notify("indicate", `${checked.length} items selected`);
    },
    //--------------------------------------
    async OnSearchChange(payload) {
      await this.dispatch("applySearch", payload);
    },
    //--------------------------------------
    async OnSearchFilterChange(payload) {
      await this.dispatch("applyFilter", payload);
    },
    //--------------------------------------
    async OnSearchSorterChange(payload) {
      await this.dispatch("applySorter", payload);
    },
    //--------------------------------------
    async OnSearchPagerChange(payload) {
      await this.dispatch("applyPager", payload);
    },
    //--------------------------------------
    OnContentChange(payload) {
      this.dispatch("changeContent", payload);
    },
    //--------------------------------------
    async OnSaveChange() {
      await this.dispatch("saveContent");
    },
    //--------------------------------------
    //
    // Events / Callback
    //
    //--------------------------------------
    // For Event Bubble Dispatching
    __on_events(name, payload) {
      // if (/change$/.test(name))
      // console.log("WnThAdaptor.__on_events", name, payload)

      // ByPass
      if (/^(indicate)$/.test(name)) {
        return () => ({ stop: false });
      }

      // Try routing
      let fn = _.get(this.EventRouting, name);
      if (!fn) {
        fn = this.$tiEventTryFallback(name, this.EventRouting);
      }

      // Handle without defined
      if (!fn) {
        return;
      }

      const eval_func = (fn) => {
        let func;
        // Invoking string
        if (_.isString(fn)) {
          func = _.get(this, fn);
        }
        // Batch call
        if (_.isArray(fn)) {
          let calls = [];
          for (let f of fn) {
            let callF = eval_func(f);
            if (_.isFunction(callF)) {
              calls.push(callF);
            }
          }
          if (!_.isEmpty(calls)) {
            return async () => {
              for (let callF of calls) {
                await callF(payload);
              }
            };
          }
        }
        // Object call
        if (!_.isFunction(func)) {
          // Prepare context
          let invokeContext = _.assign(
            {
              $payload: payload
            },
            this.GuiExplainContext
          );
          if (fn.explain) {
            fn = Ti.Util.explainObj(invokeContext, fn);
          }
          func = Ti.Util.genInvoking(fn, {
            context: invokeContext,
            dft: null,
            funcSet: this
          });
        }

        if (_.isFunction(func)) {
          if (!_.isUndefined(payload)) {
            return () => {
              func(payload);
            };
          }
          return func;
        }
      };

      // callPath -> Function
      return eval_func(fn);
    }
    //--------------------------------------
    // __ti_shortcut(uniqKey) {
    // }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  watch: {
    "contentLoadPath": function (newVal, oldVal) {
      if (newVal && !_.isEqual(newVal, oldVal)) {
        this.dispatch("loadContent");
      }
    }
  },
  ///////////////////////////////////////////
  created: function () {},
  ///////////////////////////////////////////
  mounted: async function () {
    // Update the customized actions
    let actions = this.thingActions;
    if (_.isArray(actions)) {
      this.$notify("actions:update", actions);
    }
  },
  ///////////////////////////////////////////
  beforeDestroy: function () {}
  ///////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'wn-gui-side-tree.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/gui/side/tree/wn-gui-side-tree.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data : ()=>({
    myItems : [],
    myTreeData : []
  }),
  /////////////////////////////////////////
  props : {
    "items" : {
      type : Array,
      default : null
    },
    "highlightItemId" : {
      type : String,
      default : null
    },
    "highlightItemPath" : {
      type : String,
      default : null
    }
  },
  //////////////////////////////////////////
  computed : {
    //-------------------------------------
    TreeDisplay() {
      return ['<icon>', {
          key: "text",
          comConf: {
            className: "is-nowrap",
            href: "(value)?/a/open/wn.manager?ph=id:${value}"
          }
        }]
    },
    //-------------------------------------
    HighlightItemId() {
      let list = this.joinHighlightItems([], this.items)
      if(list.length > 0) {
        // Sort the list, 0->N, the first one should be the hightlight one
        list.sort((it0,it1)=>it0.score-it1.score)
        // Get the first one
        return _.first(list).id
      }
    },
    //-------------------------------------
    CheckedIds() {
      if(!this.HighlightItemId) {
        return []
      }
      return [this.HighlightItemId]
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //-------------------------------------
    evalTreeData(items=[]) {
      this.myItems = _.cloneDeep(items)
      let list = []
      if(_.isArray(items)) {
        for(let it of items) {
          list.push(this.evalItemToTreeNode(it))
        }
      }
      //console.log("theTreeData", list)
      this.myTreeData = list
    },
    //-------------------------------------
    evalItemToTreeNode(it={}) {
      // Children
      let children = null
      if(_.isArray(it.items)) {
        children = []
        for(let subIt of it.items) {
          children.push(this.evalItemToTreeNode(subIt))
        }
      }
      // Self
      return {
        name  : it.key,
        text  : it.title,
        icon  : it.icon,
        value : it.id,
        children
      }
    },
    //-------------------------------------
    joinHighlightItems(list=[], items=[]) {
      if(this.highlightItemId && _.isArray(items) && items.length>0) {
        for(let it of items) {
          // Match the ID, 0
          if(it.id == this.highlightItemId) {
            list.push({score:0, id: it.id})
          }
          // Match the Path, 1 or more
          else if(it.path && it.id
              && this.highlightItemPath 
              && this.highlightItemPath.startsWith(it.path)){
            let diff = this.highlightItemPath.length - it.path.length
            list.push({score:1+diff, id: it.id})
          }
          // Join Children
          if(it.items) {
            this.joinHighlightItems(list, it.items)
          }
        }
      }
      // Return self
      return list
    },
    //-------------------------------------
    onItemActived({current={}}={}){
      if(current.value) {
        this.$notify("item:active", {
          id : current.value
        })
      }
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "items" : {
      handler : function(newVal, oldVal){
        if(!_.isEqual(newVal, this.myItems)) {
          this.evalTreeData(newVal)
        }
      },
      immediate : true
    }
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-combo-box.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/box/ti-combo-box.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data: () => ({
    box: {
      "position": null,
      "width": null,
      "height": null,
      "top": null,
      "left": null
    },
    myDropDockReady: false
  }),
  ////////////////////////////////////////////////////
  props: {
    "keepWidthWhenDrop": {
      type: Boolean,
      default: true
    },
    "width": {
      type: [Number, String],
      default: null
    },
    "height": {
      type: [Number, String],
      default: null
    },
    "dropFloat": {
      type: Boolean,
      default: true
    },
    "dropWidth": {
      type: [Number, String],
      default: "box"
    },
    "dropHeight": {
      type: [Number, String],
      default: null
    },
    "dropOverflow": {
      type: [String, Array],
      default: "auto",
      validator: (v) => {
        if (Ti.Util.isNil(v)) {
          return true;
        }
        if (_.isString(v)) {
          v = v.split(" ");
        }
        if (_.isArray(v)) {
          if (v.length > 2 || v.length == 0) {
            return false;
          }
          for (let s of v) {
            if (!/^(auto|hidden|visible|scroll)$/.test(s)) {
              return false;
            }
          }
          return true;
        }
        return false;
      }
    },
    "status": {
      type: String,
      default: "collapse",
      validator: (st) => /^(collapse|extended)$/.test(st)
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    topClass() {
      return this.getTopClass(`is-${this.status}`);
    },
    //------------------------------------------------
    topStyle() {
      let width;
      if (this.keepWidthWhenDrop)
        width = Ti.Util.fallback(this.box.width, this.width);
      let height = this.box.height;
      if (width || height) {
        return Ti.Css.toStyle({
          width,
          height,
          flex: "0 0 auto"
        });
      }
    },
    //------------------------------------------------
    theBoxStyle() {
      if (this.dropFloat) {
        return Ti.Css.toStyle(this.box);
      }
    },
    //------------------------------------------------
    theDropStyle() {
      return Ti.Css.toStyle({
        "overflow": this.dropOverflow,
        "visibility": this.myDropDockReady ? "visible" : "hidden"
      });
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    notifyCollapse(escaped = false) {
      if ("collapse" != this.status) {
        this.$notify("collapse", { escaped });
      }
    },
    //------------------------------------------------
    dockDrop() {
      let $drop = this.$refs.drop;
      let $box = this.$refs.box;
      // Guard the elements
      if (!_.isElement($drop) || !_.isElement($box)) {
        return;
      }
      //............................................
      // If drop opened, make the box position fixed
      // to at the top of mask
      if ("extended" == this.status) {
        // Wait 1ms for drop content done for drawing
        _.delay(() => {
          let r_box = Ti.Rects.createBy($box);
          let r_drop = Ti.Rects.createBy($drop);
          //..........................................
          // Mark box to fixed position
          this.box = _.assign({ position: "fixed" }, r_box.raw());
          //..........................................
          // Make drop same width with box
          let dropStyle = {};
          if ("box" == this.dropWidth) {
            dropStyle.width = Math.max(r_box.width, r_drop.width);
          } else if (!Ti.Util.isNil(this.dropWidth)) {
            // The min drop width
            if (this.dropWidth < 0) {
              dropStyle.width = Math.max(r_box.width, Math.abs(this.dropWidth));
            }
            // Fix drop width
            else {
              dropStyle.width = this.dropWidth;
            }
          }
          if (!Ti.Util.isNil(this.dropHeight)) {
            dropStyle.height = this.dropHeight;
          }
          //..........................................S
          Ti.Dom.updateStyle($drop, Ti.Css.toStyle(dropStyle));
          //..........................................
          // Dock drop to box
          Ti.Dom.dockTo($drop, $box, {
            space: { y: 2 }
          });
          // Make drop visible
          _.delay(() => {
            this.myDropDockReady = true;
          }, 1);
        }, 1);
        //..........................................
      }
      //............................................
    },
    //------------------------------------------------
    reDockDrop() {
      this.resetBoxStyle();
      this.$nextTick(() => {
        this.dockDrop();
      });
    },
    //------------------------------------------------
    resetBoxStyle() {
      // Recover the $box width/height
      this.box = {};
      this.myDropDockReady = false;
    },
    //------------------------------------------------
    __ti_shortcut(uniqKey) {
      if ("ESCAPE" == uniqKey) {
        this.notifyCollapse(true);
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    "status": function (sta) {
      this.$nextTick(() => {
        // If collapse, it should clean the box styles
        if ("collapse" == sta) {
          this.resetBoxStyle();
        }
        // try docking
        else {
          this.dockDrop();
        }
      });
    }
  },
  ////////////////////////////////////////////////////
  mounted: function () {
    this.dropOpened = this.autoOpenDrop;
    this.box.width = this.width;
    this.box.height = this.height;

    this.dockDrop();

    Ti.Viewport.watch(this, {
      scroll: () => this.notifyCollapse(),
      resize: () => this.notifyCollapse()
    });
  },
  ////////////////////////////////////////////////////
  beforeDestroy: function () {
    Ti.Viewport.unwatch(this);
  }
  ////////////////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'ti-text-raw.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/raw/ti-text-raw.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////
  data : ()=>({
    myContent : null,
    inputCompositionstart: false
  }),
  ///////////////////////////////////////////////////
  props : {
    "icon" : {
      type : [String, Object],
      default : undefined
    },
    "title" : {
      type : String,
      default : undefined
    },
    "trimed" : {
      type : Boolean,
      default : false
    },
    "value" : {
      type : String,
      default : undefined
    }, 
    "placeholder" : {
      type : String,
      default : "i18n:blank"
    },
    "status": {
      type : Object,
      default: ()=>({})
    },
    "readonly" : {
      type : Boolean,
      default : false
    },
    "readonlyWhenNil" : {
      type : Boolean,
      default : true
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    TopClass() {
      return this.getTopClass({
        "show-title" : this.showTitle,
        "hide-title" : !this.showTitle,
        "is-changed" : _.get(this.status, "changed")
      })
    },
    //-----------------------------------------------
    isShowHead() {
      return this.title || this.icon
    },
    //-----------------------------------------------
    hasContent() {
      return !Ti.Util.isNil(this.value)
    },
    //-----------------------------------------------
    isReadonly() {
      if(this.readonly) {
        return true
      }
      if(this.readonlyWhenNil && Ti.Util.isNil(this.value)) {
        return true
      }
      return false
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnInputCompositionStart(){
      this.inputCompositionstart = true
    },
    //------------------------------------------------
    OnInputCompositionEnd(){
      this.inputCompositionstart = false
      this.OnTextChanged()
    },
    //------------------------------------------------
    OnInputing($event) {
      if(!this.inputCompositionstart) {
        this.OnTextChanged()
      }
    },
    //-----------------------------------------------
    OnTextChanged() {
      let str = _.get(this.$refs.text, "value")
      if(this.trimed) {
        str = _.trim(str)
      }
      this.myContent = str
    },
    //-----------------------------------------------
    syncMyContent() {
      this.myContent = this.value
    },
    //-----------------------------------------------
    checkMyContent() {
      if(this.myContent != this.value) {
        this.$notify("change", this.myContent)
      }
    },
    //-----------------------------------------------
    __ti_shortcut(uniqKey) {
      if("CTRL+ENTER" == uniqKey) {
        if(this.myContent != this.value) {
          this.$notify("change", this.myContent)
        }
        return {prevent:true}
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "value" : "syncMyContent",
    "myContent": function(){
      this.debCheckChange()
    }
  },
  ///////////////////////////////////////////////////
  created : function() {
    this.debCheckChange = _.debounce(()=>{
      this.checkMyContent()
    }, 500)
  },
  ///////////////////////////////////////////////////
  mounted : function() {
    this.syncMyContent()
  }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-combo-input.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/input/ti-combo-input.mjs'] = (function(){
const COM_TYPE = "TiComboInput";
const _M = {
  ////////////////////////////////////////////////////
  data: () => ({
    myDropStatus: "collapse",
    myItem: null,
    myFreeValue: null,
    myFilterValue: null,
    myOptionsData: null,
    myCurrentId: null,
    myCheckedIds: {},

    myOldValue: undefined,
    myDict: undefined,
    loading: false
  }),
  ////////////////////////////////////////////////////
  props: {
    "canInput": {
      type: Boolean,
      default: true
    },
    "autoCollapse": {
      type: Boolean,
      default: false
    },
    "showInputFocusValue": {
      type: Boolean,
      default: true
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    isCollapse() {
      return "collapse" == this.myDropStatus;
    },
    isExtended() {
      return "extended" == this.myDropStatus;
    },
    //-----------------------------------------------
    FnOptionFilter() {
      if (_.isFunction(this.optionFilter)) {
        return this.optionFilter;
      }
      if (this.optionFilter) {
        let flt = Ti.Util.explainObj(this.optionVars, this.optionFilter);
        return Ti.AutoMatch.parse(flt);
      }
    },
    //------------------------------------------------
    TopClass() {
      let hasWidth = !Ti.Util.isNil(this.width);
      return this.getTopClass({
        "full-field": !hasWidth
      });
    },
    //------------------------------------------------
    ValueTip() {
      if (this.autoValueTip) {
        let tip = this.value;
        if (this.myItem && this.Dict) {
          let text = this.Dict.getText(this.myItem);
          let value = this.Dict.getValue(this.myItem);
          tip = `<strong>${text}</strong>: <codd>${value}</code>`;
        }
        return {
          "data-ti-tip": tip,
          "data-ti-tip-mode": "H",
          "data-ti-tip-size": "auto",
          "data-ti-tip-type": "paper",
          "data-ti-tip-content-type": "html",
          "data-ti-keyboard": "ctrl"
        };
      }
    },
    //------------------------------------------------
    TheInputProps() {
      return _.assign(
        {},
        {
          // Data
          "format": undefined,
          "valueCase": this.valueCase,
          "trimed": this.trimed,
          "autoJsValue": this.autoJsValue,
          "validator": this.validator,
          // Behavior
          "readonly": !this.canInput || this.readonly,
          "hover": this.hover,
          "prefixIconForClean": this.prefixIconForClean,
          "autoSelect": this.autoSelect,
          "prefixIconNotifyName": this.prefixIconNotifyName,
          "prefixTextNotifyName": this.prefixTextNotifyName,
          "suffixIconNotifyName": this.suffixIconNotifyName,
          "suffixTextNotifyName": this.suffixTextNotifyName,
          "enterKeyNotifyName": this.enterKeyNotifyName,
          // Aspect
          "placeholder": this.placeholder,
          "autoI18n": this.autoI18n,
          "hideBorder": this.hideBorder,
          "prefixIcon": this.prefixIcon,
          "prefixHoverIcon": this.prefixHoverIcon,
          "prefixText": this.prefixText,
          "suffixIcon": this.suffixIcon,
          "suffixText": this.suffixText,
          // Measure
          "width": this.width,
          "height": this.height
        }
      );
    },
    //------------------------------------------------
    InputValue() {
      if (!Ti.Util.isNil(this.myFilterValue)) {
        return this.myFilterValue;
      }
      if (this.myItem && this.Dict) {
        let text = this.Dict.getText(this.myItem);
        let value = this.Dict.getValue(this.myItem);
        if (this.inputValueDisplay) {
          return Ti.Util.explainObj(this.myItem, this.inputValueDisplay, {
            evalFunc: true
          });
        }
        return text || value;
      }
      return this.myFreeValue;
    },
    //------------------------------------------------
    InputFocusValue() {
      if (this.showInputFocusValue) {
        if (!Ti.Util.isNil(this.myFilterValue)) {
          return this.myFilterValue;
        }
        if (this.myItem && this.Dict) {
          let value = this.Dict.getValue(this.myItem);
          return value;
        }
        return this.myFreeValue;
      }
    },
    //------------------------------------------------
    InputPrefixText() {
      if (this.myItem) {
        if (!_.isUndefined(this.inputPrefixTextDisplay)) {
          return Ti.Util.explainObj(this.myItem, this.inputPrefixTextDisplay, {
            evalFunc: true
          });
        }
        return Ti.Util.explainObj(this.myItem, this.prefixText);
        //return this.Dict.getValue(this.myItem)
      }
      return Ti.Util.explainObj(this, this.prefixText);
    },
    //------------------------------------------------
    InputSuffixText() {
      if (this.myItem) {
        if (!_.isUndefined(this.inputSuffixTextDisplay)) {
          return Ti.Util.explainObj(this.myItem, this.inputSuffixTextDisplay, {
            evalFunc: true
          });
        }
        return Ti.Util.explainObj(this.myItem, this.suffixText);
        //return this.Dict.getValue(this.myItem)
      }
      return Ti.Util.explainObj(this, this.suffixText);
    },
    //------------------------------------------------
    GetValueBy() {
      return (it) => this.Dict.getValue(it);
    },
    //------------------------------------------------
    ThePrefixIcon() {
      if (this.loading) {
        return "zmdi-settings zmdi-hc-spin";
      }
      if (!this.prefixIconForClean) {
        return this.prefixIcon;
      }
      let icon = this.prefixIcon;
      if (this.myItem && this.Dict) {
        icon = this.Dict.getIcon(this.myItem) || icon;
      }
      if (this.readonly) {
        return;
      }
      return Ti.Util.fallback(icon, "zmdi-minus");
    },
    //------------------------------------------------
    TheSuffixIcon() {
      if (this.readonly) {
        return;
      }
      return this.statusIcons[this.myDropStatus];
    },
    //------------------------------------------------
    DropComType() {
      return this.dropComType || "ti-list";
    },
    DropComConf() {
      let display = this.dropDisplay;
      if (!display) {
        display = Ti.Config.getComProp(COM_TYPE, "dropDisplay", [
          "text|title|nm::flex-auto is-nowrap",
          "id|value::as-tip-block align-right"
        ]);
      }
      return _.assign(
        {
          display,
          blankAs: {
            className: "as-mid-tip"
          },
          border: this.dropItemBorder
        },
        this.dropComConf,
        {
          data: this.myOptionsData,
          currentId: this.myCurrentId,
          checkedIds: this.myCheckedIds,
          idBy: this.GetValueBy,
          multi: false,
          hoverable: true,
          checkable: false,
          autoCheckCurrent: true,
          dftLabelHoverCopy: false
        }
      );
    },
    //------------------------------------------------
    Dict() {
      if (!this.myDict) {
        this.myDict = this.createDict();
      }
      return this.myDict;
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //-----------------------------------------------
    OnDropListInit($dropList) {
      this.$dropList = $dropList;
    },
    //------------------------------------------------
    OnCollapse() {
      if ("collapse" != this.myDropStatus) {
        this.doCollapse();
      }
    },
    //-----------------------------------------------
    OnInputInputing(val) {
      // Guard
      if (this.readonly) {
        return;
      }
      if (this.filter) {
        this.myFilterValue = val;
        // Auto extends
        if (this.autoFocusExtended) {
          if (!this.isExtended) {
            this.doExtend(false);
          }
        }
        // Reload options data
        if (this.isExtended) {
          this.debReload();
        }
      }
    },
    //-----------------------------------------------
    async OnInputChanged(val, byKeyboardArrow) {
      // Guard
      if (this.readonly) {
        return;
      }
      //console.log("haha", {val, byKeyboardArrow})
      // Clean filter
      this.myFilterValue = null;
      // Clean
      if (!val) {
        this.myItem = null;
        this.myFreeValue = null;
        this.myCheckedIds = {};
        this.myCurrentId = null;
      }
      // Find ...
      else {
        let it = await this.Dict.getItem(val);
        // Matched tag
        if (it) {
          this.myItem = it;
          this.myFreeValue = null;
        } else if (!this.mustInList) {
          this.myItem = null;
          this.myFreeValue = val;
        }
      }
      if (!byKeyboardArrow) this.tryNotifyChanged();
    },
    //-----------------------------------------------
    async OnInputFocused() {
      // Guard
      if (this.readonly) {
        return;
      }
      if (this.autoFocusExtended && !this.isExtended) {
        await this.doExtend();
      }
    },
    //-----------------------------------------------
    async OnClickStatusIcon() {
      // Guard
      if (this.readonly) {
        return;
      }
      if (this.isExtended) {
        await this.doCollapse();
      } else {
        await this.doExtend();
      }
    },
    //-----------------------------------------------
    async OnDropListSelected({ currentId, byKeyboardArrow } = {}) {
      // Guard
      if (this.readonly) {
        return;
      }
      //console.log({currentId, byKeyboardArrow})
      this.myCurrentId = currentId;
      await this.OnInputChanged(currentId, byKeyboardArrow);
      if (this.autoCollapse && !byKeyboardArrow) {
        await this.doCollapse({ escaped: true });
      }
    },
    //-----------------------------------------------
    // Core Methods
    //-----------------------------------------------
    async doExtend(tryReload = true) {
      this.myOldValue = this.evalMyValue();
      // Try reload options again
      if (tryReload && _.isEmpty(this.myOptionsData)) {
        await this.reloadMyOptionData(true);
      }
      this.$nextTick(() => {
        this.myDropStatus = "extended";
      });
    },
    //-----------------------------------------------
    async doCollapse({ escaped = false } = {}) {
      if (escaped) {
        await this.evalMyItem(this.myOldValue);
      } else if (
        this.myFilterValue &&
        !_.isEqual(this.myFilterValue, this.myOldValue)
      ) {
        await this.evalMyItem(this.myFilterValue);
        this.tryNotifyChanged();
      }
      // Try notify
      else {
        this.tryNotifyChanged();
      }
      this.myDropStatus = "collapse";
      this.myOldValue = undefined;
      this.myFilterValue = null;
      this.myOptionsData = null;
    },
    //-----------------------------------------------
    tryNotifyChanged() {
      let val = this.evalMyValue();
      //console.log("tryNotifyChanged", val)
      if (Ti.Util.isNil(val) && Ti.Util.isNil(this.value)) return;
      if (!_.isEqual(val, this.value)) {
        this.$notify("change", val);
      }
    },
    //-----------------------------------------------
    // Utility
    //-----------------------------------------------
    evalMyValue(item = this.myItem, freeValue = this.myFreeValue) {
      //console.log("evalMyValue", item, freeValue)
      // Item
      if (item) {
        return this.Dict.getValue(item);
      }
      // Ignore free values
      return this.mustInList ? null : freeValue;
    },
    //-----------------------------------------------
    async evalMyItem(val = this.value) {
      //console.log("before evalMyItem", val)
      let it;
      if (this.Dict) {
        it = await this.Dict.getItem(val);
      }
      //console.log("after evalMyItem: it", it)
      if (_.isArray(it)) {
        console.error("!!!!!!! kao ~~~~~~~");
        it = null;
      }
      // Update state
      if (it) {
        let itV = this.Dict.getValue(it);
        this.myItem = it;
        this.myFreeValue = null;
        this.myCurrentId = itV;
        this.myCheckedIds = { [itV]: true };
      }
      // Clean
      else {
        this.myItem = null;
        this.myFreeValue = this.mustInList ? null : val;
        this.myCurrentId = null;
        this.myCheckedIds = {};
      }
    },
    //------------------------------------------------
    createDict() {
      // if (!_.isEmpty(this.dictVars)) {
      //   console.log("createDict in combo-input", this.dictVars)
      // }
      // Customized
      return Ti.DictFactory.CreateDictBy(this.options, {
        valueBy: this.valueBy,
        textBy: this.textBy,
        iconBy: this.iconBy,
        vars: this.dictVars,
        whenLoading: ({ loading }) => {
          this.loading = loading;
        }
      });
    },
    //-----------------------------------------------
    async reloadMyOptionData(force = false) {
      //console.log("reloadMyOptionData")
      let options = [];
      if (this.showCleanOption) {
        options.push({
          _is_clean: true,
          _row_display: [
            {
              key: "icon",
              defaultAs: "zmdi-close",
              comType: "TiIcon"
            },
            {
              key: "text",
              comType: "TiLabel",
              comConf: {
                hoverCopy: false,
                className: "as-tip"
              }
            }
          ],
          text: "i18n:clear",
          value: null
        });
      }
      if (force || this.isExtended) {
        let list = await this.Dict.queryData(this.myFilterValue);
        if (this.FnOptionFilter) {
          //console.log("do filter")
          let list2 = [];
          for (let i = 0; i < list.length; i++) {
            let li = list[i];
            let li2 = this.FnOptionFilter(li, i, list);
            if (!li2) {
              continue;
            }
            if (_.isBoolean(li2)) {
              list2.push(li);
            } else {
              list2.push(li2);
            }
          }
          list = list2;
        }
        options.push(...list);
      }
      this.myOptionsData = options;
      return this.myOptionsData;
    },
    //-----------------------------------------------
    // Callback
    //-----------------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("ti-combo-multi-input", uniqKey)
      //....................................
      if ("ESCAPE" == uniqKey) {
        this.doCollapse({ escaped: true });
        return { prevent: true, stop: true, quit: true };
      }
      //....................................
      // If droplist is actived, should collapse it
      if ("ENTER" == uniqKey) {
        //if(this.$dropList && this.$dropList.isActived) {
        this.doCollapse();
        return { stop: true, quit: false };
        //}
      }
      //....................................
      if ("ARROWUP" == uniqKey) {
        if (this.$dropList) {
          this.$dropList.selectPrevRow({
            payload: { byKeyboardArrow: true }
          });
        }
        return { prevent: true, stop: true, quit: true };
      }
      //....................................
      if ("ARROWDOWN" == uniqKey) {
        if (this.$dropList && this.isExtended) {
          this.$dropList.selectNextRow({
            payload: { byKeyboardArrow: true }
          });
        } else {
          this.doExtend();
        }
        return { prevent: true, stop: true, quit: true };
      }
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    //-----------------------------------------------
    "value": {
      handler: function () {
        this.$nextTick(() => {
          this.evalMyItem();
        });
      },
      immediate: true
    },
    //-----------------------------------------------
    "myOptionsData": function () {
      this.$nextTick(() => {
        this.evalMyItem();
      });
    },
    //-----------------------------------------------
    "options": function (newval, oldval) {
      if (!_.isEqual(newval, oldval)) {
        this.myDict = this.createDict();
        this.myOptionsData = [];
        if (this.isExtended) {
          this.$nextTick(() => {
            this.reloadMyOptionData(true);
          });
        }
      }
    },
    //-----------------------------------------------
    "dictVars": function (newval, oldval) {
      if (!_.isEqual(newval, oldval)) {
        this.myDict = this.createDict();
        this.myOptionsData = [];
        if (this.isExtended) {
          this.$nextTick(() => {
            this.reloadMyOptionData(true);
          });
        }
      }
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  created: function () {
    this.debReload = _.debounce((val) => {
      this.reloadMyOptionData();
    }, this.delay);
  }
  ////////////////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'wn-list.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/list/wn-list.mjs'] = (function(){
/////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////
  data : ()=>({
    isAllChecked  : false,
    hasChecked    : false,
    theCurrentId  : false,
    theCheckedIds : false
  }),
  ///////////////////////////////////////////////////
  props : {
    "iconBy" : {
      type : [String, Function],
      default : undefined
    },
    "indentBy" : {
      type : [String, Function],
      default : undefined
    },
    "itemClassName" : undefined,
    "display" : {
      type : [Object, String, Array],
      default : ()=>({
        key : "..",
        comType : "ti-label"
      })
    },
    "border" : {
      type : Boolean,
      default : true
    },
    "autoScrollIntoView" : {
      type : Boolean,
      default : true
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //----------------------------------------------
    DisplayItems() {
      return this.explainDisplayItems(this.display)
    }
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //----------------------------------------------
    OnSubListInit($list) {this.$list = $list},
    //----------------------------------------------
    OnSelected(payload={}){
      this.theCheckedIds = payload.checkedIds
      this.theCurrentId  = payload.currentId
      this.syncCheckStatus()
      this.$notify("select", payload)
    },
    //----------------------------------------------
    syncCheckStatus() {
      this.isAllChecked = this.$list.isAllChecked
      this.hasChecked   = this.$list.hasChecked
    },
    //----------------------------------------------
    // Delegate methods
    selectPrevRow(options){this.$list.selectPrevRow(options)},
    selectNextRow(options){this.$list.selectNextRow(options)},

    getCurrentRow(options){return this.$list.getCurrentRow(options)},
    getCheckedRow(options){return this.$list.getCheckedRow(options)},

    getCurrent(options){return this.$list.getCurrent(options)},
    getChecked(options){return this.$list.getChecked(options)},

    selectRow(options){this.$list.selectRow(options)},
    checkRow (options){this.$list.checkRow(options)},
    cancelRow(options){this.$list.cancelRow(options)}
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "data" : function(){
      this.syncCheckStatus()
    },
    "checkedIds" : function(){
      this.syncCheckStatus()
    }
  }
  ///////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-wizard.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/wizard/ti-wizard.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////
  data: () => ({
    myCurrent: undefined,
    myTitle: undefined
  }),
  ///////////////////////////////////////////////////
  props : {
    "title" : {
      type: String,
      default: undefined
    },
    "steps" : {
      type : Array,
      default : ()=>[]
    },
    "value" : {
      type : Object,
      default : ()=>({})
    },
    "current" : {
      type : [Number, String],
      default : 0
    },
    "canClickHeadItem" : {
      type : String,
      default : undefined
    },
    "evalStepConfFunc" : {
      type : Boolean,
      default : false
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //----------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //----------------------------------------------
    StepList() {
      let list = []
      if(_.isArray(this.steps)) {
        for(let i=0; i<this.steps.length; i++) {
          let step = this.steps[i]
          let stepKey = step.key || `step${i}`
          // Join to the list
          list.push({
            index     : i,
            stepKey   : stepKey,
            dataKey   : step.dataKey,
            title     : step.title   || stepKey,
            comType   : step.comType || "ti-label",
            comConf   : step.comConf,
            prepare   : step.prepare,
            serializer: step.serializer,
            prev : step.prev,
            next : step.next
          })
        }
      }
      return list
    },
    //----------------------------------------------
    StepHeads() {
      let list = []
      if(_.isArray(this.steps)) {
        for(let step of this.StepList) {
          let className = []
          if(this.CurrentStepIndex == step.index) {
            className.push("is-current")
          }
          else if(step.index > this.CurrentStepIndex) {
            className.push("is-future")
          }
          else {
            className.push("is-passed")
          }
          // Join to the list
          list.push(_.assign({}, step, {className}))
        }
      }
      return list
    },
    //----------------------------------------------
    CurrentStepIndex() {
      return this.CurrentStep
                ? this.CurrentStep.index
                : -1
    },
    //----------------------------------------------
    hasCurrentStep() {
      return this.CurrentStep ? true : false
    },
    //----------------------------------------------
    TheTitle() {
      return this.myTitle || this.title
    },
    //----------------------------------------------
    CurrentStep() {
      let cs = Ti.Util.fallback(this.myCurrent, this.current)
      let step = _.cloneDeep(this.getStep(cs))

      // Eval serializer
      let serializer = step.serializer
        ? Ti.Util.genInvoking(step.serializer, {
            context: this.value,
            partial: "right"
          })
        : _.identity;
      // Eval comConf
      let comConf = Ti.Util.explainObj(this.value, step.comConf, {
        evalFunc : this.evalStepConfFunc
      })

      return _.assign({}, step, {
        serializer, comConf
      })
    },
    //----------------------------------------------
    BtnPrev() {
      let btn = _.get(this.CurrentStep, "prev")
      return this.getStepAction(btn, {
        icon     : "zmdi-chevron-left",
        text     : "i18n:prev",
        enabled  : true
      })
    },
    //----------------------------------------------
    BtnNext() {
      let btn = _.get(this.CurrentStep, "next")
      return this.getStepAction(btn, {
        icon     : "zmdi-chevron-right",
        text     : "i18n:next",
        enabled  : true,
        reverse  : _.get(btn, "icon") ? false : true
      })
    }
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //----------------------------------------------
    OnTitleChange(title) {
      this.myTitle = title
    },
    //----------------------------------------------
    OnDataChange(payload) {
      //console.log("wizard:OnStepDataChange", payload)
      let newData = _.assign({}, this.value, payload)
      this.$notify("change", newData)
    },
    //----------------------------------------------
    OnStepChange(payload) {
      // Prev
      if("%prev" == payload) {
        this.gotoFromCurrent(-1)
      }
      // Next
      else if("%next" == payload) {
        this.gotoFromCurrent(1)
      }
      // absolute step
      else {
        this.gotoStep(payload)
      }
    },
    //----------------------------------------------
    OnClickHeadItem(index) {
      // Can Click Passed Steps
      if("passed" == this.canClickHeadItem 
        && this.CurrentStepIndex > index) {
        this.gotoStep(index)
      }
    },
    //----------------------------------------------
    OnClickBtnPrev() {
      if(this.BtnPrev && this.BtnPrev.enabled) {
        if(this.BtnPrev.handler) {
          let invoking = Ti.Util.genInvoking(this.BtnPrev.handler, {
            context: this.value,
            partial: false
          })
          invoking.apply(this, [this.value])
        } else {
          this.gotoFromCurrent(-1)
        }
      }
    },
    //----------------------------------------------
    OnClickBtnNext() {
      if(this.BtnNext && this.BtnNext.enabled) {
        if(this.BtnNext.handler) {
          let invoking = Ti.Util.genInvoking(this.BtnNext.handler, {
            context: this.value,
            partial: false
          })
          invoking.apply(this, [this.value])
        } else {
          this.gotoFromCurrent(1)
        }
      }
    },
    //----------------------------------------------
    //
    // Utility Methods
    //
    //----------------------------------------------
    getStep(keyOrIndex) {
      // By Index: -1 is the last item
      if(_.isNumber(keyOrIndex)) {
        let i = Ti.Num.scrollIndex(keyOrIndex, this.StepList.length)
        if(i>=0)
          return this.StepList[i]
      }
      // By Key
      else {
        for(let step of this.StepList) {
          if(step.stepKey == keyOrIndex) {
            return step
          }
        }
      }
      // Return undefined
    },
    //----------------------------------------------
    gotoStep(keyOrIndex) {
      let step = this.getStep(keyOrIndex)
      if(step) {
        let oldStep = _.cloneDeep(this.CurrentStep)
        this.myCurrent = step.index

        this.$notify("step:chanage", {
          index: step.index,
          step,
          oldStep
        })
      }
    },
    //----------------------------------------------
    gotoFromCurrent(off=1) {
      if(this.CurrentStep) {
        let nextStepIndex = this.CurrentStep.index + off
        this.gotoStep(nextStepIndex)
      }
    },
    //----------------------------------------------
    getStepAction(stepBtn, dftSetting={}) {
      if(stepBtn) {
        //console.log(stepBtn, this.value)
        let btn;
        let enabled = stepBtn.enabled
        // Boolean default
        if(_.isBoolean(stepBtn)) {
          btn = {}
        }
        // Customized Text 
        else if(_.isString(stepBtn)) {
          btn = {text : stepBtn || dftText}
        }
        // Actions
        else {
          btn = _.assign({}, stepBtn)
          //console.log({stepBtn, val: this.value})
          // Customized
          if(_.isFunction(enabled)) {
            btn.enabled = enabled(this.value)
          }
          // Directly
          else if(_.isBoolean(enabled)) {
            btn.enabled = enabled
          }
          // Eval enabled
          else if(enabled) {
            btn.enabled = Ti.AutoMatch.test(enabled, this.value)
          }
        }
        // Setup 
        _.defaults(btn, dftSetting)
        btn.className = Ti.Css.mergeClassName(btn.className)
        // ClassName
        if(btn.enabled) {
          btn.className["is-enabled"] = true
        }
        // Revers
        if(btn.reverse) {
          btn.className["is-reverse"] = true
        }

        // Return 
        return btn
      }
    }
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "CurrentStep" : {
      handler : function(step, oldstep) {
        if(step && _.isFunction(step.prepare)) {
          if(!oldstep || step.stepKey != oldstep.stepKey) {
            step.prepare.apply(this, [step])
          }
        }
      },
      immediate : true
    }
  }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-table.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/table/ti-table.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////
  data: () => ({
    virtualPageCount: 0,
    virtualScopeBegin: 0,
    virtualScopeEnd: -1,
    rowsRenderedAt: 0
  }),
  ///////////////////////////////////////////////////
  // props -> ti-table-props.mjs
  ///////////////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      let klass = this.getTopClass(
        {
          // "is-cells-no-ready" : !this.myCellsReady,
          // "is-layout-ready" : this.myCellsReady,
          "is-hoverable": this.hoverable
        },
        [`is-border-${this.border}`, `is-head-${this.head || "none"}`]
      );
      // Auto judgement table layout
      if (!klass["is-layout-fixed"] && !klass["is-layout-auto"]) {
        let tableLayout = "auto";
        for (let i = 0; i < this.myFields.length; i++) {
          let fld = this.myFields[i];
          if (!Ti.Util.isNil(fld.width)) {
            tableLayout = "fixed";
            break;
          }
        }
        klass[`is-layout-${tableLayout}`] = true;
      }
      return klass;
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      });
    },
    //--------------------------------------
    TableStyle() {
      if (this.myTableWidth > 0) {
        return Ti.Css.toStyle({
          "width": this.myTableWidth
        });
      }
    },
    //--------------------------------------
    RowScopeFrom() {
      return Math.max(this.virtualScopeBegin, 0);
    },
    //--------------------------------------
    RowScopeTo() {
      if (this.virtualScopeEnd < 0) {
        return this.data.length;
      }
      return Math.min(this.virtualScopeEnd, this.data.length);
    },
    //--------------------------------------
    RowCheckIcons() {
      let re = {};
      _.forEach(this.checkIcons, (v, k) => {
        let ico = Ti.Icons.parseFontIcon(v);
        if (ico) {
          re[k] = ico.className;
        }
      });
      return re;
    },
    //--------------------------------------
    getRowIndent() {
      if (_.isFunction(this.indentBy)) {
        return (it) => this.indentBy(it);
      }
      if (_.isString(this.indentBy)) {
        return (it) => _.get(it, this.indentBy);
      }
      return (it) => 0;
    },
    //--------------------------------------
    getRowIcon() {
      if (_.isFunction(this.iconBy)) {
        return (it) => this.iconBy(it);
      }
      if (_.isString(this.iconBy)) {
        return (it) => _.get(it, this.iconBy);
      }
      return (it) => null;
    },
    //--------------------------------------
    isShowHead() {
      return /^(frozen|normal)$/.test(this.head);
    },
    //--------------------------------------
    HeadCheckerIcon() {
      if (this.isAllChecked) {
        return "fas-check-square";
      }
      if (this.hasChecked) {
        return "fas-minus-square";
      }
      return "far-square";
    },
    //--------------------------------------
    VirtualRowStyle() {
      return {
        height: `${this.virtualRowHeight}px`
      };
    },
    //--------------------------------------
    VirtualRows() {
      this.LOG("Gen VirtualRows");
      if (this.rowsRenderedAt > 0) {
        if (this.virtualPageCount > 0) {
          let I0 = this.RowScopeFrom;
          let I1 = this.RowScopeTo;
          return _.cloneDeep(this.tblRows.slice(I0, I1));
        }
        return _.cloneDeep(this.tblRows.slice(0));
      }
    },
    //--------------------------------------
    hasVirtualRowHead() {
      return this.virtualPageCount > 0 && this.virtualScopeBegin > 0;
    },
    //--------------------------------------
    hasVirtualRowTail() {
      return (
        this.virtualPageCount > 0 &&
        this.virtualScopeEnd > 0 &&
        this.virtualScopeEnd < this.data.length
      );
    },
    //--------------------------------------
    VirtualRowHeadStyle() {
      return {
        height: `${this.virtualRowHeight * this.virtualScopeBegin}px`
      };
    }, //--------------------------------------
    VirtualRowTailStyle() {
      let N = this.tblRows.length;
      return {
        height: `${this.virtualRowHeight * (N - this.virtualScopeEnd)}px`
      };
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnClickHeadChecker() {
      // Cancel All
      if (this.isAllChecked) {
        this.cancelRow();
      }
      // Check All
      else {
        this.checkRow();
      }
    },
    //--------------------------------------
    OnClickTop($event) {
      if (this.cancelable) {
        // Click The body or top to cancel the row selection
        if (
          Ti.Dom.hasOneClass(
            $event.target,
            "ti-table",
            "table-body",
            "table-head-cell",
            "table-head-cell-text"
          )
        ) {
          this.cancelRow();
        }
      }
    },
    //--------------------------------------
    OnClickRowIcon(row, $event) {
      this.$notify("icon", {
        rowId: row.id,
        shift: $event.shiftKey,
        toggle: $event.ctrlKey || $event.metaKey
      });
    },
    //--------------------------------------
    OnClickQuickLabelCopy({ text } = {}, $event) {
      let $l = Ti.Dom.closest($event.srcElement, ".ti-label");
      Ti.Be.BlinkIt($l);
      Ti.Be.writeToClipboard(text);
    },
    //--------------------------------------
    OnClickChecker(row, $event) {
      if (!this.checkable || !row.checkable) {
        return;
      }
      this.OnRowCheckerClick({
        rowId: row.id,
        shift: $event.shiftKey,
        toggle: $event.ctrlKey || $event.metaKey
      });
    },
    //--------------------------------------
    OnClickRow(row, $event = {}) {
      this.LOG("OnClickRow", row.id);
      if (!this.selectable || !row.selectable) {
        return;
      }
      let toggle = $event.ctrlKey || $event.metaKey;
      if (!row.current || toggle) {
        this.OnRowSelect({
          rowId: row.id,
          shift: $event.shiftKey,
          toggle
        });
      }
    },
    //-----------------------------------------------
    OnDblClickRow(row, $event = {}) {
      if (this.openable) {
        $event.stopPropagation();
        if (this.notifyOpenName) {
          this.$notify(this.notifyOpenName, row);
        }
        if (_.isFunction(this.onOpen)) {
          this.onOpen(row);
        }
      }
    },
    //-----------------------------------------------
    OnCellItemChanged(row, cell, item, payload) {
      this.$notify("cell:item:change", {
        rowId: row.id,
        rowData: row.rowData,
        cellIndex: cell.index,
        index: row.index,
        name: item.key,
        value: payload
      });
    },
    //--------------------------------------
    tryCheckedIds(newVal, oldVal) {
      _.delay(() => {
        if (!_.isEqual(newVal, oldVal)) {
          this.LOG("tryCheckedIds", { newVal, oldVal });
          let ids = {};
          _.forEach(newVal, (_, k) => {
            ids[k] = true;
          });
          _.forEach(oldVal, (_, k) => {
            ids[k] = true;
          });
          this.reEvalRows(ids);
        }
      });
    },
    //--------------------------------------
    evalRenderScope() {
      if (this.enableScope && this.virtualRowHeight > 0 && this.myTableRect) {
        let vH = this.myTableRect.height;
        let rH = this.virtualRowHeight;
        this.LOG("evalRenderScope-begin", vH, rH);
        let vpc = Math.round(vH / rH);
        let halfVpc = Math.round(vpc / 2);
        this.virtualPageCount = vpc;
        if (vpc > 0) {
          // Find the active row
          let arI = this.findRowIndexById(this.theCurrentId);
          arI = Math.max(arI, 0);

          let scope = [];
          // Out of the  first screen
          if (arI > vpc) {
            scope[0] = arI - vpc;
            scope[1] = arI + vpc;
          }
          // In the first screen
          else {
            scope[0] = 0;
            scope[1] = vpc + halfVpc;
          }
          scope[0] = Math.max(0, scope[0]);
          scope[1] = Math.min(scope[1], this.data.length);
          this.virtualScopeBegin = scope[0];
          this.virtualScopeEnd = scope[1];
          this.LOG("evalRenderScope-end", {
            vH,
            rH,
            vpc,
            arI,
            scope: scope.join(":")
          });
        } else {
          this.virtualScopeBegin = 0;
          this.virtualScopeEnd = 0;
          this.LOG("evalRenderScope-end(B)", { vH, rH, vpc, scope: "0:0" });
        }
      }
      // Render all
      else {
        this.virtualScopeBegin = 0;
        this.virtualScopeEnd = -1;
        this.LOG("evalRenderScope-end(C)", { scope: "0:-1" });
      }
    },
    //--------------------------------------
    __ti_shortcut(uniqKey) {
      //this.LOG("ti-table", uniqKey)
      if ("ARROWUP" == uniqKey) {
        this.selectPrevRow({
          payload: { byKeyboardArrow: true }
        });
        this.scrollCurrentIntoView();
        return { prevent: true, stop: true, quit: true };
      }

      if ("ARROWDOWN" == uniqKey) {
        this.selectNextRow({
          payload: { byKeyboardArrow: true }
        });
        this.scrollCurrentIntoView();
        return { prevent: true, stop: true, quit: true };
      }
    },
    //--------------------------------------
    OnScroll($event) {
      let N = this.data.length;
      if (N <= 0 || !this.myTableRect) {
        return;
      }
      let vH = this.myTableRect.height;
      let sT = this.$el.scrollTop;
      let sH = this.$el.scrollHeight;
      let r0H = this.virtualRowHeight;
      let r1H = Math.ceil(sH / N);
      let vpc = this.virtualPageCount;
      let vs0 = this.RowScopeFrom;
      let vs1 = this.RowScopeTo;

      let halfVpc = Math.round(this.virtualPageCount / 2);

      let I0 = parseInt(sT / r0H) - halfVpc;
      let vBegin = Math.max(0, Math.min(vs0, I0));

      let I1 = parseInt((sT + vH) / r1H) + vpc;
      let vEnd = Math.min(N, Math.max(vs1, I1));
      if (vEnd < 0) {
        vEnd = N;
      }

      this.LOG({
        sT,
        sH,
        // E1: `${sT} / ${r1H}`,
        // vs: JSON.stringify([vs0, vs1]),
        // I: JSON.stringify([I0, I1]),
        s: JSON.stringify([vBegin, vEnd])
      });
      this.virtualScopeBegin = vBegin;
      this.virtualScopeEnd = vEnd;
      this.evalTableRows();
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////////////
  watch: {
    "data": async function (newVal, oldVal) {
      this.evalRenderScope();
      await this.evalListDataWhenMarkChanged(newVal, oldVal);
      _.delay(() => {
        this.scrollCurrentIntoView();
      }, 0);
    },
    // Sometimes the puppet mode, currentId will be changed outside
    "currentId": async function (newVal, oldVal) {
      //console.log("update currentId", newVal, oldVal);
      if (this.puppetMode && !_.isEqual(newVal, oldVal)) {
        let ids = {};
        if (!Ti.Util.isNil(newVal)) {
          ids[newVal] = true;
        }
        if (!Ti.Util.isNil(oldVal)) {
          ids[oldVal] = true;
        }
        this.reEvalRows(ids);
      }
    },
    "checkedIds": async function (newVal, oldVal) {
      //console.log("update checkedIds", newVal, oldVal);
      if (this.puppetMode && !_.isEqual(newVal, oldVal)) {
        let ids = {
          ...Ti.Util.getTruthyKeyInMap(newVal),
          ...Ti.Util.getTruthyKeyInMap(oldVal)
        };
        this.reEvalRows(ids);
      }
    },
    //"TableFields": "evalListDataWhenMarkChanged", //<= it will cause evalListData always
    "selectable": "evalListDataWhenMarkChanged",
    "checkable": "evalListDataWhenMarkChanged",
    "hoverable": "evalListDataWhenMarkChanged",
    "filterValue": "evalListDataWhenMarkChanged",
    "checkedIds": "tryCheckedIds",
    "fields": "tryEvalFields"
  },
  ///////////////////////////////////////////////////
  created: function () {
    this.LOG = () => {};
    //this.LOG = console.log;
  },
  ///////////////////////////////////////////////////
  mounted: async function () {
    // Measure self
    this.myTableRect = Ti.Rects.createBy(this.$el);

    Ti.Viewport.watch(this, {
      resize: _.debounce(() => this.OnResize(), 10)
    });
    this.debounceScroll = _.throttle(($event) => {
      this.OnScroll($event);
    }, 200);
    this.$el.addEventListener("scroll", this.debounceScroll);

    // Restore columns setting
    this.evalFields();

    // Eval each row and cells
    await this.evalListData();

    // render scope, it need the data for find index
    this.evalRenderScope();

    // Eval the table viewport Rect, it need scope
    await this.__eval_row_after_data();
    _.delay(() => {
      this.scrollCurrentIntoView();
    }, 0);
  },
  ///////////////////////////////////////////////////
  beforeDestroy: function () {
    this.$el.removeEventListener("scroll", this.debounceScroll);
    Ti.Viewport.unwatch(this);
  }
  ///////////////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'web-shelf-falls.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/shelf/falls/web-shelf-falls.mjs'] = (function(){
const DFT_ITEM_WIDTH = 200
const _M = {
  //////////////////////////////////////////
  data: () => ({
    myColWidths: [],
    myCols: 0
  }),
  //////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "data": {
      type: Array
    },
    "vars": {
      type: Object,
      default: undefined
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    // Item comType
    "comType": {
      type: String,
      default: "ti-label"
    },
    "comConf": {
      type: [Object, String],
      default: () => ({
        value: "=.."
      })
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "blankAs": {
      type: Object,
      default: () => ({
        text: "i18n:empty",
        icon: "fas-box-open"
      })
    },
    "loadingAs": {
      type: [Object, Boolean],
      default: () => ({})
    },
    "cols": {
      type: [Number, String]
    },
    "itemClass": {
      type: [String, Array]
    },
    "itemStyle": {
      type: [Object, Array]
    },
    "itemWidth": {
      type: [String, Number, Array],
      default: DFT_ITEM_WIDTH
    },
    "itemMaxHeight": {
      type: [String, Number, Array]
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "has-data": this.FallsData
      })
    },
    //--------------------------------------
    getItemClass() {
      let itKlass = _.without(_.concat(this.itemClass))
      return (index) => {
        let i;
        if (itKlass.length > 0) {
          i = Ti.Num.scrollIndex(index, itKlass.length)
          return itKlass[i]
        }
      }
    },
    //--------------------------------------
    getItemStyle() {
      let itHs = _.without(_.concat(this.itemMaxHeight), undefined)
      let itStyles = _.without(_.concat(this.itemStyle), undefined)
      return (index) => {
        let h, sty, i;
        if (itHs.length > 0) {
          i = Ti.Num.scrollIndex(index, itHs.length)
          h = itHs[i]
        }
        if (itStyles.length > 0) {
          i = Ti.Num.scrollIndex(index, itStyles.length)
          sty = itStyles[i]
        }
        let css = _.cloneDeep(sty) || {}
        if (!Ti.Util.isNil(h)) {
          css.maxHeight = Ti.Css.toSize(h)
        }
        return css
      }
    },
    //--------------------------------------
    FallsData() {
      if (!this.hasData)
        return []

      let C = this.myCols
      let groups = []
      // Init Groups
      for (let i = 0; i < C; i++) {
        let gW = _.nth(this.myColWidths, i)
        let style;
        if (gW) {
          style = { width: gW + 'px' }
        }
        groups.push({
          style, items: []
        })
      }

      // Each data
      let vars = _.cloneDeep(this.vars)
      for (let i = 0; i < this.data.length; i++) {
        let cIX = i % C
        let grp = groups[cIX]
        let stl = this.getItemStyle(i)
        let it = this.data[i]
        let comConf;
        if (vars) {
          vars.item = it
          comConf = Ti.Util.explainObj(vars, this.comConf)
        } else {
          comConf = Ti.Util.explainObj(it, this.comConf)
        }
        if (stl.maxHeight) {
          comConf.style = _.assign({}, comConf.style, {
            maxHeight: stl.maxHeight
          })
        }
        grp.items.push({
          key: `It-${i}`,
          className: this.getItemClass(i),
          style: stl,
          comType: this.comType, comConf
        })
      }

      return groups
    },
    //--------------------------------------
    isLoading() {
      return Ti.Util.isNil(this.data)
    },
    //--------------------------------------
    isEmpty() {
      return _.isEmpty(this.FallsData)
    },
    //--------------------------------------
    hasData() {
      return this.myCols > 0 && !_.isEmpty(this.data)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnWallResize() {
      this.$nextTick(() => {
        this.evalWallColumns()
      })
    },
    //--------------------------------------
    evalWallColumns() {
      //console.log("evalWallColumns")
      // Specific cols
      if (this.cols > 0) {
        this.myCols = parseInt(this.cols * 1)
        this.myColWidths = []
        return
      }
      // Guard
      if (!_.isElement(this.$el) || !this.data || this.data.length <= 0) {
        return
      }

      // Whole width
      let elW = this.$el.clientWidth

      // Get rem base
      // let $html = this.$el.ownerDocument.documentElement
      // let fontSize = $html.style.fontSize || "100px"
      // let remBase = Ti.Css.toAbsPixel(fontSize)
      let remBase = Ti.Dom.getRemBase()

      // Item width list
      let itWs = _.without(_.concat(this.itemWidth), undefined)

      let sumW = 0;
      let colWidths = []
      for (let i = 0; i < this.data.length; i++) {
        // Get item width by index
        let w;
        if (itWs.length > 0) {
          let x = Ti.Num.scrollIndex(i, itWs.length)
          w = Ti.Css.toAbsPixel(itWs[x], {
            remBase, base: elW
          })
        } else {
          w = DFT_ITEM_WIDTH
        }
        // Add up
        sumW += w
        if (sumW > elW) {
          break
        }
        colWidths.push(w)
      }

      // Done
      this.myCols = colWidths.length
      this.myColWidths = colWidths
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "data": "OnWallResize",
    "cols": "OnWallResize",
    "itemWidth": "OnWallResize"
  },
  //////////////////////////////////////////
  mounted: function () {
    //.................................
    Ti.Viewport.watch(this, {
      resize: _.debounce(() => this.OnWallResize(), 20)
    })
    //.................................
    this.OnWallResize()
    //.................................
  },
  //////////////////////////////////////////
  destroyed: function () {
    Ti.Viewport.unwatch(this)
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-fileset-mixins.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/support/wn-fileset-mixins.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  props : {
    "meta" : {
      type : Object,
      default : undefined
    },
    "viewReady" : {
      type : Boolean,
      default : false
    },
    "match" : {
      type : Object,
      default : undefined
    },
    "sort" : {
      type : Object,
      default : ()=>({
        nm : 1
      })
    },
    "skip" : {
      type : Number,
      default: 0
    },
    "limit" : {
      type : Number,
      default: 100
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass();
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    async reloadChildren(obj=this.meta) {
      if(!obj || !obj.id)
        return []

      let match = _.cloneDeep(this.match) || {}
      match.pid = obj.id

      let reo = await Wn.Io.find({
        match,
        skip  : this.skip,
        limit : this.limit,
        sort  : this.sort
      })

      return reo.list || []
    },
    //------------------------------------------------
    async _try_reload() {
      if(_.isFunction(this.reload) && this.meta && this.viewReady) {
        await this.reload()
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    "meta" : {
      handler : function(newVal, oldVal) {
        if(!_.isEqual(newVal, oldVal)) {
          this._try_reload()
        }
      }
    },
    "viewReady" : {
      handler : "_try_reload",
      immediate : true
    }
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'list_item_mixins.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/support/list_item_mixins.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inject: ["$vars"],
  ///////////////////////////////////////////////////
  data: () => ({
    groupTitleComs: [],
  }),
  ///////////////////////////////////////////////////
  props: {
    "index": {
      type: Number,
      default: -1
    },
    "displayIndex": {
      type: Number,
      default: -1
    },
    "rowNumberBase": {
      type: Number,
      default: undefined
    },
    "rowCount": {
      type: Number,
      default: undefined
    },
    "rowNumberWidth": {
      type: Number,
      default: undefined
    },
    "asGroupTitle": {
      type: Boolean,
      default: false
    },
    "groupTitleDisplay": {
      type: Array
    },
    "rowId": {
      type: String,
      default: undefined
    },
    "data": undefined,
    "item": {
      type: Object,
      default: () => ({})
    },
    "changedId": {
      type: String,
      default: undefined
    },
    "currentId": {
      type: [String, Number, Boolean],
      default: undefined
    },
    "checkedIds": {
      type: Object,
      default: () => ({})
    },
    "checkable": {
      type: Boolean,
      default: false
    },
    "selectable": {
      type: Boolean,
      default: true
    },
    "openable": {
      type: Boolean,
      default: true
    },
    "rowToggleKey": {
      type: Array,
      default: () => []
    },
    "checkIcons": {
      type: Object,
      default: () => ({
        on: "fas-check-square",
        off: "far-square"
      })
    }
  },
  ///////////////////////////////////////////////////
  computed: {
    //-----------------------------------------------
    getListItemClass() {
      return (...klass) => this.getTopClass({
        "is-current": this.isCurrent,
        "is-checked": this.isChecked,
        "is-changed": this.isChanged,
        "no-checked": !this.isChecked
      }, klass)
    },
    //-----------------------------------------------
    hasRowNumber() {
      return !this.asGroupTitle && _.isNumber(this.rowNumberBase)
    },
    //-----------------------------------------------
    RowNumber() {
      if (this.hasRowNumber) {
        let n = this.rowNumberBase + this.displayIndex
        if (this.rowNumberWidth > 1) {
          return _.padStart(n, this.rowNumberWidth, '0');
        }
        return n
      }
    },
    //-----------------------------------------------
    hasGroupTitleComs() {
      return !_.isEmpty(this.groupTitleComs)
    },
    //-----------------------------------------------
    hasRowId() {
      return !Ti.Util.isNil(this.rowId)
    },
    //-----------------------------------------------
    isCurrent() {
      //let ms = Date.now()
      let re = this.hasRowId && this.rowId == this.currentId
      //let du = Date.now() - ms
      //console.log("row isCurrent", du, this.rowId)
      return re;
    },
    //-----------------------------------------------
    isChanged() {
      //console.log("row isChanged", this.rowId)
      return this.hasRowId && this.rowId == this.changedId
    },
    //-----------------------------------------------
    isChecked() {
      //let ms = Date.now()
      let re = this.checkedIds[this.rowId] ? true : false
      //let du = Date.now() - ms
      //console.log("row isChecked", du, this.rowId)
      return re;
    },
    //-----------------------------------------------
    theCheckIcon() {
      if (this.checkedIds[this.rowId]) {
        return this.checkIcons.on
      }
      return this.checkIcons.off
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods: {
    //-----------------------------------------------
    isRowToggleKey(uniqKey) {
      return _.indexOf(this.rowToggleKey, uniqKey) >= 0
    },
    //-----------------------------------------------
    OnClickChecker($event = {}) {
      if (this.checkable) {
        this.$notify("checker", {
          rowId: this.rowId,
          shift: $event.shiftKey,
          toggle: ($event.ctrlKey || $event.metaKey)
        })
      }
    },
    //-----------------------------------------------
    OnClickRow($event = {}) {
      //console.log("row:OnClickRow", this.rowId)
      let toggle = ($event.ctrlKey || $event.metaKey)
      if (this.selectable && (!this.isCurrent || !this.isChecked || toggle)) {
        this.$notify("select", {
          rowId: this.rowId,
          shift: $event.shiftKey,
          toggle
        })
        this.doAutoActived()
      }
    },
    //-----------------------------------------------
    OnDblClickRow($event = {}) {
      if (this.openable) {
        $event.stopPropagation()
        this.$notify("open", {
          rowId: this.rowId
        })
      }
    },
    //-----------------------------------------------
    doAutoActived() {
      if (!this.isActived && this.isCurrent) {
        this.setActived()
      }
    },
    //-----------------------------------------------
    async evalGroupTitleDisplayCom() {
      if (this.asGroupTitle && !_.isEmpty(this.groupTitleDisplay)) {
        let coms = []
        for (let displayItem of this.groupTitleDisplay) {
          let com = await this.$parent.evalDataForFieldDisplayItem({
            itemData: this.data,
            displayItem,
            vars: {
              "rowId": this.rowId,
              "isCurrent": this.isCurrent
            },
            autoIgnoreNil: false,
          })
          coms.push(com)
        }
        this.groupTitleComs = coms;
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch: {
    "data": "evalGroupTitleDisplayCom",
    "groupTitleDisplay": "evalGroupTitleDisplayCom"
  },
  ///////////////////////////////////////////////////
  mounted: async function () {
    await this.evalGroupTitleDisplayCom()
  }
  ///////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-row-image.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/row/image/web-row-image.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////
  data: ()=>({
    myMouseIn : false,   
    naturalWidth  : -1,
    naturalHeight : -1,
    clientWidth  : -1,
    clientHeight : -1,
    imgLoading : true,
    myEnterAt : -1,    // AMS mouse enter for cooling
    myEnterNotifed : false
  }),
  /////////////////////////////////////////
  props : {
    //-------------------------------------
    // Data
    //-------------------------------------
    "src" : {
      type : [String, Object]
    },
    "preview": {
      type: Object
    },
    "hoverPreview": {
      type: Object
    },
    "tags": {
      type: [String, Array, Object]
    },
    "text": {
      type: String
    },
    "brief": {
      type: String
    },
    //-------------------------------------
    // Behavior
    //-------------------------------------
    "hasLink" : {
      type: [String, Boolean, Object],
      default: undefined
    },
    "link": {
      type: String
    },
    "href": {
      type: String
    },
    "navTo": {
      type: Object
    },
    "newtab": {
      type: [String, Boolean]
    },
    "clickToNotify": {
      type: String,
      default: undefined
    },
    "enterNotify" : {
      type : [String, Boolean]
      /*default: "media:enter"*/
    },
    "notifyPayload" : {
      type : [Object, String, Number]
    },
    "enterCooling" : {
      type : Number,
      default : 500
    },
    "leaveNotify" : {
      type : [String, Boolean]
      /*default: "media:leave"*/
    },
    //-------------------------------------
    // Aspect
    //-------------------------------------
    "effects": {
      type: Object,
      default: ()=>({})
    },
    "leftPartStyle": {
      type: Object
    },
    "rightPartStyle": {
      type: Object
    },
    "imageConStyle": {
      type: Object
    },
    "imageStyle": {
      type: Object
    },
    "tagsStyle": {
      type: Object
    },
    "textStyle": {
      type: Object
    },
    "briefStyle": {
      type: Object
    },
    "i18n": {
      type: Boolean,
      default: true
    },
    //-------------------------------------
    // Measure
    //-------------------------------------
    // ...
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "has-href" : this.TheHref ? true : false,
        "no-href"  : this.TheHref ? false : true
      }, this.effects)
    },
    //--------------------------------------
    LeftPartStyle() {
      return Ti.Css.toStyle(this.leftPartStyle)
    },
    //--------------------------------------
    RightPartStyle() {
      return Ti.Css.toStyle(this.rightPartStyle)
    },
    //--------------------------------------
    TagsStyle() {
      return Ti.Css.toStyle(this.tagsStyle)
    },
    //--------------------------------------
    ImageStyle() {
      return Ti.Css.toStyle(this.imageStyle)
    },
    //--------------------------------------
    TextStyle() {
      return Ti.Css.toStyle(this.textStyle)
    },
    //--------------------------------------
    BriefStyle() {
      return Ti.Css.toStyle(this.briefStyle)
    },
    //--------------------------------------
    EnterNotifyName() {
      return Ti.Util.trueGet(this.enterNotify, "media:enter")
    },
    //--------------------------------------
    LeaveNotifyName() {
      return Ti.Util.trueGet(this.leaveNotify, "media:leave")
    },
    //--------------------------------------
    TheSrc() {
      return Ti.WWW.evalObjPreviewSrc(this.src, this.preview)
    },
    //--------------------------------------
    TheHoverSrc() {
      return Ti.WWW.evalObjPreviewSrc(this.src, this.hoverPreview)
    },
    //--------------------------------------
    TheTags() {
      if(this.tags) {
        let tags = _.concat(this.tags)
        let list = []
        for(let tag of tags) {
          if(_.isString(tag)) {
            list.push({
              className : undefined,
              text : tag
            })
          } else {
            let {text,color,className} = tag
            if(!text) {
              continue
            }
            let style;
            if(color) {
              style = {"background-color" : color}
            }
            list.push({text, style, className})
          }
        }
        return list
      }
    },
    //--------------------------------------
    TheText() {
      if(this.text) {
        let str = this.text
        if(_.isPlainObject(this.src)) {
          str = Ti.Util.explainObj(this.src, this.text)
        }
        if(this.i18n) {
          str = Ti.I18n.text(str)
        }
        return str
      }
    },
    //--------------------------------------
    TheBrief() {
      if(this.brief) {
        let str = this.brief
        if(_.isPlainObject(this.src)) {
          str = Ti.Util.explainObj(this.src, this.brief)
        }
        if(this.i18n) {
          str = Ti.I18n.text(str)
        }
        return str
      }
    },
    //--------------------------------------
    isHasLink() {
      if(this.link) {
        return true
      }
      // Auto
      if(_.isUndefined(this.hasLink)) {
        return this.href || _.get(this.navTo, "value") ? true : false
      }
      return this.hasLink ? true : false
    },
    //--------------------------------------
    TheHref() {
      if(this.link) {
        return this.link
      }
      if(this.isHasLink) {
        let href = this.href
        if(_.isPlainObject(this.src)) {
          href = Ti.Util.explainObj(this.src, this.href)
        }
        return href
      }
    },
    //--------------------------------------
    LinkTarget() {
      return this.isNewTab ? '_blank' : '_self'
    },
    //--------------------------------------
    isNewTab() {
      let newtab = this.newtab
      if(_.isString(newtab)) {
        if(_.isPlainObject(this.src)) {
          newtab = Ti.Util.explainObj(this.src, this.newtab)
        }
      }
      return newtab ? true : false
    },
    //--------------------------------------
    isWaitEnterCooling() {
      return this.myEnterAt > 0 && !this.myEnterNotifed
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnImageLoaded() {
      let $img = this.$refs.img
      if($img) {
        this.naturalWidth  = $img.naturalWidth
        this.naturalHeight = $img.naturalHeight
        this.clientWidth  = $img.clientWidth
        this.clientHeight = $img.clientHeight
        this.imgLoading = false
      }
    },
    //--------------------------------------
    OnClickTop(evt) {
      if(this.clickToNotify) {
        evt.preventDefault()
        let payload = _.assign({
          $el : this.$el,
          $partLeft : this.$refs.partLeft,
          $partRight : this.$refs.partRight
        }, this.notifyPayload)
        this.$notify(this.clickToNotify, payload)
        return
      }
    },
    //--------------------------------------
    OnClickLink(evt) {
      if(this.clickToNotify) {
        evt.preventDefault()
        let payload = _.assign({
          $el : this.$el,
          $partLeft : this.$refs.partLeft,
          $partRight : this.$refs.partRight
        }, this.notifyPayload)
        this.$notify(this.clickToNotify, payload)
        return
      }
      if(!this.isHasLink) {
        return
      }
      if(this.navTo && !this.newtab && !this.link) {
        evt.preventDefault()
        this.$notify("nav:to", this.navTo)
      }
    },
    //--------------------------------------
    OnMouseMove($event) {
      if(!_.isElement(this.$refs.img) || !_.isElement(this.$refs.pick)) {
        return
      }
      let imRect = Ti.Rects.createBy(this.$refs.img)
      let pkRect = Ti.Rects.createBy(this.$refs.pick)
      let {clientX, clientY} = $event

      let rect = Ti.Rects.create({
        x: clientX, y: clientY,
        width  : pkRect.width, 
        height : pkRect.height
      })
      imRect.wrap(rect)
      rect.relative(imRect)

      if(this.TheZoomLens && this.TheZoomLens.followPicker) {
        Ti.Dom.dockTo(this.$refs.dock, this.$refs.pick, {
          mode  : this.TheZoomLens.dockMode,
          space : this.TheZoomLens.dockSpace,
          posListX : this.TheZoomLens.dockPosListX,
          posListY : this.TheZoomLens.dockPosListY
        })
      }

      this.pickRect = rect
      this.showZoomPick = true
    },
    //--------------------------------------
    OnMouseEnter() {
      //console.log("> image")
      this.myMouseIn = true
      this.myEnterAt = Date.now()

      _.delay(()=>{
        this.delayCheckEnter()
      }, 10)

      if(this.EnterNotifyName && this.enterCooling >= 0) {
        _.delay(()=>{
          this.delayNotifyEnter()
        }, this.enterCooling)  
      } else {
        this.myEnterNotifed = true
      }
    },
    //--------------------------------------
    OnMouseLeave() {
      //console.log("< image")
      this.myMouseIn = false
      _.delay(()=>{
        this.delayCheckLeave()
      }, 10)
    },
    //--------------------------------------
    delayNotifyEnter() {
      // Guard
      if(!this.myMouseIn || this.myEnterNotifed || this.myEnterAt<0) {
        this.myEnterNotifed = true
        return
      }
      let du = Date.now()  - this.myEnterAt
      if(du >= this.enterCooling) {
        //console.log("du cooling", du, this.enterCooling)
        this.myEnterNotifed = true
        let payload = _.assign({
          $el : this.$el,
          $partLeft : this.$refs.partLeft,
          $partRight : this.$refs.partRight
        }, this.notifyPayload)
        this.$notify(this.EnterNotifyName, payload)
      }
    },
    //--------------------------------------
    delayCheckEnter() {
      if(!this.myMouseIn) {
        return
      }
      //console.log("enter image")
      //
      // Full text
      //
      if(this.effects.textHoverFull) {
        let $text = this.$refs.partRight
        // Remember the old rect for restore size when mouse leave
        if($text && !$text.__primary_rect) {
          let rect = Ti.Rects.createBy(this.$refs.partRight)
          $text.__primary_rect = rect
          $text.__reset_primary = false
          // Set start size for transition
          Ti.Dom.updateStyle($text, {
            width: rect.width, height: rect.height
          })
        }
        // set full text
        let view = Ti.Rects.createBy(this.$el)
        _.delay(()=>{
          Ti.Dom.updateStyle($text, {
            width: view.width, height: view.height
          })
        }, 10)
      }
      //
      // Switch Hover src
      //
      let $img = this.$refs.img
      if($img && this.TheHoverSrc) {
        $img.src = this.TheHoverSrc
      }
    },
    //--------------------------------------
    delayCheckLeave() {
      if(this.myMouseIn) {
        return
      }
      this.showZoomPick = false
      this.showZoomDock = false
      //console.log("leave image")
      //
      // Full text
      //
      if(this.effects.textHoverFull) {
        let $text = this.$refs.partRight
        // trans event handler
        const OnTextTransitionend = ()=>{
          //console.log("$text transitionend")
          Ti.Dom.updateStyle($text, {
            width: "", height: ""
          })
          $text.__primary_rect = undefined
          $text.__reset_primary = true
        }
        // Remember the old rect for restore size when mouse leave
        if($text && $text.__primary_rect) {
          let rect = $text.__primary_rect
          // Set callback when transitionend
          $text.addEventListener("transitionend", OnTextTransitionend, {once: true})
          // Restore the old size
          _.delay(()=>{
            //console.log("restore to ", rect.toString())
            Ti.Dom.updateStyle($text, {
              width: rect.width, height: rect.height
            })
          }, 10)
          // Make sure restore to old size
          _.delay(()=>{
            if(!$text.__reset_primary && !this.myMouseIn) {
              //console.log("clean!!!")
              Ti.Dom.updateStyle($text, {
                width: "", height: ""
              })
              $text.removeEventListener("transitionend", OnTextTransitionend);
              $text.__primary_rect = undefined
              $text.__reset_primary = true
            }
          }, 1000)
        }
      }
      //
      // Switch Hover src
      //
      let $img = this.$refs.img
      if($img && this.TheHoverSrc) {
        $img.src = this.TheSrc
      }
      //
      // Notify Evento
      //
      if(this.myEnterNotifed && this.LeaveNotifyName) {
        let payload = _.assign({
          $el : this.$el,
          $partLeft : this.$refs.partLeft,
          $partRight : this.$refs.partRight
        }, this.notifyPayload)
        this.$notify(this.LeaveNotifyName, payload)
      }
      this.myEnterNotifed = false
      this.myEnterAt = -1
    },
    //--------------------------------------
    OnTextTransitionend() {
      if(!this.myMouseIn) {
        Ti.Dom.updateStyle(this.$refs.partRight, {
          width: "", height: ""
        })
        this.$refs.partRight.__primary_rect = undefined
      }
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'vod-video-info.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/net/aliyun/vod/video/info/vod-video-info.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////////
  props : {
    "value": {
      type: Object,
      default: undefined
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //---------------------------------------------------
    hasVideo() {
      return this.value ? true : false
    },
    //---------------------------------------------------
    VideoCoverURL() {
      return _.get(this.value, "coverURL")
    },
    //---------------------------------------------------
    FormFields() {
      return [{
        title : "VideoID",
        name  : "videoId"
      }, {
        title : "Title",
        name  : "title"
      }, {
        title : "CateName",
        name  : "cateName"
      }, {
        title : "Description",
        name  : "description"
      }, {
        title : "Duration",
        name  : "duration"
      }, {
        title : "RegionId",
        name  : "regionId"
      }, {
        title : "Size",
        name  : "size"
      }, {
        title : "Status",
        name  : "status"
      }, {
        title : "Tags",
        name  : "tags"
      // }, {
      //   title : "AuditStatus",
      //   name  : "auditStatus"
      // }, {
      //   title : "DownloadSwitch",
      //   name  : "downloadSwitch"
      // }, {
      //   title : "PreprocessStatus",
      //   name  : "preprocessStatus"
      }, {
        title : "CreateTime",
        name  : "createTime"
      }, {
        title : "ModifyTime",
        name  : "modifyTime"
      }]
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods :{
    //---------------------------------------------------
    OnClickPreview(){
      this.$notify("preview", this.value)
    }
    //---------------------------------------------------
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'bar-item-info.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/actionbar/com/bar-item-info/bar-item-info.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////
  inject: ["$bar"],
  ///////////////////////////////////////
  props: {
    "name": {
      type: String,
      default: undefined
    },
    "icon": {
      type: String,
      default: undefined
    },
    "hideIcon": {
      type: Boolean,
      default: false
    },
    "text": {
      type: String,
      default: undefined
    },
    "tip": {
      type: String,
      default: undefined
    },
    "shortcut": {
      type: String,
      default: undefined
    },
    "suffixIcon": {
      type: String,
      default: undefined
    },
    "altDisplay": {
      type: [Object, Array],
      default: () => []
    },
    "enabled": {
      type: [Boolean, String, Array, Object],
      default: undefined
    },
    "disabled": {
      type: [Boolean, String, Array, Object],
      default: undefined
    },
    "highlight": {
      type: [Boolean, String, Array, Object],
      default: undefined
    },
    "value": {
      type: [Boolean, String, Number, Array],
      default: undefined
    },
    "depth": {
      type: Number,
      default: 0
    },
    "status": {
      type: Object,
      default: () => ({})
    }
  },
  ///////////////////////////////////////
  computed: {
    //-----------------------------------
    TopClass() {
      return this.getTopClass({
        "is-enabled": this.isEnabled,
        "is-disabled": this.isDisabled,
        "is-highlight": this.isHighlight,
        "is-top": this.isTop,
        "is-sub": this.isSub,
        "has-icon": this.icon ? true : false,
        "no-icon": this.icon ? false : true,
        "show-icon": this.isShowIcon,
        "hide-icon": !this.isShowIcon
      }, `is-depth-${this.depth}`)
    },
    //-----------------------------------
    isTop() { return this.depth == 1 },
    isSub() { return this.depth > 1 },
    //-----------------------------------
    TipMode() {
      return this.isTop ? 'H' : 'V'
    },
    //-----------------------------------
    AltDisplay() {
      if (_.isArray(this.altDisplay)) {
        return this.altDisplay
      }
      return this.altDisplay
        ? [this.altDisplay]
        : []
    },
    //-----------------------------------
    isEnabled() {
      if (!Ti.Util.isNil(this.enabled)) {
        if (!this.isMatchStatus(this.enabled)) {
          return false
        }
      }
      if (!Ti.Util.isNil(this.disabled)) {
        if (this.isMatchStatus(this.disabled)) {
          return false
        }
      }
      return true
    },
    //-----------------------------------
    isDisabled() {
      return !this.isEnabled
    },
    //-----------------------------------
    isHighlight() {
      if (!Ti.Util.isNil(this.highlight)) {
        return this.isMatchStatus(this.highlight)
      }
      return false
    },
    //-----------------------------------
    isShowShortcut() {
      return this.shortcut && this.depth > 1
    },
    //-----------------------------------
    isShowIcon() {
      return !this.hideIcon || this.hasIcon
    },
    //-----------------------------------
    hasIcon() {
      return this.CurrentDisplay.icon ? true : false
    },
    //-----------------------------------
    CurrentDisplay() {
      // if("bold" == this.name)
      //   console.log("CurrentDisplay", this.name)
      // Prepare default
      let dis = {
        icon: this.icon,
        text: this.text,
        tip: this.tip,
        value: this.value
      }
      // Alt Display
      if (!_.isEmpty(this.AltDisplay)) {
        for (let alt of this.AltDisplay) {
          let mat = alt.match || this.name
          if (this.isMatchStatus(mat)) {
            _.assign(dis, _.pick(alt, [
              "icon", "text", "tip", "value"
            ]))
            break
          }
        }
      }
      // Done
      return dis
    },
    //-----------------------------------
    TheValues() {
      let val = this.CurrentDisplay.value
      // Bool
      if (_.isBoolean(val)) {
        return [val, !val]
      }
      // Array
      if (_.isArray(val))
        return val
      // Normal value
      return [val]
    }
    //-----------------------------------
  },
  ///////////////////////////////////////
  methods: {
    //---------------------------------------
    OnClickTop() {
      //console.log("OClickTop")
      if (!this.isDisabled) {
        let val = this.isHighlight
          ? _.last(this.TheValues)
          : _.first(this.TheValues)

        this.$emit('fire', val)
      }
    },
    //---------------------------------------
    isMatchStatus(mat) {
      if (_.isBoolean(mat)) {
        return mat
      }
      // Key | `"saving"`
      if (_.isString(mat)) {
        return _.get(this.status, mat) ? true : false
      }
      // Complex match
      // Match  | `{saving:true}`
      //console.log(mat, this.status)
      return Ti.AutoMatch.test(mat, this.status)
    }
    //---------------------------------------
  }
  ///////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'm-thing-search-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/thing/mod/search/m-thing-search-actions.mjs'] = (function(){
// Ti required(Wn)
////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  //--------------------------------------------
  async reloadPage({ state, commit, dispatch }, pg) {
    commit("updatePager", pg)
    await dispatch("reload")
  },
  //--------------------------------------------
  async reload({ state, commit, getters }, meta) {
    //............................................
    // Update New Meta
    if (meta) {
      commit("setMeta", meta)
    }
    // Get meta back
    else {
      meta = state.meta
    }
    //............................................
    // Mark reloading
    commit("setStatus", { reloading: true })
    //............................................
    let cmds = [`thing id:${meta.id} query -cqn`]
    //............................................
    // Eval Sorter
    if (!_.isEmpty(state.sorter)) {
      let sort = JSON.stringify(state.sorter)
      cmds.push(`-sort '${sort}'`)
    }
    //............................................
    // Eval Pager
    if (getters.isPagerEnabled) {
      let limit = state.pager.pgsz
      let skip = state.pager.pgsz * (state.pager.pn - 1)
      cmds.push(' -pager')
      cmds.push(`-limit ${limit}`)
      cmds.push(`-skip  ${skip}`)
    }

    //............................................
    // Eval Showkeys
    if (state.showKeys) {
      cmds.push(` -e '${state.showKeys}'`)
    }

    //............................................
    // Run Command
    let input = getters.filterStr
    let cmdText = cmds.join(" ")
    let reo = await Wn.Sys.exec2(cmdText, { input, as: "json" })
    //............................................
    // All done
    if (getters.isPagerEnabled) {
      commit("setPager", reo.pager)
      commit("setList", reo.list)
    } else {
      commit("setList", reo)
    }
    commit("setStatus", { reloading: false })
  }
  //--------------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-obj-pvgview.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/pvgview/wn-obj-pvgview.mjs'] = (function(){
const DFT_PVG = 5;
const __TI_MOD_EXPORT_VAR_NM = {
  //////////////////////////////////////////
  data: () => ({
    myObjs: [],
    mySite: {},

    myCurrentPvg: undefined,
    //
    // Status
    //
    myCurrentId: null,
    loading: false,
    saving: false
  }),
  //////////////////////////////////////////
  props: {
    "loadObj": {
      type: [Array, String],
      default: "o ~ @query -append -sort 'nm:1' @json -cqn"
    },
    "loadSite": {
      type: [Object, String],
      default: 'domain site -cqn -keys "^(id|nm|ph|title)$"'
    },
    "keepCustomizedTo": {
      type: String,
      default: "Wn-Obj-PvgView-Layout-Main-Col"
    },
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    hasCurrent() {
      return this.myCurrentId ? true : false
    },
    //--------------------------------------
    CurrentObj() {
      if (this.hasCurrent) {
        for (let obj of this.myObjs) {
          if (obj.id == this.myCurrentId) {
            return obj
          }
        }
      }
    },
    //--------------------------------------
    CurrentObjPvg() {
      return _.get(this.CurrentObj, "pvg")
    },
    //--------------------------------------
    CurrentObjPvgValue() {
      return this.myCurrentPvg || this.CurrentObjPvg
    },
    //--------------------------------------
    isCurrentChanged() {
      return this.hasCurrent
        && this.myCurrentPvg
        && !_.isEqual(this.CurrentObjPvg, this.myCurrentPvg)
    },
    //--------------------------------------
    Layout() {
      return {
        type: "cols",
        border: true,
        keepCustomizedTo: this.keepCustomizedTo,
        blocks: [{
          title: "对象列表",
          size: "37.2%",
          name: "list",
          body: "list"
        }, {
          title: "权限设置",
          actions: [
            {
              "name": "view",
              "type": "action",
              "icon": "zmdi-info",
              "text": "查看对象",
              "enabled": "hasCurrent",
              "eventName": "view:current:obj"
            },
            {},
            {
              "name": "saving",
              "type": "action",
              "icon": "zmdi-floppy",
              "text": "保存权限设置",
              "altDisplay": {
                "icon": "fas-spinner fa-pulse",
                "text": "i18n:saving"
              },
              "enabled": "changed",
              "eventName": "save:current:pvg"
            }
          ],
          actionStatus: {
            hasCurrent: this.hasCurrent,
            changed: this.isCurrentChanged,
            saving: this.saving
          },
          name: "pvg",
          body: "pvg"
        }]
      }
    },
    //--------------------------------------
    Schema() {
      let schema = {
        list: {
          comType: "WnList",
          comConf: {
            dftLabelHoverCopy: false,
            checkable: false,
            multi: false,
            onBeforeChangeSelect: this.OnBeforeChangeSelect,
            data: this.myObjs,
            display: [
              "@<thumb>",
              "title|nm::is-nowrap flex-auto",
              {
                key: "pvg",
                transformer: pvg => {
                  let list = []
                  _.forEach(pvg, (v, k) => {
                    let mdObj = Wn.Obj.parseMode(v)
                    let mode = Wn.Obj.modeFromObj(mdObj)
                    let str = Wn.Obj.modeToStr(mode)
                    list.push(`${k}${str.substring(6)}`)
                  })
                  if (!_.isEmpty(list)) {
                    return list.join(",")
                  }
                },
                comConf: {
                  className: "as-tip-block flex-none"
                }
              },
              {
                key: "id",
                transformer: (v) => {
                  if (v == this.myCurrentId && this.isCurrentChanged) {
                    return "*"
                  }
                },
                comConf: {
                  className: function ({ value }) {
                    if ("*" == value) {
                      return "is-error"
                    }
                  }
                }
              }
            ]
          }
        }
      }
      if (this.hasCurrent) {
        schema.pvg = {
          comType: "WnObjPvg",
          comConf: {
            loadSite: this.mySite,
            value: this.CurrentObjPvgValue
          }
        }
      } else {
        schema.pvg = {
          comType: "TiLoading",
          comConf: {
            className: "as-big-mask",
            icon: "zmdi-arrow-left",
            text: "请选择一个对象"
          }
        }
      }
      return schema
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    async OnBeforeChangeSelect() {
      return await Ti.Fuse.fire()
    },
    //--------------------------------------
    OnListSelect({ currentId }) {
      this.myCurrentId = currentId
      if (currentId) {
        this.myCurrentPvg = undefined
      }
    },
    //--------------------------------------
    OnPvgChange(pvg) {
      //console.log("OnPvgChange", pvg)
      this.myCurrentPvg = _.isEmpty(pvg)
        ? {}
        : pvg
    },
    //--------------------------------------
    async OnSaveCurrentPvg() {
      if (this.isCurrentChanged) {
        let cmdText;
        // Update pvg
        if (this.myCurrentPvg && !_.isEmpty(this.myCurrentPvg)) {
          let pvg = this.myCurrentPvg
          let pvgJson = JSON.stringify({ pvg })
          cmdText = `o id:${this.myCurrentId} @update '${pvgJson}' @json -cqn`
        }
        // Remove pvg
        else {
          cmdText = `o id:${this.myCurrentId} @update '"!pvg":true' @json -cqn`
        }
        //console.log(cmdText)
        this.saving = true
        let reo = await Wn.Sys.exec2(cmdText, { as: "json" })
        //console.log(reo)
        this.myObjs = _.map(this.myObjs, obj => {
          if (obj.id == this.myCurrentId) {
            return reo
          }
          return obj
        })
        this.myCurrentPvg = undefined
        this.saving = false
      }
    },
    //--------------------------------------
    async OnViewCurrentObj() {
      if (this.hasCurrent) {
        let meta = this.CurrentObj;
        await Wn.EditObjMeta(meta, {
          fields: "auto", autoSave: true
        })
      }
    },
    //--------------------------------------
    async doLoadBy(by) {
      let re = {}
      // Dynamic load
      if (by && _.isString(by)) {
        re = await Wn.Sys.exec2(by, { as: "json" })
      }
      // Already loaded
      else if (_.isObject(by) || _.isArray(by)) {
        re = _.cloneDeep(by)
      }
      return re
    },
    //--------------------------------------
    async doLoadObjs() {
      return await this.doLoadBy(this.loadObj)
    },
    //--------------------------------------
    async doLoadSite() {
      return await this.doLoadBy(this.loadSite)
    },
    //--------------------------------------
    async reload() {
      this.loading = true

      this.myObjs = await this.doLoadObjs()
      this.mySite = await this.doLoadSite()

      this.loading = false
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "loadObj": "doLoadObjs",
    "loadSite": "doLoadSite"
  },
  //////////////////////////////////////////
  mounted: async function () {
    //......................................
    await this.reload()
    //......................................
    Ti.Fuse.getOrCreate().add({
      key: this.tiComId,
      everythingOk: () => {
        return !this.isCurrentChanged
      },
      fail: () => {
        Ti.Toast.Open("请先保持设置的定制权限", "warn")
      }
    })
    //......................................
  },
  //////////////////////////////////////////
  beforeDestroy: function () {
    Ti.Fuse.get().remove(this.tiComId)
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-loading.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/loading/ti-loading.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  props : {
    icon : {
      type : [String, Object],
      default : "fas-spinner fa-spin"
    },
    text : {
      type : String,
      default : "i18n:loading"
    }
  },
  computed : {
    TopClass() {
      return this.getTopClass()
    }
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-viewport.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/ti/viewport/ti-viewport.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  getters : {
    viewportMode : (state) => state.mode,
    viewportActivedComIds : (state) => state.activedIds,
    isViewportModeDesktop : (state)=> "desktop" == state.mode,
    isViewportModeTablet  : (state)=> "tablet" == state.mode,
    isViewportModePhone   : (state)=> "phone" == state.mode,
    isViewportModeDesktopOrTablet : (state)=> 
      ("desktop" == state.mode || "tablet" == state.mode),
    isViewportModePhoneOrTablet : (state)=> 
      ("phone" == state.mode || "tablet" == state.mode),
    isExposeHidden : (state)=> state.exposeHidden,
  },
  mutations : {
    setMode(state, mode="desktop") {
      state.mode = mode
    },
    setActivedIds(state, activedIds=[]) {
      //console.log("viewport setActivedIds", activedIds)
      state.activedIds = _.cloneDeep(activedIds)
    },
    setExposeHidden(state, exposeHidden) {
      //console.log("viewport setActivedIds", activedIds)
      state.exposeHidden = exposeHidden
    },
    setListViewType(state, vt) {
      //console.log("viewport setActivedIds", activedIds)
      state.listViewType = vt
    }
  },
  actions : {
    toggleExposeHidden({state, commit}) {
      commit("setExposeHidden", !state.exposeHidden)
      if(state.keeyHiddenBy) {
        Ti.Storage.local.set(state.keeyHiddenBy, state.exposeHidden)
      }
    },
    changeListViewType({state, commit}, vt) {
      commit("setListViewType", vt)
      if(state.keeyViewTypeBy) {
        Ti.Storage.local.set(state.keeyViewTypeBy, state.listViewType)
      }
    },
    reload({state, commit}) {
      if(state.keeyHiddenBy) {
        let eh = Ti.Storage.local.getBoolean(state.keeyHiddenBy)
        commit("setExposeHidden", eh)
      }
      if(state.keeyViewTypeBy) {
        let vt = Ti.Storage.local.getString(state.keeyViewTypeBy, null)
        if(/^(table|wall|list)$/.test(vt)) {
          commit("setListViewType", vt)
        }
      }
    }
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'codeblock.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/codeblock.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  name : "ti-codeblock",
  setup : function(editor, url){
    console.log("plugin:codeblock", editor, url)
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-shelf-iconbox.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/shelf/iconbox/web-shelf-iconbox.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data : ()=>({
    isOpened: false
  }),
  //////////////////////////////////////////
  props : {
    "icon": {
      type: [Object, String],
      default: "im-menu"
    },
    "iconConf" : {
      type: Object,
      default: ()=>({})
    },
    "closeIcon": {
      type: [Object, String],
      default: "im-x-mark"
    },
    "mode": {
      type: String,
      default: "left",
      validator: v => /^(left|right)$/.test(v)
    },
    "head": {
      type: Object,
      /* {comType, comConf} */
      default: undefined
    },
    "body": {
      type: Object,
      /* {comType, comConf} */
      default: undefined
    },
    "foot": {
      type: Object,
      /* {comType, comConf} */
      default: undefined
    },
    "width": {
      type: [Number, String],
      default: undefined
    },
    "panelWidth" : {
      type: [Number, String],
      default: undefined
    },
    "autoCloseEventNames" : {
      type: [Array, String],
      default: "nav:to"
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-opened" : this.isOpened,
        "is-closed" : !this.isOpened,
      }, `is-mode-${this.mode}`)
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width
      })
    },
    //--------------------------------------
    hasHead() {
      return this.head && this.head.comType
    },
    //--------------------------------------
    hasBody() {
      return this.body && this.body.comType
    },
    //--------------------------------------
    hasFoot() {
      return this.foot && this.foot.comType
    },
    //--------------------------------------
    PanelStyle() {
      return Ti.Css.toStyle({
        width: this.panelWidth
      })
    },
    //--------------------------------------
    PanelTransName() {
      return `ti-trans-slide-${this.mode}`
    },
    //--------------------------------------
    TheAutoCloseEventNames() {
      return _.concat(this.autoCloseEventNames)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnToggleMode() {
      this.isOpened = !this.isOpened
    },
    //--------------------------------------
    __on_events(name) {
      //console.log("__on_events", name)
      if(_.indexOf(this.TheAutoCloseEventNames, name)>=0) {
        _.delay(()=>{
          this.isOpened = false
        })
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-logging.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/logging/ti-logging.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  props : {
    "lines" : {
      type : Array,
      default : ()=>[]
    },
    "width" : {
      type : [Number, String],
      default : null
    },
    "height" : {
      type : [Number, String],
      default : null
    }
  },
  computed: {
    TopClass() {
      return this.getTopClass()
    },
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    }
  },
  methods: {
    scrollToBottom() {
      let $pre = this.$refs.pre
      $pre.scrollTop = $pre.scrollHeight
    }
  },
  watch: {
    "lines": function() {
      //console.log(this.lines.length)
      this.$nextTick(()=>{
        this.scrollToBottom()
      })
    }
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-input-pair.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/pair/ti-input-pair.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  props: {
    //------------------------------------------------
    // Data
    //------------------------------------------------
    "value": {
      type: Object
    },
    "dftNewItemName": {
      type: String,
      default: "newKey"
    },
    //------------------------------------------------
    // Behaviors
    //------------------------------------------------
    "nameComType": {
      type: String,
      default: "TiInput"
    },
    "nameComConf": {
      type: Object,
      default: () => ({
        hideBorder: true,
        autoSelect: true
      })
    },
    "valueComType": {
      type: String,
      default: "TiInput"
    },
    "valueComConf": {
      type: Object,
      default: () => ({
        hideBorder: true,
        autoJsValue: true,
        autoSelect: true
      })
    },
    "canAddNewItem": {
      type: Boolean,
      default: true
    },
    "canRemoveItem": {
      type: Boolean,
      default: true
    },
    "readonly": {
      type: Boolean,
      default: false
    },
    "autoShowBlank": {
      type: Boolean,
      default: false
    },
    //------------------------------------------------
    // Aspect
    //------------------------------------------------
    "blankAs": {
      type: Object,
      default: () => ({
        className: "as-mid-tip align-center",
        icon: "zmdi-code-setting",
        text: "i18n:empty-data"
      })
    },
    "nameWidth": {
      type: [String, Number],
      default: "1.2rem"
    }

  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-empty": this.isEmpty,
        "no-empty": !this.isEmpty
      })
    },
    //------------------------------------------------
    isEmpty() {
      return _.isEmpty(this.PairFields)
    },
    //------------------------------------------------
    NameStyle() {
      return {
        width: Ti.Css.toSize(this.nameWidth)
      }
    },
    //------------------------------------------------
    PairFields() {
      let re = []
      _.forEach(this.value, (v, k) => {
        re.push({
          name: k,
          value: v
        })
      })
      return re
    },
    //------------------------------------------------
    ActionSetup() {
      return [
        {
          text: "i18n:add-item",
          icon: "zmdi-plus",
          className: "min-width-8",
          handler: () => {
            this.OnAddNewPair()
          }
        },
        {
          icon: "zmdi-code",
          className: "is-chip",
          handler: () => {
            this.OnViewSourceCode()
          }
        }
      ]
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    OnNameChange({ name }, newName) {
      if (!_.isEqual(name, newName)) {
        let data = {}
        // To keep the original key order
        _.forEach(this.value, (v, k) => {
          if (k == name) {
            data[newName] = v
          } else {
            data[k] = v
          }
        })
        this.tryNotifyChange(data)
      }
    },
    //------------------------------------------------
    OnValueChange({ name, value }, newVal) {
      if (!_.isEqual(value, newVal)) {
        let data = _.cloneDeep(this.value) || {}
        data[name] = newVal
        this.tryNotifyChange(data)
      }
    },
    //------------------------------------------------
    OnDeleteFld({ name }) {
      let data = {}
      _.forEach(this.value, (v, k) => {
        if (k != name) {
          data[k] = v
        }
      })
      this.tryNotifyChange(data)
    },
    //------------------------------------------------
    OnAddNewPair() {
      let data = _.cloneDeep(this.value) || {}
      let newName = this.dftNewItemName
      let val = _.get(data, newName)
      let N = 1
      while (!_.isUndefined(val)) {
        newName = `${this.dftNewItemName}${N++}`
        val = _.get(data, newName)
      }
      data[newName] = null
      this.tryNotifyChange(data)
    },
    //------------------------------------------------
    async OnViewSourceCode() {
      let json = JSON.stringify(this.value || {}, null, '   ')
      let re = await Ti.App.Open({
        title: "i18n:edit",
        position: "top",
        width: "6.4rem",
        height: "90%",
        result: json,
        mainStyle: {
          padding: "2px"
        },
        comType: "TiInputText",
        comConf: {
          height: "100%"
        }
      })

      // User Cancel
      if (_.isUndefined(re)) {
        return
      }

      // Parse JSON
      let data = JSON.parse(_.trim(re) || "null")
      this.tryNotifyChange(data)
    },
    //------------------------------------------------
    tryNotifyChange(data) {
      if (!_.isEqual(data, this.value)) {
        this.$notify("change", data)
      }
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'm-wn-obj.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/obj/m-wn-obj.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////
  getters: {
    //--------------------------------------------
    isPagerEnabled(state) {
      if (!state.pager) {
        return false
      }
      if (!(state.pager.pn > 0 || state.pager.pageNumber > 0)) {
        return false
      }
      if (!(state.pager.pgsz > 0 || state.pager.pageSize > 0)) {
        return false
      }
      return true
    },
    //--------------------------------------------
    searchPageNumber(state) {
      return Ti.Util.getFallback(state.pager, "pageNumber", "pn") || 1
    },
    //--------------------------------------------
    searchPageSize(state) {
      return Ti.Util.getFallback(state.pager, "pageSize", "pgsz") || 50
    },
    //--------------------------------------------
    isLongPager(state) {
      if (state.pager && state.pager.pageSiz > 0 && state.pager.pageNumber > 0) {
        return true
      }
      return false
    },
    //--------------------------------------------
    isHardRemove(state) {
      return _.get(state, "oDir.hard_remove")
    },
    //--------------------------------------------
    isCanRemove(state) {
      let pvg = _.get(state.pvg, "remove")
      return Wn.Session.isPvgCan(pvg)
    },
    //--------------------------------------------
    isCanCreate(state) {
      let pvg = _.get(state.pvg, "create")
      return Wn.Session.isPvgCan(pvg)
    },
    //--------------------------------------------
    isCanUpdate(state) {
      let pvg = _.get(state.pvg, "update")
      return Wn.Session.isPvgCan(pvg)
    },
    //--------------------------------------------
    isCanSave(state) {
      let pvg = _.get(state.pvg, "save")
      if (pvg) {
        return Wn.Session.isPvgCan(pvg)
      }
    },
    //--------------------------------------------
    contentLoadInfo(state) {
      if (state.contentPath) {
        // fixed content path
        if (_.isString(state.contentPath)) {
          return {
            path: state.contentPath
          }
        }
        // Try find content path
        let canPaths = _.concat([], state.contentPath)
        for (let canPath of canPaths) {
          let { test, path, mime } = canPath
          if (!test || Ti.AutoMatch.test(test, state)) {
            let ctx = _.assign(Wn.Session.env(), state)
            let ph = Ti.Util.explainObj(ctx, path)
            if ('<self>' != ph) {
              if (/^(~\/|\/|id:)/.test(ph)) {
                path = ph
              } else {
                path = Ti.Util.appendPath(`id:${state.dirId}`, ph)
              }
            } else {
              path = ph
            }
            return { path, mime }
          }
        }
      }
    },
    //--------------------------------------------
    contentLoadPath(state, getters) {
      return _.get(getters, "contentLoadInfo.path")
    },
    //--------------------------------------------
    hasContentLoadMeta(state, getters) {
      let path = _.get(getters, "contentLoadPath")
      if ("<self>" == path) {
        return state.meta ? true : false
      }
      return path ? true : false
    },
    //--------------------------------------------
    notContentLoadMeta(state, getters) {
      let has = _.get(getters, "hasContentLoadMeta")
      return !has
    },
    //--------------------------------------------
    hasCurrentMeta(state) {
      return state.meta ? true : false
    },
    //--------------------------------------------
    checkedItems(state) {
      let ids = Ti.Util.getTruthyKeyInMap(state.checkedIds)
      let list = _.filter(state.list, (li) => ids[li.id])
      return list
    },
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  actions: {
    //--------------------------------------------
    changeMetaField({ dispatch }, { name, value } = {}) {
      if (name) {
        let meta = _.set({}, name, value)
        dispatch("changeMeta", meta)
      }
    },
    //--------------------------------------------
    changeMeta({ state, commit }, newMeta) {
      if (!_.isEmpty(newMeta)) {
        if (state.meta) {
          commit("assignMeta", newMeta)
          //commit("syncStatusChanged")
          commit("setListItem", state.meta)
        }
      }
    },
    //--------------------------------------------
  }
  ////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-input-list.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/list/ti-input-list.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  props: {
    //------------------------------------------------
    // Data
    //------------------------------------------------
    "value": {
      type: [Array, String],
      default: () => []
    },
    "valueSep": {
      type: String,
      default: ","
    },
    "autoJsValue": {
      type: Boolean,
      default: false
    },
    "dftNewItem": {
      type: [Number, String, Object],
      default: null
    },
    //------------------------------------------------
    // Behaviors
    //------------------------------------------------
    "eleComType": {
      type: String,
      default: "TiInput"
    },
    "eleComConf": {
      type: Object,
      default: () => ({
        hideBorder: true,
        autoSelect: true,
        autoJsValue: true
      })
    },
    "canAddNewItem": {
      type: Boolean,
      default: true
    },
    "canRemoveItem": {
      type: Boolean,
      default: true
    },
    //------------------------------------------------
    // Aspect
    //------------------------------------------------
    "blankAs": {
      type: Object,
      default: () => ({
        className: "as-small-tip",
        icon: "fas-border-none",
        text: "i18n:empty"
      })
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-empty": this.isEmpty,
        "no-empty": !this.isEmpty
      })
    },
    //------------------------------------------------
    isEmpty() {
      return _.isEmpty(this.ListItems)
    },
    //------------------------------------------------
    TheValue() {
      if (_.isEmpty(this.value)) {
        return []
      }
      if (_.isString(this.value)) {
        if (/^\[([^\]]*)\]$/.test(this.value)) {
          return JSON.parse(this.value)
        }
        return Ti.S.splitIgnoreBlank(this.value, this.valueSep)
      }
      return _.concat(this.value)
    },
    //------------------------------------------------
    getEleComType() {
      if (_.isString(this.eleComType)) {
        return () => this.eleComType
      }
      if (_.isFunction(this.eleComType)) {
        return this.eleComType
      }
      if (_.isObject(this.eleComType)) {
        return (val) => {
          return _.get(this.eleComType[val])
        }
      }
      if (_.isArray(this.eleComType)) {
        return (val, index) => {
          return _.nth(this.eleComType, index)
        }
      }
      return "TiInput"
    },
    //------------------------------------------------
    getEleComConf() {
      let conf;
      if (_.isFunction(this.eleComConf)) {
        conf = this.eleComConf
      }
      else {
        conf = this.eleComConf
      }
      return (value, index) => {
        return Ti.Util.explainObj({ value, index }, conf)
      }
    },
    //------------------------------------------------
    ListItems() {
      let items = []
      _.forEach(this.TheValue, (value, index) => {
        let comType = this.getEleComType(value, index)
        let comConf = this.getEleComConf(value, index)
        items.push({
          index, value, comType, comConf
        })
      })
      return items;
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    OnValueChange({ index, value }, newVal) {
      if (!_.isEqual(value, newVal)) {
        let val = newVal
        if (this.autoJsValue) {
          val = Ti.S.toJsValue(val, {
            autoNil: true,
            autoDate: false,
            trimed: true
          })
        }
        let list = _.cloneDeep(this.TheValue) || {}
        list[index] = val
        this.tryNotifyChange(list)
      }
    },
    //------------------------------------------------
    OnDeleteItem({ index }) {
      let list = []
      _.forEach(this.TheValue, (v, i) => {
        if (i != index) {
          list.push(v)
        }
      })
      this.tryNotifyChange(list)
    },
    //------------------------------------------------
    OnAddNewItem() {
      let list = _.cloneDeep(this.TheValue) || {}
      let newItem = _.cloneDeep(this.dftNewItem)
      list.push(newItem)
      this.tryNotifyChange(list)
    },
    //------------------------------------------------
    tryNotifyChange(list) {
      if (!_.isEqual(list, this.TheValue)) {
        this.$notify("change", list)
      }
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'vod-manager.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/net/aliyun/vod/manager/vod-manager.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////////
  data : ()=>({
    reloading: false,
    list: [],
    pager: {},
    scrollToken: null,
    myCurrentId: null,
    myCurrentVideo: null,
    myFilter: {
      match: {}
    },
    mySort: {
      CreationTime:-1
    }
  }),
  ///////////////////////////////////////////////////////
  props : {
    "meta": {
      type: Object,
      default: ()=>({})
    },
    "fields": {
      type: String,
      default: "Title,CoverURL,Duration,CateName,Size,Description,RegionID"
    },
    "filter": {
      type: Object,
      default: ()=>({
        comType: "ti-combo-filter",
        comConf: {
          placeholder: "i18n:net-flt-nil",
          form: {
            fields: [{
                title: "i18n:net-ct",
                name: "CreationTime",
                type: "Array",
                comType: "ti-input-daterange",
                comConf: {
                  "valueType" : "ms-array"
                }
                // }, {
                //   title: "i18n:net-vod-cate",
                //   name : "CateName",
                //   comType: "ti-input"
              }, {
                title: "i18n:net-vod-duration",
                name: "Duration",
                comType: "ti-switcher",
                comConf: {
                  autoSplitValue: false,
                  options: [
                    {value: "[0, 600]",    text:"i18n:net-vod-du-short"},
                    {value: "(600, 4800]", text:"i18n:net-vod-du-tv"},
                    {value: "(4800, )",    text:"i18n:net-vod-du-long"},
                  ]
                }
              }]
          }
        }
      })
    },
    "sorter": {
      type: Object,
      default: ()=>({
        comType: "ti-combo-sorter",
        comConf: {
          options: [
            {value:"CreationTime", text:"i18n:net-ct"}]
        }
      })
    },
    "pageSize": {
      type: Number,
      default: 20
    },
    "multi": {
      type: Boolean,
      default: true
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //---------------------------------------------------
    ConfName() {
      return _.get(this.meta, "vodConfigName")
    },
    //---------------------------------------------------
    CmdPrefix() {
      if(this.ConfName) {
        return `aliyunvod ${this.ConfName}`
      }
      return "aliyunvod"
    },
    //---------------------------------------------------
    ThePageNumber() {
      return _.get(this.pager, "pn") || 1
    },
    //---------------------------------------------------
    ThePageSize() {
      return _.get(this.pager, "pgsz") || this.pageSize
    },
    //---------------------------------------------------
    WallItemDisplay() {
      return {
        key : "..",
        comType : 'ti-obj-thumb',
        comConf : it => ({
          id: it.videoId,
          title: it.title,
          preview: {
            type: "image",
            value: it.coverURL
          } 
        })
      }
    },
    //---------------------------------------------------
    GuiLayout(){
      return {
        type: "cols",
        border:true,
        blocks: [{
            type:"rows",
            size:"61.8%",
            border:true,
            blocks: [{
                type: "cols",
                size: ".44rem",
                blocks: [{
                    name: "filter",
                    flex: "both",
                    body: "pcFilter"
                  }, {
                    name: "sorter",
                    flex: "none",
                    body: "pcSorter"
                  }]
              }, {
                name: "list",
                body: "pcList"
              }, {
                name: "pager",
                size: 40,
                body: "pcPager"
              }]
          }, {
            icon: "zmdi-tv-alt-play",
            title: "i18n:video",
            name: "video",
            body: "pcVideo"
          }]
      }
    },
    //---------------------------------------------------
    GuiSchema() {
      return {
        pcFilter: {
          comType: this.filter.comType,
          comConf: _.assign({
            value: this.myFilter
          }, this.filter.comConf)
        },
        pcSorter: {
          comType: this.sorter.comType,
          comConf: _.assign({
            value: this.mySort
          }, this.sorter.comConf)
        },
        pcList: {
          comType: "ti-wall",
          comConf: {
            data: this.list,
            idBy: "videoId",
            multi: this.multi,
            display: this.WallItemDisplay
          }
        },
        pcPager: {
          comType : "ti-paging-jumper",
          comConf : {
            value : this.pager
          }
        },
        pcVideo: {
          comType: "net-aliyun-vod-video-info",
          comConf: {
            value: this.myCurrentVideo
          }
        }
      }
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods :{
    //---------------------------------------------------
    async OnFilterChange(filter) {
      this.myFilter = filter
      this.pager = _.assign({}, this.pager, {pn:1})
      await this.reloadVideos()
    },
    //---------------------------------------------------
    async OnSorterChange(sort) {
      this.mySort = sort
      this.pager = _.assign({}, this.pager, {pn:1})
      await this.reloadVideos()
    },
    //---------------------------------------------------
    async OnPagerChange(pg) {
      this.pager = _.assign({}, this.pager, pg)
      // Save pageSize
      if(this.meta) {
        let pgsz = _.get(pg, "pgsz");
        if(!Ti.Util.isNil(pgsz)) {
          Ti.Storage.session.setObject(this.meta.id, {pgsz})
        }
      }

      await this.reloadVideos()
    },
    //---------------------------------------------------
    async OnListSelect({currentId, checkedIds, checked}) {
      this.myCurrentId = currentId
      // Select some thing
      if(currentId) {
        this.myCurrentVideo = await this.reloadVideoInfo(currentId)
        this.$notify("change", {
          currentId  : this.myCurrentId,
          current    : this.myCurrentVideo,
          checkedIds, checked
        })
      }
      // Select nothing
      else {
        this.myCurrentVideo = null
        this.$notify("change", undefined)
      }
    },
    //---------------------------------------------------
    async OnVideoPreview({title, videoId, coverURL}={}){
      // Request the playAuth
      let playAuth = await this.requestPlayAuth(videoId)

      // Open player
      await Ti.App.Open({
        icon: "zmdi-tv-alt-play",
        title: `Preview: ${title}`,
        textOk: null,
        textCancel: "i18n:close",
        position: "top",
        width: "90%",
        height: "90%",
        comType: "NetAliyunVodVideoPlayer",
        comConf: {
          videoId, playAuth,
          coverUrl: coverURL
        },
        components: "@com:net/aliyun/vod/video/player"
      })
    },
    //---------------------------------------------------
    async requestPlayAuth(videoId) {
      this.reloading = true
      let cmds = [this.CmdPrefix, "playauth", videoId, "-cqn"]
      let reo = await Wn.Sys.exec2(cmds.join(" "), {as:"json"})
      this.reloading = false

      return reo.playAuth
    },
    //---------------------------------------------------
    async reloadVideoInfo(videoId) {
      this.reloading = true
      let cmds = [this.CmdPrefix, "video", videoId, "-cqn"]
      let reo = await Wn.Sys.exec2(cmds.join(" "), {as:"json"})
      this.reloading = false

      return reo
    },
    //---------------------------------------------------
    toAliyunTime(tm) {
      return 
    },
    //---------------------------------------------------
    toMatchStr(keyword, match={}) {
      let ss = []
      if(!Ti.S.isBlank(keyword)) {
        // ID
        if(/^[a-z0-9]{32}$/.test(keyword)) {
          ss.push(`VideoId = '${keyword}'`)
        }
        // Title
        else {
          ss.push(`Title in ('${keyword.replace(/'/g,"")}')`)
        }
      }

      // March
      _.forEach(match, (val, key)=>{
        if(Ti.Util.isNil(val)) {
          return
        }
        //......................................
        // Region
        if(_.isString(val) && /^[\[(].+[)\]]$/.test(val)) {
          ss.push(`${key}=${val}`)
        }
        //......................................
        // Time
        else if(/time/i.test(key)) {
          let tfmt = "yyyy-MM-dd'T'HH:mm:ss'Z'"
          let times = Ti.Types.formatDateTime(val, tfmt)
          times = _.concat(times)

          // All day
          if(times.length == 1) {
            times.push(times[0])
          }

          // Move the last date
          let lastDay = Ti.Types.toDate(times[1]).getTime() + 86400000;
          times[1] = Ti.Types.formatDateTime(lastDay, tfmt)
          
          // Add scope
          ss.push(`${key}=['${times[0]}', '${times[1]}')`)
        }
                //......................................
        // In list
        else if(_.isArray(val)) {
          let vv = _.map(val, v=> {
            if(_.isString(v))
              return  v.replace(/'/g,"")
            return v
          })
          ss.push(`${key} in (${vv.join(",")})`)
        }
        //......................................
        // String
        else if(_.isString(val)) {
          ss.push(`${key} in ('${val.replace(/'/g,"")}')`)
        }
        //......................................
        // Others
        else {
          ss.push(`${key} = ${val}`)
        }
      })
      return ss.join(" and ")
    },
    //---------------------------------------------------
    async reloadVideos() {
      this.reloading = true
      // prepare the command
      let cmds = [this.CmdPrefix]
      //.................................................
      cmds.push("search", "-fields", `'${this.fields}'`)
      //.................................................
      // Join the Filter: Match/keyword
      let keyword = _.get(this.myFilter, "keyword")
      let match = _.get(this.myFilter, "match")
      if(!_.isEmpty(match) || !Ti.Util.isNil(keyword)) {
        try{
          cmds.push("-match", `"${this.toMatchStr(keyword, match)}"`)
        }catch(E) {
          console.error(E)
        }
      }
      //.................................................
      // Join the Filter: Sort
      let sort = []
      _.forEach(this.mySort, (as, by)=>{
        sort.push(`${by}:${as>0?'ASC':'DESC'}`)
      })
      if(!_.isEmpty(sort)) {
        cmds.push("-sort ", `${sort.join(" ")}`)
      }
      //.................................................
      // Join paging
      cmds.push("-pn", this.ThePageNumber)
      cmds.push("-pgsz", this.ThePageSize)
      cmds.push("-as page -cqn")

      //console.log("reloadVideo", cmds.join(' '))
      //.................................................
      // Run
      let reo = await Wn.Sys.exec2(cmds.join(" "), {as:"json"})
      this.list  = reo.list
      this.pager = reo.pager
      this.scrollToken = reo.scrollToken

      // Mark
      this.reloading = false
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  mounted : function() {
    if(this.meta) {
      let pager = Ti.Storage.session.getObject(this.meta.id)
      if(pager) {
        let pgsz = _.get(pager, "pgsz");
        this.pager.pgsz = pgsz
      }
    }
    this.reloadVideos()
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-combo-filter-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/filter/ti-combo-filter-props.mjs'] = (function(){
const _M = {
  "major": {
    type: Object,
    default: undefined
  },
  "majorKey": {
    type: String,
    default: undefined
  },
  "form": {
    type: Object,
    default: undefined
  },
  "autoCollapse": {
    type: Boolean,
    default: false
  },
  "statusIcons": {
    type: Object,
    default: () => ({
      collapse: "zmdi-chevron-down",
      extended: "zmdi-chevron-up"
    })
  },
  "autoFocusExtended": {
    type: Boolean,
    default: true
  },
  "spacing": {
    type: String,
    default: "tiny",
    validator: v => /^(none|comfy|tiny)$/.test(v)
  },
  "dropWidth": {
    type: [Number, String],
    default: "box"
  },
  "dropHeight": {
    type: [Number, String],
    default: undefined
  }
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-th-creator.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/th/creator/wn-th-creator.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////
  data: () => ({
    "myData": undefined,
    "creating": false
  }),
  ///////////////////////////////////////////
  props: {
    "fields": {
      type: Array,
      default: () => []
    },
    "data": {
      type: Object,
      default: () => ({})
    },
    "formType": {
      type: String,
      default: "TiForm"
    },
    "form": {
      type: Object,
      default: () => ({})
    },
    "fixed": {
      type: Object,
      default: undefined
    }
  },
  ///////////////////////////////////////////
  computed: {
    //--------------------------------------
    TheData() {
      return this.myData || this.data
    },
    //--------------------------------------
    TheForm() {
      return _.assign({
        className: "ti-fill-parent",
        onlyFields: false,
        adjustDelay: 1,
        fields: this.fields,
        fixed: this.fixed,
        actionButtonSetup: [
          {
            className: "btn-r8 is-big",
            text: "i18n:create-now",
            handler: () => {
              this.OnCreate()
            }
          }
        ]
      }, this.form)
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnFormInit($form) {
      this.$form = $form
    },
    //--------------------------------------
    OnFormFieldChange({ name, value } = {}) {
      //console.log("OnFormFieldChange", pair)
      let data = Ti.Types.toObjByPair({ name, value })
      this.myData = _.assign({}, this.myData, data)
    },
    //--------------------------------------
    OnFormChange(data) {
      //console.log("OnFormChange", data)
      this.myData = data
    },
    //--------------------------------------
    // Can be use in WnThAdaptor or the old [WnThingManager]
    async OnCreate() {
      this.creating = true
      let reo;
      let $ThP = this.tiParentCom("WnThAdaptor")
      if (!$ThP) {
        $ThP = this.tiParentCom("WnThingManager")
      }
      reo = await $ThP.dispatch("create", this.myData)
      this.creating = false
      if (reo && !(reo instanceof Error)) {
        this.$notify("block:hide", "creator")
      }
    },
    //--------------------------------------
    async OnSubmit() {
      this.$nextTick(() => {
        this.OnCreate()
      })
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  mounted() {
    this.myData = _.cloneDeep(this.data)
  }
  ///////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-imgfile.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/imgfile/wn-imgfile.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  data : ()=>({
    "src_ts" : null,
    "oImage"     : null,
    "uploadFile" : null,
    "progress"   : -1
  }),
  /////////////////////////////////////////
  props : {
    "value" : {
      type : String,
      default : null
    },
    // Display width
    "width" : {
      type : [String, Number],
      default : undefined
    },
    // Display height
    "height" : {
      type : [String, Number],
      default : undefined
    },
    // support remove the objects
    "removable" : {
      type : Boolean,
      default : true
    },
    // Indicate the upload target when upload new value
    // Of cause, if the `value` exists, replace it
    // The `target` must be a path to a image object,
    // it will auto transfrom the image format by `cmd_imagic`
    "target" : {
      type : String,
      required: true,
      default : null
    },
    // which type supported to upload
    // nulll or empty array will support any types
    "supportTypes" : {
      type : [String, Array],
      default : ()=>["png","jpg","jpeg","gif"]
    },
    // which mime supported to upload
    // nulll or empty array will support any mimes
    "supportMimes" : {
      type : [String, Array],
      default : ()=>["image/png","image/jpeg","image/gif"]
    },
    // Image object only: it will auto apply image filter
    // just like clip the image size etc..
    // @see cmd_imagic for more detail about the filter
    "filter" : {
      type : [Array, String],
      default : null
    },
    // Image object only: if `>0 and <=1` mean output quality
    // if not match the range, will depends on the `cmd_imagic` default
    "quality" : {
      type : Number,
      default : 0
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    acceptTypes() {
      if(_.isString(this.supportTypes))
        return this.supportTypes.split(",")
      return this.supportTypes
    },
    //--------------------------------------
    acceptMimes() {
      if(_.isString(this.supportMimes))
        return this.supportMimes.split(",")
      return this.supportMimes
    },
    //--------------------------------------
    imageFilter() {
      if(!this.filter)
        return []
      return [].concat(this.filter)
    },
    //--------------------------------------
    // Display image for <ti-thumb>
    imageSrc() {
      if(this.oImage) {
        let ss = ["/o/content?str=id:", this.oImage.id]
        if(this.src_ts) {
          ss.push("&_t=")
          ss.push(this.src_ts)
        }
        return ss.join("")
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    async assertListHas(list, str, invalidMsg, vars) {
      if(!_.isEmpty(list)) {
        let invalid  = true
        for(let li of list) {
          if(li == str) {
            invalid = false
            break
          }
        }
        if(invalid) {
          await Ti.Alert(invalidMsg, {type:"warn", icon:"zmdi-alert-triangle"})
          return false
        }
      }
      return true
    },
    //--------------------------------------
    async onOpen() {
      // remove the thumb file
      if(this.oImage) {
        let link = Wn.Util.getAppLink(this.oImage)
        //console.log("it will open ", link)
        await Ti.Be.Open(link.url, {params:link.params})
      }
    },
    //--------------------------------------
    async onRemove() {
      // remove the thumb file
      if(this.oImage) {
        await Wn.Sys.exec2(`rm id:${this.oImage.id}`)
      }
      // Notify the change
      this.$notify("change", null)
    },
    //--------------------------------------
    async onUpload(file) {
      //console.log("it will upload ", file)

      //................................
      // Check for support Types
      let type = Ti.Util.getSuffixName(file.name)
      if(!await this.assertListHas(
        this.acceptTypes, type, {
          text : 'i18n:wn-invalid-types',
          vars : {current:type, supports:this.acceptTypes.join(", ")}
        })) {
        return
      }
      if(!await this.assertListHas(
        this.acceptMimes, file.type, {
          text : 'i18n:wn-invalid-mimes',
          vars : {current:file.type, supports:this.acceptMimes.join(", ")}
        })) {
        return
      }

      //................................
      // Upload file to destination
      this.uploadFile = file
      this.progress = 0

      let {ok, msg, data} = await Wn.Io.uploadFile(file, {
        target : this.target,
        mode   : "r",
        progress : (pe)=> {
          this.progress = pe.loaded / pe.total
        }
      })

      //................................
      // Reset upload
      this.uploadFile = null
      this.progress = -1

      //................................
      // Fail to upload
      if(!ok) {
        await Ti.Alert(`i18n:${msg}`, {type:"warn", icon:"zmdi-alert-triangle"})
        return
      }

      //................................
      // do Filter
      if(!_.isEmpty(this.imageFilter)) {
        let cmd = [
          "imagic", `id:${data.id}`, 
          `-filter "${this.imageFilter.join(" ")}"`]       
        if(this.quality>0 && this.quality<=1) {
          cmd.push(`-qa ${this.quality}`)
        }
        cmd.push("-out inplace")
        let cmdText = cmd.join(" ")
        await Wn.Sys.exec2(cmdText)
      }

      //................................
      // done
      this.src_ts = Date.now()
      this.oImage = data
      this.$notify("change", data)
    },
    //--------------------------------------
    async reload() {
      if(this.value) {
        this.oImage = await Wn.Io.loadMeta(this.value)
      }
      // Reset
      else {
        this.oImage = null
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "value" : function() {
      this.reload()
    }
  },
  //////////////////////////////////////////
  mounted : async function(){
    await this.reload()
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'nav-crumb.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/nav/crumb/nav-crumb.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    "title" : {
      type : String,
      default: undefined
    },
    "sep" : {
      type : String,
      default : "fas-angle-right"
    }
  },
  /////////////////////////////////////////
  computed : {
    //------------------------------------
    //------------------------------------
  },
  /////////////////////////////////////////
  methods : {
    //------------------------------------
    //------------------------------------
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'www-mod-auth.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/lib/www/mod/auth/www-mod-auth.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////
  getters : {
    //--------------------------------------------
    hasSession(state) {
      return !_.isEmpty(state.ticket)
             && state.expi > Date.now()
             && !_.isEmpty(state.me)
    },
    //--------------------------------------------
    sessionState(state, getters) {
      return {
        ok : getters.hasSession,
        data : {
          me     : state.me     || null,
          ticket : state.ticket || null,
          expi   : state.expi   || 0
        }
      }
    },
    //--------------------------------------------
    urls(state, getters, rootState, rootGetters) {
      let map = {}
      _.forEach(state.paths, (ph, key)=>{
        map[key] = rootGetters.getApiUrl(ph)
      })
      return map
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  mutations : {
    //--------------------------------------------
    setTicket(state, ticket) {
      state.ticket = ticket
    },
    //--------------------------------------------
    setExpi(state, expi) {
      state.expi = expi
    },
    //--------------------------------------------
    setMe(state, me) {
      // Auto deal with Two-Stage-ID
      if(me && me.id) {
        me.OID = Ti.Types.parseTowStageID(me.id)
      }
      // Update state
      state.me = me
    },
    //--------------------------------------------
    setPaths(state, paths) {
      _.assign(state.paths, paths)
    },
    //--------------------------------------------
    mergePaths(state, paths) {
      _.merge(state.paths, paths)
    },
    //--------------------------------------------
    setAddresses(state, addresses) {
      state.addresses = addresses
      // Get default address
      if(_.isArray(addresses)) {
        let dfta = null
        for(let addr of addresses) {
          if(addr.dftaddr) {
            dfta = addr
            break
          }
        }
        state.defaultAddr = dfta
      }
    },
    //--------------------------------------------
    setCountries(state, countries) {
      state.countries = countries
      let map = {}
      _.forEach(countries, it=> {
        map[it.key] = it.name
      })
      state.countryMap = map
    }
    //--------------------------------------------
  }
  ////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-search-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/search/ti-search-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //------------------------------------------------
  // Data
  //------------------------------------------------
  "filter": {
    type: Object,
    default: () => ({})
  },
  "sorter": {
    type: Object,
    default: () => ({ ct: -1 })
  },
  "pager": {
    type: Object,
    default: () => ({
      pn: 1,
      pgsz: 50,
      pageNumber: 1,
      pageSize: 50
    })
  },
  "pagerValueType": {
    type: String,
    default: "shortName"
  },
  // REGEX to limit the output WnObj keys
  "objKeys": {
    type: String,
    default: undefined
  },
  //------------------------------------------------
  // Behavior
  //------------------------------------------------
  "filterComType": {
    type: String,
    default: "TiFilterbar"
  },
  "filterComConf": {
    type: Object,
    default: () => ({})
  },
  "listComType": {
    type: String,
    default: "TiList"
  },
  "listComConf": {
    type: Object,
    default: () => ({})
  },
  "multi": {
    type: Boolean,
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "placeholder": {
    type: String,
    default: "i18n:search"
  },
  "dialog": {
    type: Object
  },
  "filterTags": {
    type: Object
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'bar-item-action.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/actionbar/com/bar-item-action/bar-item-action.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////
  inject: ["$bar"],
  ///////////////////////////////////////
  props: {
    //-----------------------------------
    // Same as <bar-item-info>
    //-----------------------------------
    "name": {
      type: String,
      default: undefined
    },
    "icon": {
      type: String,
      default: undefined
    },
    "hideIcon": {
      type: Boolean,
      default: false
    },
    "text": {
      type: String,
      default: undefined
    },
    "tip": {
      type: String,
      default: undefined
    },
    "altDisplay": {
      type: [Object, Array],
      default: () => []
    },
    "enabled": {
      type: [String, Array, Object, Boolean],
      default: undefined
    },
    "disabled": {
      type: [String, Array, Object, Boolean],
      default: undefined
    },
    "highlight": {
      type: [String, Array, Object, Boolean],
      default: undefined
    },
    "value": {
      type: [Boolean, String, Number, Array],
      default: true
    },
    "depth": {
      type: Number,
      default: 0
    },
    "status": {
      type: Object,
      default: () => ({})
    },
    //-----------------------------------
    // Self Props
    //-----------------------------------
    "action": {
      type: [String, Object, Function],
      default: undefined
    },
    "notifyChange": {
      type: [Boolean, String],
      default: false
    },
    "eventName": {
      type: String
    },
    "payload": undefined,
    "wait": {
      type: Number,
      default: 0
    },
    "delay": {
      type: Number,
      default: 0
    },
    "shortcut": {
      type: String,
      default: undefined
    }
  },
  ///////////////////////////////////////
  computed: {
    //-----------------------------------
    NotifyChangeName() {
      if (this.notifyChange) {
        return _.isString(this.notifyChange)
          ? this.notifyChange
          : this.name;
      }
    },
    //-----------------------------------
    TheAction() {
      if (_.isFunction(this.action) && this.wait > 0) {
        return _.debounce(this.action, this.wait, { leading: true })
      }
      return this.action
    }
    //-----------------------------------
  },
  ///////////////////////////////////////
  methods: {
    OnFired(val) {
      //console.log("OnFired",val)
      let app = Ti.App(this)
      let argContext = app.$state()
      if (this.$bar.vars) {
        //console.log("eval bar vars")
        argContext = Ti.Util.explainObj(app.$state(), this.$bar.vars, {
          evalFunc: true
        })
      }
      // Call Action
      if (this.action) {
        let invoking = Ti.Shortcut.genActionInvoking(this.TheAction, {
          $com: this.$bar.$parent,
          argContext
        })
        // Invoke it
        _.delay(() => {
          invoking(val)
        }, this.delay)
      }

      // notify: name/value object
      if (this.NotifyChangeName) {
        _.delay(() => {
          this.$bar.notifyChange({
            name: this.NotifyChangeName,
            value: val
          })
        }, this.delay)
      }

      // notify: eventName
      if (this.eventName) {
        let payload = this.payload
        if (payload) {
          payload = Ti.Util.explainObj({
            name: this.name,
            value: val,
            vars: argContext
          }, payload)
        }
        _.delay(() => {
          this.$bar.$notify(this.eventName, payload)
        }, this.delay)
      }
    }
  },
  ///////////////////////////////////////
  mounted: function () {
    if (this.shortcut) {
      Ti.App(this).guardShortcut(this, this.shortcut, () => {
        return this.isEnabled
      })
    }
  },
  ///////////////////////////////////////
  destroyed: function () {
    if (this.shortcut) {
      Ti.App(this).pulloutShortcut(this)
    }
  }
  ///////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'side-item.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/nav/side/com/side-item/side-item.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////////
  props : {
    "openedIcons" : undefined
  },
  ///////////////////////////////////////////////////////
  computed : {
    OpenStatusIcon() {
      return this.isOpened
        ? this.openedIcons.opened
        : this.openedIcons.closed
    }
  },
  ///////////////////////////////////////////////////////
  methods : {
    //---------------------------------------------------
    OnTransBeforeEnter($con) {
      // console.log("before enter")
      Ti.Dom.setStyle($con, {height: 0, overflow: "hidden"})
    },
    OnTransEnter($con) {
      // console.log("enter")
      Ti.Dom.setStyle($con, {height: $con.scrollHeight - 4})
    },
    OnTransAfterEnter($con) {
      // console.log("after enter")
      _.delay(()=>{
        Ti.Dom.setStyle($con, {height: "", overflow: ""})
      })
    },
    //---------------------------------------------------
    OnTransBeforeLeave($con) {
      //console.log("before leave", height)
      Ti.Dom.setStyle($con, {height: $con.scrollHeight, overflow: "hidden"})
    },
    OnTransLeave($con) {
      //console.log("leave", $con.scrollHeight)
      _.delay(()=>{
        Ti.Dom.setStyle($con, {height: 0})
      })
    },
    OnTransAfterLeave($con) {
      //console.log("after leave")
      _.delay(()=>{
        Ti.Dom.setStyle($con, {height: "", overflow: ""})
      })
    }
    //---------------------------------------------------
  }
  ///////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-shelf-preview-scroller.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/shelf/preview-scroller/web-shelf-preview-scroller.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data : ()=>({
    myCurrentIndex: 0
  }),
  //////////////////////////////////////////
  props : {
    //-----------------------------------
    // Data
    //-----------------------------------
    "data" : {
      type : Array,
      default : ()=>[]
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "previewComType" : {
      type: String,
      default : "WebMedia"
    },
    "previewComConf" : {
      type : Object,
      default : ()=>({
        value : "=.."
      })
    },
    "itemComConf" : {
      type : Object,
      default : ()=>({})
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "previewComClass" : {
      type : [Object, String, Array]
    },
    "previewComStyle": {
      type : Object
    },
    "scrollerClass" : {
      type : [Object, String, Array],
      default : "btn-at-inner btn-as-circle"
    },
    "scrollerStyle": {
      type : Object
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    hasNext() {
      return this.data && this.myCurrentIndex < (this.data.length - 1)
    },
    //--------------------------------------
    hasPrev() {
      return this.myCurrentIndex > 0
    },
    //--------------------------------------
    hasMultiData() {
      return this.data && this.data.length > 1
    },
    //--------------------------------------
    CurrentPreviewData() {
      return _.nth(this.data, this.myCurrentIndex)
    },
    //--------------------------------------
    CurrentPreviewComConf() {
      return Ti.Util.explainObj({
        data: this.CurrentPreviewData,
        hasNext : this.hasNext,
        hasPrev : this.hasPrev
      }, this.previewComConf)
    },
    //--------------------------------------
    ScrollerComConf() {
      return {
        cols : 0,
        data : this.data,
        currentIndex : this.myCurrentIndex,
        comType : "WebMediaImage",
        comConf : this.itemComConf,
        clickItem : ({index})=>{
          this.myCurrentIndex = index
        }
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnGoPrev() {
      if(this.hasPrev) {
        this.myCurrentIndex --;
      }
    },
    //--------------------------------------
    OnGoNext() {
      if(this.hasNext) {
        this.myCurrentIndex ++
      }
    },
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-combo-table-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/table/ti-combo-table-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "value": {
    type: [Array, String],
    default: () => []
  },
  "valueType": {
    type: String,
    default: "Array",
    validator: (v) => /^(Array|String)$/.test(v)
  },
  "vars": {
    type: Object,
    default: () => ({})
  },
  "newItemData": {
    type: Object
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "form": {
    type: [Object, Array],
    default: () => ({})
  },
  "formType": {
    type: String,
    default: "TiForm"
  },
  "quickTable": {
    type: [Boolean, String, Function, Object, Array],
    default: false
  },
  "list": {
    type: [Object, Array],
    default: () => ({})
  },
  "dialog": {
    type: [Object, Array],
    default: () => ({
      title: "i18n:edit",
      width: 500,
      height: 500
    })
  },
  "newItemIdBy": {
    type: [String, Object, Function]
  },
  "newItemIdKey": {
    type: String,
    default: "id"
  },
  "onAddNewItem": {
    type: [String, Function]
  },
  "moreActions": {
    type: Array
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "blankAs": {
    type: Object
  },
  "actionAlign": {
    type: String,
    default: undefined
  },
  "newItemIcon": {
    type: String,
    default: "fas-plus"
  },
  "newItemText": {
    type: String,
    default: "i18n:new-item"
  },
  "itemEditable": {
    type: Boolean,
    default: true
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width": {
    type: [Number, String],
    default: undefined
  },
  "height": {
    type: [Number, String],
    default: undefined
  }
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'tiny-wn-audio.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/tiny-wn-audio.mjs'] = (function(){
////////////////////////////////////////////////////
async function pickAudioAndInsertToDoc(editor, {
  base = "~",
  autoCreate = null,
  fallbackPath,
}) {
  // Check base
  if (_.isPlainObject(autoCreate)) {
    let oBase = await Wn.Io.loadMeta(base)
    if (!oBase) {
      let pph = Ti.Util.getParentPath(base)
      let dnm = Ti.Util.getFileName(base)
      let baseMeta = _.assign({}, autoCreate, {
        race: 'DIR', nm: dnm
      })
      let baseJson = JSON.stringify(baseMeta)
      let cmdText = `o @create '${baseJson}' -p ${pph} -auto @json -cqn`
      oBase = await Wn.Sys.exec2(cmdText, { as: "json" })
    }
    base = oBase
  }

  // Show dialog
  let reo = await Wn.OpenObjSelector(base, {
    icon: "fas-file-audio",
    title: "i18n:audio-insert",
    position: "top",
    width: "95%",
    height: "95%",
    multi: false,
    fallbackPath
  })

  // User canceled
  if (_.isEmpty(reo)) {
    return
  }

  // Do insert image
  editor.execCommand("InsertAudio", editor, reo)
}
////////////////////////////////////////////////////
function GetAudioAttrsByElement(elAudio) {
  let stl = Ti.Dom.getStyle(elAudio,
    /^(width|height|float|(margin-(left|right|top|bottom)))$/)
  stl.float = stl.float || "none"
  return {
    oid: elAudio.getAttribute("wn-obj-id"),
    nm: elAudio.getAttribute("wn-obj-nm"),
    sha1: elAudio.getAttribute("wn-obj-sha1"),
    mime: elAudio.getAttribute("wn-obj-mime"),
    tp: elAudio.getAttribute("wn-obj-tp"),
    duration: elAudio.getAttribute("wn-obj-duration"),
    ...stl
  }
}
////////////////////////////////////////////////////
function GetAudioAttrsByObj(oAudio) {
  return {
    "wn-obj-id": oAudio.id,
    "wn-obj-sha1": oAudio.sha1,
    "wn-obj-nm": oAudio.nm,
    "wn-obj-mime": oAudio.mime,
    "wn-obj-tp": oAudio.tp,
    "wn-obj-duration": oAudio.duration
  }
}
////////////////////////////////////////////////////
function UpdateAudioTagInnerHtml(elAudio) {
  let audioName = elAudio.getAttribute("wn-obj-nm") || "No title"
  let $inner = Ti.Dom.createElement({
    tagName: "div",
    className: "audio-inner"
  })
  $inner.innerHTML = `
    <div class="as-play-icon"><i class="fas fa-play"></i></div>
    <div class="as-audio-name"></div>
    <div class="as-volume-icon"><i class="fas fa-volume-up"></i></div>
  `
  elAudio.innerHTML = null
  Ti.Dom.find(".as-audio-name", $inner).innerText = audioName
  elAudio.contentEditable = false
  Ti.Dom.appendTo($inner, elAudio)
}
////////////////////////////////////////////////////
function CmdInsertAudio(editor, oAudios) {
  if (_.isEmpty(oAudios))
    return

  // Prepare range
  let rng = editor.selection.getRng()

  // Create image fragments
  let $doc = rng.commonAncestorContainer.ownerDocument
  let frag = new DocumentFragment()
  for (let oAudio of oAudios) {
    let $audio = Ti.Dom.createElement({
      tagName: "div",
      className: "wn-media as-audio",
      attrs: GetAudioAttrsByObj(oAudio)
    }, $doc)
    UpdateAudioTagInnerHtml($audio)
    frag.appendChild($audio)
  }

  // Remove content
  if (!rng.collapsed) {
    rng.deleteContents()
  }

  // Insert fragments
  rng.insertNode(frag)

}
////////////////////////////////////////////////////
function GetCurrentAudioElement(editor) {
  let sel = editor.selection
  let $nd = sel.getNode()
  // Guard
  return Ti.Dom.closest($nd, (el) => {
    return 'DIV' == el.tagName && Ti.Dom.hasClass(el, "wn-media", "as-audio")
  }, { includeSelf: true })
}
////////////////////////////////////////////////////
function CmdSetAudioSize(editor, { width = "", height = "" } = {}) {
  let $audio = GetCurrentAudioElement(editor)
  // Guard
  if (!_.isElement($audio)) {
    return
  }
  // Clear the attribute
  Ti.Dom.setStyle($audio, { width, height })
  // Force sync content
  editor.__rich_tinymce_com.syncContent()
}
////////////////////////////////////////////////////
function CmdSetAudioStyle(editor, css = {}) {
  let $audio = GetCurrentAudioElement(editor)
  // Guard
  if (!_.isElement($audio)) {
    return
  }
  // Clear float
  Ti.Dom.setStyle($audio, css)
  // Force sync content
  editor.__rich_tinymce_com.syncContent()
}
////////////////////////////////////////////////////
async function CmdShowAudioProp(editor, settings) {
  let $audio = GetCurrentAudioElement(editor)
  // Guard
  if (!_.isElement($audio)) {
    return
  }
  //console.log("stl", stl)
  // Gen the properties
  let data = GetAudioAttrsByElement($audio)

  //console.log(data)
  // Show dialog
  let reo = await Ti.App.Open({
    icon: "fas-image",
    title: "i18n:hmk-w-edit-audio-prop",
    width: "37%",
    height: "100%",
    position: "right",
    closer: "left",
    clickMaskToClose: true,
    result: data,
    model: { prop: "data", event: "change" },
    comType: "TiForm",
    comConf: {
      spacing: "tiny",
      fields: [{
        title: "i18n:audio",
        name: "oid",
        comType: "WnObjPicker",
        comConf: {
          valueType: "id",
          base: settings.base,
          titleEditable: false
        }
      }, {
        title: "i18n:size",
        fields: [{
          title: "i18n:width",
          name: "width",
          comType: "TiInput"
        }, {
          title: "i18n:height",
          name: "height",
          comType: "TiInput"
        }]
      }, {
        title: "i18n:hmk-float",
        name: "float",
        comType: "TiSwitcher",
        comConf: {
          allowEmpty: false,
          options: [
            {
              icon: "fas-align-justify",
              value: "none",
              text: "i18n:hmk-float-none"
            },
            {
              icon: "fas-align-left",
              value: "left",
              text: "i18n:hmk-float-left"
            },
            {
              icon: "fas-align-right",
              value: "right",
              text: "i18n:hmk-float-right"
            }]
        }
      }, {
        title: "i18n:hmk-w-edit-audio-margin",
        fields: [{
          title: "i18n:top",
          name: "marginTop",
          comType: "TiInput",
          comConf: {
            placeholder: "0px"
          }
        }, {
          title: "i18n:right",
          name: "marginRight",
          comType: "TiInput",
          comConf: {
            placeholder: "0px"
          }
        }, {
          title: "i18n:bottom",
          name: "marginBottom",
          comType: "TiInput",
          comConf: {
            placeholder: "0px"
          }
        }, {
          title: "i18n:left",
          name: "marginLeft",
          comType: "TiInput",
          comConf: {
            placeholder: "0px"
          }
        }]
      }]
    },
    components: [
      "@com:wn/obj/picker"
    ]
  })

  // 用户取消
  if (!reo)
    return

  // Update image
  //................................................
  // src
  if (data.oid != reo.oid) {
    // Remove Audio
    if (!reo.oid) {
      Ti.Dom.remove($audio)
      return
    }
    // 读取对象详情
    let oAudio = await Wn.Io.loadMetaById(reo.oid)
    // Switch image src
    let attrs = GetAudioAttrsByObj(oAudio)
    Ti.Dom.setAttrs($audio, attrs)

    UpdateAudioTagInnerHtml($audio)

  }
  //................................................
  // Styling
  const _audio_style = function (styName, v, oldValue) {
    if (oldValue == v)
      return
    if (!v || "none" == v) {
      $audio.style[styName] = ""
    } else if (_.isNumber(v) || /^\d+(\.\d+)?$/.test(v)) {
      $audio.style[styName] = `${v}px`
    } else {
      $audio.style[styName] = v
    }
  }
  //................................................
  _audio_style("width", reo.width, data.width)
  _audio_style("height", reo.height, data.height)
  _audio_style("float", reo.float, data.float)
  _audio_style("marginLeft", reo.marginLeft, data.marginLeft)
  _audio_style("marginRight", reo.marginRight, data.marginRight)
  _audio_style("marginTop", reo.marginTop, data.marginTop)
  _audio_style("marginBottom", reo.marginBottom, data.marginBottom)
  //................................................
  // clean cache
  $audio.removeAttribute("data-mce-src")
  $audio.removeAttribute("data-mce-style")
  //................................................
  // Force sync content
  editor.__rich_tinymce_com.syncContent()
}
////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  name: "wn-audio",
  //------------------------------------------------
  init: function (conf = {}) {
  },
  //------------------------------------------------
  setup: function (editor, url) {
    //..............................................
    let settings = _.assign({
      base: "~"
    }, _.get(editor.settings, "wn_audio_config"));
    //console.log("setup", editor.settings)
    //..............................................
    // Register plugin command
    editor.addCommand("InsertAudio", CmdInsertAudio)
    editor.addCommand("SetAudioSize", CmdSetAudioSize)
    editor.addCommand("SetAudioStyle", CmdSetAudioStyle)
    editor.addCommand("ShowAudioProp", CmdShowAudioProp)
    //..............................................
    // Register toolbar actions
    editor.ui.registry.addButton("WnAudioPick", {
      icon: "volume-up-solid",
      tooltip: Ti.I18n.text("i18n:audio-insert"),
      onAction: function (menuBtn) {
        pickAudioAndInsertToDoc(editor, settings)
      },
    })
    //..............................................
    editor.ui.registry.addMenuItem("WnAudioClrSize", {
      text: Ti.I18n.text("i18n:hmk-w-edit-audio-clrsz"),
      onAction() {
        editor.execCommand("SetAudioSize", editor)
      }
    })
    //..............................................
    editor.ui.registry.addMenuItem("WnAudioAutoFitWidth", {
      text: Ti.I18n.text("i18n:hmk-autofit"),
      onAction() {
        editor.execCommand("SetAudioSize", editor, { width: "100%" })
      }
    })
    //..............................................
    editor.ui.registry.addNestedMenuItem('WnAudioFloat', {
      text: 'i18n:hmk-float',
      getSubmenuItems: function () {
        return [{
          type: "menuitem",
          icon: "align-left",
          text: Ti.I18n.text("i18n:hmk-float-left"),
          onAction() {
            editor.execCommand("SetAudioStyle", editor, { float: "left" })
          }
        }, {
          type: "menuitem",
          icon: "align-right",
          text: Ti.I18n.text("i18n:hmk-float-right"),
          onAction() {
            editor.execCommand("SetAudioStyle", editor, { float: "right" })
          }
        }, {
          type: "menuitem",
          text: Ti.I18n.text("i18n:hmk-float-clear"),
          onAction() {
            editor.execCommand("SetAudioStyle", editor, { float: "" })
          }
        }];
      }
    });
    //..............................................
    editor.ui.registry.addNestedMenuItem('WnAudioMargin', {
      text: Ti.I18n.text("i18n:hmk-w-edit-audio-margin"),
      getSubmenuItems: function () {
        const __check_margin_size = function (api, expectSize) {
          let $audio = GetCurrentAudioElement(editor)
          let state = true
          if ($audio) {
            let sz = $audio.style.marginLeft || $audio.style.marginRight
            state = expectSize == sz
          }
          api.setActive(state);
          return function () { };
        }
        return [{
          type: "togglemenuitem",
          text: Ti.I18n.text("i18n:hmk-margin-sm"),
          onAction() {
            editor.execCommand("SetAudioStyle", editor, { margin: "1em" })
          },
          onSetup: function (api) {
            return __check_margin_size(api, '1em')
          }
        }, {
          type: "togglemenuitem",
          text: Ti.I18n.text("i18n:hmk-margin-md"),
          onAction() {
            editor.execCommand("SetAudioStyle", editor, { margin: "2em" })
          },
          onSetup: function (api) {
            return __check_margin_size(api, '2em')
          }
        }, {
          type: "togglemenuitem",
          text: Ti.I18n.text("i18n:hmk-margin-lg"),
          onAction() {
            editor.execCommand("SetAudioStyle", editor, { margin: "3em" })
          },
          onSetup: function (api) {
            return __check_margin_size(api, '3em')
          }
        }, {
          type: "menuitem",
          text: Ti.I18n.text("i18n:hmk-margin-no"),
          onAction() {
            editor.execCommand("SetAudioStyle", editor, { margin: "" })
          }
        }];
      }
    });
    //..............................................
    editor.ui.registry.addMenuItem("WnAudioProp", {
      text: Ti.I18n.text("i18n:hmk-w-edit-audio-prop"),
      onAction() {
        editor.execCommand("ShowAudioProp", editor, settings)
      }
    })
    //..............................................
    editor.ui.registry.addContextMenu("wn-audio", {
      update: function (el) {
        let $audio = GetCurrentAudioElement(editor)
        // Guard
        if (!_.isElement($audio)) {
          return []
        }
        return [
          "WnAudioClrSize WnAudioAutoFitWidth",
          "WnAudioFloat WnAudioMargin",
          "WnAudioProp"
        ].join(" | ")
      }
    })
    //..............................................
    let $vm = editor.__rich_tinymce_com
    $vm.registerContentCallback("wn-audio", function () {
      //console.log("SetContent audio")
      let els = editor.$('.wn-media.as-audio')
      for (let i = 0; i < els.length; i++) {
        let el = els[i]
        let mime = el.getAttribute("wn-obj-mime")
        UpdateAudioTagInnerHtml(el)
      }
    })
    //..............................................
    return {
      getMetadata: function () {
        return {
          name: 'Wn Audio plugin',
          url: 'http://site0.cn'
        };
      }
    };
    //..............................................
  }
  //------------------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'm-obj-axis.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/obj-axis/m-obj-axis.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////
  mutations : {
    //----------------------------------------
    resetAll(state) {
      state.meta = undefined
      state.ancestors = undefined
      state.parent = undefined
      state.status = {}
    },
    //----------------------------------------
    setMeta(state, meta) {
      state.meta = meta
    },
    //-------------------------------------------
    setAncestors(state, ancestors=[]) {
      state.ancestors = _.concat(ancestors)
      state.parent = _.last(state.ancestors)
    },
    //-------------------------------------------
    setParent(state, parent) {
      state.parent = parent
    },
    //----------------------------------------
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    }
    //----------------------------------------
  }
  ////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'field_display.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/support/field_display.mjs'] = (function(){
//////////////////////////////////////////////
function _render_iteratee({ varName, vars, matched } = {}) {
  if (matched.startsWith("$$")) {
    return matched.substring(1);
  }
  // ${=xxx}  get value from vars
  // ${pos.x} get value from itemData
  let m = /^(=)?([^?]+)(\?(.*))?$/.exec(varName);
  let ctx = "=" == m[1] ? vars.vars : vars.itemData;

  let vkey = _.trim(m[2]);
  let vdft = Ti.Util.fallbackNil(_.trim(m[4]), matched);
  let rev = Ti.Util.getOrPick(ctx, vkey);
  return Ti.Util.fallback(rev, vdft);
}
//////////////////////////////////////////////
// cx = {vars, itemData, value}
function __eval_com_conf_item(val, cx = {}) {
  if (cx && cx.value == "数据可视化") console.log(val, cx);
  // String valu3
  if (_.isString(val)) {
    if (/^:*([-=]|[!=]=|->|==?>)/.test(val)) {
      return Ti.Util.explainObj(
        {
          ...cx,
          item: cx.itemData
        },
        val
      );
    }
    //........................................
    // Quick Value
    //........................................
    // VAL: evalue the special value, like:
    //  - "${=value}"
    //  - "${=..}"
    //  - "${=varName}"
    let m = /^\$\{=([^${}=]+)\}$/.exec(val);
    if (m) {
      let varName = _.trim(m[1]);
      // Whole Context
      if (".." == varName) {
        return cx.itemData;
      }
      // Value
      if ("value" == varName) {
        return cx.value;
      }
      // In var set
      else {
        return Ti.Util.fallback(_.get(cx.vars, varName), val);
      }
    }
    //........................................
    // String Template
    //........................................
    // VAL as template (xxx)?xxx${nn}
    // the placeholder support:
    //  - "${=varName}"
    //  - "${info.age}"
    m = /^(\((.+)\)\?)?(.+)$/.exec(val);
    if (m) {
      let preKey = _.trim(m[2]);
      let tmpl = _.trim(m[3]);
      // console.log("haha", preKey, tmpl)
      // Only `itemData` contains the preKey, render the value
      if (preKey) {
        // "(age)?xxx"  :: get from itemDAta
        if (_.get(cx.itemData, preKey)) {
          return Ti.S.renderBy(tmpl, cx, {
            iteratee: _render_iteratee
          });
        }
        return null;
      }
      // Render the value
      return Ti.S.renderBy(tmpl, cx, {
        iteratee: _render_iteratee
      });
    }
    //........................................
    // Primary
    //........................................
    return val;
  }
  // Object Value
  else if (_.isPlainObject(val)) {
    //........................................
    // Nested Objects
    //........................................
    let obj = {};
    _.forEach(val, (v, k) => {
      let v2 = __eval_com_conf_item(v, cx);
      if ("..." == k) {
        _.assign(obj, v2);
      } else {
        obj[k] = v2;
      }
    });
    return obj;
  }
  // Array Value
  else if (_.isArray(val)) {
    let list = [];
    for (let v of val) {
      let v2 = __eval_com_conf_item(v, cx);
      list.push(v2);
    }
    return list;
  }
  // Keep original value
  return val;
}
//////////////////////////////////////////////
const FieldDisplay = {
  //------------------------------------------
  evalFieldDisplayItem(displayItem = {}, { defaultKey } = {}) {
    //........................................
    const __gen_dis = () => {
      //......................................
      // Guard it
      if (Ti.Util.isNil(displayItem)) {
        return defaultKey ? { key: defaultKey, comType: "TiLabel" } : null;
      }
      //......................................
      // {key:"xxx", comType:"xxx"}
      if (_.isPlainObject(displayItem)) {
        let dis = _.assign(
          {
            key: defaultKey,
            comType: "TiLabel"
          },
          displayItem
        );
        if (dis.transformer) {
          const invokeOpt = {
            context: this,
            partial: "right"
          };
          dis.transformer = Ti.Util.genInvoking(dis.transformer, invokeOpt);
        }
        return dis;
      }
      //......................................
      // Array to multi key
      if (_.isArray(displayItem)) {
        return {
          key: displayItem,
          comType: "TiLabel"
        };
      }
      //......................................
      // Boolean
      if (true === displayItem) {
        return {
          key: defaultKey,
          comType: "TiLabel"
        };
      }
      //......................................
      if (_.isString(displayItem)) {
        // <icon:zmdi-user:$ClassName>?
        let m = /^<([^:>=]*)(:([^>:]+))?(:([^>:]+))?>(\?)?$/.exec(displayItem);
        if (m) {
          return {
            key: m[1] || defaultKey || ":ti-icon",
            defaultAs: m[3] || undefined,
            ignoreNil: "?" == m[6],
            comType: "ti-icon",
            comConf: {
              className: m[5] || undefined
            }
          };
        }
        //......................................
        // #DictName(xxx) -> TiLabel
        // just like `#RelayStatus(status):xxx:is-nowrap`
        m = /^(!)?[@#]([^\(]+)\(([^)]+)\)(:([^:]*)(:([^:]+))?)?$/.exec(
          displayItem
        );
        if (m) {
          return {
            key: m[3] || defaultKey,
            comType: "TiLabel",
            comConf: {
              dict: m[2],
              format: m[5] || undefined,
              className: m[7] || "is-nowrap",
              autoLoadDictIcon: m[1] == "!" ? false : undefined
            }
          };
        }
        //......................................
        // "<=ti-label:key>" or ":<=ti-label>"
        // or <=ti-icon:key>=>Ti.Types.toBoolStr(null,'fas-user')
        m = /^<=([^:]+)(:(.+))?>(\.([^=]+))?(=>(.+))?$/.exec(displayItem);
        if (m) {
          // Eval className
          let className = m[5] || undefined;
          // Eval transformer
          let transformer = undefined;
          if (m[7]) {
            transformer = Ti.Util.genInvoking(m[7], {
              context: this,
              partial: "right"
            });
          }
          // done for field
          return {
            key: m[3] || defaultKey || Symbol(displayItem),
            transformer,
            comType: Ti.Util.toStdComType(m[1]),
            comConf: {
              className
            }
          };
        }
        //......................................
        // String -> TiLabel
        // - "name" or ["name", "age"]
        // - "'Static Text'"
        // - "text+>/a/link?nm=${name}"
        // - "'More'->/a/link?id=${id}"
        // - "name:【${val}】->/a/link?id=${id}"
        m = /^([^+:>-]+)(:([^+:-]*)(:([^:]+))?)?(([+-])>([^%]*))?$/.exec(
          displayItem
        );
        if (m) {
          let key = _.trim(m[1] || m[0]);
          let format = m[3] || undefined;
          let newTab = m[7] == "+";
          let href = _.trim(m[8]);
          return {
            key,
            comType: "TiLabel",
            comConf: {
              className: m[5] || "is-nowrap",
              newTab,
              href,
              format
            }
          };
        }
        //......................................
        // Default as lable
        return {
          key: displayItem,
          comType: "TiLabel"
        };
        //......................................
      }
      //......................................
      return displayItem;
    };
    //........................................
    let dis = __gen_dis();
    //........................................
    if (dis.dict) {
      let { name, vKey } = Ti.DictFactory.explainDictName(dis.dict);
      dis.$dict = Ti.DictFactory.CheckDict(name);
      dis.$dictValueKey = vKey || ".text";
    }
    //........................................
    if (dis.visible) {
      dis.visibleFn = Ti.AutoMatch.parse(dis.visible);
    }
    //........................................
    if (dis.hidden) {
      dis.hiddenFn = Ti.AutoMatch.parse(dis.hidden);
    }
    //........................................
    // Then return
    return dis;
  },
  //------------------------------------------
  /***
   * @param itemData{Object} - raw data
   * @param displayItem{Object} - display item setting
   * @param vars{Object} - special value forms like:
   * ```js
   * {
   *   "isCurrent" : this.isCurrent,
   *   "isChecked" : this.isChecked,
   *   "isHover"   : this.isHover,
   *   "isActived" : this.isActived,
   *   "rowId"     : this.rowId
   * }
   * ```
   */
  async evalDataForFieldDisplayItem({
    itemData = {},
    displayItem = {},
    vars = {},
    autoIgnoreNil = true,
    autoIgnoreBlank = true,
    autoValue = "value",
    uniqKey
  } = {}) {
    let dis = displayItem;
    //if ("evd_inner" == dis.key) console.log(dis);
    let value = dis.defaultAs;
    //.....................................
    // Array -> Obj
    if (_.isArray(dis.key)) {
      value = _.pick(itemData, dis.key);
    }
    // String ...
    else if (_.isString(dis.key)) {
      // Whole data
      if (".." == dis.key) {
        value = itemData;
      }
      // Statci value
      else if (/^'[^']+'$/.test(dis.key)) {
        value = dis.key.substring(1, dis.key.length - 1);
      }
      // Template
      else if (/^->(.+)$/.test(dis.key)) {
        value = Ti.S.renderBy(dis.key.substring(2), itemData);
      }
      // Dynamic value
      else {
        value = Ti.Util.fallbackNil(
          Ti.Util.getOrPickNoBlank(itemData, dis.key),
          value
        );
      }
    }
    // if("id" == dis.key)
    //   console.log(dis, value)
    //.....................................
    // Transformer
    if (_.isFunction(dis.transformer)) {
      // Sometimes, we need transform nil also
      if (!Ti.Util.isNil(value) || dis.transNil) {
        value = await dis.transformer(value);
      }
    }
    // Ignore the Blank
    if (autoIgnoreBlank && Ti.S.isBlank(value)) {
      if (Ti.Util.fallback(dis.ignoreBlank, true)) {
        return;
      }
    }
    // Ignore the undefined/null
    if (autoIgnoreNil && Ti.Util.isNil(value)) {
      if (Ti.Util.fallback(dis.ignoreNil, true)) {
        return;
      }
    }
    //.....................................
    // Visibility
    if (_.isFunction(dis.visibleFn)) {
      if (!dis.visibleFn(itemData)) {
        return;
      }
    }
    if (_.isFunction(dis.hiddenFn)) {
      if (dis.hiddenFn(itemData)) {
        return;
      }
    }
    //.....................................
    // Translate by dict
    if (dis.$dict) {
      value = await dis.$dict.getItemAs(dis.$dictValueKey, value);
    }
    //.....................................
    // Add value to comConf
    let reDisplayItem = _.cloneDeep(dis);
    let comConf = {};
    //.....................................
    // Customized comConf
    if (_.isFunction(dis.comConf)) {
      comConf = _.assign({}, dis.comConf(itemData));
    }
    //.....................................
    // Eval comConf
    else if (dis.comConf) {
      comConf = __eval_com_conf_item(dis.comConf, {
        vars,
        itemData,
        value
      });
    }
    //.....................................
    // Set the default value key
    if (autoValue && _.isUndefined(comConf[autoValue])) {
      comConf[autoValue] = value;
    }
    //.....................................
    // Auto Eval ClassName
    if (_.isFunction(comConf.className)) {
      let className = comConf.className(value, itemData, dis);
      comConf.className = className;
    }
    //.....................................
    reDisplayItem.comConf = comConf;
    //.....................................
    if (!reDisplayItem.uniqKey) {
      if (uniqKey) {
        reDisplayItem.uniqKey = uniqKey;
      } else {
        reDisplayItem.uniqKey = _.concat(
          reDisplayItem.key,
          reDisplayItem.comType
        ).join("-");
      }
    }
    //.....................................
    return reDisplayItem;
  }
  //------------------------------------------
};
//////////////////////////////////////////////
return FieldDisplay;;
})()
// ============================================================
// EXPORT 'wn-obj-puretext.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/puretext/wn-obj-puretext.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : true,
  ////////////////////////////////////////////
  props : {
    "meta" : {
      type : Object,
      default : ()=>({})
    },
    "content" : {
      type : String,
      default : null
    },
    "savedContent" : {
      type : String,
      default : null
    },
    "contentType" : {
      type : String,
      default : null
    },
    "showTitle" : {
      type : Boolean,
      default : true
    },
    "status" : {
      type : Object,
      default : ()=>({})
    },
    "blankText" : {
      type : String,
      default : "i18n:blank"
    }
  },
  ////////////////////////////////////////////
  computed : {
    //----------------------------------------
    theIcon() {
      if(this.meta) {
        return Wn.Util.getIconObj(this.meta)
      }
      return Ti.Icons.get()
    },
    //----------------------------------------
    theTitle() {
      if(this.meta) {
        return this.meta.title || this.meta.nm
      }
      return "no-title"
    },
    //----------------------------------------
    hasMeta() {
      return this.meta ? true : false
    }
    //----------------------------------------
  },
  ////////////////////////////////////////////
  methods : {
    onChangeContent(newContent) {
      this.$notify("change", {content:newContent})
    }
  },
  ////////////////////////////////////////////
  mounted : function(){
    //----------------------------------------
    Ti.Fuse.getOrCreate().add({
      key : "wn-obj-puretext",
      everythingOk : ()=>{
        return !this.status.changed
      },
      fail : ()=>{
        Ti.Toast.Open("i18n:wn-obj-nosaved", "warn")
      }
    })
    //----------------------------------------
  },
  ////////////////////////////////////////////
  beforeDestroy : function(){
    Ti.Fuse.get().remove("wn-obj-puretext")
  }
  ////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'youtube-detail.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/net/youtube/detail/youtube-detail.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////////
  props : {
    //-----------------------------------
    // Data
    //-----------------------------------
    "value" : {
      type : Object
    }
    //-----------------------------------
    // Behavior
    //-----------------------------------
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //---------------------------------------------------
    hasValue() {
      return (this.value && this.value.id) ? true : false
    },
    //---------------------------------------------------
    GuiLayout(){
      return {
        type: "rows",
        border:true,
        blocks: [{
          size : "37%",
          body : "player"
        }, {
          body : "form"
        }]
      }
    },
    //---------------------------------------------------
    GuiSchema() {
      const V_FIELD = (name, title)=>{
        return {
          title, name,
          comType : "TiLabel"
        }
      }
      return {
        player: {
          comType: "NetYoutubePlayer",
          comConf: {
            value: this.value
          }
        },
        form: {
          comType: "TiForm",
          comConf: {
            spacing : "tiny",
            autoShowBlank : true,
            data: this.value,
            fields : [
              V_FIELD("id", "ID"),
              V_FIELD("title", "Title"),
              V_FIELD("description", "Description"),
              V_FIELD("publishedAt", "PublishedAt"),
              V_FIELD("tags", "Tags"),
              V_FIELD("duration", "Duration"),
              V_FIELD("du_in_sec", "Du in sec"),
              V_FIELD("du_in_str", "Du in str"),
              V_FIELD("definition", "Definition"),
              V_FIELD("categoryId", "CategoryId")
            ]
          }
        }
      }
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods :{
    //---------------------------------------------------
    
    //---------------------------------------------------
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'order-item.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/meta/order/com/order-item/order-item.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    "id" : {
      type : String,
      default : null
    },
    "thumb" : {
      type : String,
      default : null
    },
    "src" : {
      type : String,
      default : "/api/thumb?id:${id}"
    },
    "dftIcon" : {
      type : String,
      default : "fas-cube"
    },
    "title" : {
      type : String,
      default : null
    },
    "price" : {
      type : Number,
      default : 1
    },
    "currency" : {
      type : String,
      default : "RMB"
    },
    "amount" : {
      type : Number,
      default : 1
    }
  },
  //////////////////////////////////////////
  computed : {
    //......................................
    thumbObj() {
      if(this.thumb) {
        let imgSrc = Ti.S.renderBy(this.src, this)
        return {type:"image", value:imgSrc}
      }
      return this.dftIcon
    },
    //......................................
    fee() {
      return Ti.WWW.evalFee(this)
    },
    //......................................
    feeText() {
      return Ti.WWW.feeText(this.fee, this.currency)
    }
    //......................................
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-adaptlist.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/adaptlist/wn-adaptlist.mjs'] = (function(){
/////////////////////////////////////////////////
const _M = {
  ////////////////////////////////////////////////
  data: () => ({
    myCurrentId: null,
    myCheckedIds: {},
    myUploadigFiles: [],
    myItemStatus: {},
    myExposeHidden: true,
    myData: null
  }),
  ////////////////////////////////////////////////
  computed: {
    //--------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------------
    isLoading() {
      return !this.viewType || _.get(this.status, "reloading")
    },
    //--------------------------------------------
    hasUploadMeta() {
      return !_.isEmpty(this.uploadMeta)
    },
    //--------------------------------------------
    hasUploadTarget() {
      return this.uploadTarget ? true : false
    },
    //--------------------------------------------
    MainComType() {
      return ({
        "wall": "TiWall",
        "list": "WnList",
        "table": "WnTable"
      })[this.viewType] || "TiWall"
    },
    //--------------------------------------------
    MainComConf() {
      let listDisplay = _.concat(this.listDisplay)
      let conf = ({
        list: () => ({
          dftLabelHoverCopy: false,
          rowClassBy: "->is-${visibility}",
          display: _.map(listDisplay, li => {
            let m = /^@<thumb(:([^:]*)(:([^:]*))?)?>$/.exec(li)
            if (m) {
              return Wn.Obj.getObjThumbDisplay("rawData", {
                dftIcon: m[2] || undefined,
                className: m[4] || undefined
              })
            }
            return li
          })
        }),
        table: () => ({
          dftLabelHoverCopy: false,
          rowClassBy: "->is-${visibility}",
          fields: _.map(this.tableFields, key => {
            let setup;
            if (_.isString(key)) {
              let m = /^(~)?(.+)$/.exec(key)
              if (m) {
                key = m[2]
                if ("~" == m[1]) {
                  setup = {
                    candidate: true
                  }
                }
              }
            }
            return Wn.Obj.getTableField(key, setup)
          })
        }),
        wall: () => ({
          spacing: this.spacing,
          display: {
            key: "..",
            // transformer : {
            //   name : "Wn.Util.getObjThumbInfo",
            //   args : [{
            //       status : this.myItemStatus,
            //       exposeHidden : this.myExposeHidden
            //     }]
            // },
            comType: 'ti-obj-thumb',
            comConf: {
              "...": "${=value}"
            }
          }
        })
      })[this.viewType]()

      // Extend customized config
      _.merge(conf, this.listConf)
      _.merge(conf, _.get(this, `${this.viewType}ViewConf`))

      // Done
      return conf
    },
    //--------------------------------------------
    // MainComData() {
    //   if("wall" == this.viewType) {
    //     return this.WallDataList
    //   }
    //   return this.DataList
    // },
    //--------------------------------------------
    CurrentViewType() {
      return {
        type: this.viewType,
        icon: _.get(this.viewTypeIcons, this.viewType)
      }
    },
    //--------------------------------------------
    TheAvaViewTypes() {
      let list = []
      _.forEach(this.avaViewTypes, vt => {
        if (vt == this.viewType) {
          return;
        }
        list.push({
          type: vt,
          icon: _.get(this.viewTypeIcons, vt)
        })
      })
      return list
    },
    //--------------------------------------------
    UploadingItemDisplay() {
      return {
        key: "..",
        comType: 'ti-obj-thumb',
        comConf: {
          "...": "${=value}"
        }
      }
    },
    //--------------------------------------------
    DataList() {
      //console.log("eval DataList")
      if (this.myData) {
        if (_.isArray(this.myData)) {
          return this.myData
        }
        if (_.isArray(this.myData.list)) {
          return this.myData.list
        }
      }
      return []
    },
    //--------------------------------------------
    hasDataList() {
      return !_.isEmpty(this.DataList)
    },
    //--------------------------------------------
    WallDataList() {
      if (!this.hasDataList) {
        return []
      }
      //console.log("eval WallDataList", this.DataList.length)
      let list = []
      for (let it of this.DataList) {
        if (!this.isHiddenItem(it)) {
          let li = Wn.Util.getObjThumbInfo(it, {
            status: this.myItemStatus,
            exposeHidden: this.myExposeHidden,
            titleKey: this.itemTitleKey,
            badges: this.itemBadges
          })
          list.push(li)
          //list.push(it)
        }
      }
      return list
    },
    //--------------------------------------------
    /***
     * Show uploading list
     */
    TheUploadingList() {
      let list = this.myUploadigFiles
      let re = []
      if (_.isArray(list)) {
        for (let it of list) {
          // Gen Preview for local image
          let mime = it.file.type
          let tp = Ti.Util.getSuffixName(it.file.name)
          let preview;
          if (/^image\//.test(mime)) {
            preview = {
              type: "localFile",
              value: it.file
            }
          } else {
            preview = Ti.Icons.get({ tp, mime })
          }
          // Join to result list
          re.push({
            id: it.id,
            title: it.file.name,
            preview,
            progress: (it.current / it.total)
          })
        }
      }
      return re
    },
    //--------------------------------------------
    AcceptUploadFiles() {
      if (this.acceptUpload) {
        if (_.isString(this.acceptUpload)) {
          return this.acceptUpload
        }
        if (_.isArray(this.acceptUpload)) {
          return this.acceptUpload.join(",")
        }
      }
    },
    //--------------------------------------------
    /***
     * has uploading
     */
    hasUploading() {
      return this.myUploadigFiles.length > 0
    },
    //--------------------------------------------
    UploadingClass() {
      return this.hasUploading ? "up-show" : "up-hide"
    },
    //--------------------------------------------
    UploadDragAndDropHandler() {
      if (this.droppable) {
        return this.OnDropFiles
      }
    }
    //--------------------------------------------
  },  // ~ computed
  ////////////////////////////////////////////////
  methods: {
    //--------------------------------------------
    OnListInit($list) { this.$innerList = $list },
    //--------------------------------------------
    // Events
    //--------------------------------------------
    OnSwitchViewType(vt) {
      this.$notify("listviewtype:change", vt)
      if (_.isFunction(this.onViewTypeChange)) {
        this.onViewTypeChange(vt)
      }
    },
    //--------------------------------------------
    OnItemSelecteItem({ currentId, checkedIds, currentIndex }) {
      //console.log("OnSelected", currentId, checkedIds)
      // For Desktop
      this.myCurrentId = currentId
      this.myCheckedIds = checkedIds

      let context = {
        current: this.getCurrentItem(),
        checked: this.getCheckedItems(),
        checkedIds, currentId, currentIndex,
      }

      // Notify the real objects
      this.$notify("select", context)

      return { stop: true }
    },
    //--------------------------------------------
    OnItemOpen() {
      //console.log("open item")
      let obj = this.getCurrentItem()
      if (obj) {
        this.$notify("open:wn:obj", obj)
      }
    },
    //--------------------------------------
    OnClipBoardPoste({ clipboardData } = {}) {
      // Guard
      //console.log("OnClipBoardPoste", clipboardData)
      let imgF = Ti.Dom.getImageDataFromClipBoard(clipboardData)
      if (imgF) {
        let imgTp = Ti.Util.getSuffix(imgF.name)
        let dateS = Ti.DateTime.format(new Date(), "'Snapshot'-yyyyMMdd-HHmmss")
        imgF.uploadName = dateS + imgTp
        this.OnDropFiles([imgF])
      }
    },
    //--------------------------------------------
    async OnDropFiles(files) {
      //console.log("OnDropFiles", files)
      if (!this.droppable)
        return
      let fs = [...files]
      await this.doUpload(fs)

      // Wait the computed result and notify
      this.$nextTick(() => {
        // Find my checked files
        let objs = []
        if (this.hasDataList) {
          _.forEach(this.DataList, it => {
            if (this.myCheckedIds[it.id]) {
              objs.push(it)
            }
          })
        }

        // Emit events
        this.$notify("uploaded", objs)
      })
    },
    //--------------------------------------------
    async OnSelectLocalFilesToUpload(evt) {
      await this.OnDropFiles(evt.target.files)
      if (_.isElement(this.$refs.file)) {
        this.$refs.file.value = ""
      }
    },
    //--------------------------------------------
    // Getters
    //--------------------------------------------
    getCurrentItem() {
      if (this.myCurrentId && this.hasDataList) {
        return _.find(this.DataList, it => it.id == this.myCurrentId)
      }
    },
    //--------------------------------------------
    getCheckedItems() {
      if (this.hasDataList)
        return _.filter(this.DataList, it => this.myCheckedIds[it.id])
      return []
    },
    //--------------------------------------------
    setItem(newItem) {
      if (newItem && this.hasDataList) {
        let list = _.map(this.DataList, it => {
          return it.id == newItem.id
            ? newItem
            : it
        })
        if (_.isArray(this.myData)) {
          this.myData = list
        } else {
          this.myData = _.assign({}, this.myData, { list })
        }
      }
    },
    //--------------------------------------------
    setItemStatus(id, status = "loading") {
      this.myItemStatus = _.assign({}, this.myItemStatus, {
        [id]: status
      })
    },
    //--------------------------------------------
    findRowById(rowId) {
      return this.$innerList.findRowById(rowId)
    },
    //--------------------------------------------
    getItemById(id) {
      let row = this.$innerList.findRowById(id)
      if (row) {
        return row.rawData
      }
    },
    //--------------------------------------------
    selectItem(id) {
      this.$innerList.selectRow(id)
    },
    //--------------------------------------------
    selectItemByIndex(index) {
      this.$innerList.selectRowByIndex(index)
    },
    //--------------------------------------------
    checkItem(id) {
      let ids = {}
      _.forEach(this.myCheckedIds, (v, k) => {
        if (v)
          ids[k] = true
      });
      ids[id] = true
      this.myCheckedIds = ids
    },
    //--------------------------------------------
    toggleItem(id) {
      let ids = {}
      _.forEach(this.myCheckedIds, (v, k) => {
        if (k == id) {
          ids[k] = v ? false : true
        }
        else if (v)
          ids[k] = true
      });
      ids[id] = true
      this.myCheckedIds = ids
    },
    //--------------------------------------------
    setItemSelect(id) {
      this.$innerList.setRowSelect(id)
    },
    //--------------------------------------------
    // For global menu invoke checkAll/cancleAll
    invokeList(methodName, ...args) {
      Ti.InvokeBy(this.$innerList, methodName, args)
    },
    //--------------------------------------------
    isHiddenItem(it) {
      if (it && it.nm && it.nm.startsWith(".") && !this.myExposeHidden) {
        return true
      }
      return false
    },
    //--------------------------------------------
    // Utility
    //--------------------------------------------
    async _run(nm, payload) {
      let target = (this.routers || {})[nm]
      // Run by customized function
      if (_.isFunction(target)) {
        await target()
      }
      // In app
      else if (target) {
        let app = Ti.App(this)
        return await app.exec(target, payload)
      }
    },
    //--------------------------------------------
    // toggleExposeHidden() {
    //   let newVal = !this.myExposeHidden
    //   this.myExposeHidden = newVal
    //   if(this.keeyHiddenBy) {
    //     Ti.Storage.session.set(this.keeyHiddenBy, newVal)
    //   }
    // },
    //--------------------------------------------
    openLocalFileSelectdDialog() {
      this.$refs.file.click()
    },
    //--------------------------------------------
    async openCurrentMeta() {
      let meta = this.getCurrentItem() || this.meta

      if (!meta) {
        await Ti.Toast.Open("i18n:nil-obj")
        return
      }

      let reo = await Wn.EditObjMeta(meta, { fields: "auto" })

      // Update to current list
      if (reo) {
        let { updates, data } = reo
        // TODO if update the "thumb" may need to force reload the preview
        // Update to list
        this.setItem(data)

        return data
      }
    },
    //--------------------------------------------
    async openCurrentPrivilege() {
      let meta = this.getCurrentItem() || this.meta

      if (!meta) {
        await Ti.Toast.Open("i18n:nil-obj")
        return
      }

      let newMeta = await Wn.EditObjPvg(meta)

      // Update to current list
      if (newMeta) {
        if (this.meta.id == newMeta.id) {
          await Ti.App(this).dispatch("main/reload", newMeta)
        } else {
          await Ti.App(this).commit("main/setDataItem", newMeta)
          //this.setItem(newMeta)
        }
        return newMeta
      }
    },
    //--------------------------------------------
    syncMyData() {
      //console.log("syncMyData")
      // 有时候直接改了 myData， 竟然会导致这个函数被触发
      // 我也是醉了，不知道为啥
      // 这会导致通过 setItem 修改列表，修改不了
      // 因为会被同步回来
      // 是否做一点脏脏的事情呢？
      //  - setItem 的时候做一个时间戳，在 500ms 内， 让 sync 不工作？
      this.myData = _.cloneDeep(this.data) || {
        list: [], pager: {}
      }
      this.myItemStatus = _.cloneDeep(this.itemStatus) || {}
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  watch: {
    // "myData" : function(newVal, oldVal) {
    //   console.log("MyData changed:", {
    //     "newVal" : _.get(newVal, "list.0.nm"),
    //     "oldVal" : _.get(oldVal, "list.0.nm"),
    //   })
    // },
    // myData : function(newVal, oldVal) {
    //   console.log("myData Changed", newVal)
    // },
    //--------------------------------------------
    "itemStatus": {
      handler: function (newVal, oldVal) {
        //console.log("WnAdaptlist.itemStatus changed!!!", newVal, oldVal)
        if (!_.isEqual(newVal, oldVal)) {
          this.myItemStatus = _.cloneDeep(newVal)
        }
      }
    },
    //--------------------------------------------
    "data": {
      handler: "syncMyData",
      immediate: true
    },
    //--------------------------------------------
    "exposeHidden": {
      handler: function (eh) {
        this.myExposeHidden = eh
      },
      immediate: true
    },
    //--------------------------------------------
    "currentId": {
      handler: function (newVal, oldVal) {
        if (!_.isEqual(newVal, oldVal)) {
          this.myCurrentId = newVal
        }
      },
      immediate: true
    },
    //--------------------------------------------
    "checkedIds": {
      handler: function (newVal, oldVal) {
        if (!_.isEqual(newVal, oldVal)) {
          if (_.isArray(newVal)) {
            let ids = {}
            _.forEach(newVal, id => ids[id] = true)
            this.myCheckedIds = ids
          } else {
            this.myCheckedIds = _.cloneDeep(newVal)
          }
        }
      },
      immediate: true
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  created: function () {
    this.OnPaste = evt => {
      this.OnClipBoardPoste(evt)
    }
  },
  ////////////////////////////////////////////////
  mounted: function () {
    //--------------------------------------------
    // Guart the uploading
    Ti.Fuse.getOrCreate().add({
      key: "wn-list-adaptview-check-uploading",
      everythingOk: () => {
        return !this.hasUploading
      },
      fail: () => {
        Ti.Toast.Open("i18n:upload-nofinished", "warn")
      }
    })
    // Watch the clipboard
    window.addEventListener("paste", this.OnPaste)
    // Restore the exposeHidden
    // if(this.keeyHiddenBy) {
    //   this.myExposeHidden = Ti.Storage.session.getBoolean(this.keeyHiddenBy)
    // }
  },
  //--------------------------------------------
  beforeDestroy: function () {
    Ti.Fuse.get().remove("wn-list-adaptview-check-uploading")
    window.removeEventListener("paste", this.OnPaste)
  }
  //--------------------------------------------
  ////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'hm-form-static-options.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/hm/form/static-options/hm-form-static-options.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  props: {
    //------------------------------------------------
    // Data
    //------------------------------------------------
    "value": {
      type: Array,
      default: () => []
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "dialog": {
      type: [Object, Array],
      default: () => ({
        title: "i18n:edit",
        width: 500,
        height: 500
      })
    },
    "formIconComConf": {
      type: Object,
      default: () => ({})
    },
    "formTextField": {
      type: Object,
      default: () => ({})
    },
    "formValueField": {
      type: Object,
      default: () => ({})
    },
    //------------------------------------------------
    // Aspect
    //------------------------------------------------
    "blankAs": {
      type: Object
    },
    "actionAlign": {
      type: String,
      default: undefined
    },
    "newItemIcon": {
      type: String,
      default: "fas-plus"
    },
    "newItemText": {
      type: String,
      default: "i18n:new-item"
    },
    "itemEditable": {
      type: Boolean,
      default: true
    },
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    ListComConf() {
      let fields = [
        {
          "title": "i18n:title",
          "display": [
            "<icon>?",
            "text"
          ]
        },
        {
          "title": "i18n:value",
          "display": "value::as-tip flex-none"
        }
      ]

      return {
        dftLabelHoverCopy: false,
        columnResizable: true,
        canCustomizedFields: true,
        fields
      }
    },
    //------------------------------------------------
    FormComConf() {
      let fields = [
        {
          "title": "i18n:icon",
          "name": "icon",
          "comType": "TiInputIcon",
          "comConf": this.formIconComConf
        },
        {
          "title": "i18n:title",
          "name": "text",
          ..._.assign({
            type: "String",
            comType: "TiInput",
            comConf: {}
          }, this.formTextField)
        },
        {
          "title": "i18n:value",
          "name": "value",
          ..._.assign({
            type: "String",
            comType: "TiInput",
            comConf: {}
          }, this.formValueField)
        }
      ]

      return { gridColumnHint: 1, fields }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-lbs-map-google.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/lbs/map/google/ti-lbs-map-google.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  data : ()=>({
    // + Move cooling
    myLastMove : undefined,
    // => Input cooling
    mySyncTime : undefined,
    myUpTime: undefined,
    myCenterMarker: undefined,
    /*
    {
      [layerName] : Polyline,
      [layerName] : [Marker...]
    }
    */
    myLayers: {},
    myGrid: {
      x: [],
      y: [],
      x_step: undefined,
      y_step: undefined
    }
  }),
  /////////////////////////////////////////
  props : {
    // @see https://developers.google.com/maps/documentation/javascript/maptypes?hl=zh_CN
    // ROADMAP | SATELLITE | HYBRID | TERRAIN
    "mapType" : {
      type : String,
      default : "ROADMAP"
    },
    // Map center : {"lat":39.9042, "lng":116.4074}
    // If null, it will auto sync with the value
    // If Array, mean bounds
    // [sw, ne]
    //  sw: LatLng, ne: LatLng
    "center" : {
      type : [Object, Array],
      default : undefined
    },
    "zoom" : {
      type : Number,
      default : undefined
    },
    "bounds": {
      type: Array,
      default: undefined
    },
    /*
    [{
      name:"xxx",
      type:"point|path|area"
      items: [{lat,lng,title,icon}]
    }]
    */
    "layers": {
      type: Array,
      default: ()=>[]
    },
    "pinCenter": {
      type: Boolean,
      default: false
    },
    "cooling": {
      type: Number,
      default: 1000
    },
    "maxZoom": {
      type: Number,
      default: 22
    },
    "minZoom": {
      type: Number,
      default: 1
    },
    "boundPadding": {
      type: [Object, Number],
      default: 10
    },
    "stroke": {
      type: Object,
      default: ()=>({
        color: "#08F",
        opacity: 0.8,
        weight: 8
      })
    },
    // Refer by goole map api: gestureHandling
    // https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions
    "gestureHandling": {
      type: String,
      default: "auto",
      validator: v=>/^(cooperative|greedy|none|auto)$/.test(v)
    },
    /*
    {
      x: 10, y: 10, label: "=n", src: "/img/abc.png"
    }
    */
    "clustering": {
      type: Object,
      default: undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //-------------------------------------
    MapTypeId() {
      return this.getMapTypeId(this.mapType)
    },
    //-------------------------------------
    MapCenter() {
      // Bound
      if(_.isArray(this.center)) {
        let [sw, ne] = this.center
        return {
          lat: (sw.lat - ne.lat)/2 + ne.lat,
          lng: (sw.lng - ne.lng)/2 + ne.lng
        }
      }
      // Point
      return this.center
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //-------------------------------------
    isCoolDown() {
      if(!this.myUpTime) {
        return true
      }
      let du = Date.now() - this.myUpTime
      return du > this.cooling
    },
    //-------------------------------------
    isInSync() {
      if(!this.mySyncTime) {
        return false
      }
      let du = Date.now() - this.mySyncTime
      return du < this.cooling
    },
    //-------------------------------------
    getMapTypeId(mapType="ROADMAP") {
      return (google.maps.MapTypeId[mapType]) 
             || google.maps.MapTypeId.ROADMAP
    },
    //-------------------------------------
    draw_center_marker(lalCenter) {
      if(!lalCenter)
        lalCenter = this.$map.getCenter()
      // Update
      if(this.myCenterMarker) {
        this.myCenterMarker.setPosition(lalCenter)
      }
      // Drop one
      else {
        this.myCenterMarker = new google.maps.Marker({
          position: lalCenter,
          map: this.$map
        })
      }
      return lalCenter
    },
    //-------------------------------------
    draw_as_point({
      name, items=[], 
      iconSize, iconSizeHoverScale,
      clickable
    }={}) {
      //..................................
      if(!name) {
        throw "draw_as_point without layer name!"
      }
      //console.log("draw_as_point", name)
      //..................................
      let doClustering = !_.isUndefined(this.myGrid.x_step)
                      && !_.isUndefined(this.myGrid.y_step)
      //..................................
      // Get map bound for clustering
      let bound = this.$map.getBounds()
      if(!bound)
        return
      bound = bound.toJSON()
      //..................................
      // Prepare the layer marker list
      let markerList = []
      let matrix = []     // matrix for clustering
      //..................................
      // Define the marker drawing function
      let draw_marker = it => {
        let icon, size, size2;
        let label = it.label;
        if(_.isString(label)) {
          label = {
            color: "#FFF",
            text: label
          }
        }
        // Item icon
        if(it.src) {
          size = iconSize || {width:100, height:100}
          icon = {url:it.src, scaledSize:size}
          if(iconSizeHoverScale) {
            size2 = {
              width : size.width  * iconSizeHoverScale,
              height: size.height * iconSizeHoverScale
            }
          }
        }
        // Create marker
        let marker = new google.maps.Marker({
          position: it,
          title: it.title,
          label, icon,
          //label: `x:${box.x}: y:${box.y}`,
          clickable
        })
        markerList.push(marker)
        // Event
        if(clickable) {
          marker.addListener("click", ()=>{
            this.$notify("point:click", it)
          });
          // Hover to change the size
          if(size2) {
            marker.addListener("mouseover", function(){
              //marker.setAnimation(google.maps.Animation.BOUNCE)
              marker.setIcon({url: it.src, scaledSize: size2})
            });
            marker.addListener("mouseout", function(){
              //marker.setAnimation(null)
              marker.setIcon({url:it.src, scaledSize:size})
            });
          }
        }
      }
      //..................................
      // Define the multi-marker drawing function
      let draw_multi_markers = its=>{
        let icon, icon2, size, size2, label;
        let ctx = {
          n : its.length,
          title0 : its[0].title,
          title1 : its[1].title
        }
        // title
        let title = Ti.Util.explainObj(ctx, this.clustering.title || "->${n} places")
        // label
        if(this.clustering.label) {
          label = Ti.Util.explainObj(ctx, this.clustering.label)
        }
        // Icon
        if(this.clustering.src) {
          size = iconSize || {width:100, height:100}
          icon = {url:this.clustering.src, scaledSize:size}
          if(iconSizeHoverScale) {
            size2 = {
              width : size.width  * iconSizeHoverScale,
              height: size.height * iconSizeHoverScale
            }
            icon2 = {url:this.clustering.src, scaledSize:size2}
          }
        }
        // Get center
        let lalList = []
        _.forEach(its, ({it})=>lalList.push(it))
        let lalCenter = Ti.GPS.getCenter(lalList)
        // Create marker
        let marker = new google.maps.Marker({
          position: lalCenter,
          title, label, icon,
          //label: `x:${box.x}: y:${box.y}`,
          clickable : true
        })
        // Click to zoom
        marker.addListener("click", ()=>{
          this.$map.panTo(lalCenter)
          this.$map.setZoom(this.$map.getZoom()+1)
        });
        // Hover to change the size
        if(icon2) {
          marker.addListener("mouseover", function(){
            //marker.setAnimation(google.maps.Animation.BOUNCE)
            marker.setIcon(icon2)
          });
          marker.addListener("mouseout", function(){
            //marker.setAnimation(null)
            marker.setIcon(icon)
          });
        }
        // Add to markers
        markerList.push(marker)
      }
      //..................................
      // Define the items drawing function
      let draw_item = it => {
        // Clustering items
        if(_.isArray(it)) {
          // Multi-marker
          if(it.length > 1) {
            draw_multi_markers(it)
          }
          // Single marker
          else if(it.length > 0) {
            draw_marker(it[0].it)
          }
        }
        // Single item
        else {
          draw_marker(it)
        }
      }
      //..................................
      if(doClustering) {
        for(let it of items) {
          if(!it || !_.isNumber(it.lat) || !_.isNumber(it.lng)) 
            continue
          // Count box base clustering
          let box = {}
          //console.log("haha", it.title)
          box.x = Math.round(Ti.GPS.getLngToWest(it.lng,  bound.west) /this.myGrid.x_step)
          box.y = Math.round(Ti.GPS.getLatToSouth(it.lat, bound.south)/this.myGrid.y_step)
          let rows = matrix[box.y]
          if(!_.isArray(rows)){
            rows = []
            matrix[box.y] = rows
          }
          let cell = rows[box.x]
          if(!_.isArray(cell)) {
            cell = []
            rows[box.x] = cell
          }
          cell.push({...box, title: it.title, it})
        }
        //console.log(this.__dump_matrix(matrix))
        let cluList = this.clusteringMatrix(matrix)
        //console.log(cluList)
        _.forEach(cluList, draw_item)
      }
      // Add marker to map
      else {
        _.forEach(items, draw_marker)
      }
      //..................................
      // Add to global layer list for clean later
      this.myLayers[name] = markerList
      //..................................
      // Append to map
      _.forEach(markerList, marker => marker.setMap(this.$map))
    },
    //-------------------------------------
    clusteringMatrix(matrix) {
      let list = []
      for(let y=0; y<matrix.length; y++) {
        let rows = matrix[y]
        if(rows) {
          for(let x=0; x<rows.length; x++) {
            let cell = rows[x]
            // find my adjacent cell
            if(cell && cell.length>0) {
              // Right
              let next = rows[x+1]
              if(next && next.length>0) {
                rows[x+1] = undefined
                cell.push(...next)
              }
              // Down
              let adjRow = matrix[y+1]
              if(adjRow && adjRow.length > 0) {
                // Down
                next = adjRow[x]
                if(next && next.length>0) {
                  adjRow[x] = undefined
                  cell.push(...next)
                }
                // Down right
                next = adjRow[x+1]
                if(next && next.length>0) {
                  adjRow[x+1] = undefined
                  cell.push(...next)
                }
              }
              // Join to list
              list.push(cell)
            }
          }
        }
      }
      // Done
      return list
    },
    //-------------------------------------
    __dump_matrix(matrix) {
      let sb = ""
      for(let y=0; y<matrix.length; y++) {
        let rows = matrix[y]
        sb += `${y}: `
        if(rows) {
          for(let x=0; x<rows.length; x++) {
            let cell = rows[x]
            sb += `[${cell ? cell.length : 0}]`
          }
        }
        sb += "\n"
      }
      //console.log(sb)
    },
    //-------------------------------------
    tidyGridAxisLine(list, n) {
      if(list.length > n) {
        let more = list.slice(n)
        for(let pol of more) {
          pol.setMap(null)
        }
        return list.slice(0, n)
      }
      for(let i=list.length;i<n;i++) {
        list.push(new google.maps.Polyline({
          map: this.$map,
          geodesic: false,
          strokeColor: "#FF0000",
          strokeOpacity: 1.0,
          strokeWeight: 1,     
        }))
      }
      return list
    },
    //-------------------------------------
    eval_grid(x=10, y=10) {
      let bound = this.$map.getBounds()
      if(!bound)
        return
      bound = bound.toJSON()
      let ew = bound.east  - bound.west
      let ns = bound.north - bound.south
      if(ew < 0) {
        ew += 360
      }
      let lngStep = ew / x
      let latStep = ns / y
      //console.log({ew, ns, ew_u: lngStep, ns_u: latStep})

      // Build enouth grid
      let xN = x - 1;
      let yN = y - 1;
      this.myGrid.x = this.tidyGridAxisLine(this.myGrid.x, xN)
      this.myGrid.y = this.tidyGridAxisLine(this.myGrid.y, yN)
      this.myGrid.x_step = lngStep
      this.myGrid.y_step = latStep

      // // Draw line : X
      if(this.showGrid) {
        for(let i=1; i<x; i++) {
          let off = lngStep*i
          let lng = Ti.GPS.normlizedLng(bound.west + off)
          //console.log(i, {off, lng})
          let path = [
            {lat:bound.north, lng},
            {lat:bound.south, lng}
          ]
          this.myGrid.x[i-1].setPath(path)
        }

        // Draw line : Y
        for(let i=1; i<y; i++) {
          let off = latStep*i
          let lat = Ti.GPS.normlizedLat(bound.south + off)
          //console.log(i, {off, lat})
          let path = [
            {lat, lng:bound.west},
            {lat, lng:bound.east}
          ]
          this.myGrid.y[i-1].setPath(path)
        }
      }
    },
    //-------------------------------------
    draw_as_path({name, items=[], iconSize, clickable}={}) {
      if(!name) {
        throw "draw_as_path without layer name!"
      }
      // Draw points
      this.draw_as_point({
        name, 
        items, 
        iconSize,
        clickable
      })

      // Draw Path
      if(_.isArray(items) && items.length>1) {
        let it = _.first(items)
        if(it && _.isNumber(it.lat) && _.isNumber(it.lng)) {
          this.myLayers[`${name}-path`] = new google.maps.Polyline({
            map: this.$map,
            path: items,
            strokeColor   : this.stroke.color,
            strokeOpacity : this.stroke.opacity,
            strokeWeight  : this.stroke.weight
          })
        }
      }
    },
    //-------------------------------------
    drawLayers() {
      // console.log("drawLayers")
      if(this.clustering) {
        let {x, y} = this.clustering
        this.eval_grid(x, y);
      }
      //...................................
      // Pin Center
      if(this.pinCenter) {
        this.draw_center_marker()
      }
      //...................................
      // Guard
      if(_.isEmpty(this.layers)){
        return
      }
      //...................................
      // Loop layer
      let i = 0;
      for(let lay of this.layers) {
        //console.log(lay)
        i++
        if(!lay.name)
          lay.name = `Layer-${i}`
        this[`draw_as_${lay.type}`](lay)
      }
      //...................................
    },
    //-------------------------------------
    clearLayer(lay) {
      // Guard
      if(!lay) {
        return
      }
      // Only one map items
      if(_.isFunction(lay.setMap)) {
        lay.setMap(null)
      }
      // A group of map items
      else {
        _.forEach(lay, li=>{
          li.setMap(null)
        })
      }
    },
    //-------------------------------------
    cleanLayers(name) {
      //console.log("cleanLayers")
      // Clean center
      if(this.myCenterMarker) {
        this.myCenterMarker.setMap(null)
        this.myCenterMarker = undefined
      }
      // Clean layers
      if(name) {
        let lay = this.myLayers[name]
        this.clearLayer(lay)
        this.myLayers[name] = undefined
      }
      // Clean all
      else {
        _.forEach(this.myLayers, lay => {
          this.clearLayer(lay)
        })
        // Reset
        this.myLayers = {}
      }
    },
    //-------------------------------------
    redrawLayers(){
      this.cleanLayers()
      this.drawLayers()
    },
    //-------------------------------------
    redrawWhenMoveCoolDown() {
      let du = Date.now() - this.myLastMove;
      if(isNaN(du))
        return
      if(du > 500) {
        this.redrawLayers()
        this.myLastMove = undefined
        return
      }
      _.delay(()=>{
        this.redrawWhenMoveCoolDown()
      }, du)
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "mapType": function(newVal) {
      let mapType = this.getMapTypeId(newVal)
      this.$map.setMapTypeId(mapType)
    },
    //"value" : function(){this.drawValue()}
    "layers": function(newVal, oldVal) {
      if(!_.isEqual(newVal, oldVal)) {
        this.redrawLayers()
      }
    },
    "center": function(newVal, oldVal) {
      if(this.isCoolDown() && newVal) {
        this.mySyncTime = Date.now()
        // Bounds
        if(_.isArray(newVal)) {
          //console.log("google bounds changed", {newVal, oldVal})
          let sw = new google.maps.LatLng(newVal[0])
          let ne = new google.maps.LatLng(newVal[1])
          let bounds = new google.maps.LatLngBounds(sw, ne)
          this.$map.fitBounds(bounds, this.boundPadding)
        }
        // Pointer
        else if(_.isNumber(newVal.lat) && _.isNumber(newVal.lng)) {
          //console.log("google center changed", {newVal, oldVal})
          this.$map.panTo(newVal)
        }
        
      }
    },
    "zoom": function(newVal) {
      if(this.isCoolDown() && _.isNumber(newVal) && newVal>0) {
        this.$map.setZoom(newVal)
      }
    },
    "gestureHandling": function(newVal) {
      this.$map.setOptions({
        gestureHandling: newVal
      })
    }
  },
  //////////////////////////////////////////
  mounted : async function() {
    // Init Map
    //console.log("mounted", this.zoom, this.center)
    //......................................
    this.$map = new google.maps.Map(this.$refs.arena, {
      zoom: this.zoom,
      center: this.MapCenter,
      mapTypeId: this.MapTypeId,
      //...................................
      maxZoom : this.maxZoom,
      minZoom : this.minZoom,
      //...................................
      fullscreenControl: false,
      mapTypeControl: false,
      streetViewControl: false,
      zoomControl: false,
      gestureHandling : this.gestureHandling,
      //...................................
      center_changed: ()=>{
        //console.log(this.$map.getBounds().toJSON(), this.$map.getCenter().toJSON())
        let lal = this.$map.getCenter()
        if(this.clustering) {
          // May need to redraw when move cool down
          if(_.isUndefined(this.myLastMove)) {
            _.delay(()=>{
              this.redrawWhenMoveCoolDown()
            }, 500)
          }
        }
        this.myLastMove = Date.now()
        if(this.pinCenter) {
          this.draw_center_marker(lal)
        }
        if(!this.isInSync()) {
          this.myUpTime = Date.now()
          let lan = lal.toJSON()
          lan.lng = Ti.GPS.normlizedLng(lan.lng)
          this.$emit("center:change", lan)
        }
      },
      //...................................
      zoom_changed: ()=> {
        if(this.clustering) {
          this.redrawLayers()
        }
        this.myUpTime = Date.now()
        this.$emit("zoom:change", this.$map.getZoom())
      }
      //...................................
    })
    //......................................
    // Draw Value
    _.delay(()=>{
      this.redrawLayers()
    }, 1000)
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'hm-react-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/hm/react/actions/hm-react-actions.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data: () => ({
    myDisplayList: []
  }),
  ////////////////////////////////////////////////////
  props: {
    //------------------------------------------------
    // Data
    //------------------------------------------------
    "value": {
      type: Array,
      default: () => []
    },
    //------------------------------------------------
    // Behaviors
    //------------------------------------------------
    "dialog": {
      type: Object
    },
    //------------------------------------------------
    // Aspect
    //------------------------------------------------
    "itemIcon": {
      type: String,
      default: "zmdi-play-circle-outline"
    },
    "blankAs": {
      type: Object,
      default: () => ({
        className: "as-mid-tip align-center",
        text: "i18n:react-action-empty",
        icon: "zmdi-flash-auto"
      })
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    isEmpty() {
      return _.isEmpty(this.value)
    },
    //------------------------------------------------
    ReactTypes() {
      let types = [
        "thing_create",
        "thing_update",
        "thing_delete",
        "thing_clear",
        "obj_create",
        "obj_update",
        "obj_delete",
        "obj_clear",
        "exec",
        "jsc"
      ]
      let re = []
      for (let value of types) {
        re.push({
          value,
          text: `i18n:hmr-t-${value}`
        })
      }
      return re
    },
    //------------------------------------------------
    FormFields() {
      return [
        {
          title: 'i18n:type',
          name: "type",
          comType: "TiDroplist",
          comConf: {
            options: this.ReactTypes
          }
        },
        {
          title: 'i18n:path',
          name: "path",
          comType: "TiInput"
        },
        {
          title: 'i18n:batch-update',
          name: "batch",
          type: "Boolean",
          visible: {
            type: "^(obj|thing)_update$",
          },
          comType: "TiToggle"
        },
        {
          title: 'i18n:target-id',
          name: "targetId",
          visible: {
            type: "^thing_(delete|update)$"
          },
          hidden: {
            type: "^(obj|thing)_update$",
            batch: true
          },
          comType: "TiInput"
        },
        {
          title: 'i18n:query',
          name: "query",
          type: "Object",
          nameVAlign:"top",
          visible: [
            {
              type: "^(obj|thing)_clear$"
            }, {
              type: "^(obj|thing)_update$",
              batch: true
            }
          ],
          comType: "TiInputPair"
        },
        {
          title: 'i18n:meta',
          name: "meta",
          type: "Object",
          nameVAlign:"top",
          visible: {
            type: "^((obj|thing)_(create|update))$"
          },
          comType: "TiInputPair"
        },
        {
          title: 'i18n:params',
          name: "params",
          type: "Object",
          nameVAlign:"top",
          visible: {
            type: "^(jsc|thing_(create|delete|update|clear))$"
          },
          comType: "TiInputPair"
        },
        {
          title: 'i18n:sort',
          name: "sort",
          type: "Object",
          visible: {
            type: "^((thing|obj)_clear)$"
          },
          comType: "TiInputPair"
        },
        {
          title: 'i18n:input',
          name: "input",
          visible: {
            type: "^(exec)$"
          },
          comType: "TiInputText",
          comConf: {
            height: "10em"
          }
        },
        {
          title: 'i18n:skip',
          name: "skip",
          type: "Integer",
          visible: {
            type: "^((thing|obj)_clear)$"
          },
          comType: "TiInputNum"
        },
        {
          title: 'i18n:limit',
          name: "limit",
          type: "Integer",
          visible: {
            type: "^((thing|obj)_clear)$"
          },
          comType: "TiInputNum"
        }
      ]
    },
    //------------------------------------------------
    ActionSetup() {
      return [
        {
          text: "i18n:react-action-add",
          icon: "zmdi-plus",
          className: "min-width-8",
          handler: () => {
            this.OnAddAction()
          }
        },
        {
          icon: "zmdi-code",
          className: "is-chip",
          handler: () => {
            this.OnViewSourceCode()
          }
        }
      ]
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    async OnEditAction({ index, data, icon }) {
      let reo = await this.OpenEditForm({ data, icon })

      // User cancel
      if (!reo) {
        return
      }

      // Put the new item
      let list = _.cloneDeep(this.value)
      list[index] = reo
      this.tryNotifyChange(list)
    },
    //------------------------------------------------
    async OnAddAction() {
      let reo = await this.OpenEditForm({
        data: { type: "jsc" },
        icon: 'zmdi-plus'
      })

      // User cancel
      if (!reo) {
        return
      }

      // Put the new item
      let list = _.cloneDeep(this.value)
      list.push(reo)
      this.tryNotifyChange(list)
    },
    //------------------------------------------------
    async OpenEditForm({ data, icon }) {
      return await Ti.App.Open(_.assign(
        {
          icon,
          title: 'i18n:edit',
          width: "6.4rem",
          height: "96%",
        },
        this.dialog,
        {
          model: { event: "change", prop: "data" },
          result: data,
          comType: "TiForm",
          comConf: {
            spacing: "comfy",
            gridColumnHint: 1,
            fields: this.FormFields
          }
        }
      ))
    },
    //------------------------------------------------
    async OnViewSourceCode() {
      let json = JSON.stringify(this.value, null, '   ')
      let re = await Ti.App.Open({
        title: "i18n:edit",
        position: "top",
        width: "6.4rem",
        height: "90%",
        result: json,
        mainStyle: {
          padding: "2px"
        },
        comType: "TiInputText",
        comConf: {
          height: "100%"
        }
      })

      // User Cancel
      if (_.isUndefined(re)) {
        return
      }

      // Parse JSON
      let data = JSON.parse(_.trim(re) || "{}")
      this.tryNotifyChange(data)
    },
    //------------------------------------------------
    OnRemoveAction({ index }) {
      let list = _.cloneDeep(this.value)
      list = _.filter(list, (_, i) => i != index)
      this.tryNotifyChange(list)
    },
    //------------------------------------------------
    OnMovePrev({ index }) {
      // Guard
      if (index <= 0) {
        return
      }
      let list = _.cloneDeep(this.value)
      Ti.Util.moveInArray(list, index, index - 1);
      this.tryNotifyChange(list)
    },
    //------------------------------------------------
    OnMoveNext({ index }) {
      // Guard
      if (_.isArray(this.value) && index >= (this.value.length - 1)) {
        return
      }
      let list = _.cloneDeep(this.value)
      Ti.Util.moveInArray(list, index, index + 1);
      this.tryNotifyChange(list)
    },
    //------------------------------------------------
    tryNotifyChange(data) {
      if (!_.isEqual(data, this.value)) {
        this.$notify("change", data)
      }
    },
    //------------------------------------------------
    evalDisplayList() {
      //....................................
      const explain_val = (val) => {
        // Nil
        if (Ti.Util.isNil(val)) {
          return
        }
        // String || Boolean
        if (_.isString(val) || _.isNumber(val)) {
          return val
        }
        // Boolean
        if (_.isBoolean(val)) {
          return ['i18n:no', 'i18n:yes'][val]
        }
        // Array
        if (_.isArray(val)) {
          let re = []
          for (let v of val) {
            let v2 = explain_val(v)
            re.push(v2)
          }
          return re.join(", ")
        }
        // Object
        if (_.isPlainObject(val)) {
          let re = []
          _.forEach(val, (v, k) => {
            re.push(`${k}(${v || '<null>'})`)
          })
          return re.join("; ")
        }
        // Other just to String
        return Ti.Types.toStr(val)
      }
      //....................................
      const try_join_text = (it, fields, name) => {
        let val = _.get(it, name)
        if (Ti.Util.isNil(val)) {
          return
        }
        let text = explain_val(val);
        if (Ti.Util.isNil(text)) {
          return
        }

        fields.push({
          name: `i18n:${_.kebabCase(name)}`, text
        })
      }
      //....................................
      let list = []
      if (_.isArray(this.value)) {
        let len = this.value.length
        let lastI = len - 1
        for (let i = 0; i < len; i++) {
          let it = this.value[i]
          let atFirst = 0 == i
          let atLast = lastI == i
          let li = {
            index: i,
            atFirst,
            atLast,
            className: {
              "at-first": atFirst,
              "at-last": atLast
            },
            icon: it.icon || this.itemIcon,
            type: it.type,
            typeText: `i18n:hmr-t-${it.type}`,
            fields: [],
            data: it
          }
          try_join_text(it, li.fields, "path")
          try_join_text(it, li.fields, "query")
          try_join_text(it, li.fields, "params")
          try_join_text(it, li.fields, "targetId")
          try_join_text(it, li.fields, "meta")
          try_join_text(it, li.fields, "input")
          try_join_text(it, li.fields, "skip")
          try_join_text(it, li.fields, "limit")
          list.push(li)
        }
      }
      //....................................
      this.myDisplayList = list
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    "value": "evalDisplayList"
  },
  ////////////////////////////////////////////////////
  mounted: function () {
    this.evalDisplayList()
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-input-date.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/date/ti-input-date.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data: () => ({
    "runtime": null,
    "status": "collapse"
  }),
  ////////////////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "value": {
      type: [String, Number, Date],
      default: null
    },
    "valueType": {
      type: String,
      default: "ds",
      validator: v => /^(ms|ds|date)$/.test(v)
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "canInput": {
      type: Boolean,
      default: true
    },
    "monthFormat": {
      type: String,
      default: "yyyy-MM"
    },
    "beginYear": {
      type: [Number, String],
      default: 1970
    },
    "endYear": {
      type: [Number, String],
      default: (new Date().getFullYear() + 1)
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "icon": {
      type: String,
      default: "far-calendar-alt"
    },
    "format": {
      type: String,
      default: "yyyy-MM-dd"
    },
    "placeholder": {
      type: [String, Number],
      default: "i18n:blank-date"
    },
    "hideBorder": {
      type: Boolean,
      default: false
    },
    "statusIcons": {
      type: Object,
      default: () => ({
        collapse: "zmdi-chevron-down",
        extended: "zmdi-chevron-up"
      })
    },
    "autoCollapse": {
      type: Boolean,
      default: true
    },
    //-----------------------------------
    // Measure
    //-----------------------------------
    "width": {
      type: [Number, String],
      default: "2rem"
    },
    "height": {
      type: [Number, String],
      default: undefined
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName(this.className)
    },
    //------------------------------------------------
    isCollapse() { return "collapse" == this.status },
    isExtended() { return "extended" == this.status },
    //------------------------------------------------
    theDate() {
      return Ti.Types.toDate(this.value, null)
    },
    //------------------------------------------------
    theDropDate() {
      return this.runtime || this.theDate
    },
    //------------------------------------------------
    theInputValue() {
      if (this.isExtended) {
        return this.getDateText(this.theDropDate)
      }
      return this.getDateText(this.theDropDate, this.format)
    },
    //------------------------------------------------
    theStatusIcon() {
      return this.statusIcons[this.status]
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    applyRuntime() {
      if (this.runtime) {
        let dt = this.runtime
        this.runtime = null
        let v = this.getDateValue(dt)
        this.$notify("change", v)
      }
    },
    //-----------------------------------------------
    doExtend() {
      this.status = "extended"
    },
    //-----------------------------------------------
    doCollapse({ escaped = false } = {}) {
      this.status = "collapse"
      // Drop runtime
      if (escaped) {
        this.runtime = null
      }
      // Apply Changed for runtime
      else {
        this.applyRuntime()
      }
    },
    //------------------------------------------------
    onInputFocused() {
      this.doExtend()
    },
    //------------------------------------------------
    onChanged(val) {
      // Empty value as null
      if (_.isEmpty(val)) {
        this.$notify("change", null);
      }
      // Parsed value
      else {
        let dt = Ti.Types.toDate(val)
        let v = this.getDateValue(dt)
        this.$notify("change", v)
      }
    },
    //------------------------------------------------
    onClickStatusIcon() {
      // extended -> collapse
      if (this.isExtended) {
        this.doCollapse()
      }
      // collapse -> extended
      else {
        this.doExtend()
      }
    },
    //------------------------------------------------
    onDateChanged(dt) {
      this.runtime = dt
      if (this.autoCollapse) {
        this.doCollapse()
      }
    },
    //------------------------------------------------
    getDateText(dt, fmt = "yyyy-MM-dd") {
      let dt2 = Ti.Types.toDate(dt, null)
      return Ti.Types.formatDate(dt2, fmt)
    },
    //------------------------------------------------
    getDateValue(date) {
      let func = ({
        "ms": d => d.getTime(),
        "ds": d => this.getDateText(d),
        "date": d => d
      })[this.valueType]

      // Move to 00:00:00
      Ti.DateTime.setTime(date)

      // Done
      return func(date)
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-input-currency.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/currency/ti-input-currency.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data: () => ({}),
  ////////////////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "value": {
      type: [String, Number, Object],
      default: undefined
    },
    "valueType": {
      type: String,
      default: "str",
      validator: (v) => /^(str|obj|num)$/.test(v)
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    /*
     * The unit of input value:
     *
     *  - `100`  : yuan : 元
     *  - `10`   : jiao : 角
     *  - `1`    : cent : 分
     */
    "unit": {
      type: Number,
      default: 100
    },
    /* display precision */
    // "precision": {
    //   type: Number,
    //   default: 2
    // },
    /* default currency */
    "currency": {
      type: String,
      default: "RMB"
    },
    /* currency options */
    "options": {
      type: [String, Array, Function, Ti.Dict],
      default: undefined
    },
    "autoSelect": {
      type: Boolean,
      default: true
    },
    "readonly": {
      type: Boolean,
      default: false
    },
    "focused": {
      type: Boolean,
      default: false
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "placeholder": {
      type: [String, Number],
      default: undefined
    },
    "hideBorder": {
      type: Boolean,
      default: false
    },
    //-----------------------------------
    // Measure
    //-----------------------------------
    "width": {
      type: [Number, String],
      default: undefined
    },
    "height": {
      type: [Number, String],
      default: undefined
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //------------------------------------------------
    isCanChangeCurrency() {
      return "num" != this.valueType;
    },
    //------------------------------------------------
    InputHover() {
      let hover = ["prefixIcon"];
      if (this.isCanChangeCurrency) {
        hover.push("suffixText");
      }
      return hover;
    },
    //------------------------------------------------
    InputPrefixHoverIcon() {
      return this.readonly ? null : "zmdi-close-circle";
    },
    //------------------------------------------------
    ValObj() {
      return Ti.Bank.parseCurrency(this.value, {
        unit: this.unit,
        currency: this.currency
      });
    },
    //------------------------------------------------
    ValInput() {
      let v = this.ValObj.yuan;
      if (isNaN(v)) {
        return;
      }
      return v;
    },
    //------------------------------------------------
    DisInput() {
      return Ti.Bank.toBankText(this.ValInput);
    },
    //------------------------------------------------
    ValCurrency() {
      return this.ValObj.currency;
    },
    //------------------------------------------------
    ValIcon() {
      let cu = this.ValCurrency;
      return Ti.Bank.getCurrencyIcon(cu);
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    OnInputChange(val) {
      let v = this.tidyValue(val);
      this.$notify("change", v);
    },
    //------------------------------------------------
    tidyValue(val) {
      let v1 = _.toUpper(_.trim(val));
      let v2 = Ti.Bank.parseCurrency(v1, {
        unit: 100,
        currency: this.ValCurrency
      });
      return this.formatValue(v2);
    },
    //------------------------------------------------
    OnInputing(val) {
      let v = this.tidyValue(val);
      this.$notify("inputing", v);
    },
    //------------------------------------------------
    async OnClickSuffix() {
      // Guard
      if (!this.isCanChangeCurrency) {
        return;
      }
      // Open the dialog
      let reo = await Ti.App.Open({
        title: "i18n:currency",
        position: "top",
        width: "4.8rem",
        height: "62%",
        model: { event: "select" },
        events: {
          open: function () {
            this.close(this.result);
          }
        },
        comType: "TiFilterlist",
        comConf: {
          className: "ti-fill-parent",
          filterInput: {
            valueCase: "upper"
          },
          list: {
            idBy: "value",
            data: Ti.Bank.getCurrencyList(),
            currentId: this.ValCurrency,
            cancelable: false,
            display: [
              "<icon>",
              "value::flex-none as-tip",
              "text",
              "token::align-right as-tip-block"
            ]
          }
        },
        components: ["@com:ti/filterlist"]
      });

      // User Cancel
      if (!reo || !reo.currentId) {
        return;
      }

      // Change the currency
      let currency = reo.currentId;
      if (currency != this.ValCurrency) {
        let cuo = _.assign({}, this.ValObj, {
          currency
        });
        let v3 = this.formatValue(cuo);
        this.$notify("change", v3);
      }
    },
    //------------------------------------------------
    /**
     * @param {Object} cu Currency object like `{cent,yuan,currency}`
     * @return the value obey the `valueType` to notify change
     */
    formatValue(cu) {
      // Get format function
      let vt = this.valueType;
      const fn = {
        str: ({ cent, currency }) => {
          if (isNaN(cent)) {
            return null;
          }
          return `${cent / this.unit}${currency}`;
        },
        obj: ({ cent, currency }) => {
          if (isNaN(cent)) {
            return null;
          }
          return {
            value: cent / this.unit,
            currency
          };
        },
        num: ({ cent }) => {
          if (isNaN(cent)) {
            return;
          }
          return cent / this.unit;
        }
      }[vt];
      // Get value
      return fn(cu);
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-meta-preview.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/meta/preview/web-meta-preview.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  /////////////////////////////////////////
  props : {
    "logo" : {
      type : [String, Object],
      default : "zmdi-chevron-down"
    },
    "brief" : {
      type : String,
      default : null
    },
    "copyright" : {
      type : String,
      default : null
    }
  },
  //////////////////////////////////////////
  computed : {
    //......................................
    
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-input-time.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/time/ti-input-time.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data : ()=>({
    "runtime" : null,
    "status"   : "collapse"
  }),
  ////////////////////////////////////////////////////
  props : {
    "canInput" : {
      type : Boolean,
      default : true
    },
    "value" : {
      type : [String, Number, Ti.Types.Time],
      default : null
    },
    "icon" : {
      type : String,
      default : "far-clock"
    },
    /***
     * Value unit when value is Number
     */
    "valueUnit" : {
      type : String,
      default : "s",
      validator : function(unit) {
        return /^(ms|s|min|hr)$/.test(unit)
      }
    },
    // Display mode
    "mode" : {
      type : String,
      default : "auto",
      /***
       * - `sec`  : "HH:mm:ss"
       * - `min`  : "HH:mm"
       * - `auto` : "HH:mm" or "HH:mm:ss" if `ss` no zero
       */
      validator : function(unit) {
        return /^(sec|min|auto)$/.test(unit)
      }
    },
    "placeholder" : {
      type : [String, Number],
      default : "i18n:blank-time"
    },
    "hideBorder" : {
      type : Boolean,
      default : false
    },
    "width" : {
      type : [Number, String],
      default : "1.6rem"
    },
    "height" : {
      type : [Number, String],
      default : undefined
    },
    "dropWidth" : {
      type : [Number, String],
      default : "box"
    },
    "dropHeight" : {
      type : [Number, String],
      default : 400
    },
    "statusIcons" : {
      type : Object,
      default : ()=>({
        collapse : "zmdi-chevron-down",
        extended : "zmdi-chevron-up"
      })
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName(this.className)
    },
    //------------------------------------------------
    isCollapse() {return "collapse"==this.status},
    isExtended() {return "extended"==this.status},
    //------------------------------------------------
    theTime() {
      //console.log("input value:", this.value)
      return Ti.Types.toTime(this.value, this.valueUnit)
    },
    //------------------------------------------------
    theDropTime() {
      return this.runtime || this.theTime
    },
    //------------------------------------------------
    theTimeFormat() {
      return ({
        "sec"  : "HH:mm:ss",
        "min"  : "HH:mm",
        "auto" : "auto"
      })[this.mode]
    },
    //------------------------------------------------
    theTimeText() {
      return this.getTimeText(this.theDropTime)
    },
    //------------------------------------------------
    theStatusIcon() {
      return this.statusIcons[this.status]
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    applyRuntime() {
      if(this.runtime) {
        let tm = this.runtime
        this.runtime = null
        let str = this.getTimeText(tm)
        this.$notify("change", str)
      }
    },
    //-----------------------------------------------
    doExtend() {
      this.status = "extended"
    },
    //-----------------------------------------------
    doCollapse({escaped=false}={}) {
      //console.log("time doCollapse", {escaped})
      this.status = "collapse"
      // Drop runtime
      if(escaped) {
        this.runtime = null
      }
      // Apply Changed for runtime
      else {
        this.applyRuntime()
      }
    },
    //------------------------------------------------
    onInputFocused() {
      this.doExtend()
    },
    //------------------------------------------------
    onChanged(val) {
      // Empty value as null
      if(_.isEmpty(val)) {
        this.$notify("change", null);
      }
      // Parsed value
      else {
        let tm  = Ti.Types.toTime(val)
        let str = this.getTimeText(tm)
        this.$notify("change", str)
      }
    },
    //------------------------------------------------
    onClickStatusIcon() {
      // extended -> collapse
      if(this.isExtended) {
        this.doCollapse()
      }
      // collapse -> extended
      else {
        this.doExtend()
      }
    },
    //------------------------------------------------
    onTimeChanged(time) {
      this.runtime = time
    },
    //------------------------------------------------
    getTimeText(tm) {
      if(tm instanceof Ti.Types.Time) {
        return tm.toString(this.theTimeFormat)
      }
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'hm-prop-css-rules.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/hm/prop/css-rules/hm-prop-css-rules.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////////////////
  data: () => ({
  }),
  //////////////////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "value": {
      type: Object
    },
    "keyType": {
      type: String,
      default: "kebab",
      validator: v => /^(kebab|camel|snake)$/.test(v)
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "form": {
      type: Object,
      default: () => ({})
    },
    "rules": {
      type: [Array, String, Object, Boolean, RegExp],
      default: true
    },
    "getCssPropTitle": {
      type: Function,
      default: undefined
    },
    "findRuleFields": {
      type: Function,
      default: undefined
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "autoI18nRuleTitle": {
      type: Boolean,
      default: true
    },
    "dialog": {
      type: Object,
      default: () => ({})
    },
    "blankAs": {
      type: Object,
      default: () => ({
        className: "as-mid",
        icon: "fas-ruler-combined",
        text: "empty-data"
      })
    }
  },
  //////////////////////////////////////////////////////
  computed: {
    //--------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------------------
    ValueObj() {
      let re = {}
      _.forEach(this.value, (value, k) => {
        let key = this.FormatKey(k)
        re[key] = value
      })
      return re;
    },
    //--------------------------------------------------
    ValueTable() {
      let getTitle = this.getCssPropTitle
        || _.get(window, "Wn.Hm.getCssPropTitle")
        || function (v) { return v }
      let re = []
      _.forEach(this.ValueObj, (value, name) => {
        let title = getTitle(name)
        if (/^i18n:(.+)/.test(title)) {
          title = Ti.I18n.text(title)
        }
        else if (this.autoI18nRuleTitle) {
          title = Ti.I18n.get(title)
        }
        re.push({
          title, name, value
        })
      })
      return re;
    },
    //--------------------------------------------------
    FormatKey() {
      return ({
        "kebab": _.kebabCase,
        "camel": _.camelCase,
        "snake": _.snakeCase
      })[this.keyType]
    },
    //--------------------------------------------------
    isEmpty() {
      return _.isEmpty(this.ValueTable)
    },
    //--------------------------------------------------
    ActionItems() {
      return [{
        icon: "fas-drafting-compass",
        text: "i18n:edit",
        action: () => {
          this.openCssFormDialog()
        }
      }, {
        icon: "fas-code",
        action: () => {
          this.openCssCodeDialog()
        }
      }, {
        icon: "far-trash-alt",
        text: "i18n:clear",
        action: () => {
          this.clearValue()
        }
      }]
    },
    //--------------------------------------------------
    EmptyButtonSetup() {
      return [{
        icon: "fas-drafting-compass",
        text: "i18n:edit",
        handler: () => {
          this.openCssFormDialog()
        }
      }]
    },
    //--------------------------------------------------
    FormConfig() {
      let conf = _.cloneDeep(this.form)
      _.defaults(conf, {
        spacing: "comfy",
        gridColumnHint: 1
      })
      let findRuleFields = this.findRuleFields
        || _.get(window, "Wn.Hm.findCssPropFields")
        || function () { return [] }
      if (_.isEmpty(conf.fields)) {
        conf.fields = findRuleFields(this.rules)
      }
      return conf
    }
    //--------------------------------------------------
  },
  //////////////////////////////////////////////////////
  methods: {
    //--------------------------------------------------
    OnRemoveValue({ name }) {
      let val = _.omit(this.ValueObj, name)
      this.$notify("change", val)
    },
    //--------------------------------------------------
    async openCssFormDialog() {
      // Eval result
      let result = this.ValueObj

      // Open dialog
      let reo = await Ti.App.Open(_.assign(
        {
          title: "i18n:hmk-css-edit",
          width: "100%",
          maxWidth: "8rem",
          minWidth: "3.2rem",
          height: "95%",
          position: "top",
        },
        this.dialog,
        {
          result,
          model: { prop: "data", event: "change" },
          comType: "TiForm",
          comConf: this.FormConfig
        }
      ));

      // User cancle
      if (!reo)
        return

      // Normlized to value
      let val = this.normalizeValue(reo)

      this.$notify("change", val)
    },
    //--------------------------------------------------
    async openCssCodeDialog() {
      // Eval result
      let result = JSON.stringify(this.ValueObj, null, '   ')

      // Open dialog
      let re = await Ti.App.Open(_.assign({
        title: "i18n:hmk-css-edit",
        width: "6.4rem",
        height: "95%",
        position: "top",
      }, this.dialog, {
        result,
        comType: "TiTextJson",
        comConf: {
        },
        components: ["@com:ti/text/json"]
      }))

      // User cancle
      if (!re)
        return

      // Normlized to value
      let css = JSON.parse(re)
      let val = this.normalizeValue(css)

      this.$notify("change", val)
    },
    //--------------------------------------------------
    normalizeValue(css) {
      let re = {}
      _.forEach(css, (v, k) => {
        if (Ti.Util.isNil(v) || Ti.S.isBlank(v))
          return
        let key = this.FormatKey(k)
        re[key] = v
      })
      if (_.isEmpty(re))
        return null
      return re
    },
    //--------------------------------------------------
    clearValue() {
      this.$notify("change", null)
    }
    //--------------------------------------------------
  }
  //////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-files-delegates.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/files/wn-files-delegates.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //------------------------------------------------
  delegateObjAdaptor(methodName, ...args) {
    let $a = this.getObjAdaptor()
    if ($a) {
      return $a[methodName](...args)
    }
  },
  //------------------------------------------------
  async asyncDelegateObjAdaptor(methodName, ...args) {
    let $a = this.getObjAdaptor()
    if ($a) {
      return await $a[methodName](...args)
    }
  },
  //------------------------------------------------
  // Delegates
  //------------------------------------------------
  async openCurrentMetaEditor() {
    return await this.asyncDelegateObjAdaptor("openCurrentMetaEditor")
  },
  //------------------------------------------------
  async downloadCheckItems() {
    return await this.asyncDelegateObjAdaptor("downloadCheckItems")
  },
  //------------------------------------------------
  invokeList(methodName) {
    return this.delegateObjAdaptor("invokeList", methodName)
  },
  openLocalFileSelectdDialog() {
    return this.delegateObjAdaptor("openLocalFileSelectdDialog")
  },
  async openCurrentPrivilege() {
    return this.asyncDelegateObjAdaptor("openCurrentPrivilege")
  },
  async doCreate() {
    return this.asyncDelegateObjAdaptor("doCreate")
  },
  async doRename() {
    return this.asyncDelegateObjAdaptor("doRename")
  },
  async doBatchUpdate() {
    return this.asyncDelegateObjAdaptor("doBatchUpdate")
  },
  async doMoveTo() {
    return this.asyncDelegateObjAdaptor("doMoveTo")
  },
  async doDelete(confirm) {
    return this.asyncDelegateObjAdaptor("doDelete", confirm)
  },
  async openDataDir(target) {
    return this.asyncDelegateObjAdaptor("openDataDir", target)
  },
  async exportDataByModes(mode, target) {
    return this.asyncDelegateObjAdaptor("exportDataByModes", mode, target)
  },
  async exportData(payload) {
    return this.asyncDelegateObjAdaptor("exportDataByModes", payload)
  }
  //------------------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-chart-raw.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/chart/raw/ti-chart-raw.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data : ()=>({
    minDataValue : undefined,
    maxDataValue : undefined
  }),
  ////////////////////////////////////////////////////
  props : {
    //-----------------------------------
    // Data
    //-----------------------------------
    "data" : {
      type : Array,
      default : ()=>[]
    },
    "xKey" : {
      type : String,
      default : "name"
    },
    "yKey" : {
      type : String,
      default : "value"
    },
    "positionX" : {
      type : String,
      default : "name"
    },
    "positionY" : {
      type : String,
      default : "value"
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "scaleX" : {
      type : Object,
      default : ()=>({})
    },
    // Plus support: 
    //  - tickUnit : 50  // for tickCount, unit to 50
    "scaleY" : {
      type : Object,
      default : ()=>({
        nice : true,
        tickCount: 10
      })
    },
    "axisX" : {
      type : Object,
      default : undefined
    },
    "axisY" : {
      type : Object,
      default : undefined
    },
    "labelX" : {
      type : [Boolean, Object, String, Function],
      default : undefined
    },
    "labelY" : {
      type : [Boolean, Object, String, Function],
      default : undefined
    },
    "tooltip" : {
      type : [Boolean, Object],
      default : ()=>({
        showCrosshairs : true
      })
    },
    "legend" : {
      type : [Boolean, Object],
      default : ()=>({
        flipPage: false
      })
    },
    "view" : {
      type : Object,
      default : undefined
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "padding" : {
      type : [Number, Array, String],
      default : "auto"
    },
    "appendPadding" : {
      type : [Number, Array, String],
      default : undefined
    },
    //-----------------------------------
    // Measure
    //-----------------------------------
    "width" : {
      type : [Number, String],
      default : undefined
    },
    "height" : {
      type : [Number, String],
      default : undefined
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    ChartPosition() {
      return `${this.positionX}*${this.positionY}`
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    evalXYData(data, iteratee=_.identity) {
      let list = []
      let max, min, sum = 0;
      let i = 0;
      for(let it of data) {
        let value = (it[this.yKey] * 1) || 0
        let li = iteratee({
          [this.positionX]: Ti.I18n.text(it[this.xKey]),
          [this.positionY] : value
        })
        list.push(li)

        sum += value

        if((i++) > 0) {
          min = Math.min(value, min)
          max = Math.max(value, max)
        } else {
          min = value
          max = value
        }
      }
      this.maxDataValue = max
      this.minDataValue = min
      return {list, max, min, sum}
    },
    //------------------------------------------------
    getChartScaleX() {
      return _.assign({}, this.scaleX)
    },
    //------------------------------------------------
    getChartScaleY() {
      let config = _.cloneDeep(this.scaleY) || {}
      if("auto" == config.min || true === config.min) {
        config.min = this.minDataValue
      }
      if("auto" == config.max || true === config.max) {
        config.max = this.maxDataValue
      }
      return config
    },
    //------------------------------------------------
    applyChartScale(chart) {
      this.__apply_scale(chart, this.positionX, this.getChartScaleX())
      this.__apply_scale(chart, this.positionY, this.getChartScaleY())
    },
    //------------------------------------------------
    __apply_scale(chart, key, config) {
      if(!_.isEmpty(config)){
        if(config.tickUnit > 0) {
          config.min = Ti.Num.floorUnit(config.min, config.tickUnit)
          config.max = Ti.Num.ceilUnit(config.max, config.tickUnit)
        }
        chart.scale(key, config)
      }
    },
    //------------------------------------------------
    applyChartAxis(chart) {
      if(!_.isEmpty(this.axisX)) {
        chart.axis(this.positionX, this.axisX)
      }
      if(!_.isEmpty(this.axisY)) {
        chart.axis(this.positionY, this.axisY)
      }
    },
    //------------------------------------------------
    applyChartTooltip(chart) {
      if(!_.isEmpty(this.tooltip)) {
        chart.tooltip(this.tooltip);
      }
    },
    //------------------------------------------------
    applyChartSetup(chart) {
      // Axis
      this.applyChartAxis(chart)
        
      // Tick
      this.applyChartScale(chart)

      // Tooltip
      this.applyChartTooltip(chart)

      // legend
      if(!_.isUndefined(this.legend)) {
        chart.legend(this.legend)
      }
    },
    //------------------------------------------------
    applyViewLabel(view) {
      this.__apply_view_label(view, this.positionX, this.labelX)
      this.__apply_view_label(view, this.positionY, this.labelY)
    },
    //------------------------------------------------
    __apply_view_label(view, key, labelConfig) {
      if(!Ti.Util.isNil(labelConfig)) {
        let config = _.cloneDeep(labelConfig)

        if(_.isString(config)) {
          config = {content: config}
        }
        if(_.isString(config.content)) {
          let tmpl = config.content
          config.content = (obj) => {
            return Ti.S.renderBy(tmpl, obj)
          }
        }

        view.label(key, config)
      }
    },
    //------------------------------------------------
    applyViewOptions(view, ...options) {
      let config = _.merge({}, ...options)
      _.forEach(config, (v, k)=>{
        if(Ti.Util.isNil(v))
          return
        let args = _.concat(v)
        view[k].apply(view, args)
      })
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-droplist.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/droplist/wn-droplist.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  props : {
    "multi" : {
      type : Boolean,
      default : false
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    ComType() {
      return this.multi
        ? "wn-combo-multi-input"
        : "wn-combo-input"
    },
    //------------------------------------------------
    TheDropDisplay() {
      if(this.dropDisplay)
        return this.dropDisplay;

      return ["@<thumb>", "title|nm"]
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-input-tree-picker.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/input/tree-picker/wn-input-tree-picker.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    PickerOptions() {
      return async () => {
        let re = await Wn.Io.loadContent(this.options, { as: "json" })
        return re;
      }
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-pay.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/pay/web-pay.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////
  data: ()=>({
    myPayment: {
      payType: null,
      //payType: "wx.qrcode",
      orderId: undefined,
      payOk: undefined,
      errMsg: null,
      address: null
    }
  }),
  ///////////////////////////////////////////////////
  props : {
    "title": {
      type: String,
      default: "i18n:pay-title"
    },
    "payType": {
      type: String,
      default: null
    },
    "payTypeOptions" : {
      type : Array,
      default : undefined
    },
    "defaultAddr": {
      type: Object,
      default: undefined
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //----------------------------------------------
    PaySteps() {
      return [{
        title: "i18n:pay-step-checkout-title",
        next: {
          enabled: ()=>{
            if(_.isEmpty(this.items))
              return false

            if("A" == this.orderType)
              return !_.isEmpty(this.myPayment.address)

            return true
          }
        },
        comType: "WebPayCheckout",
        comConf: {
          tipIcon: this.tipIcon,
          tipText: this.tipText,
          items: this.items,
          currency: this.currency,
          orderType: this.orderType,
          addresses: this.addresses,
          currentAddr: this.myPayment.address,
          countries : this.countries
        }
      }, {
        title: "i18n:pay-step-choose-title",
        prev : true,
        next : {
          enabled: {
            payType: "![BLANK]"
          }
        },
        comType: "WebPayChoose",
        comConf: {
          options: this.options,
          value: "=payType"
        }
      }, {
        title: "i18n:pay-step-proceed-title",
        prev : true,
        next : {
          enabled: {
            payOk: "isBoolean",
            orderId: "![BLANK]"
          }
        },
        comType: "WebPayProceed",
        comConf: {
          items: this.items,
          currency: this.currency,
          payType: "=payType",
          orderId: "=orderId",
          payOk: "=payOk",
          address: "=address",
          checkPaymentInterval: this.checkPaymentInterval,
          orderType: this.orderType,
          orderTitle: this.orderTitle,
          watchUser: this.watchUser,
          qrcodeSize: this.qrcodeSize,
          fetchOrder: this.fetchOrder,
          payOrder: this.payOrder,
          createOrder: this.createOrder,
          checkOrder: this.checkOrder,
          returnUrl: this.returnUrl
        }
      }, {
        title: "pay-step-done-title",
        comType: "WebPayDone",
        comConf: {
          payOk: "=payOk",
          errMsg: "=errMsg",
          orderId: "=orderId",
          okIcon: this.okIcon,
          okText: this.okText,
          okLinks: this.okLinks,
          failIcon: this.failIcon,
          failText: this.failText,
          failLinks: this.failLinks,
          doneLinks: this.doneLinks
        }
      }]
    }
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //----------------------------------------------
    OnChange(payment) {
      _.assign(this.myPayment, payment)
    }
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch: {
    "payType": {
      handler: function(){
        this.myPayment.payType = this.payType
      },
      immediate: true
    },
    "defaultAddr" : {
      handler : function(addr) {
        if(addr && !this.myPayment.address) {
          this.myPayment.address = _.cloneDeep(addr)
        }
      },
      immediate : true
    }
  }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-combo-filter.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/filter/ti-combo-filter.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  /*
  {
    keyword: "xxx",  -> myFreeValue
    match: {..}      -> myFormData
  }
  */
  ////////////////////////////////////////////////////
  data : ()=>({
    myDropStatus : "collapse",
    myFreeValue : null,
    myFormData  : {},
    myMajorKey : undefined,
    myMajorValue : undefined
  }),
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass({
          "is-enabled": this.isFilterEnabled
        },`as-spacing-${this.spacing}`
      )
    },
    //------------------------------------------------
    isCollapse() {return "collapse"==this.myDropStatus},
    isExtended() {return "extended"==this.myDropStatus},
    //------------------------------------------------
    MajorConfig() {
      if(this.major && this.major.options) {
        return _.assign({
          width: 120,
          dropDisplay: ['<icon>', "text|title|nm"]
        }, this.major)
      }
    },
    //------------------------------------------------
    hasForm() {
      return !_.isEmpty(this.form)
    },
    //------------------------------------------------
    isFilterEnabled() {
      return !_.isEmpty(this.myFreeValue)
        || !_.isEmpty(this.myFormData)
    },
    //------------------------------------------------
    TheInputProps(){
      return _.assign({}, this, {
        autoI18n : this.autoI18n,
        placeholder : this.placeholder
      })
    },
    //------------------------------------------------
    InputValue() {
      return this.myFreeValue
    },
    //------------------------------------------------
    ThePrefixIcon() {
      let icon = this.prefixIcon;
      return icon || "im-filter"
    },
    //------------------------------------------------
    TheSuffixIcon() {
      if(this.hasForm) {
        return this.statusIcons[this.myDropStatus]
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnMajorChange(val) {
      this.myMajorValue = val
      this.tryNotifyChanged()
    },
    //------------------------------------------------
    OnCollapse() {this.doCollapse()},
    //-----------------------------------------------
    OnInputChanged(val) {
      this.myFreeValue = val
      this.myDropStatus = "collapse"

      // Clean all
      if(Ti.Util.isNil(val)) {
        this.myFormData  = {}
      }

      this.tryNotifyChanged()
    },
    //-----------------------------------------------
    OnInputFocused() {
      if(this.autoFocusExtended && !this.isExtended) {
        this.doExtend()
      }
    },
    //-----------------------------------------------
    OnClickStatusIcon() {
      if(this.isExtended) {
        this.doCollapse()
      } else {
        this.doExtend()
      }
    },
    //-----------------------------------------------
    OnFormChange(formData) {
      //console.log("filter form chanaged", formData)
      this.myFormData = _.cloneDeep(formData)
    },
    //-----------------------------------------------
    // Core Methods
    //-----------------------------------------------
    doExtend(tryReload=true) {
      if(this.hasForm && !this.isExtended) {
        this.myDropStatus = "extended"
      }
    },
    //-----------------------------------------------
    doCollapse({escaped=false}={}) {
      if(!this.isCollapse) {
        if(!escaped) {
          this.tryNotifyChanged()
        }
        this.myDropStatus = "collapse"
      }
    },
    //-----------------------------------------------
    tryNotifyChanged() {
      //console.log("tryNotifyChanged")
      let val = this.genValue()
      if(!_.isEqual(val, this.value)) {
        //console.log(val)
        this.$notify("change", val)
      }
    },
    //-----------------------------------------------
    // Utility
    //-----------------------------------------------
    genValue() {
      let val = {
        majorKey   : this.myMajorKey,
        keyword    : this.myFreeValue,
        match      : this.myFormData
      }
      if(!Ti.Util.isNil(this.myMajorValue)) {
        val.majorValue = this.myMajorValue
      }
      return val
    },
    //-----------------------------------------------
    evalMyValue() {
      //console.log("evalMyVal", this.value)
      let val = _.assign({}, this.value)
      this.myFreeValue = val.keyword
      this.myFormData  = val.match
      this.myMajorKey   = val.majorKey || this.majorKey
      this.myMajorValue = val.majorValue
    },
    //-----------------------------------------------
    // Callback
    //-----------------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("ti-combo-filter", uniqKey)
      //....................................
      if("ESCAPE" == uniqKey) {
        this.doCollapse({escaped:true})
        return {prevent:true, stop:true, quit:true}
      }
      //....................................
      if("ARROWDOWN" == uniqKey) {
        this.doExtend()
        return
      }
      //....................................
      if("ARROWUP" == uniqKey) {
        this.doCollapse()
        return
      }
      // //....................................
      // // If droplist is actived, should collapse it
      // if("ENTER" == uniqKey) {
      //   this.doCollapse()
      //   return {stop:true, quit:true}
      // }
      //....................................
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    //-----------------------------------------------
    "value" : {
      handler: "evalMyValue",
      immediate : true
    }
    //-----------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-upload-multi-files.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/upload/multi-files/ti-upload-multi-files.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  data: () => ({
    "loading": false,
    "dragging": false
  }),
  /////////////////////////////////////////
  props: {
    //-------------------------------------
    // Data
    //-------------------------------------
    /**
     * Each item as :
     * 
     * ```js
     * {
     *    id: "xxx",              // Unique key
     *    src: "http://xxx...",   // Src to preview
     *    file: File,             // Local file, for prerender duraing uploading
     *    value: "id:xxx"         // Value of the item, could be String or Object
     *    link: "/path/to/open"   // Link to open in newtab
     * }
     * ```
     */
    "items": {
      type: Array,
      default: () => []
    },
    /**
     * Show the process `0.0-1.0` during the uploading
     * 
     * ```js
     * {
     *    itemId: 0,              // `0.0-1.0` during the uploading
     * }
     * ```
     */
    "progress": {
      type: Object,
      default: () => ({})
    },
    // check function => {ok:false, msg:"xxx"}
    "fileFilter": {
      type: Function
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "sortable": {
      type: Boolean,
      default: true
    },
    // support remove the objects
    "removable": {
      type: Boolean,
      default: true
    },
    "limit": {
      type: Number,
      default: 0
    },
    "readonly": {
      type: Boolean,
      default: false
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "showItemText": {
      type: Boolean,
      default: true
    },
    "blankAs": {
      type: Object,
      default:()=>({
        className: "as-small-tip align-left",
        icon: "zmdi-attachment-alt",
        text: "i18n:empty-data"
      })
    },
    //-----------------------------------
    // Measure
    //-----------------------------------
    "itemWidth": {
      type: [Number, String],
      default: undefined
    },
    "itemHeight": {
      type: [Number, String],
      default: undefined
    },
    "previewStyle": {
      type: Object
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-dragging": this.dragging,
        "no-dragging": !this.dragging,
        "is-show-text": this.showItemText,
        "no-show-text": !this.showItemText
      })
    },
    //--------------------------------------
    ItemStyle() {
      return Ti.Css.toStyle({
        width: this.itemWidth,
        height: this.itemHeight
      })
    },
    //--------------------------------------
    ItemPreviewStyle() {
      return Ti.Css.toStyle(this.previewStyle)
    },
    //--------------------------------------
    PreviewItems() {
      let list = []
      _.forEach(this.items, (it, index) => {
        let { id, src, icon, file, value, link, text } = it
        let type = value ? "obj" : "local";
        let thumb;
        // Show local file
        if (file) {
          thumb = { type: "localFile", value: file }
        }
        // Show icon
        else if (icon) {
          thumb = icon
        }
        // Show image
        else {
          thumb = { type: "image", value: src }
        }
        // Get progress
        let progress = _.get(this.progress, id)
        // Join item
        list.push({
          index,
          id, src, file, value, link, text,
          type, thumb, progress,
          className: `is-${type}`
        })
      })
      return list
    },
    //--------------------------------------
    Values() {
      let list = []
      _.forEach(this.items, ({ value }) => {
        list.push(value)
      })
      return list
    },
    //--------------------------------------
    hasItems() {
      return !_.isEmpty(this.items)
    },
    //--------------------------------------
    isShowItemRemoveBtn() {
      return this.removable && !this.readonly
    },
    //--------------------------------------
    isShowAddBtn() {
      return !this.readonly && this.AvaCapCount != 0
    },
    //--------------------------------------
    AvaCapCount() {
      if (this.dragging) {
        return 0;
      }
      if (this.limit > 0) {
        return this.limit - this.Values.length
      }
      return -1
    },
    //--------------------------------------
    isShowActions() {
      return this.removable
             && !this.readonly
             && this.hasItems
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    async OnClickAdd() {
      this.$refs.file.click()
    },
    //--------------------------------------
    async OnDropFiles(files) {
      if (!_.isEmpty(files) && this.isShowAddBtn) {
        let fs;
        // Do Filter
        if (_.isFunction(this.fileFilter)) {
          fs = []
          for (let f of files) {
            let re = this.fileFilter(f)
            if (re.ok) {
              fs.push(f)
            }
            // Show Error
            else {
              return await Ti.Alert(re.msg, { type: "warn" })
            }
          }
        } else {
          fs = files
        }

        // Guard
        if (_.isEmpty(fs)) {
          return
        }

        // Auto match the limit
        if (this.AvaCapCount > 0 && fs.length > this.AvaCapCount) {
          fs = _.slice(fs, 0, this.AvaCapCount)
        }
        this.$notify("upload", fs)
      }
    },
    //--------------------------------------
    async OnSelectLocalFilesToUpload(evt) {
      await this.OnDropFiles(evt.target.files)
      this.$refs.file.value = ""
    },
    //--------------------------------------
    OnRemoveItem(it) {
      this.$notify("remove", it)
    },
    //--------------------------------------
    OnOpenItem(it) {
      this.$notify("open", it)
    },
    //--------------------------------------
    OnDownloadItem(it) {
      this.$notify("download", it)
    },
    //--------------------------------------
    OnClean() {
      this.$notify("clean")
    },
    //--------------------------------------
    switchItem(fromIndex, toIndex) {
      if (fromIndex != toIndex) {
        //console.log("switch item", { fromIndex, toIndex })
        let values = _.map(this.PreviewItems, it => it.value)
        Ti.Util.moveInArray(values, fromIndex, toIndex)
        this.$notify("change", values)
      }
    },
    //--------------------------------------
    initSortable() {
      if (!this.readonly && this.sortable && this.$refs.itemsCon) {
        new Sortable(this.$refs.itemsCon, {
          animation: 300,
          filter: ".as-new, .as-local",
          onStart: () => {
            this.$refs.itemsCon.turnOffTiDropFile = true
            this.dragging = true
          },
          onEnd: ({ oldIndex, newIndex }) => {
            this.$refs.itemsCon.turnOffTiDropFile = false
            this.switchItem(oldIndex, newIndex)
            _.delay(() => {
              this.dragging = false
            }, 100)
          }
        })
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "isShowAddBtn": function (newVal) {
      if (this.$refs.itemsCon) {
        this.$refs.itemsCon.turnOffTiDropFile = !newVal
      }
    }
  },
  //////////////////////////////////////////
  mounted: function () {
    this.initSortable()
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-gui-side-nav.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/gui/side/nav/wn-gui-side-nav.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  props: {
    "icon": {
      type: [String, Object],
      default: undefined
    },
    "title": {
      type: String,
      default: undefined
    },
    "statusStoreKey": {
      type: String,
      default: undefined
    },
    "items": {
      type: Array,
      default: null
    },
    "highlightItemId": {
      type: String,
      default: null
    },
    "highlightItemPath": {
      type: String,
      default: null
    },
    "hideIcon": {
      type: Number,
      default: 0
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //-------------------------------------
    TheItems() {
      let list = [];
      if (_.isArray(this.items)) {
        for (let it of this.items) {
          list.push(this.evalItem(it));
        }
      }
      return list;
    },
    //-------------------------------------
    theHighlightItemId() {
      let list = this.joinHighlightItems([], this.items);
      if (list.length > 0) {
        // Sort the list, 0->N, the first one should be the hightlight one
        list.sort((it0, it1) => it0.score - it1.score);
        // Get the first one
        return _.first(list).id;
      }
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //-------------------------------------
    evalItem(it = {}, depth = 1) {
      // Children
      let items = null;
      if (_.isArray(it.items)) {
        items = [];
        for (let subIt of it.items) {
          items.push(this.evalItem(subIt, depth + 1));
        }
      }
      // Store status
      let groupStatusStoreKey = undefined;
      if (this.statusStoreKey) {
        groupStatusStoreKey = this.statusStoreKey + "_" + it.key;
      }

      // Self
      let re = _.assign(
        _.pick(it, [
          "id",
          "key",
          "depth",
          "icon",
          "title",
          "tip",
          "path",
          "view"
        ]),
        {
          items,
          groupStatusStoreKey,
          highlightId: this.theHighlightItemId,
          href: it.id ? Wn.Util.getAppLink(it.id) + "" : null
        }
      );
      if (this.hideIcon > 0 && depth > this.hideIcon) {
        delete re.icon;
      }
      return re;
    },
    //-------------------------------------
    joinHighlightItems(list = [], items = []) {
      if (this.highlightItemId && _.isArray(items) && items.length > 0) {
        for (let it of items) {
          // Match the ID, 0
          if (it.id == this.highlightItemId) {
            list.push({ score: 0, id: it.id });
          }
          // Match the Path, 1 or more
          else if (
            it.path &&
            it.id &&
            this.highlightItemPath &&
            this.highlightItemPath.startsWith(it.path)
          ) {
            let diff = this.highlightItemPath.length - it.path.length;
            list.push({ score: 1 + diff, id: it.id });
          }
          // Join Children
          if (it.items) {
            this.joinHighlightItems(list, it.items);
          }
        }
      }
      // Return self
      return list;
    },
    //-------------------------------------
    async OnItemActived(payload = {}) {
      // Guard for fure
      let bombed = await Ti.Fuse.fire();
      //console.log("OnItemActived", bombed)
      if (!bombed) {
        return;
      }
      this.$notify("item:active", payload);
    },
    //--------------------------------------
    scrollCurrentIntoView() {
      //console.log("scrollCurrentIntoView")
      if (this.theHighlightItemId) {
        let $view = this.$el;
        let $row = Ti.Dom.find(".side-nav-item.is-highlight", $view);
        Ti.Dom.scrollIntoView($view, $row, { to: "center", axis: "y" });
      }
    },
    //-------------------------------------
    delayScrollCurrentIntoView(delay = 500) {
      _.delay(() => {
        this.scrollCurrentIntoView();
      }, delay);
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    //"theHighlightItemId": "delayScrollCurrentIntoView"
  },
  //////////////////////////////////////////
  mounted() {
    this.$nextTick(() => {
      this.delayScrollCurrentIntoView(0);
      this.delayScrollCurrentIntoView(100);
      this.delayScrollCurrentIntoView(500);
    });
  }
  //////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'wn-importer-form.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/data/importer-form/wn-importer-form.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////////
  data: () => ({
    myData: {},
    myMappingFiles: [],
    myCanFields: {
      /*mappingName : []*/
    }
  }),
  ///////////////////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    // candicate mapping files
    // If DIR, then get all json in it is option mapping files.
    // It will show drop list when multi mapping files.
    // Anyway, it need a mapping file, to get all avaliable fields.
    // [required]
    mappingPath: {
      type: [String, Array]
    },
    // If multi mapping paths, the first one(order by name) will
    // be used defaultly. But you can indicate it in this prop.
    // [optional]
    defaultMappingName: {
      type: String
    },
    // TODO: Maybe allow user to choose the output folder in futrue
    uploadTarget: {
      type: [String, Function]
      // sunc as "~/tmp/${name}"
    },
    // additional render vars for output target
    vars: {
      type: Object,
      default: () => ({})
    },
    data: {
      type: Object
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    outputMode: {
      type: String,
      default: "all"
    },
    outputModeOptions: {
      type: Array,
      default: () => ["all", "scope"]
    },
    // Auto remove target when expired.
    // null, never expired
    targetExpi: {
      type: String,
      default: "6h"
    },
    targetExpiOptions: {
      type: Array,
      default: () => ["1h", "6h", "1d"]
    },
    uploadTip: {
      type: [String, Object],
      default: "i18n:wn-import-upload-xlsx-tip"
    },
    uploadValueType: {
      type: String,
      default: "id"
    },
    uploadSupportTypes: {
      type: Array,
      default: () => ["xlsx"]
    },
    moreFields: {
      type: Array
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    title: {
      type: String,
      default: undefined
    },
    gridColumnHint: {
      type: [String, Array],
      default: "[[5,1500],[4,1200],[3,900],[2,600],[1,300],0]"
    },
    fieldsGridColumnHint: {
      type: [String, Array],
      default: "[[6,1500],[5,1250],[4,1000],[3,750],[2,500],1]"
    }
  },
  ///////////////////////////////////////////////////////
  computed: {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass({});
    },
    //---------------------------------------------------
    MappingFileId() {
      return _.get(this.myData, "mapping");
    },
    //---------------------------------------------------
    MappingFields() {
      return _.get(this.myCanFields, this.MappingFileId) || [];
    },
    //---------------------------------------------------
    FormUploadTarget() {
      return Ti.Tmpl.exec(this.uploadTarget, this.vars);
    },
    //---------------------------------------------------
    OutputModeOptions() {
      return this.explainOptions(
        this.outputModeOptions,
        this.explainOutputModeOption
      );
    },
    //---------------------------------------------------
    TargetExpiOptions() {
      return this.explainOptions(
        this.targetExpiOptions,
        this.explainExpiOption
      );
    },
    //---------------------------------------------------
    FormFields() {
      let fields = [
        {
          title: "i18n:wn-import-upload",
          name: "fileId",
          fieldWidth: "100%",
          tip: this.uploadTip,
          colSpan: 2,
          comType: "WnUploadFileBox",
          comConf: {
            valueType: this.uploadValueType,
            target: this.FormUploadTarget,
            supportTypes: this.uploadSupportTypes
          }
        }
      ];

      //
      // Choose mapping file
      //
      if (this.myMappingFiles.length > 1) {
        fields.push({
          title: "i18n:wn-import-c-mapping",
          name: "mapping",
          tip: {
            text: "i18n:wn-import-c-mapping-tip",
            size: "normal"
          },
          comType: "TiDroplist",
          comConf: {
            placeholder: "i18n:wn-import-c-mapping-phd",
            options: this.myMappingFiles,
            iconBy: "icon",
            valueBy: "id",
            textBy: "title|nm",
            dropDisplay: ["<icon:fas-exchange-alt>", "title|nm"]
          }
        });
      }

      //
      // Choose Fiels
      //
      fields.push(
        {
          name: "fields",
          type: "Array",
          colSpan: 10,
          visible: {
            mapping: "![BLANK]"
          },
          enabled: {
            fileId: "![BLANK]"
          },
          comType: "TiBulletCheckbox",
          comConf: {
            title: "i18n:wn-export-choose-fields",
            options: this.MappingFields,
            gridColumnHint: this.fieldsGridColumnHint,
            autoI18n: true
          }
        },
        {
          icon: "zmdi-settings",
          title: "i18n:wn-import-setup"
        }
      );

      //
      // More Setting
      //

      if (this.TargetExpiOptions.length > 1) {
        fields.push({
          title: "i18n:wn-import-c-expi",
          name: "expi",
          tip: "i18n:wn-import-c-expi-tip",
          comType:
            this.TargetExpiOptions.length > 3 ? "TiDroplist" : "TiSwitcher",
          comConf: {
            allowEmpty: false,
            options: this.TargetExpiOptions
          }
        });
      }

      // Output target mode
      if (this.OutputModeOptions.length > 1) {
        fields.push({
          title: "i18n:wn-export-c-mode",
          name: "mode",
          comType: "TiSwitcher",
          comConf: {
            allowEmpty: false,
            options: this.OutputModeOptions
          }
        });
      }
      fields.push(
        {
          title: "i18n:wn-data-scope",
          name: "scope",
          tip: "[small]i18n:wn-data-scope-tip",
          visible: {
            mode: "scope"
          },
          comType: "TiInput",
          comConf: {
            placeholder: "i18n:wn-data-scope-phd",
            width: "2rem"
          }
        },
        {
          title: "i18n:wn-import-c-tags",
          name: "lbls",
          tip: "i18n:wn-import-c-tags-tip",
          type: "Array",
          comType: "TiInputTags"
        }
      );

      // Unique key
      fields.push({
        title: "i18n:wn-import-c-uniqkey",
        name: "uniqKey",
        tip: "i18n:wn-import-c-uniqkey-tip",
        comType:"TiInput",
        comConf: {
          placeholder:"i18n:wn-import-c-uniqkey-nil"
        }
      });

      // With Hook
      fields.push({
        title: "i18n:wn-import-c-withhook",
        name: "withHook",
        type:"Boolean",
        tip: "i18n:wn-import-c-withhook-tip",
        comType:"TiToggle"
      });

      // Add more customized fields
      if (!_.isEmpty(this.moreFields)) {
        fields.push(...this.moreFields);
      }

      return fields;
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods: {
    //---------------------------------------------------
    OnChange(data) {
      this.changeData(data);
    },
    //---------------------------------------------------
    OnOutputFieldsChange(fields = []) {
      this.changeData({ fields });
    },
    //---------------------------------------------------
    OnResetTargetName() {
      let name = this.genOutputName();
      this.changeData({ name });
    },
    //---------------------------------------------------
    explainOptions(options = [], fn = _.identity) {
      let re = [];
      if (!_.isEmpty(options)) {
        for (let it of options) {
          let li = fn(it);
          if (!Ti.Util.isNil(li)) {
            re.push(li);
          }
        }
      }
      return re;
    },
    //---------------------------------------------------
    explainOutputModeOption(it) {
      if (_.isString(it)) {
        return {
          "scope": { value: "scope", text: "i18n:wn-data-scope" },
          "all": { value: "all", text: "i18n:wn-import-c-mode-all" }
        }[it];
      }
      return it;
    },
    //---------------------------------------------------
    explainExpiOption(it) {
      if (_.isString(it)) {
        return (
          {
            "1h": { value: "1h", text: "i18n:wn-expi-1h" },
            "2h": { value: "2h", text: "i18n:wn-expi-2h" },
            "6h": { value: "6h", text: "i18n:wn-expi-6h" },
            "12h": { value: "12h", text: "i18n:wn-expi-12h" },

            "1d": { value: "1d", text: "i18n:wn-expi-1d" },
            "3d": { value: "3d", text: "i18n:wn-expi-3d" },
            "7d": { value: "7d", text: "i18n:wn-expi-7d" },
            "14d": { value: "14d", text: "i18n:wn-expi-14d" },
            "30d": { value: "30d", text: "i18n:wn-expi-30d" },

            "never": { value: null, text: "i18n:wn-expi-never" }
          }[it] || { text: it, value: it }
        );
      }
      return it;
    },
    //---------------------------------------------------
    async reloadMappingFields(mappingId = this.MappingFileId) {
      if (mappingId && !this.myCanFields[mappingId]) {
        // Try Cache
        let json = await Wn.Sys.exec2(
          `cat id:${mappingId} | jsonx -cqn @get mapping `
        );
        let cans = [];
        if (!Ti.S.isBlank(json)) {
          let list = JSON.parse(json);
          _.forEach(list, (li, key) => {
            // Group:  "Genaral": "-------------",
            if (/^[-]{5,}$/.test(li)) {
              cans.push({ title: key });
            }
            // Simple: "nm": "Name",
            else if (_.isString(li)) {
              cans.push({
                text: key,
                value: li
              });
            }
            // Complex: "race": {...}
            else if (li.name) {
              cans.push({
                text: key,
                value: li.name,
                asDefault: li.asDefault
              });
            }
          });
        }
        this.myCanFields = _.assign({}, this.myCanFields, {
          [this.MappingFileId]: cans
        });
      }
    },
    //---------------------------------------------------
    async reload() {
      //console.log("WDE:reload");
      // reload all option mapping paths
      let paths = _.concat(this.mappingPath);
      let fld = "^(id|race|tp|mime|nm|name|title)$";
      let list = [];
      for (let path of paths) {
        if (!path) {
          continue;
        }
        let oF = await Wn.Sys.exec2(`o '${path}' @name @json '${fld}' -cqn`, {
          as: "json"
        });
        if (oF && oF.id) {
          if ("DIR" == oF.race) {
            let files = await Wn.Sys.exec2(
              `o 'id:${oF.id}' @query 'tp:"json"' @name @json '${fld}' -cqnl`,
              { as: "json" }
            );
            if (_.isArray(files)) {
              list.push(...files);
            }
          }
          // Just a file
          else {
            list.push(oF);
          }
        }
      }
      // Found the default
      let mappingId = _.get(this.data, "mapping");
      if (!_.isEmpty(list) && !mappingId && _.isEmpty(this.MappingFields)) {
        mappingId = _.first(list).id;
        if (this.defaultMappingName) {
          for (let li of list) {
            if (li.name == this.defaultMappingName) {
              mappingId = li.id;
              break;
            }
          }
        }
      }
      // Try reload mapping fields
      this.reloadMappingFields(mappingId);

      // Notify change
      let data = {
        type: this.outputType,
        mode: this.outputMode,
        mapping: mappingId
      };
      if (this.targetExpi) {
        data.expi = `${this.targetExpi}`;
      }
      if (this.data) {
        _.assign(data, this.data);
      }
      this.changeData(data);

      this.myMappingFiles = list;
    },
    //---------------------------------------------------
    changeData(data) {
      this.myData = _.assign({}, this.myData, data);
      this.tryNotifyChange(this.myData);
    },
    //---------------------------------------------------
    tryNotifyChange(data) {
      if (!_.isEqual(this.data, data)) {
        this.$notify("change", data);
      }
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  mounted: async function () {
    //console.log("mouned")
    await this.reload();
  }
  ///////////////////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'ti-input-datetime.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/datetime/ti-input-datetime.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  data : ()=>({
    "runtime" : null,
    "status"  : "collapse"
  }),
  ////////////////////////////////////////////////////
  props : {
    "canInput" : {
      type : Boolean,
      default : true
    },
    "value" : {
      type : [String, Number, Date],
      default : null
    },
    "icon" : {
      type : String,
      default : "fas-clock"
    },
    "format" : {
      type : String,
      default : "yyyy-MM-dd HH:mm:ss"
    },
    "placeholder" : {
      type : [String, Number],
      default : "i18n:blank-datetime"
    },
    "hideBorder" : {
      type : Boolean,
      default : false
    },
    "autoCollapse" : {
      type : Boolean,
      default : false
    },
    "width" : {
      type : [Number, String],
      default : "2.4rem"
    },
    "height" : {
      type : [Number, String],
      default : undefined
    },
    "monthFormat" : {
      type : String,
      default : "yyyy-MM" 
    },
    "beginYear" : {
      type : [Number, String],
      default : 1970
    },
    "endYear" : {
      type : [Number, String],
      default : (new Date().getFullYear()+1)
    },
    "statusIcons" : {
      type : Object,
      default : ()=>({
        collapse : "zmdi-chevron-down",
        extended : "zmdi-chevron-up"
      })
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName(this.className)
    },
    //------------------------------------------------
    isCollapse() {return "collapse"==this.status},
    isExtended() {return "extended"==this.status},
    //------------------------------------------------
    theDate() {
      return Ti.Types.toDate(this.value, null)
    },
    //------------------------------------------------
    theDropDate() {
      return this.runtime || this.theDate
    },
    //------------------------------------------------
    theInputValue() {
      if(this.isExtended) {
        return this.getDateText(this.theDropDate)
      }
      return this.getDateText(this.theDropDate, this.format)
    },
    //------------------------------------------------
    theStatusIcon() {
      return this.statusIcons[this.status]
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    applyRuntime() {
      if(this.runtime) {
        let dt = this.runtime
        this.runtime = null
        let str = this.getDateText(dt)
        this.$notify("change", str)
      }
    },
    //-----------------------------------------------
    doExtend() {
      this.status = "extended"
    },
    //-----------------------------------------------
    doCollapse({escaped=false}={}) {
      this.status = "collapse"
      // Drop runtime
      if(escaped) {
        this.runtime = null
      }
      // Apply Changed for runtime
      else {
        this.applyRuntime()
      }
    },
    //------------------------------------------------
    onInputFocused() {
      this.doExtend()
    },
    //------------------------------------------------
    onChanged(val) {
      // Empty value as null
      if(_.isEmpty(val)) {
        this.$notify("change", null);
      }
      // Parsed value
      else {
        let dt  = Ti.Types.toDate(val)
        let str = this.getDateText(dt)
        this.$notify("change", str)
      }
    },
    //------------------------------------------------
    onClickStatusIcon() {
      // extended -> collapse
      if(this.isExtended) {
        this.doCollapse()
      }
      // collapse -> extended
      else {
        this.doExtend()
      }
    },
    //------------------------------------------------
    onDateChanged(dt) {
      this.runtime = dt
      if(this.autoCollapse) {
        this.doCollapse()
      }
    },
    //------------------------------------------------
    getDateText(dt, fmt="yyyy-MM-dd HH:mm:ss") {
      let dt2 = Ti.Types.toDate(dt, null)
      return Ti.Types.formatDate(dt2, fmt)
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-tile-address.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/tile/address/web-tile-address.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  props : {
    "value" : {
      type : Object,
      default : ()=>({})
    },
    "mapping": {
      type: Object,
      default: ()=>({
        id : "id",
        country  : "country",
        postcode : "postcode",
        province: "province",
        city: "city",
        street: "street",
        door: "door",
        consignee: "consignee",
        phone: "phone",
        email: "email",
        dftaddr: "dftaddr"
      })
    },
    // {"HK":"Hong Kong","TW":"Taiwan","MO":"Macao"}
    "countries": {
      type: Object,
      default: undefined
    },
    "showCountry": {
      type: Boolean,
      default:true
    },
    // If indicate this prop, it will replace the left-top title display
    "title" : {
      type: String,
      default: undefined
    },
    "can": {
      type: Object,
      default: ()=>({
        remove  : true,
        edit    : true,
        default : true,
        choose  : false,
        add     : false
      })
    },
    // If false emit the item after mapping
    "emitRawValue": {
      type: Boolean,
      default: true
    },
    // Auto highlight the default address
    "autoHighlight" : {
      type: Boolean,
      default: true
    },
    // Indicate the highlight ID
    "currentId" : {
      type: String,
      default: undefined
    },
    "blankAs" : {
      type : Object,
      default : ()=>({
        icon : "im-location",
        text : "i18n:address-nil"
      })
    },
    "selectable": {
      type: Boolean,
      default: false
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      let high = false
      if(_.isUndefined(this.currentId)) {
        if(this.autoHighlight && this.Item.dftaddr) {
          high = true
        }
      } else {
        high = this.currentId == this.Item.id
      }
      return this.getTopClass({
        "is-highlight": high,
        "is-selectable" : this.selectable
      })
    },
    //--------------------------------------
    hasValue() {
      return !_.isEmpty(this.value)
    },
    //--------------------------------------
    Item() {
      let it = Ti.Util.translate(this.value, this.mapping) || {}
      if(this.countries) {
        it.countryName = this.countries[it.country]
      } else {
        it.countryName = it.country
      }
      return it
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickTop() {
      if(this.selectable) {
        let v = this.getEmitValue()
        this.$notify('select', v)  
      }
    },
    //--------------------------------------
    OnRemove(){
      let v = this.getEmitValue()
      this.$notify('remove', v)
    },
    //--------------------------------------
    OnSetDefault(){
      let v = this.getEmitValue()
      this.$notify('set:default', v)
    },
    //--------------------------------------
    OnEdit(){
      let v = this.getEmitValue()
      this.$notify('edit', v)
    },
    //--------------------------------------
    OnChoose(){
      let v = this.getEmitValue()
      this.$notify('choose', v)
    },
    //--------------------------------------
    OnAdd(){
      let v = this.getEmitValue()
      this.$notify('add', v)
    },
    //--------------------------------------
    getEmitValue() {
      let v = this.emitRawValue ? this.value : this.Item
      return _.cloneDeep(v)
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-upload-multi-files.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/upload/multi-files/wn-upload-multi-files.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  data: () => ({
    myFileObjs: {},
    myUploadFiles: [],
    myUploadProgress: {},
    myUploadDone: {}
  }),
  /////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "value": {
      type: Array,
      default: () => []
    },
    // raw value is WnObj
    // If declare the valueType
    // It will transform the WnObj
    // to relaitve value mode
    "valueType": {
      type: String,
      default: "idPath",
      validator: (v) => /^(obj|path|fullPath|idPath|id)$/.test(v)
    },
    "query": {
      type: Object,
      default: () => ({
        /*
        path:"~/xxxx",
        match: {...},
        limit: 100,
        skip: 0,
        sort: {nm:1}
      */
      })
    },
    // Auto append the extra-meta after file been uploaded
    "fileMeta": {
      type: Object
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "sortable": {
      type: Boolean,
      default: true
    },
    // support remove the objects
    "removable": {
      type: Boolean,
      default: true
    },
    "limit": {
      type: Number,
      default: 0
    },
    // Indicate the upload target when upload new value
    // Of cause, if the `value` exists, replace it
    // The `target` must be a path to a image object,
    // it will auto transfrom the image format by `cmd_imagic`
    "target": {
      type: String,
      default: null
    },
    // which type supported to upload
    // nulll or empty array will support any types
    "supportTypes": {
      type: [String, Array],
      default: () => []
      //default : ()=>["png","jpg","jpeg","gif"]
    },
    "minFileSize": {
      type: Number,
      default: 0
    },
    "maxFileSize": {
      type: Number,
      default: 0
    },
    // which mime supported to upload
    // nulll or empty array will support any mimes
    "supportMimes": {
      type: [String, Array],
      default: () => []
      //default : ()=>["image/png","image/jpeg","image/gif"]
    },
    // Image object only: it will auto apply image filter
    // just like clip the image size etc..
    // @see cmd_imagic for more detail about the filter
    "filter": {
      type: [Array, String],
      default: null
    },
    // Image object only: if `>0 and <=1` mean output quality
    // if not match the range, will depends on the `cmd_imagic` default
    "quality": {
      type: Number,
      default: 0
    },
    "readonly": {
      type: Boolean,
      default: false
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "textBy": {
      type: [String, Function],
      default: "title|nm"
    },
    "showItemText": {
      type: Boolean,
      default: true
    },
    //-----------------------------------
    // Measure
    //-----------------------------------
    "itemWidth": {
      type: [Number, String],
      default: undefined
    },
    "itemHeight": {
      type: [Number, String],
      default: undefined
    },
    "previewStyle": {
      type: Object
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    AcceptTypes() {
      if (_.isString(this.supportTypes)) return this.supportTypes.split(",");
      return this.supportTypes;
    },
    //--------------------------------------
    AcceptMimes() {
      if (_.isString(this.supportMimes)) return this.supportMimes.split(",");
      return this.supportMimes;
    },
    //--------------------------------------
    ImageFilter() {
      if (!this.filter) return [];
      return [].concat(this.filter);
    },
    //--------------------------------------
    isQueryMode() {
      return this.query && this.query.path ? true : false;
    },
    //--------------------------------------
    LocalFileFilter() {
      return (file) => {
        //................................
        // Check file size
        let fileSize = file.size;
        if (this.minFileSize > 0 && fileSize < this.minFileSize) {
          return {
            ok: false,
            msg: Ti.I18n.textf("i18n:wn-invalid-fsize-min", {
              minSize: Ti.S.sizeText(this.minFileSize),
              fileSize: Ti.S.sizeText(fileSize)
            })
          };
        }
        if (this.maxFileSize > 0 && fileSize >= this.maxFileSize) {
          return {
            ok: false,
            msg: Ti.I18n.textf("i18n:wn-invalid-fsize-max", {
              maxSize: Ti.S.sizeText(this.maxFileSize),
              fileSize: Ti.S.sizeText(fileSize)
            })
          };
        }
        //................................
        // Check for support Types
        let type = Ti.Util.getSuffixName(file.name, true);
        let re = this.checkTypeInGivenList(
          this.AcceptTypes,
          type,
          "i18n:wn-invalid-types",
          {
            current: type,
            supports: this.AcceptTypes.join(", ")
          }
        );
        if (!re.ok) return re;
        //................................
        // Check for support mimes
        return this.checkTypeInGivenList(
          this.AcceptMimes,
          file.type,
          "i18n:wn-invalid-mimes",
          {
            current: file.type,
            supports: this.AcceptMimes.join(", ")
          }
        );
      };
    },
    //--------------------------------------
    GetObjText() {
      if (_.isFunction(this.textBy)) {
        return this.textBy;
      }
      if (_.isString(this.textBy)) {
        return (obj) => {
          return Ti.Util.getOrPickNoBlank(obj, this.textBy);
        };
      }
      return (obj = {}) => {
        return obj.title || obj.nm || obj.id;
      };
    },
    //--------------------------------------
    hasItems() {
      return !_.isEmpty(this.FileItems);
    },
    //--------------------------------------
    // Display image for <ti-thumb>
    FileItems() {
      let list = [];
      //
      // Join remote items
      //
      if (this.isQueryMode) {
        _.forEach(this.myFileObjs, (obj) => {
          let it = this.genFileItem(obj);
          list.push(it);
        });
      }
      // Value Mode
      else {
        for (let val of this.value) {
          let obj = this.myFileObjs[val];
          if (obj) {
            let it = this.genFileItem(obj);
            list.push(it);
          }
        }
      }
      //
      // Uploaded item
      //
      list.push(...this.myUploadFiles);
      // Done
      return list;
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    async OnOpen({ link } = {}) {
      if (link) {
        await Ti.Be.Open(link);
      }
    },
    //--------------------------------------
    async OnDownload({ id } = {}) {
      if (id) {
        let link = Wn.Util.getDownloadLink({ id });
        await Ti.Be.Open(link);
      }
    },
    //--------------------------------------
    async OnRemove({ index, id } = {}) {
      //console.log("remove", index, id)
      // The value should obey the `valueType` prop
      // but it can indicate if the item is obj or just local
      if (id) {
        await Wn.Sys.exec2(`rm id:${id}`);
      }

      // Query mode just reload
      if (this.isQueryMode) {
        await this.reloadByQuery();
      }
      // Update value
      else {
        let val = _.filter(this.value, (it, i) => {
          return i != index;
        });

        // Notify the change
        this.$notify("change", val);
      }
    },
    //--------------------------------------
    async OnClean() {
      //console.log("Do onclean");
      let cmds = [];
      _.forEach(this.FileItems, ({ id, value } = {}) => {
        if (value) {
          cmds.push(`rm id:${id}`);
        }
      });
      //console.log(cmds);
      if (_.isEmpty(cmds)) {
        return;
      }
      let cmdText = cmds.join(";");
      await Wn.Sys.exec2(cmdText);
      // Query mode just reload
      if (this.isQueryMode) {
        await this.reloadByQuery();
      }
      // Update value: Notify the Change
      else {
        this.$notify("change", null);
      }
    },
    //--------------------------------------
    setFileObj(key, obj = null) {
      if (key && obj && obj.id) {
        let objs = _.cloneDeep(this.myFileObjs);
        objs[key] = obj;
        this.myFileObjs = objs;
      }
    },
    //--------------------------------------
    setUploadProgress(id, progress = 0) {
      let pr = _.cloneDeep(this.myUploadProgress);
      pr[id] = Math.min(1, progress);
      this.myUploadProgress = pr;
    },
    //--------------------------------------
    setUploadDone(id, done = true) {
      let ud = _.cloneDeep(this.myUploadDone);
      ud[id] = done;
      this.myUploadDone = ud;
    },
    //--------------------------------------
    async OnUploadFiles(files = []) {
      // Guard
      if (!_.isEmpty(this.myUploadFiles)) {
        return await Ti.Toast.Open("file uploading, please try later!", "warn");
      }
      // Guard: no target
      if (!this.target) {
        return await Ti.Toast.Open("i18n:nil-target", "warn");
      }

      let list = _.map(files, (f) => f);

      // Add to upload list
      let uploadItems = [];
      for (let i = 0; i < list.length; i++) {
        let li = list[i];
        uploadItems.push({
          id: `UP-${i}`,
          file: li,
          index: i
        });
      }

      this.myUploadFiles = uploadItems;
      this.myUploadProgress = {}; // {"UP-0":.387, "UP-1": 1}
      this.myUploadDone = {};

      // Upload each file
      let newVals = [];
      for (let it of uploadItems) {
        let val = await this.uploadOneFile(it);
        newVals.push(val);
      }

      // Clean
      this.myUploadFiles = [];
      this.myUploadProgress = {};
      this.myUploadDone = {};

      // Notify Change
      let val = _.concat(this.value || [], newVals);
      this.$notify("change", val);
    },
    //--------------------------------------
    checkTypeInGivenList(list, str, invalidMsg, vars) {
      if (!_.isEmpty(list)) {
        let invalid = true;
        for (let li of list) {
          if (li == str) {
            invalid = false;
            break;
          }
        }
        if (invalid) {
          return {
            ok: false,
            msg: Ti.I18n.textf(invalidMsg, vars)
          };
        }
      }
      return { ok: true };
    },
    //--------------------------------------
    async uploadOneFile(uploadItem = {}) {
      let { id, file } = uploadItem;
      let uploadDone = _.get(this.myUploadDone, id);

      // Guard
      if (uploadDone) {
        return;
      }
      //................................
      // Eval the target
      let type = Ti.Util.getSuffixName(file.name, true);
      let vars = {
        type,
        name: file.name,
        majorName: Ti.Util.getMajorName(file.name)
      };
      //................................
      // Prepare customized file meta
      // Merge them to vars, then we can make target path more-dyna
      _.assign(vars, this.fileMeta);
      let taPath = Ti.S.renderBy(this.target, vars);

      //................................
      // Upload file to destination
      this.setUploadProgress(id);

      let { ok, msg, data } = await Wn.Io.uploadFile(file, {
        target: taPath,
        mode: "r",
        progress: (pe) => {
          let progress = pe.loaded / pe.total;
          this.setUploadProgress(id, progress);
        }
      });

      //................................
      // Mark done
      this.setUploadProgress(id, 100);

      //................................
      // Fail to upload
      if (!ok) {
        await Ti.Alert(`i18n:${msg}`, {
          type: "warn",
          icon: "zmdi-alert-triangle"
        });
        return;
      }

      //................................
      // Extra-file-meta
      if (!_.isEmpty(this.fileMeta)) {
        let fileMeta = Ti.Util.explainObj(vars, this.fileMeta);
        let metaJson = JSON.stringify(fileMeta);
        let cmdText = `o id:${data.id} @update @json -cqn`;
        data = await Wn.Sys.exec2(cmdText, { input: metaJson, as: "json" });
      }

      //................................
      // do Filter
      if (!_.isEmpty(this.ImageFilter)) {
        let cmd = [
          "imagic",
          `id:${data.id}`,
          `-filter "${this.ImageFilter.join(" ")}"`
        ];
        if (this.quality > 0 && this.quality <= 1) {
          cmd.push(`-qa ${this.quality}`);
        }
        cmd.push("-out inplace");
        let cmdText = cmd.join(" ");
        await Wn.Sys.exec2(cmdText);
      }

      //................................
      // Transform value
      let val = Wn.Io.formatObjPath(data, this.valueType);

      //................................
      // Save obj
      this.setUploadDone(id, true);
      this.setFileObj(val, data);

      //................................
      return val;
    },
    //--------------------------------------
    genFileItem(obj) {
      let oid = _.get(obj, "id");
      let val = Wn.Io.formatObjPath(obj, this.valueType);
      let it = {
        id: oid,
        key: oid || val,
        value: val
      };
      //..................................
      // Gone
      if (!obj) {
        it.icon = {
          type: "font",
          value: "fas-birthday-cake",
          opacity: 0.382,
          fontSize: ".16rem"
        };
      }
      //..................................
      // Image
      else if (Wn.Obj.isMime(obj, /^(image\/)/)) {
        let ss = ["/o/content?str=id:", obj.id];
        it.src = ss.join("");
      }
      //..................................
      // Video
      else if (Wn.Obj.isMime(obj, /^(video\/)/)) {
        let ss = ["/o/content?str=id:", obj.video_cover];
        it.src = ss.join("");
      }
      //..................................
      // Others just get the icon font
      else {
        it.icon = Wn.Util.getObjIcon(obj);
      }
      //..................................
      // Add link
      if (obj) {
        it.link = Wn.Util.getAppLink(obj);
        it.href = it.link ? it.link.toString() : undefined;
        if (this.showItemText) {
          it.text = this.GetObjText(obj);
        }
      }
      return it;
    },
    //--------------------------------------
    async reloadByQuery() {
      //console.log("reloadByQuery", this.query);
      let {
        path = this.target,
        match = {},
        limit = 0,
        skip = 0,
        sort = { nm: 1 }
      } = this.query;
      let oP = await Wn.Io.loadMeta(path);
      if (!oP) {
        return;
      }

      // process Command
      let cmdText = [
        `o 'id:${oP.id}' @query`,
        `-pager -limit ${limit} -skip ${skip}`,
        `-sort '${JSON.stringify(sort)}'`,
        "@json -cqnl"
      ].join(" ");
      let reo = await Wn.Sys.exec2(cmdText, {
        as: "json",
        input: JSON.stringify(match)
      });

      // Load each obj
      let objs = {};
      _.forEach(reo.list, (obj) => {
        let key = Wn.Io.formatObjPath(obj, this.valueType);
        objs[key] = obj;
      });

      // update state
      this.myFileObjs = objs;
    },
    //--------------------------------------
    async reloadByValue() {
      //console.log("reloadByValue", this.value);
      // Guard
      if (_.isEmpty(this.value)) {
        return;
      }
      // Load each obj
      let objs = {};
      for (let val of this.value) {
        let obj = await Wn.Io.loadObjAs(val, this.valueType);
        objs[val] = obj;
      }
      this.myFileObjs = objs;
    },
    //--------------------------------------
    async reload() {
      if (this.isQueryMode) {
        await this.reloadByQuery();
      } else {
        await this.reloadByValue();
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "value": function () {
      this.reload();
    }
  },
  //////////////////////////////////////////
  mounted: async function () {
    await this.reload();
  }
  //////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'm-session.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/session/m-session.mjs'] = (function(){
////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  getters : {
    get(state){return state}
  },
  ////////////////////////////////////////////////
  mutations : {
    set(state, session={}) {
      state.id     = session.id;
      state.grp    = session.grp;
      state.du     = session.du;
      state.expi   = session.expi;
      state.pwd    = session.pwd;
      state.ticket = session.ticket;
      state.uid    = session.uid;
      state.unm    = session.unm;
      state.me     = session.me;
      state.envs   = _.cloneDeep(session.envs);
    },
    setEnvs(state, envs) {
      state.envs = envs
    }
  },
  ////////////////////////////////////////////////
  actions : {
    //--------------------------------------------
    async openResetPasswd({dispatch}) {
      await Ti.App.Open({
        icon  : "fas-key",
        title : "i18n:my-passwd",
        position : "top",
        width  : 480,
        height : 640,
        textOk : null, textCancel : null,
        comType : "WebAuthPasswd",
        comConf : {
          allowModes: {
            "passwd" : true
          }
        },
        events : {
          "passwd:reset" : (payload)=> {
            console.log("passwd:reset", payload)
            dispatch("resetPasswd", payload)
          }
        },
        components : "@com:web/auth/passwd"
      })
    },
    //--------------------------------------------
    // pwd = {newpwd, oldpwd, done}
    async resetPasswd({}, pwd) {
      // User Cancels
      if(!pwd)
        return
      
      //console.log(pwd)
      // Reset By old password
      if("passwd" == pwd.mode) {
        let cmdText = `passwd '${pwd.newpwd}' -old '${pwd.oldpwd}'`
        let doneRe = {ok: true}
        await Wn.Sys.exec(cmdText,  {
          errorBy : ({code}) => {
            doneRe.ok = false
            doneRe.errCode = code
          }
        })
        // Callback to show reset status
        pwd.done(doneRe)
      }
      // Not support for now
      else {
        throw  "Unsupport passwd-reset mode: " + pwd.mode
      }

    },
    //--------------------------------------------
    async updateMyVars({commit}, vars={}) {
      let cmds = []
      _.forEach(vars, (v, k)=>{
        cmds.push(`me -set '${k}=${v}'`)
      })
      if(_.isEmpty(cmds))
        return 
      
      // Do update
      let cmdText = cmds.join(";\n");
      await Wn.Sys.exec(cmdText)

      // Update envs
      let envs = Wn.Session.env()
      commit("setEnvs", envs)
    },
    //--------------------------------------------
    async reload({commit}) {
      let reo = await Wn.Sys.exec('session', {as:"json"})
      commit("set", reo)
    }
    //--------------------------------------------
  }
  ////////////////////////////////////////////////
}
////////////////////////////////////////////////
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-th-adaptor-prop.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/th/adaptor/wn-th-adaptor-prop.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  "moduleName": {
    type: String,
    default: "main"
  },
  "guiShown": Object,
  "rootState": Object,
  "rootGetters": Object,
  "view": Object,
  //-----------------------------------
  // The Thingset
  //-----------------------------------
  "thingSetId": {
    type: String
  },
  "oTs": Object,
  "load": Object,
  //-----------------------------------
  // The search list
  //-----------------------------------
  "aggQuery": String,
  "agg": Object,
  "aggResult": Object,
  "fixedMatch": Object,
  "filter": Object,
  "sorter": Object,
  "list": Array,
  "currentId": [String, Number],
  "checkedIds": Object,
  "pager": Object,
  //-----------------------------------
  // Current Thing Meta/Content
  //-----------------------------------
  "meta": Object,
  "content": String,
  "contentData": undefined,
  //-----------------------------------
  // Current Thing Data Files
  //-----------------------------------
  "dataHome": String,
  "dataDirName": String,
  /*
  Current DataDir File List with pager
  */
  "dataDirFiles": {
    type: Object,
    default: () => ({
      "list": [],
      "pager": {
        "pn": 1,
        "pgsz": 50,
        "pgc": 0,
        "sum": 0,
        "skip": 0,
        "count": 0
      }
    })
  },
  "dataDirCurrentId": {
    type: [String]
  },
  "dataDirCheckedIds": {
    type: Object,
    default: () => ({})
  },
  //-----------------------------------
  // Gloable Status
  //-----------------------------------
  "status": {
    type: Object,
    default: () => ({
      "reloading": false,
      "doing": false,
      "saving": false,
      "deleting": false,
      "changed": false,
      "restoring": false,
      "inRecycleBin": false
    })
  },
  "fieldStatus": {
    type: Object,
    default: () => ({})
  },
  //-----------------------------------
  // Customized GUI
  //-----------------------------------
  "thingActions": {
    type: Array,
    default: () => []
  },
  "layout": {
    type: Object,
    default: () => ({})
  },
  "schema": {
    type: Object,
    default: () => ({})
  },
  "thingMethods": {
    type: Object,
    default: () => ({})
  },
  //-----------------------------------
  // Getters
  //-----------------------------------
  "getters": {
    type: Object,
    default: () => ({})
  },
  //-----------------------------------
  // Global View Setting
  //-----------------------------------
  "viewType": String,
  "exposeHidden": Boolean
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-combo-sorter.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/sorter/ti-combo-sorter.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    myDropStatus : "collapse",
    myItem : null,
    isASC : true,
    myListData: []
  }),
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    isCollapse() {return "collapse"==this.myDropStatus},
    isExtended() {return "extended"==this.myDropStatus},
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    },
    //------------------------------------------------
    SortTitle() {
      return Ti.Util.getOrPick(this.myItem, "text|value", this.placeholder)
    },
    //------------------------------------------------
    SortBy() {
      return _.first(_.keys(this.value))
    },
    //------------------------------------------------
    SortAs() {
      return _.get(this.value, this.SortBy) || 1
    },
    //------------------------------------------------
    ThePrefixIcon() {
      return _.get(this.myItem, "icon")
    },
    //------------------------------------------------
    TheSortIcon() {
      return this.isASC
        ? this.sortIcons.asc
        : this.sortIcons.desc
    },
    //------------------------------------------------
    TheSuffixIcon() {
      if(!_.isEmpty(this.myListData) && this.myListData.length>1) {
        return this.suffixIcon
      }
    },
    //------------------------------------------------
    Dict() {
      // Customized
      if(this.options instanceof Ti.Dict) {
        return this.options
      }
      // Refer dict
      if(_.isString(this.options)) {
        let dictName = Ti.DictFactory.DictReferName(this.options)
        if(dictName) {
          return Ti.DictFactory.CheckDict(dictName, ({loading}) => {
            this.loading = loading
          })
        }
      }
      // Auto Create
      return Ti.DictFactory.CreateDict({
        data : this.options,
        getValue : Ti.Util.genGetter(this.valueBy || "value"),
        getText  : Ti.Util.genGetter(this.textBy  || "text|name"),
        getIcon  : Ti.Util.genGetter(this.iconBy  || "icon")
      })
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnCollapse() {this.doCollapse()},
    //-----------------------------------------------
    OnClickBox() {
      this.isASC = !this.isASC
      this.tryNotifyChanged()
    },
    //-----------------------------------------------
    OnClickSuffixIcon() {
      if(this.isExtended) {
        this.doCollapse()
      } else {
        this.doExtend()
      }
    },
    //-----------------------------------------------
    OnDropListSelected({current}={}) {
      this.myItem = current
      this.doCollapse()
    },
    //-----------------------------------------------
    // Core Methods
    //-----------------------------------------------
    doExtend() {
      this.myDropStatus = "extended"
    },
    //-----------------------------------------------
    doCollapse({escaped=false}={}) {
      this.myDropStatus = "collapse"
      if(!escaped) {
        this.tryNotifyChanged()
      }
    },
    //-----------------------------------------------
    tryNotifyChanged() {
      //console.log("tryNotifyChanged")
      let val = this.genValue()
      if(!_.isEqual(val, this.value)) {
        this.$notify("change", val)
      }
    },
    //-----------------------------------------------
    // Utility
    //-----------------------------------------------
    genValue() {
      let by = _.get(this.myItem, "value")
      let as = this.isASC ? 1 : -1
      //console.log({by, as})
      return {[by]:as}
    },
    //-----------------------------------------------
    async evalMyValue() {
      let val = {by:null, as:1}
      // String: "CreateTime:1"
      if(_.isString(this.value)) {
        let ss = this.value.split(":")
        val.by = _.nth(ss, 0)
        val.as = _.nth(ss, 1) == "1" ? 1 : -1
      }
      // Array: ["CreateTime", 1]
      else if(_.isArray(this.value)) {
        val.by = _.nth(this.value, 0)
        val.as = _.nth(this.value, 1) > 0 ? 1 : -1
      }
      // Object as default {"CreateTime":1}
      else {
        val.by = this.SortBy
        val.as = this.SortAs
      }

      let it = await this.Dict.getItem(val.by)
      if(it) {
        this.myItem = it
      } else {
        this.myItem = {text:this.text||val.by, value:val.by}
      }
      this.isASC = val.as == 1
    },
    //-----------------------------------------------
    // Callback
    //-----------------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("ti-combo-multi-input", uniqKey)
      //....................................
      if("ESCAPE" == uniqKey) {
        this.doCollapse({escaped:true})
        return {prevent:true, stop:true, quit:true}
      }
      //....................................
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    //-----------------------------------------------
    "value" : {
      handler: "evalMyValue",
      immediate : true
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  mounted: async function() {
    this.myListData = await this.Dict.getData()
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'bar-item-group.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/actionbar/com/bar-item-group/bar-item-group.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////
  inject: ["$bar"],
  ///////////////////////////////////////////
  provide: function () {
    return { depth: this.depth + 1 }
  },
  ///////////////////////////////////////
  data: () => ({
    collapse: true,
    isDocked: false,
    barItems: [],
    IamHoverAt: 0
  }),
  ///////////////////////////////////////
  props: {
    //-----------------------------------
    // Same as <bar-item-info>
    //-----------------------------------
    "name": {
      type: String,
      default: undefined
    },
    "icon": {
      type: String,
      default: undefined
    },
    "hideIcon": {
      type: Boolean,
      default: false
    },
    "text": {
      type: String,
      default: undefined
    },
    "tip": {
      type: String,
      default: undefined
    },
    "altDisplay": {
      type: [Object, Array],
      default: () => []
    },
    "topHoverOpen": {
      type: Boolean,
      default: false
    },
    "enabled": {
      type: [String, Array, Object],
      default: undefined
    },
    "disabled": {
      type: [String, Array, Object],
      default: undefined
    },
    "highlight": {
      type: [String, Array, Object],
      default: undefined
    },
    "depth": {
      type: Number,
      default: 0
    },
    "status": {
      type: Object,
      default: () => ({})
    },
    //-----------------------------------
    // Self Props
    //-----------------------------------
    "items": {
      type: Array,
      default: () => []
    },
    "autoExtend": {
      type: Boolean,
      default: false
    }
  },
  ///////////////////////////////////////////
  computed: {
    //---------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-collapse": this.collapse,
        "is-extended": !this.collapse,
        "is-depth-x": this.isDepthX,
      }, `is-depth-${this.depth}`)
    },
    //---------------------------------------
    isDepth0() { return 0 == this.depth },
    isDepth1() { return 1 == this.depth },
    isDepthX() { return this.depth > 1 },
    //---------------------------------------
    hasInfo() {
      return this.icon || this.text
    },
    //---------------------------------------
    isChildrenWithoutIcon() {
      for (let it of this.items) {
        if (it.comConf && it.comConf.icon) {
          return false
        }
      }
      return true
    },
    //---------------------------------------
    showChildren() {
      return this.isDepth0 || !this.collapse
    },
    //---------------------------------------
    ItemSuffixIcon() {
      if (this.isDepthX) {
        return "im-angle-right"
      }
    },
    //---------------------------------------
    ChildrenStyle() {
      if (!this.isDepth0) {
        if (!this.isDocked) {
          return { "visibility": "hidden" }
        }
      }
    }
    //---------------------------------------
  },
  ///////////////////////////////////////////
  methods: {
    //---------------------------------------
    OnMouseEnter() {
      this.IamHoverAt = Date.now()
      if (this.isDepthX || this.topHoverOpen) {
        this.doExtend()
      }
      else if (this.topHoverOpen) {
        _.delay(() => {
          this.doExtend()
        }, 202)
      }
    },
    //---------------------------------------
    OnMouseHover() {
      this.IamHoverAt = Date.now()
    },
    //---------------------------------------
    OnMouseLeave() {
      if (this.isDepthX) {
        this.doCollapse()
      }
      else if (this.topHoverOpen) {
        _.delay(() => {
          this.tryCollape()
        }, 201)
      }
    },
    //---------------------------------------
    OnFired(collapse) {
      if (collapse) {
        this.doExtend()
      } else {
        this.doCollapse()
      }
    },
    //---------------------------------------
    tryCollape() {
      let du = Date.now() - this.IamHoverAt
      if (du > 200) {
        this.doCollapse()
      }
    },
    //---------------------------------------
    doExtend() {
      this.collapse = false
      //this.$bar.notifyChange({name:this.name, value:true})
    },
    //---------------------------------------
    doCollapse() {
      this.collapse = true
      this.isDocked = false
      //this.$bar.notifyChange({name:this.name, value:false})
    },
    //---------------------------------------
    doDockChildren() {
      //console.log("collapse changed", this.collapse)
      this.$nextTick(() => {
        if (this.$refs.children && this.depth > 0) {
          Ti.Dom.dockTo(this.$refs.children, this.$el, {
            mode: this.isDepthX ? "V" : "H",
            position: "fixed",
            space: this.isDepthX ? { x: -1 } : { y: 3 }
          })
          _.delay(() => {
            this.isDocked = true
          }, 5)
        }
      })
    }
    //---------------------------------------
  },
  ///////////////////////////////////////////
  watch: {
    "collapse": "doDockChildren"
  },
  ///////////////////////////////////////////
  mounted: function () {
    this.doDockChildren()
    this.$bar.allocGroup(this)
  },
  ///////////////////////////////////////////
  beforeDestroy: function () {
    this.$bar.freeGroup(this)
  }
  ///////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'm-obj-content-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/obj-content/m-obj-content-actions.mjs'] = (function(){
////////////////////////////////////////////
const _M = {
  //----------------------------------------
  // Combin Mutations
  //----------------------------------------
  onChanged({dispatch}, payload) {
    dispatch("changeContent", payload)
  },
  //----------------------------------------
  changeContent({commit}, payload) {
    commit("setContent", payload)
    commit("syncStatusChanged");
  },
  //----------------------------------------
  updateContent({commit}, content) {
    commit("setContent", content)
    commit("setSavedContent", content)
    commit("syncStatusChanged")
  },
  //--------------------------------------------
  // User Interactivity
  //--------------------------------------------
  async openContentEditor({state, dispatch}) {
    // Guard
    if(!state.meta) {
      return await Ti.Toast.Open("i18n:empty-data", "warn")
    }
    // Open Editor
    let newContent = await Wn.EditObjContent(state.meta, {
      content : state.content
    })

    // Cancel the editing
    if(_.isUndefined(newContent)) {
      return
    }

    // Update the current editing
    await dispatch("changeContent", newContent)
  },
  //--------------------------------------------
  // Reload & Save
  //--------------------------------------------
  // async setCurrent({state, commit,dispatch}, {
  //   meta=null, force=false
  // }={}) {
  //   //console.log("setCurrent", meta, loadContent)

  //   // Not need to reload
  //   if(state.meta && meta && state.meta.id == meta.id) {
  //     if((_.isString(state.content)) && !force) {
  //       return
  //     }
  //   }

  //   // do reload
  //   await dispatch("reload", meta)

  // },
  //----------------------------------------
  async save({state, commit}) {
    if(state.status.saving || !state.status.changed){
      return
    }

    commit("setStatus", {saving:true})

    let meta = state.meta
    let content = state.content
    let newMeta = await Wn.Io.saveContentAsText(meta, content)

    commit("setStatus", {saving:false})
    commit("setMeta", newMeta)
    commit("setSavedContent", content)
    commit("syncStatusChanged")

    // Notify user
    Ti.Toast.Open("i18n:save-done", "success")

    // return the new meta
    return newMeta
  },
  //----------------------------------------
  async reload({state,commit,dispatch}, meta) {
    if(state.status.reloading
      || state.status.saving){
      return
    }
    //......................................
    // Use the default meta
    if(!meta) {
      meta = state.meta
    }
    //......................................
    if(_.isString(meta)) {
      meta = await Wn.Io.loadMeta(meta)
    }
    //......................................
    // Guard
    if(!meta) {
      commit("setMeta", null)
      commit("setContent", null)
      return
    }
    //console.log("m-obj-current.reload", meta.id)
    //......................................
    // Init content as null
    let content = null
    commit("setStatus", {reloading:true})
    //......................................
    // For file
    if("FILE" == meta.race) {
      // need to be reload content
      content = await Wn.Io.loadContent(meta)
    }
    //......................................
    // Just update the meta
    commit("setMeta", meta)
    commit("setStatus", {reloading:false})
    // Update content and sync state
    dispatch("updateContent", content)
  }
  //----------------------------------------
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-gui-arena.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/gui/arena/wn-gui-arena.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    "meta" : {
      type : Object,
      default : null
    },
    "comType" : {
      type : String,
      default : "ti-loading"
    },
    "comConf" : {
      type : Object,
      default : ()=>({})
    }
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-th-search.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/th/search/wn-th-search.mjs'] = (function(){
//////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data: () => ({
    // Keep last search {input, command}
    // to avoid the multi-search
    myLastSearch: undefined,

    myLoading: false,
    myFilter: {},
    mySorter: {},
    myList: [],
    myPager: {}
  }),
  ////////////////////////////////////////////////////
  props: {
    //------------------------------------------------
    // Data
    //------------------------------------------------
    "tsPath": {
      type: String
    },
    "fixedMatch": {
      type: Object
    },
    //------------------------------------------------
    // Behavior
    //------------------------------------------------
    "localKeepAt": {
      type: String
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //--------------------------------------------
    isPagerEnabled() {
      if (!this.myPager) {
        return false
      }
      if (!(this.SearchPageNumber > 0)) {
        return false
      }
      if (!(this.SearchPageSize > 0)) {
        return false
      }
      return true
    },
    //--------------------------------------------
    SearchPageNumber() {
      if (this.pagerValueType == "shortName") {
        return _.get(this.myPager, "pn")
      }
      return _.get(this.myPager, "pageNumber")
    },
    //--------------------------------------------
    SearchPageSize() {
      if (this.pagerValueType == "shortName") {
        return _.get(this.myPager, "pgsz")
      }
      return _.get(this.myPager, "pageSize")
    },
    //------------------------------------------------
    SearchInput() {
      // Guard
      if (Ti.S.isBlank(this.tsPath)) {
        return
      }

      // Eval the filter
      let filter = _.cloneDeep(this.myFilter)
      let fixedMatch = _.cloneDeep(this.fixedMatch)
      return JSON.stringify(_.assign({}, filter, fixedMatch))
    },
    //------------------------------------------------
    SearchCommand() {
      // Guard
      if (Ti.S.isBlank(this.tsPath)) {
        return
      }

      // Command
      let cmds = [`thing ${this.tsPath} query -cqn`]

      // Eval Pager
      if (this.isPagerEnabled) {
        let limit = this.SearchPageSize * 1
        let skip = this.SearchPageSize * (this.SearchPageNumber - 1)
        cmds.push(`-pager -limit ${limit} -skip ${skip}`)
      }

      // Sorter
      if (!_.isEmpty(this.mySorter)) {
        cmds.push(`-sort '${JSON.stringify(this.mySorter)}'`)
      }

      // Show Thing Keys
      if (this.objKeys) {
        cmds.push(`-e '${this.objKeys}'`)
      }

      // Done
      return cmds.join(" ")
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    OnFilterChange(payload) {
      this.myFilter = payload
      this.saveToLocal()
    },
    //------------------------------------------------
    OnSorterChange(payload) {
      this.mySorter = payload
      this.saveToLocal()
    },
    //------------------------------------------------
    OnPagerChange(payload) {
      this.myPager = _.assign({}, this.myPager, payload)
      this.saveToLocal()
    },
    //------------------------------------------------
    saveToLocal() {
      if (this.localKeepAt) {
        let filter = this.myFilter
        let sorter = this.mySorter
        let pager = _.pick(this.myPager, "pn", "pgsz", "pageNumber", "pageSize")
        Ti.Storage.local.setObject(this.localKeepAt, {
          filter, sorter, pager
        })
      }
    },
    //------------------------------------------------
    restoreFromLocal() {
      if (this.localKeepAt) {
        let reo = Ti.Storage.local.getObject(this.localKeepAt) || {}
        let { filter, sorter, pager } = reo
        this.myFilter = filter
        this.mySorter = sorter
        this.myPager = _.assign({}, this.pager, pager)
      }
    },
    //------------------------------------------------
    buildLastSearch() {
      return {
        input: this.SearchInput,
        command: this.SearchCommand
      }
    },
    //------------------------------------------------
    async reloadList() {
      this.myLastSearch = this.buildLastSearch()
      let cmdText = this.SearchCommand
      let input = this.SearchInput
      //console.log("WnThSearch.reloadList", cmdText, "<FLT>", input)

      this.myLoading = true

      let reo = await Wn.Sys.exec2(cmdText, { input, as: "json" })

      // Update pager
      if (this.isPagerEnabled) {
        this.myPager = _.assign({}, this.myPager, reo.pager)
        this.myList = reo.list
      }
      // List all
      else {
        this.myList = reo
      }

      this.myLoading = false
    },
    //------------------------------------------------
    tryReloadList() {
      let lastSearch = this.buildLastSearch()
      if (!_.isEqual(lastSearch, this.myLastSearch)) {
        this.reloadList()
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    "SearchInput": "tryReloadList",
    "SearchCommand": "tryReloadList",
    "filter": {
      handler: function (newVal) {
        this.myFilter = _.cloneDeep(newVal || {})
      },
      immediate: true
    },
    "sorter": {
      handler: function (newVal) {
        this.mySorter = _.cloneDeep(newVal || {})
      },
      immediate: true
    },
    "pager": {
      handler: function (newVal) {
        this.myPager = _.cloneDeep(newVal || {})
      },
      immediate: true
    }
  },
  ////////////////////////////////////////////////////
  created() {
    this.restoreFromLocal()
  },
  ////////////////////////////////////////////////////
  mounted() {
    this.tryReloadList()
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-table-cols.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/table/ti-table-cols.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////
  data: () => ({
    //myFieldKeys: undefined,
    myFieldWidths: undefined,

    allFields: [],
    myShownFieldKeys: [],
    myFields: [],
    myTableRect: null
  }),
  ///////////////////////////////////////////////////
  computed: {
    //--------------------------------------
    TableFields() {
      if (!this.myTableRect) {
        return [];
      }
      let fields = [];
      let lastI = this.myFields.length - 1;
      for (let i = 0; i < this.myFields.length; i++) {
        let fld = this.myFields[i];
        //..................................
        if (_.isBoolean(fld.visible) && !fld.visible) {
          continue;
        }
        if (_.isBoolean(fld.hidden) && fld.hidden) {
          continue;
        }
        //..................................
        let display = this.evalFieldDisplay(fld.display, fld.name);
        //..................................
        let fldWidth = _.nth(this.myFieldWidths, i);
        fldWidth = Ti.Util.fallbackNil(fldWidth, fld.width, "stretch");
        //..................................
        if (_.isString(fldWidth)) {
          // Percent
          if (/^\d+(\.\d+)?%$/.test(fldWidth)) {
            fldWidth = fldWidth.substring(0, fldWidth.length - 1) / 100;
          }
          // Auto or stretch
          else if (!/^(auto|stretch)$/.test(fldWidth)) {
            fldWidth = "stretch";
          }
        }
        // Must be number
        else if (!_.isNumber(fldWidth)) {
          fldWidth = "stretch";
        }
        //..................................
        let cell = {
          index: i,
          isFirst: 0 == i,
          isLast: lastI == i,
          title: fld.title,
          nowrap: fld.nowrap,
          width: fldWidth,
          className: fld.className,
          //.....................
          name: fld.name,
          display,
          //.....................
          type: fld.type,
          comType: fld.comType,
          comConf: fld.comConf,
          transformer: fld.transformer,
          serializer: fld.serializer
        };
        //..................................
        cell.headStyle = this.getHeadCellStyle(cell);
        //..................................
        fields.push(cell);
        //..................................
      }
      return fields;
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnResize() {
      if (_.isElement(this.$el)) {
        this.myTableRect = Ti.Rects.createBy(this.$el);
      }
    },
    //--------------------------------------
    getHeadCellStyle(fld) {
      if (
        fld &&
        !Ti.Util.isNil(fld.width) &&
        this.myTableRect &&
        this.myTableRect.width > 0
      ) {
        // Copy width
        let width = fld.width;

        // Number
        if (_.isNumber(width)) {
          // -100: it will conver to percent
          if (width < 0) {
            let per = Math.abs(width / this.myTableRect.width);
            width = Math.round(per * 100) + "%";
          }
          // 0-1: => Percent
          else if (width >= 0 && width < 1) {
            width = Math.round(width * 100) + "%";
          }
          // 100: => pixcel
          else {
            width = `${width}px`;
          }
        }

        return { width };
      }
    },
    //--------------------------------------
    async OnCustomizeFields() {
      // Found all avaliable fields
      let cans = _.map(this.allFields, ({ title, key }) => {
        return { text: title, value: key };
      });
      let vals = _.map(this.myFields, (fld) => fld.key);

      // Show the dialog
      let reo = await Ti.App.Open({
        title: "i18n:choose-fields",
        width: "6.4rem",
        height: "90%",
        position: "top",
        actions: [
          {
            text: "i18n:ok",
            handler: ({ result }) => result
          },
          {
            icon: "fas-history",
            text: "i18n:reset",
            handler: () => []
          },
          {
            text: "i18n:cancel"
          }
        ],
        result: vals,
        comType: "TiTransfer",
        comConf: {
          options: cans
        },
        components: ["@com:ti/transfer"]
      });

      // User cancel
      if (!reo) {
        return;
      }

      // Store to local
      if (this.keepCustomizedTo) {
        //this.myFieldKeys = reo
        let cuo = Ti.Storage.local.getObject(this.keepCustomizedTo);
        cuo.shownFieldKeys = reo;
        // Clear to reset width at same time
        if (_.isEmpty(reo)) {
          cuo.setFieldsWidth = [];
        }
        Ti.Storage.local.setObject(this.keepCustomizedTo, cuo);
      }

      // Update the new field key
      this.updateMyFieldsByKey(reo);
      if (_.isEmpty(reo)) {
        this.myFieldWidths = [];
      }

      await this.evalListData();
      await this.evalTableRows();
    },
    //--------------------------------------
    OnDblClickColumnResizer(index) {
      // Make sure get the table ract
      this.OnResize();
      // Get Each column width
      let colWidths = this.getTableColumnWidths();
      // 得到列最大宽度
      let left = 10;
      let $cells = Ti.Dom.findAll(
        `:scope > tbody > tr.table-row > td.table-cell:nth-child(${
          index + 1
        }) > .cell-wrapper`,
        this.$refs.table
      );
      _.forEach($cells, ($cell) => {
        left = Math.max(left, $cell.scrollWidth);
      });
      // 更新
      this.updateColumnWidth({
        index,
        colWidths,
        left
      });
    },
    //--------------------------------------
    OnColumnResizeBegin(index) {
      // Make sure get the table ract
      this.OnResize();
      // Get Each column width
      let vm = this;
      let $doc = this.$el.ownerDocument;
      let colWidths = this.getTableColumnWidths();
      let TW = _.sum(colWidths);
      //
      // Prepare the dragging context
      //
      let DRG = {
        // Sum the column width
        viewWidth: TW,
        // Get a virtual rect (remove the scrollbar width)
        // so it should be TableRect + SUM(columnsWith)
        vRect: Ti.Rects.create(
          _.assign(
            {},
            this.myTableRect,
            {
              width: TW
            },
            "tlwh"
          )
        ),
        // Get the current column left
        left: _.sum(colWidths.slice(0, index + 1))
      };
      //
      // evel the indic-bar rect
      //
      let R = 1.5;
      DRG.moveLeft = DRG.left + DRG.vRect.left;
      DRG.indicBarRect = Ti.Rects.create({
        top: DRG.vRect.top,
        left: DRG.moveLeft - R,
        width: R * 2,
        height: DRG.vRect.height
      });
      //
      // Create indicBar
      //
      DRG.$indic = Ti.Dom.createElement({
        $p: $doc.body,
        tagName: "DIV",
        className: "ti-table-resizing-indicbar",
        style: {
          zIndex: 99999999,
          ...DRG.indicBarRect.toCss()
        }
      });
      //
      // Update indicBar
      //
      DRG.updateIndicBar = function () {
        let mvL = this.moveLeft - R;
        Ti.Dom.setStyleValue(this.$indic, "left", mvL);
      };
      //
      // Mouse move
      //
      const OnBodyMouseMove = function ({ clientX }) {
        let { left, right } = DRG.vRect;
        DRG.moveLeft = _.clamp(clientX, left, right);
        DRG.updateIndicBar();
      };
      //
      // Rlease
      //
      const DeposAll = function () {
        $doc.removeEventListener("mousemove", OnBodyMouseMove, true);
        $doc.removeEventListener("mouseup", DeposAll, true);
        Ti.Dom.remove(DRG.$indic);
        // Is need to update fields width?
        let rL0 = Math.round(DRG.left);
        let rL1 = Math.round(DRG.moveLeft - DRG.vRect.left);
        if (Math.abs(rL0 - rL1) > R) {
          vm.updateColumnWidth({
            index,
            colWidths,
            left: rL1
          });
        }
      };
      //
      // Bind events
      //
      $doc.addEventListener("mousemove", OnBodyMouseMove, true);
      $doc.addEventListener("mouseup", DeposAll, true);
    },
    //--------------------------------------
    updateColumnWidth({ index, colWidths, left }) {
      let TW = _.sum(colWidths);
      // Get the ajacent columns
      let ajColsWs = colWidths.slice(index, index + 2);
      let ajLeft = _.sum(colWidths.slice(0, index));
      let ajSumW = _.sum(ajColsWs);
      // Aj-Columns with after resize
      let ajColsW2 = [];
      ajColsW2[0] = _.clamp(left - ajLeft, 0, ajSumW);
      ajColsW2[1] = ajSumW - ajColsW2[0];

      // Merge together
      let colWs = _.concat(colWidths);
      colWs[index] = ajColsW2[0];
      colWs[index + 1] = ajColsW2[1];

      // Eval each coumns percent
      let sumW = _.sum(colWs);
      let colPs = _.map(colWs, (w) => w / sumW);
      // this.LOG({
      //   index,
      //   before: ajColsWs.join(", "),
      //   after: ajColsW2.join(", "),
      //   ps: colPs.join(", "),
      //   psum: _.sum(colPs)
      // })
      this.myFieldWidths = _.map(colPs, (p) => Ti.S.toPercent(p));
      // Persistance
      if (this.keepCustomizedTo) {
        let cuo = Ti.Storage.local.getObject(this.keepCustomizedTo);
        cuo.setFieldsWidth = this.myFieldWidths;
        Ti.Storage.local.setObject(this.keepCustomizedTo, cuo);
      }
    },
    //--------------------------------------
    getTableColumnWidths() {
      let $ths = Ti.Dom.findAll("thead th", this.$refs.table);
      let colWidths = [];
      for (let $th of $ths) {
        let w = $th.getBoundingClientRect().width;
        colWidths.push(w);
      }
      return colWidths;
    },
    //--------------------------------------
    scrollCurrentIntoView() {
      //console.log("scroll");
      this.LOG("scrollCurrentIntoView", this.myLastIndex, this.theCurrentId);
      if (this.autoScrollIntoView && this.theCurrentId) {
        let $view = this.$el;
        let $row = Ti.Dom.find(
          `.table-row[row-id="${this.theCurrentId}"]`,
          $view
        );
        this.LOG("find row", $row);
        Ti.Dom.scrollIntoView($view, $row, {
          to: "center",
          axis: "y"
        });
      }
    },
    //--------------------------------------
    updateMyFieldsByKey(keys = []) {
      let list;
      // Empty to all fields
      if (_.isEmpty(keys)) {
        list = [];
        _.forEach(this.allFields, (fld) => {
          if (!fld.candidate) {
            list.push(_.cloneDeep(fld));
          }
        });
      }
      // Pick fields
      else {
        // Make Map by all fields
        let fldMap = {};
        for (let fld of this.allFields) {
          fldMap[fld.key] = fld;
        }
        // Load the field
        list = _.map(keys, (k) => _.cloneDeep(fldMap[k]));
      }
      // Merge first column display
      if (list.length > 0 && this.headDisplay) {
        list[0].display = _.concat(this.headDisplay, list[0].display);
      }
      // Up to data
      this.myFields = _.without(list, undefined, null);
    },
    //--------------------------------------
    setupAllFields(fields = []) {
      let list = [];
      _.forEach(fields, (fld, i) => {
        let f2 = _.cloneDeep(fld);
        f2.key = f2.key || `C${i}`;
        list.push(f2);
      });
      this.allFields = list;
    },
    //--------------------------------------
    restoreLocalSettings() {
      if (this.keepCustomizedTo) {
        let cuo = Ti.Storage.local.getObject(this.keepCustomizedTo) || {};
        this.myShownFieldKeys = cuo.shownFieldKeys;
        this.myFieldWidths = cuo.setFieldsWidth;
      }
    },
    //--------------------------------------
    evalFields() {
      this.restoreLocalSettings();
      this.setupAllFields(this.fields);
      this.updateMyFieldsByKey(this.myShownFieldKeys);
    },
    //--------------------------------------
    async tryEvalFields(newVal, oldVal) {
      if (!_.isEqual(newVal, oldVal)) {
        this.evalFields();
        await this.evalListData();
        this.evalRenderScope();
        await this.__eval_row_after_data();
      }
    }
    //--------------------------------------
  }
  ///////////////////////////////////////////////////F
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-obj-organization.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/organization/wn-obj-organization.mjs'] = (function(){
/////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////
  props: {
    // icon string
    "value": {
      type: [Object, String],
      default: null
    },
    // actions config dict name
    "actionDict": {
      type: String
    },
    // Customzied tree fields
    "treeFields": {
      type: Array
    },
    // Customized form fields
    "formFields": {
      type: Array
    },
    "keepCustomizedTo": {
      type: String,
      default: undefined
    },
    "rowNumberBase": {
      type: Number,
      default: undefined
    },
    "defaultOpenDepth": {
      type: Number,
      default: 3
    },
  },
  ///////////////////////////////////////////////////
  computed: {
    //-----------------------------------------------
    NewNodeData() {
      return {
        name: Ti.I18n.get("wn-org-new-node"),
        type: "G",
        icon: "fas-user-friends"
      }
    },
    //-----------------------------------------------
    NodeLeafBy() {
      return function (node) {
        return "G" != node.type
      }
    },
    //-----------------------------------------------
    TreeConf() {
      let re = {
        keepCustomizedTo: this.keepCustomizedTo,
        rowNumberBase: this.rowNumberBase,
        defaultOpenDepth: this.defaultOpenDepth,
        multi:true,
        checkable: true,
        display: [
          "<icon>",
          "name::flex-auto is-nowrap",
          "id::is-nowrap as-tip-block align-right"
        ]
      }
      if (this.actionDict) {
        re.fields = [
          {
            title: "i18n:role-behaviors",
            display: {
              key: "roleActions",
              comType: "TiLabel",
              comConf: {
                className: "is-nowrap",
                dict: "SysActions"
              }
            }
          },
          {
            title: "i18n:role-in-charge",
            display: {
              "key": "inCharge",
              "transformer": {
                "name": "Ti.Types.toBoolStr",
                "args": [
                  "否",
                  "是"
                ]
              }
            }
          }
        ]
      }
      if (!_.isEmpty(this.treeFields)) {
        if (!_.isArray(re.fields)) {
          re.fields = []
        }
        for (let i = 0; i < this.treeFields.length; i++) {
          re.fields.push(this.treeFields[i])
        }
      }
      if (!_.isEmpty(re.fields)) {
        re.border = "cell";
        re.columnResizable = true
      }
      return re;
    },
    //-----------------------------------------------
    NodeForm() {
      let fields = [
        {
          title: "ID",
          name: "id",
          comConf: {
            editable: true,
            valueCase: "upper"
          }
        },
        {
          title: "i18n:type",
          name: "type",
          comType: "TiSwitcher",
          comConf: {
            options: "#OrgNodeTypes",
            allowEmpty: false
          }
        },
        {
          title: "i18n:icon",
          name: "icon",
          comType: "TiInputIcon",
          comConf: {
            options: this.OrgOptionIcons
          }
        },
        {
          title: "i18n:name",
          name: "name",
          comType: "TiInput"
        },
        {
          title: "i18n:role-in-charge",
          name: "inCharge",
          type: "Boolean",
          visible: {
            "type": "P"
          },
          comType: "TiToggle"
        }
      ]
      // Actions
      if (this.actionDict) {
        fields.push({
          title: "i18n:role-behaviors",
          name: "roleActions",
          type: "Array",
          comType: "ti-droplist",
          comConf: {
            options: `#${this.actionDict}`,
            multi: true,
            placeholder: "i18n:role-behaviors",
            prefixIcon: "zmdi-minus",
            dropComConf: {
              rowAsGroupTitle: {
                "value": "[BLANK]"
              },
              rowGroupTitleDisplay: [
                "<icon>",
                "title"
              ],
              display: [
                "<icon>",
                "text::is-nowrap",
                "value::as-tip-block align-right"
              ]
            }
          }
        })
      }
      if (!_.isEmpty(this.formFields)) {
        for (let i = 0; i < this.formFields.length; i++) {
          fields.push(this.formFields[i])
        }
      }

      // Others fields
      fields.push({
        title: "i18n:note",
        name: "note",
        comType: "TiInputText",
        comConf: {
          height: "6em"
        }
      })
      // Then return form config
      return {
        fields
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods: {
    //-----------------------------------------------
    //-----------------------------------------------
  }
  ///////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-tile-order.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/tile/order/web-tile-order.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  props : {
    "value" : {
      type : Object,
      default : ()=>({})
    },
    "proThumbSrc": {
      type : String,
      default : undefined
    },
    "proHref": {
      type : String,
      default : undefined
    },
    "href": {
      type : String,
      default : undefined
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass(
        `is-${this.OrderStatus}`
      )
    },
    //--------------------------------------
    Order() {
      return this.value || {}
    },
    //--------------------------------------
    OrderId() {
      let orId = this.Order.id;
      if(orId) {
        let pos = orId.indexOf(':')
        if(pos > 0) {
          return _.trim(orId.substring(pos+1))
        }
        return orId
      }
      return '- unknown -'
    },
    //--------------------------------------
    OrderStatus() {
      return `or-st-${_.toLower(this.Order.or_st)}`
    },
    //--------------------------------------
    OrderHref() {
      if(this.href) {
        return Ti.S.renderBy(this.href, this.Order)
      }
    },
    //--------------------------------------
    CurrencyChar() {
      return Ti.Bank.getCurrencyChar(this.Order.currency||"RMB")
    },
    //--------------------------------------
    Products() {
      let list = []
      _.forEach(this.value.products, it=>{
        let pro = {...it}
        if(this.proThumbSrc) {
          pro.src = Ti.S.renderBy(this.proThumbSrc, it)
        }
        if(this.proHref) {
          pro.href = Ti.S.renderBy(this.proHref, it)
        }
        pro.subtotal = Ti.Num.precise(it.price * it.amount)
        list.push(pro)
      })
      return list
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickOrder() {
      if(this.Order.id)
        this.$notify("show:order", this.Order.id)
    },
    //--------------------------------------
    OnClickProduct({id}) {
      if(id) {
        this.$notify("open:product", id);
      }
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-pay-choose-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/pay/choose/web-pay-choose-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  "options" : {
    type : Array,
    default : ()=>[{
        "icon":"/gu/rs/ti/icons/png/wxpay256.png",  
        "value":"wx.qrcode",
        "text":"i18n:pay-wx"
      }, {
        "icon":"/gu/rs/ti/icons/png/alipay256.png",
        "value":"zfb.qrcode",
        "text":"i18n:pay-zfb"
      }]
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'm-thing-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/thing/m-thing-actions.mjs'] = (function(){
const _M = {
  //--------------------------------------------
  /***
   * Save current thing detail
   */
  async saveCurrent({ commit, dispatch }) {
    commit("setStatus", { saving: true })
    await dispatch("current/save")
    commit("setStatus", { saving: false })
    commit("syncStatusChanged")
  },
  //--------------------------------------------
  /***
   * Update current thing meta data to search/meta
   */
  async updateCurrent({ state, commit, dispatch, getters }, { name, value } = {}) {
    // console.log("updateCurrent", {name, value})
    // if(window.lastMS && (Date.now() - window.lastMS) < 5000) {
    //   console.log("!!!! dup-call", {name, value})
    // }
    // window.lastMS = Date.now()
    if (getters.hasCurrent) {
      await dispatch("current/updateMeta", { name, value })
      commit("search/updateItem", state.current.meta)
    }
  },
  //--------------------------------------------
  async updateCurrentMetas({ state, commit, dispatch, getters }, data = {}) {
    if (getters.hasCurrent) {
      //console.log({name, value})
      await dispatch("current/updateMetas", data)
      commit("search/updateItem", state.current.meta)
    }
  },
  //--------------------------------------------
  async batchUpdateMetas({ state, commit, getters }, updates = {}) {
    let checkedItems = getters["search/checkedItems"]
    // Guard
    if (_.isEmpty(checkedItems) || _.isEmpty(updates)) {
      return
    }

    // Mark loading
    commit("setStatus", { reloading: true })

    // Gen commands
    let currentId = _.get(state.current, "meta.id")
    let input = JSON.stringify(updates)
    let tsId = state.meta.id
    for (let it of checkedItems) {
      let cmdText = `thing ${tsId} update ${it.id} -fields -cqn`
      let newIt = await Wn.Sys.exec2(cmdText, { as: "json", input })
      commit("search/updateItem", newIt)
      if (newIt.id == currentId) {
        commit("current/setMeta", newIt)
      }
    }

    // Mark loading
    commit("setStatus", { reloading: false })
  },
  //--------------------------------------------
  setCurrentMeta({ state, commit }, meta) {
    //console.log(" -> setCurrentMeta", meta)
    commit("current/setThingSetId", state.meta.id)
    commit("current/setMeta", meta)
    commit("syncStatusChanged")
    commit("search/updateItem", state.current.meta)
  },
  //--------------------------------------------
  setCurrentContent({ state, commit, dispatch }, content) {
    commit("current/setThingSetId", state.meta.id)
    dispatch("current/onChanged", content)
    commit("syncStatusChanged")
    commit("search/updateItem", state.current.meta)
  },
  //--------------------------------------------
  async openCurrentPrivilege({ state, dispatch }) {
    let meta = _.get(state.current, "meta") || state.meta

    if (!meta) {
      await Ti.Toast.Open("i18n:nil-obj")
      return
    }

    let newMeta = await Wn.EditObjPrivilege(meta)

    // Update to current list
    if (newMeta) {
      // Update ThingSet
      if (state.meta.id == newMeta.id) {
        await dispatch("reload", newMeta)
      }
      // Update Selected item
      else {
        await dispatch("setCurrentMeta", newMeta)
      }
    }

    return newMeta
  },
  //--------------------------------------------
  /***
   * Files: sync the file count and update to search/meta
   */
  async autoSyncCurrentFilesCount({ state, commit, dispatch }, { quiet = true } = {}) {
    let oTh = state.current.meta
    let dirName = state.currentDataDir
    // Guard
    if (!dirName) {
      // console.warn("thing file -ufc without 'dirName'");
      // return Ti.Toast.Open("thing file -ufc without 'dirName'")
      return
    }
    // sync current media count
    if (oTh && oTh.id && dirName) {
      commit("setStatus", { reloading: true })

      // run command
      let th_set = oTh.th_set
      let cmdText = `thing ${th_set} file ${oTh.id} -dir '${dirName}' -ufc -cqn`
      let oNew = await Wn.Sys.exec2(cmdText, { as: "json" })
      // Set current meta
      dispatch("setCurrentMeta", oNew)

      commit("setStatus", { reloading: false })

      if (!quiet) {
        await Ti.Toast.Open('i18n:wn-th-recount-media-done', {
          vars: { n: oNew.th_media_nb || 0 }
        })
      }
    }
  },
  //--------------------------------------------
  /***
   * Toggle enter/outer RecycleBin
   */
  async toggleInRecycleBin({ state, commit, dispatch, getters }) {
    //console.log("thing-manager-toggleInRecycleBin")
    // Update Search
    let inRecycleBin = !getters.isInRecycleBin
    commit("search/setInRecycleBin", inRecycleBin)

    // Update status
    commit("setStatus", { inRecycleBin, reloading: true })
    // Reload List
    await dispatch("search/reload")

    commit("setStatus", { reloading: false })
  },
  //--------------------------------------------
  /***
   * Create one new thing
   */
  async create({ state, commit, dispatch }, obj = {}) {
    // Special setting for create
    let beCreate = _.get(state.config, "schema.behavior.create") || {}
    let { unique, after, fixed } = beCreate

    // Prepare the command
    let json = JSON.stringify(obj)
    let th_set = state.meta.id
    let cmds = [`thing ${th_set} create -cqn -fields`]

    // Join `-unique`
    if (!_.isEmpty(unique) && _.isString(unique)) {
      cmds.push(` -unique '${unique}'`)
    }

    // Join `-fixed`
    if (!_.isEmpty(fixed) && _.isString(unique)) {
      cmds.push(` -fixed '${JSON.stringify(fixed)}'`)
    }

    // Join `-after`
    if (!_.isEmpty(after) && _.isString(after)) {
      cmds.push(` -after '${after}'`)
    }

    // Mark reloading
    commit("setStatus", { reloading: true })

    // Do Create
    let cmdText = cmds.join(" ")
    let newMeta = await Wn.Sys.exec2(cmdText, { input: json, as: "json" })

    if (newMeta && !(newMeta instanceof Error)) {
      // Append To Search List as the first 
      commit("search/prependToList", newMeta)

      // Set it as current
      await dispatch("setCurrentThing", { meta: newMeta })
    }

    // Mark reloading
    commit("setStatus", { reloading: false })

    // Return the new object
    return newMeta
  },
  //--------------------------------------------
  /***
   * Search: Remove Checked Items
   */
  async removeChecked({ state, commit, dispatch, getters }, hard = false) {
    let ids = _.cloneDeep(state.search.checkedIds)
    if (_.isEmpty(ids)) {
      return await Ti.Alert('i18n:del-none')
    }

    // Config is hard
    let beh = _.get(state, "config.schema.behavior") || {}
    hard |= beh.hardRemove

    // If hard, warn at first
    if (hard || state.status.inRecycleBin) {
      if (!(await Ti.Confirm('i18n:del-hard'))) {
        return
      }
    }

    commit("setStatus", { deleting: true })

    // Prepare the ids which fail to remove
    let failIds = {}

    // Prepare the cmds
    let th_set = state.meta.id
    let cmdText = `thing ${th_set} delete ${hard ? "-hard" : ""} -cqn -l ${ids.join(" ")}`
    let reo = await Wn.Sys.exec2(cmdText, {
      as: "json",
      errorAs: ({ data }) => {
        let id = _.trim(data)
        failIds[id] = true
      }
    })

    // Get the removeIds
    let removeIds = _.filter(ids, id => !failIds[id])
    //console.log("removeIds:", removeIds)

    // Remove it from search list
    if (!_.isEmpty(removeIds)) {
      commit("search/removeItems", removeIds)
    }
    let current = getters["search/currentItem"]
    //console.log("getback current", current)
    // Update current
    await dispatch("setCurrentThing", { meta: current })

    commit("setStatus", { deleting: false })
  },
  //--------------------------------------------
  /***
   * RecycleBin: restore
   */
  async restoreRecycleBin({ state, commit, dispatch, getters }) {
    // Require user to select some things at first
    let ids = state.search.checkedIds
    if (_.isEmpty(ids)) {
      return await Ti.Alert('i18n:thing-restore-none')
    }
    commit("setStatus", { restoring: true })

    // Run command
    let th_set = state.meta.id
    let cmdText = `thing ${th_set} restore -quiet -cqn -l ${ids.join(" ")}`
    let reo = await Wn.Sys.exec2(cmdText, { as: "json" })

    // Reload
    await dispatch("search/reload")

    // Get back current
    let current = getters["search/currentItem"]

    // Update current
    await dispatch("current/reload", current)

    commit("setStatus", { restoring: false })
  },
  //--------------------------------------------
  /***
   * RecycleBin: clean
   */
  async cleanRecycleBin({ state, commit, dispatch }) {
    commit("setStatus", { cleaning: true })

    // Run command
    let th_set = state.meta.id
    let cmdText = `thing ${th_set} clean -limit 3000`
    await Wn.Sys.exec2(cmdText)

    commit("setStatus", { cleaning: false })

    await dispatch("reload")
  },
  //--------------------------------------------
  // User Interactivity
  //--------------------------------------------
  /***
   * Open meta editor, if has current, use it
   */
  async openMetaEditor({ state, getters, dispatch }) {
    // Guard
    if (!state.meta) {
      return await Ti.Toast.Open("i18n:empty-data", "warn")
    }
    //.........................................
    // For current selected
    //.........................................
    if (getters.hasCurrent) {
      // Edit current meta
      let reo = await Wn.EditObjMeta(state.current.meta, {
        fields: "default", autoSave: false
      })

      // Cancel the editing
      if (_.isUndefined(reo)) {
        return
      }

      // Update the current editing
      let { updates } = reo
      if (!_.isEmpty(updates)) {
        await dispatch("updateCurrentMetas", updates)
      }
      return
    }
    //.........................................
    // For Whole thing thing
    //.........................................
    await Wn.EditObjMeta(state.meta, {
      fields: "auto", autoSave: true
    })
  },
  //--------------------------------------------
  /***
   * Open current object source editor
   */
  async openContentEditor({ state, getters, dispatch, commit }) {
    // Guard
    if (!state.meta) {
      return await Ti.Toast.Open("i18n:empty-data", "warn")
    }
    if (getters.hasCurrent) {
      // Open Editor
      let newContent = await Wn.EditObjContent(state.current.meta, {
        content: state.current.content
      })

      // Cancel the editing
      if (_.isUndefined(newContent)) {
        return
      }

      // Update the current editing
      await dispatch("current/changeContent", newContent)
      commit("syncStatusChanged")
      return
    }

    // Warn user
    return await Ti.Toast.Open("i18n:nil-obj", "warn")
  },
  //--------------------------------------------
  /***
   * Reload files
   */
  async reloadFiles({ state, commit, dispatch, getters }, { force = false } = {}) {
    //console.log("reloadFiles")
    let current = _.get(state.current, "meta")
    let thingId = _.get(current, "id")
    let dirName = state.filesName
    // No current
    if (!thingId || !dirName) {
      commit("files/reset")
    }
    // Reload the files
    else {
      let thSetId = state.meta.id
      // get the parent DIR
      let oDir = state.files.meta
      if (!oDir || !oDir.ph || !oDir.ph.endsWith(`/data/${thingId}/${dirName}`)) {
        let dataHome = `id:${thSetId}/data`
        let dirPath = `${thingId}/${dirName}`
        // Create or fetch the dir
        let newMeta = {
          race: "DIR",
          nm: dirPath
        }
        let json = JSON.stringify(newMeta)
        let cmdText = `obj "${dataHome}" -IfNoExists -new '${json}' -cqno`
        oDir = await Wn.Sys.exec2(cmdText, { as: "json" })
        if (!oDir) {
          return
        }
      } // ~ if(!oDir || !oDir.ph
      // Try to reload the children
      await dispatch("files/reload", oDir)
      // let cuId = getters["files/autoCurrentItemId"]
      // //commit("files/selectItem", cuId)
      // dispatch("selectCurrentPreviewItem", cuId)
    }
  },
  //--------------------------------------------
  /***
   * Reload search list
   */
  async reloadSearch({ state, commit, dispatch }) {
    let meta = state.meta

    commit("setStatus", { reloading: true })

    await dispatch("search/reload", meta)

    // Sometimes, current object will not in the list
    // we need remove it
    if (state.current.meta) {
      // find new meta
      let currentId = state.current.meta.id
      let current = null
      for (let it of state.search.list) {
        if (it.id == currentId) {
          current = it
          break
        }
      }
      // Update the meta
      await dispatch("setCurrentThing", { meta: current })
    }

    commit("setStatus", { reloading: false })
  },
  //--------------------------------------------
  /***
   * Set Current Thing
   * 
   * It will load content if "content" is shown
   */
  async setCurrentThing({ state, commit, dispatch }, {
    meta = null,
    checkedIds = {}
  } = {}) {
    //..........................................
    // Update selected item in search list
    let curId = meta ? meta.id : null
    let ckIds;
    if (_.isArray(checkedIds)) {
      ckIds = _.cloneDeep(checkedIds)
    } else {
      ckIds = Ti.Util.truthyKeys(checkedIds)
    }
    if (!Ti.Util.isNil(curId)) {
      ckIds.push(curId)
    }
    commit("search/setCurrentId", curId)
    commit("search/setCheckedIds", ckIds)
    //..........................................
    // Update the currentDataHome
    let home = state.meta
    let oid = Wn.Io.OID(curId)
    let dataHome = curId ? `id:${home.id}/data/${oid.myId}` : null
    commit("setCurrentDataHome", dataHome)

    // Try get current dataHomeObj
    let dataHomeObj = await Wn.Io.loadMeta(dataHome)
    commit("setCurrentDataHomeObj", dataHomeObj)

    //..........................................
    // Keep last
    let lastKey = `${home.id}:currentId`
    if (!_.get(state.config.schema, "keepLastOff")) {
      Ti.Storage.session.set(lastKey, curId);
    }
    // Clean local storage
    else {
      Ti.Storage.session.remove(lastKey);
    }
    //..........................................
    // Reload Current
    commit("current/setThingSetId", state.meta.id)
    let currentMeta = _.cloneDeep(meta)
    // Reload if show content
    if (_.get(state.config, "shown.content")) {
      await dispatch("current/reload", currentMeta)
    }
    // Just update the meta
    else {
      commit("current/setMeta", currentMeta)
    }
    //..........................................
  },
  //--------------------------------------------
  /***
   * Do Change Block Shown:
   * 
   * If show content/files, it may check if need to be reload data
   */
  async doChangeShown({ state, commit, dispatch }, shown) {
    let oldShownContent = _.get(state, "config.shown.content") || false
    // Just mark the shown
    dispatch("config/updateShown", shown)

    // If show changed, and content is true
    if (!oldShownContent && shown.content) {
      //console.log("reload current content")
      await dispatch("current/reload")
      commit("syncStatusChanged")
    }
  },
  //--------------------------------------------
  /***
   * Reload All
   */
  async reload({ state, commit, dispatch, getters, rootState }, meta) {
    //console.log("thing-manager.reload", state)
    // Reload meta
    if (_.isString(meta)) {
      meta = await Wn.Io.loadMeta(meta)
    }

    // Relod setting from thing view
    let thAutoSelect = Ti.Util.fallbackNil(state.autoSelect, false)
    if (meta) {
      if ("FILE" == meta.race) {
        let view = await Wn.Io.loadContent(meta, { as: "json" })
        let { path, schema, autoSelect } = view
        meta = await Wn.Io.loadMeta(path)
        if (schema) {
          commit("mergeFixedSchema", schema)
        }
        if (!Ti.Util.isNil(autoSelect)) {
          thAutoSelect = Ti.Types.toBoolean(autoSelect)
        }
      }
      // Update auto-select by meta
      if (!Ti.Util.isNil(meta.th_auto_select)) {
        thAutoSelect = Ti.Types.toBoolean(meta.th_auto_select)
      }
    }

    // commit auto-select to state
    commit("setAutoSelect", thAutoSelect)

    // Update New Meta
    if (meta) {
      commit("setMeta", meta)
    }
    // Get meta back
    else {
      meta = state.meta
    }
    // meta is home
    let home = meta

    // Update current module thingSetId
    commit("current/setThingSetId", state.meta.id)

    // Mark reloading
    commit("setStatus", { reloading: true })

    // Reload Config
    //console.log("reload config")
    await dispatch("config/reload", meta)
    commit("config/mergeSchema", state.fixedSchema)

    // Update the default filesDirName
    let localDirNameKey = `${meta.id}_dirname`
    let dirName = Ti.Storage.session.getString(localDirNameKey)
    if (!dirName) {
      dirName = _.get(state.config, "schema.behavior.filesDirName") || null
    }
    commit("setCurrentDataDir", dirName)

    // Load local status
    let local = Ti.Storage.session.getObject(meta.id) || {}
    _.defaults(local, {
      filter: {},
      sorter: {},
      pager: {}
    })

    // Customized behavior
    let behavior = _.get(state.config.schema, "behavior") || {}
    behavior = Ti.Util.explainObj({
      root: rootState,
      state,
      meta
    }, behavior)

    // Setup default filter and sorter
    let filter = _.assign({}, behavior.filter, local.filter, {
      majorKey: _.get(behavior, "filter.majorKey")
    })
    if (!_.get(behavior.filter, "majorKey")) {
      delete filter.majorKey;
    }

    // Update filter and sorter from page#Anchor
    let loc = Ti.Util.parseHref(window.location.href)
    let afo = Ti.Util.parseAnchorFilter(loc.anchor)
    if (afo) {
      filter = filter || {}
      filter.keyword = afo.keyword || filter.keyword
      filter.match = afo.match || filter.match

      if (!_.isEmpty(afo.sort)) {
        local.sorter = afo.sort
      }
    }

    //
    if (!_.isEmpty(filter)) {
      commit("search/setFilter", filter)
    }
    // Fixed match
    commit("search/setFixedMatch", behavior.match)
    commit("search/setMajorKey", behavior.majorKey)
    commit("search/setDefaultKey", behavior.defaultKey)
    commit("search/setKeyword", behavior.keyword)


    // Sorter
    if (!_.isEmpty(local.sorter)) {
      commit("search/setSorter", local.sorter)
    }
    else if (!_.isEmpty(behavior.sorter)) {
      commit("search/setSorter", behavior.sorter)
    }

    // Pager
    if (behavior.pager) {
      commit("search/updatePager", behavior.pager)
    }

    // Show keys to filter obj output
    commit("search/setShowKeys", behavior.showKeys)

    // If pager is enabled, try load from local
    //console.log("root Getters", getters) 
    if (getters["search/isPagerEnabled"]) {
      if (!_.isEmpty(local.pager)) {
        commit("search/setPager", local.pager)
      }
    }

    // Reload Search
    //console.log("reload search")
    await dispatch("reloadSearch")

    // Auto Select the first item
    if (state.autoSelect) {
      if (!state.current.meta && !_.isEmpty(state.search.list)) {
        // Get last
        let lastKey = `${home.id}:currentId`
        let curId = Ti.Storage.session.getString(lastKey);
        let current;

        // Find by id
        if (curId)
          current = _.find(state.search.list, li => li.id == curId)

        // use the first one
        if (!current)
          current = _.first(state.search.list)

        // Highlight it
        await dispatch("setCurrentThing", {
          meta: current,
          force: false
        })
      }
    }

    // All done
    commit("setStatus", { reloading: false })
  }
  //--------------------------------------------
}
return _M;
;
})()
// ============================================================
// EXPORT 'hm-automatch.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/hm/automatch/hm-automatch.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  props: {
    //------------------------------------------------
    // Data
    //------------------------------------------------
    "value": undefined,
    //------------------------------------------------
    // Aspect
    //------------------------------------------------
    "keyDisplayBy": {
      type: [Object, Array]
    },
    "blankAs": {
      type: Object,
      default: () => ({
        className: "as-mid-tip align-center",
        text: "i18n:hm-am-empty",
        icon: "zmdi-lamp"
      })
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-empty": this.isEmpty,
        "no-empty": !this.isEmpty
      })
    },
    //------------------------------------------------
    TheValue() {
      if (Ti.Util.isNil(this.value)) {
        return []
      }
      return _.concat(this.value)
    },
    //------------------------------------------------
    isEmpty() {
      return _.isEmpty(this.TheValue)
    },
    //------------------------------------------------
    DisplayItems() {
      let list = []
      let lastI = this.TheValue.length - 1
      _.forEach(this.TheValue, (li, index) => {
        let am = Ti.AutoMatch.parse(li)
        let atFirst = 0 == index;
        let atLast = lastI == index;
        list.push({
          index,
          value: li,
          atFirst,
          atLast,
          className: {
            "at-first": atFirst,
            "at-last": atLast
          },
          matcher: am,
          text: am.explainText({
            keyDisplayBy: this.keyDisplayBy
          })
        })
      })
      return list
    },
    //------------------------------------------------
    ActionSetup() {
      return [
        {
          text: "i18n:hm-am-add",
          icon: "zmdi-plus",
          className: "min-width-8",
          handler: () => {
            this.OnAddNewItem()
          }
        },
        {
          icon: "zmdi-code",
          className: "is-chip",
          handler: () => {
            this.OnViewSourceCode()
          }
        }
      ]
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    OnAddNewItem() {
      let list = _.cloneDeep(this.TheValue)
      list.push({})
      this.tryNotifyChange(list)
    },
    //------------------------------------------------
    async OnViewSourceCode() {
      let json = JSON.stringify(this.TheValue, null, '   ')
      let re = await Ti.App.Open({
        title: "i18n:edit",
        position: "top",
        width: "6.4rem",
        height: "90%",
        result: json,
        mainStyle: {
          padding: "2px"
        },
        comType: "TiInputText",
        comConf: {
          height: "100%"
        }
      })

      // User Cancel
      if (_.isUndefined(re)) {
        return
      }

      // Parse JSON
      let data = JSON.parse(_.trim(re) || "null")
      this.tryNotifyChange(data)
    },
    //------------------------------------------------
    async OnClickItem({ index, value }) {
      let re = await Ti.App.Open({
        title: "i18n:edit",
        position: "top",
        width: "6.4rem",
        height: "90%",
        result: value,
        mainStyle: {
          padding: "2px"
        },
        comType: "TiInputPair",
        comConf: {
          "nameWidth": "2.45rem",
          "valueComType": "TiInputDval",
          "valueComConf": {
            "hideBorder": true,
            "autoJsValue": true,
            "autoSelect": true
          }
        },
        components: [
          "@com:ti/input/dval"
        ]
      })

      // User Cancel
      if (!re) {
        return
      }

      // Update current item
      let list = _.cloneDeep(this.TheValue)
      list[index] = re
      this.tryNotifyChange(list)
    },
    //------------------------------------------------
    OnRemoveItem({ index }) {
      let list = _.cloneDeep(this.TheValue)
      list = _.filter(list, (_, i) => i != index)
      this.tryNotifyChange(list)
    },
    //------------------------------------------------
    OnMoveUp({ index }) {
      // Guard
      if (index <= 0) {
        return
      }
      let list = _.cloneDeep(this.TheValue)
      Ti.Util.moveInArray(list, index, index - 1);
      this.tryNotifyChange(list)
    },
    //------------------------------------------------
    OnMoveDown({ index }) {
      // Guard
      if (index >= (this.TheValue.length - 1)) {
        return
      }
      let list = _.cloneDeep(this.TheValue)
      Ti.Util.moveInArray(list, index, index + 1);
      this.tryNotifyChange(list)
    },
    //------------------------------------------------
    tryNotifyChange(data) {
      if (!_.isEqual(data, this.value)) {
        this.$notify("change", data)
      }
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-obj-mode.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/mode/wn-obj-mode.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //////////////////////////////////////////
  props : {
    "value" : {
      type : [Number, String, Object],
      default : 0
    },
    "valueType" : {
      type : String,
      default : "decimal",
      validator : v => /^(obj|decimal|str|octal)$/.test(v)
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    ModeObj() {
      return Wn.Obj.parseMode(this.value || 0)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnToggleItem(key) {
      let obj = _.cloneDeep(this.ModeObj)
      let val = _.get(obj, key)
      _.set(obj, key, val ? false : true)
      let md = Wn.Obj.modeFromObj(obj)

      let v = ({
        "obj" : (md)=>{
          return Wn.Obj.modeToObj(md)
        },
        "decimal" : (md)=>{
          return md
        },
        "str" : (md)=>{
          return Wn.Obj.modeToStr(md)
        },
        "octal" : (md)=>{
          return Wn.Obj.modeToOctal(md)
        }
      })[this.valueType](md)

      this.$notify("change", v)
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-tags.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/tags/ti-tags.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data: () => ({
    $sortable: undefined,
    dragging: false,
    myTags: [],
    myValues: []
  }),
  ////////////////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "value": {
      type: [Array, String],
      default: () => []
    },
    "dict": {
      type: [String, Ti.Dict],
      default: null
    },
    "keyBy": {
      type: [String, Function],
      default: "value"
    },
    "mapping": {
      type: Object,
      default: undefined
    },
    "explainMapping": {
      type: Boolean,
      default: false
    },
    "itemOptions": {
      type: Array,
      default: () => []
    },
    "placeholder": {
      type: String,
      default: "i18n:nil"
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "cancelItemBubble": {
      type: Boolean,
      default: false
    },
    "removable": {
      type: Boolean,
      default: false
    },
    "readonly": {
      type: Boolean,
      default: false
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "itemIconBy": {
      type: [String, Function],
      default: undefined
    },
    "optionDefaultIcon": {
      type: String,
      default: undefined
    },
    "itemDefaultIcon": {
      type: String,
      default: undefined
    },
    "removeIcon": {
      type: String,
      default: "zmdi-close"
    },
    "statusIcons": {
      type: Object,
      default: () => ({
        collapse: "zmdi-chevron-down",
        extended: "zmdi-chevron-up"
      })
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass({
        "has-items": this.hasItems,
        "nil-items": !this.hasItems
      })
    },
    //------------------------------------------------
    hasItems() {
      return !_.isEmpty(this.myTags)
    },
    //------------------------------------------------
    getTagItemKey() {
      if (_.isFunction(this.keyBy)) {
        return this.keyBy
      }
      if (_.isString(this.keyBy)) {
        return (tag, index) => {
          let val = Ti.Util.getOrPick(tag, this.keyBy)
          if (_.isObject(val)) {
            return JSON.stringify(val).replace(/\s+/g, '')
          }
          // Simple value
          if (!Ti.Util.isNil(val)) {
            return val
          }
          return `T${index}`
        }
      }
      return (tag, index) => {
        return `T${index}`
      }
    },
    //------------------------------------------------
    getTagItemIcon() {
      if (_.isFunction(this.itemIconBy)) {
        return it => this.itemIconBy(it)
      }
      if (_.isString(this.itemIconBy)) {
        return it => _.get(it, this.itemIconBy)
      }
      return it => null
    },
    //--------------------------------------
    Dict() {
      if (this.dict) {
        // Already Dict
        if (this.dict instanceof Ti.Dict) {
          return this.dict
        }
        // Get back
        let { name } = Ti.DictFactory.explainDictName(this.dict)
        return Ti.DictFactory.CheckDict(name)
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    OnItemChanged({ index, value } = {}) {
      if (index >= 0) {
        let values = this.getMyValues()
        values[index] = Ti.Util.fallback(value, null)
        this.$notify("change", values)
      }
    },
    //------------------------------------------------
    OnItemRemoved({ index } = {}) {
      if (index >= 0) {
        let values = this.getMyValues()
        _.pullAt(values, index)
        this.$notify("change", values)
      }
    },
    //------------------------------------------------
    OnItemFired({ index = -1 } = {}) {
      if (index >= 0) {
        let it = _.nth(this.theData, index)
        if (it) {
          this.$notify("item:actived", it)
        }
      }
    },
    //------------------------------------------------
    async evalMyData() {
      const tags = []
      let list;
      if (_.isArray(this.value)) {
        list = this.value
      } else if (_.isString(this.value)) {
        list = _.without(this.value.split(","), "")
      } else {
        list = []
      }
      if (!_.isEmpty(list)) {
        const lastIndex = list.length - 1
        for (let index = 0; index < list.length; index++) {
          let val = list[index]
          let tag;

          // Auto mapping plain object
          if (_.isPlainObject(val)) {
            if (this.mapping) {
              if (this.explainMapping) {
                tag = Ti.Util.explainObj(val, this.mapping)
              } else {
                tag = Ti.Util.translate(val, this.mapping)
              }
            } else {
              tag = _.cloneDeep(val)
            }
            // Customized the icon
            if (!tag.icon) {
              tag.icon = this.getTagItemIcon(val)
            }
          }
          // Lookup Dict
          else if (this.Dict) {
            let it = await this.Dict.getItem(val)
            tag = _.defaults({
              icon: this.Dict.getIcon(it),
              text: this.Dict.getText(it) || val,
              value: val
            })
          }
          // Auto gen object for simple value
          else {
            tag = { text: val, value: val }
          }

          // Complex value
          tag.key = this.getTagItemKey(tag, index)

          // Join default value
          _.defaults(tag, {
            index,
            icon: this.itemDefaultIcon,
            options: this.itemOptions,
            atLast: index == lastIndex
          })
          // Join to tags
          tags.push(tag)
        }; // _.forEach
      }
      // assign the tags
      this.myTags = tags
    },
    //------------------------------------------------
    getMyValues() {
      const vals = []
      for (let tag of this.myTags) {
        vals.push(Ti.Util.fallback(tag.value, null))
      }
      return vals
    },
    //--------------------------------------
    switchItem(fromIndex, toIndex) {
      if (fromIndex != toIndex) {
        let values = this.getMyValues()
        Ti.Util.moveInArray(values, fromIndex, toIndex)
        this.$notify("change", values)
      }
    },
    //--------------------------------------
    initSortable() {
      this.$sortable = new Sortable(this.$el, {
        animation: 300,
        filter: ".as-nil-tip",
        onStart: () => {
          this.dragging = true
        },
        onEnd: ({ oldIndex, newIndex }) => {
          this.switchItem(oldIndex, newIndex)
          _.delay(() => {
            this.dragging = false
          }, 100)
        }
      })
    },
    //------------------------------------------------
    tryInitSortable() {
      if (!this.readonly && this.removable && _.isElement(this.$el)) {
        if (!this.$sortable) {
          this.initSortable()
        }
      }
      // Destroy sortable: (com reused) 
      else {
        if (this.$sortable) {
          this.$sortable.destroy()
          this.$sortable = undefined
        }
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    "value": {
      handler: "evalMyData",
      immediate: true
    },
    "readonly": {
      handler: "tryInitSortable"
    }
  },
  ////////////////////////////////////////////////////
  mounted: function () {
    this.tryInitSortable()
  },
  ///////////////////////////////////////////////////
  beforeDestroy: function () {
    if (this.$sortable) {
      this.$sortable.destroy()
      this.$sortable = undefined
    }
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'markdown-preview.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/markdown/preview/markdown-preview.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////
  data: ()=>({
    myHtml  : null,
    myTheme : null
  }),
  ///////////////////////////////////////////////////
  props : {
    "previewMediaSrc" : {
      type : [String, Function],
      default : undefined
    },
    "value" : {
      type : String,
      default : ""
    }, 
    "placeholder" : {
      type : String,
      default : "i18n:blank"
    },
    "theme" : {
      type : String,
      default : "nice"
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    //-----------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //-----------------------------------------------
    ThemeClass() {
      if(this.myTheme) {
        return `ti-markdown-theme-${this.myTheme}`
      }
    },
    //-----------------------------------------------
    ThePreviewMediaSrc() {
      let transSrc = _.identity;
      // String mode
      if(_.isString(this.previewMediaSrc)) {
        transSrc = src => {
          return Ti.S.renderBy(this.previewMediaSrc, {src})
        }
      }
      // Function Mode
      else if(_.isFunction(this.previewMediaSrc)){
        transSrc = this.previewMediaSrc
      }

      return async src => {
        // console.log("!!!!src", src)
        // Outsite link
        if(/^(https?:)(\/\/)/.test(src))
          return src

        // translate it
        return transSrc(src)
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods : {
    //-----------------------------------------------
    async renderMarkdown() {
      if(!Ti.Util.isBlank(this.value)) {
        let MdDoc = Cheap.parseMarkdown(this.value)
        //console.log(MdDoc.toString())
        this.myHtml  = await MdDoc.toBodyInnerHtml({
          mediaSrc : this.ThePreviewMediaSrc
        })
        this.myTheme = MdDoc.getMeta("theme", this.theme)
      }
      // Show Blank
      else {
        this.myHtml = Ti.I18n.text(this.placeholder)
        this.myTheme = this.theme
      }
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "value" : {
      handler : "renderMarkdown",
      immediate : true
    }
  }
  ///////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-chart-combo.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/chart/combo/wn-chart-combo.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data: ()=>({
    /*
    [{
      name: "video-view",
      date: "2020-09-21",
      span: "7d",
      type: "pie"
    }]
    */
    myCharts : [],
    myShowChartNames : [],
    /*
    {
      $ChartName : {}
    }
    */
    myChartData : {},
    myDate : undefined,
    mySpan : undefined,
    myChartComConf : {}
  }),
  ////////////////////////////////////////////////////
  props : {
    "chartDefines" : {
      type : Object,
      default : undefined
    },
    "chartOptions" : {
      type : Object,
      default : undefined
    },
    /*
    [{name, title, agg, sum, sumOptions, types, type, chartOptions}]
    */
    "charts" : {
      type : Array,
      default : ()=>[]
    },
    "showCharts" : {
      type : [String, Array],
      default : undefined
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-multi-chart" : this.TheChartList.length > 1
      });
    },
    //------------------------------------------------
    TheShowChartNames() {
      if(_.isEmpty(this.myShowChartNames)) {
        return this.showCharts
      }
      return this.myShowChartNames
    },
    //------------------------------------------------
    TheChartNameList() {
      let list = []
      _.forEach(this.charts, ca => {
        list.push(_.pick(ca, "name", "title", "icon"))
      })
      return list
    },
    //------------------------------------------------
    TheChartMap() {
      let map = {}
      _.forEach(this.charts, ca => {
        map[ca.name] = ca
      })
      return map
    },
    //------------------------------------------------
    TheChartList() {
      let names = _.concat(this.TheShowChartNames)
      let list = []
      _.forEach(names, (caName, index) => {
        let ca = _.get(this.TheChartMap, caName)
        if(!ca)
          return

        let myChart = _.nth(this.myCharts, index) || {}
        let li = _.cloneDeep(myChart)
        let options = _.cloneDeep(this.chartOptions)
        //console.log(options)
        options = _.merge(options, ca.chartOptions)
        // Set default value
        _.defaults(li, {
          chartDefines : this.chartDefines,
          nameList : this.TheChartNameList,
          index,
          name : ca.name,
          chartTypes : ca.types,
          type : ca.type,
          chartOptions : options
        })
        // Test the type
        if(li.type && _.indexOf(li.chartTypes, li.type)<0) {
            li.type = ca.type
        }

        // Join to list
        list.push(li)
      })
      return list
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    async OnReloadChartData({index}, {force, cleanCache, done}) {
      await this.reloadChartData(index, {force, cleanCache})

      if(_.isFunction(done)) {
        done()
      }
    },
    //------------------------------------------------
    OnChangeChartName({index}, name) {
      // Update my chart setting
      this.$set(this.myShowChartNames, index, name)
      this.$set(this.myChartData, index, [])
      this.$nextTick(()=>{
        this.reloadChartData(index)
      })
    },
    //------------------------------------------------
    OnChangeChartType({index}, type) {
      // Update my chart setting
      this.setMyChart(index, {type})
    },
    //------------------------------------------------
    OnChangeChartDateSpan({index}, {date, span}) {
      // Update my chart setting
      this.setMyChart(index, {date, span})
      this.$nextTick(()=>{
        this.reloadChartData(index)
      })
    },
    //------------------------------------------------
    //
    // Utility
    //
    //------------------------------------------------
    setMyChart(index, obj) {
      let ca = _.nth(this.myCharts, index) || {}
      ca = _.assign({}, ca, obj)
      this.$set(this.myCharts, index, ca)
    },
    //------------------------------------------------
    getChartData(index) {
      //console.log("getChartData", name)
      return _.get(this.myChartData, index)
    },
    //------------------------------------------------
    //
    // Actions
    //
    //------------------------------------------------
    async reloadChartData(index, {force=false, cleanCache=false}={}) {
      let chartName = _.nth(this.TheShowChartNames, index)
      let chart = _.get(this.TheChartMap, chartName)
      if(!chart) {
        return
      }
      let {name, agg, sum, sumOptions} = chart
      let {date, span} = _.nth(this.myCharts, index) || {}

      // Prepare the command text
      let cmd = [`statistics sum '${sum}' -json -cqn`]
      // Date & span
      if(date) {
        cmd.push(`-date '${date}'`)
      }
      if(span) {
        cmd.push(`-span '${span}'`)
      }
      // Agg
      if(agg) {
        cmd.push(`-agg '${agg}'`)
        if(cleanCache) {
          cmd.push('-agg-force')
        }
      }
      // Force
      if(force){
        cmd.push("-force")
      }
      // More options
      _.forEach(sumOptions, (v, k)=>{
        let str
        if(_.isString(v) || _.isNumber(v) || _.isBoolean(v)) {
          str = v
        } else {
          str = JSON.stringify(v)
        }
        cmd.push(`-${k} '${str}'`)
      })

      // Executed command
      let cmdText = cmd.join(" ")
      //console.log("reloadChartData", cmdText)
      let reo = await Wn.Sys.exec2(cmdText, {as: "json"})
      if(reo && _.isArray(reo)) {
        this.$set(this.myChartData, index, reo)
      }
    },
    //------------------------------------------------
    preloadChartData() {
      if(!_.isEmpty(this.showCharts)) {
        for(let i=0; i<this.showCharts.length; i++) {
          this.reloadChartData(i)
        }
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    "showCharts" : {
      handler: function(newVal, oldVal) {
        this.myShowChartNames = _.cloneDeep(this.showCharts)
        if(!_.isEqual(newVal, oldVal)) {
          this.preloadChartData()
        }
      },
      immediate : true
    }
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'm-wn-obj-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/obj/m-wn-obj-actions.mjs'] = (function(){
////////////////////////////////////////////////
async function loadConfigJson(state, key, dft) {
  let path;
  if (state.meta) {
    path = state.meta[`gui_${key}`];
  }
  if (!path && state.oDir) {
    path = state.oDir[`gui_${key}`];
  }
  if (!path) {
    path = state[`${key}Path`];
  }

  // Guard nil path
  if (!path) {
    return dft;
  }

  // Try load
  let re = await Wn.Sys.exec(`cat ${path}`);
  re = _.trim(re);

  // Not exists
  if (!re || /^e\./.test(re)) {
    return dft;
  }

  // Load schema
  return JSON.parse(re);
}
////////////////////////////////////////////////
const _M = {
  //--------------------------------------------
  applyViewBeforeLoad({ state, commit }) {
    // Guard
    if (!state.view) {
      return;
    }
    state.LOG("applyViewBeforeLoad", state.view);
    // Update to state
    _.forEach(state.view, (v, k) => {
      // Only set the paths
      if (/^((actions|layout|schema|method)Paths?)$/.test(k)) {
        let by = _.camelCase("set-" + k);
        state.LOG("  > ", by, v);
        commit(by, v);
      }
    });
  },
  //--------------------------------------------
  applyViewAfterLoad({ state, commit }) {
    // Guard
    if (!state.view) {
      return;
    }
    state.LOG("applyViewAfterLoad", state.view);
    // Update to state
    _.forEach(state.view, (v, k) => {
      // Ignore
      if (/^((actions|layout|schema|method)Paths?)$/.test(k)) {
        return;
      }
      if (
        /^(events|view|path|lbkOff|dirId|oDir|meta|(__saved_)?content)$/.test(k)
      ) {
        return;
      }
      // Schema merged in "loadSchema" already
      if (/^(schema|components)$/.test(k)) {
        return;
      }
      let by;
      // Assign
      if (/^(pager)$/.test(k)) {
        by = _.camelCase("assign-" + k);
      }
      // Others set
      else {
        by = _.camelCase("set-" + k);
      }
      // Update state by view
      commit(by, v);
    });
  },
  //--------------------------------------------
  async loadContent(
    { state, commit, dispatch, getters },
    { quiet = false } = {}
  ) {
    // Which content should I load?
    let path = getters.contentLoadPath;
    if (!path) {
      return;
    }

    let meta;
    if (!quiet) {
      commit("setStatus", { reloadContent: true });
    }

    if ("<self>" != path) {
      meta = await Wn.Io.loadMeta(path);
    }
    // Use state
    else if (state.meta && "FILE" == state.meta.race) {
      meta = state.meta;
    }

    //console.log("load Content:", path)
    // No meta
    if (!meta) {
      state.LOG("updateContent => null");
      dispatch("updateContent", null);
      if (!quiet) {
        commit("setStatus", { reloadContent: false });
      }
      return;
    }

    // Load meta content
    state.LOG("loadContent", meta.ph || meta.nm);
    let content = await Wn.Io.loadContent(meta);
    dispatch("updateContent", content);
    //console.log("loadContent:", meta,content)

    // All done
    if (!quiet) {
      commit("setStatus", { reloadContent: false });
    }

    return content;
  },
  //--------------------------------------------
  async loadSchema({ state, commit }) {
    state.LOG(" - loadSchema");
    let schema = await loadConfigJson(state, "schema", {});
    let components = [];

    // Load extends components
    if (!_.isEmpty(schema.components)) {
      components = _.concat(components, schema.components);
    }

    // Load extends components
    if (!_.isEmpty(components)) {
      await Ti.App.topInstance().loadView({ components });
    }

    //console.log("setSchema", schema)
    // Should set scheme after All deps components preloaded
    commit("setSchema", schema);

    if (schema.methods) {
      commit("setMethodPaths", schema.methods);
    }

    if (schema.localBehaviorKeepAt) {
      commit("setLocalBehaviorKeepAt", schema.localBehaviorKeepAt);
    }

    let contentPath = _.get(schema, "behavior.contentPath");
    if (contentPath) {
      commit("setContentPath", contentPath);
    }
  },
  //--------------------------------------------
  async loadLayout({ state, commit }) {
    state.LOG(" > loadLayout");
    let reo = await loadConfigJson(state, "layout", {});
    commit("setLayout", reo);
  },
  //--------------------------------------------
  async loadObjActions({ state, commit }) {
    state.LOG(" > loadActions");
    let reo = await loadConfigJson(state, "actions", null);
    commit("setObjActions", reo);
  },
  //--------------------------------------------
  async loadObjMethods({ state, commit }) {
    state.LOG(" > loadMethods", state.methodPaths);

    let path;
    if (state.meta) {
      path = state.meta.methods;
    }
    if (!path && state.oDir) {
      path = state.oDir.methods;
    }
    if (!path) {
      path = state.methodPaths;
    }

    let reo = {};
    // Load
    if (path) {
      //let methodsUri = `./${state.methodPaths}`
      let methods = await Ti.Load(path, {
        dynamicAlias: new Ti.Config.AliasMapping({
          "^./": `/o/content?str=id:${state.dirId}/`
        })
      });
      // Merge methods
      if (_.isArray(methods)) {
        for (let mt of methods) {
          _.assign(reo, mt);
        }
      } else {
        _.assign(reo, methods);
      }
    }

    // Done
    commit("setObjMethods", reo);
  },
  //--------------------------------------------
  loadDirId({ state, commit }) {
    let meta = state.meta;
    if (!meta) {
      return;
    }
    if ("DIR" == meta.race) {
      commit("setDirId", meta.id);
    } else {
      commit("setDirId", meta.pid);
    }
  },
  //--------------------------------------------
  applyBehavior({ state, commit }, be = {}) {
    // Eval behavior dynamicly
    let {
      pvg,
      filter,
      sorter,
      match,
      currentId,
      checkedIds,
      pageSize,
      guiShown
    } = be;

    // Apply Pvg
    if (!_.isEmpty(pvg)) {
      commit("assignPvg", pvg);
    }

    // Apply filter
    if (!_.isEmpty(filter)) {
      commit("setFilter", filter);
    }

    // Apply sorter
    if (!_.isEmpty(sorter)) {
      commit("setSorter", sorter);
    }

    // Apply fixed match
    if (!_.isEmpty(match)) {
      commit("setFixedMatch", match);
    }

    // Checked and current
    if (!Ti.Util.isNil(currentId)) {
      commit("setCurrentId", currentId);
    }
    if (!_.isEmpty(checkedIds)) {
      commit("setCheckedIds", checkedIds);
    }

    // Apply shown
    if (!_.isEmpty(guiShown)) {
      commit("setGuiShown", guiShown);
    }

    // Apply pager
    let pager = {};
    if (pageSize > 0) {
      pager.pn = 1;
      pager.pgsz = pageSize;
    }
    commit("assignPager", pager);
  },
  //--------------------------------------------
  updateSchemaBehavior({ state, commit, dispatch }) {
    let be = _.get(state.schema, "behavior") || {};
    be = Ti.Util.explainObj(state, be);
    if (!_.isEmpty(be)) {
      commit("setLbkOff");
      dispatch("applyBehavior", be);
      commit("setLbkOn");
    }
  },
  //--------------------------------------------
  restoreLocalBehavior({ state, dispatch }) {
    // Guard
    if (!state.lbkAt) {
      return;
    }
    // Load local setting
    let be = Ti.Storage.local.getObject(state.lbkAt);
    if (!_.isEmpty(be)) {
      dispatch("applyBehavior", be);
    }
  },
  //--------------------------------------------
  async reloadData({ state, dispatch, getters }) {
    if (state.oDir) {
      await dispatch("queryList");
    }
    if (getters.contentLoadPath) {
      await dispatch("loadContent");
    }
  },
  //--------------------------------------------
  /***
   * Reload All
   */
  async reload({ state, commit, dispatch }, meta) {
    //console.log("+++reload", state.moduleName)
    // Guard
    if (
      state.status.reloading ||
      state.status.saving ||
      state.status.deleting
    ) {
      return;
    }
    state.LOG = () => {};
    // if ("casedocs" == state.moduleName) {
    //   state.LOG = console.log;
    // }
    state.LOG(">>>>>>>>>>>>>> reload", meta, state.status.reloading);
    // If meta like : {path: "/path/to", quiet:true}
    let quiet = false;
    if (meta && meta.path && !Ti.Util.isNil(meta.quiet)) {
      quiet = meta.quiet;
      meta = meta.path;
    }

    // Guard
    if (_.isString(meta)) {
      meta = await Wn.Io.loadMeta(meta);
    }

    // Guard: Nil meta
    if (!meta) {
      if (!quiet) {
        await Ti.Toast.Open("Nil Meta", "warn");
      }
      return;
    }
    if (!meta.id) {
      if (!quiet) {
        await Ti.Toast.Open("Meta without ID", "warn");
      }
      return;
    }
    // Analyze meta : oDir
    state.LOG("Analyze oDir and dirId");
    if ("DIR" == meta.race) {
      commit("setDir", meta);
      commit("setDirId", meta.id);
    }
    // Take the file as GUI View
    else if ("gui_view" == meta.tp && "FILE" == meta.race) {
      let view = await Wn.Io.loadContent(meta, { as: "json" });
      commit("setView", view);
      if (view.path) {
        let oDir = await Wn.Io.loadMeta(view.path);
        commit("setDir", oDir);
        commit("setDirId", oDir.id);
      }
    }
    // Then meta should be a File
    else {
      // CheckThingSet ID
      commit("setMeta", meta);
      commit("setDirId", meta.pid);
      //dispatch("loadDirId")
    }

    if (!state.dirId) {
      return await Ti.Alert("Meta Without DirID: " + meta.id, { type: "warn" });
    }

    commit("setStatus", { reloading: true });

    // Reload Configurations
    state.LOG("<-------- Reload Config -------->");
    dispatch("applyViewBeforeLoad");
    await dispatch("loadSchema");
    await Promise.all([
      dispatch("loadLayout"),
      dispatch("loadObjActions"),
      dispatch("loadObjMethods")
    ]);
    dispatch("applyViewAfterLoad");
    state.LOG("<-------- Config Loaded-------->");

    // Behavior
    commit("explainLocalBehaviorKeepAt");
    dispatch("updateSchemaBehavior");
    dispatch("restoreLocalBehavior");

    // Reload thing list
    state.LOG(" >> Reload Data ...");
    await dispatch("reloadData");

    // All done
    commit("setStatus", { reloading: false });
    state.LOG("<<<<<<<<<<<<<<<< done for reload");
  }
  //--------------------------------------------
};
return _M;;
})()
// ============================================================
// EXPORT 'tiny-wn-fb-album.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/tiny-wn-fb-album.mjs'] = (function(){
const ALBUM_PREFIX = "FbAlbum";
////////////////////////////////////////////////////
async function pickFbAlbumAndInsertToDoc(editor, settings) {
  let { metas } = await settings.load()
  if (metas.length == 0) {
    return await Ti.Toast.Open("i18n:hmk-config-nil", "warn")
  }

  // Get the meta
  let meta;
  if (metas.length > 1) {
    let metaId = await Ti.App.Open({
      title: "i18n:hmk-config-choose",
      width: 480,
      height: 480,
      comType: "TiBulletRadio",
      comConf: {
        options: metas
      },
      components: ["@com:ti/bullet/radio"]
    })
    // User cancel
    if (!metaId) {
      return
    }
    meta = _.find(metas, m => m.id == metaId)
  }
  // Only one meta
  else {
    meta = metas[0]
  }
  // Check base
  let reo = await Ti.App.Open({
    icon: "fas-image",
    title: "Facebook",
    position: "top",
    width: "95%",
    height: "95%",
    comType: "NetFacebookAlbums",
    comConf: {
      meta,
      ...meta.content,
      notifyName: "change"
    },
    components: [
      "@com:net/facebook/albums"
    ]
  })
  // Set the album account
  reo.account = meta.nm

  // User canceled
  if (_.isEmpty(reo)) {
    return
  }

  // Do insert image
  editor.execCommand("InsertFbAlbum", editor, reo)
}
//--------------------------------------------------
function GetAlbumWidget($album) {
  return Ti.Widget.Album.getOrCreate($album, {
    attrPrefix: "wn-fb-",
    itemToPhoto: {
      name: "=name",
      link: "=link",
      thumb: "=thumb_src",
      src: "=src"
    }
  })
}
//--------------------------------------------------
function UpdateFbAlbumTagInnerHtml(editor, $album, settings, {
  album, photos, items, force
} = {}) {
  //console.log("UpdateFbAlbumTagInnerHtml")
  // Bind widget and get the data
  let AB = GetAlbumWidget($album);
  // If insert new album, the params will be passed
  if (!album) {
    album = AB.getData()
    if (force) {
      AB.setData(album)
    }
  } else {
    AB.setData(album)
  }
  // Mark content editable
  $album.contentEditable = false

  // Explain items to photos
  if (items) {
    photos = AB.covertToPhotos(items)
  }

  // Reload photo from remote
  if (_.isEmpty(photos)) {
    // Get account name
    let accountName = $album.getAttribute("wn-fb-account")
    // Show loading
    AB.showLoading()

    // Load and rendering
    settings.load().then(({ data }) => {
      // Found the account in data
      let content = data[accountName]
      let { domain, longLiveAccessToken } = content
      // Reload album items
      Wn.FbAlbum.reloadAllPhotoList({
        albumId: album.id,
        domain,
        accountName,
        access_token: longLiveAccessToken,
        force
      }).then((items) => {
        //console.log(items)
        Ti.WWW.FB.setObjListPreview(items)
        AB.renderItems(items)
        // Force sync content
        editor.__rich_tinymce_com.syncContent()
      })
    })
  }
  // Just render
  else {
    AB.renderPhotos(photos)
    // Force sync content
    editor.__rich_tinymce_com.syncContent()
  }
}
////////////////////////////////////////////////////
function CmdInsertAlbum(editor, fbAlbum) {
  if (!fbAlbum)
    return

  // Prepare range
  let rng = editor.selection.getRng()

  // Create image fragments
  let $doc = rng.commonAncestorContainer.ownerDocument
  let $album = Ti.Dom.createElement({
    tagName: "div",
    attrs: {
      tiAlbumType: "fb-album",
      wnFbAccount: fbAlbum.account
    },
    className: "wn-media as-fb-album"
  }, $doc)

  // Update INNER HTML
  UpdateFbAlbumTagInnerHtml(editor, $album, editor.wn_facebook_settings, {
    album: fbAlbum
  })

  // Remove content
  if (!rng.collapsed) {
    rng.deleteContents()
  }

  // Insert fragments
  rng.insertNode($album)

}
////////////////////////////////////////////////////
function CmdReloadAlbum(editor, settings) {
  let $album = GetCurrentAlbumElement(editor)
  // Guard
  if (!_.isElement($album)) {
    return
  }
  // Reload content
  UpdateFbAlbumTagInnerHtml(editor, $album, settings, {
    force: true
  })
}
////////////////////////////////////////////////////
function GetCurrentAlbumElement(editor) {
  let sel = editor.selection
  let $nd = sel.getNode()
  // Guard
  return Ti.Dom.closest($nd, (el) => {
    return 'DIV' == el.tagName && Ti.Dom.hasClass(el, "wn-media", "as-fb-album")
  }, { includeSelf: true })
}
////////////////////////////////////////////////////
function CmdSetAlbumStyle(editor, css = {}) {
  let $album = GetCurrentAlbumElement(editor)
  // Guard
  if (!_.isElement($album)) {
    return
  }
  // Clear float
  Ti.Dom.setStyle($album, css)
  // Force sync content
  editor.__rich_tinymce_com.syncContent()
}
////////////////////////////////////////////////////
async function CmdShowAlbumProp(editor, settings) {
  let $album = GetCurrentAlbumElement(editor)
  // Guard
  if (!_.isElement($album)) {
    return
  }
  // Gen the properties
  let AB = GetAlbumWidget($album)
  let data = AB.getData()

  // Show dialog
  let reo = await Ti.App.Open({
    icon: "fab-facebook",
    title: "i18n:hmk-w-edit-fb-album-prop",
    width: "37%",
    height: "100%",
    position: "right",
    closer: "left",
    clickMaskToClose: true,
    result: data,
    model: { prop: "data", event: "change" },
    comType: "TiForm",
    comConf: Ti.Widget.Album.getEditFormConfig(ALBUM_PREFIX),
    components: []
  })

  // 用户取消
  if (!reo)
    return

  //................................................
  let photos = AB.getPhotos()
  UpdateFbAlbumTagInnerHtml(editor, $album, settings, {
    album: reo, photos
  })
  //................................................
  // clean cache
  $album.removeAttribute("data-mce-src")
  $album.removeAttribute("data-mce-style")
  //................................................
  // Force sync content
  editor.__rich_tinymce_com.syncContent()
}
////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  name: "wn-fb-album",
  //------------------------------------------------
  init: function (conf = {}) {
  },
  //------------------------------------------------
  setup: function (editor, url) {
    //..............................................
    let settings = _.assign({
      meta: "~",
      type: "facebook_albums"
    }, _.get(editor.settings, "wn_facebook_config"));
    //console.log("setup", editor.settings)
    //..............................................
    // Reload meta content
    // Check meta
    settings.load = async function () {
      if (this.data) {
        return { metas: this.metas, data: this.data }
      }
      let oMeta = await Wn.Io.loadMeta(this.meta)
      if (!oMeta) {
        return await Ti.Toast.Open({
          content: "i18n:e-ph-noexists",
          type: "warn",
          val: this.meta
        })
      }
      // DIR, loading setting map
      if ("DIR" == oMeta.race) {
        // Query and read
        let cmdText = [
          `o id:${oMeta.id}`,
          `@query 'tp:"${this.type}"'`,
          `@read -as json`,
          `@json -cqn`].join(" ")
        this.metas = await Wn.Sys.exec2(cmdText, { as: "json" })
      }
      // FILE, load the single file
      else {
        oMeta.content = await Wn.Io.loadContent(oMeta, { as: "json" })
        this.metas = [oMeta]
      }

      // Read long live access token for each meta content
      for (let o of this.metas) {
        let domain = o.content.domain
        let oAK = await Wn.Io.loadMeta(`~/.xapi/facebook/${domain}/long_live_access_token`)
        o.content.longLiveAccessToken = oAK.ticket
      }

      // Build Album ID data
      this.data = {}
      _.forEach(this.metas, ({ nm, content }) => {
        this.data[nm] = content
      })

      return { metas: this.metas, data: this.data }
    }
    editor.wn_facebook_settings = settings
    //..............................................
    // Register toolbar actions
    editor.ui.registry.addButton("WnFbAlubmPick", {
      icon: "facebook-square-brands",
      tooltip: Ti.I18n.text("i18n:album-insert"),
      onAction: function (menuBtn) {
        pickFbAlbumAndInsertToDoc(editor, settings)
      },
    })
    //..............................................
    let {
      CMD_SET_STYLE, CMD_RELOAD, CMD_PROP
    } = Ti.Widget.Album.registryTinyMceMenuItem(editor, {
      prefix: ALBUM_PREFIX,
      settings,
      GetCurrentAlbumElement
    })
    //..............................................
    // Register plugin command
    editor.addCommand("InsertFbAlbum", CmdInsertAlbum)
    editor.addCommand(CMD_SET_STYLE, CmdSetAlbumStyle)
    editor.addCommand(CMD_RELOAD, CmdReloadAlbum)
    editor.addCommand(CMD_PROP, CmdShowAlbumProp)
    //..............................................
    let $vm = editor.__rich_tinymce_com
    $vm.registerContentCallback("wn-fb-album", function () {
      //console.log("SetContent facebook")
      let els = editor.$('.wn-media.as-fb-album')
      for (let i = 0; i < els.length; i++) {
        let el = els[i]
        UpdateFbAlbumTagInnerHtml(editor, el, settings)
      }
    })
    //..............................................
    return {
      getMetadata: function () {
        return {
          name: 'Wn Facebook Album plugin',
          url: 'http://site0.cn'
        };
      }
    };
    //..............................................
  }
  //------------------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-adaptlist-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/adaptlist/wn-adaptlist-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "meta": {
    type: Object,
    default: null
  },
  // {list:[], pager:{..}}
  "data": {
    type: [Object, Array],
    default: null
  },
  "currentId": {
    type: String,
    default: null
  },
  "checkedIds": {
    type: [Array, Object],
    default: undefined
  },
  "changedId": {
    type: String,
    default: null
  },
  "status": {
    type: Object,
    default: () => ({
      reloading: false
    })
  },
  "itemTitleKey": {
    type: String,
    default: "title"
  },
  // Fixed meta append after uploaded.
  "uploadMeta": {
    type: Object
  },
  // Define the upload target
  "uploadTarget": {
    type: [String, Function],
    default: "->id:${oDir.id}"
  },
  "uploadMode": {
    type: String,
    default: "a"
  },
  "itemStatus": {
    type: Object,
    default: () => ({
      /* [id] : "loading|renaming|removed" */
    })
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  // Drop files to upload
  "droppable": {
    type: Boolean,
    default: true
  },
  // multi-selectable
  // effected when selectable is true
  "multi": {
    type: Boolean,
    default: true
  },
  "checkable": {
    type: Boolean,
    default: true
  },
  "blurable": {
    type: Boolean,
    default: true
  },
  "selectable": {
    type: Boolean,
    default: true
  },
  // aspect: list item spacing
  // `xs|sm|md|lg|xl`
  "spacing": {
    type: String,
    default: "sm"
  },
  "routers": {
    type: Object,
    default: () => ({
      "reload": "dispatch:main/reload"
    })
  },
  "listConf": {
    type: Object
  },
  "wallViewConf": {
    type: Object
  },
  "listViewConf": {
    type: Object
  },
  "tableViewConf": {
    type: Object
  },
  "acceptUpload": {
    type: [Array, String]
  },
  "exposeHidden": {
    type: Boolean,
  },
  "viewType": {
    type: String,
    default: "wall"
  },
  "avaViewTypes": {
    type: Array,
    default: () => ["wall", "table", "list"]
  },
  "listDisplay": {
    type: [Array, String, Object],
    default: () => ["@<thumb>", "title|nm::flex-auto", "nm::as-tip-block"]
  },
  "tableFields": {
    type: Array,
    default: () => [
      "title", "~nm",
      "~race", "tp", "~mime",
      "~c", "~g", "~m",
      "~d0", "~d1", "~md",
      "~sort", "~width", "~height", "~duration", 
      "~len", "~ct", "lm"
    ]
  },
  "moveToConf": {
    type: Object
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "rowNumberBase": {
    type: Number,
    default: undefined
  },
  "itemClassName": {
    type: String
  },
  "itemBadges": {
    type: [Object, Function]
  },
  "viewTypeIcons": {
    type: Object,
    default: () => ({
      "wall": "zmdi-view-module",
      "table": "zmdi-view-subtitles",
      "list": "zmdi-view-headline"
    })
  },
  //-----------------------------------
  // Callback
  //-----------------------------------
  "beforeUpload": {
    type: Function
  },
  "afterUpload": {
    type: Function
  },
  "onViewTypeChange": {
    type: Function,
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-input-timerange.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/timerange/ti-input-timerange.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    "runtime" : null,
    "status"  : "collapse"
  }),
  ////////////////////////////////////////////////////
  props : {
    "canInput" : {
      type : Boolean,
      default : true
    },
    "value" : {
      type : [String, Object, Number, Array],
      default : null
    },
    "rangeKeys" : {
      type : Array,
      default : ()=>["beginTime", "endTime"]
    },
    // TODO only str-array supported now
    // please fix it refer by ti-input-daterange.mjs
    "valueType" : {
      type : String,
      default : "str-array",
      validator: v => /^((str|ms|sec)-(array|obj))$/.test(v)
    },
    "dftValue" : {
      type : Array,
      default : ()=>["09:00", "17:00"]
    },
    "icon" : {
      type : String,
      default : "zmdi-time-interval"
    },
    "unit" : {
      type : String,
      default : "ms"
    },
    "format" : {
      type : String,
      default : "HH:mm"
    },
    "placeholder" : {
      type : String,
      default : "i18n:blank-time-range"
    },
    "hideBorder" : {
      type : Boolean,
      default : false
    },
    "width" : {
      type : [Number, String],
      default : "2rem"
    },
    "height" : {
      type : [Number, String],
      default : undefined
    },
    "statusIcons" : {
      type : Object,
      default : ()=>({
        collapse : "zmdi-chevron-down",
        extended : "zmdi-chevron-up"
      })
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName(this.className)
    },
    //------------------------------------------------
    isCollapse() {return "collapse"==this.status},
    isExtended() {return "extended"==this.status},
    //--------------------------------------
    theFormConfig() {
      let [keyBegin, keyEnd] = this.rangeKeys
      let fields = [{
        name  : keyBegin,
        type  : "Time",
        title : "i18n:time-begin",
        comType : "ti-input-time"
      }, {
        name  : keyEnd,
        type  : "Time",
        title : "i18n:time-end",
        comType : "ti-input-time"
      }]
      return {
        fields,
        spacing : "tiny",
        statusIcons : null
      }
    },
    //--------------------------------------
    theRange() {
      return this.parseTimeRange(this.value)
    },
    //--------------------------------------
    theRangeText() {
      let [keyBegin, keyEnd] = this.rangeKeys
      let ss = []
      _.forEach(this.theRange, (val)=>{
        // Time
        if(val) {
          ss.push(val.toString(this.format))
        }
        // Zero
        else {
          ss.push(Ti.Types.formatTime(0, this.unit, this.format))
        }
      })
      return ss.join(" ~ ")
    },
    //--------------------------------------
    theRangeValue() {
      return this.formatRangeValue(this.theRange)
    },
    //------------------------------------------------
    theDropRange() {
      return this.runtime || this.theRangeValue
    },
    //------------------------------------------------
    theStatusIcon() {
      return this.statusIcons[this.status]
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    applyRuntime() {
      if(this.runtime) {
        console.log("hah")
        let rg = this.parseTimeRange(this.runtime)
        this.runtime = null
        let rg2 = this.formatRangeValue(rg)
        let rg3 = this.formatEmitRangeValue(rg2)
        this.$notify("change", rg3)
      }
    },
    //-----------------------------------------------
    doExtend() {
      this.status = "extended"
    },
    //-----------------------------------------------
    doCollapse({escaped=false}={}) {
      this.status = "collapse"
      // Drop runtime
      if(escaped) {
        this.runtime = null
      }
      // Apply Changed for runtime
      else {
        this.applyRuntime()
      }
    },
    //------------------------------------------------
    onInputFocused() {
      this.doExtend()
    },
    //------------------------------------------------
    onChanged(val) {
      let rg = this.parseTimeRange(val)
      // Empty Range
      if(_.isEmpty(rg)) {
        this.$notify("change", null);
      }
      // Format the Range
      else {
        let rg2 = this.formatRangeValue(rg)
        let rg3 = this.formatEmitRangeValue(rg2)
        this.$notify("change", rg3);
      }
    },
    //------------------------------------------------
    onClickStatusIcon() {
      // extended -> collapse
      if(this.isExtended) {
        this.doCollapse()
      }
      // collapse -> extended
      else {
        this.doExtend()
      }
    },
    //------------------------------------------------
    formatEmitRangeValue(rg) {
      let [keyBegin, keyEnd] = this.rangeKeys
      // Format the value to array
      if(rg && "Array" == this.valueType) {
        let re = [rg[keyBegin], rg[keyEnd]]
        return _.filter(re, (v)=>(v && _.isString(v)))
      }
      // Default as object
      return rg
    },
    //------------------------------------------------
    onFormChanged(payload) {
      this.runtime = _.cloneDeep(payload)
    },
    //------------------------------------------------
    parseTimeRange(val) {
      let [keyBegin, keyEnd] = this.rangeKeys
      val = Ti.Util.fallback(val, this.dftValue, {})
      let rg = {}
      // Number 
      if(_.isNumber(val)) {
        let tm = Ti.Types.toTime(val)
        rg = {
          [keyBegin] : tm
        }
      }
      // String
      else if(_.isString(val)) {
        let str = _.trim(val)
        let ss = _.split(str, /[\t ,\/~-]+/)
        let tm0 = Ti.Types.toTime(ss[0])
        let tm1 = Ti.Types.toTime(ss[1])
        rg = {
          [keyBegin] : tm0,
          [keyEnd]   : tm1
        }
      }
      // Array
      else if(_.isArray(val)) {
        rg = {
          [keyBegin] : Ti.Types.toTime(val[0]),
          [keyEnd]   : Ti.Types.toTime(val[1])
        }
      }
      // Plain Object
      else if(_.isPlainObject(val)) {
        rg = _.pick(val, this.rangeKeys)
      }
      // Then make sure the range beignTime is the less one
      return this.normalizeRange(rg)
    },
    //------------------------------------------------
    // Then make sure the range beignTime is the less one
    normalizeRange(rg) {
      let [keyBegin, keyEnd] = this.rangeKeys
      if(rg && (rg[keyBegin] || rg[keyEnd]) ) {
        if(!rg[keyBegin]) {
          let tBegin = Ti.Types.toTime(0)
          rg[keyBegin] = tBegin.toString()
        }
        if(!rg[keyEnd]) {
          let tEnd = Ti.Types.toTime(86400000-1)
          rg[keyEnd] = tEnd.toString()
        }
        let tmBegin = Ti.Types.toTime(rg[keyBegin])
        let tmEnd   = Ti.Types.toTime(rg[keyEnd])
        if(tmBegin.valueInMilliseconds > tmEnd.valueInMilliseconds) {
          let tm = rg[keyBegin]
          rg[keyBegin] = tmEnd
          rg[keyEnd] = tmBegin
        }
      }
      return rg
    },
    //------------------------------------------------
    formatRangeValue(range) {
      let rg = _.assign({}, range)
      _.forEach(rg, (val, key)=>{
        // Time
        if(val) {
          rg[key] = val.toString()
        }
        // Zero
        else {
          rg[key] = Ti.Types.formatTime(0)
        }
      })
      return rg
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-shelf-carousel.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/shelf/carousel/web-shelf-carousel.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data: () => ({
    myCurrentIndex: 0,  // Index of data for 'A'
    myTransition: undefined,
    measure: {/*
      控件区域宽度 : W
      左右边距 : P
      主要区域 : V = W - 2P
      卡片宽度 : C = V / cols
      每次滚动距离 : V
      内容器左边绝对位移: offset = -2C + P  
    */},
    inTransition: false
  }),
  //////////////////////////////////////////
  props: {
    //-------------------------------------
    // Data
    //-------------------------------------
    "data": {
      type: Array,
      default: () => []
    },
    //-------------------------------------
    // Behavior
    //-------------------------------------
    "transition": {
      type: String,
      default: "left 0.5s"
    },
    // Item comType
    "comType": {
      type: String,
      default: "ti-label"
    },
    "comConf": {
      type: [Object, String],
      default: () => ({
        value: "=.."
      })
    },
    //-------------------------------------
    // Aspect
    //-------------------------------------
    // Item count per-row
    "cols": {
      type: Number,
      default: 3
    },
    "pad": {
      type: [String, Number],
      default: "11%"
    },
    "iconLeft": {
      type: String,
      //default: "fas-caret-left"
      default: "fas-angle-left"
    },
    "iconRight": {
      type: String,
      //default: "fas-caret-right"
      default: "fas-angle-right"
    },
    "width": {
      type: [Number, String],
      default: undefined
    },
    "height": {
      type: [Number, String],
      default: undefined
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    },
    //--------------------------------------
    MainUlStyle() {
      return Ti.Css.toStyle({
        left: this.measure.offset,
        transition: this.myTransition
      })
    },
    //--------------------------------------
    MainLiStyle() {
      return Ti.Css.toStyle({
        width: this.measure.C
      })
    },
    //--------------------------------------
    hasMultiItems() {
      return _.isArray(this.data) && this.data.length > 1
    },
    //--------------------------------------
    ItemList() {
      if (!_.isArray(this.data) || _.isEmpty(this.data))
        return []

      let list = []
      let len = this.data.length;
      // Define push method
      const push_to_list = (index) => {
        let it = this.data[index]
        let comConf = Ti.Util.explainObj(it, this.comConf)
        list.push({
          key: `I${list.length}`,
          index,
          comType: this.comType,
          comConf
        })
      }

      // Push the prev items
      let I = this.myCurrentIndex
      for (let i = -2; i <= -1; i++) {
        let index = Ti.Num.scrollIndex(I + i, len)
        push_to_list(index)
      }

      // Push the view item
      for (let i = 0; i < this.cols; i++) {
        let index = Ti.Num.scrollIndex(I + i, len)
        push_to_list(index)
      }

      // Push the next items
      I = this.myCurrentIndex + this.cols
      for (let i = 0; i <= 1; i++) {
        let index = Ti.Num.scrollIndex(I + i, len)
        push_to_list(index)
      }

      // Get the result
      return list
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnResize() {
      this.myTransition = undefined
      this.$nextTick(() => {
        this.evalMeasure()
        _.delay(() => {
          this.myTransition = this.transition
        }, 100)
      })
    },
    //--------------------------------------
    prevItem() {
      this.scrollUl(-1)
    },
    //--------------------------------------
    nextItem() {
      this.scrollUl(1)
    },
    //--------------------------------------
    scrollUl(off) {
      // Guard
      if(this.inTransition) {
        return
      }
      // Mark
      this.inTransition = true

      // Prepare the next index
      let index = Ti.Num.scrollIndex(this.myCurrentIndex + off, this.data.length)
      
      // Scroll
      this.evalMeasure(off)

      // Transend
      this.listenTransEnd(() => {
        this.myTransition = undefined
        this.$nextTick(() => {
          this.myCurrentIndex = index
          this.evalMeasure()
          _.delay(() => {
            this.myTransition = this.transition
            this.inTransition = false
          }, 100)
        })
      })
    },
    //--------------------------------------
    listenTransEnd(callback) {
      let $ul = this.$refs.ul
      if (_.isElement($ul) && _.isFunction(callback)) {
        $ul.addEventListener("transitionend", () => {
          callback()
        }, { once: true })
      }
    },
    //--------------------------------------
    evalMeasure(scrollOffset = 0) {
      let W = this.$el.clientWidth
      let P = Ti.Css.toPixel(this.pad, W)
      let V = W - P * 2
      let C = V / this.cols
      let offset = P - C * 2 - C * scrollOffset
      this.measure = {
        W, P, V, C, offset
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "transition": {
      handler: function (trans) {
        this.myTransition = trans
      },
      immediate: true
    }
  },
  //////////////////////////////////////////
  mounted() {
    this.OnResize()
    Ti.Viewport.watch(this, {
      resize: _.debounce(() => this.OnResize(), 10)
    })
  },
  //////////////////////////////////////////
  beforeDestroy: function () {
    Ti.Viewport.unwatch(this)
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'm-obj-current-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/obj-current/m-obj-current-actions.mjs'] = (function(){
////////////////////////////////////////////
const _M = {
  //----------------------------------------
  // Combin Mutations
  //----------------------------------------
  changeMeta({commit}, {name, value}={}) {
    if(name) {
      let meta = _.set({}, name, value)
      commit("mergeMeta", meta)
    }
  },
  //--------------------------------------------
  // User Interactivity
  //--------------------------------------------
  async openMetaEditor({state, dispatch}) {
    // Guard
    if(!state.meta) {
      return await Ti.Toast.Open("i18n:empty-data", "warn")
    }
    // Open Editor
    let reo = await Wn.EditObjMeta(state.meta, {fields:"auto"})

    // Cancel the editing
    if(_.isUndefined(reo)) {
      return
    }

    // Update the current editing
    if(reo.saved) {
      await dispatch("reload", reo.data)
    }
  },
  //--------------------------------------------
  async openPrivilegeEditor({state, dispatch}) {
    // Guard
    if(!state.meta) {
      return await Ti.Toast.Open("i18n:empty-data", "warn")
    }
    // Open Editor
    let newMeta = await Wn.EditObjPvg(state.meta, {
      organization: "~/.domain/organization.json"
    })

    // Cancel the editing
    if(_.isUndefined(newMeta)) {
      return
    }

    // Update the current editing
    await dispatch("reload", newMeta)
  },
  //--------------------------------------------
  // Update to remote
  //----------------------------------------
  async updateMeta({commit, dispatch}, {name, value}={}) {
    let data = Ti.Types.toObjByPair({name, value})
    await dispatch("updateMetas", data)
  },
  //----------------------------------------
  async updateMetas({state, commit}, data={}) {
    // Check Necessary
    if(_.isMatchWith(state.meta, data, _.isEqual)) {
      return
    }

    // Mark field status
    _.forEach(data, (val, name)=>{
      commit("setFieldStatus", {name, type:"spinning", text:"i18n:saving"})
    })

    // Do the update
    let json = JSON.stringify(data)
    let id  = state.meta.id
    let cmdText = `o id:${id} @update @json -cqn`
    let reo = await Wn.Sys.exec2(cmdText, {input:json, as:"json"})
    let isError = reo instanceof Error;

    if(!isError && !Ti.Util.isNil(reo)) {
      commit("setMeta", reo)
    }

    _.forEach(data, (val, name)=>{
      if(isError) {
        commit("setFieldStatus", {
          name, 
          type: "warn", 
          text: reo.message || "i18n:fail"
        })
      } else {
        commit("setFieldStatus", {
          name, 
          type: "ok", 
          text: "i18n:ok"
        })
        _.delay(()=>{commit("clearFieldStatus", name)}, 500)
      }
    })
  },
  //--------------------------------------------
  // Reload
  //--------------------------------------------
  async reload({state,commit}, meta) {
    //......................................
    // Use the default meta
    if(_.isUndefined(meta)) {
      meta = state.meta
    }
    commit("setStatus", {reloading:true})
    //......................................
    if(_.isString(meta)) {
      meta = await Wn.Io.loadMeta(meta)
    }
    else if(meta && meta.id) {
      meta = await Wn.Io.loadMetaById(meta.id)
    }
    //......................................
    // Just update the meta
    commit("setMeta", meta)
    commit("setStatus", {reloading:false})
    commit("clearFieldStatus")
  }
  //----------------------------------------
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-chart-simple.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/chart/simple/ti-chart-simple.mjs'] = (function(){
function draw_chart({
  $refs,
  type="interval",
  unit,
  data=[],
  axisX,
  axisY,
  color,
  animate,
  padding,
  minValue,
  maxValue,
  valueInterval,
  coord
}={}) {
  let $container = $refs.chart
  //console.log(data)
  let width  = G2.DomUtil.getWidth($container)
  let height = G2.DomUtil.getHeight($container)
  // if(width > 500 && width < 510)
  //   console.log(width, height)
  // if(hasSlider)
  //   console.log("XXXX", data)
  //.......................................
  // maxValue
  if(_.isUndefined(maxValue)) {
    maxValue = 0
    let valKey = axisY.name
    for(let it of data){
      maxValue = Math.max(maxValue, it[valKey])
    }
  }
  //.......................................
  // Create The Chart
  let chart = new G2.Chart({
    container: $container,
    padding, width, height
  })
  //.......................................
  // Set datasource
  chart.source(data)
  //.......................................
  // Setup title
  chart.legend(false)
  //.......................................
  // axisX
  let axisXOptions = {
    label : {
      textStyle : {
        fill : axisX.color || "#888"
      }
    }
  }
  chart.axis(axisX.name, axisXOptions)
  //.......................................
  // 纵轴设定
  let axisYOptions = {
    label : {
      autoRotate : false,
      textStyle : {
        fill : axisY.color || "#888"
      }
    },
    grid: {
      type: 'line',
      lineStyle: {
        stroke: 'rgba(255,255,255,0.4)',
        lineWidth: 0.5,
        lineDash: false
      }
    }
  }
  chart.axis(axisY.name, axisYOptions)
  //.......................................
  // 坐标系变换
  if(coord) {
    if("transpose" == coord) {
      chart.coord().transpose()
    }
  }
  //.......................................
  // 视图缩放
  let alias = axisY.title || axisY.name
  chart.scale(axisY.name, {
    alias,
    type : "linear",
    min: minValue,
    max: maxValue,
    tickInterval: valueInterval
  })
  //.......................................
  // 图表种类和风格
  let factory = ({
    //+++++++++++++++++++++++++++++++++++++
    // 折线
    line() {
      let geom = chart.line().position(position)
      chart.point().position(position).size(4).shape('circle').style({
        stroke: '#fff',
        lineWidth: 1
      });
      return geom
    },
    //+++++++++++++++++++++++++++++++++++++
    // 柱图·单柱
    interval() {
      return chart.interval().position(position)
    },
    //+++++++++++++++++++++++++++++++++++++
    // 柱图·分组
    intervalDodge() {
      return chart.interval().position(position).adjust([{
        type: 'dodge',
        marginRatio: 1 / 32
      }])
    },
    //+++++++++++++++++++++++++++++++++++++
    // 柱图·堆叠
    intervalStack(position) {
      return chart.intervalStack().position(position)
    },
  })[type]
  // 默认就是柱图
  factory = factory || ((position)=>{
    return chart.interval().position(position)
  })
  //.......................................
  // 生成图表
  let position = `${axisX.name}*${axisY.name}`
  let geom = factory(position)
  //.......................................
  // 设置数据显示
      //.color(color || 'l(270) 0:#0d4a6a 1:#00fddd')
    // .animate({
    //   appear: {
    //     delay: 500, // 动画延迟执行时间
    //     duration: 1000 // 动画执行时间
    //   }
    // });
  if(color) {
    geom.color(color)
  }
  if(animate) {
    geom.animate(animate)
  }
    
  //.......................................
  // 渲染并返回
  chart.render()
  return chart
}
///////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  inheritAttrs : false,
  /////////////////////////////////////////
  props : {
    "title" : {
      type : String,
      default : null
    },
    "data" : {
      type : Array,
      default : ()=>[]
    },
    "type" : {
      type : String,
      default : "interval"
    },
    "axisX" : {
      type : Object,
      default : ()=>({
        name : "name",
        title : "name"
      })
    },
    "axisY" : {
      type : Object,
      default : ()=>({
        name : "value",
        title : "value"
      })
    },
    "aside" : {
      type : String,
      default : "left" // none|left|center|right
    },
    "unit" : {
      type : String,
      default : null
    },
    "padding" : {
      type: Array,
      default : ()=>[20,20,50,50]
    },
    "minValue" : {
      type: Number,
      default : 0
    },
    "maxValue" : {
      type: Number,
      default : undefined
    },
    "color" : {
      type: String,
      default : null
    },
    "animate" : {
      type : Object,
      default : ()=>({
        delay: 500, // 动画延迟执行时间
        duration: 1000 // 动画执行时间
      })
    },
    "valueInterval" : {
      type: Number,
      default : 100
    },
    // 坐标系变换
    "coord" : {
      type : [String, Object],
      default : null
    }
  },
  //////////////////////////////////////////
  watch : {
    "data" : function() {this.debounceRedrawChart()},
    // "type" : function() {this.debounceRedrawAll()},
    // "axisX" : function() {this.debounceRedrawAll()},
    // "axisY" : function() {this.debounceRedrawAll()}
  },
  //////////////////////////////////////////
  computed : {
    //......................................
    asideClass() {
      return `at-${this.aside||"none"}`
    },
    //......................................
    // TODO support slider
    hasSlider() {return false}
    //......................................
  },
  //////////////////////////////////////////
  methods : {
    //......................................
    redrawChart() {
      //console.log("I am redrawChart")
      if(this.__g2_chart) {
        this.__g2_chart.destroy()
        $(this.$refs.chart).empty()
      }
      this.__g2_chart = draw_chart(this)
    },
    drawAll() {
      //console.log("I am drawAll")
      this.$nextTick(()=>{
        this.redrawChart()
        //this.redrawSlider()
      })
    }
    //......................................
  },
  /////////////////////////////////////////
  mounted : function() {
    this.drawAll()
    this.debounceRedrawChart = _.debounce(()=>{
      this.redrawChart()
    }, 500)
    this.debounceRedrawAll = _.debounce(()=>{
      this.drawAll()
    }, 500)
  },
  beforeDestroy : function(){
    if(this.__g2_chart) {
      this.__g2_chart.destroy()
    }
    // if(this.__g2_slider) {
    //   this.__g2_slider.destroy()
    // }
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-obj-creation.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/creation/wn-obj-creation.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data : ()=>({
    myCurrentType: undefined
  }),
  /////////////////////////////////////////
  props : {
    "types" : {
      type : Array,
      default : ()=>[]
    },
    "value" : {
      type : Object,
      default : ()=>({
        // name : "xxxx",
        // type : "txt",
        // race : "FILE",
        // mime : "text/plain"
      })
    },
    "trimed" : {
      type : Boolean,
      default : true
    },
    "freeCreate" : {
      type : Boolean,
      default : false
    },
    "autoFocus" : {
      type : Boolean,
      default : false
    },
    "enterEvent" : {
      type : String,
      default : undefined
    }
  },
  /////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    hasTypes() {
      return !_.isEmpty(this.types)
    },
    //--------------------------------------
    CurrentTypeName() {
      let tp = this.myCurrentType || this.value.type
      if(!tp && !this.freeCreate){
        return _.get(_.first(this.types), "name")
      }
      return tp
    },
    //--------------------------------------
    TypeList() {
      let list = []
      if(this.freeCreate) {
        let currentIsNull = Ti.Util.isNil(this.CurrentTypeName)
        list.push({
          name : null,
          text : "i18n:wn-oc-auto-type",
          type : null,
          icon  : "far-file",
          thumb : "far-file",
          suffix : "*.*",
          current : currentIsNull,
          className : {
            "is-current" : currentIsNull
          },
          race : "FILE",
          mime : "text/plain"
        })
      }
      _.forEach(this.types, type => {
        let li = _.cloneDeep(type)
        li.thumb = li.thumb || li.icon
        li.suffix = `*.${li.name}`
        li.current = li.name == this.CurrentTypeName
        li.className = {
          "is-current" : li.current
        }
        li.meta = type.meta
        list.push(li)
      })
      return list
    },
    //--------------------------------------
    CurrentType() {
      return _.find(this.TypeList, li=>li.current)
    },
    //--------------------------------------
    CurrentIsDIR(){
      return 'DIR' == _.get(this.CurrentType, "race")
    },
    //--------------------------------------
    hasCurrentType() {
      return this.CurrentType ? true : false
    }
    //--------------------------------------
  },
  /////////////////////////////////////////
  methods : {
    //--------------------------------------
    setCurrentType(name){
      this.myCurrentType = name
    },
    //--------------------------------------
    OnInputChange() {
      let name = this.$refs.input.value
      if(this.trimed) {
        name = _.trim(name)
      }
      
      let type = _.assign({
        name : "txt",
        mime : "text/plain",
        race : "FILE",
        meta : {}
      }, this.CurrentType)

      // Try to find suffix name in type list
      if(Ti.Util.isNil(type.name)) {
        let typeName = Ti.Util.getSuffixName(name)
        if(typeName) {
          for(let li of this.types) {
            if(typeName == li.name) {
              type = li
              break
            }
          }
        }
      }

      this.$notify("change", {
        name,
        type : type.name,
        mime : type.mime,
        race : type.race,
        meta : type.meta
      })
    },
    //--------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("WnObjCreation", uniqKey)
      if("ENTER" == uniqKey) {
        if(this.enterEvent) {
          _.delay(()=>{
            this.$notify(this.enterEvent)
          }, 100)
        }
      }
    }
    //--------------------------------------
  },
  /////////////////////////////////////////
  mounted : function() {
    if(this.autoFocus) {
      if(this.$refs.input) {
        this.$refs.input.focus()
      }
      this.$el.click()
    }
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-label.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/label/wn-label.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //////////////////////////////////////////
  data: () => ({
    obj: undefined
  }),
  //////////////////////////////////////////
  props: {
    "openRefer": {
      type: Object,
      default: undefined
    },
    "labelValueBy": {
      type: [String, Function],
      default: "title|nm|id"
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    ValueClickable() {
      return this.openRefer ? true : false
    },
    //--------------------------------------
    LabelValue() {
      return this.getLabelValue(this.obj || this.value)
    },
    //--------------------------------------
    getLabelValue() {
      if (_.isFunction(this.labelValueBy)) {
        return this.labelValueBy
      }
      if (_.isString(this.labelValueBy)) {
        return v => {
          return Ti.Util.getOrPick(v, this.labelValueBy)
        }
      }
      return v => v
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    async OnClickValue() {
      let obj = this.obj
      if (!this.openRefer || !this.obj)
        return


      // prepare conf
      let conf = _.assign({
        title: "i18n:info",
        width: 640,
        height: 480,
        textOk: null,
        textCancel: "i18n:close",
        result: obj
      }, this.openRefer)

      // Show Dialog
      await Ti.App.Open(conf)
    }
    //--------------------------------------
  },
  watch: {
    "value": {
      handler: async function (newVal, oldVal) {
        if (!_.isEqual(newVal, oldVal)) {
          this.obj = await Wn.Io.loadMetaBy(this.value)
        }
      },
      immediate: true
    }
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-input-tree-picker.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/tree-picker/ti-input-tree-picker.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  data: () => ({
    isPicking: false,
    // single/multi
    myInputValue: undefined,
    // single only
    myInputSuffix: undefined,
    // single only
    myInputIcon: undefined
  }),
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    InputSuffixIcon() {
      if (this.isPicking) {
        return this.pickingIcon
      }
      if (!this.readonly) {
        return this.suffixIcon
      }
    },
    //--------------------------------------
    InputSuffixText() {
      if (this.isPicking) {
        return this.pickingText
      }
      if (!this.readonly) {
        return this.myInputSuffix
      }
    },
    //--------------------------------------
    hasVars() {
      return !_.isEmpty(this.vars)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    async OnClickSuffixIcon() {
      // Guard: Picking
      if (this.isPicking || this.readonly) {
        return
      }
      // Mark: Picking
      this.isPicking = true

      // Eval the tree data
      let treeData = await this.getTreeData();

      // Get checkedIds
      let checkedIds = {}
      _.forEach(_.concat(this.value), v => {
        if (v) {
          checkedIds[v] = true
        }
      })

      // Open the dialog
      let reo = await Ti.App.Open(_.assign(
        {
          title: "i18n:select",
          position: "top",
          width: "6.4rem",
          height: "96%",
        },
        this.dialog,
        {
          result: {
            checkedIds
          },
          model: {
            event: "select",
            prop: ['currentId', 'checkedIds']
          },
          events: {
            open: function () {
              this.close(this.result)
            }
          },
          comType: "TiTree",
          comConf: _.assign(
            {
              data: treeData,
              display: [
                "<icon>",
                "title|text|name|nm|abbr",
                "value|id|nm::as-tip-block align-right"
              ],
              multi: this.multi,
              checkable: this.multi,
              defaultOpenDepth: this.defaultOpenDepth,
              nodeSelectable: (node) => {
                if (this.onlyLeaf) {
                  return node.leaf ? true : false
                }
                return true;
              },
              nodeCheckable: (node) => {
                if (!this.multi) {
                  return false
                }
                if (this.onlyLeaf) {
                  return node.leaf ? true : false
                }
                return true;
              },
              border: "row"
            },
            this.tree
          ),
          components: [
            "@com:ti/tree"
          ],
          beforeClosed: () => {
            this.isPicking = false
          }
        }
      ))

      // User cancel
      if (!reo) {
        return
      }

      // Get selections
      let vals = Ti.Util.truthyKeys(reo.checkedIds)
      this.tryNotifyChange(vals)
    },
    //--------------------------------------
    tryNotifyChange(vals = []) {
      if (this.readonly) {
        return
      }
      let v2;
      if (this.multi) {
        v2 = vals
      } else {
        v2 = _.first(vals)
      }
      if (!_.isEqual(this.value, v2)) {
        this.$notify("change", v2)
      }
    },
    //--------------------------------------
    async getTreeData() {
      if (_.isFunction(this.options)) {
        let args = []
        if (this.hasVars) {
          args.push(this.vars)
        }
        return await this.options.apply(this, args)
      }
      // Static data
      let td = _.isString(this.options)
        ? JSON.parse(this.options)
        : _.cloneDeep(this.options);

      // Explain
      if (this.hasVars) {
        return Ti.Util.explain(this.vars, td)
      }
      // Pure tree data
      return td
    },
    //--------------------------------------
    async evalValue() {
      // Multi
      if (this.multi) {
        if (_.isArray(this.value)) {
          this.myInputValue = this.value
        } else {
          this.myInputValue = [this.value]
        }
      }
      // Single, shoudl eval the display value
      else {
        let val;
        if (_.isArray(this.value)) {
          val = _.first(this.value)
        } else {
          val = this.value
        }
        let $d;
        // Translate by Dict
        if (this.dict) {
          $d = Ti.DictFactory.CheckDict(this.dict)
          this.myInputValue = await $d.getItemText(val)
          this.myInputSuffix = val
          this.myInputIcon = (await $d.getItemIcon(val)) || this.prefixIcon
        }
        // Translate by format function
        else if (_.isFunction(this.format)) {
          let { value, suffix, icon } = await this.format(val, this.vars)
          this.myInputValue = Ti.Util.fallback(value, val)
          this.myInputSuffix = Ti.Util.fallback(suffix, value, val)
          this.myInputIcon = Ti.Util.fallback(icon, this.prefixIcon)
        }
        // show value directly
        else {
          this.myInputValue = val
          this.myInputIcon = this.prefixIcon
        }
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "value": {
      handler: "evalValue",
      immediate: true
    }
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'm-charts-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/charts/m-charts-actions.mjs'] = (function(){
////////////////////////////////////////////
const _M = {
  //----------------------------------------
  updateCurrentChartType({commit}, type) {
    commit("updateChartStatus", {type})
    commit("saveChartStatus")
  },
  //----------------------------------------
  async reloadChartDateSpan({commit,dispatch}, {date, span}={}) {
    commit("updateChartStatus", {date, span})
    commit("saveChartStatus")
    await dispatch("reloadChartData")
  },
  //----------------------------------------
  async reloadChart({dispatch}, chartName) {
    await dispatch("reloadChartSetup", chartName)
    await dispatch("reloadChartData")
  },
  //----------------------------------------
  async reloadChartData({state, commit}, {
    force, cleanCache, done=_.identity
  }={}) {
    if(!state.chart.data) {
      return
    }
    // console.log({force, cleanCache, done})
    // 准备时间区间
    let today = _.get(state, "chartStatus.date") || "today"
    let span  = _.get(state, "chartStatus.span") || "7d"

    // 准备命令模板
    let cmdText = Ti.S.renderBy(state.chart.data, {
      today, span
    })
    // 加载数据
    let data = await Wn.Sys.exec2(cmdText, {as:"json"})
    commit("setChartData", data)

    // 处理回调
    done(data)
  },
  //----------------------------------------
  async reloadChartSetup({state, commit}, chartName) {
    // 更新当前统计视图
    if(chartName) {
      commit("updateChartStatus", {name: chartName})
      commit("saveChartStatus")
    }
    // 如果没有 chartName 试图看看缓存
    else {
      chartName = _.get(state.chartStatus, "name")
    }

    // 还是没有的话，从当前可选的 chart 里读取第一个
    if(!chartName) {
      chartName = _.get(_.first(state.chartNameList), "name")
      commit("updateChartStatus", {name: chartName})
      commit("saveChartStatus")
    }

    // 还是没有，放其吧
    if(!chartName) {
      return
    }
    //console.log("reloadChart", chartName)
    // 读取其数据
    let ph = `id:${state.meta.id}/${chartName}/charts-setup.json`
    let oChartSetup = await Wn.Io.loadMeta(ph)
    let chart = await Wn.Io.loadContent(oChartSetup, {as:"json"})

    // 与全局的配置融合
    let setup = _.omit(_.cloneDeep(state.global), "keepToLocal")
    _.defaults(setup, {
      chartStatus: {},
      spanOptions: [],
      chartDefines: {},
      chartTypes: [],
      chartOptions: {}
    })
    _.merge(setup.chartStatus, chart.chartStatus)
    _.merge(setup.spanOptions, chart.spanOptions)
    _.merge(setup.chartDefines, chart.chartDefines)
    setup.chartTypes = chart.chartTypes || setup.chartTypes
    _.merge(setup.chartOptions, chart.chartOptions)
    setup.data = chart.data
    commit("setChart", setup)
  },
  //----------------------------------------
  async reloadChildren({state, commit}){
    let reo = await Wn.Io.loadChildren(state.meta, {
      sort : {sort:1, nm:1},
      match: {race:"DIR"}
    })
    commit("setChildren", reo.list)
  },
  //----------------------------------------
  async reloadSetup({state, commit}){
    let oSetup = await Wn.Io.loadMeta(`id:${state.meta.id}/global-setup.json`)
    let global = await Wn.Io.loadContent(oSetup, {as:"json"})
    commit("setGlobal", global || {})
  },
  //----------------------------------------
  async reload({state, commit, dispatch}, meta) {
    if(state.reloading){
      return
    }
    //......................................
    // Use the default meta
    if(_.isUndefined(meta)) {
      meta = state.meta
    }
    //......................................
    if(_.isString(meta)) {
      meta = await Wn.Io.loadMeta(meta)
    }
    else if(meta && meta.id) {
      meta = await Wn.Io.loadMetaById(meta.id)
    }
    //......................................
    // Guard
    if(!meta) {
      commit("setMeta", null)
      return
    }

    commit("setMeta", meta)
    commit("setStatus", {reloading:true})
    //......................................
    // 加载配置
    await dispatch("reloadSetup", meta)
    await dispatch("reloadChildren", meta)
    commit("loadChartStatus")
    //......................................
    // 加载当前图表配置
    await dispatch("reloadChartSetup")
    //......................................
    // 加载图表数据
    await dispatch("reloadChartData")
    //......................................
    commit("setStatus", {reloading:false})
  }
  //----------------------------------------
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-lbs-map-tencent.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/lbs/map/tencent/ti-lbs-map-tencent.mjs'] = (function(){
//
// The coordinate base on GCJ02
//
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  inheritAttrs : false,
  /////////////////////////////////////////
  data : ()=>({
    valueMarker : null
  }),
  /////////////////////////////////////////
  props : {
    // @see https://lbs.qq.com/javascript_v2/doc/maptypeid.html
    // ROADMAP | SATELLITE | HYBRID
    "mapType" : {
      type : String,
      default : "ROADMAP"
    },
    // Map center : {"lat":39.9042, "lng":116.4074}
    // If null, it will auto sync with the value
    "center" : {
      type : Object,
      // default : ()=>({
      //   {"lat":39.9042, "lng":116.4074}
      // })
      default : null
    },
    "zoom" : {
      type : Number,
      default : 8
    },
    // A LatLng Point in map, which react the changing
    "value" : {
      type : Object,
      default : null
    },
    "valueOptions" : {
      type : Object,
      default : ()=>({
        icon : null,
        title : "UserMarker",
        // DOWN|BOUNCE|DROP|UP
        animation : "DOWN"
      })
    }
  },
  //////////////////////////////////////////
  computed : {
    //-------------------------------------
    mapCenterLatLng() {
      if(!_.isEmpty(this.center)) {
        return this.genLatLng(this.center)
      }
      if(!_.isEmpty(this.value)) {
        return this.genLatLng(this.value)
      }
      // Default center to beijing
      return this.genLatLng({lat:39.9042, lng:116.4074})
    },
    //-------------------------------------
    mapTypeId() {
      return (qq.maps.MapTypeId[this.mapType]) 
             || qq.maps.MapTypeId.ROADMAP
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //-------------------------------------
    genLatLng({lat, lng}={}) {
      return new qq.maps.LatLng(lat, lng)
    },
    //-------------------------------------
    drawValue() {
      let $map = this.__map
      let opt  = this.valueOptions

      // Guard the value
      if(!this.value)
        return

      let llpos = this.genLatLng(this.value);

      var marker = new qq.maps.Marker({
        position: llpos,
        animation: qq.maps.MarkerAnimation[opt.animation],
        //设置显示Marker的地图
        map: $map,
        //设置Marker可拖动
        draggable: true,
        // //自定义Marker图标为大头针样式
        // icon: new qq.maps.MarkerImage(
        //     "https://open.map.qq.com/doc/img/nilt.png"),
        // //自定义Marker图标的阴影
        // shadow: new qq.maps.MarkerImage(
        //     "https://open.map.qq.com/doc/img/nilb.png"),
        //设置Marker标题，鼠标划过Marker时显示
        title: opt.title,
        //设置Marker的可见性，为true时可见,false时不可见
        visible: true,
      });

      this.valueMarker = marker
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "value" : function(){this.drawValue()}
  },
  //////////////////////////////////////////
  mounted : async function() {
    // Init Map
    let $map = new qq.maps.Map(this.$refs.arena, {
      zoom: this.zoom,
      center: this.mapCenterLatLng,
      mapTypeId: this.mapTypeId
    })
    // Store
    this.__map = $map
    // Draw Value
    this.drawValue()
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-gis-leaflet.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/gis/leaflet/web-gis-leaflet.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////
  data: () => ({
    $map: null,
    $live: null,
    pointerClick: {/*lat:0, lng:0*/ },
    pointerHover: {/*lat:0, lng:0*/ },
    geo: {
      center: {},
      SW: {},
      SE: {},
      NE: {},
      NW: {},
      W: 0,
      E: 0,
      S: 0,
      N: 0,
      zoom: 0
    },
    lastMove: undefined
  }),
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({})
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toSizeRem100({
        width: this.width,
        height: this.height
      })
    },
    //--------------------------------------
    TileCoords() {
      return this.getTileCoords(this.baseTileLayer)
    },
    //--------------------------------------
    // value -> trans to fit the -> base tile
    coords_value_to_tiles() {
      if (this.valueCoords != this.TileCoords) {
        return `${this.valueCoords}_TO_${this.TileCoords}`
      }
    },
    //--------------------------------------
    // base tile -> trans to fit the -> value
    coords_tiles_to_value() {
      if (this.valueCoords != this.TileCoords) {
        return `${this.TileCoords}_TO_${this.valueCoords}`
      }
    },
    //--------------------------------------
    RedrawFuncName() {
      return _.snakeCase("draw_" + this.valueType + "_as_" + this.displayType)
    },
    //--------------------------------------
    MapData() {
      let val = this.value
      if (_.isEmpty(val)) {
        val = undefined
      }
      // Guard
      if (val && !this.defaultLocation) {
        return null
      }

      return this.evalMapData({
        val,
        valType: this.valueType,
        dftLo: this.defaultLocation
      })
    },
    //--------------------------------------
    hasMapData() {
      return !_.isEmpty(this.MapData)
    },
    //--------------------------------------
    RedrawObjName() {
      return _.snakeCase("draw_" + this.objType + "_as_" + this.objDisplay)
    },
    //--------------------------------------
    ObjData() {
      if (this.objValue) {
        return this.evalMapData({
          val: this.objValue,
          valType: this.objType,
          dftLo: undefined
        })
      }
    },
    //--------------------------------------
    hasObjData() {
      return !_.isEmpty(this.ObjData)
    },
    //--------------------------------------
    isShowInfo() {
      return this.showInfo ? true : false
    },
    //--------------------------------------
    ShowInfo() {
      if (!this.showInfo)
        return {}

      let si = true === this.showInfo ? {} : this.showInfo

      return {
        zoom: true,
        center: false,
        latRange: false,
        lngRange: false,
        pointerHover: false,
        pointerClick: false,
        ...si
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    //
    // Events
    //
    //--------------------------------------
    OnMapMove(evt) {
      //console.log("map move", evt)
      let now = Date.now()
      let bou = this.$map.getBounds()
      this.geo = {
        zoom: this.$map.getZoom(),
        center: bou.getCenter(),
        SW: bou.getSouthWest(),
        SE: bou.getSouthEast(),
        NE: bou.getNorthEast(),
        NW: bou.getNorthWest(),
        W: bou.getWest(),
        E: bou.getEast(),
        S: bou.getSouth(),
        N: bou.getNorth()
      }
      // Keep zoom in local
      if (this.keepZoomBy) {
        Ti.Storage.local.set(this.keepZoomBy, this.geo.zoom)
      }
      // If cooling, notify
      if (!this.__check_cooling && this.cooling > 0) {
        this.__check_cooling = true
        window.setTimeout(() => {
          this.checkMoveCooling()
        }, this.cooling + 10)
      }
      // lastMove for cooling
      this.lastMove = now
    },
    //--------------------------------------
    OnMapPointerMove(evt) {
      this.pointerHover = evt.latlng
    },
    //--------------------------------------
    OnMapPointerClick(evt) {
      this.pointerClick = evt.latlng
    },
    //--------------------------------------
    checkMoveCooling() {
      let now = Date.now()
      let isCooling = (now - this.lastMove) > this.cooling
      if (isCooling || !this.lastMove) {
        this.__check_cooling = false
        //console.log("notify map move", this.geo)
        this.$notify("map:move", this.geo)
      } else {
        window.setTimeout(() => {
          this.checkMoveCooling()
        }, this.cooling / 2)
      }
    },
    //--------------------------------------
    //
    // Drawing methods
    //
    //--------------------------------------
    redraw() {
      this.$map.invalidateSize()
      // Prepare the function name

      // Clear live layer
      this.$live.clearLayers()

      // Draw data
      if (this.hasMapData) {
        let func = this[this.RedrawFuncName]
        if (_.isFunction(func)) {
          func(this.MapData, {
            autoFitBounds: this.autoFitBounds,
            showMarker: this.showMarker,
            markerIcon: this.markerIcon,
            markerIconOptions: this.markerIconOptions,
            markerPopup: this.markerPopup,
            markerPopupOptions: this.markerPopupOptions
          })
        } else {
          throw `Invalid RedrawFuncName="${this.RedrawFuncName}"`
        }
      }

      // Draw obj
      if (this.hasObjData) {
        let func = this[this.RedrawObjName]
        if (_.isFunction(func)) {
          func(this.ObjData, {
            showMarker: this.objShowMarker,
            markerIcon: this.objMarkerIcon,
            markerIconOptions: this.objMarkerIconOptions,
            markerPopup: this.objMarkerPopup,
            markerPopupOptions: this.objMarkerPopupOptions
          })
        }
      }
    },
    //--------------------------------------
    //
    // GEO Function
    //
    //--------------------------------------
    evalMapData({ val, valType = "obj", dftLo } = {}) {
      // Format the value
      return ({
        //..................................
        "obj": (latlng) => {
          latlng = latlng || dftLo
          if (Ti.Util.isNil(latlng.lat) || Ti.Util.isNil(latlng.lng)) {
            return {}
          }
          if (this.coords_value_to_tiles) {
            return Ti.GIS.transLatlngObj(latlng, this.coords_value_to_tiles, true)
          }
          return latlng
        },
        //..................................
        "obj-list": (list = []) => {
          if (!list)
            return []
          if (this.coords_value_to_tiles) {
            return _.map(list, (latlng) => {
              return Ti.GIS.transLatlngObj(latlng, this.coords_value_to_tiles, true)
            })
          }
          return list
        },
        //..................................
        "pair": (latlng) => {
          latlng = latlng || Ti.GIS.objToLatlngPair(dftLo)
          if (this.coords_value_to_tiles) {
            console.log(this.coords_value_to_tiles)
            return Ti.GIS.transLatlngPair(latlng, this.coords_value_to_tiles)
          }
          return latlng
        },
        //..................................
        "pair-list": (list = []) => {
          if (!list)
            return []
          if (this.coords_value_to_tiles) {
            return _.map(list, (latlng) => {
              return Ti.GIS.transLatlngPair(latlng, this.coords_value_to_tiles)
            })
          }
          return list
        },
        //..................................
        "geojson": (geojson) => {
          if (!geojson) {
            return {
              type: "Point",
              coordinates: Ti.GIS.objToLnglatPair(dftLo)
            }
          }

          // TODO here to translate coords for geojson
          return geojson
        }
        //..................................
      })[valType](val)
    },
    //--------------------------------------
    //
    // Utility
    //
    //--------------------------------------
    GeoStr(v, precise = this.latlngPrecise) {
      if (_.isUndefined(v))
        return ""
      let s = '' + Ti.Num.precise(v, precise)
      let ss = s.split('.')
      ss[1] = _.padEnd(ss[1], precise, '0')
      return ss.join('.')
    },
    //--------------------------------------
    LatlngForDi(latlng) {
      if (this.coords_value_to_tiles) {
        return Ti.GIS.transLatlng(latlng, this.coords_value_to_tiles)
      }
      return latlng
    },
    //--------------------------------------
    GetIconSrc(src) {
      if (/^(https?:\/\/|\/)/.test(src)) {
        return src
      }
      return `${this.imageIconBase}${src}`
    },
    //--------------------------------------
    Icon(urlOrIcon, {
      size = 32,
      className,
      color = "primary",
      iconSize = [24, 41],
      iconAnchor = [12, 41],
      shadow = true,
      shadowSize = [41, 41],
      shadowAnchor = [12, 41]
    } = {}) {
      if (!urlOrIcon)
        return new L.Icon.Default()

      // Eval the icon
      let { type, value } = Ti.Icons.evalIconObj(urlOrIcon)

      // Font icon
      if ("font" == type) {
        let html = Ti.Icons.fontIconHtml(value)
        let ansz = size / 2
        return L.divIcon({
          className: `ti-gsi-mark-icon 
                      is-size-${size} 
                      is-color-${color}
                      ${shadow ? 'has-shadow' : ''}`,
          html,
          iconSize: [size, size],
          iconAnchor: [ansz, ansz]
        })
      }

      // Image Icon
      if ("image" == type) {
        let shadowUrl;
        if (shadow) {
          shadowUrl = shadow
          if (_.isBoolean(shadow)) {
            let [_, nmPath, suffix] = /^([^.]+)\.(\w+)$/.exec(value)
            shadowUrl = `${nmPath}-shadow.${suffix}`
          }
          shadowUrl = this.GetIconSrc(shadowUrl)
        }
        return L.icon({
          iconUrl: this.GetIconSrc(value),
          className,
          iconSize, iconAnchor,
          shadowUrl, shadowSize, shadowAnchor
        })
      }

      // Keep original input
      return L.icon(urlOrIcon)
    },
    //--------------------------------------
    trans_obj_from_value_to_tiles(obj) {
      if (this.coords_value_to_tiles) {
        return Ti.GIS.transLatlngObj(obj, this.coords_value_to_tiles, true)
      }
      return obj
    },
    //--------------------------------------
    trans_pair_from_value_to_tiles(pair) {
      if (this.coords_value_to_tiles) {
        return Ti.GIS.transLatlngPair(pair, this.coords_value_to_tiles)
      }
      return pair
    },
    //--------------------------------------
    trans_obj_from_tiles_to_value(obj) {
      if (this.coords_tiles_to_value) {
        return Ti.GIS.transLatlngObj(obj, this.coords_tiles_to_value, true)
      }
      return obj
    },
    //--------------------------------------
    trans_pair_from_tiles_to_value(pair) {
      if (this.coords_tiles_to_value) {
        return Ti.GIS.transLatlngPair(pair, this.coords_tiles_to_value)
      }
      return pair
    },
    //--------------------------------------
    //
    // Map Methods
    //
    //--------------------------------------
    fitBounds(bounds) {
      //console.log("fitBounts", bounds)
      this.$map.fitBounds(bounds, this.fitBoundsBy)
    },
    //--------------------------------------
    initMapControls() {
      let vm = this
      let MockButton = L.Control.extend({
        options: {
          position: 'topright'

        },
        initialize: function (options) {
          L.Util.extend(this.options, options);

        },
        onAdd: function (map) {
          let $con = Ti.Dom.createElement({})
          $con.innerHTML = `<b>hahaha</b>`
          $($con).on("click", function (evt) {
            let list = vm.mockPairList(1000)
            vm.$notify("change", list)
          })
          return $con
        }
      })

      let mm = new MockButton()
      mm.addTo(this.$map)
    },
    //--------------------------------------
    moveTo({lat,lng}={}, zoom){
      zoom = zoom || this.geo.zoom || this.zoom
      let dftCenter = Ti.GIS.transLatlngObj({lat, lng})
      this.$map.setView(dftCenter, zoom)
    },
    //--------------------------------------
    initMapView(data = this.MapData) {
      //console.log("initMapView")
      // Get current zoom, keep the last user zoom state
      let zoom = this.geo.zoom || this.zoom

      // Default view
      if (!this.hasMapData && this.$map) {
        let dftCenter = Ti.GIS.transLatlngObj(this.defaultLocation || {
          lat: 39.97773512677837,
          lng: 116.3385673945887
        })
        this.$map.setView(dftCenter, zoom)
        return
      }

      // Auto fit the data
      ({
        //..................................
        "obj": (latlng) => {
          this.$map.setView(latlng, zoom)
        },
        //..................................
        "obj-list": (list = []) => {
          if (list.length > 1) {
            let gr = Ti.GIS.getLatlngObjBounds(list)
            let { SW, NE } = gr
            this.fitBounds([SW, NE])
          } else if (list.length == 1) {
            let latlng = list[0]
            this.$map.setView(latlng, zoom)
          }
        },
        //..................................
        "pair": (latlng) => {
          this.$map.setView(latlng, zoom)
        },
        //..................................
        "pair-list": (list = []) => {
          if (list.length > 1) {
            let { SW, NE } = Ti.GIS.getLatlngObjBounds(list)
            this.fitBounds([SW, NE])
          } else if (list.length == 1) {
            let latlng = list[0]
            this.$map.setView(latlng, zoom)
          }
        },
        //..................................
        "geojson": (geojson) => {
          throw "Not implement geojson get center"
        }
        //..................................
      })[this.valueType](data)
    },
    //--------------------------------------
    initMap() {
      // Create Map
      this.$map = L.map(this.$refs.main, {
        ... this.mapOptions,
        attributionControl: false,
        minZoom: this.minZoom,
        maxZoom: this.maxZoom
      });

      L.control.scale({
        metric: true,
        imperial: false,
        updateWhenIdle: true
      }).addTo(this.$map);

      // Create the main bg-layer
      if (this.baseTileLayer) {
        this.createTileLayer(this.baseTileLayer, this.baseTileVars).addTo(this.$map)
      }
      if (this.noteTileLayer) {
        this.createTileLayer(this.noteTileLayer, this.noteTileVars).addTo(this.$map)
      }

      // Events
      this.$map.on("move", (evt) => { this.OnMapMove(evt) })
      this.$map.on("click", (evt) => { this.OnMapPointerClick(evt) })
      this.$map.on("mousemove", (evt) => { this.OnMapPointerMove(evt) })

      // Prepare live layer for the presentation of value data 
      this.$live = L.layerGroup().addTo(this.$map)

      // Customized control
      //this.initMapControls()

      // Init map view
      this.initMapView()

      // Then Render the data
      this.redraw()
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "MapData": function () {
      // Guard
      if(!this.$map) {
        return
      }
      if (this.autoFitBounds) {
        this.initMapView()
      }
      this.redraw()
    }
  },
  //////////////////////////////////////////
  created: function () {
    // Restore the Kept zoom in local
    if (this.keepZoomBy) {
      let zoom = Ti.Storage.local.getInt(this.keepZoomBy, this.zoom)
      this.geo.zoom = zoom
    }
  },
  //////////////////////////////////////////
  mounted: async function () {
    if ("Cluster" == this.displayType) {
      await Ti.Load([
        "@deps:leaflet/leaflet.markercluster-src.js",
        "@deps:leaflet/marker-cluster.css",
        "@deps:leaflet/marker-cluster.default.css"
      ])
    }

    this.initMap()
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-upload-multi-files-box.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/upload/multi-files-box/ti-upload-multi-files-box.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  data: () => ({
    "loading": false,
    "dragging": false
  }),
  /////////////////////////////////////////
  props: {
    //-------------------------------------
    // Data
    //-------------------------------------
    /**
     * Each item as :
     * 
     * ```js
     * {
     *    id: "xxx",              // Unique key
     *    src: "http://xxx...",   // Src to preview
     *    file: File,             // Local file, for prerender duraing uploading
     *    value: "id:xxx"         // Value of the item, could be String or Object
     *    link: "/path/to/open"   // Link to open in newtab
     * }
     * ```
     */
    "items": {
      type: Array,
      default: () => []
    },
    /**
     * Show the process `0.0-1.0` during the uploading
     * 
     * ```js
     * {
     *    itemId: 0,              // `0.0-1.0` during the uploading
     * }
     * ```
     */
    "progress": {
      type: Object,
      default: () => ({})
    },
    // check function => {ok:false, msg:"xxx"}
    "fileFilter": {
      type: Function
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "sortable": {
      type: Boolean,
      default: true
    },
    // support remove the objects
    "removable": {
      type: Boolean,
      default: true
    },
    "limit": {
      type: Number,
      default: 0
    },
    "readonly": {
      type: Boolean,
      default: false
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "showItemText": {
      type: Boolean,
      default: true
    },
    "blankAs": {
      type: Object,
      default: () => ({
        className: "as-small-tip align-left",
        icon: "zmdi-attachment-alt",
        text: "i18n:empty-data"
      })
    },
    //-----------------------------------
    // Measure
    //-----------------------------------
    "itemWidth": {
      type: [Number, String],
      default: undefined
    },
    "itemHeight": {
      type: [Number, String],
      default: undefined
    },
    "previewStyle": {
      type: Object
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-dragging": this.dragging,
        "no-dragging": !this.dragging,
        "is-show-text": this.showItemText,
        "no-show-text": !this.showItemText
      })
    },
    //--------------------------------------
    ItemStyle() {
      return Ti.Css.toStyle({
        width: this.itemWidth,
        height: this.itemHeight
      })
    },
    //--------------------------------------
    ItemPreviewStyle() {
      return Ti.Css.toStyle(this.previewStyle)
    },
    //--------------------------------------
    FileItems() {
      let list = []
      _.forEach(this.items, (it, index) => {
        let { id, src, icon, file, value, link, href, text } = it
        let type = value ? "obj" : "local";
        let thumb;
        // Show local file
        if (file) {
          thumb = { type: "localFile", value: file }
        }
        // Show icon
        else if (icon) {
          thumb = icon
        }
        // Show image
        else {
          thumb = { type: "image", value: src }
        }
        // Get progress
        let progress = _.get(this.progress, id)
        // Join item
        list.push({
          index,
          id, src, file, value, link, href, text,
          type, thumb, progress,
          className: `is-${type}`
        })
      })
      return list
    },
    //--------------------------------------
    ItemActions() {
      return [
        {
          icon: "fas fa-trash-alt",
          tip: "i18n:remove",
          name: "remove"
        },
        {
          icon: "fas fa-external-link-square-alt",
          tip: "i18n:open-newtab",
          name: "open"
        },
        {
          icon: "fas fa-download",
          tip: "i18n:download-to-local",
          name: "download"
        }
      ]
    },
    //--------------------------------------
    Values() {
      let list = []
      _.forEach(this.items, ({ value }) => {
        list.push(value)
      })
      return list
    },
    //--------------------------------------
    hasItems() {
      return !_.isEmpty(this.items)
    },
    //--------------------------------------
    isShowItemRemoveBtn() {
      return this.removable && !this.readonly
    },
    //--------------------------------------
    isShowAddBtn() {
      return !this.readonly && this.AvaCapCount != 0
    },
    //--------------------------------------
    AvaCapCount() {
      if (this.dragging) {
        return 0;
      }
      if (this.limit > 0) {
        return this.limit - this.Values.length
      }
      return -1
    },
    //--------------------------------------
    isShowActions() {
      return this.removable
        && !this.readonly
        && this.hasItems
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnMouseEnterPrefix(it) {

    },
    //--------------------------------------
    OnMouseLeaverPrefix(it) {

    },
    //--------------------------------------
    async OnClickAdd() {
      this.$refs.file.click()
    },
    //--------------------------------------
    async OnDropFiles(files) {
      if (!_.isEmpty(files) && this.isShowAddBtn) {
        let fs;
        // Do Filter
        if (_.isFunction(this.fileFilter)) {
          fs = []
          for (let f of files) {
            let re = this.fileFilter(f)
            if (re.ok) {
              fs.push(f)
            }
            // Show Error
            else {
              return await Ti.Alert(re.msg, { type: "warn" })
            }
          }
        } else {
          fs = files
        }

        // Guard
        if (_.isEmpty(fs)) {
          return
        }

        // Auto match the limit
        if (this.AvaCapCount > 0 && fs.length > this.AvaCapCount) {
          fs = _.slice(fs, 0, this.AvaCapCount)
        }
        this.$notify("upload", fs)
      }
    },
    //--------------------------------------
    async OnSelectLocalFilesToUpload(evt) {
      await this.OnDropFiles(evt.target.files)
      this.$refs.file.value = ""
    },
    //--------------------------------------
    OnRemoveItem(it) {
      this.$notify("remove", it)
    },
    //--------------------------------------
    OnOpenItem(it) {
      this.$notify("open", it)
    },
    //--------------------------------------
    OnClean() {
      this.$notify("clean")
    },
    //--------------------------------------
    switchItem(fromIndex, toIndex) {
      if (fromIndex != toIndex) {
        //console.log("switch item", { fromIndex, toIndex })
        let values = _.map(this.PreviewItems, it => it.value)
        Ti.Util.moveInArray(values, fromIndex, toIndex)
        this.$notify("change", values)
      }
    },
    //--------------------------------------
    initSortable() {
      if (!this.readonly && this.sortable && this.$refs.itemsCon) {
        new Sortable(this.$refs.itemsCon, {
          animation: 300,
          filter: ".as-new, .as-local",
          onStart: () => {
            this.$refs.itemsCon.turnOffTiDropFile = true
            this.dragging = true
          },
          onEnd: ({ oldIndex, newIndex }) => {
            this.$refs.itemsCon.turnOffTiDropFile = false
            this.switchItem(oldIndex, newIndex)
            _.delay(() => {
              this.dragging = false
            }, 100)
          }
        })
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "isShowAddBtn": function (newVal) {
      if (this.$refs.itemsCon) {
        this.$refs.itemsCon.turnOffTiDropFile = !newVal
      }
    }
  },
  //////////////////////////////////////////
  mounted: function () {
    this.initSortable()
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-media-audio.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/media/audio/ti-media-audio.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////////
  data : ()=>({
    $audio : undefined,

    dragging : false,
    loading  : false,
    seeking  : false,
    stalled  : false,
    canplay  : false,
    playing  : false,

    // Media internal status
    bufferedBegin : undefined,
    bufferedEnd : undefined,
    muted : undefined,
    paused : undefined,
    ended : undefined,
    volume : undefined,
    duration : undefined,   // In sec.
    currentTime : 0,        // In sec.
  }),
  ///////////////////////////////////////////////////////
  props : {
    //-----------------------------------
    // Data
    //-----------------------------------
    "src" : {
      type : String,
      default : null
    },
    //-----------------------------------
    // Measure
    //-----------------------------------
    "timelineWidth" : {
      type : [Number, String],
      default : "100%"
    },
    "barHeight" : {
      type : [Number, String],
      default : undefined
    },
    "conWidth" : {
      type : [Number, String],
      default : undefined
    },
    "conHeight" : {
      type : [Number, String],
      default : undefined
    },
    "width" : {
      type : [Number, String],
      default : undefined
    },
    "height" : {
      type : [Number, String],
      default : undefined
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //---------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width  : this.width, 
        height : this.height
      })
    },
    //---------------------------------------------------
    ControlClass() {
      return {
        "is-ready"    : this.canplay,
        "is-playing"  : this.playing,
        "is-paused"   : this.paused,
        "is-ended"    : this.ended
      }
    },
    //---------------------------------------------------
    ControlStyle() {
      return Ti.Css.toStyle({
        width  : this.conWidth, 
        height : this.conHeight
      })
    },
    //---------------------------------------------------
    PlayIcon() {
      if(this.loading || this.seeking) {
        return "fas-spinner fa-spin"
      }
      if(this.paused) {
        return "zmdi-play"
      }
      return "zmdi-pause"
    },
    //---------------------------------------------------
    VolumeIcon() {
      if(this.muted) {
        return "zmdi-volume-off"
      }
      if(!this.volume) {
        return "zmdi-volume-mute"  
      }
      if(this.volume < 0.5) {
        return "zmdi-volume-down"
      }
      return "zmdi-volume-up"
    },
    //---------------------------------------------------
    TimeTextWidth() {
      if(this.duration > 3600) {
        return "80px"
      }
      return "50px"
    },
    //---------------------------------------------------
    TimelineConfig() {
      return {
        precision : -1,
        width     : this.timelineWidth,
        barHeight : this.barHeight,
        format    : (v)=>{
          let tm = Ti.DateTime.parseTime(v, {unit:"s"})
          return tm.toString("min")
        },
        textWidth : this.TimeTextWidth
      }
    },
    //---------------------------------------------------
    VolumeConfig() {
      return {
        precision : -1,
        notifyFrequency : 100,
        height : "unset"
      }
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods : {
    //---------------------------------------------------
    OnTimelineChange(val) {
      // console.log("timline", val)
      this.$audio.currentTime = val
    },
    //---------------------------------------------------
    OnTimelineDragBegin() {
      this.dragging = true
    },
    OnTimelineDragEnd() {
      this.dragging = false
    },
    //---------------------------------------------------
    OnVolumeBarChange(val) {
      // console.log("volume", val)
      this.$audio.volume = val
    },
    //---------------------------------------------------
    /*
    Load:
      1. OnLoadsStart
      2. OnDurationChange
      3. OnLoadedMetaData
      4. OnLoadedData
      5. OnCanPlay
    
    Play
      1. OnPlay
      2. OnPause
      3. OnEnded

    Seek:
      1. OnSeeking
      2. OnSeeked
      3. OnCanPlay
    
    Volume
      1. OnVolumeChange
    */
    //---------------------------------------------------
    OnLoadsStart() {
      // console.log("OnLoadsStart")
      this.loading = true
      this.updateMediaState()
    },
    //---------------------------------------------------
    OnLoadedMetaData() {
      // console.log("OnLoadedMetaData")
    },
    //---------------------------------------------------
    OnDurationChange() {
      // console.log("OnDurationChange", this.$audio.duration)
      this.updateMediaState()
    },
    //---------------------------------------------------
    OnLoadedData() {
      // console.log("OnLoadedData")
      this.loading = false
      this.updateMediaState()
    },
    //---------------------------------------------------
    OnSeeking() {
      // console.log("OnSeeking")
      this.seeking = true
      this.updateMediaState()
    },
    //---------------------------------------------------
    OnSeeked() {
      // console.log("OnSeeked")
      this.seeking = false
      this.updateMediaState()
    },
    //---------------------------------------------------
    OnCanPlay() {
      // console.log("OnCanPlay")
      this.loading = false
      this.canplay = true
      this.updateMediaState()
    },
    //---------------------------------------------------
    OnPlay() {
      // console.log("OnPlay")
      this.playing = true
      this.updateMediaState()
    },
    //---------------------------------------------------
    OnPause() {
      // console.log("OnPause")
      this.playing = false
      this.updateMediaState()
    },
    //---------------------------------------------------
    OnEnded() {
      // console.log("OnEnded")
      this.playing = false
      this.updateMediaState()
    },
    //---------------------------------------------------
    OnTimeUpdate() {
      if(!this.dragging) {
        //console.log("OnTimeUpdate")
        this.currentTime = this.$audio.currentTime
        this.updateMediaBuffered()
      }
    },
    //---------------------------------------------------
    OnVolumeChange() {
      //console.log("OnVolumeChange", this.$audio.volume, this.$audio.muted)
      this.volume = this.$audio.volume
      this.muted = this.$audio.muted
    },
    //---------------------------------------------------
    OnWaiting() {
      // console.log("OnWaiting")
      this.loading = true
    },
    //---------------------------------------------------
    OnStalled() {
      // console.log("OnWaiting")
      this.stalled = true
    },
    //---------------------------------------------------
    updateMediaBuffered() {
      let buf = this.$audio.buffered
      if(buf.length >= 1) {
        this.bufferedBegin = this.$audio.buffered.start(0)
        this.bufferedEnd   = this.$audio.buffered.end(0)
      } else {
        this.bufferedBegin = undefined
        this.bufferedEnd   = undefined
      }
    },
    //---------------------------------------------------
    updateMediaState() {
      this.updateMediaBuffered()
      this.paused      = this.$audio.paused
      this.ended       = this.$audio.ended
      this.volume      = this.$audio.volume
      this.muted       = this.$audio.muted
      this.duration    = this.$audio.duration
      this.currentTime = this.$audio.currentTime
    },
    //---------------------------------------------------
    togglePlay() {
      if(this.canplay) {
        if(this.paused) {
          this.$audio.play()
        } else {
          this.$audio.pause()
        }
      }
    },
    //---------------------------------------------------
    toggleMuted() {
      this.$audio.muted = !this.muted
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  mounted : function() {
    this.$audio = this.$refs.audio
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-tile-comment.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/tile/comment/web-tile-comment.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  props : {
    "value" : {
      type : Object,
      default : ()=>({})
    },
    "mapping": {
      type: Object,
      default: ()=>({
        userId     : "uid",
        userName   : "unm",
        avatar     : "avatar",
        content    : "brief",
        createTime : "ct"
      })
    },
    "avatarSrc": {
      type: String,
      default: undefined
    },
    "userIcon" : {
      type : [String,Object],
      default: "fas-user"
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    Post() {
      let it = Ti.Util.translate(this.value, this.mapping)
      return it || {}
    },
    //--------------------------------------
    AvatarIcon() {
      let avatar = _.get(this.Post, "avatar")
      if(avatar && this.avatarSrc) {
        return {
          type  : "image",
          value : Ti.S.renderBy(this.avatarSrc, this.Post)
        }
      }
      return this.userIcon
    },
    //--------------------------------------
    CreateTimeText() {
      if(this.Post.createTime)
        return Ti.DateTime.timeText(this.Post.createTime)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'thing-files-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/thing/manager/com/thing-files/thing-files-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "dirName" : {
    type : String,
    default : undefined
  },
  "dataHome" : {
    type : String,
    default : undefined
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "files" : {
    type: Object,
    default: undefined
  },
  "preview" : {
    type : Object,
    default: undefined
  },
  "previewEdit" : {
    type : Object,
    default: undefined
  },
  "actions" : {
    type : Array,
    default : ()=>[{
        "name" : "reloading",
        "type" : "action",
        "icon" : "zmdi-refresh",
        "tip" : "i18n:refresh",
        "altDisplay" : {
          "icon" : "zmdi-refresh zmdi-hc-spin"
        },
        "action" : "$parent:reloadData"
      },{
        "type" : "line"
      }, {
        "name" : "deleting",
        "type" : "action",
        "icon" : "zmdi-delete",
        "text" : "i18n:del",
        "altDisplay" : {
          "icon" : "zmdi-refresh zmdi-hc-spin",
          "text" : "i18n:del-ing"
        },
        "action" : "$parent:doDeleteSelected"
      },{
        "type" : "line"
      },{
        "name" : "upload",
        "type" : "action",
        "icon" : "zmdi-cloud-upload",
        "text" : "i18n:upload",
        //"action" : "commit:main/files/showUploadFilePicker"
        "action" : "$parent:doUploadFiles"
      }]
  },
  "stateLocalKey" : {
    type : String,
    default : null
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "dirNameTip" : {
    type : String,
    default : undefined
    //default : "i18n:thing-files"
  },
  "dirNameComType" : {
    type : String,
    default : "ti-droplist"
  },
  "dirNameOptions" : {
    type : Array,
    default : ()=>[{
      icon  :"zmdi-collection-image",
      text  :"i18n:media",
      value : "media"
    }, {
      icon  :"zmdi-attachment-alt",
      text  :"i18n:attachment",
      value : "attachment"
    }]
  },
  "nilIcon": {
    type: String,
    default: "fas-braille"
  },
  "nilText": {
    type: String,
    default: null
  }
  //-----------------------------------
  // Measure
  //-----------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-input-icon.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/icon/ti-input-icon.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data: ()=>({
    hideBorder : false,
    myHoverIcon : null,
    status  : "collapse"
  }),
  ////////////////////////////////////////////////////
  props : {
    // "hideBorder"  : {
    //   type : Boolean,
    //   default : false
    // },
    "value" : {
      type : [String, Object],
      default : null
    },
    "options": {
      type: [Array, String],
      default: "stars"
    },
    "iconSize" : {
      type : [Number,String],
      default : null
    },
    "dropWidth" : {
      type : [Number, String],
      default : "4rem"
    },
    "dropHeight" : {
      type : [Number, String],
      default : "4.2rem"
    },
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return Ti.Css.mergeClassName({
        "show-border"  : !this.hideBorder,
        "hide-border"  : this.hideBorder,
      }, this.className)
    },
    //------------------------------------------------
    ValueStyle() {
      return {
        "font-size" : Ti.Css.toSize(this.iconSize)
      }
    },
    //------------------------------------------------
    isCollapse() {return "collapse"==this.status},
    isExtended() {return "extended"==this.status},
    //------------------------------------------------
    hasValue () {
      return !Ti.Util.isNil(this.value)
    },
    //------------------------------------------------
    TipIcon () {
      return  this.myHoverIcon || this.value
    },
    //------------------------------------------------
    OptionIcons() {
      let list = []
      let icons;
      if(_.isArray(this.options)) {
        icons = this.options
      } else {
        icons = this.queryIcons(this.options)
      }
      _.forEach(icons, (icon, index)=>{
        let m = /^([a-z]+)-(.+)$/.exec(icon)
        list.push({
          value : icon,
          index : index,
          type  : m[1],
          name  : m[2]
        })
      })
      return list
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnToggleDrop() {
      this.status = ({
        "collapse" : "extended",
        "extended" : "collapse"
      })[this.status]
    },
    //------------------------------------------------
    OnSelectIcon({value}={}) {
      this.$notify("change", value)
    },
    //------------------------------------------------
    OnSelectIconAndCollapse({value}={}) {
      this.$notify("change", value)
      this.status = "collapse"
    },
    //------------------------------------------------
    OnChangedIcon() {
      let icon = _.trim(this.$refs.input.value)
      this.$notify("change", icon)
    },
    //------------------------------------------------
    OnHoverIcon({value}={}) {
      this.myHoverIcon = value
    },
    //------------------------------------------------
    OnLeaveIcon() {
      this.myHoverIcon = null
    },
    //------------------------------------------------
    OnClearIcon() {
      this.$notify("change", null)
    },
    //------------------------------------------------
    doCollapse() {
      this.status = "collapse"
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-footer.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/footer/web-footer.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  /////////////////////////////////////////
  props : {
    "logo" : {
      type : [String, Object],
      default : "zmdi-chevron-down"
    },
    "brief" : {
      type : String,
      default : null
    },
    "copyright" : {
      type : String,
      default : null
    }
  },
  //////////////////////////////////////////
  computed : {
    //......................................
    
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-chart-raw-pie.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/chart/raw/pie/ti-chart-raw-pie.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  props : {
    "percentKey" : {
      type : String,
      default : "percent"
    },
    "precise" : {
      type : Number,
      default : 2
    },
    "labelX" : {
      type : [Boolean, Object, String, Function],
      default: "${i18n:name} : ${percent}% : ${value}"
    },
    "tooltip" : {
      type : [Boolean, Object],
      default : ()=>({
        showTitle: false,
        showMarkers : false,
        showCrosshairs : false,
        itemTpl: '<li class="g2-tooltip-list-item">{name} : {percent}% : {value}</li>',
      })
    },
    "view" : {
      type : Object,
      default : ()=>({
        tooltip : ["name*percent*value", (n,p,v)=>{
          return {
            name: n, percent: p, value: v
          }
        }]
      })
    },
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    ChartSetup() {
      return (chart, data)=>{
        let {list, sum} = this.evalXYData(data)
        if(_.isEmpty(list))
          return

        // Eval percent
        for(let li of list) {
          let v = li[this.positionY]
          li[this.percentKey] = Ti.Num.precise(v * 100 / sum, this.precise)
        }

        //console.log(list)
        chart.data(list);

        // Axis/Tick/Tooltip ...
        this.applyChartSetup(chart)
        
        // Coordinate
        chart.coordinate('theta', {
          radius: 0.75
        });
        
        const view = chart.interval().adjust('stack')
        view.position(this.percentKey).color(this.positionX);

        // View label
        this.applyViewLabel(view)

        this.applyViewOptions(view, {
          style : {
            opacity: 0.4
          },
          state : {
            active : {
              style: (element) => {
                const shape = element.shape;
                return {
                  matrix: G2.Util.zoom(shape, 1.5),
                }
              }
            }
          }
        }, this.view)
      
        chart.interaction('element-single-selected');

      } // ~ function
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-roadblock.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/roadblock/ti-roadblock.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  props: {
    "icon": {
      type: String,
      default: "fas-exclamation-triangle"
    },
    "text": {
      type: String,
      default: null
    },
    /**
     * {icon,text,href,newtab}
     */
    "links": {
      type: [Object, Array],
      default: () => []
    }
  },
  /////////////////////////////////////////////////////
  computed: {
    //-------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //-------------------------------------------------
    hasLinks() {
      return !_.isEmpty(this.links)
    },
    //-------------------------------------------------
    TheLinks() {
      if (!this.hasLinks) {
        return []
      }
      let links = _.concat(this.links)
      let list = []
      _.forEach(links, li => {
        let it = _.cloneDeep(li)
        it.target = li.newtab ? "_blank" : null
        list.push(it)
      })
      return list;
    }
    //-------------------------------------------------
  }
  /////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'm-thing-config.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/thing/mod/config/m-thing-config.mjs'] = (function(){
//---------------------------------------
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////
  mutations : {
    setMeta(state, meta) {
      state.meta = meta
    },
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    },
    setSchema(state, schema) {
      state.schema = schema
    },
    mergeSchema(state, schema) {
      state.schema = _.merge({}, state.schema, schema)
    },
    setLayout(state, layout) {
      state.layout = _.pick(layout, ["desktop","tablet","phone"])
      state.shown = layout.shown || {}
      state.listOpen = layout.listOpen || {}
    },
    setActions(state, actions) {
      state.actions = actions
    },
    mergeShown(state, shown) {
      if(shown && !_.isEmpty(shown)) {
        state.shown = _.assign({}, state.shown, shown)
      }
    },
    persistShown(state) {
      if(state.meta && state.meta.id) {
        Ti.Storage.session.setObject(`${state.meta.id}-shown`, state.shown)
      }
    },
    restoreShown(state) {
      if(state.meta && state.meta.id) {
        let shown = Ti.Storage.session.getObject(`${state.meta.id}-shown`)
        state.shown = _.assign({}, state.shown, shown)
      }
    }
  }
  ////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'form-group-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/form/com/form-group/form-group-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "type" : {
    type : String,
    default : "Group"
  },
  "icon" : {
    type : String,
    default : null
  },
  "title" : {
    type : String,
    default : null
  },
  "fields" : {
    type : Array,
    default : ()=>[]
  },
  "data" : {
    type : Object,
    default : null
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "fieldStatus" : {
    type : Object,
    default : ()=>({})
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "screenMode" : {
    type : String,
    default : "auto",
    validator : (val)=>/^(auto|desktop|tablet|phone)$/.test(val)
  },
  "statusIcons" : {
    spinning : 'fas-spinner fa-spin',
    error    : 'zmdi-alert-polygon',
    warn     : 'zmdi-alert-triangle',
    ok       : 'zmdi-check-circle',
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-chart-combo.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/chart/combo/ti-chart-combo.mjs'] = (function(){
//////////////////////////////////////////////////////
var _CHARTS = {
  "pie" : {
    "icon"  : "im-pie-chart",
    "tip" : "i18n:chart-pie",
    "comPath" : "@com:ti/chart/raw/pie",
    "comType" : "TiChartRawPie",
    "comConf" : {}
  },
  "bar" : {
    "icon"  : "im-bar-chart",
    "tip" : "i18n:chart-bar",
    "comPath" : "@com:ti/chart/raw/bar",
    "comType" : "TiChartRawBar",
    "comConf" : {}
  },
  "line" : {
    "icon"  : "im-line-chart-up",
    "tip" : "i18n:chart-line",
    "comPath" : "@com:ti/chart/raw/line",
    "comType" : "TiChartRawLine",
    "comConf" : {}
  },
  "rank" : {
    "icon"  : "zmdi-sort-amount-desc",
    "tip" : "i18n:chart-rank",
    "comPath" : "@com:ti/chart/raw/rank",
    "comType" : "TiChartRawRank",
    "comConf" : {}
  }
}
//////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data: ()=>({
    myActionStatus : {
      reloading : false,
      force : false
    },
    myChartCom : undefined
  }),
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //------------------------------------------------
    hasChartCom() {
      return this.myChartCom && this.myChartCom.comType
        ? true
        : false
    },
    //------------------------------------------------
    hasMultiChartNames() {
      return !_.isEmpty(this.nameList) && this.nameList.length > 1
    },
    //------------------------------------------------
    hasSpanOptions(){
      return !_.isEmpty(this.spanOptions)
    },
    //------------------------------------------------
    ChartNameListWidth() {
      return Ti.Css.toSize(this.nameListWidth)
    },
    //------------------------------------------------
    ChartNameListOptions() {
      return {
        prefixIconForClean : false,
        keepWidthWhenDrop : true,
        hover: "suffixIcon",
        iconBy: "icon",
        valueBy : "name",
        textBy  : "title",
        dropDisplay : ["<icon:fas-eye>","title"]
      }
    },
    //------------------------------------------------
    ChartTitle() {
      if(!_.isEmpty(this.nameList)){
        for(let li of this.nameList) {
          if(li.name == this.name) {
            return li.title
          }
        }
      }
      return this.name
    },
    //------------------------------------------------
    HeadActionBarItems() {
      return [{
        "name"  : "reloading",
        "type" : "action",
        "icon" : "zmdi-refresh",
        "text" : "i18n:refresh",
        "altDisplay" : {
          "icon" : "zmdi-refresh zmdi-hc-spin",
          "text" : "i18n:loading"
        },
        "action" : ()=> this.reloadData(false),
      }, {
        "type" : "group",
        "icon" : "im-menu-dot-v",
        "items" : [{
            "name"  : "forceReloading",
            "type" : "action",
            "icon" : "im-reset",
            "text" : "i18n:refresh-hard",
            "altDisplay" : {
              "icon" : "zmdi-refresh zmdi-hc-spin",
              "text" : "i18n:loading",
              "match" : {
                "reloading" : true,
                "force" : true
              }
            },
            "action" : ()=> this.reloadData(true),
          }, {
            "name"  : "forceClearReloading",
            "type" : "action",
            "icon" : "im-reset",
            "text" : "i18n:refresh-hard-clear",
            "altDisplay" : {
              "icon" : "zmdi-refresh zmdi-hc-spin",
              "text" : "i18n:loading",
              "match" : {
                "reloading" : true,
                "force" : true
              }
            },
            "action" : ()=> this.reloadData(true, true),
          }]
      }]
    },
    //------------------------------------------------
    TheDate() {
      let d = Ti.DateTime.moveDate(new Date(), -1)
      if(this.date) {
        d = Ti.DateTime.parse(this.date)
      }
      return Ti.DateTime.format(d, "yyyy-MM-dd")
    },
    //------------------------------------------------
    TheMaxDate() {
      let d = Ti.DateTime.moveDate(new Date(), -1)
      if(this.maxDate) {
        d = Ti.DateTime.parse(this.maxDate)
      }
      return d
    },
    //------------------------------------------------
    TheSpan() {
      return this.span || "7d"
    },
    //------------------------------------------------
    DateRangeText() {
      // Prepare the text
      let str = []

      // Get date
      let d = this.TheDate;
      str.push(Ti.DateTime.format(d, "yyyy-MM-dd"))

      // Get span
      let m = /^(\d+)([smhdw])?$/.exec(this.TheSpan)
      if(m) {
        let val = parseInt(m[1])
        let unitText = ({
          "w"  : "dt-u-week",
          "d"  : "dt-u-day",
          "h"  : "dt-u-hour",
          "m"  : "dt-u-min",
          "s"  : "dt-u-sec",
          "ms" : "dt-u-ms"
        })[m[2] || "ms"]
        let s = `${val}${Ti.I18n.get(unitText)}`
        str.push(Ti.I18n.getf("dt-in", {val:s}))
      }

      return str.join(" ")
    },
    //------------------------------------------------
    hasMultiChartTypes() {
      return !_.isEmpty(this.chartTypes) && this.chartTypes.length > 0
    },
    //------------------------------------------------
    ChartTypeList() {
      let types = this.chartTypes
      if(_.isString(types)) {
        types = Ti.S.toArray(types)
      }
      let list = []
      for(let type of types) {
        let li =this.loadChartDefine(type)
        if(li) {
          li.value = type
          list.push(li)
        }
      }
      return list
    },
    //------------------------------------------------
    ChartType() {
      if(this.type)
        return this.type
      
      if(!_.isEmpty(this.chartTypes))
        return _.first(this.ChartTypeList).value
      
      return undefined
    },
    //------------------------------------------------
    ChartData() {
      if(_.isArray(this.data)) {
        return this.data
      }
      return []
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnChartNameChange(name) {
      this.$notify("change:chart:name", name)
    },
    //------------------------------------------------
    OnChartTypeChange(name) {
      this.$notify("change:chart:type", name)
    },
    //------------------------------------------------
    async OnPickDateRange() {
      // Open the form dialog
      let reo = await Ti.App.Open({
        title : "i18n:edit",
        width  : "5rem",
        height : "5rem",
        result : {
          date : this.TheDate,
          span : this.TheSpan
        },
        model : {prop:"data", event:"change"},
        comType : "TiForm",
        comConf : [{
          fields : [{
              title : "i18n:stat-date-at",
              name  : "date",
              comType : "TiInputDate",
              comConf : {}
            }, {
              title : "i18n:stat-date-span",
              name  : "span",
              tip   : "i18n:dt-u-day",
              width : "auto",
              comType : "TiSwitcher",
              comConf : {
                options : this.spanOptions
              }
            }]
        }]
      })

      // User Cancel
      if(!reo || !reo.date)
        return

      // Invalid date
      let d = Ti.DateTime.parse(reo.date)
      if(d.getTime() > this.TheMaxDate.getTime()) {
        return await Ti.Toast.Open("i18n:stat-date-at-oor", "warn")
      }

      this.$notify("change:chart:datespan", {
        date : reo.date,
        span : reo.span
      })
    },
    //------------------------------------------------
    loadChartDefine(type) {
      let chart = _.get(this.chartDefines, type)

      if(!chart) {
        chart = _.get(_CHARTS, type)
      }

      if(chart) {
        return _.cloneDeep(chart)
      }
    },
    //------------------------------------------------
    reloadData(force=false, cleanCache=false) {
      this.myActionStatus = {reloading:true,  force}
      this.$notify("reload:data", {
        force, cleanCache, 
        done: ()=>{
          // console.log("reloadData done!")
          this.myActionStatus = {}
        }
      })
    },
    ////////////////////////////////////////////////////
    async reloadChartCom(type=this.type) {
      let chart = this.loadChartDefine(type)
      if(!chart) {
        console.warn(`Fail to reloadChartCom by type : "${type}"`)
        return
      }

      // Load chart com
      await Ti.App(this).loadView({
        comType : chart.comPath
      })

      //console.log({type, chart})
      // Eval The Chart Com
      let comType = chart.comType
      let comConf = _.assign({}, 
          chart.comConf, 
          _.get(this.chartOptions, this.type))

      // Assign com
      this.myChartCom = {comType, comConf}
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    "type" : {
      handler : "reloadChartCom",
      immediate : true
    },
    "name" : function() {
      this.reloadChartCom()
    }
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'm-obj-meta-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/obj-meta/m-obj-meta-actions.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //--------------------------------------------
  async updateMeta({state, commit}, {name, value}={}) {
    //console.log("I am update", name, value)
    let data = Ti.Types.toObjByPair({name, value})

    // Check Necessary
    if(_.isMatchWith(state.meta, data, _.isEqual)) {
      return
    }

    // Do the update
    commit("setStatus", {saving:true})
    commit("setFieldStatus", {name, status:"spinning"})
    let json = JSON.stringify(data)
    let oid = state.meta.id
    let cmdText = `obj 'id:${oid}' -ocqn -u`
    let newMeta = await Wn.Sys.exec2(cmdText, {input:json, as:"json"})

    commit("setMeta", newMeta)
    commit("clearFieldStatus", name)
    commit("setStatus", {saving:false})

    return newMeta
  },
  //--------------------------------------------
  /***
   * Get obj by ID
   */
  async loadMetaById({dispatch}, id) {
    dispatch("loadMeta", `id:${id}`)
  },
  //--------------------------------------------
  /***
   * Get obj meta by path string
   */
  async loadMeta({state, commit}, str){
    // If wihtout ID reset
    if(!str) {
      commit("reset")
    }
    // Load from server
    else {
      commit("setStatus", {reloading:true})
      let meta = await Wn.Io.loadMeta(str)
      commit("setMeta", meta)
      commit("setStatus", {reloading:false})
    }
  },
  //--------------------------------------------
  /***
   * Get obj ancestors by meta
   */
  async loadAncestors({state, commit}, meta=state.meta) {
    commit("setStatus", {reloading:true})
    let ancestors = await Wn.Io.loadAncestors("id:"+meta.id)
    let parent = _.last(ancestors)
    commit("setMeta", meta)
    commit("setParent", parent)
    commit("setAncestors", ancestors)
    commit("setStatus", {reloading:false})
  },
  //--------------------------------------------
  /***
   * Load obj meta/ancestors/children/content
   * 
   * @param str{String|Object} : string as the path,
   *        object is the meta
   */
  async reload({state, dispatch}, str) {
    if(_.isString(str)) {
      await dispatch("loadMeta", str)
      await dispatch("loadAncestors")
    }
    // Object as the meta object
    else if(_.isPlainObject(str)) {
      await dispatch("loadAncestors", str)
    }
    // return the curent meta anyway
    return state.meta
  }
  //--------------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-upload-file.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/upload/file/web-upload-file.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  data: () => ({
    srcAsUrl: false,
    src_ts: null,
    previewIcon: null,
    uploadFile: null,
    progress: -1
  }),
  /////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "value": {
      type: [String, Object],
      default: null
    },
    // raw value is WnObj
    // If declare the valueType
    // It will transform the WnObj
    // to relaitve value mode
    "valueType": {
      type: String,
      default: "obj",
      validator: v => /^(obj|idPath|id)$/.test(v)
    },
    "transObj": {
      type: [Function, Array],
      default: () => ['id', 'nm', 'thumb', 'title', 'mime', 'tp', 'sha1', 'len']
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    // Input a image link directly
    "exlink": {
      type: Boolean,
      default: false
    },
    "maxWidth": {
      type: [String, Number],
      default: undefined
    },
    "maxHeight": {
      type: [String, Number],
      default: undefined
    },
    // Display width
    "width": {
      type: [String, Number],
      default: undefined
    },
    // Display height
    "height": {
      type: [String, Number],
      default: undefined
    },
    // support remove the objects
    "removable": {
      type: Boolean,
      default: true
    },
    // which type supported to upload
    // nulll or empty array will support any types
    "supportTypes": {
      type: [String, Array],
      default: () => []
      //default : ()=>["png","jpg","jpeg","gif"]
    },
    "minFileSize": {
      type: Number,
      default: 0
    },
    "maxFileSize": {
      type: Number,
      default: 0
    },
    // which mime supported to upload
    // nulll or empty array will support any mimes
    "supportMimes": {
      type: [String, Array],
      default: () => []
      //default : ()=>["image/png","image/jpeg","image/gif"]
    },
    "uploadUrl": {
      type: String,
      default: "/api/thing/file/add"
    },
    "uploadParams": {
      type: Object,
      default: () => ({})
    },
    // Load the file meta when value is String
    "getFilePreview": {
      type: Function,
      default: undefined
    },
    "defaultPreviewIcon": {
      type: [String, Object],
      default: "far-file"
    },
    "getFileDownloadLink": {
      type: [Function, Object]
    },
    "uploadedBy": {
      type: [Function, String],
      default: "change"
    },
    "removeBy": {
      type: [Function, String],
      default: "remove:file"
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    AcceptTypes() {
      if (_.isString(this.supportTypes))
        return this.supportTypes.split(",")
      return this.supportTypes
    },
    //--------------------------------------
    AcceptMimes() {
      if (_.isString(this.supportMimes))
        return this.supportMimes.split(",")
      return this.supportMimes
    },
    //--------------------------------------
    // Display image for <ti-thumb>
    PreviewIcon() {
      if (this.srcAsUrl) {
        return {
          type: "image", value: this.value
        }
      }
      //....................................
      if (this.oFile) {
        //..................................
        // Image
        if (Wn.Obj.isMime(this.oFile, /^(image\/)/)) {
          let ss = ["/o/content?str=id:", this.oFile.id]
          if (this.src_ts) {
            ss.push("&_t=")
            ss.push(this.src_ts)
          }
          return {
            type: "image", value: ss.join("")
          }
        }
        //..................................
        // Video
        if (Wn.Obj.isMime(this.oFile, /^(video\/)/)) {
          let ss = ["/o/content?str=id:", this.oFile.video_cover]
          if (this.src_ts) {
            ss.push("&_t=")
            ss.push(this.src_ts)
          }
          return {
            type: "image", value: ss.join("")
          }
        }
        //..................................
        // Others just get the icon font
        return Wn.Util.getObjIcon(this.oFile)
      }
    },
    //--------------------------------------
    PreviewType() {
      return this.srcAsUrl ? "link" : "obj"
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    async assertListHas(list, str, invalidMsg, vars) {
      if (!_.isEmpty(list)) {
        let invalid = true
        for (let li of list) {
          if (li == str) {
            invalid = false
            break
          }
        }
        if (invalid) {
          await Ti.Alert(invalidMsg, {
            type: "warn",
            icon: "zmdi-alert-triangle",
            vars
          })
          return false
        }
      }
      return true
    },
    //--------------------------------------
    async OnExlink() {
      let value = this.srcAsUrl ? this.value : undefined
      let src = _.trim(await Ti.Prompt("i18n:exlink-tip-img", {
        width: "80%",
        value
      }))
      // User cancel
      if (!src)
        return

      this.$notify("change", src)
    },
    //--------------------------------------
    async OnOpen() {
      if (this.srcAsUrl) {
        await Ti.Be.Open(this.value)
      }
      // remove the thumb file
      else if (this.previewIcon) {
        let link;
        // Render by template
        if (_.isFunction(this.getFileDownloadLink)) {
          link = this.getFileDownloadLink(this.value)
        }
        // Customized link
        else if (this.getFileDownloadLink) {
          link = Ti.Util.explainObj(this.value, this.getFileDownloadLink)
        }

        // Guard
        if (!link) {
          return await Ti.Alert("Download link without defined!", { type: "warn" })
        }
        //console.log("it will open ", link)
        await Ti.Be.Open(link)
      }
    },
    //--------------------------------------
    async OnRemove() {
      // Guard
      if (!this.removeBy) {
        return await Ti.Alert("Remove action without defined!", { type: "warn" })
      }
      // Customized
      if (_.isFunction(this.removeBy)) {
        await this.removeBy(this.value)
      }
      // Emit message
      if (_.isString(this.removeBy)) {
        this.$notify(this.removeBy, this.value)
      }
    },
    //--------------------------------------
    async OnUpload(file) {
      //console.log("it will upload ", file)
      //................................
      // Check file size
      let fileSize = file.size
      if (this.minFileSize > 0 && fileSize < this.minFileSize) {
        return await Ti.Alert("i18n:wn-invalid-fsize-min", {
          type: "warn",
          icon: "zmdi-alert-triangle",
          vars: {
            minSize: Ti.S.sizeText(this.minFileSize),
            fileSize: Ti.S.sizeText(fileSize)
          }
        })
      }
      if (this.maxFileSize > 0 && fileSize >= this.maxFileSize) {
        return await Ti.Alert("i18n:wn-invalid-fsize-max", {
          type: "warn",
          icon: "zmdi-alert-triangle",
          vars: {
            maxSize: Ti.S.sizeText(this.maxFileSize),
            fileSize: Ti.S.sizeText(fileSize)
          }
        })
      }
      //................................
      // Check for support Types
      let type = Ti.Util.getSuffixName(file.name, true)
      if (!await this.assertListHas(
        this.AcceptTypes, type,
        'i18n:wn-invalid-types',
        { current: type, supports: this.AcceptTypes.join(", ") })
      ) {
        return
      }
      if (!await this.assertListHas(
        this.AcceptMimes, file.type,
        'i18n:wn-invalid-mimes',
        { current: file.type, supports: this.AcceptMimes.join(", ") })
      ) {
        return
      }
      //................................
      // Upload file to destination
      this.uploadFile = file
      this.progress = 0
      let url = this.uploadUrl
      let params = Ti.Util.explainObj(file, this.uploadParams)


      let reo = await Ti.Http.post(url, {
        file,
        progress: (pe) => {
          this.progress = pe.loaded / pe.total
        },
        params: params,
        as: "json"
      })

      //................................
      // Reset upload
      this.uploadFile = null
      this.progress = -1

      //................................
      // Fail to upload
      // if (!ok) {
      //   await Ti.Alert(`i18n:${msg}`, { type: "warn", icon: "zmdi-alert-triangle" })
      //   return
      // }

      //................................
      // done
      this.src_ts = Date.now()

      //................................
      // Transform value
      let vTrans = ({
        idPath: (obj) => `id:${obj.id}`,
        id: (obj) => obj.id,
        nm: (obj) => obj.nm,
        obj: (obj) => {
          if (_.isFunction(this.transObj)) {
            return this.transObj(obj)
          }
          return _.pick(obj, this.transObj)
        },
        wnobj: (obj) => obj
      })[this.valueType]

      let val = vTrans(reo)

      //................................
      if (_.isFunction(this.uploadedBy)) {
        this.uploadedBy(val)
      }
      // Emit event
      else if (this.uploadedBy) {
        this.$notify(this.uploadedBy, val)
      }
    },
    //--------------------------------------
    async reload() {
      // Guard
      if (!this.value) {
        this.srcAsUrl = false
        this.previewIcon = null
        return
      }

      // Ex-link image src
      this.srcAsUrl = /^https?:\/\//.test(this.value)
      if (this.srcAsUrl) {
        this.previewIcon = {
          type: "image", value: this.value
        }
        return
      }

      // Customzied preview icon
      if (_.isFunction(this.getFilePreview)) {
        this.previewIcon = await this.getFilePreview(this.value, {
          timestamp: this.src_ts
        })
      }
      // Default preview icon
      else {
        this.previewIcon = this.defaultPreviewIcon
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "value": function () {
      this.reload()
    }
  },
  //////////////////////////////////////////
  mounted: async function () {
    await this.reload()
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-table-quick-action.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/table/quick/ti-table-quick-action.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------------------
  OnDblClickRow(row={}) {
    let rowId = row.id
    row = this.findRowById(rowId)
    if(row) {
      if(this.notifyOpenName) {
        this.$notify(this.notifyOpenName, row)
      }
      if(_.isFunction(this.onOpen)) {
        this.onOpen(row)
      }
    }
  },
  //-----------------------------------------------
  OnClickRow(row, $event) {
    let rowId  = row.id
    let shift  = $event.shiftKey
    let toggle = ($event.ctrlKey || $event.metaKey)
    // Multi + Shift Mode
    if(shift && this.multi) {
      this.selectRowsToCurrent(rowId)
    }
    // Multi + Toggle Mode
    else if(toggle && this.multi) {
      this.toggleRow(rowId)
    }
    // Toggle Mode
    else if(!Ti.Util.isNil(rowId) && !this.autoCheckCurrent) {
      this.toggleRow(rowId)
    }
    // Single Mode
    else {
      this.selectRow(rowId)
    }
  },
  //-----------------------------------------------
  OnClickRowChecker(row, $event) {
    let rowId  = row.id
    let shift  = $event.shiftKey
    if(this.multi) {
      // Shift Mode
      if(shift) {
        this.selectRowsToCurrent(rowId)
      }
      // Simple Toggle Mode
      else {
        this.toggleRow(rowId)
      }
    }
    // Single Mode
    else {
      this.selectRow(rowId)
    }
  },
  //--------------------------------------
  OnClickHeadChecker() {
    // Cancel All
    if(this.isAllChecked) {
      this.cancelRow()
    }
    // Check All
    else {
      this.checkRow()
    }
  },
  //-----------------------------------------------
  // Publis methods
  //-----------------------------------------------
  toggleRow(rowId) {
    if(this.myCheckedIds[rowId]) {
      this.cancelRow(rowId)
    } else {
      this.checkRow(rowId)
    }
  },
  canSelectRow(payload) {
    if(_.isFunction(this.onBeforeChangeSelect)) {
      let canSelect = this.onBeforeChangeSelect(payload)
      if(false === canSelect) {
        return false
      }
    }
    return true
  },
  //-----------------------------------------------
  checkRow(rowId) {
    let idMap = _.cloneDeep(this.myCheckedIds)
    let curId = this.myCurrentId
    let index = this.myLastIndex
    let rowIndex = this.findRowIndexById(rowId)
    // All rows
    if(_.isUndefined(rowId)) {
      idMap = {}
      _.forEach(this.TableData, (row)=>{
        idMap[row.id] = true
      })
    }
    // Multi rows
    else if(_.isArray(rowId)) {
      let lastRowId = _.last(rowId)
      _.forEach(rowId, (r_id)=>{
        idMap[r_id] = true
      })
      if(this.autoCheckCurrent) {
        index = this.findRowIndexById(lastRowId)
      }
    }
    // Object
    else if(_.isPlainObject(rowId)) {
      idMap = _.cloneDeep(rowId)
      if(this.autoCheckCurrent) {
        let lastRowId = undefined
        for(let key in idMap) {
          lastRowId = key
          break;
        }
        index = this.findRowIndexById(lastRowId)
      }
    }
    // Single row
    else {
      idMap[rowId] = true
      if(this.autoCheckCurrent) {
        index = rowIndex
      }
    }
    // Eval context
    let emitContext = this.getEmitContext(curId, idMap)
    // Private Mode
    this.myCheckedIds = idMap
    this.myCurrentId  = curId
    this.myLastIndex  = rowIndex
    // Notify Changes
    this.doNotifySelect(emitContext)
  },
  //-----------------------------------------------
  async cancelRow(rowId) {
    let idMap = _.cloneDeep(this.myCheckedIds)
    let curId  = this.myCurrentId
    let index = -1
    //this.LOG("cancelRow", rowId)
    if(_.isUndefined(rowId)) {
      idMap = {}
      curId = null
    }
    // Single row
    else {
      index = this.findRowIndexById(rowId)
      idMap[rowId] = false
      if(this.autoCheckCurrent && curId == rowId) {
        curId = null
      }
    }
    // Eval context
    let emitContext = this.getEmitContext(curId, idMap)

    if(!(await this.canSelectRow(emitContext))) {
      return;
    }

    // Private Mode
    this.myCheckedIds = idMap
    this.myCurrentId  = curId
    this.myLastIndex  = index
    // Notify Changes
    this.doNotifySelect(emitContext)
  },
  //-----------------------------------------------
  selectRow(rowId, {quiet=false, payload}={}) {
    let idMap = {}
    let curId = null
    // Change the current & checked
    if(this.autoCheckCurrent) {
      idMap = rowId ? {[rowId]:true} : {}
      curId = rowId || null
    }
    // Just change to current
    else {
      idMap = _.cloneDeep(this.myCheckedIds)
      curId = rowId
    }

    let emitContext = this.getEmitContext(curId, idMap)

    if(!(this.canSelectRow(emitContext))) {
      return;
    }

    this.myCheckedIds = idMap
    this.myCurrentId  = curId
    this.myLastIndex  = this.findRowIndexById(rowId)
    // Notify Changes
    if(!quiet) {
      _.defaults(emitContext, payload)
      this.doNotifySelect(emitContext)
    }
  },
  //-----------------------------------------------
  selectRowByIndex(rowIndex, options) {
    //this.LOG(rowIndex)
    let index = rowIndex
    if(this.scrollIndex) {
      index = Ti.Num.scrollIndex(rowIndex, this.TableData.length)
    }
    if(_.inRange(index, 0, this.TableData.length)) {
      let row = this.TableData[index]
      this.selectRow(row.id, options)
    }
  },
  //-----------------------------------------------
  selectPrevRow(options) {
    this.selectRowByIndex(Math.max(-1, this.myLastIndex-1), options)
  },
  //-----------------------------------------------
  selectNextRow(options) {
    this.selectRowByIndex(this.myLastIndex+1, options)
  },
  //-----------------------------------------------
  selectRowsToCurrent(rowId) {
    let idMap = _.cloneDeep(this.myCheckedIds)
    let curId = this.myCurrentId
    let index = this.findRowIndexById(rowId)
    if(index >= 0) {
      let fromIndex = Math.min(index, this.myLastIndex)
      let toIndex   = Math.max(index, this.myLastIndex)
      if(fromIndex < 0) {
        fromIndex = 0
      }
      for(let i=fromIndex; i<=toIndex; i++) {
        let row = this.TableData[i]
        idMap[row.id] = true
      }
      // Eval context
      let emitContext = this.getEmitContext(curId, idMap)
      // Private Mode
      if(!this.puppetMode) {
        this.myCheckedIds = idMap
        this.myCurrentId  = curId
      }
      this.myLastIndex  = index
      // Notify Changes
      this.doNotifySelect(emitContext)
    }
  },
  //-----------------------------------------------
  getEmitContext(
    currentId, 
    checkedIds={}
  ) {
    let checked = []
    let current = null
    let currentIndex = -1
    for(let row of this.TableData) {
      if(row.id == currentId) {
        current = row.rawData
        currentIndex = row.index
      }
      if(checkedIds[row.id]) {
        checked.push(row.rawData)
      }
    }
    return {
      current, currentId, currentIndex,
      checked, checkedIds
    }
  },
  //-----------------------------------------------
  doNotifySelect(emitContext) {
    if(this.notifySelectName) {
      this.$notify(this.notifySelectName, emitContext)
    }
    if(_.isFunction(this.onSelect)) {
      this.onSelect(emitContext)
    }
  }
  //-----------------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-combo-multi-input.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/multi-input/ti-combo-multi-input.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data: () => ({
    myDropStatus: "collapse",
    myTags: [],
    myFreeValues: [],
    myFilterValue: null,
    myOptionsData: [],
    myCurrentId: null,
    myCheckedIds: {},

    myOldValue: undefined,
    myDict: undefined,
    loading: false
  }),
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    isCollapse() { return "collapse" == this.myDropStatus },
    isExtended() { return "extended" == this.myDropStatus },
    //------------------------------------------------
    TopClass() {
      let hasWidth = !Ti.Util.isNil(this.width);
      return this.getTopClass({
        "full-field": !hasWidth,
      })
    },
    //------------------------------------------------
    Values() {
      return Ti.S.toArray(this.value)
    },
    //------------------------------------------------
    InputTagValues() {
      return _.concat(this.myTags, this.myFreeValues)
    },
    //------------------------------------------------
    GetValueBy() {
      return it => this.Dict.getValue(it)
    },
    //------------------------------------------------
    TheSuffixIcon() {
      return this.statusIcons[this.myDropStatus]
    },
    //------------------------------------------------
    DropComType() { return this.dropComType || "ti-list" },
    DropComConf() {
      return _.assign({
        display: this.dropDisplay || [
          "text|title|nm::flex-auto",
          "id|value::as-tip-block align-right"
        ],
        blankAs: {
          className: "as-mid-tip"
        },
        border: this.dropItemBorder
      }, this.dropComConf, {
        data: this.myOptionsData,
        currentId: this.myCurrentId,
        checkedIds: this.myCheckedIds,
        idBy: this.GetValueBy,
        multi: true,
        hoverable: true,
        checkable: true,
        autoCheckCurrent: false
      })
    },
    //------------------------------------------------
    Dict() {
      if (!this.myDict) {
        this.myDict = this.createDict()
      }
      return this.myDict
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    OnDropListInit($dropList) { this.$dropList = $dropList },
    //------------------------------------------------
    async OnCollapse() { this.doCollapse() },
    //------------------------------------------------
    OnInputInputing(val) {
      if (this.filter) {
        this.myFilterValue = val
        this.debReload()
      }
    },
    //------------------------------------------------
    async OnInputChanged(val) {
      // Clean filter
      this.myFilterValue = null
      // Uniq 
      if (this.valueUnique) {
        if (_.indexOf(this.myFreeValues, val) >= 0) {
          return
        }
        for (let tag of this.myTags) {
          let tagV = this.Dict.getValue(tag)
          if (tagV == val) {
            return
          }
        }
      }
      // Join to ...
      let it = await this.Dict.getItem(val)
      // Matched tag
      if (it) {
        this.myTags.push(it)
      }
      // Join to free value
      else if (val && !this.mustInList) {
        this.myFreeValues.push(val)
      }
      this.tryNotifyChanged()
    },
    //-----------------------------------------------
    async OnInputFocused() {
      if (this.autoFocusExtended && !this.isExtended) {
        await this.doExtend()
      }
    },
    //-----------------------------------------------
    async OnTagListChanged(vals = []) {
      await this.evalMyTags(vals)
      this.tryNotifyChanged()
    },
    //-----------------------------------------------
    async OnClickStatusIcon() {
      if (this.isExtended) {
        this.doCollapse()
      } else {
        await this.doExtend()
      }
    },
    //-----------------------------------------------
    async OnDropListSelected({ currentId, checkedIds } = {}) {
      this.myCurrentId = currentId
      this.myCheckedIds = checkedIds

      let vals = Ti.Util.truthyKeys(checkedIds)
      await this.evalMyTags(_.concat(vals, this.myFreeValues))
      this.tryNotifyChanged()
    },
    //-----------------------------------------------
    // Core Methods
    //-----------------------------------------------
    async doExtend() {
      this.myOldValue = this.evalMyValues()
      // Try reload options again
      if (_.isEmpty(this.myOptionsData)) {
        await this.reloadMyOptionData(true)
      }
      this.$nextTick(() => {
        this.myDropStatus = "extended"
      })
    },
    //-----------------------------------------------
    doCollapse({ escaped = false } = {}) {
      if (escaped) {
        this.$notify("change", this.myOldValue)
      }
      this.myDropStatus = "collapse"
      this.myOldValue = undefined
    },
    //-----------------------------------------------
    tryNotifyChanged(escaped = false) {
      let vals = this.evalMyValues()
      if (!escaped && !_.isEqual(vals, this.Values)) {
        this.$notify("change", vals)
      }
    },
    //-----------------------------------------------
    // Utility
    //-----------------------------------------------
    evalMyValues(tags = this.myTags, freeValues = this.myFreeValues) {
      let vals = []
      // Tags
      _.forEach(tags, tag => {
        let v = this.Dict.getValue(tag)
        if (!Ti.Util.isNil(v)) {
          vals.push(v)
        } else if (!this.mustInList) {
          vals.push(tag)
        }
      })
      // Ignore free values
      if (this.mustInList || _.isEmpty(freeValues)) {
        return vals
      }
      // Join free values
      return _.concat(vals, freeValues)
    },
    //-----------------------------------------------
    async evalMyTags(vals = this.value) {
      vals = Ti.S.toArray(vals)
      let tags = []
      let ids = {}
      let frees = []
      for (let v of vals) {
        let tag = await this.Dict.getItem(v)
        if (tag) {
          tags.push(tag)
          ids[v] = true
        } else {
          frees.push(v)
        }
      }
      this.myTags = tags
      this.myFreeValues = frees
      this.myCheckedIds = ids
    },
    //------------------------------------------------
    createDict() {
      // Customized
      return Ti.DictFactory.CreateDictBy(this.options, {
        valueBy: this.valueBy,
        textBy: this.textBy,
        iconBy: this.iconBy,
        vars: this.dictVars,
        whenLoading: ({ loading }) => {
          this.loading = loading
        }
      });
    },
    //-----------------------------------------------
    async reloadMyOptionData(force = false) {
      if (force || this.isExtended) {
        let list = await this.Dict.queryData(this.myFilterValue)
        this.myOptionsData = list
      } else {
        this.myOptionsData = []
      }
    },
    //-----------------------------------------------
    // Callback
    //-----------------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("ti-combo-multi-input", uniqKey)
      //....................................
      if ("ESCAPE" == uniqKey) {
        this.doCollapse({ escaped: true })
        return { prevent: true, stop: true, quit: true }
      }
      //....................................
      // If droplist is actived, should collapse it
      if ("ENTER" == uniqKey) {
        if (this.$dropList && this.$dropList.isActived) {
          this.doCollapse()
          return { stop: true, quit: true }
        }
      }
      //....................................
      if ("ARROWUP" == uniqKey) {
        if (this.$dropList) {
          this.$dropList.selectPrevRow({
            payload: { byKeyboardArrow: true }
          })
        }
        return { prevent: true, stop: true, quit: true }
      }
      //....................................
      if ("ARROWDOWN" == uniqKey) {
        if (this.$dropList && this.isExtended) {
          this.$dropList.selectNextRow({
            payload: { byKeyboardArrow: true }
          })
        } else {
          this.doExtend()
        }
        return { prevent: true, stop: true, quit: true }
      }
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    //-----------------------------------------------
    "value": {
      handler: "evalMyTags",
      immediate: true
    },
    //-----------------------------------------------
    "options": function (newval, oldval) {
      if (!_.isEqual(newval, oldval)) {
        this.myDict = this.createDict()
        this.myOptionsData = []
        if (this.isExtended) {
          this.$nextTick(() => {
            this.reloadMyOptionData(true)
          })
        }
      }
    },
    //-----------------------------------------------
    "dictVars": function (newval, oldval) {
      if (!_.isEqual(newval, oldval)) {
        this.myDict = this.createDict()
        this.myOptionsData = []
        if (this.isExtended) {
          this.$nextTick(() => {
            this.reloadMyOptionData(true)
          })
        }
      }
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  created: function () {
    this.debReload = _.debounce(val => {
      this.reloadMyOptionData()
    }, this.delay)
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-table-quick.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/table/quick/ti-table-quick.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////
  data: () => ({
    myLastIndex: -1,      // The last row index selected by user
    myCurrentId: null,    // Current row ID
    myCheckedIds: {}      // Which row has been checked
  }),
  ///////////////////////////////////////////////////
  // props -> ti-table-props.mjs
  ///////////////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-checkable": this.checkable,
        "is-selectable": this.selectable,
        "is-openable": this.openable,
        "is-cancelable": this.cancelable,
        "is-hoverable": this.hoverable
      }, [
        `is-border-${this.border}`
      ])
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    },
    //--------------------------------------
    /*
    [{
      index, id, className,
      cells : [{
          index, width, nowrap, className,
          checked, changed, current,
          items : [{
            index, type,
            className,    // <- getClassName
            value,        // <- getValue
            displayValue  // <- transformer | tidy
          }]
      }]
    }]
    */
    TableData() {
      let showNumber = _.isNumber(this.rowNumberBase)
      let base = showNumber ? this.rowNumberBase : -1
      let list = _.map(this.data, (obj, index) => {
        let id = this.getRowId(obj, index)
        if (Ti.Util.isNil(id)) {
          id = `Row-${index}`
        }
        let checked = !!this.myCheckedIds[id]
        let changed = (this.changedId == id)
        let current = (this.myCurrentId == id)
        let className = {
          "is-checked": checked,
          "is-current": current,
          "is-changed": changed
        }

        let number;
        if (base >= 0) {
          number = base + index
        }

        let cells = _.map(this.TableFields, fld => {
          let items = _.map(fld.display, ({
            index, type, getClassName, getValue,
            transform, tidy
          }) => {
            let it = { index, type }
            // Item value
            it.value = getValue(obj)
            // ClassName
            if (getClassName) {
              it.className = getClassName(it.value)
            }
            // Transform
            let disval = it.value
            if (transform) {
              disval = transform(disval)
            }
            disval = tidy(disval)
            // Tidy value by types
            it.displayValue = disval
            // Done for item
            return it
          }) // End Items

          return { ...fld, items }
        }) // End cells

        return {
          showNumber,
          number, index,
          id, className, cells,
          checked, changed, current,
          rawData: obj
        }
      })

      return list
    },
    //-----------------------------------------------
    getRowId() {
      return Ti.Util.genRowIdGetter(this.idBy)
    },
    //-----------------------------------------------
    isDataEmpty() {
      return !_.isArray(this.TableData) || _.isEmpty(this.TableData)
    },
    //-----------------------------------------------
    isAllChecked() {
      // Empty list, nothing checked
      if (this.isDataEmpty) {
        return false
      }
      if (_.size(this.myCheckedIds) != _.size(this.TableData)) {
        return false
      }
      // Checking ...
      for (let row of this.TableData) {
        if (!this.myCheckedIds[row.id])
          return false;
      }
      return true
    },
    //-----------------------------------------------
    hasChecked() {
      return !_.isEmpty(this.myCheckedIds)
    },
    //--------------------------------------
    HeadCheckerIcon() {
      if (this.isAllChecked) {
        return "fas-check-square"
      }
      if (this.hasChecked) {
        return "fas-minus-square"
      }
      return "far-square"
    },
    //--------------------------------------
    TableFields() {
      //....................................
      const evalQuickStrDisplay = (str) => {
        //  key.className
        let m = /^([\w\d_-]+)((\.|::)([\w\d\s_-]+))?/.exec(str)
        if (m) {
          return {
            key: m[1],
            className: m[4]
          }
        }
        // <icon:fas-xxx>?
        m = /^<([^:>=]*)(:([^>:]+))?(:([^>:]+))?>(\?)?$/.exec(str)
        if (m) {
          return {
            type: "icon",
            key: m[1],
            defaultAs: m[3],
            className: m[5],
            ignoreNil: "?" == m[6]
          }
        }
        // Default
        return { key: str }
      }
      //....................................
      const evalFldDisplay = (dis = {}, index) => {
        // Quick string mode
        if (_.isString(dis)) {
          dis = evalQuickStrDisplay(dis)
        }
        let { key, type, className, transformer, defaultAs, ignoreNil } = dis

        // Default type as text
        type = type || "text"

        // Get value
        let getValue;
        if (".." == key) {
          getValue = obj => obj
        } else if (_.isArray(key)) {
          getValue = obj => _.pick(obj, key)
        } else {
          getValue = obj => _.get(obj, key)
        }

        // ClassName
        let getClassName;
        if (_.isFunction(className)) {
          getClassName = className
        } else if (_.isString(className)) {
          getClassName = () => className
        } else if (className) {
          let cans = []
          _.forEach(className, (key, val) => {
            cans.push({
              className: key,
              match: Ti.AutoMatch.parse(val)
            })
          })
          getClassName = (val) => {
            for (let can of cans) {
              if (can.match(val))
                return can.className
            }
          }
        }

        // transformer
        let transFunc;
        if (transformer) {
          transFunc = Ti.Util.genInvoking(transformer, {
            context: this,
            partial: "right"
          })
        }

        // Tidy Value by type
        let tidyFunc = ({
          "text": v => v,
          "icon": v => Ti.Icons.parseFontIcon(v),
          "img": v => v
        })[type]

        if (!tidyFunc) {
          throw "Invalid display type: " + type
        }

        return {
          index, type,
          getClassName,
          getValue,
          transform: transFunc,
          tidy: tidyFunc,
          defaultAs, ignoreNil
        }
      }
      //....................................
      let lastI = this.fields.length - 1
      let fields = _.map(this.fields, (fld, index) => {
        let diss = [].concat(fld.display)
        let display = _.map(diss, (dis, index) => {
          return evalFldDisplay(dis, index)
        })
        return {
          ...fld,
          headStyle: Ti.Css.toStyle({
            width: fld.width
          }),
          index, display,
          isFirst: 0 == index,
          isLast: lastI == index,
          className: {
            "is-nowrap": fld.nowrap
          }
        }
      })
      //....................................
      return fields
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnClickTop($event) {
      if (this.cancelable) {
        // Click The body or top to cancel the row selection
        if (Ti.Dom.hasOneClass($event.target,
          'ti-table', 'table-body',
          'table-head-cell',
          'table-head-cell-text')) {
          this.cancelRow()
        }
      }
    },
    //--------------------------------------
    // Publish methods
    //--------------------------------------
    findRowIndexById(rowId) {
      for (let row of this.TableData) {
        if (row.id == rowId) {
          return row.index
        }
      }
      return -1
    },
    //--------------------------------------
    findRowById(rowId) {
      for (let row of this.TableData) {
        if (row.id == rowId) {
          return row
        }
      }
    },
    //--------------------------------------
    getRow(index = 0) {
      return _.nth(this.TableData, index)
    },
    getCurrentRow(currentId = this.myCurrentId) {
      return this.findRowById(currentId)
    },
    //--------------------------------------
    removeCheckedRow(idMap = this.myCheckedIds) {
      let checkedIds = this.getCheckedIdsMap(idMap, false)
      let minIndex = -1
      let maxIndex = -1
      let remainsRows = []
      let checkedRows = []

      _.forEach(this.TableData, row => {
        if (idMap[row.id]) {
          minIndex = minIndex < 0
            ? row.index
            : Math.min(row.index, minIndex);

          maxIndex = maxIndex < 0
            ? row.index
            : Math.max(row.index, maxIndex);

          checkedRows.push(row)
        } else {
          remainsRows.push(row)
        }
      })

      return {
        remainsRows, checkedRows, minIndex, maxIndex, checkedIds
      }
    },
    //-----------------------------------------------
    removeChecked(idMap = this.myCheckedIds) {
      let re = this.removeCheckedRow(idMap)
      re.remains = _.map(re.remainsRows, row => row.rawData)
      re.checked = _.map(re.checkedRows, row => row.rawData)
      return re
    },
    //-----------------------------------------------
    moveCheckedRow(offset = 0, idMap = this.myCheckedIds) {
      idMap = this.getCheckedIdsMap(idMap, false)
      //this.LOG(idMap)
      if (offset == 0 || _.isEmpty(idMap))
        return { rows: this.TheData, nextCheckedIds: idMap }

      let {
        checkedIds,
        minIndex,
        maxIndex,
        remainsRows,
        checkedRows
      } = this.removeCheckedRow(idMap)

      // targetIndex in remains[] list
      let targetIndex = Math.max(0, minIndex - 1)
      if (offset > 0) {
        targetIndex = Math.min(maxIndex - checkedRows.length + 2, remainsRows.length)
      }
      // Insert
      let rows = _.cloneDeep(remainsRows)
      rows.splice(targetIndex, 0, ...checkedRows)

      if (_.isEmpty(rows))
        return { rows: [], nextCheckedIds: {} }

      // If the index style ID, adjust them
      let nextCheckedIds = checkedIds
      if (/^Row-\d+$/.test(rows[0].id)) {
        nextCheckedIds = {}
        for (let i = 0; i < checkedRows.length; i++) {
          nextCheckedIds[`Row-${i + targetIndex}`] = true
        }
      }

      return { rows, nextCheckedIds }
    },
    //-----------------------------------------------
    moveChecked(offset = 0, idMap = this.myCheckedIds) {
      let re = this.moveCheckedRow(offset, idMap)
      re.list = _.map(re.rows, row => row.rawData)
      return re
    },
    //-----------------------------------------------
    getCheckedIdsMap(idList = [], autoCheckCurrent = this.autoCheckCurrent) {
      let idMap = {}
      // ID List
      if (_.isArray(idList)) {
        _.forEach(idList, (rowId) => {
          idMap[rowId] = true
        })
      }
      // Map
      else {
        _.forEach(idList, (checked, rowId) => {
          if (checked) {
            idMap[rowId] = true
          }
        })
      }
      // Force to check current
      if (autoCheckCurrent && !Ti.Util.isNil(this.myCurrentId)) {
        idMap[this.myCurrentId] = true
      }
      return idMap
    },
    //--------------------------------------
    // Utility
    //--------------------------------------
    scrollCurrentIntoView() {
      //this.LOG("scrollCurrentIntoView", this.myLastIndex)
      if (this.autoScrollIntoView && this.myCurrentId) {
        let index = this.findRowIndexById(this.myCurrentId)
        //this.LOG("scroll", index)
        let $view = this.$el
        let $row = Ti.Dom.find(`.table-row:nth-child(${index + 1})`, $view)

        if (!_.isElement($view) || !_.isElement($row)) {
          return
        }

        let r_view = Ti.Rects.createBy($view)
        let r_row = Ti.Rects.createBy($row)

        // test it need to scroll or not
        if (!r_view.contains(r_row)) {
          // at bottom
          if (r_row.bottom > r_view.bottom) {
            $view.scrollTop += r_row.bottom - r_view.bottom
          }
          // at top
          else {
            $view.scrollTop += r_row.top - r_view.top
          }
        }
      }
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////////////
  watch: {
    "currentId": {
      handler: function (newVal, oldVal) {
        if (!_.isEqual(newVal, oldVal)) {
          this.myCurrentId = newVal
        }
      },
      immediate: true
    },
    "checkedIds": {
      handler: function (newVal, oldVal) {
        if (!_.isEqual(newVal, oldVal)) {
          this.myCheckedIds = newVal
        }
      },
      immediate: true
    }
  },
  ///////////////////////////////////////////////////
  mounted: function () {
    if (this.autoScrollIntoView) {
      _.delay(() => {
        this.scrollCurrentIntoView()
      }, 0)
    }
  }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'gui-flex-dragging.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/gui/gui-flex-dragging.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data: () => ({
    blockSizes: undefined
  }),
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    Draggable() {
      //....................................
      const do_dragging = (ctx) => {
        let { orgBlockSizes, prevI, selfI } = ctx;
        let offset = ctx[this.offset_key];
        //console.log("dragging", { offset, orgBlockSizes, prevI, selfI })
        let sizes = _.cloneDeep(orgBlockSizes);

        // Block minimum size
        let prevSize = sizes[prevI];
        let selfSize = sizes[selfI];
        let sum = prevSize + selfSize;

        // Use prev minSize
        if (offset < 0) {
          let minSize = this.GuiBlocks[prevI].minSize;
          prevSize = Math.max(minSize, prevSize + offset);
          selfSize = sum - prevSize;
        }
        // Use self minSize
        else {
          let minSize = this.GuiBlocks[selfI].minSize;
          selfSize = Math.max(minSize, selfSize - offset);
          prevSize = sum - selfSize;
        }

        // Offset block size
        sizes[prevI] = prevSize;
        sizes[selfI] = selfSize;

        // Depends on bar adjacent-mode
        //console.log(sizes)
        this.blockSizes = this.normlizedBlockSize(sizes, ctx);
      };
      //....................................
      return {
        trigger: ".block-adjust-bar",
        prepare: (_, evt) => {
          evt.stopPropagation();
          this.isDragging = true;
        },
        actived: (ctx) => {
          //console.log("actived", ctx)
          // Get all my blocks and init them rect
          // Set mark
          // Prepare sizing
          let sizes = this.genBlockRealSizes();
          ctx.orgBlockSizes = sizes;
          ctx.viewportSize = _.sum(sizes);
          ctx.prevI = parseInt(ctx.$trigger.getAttribute("adjust-0"));
          ctx.selfI = parseInt(ctx.$trigger.getAttribute("adjust-1"));
          ctx.adjacentMode = ctx.$trigger.getAttribute("adjacent-mode");
        },
        dragging: do_dragging,
        done: (ctx) => {
          // Save customized
          this.trySaveLocalCustomized();
          // Notify whole window resizing
          Ti.Viewport.resize();
        },
        finished: (ctx) => {
          // Reset mark
          this.isDragging = false;
        }
      };
      //....................................
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnBarReset() {
      //console.log("OnBarReset")
      this.blockSizes = null;
      this.trySaveLocalCustomized();
    },
    //--------------------------------------
    OnBarToggleSize(payload) {
      //console.log("OnBarToggleSize")
      //..............................
      let { prevMinimum, selfMinimum, adjacentMode, adjustIndex } = payload;
      //..............................
      let sizes = this.genBlockRealSizes();
      let viewportSize = _.sum(sizes);
      let prevI = adjustIndex[0];
      let selfI = adjustIndex[1];
      //..............................
      const __toggle_sizes = (sizes = []) => {
        let prevSize = sizes[prevI];
        let selfSize = sizes[selfI];
        let sum = prevSize + selfSize;

        let prevMinSize = this.GuiBlocks[prevI].minSize;
        let prevOrgSize = this.blocks[prevI].size;

        let selfMinSize = this.GuiBlocks[selfI].minSize;
        let selfOrgSize = this.blocks[selfI].size;

        // Prev
        if ("prev" == adjacentMode || ("both" == adjacentMode && 0 == prevI)) {
          // => min
          if (!prevMinimum) {
            sizes[prevI] = prevMinSize;
            sizes[selfI] = sum - prevMinSize;
          }
          // => org
          else {
            prevSize = Ti.Css.toAbsPixel(prevOrgSize, {
              base: viewportSize
            });
            sizes[prevI] = prevSize;
            sizes[selfI] = sum - prevSize;
          }
        }
        // Self
        else {
          // => min
          if (!selfMinimum) {
            sizes[selfI] = selfMinSize;
            sizes[prevI] = sum - selfMinSize;
          }
          // => org
          else {
            selfSize = Ti.Css.toAbsPixel(selfOrgSize, {
              base: viewportSize
            });
            sizes[selfI] = selfSize;
            sizes[prevI] = sum - selfSize;
          }
        }
      };
      //..............................
      __toggle_sizes(sizes);
      //..............................
      this.blockSizes = this.normlizedBlockSize(sizes, {
        adjacentMode,
        viewportSize,
        prevI,
        selfI
      });
      //..............................
      this.trySaveLocalCustomized();
      //..............................
      this.$nextTick(() => {
        Ti.Viewport.resize();
      });
    },
    //--------------------------------------
    normlizedBlockSize(
      sizes = [],
      { adjacentMode, viewportSize, prevI, selfI } = {}
    ) {
      //console.log("normlizedBlockSize", adjacentMode)
      // Depends on bar adjacent-mode
      switch (adjacentMode) {
        case "prev":
          sizes[selfI] = null;
          break;
        case "self":
          sizes[prevI] = null;
          break;
        case "none":
          if (0 == prevI) {
            sizes[selfI] = null;
          } else {
            sizes[prevI] = null;
          }
      }

      // Cover to percent
      if ("%" == this.BlockAdjustMode) {
        return _.map(sizes, (sz) => {
          if (null === sz) {
            return null;
          }
          return Ti.S.toPercent(sz / viewportSize);
        });
      }

      return sizes;
    },
    //--------------------------------------
    // When click the `min` button, it will shrink which block
    // ajacent with the bar.
    //
    //  [Prev] || [Self]
    //
    //  - prev: set prev block to mininum size
    //  - self: set self block to minimum size
    //  - both: if prev is head block, set it to minimum size,
    //          else set the next to minimum size
    //  - none: do nothing
    //
    getBlockAdjacentMode(prevI, selfI) {
      let prevSize = Ti.Util.fallbackNil(this.blocks[prevI].size, "stretch");
      let selfSize = Ti.Util.fallbackNil(this.blocks[selfI].size, "stretch");
      let prevIsStrech = "stretch" == prevSize;
      let selfIsStrech = "stretch" == selfSize;

      // .. 40        | <stretch> ..
      if (!prevIsStrech && selfIsStrech) {
        return "prev";
      }
      // .. <stretch> | 40   ..
      else if (prevIsStrech && !selfIsStrech) {
        return "self";
      }
      // .. 40        | 80   ..
      else if (!prevIsStrech && !selfIsStrech) {
        return "both";
      }
      // .. <stretch> | <stretch> ..
      return "none";
    },
    //--------------------------------------
    genBlockRealSizes() {
      let $blocks = Ti.Dom.findAll(":scope > .ti-gui-block", this.$el);
      let sizes = [];
      _.forEach($blocks, ($block) => {
        let rect = $block.getBoundingClientRect();
        let sz = rect[this.block_size_by];
        sizes.push(sz);
      });
      return sizes;
    },
    //--------------------------------------
    getBlockSize(index) {
      if (this.blockSizes) {
        return _.nth(this.blockSizes, index) || null;
      }
      return (_.nth(this.blocks, index) || {}).size;
    },
    //--------------------------------------
    isBlockSizeMinimum(index) {
      if (index >= 0 && index < this.$children.length) {
        return this.$children[index].isMinimumSize;
      }
    },
    //--------------------------------------
    trySaveLocalCustomized() {
      if (this.keepCustomizedTo) {
        let sizes = _.isEmpty(this.blockSizes) ? null : this.blockSizes;
        Ti.Storage.local.setObject(this.keepCustomizedTo, sizes);
      }
    },
    //--------------------------------------
    tryRestoreLocalCustomized() {
      if (this.keepCustomizedTo) {
        let sizes = Ti.Storage.local.getObject(this.keepCustomizedTo);
        if (_.isArray(sizes)) {
          this.blockSizes = sizes;
        }
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  mounted() {
    this.tryRestoreLocalCustomized();
  }
  //////////////////////////////////////////
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-entity-history.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/entity/history/wn-entity-history.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data: ()=>({
    "myShown": {},
    "myList": [],
    "myHisRecord": null,
    "myFilterKeyword": null,
    "myFilterMatch": {},
    "mySort": {
      ct: -1
    },
    "myPager": {
      pn: 1,
      pgsz: 20
    },
    "loading": false
  }),
  ////////////////////////////////////////////////////
  props : {
    "prefix": {
      type: String,
      default: "~/.domain/history"
    },
    "meta": {
      type: Object,
      default: ()=>({})
    },
    "data": {
      type: Object,
      default: ()=>({})
    },
    "status": {
      type: Object,
      default: ()=>({})
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    HistoryItems() {
      if(!this.meta) {
        return []
      }
      // Make sure in history folder
      if(this.prefix) {
        let fph = Wn.Io.getFormedPath(this.meta)
        if(!fph.startsWith(this.prefix)) {
          return []
        }
      }

      let items = []
      _.forEach(this.data.list, it=> {
        // Guard
        if('FILE' != it.race || !it.nm.endsWith(".json"))
          return
        
        // Eval the history item tab name
        let name  = Ti.Util.getMajorName(it.nm)
        let title = it.title
        if(!title) {
          title =  "_history" == name
            ? "i18n:default"
            : name
        }
        items.push({name, title})
      })
      // Update shown
      if(!_.isEmpty(items)) {
        this.myShown = _.assign({
          [_.first(items).name] : true
        }, this.myShown)
      }
      // Return
      return items
    },
    //------------------------------------------------
    CurrentHistory() {
      return _.first(Ti.Util.truthyKeys(this.myShown))
    },
    //------------------------------------------------
    Layout() {
      let blocks = []
      for(let hi of this.HistoryItems) {
        blocks.push({
          type: "cols",
          title: hi.title,
          name : hi.name,
          border: true,
          blocks: [{
            type: "rows",
            size: "65%",
            blocks: [{
              "type": "cols",
              "size": ".44rem",
              "blocks": [{
                  "name": "filter",
                  "flex": "both",
                  "body": "filter"
                }, {
                  "name": "sorter",
                  "flex": "none",
                  "body": "sorter"
                }]
              }, {
                "name" : "list",
                "size" : "stretch",
                "overflow" : "cover",
                "body" : "list"
              }, {
                "name" : "pager",
                "size" : "auto",
                "body" : "pager"
              }]
          }, {
            name: "form",
            body: "form"
          }]
        })
      }
      return {type: "tabs", blocks}
    },
    //------------------------------------------------
    Schema() {
      return {
        //............................................
        filter : {
          comType : "TiComboFilter",
          comConf : {
            placeholder : "i18n:wn-en-his-flt-tip",
            dropWidth: -500,
            form: {
              fields: [{
                  title: "i18n:wn-en-his-ct",
                  name: "ct",
                  comType: "ti-input-daterange",
                  comConf: {
                    valueType: "ms-range"
                  }
                },{
                  title: "i18n:wn-en-his-utp",
                  name: "utp",
                  comType: "ti-input"
                },{
                  title: "i18n:wn-en-his-tid",
                  name: "tid",
                  comType: "ti-input"
                },{
                  title: "i18n:wn-en-his-tnm",
                  name: "tnm",
                  comType: "ti-input"
                },{
                  title: "i18n:wn-en-his-ttp",
                  name: "ttp",
                  comType: "ti-input"
                },{
                  title: "i18n:wn-en-his-opt",
                  name: "opt",
                  comType: "ti-input"
                }]
            },
            value: {
              keyword: this.myFilterKeyword,
              match: this.myFilterMatch
            }
          }
        },
        //............................................
        sorter: {
          comType: "TiComboSorter",
          comConf: {
            dropWidth : 200,
            options: [
              {value:"ct",   text:"i18n:wn-en-his-ct"},
              {value:"utp",     text:"i18n:wn-en-his-utp"},
              {value:"ttp",   text:"i18n:wn-en-his-ttp"}],
            value: this.mySort
          }
        },
        //............................................
        list: {
          comType: "TiTable",
          comConf: {
            data: this.myList,
            fields: [{
              title:"i18n:wn-en-his-ct",
              display: {
                key:"ct",
                transformer: "Ti.DateTime.format"
              }
            },{
              title:"i18n:wn-en-his-usr",
              display: ["utp:$${val}:", "unm|uid"]
            },{
              title:"i18n:wn-en-his-opt",
              display: "opt"
            },{
              title:"i18n:wn-en-his-tar",
              display: ["ttp:$${val}:", "tnm|tid"]
            }]
          }
        },
        //............................................
        pager : {
          comType : "TiPagingJumper",
          comConf : {
            value : this.myPager
          }
        },
        //............................................
        form: {
          comType: "TiForm",
          comConf: {
            data: this.myHisRecord,
            autoShowBlank: true,
            fields: [{
                title:"ID",
                name: "id"
              },{
                title:"i18n:wn-en-his-uid",
                name: "uid"
              },{
                title:"i18n:wn-en-his-unm",
                name: "unm"
              },{
                title:"i18n:wn-en-his-utp",
                name: "utp"
              },{
                title:"i18n:wn-en-his-ct",
                name: "ct",
                type: "AMS"
              },{
                title:"i18n:wn-en-his-tid",
                name: "tid"
              },{
                title:"i18n:wn-en-his-tnm",
                name: "tnm"
              },{
                title:"i18n:wn-en-his-ttp",
                name: "ttp"
              },{
                title:"i18n:wn-en-his-opt",
                name: "opt"
              },{
                title:"i18n:wn-en-his-mor",
                name: "mor"
              }]
          }
        }
        //............................................
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnShownChange(shown) {
      this.myShown = shown
    },
    //------------------------------------------------
    OnSelect({current}) {

      this.myHisRecord = current
    },
    //------------------------------------------------
    async OnFilterChange({match,keyword}={}) {
      this.myFilterMatch = match
      this.myFilterKeyword = keyword
      await this.reloadList()
    },
    //------------------------------------------------
    async OnSorterChange(sort) {
      this.mySort = sort
      await this.reloadList()
    },
    //------------------------------------------------
    async OnPagerChange(page) {
      _.assign(this.myPager, page)
      await this.reloadList()
    },
    //------------------------------------------------
    async reloadList() {
      let hisName = this.CurrentHistory
      if(!hisName) {
        this.myList = []
        this.myPager = {}
        return
      }

      // Prepare the command
      if("_history" == hisName) {
        hisName = ""
      }
      let cmds = [`history ${hisName} query`]

      // Sort
      if(!_.isEmpty(this.mySort)) {
        let sort = JSON.stringify(this.mySort)
        cmds.push(`-sort '${sort}'`)
      }
      
      // Pager
      cmds.push(`-pn ${this.myPager.pn}`)
      cmds.push(`-pgsz ${this.myPager.pgsz}`)
      cmds.push("-cqn")

      // Filter
      let flt = _.assign({}, this.myFilterMatch)
      if(this.myFilterKeyword) {
        if(Wn.Io.isFullObjId(this.myFilterKeyword)) {
          flt.uid = this.myFilterKeyword
        } else {
          flt.unm = this.myFilterKeyword
        }
      }
      let input = JSON.stringify(flt)

      // Load
      this.loading = true
      let reo = await Wn.Sys.exec2(cmds.join(" "), {
        input, as:"json"
      })

      // Update
      this.myList = reo.list
      this.myPager = reo.pager
      this.loading = false
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    "CurrentHistory": function(){
      this.reloadList()
    }
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'm-obj-current.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/obj-current/m-obj-current.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////
  mutations : {
    //----------------------------------------
    setMeta(state, meta) {
      state.meta = meta
    },
    //--------------------------------------------
    assignMeta(state, meta) {
      state.meta = _.assign({}, state.meta, meta);
    },
    //--------------------------------------------
    mergeMeta(state, meta) {
      state.meta = _.merge({}, state.meta, meta);
    },
    //----------------------------------------
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    },
    //----------------------------------------
    setFieldStatus(state, {name, type, text}={}) {
      if(name){
        let ukey = _.concat(name).join("-")
        Vue.set(state.fieldStatus, ukey, {type, text})
      }
    },
    //----------------------------------------
    clearFieldStatus(state, names=[]) {
      // Clean All
      if(_.isEmpty(names)) {
        state.fieldStatus = {}
      }
      // Clear one
      else {
        state.fieldStatus = _.omit(state.fieldStatus, names)
      }
    },
    //----------------------------------------
  }
  ////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'net-fb-albums-sdk.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/net/facebook/albums/net-fb-albums-sdk.mjs'] = (function(){
/////////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////////
  computed: {
    //---------------------------------------------------
    FBAPI(path) {
      return `https://graph.facebook.com/${this.apiVersion}/${path}`
    },
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods: {
    //---------------------------------------------------
    ReloginFBAccount() {
      this.checkdLongLiveAccessToken(true)
    },
    //---------------------------------------------------
    async reloadLongLiveAccessToken(accessToken) {
      let url = this.FBAPI("oauth/access_token")
      let reo = await Ti.Http.get(url, {
        params: {
          "grant_type": "fb_exchange_token",
          "client_id": this.appId,
          "client_secret": this.appSecret,
          "fb_exchange_token": accessToken
        },
        as: "json"
      })
      // Grap Long live access token
      this.longLiveAccessToken = reo.access_token

      // Save to remote
      if (reo.access_token) {
        let expireAt = Date.now() + reo.expires_in * 1000
        //
        // Update file content
        //
        let jsonToken = JSON.stringify({
          userId: this.myId,
          userName: this.myName,
          scope: this.ApiScope,
          grantedScopes: this.myGrantedScopes
        })
        let cmdText = `jsonx -qn @read id:${this.meta.id} -auto @set '${jsonToken}' > id:${this.meta.id}`
        await Wn.Sys.exec2(cmdText)
        //
        // Update file meta
        //
        let akPh = `~/.xapi/facebook/${this.domain}/long_live_access_token`
        let objMeta = JSON.stringify({
          ticket: reo.access_token,
          expiAtMs: expireAt,
          expiTime: reo.expires_in,
          expiTimeUnit: "s"
        })
        // 确保文件存在
        await Wn.Sys.exec2(`touch '${akPh}'`)
        // 更新文件元数据
        cmdText = `o '${akPh}' @update`
        await Wn.Sys.exec2(cmdText, { input: objMeta })

        // Reload data
        // await Ti.App(this).dispatch("current/reload")
        // await Ti.App(this).dispatch("main/reload", this.meta)
      }
      // Error
      else {
        console.error("Fail to reloadLongLiveAccessToken", reo)
      }
    },
    //---------------------------------------------------
    checkdLongLiveAccessToken(force = false) {
      // Refresh token before a day
      let expiAt = this.tokenExpireAt - 86400000
      if (force || Date.now() > expiAt || !this.myId || !this.longLiveAccessToken) {
        FB.login(resp => {
          console.log("after login", resp)
          if (resp.authResponse) {
            let { accessToken, userID, grantedScopes } = resp.authResponse
            this.myId = this.userId || userID
            this.myGrantedScopes = grantedScopes
            FB.api('/' + this.myId, resp => {
              console.log('Good to see you, ' + resp.name + '.', resp);
              // Get Long Live Access Token
              this.myName = resp.name
              this.reloadLongLiveAccessToken(accessToken)
                .then(() => {
                  this.doLoadMoreAlbums(1, { reset: true })
                })
            });
          }
        }, {
          scope: this.ApiScope,
          return_scopes: true,
          profile_selector_ids: this.ProfileSelectorIds
        })
      }
      // Has a valid LongLiveAK
      else {
        this.doLoadMoreAlbums(1, { reset: true })
      }
    },
    //---------------------------------------------------
    async initFBSdk() {
      // load token by domain 
      let pph = `~/.xapi/facebook/${this.domain}/`
      let conf = await Wn.Sys.exec2(`cat ${pph}config.json`, { as: "json" })
      this.appId = _.get(conf, "appId")
      this.appSecret = _.get(conf, "appSecret")
      let llAK = await Wn.Io.loadMeta(`${pph}long_live_access_token`)
      //console.log(llAK)
      if (llAK) {
        this.longLiveAccessToken = llAK.ticket
        this.tokenExpiresIn = llAK.expiTime
        this.tokenExpireAt = llAK.expiAtMs
        this.tokenType = llAK.token_type || "bearer"
      }

      // INIT SDK
      FB.init({
        appId: this.appId,
        autoLogAppEvents: this.autoLogAppEvents,
        xfbml: this.xfbml,
        version: this.apiVersion
      });


      // Login
      this.checkdLongLiveAccessToken()
    }
    //---------------------------------------------------
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-cmd-panel.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/cmd/panel/wn-cmd-panel.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data: () => ({
    lines: []
  }),
  ////////////////////////////////////////////////////
  props: {
    "value": String,
    "tipText": String,
    "tipIcon": String,
    "preface": [Array, String],
    "epilog": [Array, String],
    "vars": Object,
    "as": {
      type: String,
      default: "text"
    },
    "emitName": String,
    "emitPayload": undefined,
    "emitSuccess": String,
    "emitError": String,
    "input": String,
    "forceFlushBuffer": {
      type: Boolean,
      default: true
    },
    "showRunTip": {
      type: Boolean,
      default: true
    },
    "showTailRunTip": {
      type: Boolean,
      default: undefined
    },
    //
    // Callback
    // 
    "afterRunCommand": Function,
    "whenSuccess": Function,
    "whenError": Function
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    clear() {
      this.lines = []
    },
    //------------------------------------------------
    async runCommand() {
      if (!this.value)
        return

      if (!_.isEmpty(this.preface)) {
        let preface = Ti.I18n.text(this.preface)
        this.lines.push(..._.concat(preface))
      }

      if (this.showRunTip) {
        this.printHR()
        this.lines.push(Ti.I18n.get("run-welcome"))
      }

      // let re = await Wn.Sys.exec(this.value, {
      //   as : this.as,
      //   vars : this.vars,
      //   input : this.input, 
      //   forceFlushBuffer : this.forceFlushBuffer,
      //   eachLine : (line)=>{
      //     this.lines.push(line)
      //   }
      // })
      let re;
      try {
        re = await this.exec(this.value)
        if (/^e\./.test(re)) {
          throw re
        }
        // Success
        if (_.isFunction(this.whenSuccess)) {
          await this.whenSuccess(re, { $panel: this })
        }
        if (this.emitSuccess) {
          this.$notify(this.emitSuccess, this.emitPayload || re)
        }
        if (!_.isEmpty(this.epilog)) {
          let epilog = Ti.I18n.text(this.epilog)
          this.lines.push(..._.concat(epilog))
        }
      }
      // Fail
      catch (err) {
        if (_.isFunction(this.whenError)) {
          await this.whenError(err, { $panel: this })
        }
        if (this.emitError) {
          this.$notify(this.emitError, this.emitPayload || err)
        }
      }

      //
      // Always 
      //
      if (_.isFunction(this.afterRunCommand)) {
        await this.afterRunCommand(re, { $panel: this })
      }
      if (this.emitName) {
        this.$notify(this.emitName, this.emitPayload || re)
      }
    },
    //------------------------------------------------
    async exec(cmdText, options = {}) {
      if (this.vars) {
        cmdText = Ti.S.renderBy(cmdText, this.vars)
      }
      let showRunTip = Ti.Util.fallback(
        options.showRunTip, this.showRunTip
      )
      if (showRunTip) {
        this.printHR()
        this.lines.push("> " + cmdText)
        this.printHR()
      }

      let re = await Wn.Sys.exec(cmdText, {
        //...............................
        as: this.as,
        input: this.input,
        forceFlushBuffer: this.forceFlushBuffer,
        //...............................
        ...options,
        //...............................
        eachLine: (line) => {
          this.lines.push(line)
        }
      })
      let showTailRunTip = Ti.Util.fallback(
        options.showTailRunTip, this.showTailRunTip
      )
      //console.log(showTailRunTip)
      if (showTailRunTip) {
        this.printHR()
        this.lines.push("--> " + cmdText)
        this.printHR()
        this.lines.push(Ti.I18n.get("run-finished"))
      }

      return re
    },
    //------------------------------------------------
    println(str, vars) {
      if (!_.isEmpty(vars)) {
        str = Ti.S.renderBy(str, vars)
      }
      this.lines.push(str)
    },
    //------------------------------------------------
    printHR(c = "-") {
      let hr = _.repeat(c, 40)
      this.lines.push(hr)
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    "value": {
      handler: "runCommand",
      immediate: true
    },
    "lines": function () {
      this.$nextTick(() => {
        this.$refs.lines.scrollTop = this.$refs.lines.scrollHeight * 2
      })
    }
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-combo-pair-text-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/pair-text/ti-combo-pair-text-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "value": {
    type: Object,
    default: undefined
  },
  "options" : {
    type : [String, Array, Function, Ti.Dict],
    default : ()=>[]
  },
  "valueBy" : {
    type : [String, Function],
    default : undefined
  },
  "textBy" : {
    type : [String, Function],
    default : undefined
  },
  "iconBy" : {
    type : [String, Function],
    default : undefined
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "trimed" : {
    type : Boolean,
    default : true
  },
  "readonly" : {
    type: Boolean,
    default : false
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "placeholder" : {
    type : String,
    default : undefined
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "textWidth" : {
    type : [Number, String],
    default : undefined
  },
  "textHeight" : {
    type : [Number, String],
    default : undefined
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-text-raw.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/text/raw/web-text-raw.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props: {
    "icon": {
      type: [String, Object],
      default: undefined
    },
    "value": {
      type: [String, Number, Boolean, Array],
      default: undefined
    },
    "lineSeperater": {
      type: String,
      default: "\n"
    },
    "i18n": {
      type: Boolean,
      default: true
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    hasValue() {
      return Ti.Util.isNil(this.value) ? false : true;
    },
    //--------------------------------------
    TheValue() {
      let list = []
      this.joinValue(list, this.value)
      return list
    },
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    joinValue(list = [], str) {
      // Guard
      if(!str) {
        return
      }
      if (_.isArray(str)) {
        for (let s of str) {
          this.joinValue(list, s)
        }
      }
      else if(_.isString(str) && this.lineSeperater) {
        if (this.i18n) {
          str = Ti.I18n.text(str)
        }
        let ss = str.split(this.lineSeperater)
        for(let s of ss) {
          if(this.i18n) {
            s = Ti.I18n.text(s)
          } 
          list.push(s)
        }
      }
      else if (this.i18n) {
        let s = Ti.I18n.text(str)
        list.push(s)
      }
      else {
        list.push(str)
      }
    }
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'vod-video-player.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/net/aliyun/vod/video/player/vod-video-player.mjs'] = (function(){
/*
Aliyun Player JS SDK properties and API:
https://help.aliyun.com/document_detail/125572.html?spm=a2c4g.11186623.6.1101.19dc1c4cAXr5Cs

Aliyun VOD get play address api:
https://help.aliyun.com/document_detail/56124.html?spm=a2c4g.11186623.2.31.6c797fbfuEVYDi
*/
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////////
  props : {
    "autoplay": {
      type: Boolean,
      default: false
    },
    "videoId": {
      type: String,
      default: undefined
    },
    "coverUrl": {
      type: String,
      default: undefined
    },
    "playAuth": {
      type: String,
      default: undefined
    },
    "encryptType": {
      type: Number,
      default: undefined
    },
    "lang" : {
      type : String,
      default: undefined
    },
    "format" : {
      type : String,
      default: "m3u8"
    },
    "definition" : {
      type : String,
      default: "FD,LD,SD,HD,OD,2K,4K"
    },
    "defaultDefinition" : {
      type : String,
      default: "FD"
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //---------------------------------------------------
    PlayerID() {
      let n = parseInt(Math.random()* 100000);
      return `ALIPLAYER_${n}`
    },
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods :{
    //---------------------------------------------------
    initPlayer() {
      if(!this.$player
        && this.playAuth
        && this.videoId
        && this.coverUrl) {

        // console.log("haha", {
        //   playAuth: this.playAuth,
        //   videoId: this.videoId,
        //   coverUrl: this.coverUrl
        // })

        let lang = this.lang || Ti.Config.lang()

        this.$player = new Aliplayer({
          id: this.PlayerID,
          width: "100%",
          height: "100%",
          autoplay: this.autoplay,
          useH5Prism: true,
          format : this.format,
          definition : this.definition,
          defaultDefinition: this.defaultDefinition,
          language: lang,
          vid: this.videoId,
          cover: this.coverUrl,
          encryptType: this.encryptType,
          playauth : this.playAuth
        })
      }
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  watch: {
    // "playAuth": function() {
    //   this.$nextTick(()=>this.initPlayer())
    // },
    // "videoId": function() {
    //   this.$nextTick(()=>this.initPlayer())
    // },
    // "coverUrl": function() {
    //   this.$nextTick(()=>this.initPlayer())
    // }
  },
  ///////////////////////////////////////////////////////
  mounted(){
    this.initPlayer();
  },
  ///////////////////////////////////////////////////////
  beforeDestroy() {
    if(this.$player) {
      this.$player.dispose();
    }
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'io-ix-dao.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/hm/config/io/ix/dao/io-ix-dao.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data: ()=>({
  }),
  /////////////////////////////////////////
  props : {
    "value" : {
      type: [String, Object],
      default: undefined
    }
  },
  /////////////////////////////////////////
  computed : {
    //------------------------------------
    TheData() {
      if(_.isString(this.value)) {
        return JSON.stringify(this.value)
      }
      return _.cloneDeep(this.value)
    },
    //------------------------------------
    FormConf() {
      return {
        mode : "tab",
        keepTabIndexBy : "hm-config-io-ix-dao-tabIndex",
        fields: [{
          //............................
          // 基本设置
          //............................
          title : "基本",
          fields : [{
              title : "数据源",
              name  : "dao",
              comType : "ti-input"
            }, {
              title : "数据表",
              name  : "tableName",
              comType : "ti-input"
            }, {
              title : "自动建表",
              name  : "autoCreate",
              type  : "Boolean",
              tip   : "第一次访问时，会自动检查并确保数据库里有这个表",
              comType : "ti-toggle"
            }, {
              title : "主键",
              name  : "pks",
              type  : "Array",
              tip   : "默认为 `id` 字段",
              comType : "ti-input-tags"
            }]
          },
          //............................
          // 映射字段
          //............................
          {
            title : "映射字段",
            fields : [{
                name : "fields",
                type : "Array",
                comType : "ti-combo-table",
                comConf : {
                  className : "ti-cover-parent",
                  form : {
                    fields : [{
                      title : "字段名",
                      name  : "name",
                      comType : "ti-input"
                    }, {
                      title : "数据类型",
                      name  : "type",
                      tip : "程序内存中的数据类型",
                      defaultAs : "String",
                      comType : "ti-droplist",
                      comConf : {
                        options: "#JavaTypes",
                        dropDisplay : ["text::flex-auto", "value::as-tip"]
                      }
                    }, {
                      title : "存储字段名",
                      name  : "columnName",
                      emptyAs : "~~undefined~~",
                      comType : "ti-input",
                      comConf : {
                        placeholder : "与字段名相同"
                      }
                    }, {
                      title : "存储类型",
                      name  : "columnType",
                      tip : "数据库中的字段数据类型",
                      defaultAs : "AUTO",
                      comType : "ti-droplist",
                      comConf : {
                        options: "#ColumnTypes",
                        dropDisplay : ["text::flex-auto", "value::as-tip"]
                      }
                    }, {
                      title : "存储长度",
                      name  : "width",
                      type  : "Integer",
                      tip : "数据库存储该字段所占的空间",
                      width  : 120,
                      comType : "ti-input"
                    }, {
                      title : "不可为空",
                      name  : "notNull",
                      type  : "Boolean",
                      defaultAs : false,
                      comType : "ti-toggle"
                    }, {
                      title : "可插入",
                      name  : "insert",
                      type  : "Boolean",
                      defaultAs : true,
                      comType : "ti-toggle"
                    }, {
                      title : "可更新",
                      name  : "update",
                      type  : "Boolean",
                      defaultAs : true,
                      comType : "ti-toggle"
                    }, {
                      title : "包裹名称",
                      name  : "wrapName",
                      tip : "生成 SQL 的时候，是否要用引号包裹名称",
                      type  : "Boolean",
                      defaultAs : false,
                      comType : "ti-toggle"
                    }]
                  },
                  list : {
                    fields : [{
                      title : "字段名",
                      display : ["name", "columnName::as-tip"]
                    }, {
                      title : "数据类型",
                      display : {
                        key : "type",
                        defaultAs : "String",
                        comType : "ti-label",
                        comConf : {
                          dict : "JavaTypes"
                        }
                      }
                    }, {
                      title : "存储类型",
                      display : {
                        key : "columnType",
                        defaultAs : "AUTO",
                        comType : "ti-label",
                        comConf : {
                          dict : "ColumnTypes"
                        }
                      }
                    }, {
                      title : "存储长度",
                      width : 100,
                      display : "width::align-right"
                    }, {
                      title : "不可为空",
                      width : 80,
                      display : "<=TiLabel:notNull>.align-center=>Ti.Types.toBoolStr(null,'i18n:yes')"
                    }, {
                      title : "可插入",
                      width : 50,
                      display : "<=TiLabel:insert>.align-center=>Ti.Types.toBoolStr(null,'i18n:yes')"
                    }, {
                      title : "可更新",
                      width : 50,
                      display : "<=TiLabel:update>.align-center=>Ti.Types.toBoolStr(null,'i18n:yes')"
                    }]
                  },
                  dialog : {
                    title  : "编辑字段",
                    width  : 640,
                    height : 0.8
                  }
                }
              }]
          },
          //............................
          // 内置字段
          //............................
          {
            title : "内置字段",
            fields : [{
              name : "objKeys",
              type : "Array",
              comType : "ti-bullet-checkbox",
              comConf : {
                className : "ti-cover-parent",
                options: "#BuiltInFields",
                style : {
                  padding : "1em"
                }
              }
            }]
          },
          //............................
          // 索引
          //............................
          {
            title : "索引",
            fields : [{
              name : "indexes",
              type : "Array",
              comType : "ti-combo-table",
              comConf : {
                className : "ti-fill-parent",
                form : {
                  fields : [{
                      title : "唯一性索引",
                      name  : "unique",
                      type  : "Boolean",
                      comType : "ti-toggle"
                    }, {
                      title : "索引名称",
                      name  : "name",
                      comType : "ti-input"
                    }, {
                      title : "索引字段",
                      name  : "fields",
                      type  : "Array",
                      comType : "ti-input-tags"
                    }]
                },
                list : {
                  fields: [{
                    title : "索引名称",
                    display : [
                      "<=TiIcon:notNull>=>Ti.Types.toBoolStr(null,'fas-exclamation')",
                      "name"]
                  }, {
                    title : "索引字段",
                    display : "fields"
                  }, {
                    title : "唯一性",
                    display : "<=TiLabel:unique>=>Ti.Types.toBoolStr(null,'唯一')"
                  }]
                },
                dialog : {
                  title  : "编辑索引",
                  width  : 420,
                  height : 500
                }
              }
            }]
          }
          //............................
        ]
      }
    }
    //------------------------------------
  },
  /////////////////////////////////////////
  methods : {
    //------------------------------------
    OnFormChange(payload) {
      //console.log("change", payload)
      let json = JSON.stringify(payload, null, '   ')
      this.$notify("change", json)
    },
    //------------------------------------
    OnFormFieldChange(payload){
      //console.log("field:change", payload)
    }
    //------------------------------------
  },
  /////////////////////////////////////////
  watch : {
    
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-media-image.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/media/image/ti-media-image.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////
  data: () => ({
    naturalWidth: -1,
    naturalHeight: -1,
    viewportWidth: -1,
    viewportHeight: -1,
    fitMode: "contain",
    imgLoading: true,
    inViewport: false
  }),
  ///////////////////////////////////
  props: {
    "src": {
      type: String,
      default: null
    },
    "width": {
      type: [String, Number],
      default: ""
    },
    "height": {
      type: [String, Number],
      default: ""
    }
  },
  ///////////////////////////////////
  computed: {
    topClass() {
      return Ti.Css.mergeClassName({
        "as-fitmode-cover": this.fitMode == "cover",
        "as-fitmode-contain": this.fitMode == "contain",
        "is-img-loading": this.imgLoading,
        "is-in-viewport": this.inViewport
      }, this.className)
    },
    topStyle() {
      return {
        width: this.width,
        height: this.height
      }
    },
    theImageStyle() {
      let css = {
        "visibility": "hidden",
        "position": "relative"
      }
      // If ready, then resize to zoom
      if (this.naturalWidth > 0
        && this.naturalHeight > 0) {
        // Get the measure of viewport
        let viewport = Ti.Rects.create({
          top: 0, left: 0,
          width: this.viewportWidth,
          height: this.viewportHeight
        })
        // Get the measure of image
        let r_img = Ti.Rects.create({
          top: 2, left: 2,
          width: this.naturalWidth,
          height: this.naturalHeight
        })
        // Zoom it
        let r_im2 = r_img.zoomTo({
          width: viewport.width,
          height: viewport.height,
          mode: this.fitMode
        })
        // mark
        this.inViewport = viewport.contains(r_im2, 2)
        // append to css
        css.width = r_im2.width
        css.height = r_im2.height
        css.left = (viewport.width - r_im2.width) / 2
        css.top = (viewport.height - r_im2.height) / 2
        css.visibility = "visible"
      }
      // done
      return Ti.Css.toStyle(css)
    }
  },
  ///////////////////////////////////
  methods: {
    onImageLoaded() {
      let $img = this.$refs.the_image
      if ($img) {
        this.naturalWidth = $img.naturalWidth
        this.naturalHeight = $img.naturalHeight
        this.imgLoading = false
      }
      this.onResizeViewport()
    },
    onResizeViewport() {
      let r_vpt = Ti.Rects.createBy(this.$refs.con)
      if (r_vpt) {
        this.viewportWidth = r_vpt.width
        this.viewportHeight = r_vpt.height
      }
    },
    onToggleImageFitMode() {
      this.onResizeViewport()
      this.fitMode = ({
        "contain": "cover",
        "cover": "contain"
      })[this.fitMode]
    }
  },
  ///////////////////////////////////
  mounted: function () {
    Ti.Viewport.watch(this, {
      resize: () => {
        this.onResizeViewport()
      }
    })
    this.onResizeViewport()
  },
  ///////////////////////////////////
  beforeDestroy: function () {
    Ti.Viewport.unwatch(this)
  }
  ///////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-media-image.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/media/image/web-media-image.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////
  data: () => ({
    myRotate: 0,
    myMouseIn: false,
    showZoomPick: false,
    showZoomDock: false,
    naturalWidth: -1,
    naturalHeight: -1,
    clientWidth: -1,
    clientHeight: -1,
    imgLoading: true,
    pickRect: {},
    myEnterAt: -1,    // AMS mouse enter for cooling
    myEnterNotifed: false
  }),
  /////////////////////////////////////////
  props: {
    //-------------------------------------
    // Data
    //-------------------------------------
    "src": {
      type: [String, Object]
    },
    "preview": {
      type: Object
    },
    "hoverPreview": {
      type: Object
    },
    "tags": {
      type: [String, Array, Object]
    },
    "tip": {
      type: String
    },
    "text": {
      type: String
    },
    "brief": {
      type: String
    },
    //-------------------------------------
    // Behavior
    //-------------------------------------
    "hasLink": {
      type: [String, Boolean, Object],
      default: undefined
    },
    "link": {
      type: String
    },
    "href": {
      type: String
    },
    "navTo": {
      type: Object
    },
    "newtab": {
      type: [String, Boolean]
    },
    "clickToNotify": {
      type: String,
      default: undefined
    },
    /*
    Show zoom lens and dock aside to the image
    - pickWidth : (0-1) percent | >1 for pixcle
    - scale : 2 zoome leave base on pick zoomLens
    - dockMode  : "V|H"
    - dockSpace : 10,
    - dockPosListX : ["left", "center", "right"],
    - dockPosListY : ["top", "center", "bottom"]
    - followPicker : false,  // dock to picker each time mouse move
    - pickStyle : {...}  // ex style for picker
    - dockStyle : {...}  // ex style for docker
    */
    "zoomLens": {
      type: Object,
      default: undefined
    },
    "enterNotify": {
      type: [String, Boolean]
      /*default: "media:enter"*/
    },
    "notifyPayload": {
      type: [Object, String, Number]
    },
    "enterCooling": {
      type: Number,
      default: 500
    },
    "leaveNotify": {
      type: [String, Boolean]
      /*default: "media:leave"*/
    },
    //-------------------------------------
    // Aspect
    //-------------------------------------
    /*
    {textHoverFull, randomRotate}
    */
    "effects": {
      type: Object,
      default: () => ({})
    },
    "imageConStyle": {
      type: Object
    },
    "imageStyle": {
      type: Object
    },
    "tagsStyle": {
      type: Object
    },
    "textStyle": {
      type: Object
    },
    "titleStyle": {
      type: Object
    },
    "briefStyle": {
      type: Object
    },
    "i18n": {
      type: Boolean,
      default: true
    },
    //-------------------------------------
    // Measure
    //-------------------------------------
    // ...
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "has-href": this.TheHref ? true : false,
        "no-href": this.TheHref ? false : true,
        "show-zoomlen": this.showZoomPick,
        "no-zoomlen": this.TheZoomLens ? false : true,
        "has-zoomlen": this.TheZoomLens ? true : false,
      }, this.effects)
    },
    //--------------------------------------
    EffectsHoverUp() {
      if (this.effects && this.effects.hoverUp)
        return Ti.Css.toSize(this.effects.hoverUp)
    },
    EffectsHoverScale() {
      if (this.effects
        && _.isNumber(this.effects.hoverScale)
        && this.effects.hoverScale != 1)
        return this.effects.hoverScale
    },
    //--------------------------------------
    TopStyle() {
      let zIndex;
      //
      // Mouse in
      //
      let transform = []
      if (this.myMouseIn) {
        // Random rotate, it will restore to normal when mouse enter
        if (this.myRotate) {
          transform.push(`rotate(0deg)`)
        }
        // Customized hover effect
        if (this.effects) {
          // Customized translateY
          if (this.EffectsHoverUp) {
            transform.push(`translateY(${this.EffectsHoverUp})`)
          }
          // Customized scale
          if (this.EffectsHoverScale) {
            transform.push(`scale(${this.EffectsHoverScale})`)
          }
        }
      }
      // Normal (mouse out)
      else {
        if (this.myRotate) {
          transform.push(`rotate(${this.myRotate}deg)`)
        }
      }
      if (transform.length > 0) {
        // The effect declared by CSS selector
        // I have to declare in here since the TopStyle will override the CSS rule
        if (this.myMouseIn) {
          if (!this.EffectsHoverUp && Ti.Dom.hasClass(this.$el, "hover-to-up")) {
            transform.push("translateY(-10px)")
          }
          if (!this.EffectsHoverScale && Ti.Dom.hasClass(this.$el, "hover-to-scale")) {
            transform.push("scale(1.1)")
          }
          zIndex = 1
        }
        // Done
        return {
          transition: "transform 0.3s",
          transform: transform.join(" "),
          zIndex
        }
      }
      // Return
      else if (this.EffectsHoverUp || this.EffectsHoverScale) {
        return {
          transition: "transform 0.3s"
        }
      }
    },
    //--------------------------------------
    TheZoomLens() {
      if (!this.zoomLens || this.clientWidth <= 0 || this.clientHeight <= 0)
        return

      let pickW = _.get(this.zoomLens, "pickWidth", .618)
      let pickH = _.get(this.zoomLens, "pickHeight", -1)
      let followPicker = _.get(this.zoomLens, "followPicker", false)
      let dockStyle = _.get(this.zoomLens, "dockStyle", {})
      let pickStyle = _.get(this.zoomLens, "pickStyle", {})

      let zl = {
        followPicker, dockStyle, pickStyle
      }
      zl.pickWidth = pickW < 1
        ? this.clientWidth * pickW
        : pickW;
      zl.pickHeight = pickH <= 0
        ? zl.pickWidth
        : (pickH < 1 ? this.clientHeight * pickH : pickH)

      let scale = _.get(this.zoomLens, "scale", 2)
      zl.dockWidth = zl.pickWidth * scale
      zl.dockHeight = zl.pickHeight * scale

      _.defaults(zl, {
        dockMode: "V",
        dockSpace: { x: 10, y: 0 },
        dockPosListY: ["top", "bottom"]
      })

      return zl
    },
    //--------------------------------------
    ZoomLenConStyle() {
      if (!this.showZoomDock || !this.showZoomPick) {
        return {
          display: "none"
        }
      }
    },
    //--------------------------------------
    ZoomLenPickStyle() {
      if (this.zoomLens && !_.isEmpty(this.pickRect)) {
        return Ti.Css.toStyle({
          visibility: this.showZoomPick ? "visible" : "hidden",
          top: this.pickRect.top,
          left: this.pickRect.left,
          width: this.TheZoomLens.pickWidth,
          height: this.TheZoomLens.pickHeight,
          ... this.TheZoomLens.pickStyle
        }, {
          autoPercent: false
        })
      }
    },
    //--------------------------------------
    ZoomLenDockStyle() {
      if (this.zoomLens) {
        if (_.isEmpty(this.pickRect)) {
          return {
            visibility: this.showZoomDock ? "visible" : "hidden",
            backgroundImage: `url("${this.TheSrc}")`
          }
        } else {
          let scale = _.get(this.zoomLens, "scale", 2)
          let cW = this.clientWidth
          let cH = this.clientHeight
          let pLeft = this.pickRect.left
          let pTop = this.pickRect.top
          return Ti.Css.toStyle({
            visibility: this.showZoomDock ? "visible" : "hidden",
            width: this.TheZoomLens.dockWidth,
            height: this.TheZoomLens.dockHeight,
            backgroundImage: `url("${this.TheSrc}")`,
            backgroundSize: `${cW * scale}px ${cH * scale}px`,
            backgroundPosition: `${pLeft * scale * -1}px ${pTop * scale * -1}px`,
            ... this.TheZoomLens.dockStyle
          })
        }
      }
    },
    //--------------------------------------
    EnterNotifyName() {
      return Ti.Util.trueGet(this.enterNotify, "media:enter")
    },
    //--------------------------------------
    LeaveNotifyName() {
      return Ti.Util.trueGet(this.leaveNotify, "media:leave")
    },
    //--------------------------------------
    TheSrc() {
      return Ti.WWW.evalObjPreviewSrc(this.src, this.preview)
    },
    //--------------------------------------
    TheHoverSrc() {
      return Ti.WWW.evalObjPreviewSrc(this.src, this.hoverPreview)
    },
    //--------------------------------------
    TheTags() {
      if (this.tags) {
        let tags = _.concat(this.tags)
        let list = []
        for (let tag of tags) {
          if (_.isString(tag)) {
            list.push({
              className: undefined,
              text: tag
            })
          } else {
            let { text, color, className } = tag
            if (!text) {
              continue
            }
            let style;
            if (color) {
              style = { "background-color": color }
            }
            list.push({ text, style, className })
          }
        }
        return list
      }
    },
    //--------------------------------------
    TheText() {
      if (this.text) {
        let str = this.text
        if (_.isPlainObject(this.src)) {
          str = Ti.Util.explainObj(this.src, this.text)
        }
        if (this.i18n) {
          str = Ti.I18n.text(str)
        }
        return str
      }
    },
    //--------------------------------------
    TheBrief() {
      if (this.brief) {
        let str = this.brief
        if (_.isPlainObject(this.src)) {
          str = Ti.Util.explainObj(this.src, this.brief)
        }
        if (this.i18n) {
          str = Ti.I18n.text(str)
        }
        return str
      }
    },
    //--------------------------------------
    isCssTextIn() {
      return this.$el && Ti.Dom.hasClass(this.$el, "text-in")
    },
    //--------------------------------------
    isHasLink() {
      if (this.link) {
        return true
      }
      // Auto
      if (_.isUndefined(this.hasLink)) {
        return this.href || _.get(this.navTo, "value") ? true : false
      }
      return this.hasLink ? true : false
    },
    //--------------------------------------
    TheHref() {
      if (this.link) {
        return this.link
      }
      if (this.isHasLink) {
        let href = this.href
        if (_.isPlainObject(this.src)) {
          href = Ti.Util.explainObj(this.src, this.href)
        }
        return href
      }
    },
    //--------------------------------------
    isNewTab() {
      let newtab = this.newtab
      if (_.isString(newtab)) {
        if (_.isPlainObject(this.src)) {
          newtab = Ti.Util.explainObj(this.src, this.newtab)
        }
      }
      return newtab ? true : false
    },
    //--------------------------------------
    isWaitEnterCooling() {
      return this.myEnterAt > 0 && !this.myEnterNotifed
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnImageLoaded() {
      let $img = this.$refs.img
      if ($img) {
        this.naturalWidth = $img.naturalWidth
        this.naturalHeight = $img.naturalHeight
        this.clientWidth = $img.clientWidth
        this.clientHeight = $img.clientHeight
        this.imgLoading = false
      }
    },
    //--------------------------------------
    OnClickTop(evt) {
      if (this.clickToNotify) {
        evt.preventDefault()
        let payload = _.assign({
          $el: this.$el,
          $img: this.$refs.img
        }, this.notifyPayload)
        this.$notify(this.clickToNotify, payload)
        return
      }
      if (!this.isHasLink) {
        return
      }
      if (this.navTo && !this.newtab && !this.link) {
        evt.preventDefault()
        this.$notify("nav:to", this.navTo)
      }
    },
    //--------------------------------------
    OnMouseMove($event) {
      if (!_.isElement(this.$refs.img) || !_.isElement(this.$refs.pick)) {
        return
      }
      let imRect = Ti.Rects.createBy(this.$refs.img)
      let pkRect = Ti.Rects.createBy(this.$refs.pick)
      let { clientX, clientY } = $event

      let rect = Ti.Rects.create({
        x: clientX, y: clientY,
        width: pkRect.width,
        height: pkRect.height
      })
      imRect.wrap(rect)
      rect.relative(imRect)

      if (this.TheZoomLens && this.TheZoomLens.followPicker) {
        console.log(TheZoomLens)
        Ti.Dom.dockTo(this.$refs.dock, this.$refs.pick, {
          mode: this.TheZoomLens.dockMode,
          space: this.TheZoomLens.dockSpace,
          posListX: this.TheZoomLens.dockPosListX,
          posListY: this.TheZoomLens.dockPosListY
        })
      }

      this.pickRect = rect
      this.clientWidth = this.$refs.img.clientWidth
      this.clientHeight = this.$refs.img.clientHeight
      this.showZoomPick = true
    },
    //--------------------------------------
    OnMouseEnter() {
      //console.log("> image")
      this.myMouseIn = true
      this.myEnterAt = Date.now()

      _.delay(() => {
        this.delayCheckEnter()
      }, 10)

      if (this.EnterNotifyName && this.enterCooling >= 0) {
        _.delay(() => {
          this.delayNotifyEnter()
        }, this.enterCooling)
      } else {
        this.myEnterNotifed = true
      }
    },
    //--------------------------------------
    OnMouseLeave() {
      //console.log("< image")
      this.myMouseIn = false
      _.delay(() => {
        this.delayCheckLeave()
      }, 10)
    },
    //--------------------------------------
    delayNotifyEnter() {
      // Guard
      if (!this.myMouseIn || this.myEnterNotifed || this.myEnterAt < 0) {
        this.myEnterNotifed = true
        return
      }
      let du = Date.now() - this.myEnterAt
      if (du >= this.enterCooling) {
        //console.log("du cooling", du, this.enterCooling)
        this.myEnterNotifed = true
        let payload = _.assign({
          $el: this.$el,
          $img: this.$refs.img
        }, this.notifyPayload)
        this.$notify(this.EnterNotifyName, payload)
      }
    },
    //--------------------------------------
    delayCheckEnter() {
      if (!this.myMouseIn) {
        return
      }
      //console.log("enter image")
      //
      // Full text
      //
      if (this.effects.textHoverFull && this.isCssTextIn) {
        let $text = this.$refs.text
        // Remember the old rect for restore size when mouse leave
        if ($text && !$text.__primary_rect) {
          let rect = Ti.Rects.createBy(this.$refs.text)
          $text.__primary_rect = rect
          $text.__reset_primary = false
          // Set start size for transition
          Ti.Dom.updateStyle($text, {
            width: rect.width, height: rect.height
          })
        }
        // set full text
        let view = Ti.Rects.createBy(this.$el)
        _.delay(() => {
          Ti.Dom.updateStyle($text, {
            width: view.width, height: view.height
          })
        }, 10)
      }
      //
      // Switch Hover src
      //
      let $img = this.$refs.img
      if ($img && this.TheHoverSrc) {
        $img.src = this.TheHoverSrc
      }
    },
    //--------------------------------------
    delayCheckLeave() {
      if (this.myMouseIn) {
        return
      }
      this.showZoomPick = false
      this.showZoomDock = false
      //console.log("leave image")
      //
      // Full text
      //
      if (this.effects.textHoverFull && this.isCssTextIn) {
        let $text = this.$refs.text
        // trans event handler
        const OnTextTransitionend = () => {
          //console.log("$text transitionend")
          Ti.Dom.updateStyle($text, {
            width: "", height: ""
          })
          $text.__primary_rect = undefined
          $text.__reset_primary = true
        }
        // Remember the old rect for restore size when mouse leave
        if ($text && $text.__primary_rect) {
          let rect = $text.__primary_rect
          // Set callback when transitionend
          $text.addEventListener("transitionend", OnTextTransitionend, { once: true })
          // Restore the old size
          _.delay(() => {
            //console.log("restore to ", rect.toString())
            Ti.Dom.updateStyle($text, {
              width: rect.width, height: rect.height
            })
          }, 10)
          // Make sure restore to old size
          _.delay(() => {
            if (!$text.__reset_primary && !this.myMouseIn) {
              //console.log("clean!!!")
              Ti.Dom.updateStyle($text, {
                width: "", height: ""
              })
              $text.removeEventListener("transitionend", OnTextTransitionend);
              $text.__primary_rect = undefined
              $text.__reset_primary = true
            }
          }, 1000)
        }
      }
      //
      // Switch Hover src
      //
      let $img = this.$refs.img
      if ($img && this.TheHoverSrc) {
        $img.src = this.TheSrc
      }
      //
      // Notify Evento
      //
      if (this.myEnterNotifed && this.LeaveNotifyName) {
        let payload = _.assign({
          $el: this.$el,
          $img: this.$refs.img
        }, this.notifyPayload)
        this.$notify(this.LeaveNotifyName, payload)
      }
      this.myEnterNotifed = false
      this.myEnterAt = -1
    },
    //--------------------------------------
    OnTextTransitionend() {
      if (!this.myMouseIn) {
        Ti.Dom.updateStyle(this.$refs.text, {
          width: "", height: ""
        })
        this.$refs.text.__primary_rect = undefined
      }
    },
    //--------------------------------------
    evalEffects() {
      // Guard
      if (!this.effects) {
        return
      }

      // Auto rotate
      if (this.effects.randomRotate) {
        let rr1 = this.effects.randomRotate
        let rr0 = rr1 * -1
        let rr = [rr0, rr1].sort()
        this.myRotate = _.random(...rr)
      } else {
        this.myRotate = 0
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "showZoomPick": function (newVal) {
      if (newVal && this.zoomLens) {
        this.$nextTick(() => {
          if (this.TheZoomLens && this.TheZoomLens.followPicker) {
            Ti.Dom.dockTo(this.$refs.dock, this.$refs.img, {
              mode: this.TheZoomLens.dockMode,
              space: this.TheZoomLens.dockSpace,
              posListX: this.TheZoomLens.dockPosListX,
              posListY: this.TheZoomLens.dockPosListY
            })
            _.delay(() => {
              this.showZoomDock = true
            }, 100)
          } else {
            this.showZoomDock = true
          }
        })
      }
    },
    "showZoomDock": function (newVal, oldVal) {
      if (newVal && newVal != oldVal && this.TheZoomLens) {
        Ti.Dom.dockTo(this.$refs.dock, this.$refs.img, {
          mode: this.TheZoomLens.dockMode,
          space: this.TheZoomLens.dockSpace,
          posListX: this.TheZoomLens.dockPosListX,
          posListY: this.TheZoomLens.dockPosListY
        })
      }
    },
    "effects": "evalEffects"
  },
  //////////////////////////////////////////
  mounted: function () {
    this.evalEffects()
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-shelf-wall.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/shelf/wall/web-shelf-wall.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data: () => ({
    myRows: 0,
    myColumns: 0,
    myLastCols: 0
  }),
  //////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "data": {
      type: Array,
      default: undefined
    },
    "vars": {
      type: Object,
      default: undefined
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    // Item comType
    "comType": {
      type: String,
      default: "ti-label"
    },
    "comConf": {
      type: [Object, String],
      default: () => ({
        value: "=.."
      })
    },
    "showLoadMore": Boolean,
    "moreLoading": Boolean,
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "blankAs": {
      type: Object,
      default: () => ({
        text: "i18n:empty",
        icon: "fas-box-open"
      })
    },
    "align": {
      type: String,
      default: "left",
      validator: v => /^(left|center)$/.test(v)
    },
    "loadingAs": {
      type: [Object, Boolean],
      default: () => ({})
    },
    "itemClass": {
      type: [String, Array],
      default: undefined
    },
    "itemStyle": {
      type: [Object, Array],
      default: undefined
    },
    "itemWidth": {
      type: [String, Number, Array],
      default: undefined
    },
    "itemHeight": {
      type: [String, Number, Array],
      default: undefined
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-single-row": 1 == this.myRows,
        "is-multi-rows": this.myRows > 1,
      },`align-${this.align}`)
    },
    //--------------------------------------
    getItemClass() {
      let itKlass = _.without(_.concat(this.itemClass))
      return (index) => {
        let i;
        if (itKlass.length > 0) {
          i = Ti.Num.scrollIndex(index, itKlass.length)
          return itKlass[i]
        }
      }
    },
    //--------------------------------------
    getItemStyle() {
      let itWs = _.without(_.concat(this.itemWidth), undefined)
      let itHs = _.without(_.concat(this.itemHeight), undefined)
      let itStyles = _.without(_.concat(this.itemStyle), undefined)
      return (index) => {
        let w, h, sty, i;
        if (itWs.length > 0) {
          i = Ti.Num.scrollIndex(index, itWs.length)
          w = itWs[i]
        }
        if (itHs.length > 0) {
          i = Ti.Num.scrollIndex(index, itHs.length)
          h = itHs[i]
        }
        if (itStyles.length > 0) {
          i = Ti.Num.scrollIndex(index, itStyles.length)
          sty = itStyles[i]
        }
        let css = _.cloneDeep(sty) || {}
        if (!Ti.Util.isNil(w)) {
          css.width = Ti.Css.toSize(w)
        }
        if (!Ti.Util.isNil(h)) {
          css.height = Ti.Css.toSize(h)
        }
        return css
      }
    },
    //--------------------------------------
    WallItems() {
      if (!_.isArray(this.data))
        return []
      let vars = _.cloneDeep(this.vars)
      let list = []
      for (let i = 0; i < this.data.length; i++) {
        let stl = this.getItemStyle(i)
        let it = this.data[i]
        let comConf;
        if (vars) {
          vars.item = it
          comConf = Ti.Util.explainObj(vars, this.comConf)
        } else {
          comConf = Ti.Util.explainObj(it, this.comConf)
        }
        list.push({
          key: `It-${i}`,
          className: this.getItemClass(i),
          style: stl,
          comType: this.comType,
          comConf
        })
      }

      return list
    },
    //--------------------------------------
    BlankItems() {
      let list = []
      let index = this.WallItems.length
      for (let i = this.myLastCols; i < this.myColumns; i++) {
        list.push({
          key: `Blank-It-${i}`,
          className: this.getItemClass(index + i),
          style: this.getItemStyle(index + i)
        })
      }
      return list
    },
    //--------------------------------------
    isLoading() {
      return Ti.Util.isNil(this.data)
    },
    //--------------------------------------
    isEmpty() {
      return _.isEmpty(this.WallItems)
    },
    //-----------------------------------------------
    LoadingMoreBtn() {
      if (this.moreLoading) {
        return {
          icon: "fas-spinner fa-spin",
          text: "i18n:loading"
        }
      }
      return {
        icon: "fas-angle-down",
        text: "i18n:more"
      }
    },
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnScroll() {
      if (this.showLoadMore) {
        let rev = Ti.Dom.pendingMoreWhenScrolling({
          $view: this.$el,
          $more: this.$refs.more
        })
        if (rev >= 1) {
          this.$notify("load:more")
        }
      }
    },
    //--------------------------------------
    OnWallResize() {
      this.$nextTick(() => {
        this.evalWallColumns(this.$refs.group)
      })
    },
    //--------------------------------------
    OnClickLoadMore() {
      if (!this.moreLoading) {
        this.$notify("load:more")
      }
    },
    //--------------------------------------
    evalWallColumns($wallGroup) {
      if("center"== this.align){
        return;
      }
      // Customized item width
      if (_.isArray(this.itemWidth) && this.itemWidth.length > 1) {
        return
      }
      // console.log("evalWallColumns")
      let $divs = Ti.Dom.findAll(":scope >  .wall-tile.is-com", $wallGroup)
      let cols = 0;
      let rows = this.isEmpty ? 0 : 1;
      let last = 0;
      if (!_.isEmpty($divs)) {
        let top = undefined;
        for (let $div of $divs) {
          let rect = $div.getBoundingClientRect()
          let divTop = parseInt(rect.top)
          if (_.isUndefined(top)) {
            top = divTop
          }
          if (top == divTop) {
            last++
          }
          // Find the next row
          else {
            cols = Math.max(cols, last)
            top = divTop;
            rows++;
            last = 1;
          }
        }
        cols = Math.max(cols, last)
      }
      this.myColumns = cols;
      this.myRows = rows;
      this.myLastCols = last;
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "data": "OnWallResize"
  },
  //////////////////////////////////////////
  mounted: function () {
    //.................................
    Ti.Viewport.watch(this, {
      resize: _.debounce(() => this.OnWallResize(), 20)
    })
    //.................................
    // this.OnWallResize()
    //.................................
  },
  //////////////////////////////////////////
  destroyed: function () {
    Ti.Viewport.unwatch(this)
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-text-article-computed.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/text/article/web-text-article-computed.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //--------------------------------------
  TopClass() {
    return this.getTopClass()
  },
  //--------------------------------------
  ArticleClass() {
    return `is-theme-${this.theme}`
  },
  //--------------------------------------
  isLoading() {
    return _.isUndefined(this.value)
  },
  //--------------------------------------
  isBlank() {
    return Ti.S.isBlank(this.value)
  },
  //--------------------------------------
  ArticleHtml() {
    if("html" == this.type || "text/html" == this.type) {
      return this.value
    }
    if("text" == this.type || "text/plain" == this.type) {
      if(!this.value) {
        return ""
      }
      return this.value.replace(/\r?\n/g, '<br>')
    }
    throw `type '${this.type}' not support yet!`
  }
  //--------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'preview-info-field.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/preview/com/preview-info-field/preview-info-field.mjs'] = (function(){
/////////////////////////////////////////////////////
const _M = {
  ///////////////////////////////////////////////////
  data: ()=>({
    theValue : null
  }),
  ///////////////////////////////////////////////////
  props : {
    "icon" : {
      type : String,
      default : null
    },
    "data" : {
      type : Object,
      default : ()=>({})
    },
    "type" : {
      type : String,
      default : "String"
    },
    "title" : {
      type : String,
      default : null
    },
    "name" : {
      type : String,
      default : null
    },
    "dict" : {
      type : String,
      default : null
    },
    "nameWidth" : {
      type : [String, Number],
      default : 50
    },
    "valueWidth" : {
      type : [String, Number],
      default : 200
    },
    "transformer" : {
      type : [String,Object,Function],
      default : null
    }
  },
  ///////////////////////////////////////////////////
  watch : {
    "data" : async function() {
      this.theValue = await this.evalTheValue()
    },
    "name" : async function() {
      this.theValue = await this.evalTheValue()
    }
  },
  ///////////////////////////////////////////////////
  computed : {
    theTransformer() {
      let trans = this.transformer
          || "Ti.Types." + Ti.Types.getFuncByType(this.type||"String", "transformer")

      return Ti.Util.genInvoking(trans, {
        context: this.data,
        partial: "right"
      })
    },
    theNameStyle() {
      return Ti.Css.toStyle({
        "width" : this.nameWidth
      })
    },
    theValueStyle() {
      return Ti.Css.toStyle({
        "width" : this.valueWidth
      })
    }
  },
  ///////////////////////////////////////////////////
  methods : {
    async evalTheValue() {
      let val = _.get(this.data, this.name)

      if(this.dict) {
        val = await wn.Dict.get(this.dict, val)
      }

      if(_.isFunction(this.theTransformer)) {
        val = this.theTransformer(val)
      }

      return val
    }
  },
  ///////////////////////////////////////////////////
  mounted : async function(){
    this.theValue = await this.evalTheValue()
  }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-pay-done-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/pay/done/web-pay-done-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  "waitIcon": {
    type : String,
    default : "fas-spinner fa-spin"
  },
  "waitText": {
    type : String,
    default : "i18n:loading"
  },
  "okIcon": {
    type : String,
    default : "im-check-mark-circle"
  },
  "okText": {
    type : String,
    default : "i18n:pay-re-ok"
  },
  // [{icon, text, href(for newTab), path(for navTo)}]
  "okLinks": {
    type: Array,
    default: ()=>[]
  },
  "failIcon": {
    type : String,
    default : "im-warning"
  },
  "failText": {
    type : String,
    default : "i18n:pay-re-fail"
  },
  // [{icon, text, href(for newTab), path(for navTo)}]
  "failLinks": {
    type: Array,
    default: ()=>[]
  },
  // [{icon, text, href(for newTab), path(for navTo)}]
  "doneLinks": {
    type: Array,
    default: ()=>[]
  },
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'net-fb-albums.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/net/facebook/albums/net-fb-albums.mjs'] = (function(){
/////////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////////
  data: () => ({
    appId: null,
    appSecret: null,
    grantedScopes: null,
    longLiveAccessToken: null,
    tokenExpiresIn: 5183967,
    tokenType: "bearer",
    tokenExpireAt: 0,

    myId: undefined,
    myName: undefined,
    myGrantedScopes: undefined,
    myLongLiveAK: undefined,

    myAlbumCoverCache: undefined,

    myAlbumList: undefined,
    myAlbumMoreLoading: false,
    myAlbumCursorAfter: undefined,
    currentAlbumId: undefined,

    myPhotoList: [],
    myPhotoMoreLoading: false,
    myPhotoCursorAfter: undefined,

    myFilterKeyword: undefined
  }),
  ///////////////////////////////////////////////////////
  props: {},
  ///////////////////////////////////////////////////////
  computed: {
    //---------------------------------------------------
    hasCurrentAlbum() {
      return this.currentAlbumId ? true : false
    },
    //---------------------------------------------------
    AlbumnCoverCachePath() {
      return `~/.domain/facebook/${this.domain}.cover.json`
    },
    //---------------------------------------------------
    AccountName() {
      return _.get(this.oDir, "nm")
    },
    //---------------------------------------------------
    CurrentAlbum() {
      return this.getAlbum(this.currentAlbumId)
    },
    //---------------------------------------------------
    CurrentAlbumTitle() {
      if (this.hasCurrentAlbum) {
        let title = _.get(this.CurrentAlbum, "name")
        let count = '..'
        if (_.isArray(this.myPhotoList)) {
          count = this.myPhotoList.length
        }
        return `(${count}/${this.CurrentAlbum.count})📷 ${title}`
      }
      return "i18n:nil"
    },
    //---------------------------------------------------
    FilteredAlbumList() {
      let list = []
      let kwds = Ti.S.splitIgnoreBlank(_.toLower(this.myFilterKeyword), /[\s,;]+/g)
      _.forEach(this.myAlbumList, album => {
        if (kwds.length == 0 || !album.name) {
          list.push(album)
        } else {
          let aName = _.toLower(album.name)
          for (let kwd of kwds) {
            if (aName.indexOf(kwd) >= 0) {
              list.push(album)
              return
            }
          }
        }
      })
      return list
    },
    //---------------------------------------------------
    FilteredAlbumSummary() {
      let N = this.FilteredAlbumList.length
      let photoC = 0;
      for (let album of this.FilteredAlbumList) {
        photoC += album.count
      }
      return `Total ${N} albums ${photoC} photos`
    },
    //---------------------------------------------------
    ApiScope() {
      return this.scope || "public_profile"
    },
    //---------------------------------------------------
    ProfileSelectorIds() {
      return this.profileSelectorIds || this.userId || undefined
    },
    //---------------------------------------------------
    isLoadingAlbums() {
      return _.isUndefined(this.myAlbumList) || this.myAlbumMoreLoading
    },
    //---------------------------------------------------
    isLoadingPhotos() {
      return this.hasCurrentAlbum
        && (_.isUndefined(this.myPhotoList) || this.myPhotoMoreLoading)
    },
    //---------------------------------------------------
    AlbumPhotoData() {
      if (!_.isArray(this.myPhotoList)) {
        return
      }
      let re = []
      _.forEach(this.myPhotoList, photo => {
        let p2 = _.cloneDeep(photo)
        Ti.WWW.FB.setObjPreview(p2, p2.images)
        re.push(p2)
      })
      return re
    },
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods: {
    //---------------------------------------------------
    OnFilterChange(val) {
      this.myFilterKeyword = _.trim(val) || undefined
    },
    //---------------------------------------------------
    async OnAlbumSelect({ currentId }) {
      this.currentAlbumId = currentId

      //await this.reloadAllPhotos()
      await this.loadNPhotos(2, { reset: true })

      let album = _.cloneDeep(this.CurrentAlbum)
      if (this.notifyName) {
        this.$notify(this.notifyName, album)
      }
    },
    //---------------------------------------------------
    async loadMoreAlbums() {
      let N = await Ti.Prompt('How many page you want to load');
      N = N * 1
      if (N > 0) {
        await this.doLoadMoreAlbums(N)
      }
    },
    //---------------------------------------------------
    async doLoadMoreAlbums(N = 1, { reset } = {}) {
      if (reset) {
        this.myAlbumList = []
        this.myAlbumCursorAfter = undefined
      }
      else if (!this.myAlbumCursorAfter) {
        Ti.Toast.Open("No more data", { position: "bottom", type: "info" })
        return false
      }
      this.myAlbumMoreLoading = true
      await this.loadNAlbums(N)
      this.myAlbumMoreLoading = false
      return true
    },
    //---------------------------------------------------
    async doLoadMorePhotos(N = 1) {
      if (!this.myPhotoCursorAfter) {
        Ti.Toast.Open("No more data", { position: "bottom", type: "info" })
        return false
      }
      this.myPhotoMoreLoading = true
      await this.loadNPhotos(N)

      // Set to data
      this.myPhotoMoreLoading = false
      return true
    },
    //---------------------------------------------------
    getAlbum(albumId) {
      if (_.isArray(this.myAlbumList)) {
        for (let ab of this.myAlbumList) {
          if (ab.id == albumId) {
            return ab
          }
        }
      }
    },
    //--------------------------------------------
    async viewLoadedAlbumsJson() {
      if (this.myAlbumList) {
        let json = JSON.stringify(this.myAlbumList, null, '    ')
        Ti.EditCode(json, { mode: "json", width: "90%", height: "80%" })
      }
    },
    //--------------------------------------------
    // 覆盖主菜单的属性
    async openCurrentMeta() {
      // 显示当前的相册
      if (this.CurrentAlbum) {
        let json = JSON.stringify(this.CurrentAlbum, null, '    ')
        let re = Ti.EditCode(json, { mode: "json", width: "90%", height: "80%" })
        console.log(re)
        return
      }

      // 显示集合属性
      await Ti.App(this).dispatch("main/openCurrentMetaEditor")
    },
    //---------------------------------------------------
    //
    //                  主要的数据操作接口
    //
    //---------------------------------------------------
    async loadNPhotos(N = 1, {
      reset = false,
      page = 1
    } = {}) {
      //console.log("reloadNPhotos", N)
      if (reset) {
        this.myPhotoList = []
        this.myPhotoCursorAfter = undefined
      }
      if (!this.hasCurrentAlbum) {
        return
      }

      let results = []
      // Read the first page
      let after = this.myPhotoCursorAfter
      let re = await this.reloadPhotos({ after })
      if (re.list) {
        results.push(...re.list)
      }
      // Reaload remain pages
      while (page < N && re.after) {
        re = await this.reloadPhotos({ after: re.after })
        page++
        if (re.list) {
          results.push(...re.list)
        }
      }

      this.myPhotoCursorAfter = re.after
      this.myPhotoList = _.concat(this.myPhotoList, results)
      return re.after ? true : false
    },
    //---------------------------------------------------
    async reloadPhotos({ after } = {}) {
      if (!this.hasCurrentAlbum) {
        return { list: [] }
      }
      // Reload albums
      let { data, paging } = await Wn.FbAlbum.loadPhotos(
        this.domain,
        this.currentAlbumId,
        { after }
      )

      return {
        list: data,
        before: _.get(paging, "cursors.before"),
        after: _.get(paging, "cursors.after")
      }
    },
    //---------------------------------------------------
    //
    //      加载相册接口
    //
    //---------------------------------------------------
    async initAlbumCoverCache() {
      if (Ti.Util.isNil(this.myAlbumCoverCache)) {
        let ph = this.AlbumnCoverCachePath
        let re = await Wn.Sys.exec2(`cat -quiet '${ph}'`)
        let cc = _.trim(re) ? JSON.parse(re) : {}
        this.myAlbumCoverCache = cc || {}
      }
    },
    //---------------------------------------------------
    async reloadAlbumsCover(albums = [], force = false) {
      // 确保加载了缓存
      await this.initAlbumCoverCache()
      // Set photos to each album obj
      let loader = []
      let cache = {}
      for (let album of albums) {
        if (album && album.cover_photo && album.cover_photo.id) {
          let photoId = album.cover_photo.id

          // match cache
          // {width,height,src,thumb_src, preview}
          let objImg = this.myAlbumCoverCache[photoId]
          if (objImg) {
            _.assign(album, objImg)
            continue
          }

          // load photo
          loader.push(
            Wn.FbAlbum.loadPhoto(this.domain, photoId, force)
              .then(photo => {
                if (!_.isEmpty(photo.images)) {
                  let objImg = Ti.WWW.FB.setObjPreview(album, photo.images)
                  cache[photoId] = objImg
                }
              })
          )
        }
      }
      await Promise.all(loader)

      // Save cache 
      if (!_.isEmpty(cache)) {
        console.log("save cache")
        cache = _.defaults(cache, this.myAlbumCoverCache)
        this.myAlbumCoverCache = cache
        let ph = this.AlbumnCoverCachePath
        await Wn.Sys.exec2(`str > ${ph}`, { input: JSON.stringify(cache) })
      }
    },
    //---------------------------------------------------
    async resetCoverAndLoadAlbums() {
      let ph = this.AlbumnCoverCachePath
      await Wn.Sys.exec2(`rm '${ph}'`)
      this.myAlbumCoverCache = undefined
      this.loadNAlbums(1, { reset: true })
    },
    //---------------------------------------------------
    async loadNAlbums(N = 1, {
      reset = false,
      page = 1
    } = {}) {
      //console.log("loadNAlbums", N, this.myAlbumMoreLoading)
      if (reset) {
        this.myAlbumList = []
        this.myAlbumCursorAfter = undefined
      }

      let results = []
      // Read the first page
      let after = this.myAlbumCursorAfter
      let re = await this.reloadAlbums({ after })
      if (re.list) {
        results.push(...re.list)
      }
      // Reaload remain pages
      while (page < N && re.after) {
        re = await this.reloadAlbums({ after: re.after })
        page++
        if (re.list) {
          results.push(...re.list)
        }
      }

      this.myAlbumCursorAfter = re.after

      // 确保不能加入重复的相册
      let list = _.cloneDeep(this.myAlbumList)
      let ids = {}
      _.forEach(this.myAlbumList, ({ id }) => ids[id] = true)
      _.forEach(results, ab => {
        if (!ids[ab.id]) {
          list.push(ab)
        }
      })
      this.myAlbumList = list

      this.checkCurrentAlbums()

      return re.after ? true : false
    },
    //---------------------------------------------------
    async reloadAlbums({ after } = {}) {
      // Invoke api
      let { data, paging } = await Wn.FbAlbum.loadAlbums(
        this.domain,
        this.myId,
        { after }
      )
      //console.log(data)
      await this.reloadAlbumsCover(data)

      return {
        list: data,
        before: _.get(paging, "cursors.before"),
        after: _.get(paging, "cursors.after")
      }
    },
    //---------------------------------------------------
    checkCurrentAlbums() {
      // If current album out of the albumn list
      // Maybe user switch the account, then clean the photoList
      if (this.currentAlbumId) {
        let currentInAlbum = false
        for (let al of this.myAlbumList) {
          if (al.id == this.currentAlbumId) {
            currentInAlbum = true
            break
          }
        }
        if (!currentInAlbum) {
          this.currentAlbumId = null
          this.myPhotoList = []
        }
      }
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  watch: {
    "userId": {
      handler: function (newVal) {
        this.myId = newVal
      },
      immediate: true
    }
  },
  ///////////////////////////////////////////////////////
  mounted: async function () {
    await this.initFBSdk()
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-pay-proceed-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/pay/proceed/web-pay-proceed-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  "watchUser" : {
    type : String,
    default : null
  },
  "qrcodeSize": {
    type: [String, Number],
    default: 200
  },
  "checkPaymentInterval": {
    type: Number,
    default: 3000
  },
  "fetchOrder": {
    type: Function,
    default: undefined
  },
  "payOrder": {
    type: Function,
    default: undefined
  },
  "createOrder": {
    type: Function,
    default: undefined
  },
  "checkOrder": {
    type: Function,
    default: undefined
  },
  "returnUrl": {
    type: String,
    default: undefined
  },
  "orderTitle": {
    type: String,
    default: undefined
  },
  "orderType": {
    type: String,
    default: "A"
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-bullet-mixin.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/bullet/ti-bullet-mixin.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data: () => ({
    myRect: undefined,

    myDict: undefined,
    myOptionsData: [],
    myOptionsMap: {},
    loading: false,
  }),
  ////////////////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "value": undefined,
    "options": {
      type: [String, Array, Function, Ti.Dict],
      default: () => [],
    },
    "optionMapping": {
      type: [Function, Object],
      default: undefined,
    },
    "optionFilter": {
      type: [Function, Object, Array],
      default: undefined,
    },
    // Item ignore by the AutoMatch
    "ignoreBy": undefined,
    /*
     {
       title : "title",
       key   : "key",
       items : "items"
     } 
     */
    "groupBy": {
      type: [Object, Function, Boolean],
      default: undefined,
    },
    "valueBy": {
      type: [String, Function],
      default: "value|id",
    },
    "textBy": {
      type: [String, Function],
      default: "text|name|title",
    },
    "iconeBy": {
      type: [String, Function],
      default: "icon",
    },
    //-----------------------------------
    // Behaviors
    //-----------------------------------
    // Default group title
    "title": {
      type: String,
    },
    "isBlank": {
      type: Boolean,
      default: false,
    },
    "otherEnabled": {
      type: Boolean,
      default: false,
    },
    "otherText": {
      type: String,
      default: "i18n:others",
    },
    "otherPlaceholder": {
      type: String,
      default: "i18n:no-set",
    },
    "otherInputWidth": {
      type: [String, Number],
    },
    "otherDefaultValue": {
      type: String,
      default: "",
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "groupStyle": {
      type: Object,
    },
    "itemsStyle": {
      type: Object,
    },
    "bulletIconOn": {
      type: String,
      default: "fas-check-circle",
    },
    "bulletIconOff": {
      type: String,
      default: "far-circle",
    },
    "autoI18n": {
      type: Boolean,
      default: true,
    },
    "defualItemIcon": {
      type: [Object, String],
      default: undefined,
    },
    "blankAs": {
      type: Object,
    },
    "gridColumnHint": {
      type: [Number, String, Array],
      // [[4,1200],[3,900],[2,600],1]
      default: 1,
    },
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass(
        {
          "as-grid": this.GridColumnCount > 1,
        },
        this.myTypeName
      );
    },
    //------------------------------------------------
    TopStyle() {},
    //-----------------------------------------------
    BlankLoadingConf() {
      return _.assign(
        {
          className: "nil-data as-big-mask",
          icon: "far-list-alt",
          text: "empty-data",
        },
        this.blankAs
      );
    },
    //-----------------------------------------------
    BulletGroupStyle() {
      let style = _.assign({}, this.groupStyle);
      return style;
    },
    //-----------------------------------------------
    BulletItemsStyle() {
      let style = _.assign({}, this.itemsStyle);
      if (this.GridColumnCount > 1) {
        _.assign(style, {
          "grid-template-columns": _.repeat("1fr ", this.GridColumnCount),
        });
      }
      return style;
    },
    // //--------------------------------------------------
    // GridContext() {
    //   // console.log("eval GridContext")
    //   return {
    //     ... (this.myRect || {}),
    //     screen: this.myScreenMode
    //   }
    // },
    // //--------------------------------------------------
    // GridColumnCount() {
    //   if (this.gridColumnHint >= 1) {
    //     return this.gridColumnHint
    //   }
    //   return Ti.Util.selectValue(this.GridContext, this.gridColumnHint, {
    //     by: ([v, m], { width, screen }) => {
    //       if (!m || m == screen || width >= m) {
    //         return v
    //       }
    //     }
    //   })
    // },
    //-----------------------------------------------
    FnOptionFilter() {
      if (_.isFunction(this.optionFilter)) {
        return this.optionFilter;
      }
      if (this.optionFilter) {
        return Ti.AutoMatch.parse(this.optionFilter);
      }
    },
    //-----------------------------------------------
    FnOptionMapping() {
      if (_.isFunction(this.optionMapping)) {
        return this.optionMapping;
      }
      if (this.optionMapping) {
        return (obj) => {
          return Ti.Util.translate(obj, this.optionMapping);
        };
      }
      return _.identity;
    },
    //-----------------------------------------------
    Grouping() {
      if (this.groupBy) {
        if (_.isFunction(this.groupBy)) {
          return this.groupBy;
        }
        if (_.isPlainObject(this.groupBy)) {
          return (obj) => {
            let title = _.get(obj, this.groupBy.title);
            let key = _.get(obj, this.groupBy.key);
            let items = _.get(obj, this.groupBy.items);
            if (key && !_.isEmpty(items)) {
              return { title, key, items };
            }
          };
        }
        return (obj) => _.pick(obj, "title", "key", "items");
      }
    },
    //-----------------------------------------------
    IgnoreItem() {
      if (this.ignoreBy) {
        return Ti.AutoMatch.parse(this.ignoreBy);
      }
      return () => false;
    },
    //-----------------------------------------------
    getItemIcon() {
      if (this.myDict) return (it) => this.myDict.getIcon(it);
      return Ti.Util.genGetterNotNil(this.iconBy);
    },
    getItemText() {
      if (this.myDict) return (it) => this.myDict.getText(it);
      return Ti.Util.genGetterNotNil(this.textBy);
    },
    getItemValue() {
      if (this.myDict) return (it) => this.myDict.getValue(it);
      return Ti.Util.genGetterNotNil(this.valueBy);
    },
    //------------------------------------------------
    hasItems() {
      return !_.isEmpty(this.ItemGroups);
    },
    //------------------------------------------------
    ItemGroups() {
      if (this.Grouping) {
        let list = [];
        for (let i = 0; i < this.myOptionsData.length; i++) {
          let data = this.myOptionsData[i];
          let { title, key, items } = this.Grouping(data);
          if (this.autoI18n) {
            title = Ti.I18n.text(title);
          }
          items = this.evalItems(items, i);
          list.push({
            key,
            index: i,
            title,
            checkMode: this.getItemsCheckMode(items),
            items,
          });
        }
        return list;
      }
      // Single Group
      else {
        let items = this.evalItems(this.myOptionsData, 0);
        //console.log(items)
        return [
          {
            key: "g0",
            index: 0,
            title: this.autoI18n ? Ti.I18n.text(this.title) : this.title,
            checkMode: this.getItemsCheckMode(items),
            items,
          },
        ];
      }
    },
    //------------------------------------------------
    // If the value not in options, take it as others value
    OtherValue() {
      let itMap = this.myOptionsMap || {};
      // Grouped value
      if (_.isArray(this.value)) {
        let re = [];
        for (let v of this.value) {
          if (!itMap[v]) {
            re.push(v);
          }
        }
        return re.length > 1 ? re : _.first(re);
      }
      // Single value
      else if (!itMap[this.value]) {
        return this.value;
      }
    },
    //------------------------------------------------
    isOtherValue() {
      return !Ti.Util.isNil(this.OtherValue);
    },
    //------------------------------------------------
    OtherClassName() {
      return {
        "is-checked": this.isOtherValue,
      };
    },
    //------------------------------------------------
    OtherBulletIcon() {
      if (this.isOtherValue) {
        return this.bulletIconOn;
      }
      return this.bulletIconOff;
    },
    //------------------------------------------------
    OtherInputStyle() {
      return {
        width: Ti.Css.toSize(this.otherInputWidth),
      };
    },
    //--------------------------------------------------
    GridColumnCount() {
      return this.evalGridColumnCount(this.gridColumnHint);
    },
    //------------------------------------------------
  },

  ////////////////////////////////////////////////////
  methods: {
    //--------------------------------------------------
    OnResize() {
      if (_.isElement(this.$el)) {
        this.myRect = Ti.Rects.createBy(this.$el);
      }
    },
    //------------------------------------------------
    OnOtherInputChange($event) {
      let $input = $event.srcElement;
      let v = _.trim($input.value);
      this.tryNotifyChange(v);
    },
    //------------------------------------------------
    OnClickOther() {
      if (!this.isOtherValue) {
        this.tryNotifyChange(this.otherDefaultValue);
      }
    },
    //------------------------------------------------
    OnClickItem(it = {}) {
      if ("Option" == it.type) {
        this.OnClickOptionItem(it);
      }
    },
    //------------------------------------------------
    tryNotifyChange(value) {
      if (!_.isEqual(this.value, value)) {
        this.$notify("change", value);
      }
    },
    //--------------------------------------------------
    //
    //           Utility
    //
    //--------------------------------------------------
    evalGridColumnCount(columnHint, rect = this.myRect) {
      if (columnHint >= 1) {
        return columnHint;
      }
      //console.log("evalGridColumnCount", columnHint);
      return Ti.Util.selectValue(rect, columnHint, {
        by: ([v, m], { width, screen }) => {
          if (!m || m == screen || width >= m) {
            return v;
          }
        },
      });
    },
    //------------------------------------------------
    evalItems(items = [], groupIndex=0) {
      let itMap = {};
      let list = [];
      _.forEach(items, (li, index) => {
        if (this.IgnoreItem(li)) return;
        let it;
        // Pure value
        if (_.isString(li) || _.isNumber(li)) {
          it = {
            groupIndex,
            index,
            text: li,
            value: li,
          };
        }
        // Object
        else {
          it = {
            groupIndex,
            index,
            icon: this.getItemIcon(li),
            text: this.getItemText(li),
            value: this.getItemValue(li),
          };
        }
        // Mapping
        it = this.FnOptionMapping(it);
        _.defaults(it, {
          icon: this.defualItemIcon,
        });

        // Join value mapping
        itMap[it.value] = it;

        // I18n
        if (this.autoI18n) {
          it.text = Ti.I18n.text(it.text, it.text);
        }

        // Prepare the className
        it.className = {};

        // Eval type
        if (Ti.Util.isNil(it.value)) {
          it.type = "Label";
          it.className["as-label"] = true;
        } else {
          it.type = "Option";
          it.className["as-option"] = true;
        }

        // Mark check
        if (this.isItemChecked(it.value)) {
          it.className["is-checked"] = true;
          it.checked = true;
          it.bullet = this.bulletIconOn;
        } else {
          it.bullet = this.bulletIconOff;
          it.checked = false;
        }

        // Append to list
        list.push(it);
      });

      this.myOptionsMap = itMap;

      return list;
    },
    //------------------------------------------------
    createDict() {
      // Customized
      if (this.options instanceof Ti.Dict) {
        return this.options;
      }
      // Refer dict
      if (_.isString(this.options)) {
        let dictName = Ti.DictFactory.DictReferName(this.options);
        if (dictName) {
          return Ti.DictFactory.CheckDict(dictName, ({ loading }) => {
            this.loading = loading;
          });
        }
      }
      // Auto Create
      // return Ti.DictFactory.CreateDict({
      //   data : this.options,
      //   getValue : Ti.Util.genGetter(this.valueBy || "value|id"),
      //   getText  : Ti.Util.genGetter(this.textBy  || "text|name|title"),
      //   getIcon  : Ti.Util.genGetter(this.iconBy  || "icon")
      // })
    },
    //-----------------------------------------------
    async reloadMyOptionData() {
      this.myDict = this.createDict();

      let list;
      if (this.myDict) {
        this.loading = true;
        list = await this.myDict.getData();
      } else {
        list = this.options;
      }

      if (this.FnOptionFilter) {
        let list2 = [];
        for (let i = 0; i < list.length; i++) {
          let li = list[i];
          let li2 = this.FnOptionFilter(li, i, list);
          if (!li2) {
            continue;
          }
          if (_.isBoolean(li2)) {
            list2.push(li);
          } else {
            list2.push(li2);
          }
        }
        list = list2;
      }

      this.myOptionsData = list;

      this.$nextTick(() => {
        this.loading = false;
      });
    },
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    "options": {
      handler: async function (newval, oldval) {
        if (!_.isEqual(newval, oldval)) {
          await this.reloadMyOptionData();
        }
      },
      immediate: true,
    },
  },
  //////////////////////////////////////////////////////
  mounted: async function () {
    Ti.Viewport.watch(this, {
      resize: () => {
        this.OnResize();
      },
    });
    this.$nextTick(() => {
      this.OnResize();
    });
  },
  ///////////////////////////////////////////////////
  beforeDestroy: function () {
    Ti.Viewport.unwatch(this);
  },
  ////////////////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'web-nav-mixins.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/nav/support/web-nav-mixins.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props: {
    // The items appeared at the head
    "headItems": {
      type: Array,
      default: () => []
    },
    // The items appeared at the tail
    "tailItems": {
      type: Array,
      default: () => []
    },
    /*
    {text, icon, href, newtab, path, payload}
    */
    "items": {
      type: Array,
      default: () => []
    },
    "translateHead": {
      type: Boolean,
      default: false
    },
    "translateTail": {
      type: Boolean,
      default: false
    },
    "mapping": {
      type: [Object, Function],
      default: undefined
    },
    "idBy": {
      type: String,
      default: "=id"
    },
    "childrenBy": {
      type: String,
      default: "items"
    },
    "sortBy": {
      type: [Function, String],
      default: undefined
    },
    "notifyName": {
      type: String
    },
    // Store current array
    // could be Array<Object> Or Object or String
    "currentIds": {
      type: [Array, Object, String]
    },
    "base": {
      type: String,
      default: undefined
    },
    // for highlight
    "value": String,
    // for highlight
    "path": String,
    "params": [Object, String, Number, Array]
  },
  /////////////////////////////////////////
  computed: {
    //------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------
    CurrentIdMap() {
      let cids = _.concat(this.currentIds)
      let re = {}
      for (let cid of cids) {
        if (!cid) {
          continue;
        }
        if (_.isString(cid)) {
          re[cid] = true
        } else {
          cid = Ti.Util.explainObj(cid, this.idBy);
          re[cid] = true
        }
      }
      return re;
    },
    //------------------------------------
    TheItems() {
      //
      // Head
      //
      let itHead = this.headItems
      if (this.translateHead) {
        itHead = this.ItemMapping(itHead)
      }
      //
      // Items
      //
      let its = _.cloneDeep(this.items)
      const SortItems = items => {
        if (this.SortItemsBy) {
          let list = _.sortBy(items, this.SortItemsBy)
          for (let li of list) {
            let subs = _.get(li, this.childrenBy)
            if (_.isArray(subs)) {
              let subs2 = SortItems(subs)
              _.set(li, this.childrenBy, subs2)
            }
          }
          return list
        }
        return items
      }
      // Sorting 
      its = SortItems(its)
      // Mapping items
      const MappingItems = (items, parents = []) => {
        let list = []
        for (let i = 0; i < items.length; i++) {
          let it = items[i];
          let it2 = this.ItemMappingBy(it, {
            index: i,
            parents,
            items,
            base: this.base
          })
          it2.rawData = it
          let subs = _.get(it, this.childrenBy)
          if (_.isArray(subs)) {
            let pAxis = _.concat(parents, it)
            subs = MappingItems(subs, pAxis)
            it2.items = subs
          }
          list.push(it2)
        }
        return list
      }
      // Mapping
      let itList = MappingItems(its)
      //
      // Tail
      //
      let itTail = this.tailItems
      if (this.translateTail) {
        itTail = this.ItemMapping(itTail)
      }
      //
      // Concat
      //
      let list = _.concat(itHead, itList, itTail)
      return this.evalItems(list)
    },
    //------------------------------------
    SortItemsBy() {
      if (_.isString(this.sortBy)) {
        return it => _.get(it, this.sortBy)
      }
      if (_.isFunction(this.sortBy)) {
        return it => this.sortBy(it)
      }
    },
    //------------------------------------
    ItemMappingBy() {
      if (_.isFunction(this.mapping)) {
        return this.mapping
      }

      if (this.mapping) {
        return item => {
          return Ti.Util.explainObjs(item, this.mapping)
        }
      }

      return item => item
    }
    //------------------------------------
  },
  /////////////////////////////////////////
  methods: {
    //------------------------------------
    OnClickLink(evt, linkInfo) {
      // Guard
      if(!evt || !_.isFunction(evt.stopPropagation)) {
        return
      }
      evt.stopPropagation();
      let { type, value } = linkInfo
      if (/^(page|action|invoke|mutation)$/.test(type)) {
        evt.preventDefault()
        //console.log("onClickLink", "nav:to", {type,value})
        if (value) {
          let notiName = this.notifyName || "nav:to"
          this.$notify(notiName, linkInfo)
        }
      } else if (this.notifyName) {
        this.$notify(this.notifyName, linkInfo)
      }
    },
    //------------------------------------
    evalItems(items, depth = 0) {
      // Explain first
      return Ti.WWW.explainNavigation(items, {
        depth,
        base: this.base,
        idBy: this.idBy,
        value: this.value,
        iteratee: (li) => {
          //if(this.path || this.value) {
          li.highlight = li.highlightBy(this)
          //}
          //........................................
          // Children highlight cause the parent focused
          let current = this.CurrentIdMap[li.id]
          if (!current && !_.isEmpty(li.items)) {
            for (let it of li.items) {
              if (it.current || it.highlight) {
                current = true
                break
              }
            }
          }
          li.current = current
          return li
        }
      })
    }
    //------------------------------------
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-manager.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['/a/load/wn.manager/wn-manager.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////
  provide: function () {
    return {
      $session: {
        ticket: this.session.ticket,
        userId: this.session.uid,
        userName: this.session.unm,
        group: this.session.grp
      },
      $vars: this.vars
    }
  },
  ///////////////////////////////////////////
  data: () => ({
    loading: false,
    comIcon: "zmdi-hourglass-alt",
    comType: "ti-loading",
    comConf: {},
    actions: [],
    sidebar: [],
    privilege: {},
    sidebarStatusStoreKey: undefined,
    // for main view customized status
    // It will be clean each time reload main view
    mainViewStatus: {},
    // Current meta anestors
    // ancestors : [],
    // parent : null,
    // Current view(main) information
    view: null,
    // Message and Indicator
    myMessage: null,
    myIndicator: null,
    // View ready
    myViewReady: false
  }),
  ///////////////////////////////////////////
  computed: {
    //---------------------------------------
    TopClass() {
      let skyColorized = _.get(this.session, "envs.SKY_COLORIZED")
      return this.getTopClass({
        "is-current-as-home": this.CurrentIsHome,
        "is-current-no-home": !this.CurrentIsHome,
        "is-sky-colorized": /^(yes|true)$/.test(skyColorized)
      }, this.appClassName)
    },
    //---------------------------------------
    // Status
    //---------------------------------------
    isLoading() {
      return this.loading || this.isReloading || this.isGuiLoading
    },
    isViewReady() { return this.myViewReady },
    //---------------------------------------
    isChanged() {
      let modMain = this.$store.state.main
      if (_.get(modMain, "status.changed")) {
        return true
      }
      return _.get(this.status, "changed")
    },
    //---------------------------------------
    isSaving() { return _.get(this.status, "saving") },
    isReloading() { return _.get(this.status, "reloading") },
    isGuiLoading() { return _.get(this.status, "guiLoading") },
    //---------------------------------------
    hasActions() { return !_.isEmpty(this.actions) },
    hasView() { return this.view ? true : false },
    hasMeta() { return this.meta ? true : false },
    hasParent() { return this.parent ? true : false },
    //---------------------------------------
    // Data
    //---------------------------------------
    MetaId() { return _.get(this.meta, "id") },
    MetaPath() { return _.get(this.meta, "ph") },
    //---------------------------------------
    MyHome() {
      let obj = this.meta
      let ans = this.ancestors
      if (!_.isEmpty(ans)) {
        // for /home/xiaobai
        if (1 == ans.length) {
          if ("home" == ans[0].nm) {
            return obj
          }
        }
        // for /home/xiaobai/path/to/file
        if ("home" == ans[0].nm) {
          return ans[1]
        }
      }
      // for /root
      else if (obj && "root" == obj.nm) {
        return obj
      }
      // Dont't known how to find the home
      return null
    },
    //---------------------------------------
    MyHomeId() { return _.get(this.MyHome, "id") },
    //---------------------------------------
    ParentIsHome() {
      return this.hasParent && this.parent.id == this.MyHomeId
    },
    //---------------------------------------
    CurrentIsHome() {
      return this.hasMeta && this.MetaId == this.MyHomeId
    },
    //---------------------------------------
    // Tipping
    //---------------------------------------
    TheStatus() {
      let mainStatus = _.get(this.$store.state, "main.status")
      let reloading = _.get(mainStatus, "reloading") || this.status.reloading
      return _.assign({}, this.session.envs,
        this.status,
        mainStatus,
        this.mainViewStatus,
        {
          pvg: this.privilege,
          exposeHidden: this.exposeHidden,
          listViewType: this.listViewType,
          changed: this.isChanged,
          reloading: reloading,
          loading: this.loading
        })
    },
    StatusText() {
      let st = this.TheStatus
      if (st.saving) {
        return Ti.I18n.text("i18n:saving")
      }
      if (st.reloading || st.loading) {
        return Ti.I18n.text("i18n:loading")
      }
    },
    //---------------------------------------
    // Modules
    //---------------------------------------
    RootState() {
      return this.$store.state
    },
    RootGetters() {
      return this.$store.getters
    },
    //---------------------------------------
    Main() {
      return this.$store.state.main
    },
    MainGetters() {
      let re = {}
      _.forEach(this.$store.getters, (v, k) => {
        let m = /^main\/(.+)$/.exec(k)
        if (m) {
          let key = _.camelCase(m[1].replace(/\\/g, "-"))
          re[key] = _.cloneDeep(v)
        }
      })
      return re
    },
    MainData() { return _.get(this.Main, "data") },
    MainContent() { return _.get(this.Main, "content") },
    hasMain() {
      return this.Main && !_.isEmpty(this.Main)
    },
    //---------------------------------------
    Current() {
      return this.$store.state.current
    },
    //---------------------------------------
    Axis() {
      return this.$store.state.axis
    },
    //---------------------------------------
    // GUI
    //---------------------------------------
    GuiShown() {
      let ShownSet = _.get(this.setup, "shown")
      if (_.isPlainObject(ShownSet)) {
        let shown = ShownSet[this.viewportMode]
        // Refer onece
        if (_.isString(shown)) {
          shown = ShownSet[shown]
        }
        // Refer twice (I think it is enough for most of cases)
        if (_.isString(shown)) {
          shown = ShownSet[shown]
        }
        return Ti.Util.explainObj(this, shown)
      }
      return {}
    },
    //---------------------------------------
    GuiCanLoading() {
      return _.get(this.setup, "canLoading")
    },
    //---------------------------------------
    GuiLoadingAs() {
      return _.get(this.setup, "loadingAs")
    },
    //---------------------------------------
    GuiLayout() {
      return Ti.Util.explainObj(this, this.layout)
    },
    //---------------------------------------
    GuiSchema() {
      return Ti.Util.explainObj(this, this.schema)
    }
    //---------------------------------------
  },
  ///////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnLogout() {
      this.doLogout()
    },
    //--------------------------------------
    OnArenaSelect(payload = {}) {
      let { checked } = payload
      //console.log("OnArenaSelect", this.view)
      let n = _.size(checked)
      if (n > 0) {
        this.myIndicator = `${n} selected`
      } else {
        this.myIndicator = null
      }
      //this.__on_events("arena::select", payload)
    },
    //--------------------------------------
    OnCurrentMetaChange({ id, path, value } = {}) {
      this.openView(id || path || value)
    },
    //--------------------------------------
    OnCurrentDataChange(data) {
      if (this.view.mod) {
        this.execEvent("arena::change", data, "dispatch:main/changeContent")
      }
    },
    //--------------------------------------
    OnArenaViewStatusUpdated(status) {
      this.mainViewStatus = _.assign({}, this.mainViewStatus, status)
    },
    //--------------------------------------
    async OnUpdateMyVars({
      vars = {},
      reloadPage = false
    } = {}) {
      // Update the session vars
      await Ti.App(this).dispatch("session/updateMyVars", vars)

      // Reload whole page
      if (reloadPage) {
        window.location.reload()
      }
      // Reload data
      else {
        this.reloadSidebar()
        this.reloadPrivilege()
        this.reloadAncestors()
        this.reloadMain()
      }
    },
    //--------------------------------------
    OnArenaListViewTypeChange({ type } = {}) {
      Ti.App(this).dispatch("viewport/changeListViewType", type)
    },
    //--------------------------------------
    OnUpdateActions(actions) {
      //console.log("OnUpdateAction", actions)
      const explainActionItem = (aItem) => {
        if (aItem.explain) {
          return Ti.Util.explainObj(this.RootState, _.omit(aItem, "explain"))
        }
        if (_.isArray(aItem.items)) {
          let items = []
          for (let it of aItem.items) {
            let it2 = explainActionItem(it)
            items.push(it2)
          }
          aItem.items = items
        }
        return aItem
      }
      // Eval actions 
      let aItems = _.cloneDeep(actions)
      let list = []
      if (_.isArray(aItems)) {
        for (let aItem of aItems) {
          let li = explainActionItem(aItem)
          list.push(li)
        }
      }
      // Update to data
      this.actions = list
      Ti.App(this).reWatchShortcut(actions)
    },
    //--------------------------------------
    OnArenaIndicate(info) {
      this.myIndicator = info
    },
    //--------------------------------------
    OnArenaMessage(msg = "") {
      this.myMessage = msg
    },
    //--------------------------------------
    doCheckDomainObjThumb() {
      let domain = Wn.Session.getMyGroup();
      let cmdText = `hookx @query 'd0:"home",d1:"${domain}",thumb_src:null,mime:"^image"' @invoke write -v`
      Wn.OpenCmdPanel(cmdText)
    },
    //--------------------------------------
    __on_events(name, payload) {
      //console.log("WnManager::__on_events", name, payload)
      // Special event 
      if (/^main::arena::(.+::)*select$/.test(name)) {
        this.OnArenaSelect(payload)
      }
      if (/^main::arena::(.+::)*indicate$/.test(name)) {
        this.OnArenaIndicate(payload)
      }
      if (/^main::arena::(.+::)*message$/.test(name)) {
        this.OnArenaMessage(payload)
      }

      // Guard
      if (!this.view || _.isEmpty(this.view.events)) {
        return
      }
      // Get candidate func invoking
      let fn = _.get(this.view.events, name)
      if (!fn) {
        fn = this.$tiEventTryFallback(name, this.view.events)
      }

      // Gen invoking
      return Ti.Shortcut.genEventActionInvoking(fn, {
        app: Ti.App(this),
        context: _.assign({
          $args: [payload]
        }, payload, this.RootState),
        funcSet: this
      })
    },
    //--------------------------------------
    async openView(oid) {
      if (!_.isString(oid))
        return

      // Guard for fure
      let bombed = await Ti.Fuse.fire()
      //console.log("openView", bombed)
      if (!bombed) {
        return
      }

      // Guard for changed
      if (this.isChanged) {
        await Ti.Toast.Open("i18n:wn-obj-nosaved", "warn", "left")
        return
      }
      // Mark view ready
      this.myViewReady = false

      // Open It
      let ph = Wn.Io.isFullObjId(oid)
        ? `id:${oid}`
        : oid;
      await Ti.App(this).dispatch("current/reload", ph)
    },
    //--------------------------------------
    async doLogout() {
      let quitPath = Wn.Session.env("QUIT") || "/a/login/"
      let reo = await Ti.Http.get("/a/sys_logout", {
        params: { ajax: true }
      })
      //console.log(reo)
      Ti.Be.Open(quitPath, { target: "_self", delay: 0 })
    }
    //--------------------------------------
  },
  //////////////////////////////////////////////
  watch: {
    "meta": function (newVal, oldVal) {
      let newId = _.get(newVal, "id")
      let oldId = _.get(oldVal, "id")
      let isSameId = _.isEqual(newId, oldId)
      if (newVal && !isSameId) {
        this.updateDocumentTitle(newVal)
        //console.log("Wn.Manager.metaChanged", newVal, oldVal)
        // Update the ancestors path
        _.delay(async () => {
          if (!isSameId) {
            await this.reloadAncestors()
          }
          // Reload Current Main
          if (!isSameId || this.isChanged) {
            await this.reloadMain()
            this.pushHistory(newVal)
          }
        })
      }
    }
  },
  ///////////////////////////////////////////
  created: function(){
    Ti.Fuse.getOrCreate().add({
      key: "wn-manager",
      everythingOk: () => {
        return !this.isLoading
      },
      fail: () => {
        Ti.Toast.Open("i18n:wn-manager-is-loading", "warn")
      }
    })
  },
  ///////////////////////////////////////////
  mounted: async function () {
    //......................................
    // Update default listViewType
    if (this.setup.listViewType) {
      Ti.App(this).commit("viewport/setListViewType", this.setup.listViewType)
    }
    //......................................
    this.reloadSidebar()
    this.reloadPrivilege()
    //......................................
    window.onpopstate = (evt) => {
      //console.log("onpopstate", evt)
      let obj = evt.state
      //console.log("popstate", obj)
      if (obj && obj.id && obj.nm) {
        Ti.App(this).dispatch("current/reload", obj)
      }
    }
    //......................................
  },
  ///////////////////////////////////////////
  beforeDestroy: function () {

  }
  ///////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-combo-pair-text.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/pair-text/ti-combo-pair-text.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    myOptionsData  : null,
    myDict : undefined,
    myValue: {}
  }),
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    Items() {
      let list = []
      _.forEach(this.myOptionsData, it=>{
        let text  = this.Dict.getText(it)
        let key   = this.Dict.getValue(it)
        let icon  = this.Dict.getIcon(it)
        let value = _.get(this.myValue, key)
        let placeholder = it.placeholder || this.placeholder
        list.push({value, text, icon, key, placeholder})
      })
      return list
    },
    //------------------------------------------------
    TextStyle() {
      return Ti.Css.toStyleRem100({
        width: this.textWidth,
        height: this.textHeight
      })
    },
    //------------------------------------------------
    Dict() {
      if(!this.myDict) {
        this.myDict = this.createDict()
      }
      return this.myDict
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnTextChange(key, $evn) {
      let $text = $evn.srcElement
      let val = $text.value
      if(this.trimed) {
        val = _.trim(val)
      }
      //console.log({key, val})
      this.updateValue({[key]: val})
    },
    //------------------------------------------------
    updateValue(obj) {
      this.myValue = _.assign({}, this.myValue, obj)
    },
    //------------------------------------------------
    createDict() {
      // Customized
      if(this.options instanceof Ti.Dict) {
        return this.options
      }
      // Refer dict
      if(_.isString(this.options)) {
        let dictName = Ti.DictFactory.DictReferName(this.options)
        if(dictName) {
          return Ti.DictFactory.CheckDict(dictName, ({loading}) => {
            this.loading = loading
          })
        }
      }
      // Auto Create
      return Ti.DictFactory.CreateDict({
        data : this.options || [],
        getValue : Ti.Util.genGetter(this.valueBy || "value"),
        getText  : Ti.Util.genGetter(this.textBy  || "text|name"),
        getIcon  : Ti.Util.genGetter(this.iconBy  || "icon")
      })
    },
    //-----------------------------------------------
    async reloadMyOptionData() {
      //console.log("reloadMyOptionData")
      this.myOptionsData = await this.Dict.getData()
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch : {
    //-----------------------------------------------
    "value": {
      handler: function(newVal, oldVal){
        if(!_.isEqual(newVal, oldVal)) {
          this.myValue = _.cloneDeep(newVal)
        }
      },
      immediate: true
    },
    //-----------------------------------------------
    "options" : async function(newVal, oldVal) {
      if(!_.isEqual(newVal, oldVal)) {
        this.myDict = this.createDict()
        await this.reloadMyOptionData()
      }
    },
    //-----------------------------------------------
    "myValue": function(newVal, oldVal) {
      if(!_.isEqual(newVal, oldVal)) {
        this.$notify("change", this.myValue)
      }
    }
    //-----------------------------------------------
  },
  ////////////////////////////////////////////////////
  mounted: async function() {
    await this.reloadMyOptionData()
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-media-binary.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/media/binary/ti-media-binary.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  props : {
    "icon" : {
      type : [String, Object],
      default : undefined
    },
    "title" : {
      type : String,
      default : undefined
    },
    "src" : {
      type : String,
      default : undefined
    },
    "download" : {
      type : Boolean,
      default : undefined
    },
    "width" : {
      type : [String, Number],
      default : ""
    },
    "height" : {
      type : [String, Number],
      default : ""
    }
  },
  computed : {
    MediaTitle(){
      return Ti.I18n.text(this.title)
    }
  },
  methods : {
    
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-obj-pair.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/obj/pair/ti-obj-pair.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////
  data: () => ({
    myPairList: []
  }),
  ////////////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "value": {
      type: [String, Object],
      default: undefined
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "canEditName": {
      type: Boolean,
      default: false
    },
    "canEditValue": {
      type: Boolean,
      default: false
    },
    "multiLines": {
      type: Boolean,
      default: false
    },
    "emptyAsNull": {
      type: Boolean,
      default: true
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "nameText": {
      type: String,
      default: "i18n:name"
    },
    "valueText": {
      type: String,
      default: "i18n:value"
    },
    "fields": {
      type: Array,
      default: () => []
    },
    "onlyFields": {
      type: Boolean,
      default: false
    },
    "blankAs": {
      type: Object,
      default: () => ({
        icon: "im-plugin",
        text: "i18n:empty"
      })
    },
    "showHead": {
      type: Boolean,
      default: true
    },
    "showEmpty": {
      type: Boolean,
      default: true
    },
    "autoI18n": {
      type: Boolean,
      default: true
    },
    "autoShowBlank": {
      type: Boolean,
      default: false
    },
    //-----------------------------------
    // Measure
    //-----------------------------------
  },
  ////////////////////////////////////////////////
  computed: {
    //--------------------------------------------
    TopClass() {
      return this.getTopClass({
        "can-edit-name": this.canEditName,
        "can-edit-value": this.canEditValue
      })
    },
    //--------------------------------------------
    FieldsMap() {
      let map = {}
      for (let fld of this.fields) {
        if (fld.name)
          map[fld.name] = fld
      }
      return map
    },
    //--------------------------------------------
    TheData() {
      if (!this.value) {
        return {}
      }
      if (_.isString(this.value)) {
        return JSON.parse(this.value)
      }
      if (_.isPlainObject(this.value))
        return this.value
      return {}
    },
    //--------------------------------------------
    isEmpty() {
      return _.isEmpty(this.TheData)
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  methods: {
    //--------------------------------------------
    OnPairComChange(newVal, { name, value }) {
      if (!_.isEqual(newVal, value)) {
        if (this.emptyAsNull && _.isEmpty(newVal)) {
          newVal = null
        }
        let data = _.cloneDeep(this.TheData)
        _.set(data, name, newVal)
        this.$notify("change", data)
      }
    },
    //--------------------------------------------
    OnPairValueChange(evt, { name, value }) {
      let newVal = _.trim(evt.target.value)
      if (newVal != value) {
        if (this.emptyAsNull && _.isEmpty(newVal)) {
          newVal = null
        }
        let data = _.cloneDeep(this.TheData)
        _.set(data, name, newVal)
        this.$notify("change", data)
      }
    },
    //--------------------------------------------
    async OnClickPairMore({ name, value }) {
      // Get new value
      let newVal = await Ti.App.Open({
        icon: "zmdi-edit",
        title: "i18n:edit",
        width: 640,
        height: "80%",
        result: value,
        comType: "TiInputText",
        comConf: {
          height: "100%"
        },
        components: ["@com:ti/input/text"]
      })

      // User cancel
      if (Ti.Util.isNil(newVal) || newVal == value)
        return

      // Update value
      let data = _.cloneDeep(this.TheData)
      _.set(data, name, newVal)
      this.$notify("change", data)
    },
    //--------------------------------------------
    async evalThePairList() {
      // Flat pairs  [keyPath] : [pairValue]
      let pairs = {}
      this.joinPairs(pairs, [], this.TheData)
      // format list
      let list = []
      for (let fld of this.fields) {
        let pa = pairs[fld.name]
        if (pa || this.showEmpty) {
          pa = pa || {
            name: fld.name
          }
          // Title
          let title = fld.title || fld.name
          if (this.autoI18n) {
            title = Ti.I18n.text(title)
          }
          pa.title = title
          // Mapping Value
          if (fld.dict) {
            let d = Ti.DictFactory.CheckDict(fld.dict)
            pa.text = await d.getItemText(pa.value)
          }
          // Customized the display text
          if (fld.comType) {
            pa.comType = fld.comType
            pa.comConf = fld.comConf || {}
          }

          // Push
          list.push(pa)
        }
      }

      // find remain
      if (!this.onlyFields) {
        let remains = []
        _.forEach(pairs, (pa) => {
          if (pa.name && !this.FieldsMap[pa.name]) {
            pa.title = pa.name
            remains.push(pa)
          }
        })
        list.push(...remains)
      }

      this.myPairList = list
    },
    //--------------------------------------------
    joinPairs(pairs = [], path = [], obj) {
      // recursion
      if (_.isPlainObject(obj)) {
        _.forEach(obj, (val, key) => {
          this.joinPairs(pairs, _.concat(path, key), val)
        })
      }
      // Array
      else if (_.isArray(obj)) {
        for (let i = 0; i < obj.length; i++) {
          let val = obj[i]
          this.joinPairs(pairs, _.concat(path, i + ""), val)
        }
      }
      // join pair
      else {
        let name = path.join(".")
        let value = obj
        pairs[name] = { name, value }
      }
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  watch: {
    "value": "evalThePairList",
    //"fields": "evalThePairList",
  },
  ////////////////////////////////////////////////
  mounted() {
    this.evalThePairList()
  }
  ////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-media.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/media/web-media.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    //-------------------------------------
    // Data
    //-------------------------------------
    "src" : {
      type : [String, Object],
      default : undefined
    },
    "preview": {
      type: Object,
      default: undefined
    },
    "mime": {
      type : [String, Function],
      default : "=mime"
    },
    "type" : {
      type : [String, Function],
      default : "=type"
    },
    //-------------------------------------
    // Behavior
    //-------------------------------------
    /* prop setting for <WebMediaImage> */
    "image" : {
      type: Object,
      default: undefined
    },
    "video" : {
      type: Object,
      default: undefined
    },
    "audio" : {
      type: Object,
      default: undefined
    },
    "youtube" : {
      type: Object,
      default: undefined
    },
    "showIconPrev" : {
      type : Boolean,
      default : false
    },
    "showIconNext" : {
      type : Boolean,
      default : false
    },
    //-------------------------------------
    // Aspect
    //-------------------------------------
    "iconPrev": {
      type: String,
      default: "zmdi-chevron-left"
    },
    "iconNext": {
      type: String,
      default: "zmdi-chevron-right"
    },
    "blankAs" : {
      type : Object,
      default : ()=>({
        icon : "fas-photo-video",
        text : "i18n:media"
      })
    },
    "unknownAs" : {
      type : Object,
      default : ()=>({
        icon : "far-question-circle",
        text : "i18n:unknown"
      })
    },
    //-------------------------------------
    // Measure
    //-------------------------------------
    "width" : {
      type : [String, Number],
      default : ""
    },
    "height" : {
      type : [String, Number],
      default : ""
    }
  },
  //////////////////////////////////////////
  computed : {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    },
    //--------------------------------------
    MediaSrc() {
      return Ti.WWW.evalObjPreviewSrc(this.src, this.preview)
    },
    //--------------------------------------
    MediaMime() {
      return this.getSrcValueBy(this.mime)
    },
    //--------------------------------------
    MediaType() {
      return this.getSrcValueBy(this.type)
    },
    //--------------------------------------
    MediaCom() {
      let mime = this.MediaMime
      let type = this.MediaType
      // Default component
      if(!mime) {
        return {
          comType : "TiLoading",
          comConf : _.assign({
            className : "as-hug",
          }, this.blankAs)
        }
      }
      //
      // Youtube
      //
      if("youtube" == type && this.src && this.src.yt_video_id) {
        return {
          comType : "NetYoutubePlayer",
          comConf : {
            value : _.assign({}, this.youtube, {
              id : this.src.yt_video_id,
              thumbUrl : this.src.thumb
            })
          }
        }
      }
      //
      // Image
      //
      else if(/^image\/.+$/.test(mime)) {
        return {
          comType : "WebMediaImage",
          comConf : _.assign({}, this.image, {
            src : this.MediaSrc
          })
        }
      }
      //
      // Video
      //
      if(/^video\/.+$/.test(mime)) {
        return {
          comType : "TiMediaVideo",
          comConf : _.assign({}, this.video, {
            src  : this.MediaSrc,
            mime : this.MediaMime
          })
        }
      }
      //
      // Audio
      //
      if(/^audio\/.+$/.test(mime)) {
        return {
          comType : "TiMediaAudio",
          comConf : _.assign({}, this.audio, {
            src : this.MediaSrc
          })
        }
      }
      //
      // Unknown
      //
      return {
        comType : "TiLoading",
        comConf : _.assign({
          className : "as-hug",
        }, this.unknownAs)
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //--------------------------------------
    OnClickPrev() {
      this.$notify("go:prev");
    },
    //--------------------------------------
    OnClickNext() {
      this.$notify("go:next");
    },
    //--------------------------------------
    getSrcValueBy(key) {
      // Customized
      if(_.isFunction(key)) {
        return key(this.src)
      }
      // Explain
      if(this.src) {
        if(_.isString(this.src)) {
          return key
        }
        return Ti.Util.explainObj(this.src, key)
      }
    }
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'site-tree.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/hmaker/website/mod/site-tree/site-tree.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////
  mutations : {
    //----------------------------------------
    setRoot(state, root=null) {
      if(!_.isEqual(state.root, root)) {
        state.root = root
      }
    },
    //----------------------------------------
    setCurrentId(state, currentId=null) {
      state.currentId = currentId
    },
    //----------------------------------------
    setOpenedNodePaths(state, openedNodePaths={}) {
      state.openedNodePaths = _.cloneDeep(openedNodePaths)
    }
    //----------------------------------------
  }
  ////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-obj-icon.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/icon/wn-obj-icon.mjs'] = (function(){
/////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////
  props: {
    // icon string
    icon: {
      type: String
    },
    // image thumb: id:xxxx
    thumb: {
      type: String
    },
    mime: {
      type: String
    },
    type: {
      type: String
    },
    race: {
      type: String
    },
    // higher priority then default Icon and {type,mime,race}
    candidateIcon: {
      type: String
    },
    // default icon string
    defaultIcon: {
      type: String,
      default: "fas-cube"
    },
    // timestamp
    timestamp: {
      type: Number,
      default: 0
    }
  },
  ///////////////////////////////////////////////////
  computed: {
    //-----------------------------------------------
    topClass() {
      return Ti.Css.mergeClassName(this.className);
    },
    //-----------------------------------------------
    theIcon() {
      if (
        /^https?:\/\//.test(this.thumb) ||
        /.+\.(png|jpe>g|webp|gif)$/i.test(this.thunmb)
      ) {
        return {
          type: "image",
          value: this.thumb
        };
      }
      return Wn.Util.getObjThumbIcon(
        {
          candidateIcon: this.candidateIcon,
          timestamp: this.timestamp,
          thumb: this.thumb,
          icon: this.icon,
          mime: this.mime,
          type: this.type,
          race: this.race
        },
        this.defaultIcon
      );
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods: {
    //-----------------------------------------------
    //-----------------------------------------------
  }
  ///////////////////////////////////////////////////
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-combo-pair-group-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/combo/pair-group/ti-combo-pair-group-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "value": undefined,
  "fields" : {
    type : Array,
    default : ()=>[]
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  // ...
  "keepShownTo" : {
    type : String,
    default : undefined
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "tabAt" : {
    type : String,
    default : undefined
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  // ...
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'config-io-detail.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/hm/config/io/detail/config-io-detail.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data: ()=>({
  }),
  /////////////////////////////////////////
  props : {
    "value" : {
      type: [String, Object],
      default: undefined
    }
  },
  /////////////////////////////////////////
  computed : {
    //------------------------------------
    MainData() {
      if(_.isString(this.value)) {
        let str = _.trim(this.value)
        if(!str) {
          return {}
        }
        return JSON.parse(str)
      }
      return _.cloneDeep(this.value)
    },
    //------------------------------------
    MainCom() {
      // Nil
      if(!this.MainData) {
        return {
          comType : 'TiLoading',
          comConf : {
            className : "as-big",
            icon: "zmdi-arrow-left",
            text: "i18n:nil-detail"
          }
        }
      }
      // Dao Mapping
      if(this.MainData.dao && _.isArray(this.MainData.fields)) {
        return {
          comType : 'HmConfigIoIxDao',
          comConf : {
            value : this.MainData
          }
        }
      }
      // Default as JSON
      return {
        comType : "TiTextJson",
        comConf : {
          value : this.MainData
        }
      }
    }
    //------------------------------------
  },
  /////////////////////////////////////////
  methods : {
    //------------------------------------
    
    //------------------------------------
  },
  /////////////////////////////////////////
  watch : {
    
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-obj-pvg.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/pvg/wn-obj-pvg.mjs'] = (function(){
const DFT_PVG = 5;
const __TI_MOD_EXPORT_VAR_NM = {
  //////////////////////////////////////////
  data: () => ({
    myPrivilegeData: [],
    pvg_owner: 7,
    pvg_member: 5,
    //
    // Account
    //
    myAccountHome: null,
    myAccounts: [],
    myAccountIdMap: {},
    myAccountNmMap: {},
    //
    // Roles
    //
    myRoleHome: null,
    myRoles: [],
    myRoleMap: {},
    //
    // Organization
    //
    myOrganization: null,
    myOrganizationMap: {},
    //
    // Status
    //
    myCurrentId: null,
    loading: false,
  }),
  //////////////////////////////////////////
  props: {
    value: {
      type: Object,
      default: () => ({}),
    },
    loadSite: {
      type: [Object, String],
      default: 'domain site -cqn -keys "^(id|nm|ph|title)$"',
    },
    keepCustomizedTo: {
      type: String,
      default: "Wn-Obj-Pvg-Layout",
    },
    autoRemoveDefault: {
      type: Boolean,
      default: true,
    },
    // "organization": {
    //   type: String
    // }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    hasAccounts() {
      return !_.isEmpty(this.myAccounts);
    },
    hasRoles() {
      return !_.isEmpty(this.myRoles);
    },
    //--------------------------------------
    GuiLoadingAs() {
      if (!this.hasAccounts)
        return {
          text: "i18n:empty",
          icon: "fas-border-none",
        };
    },
    //--------------------------------------
    ActionItems() {
      let items = [];
      if (!_.isEmpty(this.myAccounts)) {
        items.push({
          icon: "fas-user-plus",
          text: "i18n:account-add",
          action: () => {
            this.OnAddAccounts();
          },
        });
      }
      //
      // Roles
      //
      if (!_.isEmpty(this.myRoles)) {
        if (items.length > 0) {
          items.push({});
        }
        items.push({
          icon: "fas-ribbon",
          text: "i18n:role-add",
          action: () => {
            this.OnAddRoles();
          },
        });
      }
      //
      // Organization
      //
      if (!_.isEmpty(this.myOrganization)) {
        if (items.length > 0) {
          items.push({});
        }
        items.push({
          icon: "fas-briefcase",
          text: "i18n:dept-add",
          action: () => {
            this.OnAddDepts();
          },
        });
      }

      //
      // Delete
      //
      items.push(
        {},
        {
          icon: "far-trash-alt",
          text: "i18n:del-checked",
          action: () => {
            this.OnRemoveSelected();
          },
        }
      );

      // Viewsouce
      items.push(
        {},
        {
          icon: "fas-code",
          tip: "i18n:source",
          action: () => {
            this.doEditCurrentSource();
          },
        }
      );

      return items;
    },
    //--------------------------------------
    Layout() {
      return {
        type: "rows",
        border: true,
        defaultFlex: "both",
        blocks: [
          {
            size: 42,
            body: "actions",
          },
          {
            type: "cols",
            border: true,
            keepCustomizedTo: this.keepCustomizedTo
              ? `${this.keepCustomizedTo}-Main-Col`
              : undefined,
            blocks: [
              {
                name: "list",
                body: "list",
              },
              {
                size: "50%",
                name: "data",
                body: "data",
              },
            ],
          },
        ],
      };
    },
    //--------------------------------------
    Schema() {
      return {
        actions: {
          comType: "TiActionbar",
          comConf: {
            className: "pad-hs",
            items: this.ActionItems,
          },
        },
        list: {
          comType: "WnList",
          comConf: {
            dftLabelHoverCopy: false,
            checkable: true,
            multi: true,
            rowNumberBase: 1,
            data: this.myPrivilegeData,
            idBy: "key",
            display: [
              "@<thumb:zmdi-account>",
              "text::flex-none is-nowrap",
              "key::flex-auto as-tip is-nowrap",
              "tip::flex-none as-tip-block is-nowrap",
            ],
            onInit: ($list) => {
              this.$list = $list;
            },
          },
        },
        data: {
          comType: "TiForm",
          comConf: {
            spacing: "comfy",
            data: this.CurrentItem,
            autoShowBlank: true,
            fieldNameWrap: "nowrap",
            gridColumnHint: 1,
            blankAs: {
              text: "i18n:blank-to-edit",
              icon: "fas-arrow-left",
            },
            fields: [
              {
                title: "i18n:type",
                name: "type",
              },
              {
                title: "i18n:name",
                name: "text",
              },
              {
                title: "i18n:key",
                name: "key",
                comConf: {
                  className: "is-nowrap",
                  fullField: false,
                },
              },
              {
                title: "i18n:wn-md-readable",
                name: "readable",
                type: "Boolean",
                comType: "TiToggle",
              },
              {
                title: "i18n:wn-md-writable",
                name: "writable",
                type: "Boolean",
                comType: "TiToggle",
              },
              {
                title: "i18n:wn-md-excutable",
                name: "excutable",
                type: "Boolean",
                comType: "TiToggle",
              },
              {
                title: "i18n:wn-md-blend-mode",
                name: "blend",
                type: "String",
                comType: "TiSwitcher",
                comConf: {
                  options: [
                    {
                      text: "i18n:wn-md-blend-dft",
                      value: "DEFAULT",
                    },
                    {
                      text: "i18n:wn-md-blend-strong",
                      value: "STRONG",
                    },
                    {
                      text: "i18n:wn-md-blend-weak",
                      value: "WEAK",
                    },
                  ],
                },
              },
            ],
          },
        },
      };
    },
    //--------------------------------------
    CurrentItem() {
      for (let it of this.myPrivilegeData) {
        if (this.myCurrentId == it.key) {
          return it;
        }
      }
    },
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnListSelect({ currentId }) {
      this.myCurrentId = currentId;
    },
    //--------------------------------------
    OnDataChange(data) {
      //console.log("OnDataChange", data)
      let key = data.key;
      let m0 = Wn.Obj.mode0FromObj(data);
      let val = _.cloneDeep(this.value) || {};
      let md = ["0", m0, m0, m0].join("");
      if ("STRONG" == data.blend) {
        md = "!" + md;
      } else if ("WEAK" == data.blend) {
        md = "~" + md;
      }
      val[key] = md;
      this.notifyChange(val);
    },
    //--------------------------------------
    async OnAddAccounts() {
      let accounts = _.filter(this.myAccounts, (acc) => {
        let md = _.get(this.value, acc.id);
        return _.isUndefined(md);
      });

      let reo = await Ti.App.Open({
        icon: "fas-user-plus",
        title: "i18n:account-add",
        position: "top",
        width: 480,
        height: "90%",
        model: { prop: "value", event: "select" },
        comType: "WnList",
        comConf: {
          multi: true,
          checkable: true,
          idBy: "nm",
          data: accounts,
          display: ["@<thumb:zmdi-account>", "nickname", "nm::as-tip-block"],
        },
      });
      // User cancel
      if (!reo) return;

      // Nothing selected
      let checkeds = Ti.Util.truthyKeys(reo.checkedIds);
      if (_.isEmpty(checkeds)) {
        return;
      }

      // Update value
      let val = _.cloneDeep(this.value) || {};
      for (let id of checkeds) {
        val[`@[${id}]`] = this.getPvgValue();
      }
      this.notifyChange(val);
    },
    //--------------------------------------
    async OnAddRoles() {
      let roles = _.filter(this.myRoles, (role) => {
        let md = _.get(this.value, `@${role.nm}`);
        return _.isUndefined(md);
      });

      let reo = await Ti.App.Open({
        icon: "fas-user-plus",
        title: "i18n:roles-add",
        position: "top",
        width: 480,
        height: "90%",
        model: { prop: "value", event: "select" },
        comType: "TiList",
        comConf: {
          multi: true,
          checkable: true,
          idBy: "nm",
          data: roles,
          display: ["<icon:far-smile>", "title|th_nm", "nm::as-tip-block"],
        },
      });

      // User cancel
      if (!reo) return;

      // Nothing selected
      let checkeds = Ti.Util.truthyKeys(reo.checkedIds);
      if (_.isEmpty(checkeds)) {
        return;
      }

      // Update value
      let val = _.cloneDeep(this.value) || {};
      for (let nm of checkeds) {
        val[`@${nm}`] = this.getPvgValue();
      }
      this.notifyChange(val);
    },
    //--------------------------------------
    async OnAddDepts() {
      let reo = await Ti.App.Open({
        icon: "fas-briefcase",
        title: "i18n:dept-add",
        position: "top",
        width: "6.4rem",
        height: "96%",
        model: { event: "select" },
        comType: "TiTree",
        comConf: {
          data: this.myOrganization,
          display: [
            "<icon>",
            "title|text|name|nm|abbr",
            "value|id|nm::as-tip-block align-right",
          ],
          multi: true,
          checkable: true,
          defaultOpenDepth: 100,
        },
      });

      // User cancel
      if (!reo) return;

      //console.log(reo)

      // Nothing selected
      let checkeds = Ti.Util.truthyKeys(reo.checkedIds);
      if (_.isEmpty(checkeds)) {
        return;
      }

      // Update value
      let val = _.cloneDeep(this.value) || {};
      for (let id of checkeds) {
        val[`+${id}`] = this.getPvgValue();
      }
      this.notifyChange(val);
    },
    //--------------------------------------
    OnRemoveSelected() {
      let checked = this.$list.getChecked();
      if (_.isEmpty(checked)) {
        Ti.Toast.Open("i18n:nil-obj", "warn");
        return;
      }
      // Build key map
      let keyMap = {};
      _.forEach(checked, (it) => {
        keyMap[it.key] = true;
      });

      // Remove from value
      let val = {};
      _.forEach(this.value, (md, key) => {
        if (!keyMap[key]) {
          val[key] = md;
        }
      });

      this.notifyChange(val);
    },
    //--------------------------------------
    notifyChange(pvg) {
      if (!_.isEqual(this.value, pvg)) {
        this.$notify("change", pvg);
      }
    },
    //-----------------------------------------------
    async doEditCurrentSource() {
      let json = this.value || {};
      if (!_.isString(json)) {
        json = JSON.stringify(json, null, "   ");
      }

      let dialog = _.assign(
        {
          title: "i18n:edit",
          width: 500,
          height: 500,
        },
        this.dialog,
        {
          result: json,
          comType: "TiInputText",
          comConf: {
            height: "100%",
          },
        }
      );

      json = await Ti.App.Open(dialog);

      // User cancel
      if (_.isUndefined(json)) return;

      // Join to
      try {
        let str = _.trim(json) || "{}";
        let pvg = JSON.parse(str);
        if (_.isEmpty(pvg)) {
          pvg = null;
        }
        this.notifyChange(pvg);
      } catch (E) {
        // Invalid json
        await Ti.Toast.Open("" + E);
      }
    },
    //--------------------------------------
    getPvgValue(pvg_other = DFT_PVG) {
      //return this.pvg_owner << 6 | this.pvg_member << 3 | pvg_other
      return (pvg_other << 6) | (pvg_other << 3) | pvg_other;
    },
    //--------------------------------------
    buildMap(list = [], key = "id", childKey = "children") {
      let re = {};
      if (_.isArray(list)) {
        _.forEach(list, (li) => {
          if (!li) return;
          let k = li[key];
          if (k) {
            re[k] = li;
          }
        });
      }
      // Tree
      else {
        const fn = function (node) {
          let it = _.omit(node, childKey);
          if (_.isEmpty(it)) {
            return;
          }
          let id = it[key];
          if (id) {
            re[id] = it;
          }
          let children = node[childKey];
          if (!_.isEmpty(children)) {
            for (let child of children) {
              fn(child);
            }
          }
        };
        fn(list);
      }
      return re;
    },
    //--------------------------------------
    async evalPrivilegeData() {
      //console.log("evalPrivilegeData")
      let pvgData = [];
      _.forEach(this.value, (v, k) => {
        pvgData.push({ md: v, id: k });
      });

      let list = [];
      for (let pvgIt of pvgData) {
        let { md, id } = pvgIt;
        //console.log("pvg data", { md, id })
        let { other, blend } = Wn.Obj.parseMode(md);
        //
        // Tip to indicate the RWX
        //
        let tips = [];
        if ("WEAK" == blend) {
          tips.push("~");
        } else if ("STRONG" == blend) {
          tips.push("!");
        }
        if (other.readable) tips.push(Ti.I18n.get("wn-md-R"));
        if (other.writable) tips.push(Ti.I18n.get("wn-md-W"));
        if (other.excutable) tips.push(Ti.I18n.get("wn-md-X"));
        let tip = tips.join("") || Ti.I18n.get("nil");
        //
        // Organization
        let m = /^\+(.+)$/.exec(id);
        if (m) {
          let deptId = m[1];
          let dept = this.myOrganizationMap[deptId];
          if (dept) {
            list.push({
              type: "dept",
              icon: dept.icon || "fas-briefcase",
              text: dept.name || dept.title || dept.text,
              key: id,
              tip,
              ...other,
              blend,
            });
          }
          continue;
        }
        // Role || Account Name
        m = /^@((\[([^[\]]+)\])|([^[\]]+))$/.exec(id);
        if (m) {
          let accountName = m[3];
          let roleName = m[4];
          // Account Name
          if (accountName) {
            let user = _.get(this.myAccountNmMap, accountName);
            if (user) {
              list.push({
                type: "account",
                icon: user.icon || "zmdi-account",
                thumb: user.thumb,
                text: user.nickname || user.nm,
                key: id,
                tip,
                ...other,
                blend,
              });
            }
            // Default account name
            else {
              list.push({
                type: "account",
                icon: "zmdi-account",
                text: accountName,
                key: id,
                tip,
                ...other,
                blend,
              });
            }
          }
          // Role
          else if (roleName) {
            let role = _.get(this.myRoleMap, roleName);
            if (role) {
              list.push({
                type: "role",
                icon: role.icon || "far-smile",
                text: role.title || role.nm,
                key: id,
                tip,
                ...other,
                blend,
              });
            }
            // Default as role
            else {
              list.push({
                type: "role",
                icon: "far-smile",
                text: roleName,
                key: id,
                tip,
                ...other,
                blend,
              });
            }
          }
          // Impossiable
          else {
            throw "Impossible role/accountName match: " + id;
          }
          continue;
        }
        //
        // Account
        let user = _.get(this.myAccountIdMap, id);
        if (user) {
          list.push({
            type: "account",
            icon: user.icon || "zmdi-account",
            thumb: user.thumb,
            text: user.nickname || user.nm,
            key: id,
            tip,
            ...other,
            blend,
          });
        } else {
          list.push({
            type: "account",
            icon: "zmdi-account",
            text: id,
            key: id,
            tip,
            ...other,
            blend,
          });
        }
      }
      // Update to state
      this.myPrivilegeData = list;
    },
    //--------------------------------------
    async reload() {
      this.loading = true;
      let site = {};
      let cmdText;
      // Already loaded
      if (_.isObject(this.loadSite)) {
        site = _.cloneDeep(this.loadSite);
      }
      // Dynamic load
      else if (this.loadSite && _.isString(this.loadSite)) {
        cmdText = this.loadSite;
        site = await Wn.Sys.exec2(cmdText, { as: "json" });
      }
      //console.log(site)

      // Reload accountHome and roleHome
      this.myAccountHome = _.get(site, "accountHome");
      this.myRoleHome = _.get(site, "roleHome");
      this.myOrganization = _.get(site, "organization");
      this.pvg_owner = _.get(site, "pvgOwner");
      this.pvg_member = _.get(site, "pvgMember");

      // Reload Accounts
      let km = "^(id|nm|title|nickname|icon|thumb)$";
      if (this.myAccountHome) {
        cmdText = `thing id:${this.myAccountHome.id} query -cqn -e '${km}'`;
        this.myAccounts = await Wn.Sys.exec2(cmdText, { as: "json" });
      } else {
        this.myAccounts = [];
      }

      // Reload Roles
      if (this.myRoleHome) {
        cmdText = `thing id:${this.myRoleHome.id} query -sort 'sort:1' -cqn -e '${km}'`;
        this.myRoles = await Wn.Sys.exec2(cmdText, { as: "json" });
      } else {
        this.myRoles = [];
      }

      // Build map
      this.myAccountIdMap = this.buildMap(this.myAccounts, "id");
      this.myAccountNmMap = this.buildMap(this.myAccounts, "nm");
      this.myRoleMap = this.buildMap(this.myRoles, "nm");
      this.myOrganizationMap = this.buildMap(this.myOrganization, "id");

      // Eval data
      await this.evalPrivilegeData();

      this.loading = false;
    },
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    value: "evalPrivilegeData",
  },
  //////////////////////////////////////////
  mounted: function () {
    this.reload();
  },
  //////////////////////////////////////////
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-upload-file.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/upload/file/wn-upload-file.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  data: () => ({
    srcAsUrl: false,
    src_ts: null,
    oFile: null,
    oTarget: null,
    uploadFile: null,
    progress: -1
  }),
  /////////////////////////////////////////
  props: {
    //------------------------------------------------
    // Data
    //------------------------------------------------
    "value": {
      type: [String, Object],
      default: null
    },
    // raw value is WnObj
    // If declare the valueType
    // It will transform the WnObj
    // to relaitve value mode
    "valueType": {
      type: String,
      default: "obj",
      validator: (v) => /^(obj|path|fullPath|idPath|id)$/.test(v)
    },
    // Auto append the extra-meta after file been uploaded
    "fileMeta": {
      type: Object
    },
    //------------------------------------------------
    // Behavior
    //------------------------------------------------
    // Input a image link directly
    "exlink": {
      type: Boolean,
      default: false
    },
    // support remove the objects
    "removable": {
      type: Boolean,
      default: true
    },
    // Indicate the upload target when upload new value
    // Of cause, if the `value` exists, replace it
    // The `target` must be a path to a image object,
    // it will auto transfrom the image format by `cmd_imagic`
    "target": {
      type: String,
      default: null
    },
    // which type supported to upload
    // nulll or empty array will support any types
    "supportTypes": {
      type: [String, Array],
      default: () => []
      //default : ()=>["png","jpg","jpeg","gif"]
    },
    "minFileSize": {
      type: Number,
      default: 0
    },
    "maxFileSize": {
      type: Number,
      default: 0
    },
    // which mime supported to upload
    // nulll or empty array will support any mimes
    "supportMimes": {
      type: [String, Array],
      default: () => []
      //default : ()=>["image/png","image/jpeg","image/gif"]
    },
    // Image object only: it will auto apply image filter
    // just like clip the image size etc..
    // @see cmd_imagic for more detail about the filter
    "filter": {
      type: [Array, String],
      default: null
    },
    // Image object only: if `>0 and <=1` mean output quality
    // if not match the range, will depends on the `cmd_imagic` default
    "quality": {
      type: Number,
      default: 0
    },
    "readonly": {
      type: Boolean,
      default: false
    },
    "actions": {
      type: Array,
      default: () => []
    },
    // remove  the refer file when click remove button
    // default is undefined, it will auto determined by target
    // is same target, then true, else false
    "shallowRemove": {
      tyep: Boolean
    },
    //------------------------------------------------
    // Measure
    //------------------------------------------------
    // Display width
    "width": {
      type: [String, Number],
      default: undefined
    },
    // Display height
    "height": {
      type: [String, Number],
      default: undefined
    },
    "maxWidth": {
      type: [String, Number],
      default: undefined
    },
    "maxHeight": {
      type: [String, Number],
      default: undefined
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    AcceptTypes() {
      if (_.isString(this.supportTypes)) return this.supportTypes.split(",");
      return this.supportTypes;
    },
    //--------------------------------------
    AcceptMimes() {
      if (_.isString(this.supportMimes)) return this.supportMimes.split(",");
      return this.supportMimes;
    },
    //--------------------------------------
    ImageFilter() {
      if (!this.filter) return [];
      return [].concat(this.filter);
    },
    //--------------------------------------
    // Display image for <ti-thumb>
    PreviewIcon() {
      if (this.srcAsUrl) {
        return {
          type: "image",
          value: this.value
        };
      }
      //....................................
      if (this.oFile) {
        //..................................
        // Image
        if (Wn.Obj.isMime(this.oFile, /^(image\/)/)) {
          let ss = ["/o/content?str=id:", this.oFile.id];
          if (this.src_ts) {
            ss.push("&_t=");
            ss.push(this.src_ts);
          }
          return {
            type: "image",
            value: ss.join("")
          };
        }
        //..................................
        // Video
        if (Wn.Obj.isMime(this.oFile, /^(video\/)/)) {
          let ss = ["/o/content?str=id:", this.oFile.video_cover];
          if (this.src_ts) {
            ss.push("&_t=");
            ss.push(this.src_ts);
          }
          return {
            type: "image",
            value: ss.join("")
          };
        }
        //..................................
        // Others just get the icon font
        return Wn.Util.getObjIcon(this.oFile);
      }
    },
    //--------------------------------------
    PreviewType() {
      return this.srcAsUrl ? "link" : "obj";
    },
    //--------------------------------------
    FileTitle() {
      if (this.srcAsUrl) {
        return this.value;
      }
      //....................................
      if (this.oFile) {
        return Ti.Util.getFallback(this.oFile, "title", "nm");
      }
      return this.value;
    },
    //--------------------------------------
    FileHref() {
      if (this.srcAsUrl) {
        return this.value;
      }
      if (this.oFile) {
        return Wn.Util.getAppLinkStr(this.oFile);
      }
    },
    //--------------------------------------
    FileLocal() {
      if (this.oFile && this.oFile.local) {
        return {
          type: Ti.Util.getSuffixName(this.oFile.local.name, true),
          name: this.oFile.local.name,
          majorName: Ti.Util.getMajorName(this.oFile.local.name),
          type: this.oFile.local.mime,
          size: this.oFile.local.size,
          path: Wn.Io.getFormedPath(this.oFile)
        };
      }
    },
    //--------------------------------------
    FileTarget() {
      return Ti.S.renderBy(this.target, this.FileLocal);
    },
    //--------------------------------------
    isShallowRemove() {
      if (_.isBoolean(this.shallowRemove)) {
        return this.shallowRemove;
      }
      if (!this.FileLocal) {
        return false;
      }
      if (this.oTarget && this.oFile) {
        return this.oTarget.id != this.oFile.id;
      }
      return this.FileLocal.path != this.FileTarget;
    },
    //--------------------------------------
    UploadPrefixHoverIcon() {
      return this.isShallowRemove ? "zmdi-close" : "far-trash-alt";
    },
    //--------------------------------------
    TheActions() {
      return Ti.Util.explainObj(this.oFile || {}, this.actions) || [];
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    async assertListHas(list, str, invalidMsg, vars) {
      if (!_.isEmpty(list)) {
        let invalid = true;
        for (let li of list) {
          if (li == str) {
            invalid = false;
            break;
          }
        }
        if (invalid) {
          await Ti.Alert(invalidMsg, {
            type: "warn",
            icon: "zmdi-alert-triangle",
            vars
          });
          return false;
        }
      }
      return true;
    },
    //--------------------------------------
    async OnExlink() {
      let value = this.srcAsUrl ? this.value : undefined;
      let src = _.trim(
        await Ti.Prompt("i18n:exlink-tip-img", {
          width: "80%",
          value
        })
      );
      // User cancel
      if (!src) return;

      this.$notify("change", src);
    },
    //--------------------------------------
    async OnOpen() {
      if (this.srcAsUrl) {
        await Ti.Be.Open(this.value);
      }
      // remove the thumb file
      else if (this.oFile) {
        let link = Wn.Util.getAppLink(this.oFile);
        //console.log("it will open ", link)
        await Ti.Be.Open(link.url, { params: link.params });
      }
    },
    //--------------------------------------
    async OnDownload() {
      if (this.srcAsUrl) {
        await Ti.Be.Open(this.value);
      }
      // remove the thumb file
      else if (this.oFile) {
        //console.log("it will download ", this.oFile)
        await Ti.Be.Open("/o/content", {
          params: {
            str: `id:${this.oFile.id}`,
            d: true
          }
        });
      }
    },
    //--------------------------------------
    async OnRemove() {
      // remove the thumb file
      if (this.oFile && !this.isShallowRemove) {
        await Wn.Sys.exec2(`rm id:${this.oFile.id}`);
      }
      // Notify the change
      if (!Ti.Util.isNil(this.value)) {
        this.$notify("change", null);
      }
    },
    //--------------------------------------
    async OnUpload(file) {
      //console.log("it will upload ", file)
      // Guard: no target
      if (!this.target) {
        return await Ti.Toast.Open("i18n:nil-target", "warn");
      }
      //................................
      // Check file size
      let fileSize = file.size;
      if (this.minFileSize > 0 && fileSize < this.minFileSize) {
        return await Ti.Alert("i18n:wn-invalid-fsize-min", {
          type: "warn",
          icon: "zmdi-alert-triangle",
          vars: {
            minSize: Ti.S.sizeText(this.minFileSize),
            fileSize: Ti.S.sizeText(fileSize)
          }
        });
      }
      if (this.maxFileSize > 0 && fileSize >= this.maxFileSize) {
        return await Ti.Alert("i18n:wn-invalid-fsize-max", {
          type: "warn",
          icon: "zmdi-alert-triangle",
          vars: {
            maxSize: Ti.S.sizeText(this.maxFileSize),
            fileSize: Ti.S.sizeText(fileSize)
          }
        });
      }
      //................................
      // Check for support Types
      let type = Ti.Util.getSuffixName(file.name, true);
      if (
        !(await this.assertListHas(
          this.AcceptTypes,
          type,
          "i18n:wn-invalid-types",
          { current: type, supports: this.AcceptTypes.join(", ") }
        ))
      ) {
        return;
      }
      if (
        !(await this.assertListHas(
          this.AcceptMimes,
          file.type,
          "i18n:wn-invalid-mimes",
          { current: file.type, supports: this.AcceptMimes.join(", ") }
        ))
      ) {
        return;
      }

      //................................
      // Eval the target
      let vars = {
        type,
        name: file.name,
        majorName: Ti.Util.getMajorName(file.name)
      };
      //................................
      // Prepare customized file meta
      // Merge them to vars, then we can make target path more-dyna
      _.assign(vars, this.fileMeta);
      let taPath = Ti.S.renderBy(this.target, vars);

      //................................
      // Upload file to destination
      this.uploadFile = file;
      this.progress = 0;

      let { ok, msg, data } = await Wn.Io.uploadFile(file, {
        target: taPath,
        mode: "r",
        progress: (pe) => {
          this.progress = pe.loaded / pe.total;
        }
      });

      //................................
      // Reset upload
      this.uploadFile = null;
      this.progress = -1;

      //................................
      // Fail to upload
      if (!ok) {
        await Ti.Alert(`i18n:${msg}`, {
          type: "warn",
          icon: "zmdi-alert-triangle"
        });
        return;
      }

      //................................
      // Extra-file-meta
      if (!_.isEmpty(this.fileMeta)) {
        let fileMeta = Ti.Util.explainObj(vars, this.fileMeta);
        let metaJson = JSON.stringify(fileMeta);
        let cmdText = `o id:${data.id} @update @json -cqn`;
        data = await Wn.Sys.exec2(cmdText, { input: metaJson, as: "json" });
      }

      //................................
      // do Filter
      if (!_.isEmpty(this.ImageFilter)) {
        let cmd = [
          "imagic",
          `id:${data.id}`,
          `-filter "${this.ImageFilter.join(" ")}"`
        ];
        if (this.quality > 0 && this.quality <= 1) {
          cmd.push(`-qa ${this.quality}`);
        }
        cmd.push("-out inplace");
        let cmdText = cmd.join(" ");
        await Wn.Sys.exec2(cmdText);
      }

      //................................
      // done
      this.src_ts = Date.now();
      this.oFile = data;

      //................................
      // Transform value
      let val = Wn.Io.formatObjPath(data, this.valueType);

      //................................
      this.$notify("change", val);
    },
    //--------------------------------------
    async reload() {
      this.srcAsUrl = /^https?:\/\//.test(this.value);
      if (this.srcAsUrl) {
        return;
      }
      //console.log("reload")
      if (_.isString(this.value)) {
        this.oFile = await Wn.Io.loadMetaBy(this.value);
      }
      // Object
      else if (this.value && this.value.id && this.value.mime) {
        this.oFile = _.cloneDeep(this.value);
      }
      // Reset
      else {
        this.oFile = null;
      }

      if (this.FileTarget) {
        this.oTarget = await Wn.Io.loadMeta(this.FileTarget);
      } else {
        this.oTarget = null;
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "value": function () {
      this.reload();
    }
  },
  //////////////////////////////////////////
  mounted: async function () {
    await this.reload();
  }
  //////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'ti-gui-panel.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/gui/panel/ti-gui-panel.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  inject: ["$gui"],
  /////////////////////////////////////////
  data: () => ({
    myBlockTitle: undefined,
    myDockReady: false,
    myConStyle: undefined
  }),
  /////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "title": [String, Function, Object],
    "icon": {
      type: [String, Object]
    },
    "name": {
      type: String
    },
    "type": {
      type: String,
      validator: (v) => {
        return Ti.Util.isNil(v)
          || /^(cols|rows|tabs)$/.test(v)
      }
    },
    "blocks": {
      type: Array,
      default: () => []
    },
    "body": {
      type: [String, Object]
    },
    "referElement": {
      type: [Element, Object]  /*null type is Object*/
    },
    "visibles": {
      type: Object,
      default: () => ({})
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "autoDock": {
      type: [Object, String]
    },
    "actions": {
      type: Array,
      default: () => []
    },
    "actionStatus": {
      type: Object,
      default: () => ({})
    },
    "actionVars": {
      type: [Object, Function]
    },
    "adjustable": {
      type: [Boolean, String],
      default: true,
      validator: (v) => {
        return _.isBoolean(v) || /^(x|y)$/.test(v)
      }
    },
    "clickMaskToClose": {
      type: Boolean,
      default: false
    },
    "shown": {
      type: Object,
      default: () => ({})
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "hideTitle": {
      type: Boolean,
      default: false
    },
    "conStyle": Object,
    "mainConClass": undefined,
    "mainConStyle": Object,
    "overflow": {
      type: String
    },
    "position": {
      type: String,
      default: "center",
      validator: (v) => {
        return /^(left|right|top|bottom|center|free)$/.test(v)
          || /^((left|right)-top|bottom-(left|right))$/.test(v)
      }
    },
    "fixed": {
      type: Boolean,
      default: false
    },
    "closer": {
      type: String,
      default: "default",
      validator: (v) => (
        _.isNull(v) || /^(default|bottom|top|left|right)$/.test(v)
      )
    },
    "mask": {
      type: Boolean,
      default: false
    },
    "transparent": {
      type: Boolean,
      default: false
    },
    //-----------------------------------
    // Measure
    //-----------------------------------
    "viewportWidth": {
      type: [String, Number],
      default: 0
    },
    "viewportHeight": {
      type: [String, Number],
      default: 0
    },
    "width": {
      type: [String, Number]
    },
    "height": {
      type: [String, Number]
    },
    "maxWidth": {
      type: [String, Number]
    },
    "maxHeight": {
      type: [String, Number]
    },
    "left": {
      type: [String, Number]
    },
    "right": {
      type: [String, Number]
    },
    "top": {
      type: [String, Number]
    },
    "bottom": {
      type: [String, Number]
    },
    //-----------------------------------
    // By Pass
    //-----------------------------------
    "schema": {
      type: Object,
      default: () => ({})
    },
    "captureEvents": undefined,
    "adjustable": undefined,
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "show-mask": this.mask,
        "no-mask": !this.mask,
        "is-bg-transparent": this.transparent,
        "is-bg-opaque": !this.transparent,
        "is-closer-default": this.isCloserDefault,
        "is-fixed": this.fixed
      }, `at-${this.position}`)
    },
    //--------------------------------------
    TopStyle() {
      let visibility = ""
      if (this.isAutoDock) {
        if (this.myDockReady) {
          visibility = ""
        } else {
          visibility = "hidden"
        }
      }
      return Ti.Css.toStyle({
        left: this.left,
        right: this.right,
        top: this.top,
        bottom: this.bottom,
        visibility
      })
    },
    //--------------------------------------
    hasCloser() {
      return this.closer ? true : false
    },
    //--------------------------------------
    isAutoDock() {
      return this.autoDock
        && "free" == this.position
        && _.isElement(this.referElement)
    },
    //--------------------------------------
    isCloserDefault() {
      return true === this.closer || "default" == this.closer
    },
    //--------------------------------------
    CloserClass() {
      return Ti.Css.mergeClassName({
        'as-lamp-cord': !this.isCloserDefault,
        'as-default': this.isCloserDefault,
        [`at-${this.closer}`]: !this.isCloserDefault
      })
    }
    //--------------------------------------
    // theCloserIconName() {
    //   return this.isCloserDefault
    //           ? "zmdi-minus"
    //           : "zmdi-close";
    //}
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnClose() {
      this.$gui.OnBlockHide(this.name)
    },
    //--------------------------------------
    OnClickMask() {
      if (this.clickMaskToClose) {
        this.$gui.OnBlockHide(this.name)
      }
    },
    //--------------------------------------
    OnContentReady() {
      this.dockPanelToReferElement()
    },
    //--------------------------------------
    isBlockSizeMinimum(index) {
      return false
    },
    //--------------------------------------
    async evalBlockTitle() {
      if (this.title) {
        this.myBlockTitle = await Ti.Util.explainObj(this.$gui.vars, this.title)
      }
    },
    //--------------------------------------
    evalConStyle() {
      // Guard
      if (!_.isElement(this.$el)) {
        return
      }
      let css = _.assign({
        maxWidth: this.maxWidth,
        maxHeight: this.maxHeight
      }, this.conStyle)
      let $win = this.$el.ownerDocument.defaultView
      if (!Ti.Util.isNil(this.width)) {
        if (this.fixed) {
          css.width = Ti.Css.toPixel(this.width, $win.innerWidth, 0)
        } else {
          css.width = Ti.Css.toPixel(this.width, this.viewportWidth, 0)
        }
      }
      if (!Ti.Util.isNil(this.height)) {
        if (this.fixed) {
          css.height = Ti.Css.toPixel(this.height, $win.innerHeight, 0)
        } else {
          css.height = Ti.Css.toPixel(this.height, this.viewportHeight, 0)
        }
      }
      this.myConStyle = Ti.Css.toStyle(css)
    },
    //--------------------------------------
    dockPanelToReferElement() {
      let visi = _.get(this.visibles, this.name)
      if (visi && this.isAutoDock) {
        let dockOption = _.assign({}, this.autoDock)
        if (_.isString(this.autoDock)) {
          dockOption = {
            mode: this.autoDock,
            space: 10
          }
        }
        // _.assign(dockOption, {
        //   position: "fixed"
        // })
        this.$nextTick(() => {
          Ti.Dom.dockTo(this.$el, this.referElement, dockOption)
          _.delay(() => {
            this.myDockReady = true
          }, 0)
        })
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "autoDock": "dockPanelToReferElement",
    "referElement": "dockPanelToReferElement",
    "visibles": "dockPanelToReferElement",
    "fixed": "evalConStyle",
    "viewportWidth": "evalConStyle",
    "width": "evalConStyle",
    "height": "evalConStyle"
  },
  //////////////////////////////////////////
  mounted: function () {
    this.evalBlockTitle()
    this.evalConStyle()
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'm-obj-children.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/obj-children/m-obj-children.mjs'] = (function(){
//////////////////////////////////////////////
const _M = {
  ////////////////////////////////////////////
  getters: {
    currentObj(state) {
      if(state.currentId) {
        let list = _.get(state.data, "list")
        return _.find(list, li => {
          return li.id == state.currentId
        })
      }
    }
  },
  ////////////////////////////////////////////
  mutations: {
    //----------------------------------------
    setMeta(state, meta) {
      state.meta = meta
    },
    //----------------------------------------
    setKeepSearch(state, keepSearch) {
      state.keepSearch = keepSearch
    },
    //----------------------------------------
    setSearch(state, search) {
      state.search = _.cloneDeep(search)
    },
    //----------------------------------------
    setSearchMatch(state, match) {
      let search = _.cloneDeep(state.search)
      search.match = match || {}
      state.search = search
    },
    //----------------------------------------
    mergeSearchMatch(state, match) {
      let search = _.cloneDeep(state.search)
      _.merge(search.match, match)
      state.search = search
    },
    //----------------------------------------
    mergeSearchMatchOmitNil(state, match) {
      let search = _.cloneDeep(state.search)
      _.merge(search.match, match)
      search.match = _.omitBy(search.match, (val) => {
        return Ti.Util.isNil(val)
      })
      state.search = search
    },
    //----------------------------------------
    setFilter(state, filter) {
      state.filter = _.cloneDeep(filter)
    },
    //----------------------------------------
    clearFilter(state) {
      let flt = _.cloneDeep(state.filter)
      flt.keyword = null
      flt.match = {}
      state.filter = flt
    },
    //----------------------------------------
    setCurrentId(state, currentId) {
      state.currentId = currentId
    },
    //----------------------------------------
    setSorter(state, sorter) {
      state.sorter = _.cloneDeep(sorter)
    },
    //----------------------------------------
    setPager(state, { pageNumber, pageSize } = {}) {
      if (_.isNumber(pageNumber)) {
        state.pageNumber = pageNumber
      }
      if (_.isNumber(pageSize)) {
        state.pageSize = pageSize
      }
    },
    //----------------------------------------
    setPageNumber(state, pageNumber = 1) {
      state.pageNumber = pageNumber
    },
    //----------------------------------------
    setPageSize(state, pageSize = 100) {
      state.pageSize = pageSize
    },
    //----------------------------------------
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    },
    //----------------------------------------
    prependDataItem(state, newItem) {
      Ti.Util.UpsertStateDataItemAt(state, newItem, -1)
    },
    //----------------------------------------
    appendDataItem(state, newItem) {
      Ti.Util.UpsertStateDataItemAt(state, newItem, 1)
    },
    //----------------------------------------
    setDataItem(state, newItem) {
      Ti.Util.UpsertStateDataItemAt(state, newItem, 0)
    },
    //----------------------------------------
    mergeDataItem(state, theItem) {
      Ti.Util.MergeStateDataItem(state, theItem)
    },
    //----------------------------------------
    removeDataItems(state, items = []) {
      Ti.Util.RemoveStateDataItems(state, items)
    },
    //----------------------------------------
    setData(state, data) {
      state.data = data
    },
    //----------------------------------------
    setFieldStatus(state, { name, type, text } = {}) {
      if (name) {
        let ukey = _.concat(name).join("-")
        Vue.set(state.fieldStatus, ukey, { type, text })
      }
    },
    //----------------------------------------
    clearFieldStatus(state, names = []) {
      // Clean All
      if (_.isEmpty(names)) {
        state.fieldStatus = {}
      }
      // Clear one
      else {
        state.fieldStatus = _.omit(state.fieldStatus, names)
      }
    }
    //----------------------------------------
  }
  ////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-gui-grid-drag.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/gui/grid/ti-gui-grid-drag.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data: () => ({
    myDragArea: undefined,
    myDragX: undefined,
    myDragY: undefined,
    myTrackScales: undefined
  }),
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    isShowDragBar() {
      return this.myDragArea ? true : false;
    },
    //--------------------------------------
    DragBarClass() {
      if (this.myDragArea) {
        return `as-${this.myDragArea.type}`;
      }
    },
    //--------------------------------------
    DragBarStyle() {
      if (this.myDragArea) {
        let rect = this.myDragArea.rect.clone();
        let view = this.myView;
        // console.log(rect);
        // console.log(view);
        rect.relative(view);
        let css = rect.toCss(view);
        if (this.isDragging) {
          // Drag in X-axis
          if (_.isNumber(this.myDragX)) {
            css.left = `${this.myDragX - this.lineRadius}px`;
          }
          // Drag in Y-axis
          else if (_.isNumber(this.myDragY)) {
            css.top = `${this.myDragY - this.lineRadius}px`;
          }
        }
        return Ti.Css.toStyle(css);
      }
    },
    //--------------------------------------
    GridDraggable() {
      //....................................
      const do_dragging = (ctx) => {
        let {
          viewWidth,
          trackSizes,
          dragScope,
          minSize,
          sumSize,
          lineI,
          gapRadius,
          padHead,
          padTail
        } = ctx;
        // x-column(left/right), y-row(top/bottom)
        let k = ctx.axisMode;
        let v = ctx[k];
        /*
         Eval the track size:
                   +--- mouse X/Y
                   V
         | [...]   |  [...]   |
          ^      ^          ^
          |      |          +-- pad Tail
          |      +-- garRadius  
          +-- padHead         
        */
        let [MIN, MAX] = dragScope;
        let v2 = _.clamp(v, MIN + minSize, MAX - minSize);
        // Move the bar in-time
        this[ctx.propKey] = v2; // myDragX/Y

        // Calculate the track size
        let prev = v2 - MIN - gapRadius;
        let next = MAX - v2 - gapRadius;
        trackSizes[lineI] = prev;
        trackSizes[lineI + 1] = next;

        // Calculate the scale
        let scales = [];
        for (let sz of trackSizes) {
          let s = sz / viewWidth;
          let p = Ti.S.toPercent(s);
          scales.push(p);
          //scales.push(`${sz}px`);
        }

        this.LOG(
          ` I=${lineI} ${k}=${v}/${v2} GapR=${gapRadius}, pad=${padHead}:${padTail}`,
          `sum=${sumSize}, scope=${JSON.stringify(dragScope)}`,
          trackSizes,
          `=${_.sum(trackSizes)}`,
          scales
        );
        this.myTrackScales = scales;
      };
      //....................................
      return {
        trigger: ".ti-gui-grid-drag-bar",
        prepare: (ctx, evt) => {
          this.isDragging = true;
          let mk = Ti.Dom.hasClass(ctx.$trigger, "as-column") ? "x" : "y";
          ctx.axisMode = mk;
          ctx.propKey = `myDrag${_.upperCase(mk)}`;
          let minSize = {
            x: this.cellMinWidth,
            y: this.cellMinHeight
          }[mk];

          let I = this.myDragArea.index;
          // Get the left/right top/bottom key of track
          let K0 = { x: "left", y: "top" }[mk];
          let K1 = { x: "right", y: "bottom" }[mk];

          // Get the track columns/rows
          let tracks = this.myGrid[{ x: "columns", y: "rows" }[mk]];
          let tk0 = tracks[I];
          let tk1 = tracks[I + 1];

          // Get mouse move scope (relative the viewport)
          let dragScope = [
            tk0[K0] - this.myView[K0],
            tk1[K1] - this.myView[K0]
          ];

          // Eval each cell size in track
          // X-Axis: columns : left/right
          // Y-Axis: rows : top/bottom
          let trackSizes = _.map(tracks, (cell) => {
            return cell[K1] - cell[K0];
          });

          ctx.gapRadius = (tk1[K0] - tk0[K1]) / 2;
          ctx.padHead = _.first(tracks)[K0] - this.myView[K0];
          ctx.padTail = this.myView[K1] - _.last(tracks)[K1];
          ctx.trackSizes = trackSizes;
          ctx.sumSize = _.sum(trackSizes);
          ctx.dragScope = dragScope;
          ctx.minSize = minSize;
          ctx.lineI = I;
          ctx.viewWidth = ctx.sumSize + ctx.gapRadius * 2 * (tracks.length - 1);
        },
        actived: (ctx) => {
          //console.log("actived", ctx);
          // Get all my blocks and init them rect
        },
        dragging: do_dragging,
        done: (ctx) => {
          //console.log("dragging done");
          // Save customized
          let { axisMode } = ctx;
          let cuKey = {
            x: "columns",
            y: "rows"
          }[axisMode];
          let tracks = _.assign({}, this.myCustomizedTracks);
          tracks[cuKey] = _.cloneDeep(this.myTrackScales);
          this.myCustomizedTracks = tracks;
          this.trySaveLocalCustomized();
          // Notify whole window resizing
          Ti.Viewport.resize();
        },
        finished: (ctx) => {
          // Reset mark
          this.clearDragging();
        }
      };
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnMouseMove($event) {
      // If is dragging, watching mouse is unnecessary
      if (this.isDragging) {
        return;
      }

      // get mouse pointer
      let point = { x: $event.pageX, y: $event.pageY };

      // In block area will not show the adjustbar
      for (let B of this.myBlockAreas) {
        if (B.rect.hasPoint(point)) {
          return;
        }
      }

      let amode = this.adjustMode;

      // found area
      let area = _.find(this.myWatchAreas, (area) => {
        if ("both" == amode || amode == area.type) {
          return area.rect.hasPoint(point);
        }
      });

      // if (area) {
      //   this.LOG(`AREA=${area.index} : X=${pageX},Y=${pageY} : ${area.rect}`);
      // }
      // if (area)
      this.myDragArea = area;
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  mounted() {}
  //////////////////////////////////////////
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'mod-profile-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/lib/www/mod/auth/mod-profile-actions.mjs'] = (function(){
const _M = {
  //--------------------------------------------
  async saveProfile({state, getters, commit, dispatch,rootState}, profile={}) {
    //console.log("profile", profile)
    // Can not update email/phone/nm through this method
    profile = _.omit(profile, "email", "phone", "nm")
    // Guard Empty
    if(_.isEmpty(profile)) {
      return
    }
    // Guard No Change
    if(_.isMatch(state.me, profile)) {
      return
    }

    // Prepare http options
    let params = {
      site : rootState.siteId,
      ticket: state.ticket
    }
    let body = JSON.stringify(profile)
    
    commit("setLoading", true, {root:true})

    // Send request
    let url = getters.urls.profile_save
    await Ti.Http.post(url, {
      params, body, as:"json"
    })

    // Then reload
    await dispatch("doCheckMe", {force:true})

    commit("setLoading", false, {root:true})

  }
  //--------------------------------------------
}
return _M;;
})()
// ============================================================
// EXPORT 'web-meta-article.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/meta/article/web-meta-article.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  props : {
    "title" : {
      type : String,
      default : undefined
    },
    "brief" : {
      type : String,
      default : undefined
    },
    "pubDate" : {
      type : [String, Number, Date],
      default : undefined
    },
    "tags" : {
      type : [String, Array],
      default : undefined
    },
    "dateFormat" : {
      type : String,
      default : "yyyy-MM-dd"
    },
    "author" : {
      type : String,
      default : undefined
    },
    "duration" : {
      type : [String, Number],
      default : undefined
    },
    "watchCount" : {
      type : Number,
      default : 0
    },
    "align": {
      type: String,
      default: "center",
      validator: v => /^(left|center|right)$/.test(v)
    },
    "bottomLine" : {
      type : Boolean,
      default : true
    }
  },
  //////////////////////////////////////////
  computed : {
    //......................................
    TopClass(){
      return this.getTopClass(`align-${this.align}`)
    },
    //......................................
    TheTags() {
      return Ti.S.toArray(this.tags)
    },
    //......................................
    hasTags() {
      return !_.isEmpty(this.TheTags)
    },
    //......................................
    DurationText() {
      if(_.isNumber(this.duration)) {
        return Ti.I18n.getf("du-in-min", {n:this.duration})
      }
      return this.duration
    },
    //......................................
    PubDateText() {
      if(this.pubDate) {
        return Ti.DateTime.format(this.pubDate, this.dateFormat)
      }
    },
    //......................................
    hasInfo() {
      return this.author
        || this.watchCount > 0
        || this.author
        || this.duration
    }
    //......................................
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-nav-item-mixins.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/nav/support/web-nav-item-mixins.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////////
  props : {
    "id" : {
      type: String,
      default: undefined
    },
    "index" : {
      type: Number,
      default: undefined
    },
    "idPath" : {
      type : Array,
    },
    "indexPath" : {
      type : Array
    },
    "depth" : {
      type:Number, 
      default: 0
    },
    "icon"  : {
      type:[String,Object], 
      default:undefined
    },
    "title" : {
      type:String, 
      default:undefined
    },
    "type"  : {
      type:String, 
      default:undefined
    },
    "params": [Object, String, Number, Array],
    "href"  : {
      type:String, 
      default:undefined
    },
    "target"  : {
      type:String, 
      default:undefined
    },
    "value"  : {
      type: String, 
      default:undefined
    },
    "rawData" : {
      type : Object
    },
    "items" : {
      type : Array,
      default : undefined
    },
    "highlight" : {
      type : Boolean,
    },
    "current" : {
      type : Boolean,
    },
    "openedIds"   : undefined,
    "openedDepth" : undefined
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-dock-ready" : this.myDockReady,
        "is-dock-show"  : this.myDockShow,
        "is-top"   : this.isTop,
        "is-sub"   : !this.isTop,
        "is-group" : this.isGroup,
        "is-item"  : !this.isGroup,
        "has-href"    : this.hasHref,
        "nil-href"    : !this.hasHref,
        "is-opened"   : this.isOpened,
        "is-closed"   : !this.isOpened,
        "is-highlight": this.highlight,
        "is-normal"   : !this.highlight,
        "is-current"  : this.current
      })
    },
    //---------------------------------------------------
    isTop() {return this.depth == 0},
    isGroup() {return _.isArray(this.items)},
    hasSubItems() {return !_.isEmpty(this.items)},
    //---------------------------------------------------
    hasHref() {return this.href ? true : false},
    hasValue() {return this.value ? true : false},
    hasHrefOrValue() {return this.hasHref || this.hasValue},
    //---------------------------------------------------
    isOpened() {
      if(this.isGroup) {
        let opened = _.get(this.openedIds, this.id)
        if(_.isUndefined(opened) && !_.isUndefined(this.openedDepth)) {
          return this.depth < this.openedDepth
        }
        return opened
      }
      return false
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods : {
    //---------------------------------------------------
    OnToggleGroupOpened() {
      this.notifyGroupOpenStatus(!this.isOpened)
    },
    //---------------------------------------------------
    OnOpenGroup() {
      //console.log("OnOpenGroup", this.indexPath)
      this.notifyGroupOpenStatus(true)
    },
    //---------------------------------------------------
    OnCloseGroup() {
      //console.log("OnCloseGroup", this.indexPath)
      this.notifyGroupOpenStatus(false)
    },
    //---------------------------------------------------
    notifyGroupOpenStatus(opened) {
      if(this.isGroup) {
        this.$notify("change:opened", {
          id     : this.id,
          idPath : this.idPath,
          type   : this.type,
          params : this.params,
          href   : this.href,
          target : this.target,
          value  : this.value,
          opened
        })
      }
    },
    //---------------------------------------------------
    OnClickItemInfo() {
      if(!this.hasHrefOrValue) {
        this.OnToggleGroupOpened()
      } else {
        this.OnClickItemLink()
      }
    },
    //---------------------------------------------------
    OnClickItemLink(evt) {
      if(this.hasHref && evt) {
        evt.stopPropagation()
      }
      this.$notify("click:item", evt, {
        id      : this.id,
        type    : this.type,
        params  : this.params,
        href    : this.href,
        target  : this.target,
        value   : this.value,
        rawData : this.rawData
      })
    }
    //---------------------------------------------------
  }
  ///////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'side-nav-item.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/gui/side/nav/com/side-nav-item/side-nav-item.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////
  data: () => {
    return {
      collapse: true
    }
  },
  ///////////////////////////////////////////
  props: {
    "groupStatusStoreKey": {
      type: String,
      default: undefined
    },
    "highlightId": {
      type: String,
      default: undefined
    },
    "id": {
      type: String,
      default: undefined
    },
    "depth": {
      type: Number,
      default: 0
    },
    "icon": {
      type: [String, Object],
      default: undefined
    },
    "title": {
      type: String,
      default: undefined
    },
    "tip": {
      type: String,
      default: undefined
    },
    "path": {
      type: String,
      default: undefined
    },
    "view": {
      type: String,
      default: undefined
    },
    "href": {
      type: String,
      default: undefined
    },
    "items": {
      type: Array,
      default: () => []
    }
  },
  ///////////////////////////////////////////
  computed: {
    //---------------------------------------
    TopClass() {
      return {
        "is-top": this.isTop,
        "is-sub": !this.isTop,
        "is-group": this.isGroup,
        "is-item": !this.isGroup,
        "is-collapse": this.collapse,
        "is-expend": !this.collapse,
        "is-highlight": this.isHighlight,
        "has-icon": this.icon ? true : false,
        "nil-icon": this.icon ? false : true
      }
    },
    //---------------------------------------
    isTop() {
      return this.depth == 0
    },
    //---------------------------------------
    isGroup() {
      return _.isArray(this.items)
    },
    //---------------------------------------
    hasHref() {
      return !_.isEmpty(this.href)
    },
    //---------------------------------------
    isHighlight() {
      return this.id && this.id == this.highlightId
    },
    //---------------------------------------
    GroupStatusIcon() {
      return this.collapse
        ? 'zmdi-chevron-down'
        : 'zmdi-chevron-up'
    }
    //---------------------------------------
  },
  ///////////////////////////////////////////
  methods: {
    //---------------------------------------
    OnToggleGroupStatus() {
      if (this.isGroup) {
        this.collapse = !this.collapse
        // Save status
        if (this.groupStatusStoreKey) {
          Ti.Storage.local.set(this.groupStatusStoreKey, this.collapse)
        }
      }
    },
    //---------------------------------------
    OnClickItemInfo() {
      this.$notify("item:actived", {
        id: this.id,
        title: this.title,
        path: this.path,
        href: this.href,
        view: this.view
      })
    }
    //---------------------------------------
  },
  ///////////////////////////////////////////
  mounted: function () {
    if (this.isGroup) {
      // Only Top Group is expended
      if (this.isTop) {
        this.collapse = false
      }
      // Others group will default collapse
      // The 'item' will ignore the setting of collapse
      else {
        this.collapse = true
      }
      // Load local setting
      if (this.groupStatusStoreKey) {
        this.collapse =
          Ti.Storage.local.getBoolean(this.groupStatusStoreKey, this.collapse)
      }
    }
  }
  ///////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-month.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/month/ti-month.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  props : {
    "value" : {
      type : [String, Number, Date],
      default : null
    },
    // the height of drop list
    "height" : {
      type : [Number, String],
      default : 200
    },
    "beginYear" : {
      type : [Number, String],
      default : 1970
    },
    "endYear" : {
      type : [Number, String],
      default : (new Date().getFullYear()+2)
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    topStyle() {
      return {
        "height" : Ti.Css.toSize(this.height)
      }
    },
    //------------------------------------------------
    theDate() {
      return Ti.Types.toDate(this.value, null)
    },
    //------------------------------------------------
    theListGroup() {
      return [
        this.createList("year",  
          this.beginYear*1, 
          this.endYear*1,
          this.theDate ? this.theDate.getFullYear() : null,
          {reverse:true}
        ),
        this.createList("month",
          0,
          12,
          this.theDate ? this.theDate.getMonth() : null,
          {getText: (val)=>{
            let abbr = Ti.DateTime.getMonthAbbr(val)
            return Ti.I18n.get(abbr)
          }}
        )
      ]
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    createList(key, fromVal, toVal, currentVal, {
      reverse=false,
      getText=(val)=>val
    }={}) {
      let list = {
        key,
        currentId : `R-${currentVal}`,
        data  : []
      }
      for(let i=fromVal; i<toVal; i++) {
        list.data.push({
          id : `R-${i}`,
          value : i,
          text  : getText(i)
        })
      }
      if(reverse) {
        list.data.reverse()
      }
      return list
    },
    //------------------------------------------------
    onListSelected(key, {current}={}) {
      let val = _.get(current, "value") || 0

      let theDate = this.theDate || new Date()

      let d = ({
        "month" : (m)=>{
          return new Date(theDate.getFullYear(), m)
        },
        "year" : (y)=>{
          return new Date(y, theDate.getMonth())
        }
      })[key](val)
      this.$notify("change", d)
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'leaflet-redraw-methods.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/gis/leaflet/leaflet-redraw-methods.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //--------------------------------------
  __customize_marker_behaviors($marker, obj={}, {
    markerIcon,
    markerIconOptions,
    markerPopup,
    markerPopupOptions
  }={}) {
    // Customized Icon
    if(markerIcon) {
      let icon = Ti.Util.explainObj(obj, markerIcon, {
        evalFunc : true
      })
      //console.log({icon})
      if(icon) {
        $marker.setIcon(this.Icon(icon, markerIconOptions))
      }
    }
    // Customized popup
    if(markerPopup) {
      let popup = Ti.Util.explainObj(obj, markerPopup, {
        evalFunc : true
      })
      // Eval the html
      let html;
      // For Array
      if(_.isArray(popup)) {
        let list = _.map(popup, li=>`<li>${li}</li>`)
        html = `<ul>${list.join("")}</ul>`
      }
      // For Object pair
      else if(_.isPlainObject(popup)) {
        let rows = _.map(popup, (v,k)=>{
          let text = Ti.I18n.text(k)
          return `<tr><td>${text}</td><td>${v}</td></tr>`
        })
        html = `<table>${rows.join("")}</table>`
      }
      // For HTML
      else {
        html = popup
      }

      // HTML
      $marker.bindPopup(html, markerPopupOptions).openPopup();
    }
  },
  //--------------------------------------
  //
  // Single Point
  //
  //--------------------------------------
  draw_obj_as_point(latlng, setup) {
    let convert = _.get(setup, "convert") || _.identity
    let $marker = L.marker(latlng, {
      autoPan : true
    }).addTo(this.$live)

    // Save old data
    $marker.rawData = latlng

    // Can edit by drag
    if("drag" == this.editPoint) {
      $marker.dragging.enable()
      $marker.on("dragend", ({target})=>{
        let newLatlng = target.getLatLng()
        newLatlng = this.trans_obj_from_tiles_to_value(newLatlng)
        newLatlng = convert(newLatlng)
        this.$notify("change", {
          ... target.rawData,
          ... newLatlng
        })
      })
    }
    // Can edit by move map
    else if("pin" == this.editPoint) {
      this.$map.on("move", ()=>{
        let newLatlng = this.$map.getCenter();
        newLatlng = this.trans_obj_from_value_to_tiles(newLatlng)
        $marker.setLatLng(newLatlng)
      })
      this.$map.on("moveend", ()=>{
        let newLatlng = this.$map.getCenter();
        newLatlng = convert(newLatlng)
        this.$notify("change", newLatlng)
      })
    }

    // Customized Icon
    this.__customize_marker_behaviors($marker, latlng, setup)

    return $marker
  },
  //--------------------------------------
  draw_pair_as_point(latlng, setup={}) {
    setup.convert = ({lat, lng})=>[lat, lng]
    return this.draw_obj_as_point(latlng, setup)
  },
  //--------------------------------------
  //
  // Multi Points
  //
  //--------------------------------------
  draw_obj_list_as_point(list, setup) {
    let convert = _.get(setup, "convert") || _.identity
    _.forEach(list, (latlng, index)=>{
      let $marker = L.marker(latlng, {
        autoPan : true
      }).addTo(this.$live)

      // Add customized value
      $marker.index = index
      $marker.rawData = latlng
  
      // Can edit by drag
      if("drag" == this.editPoint) {
        $marker.dragging.enable()
        $marker.on("dragend", ({target})=>{
          let newLatlng = target.getLatLng()
          newLatlng = this.trans_obj_from_tiles_to_value(newLatlng)
          newLatlng = convert(newLatlng)
          
          let list = _.cloneDeep(this.value)
          list[target.index] = {
            ... target.rawData,
            ... newLatlng
          }
          this.$notify("change", list)
        })
      }
  
      // Customized Icon
      this.__customize_marker_behaviors($marker, latlng, setup)
    })
  },
  //--------------------------------------
  draw_pair_list_as_point(list, setup={}) {
    setup.convert = ({lat, lng})=>[lat, lng]
    this.draw_obj_list_as_point(list, setup)
  },
  //--------------------------------------
  //
  // Polyline
  //
  //--------------------------------------
  draw_obj_list_as_polyline(latlngs, setup={}) {
    let $polyline = this.draw_pair_list_as_polyline(latlngs, false)

    if(setup.showMarker) {
      this.draw_obj_list_as_point(latlngs)
    }

    return $polyline
  },
  //--------------------------------------
  draw_pair_list_as_polyline(latlngs, setup={}) {
    let $polyline = L.polyline(latlngs, {
      color: '#08F',
      ... this.aspect
    }).addTo(this.$live);

    if(setup.showMarker) {
      this.draw_pair_list_as_point(latlngs)
    }

    if(setup.autoFitBounds) {
      this.fitBounds($polyline.getBounds());
    }

    return $polyline
  },
  //--------------------------------------
  //
  // Polygon
  //
  //--------------------------------------
  draw_obj_list_as_polygon(latlngs, setup={}) {
    let $polygon = this.draw_pair_list_as_polygon(latlngs, setup)

    if(setup.showMarker) {
      this.draw_obj_list_as_point(latlngs, setup)
    }

    return $polygon
  },
  //--------------------------------------
  draw_pair_list_as_polygon(latlngs, setup={}) {
    let $polygon = L.polygon(latlngs, {
      color: '#08F',
      ... this.aspect
    }).addTo(this.$live);

    if(setup.showMarker) {
      this.draw_pair_list_as_point(latlngs, setup)
    }

    if(setup.autoFitBounds) {
      this.fitBounds($polygon.getBounds());
    }

    return $polygon
  },
  //--------------------------------------
  //
  // Rectangle
  //
  //--------------------------------------
  draw_obj_list_as_rectangle(latlngs, setup={}) {
    let [SW, NE] = latlngs
    let $rect = L.rectangle([SW, NE], {
      color: '#08F',
      ... this.aspect
    }).addTo(this.$live);

    if(setup.showMarker) {
      this.draw_obj_list_as_point([SW, NE], setup)
    }

    if(setup.autoFitBounds) {
      this.fitBounds($rect.getBounds());
    }

    return $rect
  },
  //--------------------------------------
  draw_pair_list_as_rectangle(latlngs, setup={}) {
    let $rect = this.draw_obj_list_as_rectangle(latlngs, false)

    if(setup.showMarker) {
      let bounds = $rect.getBounds()
      let SW = bounds.getSouthWest()
      let NE = bounds.getNorthEast()
      this.draw_pair_list_as_point([SW, NE], setup)
    }

    return $rect
  },
  //--------------------------------------
  //
  // Circle
  //
  //--------------------------------------
  draw_obj_as_circle(latlng, setup={}) {
    let $circle = L.circle(latlng, {
      radius : this.circleRadius,
      color: '#08F',
      ... this.aspect
    }).addTo(this.$live);

    if(setup.showMarker) {
      this.draw_obj_as_point(latlng)
    }

    if(setup.autoFitBounds) {
      this.fitBounds($circle.getBounds());
    }

    return $circle
  },
  //--------------------------------------
  draw_pair_as_circle(latlng, setup={}) {
    let $circle = this.draw_obj_as_circle(latlng, setup)

    if(setup.showMarker) {
      this.draw_pair_as_point(latlng, setup)
    }

    return $circle
  },
  //--------------------------------------
  //
  // Cluster
  //
  //--------------------------------------
  draw_obj_list_as_cluster(latlngs, setup) {
    var $cluster = L.markerClusterGroup();

    _.forEach(latlngs, (latlng, index)=>{
      let $marker = L.marker(latlng, {
        autoPan : true
      }).addTo($cluster)

      // Add customized value
      $marker.index = index
      $marker.rawData = latlng
    
      // Customized Icon
      this.__customize_marker_behaviors($marker, latlng, setup)
    })

    this.$live.addLayer($cluster)

    return $cluster
  },
  //--------------------------------------
  draw_pair_list_as_cluster(latlngs, setup) {
    return this.draw_obj_list_as_cluster(latlngs, setup)
  },
  //--------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-paging-mixins.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/paging/support/ti-paging-mixins.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////
  props: {
    "value": {
      type: Object,
      default: () => ({
        pn: 0,     // Page Number
        pgsz: 0,   // PageSize
        pgc: 0,    // page count
        sum: 0,    // Total
        count: 0   // Record in page
      })
    },
    "valueType": {
      type: String,
      default: "shortName",
      validator: v => /^(short|long)Name$/.test(v)
    }
  },
  ///////////////////////////////////////////
  computed: {
    //--------------------------------------
    PageMapping() {
      // longName shoudl follow the 
      // `org.nutz.walnut.util.WnPagerObj`
      // generated by `WnPager.toPagerObj`
      if ("longName" == this.valueType) {
        return {
          pn: "pageNumber",
          pgsz: "pageSize",
          pgc: "pageCount",
          sum: "totalCount",
          count: "count",
          skip: "skip",
          limit: "limit"
        }
      }
    },
    //--------------------------------------
    PageValue() {
      if (this.PageMapping) {
        return Ti.Util.translate(this.value, this.PageMapping)
      }
      return this.value
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  methods: {
    //--------------------------------------
    notifyChange(page = {}) {
      // Guard
      if (_.isEmpty(page))
        return

      if (this.PageMapping) {
        let rever = Ti.Util.reverMapping(this.PageMapping)
        page = Ti.Util.translate(page, rever)
      }

      this.$notify("change", page)
    }
  }
  ///////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-wall.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/wall/ti-wall.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////
  provide: function () {
    return {
      "$wall": this
    }
  },
  //////////////////////////////////////////
  data: () => ({
    myData: [],

    myColCount: 0,
    myColWidth: 0,
    isOnlyOneRow: false,

    myCellsReport: {},
    myNeedResize: true
  }),
  //////////////////////////////////////////
  props: {
    "itemClassName": undefined,
    "display": {
      type: [Object, String],
      default: () => ({
        key: "..",
        comType: "ti-label"
      })
    },
    "border": {
      type: Boolean,
      default: true
    },
    // aspect: list item spacing
    // `no|xs|sm|md|lg|xl`
    "spacing": {
      type: String,
      default: "sm"
    },
    // Wall-Tile width
    "itemWidth": {
      type: [String, Number],
      default: null
    },
    // Wall-Tile height
    "itemHeight": {
      type: [String, Number],
      default: null
    },
    "resizeDelay": {
      type: Number,
      default: 0
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-hoverable": this.hoverable,
        "show-border": this.border,
        "is-only-one-row": this.isOnlyOneRow,
        "is-multi-rows": !this.isOnlyOneRow
      }, [
        `spacing-${this.spacing}`
      ])
    },
    //--------------------------------------
    ItemDisplay() {
      return this.evalFieldDisplayItem(this.display)
    },
    //--------------------------------------
    TheData() {
      return this.myData
    },
    //--------------------------------------
    ListRealCount() {
      return this.TheData.length
    },
    //--------------------------------------
    BlankCols() {
      let list = []
      if (!_.isEmpty(this.TheData)
        && this.myColCount > 0
        && this.myColWidth > 1
        && !this.isOnlyOneRow) {
        // get list real count
        let n = this.ListRealCount % this.myColCount
        if (n > 0) {
          let nr = this.myColCount - n
          for (let i = 0; i < nr; i++) {
            list.push({
              width: `${this.myColWidth}px`
            })
          }
        }
      }
      //console.log(list)
      return list
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnClickTop($event) {
      if (this.cancelable) {
        // Click The body or top to cancel the row selection
        if (Ti.Dom.is($event.target, '.ti-wall, .wall-tile, .wall-con')
          || Ti.Dom.closest($event.target, ".ti-loading")) {
          this.cancelRow()
        }
      }
    },
    //--------------------------------------
    OnScroll() {
      this.pendingMoreWhenScrolling({
        $view: this.$el,
        $more: this.$refs.more,
        $moreBtn: this.$refs.moreBtn
      })
    },
    //--------------------------------------
    OnWallResize() {
      let $divs = Ti.Dom.findAll(".wall-con > .wall-tile", this.$el)
      // Guard empty
      if (_.isEmpty($divs))
        return
      // Eval the cols and width
      //console.log("  ~~~ do", this.data)
      let cols = 0
      let width = 1
      let top = undefined
      let isOnlyOneRow = true
      for (let $div of $divs) {
        let rect = $div.getBoundingClientRect()
        if (_.isUndefined(top)) {
          top = rect.top
        }
        if (top == rect.top) {
          cols++
          width = Math.max(rect.width, width)
        }
        // Find the next row
        else {
          isOnlyOneRow = false
          break
        }
      }
      //console.log({cols, width, top})
      if (width > 1) {
        this.myColCount = cols
        this.myColWidth = width
        this.isOnlyOneRow = isOnlyOneRow
      }
    },
    //--------------------------------------
    reportReady(rowIndex = -1, isDone = false) {
      let key = `R${rowIndex}`
      //console.log(key, isDone)
      if (isDone) {
        delete this.myCellsReport[key]
      } else {
        this.myCellsReport[key] = false
        this.myNeedResize = true
      }
      // Check the status
      if (isDone) {
        _.delay(() => {
          let allReady = _.isEmpty(this.myCellsReport)
          // Do resize
          if (allReady && this.myNeedResize) {
            _.delay(() => {
              this.OnWallResize()
            }, this.resizeDelay)
            this.myNeedResize = false
          }
        })
      }
    },
    //--------------------------------------
    async evalListData(newVal, oldVal) {
      //let isSame = _.isEqual(newVal, oldVal)
      //if (!isSame) {
      //console.log("!!!wall data changed", {newVal, oldVal})
      this.myData = await this.evalData()
      //}
      this.OnWallResize()
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "data": {
      handler: "evalListDataWhenMarkChanged",
      immediate: true
    },
    "dict": {
      handler: "evalListDataWhenMarkChanged",
      immediate: true
    },
    "selectable": "evalListDataWhenMarkChanged",
    "checkable": "evalListDataWhenMarkChanged",
    "hoverable": "evalListDataWhenMarkChanged",
    "filterValue": "evalListDataWhenMarkChanged"
  },
  //////////////////////////////////////////
  mounted: function () {
    //.................................
    Ti.Viewport.watch(this, {
      resize: _.debounce(() => this.OnWallResize(), 20)
    })
    //.................................
  },
  //////////////////////////////////////////
  destroyed: function () {
    Ti.Viewport.unwatch(this)
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-th-files-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/th/files/wn-th-files-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "data": {
    type: Object,
    default: () => ({
      list: [],
      pager: {}
    })
  },
  "currentId": {
    type: String
  },
  "checkedIds": {
    type: Object,
    default: () => ({})
  },
  "dirName": {
    type: String,
    default: undefined
  },
  "dataHome": {
    type: String,
    default: undefined
  },
  "status": {
    type: Object,
    default: () => ({})
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "files": {
    type: Object,
    default: undefined
  },
  "preview": {
    type: Object,
    default: undefined
  },
  "previewEdit": {
    type: Object,
    default: undefined
  },
  "actions": {
    type: Array,
    default: () => [{
      "name": "reloading",
      "type": "action",
      "icon": "zmdi-refresh",
      "tip": "i18n:refresh",
      "altDisplay": {
        "icon": "zmdi-refresh zmdi-hc-spin"
      },
      "action": "$parent:reloadData"
    }, {
      "type": "line"
    }, {
      "name": "deleting",
      "type": "action",
      "icon": "zmdi-delete",
      "text": "i18n:del",
      "altDisplay": {
        "icon": "zmdi-refresh zmdi-hc-spin",
        "text": "i18n:del-ing"
      },
      "action": "$parent:doDeleteSelected"
    }, {
      "type": "line"
    }, {
      "name": "upload",
      "type": "action",
      "icon": "zmdi-cloud-upload",
      "text": "i18n:upload",
      //"action" : "commit:main/files/showUploadFilePicker"
      "action": "$parent:doUploadFiles"
    }]
  },
  "stateLocalKey": {
    type: String,
    default: null
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "dirNameTip": {
    type: String,
    default: undefined
    //default : "i18n:thing-files"
  },
  "dirNameComType": {
    type: String,
    default: "ti-droplist"
  },
  "dirNameOptions": {
    type: Array,
    default: () => [{
      icon: "zmdi-collection-image",
      text: "i18n:media",
      value: "media"
    }, {
      icon: "zmdi-attachment-alt",
      text: "i18n:attachment",
      value: "attachment"
    }]
  },
  "nilIcon": {
    type: String,
    default: "fas-braille"
  },
  "nilText": {
    type: String,
    default: null
  }
  //-----------------------------------
  // Measure
  //-----------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-transfer.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/transfer/wn-transfer.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////////
  data : ()=>({
    
  }),
  ///////////////////////////////////////////////////////
  props : {
    "itemBy" : {
      type : [String, Function],
      default : undefined
    },
    "findBy" : {
      type : [String, Function],
      default : undefined
    }
  },
  ///////////////////////////////////////////////////////
  computed : {
    //---------------------------------------------------
    TheCanComType() {
      return this.canComType || "wn-list"
    },
    //---------------------------------------------------
    TheSelComType() {
      return this.selComType || "wn-list"
    },
    //------------------------------------------------
    TheDisplay() {
      return this.display || ["@<thumb>", "title", "nm"]
    },
    //---------------------------------------------------
    OptionsDict() {
      return Wn.Dict.evalOptionsDict(this)
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////

  ///////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'hm-react-item.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/hm/react/item/hm-react-item.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  props: {
    //------------------------------------------------
    // Data
    //------------------------------------------------
    "data": {
      type: Object
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    FormData() {
      return this.data
    },
    //------------------------------------------------
    FormFields() {
      return [
        {
          "title": "名称",
          "name": "name",
          "fieldWidth": "100%",
          "colSpan": 4,
          "comType": "TiInput",
          "comConf": {
            "placeholder": "请输入执行项名称"
          }
        },
        {
          "title": "图标",
          "name": "icon",
          "comType": "TiInputIcon"
        },
        {
          "title": "重载默认",
          "name": "override",
          "type": "Boolean",
          "tip": "覆盖【基础流程】同名执行项",
          "nameVAlign": "top",
          "colSpan": 2,
          "comType": "TiToggle"
        },
        {
          "title": "执行变量",
          "name": "vars",
          "type": "Object",
          "fieldWidth": "100%",
          "nameVAlign":"top",
          "colSpan": 4,
          "comType": "TiInputPair",
          "comConf": {
            "placeholder": "每个动作的扩展上下文变量JSON",
            "valueComType": "TiInputDval",
            "valueComConf": {
              "hideBorder": true,
              "autoJsValue": true,
              "autoSelect": true
            }
          }
        },
        {
          "title": "前置条件"
        },
        {
          "name": "test",
          "type": "Array",
          "fieldWidth": "100%",
          "colSpan": 4,
          "comType": "HmAutomatch",
          "comConf": {}
        },
        {
          "title": "执行动作列表"
        },
        {
          "name": "actions",
          "type": "Array",
          "fieldWidth": "100%",
          "colSpan": 4,
          "comType": "HmReactActions",
          "comConf": {

          }
        },
      ]
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-form.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/form/ti-form.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////////////////
  model: {
    prop: "data",
    event: "change"
  },
  //////////////////////////////////////////////////////
  data: () => ({
    myKeysInFields: [],
    currentTabIndex: 0,
    isEvalMeasure: false,
    myFormFields: [],
    myFormFieldMap: {},
    myFormColumHint: -1
  }),
  //////////////////////////////////////////////////////
  computed: {
    //--------------------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-tab-mode": this.isTabMode,
        "is-all-mode": this.isAllMode,
        [`tab-at-${this.tabAt}`]: this.isTabMode,
        [`tab-at-${this.TheTabAtX}`]: this.isTabMode,
        [`tab-at-${this.TheTabAtY}`]: this.isTabMode
      },
        `as-${this.ViewDisplayMode}`,
        `as-spacing-${this.spacing || "comfy"}`,
        `field-border-${this.fieldBorder}`
      )
    },
    //--------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height,
        visibility: this.isEvalMeasure ? "hidden" : "initial"
      })
    },
    //--------------------------------------------------
    FormColumnGrid() {
      if (this.autoColummGrid) {
        if (_.isBoolean(this.autoColummGrid)) {
          return [
            320,     // col-0
            720,     // col-1
            1200,    // col-2
            1600,    // col-3
          ]
        }
        return this.autoColummGrid
      }
    },
    //--------------------------------------------------
    ViewDisplayMode() {
      if (!this.screenMode || "auto" == this.screenMode) {
        return this.viewportMode || "desktop"
      }
      return this.screenMode
    },
    //--------------------------------------------------
    hasHeader() {
      return this.title || this.icon ? true : false
    },
    //--------------------------------------------------
    hasData() {
      return !Ti.Util.isNil(this.data)
    },
    //--------------------------------------------------
    isTabMode() { return 'tab' == this.mode },
    isAllMode() { return 'all' == (this.mode || "all") },
    isAutoShowBlank() { return Ti.Util.fallback(this.autoShowBlank, false) },
    //--------------------------------------------------
    TheTabAt() { return this.tabAt.split("-") },
    TheTabAtX() { return this.TheTabAt[1] },
    TheTabAtY() { return this.TheTabAt[0] },
    //--------------------------------------------------
    TabList() {
      let list = []
      let otherFields = []
      if (this.isTabMode) {
        for (let fld of this.myFormFields) {
          if (fld.type == "Group") {
            list.push(fld)
          }
          // Collect to others
          else {
            otherFields.push(fld)
          }
        }
        // Join others
        if (!_.isEmpty(otherFields)) {
          list.push({
            type: "Group",
            title: "i18n:others",
            fields: otherFields
          })
        }
      }
      return list;
    },
    //--------------------------------------------------
    // add "current" to theTabList
    TabItems() {
      let items = []
      let maxTabIndex = this.TabList.length - 1
      let currentIndex = Math.min(maxTabIndex, this.currentTabIndex)
      _.forEach(this.TabList, (li, index) => {
        let isCurrent = (index == currentIndex)
        items.push(_.assign({}, li, {
          index, isCurrent, className: Ti.Css.mergeClassName({
            "is-current": isCurrent
          }, li.className)
        }))
      })
      return items
    },
    //--------------------------------------------------
    CurrentTab() {
      for (let tab of this.TabItems) {
        if (tab.isCurrent) {
          return tab
        }
      }
    },
    //--------------------------------------------------
    FormBodyClass() {
      if (this.isTabMode && this.CurrentTab) {
        return Ti.Css.mergeClassName(
          this.bodyClass,
          `has-${this.FieldsInCurrentTab.length}-fields`,
          `tab-body-${this.CurrentTab.index}`,
          this.CurrentTab.className
        )
      }
      return Ti.Css.mergeClassName(
        this.bodyClass,
        `has-${this.FieldsInCurrentTab.length}-fields`,
        {
          [`col-${this.myFormColumHint}`]: this.myFormColumHint >= 0
        }
      )
    },
    //--------------------------------------------------
    FormBodyStyle() {
      if (this.bodyStyle) {
        return this.bodyStyle
      }
    },
    //--------------------------------------------------
    FieldsInCurrentTab() {
      // Current Tab
      if (this.isTabMode) {
        if (this.CurrentTab) {
          return this.CurrentTab.fields || []
        }
        return []
      }
      // Show All
      else {
        return this.myFormFields
      }
    },
    //--------------------------------------------------
    FormLinkFields() {
      let re = {}
      _.forEach(this.linkFields, (val, key) => {
        // By dict
        if (val && val.dict && val.target) {
          let { dict, target } = val
          // Guard
          if (!target) {
            return
          }
          // Get dict
          let { name, dynamic, dictKey } = Ti.DictFactory.explainDictName(dict)
          //.......................................................
          let getItemFromDict = async function (value, data) {
            let d;
            // Dynamic
            if (dynamic) {
              let key = _.get(data, dictKey)
              let vars = Ti.Util.explainObj(data, val.dictVars || {})
              d = Ti.DictFactory.GetDynamicDict({ name, key, vars })
            }
            // Static Dictionary
            else {
              d = Ti.DictFactory.CheckDict(name)
            }
            // Get item data
            if (d) {
              // Multi value
              if (_.isArray(value)) {
                let list = []
                for (let v of value) {
                  let v2 = await d.getItem(v)
                  list.push(v2)
                }
                return list
              }
              // Single value
              return await d.getItem(value)
            }
          }
          //.......................................................
          let fn;
          //.......................................................
          // Pick
          if (_.isArray(target)) {
            fn = async function ({ value }, data) {
              let it = await getItemFromDict(value, data)
              return _.pick(it, target)
            }
          }
          // Explain target
          else if (val.explainTargetAs) {
            fn = async function ({ value, name }, data) {
              let it = await getItemFromDict(value, data)
              let ctx = _.assign({}, data, {
                [val.explainTargetAs]: it
              })
              let newVal = Ti.Util.explainObj(ctx, target)
              //console.log(name, value, "->", newVal)
              return newVal
            }
          }
          // Simple Translate
          else {
            fn = async function ({ value }, data) {
              let it = await getItemFromDict(value, data)
              return Ti.Util.translate(it, target, v => Ti.Util.fallback(v, null))
            }
          }
          // join to map
          re[key] = fn
        }
        // Statice value
        else if (val && val.target) {
          re[key] = ({ name, value }, data) => {
            let tc = _.assign({}, { "$update": { name, value } }, data)
            if (val.test && !Ti.AutoMatch.test(val.test, tc)) {
              return
            }
            return Ti.Util.explainObj(data, val.target)
          }
        }
        // Customized Function
        else if (_.isFunction(val)) {
          re[key] = val
        }
      })
      return re
    },
    //--------------------------------------------------
    /***
     * Eval function set for `transformer|serializer` of each fields
     * 
     * Defaultly, it will support the function set defined in `Ti.Types`
     */
    // FuncSet() {
    //   return _.assign({}, Ti.GlobalFuncs(), this.extendFunctionSet)
    // },
    //--------------------------------------------------
    TheData() {
      if (this.data) {
        let re = this.data
        if (this.onlyFields) {
          re = _.pick(re, this.myKeysInFields)
        }
        if (this.omitHiddenFields) {
          re = _.omitBy(re, (v, k) => {
            if (this.myFormFieldMap[k]) {
              return false
            }
            return true
          })
        }
        return re
      }
      return {}
    }
    //--------------------------------------------------
  },
  //////////////////////////////////////////////////////
  methods: {
    //--------------------------------------------------
    OnClickTab(tab) {
      //console.log("OnClickTab", tab)
      this.isEvalMeasure = this.currentTabIndex != tab.index
      this.currentTabIndex = tab.index
      this.$notify("tab:change", tab)
    },
    //--------------------------------------------------
    async OnFieldChange({ name, value } = {}) {
      // Notify at first
      //console.log("notify field", {name, value})
      this.$notify("field:change", { name, value })

      // Link fields
      let linkFunc = this.FormLinkFields[name]
      let obj;
      if (linkFunc) {
        obj = await linkFunc({ name, value }, this.data)
        if (!_.isEmpty(obj)) {
          _.forEach(obj, (v, k) => {
            this.$notify("field:change", { name: k, value: v })
          })
        }
      }

      // Notify later ...
      // Wait for a tick to give a chance to parent of 'data' updating
      this.$nextTick(() => {
        //console.log("notify data")
        let data = this.getData({ name, value })
        _.assign(data, obj)
        this.$notify("change", data)
      })
    },
    //--------------------------------------
    getData({ name, value } = {}) {
      let data = _.cloneDeep(this.TheData)
      //console.log("GetData:", data)

      // Signle value
      if (name && _.isString(name)) {
        // Whole data
        if (".." == name) {
          _.assign(data, value)
        }
        // Statci value
        else if (/^'[^']+'$/.test(name)) {
          return
        }
        // Dynamic value
        else {
          if (_.isUndefined(value)) {
            data = _.omit(data, name)
          } else if (name.startsWith(".")) {
            data[name] = value
          } else {
            _.set(data, name, value)
          }
        }
      }
      // Object
      else if (_.isArray(name)) {
        let omitKeys = []
        for (let k of name) {
          let v = _.get(value, k)
          if (_.isUndefined(v)) {
            omitKeys.push(k)
          } else {
            _.set(data, k, v)
          }
        }
        if (omitKeys.length > 0) {
          data = _.omit(data, omitKeys)
        }
      }

      // Join the fixed data
      if (this.fixed) {
        _.assign(data, fixed)
      }
      return data
    },
    //--------------------------------------
    isGroup(fld) {
      return "Group" == fld.type || _.isArray(fld.fields)
    },
    //--------------------------------------------------
    isLabel(fld) {
      return "Label" == fld.type || !fld.name
    },
    //--------------------------------------------------
    evalFormFieldList() {
      let list = []
      let keys = []
      let fmap = {}
      this.isEvalMeasure = true
      //................................................
      _.forEach(this.fields, (fld, index) => {
        let fld2 = this.evalFormField(fld, [index])
        if (fld2) {
          list.push(fld2)
          let fKeys = _.concat(fld2.name)
          for (let fk of fKeys) {
            fmap[fk] = fld2
          }
        }
        // Gather keys
        keys.push(fld.name)
        // Join sub-group keys
        _.forEach(fld.fields, ({ name }) => {
          if (name) {
            keys.push(name)
          }
        })
      })
      //................................................
      this.myKeysInFields = _.flattenDeep(keys)
      //................................................
      this.myFormFields = list
      this.myFormFieldMap = fmap
      //................................................
      this.__adjust_fields_width()
    },
    //--------------------------------------------------
    evalFormField(fld = {}, nbs = []) {
      // Get form field visibility
      let { hidden, disabled } = Ti.Types.getFormFieldVisibility(fld, this.data)
      if (hidden) {
        return
      }

      let maxColumnHint = Ti.Util.fallback(fld.maxColumnHint, this.maxColumnHint, 3)
      let columnHint = Math.min(maxColumnHint, this.myFormColumHint)

      // The key
      let fldKey = Ti.Util.anyKey(fld.name || nbs, "ti-fld")
      // let fldKey = fld.name
      //   ? [].concat(fld.name).join("-")
      //   : "ti-fld-" + nbs.join("-")
      //............................................
      // For group
      if (this.isGroup(fld)) {
        let group = {
          disabled,
          type: "Group",
          key: fldKey,
          className: Ti.Css.mergeClassName(fld.className, this.defaultGroupClass, {
            [`col-${columnHint}`]: columnHint >= 0
          }),
          icon: fld.icon,
          title: fld.title,
          fields: []
        }
        // Group fields
        _.forEach(fld.fields, (subfld, index) => {
          let newSubFld = this.evalFormField(subfld, [...nbs, index])
          if (newSubFld) {
            group.fields.push(newSubFld)
          }
        })
        // Done
        return _.isEmpty(group.fields) ? null : group
      }
      //............................................
      // Label
      if (this.isLabel(fld)) {
        return {
          disabled,
          type: "Label",
          key: fldKey,
          className: Ti.Css.mergeClassName(fld.className),
          icon: fld.icon,
          title: fld.title
        }
      }
      //............................................
      // For Normal Field
      if (fld.name) {
        let field = _.defaults(_.omit(fld, "disabled"), {
          type: this.defaultFieldType || "String",
          className: Ti.Css.mergeClassName(fld.className, {
            "as-narrow": columnHint == 0,
            "as-wide": columnHint > 0,
          }),
          comType: this.defaultComType || "TiLabel",
          disabled
        })

        // The UniqKey of field
        field.uniqKey = _.concat(field.name).join("-")
        //console.log(field.uniqKey)

        // // field status
        // let fStatus = _.get(this.fieldStatus, funiqKey)
        // if(fStatus) {
        //   field.status  = fStatus.status
        //   field.message = fStatus.message
        // }

        // Default
        if (!field.serializer) {
          let fnName = Ti.Types.getFuncByType(field.type || "String", "serializer")
          field.serializer = `Ti.Types.${fnName}`
        }
        if (!field.transformer) {
          let fnName = Ti.Types.getFuncByType(field.type || "String", "transformer")
          field.transformer = `Ti.Types.${fnName}`
        }

        // Tidy form function
        const invokeOpt = {
          context: this,
          partial: "right"
        }
        field.serializer = Ti.Util.genInvoking(field.serializer, invokeOpt)
        field.transformer = Ti.Util.genInvoking(field.transformer, invokeOpt)
        if (fld.required) {
          if (_.isBoolean(fld.required)) {
            field.required = true
          } else {
            field.required = Ti.AutoMatch.test(fld.required, this.data)
          }
        }

        // Done
        return field
      }
    },
    //--------------------------------------------------
    evalCoumnHint() {
      // Guard
      if (!_.isElement(this.$el))
        return
      if (this.FormColumnGrid) {
        let { width } = Ti.Rects.createBy(this.$el)
        let i = 0
        for (; i < this.FormColumnGrid.length; i++) {
          let hintW = this.FormColumnGrid[i]
          if (width > hintW) {
            continue;
          }
          break
        }
        this.myFormColumHint = Math.min(this.maxColumnHint, i)
        // console.log("evalCoumnHint", {
        //   width, hint: this.myFormColumHint,
        //   max: this.maxColumnHint,
        //   i
        // })
      }
    },
    //--------------------------------------------------
    __adjust_fields_width() {
      // Guard
      if (!_.isElement(this.$el))
        return

      this.isEvalMeasure = true
      //console.log("__adjust_fields_width")
      //
      // Find the max width in all form
      //
      // Find all field-name Elements
      let $fldNames = Ti.Dom.findAll(".form-field > .field-name", this.$el)
      let $grps = Ti.Dom.findAll('[fld-name-max-width]', this.$el)
      if (!_.isEmpty($grps)) {
        for (let $grp of $grps) {
          $grp.removeAttribute("fld-name-max-width")
        }
      }

      // Reset them to org-width
      for (let $fldnm of $fldNames) {
        Ti.Dom.setStyle($fldnm, { width: "" })
      }

      // Get the max-width of them
      let maxWidth = 0
      for (let $fldnm of $fldNames) {
        let rect = Ti.Rects.createBy($fldnm)
        //
        // Only one column
        if (this.myFormColumHint >= 0 && this.myFormColumHint <= 1) {
          maxWidth = Math.ceil(Math.max(rect.width, maxWidth))
          continue;
        }
        // If in vertical group
        let $pp = $fldnm.parentElement.parentElement.parentElement
        if (Ti.Dom.hasClass($pp, "form-group")
          && Ti.Dom.hasOneClass($pp, "as-columns", "as-vertical")
        ) {
          let maxw = $pp.getAttribute("fld-name-max-width") * 1 || 0
          maxw = Math.max(maxw, rect.width)
          $pp.setAttribute("fld-name-max-width", maxw)
        }
        // for whole form
        else {
          maxWidth = Math.ceil(Math.max(rect.width, maxWidth))
        }
      }



      // Wait for whole view rendered, and align the field-name
      for (let $fldnm of $fldNames) {
        // If in group
        let $pp = $fldnm.parentElement.parentElement.parentElement
        let maxw = $pp.getAttribute("fld-name-max-width")
        if (maxw) {
          Ti.Dom.setStyle($fldnm, { width: maxw * 1 })
        }
        // For whole form
        else {
          Ti.Dom.setStyle($fldnm, { width: maxWidth })
        }
      }

      this.$nextTick(() => {
        this.isEvalMeasure = false
      })
    },
    //--------------------------------------------------
    adjustFieldsWidth(delay = this.adjustDelay) {
      //console.log("adjustFieldsWidth", {hint: this.myFormColumHint})
      if (delay > 0) {
        _.delay(() => {
          this.__adjust_fields_width()
        }, delay)
      } else {
        this.$nextTick(() => {
          this.__adjust_fields_width()
        })
      }
    },
    //--------------------------------------------------
    // Callback
    //--------------------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("ti-form", uniqKey)
      if ("ENTER" == uniqKey) {
        // It should wait a while before submit
        // <ti-input> will apply change at @change event
        // And the @change event will be fired when ENTER 
        // bubble fade away
        _.delay(() => {
          this.$notify("submit")
        }, 100)
      }
    }
    //--------------------------------------------------
  },
  //////////////////////////////////////////////////////
  watch: {
    "data": function (newVal, oldVal) {
      if (!oldVal || !_.isEqual(newVal, oldVal)) {
        this.evalFormFieldList();
        this.adjustFieldsWidth()
      }
    },
    "fields": function (newVal, oldVal) {
      if (!oldVal || !_.isEqual(newVal, oldVal)) {
        this.evalFormFieldList();
        this.adjustFieldsWidth()
      }
    },
    "currentTab": function (index) {
      this.currentTabIndex = index
    },
    "currentTabIndex": function (index) {
      //console.log("currentTabIndex changed to", index)
      if (this.keepTabIndexBy) {
        Ti.Storage.session.set(this.keepTabIndexBy, index)
      }
      this.adjustFieldsWidth()
      this.isEvalMeasure = false
    },
    "myFormColumHint": function (newVal, oldVal) {
      if (newVal != oldVal) {
        this.adjustFieldsWidth()
      }
    }
  },
  //////////////////////////////////////////////////////
  created: function () {
    this.__debounce_adjust_fields = _.debounce(() => {
      this.evalCoumnHint()
      this.evalFormFieldList()
    }, 500)
  },
  //////////////////////////////////////////////////////
  mounted: function () {
    //--------------------------------------------------
    this.currentTabIndex =
      Ti.Storage.session.getInt(
        this.keepTabIndexBy, this.currentTab
      )
    //--------------------------------------------------
    Ti.Viewport.watch(this, {
      resize: () => {
        this.__debounce_adjust_fields()
      }
    })
    //--------------------------------------------------
    this.evalCoumnHint();
    this.evalFormFieldList();
    //--------------------------------------------------
    this.$nextTick(() => {
      this.__adjust_fields_width()
      _.delay(() => {
        this.evalCoumnHint()
        this.evalFormFieldList()
      }, this.adjustDelay)
    })
    //--------------------------------------------------
  },
  //////////////////////////////////////////////////////
  beforeDestroy: function () {
    Ti.Viewport.unwatch(this)
  }
  //////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-table-quick-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/table/quick/ti-table-quick-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "data" : {
    type : Array,
    default : ()=>[]
  },
  "idBy" : {
    type : [String, Function],
    default : "id"
  },
  "currentId" : {
    type : [String, Number],
    default : null
  },
  "checkedIds" : {
    type : [Array, Object],
    default : ()=>[]
  },
  "changedId" : {
    type : String,
    default : null
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "fields" : {
    type : Array,
    default : ()=>[]
  },
  "multi" : {
    type : Boolean,
    default : false
  },
  "autoCheckCurrent" : {
    type : Boolean,
    default : true
  },
  "checkable" : {
    type : Boolean,
    default : false
  },
  "selectable" : {
    type : Boolean,
    default : true
  },
  "openable" : {
    type : Boolean,
    default : true
  },
  "cancelable" : {
    type : Boolean,
    default : true
  },
  "hoverable" : {
    type : Boolean,
    default : false
  },
  "autoCheckCurrent" : {
    type : Boolean,
    default : true
  },
  "onSelect": {
    type : Function,
    default: undefined
  },
  "onOpen": {
    type : Function,
    default: undefined
  },
  "notifySelectName": {
    type : String,
    default: "select"
  },
  "notifyOpenName": {
    type : String,
    default: "open"
  },
  //-----------------------------------
  // Callback
  //-----------------------------------
  "onSelect": {
    type : Function,
    default: undefined
  },
  "onOpen": {
    type : Function,
    default: undefined
  },
  "onBeforeChangeSelect" : {
    type : Function,
    default: undefined
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "blankAs" : {
    type : Object,
    default : ()=>({
      default: "as-big-mask",
      icon : "far-list-alt",
      text : "empty-data"
    })
  },
  "rowNumberBase" : {
    type : Number,
    default : undefined
  },
  "border" : {
    type : String,
    default : "cell",
    validator : v => /^(row|column|cell|none)$/.test(v)
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width" : {
    type : [Number, String],
    default : undefined
  },
  "height" : {
    type : [Number, String],
    default : undefined
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-toggle.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/toggle/ti-toggle.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data: () => ({
    isOn: false
  }),
  /////////////////////////////////////////
  props: {
    "value": false,
    "readonly": false,
    "options": {
      type: Array,
      default: () => [false, true]
    }
  },
  //////////////////////////////////////////
  computed: {
    //......................................
    topClass() {
      return Ti.Css.mergeClassName({
        "is-off": !this.isOn,
        "is-on": this.isOn
      }, this.className)
    }
    //......................................
  },
  //////////////////////////////////////////
  methods: {
    onClick() {
      if (!this.readonly) {
        let v = this.isOn ? 0 : 1
        this.$notify("change", this.options[v])
      }
    }
  },
  //////////////////////////////////////////
  watch: {
    "value": function () {
      if (_.isArray(this.options) && this.options.length >= 2) {
        this.isOn = this.value === this.options[1];
      } else {
        this.isOn = this.value ? true : false
      }
    }
  },
  //////////////////////////////////////////
  mounted: function () {
    this.isOn = this.value ? true : false
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'm-thing-export.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/thing/m-thing-export.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //--------------------------------------------
  async openExportDataDir({state}, target) {
    let meta = state.meta
    let taDir = target || `id:${meta.id}/export_data`
    console.log(taDir)
    let oDir = await Wn.Io.loadMeta(taDir)
    let link = Wn.Util.getAppLink(oDir)

    await Ti.Be.Open(link.url, {params:link.params})
  },
  //--------------------------------------------
  async exportDataByModes({dispatch}, mode="csv;xls;json;zip") {
    await dispatch("exportData", {mode})
  },
  //--------------------------------------------
  //
  // Export to csv or excel
  //
  //--------------------------------------------
  async exportData({state, getters}, {
    target, 
    mode="csv;xls;json;zip",
    page="current;all",
    name="${title|nm}-${time}",
    mappingDir="id:${id}/export/"
  }={}) {
    let meta = state.meta
    let cmds = [`thing id:${meta.id} query -cqn`]
    //............................................
    let taDir = target || `id:${meta.id}/export_data`
    //............................................
    // Eval Sorter
    if(!_.isEmpty(state.sorter)) {
      let sort = JSON.stringify(state.sorter)
      cmds.push(`-sort '${sort}'`)
    }
    //............................................
    let fltInput = getters["search/filterStr"]
    //............................................
    // Eval default export name
    let exportName = Ti.S.renderBy(name, {
      ... meta,
      time : Ti.DateTime.format(new Date(), 'yyyy-MM-dd_HHmmss')
    })
    exportName = Ti.I18n.text(exportName)
    //............................................
    // Try load export mapping template
    let phMappingDir = Ti.S.renderBy(mappingDir, meta)
    let oMappingDir = await Wn.Io.loadMeta(phMappingDir)
    let oMapplingItems = []
    if(oMappingDir) {
      oMapplingItems = (await Wn.Io.loadChildren(oMappingDir)).list;
    }
    //............................................
    // Prepare the result
    let result = {
      mode : "csv",
      page : "current",
      name : exportName,
      expiIn : 3,
      fltInput,
      cmdText : undefined,
      outPath : undefined,
      target : undefined
    }
    //............................................
    // Eval modes options
    let modeNames = mode.split(";")
    let modeMap = {
      csv  : {value: "csv",  text: "i18n:thing-export-c-mode-csv"},
      xls  : {value: "xls",  text: "i18n:thing-export-c-mode-xls"},
      json : {value: "json", text: "i18n:thing-export-c-mode-json"},
      zip  : {value: "zip",  text: "i18n:thing-export-c-mode-zip"}
    }
    let modeOptions = []
    _.forEach(modeNames, nm => {
      if(modeMap[nm])
        modeOptions.push(modeMap[nm])
    })
    result.mode = _.first(modeOptions).value
    //............................................
    // Eval page options
    let pageModes = page.split(";")
    let pageMap = {
      current: {value: "current",  text: "i18n:thing-export-c-page-current"},
      all    : {value: "all",      text: "i18n:thing-export-c-page-all"}
    }
    let pageOptions = []
    _.forEach(pageModes, md => {
      if(pageMap[md])
      pageOptions.push(pageMap[md])
    })
    result.page = _.first(pageOptions).value
    //............................................
    // Make the config form fields
    let formFields = [];
    formFields.push({
      title : "i18n:thing-export-c-mode",
      name : "mode",
      comType : "TiSwitcher",
      comConf : {
        allowEmpty: false,
        options: modeOptions
      }
    })
    if(!_.isEmpty(oMapplingItems)) {
      result.mapping = _.first(oMapplingItems).id
      formFields.push({
        title : "i18n:thing-export-c-mapping",
        name : "mapping",
        comType : "TiDroplist",
        comConf : {
          options : oMapplingItems,
          iconBy  : "icon",
          valueBy : "id",
          textBy  : "title|nm",
          dropDisplay: ['<icon:zmdi-book>', 'title|nm']
        }
      })
    }
    formFields.push({
      title : "i18n:thing-export-c-page",
      name : "page", 
      comType : "TiSwitcher",
      comConf : {
        allowEmpty: false,
        options: pageOptions
      }
    })
    formFields.push({
      title : "i18n:thing-export-c-name",
      name : "name", 
      comType : "TiInput",
      comConf : {
      }
    })
    formFields.push({
      title : "i18n:thing-export-c-expi",
      name : "expiIn", 
      comType : "TiSwitcher",
      comConf : {
        allowEmpty: false,
        options: [
          {value: 3,  text: "i18n:thing-export-c-expi-3d"},
          {value: 7,  text: "i18n:thing-export-c-expi-7d"},
          {value: 14, text: "i18n:thing-export-c-expi-14d"},
          {value: 0,  text: "i18n:thing-export-c-expi-off"}
        ]
      }
    })
    //............................................
    // Open the dialog to collection user selection
    await Ti.App.Open({
      title  : "i18n:export-data",
      width  : 640,
      height : 640,
      position : "top",
      textOk: null, textCancel: null,
      result,
      comType : "TiWizard",
      comConf : {
        style : {
          padding: ".5em"
        },
        steps : [{
          title : "i18n:thing-export-setup",
          comType : "TiForm",
          comConf : {
            data : ":=..",
            fields : formFields
          },
          prev : false,
          next : {
            enabled : {
              name : "![BLANK]"
            },
            handler : function() {
              let outPath = `${taDir}/${this.value.name}.${this.value.mode}`
              // Join pager
              if("current" == this.value.page) {
                let limit = state.search.pager.pgsz
                let skip  = state.search.pager.pgsz * (state.search.pager.pn - 1)
                cmds.push(`-limit ${limit}`)
                cmds.push(`-skip  ${skip}`)
              }

              // Join the export 
              cmds.push('|', 'sheet -process "${P} : ${id} : ${title} : ${nm}"')
              cmds.push("-tpo " + this.value.mode)
              // Mapping
              if(this.value.mapping) {
                cmds.push(`-mapping id:${this.value.mapping}`)
              }

              cmds.push(`-out '${outPath}';\n`)

              // expi time
              if(this.value.expiIn > 0) {
                cmds.push(`obj ${outPath} -u 'expi:"%ms:now+${this.value.expiIn}d"';`)
              }

              // Join command
              let cmdText = cmds.join(" ")

              // Confirm change
              this.$notify("change", {
                ...this.value,
                outPath,
                cmdText
              })

              // Go to run command
              this.gotoFromCurrent(1)
            }
          }
        }, {
          title : "i18n:thing-export-ing",
          comType : "WnCmdPanel",
          comConf : {
            value : ":=cmdText",
            input : fltInput,
            tipText : "i18n:thing-export-ing-tip",
            tipIcon : "fas-bullhorn",
            emitName : "step:change",
            emitPayload : "%next"
          },
          prev : false,
          next : false
        }, {
          title : "i18n:thing-export-done",
          prepare : async function(){
            let oTa = await Wn.Io.loadMeta(this.value.outPath)
            this.$notify("change", {
              ... this.value,
              target : oTa
            })
          },
          comType : "WebMetaBadge",
          comConf : {
            className : "is-success",
            value : ":=target",
            icon  : "fas-check-circle",
            title : "i18n:thing-export-done-ok",
            brief : "i18n:thing-export-done-tip",
            links : [{
              icon : "fas-download",
              text : ":=target.nm",
              href : ":->/o/content?str=id:${target.id}&d=true",
              newtab : true
            }, {
              icon : "fas-external-link-alt",
              text : "i18n:thing-export-open-dir",
              href : Wn.Util.getAppLink(taDir),
              newtab : true
            }]
          }
        }]
      },
      components : [
        "@com:ti/wizard",
        "@com:ti/form",
        "@com:wn/cmd/panel",
        "@com:web/meta/badge"
      ]
    })
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-progress-bar.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/progress/bar/ti-progress-bar.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  props: {
    //------------------------------------------------
    // Data
    //------------------------------------------------
    // a float number between 0-1 to present the percentage
    "value": {
      type: Number,
      default: null
    },
    // default 1 to indicate number will round to 0.1
    "precision": {
      type: Number,
      default: 1
    },
    //------------------------------------------------
    // Aspect
    //------------------------------------------------
    "tipStyle": {
      type: Object
    },
    "barOuterStyle": {
      type: Object
    },
    "barInnerStyle": {
      type: Object
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    ProgressTip() {
      return Ti.S.toPercent(this.value, {
        fixed: this.precision,
        auto: false
      })
    },
    //------------------------------------------------
    ProgressStyle() {
      return _.assign({}, this.barInnerStyle, {
        width: this.ProgressTip
      })
    },
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'hm-prop-class-picker.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/hm/prop/class-picker/hm-prop-class-picker.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////////////////
  data : ()=>({
    myTexts : {},
    myNames : {},
    myBools : {}
  }),
  //////////////////////////////////////////////////////
  props : {
    //-----------------------------------
    // Data
    //-----------------------------------
    "value" : {
      type : [Object, String, Array]
    },
    "dftValue" : {
      type : [Object, String, Array]
    },
    "valueType" : {
      type : String,
      default : "auto",
      validator : v => /^(auto|String|Object|Array)$/.test(v)
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "form" : {
      type : Object,
      default : ()=>({})
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "dialogWidth" : {
      type : [String, Number],
      default : "5rem"
    },
    "dialogHeight" : {
      type : [String, Number],
      default : "6.4rem"
    }
  },
  //////////////////////////////////////////////////////
  computed : {
    //--------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------------------
    InputValueType() {
      return _.upperFirst(typeof this.value)
    },
    //--------------------------------------------------
    TheValueType() {
      return "auto" == this.valueType
        ? this.InputValueType
        : this.valueType
    },
    //--------------------------------------------------
    ValueData() {
      let val = this.value
      if(_.isEmpty(val)) {
        val = this.dftValue
      }
      return Ti.Css.mergeClassName(val)
    },
    //--------------------------------------------------
    ValueTexts() {
      let names = Ti.Util.truthyKeys(this.ValueData)
      return _.map(names, nm=>this.myTexts[nm])
    }
    //--------------------------------------------------
  },
  //////////////////////////////////////////////////////
  methods : {
    //--------------------------------------------------
    async OnClickTop() {
      // Eval result
      let result = {}
      let keys = Ti.Util.truthyKeys(this.ValueData)
      for(let key of keys) {
        // Boolean name
        let k = this.myBools[key]
        if(k) {
          result[k] = true
          continue
        }
        // Normal name
        k = this.myNames[key]
        if(k) {
          result[k] = key
        }
      }

      // Open dialog
      let reo = await Ti.App.Open({
        title : "i18n:hmk-class-pick",
        width : this.dialogWidth,
        height : this.dialogHeight,
        position : "top",
        result,
        model : {prop:"data", event:"change"},
        comType : "TiForm",
        comConf : this.form
      })
      
      // User cancle
      if(!reo)
        return

      //console.log(reo)

      // Cover to classObject
      let css = {}
      _.forEach(reo, (val, key)=>{
        if(!val)
          return
        let k = _.kebabCase(key)
        if(_.isBoolean(val)) {
          css[k] = true
        }
        // grouped class name
        else {
          k = _.kebabCase(val)
          css[k] = true
        }
      })
      //console.log("CSS", css)

      // Normlized to value
      let val = this.normalizeValue(css)

      this.$notify("change", val)
    },
    //--------------------------------------------------
    OnClickCleaner() {
      let val = this.normalizeValue({})
      this.$notify("change", val)
    },
    //--------------------------------------------------
    normalizeValue(css) {
      return ({
        "Object" : css => css,
        "Array"  : css => Ti.Util.truthyKeys(css),
        "String" : css => Ti.Util.truthyKeys(css).join(" "),
      })[this.TheValueType](css)
    },
    //--------------------------------------------------
    evalOptions() {
      let texts = {}
      let names = {}
      let bools = {}
      const grouping = (fields)=>{
        // Guard
        if(!_.isArray(fields)) {
          return
        }
        // Loop
        for(let fld of fields) {
          if(fld.name) {
            let targetKey = fld.name
            //
            // Options
            //
            let options = _.get(fld, "comConf.options")
            if(_.isArray(options)) {
              for(let it of options) {
                if(it.value) {
                  names[it.value] = targetKey
                  texts[it.value] = Ti.I18n.text(it.text)
                }
              }
            }
            //
            // Toggle
            else if("Boolean" == fld.type) {
              let k = _.kebabCase(fld.name)
              bools[k] = fld.name
              texts[k] = Ti.I18n.text(fld.title)
            }
          }
          // Recur
          grouping(fld.fields)
        }
      };
      grouping(this.form.fields)
      this.myNames = names
      this.myTexts = texts
      this.myBools = bools
    }
    //--------------------------------------------------
  },
  //////////////////////////////////////////////////////
  watch : {
    "form" : {
      handler : "evalOptions",
      immediate : true
    }
  }
  //////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'm-thing-current-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/thing/mod/current/m-thing-current-actions.mjs'] = (function(){
const _M = {
  //----------------------------------------
  // Combin Mutations
  //----------------------------------------
  onChanged({ dispatch }, payload) {
    dispatch("changeContent", payload)
  },
  //----------------------------------------
  changeContent({ commit }, payload) {
    commit("setContent", payload)
    commit("syncStatusChanged");
  },
  //----------------------------------------
  changeMeta({ commit }, { name, value } = {}) {
    if (name) {
      let meta = _.set({}, name, value)
      commit("mergeMeta", meta)
      commit("syncStatusChanged")
    }
  },
  //----------------------------------------
  updateContent({ state, commit }, content) {
    commit("setContent", content)
    if (state.meta && "FILE" == state.meta.race) {
      commit("setSavedContent", content)
    }
    commit("syncStatusChanged")
  },
  //--------------------------------------------
  // User Interactivity
  //--------------------------------------------
  async openMetaEditor({ state, dispatch }) {
    // Guard
    if (!state.meta) {
      return await Ti.Toast.Open("i18n:empty-data", "warn")
    }
    // Open Editor
    let reo = await Wn.EditObjMeta(state.meta, { fields: "auto" })

    // Cancel the editing
    if (_.isUndefined(reo)) {
      return
    }

    // Update the current editing
    if (reo.saved) {
      await dispatch("reload", reo.data)
    }
  },
  //--------------------------------------------
  async openContentEditor({ state, dispatch }) {
    // Guard
    if (!state.meta) {
      return await Ti.Toast.Open("i18n:empty-data", "warn")
    }
    // Open Editor
    let newContent = await Wn.EditObjContent(state.meta, {
      content: state.content
    })

    // Cancel the editing
    if (_.isUndefined(newContent)) {
      return
    }

    // Update the current editing
    await dispatch("changeContent", newContent)
  },
  //--------------------------------------------
  // Update to remote
  //----------------------------------------
  async updateMeta({ commit, dispatch }, { name, value } = {}) {
    //console.log("current.updateMeta", { name, value })
    let data = Ti.Types.toObjByPair({ name, value })
    await dispatch("updateMetas", data)
  },
  //----------------------------------------
  async updateMetas({ state, commit }, data = {}) {
    // Check Necessary
    if (_.isMatchWith(state.meta, data, _.isEqual)) {
      return
    }

    if (!state.meta) {
      return await Ti.Toast.Open("Thing.Current.meta without defined", "warn")
    }

    if (!state.thingSetId) {
      return await Ti.Toast.Open("Thing.Current.thingSetId without defined", "warn")
    }

    // Mark field status
    _.forEach(data, (val, name) => {
      commit("setFieldStatus", { name, type: "spinning", text: "i18n:saving" })
    })

    // Do the update
    let json = JSON.stringify(data)
    let th_set = state.thingSetId
    let th_id = state.meta.id
    let cmdText = `thing id:${th_set} update ${th_id} -fields -cqn`
    let reo = await Wn.Sys.exec2(cmdText, { input: json, as: "json" })
    let isError = reo instanceof Error;

    if (!isError && !Ti.Util.isNil(reo)) {
      commit("setMeta", reo)
    }

    _.forEach(data, (val, name) => {
      if (isError) {
        commit("setFieldStatus", {
          name,
          type: "warn",
          text: reo.message || "i18n:fail"
        })
      } else {
        commit("setFieldStatus", {
          name,
          type: "ok",
          text: "i18n:ok"
        })
        _.delay(() => { commit("clearFieldStatus", name) }, 500)
      }
    })
  },
  //--------------------------------------------
  // Reload & Save
  //--------------------------------------------
  // async setCurrent({state, commit,dispatch}, {
  //   meta=null, force=false
  // }={}) {
  //   //console.log("setCurrent", meta, loadContent)

  //   // Not need to reload
  //   if(state.meta && meta && state.meta.id == meta.id) {
  //     if((_.isString(state.content)) && !force) {
  //       return
  //     }
  //   }

  //   // do reload
  //   await dispatch("reload", meta)

  // },
  //----------------------------------------
  async save({ state, commit }) {
    if (state.status.saving || !state.status.changed) {
      return
    }

    commit("setStatus", { saving: true })

    let meta = state.meta
    let content = state.content
    let newMeta = await Wn.Io.saveContentAsText(meta, content)

    commit("setStatus", { saving: false })
    commit("setMeta", newMeta)
    commit("setSavedContent", content)
    commit("syncStatusChanged")

    // return the new meta
    return newMeta
  },
  //----------------------------------------
  async reload({ state, commit, dispatch }, meta) {
    if (state.status.reloading
      || state.status.saving) {
      return
    }
    //......................................
    // Use the default meta
    if (_.isUndefined(meta)) {
      meta = state.meta
    }
    //......................................
    // Before reload content and meta,
    // Update meta at first
    let preContent = meta ? "" : null
    commit("setContent", preContent)
    commit("setSavedContent", preContent)
    //......................................
    if (_.isString(meta)) {
      meta = await Wn.Io.loadMeta(meta)
    }
    else if (meta && meta.id) {
      meta = await Wn.Io.loadMetaById(meta.id)
    }
    //......................................
    // Guard
    if (!meta) {
      return
    }
    // Init content as null
    let content = null
    commit("setStatus", { reloading: true })
    //......................................
    // For file
    if ("FILE" == meta.race) {
      // need to be reload content
      content = await Wn.Io.loadContent(meta)
    }
    //......................................
    // For dir
    else if ('DIR' == meta.race) {
      content = await Wn.Io.loadChildren(meta)
    }
    //......................................
    // Just update the meta
    commit("setStatus", { reloading: false })
    commit("setMeta", meta)
    commit("clearFieldStatus")
    // Update content and sync state
    dispatch("updateContent", content)
  }
  //----------------------------------------
}
return _M;;
})()
// ============================================================
// EXPORT 'm-thing-current.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/thing/mod/current/m-thing-current.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////
  mutations : {
    //----------------------------------------
    setMeta(state, meta) {
      state.meta = meta
    },
    //--------------------------------------------
    assignMeta(state, meta) {
      state.meta = _.assign({}, state.meta, meta);
    },
    //--------------------------------------------
    mergeMeta(state, meta) {
      state.meta = _.merge({}, state.meta, meta);
    },
    //----------------------------------------
    setThingSetId(state, thingSetId) {
      state.thingSetId = thingSetId
    },
    //----------------------------------------
    setContent(state, content) {
      let meta = state.meta;
      // Guard
      if(!meta || Ti.Util.isNil(content)) {
        state.content = null
        state.data = null
        state.__saved_content = null
        state.status.changed = false
        return
      }
      //......................................
      // DIR
      if("DIR" == meta.race) {
        state.content = null
        state.__saved_content = null
        state.data = content
      }
      //......................................
      // File
      else if("FILE" == meta.race) {
        //....................................
        // String content
        if(_.isString(content)) {
          state.content = content
          // JSON
          if(Wn.Util.isMimeJson(meta.mime)) {
            try{
              state.data = JSON.parse(content)
            } catch(E) {
              state.data = null
            }
          }
          // Pure Text
          else if(Wn.Util.isMimeText(meta.mime)) {
            state.data = null
          }
        }
        //....................................
        // Take content as plain object or Array
        else {
          state.content = JSON.stringify(content, null, '  ')
          // JSON
          if(Wn.Util.isMimeJson(meta.mime)) {
            state.data = content
          }
          // Pure Text
          else if(Wn.Util.isMimeText(meta.mime)) {
            state.data = null
          }
        }
        //....................................
      }
    },
    //----------------------------------------
    setData(state, data) {
      state.data = data
    },
    //----------------------------------------
    setSavedContent(state, content) {
      state.__saved_content = content
    },
    //----------------------------------------
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    },
    //----------------------------------------
    syncStatusChanged(state){
      if(Ti.Util.isNil(state.content) && Ti.Util.isNil(state.__saved_content)) {
        state.status.changed = false
      } else {
        state.status.changed = !_.isEqual(state.content, state.__saved_content)
      }
    },
    //----------------------------------------
    setFieldStatus(state, {name, type, text}={}) {
      if(name){
        let ukey = _.concat(name).join("-")
        Vue.set(state.fieldStatus, ukey, {type, text})
      }
    },
    //----------------------------------------
    clearFieldStatus(state, names=[]) {
      // Clean All
      if(_.isEmpty(names)) {
        state.fieldStatus = {}
      }
      // Clear one
      else {
        state.fieldStatus = _.omit(state.fieldStatus, names)
      }
    },
    //----------------------------------------
  }
  ////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-button.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/button/ti-button.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "setup": {
      type: [Array, Object],
      default: () => []
    },
    "icon": {
      type: [Object, String]
    },
    "text": {
      type: String
    },
    "href": {
      type: String
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "disabled": {
      type: Boolean,
      default: undefined
    },
    "handler": {
      type: Function
    },
    "eventName": {
      type: String
    },
    "payload": {
      type: [String, Object, Array, Boolean, Number],
      default: undefined
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "size": {
      type: String,
      default: "normal",
      validator: v => /^(big|normal|small|tiny)$/.test(v)
    },
    // center|top|left|right|bottom|
    // left-top|right-top|bottom-left|bottom-right
    "align": {
      type: String,
      default: "center"
    },
    "mainStyle": {
      type: Object
    },
    "itemStyle": {
      type: Object
    },
  },
  //////////////////////////////////////////
  computed: {
    //......................................
    TopClass() {
      return this.getTopClass(`is-${this.size}`, `at-${this.align}`)
    },
    //......................................
    ButtonItems() {
      let re = [];
      let list = []
      // Default setting
      let dft = {}
      if (!Ti.Util.isNil(this.icon)) {
        dft.icon = this.icon
      }
      if (!Ti.Util.isNil(this.text)) {
        dft.text = this.text
      }
      if (!Ti.Util.isNil(this.disabled)) {
        dft.disabled = this.disabled
      }
      if (!Ti.Util.isNil(this.handler)) {
        dft.handler = this.handler
      }
      if (!Ti.Util.isNil(this.eventName)) {
        dft.eventName = this.eventName
      }
      if (!Ti.Util.isNil(this.payload)) {
        dft.payload = this.payload
      }
      if (!_.isEmpty(dft)) {
        dft.name = "_DFT_BTN_ITEM_"
        list.push(dft)
      }
      // More setup
      let setup = _.concat([], list, this.setup)
      _.forEach(setup, (li, index) => {
        let it = {}
        it.name = li.name || `item-${index}`
        it.eventName = li.eventName || it.name
        it.payload = li.payload
        it.icon = li.icon
        it.text = li.disabled ? li.disabledText || li.text : li.text
        it.disabled = li.disabled
        it.handler = li.handler
        it.buttonClass = Ti.Css.mergeClassName({
          [`as-do-${it.name}`]: true,
          "is-enabled": !li.disabled ? true : false,
          "is-disabled": li.disabled ? true : false,
          "is-invert-icon": li.invertIcon ? true : false
        }, li.className)
        it.style = _.assign({}, this.itemStyle, li.style)
        re.push(it)
      })
      return re
    }
    //......................................
  },
  //////////////////////////////////////////
  methods: {
    OnClickItem(it) {
      if (!it.disabled) {
        if (_.isFunction(it.handler)) {
          it.handler()
        }
        if (_.isString(it.eventName)) {
          this.$notify(it.eventName, it.payload)
        }
      }
    }
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-lbs-route.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/lbs/route/ti-lbs-route.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  inject: {
    '$vars': {default: {}}
  },
  /////////////////////////////////////////
  data : ()=>({
    myShowList: undefined,
    myCurrentId: undefined,
    myCheckedIds: undefined,
    myFullscreen: false,
    apiLoaded: false
  }),
  /////////////////////////////////////////
  props : {
    // tencent|baidu|google ...
    "by" : {
      type : String,
      default : "tencent"
    },
    // Map security key pattern 
    // it will find the key from "$vars" which injected to the com.
    // default, if by=google, the mapKey in "$vars" should be "googleMapKey"
    "secretKey": {
      type: String,
      default: "${by}MapKey"
    },
    // All Map api support URL
    // key by 'by' prop
    "apiUrls": {
      type: Object,
      default: ()=>({
        "google": '!js://maps.googleapis.com/maps/api/js?key=${key}'
      })
    },
    // @see https://lbs.qq.com/javascript_v2/doc/maptypeid.html
    // @see http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference_3_0.html#a5b0
    // ROADMAP | SATELLITE | HYBRID | TERRAIN(google only)
    "mapType" : {
      type : String,
      default : "ROADMAP"
    },
    // Sometime, the lat/lng valued by integer
    // this prop defined how to translate them to float
    "autoFloat" : {
      type : Number,
      default : 10000000
    },
    // Map width
    "width" : {
      type : [String, Number],
      default : 400
    },
    // Map height
    "height" : {
      type : [String, Number],
      default : 400
    },
    "zoom" : {
      type : Number,
      default : 8
    },
    // The Coordinate System for input LatLng (center/value...)
    //  - WGS84 : Standard GPS 
    //  - BD09  : for Baidu Map
    //  - GCJ02 : (Mars) QQ/GaoDe/AliYun ...
    "coordinate" : {
      type : String,
      default : "WGS84"
    },
    "maxZoom": {
      type: Number,
      default: 22
    },
    "minZoom": {
      type: Number,
      default: 1
    },
    "infoBar": {
      type: Boolean,
      default: true
    },
    "editable": {
      type: Boolean,
      default: false
    },
    "iconSize": {
      type: Object,
      default: undefined
    },
    // A LatLng Point Object or Polygon Array in map
    // Point - Map center will be it
    // Polygon - Auto count the map center
    "value" : {
      type : Array,
      default : ()=>[]
    },
    "keepStateBy": {
      type: String,
      default: undefined
    },
    "showList" :{
      type: Boolean,
      default: true
    },
    /*
    Open Modal-> ti-transer 
    whatever, you need gen the result like:
    [{
      id, title, lng, lat, label[Optional]
    }]
    */
    "addBy": {
      type: Object,
      default: undefined
    },
    // Refer by goole map api: gestureHandling
    // https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions
    "gestureHandling": {
      type: String,
      default: "auto",
      validator: v=>/^(cooperative|greedy|none|auto)$/.test(v)
    }
  },
  //////////////////////////////////////////
  computed : {
    //-------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-fullscreen": this.myFullscreen
      })
    },
    //-------------------------------------
    TopStyle() {
      if(!this.myFullscreen) {
        return Ti.Css.toStyle({
          width  : this.width,
          height : this.height
        })
      }
    },
    //-------------------------------------
    TheMapSecretKey() {
      let vnm = Ti.S.renderBy(this.secretKey, this)
      return _.get(this.$vars, vnm)
    },
    //-------------------------------------
    TheMapApiUrl() {
      let url = _.get(this.apiUrls, this.by)
      url = Ti.S.renderBy(url, {key:this.TheMapSecretKey})
      return url
    },
    //-------------------------------------
    TheGestureHandling() {
      if(this.myFullscreen){
        return "greedy"
      }
      return this.gestureHandling
    },
    //-------------------------------------
    ValueItems() {
      let list = []
      _.forEach(this.value, (it, index)=>{
          let li = _.cloneDeep(it)
          // Default Label
          if(!li.label) {
            li.label = ""+(index+1)
          }
          // Default ID
          if(!li.id) {
            li.id = `R${index}`
          }
          // Join it
          list.push(li)
      })
      return list
    },
    //-------------------------------------
    hasItems() {
      return !_.isEmpty(this.ValueItems)
    },
    //-------------------------------------
    ListConf() {
      return {
        display: ["<icon:zmdi-pin>", "label:[$${val}]", "title"],
        multi: true
      }
    },
    //-------------------------------------
    ActionButtons() {
      let list = [{
        icon: "zmdi-edit",
        disabled: !this.hasCurrentId,
        handler: ()=>this.editCurrent()
      }, {
        icon: "fas-sort-numeric-down",
        disabled: !this.hasItems,
        handler: ()=>this.renumberItems()
      }, {
        icon: "zmdi-long-arrow-up",
        disabled: !this.hasCheckedIds,
        handler: ()=>this.moveCheckedUp()
      }, {
        icon: "zmdi-long-arrow-down",
        disabled: !this.hasCheckedIds,
        handler: ()=>this.moveCheckedDown()
      }, {
        icon: "zmdi-delete",
        disabled: !this.hasCheckedIds,
        handler: ()=>this.removeChecked()
      }, {
        icon: "zmdi-format-list-bulleted",
        handler: ()=> {
          this.myShowList = !this.isShowList
        }
      }]
      if(this.addBy) {
        return _.concat({
          icon: "zmdi-plus",
          text: "i18n:lbs-place-add",
          handler: ()=>this.openNewItemSelector()
        }, list)
      }
      return list
    },
    //-------------------------------------
    hasCurrentId() {
      return !Ti.Util.isNil(this.myCurrentId)
    },
    //-------------------------------------
    hasCheckedIds() {
      return !_.isEmpty(this.myCheckedIds)
    },
    //-------------------------------------
    isShowList() {
      return Ti.Util.fallback(this.myShowList, this.showList)
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //-------------------------------------
    OnFullscreenChange(fullscreen) {
      console.log("OnFullscreenChange", fullscreen)
      this.myFullscreen = fullscreen
    },
    //-------------------------------------
    OnListSelect({currentId, checkedIds}) {
      this.myCurrentId = currentId
      this.myCheckedIds = checkedIds
    },
    //-------------------------------------
    async OnListOpen({index, item}) {
      let reo = await Ti.App.Open({
        title: "i18n:edit",
        position: "right",
        result: item,
        comType: "TiForm",
        comConf: {
          data: "=result",
          fields: [{
            title: "i18n:title",
            name: "title",
            comType: "ti-input"
          }, {
            title: "i18n:label",
            name: "label",
            comType: "ti-input"
          }]
        }
      })
      // User cancel
      if(_.isEmpty(reo))
        return

      // Update
      let list = _.cloneDeep(this.ValueItems)
      _.assign(list[index], reo)
      this.$notify("change", list)
    },
    //-------------------------------------
    async renumberItems() {
      // Get renumber setting
      let reo = await Ti.App.Open({
        title : "i18n:lbs-ro-rnb-title",
        position: "right",
        result: {
          first : 1,
          type  : "capital"
        },
        model: {prop:"data", event:"change"},
        comType : "TiForm",
        comConf : {
          fields: [{
              title: "i18n:lbs-ro-rnb-k-first",
              name : "first",
              type : "Integer",
              comType: "ti-input-num"
            }, {
              title: "i18n:lbs-ro-rnb-k-type",
              name : "type",
              comType: "ti-switcher",
              comConf: {
                options: [
                  {value:"capital", text:"i18n:lbs-ro-rnb-k-type-capital"},
                  {value:"alpha",   text:"i18n:lbs-ro-rnb-k-type-alpha"},
                  {value:"number",  text:"i18n:lbs-ro-rnb-k-type-number"}]
              }
            }]
        }
      })

      // User Cancel
      if(!reo)
        return

      // Prepare the number list
      let nbList = ({
        "alpha" : "abcdefghijklmnopqrstuvwxyz".split(""),
        "capital" : "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split(""),
      })[reo.type]

      // Assign the label
      let list = _.cloneDeep(this.ValueItems)
      _.forEach(list, (li, index)=>{
        let i = reo.first + index
        if(nbList) {
          let ni = Ti.Num.scrollIndex(i-1, nbList.length)
          li.label = _.nth(nbList, ni)
        }
        // Just use number
        else {
          li.label = ""+i
        }
      })

      // Update
      this.$notify("change", list)
    },
    //-------------------------------------
    async editCurrent() {
      if(!this.myCurrentId) {
        return
      }
      // Find the index
      let index=0, item=null;
      for(let it of this.ValueItems) {
        if(this.myCurrentId == it.id) {
          item = it
          break;
        }
        index++
      }
      // Then open editor
      await this.OnListOpen({index, item})
    },
    //-------------------------------------
    async openNewItemSelector() {
      // Guard
      if(!this.addBy)
        return
      let diaConf = _.merge({
        icon: "zmdi-plus-circle-o",
        title: "add-item",
        width: "80%",
        height: "80%",
        position: "top",
        result: this.ValueItems,
        comType: "TiTransfer",
        comConf: {}
      }, this.addBy)

      let reo = await Ti.App.Open(diaConf)

      // User canceled
      if(Ti.Util.isNil(reo))
        return
      
      // Remove dup
      let list = []
      let memo = {}

      // Remember old
      _.forEach(list, it => memo[it.id] = true)
      
      // Join new
      _.forEach(reo, it => {
        if(!memo[it.id]) {
          memo[it.id] = true
          if(Ti.Util.isNil(it.label)) {
            it.label = (list.length+1)+""
          }
          list.push(it)
        }
      })

      // Notify change
      this.$notify("change", list)
    },
    //-------------------------------------
    moveCheckedUp() {
      let mc = this.genMoveContext()
      if(_.isEmpty(mc.checkeds)) {
        return Ti.Toast.Open("i18n:nil-obj", "warn")
      }
      if(mc.firstIndex > 0) {
        let list = mc.remains;
        let pos = mc.firstIndex - 1
        Ti.Util.insertToArray(list, pos, ...mc.checkeds)

        // Update the auto-generated ID
        if(Ti.Util.isNil(_.first(mc.checkeds).id)) {
          let checkeds = {}
          for(let i=0; i<mc.checkeds.length;i++) {
            checkeds[`R${i+pos}`] = true
          }
          this.myCurrentId = null
          this.myCheckedIds = checkeds
        }

        this.$notify("change", list)
      }
    },
    //-------------------------------------
    moveCheckedDown() {
      let mc = this.genMoveContext()
      if(_.isEmpty(mc.checkeds)) {
        return Ti.Toast.Open("i18n:nil-obj", "warn")
      }

      if(mc.lastIndex < mc.remains.length) {
        let list = mc.remains;
        let pos = mc.lastIndex+1
        Ti.Util.insertToArray(list, pos, ...mc.checkeds)

        // Update the auto-generated ID
        if(Ti.Util.isNil(_.first(mc.checkeds).id)) {
          let checkeds = {}
          for(let i=0; i<mc.checkeds.length;i++) {
            checkeds[`R${i+pos}`] = true
          }
          this.myCurrentId = null
          this.myCheckedIds = checkeds
        }

        this.$notify("change", list)
      }
    },
    //-------------------------------------
    removeChecked() {
      let mc = this.genMoveContext()
      if(_.isEmpty(mc.checkeds)) {
        return Ti.Toast.Open("i18n:del-none", "warn")
      }
      this.myCheckedIds = {}
      this.myCurrentId = null
      this.$notify("change", mc.remains)
    },
    //-------------------------------------
    genMoveContext() {
      let mc = {
        firstIndex: -1,
        lastIndex : -1,
        checkeds: [],
        remains: []
      }
      _.forEach(this.ValueItems, (it, index)=>{
        let isChecked = _.get(this.myCheckedIds, it.id)
        let priIt = this.value[index]
        // Checked
        if(isChecked) {
          mc.checkeds.push(priIt)
          if(mc.firstIndex<0) {
            mc.firstIndex = index
            mc.lastIndex  = index
          }else {
            mc.lastIndex = mc.remains.length
          }
        }
        // Remain
        else {
          mc.remains.push(priIt)
        }
      })

      //console.log(mc)
      return mc
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  mounted: async function() {
    // Load Map API
    let url = this.TheMapApiUrl
    if(url) {
      //console.log("TiLoad", url)
      await Ti.Load(url)
      this.apiLoaded = true
    }
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-obj-id.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/id/wn-obj-id.mjs'] = (function(){
/////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////
  data: () => ({
    showDetail: "hide"
  }),
  ///////////////////////////////////////////////////
  props: {
    // icon string
    "value": {
      type: String,
      default: null
    }
  },
  ///////////////////////////////////////////////////
  computed: {
    //-----------------------------------------------
    TopClass() {
      return this.getTopClass(
        {
          "is-none": !this.value,
          "is-simple": !this.OID.homeId,
          "is-two-stage": this.OID.homeId
        },
        `is-detail-${this.showDetail}`
      );
    },
    //-----------------------------------------------
    OID() {
      return Wn.Io.OID(this.value);
    },
    //-----------------------------------------------
    IDText() {
      return Ti.I18n.get("view");
    },
    //-----------------------------------------------
    IDHref() {
      return Wn.Util.getAppLinkStr(this.value);
    }
    //-----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods: {
    //-----------------------------------------------
    OnMouseEnter() {
      if (!this.value) {
        return;
      }
      this.showDetail = "show";
      this.$nextTick(() => {
        Ti.Dom.dockTo(this.$refs.detail, this.$refs.box, {
          mode: "V"
        });
        this.showDetail = "ready";
      });
    },
    //-----------------------------------------------
    OnMouseLeave() {
      this.showDetail = "hide";
    },
    //-----------------------------------------------
    OnCopyAll(evt) {
      let $ta = Ti.Dom.find("table", this.$el);
      let ids = [];
      let homeId = _.get(this.OID, "homeId");
      let myId = _.get(this.OID, "myId");
      if (homeId) {
        ids.push(homeId);
      }
      if (myId) {
        ids.push(myId);
      }
      this.__copy(ids.join(":"), $ta);
    },
    //-----------------------------------------------
    OnCopyHomeId(evt) {
      let $ta = Ti.Dom.find(".is-home-id td:nth-child(2)", this.$el);
      this.__copy(_.get(this.OID, "homeId"), $ta);
    },
    //-----------------------------------------------
    OnCopyMyId(evt) {
      let $ta = Ti.Dom.find(".is-my-id td:nth-child(2)", this.$el);
      this.__copy(_.get(this.OID, "myId"), $ta);
    },
    //-----------------------------------------------
    __copy(str, $ta) {
      Ti.Be.BlinkIt($ta);
      //console.log(str)
      Ti.Be.writeToClipboard(str);
    }
    //-----------------------------------------------
  }
  ///////////////////////////////////////////////////
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'm-th-obj-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/th/obj/m-th-obj-actions.mjs'] = (function(){
////////////////////////////////////////////////
async function loadConfigJson(state, key, dft) {
  // Guard
  let path = state[key];
  if (!path) {
    return dft;
  }
  // Load
  let aph = path;
  if (!/^(~\/|id:|\/)/.test(path)) {
    let tsId = state.thingSetId;
    aph = `id:${tsId}/${path}`;
  }
  let re = await Wn.Sys.exec(`cat ${aph}`);
  re = _.trim(re);

  // Not exists
  if (!re || /^e\./.test(re)) {
    return dft;
  }

  // Parse As JSON
  return JSON.parse(re);
}
////////////////////////////////////////////////
const _M = {
  //--------------------------------------------
  applyViewBeforeLoad({ state, commit }) {
    // Guard
    if (!state.view) {
      return;
    }
    state.LOG("applyViewBeforeLoad", state.view);
    // Update to state
    _.forEach(state.view, (v, k) => {
      // Only set the paths
      if (/^((actions|layout|schema|method)Paths?)$/.test(k)) {
        let by = _.camelCase("set-" + k);
        state.LOG("  > ", by, v);
        commit(by, v);
      }
    });
  },
  //--------------------------------------------
  applyViewAfterLoad({ state, commit }) {
    // Guard
    if (!state.view) {
      return;
    }
    state.LOG("applyViewAfterLoad", state.view);
    // Update to state
    _.forEach(state.view, (v, k) => {
      // Ignore
      if (/^((actions|layout|schema|method)Paths?)$/.test(k)) {
        return;
      }
      if (
        /^(events|view|path|lbkOff|thingSetId|oTs|meta|(__saved_)?content)$/.test(
          k
        )
      ) {
        return;
      }
      // Schema merged in "loadSchema" already
      if (/^(schema|components)$/.test(k)) {
        return;
      }
      let by;
      // Assign
      if (/^(pager)$/.test(k)) {
        by = _.camelCase("assign-" + k);
      }
      // Others set
      else {
        by = _.camelCase("set-" + k);
      }
      // Update state by view
      commit(by, v);
    });
  },
  //--------------------------------------------
  async loadContent(
    { state, commit, dispatch, getters },
    { quiet = false } = {}
  ) {
    // Which content should I load?
    state.LOG("loadContent", getters.contentLoadPath);
    let path = getters.contentLoadPath;
    if (!path) {
      dispatch("updateContent", null);
      return;
    }

    let meta;
    if (!quiet) {
      commit("setStatus", { reloading: true });
    }

    if ("<self>" != path) {
      meta = await Wn.Io.loadMeta(path);
    }
    // Use state
    else if (state.meta && "FILE" == state.meta.race) {
      meta = state.meta;
    }

    //console.log("load Content:", path)
    // No meta
    if (!meta) {
      state.LOG("updateContent => null");
      dispatch("updateContent", null);
      if (!quiet) {
        commit("setStatus", { reloading: false });
      }
      return;
    }

    // Load meta content
    let content = await Wn.Io.loadContent(meta);
    dispatch("updateContent", content);
    //console.log("loadContent:", content)

    // All done
    if (!quiet) {
      commit("setStatus", { reloading: false });
    }

    return content;
  },
  //--------------------------------------------
  async loadSchema({ state, commit }) {
    state.LOG(" - loadSchema");
    let schema = await loadConfigJson(state, "schemaPath", {});
    let components = [];

    // <Apply view>
    if (state.view && state.view.schema) {
      _.forEach(state.view.schema, (vObj, k) => {
        let orgCom = schema[k];
        let { merge, comType, comConf } = vObj;

        // Guard
        if (_.isEmpty(orgCom)) {
          schema[k] = { comType, comConf };
          return;
        }

        // Maybe merge comConf or assign
        let keyInMerge = Ti.AutoMatch.parse(merge);

        // Com Type
        if (!Ti.Util.isNil(comType)) {
          orgCom.comType = comType;
        }

        // Com Conf
        if (!_.isEmpty(comConf)) {
          // init comConf in schema
          if (_.isEmpty(orgCom.comConf)) {
            orgCom.comConf = comConf;
            return;
          }

          let vwKeys = _.keys(comConf);
          for (let vwKey of vwKeys) {
            let vwVal = comConf[vwKey];
            if (keyInMerge(vwKey)) {
              _.merge(orgCom.comConf[vwKey], vwVal);
            } else {
              orgCom.comConf[vwKey] = vwVal;
            }
          }
        }
      });
      if (!_.isEmpty(state.view.components)) {
        components = _.concat(components, state.view.components);
      }
    }
    // </Apply view>

    if (!_.isEmpty(schema.components)) {
      components = _.concat(components, schema.components);
    }

    // Load extends components
    if (!_.isEmpty(components)) {
      await Ti.App.topInstance().loadView({ components });
    }

    //console.log("setSchema", schema)
    // Should set scheme after All deps components preloaded
    commit("setSchema", schema);
    //console.log("schema", schema)

    if (schema.methods) {
      commit("joinMethodPaths", schema.methods);
    }

    if (!_.isUndefined(schema.localBehaviorKeepAt)) {
      commit("setLocalBehaviorKeepAt", schema.localBehaviorKeepAt);
    }

    let contentPath = _.get(schema, "behavior.contentPath");
    if (contentPath) {
      commit("setContentPath", contentPath);
    }
  },
  //--------------------------------------------
  async loadLayout({ state, commit }) {
    state.LOG(" > loadLayout");
    let reo = await loadConfigJson(state, "layoutPath", {});
    commit("setLayout", reo);
  },
  //--------------------------------------------
  async loadThingActions({ state, commit }) {
    state.LOG(" > loadThingActions");
    let reo = await loadConfigJson(state, "actionsPath", null);
    commit("setThingActions", reo);
  },
  //--------------------------------------------
  async loadThingMethods({ state, commit }) {
    state.LOG(" > loadThingMethods", state.methodPaths);
    let reo = {};

    // Load
    if (state.methodPaths) {
      //let methodsUri = `./${state.methodPaths}`
      let methods = await Ti.Load(state.methodPaths, {
        dynamicAlias: new Ti.Config.AliasMapping({
          "^./": `/o/content?str=id:${state.thingSetId}/`
        })
      });
      // Merge methods
      if (_.isArray(methods)) {
        for (let mt of methods) {
          _.assign(reo, mt);
        }
      } else {
        _.assign(reo, methods);
      }
    }

    // Done
    commit("setThingMethods", reo);
  },
  //--------------------------------------------
  async loadThingSetId({ state, commit }) {
    state.LOG("loadThingSetId");
    let meta = state.meta;
    if (!meta) {
      return;
    }
    if (_.isString(meta.th_set)) {
      commit("setThingSetId", meta.th_set);
    }
    // Load thingset ancestor by meta
    let ans = await Wn.Sys.exec2(
      `o id:${meta.id} @ancestors -um '{tp:"thing_set"}' @json -cqnl`
    );
    let first = _.first(ans);
    if (first && first.tp == "thing_set") {
      commit("setThingSetId", first.id);
    }
  },
  //--------------------------------------------
  // load static data to "load", then dynamic explain can use it
  async applyLoad({ state, commit }) {
    let results = {};
    //
    // Define Loader
    const _load_data = async (key, path, asJson = false) => {
      // Load
      results[key] = await Wn.Sys.exec2(`cat '${path}'`, {
        as: asJson ? "json" : "text"
      });
    };

    // Load Each Path
    let loads = [];
    _.forEach(state.load, (path, key) => {
      path = _.trim(path);
      // Guard
      if (!path) {
        return;
      }
      // Guard path
      if (path.indexOf("'") >= 0) {
        throw Ti.Err.make("e.load.path.Invalid", path);
      }

      // Auto parse Json flag
      let type = Ti.Util.getSuffixName(path);
      let asJson = "json" == type;

      // Absolute path
      if (!/^(~|\/|id:)/.test(path)) {
        path = `id:${state.thingSetId}/${path}`;
      }

      // Join Loading
      loads.push(_load_data(key, path, asJson));
    });

    // Load them ..
    await Promise.all(loads);

    // Update state
    commit("setLoad", results);
  },
  //--------------------------------------------
  applyBehavior({ state, commit }, be = {}) {
    // Eval behavior dynamicly
    let {
      pvg,
      load,
      filter,
      sorter,
      match,
      exportSettings,
      importSettings,
      agg,
      aggQuery,
      aggAutoReload,
      currentId,
      checkedIds,
      pageSize,
      dataDirName,
      dataDirCurrentId,
      dataDirCheckedIds,
      guiShown
    } = be;

    // Apply Pvg
    if (!_.isEmpty(pvg)) {
      commit("assignPvg", pvg);
    }

    // Apply Load
    if (!_.isEmpty(load)) {
      commit("assignLoad", load);
    }

    // Apply filter
    if (!_.isEmpty(filter)) {
      commit("setFilter", filter);
    }

    // Apply sorter
    if (!_.isEmpty(sorter)) {
      commit("setSorter", sorter);
    }

    // Import/export
    if (exportSettings) {
      commit("assignExportSettings", exportSettings);
    }
    if (importSettings) {
      commit("assignImportSettings", importSettings);
    }

    // Apply agg setting
    if (agg) {
      commit("setAgg", agg);
    }
    if (aggQuery) {
      commit("setAggQuery", aggQuery);
    }
    if (_.isBoolean(aggAutoReload)) {
      commit("setAggAutoReload", aggAutoReload);
    }

    // Apply fixed match
    if (!_.isEmpty(match)) {
      commit("setFixedMatch", match);
    }

    // Checked and current
    if (!Ti.Util.isNil(currentId)) {
      commit("setCurrentId", currentId);
    }
    if (!_.isEmpty(checkedIds)) {
      commit("setCheckedIds", checkedIds);
    }

    // Data Dir
    if (!Ti.Util.isNil(dataDirName)) {
      commit("setDataDirName", dataDirName);
    }
    if (!Ti.Util.isNil(dataDirCurrentId)) {
      commit("setDataDirCurrentId", dataDirCurrentId);
    }
    if (!Ti.Util.isNil(dataDirCheckedIds)) {
      commit("setDataDirCheckedIds", dataDirCheckedIds);
    }

    // Apply shown
    if (!_.isEmpty(guiShown)) {
      commit("setGuiShown", guiShown);
    }

    // Apply pager
    if (pageSize > 0) {
      let pager = {};
      pager.pn = 1;
      pager.pgsz = pageSize;
      commit("assignPager", pager);
    }
  },
  //--------------------------------------------
  updateSchemaBehavior({ state, commit, dispatch }) {
    let be = _.get(state.schema, "behavior") || {};
    be = Ti.Util.explainObj(state, be);
    // Apply Ignore
    if (state.schemaBeIgnore) {
      let be2 = {};
      _.forEach(be, (v, k) => {
        if (!state.schemaBeIgnore(k)) {
          be2[k] = v;
        }
      });
      be = be2;
    }
    // Apply schema behaviors
    if (!_.isEmpty(be)) {
      state.LOG("updateSchemaBehavior", be);
      commit("setLbkOff");
      dispatch("applyBehavior", be);
      commit("setLbkOn");
    }
  },
  //--------------------------------------------
  restoreLocalBehavior({ state, dispatch }) {
    // Guard
    if (!state.lbkAt || state.lbkOff) {
      return;
    }
    // Load local setting
    let be = Ti.Storage.local.getObject(state.lbkAt);
    // Apply Ignore
    if (state.lbkIgnore) {
      let be2 = {};
      _.forEach(be, (v, k) => {
        if (!state.lbkIgnore(k)) {
          be2[k] = v;
        }
      });
      be = be2;
    }
    // Apply behaviors
    if (!_.isEmpty(be)) {
      dispatch("applyBehavior", be);
    }
  },
  //--------------------------------------------
  async reloadData({ state, dispatch, getters }) {
    state.LOG("reloadData");
    // Guard
    if (
      state.status.reloading ||
      state.status.saving ||
      state.status.deleting
    ) {
      state.LOG("reloadData: Guard reject!");
      return;
    }
    if (state.oTs) {
      state.LOG("reloadData: queryList");
      await dispatch("queryList");
      if (state.aggAutoReload) {
        await dispatch("queryAggResult");
      }
    }
    if (getters.contentLoadPath) {
      state.LOG("reloadData: loadContent");
      await dispatch("loadContent");
    }
  },
  //--------------------------------------------
  /***
   * Reload All
   */
  async reload({ state, commit, dispatch, getters }, meta) {
    //console.log("!!!reload", state.moduleName)
    // Guard
    if (
      state.status.reloading ||
      state.status.saving ||
      state.status.deleting
    ) {
      return;
    }
    state.LOG = () => {};

    // if ("casetasks" == state.moduleName) {
    // state.LOG = console.log;
    // }
    state.LOG(">>>>>>>>>>>>>> reload", meta, state.status.reloading);
    // Guard
    if (_.isString(meta)) {
      state.LOG("load meta", meta);
      meta = await Wn.Io.loadMeta(meta);
      state.LOG("get meta", meta);
    }

    // Guard: Nil meta
    if (!meta) {
      return await Ti.Toast.Open("Nil Meta", "warn");
    }
    if (!meta.id) {
      return await Ti.Toast.Open("Meta without ID", "warn");
    }

    // If load meta is a thing record, it will case oTs==null
    // Then we need set list=[meta] directly
    // and, set the currentId/checkIds also
    // we need patch th behavior after local-state loaded
    // So , this var will indicate if we need override local-state
    let mockList;

    // Analyze meta : oTs
    state.LOG("Analyze oTs and thingSetId");
    if ("thing_set" == meta.tp && "DIR" == meta.race) {
      commit("setThingSet", meta);
      commit("setThingSetId", meta.id);
    }
    // Maybe a thing_view (JSON)
    else if ("thing_view" == meta.tp && "FILE" == meta.race) {
      let view = await Wn.Io.loadContent(meta, { as: "json" });
      commit("setView", view);
      if (view.path) {
        let oTs = await Wn.Io.loadMeta(view.path);
        commit("setThingSet", oTs);
        commit("setThingSetId", oTs.id);
      }
    }
    // Then meta should be a thing
    else {
      // CheckThingSet ID
      commit("setMeta", meta);
      commit("setThingSetId", null);
      await dispatch("loadThingSetId");
      mockList = [meta];
    }

    if (!state.thingSetId) {
      console.warn(`!state.thingSetId meta Outof ThingSet`, meta);
      return await Ti.Toast.Open("Meta OutOfThingSet: " + meta.id, "warn");
    }

    commit("setStatus", { reloading: true });

    // Reload Configurations
    state.LOG("<-------- Reload Config -------->");
    dispatch("applyViewBeforeLoad");
    await dispatch("loadSchema");
    await Promise.all([
      dispatch("loadLayout"),
      dispatch("loadThingActions"),
      dispatch("loadThingMethods")
    ]);
    dispatch("applyViewAfterLoad");
    state.LOG("<-------- Config Loaded-------->");

    // Behavior
    commit("explainLocalBehaviorKeepAt");
    dispatch("updateSchemaBehavior");
    dispatch("restoreLocalBehavior");

    // Load more fixed data
    await dispatch("applyLoad");

    state.LOG(" >> Query Data ...");

    // Reload thing list
    if (state.oTs) {
      if (state.autoQueryList) {
        await dispatch("queryList");
        await dispatch("queryAggResult");
      }
      // Dont load data list, just reset it
      else {
        commit("setPager", {});
        commit("setList", []);
        commit("setCurrentMeta");
        commit("setAggResult", {});
      }
    }
    // Mock the list loading in thing meta mode
    else if (!_.isEmpty(mockList)) {
      commit("setList", mockList);
      commit("setCurrentId", mockList[0].id);
      commit("setCheckedIds", [mockList[0].id]);
    }

    // Update dataHome
    commit("autoDataHome");

    // Reload content if neccessary
    if (getters.contentLoadPath) {
      await dispatch("loadContent");
    }

    // All done
    commit("setStatus", { reloading: false });
    state.LOG("<<<<<<<<<<<<<<<< done for reload");
  }
  //--------------------------------------------
};
return _M;;
})()
// ============================================================
// EXPORT 'ti-icon.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/icon/ti-icon.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////////
  data: () => ({
    myValue: null
  }),
  ///////////////////////////////////////////////////////
  props: {
    // If image, join the base
    "base": {
      type: String,
      default: null
    },
    "value": {
      type: [String, Object, Number],
      default: null
    },
    "dict": {
      type: [String, Ti.Dict],
      default: null
    },
    "defaultValue": {
      type: [String, Object],
      default: null
    },
    "fontSize": {
      type: [Number, String],
      default: null
    },
    "width": {
      type: [Number, String],
      default: null
    },
    "height": {
      type: [Number, String],
      default: null
    },
    "color": {
      type: [String, Function],
      default: ""
    },
    "opacity": {
      type: [Number, Function],
      default: -1
    },
    "notifyName": {
      type: String,
      default: undefined
    },
    "notifyConf": {
      type: [Object, String, Number, Boolean, Array],
      default: undefined
    },
    "stopPropagation": {
      type: Boolean,
      default: false
    }
  },
  ///////////////////////////////////////////////////////
  computed: {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass({
        "can-click": this.notifyName ? true : false
      }, `is-${this.Icon.type}`, this.Icon.iconClass)
    },
    //---------------------------------------------------
    Dict() {
      if (this.dict) {
        // Already Dict
        if (this.dict instanceof Ti.Dict) {
          return this.dict
        }
        // Get back
        let { name } = Ti.DictFactory.explainDictName(this.dict)
        return Ti.DictFactory.CheckDict(name)
      }
    },
    //---------------------------------------------------
    // formed icon data
    Icon() {
      let icn
      if (_.isPlainObject(this.myValue)) {
        // Regular icon object, return it directly
        if (this.myValue.value) {
          icn = _.cloneDeep(this.myValue)
        }
        // Eval it as meta
        else {
          icn = {
            type: "font",
            value: Ti.Icons.get(this.myValue)
          }
        }
        // Auto type
        if (!icn.type) {
          icn.type = /(jpe?g|gif|png|svg)$/i.test(icn.value)
            ? "image"
            : "font"
        }
      }
      // String
      else {
        icn = {
          type: "font",
          value: this.myValue
        }
        if (_.isString(this.myValue)) {
          icn.type = Ti.Util.getSuffixName(this.myValue) || "font"
        }
        // for image
        if (/^(jpe?g|gif|png|svg)$/i.test(icn.type)) {
          icn.type = "image"
        }
      }

      // Join `className / text` to show icon font
      if ('font' == icn.type) {
        let iconClass = icn.className
        let val = Ti.Icons.getByName(icn.value, icn.value)
        _.assign(icn, Ti.Icons.parseFontIcon(val), {
          iconClass, iconClass
        })
      }
      // Join base
      else if ('image' == icn.type) {
        if (!Ti.Util.isBlank(this.base)) {
          icn.value = Ti.Util.appendPath(this.base, icn.value)
        }
      }

      // Evel the color
      let color = icn.color || this.color
      if (_.isFunction(color)) {
        color = color(this.value)
      }

      // Evel the opacity
      let opacity = icn.opacity || this.opacity
      if (_.isFunction(opacity)) {
        opacity = opacity(this.value)
      }
      if (!_.isNumber(opacity) || opacity < 0) {
        opacity = undefined
      }


      // join style:outer
      let width = icn.width || this.width
      let height = icn.height || this.height
      icn.outerStyle = Ti.Css.toStyle({
        width, height,
        color, opacity
      })

      // join style:inner
      if ('image' == icn.type) {
        icn.innerStyle = {
          "width": width ? "100%" : undefined,
          "height": height ? "100%" : undefined
        }
      }
      // font size
      else if ('font' == icn.type) {
        let fsz = icn.fontSize || this.fontSize
        icn.innerStyle = {
          "font-size": Ti.Css.toSize(fsz)
        }
      }

      return icn
    },
    //---------------------------------------------------
  },
  methods: {
    //---------------------------------------------------
    OnClickTop($event) {
      if(this.stopPropagation) {
        $event.stopPropagation()
      }
      if (this.notifyName) {
        this.$notify(this.notifyName, this.notifyConf)
      }
    },
    //---------------------------------------------------
    async evalMyValue() {
      let val = Ti.Util.fallbackNil(this.value, this.defaultValue)
      // Translate by dict
      if (this.Dict) {
        this.myValue = await this.Dict.getItemIcon(val)
      }
      // Normal value
      else {
        this.myValue = val
      }
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  watch: {
    "value": {
      handler: "evalMyValue",
      immediate: true
    }
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'tiny-wn-album.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/tiny-wn-album.mjs'] = (function(){
const ALBUM_PREFIX = "album";
////////////////////////////////////////////////////
async function pickAlbumAndInsertToDoc(editor, {
  base = "~",
  autoCreate = null,
  fallbackPath,
}) {
  // Check base
  if (_.isPlainObject(autoCreate)) {
    let oBase = await Wn.Io.loadMeta(base)
    if (!oBase) {
      let pph = Ti.Util.getParentPath(base)
      let dnm = Ti.Util.getFileName(base)
      let baseMeta = _.assign({}, autoCreate, {
        race: 'DIR', nm: dnm
      })
      let baseJson = JSON.stringify(baseMeta)
      let cmdText = `o @create '${baseJson}' -p ${pph} -auto @json -cqn`
      oBase = await Wn.Sys.exec2(cmdText, { as: "json" })
    }
    base = oBase
  }

  // Show dialog
  let reo = await Wn.OpenObjSelector(base, {
    icon: "far-images",
    title: "i18n:album-insert",
    position: "top",
    width: "95%",
    height: "95%",
    multi: false,
    filter: o => "DIR" == o.race,
    search: {
      filter: {
        match: {
          race: "DIR"
        }
      },
      sorter: { nm: 1 }
    },
    fallbackPath
  })

  // User canceled
  if (_.isEmpty(reo)) {
    return
  }

  // Do insert image
  editor.execCommand("InsertAlbum", editor, reo[0])
}
//--------------------------------------------------
function GetAlbumWidget($album) {
  return Ti.Widget.Album.getOrCreate($album, {
    attrPrefix: "wn-obj-",
    itemToPhoto: {
      name: "=title",
      link: "=href",
      thumb: "->/o/content?str=${thumb}",
      src: "->/o/content?str=id:${id}",
      brief: "=brief"
    }
  })
}
//--------------------------------------------------
async function UpdateAlbumTagInnerHtml(editor, $album, settings, {
  album, photos, items, reloadMeta
} = {}) {
  //console.log("UpdateAlbumTagInnerHtml")
  // Bind widget and get the data
  let AB = GetAlbumWidget($album);
  // If insert new album, the params will be passed
  if (!album) {
    album = AB.getData()
    if (reloadMeta) {
      album = await Wn.Sys.exec2(`o id:${album.id} @json -cqn`, { as: "json" })
      album.name = album.title || album.nm
      AB.setData(album)
    }
  } else {
    album.name = album.title || album.nm
    AB.setData(album)
  }
  // Mark content editable
  $album.contentEditable = false

  // Explain items to photos
  if (items) {
    photos = AB.covertToPhotos(items)
  }

  // Reload photo from remote
  if (_.isEmpty(photos)) {
    // Show loading
    AB.showLoading()

    // Load and rendering
    settings.load(album).then((data) => {
      //console.log(data)
      AB.renderItems(data)
      // Force sync content
      editor.__rich_tinymce_com.syncContent()
    })
  }
  // Just render
  else {
    AB.renderPhotos(photos)
    // Force sync content
    editor.__rich_tinymce_com.syncContent()
  }
}
////////////////////////////////////////////////////
function CmdInsertAlbum(editor, oAlbum) {
  if (!oAlbum)
    return
  //console.log("CmdInsertAlbum", oAlbum)
  // Prepare range
  let rng = editor.selection.getRng()

  // Create image fragments
  let $doc = rng.commonAncestorContainer.ownerDocument
  let $album = Ti.Dom.createElement({
    tagName: "div",
    attrs: {
      tiAlbumType: "album"
    },
    className: "wn-media as-album"
  }, $doc)

  // Update INNER HTML
  UpdateAlbumTagInnerHtml(editor, $album, editor.wn_album_settings, {
    album: oAlbum
  })

  // Remove content
  if (!rng.collapsed) {
    rng.deleteContents()
  }

  // Insert fragments
  rng.insertNode($album)

}
////////////////////////////////////////////////////
function CmdReloadAlbum(editor, settings) {
  let $album = GetCurrentAlbumElement(editor)
  // Guard
  if (!_.isElement($album)) {
    return
  }
  // Reload content
  UpdateAlbumTagInnerHtml(editor, $album, settings)
}
////////////////////////////////////////////////////
function GetCurrentAlbumElement(editor) {
  let sel = editor.selection
  let $nd = sel.getNode()
  // Guard
  return Ti.Dom.closest($nd, (el) => {
    return 'DIV' == el.tagName && Ti.Dom.hasClass(el, "wn-media", "as-album")
  }, { includeSelf: true })
}
///////////////////////////////////////////////////
function CmdSetAlbumStyle(editor, css = {}) {
  let $album = GetCurrentAlbumElement(editor)
  // Guard
  if (!_.isElement($album)) {
    return
  }
  // Clear float
  Ti.Dom.setStyle($album, css)
  // Force sync content
  editor.__rich_tinymce_com.syncContent()
}
////////////////////////////////////////////////////
async function CmdShowAlbumProp(editor, settings) {
  let $album = GetCurrentAlbumElement(editor)
  // Guard
  if (!_.isElement($album)) {
    return
  }
  // Gen the properties
  let AB = GetAlbumWidget($album)
  let data = AB.getData()
  //console.log(data)

  //console.log(data)
  // Show dialog
  // Show dialog
  let reo = await Ti.App.Open({
    icon: "far-images",
    title: "i18n:hmk-w-edit-album-prop",
    width: "37%",
    height: "100%",
    position: "right",
    closer: "left",
    clickMaskToClose: true,
    result: data,
    model: { prop: "data", event: "change" },
    comType: "TiForm",
    comConf: Ti.Widget.Album.getEditFormConfig(ALBUM_PREFIX),
    components: []
  })

  // 用户取消
  if (!reo)
    return

  //................................................
  let photos = AB.getPhotos()
  //console.log("AB.getPhotos", photos)
  UpdateAlbumTagInnerHtml(editor, $album, settings, {
    album: reo, photos
  })
  //................................................
  // clean cache
  $album.removeAttribute("data-mce-src")
  $album.removeAttribute("data-mce-style")
  //................................................
  // Force sync content
  editor.__rich_tinymce_com.syncContent()
}
////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  name: "wn-album",
  //------------------------------------------------
  init: function (conf = {}) {
  },
  //------------------------------------------------
  setup: function (editor, url) {
    //..............................................
    let settings = _.assign({
      meta: "~",
      sort: {
        "sort": 1
      }
    }, _.get(editor.settings, "wn_album_config"));
    //..............................................
    // Reload meta content
    // Check meta
    settings.load = async function ({ id }) {
      let match = JSON.stringify({
        pid: id,
        race: "FILE",
        mime: "^image\/"
      })
      let KF = '^(id|thumb(_obj)?|sha1|href|nm|title|brief|mime|tp|width|height|len)$'
      let sortJson = JSON.stringify(settings.sort) || "{}"
      return await Wn.Sys.exec2(
        `o @query '${match}' -sort '${sortJson}' @refer thumb @json '${KF}' -cqnl`, {
        as: "json"
      })
    }
    editor.wn_album_settings = settings
    //..............................................
    // Register toolbar actions
    editor.ui.registry.addButton("WnAlbumPick", {
      icon: "images-regular",
      tooltip: Ti.I18n.text("i18n:album-insert"),
      onAction: function (menuBtn) {
        pickAlbumAndInsertToDoc(editor, settings)
      },
    })
    //..............................................
    let {
      CMD_SET_STYLE, CMD_RELOAD, CMD_PROP
    } = Ti.Widget.Album.registryTinyMceMenuItem(editor, {
      prefix: ALBUM_PREFIX,
      settings,
      GetCurrentAlbumElement
    })
    //..............................................
    // Register plugin command
    editor.addCommand("InsertAlbum", CmdInsertAlbum)
    editor.addCommand(CMD_SET_STYLE, CmdSetAlbumStyle)
    editor.addCommand(CMD_RELOAD, CmdReloadAlbum)
    editor.addCommand(CMD_PROP, CmdShowAlbumProp)
    //..............................................
    // editor.on("SetContent", function() {
    //   console.log("SetContent album")
    //   let els = editor.$('.wn-media.as-album')
    //   for(let i=0; i<els.length; i++) {
    //     let el = els[i]
    //     UpdateAlbumTagInnerHtml(editor, el, settings)
    //   }
    // })
    let $vm = editor.__rich_tinymce_com
    $vm.registerContentCallback("wn-album", function () {
      //console.log("SetContent album", editor.isDirty())
      let els = editor.$('.wn-media.as-album')
      for (let i = 0; i < els.length; i++) {
        let el = els[i]
        UpdateAlbumTagInnerHtml(editor, el, settings)
      }
    })
    //..............................................
    return {
      getMetadata: function () {
        return {
          name: 'Wn Album plugin',
          url: 'http://site0.cn'
        };
      }
    };
    //..............................................
  }
  //------------------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-chart-combo-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/chart/combo/ti-chart-combo-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "data": {
    type: Array,
    default: () => []
  },
  "name": {
    type: String,
    default: undefined
  },
  "type": {
    type: String,
    default: undefined
  },
  "date": {
    type: [Number, String, Date],
    default: undefined
  },
  "span": {
    type: String,
    default: "7d"
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  // array -> droplist
  // object/string -> single title
  "nameList": {
    type: Array,
    default: () => []
  },
  "maxDate": {
    type: [Number, String, Date],
    default: undefined
  },
  "spanOptions": {
    type: Array,
    default: () => [{
      text: "7",
      value: "7d"
    }, {
      text: "30",
      value: "30d"
    }, {
      text: "60",
      value: "60d"
    }, {
      text: "90",
      value: "90d"
    }, {
      text: "180",
      value: "180d"
    }, {
      text: "360",
      value: "360d"
    }]
  },
  "chartDefines": {
    type: Object,
    default: undefined
  },
  "chartTypes": {
    type: [Array, String],
    default: "pie,bar,line"
  },
  // {pie:{..}, bar:{..}, line:{..}  ...}
  "chartOptions": {
    type: Object,
    default: () => ({})
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------

  //-----------------------------------
  // Measure
  //-----------------------------------
  "nameListWidth": {
    type: [String, Number],
    default: "2rem"
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'widget-sharebar.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/widget/sharebar/widget-sharebar.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data: () => ({
    qrcodeImgSrc: undefined
  }),
  /////////////////////////////////////////
  props: {
    "title": {
      type: String,
      default: null
    },
    "items": {
      type: Array,
      default: () => []
    },
    "apiBase": {
      type: String,
      default: "/"
    },
    "params": {
      type: Object,
      default: () => ({})
    }
  },
  /////////////////////////////////////////
  computed: {
    //------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //------------------------------------
    TheItems() {
      return this.evalItems(this.items);
    },
    //------------------------------------
    ShareTargets() {
      return {
        //..............................
        "facebook": {
          iconClass: "fab fa-facebook-f",
          link: "https://www.facebook.com/sharer/sharer.php",
          params: {
            u: "=url",
            title: "=title"
          }
        },
        //..............................
        "twitter": {
          iconClass: "fab fa-twitter",
          link: "https://twitter.com/share",
          params: {
            url: "=url",
            text: "=title"
          }
        },
        //..............................
        "whatsapp": {
          iconClass: "fab fa-whatsapp",
          link: "https://api.whatsapp.com/send",
          params: {
            text: "=url"
          }
        },
        //..............................
        "mix": {
          iconClass: "fab fa-mix",
          link: "https://mix.com/mixit",
          params: {
            url: "=url"
          }
        },
        //..............................
        "linkedin": {
          iconClass: "fab fa-linkedin-in",
          link: "https://www.linkedin.com/cws/share",
          params: {
            url: "=url"
          }
        },
        //..............................
        "wechat": {
          iconClass: "fab fa-weixin",
          link: ({ url }) => {
            let src = `${this.apiBase}qrcode?s=${url}`;
            this.qrcodeImgSrc = src;
          },
          params: {
            url: "=url"
          }
        },
        //..............................
        "print": {
          iconClass: "fas fa-print",
          link: ()=>{
            window.print();
          }
        },
        //..............................
        "sharelink": {
          iconClass: "fas fa-link",
          link: ({ url })=>{
            console.log(url)
            Ti.Be.writeToClipboard(url)
          },
          params: {
            url: "=url"
          }
        }
        //..............................
      };
    }
    //------------------------------------
  },
  /////////////////////////////////////////
  methods: {
    //------------------------------------
    OnClickItem({ link, params }) {
      if (!link) return;

      let url = window.location.href;
      let title = window.document.title;
      params = Ti.Util.explainObj({ url, title }, params);
      //console.log("haha", params)
      if (_.isString(link)) {
        Ti.Be.Open(link, { params });
      } else if (_.isFunction(link)) {
        link.apply(this, [params]);
      }
    },
    //------------------------------------
    evalItems(items) {
      let list = [];
      _.forEach(items, (it, index) => {
        // Customized item
        if (_.isPlainObject(it)) {
          list.push(it);
        }
        // built-in
        else if (_.isString(it)) {
          let key = it;
          let li = _.get(this.ShareTargets, key);
          let params = _.get(this.params, key);
          //................................
          if (li) {
            let it = _.cloneDeep(li);
            it.className = `as-${key}`
            if (params) {
              _.assign(it, { params });
            }
            list.push(it);
          }
        }
        //................................
      });
      return list;
    }
    //------------------------------------
  }
  /////////////////////////////////////////
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'site-main.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/lib/www/com/site-main.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  provide: function () {
    let ctx = _.cloneDeep(this.$store.state)
    let { langCase, lang } = ctx
    ctx.lang = _[`${langCase || "snake"}Case`](lang)
    return Ti.Util.explainObj(ctx, this.provide)
  },
  /////////////////////////////////////////
  computed: {
    ...Vuex.mapState({
      "siteId": state => state.siteId,
      "logo": state => state.logo,
      "lang": state => state.lang,
      "formatPageUrl": state => state.formatPageUrl,
      "analyzers": state => state.analyzers,
      "langName": state => state.langName,
      "utils": state => state.utils,
      "page": state => state.page,
      "shop": state => state.shop,
      "auth": state => state.auth,
      "domain": state => state.domain,
      "rs": state => state.rs,
      "nav": state => state.nav,
      "vars": state => state.vars,
      "data": state => state.data,
      "base": state => state.base,
      "apiBase": state => state.apiBase,
      "cdnTmpl": state => state.cdnTmpl,
      "captcha": state => state.captcha,
      "schema": state => state.schema,
      "provide": state => state.provide,
      "blocks": state => state.blocks,
      "loading": state => state.loading,
      "pageReady": state => state.pageReady
    }),
    ...Vuex.mapState("page", [
      "pageUri"
    ]),
    //-------------------------------------
    // Mapp The Getters
    ...Vuex.mapGetters([
      "actions",
      "getUrl",
      "getApiUrl"
    ]),
    ...Vuex.mapGetters("viewport", [
      "isViewportModeDesktop",
      "isViewportModeTablet",
      "isViewportModePhone",
      "isViewportModeDesktopOrTablet",
      "isViewportModePhoneOrTablet"
    ]),
    // ...Vuex.mapState("page", [
    //   "pageUri"
    // ]),
    // ...Vuex.mapGetters("viewport", [
    //   "isViewportModeDesktop",
    //   "isViewportModeTablet",
    //   "isViewportModePhone",
    //   "isViewportModeDesktopOrTablet",
    //   "isViewportModePhoneOrTablet"
    // ]),
    //-------------------------------------
    TopClass() {
      return this.getTopClass({
        "as-phone": this.isViewportModePhone,
        "as-tablet": this.isViewportModeTablet,
        "as-desktop": this.isViewportModeDesktop
      })
    },
    //-------------------------------------
    State() {
      return Ti.App(this).$store().state
    },
    //-------------------------------------
    PayReturnUrl: function () {
      let st = this.$store.state
      if (st.payReturnUrl) {
        return Ti.Util.explainObj(st, st.payReturnUrl)
      }
    },
    //-------------------------------------
    SiteLogo() {
      if (this.logo && /\.(png|jpe?g)$/.test(this.logo))
        return this.getUrl(this.logo)
      return this.logo || "zmdi-globe"
    },
    //-------------------------------------
    // Page Navigation
    // SiteNav() {
    //   let nav = {}
    //   _.forEach(this.$store.state.nav, (v, k)=>{
    //     nav[k] = Ti.WWW.explainNavigation(v, this.base)
    //   })
    //   return nav
    // },
    //-------------------------------------
    // The template of captcha to prevent robot
    SiteCaptcha() {
      let path = Ti.S.renderBy(this.captcha, { site: this.siteId })
      if (path.startsWith("/"))
        return path
      return this.getApiUrl(path)
    },
    //-------------------------------------
    SiteLoginMode() {
      // Already login, then bind the phone 
      if (this.auth.me) {
        return "bind_phone"
      }
      return "login_by_passwd"
    },
    //-------------------------------------
    PageFnSet() {
      Ti.AddGlobalFuncs(this.utils)
      return Ti.GlobalFuncs()
    },
    //-------------------------------------
    GUIContext() {
      return _.assign({
        PayReturnUrl: this.PayReturnUrl,
        SiteLogo: this.SiteLogo,
        SiteCaptcha: this.SiteCaptcha,
        SiteLoginMode: this.SiteLoginMode,
        PageFnSet: this.PageFnSet,
        isViewportModeDesktop: this.isViewportModeDesktop,
        isViewportModeTablet: this.isViewportModeTablet,
        isViewportModePhone: this.isViewportModePhone,
        isViewportModeDesktopOrTablet: this.isViewportModeDesktopOrTablet,
        isViewportModePhoneOrTablet: this.isViewportModePhoneOrTablet
      }, this.State)
    },
    //-------------------------------------
    // Format current pageGUI
    PageGUI() {
      let page = this.page
      //.....................................
      // Without current page
      if (!page || !page.layout) {
        return {}
      }
      //.....................................
      // Get layout be pageMode
      let layout = page.layout
      //.....................................
      // Apply "@BLOCK(xxx)" in panels and layout blocks
      if (layout) {
        // Define the methods
        const ExplainBlock = (anyValue) => {
          // String : Check the "@BLOCK(xxx)" 
          if (_.isString(anyValue)) {
            let m = /^@BLOCK\(([^ ]+)\)$/.exec(anyValue)
            if (m) {
              let blockName = m[1]
              return _.get(this.blocks, blockName)
            }
          }
          // Array 
          else if (_.isArray(anyValue)) {
            return _.map(anyValue, ExplainBlock)
          }
          // Object
          else if (_.isPlainObject(anyValue)) {
            return _.mapValues(anyValue, ExplainBlock)
          }
          // Others return directly
          return anyValue
        }
        // do without layout
        layout = ExplainBlock(layout)
      }
      //.....................................
      // Gen the GUI object
      let gui = {
        className: page.className,
        defaultFlex: "=page.gui.flex?nil",
        defaultOverflow: "=page.gui.overflow?none",
        activeElement: "=page.activeElement",
        layout,
        schema: {},
        canLoading: true
      }

      //.....................................
      // assign schema
      _.assign(gui.schema, this.schema, page.schema)

      //.....................................
      // explain it
      //console.log("site-main: explain it!", gui);
      let theGUI = Ti.Util.explainObj(this.GUIContext, gui, {
        fnSet: this.PageFnSet
      })
      //console.log("pageGUI", formedGUI)
      return theGUI
    },
    //-------------------------------------
    PageShown() {
      let re = Ti.Util.explainObj(this.GUIContext, this.page.shown)
      return re
    }
    //-------------------------------------
  },
  /////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnMouseRightClick($evn) {
      // Forbid context menu
      if (false === this.page.contextMenu) {
        $evn.preventDefault();
      }
      // Forbid context menu and show alert
      else if (_.isString(this.page.contextMenu)) {
        $evn.preventDefault();
        Ti.Toast.Open(this.page.contextMenu, "warn");
      }
    },
    //--------------------------------------
    async showBlock(name) {
      Ti.App(this).dispatch("page/showBlock", name)
    },
    //--------------------------------------
    async hideBlock(name) {
      Ti.App(this).dispatch("page/hideBlock", name)
    },
    //-------------------------------------
    // Handle by EventBubble
    __on_events(name, ...args) {
      //console.log("site-main.__on_events", name, ...args)
      // ShowBlock
      if ("block:show" == name) {
        return blockName => this.showBlock(blockName)
      }
      // HideBlock
      else if ("block:hide" == name) {
        return blockName => this.hideBlock(blockName)
      }
      // Dispatch actions
      else {
        return (...args) => {
          this.invokeAction(name, args)
        }
      }
    },
    //-------------------------------------
    async invokeAction(name, args = []) {
      await Ti.App(this).dispatch("invokeAction", {
        name, args
      })
    },
    //-------------------------------------
    pushBrowserHistory(pageTitle) {
      let his = window.history
      //...................................
      if (!his) {
        return
      }
      //...................................
      // Get current location
      let loc = window.location
      let loPath = [loc.pathname, loc.search, loc.hash].join("")
      //...................................
      //let pgLink = this.getUrl(this.pageLink)
      let pgLink = this.pageUri
      //...................................
      if (this.formatPageUrl) {
        let fmtUrl = Ti.Util.genInvoking(this.formatPageUrl)
        if (_.isFunction(fmtUrl)) {
          pgLink = fmtUrl(pgLink, this.page)
        }
      }
      //...................................
      if (loPath != pgLink || !his.state) {
        let pg = _.pick(this.page, "pageUri", "href", "path", "params", "anchor");
        pg = _.cloneDeep(pg)
        //console.log("pg", JSON.stringify(pg))
        // console.log("pageTitle", pageTitle)
        // console.log("pgLink", pgLink)
        his.pushState(pg, pageTitle, pgLink)
      }
      //...................................
    },
    //-------------------------------------
    updateBodyStyle() {
      let bodyStyleSheet = {}
      if (this.page.bodyStyle) {
        bodyStyleSheet = Ti.Util.explainObj(this, this.page.bodyStyle)
      }
      let cssRule = Ti.Css.renderCssStyleSheet(bodyStyleSheet)
      //console.log("cssRule", cssRule)
      // Find the body style rule
      let $style = Ti.Dom.find('style.ti-site-body')
      if (!_.isElement($style)) {
        $style = Ti.Dom.createElement({
          $p: this.$el.ownerDocument.body,
          className: "ti-site-body",
          tagName: "style",
          props: {
            rel: "stylesheet",
            type: "text/css"
          }
        })
      }
      $style.innerHTML = cssRule
    },
    //-------------------------------------
    invokeAnalyzers() {
      // Guard
      if (_.isEmpty(this.analyzers))
        return

      // Clean all
      let $scripts = Ti.Dom.findAll('script[ti-analyzer]')
      for (let $script of $scripts) {
        Ti.Dom.remove($script)
      }

      // Create
      for (let an of this.analyzers) {
        //console.log("an:", an)
        let src = an
        let $script = Ti.Dom.createElement({
          tagName: "script",
          attrs: {
            "ti-analyzer": true
          },
          props: { src }
        })
        Ti.Dom.appendToHead($script)
      }
    },
    //-------------------------------------
  },
  /////////////////////////////////////////
  watch: {
    // Page changd, update document title
    "page.finger": function () {
      //console.log("-> ", this.page.title)
      let pageTitle = Ti.Util.explainObj(this, this.page.title)
      if (!Ti.Util.isNil(pageTitle)) {
        document.title = pageTitle
      }
      this.pushBrowserHistory(pageTitle)

      this.updateBodyStyle()

      // TODO : Maybe here to embed the BaiDu Tongji Code
      this.invokeAnalyzers()
    }
  },
  /////////////////////////////////////////
  mounted: function () {
    // Watch the browser "Forward/Backward"
    // The state(page) pushed by $store.dispath("navTo")
    window.onpopstate = (evt) => {
      let page = evt.state
      //console.log("popstate", page)
      if (page && page.href) {
        //console.log("window.onpopstate", page)
        let app = Ti.App(this)
        app.dispatch("navTo", {
          type: "page",
          value: page.href,
          params: page.params,
          anchor: page.anchor
        })
      }
    }
  }
  /////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-input-langs.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/langs/ti-input-langs.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data: () => ({
    myFields:[],
    myTexts: {},
    myValue: {}
  }),
  ////////////////////////////////////////////////////
  props: {
    //------------------------------------------------
    // Data
    //------------------------------------------------
    "value": {
      type: Object
    },
    "options": {
      type: [String, Array],
      default: () => [
        {
          "text": "i18n:lang-en-us",
          "value": "en_us"
        },
        {
          "text": "i18n:lang-zh-cn",
          "value": "zh_cn"
        }
      ]
    },
    //------------------------------------------------
    // Behaviors
    //------------------------------------------------
    "mapping": {
      type: [Object, Function],
    },
    "explainMapping": {
      type: Boolean,
      default: true
    },
    //------------------------------------------------
    // Aspect
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    OptionItemMapping() {
      if (_.isFunction(this.mapping)) {
        return this.mapping
      }
      if (_.isObject(this.mapping)) {
        if (this.explainMapping) {
          return (li) => {
            return Ti.Util.explainObj(li, this.mapping)
          }
        }
        return (li) => ({
          text: _.get(this.mapping, li.text) || li.text,
          value: _.get(this.mapping, li.value) || li.value
        })
      }
      return v => v
    },
    //------------------------------------------------
    Dict() {
      return Ti.DictFactory.CreateDictBy(this.options);
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    async evalPairValue() {
      // Eval list
      let list = await this.Dict.getData()
      let flds =[]
      let vals = {}
      for (let li of list) {
        let it = this.OptionItemMapping(li)
        let key = it.value
        let val = _.get(this.value, key)
        vals[key] = val
        flds.push({
          title  : it.text,
          name : it.value
        })
      }
      this.myFields = flds
      this.myValue = vals
    },
    //------------------------------------------------
    tryEvalPairValue(newVal, oldVal) {
      if (!_.isEqual(newVal, oldVal)) {
        this.evalPairValue()
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    "value": "tryEvalPairValue",
    "options": "tryEvalPairValue",
  },
  ////////////////////////////////////////////////////
  mounted() {
    this.evalPairValue()
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'm-th-obj.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/th/obj/m-th-obj.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////
  getters: {
    //--------------------------------------------
    isInRecycleBin(state) {
      if (-1 == _.get(state.meta, "th_live")) {
        return true
      }
      if (-1 == _.get(state.fixedMatch, "th_live")) {
        return true
      }
      if (-1 == _.get(state.filter, "th_live")) {
        return true
      }
      return false
    },
    //--------------------------------------------
    isPagerEnabled(state) {
      if (!state.pager) {
        return false
      }
      if (!(state.pager.pn > 0 || state.pager.pageNumber > 0)) {
        return false
      }
      if (!(state.pager.pgsz > 0 || state.pager.pageSize > 0)) {
        return false
      }
      return true
    },
    //--------------------------------------------
    exportDataDir(state){
      return `id:${state.thingSetId}/tmp/export/`;
    },
    //--------------------------------------------
    searchPageNumber(state) {
      return Ti.Util.getFallback(state.pager, "pageNumber", "pn") || 1
    },
    //--------------------------------------------
    searchPageSize(state) {
      return Ti.Util.getFallback(state.pager, "pageSize", "pgsz") || 50
    },
    //--------------------------------------------
    isLongPager(state) {
      if (state.pager && state.pager.pageSiz > 0 && state.pager.pageNumber > 0) {
        return true
      }
      return false
    },
    //--------------------------------------------
    isHardRemove(state) {
      return _.get(state, "schema.behavior.hardRemove")
    },
    //--------------------------------------------
    isCanRemove(state) {
      let pvg = _.get(state.pvg, "remove")
      return Wn.Session.isPvgCan(pvg)
    },
    //--------------------------------------------
    isCanCreate(state) {
      let pvg = _.get(state.pvg, "create")
      return Wn.Session.isPvgCan(pvg)
    },
    //--------------------------------------------
    isCanUpdate(state) {
      let pvg = _.get(state.pvg, "update")
      return Wn.Session.isPvgCan(pvg)
    },
    //--------------------------------------------
    isCanSave(state) {
      let pvg = _.get(state.pvg, "save")
      if (pvg) {
        return Wn.Session.isPvgCan(pvg)
      }
    },
    //--------------------------------------------
    contentLoadInfo(state) {
      if (state.contentPath) {
        // fixed content path
        if (_.isString(state.contentPath)) {
          return {
            path: state.contentPath
          }
        }
        // Try find content path
        let canPaths = _.concat([], state.contentPath)
        for (let canPath of canPaths) {
          let { test, path, mime } = canPath
          if (!test || Ti.AutoMatch.test(test, state)) {
            let ctx = _.assign(Wn.Session.env(), state)
            let ph = Ti.Util.explainObj(ctx, path)
            if ('<self>' != ph) {
              path = Ti.Util.appendPath(`${state.dataHome}`, ph)
            } else {
              path = ph
            }
            return { path, mime }
          }
        }
      }
    },
    //--------------------------------------------
    contentLoadPath(state, getters) {
      return _.get(getters, "contentLoadInfo.path")
    },
    //--------------------------------------------
    hasContentLoadMeta(state, getters) {
      let path = _.get(getters, "contentLoadPath")
      if ("<self>" == path) {
        return state.meta ? true : false
      }
      return path ? true : false
    },
    //--------------------------------------------
    notContentLoadMeta(state, getters) {
      let has = _.get(getters, "hasContentLoadMeta")
      return !has
    },
    //--------------------------------------------
    hasCurrentMeta(state) {
      return state.meta && state.dataHome ? true : false
    },
    //--------------------------------------------
    checkedItems(state) {
      let ids = Ti.Util.getTruthyKeyInMap(state.checkedIds)
      let list = _.filter(state.list, (li) => ids[li.id])
      return list
    },
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  actions: {
    //--------------------------------------------
    changeMetaField({ dispatch }, { name, value } = {}) {
      if (name) {
        let meta = _.set({}, name, value)
        dispatch("changeMeta", meta)
      }
    },
    //--------------------------------------------
    changeMeta({ state, commit }, newMeta) {
      if (!_.isEmpty(newMeta)) {
        if (state.meta) {
          commit("assignMeta", newMeta)
          //commit("syncStatusChanged")
          commit("setListItem", state.meta)
        }
      }
    },
    //--------------------------------------------
  }
  ////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wizard-step.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/wizard/com/wizard-step/wizard-step.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////
  props : {
    "index" : {
      type : Number,
      default : -1
    },
    "stepKey" : {
      type : String,
      default : undefined
    },
    "dataKey" : {
      type : String,
      default : undefined
    },
    "title" : {
      type : String,
      default : undefined
    },
    "serializer": {
      type: Function,
      default: undefined
    },
    "comType" : {
      type : String,
      default : "ti-label"
    },
    "comConf" : {
      type : Object,
      default : ()=>({})
    }
  },
  ///////////////////////////////////////////////////
  methods : {
    //----------------------------------------------
    OnChange(payload) {
      //console.log("steup change", payload)
      if(_.isFunction(this.serializer)) {
        payload = this.serializer(payload)
      }
      if(this.dataKey) {
        payload = _.set({}, this.dataKey, payload)
      }
      //console.log(payload)
      this.$emit("data:change", payload)
    }
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch : {
    "title": {
      handler: function(){
        this.$notify("change:title", this.title)
      },
      immediate: true
    }
  }
  ///////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'hm-config-io.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/hm/config/io/hm-config-io.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  data: ()=>({
    oHome : undefined
  }),
  /////////////////////////////////////////
  props : {
    "home" : {
      type: [String, Object],
      default: undefined
    }
  },
  /////////////////////////////////////////
  computed : {
    //------------------------------------
    isViewReady() {
      return this.oHome ? true : false
    },
    //------------------------------------
    FilesetListConf() {
      return {
        meta : "=meta",
        viewReady : this.isViewReady,
        metaType : null,
        createTip : "请输入新项目的名称",
        listTitle : "映射列表",
        listSize : 200,
        detailIcon  : "fas-traffic-light",
        detailTitle : "映射详情",
        detailType : "HmConfigIoDetail",
        detailConf : {
          
        }
      }
    }
    //------------------------------------
  },
  /////////////////////////////////////////
  methods : {
    //------------------------------------
    OnTabsInit($tabs) {
      this.$tabs = $tabs;
    },
    //------------------------------------------------
    doCreate(payload) {
      let $mcom = this.$tabs.$MainCom()
      if($mcom) {
        $mcom.doCreate(payload)
      }
    },
    //------------------------------------------------
    doDelete(payload) {
      let $mcom = this.$tabs.$MainCom()
      if($mcom) {
        $mcom.doDelete(payload)
      }
    },
    //------------------------------------------------
    doRename(payload) {
      let $mcom = this.$tabs.$MainCom()
      if($mcom) {
        $mcom.doRename(payload)
      }
    },
    //------------------------------------------------
    async openContentEditor() {
      let $mcom = this.$tabs.$MainCom()
      if($mcom && $mcom.hasCurrent) {
        return await $mcom.openContentEditor()
      }
    },
    //------------------------------------------------
    async openCurrentMeta() {
      let $mcom = this.$tabs.$MainCom()
      if($mcom && $mcom.hasCurrent) {
        return await $mcom.openCurrentMeta()
      }
      await Ti.App(this).dispatch("current/openMetaEditor")
    },
    //------------------------------------------------
    async reloadAll() {
      Ti.App(this).commit("current/setStatus", {reloading:true})
      // Reload self
      await this.reload()

      // Reload tabs
      await this.$tabs.reload()

      // Reload main
      let $mcom = this.$tabs.$MainCom()
      if($mcom) {
        await $mcom.reload()
      }
      Ti.App(this).commit("current/setStatus", {reloading:false})
    },
    //------------------------------------
    async reload() {
      if(this.home) {
        if(_.isString(this.home)) {
          this.oHome = await Wn.Io.loadMeta(this.home)
        } else {
          this.oHome = _.cloneDeep(this.home)
        }
      }
    }
    //------------------------------------
  },
  /////////////////////////////////////////
  watch : {
    "home" : {
      handler : "reload",
      immediate : true
    }
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'site-config.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/hmaker/website/mod/site-config/site-config.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////
  mutations : {
    //----------------------------------------
    setMeta(state, meta) {
      state.meta = meta
    },
    //----------------------------------------
    setStatus(state, status) {
      state.status = _.assign({}, state.status, status)
    }
    //----------------------------------------
  }
  ////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'hm-react-editor.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/hm/react/editor/hm-react-editor.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data: () => ({
    myCurrentItemName: undefined
  }),
  ////////////////////////////////////////////////////
  props: {
    //------------------------------------------------
    // Data
    //------------------------------------------------
    "data": {
      type: Array
    },
    "currentName": {
      type: String
    },
    //------------------------------------------------
    // Behaviors
    //------------------------------------------------
    "keepStatusTo": {
      type: String
    },
    "blankAs": {
      type: Object
    },
    "blank": {
      type: Boolean
    },
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    GUILayout() {
      return {
        type: "cols",
        border: true,
        blocks: [
          {
            type: "rows",
            size: "30%",
            border: true,
            blocks: [
              {
                name: "menu",
                size: "0.42rem",
                body: "menu"
              },
              {
                name: "list",
                body: "list"
              }
            ]
          },
          {
            name: "form",
            body: "form"
          }
        ]
      }
    },
    //------------------------------------------------
    GUISchema() {
      return {
        "menu": {
          comType: "TiActionbar",
          comConf: {
            className: "pad-hs",
            items: this.ActionMenuItems,
            status: this.ActionMenuStatus
          }
        },
        "list": {
          comType: "TiList",
          comConf: {
            data: this.ReactItemList,
            display: ["<icon>", "name"],
            rowNumberBase: 1,
            currentId: this.myCurrentItemName,
            idBy: "name",
            puppetMode: true,
            dftLabelHoverCopy: false
          }
        },
        "form": {
          comType: "HmReactItem",
          comConf: {
            data: this.CurrentReactItemData
          }
        }
      }
    },
    //------------------------------------------------
    ActionMenuItems() {
      return [
        {
          icon: "zmdi-plus",
          text: "新建执行项",
          action: () => {
            this.doCreateNewItem()
          }
        },
        {},
        {
          icon: "zmdi-delete",
          enabled: {
            hasCurrent: true
          },
          action: () => {
            this.doRemoveCurrentItem()
          }
        },
        {},
        {
          icon: "fas-long-arrow-alt-up",
          enabled: {
            hasCurrent: true
          },
          disabled: {
            atFirst: true
          },
          action: () => {
            this.doMoveCurrentUp()
          }
        },
        {
          icon: "fas-long-arrow-alt-down",
          enabled: {
            hasCurrent: true
          },
          disabled: {
            atLast: true
          },
          action: () => {
            this.doMoveCurrentDown()
          }
        }
      ]
    },
    //------------------------------------------------
    ActionMenuStatus() {
      return {
        hasCurrent: this.hasCurrentItem,
        atFirst: this.isCurrentAtFirst,
        atLast: this.isCurrentAtLast
      }
    },
    //------------------------------------------------
    hasCurrentItem() { return this.CurrentReactItem ? true : false },
    isEmpty() { return _.isEmpty(this.data) },
    LastItemIndex() {
      return this.hasCurrentItem ? this.data.length - 1 : -1;
    },
    isCurrentAtFirst() {
      return this.hasCurrentItem && 0 == this.CurrentReactItemIndex
    },
    isCurrentAtLast() {
      return this.hasCurrentItem && this.LastItemIndex == this.CurrentReactItemIndex
    },
    //------------------------------------------------
    CurrentReactItem() {
      if (!this.isEmpty) {
        let index = _.findIndex(this.data, li => li.name == this.myCurrentItemName)
        if (index >= 0) {
          return {
            index, data: this.data[index]
          }
        }
      }
    },
    //------------------------------------------------
    CurrentReactItemIndex() {
      if (this.hasCurrentItem) {
        return this.CurrentReactItem.index
      }
    },
    //------------------------------------------------
    CurrentReactItemData() {
      if (this.hasCurrentItem) {
        return this.CurrentReactItem.data
      }
    },
    //------------------------------------------------
    ReactItemList() {
      let list = []
      _.forEach(this.data, (it, index) => {
        list.push({
          key: it.name || `RI_${index}`,
          icon: it.icon || 'fas-bolt',
          name: it.name
        })
      })
      return list
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    OnListSelect({ currentId }) {
      this.myCurrentItemName = currentId
    },
    //------------------------------------------------
    OnFormFieldChange() { },
    //------------------------------------------------
    OnFormChange(item) {
      // Guard
      if (!this.hasCurrentItem) {
        return
      }

      // Update value
      let data = _.cloneDeep(this.data) || []
      data[this.CurrentReactItemIndex] = item
      this.tryNotifyChange(data)

      // Update to new name
      this.$nextTick(() => {
        this.OnListSelect({ currentId: item.name })
      })
    },
    //------------------------------------------------
    doCreateNewItem() {
      let newName = "新自动执行项"
      let data = _.cloneDeep(this.data) || []
      data.push({
        name: newName
      })
      this.myCurrentItemName = newName
      this.tryNotifyChange(data)
    },
    //------------------------------------------------
    doRemoveCurrentItem() {
      // 防守
      if (!this.hasCurrentItem) {
        return
      }
      // 找到下一个要高亮的节点
      let itName = this.myCurrentItemName
      let { index, item } = Ti.Util.findNextItemBy(this.data, li => li.name == itName)

      // 更新数据
      let data = _.filter(this.data, li => li.name != itName)
      this.tryNotifyChange(data)

      // 更新当前选中
      if (index >= 0 && item.name) {
        this.myCurrentItemName = item.name
      }
    },
    //------------------------------------------------
    doMoveCurrentUp() {
      // 防守
      if (!this.hasCurrentItem || this.isCurrentAtFirst) {
        return
      }
      // 获取当前下标
      let itName = this.myCurrentItemName
      let index = _.findIndex(this.data, li => li.name == itName)

      // 更新数据： 与前面交换
      let data = _.cloneDeep(this.data)
      let it0 = data[index]
      data[index] = data[index - 1]
      data[index - 1] = it0
      this.tryNotifyChange(data)
    },
    //------------------------------------------------
    doMoveCurrentDown() {
      // 防守
      if (!this.hasCurrentItem || this.isCurrentAtLast) {
        return
      }
      // 获取当前下标
      let itName = this.myCurrentItemName
      let index = _.findIndex(this.data, li => li.name == itName)

      // 更新数据： 与前面交换
      let data = _.cloneDeep(this.data)
      let it0 = data[index]
      data[index] = data[index + 1]
      data[index + 1] = it0
      this.tryNotifyChange(data)
    },
    //------------------------------------------------
    tryNotifyChange(data) {
      if (!_.isEqual(this.data, data)) {
        this.$notify("change", data)
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    "currentName": {
      handler: function (newVal, oldVal) {
        //console.log("update current")
        if (!Ti.Util.isNil(newVal)) {
          this.myCurrentItemName = newVal
        }
      },
      immediate: true
    },
    "myCurrentItemName": function (newVal, oldVal) {
      //console.log(newVal, oldVal)
      if (this.keepStatusTo && !_.isEqual(newVal, oldVal)) {
        if (Ti.Util.isNil(newVal)) {
          Ti.Storage.local.remove(this.keepStatusTo)
        } else {
          Ti.Storage.local.set(this.keepStatusTo, newVal)
        }
      }
    }
  },
  ////////////////////////////////////////////////////
  mounted: function () {
    if (this.keepStatusTo && Ti.Util.isNil(this.currentName)) {
      this.myCurrentItemName = Ti.Storage.local.getString(this.keepStatusTo)
    }
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-shelf-scroller.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/shelf/scroller/web-shelf-scroller.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data: () => ({
    myScrollLeft: 0,
    myMaxScroll: 0,
    myScrollWidth: 0
  }),
  //////////////////////////////////////////
  props: {
    //-------------------------------------
    // Data
    //-------------------------------------
    "data": {
      type: Array,
      default: () => []
    },
    "currentIndex": {
      type: Number,
      default: 0
    },
    //-------------------------------------
    // Behavior
    //-------------------------------------
    // Item comType
    "comType": {
      type: String,
      default: "ti-label"
    },
    "comConf": {
      type: [Object, String],
      default: () => ({
        value: "=.."
      })
    },
    "clickItem": {
      type: [String, Function],
      default: undefined
    },
    "enterItem": {
      type: [String, Function],
      default: undefined
    },
    "leaveItem": {
      type: [String, Function],
      default: undefined
    },
    "keepScrolling": {
      type: Boolean,
      default: false
    },
    "draggable": {
      type: Boolean,
      default: true
    },
    //-------------------------------------
    // Aspect
    //-------------------------------------
    // Item count per-row
    "cols": {
      type: Number,
      default: 4
    },
    "itemWidth": {
      type: [String, Number],
      default: undefined
    },
    "iconLeft": {
      type: String,
      default: "zmdi-chevron-left"
    },
    "iconRight": {
      type: String,
      default: "zmdi-chevron-right"
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-draggable": this.draggable
      })
    },
    //--------------------------------------
    InnerStyle() {
      return {
        "left": Ti.Css.toSize2(this.myScrollLeft)
      }
    },
    //--------------------------------------
    ItemStyle() {
      if (!Ti.Util.isNil(this.itemWidth)) {
        return Ti.Css.toSizeRem100({
          "width": this.itemWidth
        })
      }
      if (this.cols > 0) {
        return {
          "width": Ti.Types.toPercent(1 / this.cols)
        }
      }
    },
    //--------------------------------------
    isLeftEnabled() { return this.myScrollLeft < 0; },
    isRightEnabled() {
      return (this.myScrollLeft + this.myMaxScroll) > this.myScrollWidth
    },
    //--------------------------------------
    BtnLeftClass() {
      return {
        "is-enabled": this.isLeftEnabled,
        "is-disabled": !this.isLeftEnabled
      }
    },
    //--------------------------------------
    BtnRightClass() {
      return {
        "is-enabled": this.isRightEnabled,
        "is-disabled": !this.isRightEnabled
      }
    },
    //--------------------------------------
    ItemList() {
      if (!_.isArray(this.data))
        return []

      let list = []
      for (let i = 0; i < this.data.length; i++) {
        let it = this.data[i]
        // let comConf = _.assign({}, this.comConf, {
        //   value: it
        // })
        let comConf = Ti.Util.explainObj({ index: i, ...it }, this.comConf)
        list.push({
          index: i,
          key: `It-${i}`,
          className: Ti.Css.mergeClassName(it.className, {
            "is-current": i == this.currentIndex
          }),
          rawData: it,
          comType: this.comType,
          comConf
        })
      }

      // Get the result
      return list
    },
    //--------------------------------------
    Draggable() {
      if (this.draggable) {
        return {
          trigger: ".scroller-inner",
          viewport: ($trigger) => {
            return Ti.Dom.closest($trigger, ".scroller-outer")
          },
          actived: (ctx) => {
            //console.log("dragging begin", ctx, ctx.x, ctx.startX)
            this.evalScrolling();
            ctx.orgLeft = this.myScrollLeft
            ctx.$viewport.setAttribute("ti-in-dragging", "yes")
            //this.$emit("drag:start")
          },
          dragging: (ctx) => {
            // console.log("dragging", scaleX)
            let { offsetX, orgLeft } = ctx
            this.myScrollLeft = orgLeft + offsetX
          },
          done: (ctx) => {
            let { viewport, $trigger, $viewport, offsetX, speed } = ctx
            // console.log("dragging done")
            $viewport.setAttribute("ti-in-dragging", "no")
            this.myScrollLeft = Math.round(ctx.evalLeftBySpeed(this.myScrollLeft))
          }
        }
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnScrollLeft() {
      // Guard
      if (!this.isLeftEnabled) {
        return
      }
      // Eval scrolling
      this.evalScrolling();
      // Do Scroll
      let step = Math.abs(this.myScrollLeft)
      step = Math.min(this.myScrollWidth, step)
      this.myScrollLeft += step
    },
    //--------------------------------------
    OnScrollRight() {
      // Guard
      if (!this.isRightEnabled) {
        return
      }
      // Eval scrolling
      this.evalScrolling();
      // Do Scroll
      let remain = this.myMaxScroll + this.myScrollLeft - this.myScrollWidth;
      let step = Math.min(this.myScrollWidth, remain)
      this.myScrollLeft -= step
    },
    //--------------------------------------
    OnClickTile(item, index) {
      if (_.isFunction(this.clickItem)) {
        this.clickItem({ item, index })
      }
      else if (_.isString(this.clickItem)) {
        this.$notify(this.clickItem, { item, index })
      }
    },
    //--------------------------------------
    OnEnterTile(item, index) {
      if (_.isFunction(this.enterItem)) {
        this.enterItem({ item, index })
      }
      else if (_.isString(this.enterItem)) {
        this.$notify(this.enterItem, { item, index })
      }
    },
    //--------------------------------------
    OnLeaveTile(item, index) {
      if (_.isFunction(this.leaveItem)) {
        this.leaveItem({ item, index })
      }
      else if (_.isString(this.leaveItem)) {
        this.$notify(this.leaveItem, { item, index })
      }
    },
    //--------------------------------------
    evalScrolling() {
      this.myMaxScroll = Math.round(this.$refs.inner.scrollWidth);
      this.myScrollWidth = Math.round(this.$refs.inner.getBoundingClientRect().width);
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "data": {
      handler: function (newData, oldData) {
        let lenNew = _.size(newData)
        let lenOld = _.size(oldData)
        if (!this.keepScrolling || !this.myScrollWidth || lenNew != lenOld) {
          this.$nextTick(() => {
            this.evalScrolling()
            this.myScrollLeft = 0;
          })
        }
      }
    }
  },
  //////////////////////////////////////////
  mounted: function () {
    this.$nextTick(() => {
      this.evalScrolling()
      this.myScrollLeft = 0;
    })
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-droptree.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/droptree/wn-droptree.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  props : {
    "multi" : {
      type : Boolean,
      default : false
    },
    "treeConf": {
      type : Object
    },
    "idBy": {
      type: String,
      default: "id"
    },
    "nameBy": {
      type: String,
      default: "name"
    },
    "childrenBy": {
      type: String,
      default: "children"
    },
    //
    // - id      : "6dywqcw.."   # Node Id
    // - path    : "a/b/c"       # Node Path
    // - axisIds : [ID,ID,ID]    # Node ancestor and self Ids
    //
    "valueType": {
      type: String,
      default: "id",
      validator: v => /^(id|path|axisIds)$/.test(v)
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    ComType() {
      return this.multi
        ? "wn-combo-multi-input"
        : "wn-combo-input"
    },
    //------------------------------------------------
    TreeDropComConf() {
      return _.assign({
        border: this.dropItemBorder ? "row" : "none",
        display: this.dropDisplay || [
          '@<thumb>', 
          'title|text|nm::flex-auto', 
          'id|value|nm::as-tip-block align-right'],
        autoOpen : true,
        showRoot : false,
        defaultOpenDepth : 3
      }, this.treeConf)
    },
    //------------------------------------------------
    TheDropDisplay() {
      if(this.dropDisplay)
        return this.dropDisplay;

      return ["@<thumb>", "title|nm"]
    },
    //------------------------------------------------
    TheValue() {
      if(this.value) {
        let val = ({
          id : (val)=> val,
          path : (val)=> {
            if(_.isArray(val)) {
              return val.join("/")
            }
            return val
          },
          axisIds : (val)=>{
            if(!_.isArray(val)) {
              val = val.split(/[,; ]/g)
            }
            return _.last(val)
          }
        })[this.valueType](this.value)
        return val
      }
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    OnValueChange(val) {
      let root = this.getTreeRoot()
      let hie = Ti.Trees.getById(root, val, {
        idBy: this.idBy,
        nameBy: this.nameBy,
        childrenBy: this.childrenBy
      })
      let v;
      if(hie) {
        v = ({
          id : (hie)=> hie.id,
          path : (hie)=> hie.path,
          axisIds : (hie)=>{
            let ids = []
            // Ancestors
            _.forEach(hie.ancestors, ({id})=>{
              if(!Ti.Util.isNil(id)) {
                ids.push(id)
              }
            })
            // Self
            if(hie.id) {
              ids.push(hie.id)
            }
            return ids
          }
        })[this.valueType](hie)
      }
      this.$notify("change", v)
    },
    //------------------------------------------------
    getMyOptionData() {
      let $comboInput = this.$children[0].$children[0]
      return $comboInput.myOptionsData || []
    },
    //------------------------------------------------
    getTreeRoot() {
      let treeData = this.getMyOptionData()
      if(_.isArray(treeData)) {
        return {children: treeData}
      }
      return treeData
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-obj-thumb.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/obj/thumb/ti-obj-thumb.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////
  props: {
    "index": {
      type: Number,
      default: -1
    },
    "id": {
      type: String,
      default: undefined
    },
    // The text to present the object
    "title": {
      type: String,
      default: undefined
    },
    // The URL of thumb
    "preview": {
      type: [String, Object, Function],
      default: "broken_image"
    },
    "href": {
      type: String,
      default: undefined
    },
    "status": {
      type: [String, Object],
      default: undefined
    },
    "progress": {
      type: Number,
      default: -1
    },
    "visibility": {
      type: String,
      default: "show"  // `show|weak|hide`
    },
    // true - alwasy show the footer part
    "showFooter": {
      type: Boolean,
      default: true
    },
    "badges": {
      type: Object,
      default: () => ({
        "NW": null,
        "NE": null,
        "SW": null,
        "SE": null
      })
    },
    "removeIcon": {
      type: [String, Object],
      default: undefined
    },
    "onTitle": {
      type: [String, Function, Boolean],
      default: undefined
    },
    "previewStyle": {
      type: Object
    }
  },
  ////////////////////////////////////////////////
  watch: {
    "preview": function () {
      this.renderLocalFile()
    }
  },
  ////////////////////////////////////////////////
  computed: {
    //--------------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-hide": ('hide' == this.visibility),
        "is-weak": ('weak' == this.visibility)
      }, () => this.status ? `is-status-${this.status}` : null)
    },
    //--------------------------------------------
    PreviewType() {
      return _.get(this.preview, "type") || "auto"
    },
    //--------------------------------------------
    isLocalFile() {
      return "localFile" == this.PreviewType
    },
    //--------------------------------------------
    isLocalImage() {
      return this.isLocalFile
        && /^image\//.test(this.LocalFile.type)
    },
    //--------------------------------------------
    LocalFile() {
      if (this.isLocalFile) {
        return this.preview.value
      }
    },
    //--------------------------------------------
    LocalFileIcon() {
      if (this.isLocalFile) {
        let file = this.LocalFile
        let oF = {
          type: Ti.Util.getSuffixName(file.name),
          mime: file.type,
          race: Ti.Util.isNil(file.type) ? "DIR" : "FILE"
        }
        return Ti.Icons.get(oF)
      }
    },
    //--------------------------------------------
    isShowProgress() {
      return this.progress >= 0;
    },
    //--------------------------------------------
    ProgressTip() {
      return Ti.S.toPercent(this.progress, { fixed: 1, auto: false })
    },
    //--------------------------------------------
    ProgressStyle() {
      return { width: this.ProgressTip }
    },
    //--------------------------------------------
    ThumbBadges() {
      let list = []
      _.forEach(this.badges, (v, k) => {
        if (!v)
          return
        if (_.isString(v)) {
          list.push({
            type: "icon", value: v,
            className: `as-badge at-${k.toLowerCase()}`
          })
        } else {
          list.push({
            ...v,
            className: [
              `as-badge at-${k.toLowerCase()}`,
              v.className
            ].join(" ")
          })
        }
      })
      return list
    },
    //--------------------------------------------
    hasHref() {
      return this.href ? true : false
    },
    //--------------------------------------------
    TheHref() {
      return encodeURI(this.href)
    },
    //--------------------------------------------
    TheTitle() {
      return Ti.I18n.text(this.title)
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  methods: {
    //--------------------------------------------
    OnRemove() {
      let context = this.genEventContext()
      this.$notify("remove", context)
    },
    //--------------------------------------------
    OnClickTitle($event) {
      let context = this.genEventContext()
      // String -> Emit event
      if (false === this.onTitle) {
        $event.stopPropagation()
      }
      // Notify
      else if (_.isString(this.onTitle)) {
        this.$notify(this.onTitle, context)
      }
      // Function -> Handle
      else if (_.isFunction(this.onTitle)) {
        $event.stopPropagation()
        this.onTitle(context)
      }
    },
    //--------------------------------------------
    genEventContext() {
      return {
        index: this.index,
        id: this.id,
        title: this.title
      }
    },
    //--------------------------------------------
    renderLocalFile() {
      //console.log(this.LocalFile)
      if (this.isLocalImage) {
        let reader = new FileReader();
        reader.onload = (evt) => {
          if (this.$refs.localImage) {
            this.$refs.localImage.src = evt.target.result
          }
        }
        reader.readAsDataURL(this.preview.value);
      }
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  mounted: function () {
    this.renderLocalFile()
  }
  ////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'tiny-wn-video.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/tiny-wn-video.mjs'] = (function(){
////////////////////////////////////////////////////
async function pickVideoAndInsertToDoc(editor, {
  base = "~",
  autoCreate = null,
  fallbackPath,
}) {
  // Check base
  if (_.isPlainObject(autoCreate)) {
    let oBase = await Wn.Io.loadMeta(base)
    if (!oBase) {
      let pph = Ti.Util.getParentPath(base)
      let dnm = Ti.Util.getFileName(base)
      let baseMeta = _.assign({}, autoCreate, {
        race: 'DIR', nm: dnm
      })
      let baseJson = JSON.stringify(baseMeta)
      let cmdText = `o @create '${baseJson}' -p ${pph} -auto @json -cqn`
      oBase = await Wn.Sys.exec2(cmdText, { as: "json" })
    }
    base = oBase
  }

  // Show dialog
  let reo = await Wn.OpenObjSelector(base, {
    icon: "fas-film",
    title: "i18n:video-insert",
    position: "top",
    width: "95%",
    height: "95%",
    multi: false,
    fallbackPath
  })

  // User canceled
  if (_.isEmpty(reo)) {
    return
  }

  // Do insert image
  editor.execCommand("InsertVideo", editor, reo)
}
////////////////////////////////////////////////////
function GetVideoAttrsByElement(elVideo) {
  let style = Ti.Dom.getOwnStyle(elVideo)
  return {
    oid: elVideo.getAttribute("wn-obj-id"),
    sha1: elVideo.getAttribute("wn-obj-sha1"),
    mime: elVideo.getAttribute("wn-obj-mime"),
    tp: elVideo.getAttribute("wn-obj-tp"),
    thumb: elVideo.getAttribute("wn-obj-thumb"),
    video_cover: elVideo.getAttribute("wn-obj-video_cover"),
    naturalWidth: elVideo.getAttribute("wn-obj-width"),
    naturalHeight: elVideo.getAttribute("wn-obj-height"),
    duration: elVideo.getAttribute("wn-obj-duration"),
    rawSize: elVideo.getAttribute("wn-raw-size"),
    style
  }
}
////////////////////////////////////////////////////
function GetVideoAttrsByObj(oVideo) {
  return _.pickBy({
    "wn-obj-id": oVideo.id,
    "wn-obj-sha1": oVideo.sha1,
    "wn-obj-mime": oVideo.mime,
    "wn-obj-tp": oVideo.tp,
    "wn-obj-thumb": oVideo.thumb,
    "wn-obj-video_cover": oVideo.video_cover,
    "wn-obj-width": oVideo.width,
    "wn-obj-height": oVideo.height,
    "wn-obj-duration": oVideo.duration,
    "wn-raw-size": oVideo.rawSize,
  }, (v) => !_.isUndefined(v))
}
////////////////////////////////////////////////////
function UpdateVideoTagInnerHtml(elVideo) {
  let cover = elVideo.getAttribute("wn-obj-video_cover")
  if (!cover) {
    cover = elVideo.getAttribute("wn-obj-thumb")
  }
  if (cover && !cover.startsWith("id:")) {
    cover = "id:" + cover
  }
  let $inner = Ti.Dom.createElement({
    tagName: "div",
    className: "media-inner",
    style: {
      "background-image": `url("/o/content?str=${cover}")`
    }
  })
  $inner.innerHTML = `<i 
    class="media-font-icon zmdi zmdi-play"
    style="padding-left:.06rem;"></i>`
  elVideo.innerHTML = null
  elVideo.contentEditable = false
  Ti.Dom.appendTo($inner, elVideo)
}
////////////////////////////////////////////////////
function CmdInsertVideo(editor, oVideos) {
  if (_.isEmpty(oVideos))
    return

  // Prepare range
  let rng = editor.selection.getRng()

  // Create image fragments
  let $doc = rng.commonAncestorContainer.ownerDocument
  let frag = new DocumentFragment()
  for (let oVideo of oVideos) {
    let $video = Ti.Dom.createElement({
      tagName: "div",
      className: "wn-media as-video",
      attrs: GetVideoAttrsByObj(oVideo)
    }, $doc)
    UpdateVideoTagInnerHtml($video)
    frag.appendChild($video)
  }

  // Remove content
  if (!rng.collapsed) {
    rng.deleteContents()
  }

  // Insert fragments
  rng.insertNode(frag)

}
////////////////////////////////////////////////////
function GetCurrentVideoElement(editor) {
  let sel = editor.selection
  let $nd = sel.getNode()
  // Guard
  return Ti.Dom.closest($nd, (el) => {
    return 'DIV' == el.tagName && Ti.Dom.hasClass(el, "wn-media", "as-video")
  }, { includeSelf: true })
}
///////////////////////////////////////////////////
function CmdSetVideoStyle(editor, css = {}) {
  let $video = GetCurrentVideoElement(editor)
  // Guard
  if (!_.isElement($video)) {
    return
  }
  // Clear float
  Ti.Dom.setStyle($video, css)
  // Force sync content
  editor.__rich_tinymce_com.syncContent()
}
////////////////////////////////////////////////////
async function CmdShowVideoProp(editor, settings) {
  let $video = GetCurrentVideoElement(editor)
  // Guard
  if (!_.isElement($video)) {
    return
  }
  //console.log("stl", stl)
  // Gen the properties
  let data = GetVideoAttrsByElement($video)

  //console.log(data)
  // Show dialog
  let reo = await Ti.App.Open({
    icon: "fas-film",
    title: "i18n:hmk-w-edit-video-prop",
    width: "37%",
    height: "100%",
    position: "right",
    closer: "left",
    clickMaskToClose: true,
    result: data,
    model: { prop: "data", event: "change" },
    comType: "TiForm",
    comConf: {
      spacing: "comfy",
      fieldNameVAlign: "top",
      fields: [
        {
          title: "i18n:video",
          name: "oid",
          rowSpan: 3,
          comType: "WnObjPicker",
          comConf: {
            valueType: "id",
            base: settings.base,
            titleEditable: false
          }
        },
        Wn.Hm.getCssPropField("width", {
          name: "style.width",
          comConf: {
            placeholder: `${data.naturalWidth}px`
          }
        }),
        Wn.Hm.getCssPropField("height", {
          name: "style.height",
          comConf: {
            placeholder: `${data.naturalHeight}px`
          }
        }),
        Wn.Hm.getCssPropField("float", {
          name: "style.float"
        }),
        {
          title: "Raw Size",
          name: "rawSize",
          type: "String",
          defaultAs: 'auto',
          comType: "TiSwitcher",
          comConf: {
            options: ['auto', 'off']
          }
        },
        {
          title: "i18n:style-more",
        },
        {
          name: "style",
          type: "Object",
          colSpan: 10,
          comType: "HmPropCssRules",
          comConf: {
            rules: [
              /^((min|max)-)?(width|height)$/,
              /^(margin|border|box-shadow|float)$/
            ]
          }
        }
      ]
    },
    components: [
      "@com:wn/obj/picker"
    ]
  })

  // 用户取消
  if (!reo)
    return

  // Update image
  //................................................
  // src
  if (data.oid != reo.oid) {
    // Remove Video
    if (!reo.oid) {
      Ti.Dom.remove($video)
      return
    }
    // 读取对象详情
    let oVideo = await Wn.Io.loadMetaById(reo.oid)
    // Switch image src
    let attrs = GetVideoAttrsByObj(oVideo)
    Ti.Dom.setAttrs($video, attrs)

    UpdateVideoTagInnerHtml($video)

  }
  let attrs = GetVideoAttrsByObj(reo)
  console.log(attrs)
  Ti.Dom.setAttrs($video, attrs)
  //................................................
  // Styling
  let style = Ti.Css.renderCssRule(reo.style)
  //console.log("style:", style)
  $video.style = style
  //................................................
  // clean cache
  $video.removeAttribute("data-mce-src")
  $video.removeAttribute("data-mce-style")
  //................................................
  // Force sync content
  editor.__rich_tinymce_com.syncContent()
}
////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  name: "wn-video",
  //------------------------------------------------
  init: function (conf = {}) {
  },
  //------------------------------------------------
  setup: function (editor, url) {
    //..............................................
    let settings = _.assign({
      base: "~"
    }, _.get(editor.settings, "wn_video_config"));
    //console.log("setup", editor.settings)
    //..............................................
    // Register plugin command
    editor.addCommand("InsertVideo", CmdInsertVideo)
    editor.addCommand("SetVideoStyle", CmdSetVideoStyle)
    editor.addCommand("ShowVideoProp", CmdShowVideoProp)
    //..............................................
    // Register toolbar actions
    editor.ui.registry.addButton("WnVideoPick", {
      icon: "film-solid",
      tooltip: Ti.I18n.text("i18n:video-insert"),
      onAction: function (menuBtn) {
        pickVideoAndInsertToDoc(editor, settings)
      },
    })
    //..............................................
    editor.ui.registry.addMenuItem("WnVideoClrSize", {
      text: Ti.I18n.text("i18n:hmk-w-edit-video-clrsz"),
      onAction() {
        editor.execCommand("SetVideoStyle", editor, { width: "" })
      }
    })
    //..............................................
    editor.ui.registry.addMenuItem("WnVideoAutoFitWidth", {
      text: Ti.I18n.text("i18n:hmk-autofit"),
      onAction() {
        editor.execCommand("SetVideoStyle", editor, { width: "100%" })
      }
    })
    //..............................................
    editor.ui.registry.addNestedMenuItem('WnVideoFloat', {
      text: Ti.I18n.text("i18n:hmk-float"),
      getSubmenuItems: function () {
        return [{
          type: "menuitem",
          icon: "align-left",
          text: Ti.I18n.text("i18n:hmk-float-left"),
          onAction() {
            editor.execCommand("SetVideoStyle", editor, { float: "left" })
          }
        }, {
          type: "menuitem",
          icon: "align-right",
          text: Ti.I18n.text("i18n:hmk-float-right"),
          onAction() {
            editor.execCommand("SetVideoStyle", editor, { float: "right" })
          }
        }, {
          type: "menuitem",
          text: Ti.I18n.text("i18n:hmk-float-clear"),
          onAction() {
            editor.execCommand("SetVideoStyle", editor, { float: "" })
          }
        }];
      }
    });
    //..............................................
    editor.ui.registry.addNestedMenuItem('WnVideoMargin', {
      text: Ti.I18n.text("i18n:hmk-w-edit-video-margin"),
      getSubmenuItems: function () {
        const __check_margin_size = function (api, expectSize) {
          let $video = GetCurrentVideoElement(editor)
          let state = true
          if ($video) {
            let sz = $video.style.marginLeft || $video.style.marginRight
            state = expectSize == sz
          }
          api.setActive(state);
          return function () { };
        }
        return [{
          type: "togglemenuitem",
          text: Ti.I18n.text("i18n:hmk-margin-sm"),
          onAction() {
            editor.execCommand("SetVideoStyle", editor, { margin: "1em" })
          },
          onSetup: function (api) {
            return __check_margin_size(api, '1em')
          }
        }, {
          type: "togglemenuitem",
          text: Ti.I18n.text("i18n:hmk-margin-md"),
          onAction() {
            editor.execCommand("SetVideoStyle", editor, { margin: "2em" })
          },
          onSetup: function (api) {
            return __check_margin_size(api, '2em')
          }
        }, {
          type: "togglemenuitem",
          text: Ti.I18n.text("i18n:hmk-margin-lg"),
          onAction() {
            editor.execCommand("SetVideoStyle", editor, { margin: "3em" })
          },
          onSetup: function (api) {
            return __check_margin_size(api, '3em')
          }
        }, {
          type: "menuitem",
          icon: "align-center",
          text: Ti.I18n.text("i18n:hmk-margin-center"),
          onAction() {
            editor.execCommand("SetVideoStyle", editor, { margin: "0 auto" })
          }
        }, {
          type: "menuitem",
          icon: "square-6",
          text: Ti.I18n.text("i18n:hmk-margin-no"),
          onAction() {
            editor.execCommand("SetVideoStyle", editor, { margin: "" })
          }
        }];
      }
    });
    //..............................................
    editor.ui.registry.addMenuItem("WnVideoProp", {
      text: Ti.I18n.text("i18n:hmk-w-edit-video-prop"),
      onAction() {
        editor.execCommand("ShowVideoProp", editor, settings)
      }
    })
    //..............................................
    editor.ui.registry.addContextMenu("wn-video", {
      update: function (el) {
        let $video = GetCurrentVideoElement(editor)
        // Guard
        if (!_.isElement($video)) {
          return []
        }
        return [
          "WnVideoClrSize WnVideoAutoFitWidth",
          "WnVideoFloat WnVideoMargin",
          "WnVideoProp"
        ].join(" | ")
      }
    })
    //..............................................
    let $vm = editor.__rich_tinymce_com
    $vm.registerContentCallback("wn-video", function () {
      //console.log("SetContent video")
      let els = editor.$('.wn-media.as-video')
      for (let i = 0; i < els.length; i++) {
        let el = els[i]
        UpdateVideoTagInnerHtml(el)
      }
    })
    //..............................................
    return {
      getMetadata: function () {
        return {
          name: 'Wn Video plugin',
          url: 'http://site0.cn'
        };
      }
    };
    //..............................................
  }
  //------------------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-list.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/list/ti-list.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //////////////////////////////////////////
  data: () => ({
    myData: [],
  }),
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-hoverable": this.hoverable,
        "show-border": this.border
      })
    },
    //--------------------------------------
    getRowIndent() {
      if (_.isFunction(this.indentBy)) {
        return it => this.indentBy(it)
      }
      if (_.isString(this.indentBy)) {
        return it => _.get(it, this.indentBy)
      }
      return it => 0
    },
    //--------------------------------------
    getRowIcon() {
      if (_.isFunction(this.iconBy)) {
        return it => this.iconBy(it)
      }
      if (_.isString(this.iconBy)) {
        return it => _.get(it, this.iconBy)
      }
      return it => null
    },
    //--------------------------------------
    DisplayItems() {
      let diss = _.concat(this.display)
      // Prepare the return list
      let items = []
      // Loop each items
      for (let dis of diss) {
        let item = this.evalFieldDisplayItem(dis)
        if (item) {
          if (item.comType == "TiLabel") {
            _.defaults(item.comConf, {
              hoverCopy: this.dftLabelHoverCopy
            })
          }
          items.push(item)
        }
      }
      // Done
      return items
    },
    //--------------------------------------
    TheData() {
      return this.myData
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnClickTop($event) {
      if (this.cancelable) {
        // Click The body or top to cancel the row selection
        if (Ti.Dom.hasOneClass($event.target,
          'ti-list', 'list-item')) {
          this.cancelRow()
        }
      }
    },
    //--------------------------------------
    scrollCurrentIntoView() {
      // Guard
      if (!this.autoScrollIntoView || Ti.Util.isNil(this.myCurrentId)) {
        return;
      }
      let [$first] = Ti.Dom.findAll(".list-row.is-current", this.$el)
      if ($first) {
        let rect = Ti.Rects.createBy($first)
        let view = Ti.Rects.createBy(this.$el)
        if (!view.contains(rect)) {
          this.$el.scrollTop += rect.top - view.top
        }
      }
    },
    //--------------------------------------
    __ti_shortcut(uniqKey) {
      //console.log("ti-list", uniqKey)
      if ("ARROWUP" == uniqKey) {
        this.selectPrevRow({
          payload: { byKeyboardArrow: true }
        })
        this.scrollCurrentIntoView()
        return { prevent: true, stop: true, quit: true }
      }

      if ("ARROWDOWN" == uniqKey) {
        this.selectNextRow({ payload: { byKeyboardArrow: true } })
        this.scrollCurrentIntoView()
        return { prevent: true, stop: true, quit: true }
      }
    },
    //--------------------------------------
    async evalListData() {
      this.myData = await this.evalData((it) => {
        it.icon = this.getRowIcon(it.item)
        it.indent = this.getRowIndent(it.item)
      })

      this.$nextTick(() => {
        _.delay(() => {
          this.scrollCurrentIntoView()
        }, 300)
      })
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////////////
  watch: {
    "data": {
      handler: "evalListDataWhenMarkChanged",
      immediate: true
    },
    "dict": {
      handler: "evalListDataWhenMarkChanged",
      immediate: true
    },
    "myCurrentId": function () {
      this.$nextTick(() => {
        this.scrollCurrentIntoView()
      })
    },
    "selectable": "evalListDataWhenMarkChanged",
    "checkable": "evalListDataWhenMarkChanged",
    "hoverable": "evalListDataWhenMarkChanged",
    "filterValue": "evalListDataWhenMarkChanged"
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-shelf-list.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/shelf/list/web-shelf-list.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "data": {
      type: Array,
      default: undefined
    },
    "dynamicData": {
      type: Boolean,
      default: false
    },
    "vars": {
      type: Object
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    // Item comType
    "comType": {
      type: String,
      default: "ti-label"
    },
    "comConf": {
      type: [Object, String],
      default: () => ({
        value: "=.."
      })
    },
    "itemKeyBy": {
      type: String,
      default: "id"
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "blankAs": {
      type: [Object, Boolean],
      default: () => ({
        text: "i18n:empty",
        icon: "fas-box-open"
      })
    },
    "loadingAs": {
      type: [Object, Boolean],
      default: () => ({})
    },
    // "transName" : {
    //   type: String,
    //   default: undefined,
    //   validator: v => (!v || /^(fade|((slide)-(left|right|down|up)))$/.test(v))
    // },
    // "transSpeed" : {
    //   type: String,
    //   default: "normal",
    //   validator: v => /^(slow|normal|fast)$/.test(v)
    // }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    // //--------------------------------------
    // ItemTransName() {
    //   if(this.transName) {
    //     return `ti-trans-${this.transName}`
    //   }
    // },
    // //--------------------------------------
    // ItemTransSpeedClassName() {
    //   return `is-speed-${this.transSpeed}`
    // },
    //--------------------------------------
    ItemList() {
      if (!_.isArray(this.data))
        return []

      if (this.dynamicData) {
        return this.data
      }
      
      let vars = _.cloneDeep(this.vars)
      let list = []
      for (let i = 0; i < this.data.length; i++) {
        let it = this.data[i]
        let comConf;
        if(vars) {
          vars.item = it
          comConf = Ti.Util.explainObj(vars, this.comConf) 
        } else {
          comConf = Ti.Util.explainObj(it, this.comConf)
        }
        let key = `It-${i}`
        if (this.itemKeyBy) {
          key = Ti.Util.fallbackNil(it[this.itemKeyBy], key)
        }
        list.push({
          key,
          comType: this.comType,
          comConf
        })
      }
      // Get the result
      return list
    },
    //--------------------------------------
    isLoading() {
      return Ti.Util.isNil(this.data)
    },
    //--------------------------------------
    isEmpty() {
      return _.isEmpty(this.ItemList)
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    //--------------------------------------
  }
  //////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-datetime.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/datetime/ti-datetime.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  props : {
    "value" : {
      type : [String, Number, Date],
      default : null
    },
    "timeMode" : {
      type : String,
      default : "sec",
      /***
       * - `sec`  : "HH:mm:ss"
       * - `min`  : "HH:mm"
       * - `auto` : "HH:mm:ss"
       */
      validator : function(unit) {
        return /^(sec|min|auto)$/.test(unit)
      }
    },
    "monthFormat" : {
      type : String,
      default : "yyyy-MM" 
    },
    "beginYear" : {
      type : [Number, String],
      default : 1970
    },
    "endYear" : {
      type : [Number, String],
      default : (new Date().getFullYear()+1)
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    topClass() {
      return this.className
    },
    //------------------------------------------------
    theDate() {
      return Ti.Types.toDate(this.value, null)
    },
    //------------------------------------------------
    theTime() {
      return Ti.Types.toTime(this.theDate)
    },
    //------------------------------------------------
    theTimeFormat() {
      return ({
        "sec"  : "HH:mm:ss",
        "min"  : "HH:mm",
        "auto" : "auto"
      })[this.timeMode]
    },
    //------------------------------------------------
    theTimeText() {
      return this.getTimeText(this.theTime)
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    onDateChanged(dt) {
      let theDate = this.theDate || new Date()
      let tm = Ti.Types.toTime(this.theTime||0);
      dt = new Date(dt)
      dt.setHours(tm.hours)
      dt.setMinutes(tm.minutes)
      dt.setSeconds(tm.seconds)
      dt.setMilliseconds(tm.milliseconds)
      this.$notify("change", dt)
    },
    //------------------------------------------------
    onTimeChanged(tm) {
      let theDate = this.theDate || new Date()
      let dt = new Date(theDate)
      dt.setHours(tm.hours)
      dt.setMinutes(tm.minutes)
      dt.setSeconds(tm.seconds)
      dt.setMilliseconds(tm.milliseconds)
      this.$notify("change", dt)
    },
    //------------------------------------------------
    getTimeText(tm) {
      if(tm instanceof Ti.Types.Time) {
        return tm.toString(this.theTimeFormat)
      }
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-crumb.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/crumb/ti-crumb.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  props: {
    "data": {
      type: Array,
      default: () => []
    },
    "itemIcon": {
      type: String,
      default: null
    },
    "pathIcon": {
      type: String,
      default: "zmdi-chevron-right"
    },
    "cancelItemBubble": {
      type: Boolean,
      default: true
    },
    "startIndex": {
      type: Number,
      default: 0
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //------------------------------------------------
    ItemList() {
      let list = [];
      if (_.isArray(this.data)) {
        _.forEach(this.data, (val, index) => {
          if (index >= this.startIndex) {
            list.push(
              _.assign(
                {
                  icon: this.itemIcon
                },
                val,
                { index, atLast: index == this.data.length - 1 }
              )
            );
          }
        });
      }
      return list;
    }
    //------------------------------------------------
    // theDataValues() {
    //   let list = []
    //   for(let it of this.theData) {
    //     list.push(Ti.Util.fallback(it.value, null))
    //   }
    //   return list
    // }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
  // methods : {
  //   //------------------------------------------------
  //   onItemFired({index=-1}={}) {
  //     if(index >= 0) {
  //       let it = _.nth(this.theData, index)
  //       if(it) {
  //         this.$notify("item:actived", it)
  //       }
  //     }
  //   }
  //   //------------------------------------------------
  // }
  ////////////////////////////////////////////////////
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-session-badge.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/session/badge/wn-session-badge.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////
  data: () => ({
    collapse: true,
    dropReady: false,
    /*{
      core: "Unkown",
      app: "???"
    } */
    version: undefined
  }),
  /////////////////////////////////////////
  props: {
    "me": {
      type: Object,
      default: null
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //--------------------------------------
    MyThumb() {
      return _.get(this.me, "thumb");
    },
    //--------------------------------------
    MySex() {
      return _.get(this.me, "sex") || 0;
    },
    //--------------------------------------
    MyLang() {
      return _.get(this.me, "LANG") || "zh-cn";
    },
    //--------------------------------------
    MyAvatarSrc() {
      return "/o/content?str=${thumb}";
    },
    //--------------------------------------
    hasSession() {
      return this.me ? true : false;
    },
    //--------------------------------------
    canLoginDomainSubAccount() {
      return Wn.Session.I_am_SysAccount();
    },
    //--------------------------------------
    LangList() {
      return [
        {
          lang: "en-us",
          text: "English",
          className: { "is-current": "en-us" == this.MyLang },
          src: "/gu/rs/ti/icons/png/lang-en-us.png"
        },
        {
          lang: "zh-cn",
          text: "简体",
          className: { "is-current": "zh-cn" == this.MyLang },
          src: "/gu/rs/ti/icons/png/lang-zh-cn.png"
        },
        {
          lang: "zh-hk",
          text: "繁體",
          className: { "is-current": "zh-hk" == this.MyLang },
          src: "/gu/rs/ti/icons/png/lang-zh-hk.png"
        }
      ];
    },
    //--------------------------------------
    TheLoginIcon() {
      if (this.MyThumb) {
        return {
          type: "image",
          iconClass: "as-thumb",
          value: `/o/content?str=${this.MyThumb}`
        };
      }

      if (2 == this.MySex) {
        return "im-user-female";
      }

      if (1 == this.MySex) {
        return "im-user-male";
      }

      return "im-user-circle";
    },
    //--------------------------------------
    DropStyle() {
      if (this.dropReady) {
        return {
          "visibility": "visible"
        };
      }
    },
    //--------------------------------------
    VersionInfo() {
      let info = this.version || {
        core: "Unkown",
        titanium: Ti.Version(),
        app: "???"
      };
      return [
        `Core: ${info.core}`,
        `Ti: ${info.titanium}`,
        `App: ${info.app}`
      ].join(" ");
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    async OnLoginDomainAccount() {
      let uname = await Ti.Prompt("Domain Account Login Name", {
        type: "info",
        icon: "fas-user"
      });
      // User Cancel
      uname = _.trim(uname);
      if (!uname) {
        return;
      }
      uname = uname.replaceAll(/^(['"$ \t;<>()])$/g, "");

      // Process Login
      let se = await Wn.Sys.exec2(`login -cqn -site true '${uname}'`, {
        as: "json"
      });
      if (se instanceof Error) {
        return;
      }

      // Change session
      let { ticket } = se;
      let re = await Ti.Http.get("/u/ajax/chse", { params: { seid: ticket } });
      console.log(re);

      // Login Ok : Redirect
      Ti.Be.Open("/", { target: "_self" });
    },
    //--------------------------------------
    OnResetPassword() {
      this.collapse = true;
      Ti.App(this).dispatch("session/openResetPasswd");
    },
    //--------------------------------------
    OnShowMore() {
      this.collapse = false;
      this.tryLoadVersion();
    },
    //--------------------------------------
    async tryLoadVersion() {
      if (!this.version) {
        this.version = { core: "Loading" };
        let sysInfo = await Wn.Sys.exec2("sys -runtime -cqn", { as: "json" });
        let core = sysInfo.nodeVersionNumber;

        let oV = await Wn.Io.loadMeta("~/.ti/version.json");
        let app = "???";
        if (oV) {
          let ver = await Wn.Io.loadContent(oV, { as: "json" });
          app = Ti.Tmpl.exec("${name}-${version}", ver);
        }
        this.version = { core, titanium: Ti.Version(), app };
      }
    },
    //--------------------------------------
    async OnChangeLang(lang) {
      if (this.MyLang != lang) {
        await Wn.Sys.exec(`me -set LANG=${lang}`);
        window.location.reload();
      }
    },
    //--------------------------------------
    dockDrop() {
      let $drop = this.$refs.drop;
      let $info = this.$refs.info;
      // Guard the elements
      if (!_.isElement($drop) || !_.isElement($info) || this.collapse) {
        return;
      }
      // Dock
      Ti.Dom.dockTo($drop, $info, {
        space: { y: 2 }
      });
      _.delay(() => {
        this.dropReady = true;
      }, 10);
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "collapse": {
      handler: function (newVal, oldVal) {
        if (!newVal && newVal != oldVal) {
          _.delay(() => {
            this.dockDrop();
          }, 0);
        }
        // Collapse
        else if (newVal) {
          this.dropReady = false;
        }
      },
      immediate: true
    }
  }
  //////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'site-tree-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/hmaker/website/mod/site-tree/site-tree-actions.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //----------------------------------------
  /***
   * Append the `meta` to current tree. 
   * It will auto load all the ancestor node of the meta in tree
   */ 
  async appendNode({state, commit, dispatch}, meta) {
    console.log("TODO appendNode", meta)
  },
  //----------------------------------------
  /***
   * Reload children of specific node. 
   * If current is leaf, it will skip the children reloading.
   * 
   * @param id{String} - the node id. higher priority then `path`
   * @param path{String|Array} - the node path
   * @param self{Boolean} - reload self or not.
   * @param force{Boolean} - reload again event the children had been loaded.
   * @param depth{Number} - reload the multi hierarchies if great than `1`
   */
  async reloadNode({state, commit, dispatch}, {
    id,
    path,
    self=false,
    force=false,
    depth=1
  }={}) {
    //......................................
    // Clone the tree
    let treeRoot = _.cloneDeep(state.root)
    let loaded = false
    //......................................
    // Find the node
    let node;
    if(!_.isUndefined(id)) {
      node = Ti.Trees.getNodeById(treeRoot, id)
    }
    // By Path
    else {
      node = Ti.Trees.getNodeByPath(treeRoot, path)
    }
    //......................................
    // Guard
    if(!node) {
      return
    }
    //......................................
    // Reload self
    if(self) {
      let nodeMeta = await Wn.Io.loadMetaById(node.id)
      node.rawData = nodeMeta
      loaded = true
    }
    //......................................
    // Define the loading
    const __load_subs = async (node, depth)=>{
      if(depth > 0 && !node.leaf) {
        depth --;
        if(force || _.isEmpty(node.children)) {
          let children = []
          let {list} = await Wn.Io.loadChildren(node.rawData)
          for(let li of list) {
            let sub = Wn.Util.wrapTreeNode(li)
            await __load_subs(sub, depth)
            children.push(sub)
          }
          node.children = children
          return true
        }
      }
      return false
    }
    //......................................
    // Do load
    loaded |= await __load_subs(node, depth)
    //......................................
    // Update the whole tree
    if(loaded) {
      commit("setRoot", treeRoot)
    }
  },
  //----------------------------------------
  /***
   * Reload site root node, and reload the first leave
   */
  async reloadRoot({state, commit, dispatch}, meta) {
    let root = Wn.Util.wrapTreeNode(meta)

    // Update Root Node
    commit("setRoot", root)

    // Reload Root Node
    await dispatch("reloadNode")

    // Reload The Opened Node
    if(!_.isEmpty(state.root.children)) {
      let keys = _.keys(state.openedNodePaths).sort()
      for(let key of keys) {
        let hie = Ti.Trees.getByPath(state.root, key)
        if(hie && !hie.node.leaf) {
          //console.log("reloadNode", hie.path)
          await dispatch("reloadNode", {
            path : hie.path
          })
        }
      }
    }

    // Append The Current Node
    // if(state.currentId) {
    //   // Check if it had already loaded
    //   let hie = Ti.Trees.getNodeById(state.root, state.currentId)
    //   // Do reload it
    //   if(!hie) {
    //     let meta = await Wn.Io.loadMetaById(state.currentId)
    //     await dispatch("appendNode", meta)
    //   }
    // }
  }
  //----------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'tiny-wn-youtube.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/tiny-wn-youtube.mjs'] = (function(){
////////////////////////////////////////////////////
async function pickYoutubeAndInsertToDoc(editor, {
  meta = "~"
}) {
  // Check meta
  let oMeta = await Wn.Io.loadMeta(meta)
  if (!oMeta) {
    return await Ti.Toast.Open({
      content: "i18n:e-ph-noexists",
      type: "warn",
      val: meta
    })
  }
  if (oMeta.race != "FILE") {
    return await Ti.Toast.Open({
      content: "i18n:e-obj-invalid",
      type: "warn",
      val: meta
    })
  }
  meta = oMeta

  // 读取信息
  let { domain, channelId } = await Wn.Io.loadContent(meta, { as: "json" })

  // Check base
  let reo = await Ti.App.Open({
    icon: "fab-youtube",
    title: "i18n:net-youtube-add-video",
    position: "top",
    width: "95%",
    height: "95%",
    comType: "NetYoutubeBrowser",
    comConf: {
      meta, domain, channelId,
      notifyName: "change"
    },
    components: [
      "@com:net/youtube/browser"
    ]
  })

  // User canceled
  if (_.isEmpty(reo)) {
    return
  }

  // Do insert image
  editor.execCommand("InsertYoutube", editor, reo)
}
const DFT_ALLOW = [
  "accelerometer", "autoplay", "clipboard-write",
  "encrypted-media", "gyroscope",
  "picture-in-picture"].join(";")
////////////////////////////////////////////////////
function GetYoutubeAttrsByElement(elYoutube) {
  let style = Ti.Dom.getOwnStyle(elYoutube)
  let af = elYoutube.getAttribute("wn-yt-allowfullscreen")
  let allowfullscreen = af && /^(allowfullscreen|yes|true)$/.test(af)
  let allow = elYoutube.getAttribute("wn-yt-allow") || DFT_ALLOW;
  if (allow) {
    allow = _.map(allow.split(";"), al => _.trim(al))
  }
  return {
    id: elYoutube.getAttribute("wn-yt-id"),
    title: elYoutube.getAttribute("wn-yt-title"),
    description: elYoutube.getAttribute("wn-yt-description"),
    pubat: elYoutube.getAttribute("wn-yt-pubat"),
    thumbUrl: elYoutube.getAttribute("wn-yt-thumb-url"),
    duration: elYoutube.getAttribute("wn-yt-duration"),
    du_in_str: elYoutube.getAttribute("wn-yt-du_in_str"),
    definition: elYoutube.getAttribute("wn-yt-definition"),
    categoryId: elYoutube.getAttribute("wn-yt-category-id"),
    rawSize: elYoutube.getAttribute("wn-raw-size"),
    allow,
    allowfullscreen,
    style
  }
}
////////////////////////////////////////////////////
function GetYoutubeAttrsByObj(ytVideo) {
  let { allow, allowfullscreen } = ytVideo
  allow = allow || []
  return {
    "wn-yt-id": ytVideo.id,
    "wn-yt-title": ytVideo.title,
    "wn-yt-description": ytVideo.description,
    "wn-yt-pubat": ytVideo.publishedAt,
    "wn-yt-thumb-url": ytVideo.thumbUrl,
    "wn-yt-duration": ytVideo.duration,
    "wn-yt-du_in_str": ytVideo.du_in_str,
    "wn-yt-definition": ytVideo.definition,
    "wn-yt-category-id": ytVideo.categoryId,
    "wn-yt-allow": allow.join("; ") || null,
    "wn-yt-allowfullscreen": allowfullscreen || null,
    "wn-raw-size":ytVideo.rawSize,
  }
}
////////////////////////////////////////////////////
function UpdateYoutubeTagInnerHtml(elYoutube) {
  let cover = elYoutube.getAttribute("wn-yt-thumb-url")
  let $inner = Ti.Dom.createElement({
    tagName: "div",
    className: "media-inner",
    style: {
      "background-image": `url("${cover}")`
    }
  })
  $inner.innerHTML = '<i class="media-font-icon fab fa-youtube"></i>'
  elYoutube.innerHTML = null
  elYoutube.contentEditable = false
  Ti.Dom.appendTo($inner, elYoutube)
}
////////////////////////////////////////////////////
function CmdInsertYoutube(editor, ytVideo) {
  if (!ytVideo)
    return

  // Prepare range
  let rng = editor.selection.getRng()

  // Create image fragments
  let $doc = rng.commonAncestorContainer.ownerDocument
  let $video = Ti.Dom.createElement({
    tagName: "div",
    className: "wn-media as-youtube",
    attrs: GetYoutubeAttrsByObj(ytVideo)
  }, $doc)
  UpdateYoutubeTagInnerHtml($video)

  // Remove content
  if (!rng.collapsed) {
    rng.deleteContents()
  }

  // Insert fragments
  rng.insertNode($video)

}
////////////////////////////////////////////////////
function GetCurrentYoutubeElement(editor) {
  let sel = editor.selection
  let $nd = sel.getNode()
  // Guard
  return Ti.Dom.closest($nd, (el) => {
    return 'DIV' == el.tagName && Ti.Dom.hasClass(el, "wn-media", "as-youtube")
  }, { includeSelf: true })
}
////////////////////////////////////////////////////
function CmdSetYoutubeStyle(editor, css = {}) {
  let $video = GetCurrentYoutubeElement(editor)
  // Guard
  if (!_.isElement($video)) {
    return
  }
  // Clear float
  Ti.Dom.setStyle($video, css)
  // Force sync content
  editor.__rich_tinymce_com.syncContent()
}
////////////////////////////////////////////////////
async function CmdShowYoutubeProp(editor, settings) {
  let $video = GetCurrentYoutubeElement(editor)
  // Guard
  if (!_.isElement($video)) {
    return
  }
  //console.log("stl", stl)
  // Gen the properties
  let data = GetYoutubeAttrsByElement($video)

  //console.log(data)
  // Show dialog
  let reo = await Ti.App.Open({
    icon: "fab-youtube",
    title: "i18n:hmk-w-edit-yt-video",
    width: "37%",
    height: "100%",
    position: "right",
    closer: "left",
    clickMaskToClose: true,
    result: data,
    model: { prop: "data", event: "change" },
    comType: "TiForm",
    comConf: {
      spacing: "comfy",
      fieldNameVAlign: "top",
      fields: [
        {
          title: "i18n:hmk-w-edit-yt-video-features",
        },
        {
          name: "allow",
          type: "Array",
          colSpan: 2,
          comType: "TiBulletCheckbox",
          comConf: {
            autoI18n: true,
            options: [
              { value: "accelerometer", text: "i18n:video-accelerometer" },
              { value: "autoplay", text: "i18n:video-autoplay" },
              { value: "clipboard-write", text: "i18n:video-clipboard-write" },
              { value: "encrypted-media", text: "i18n:video-encrypted-media" },
              { value: "gyroscope", text: "i18n:video-gyroscope" },
              { value: "picture-in-picture", text: "i18n:video-pic-in-pic" }
            ]
          }
        },
        {
          title: "i18n:allowfullscreen",
          name: "allowfullscreen",
          type: "Boolean",
          comType: "TiToggle"
        },
        {
          title: "i18n:style"
        },
        Wn.Hm.getCssPropField("width", {
          name: "style.width"
        }),
        Wn.Hm.getCssPropField("height", {
          name: "style.height"
        }),
        Wn.Hm.getCssPropField("float", {
          name: "style.float"
        }),
        {
          title: "Raw Size",
          name: "rawSize",
          type: "String",
          defaultAs: 'auto',
          comType: "TiSwitcher",
          comConf: {
            options: ['auto', 'off']
          }
        },
        {
          title: "i18n:style-more"
        },
        {
          name: "style",
          type: "Object",
          colSpan: 10,
          comType: "HmPropCssRules",
          comConf: {
            rules: [
              /^((min|max)-)?(width|height)$/,
              /^(margin|border|box-shadow|float)$/
            ]
          }
        }]
    },
    components: [
      "@com:ti/droplist",
      "@com:ti/bullet/checkbox"
    ]
  })
  //................................................
  // 用户取消
  if (!reo)
    return
  //................................................
  // 设置属性
  let attrs = GetYoutubeAttrsByObj(reo)
  Ti.Dom.setAttrs($video, attrs)
  //................................................
  // Styling
  let style = Ti.Css.renderCssRule(reo.style)
  //console.log("style:", style)
  $video.style = style
  //................................................
  // clean cache
  $video.removeAttribute("data-mce-src")
  $video.removeAttribute("data-mce-style")
  //................................................
  // Force sync content
  editor.__rich_tinymce_com.syncContent()
}
////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  name: "wn-youtube",
  //------------------------------------------------
  init: function (conf = {}) {
  },
  //------------------------------------------------
  setup: function (editor, url) {
    //..............................................
    let settings = _.assign({
      meta: "~"
    }, _.get(editor.settings, "wn_youtube_config"));
    //console.log("setup", editor.settings)
    //..............................................
    // Register plugin command
    editor.addCommand("InsertYoutube", CmdInsertYoutube)
    editor.addCommand("SetYoutubeStyle", CmdSetYoutubeStyle)
    editor.addCommand("ShowYoutubeProp", CmdShowYoutubeProp)
    //..............................................
    // Register toolbar actions
    editor.ui.registry.addButton("WnYoutubePick", {
      icon: "youtube-brands",
      tooltip: Ti.I18n.text("i18n:video-insert"),
      onAction: function (menuBtn) {
        pickYoutubeAndInsertToDoc(editor, settings)
      },
    })
    //..............................................
    editor.ui.registry.addMenuItem("WnYoutubeClrSize", {
      text: Ti.I18n.text("i18n:hmk-w-edit-video-clrsz"),
      onAction() {
        editor.execCommand("SetVideoStyle", editor, { width: "" })
      }
    })
    //..............................................
    editor.ui.registry.addMenuItem("WnYoutubeAutoFitWidth", {
      text: Ti.I18n.text("i18n:hmk-autofit"),
      onAction() {
        editor.execCommand("SetVideoStyle", editor, { width: "100%" })
      }
    })
    //..............................................
    editor.ui.registry.addNestedMenuItem('WnYoutubeFloat', {
      text: Ti.I18n.text('i18n:hmk-float'),
      getSubmenuItems: function () {
        return [{
          type: "menuitem",
          icon: "align-left",
          text: Ti.I18n.text("i18n:hmk-float-left"),
          onAction() {
            editor.execCommand("SetYoutubeStyle", editor, { float: "left" })
          }
        }, {
          type: "menuitem",
          icon: "align-right",
          text: Ti.I18n.text("i18n:hmk-float-right"),
          onAction() {
            editor.execCommand("SetYoutubeStyle", editor, { float: "right" })
          }
        }, {
          type: "menuitem",
          text: Ti.I18n.text("i18n:hmk-float-none"),
          onAction() {
            editor.execCommand("SetYoutubeStyle", editor, { float: "" })
          }
        }];
      }
    });
    //..............................................
    editor.ui.registry.addNestedMenuItem('WnYoutubeMargin', {
      text: Ti.I18n.text('i18n:hmk-w-edit-video-margin'),
      getSubmenuItems: function () {
        const __check_margin_size = function (api, expectSize) {
          let $video = GetCurrentYoutubeElement(editor)
          let state = true
          if ($video) {
            let sz = $video.style.marginLeft || $video.style.marginRight
            state = expectSize == sz
          }
          api.setActive(state);
          return function () { };
        }
        return [{
          type: "togglemenuitem",
          text: Ti.I18n.text("i18n:hmk-margin-sm"),
          onAction() {
            editor.execCommand("SetYoutubeStyle", editor, { margin: "1em" })
          },
          onSetup: function (api) {
            return __check_margin_size(api, '1em')
          }
        }, {
          type: "togglemenuitem",
          text: Ti.I18n.text("i18n:hmk-margin-md"),
          onAction() {
            editor.execCommand("SetYoutubeStyle", editor, { margin: "2em" })
          },
          onSetup: function (api) {
            return __check_margin_size(api, '2em')
          }
        }, {
          type: "togglemenuitem",
          text: Ti.I18n.text("i18n:hmk-margin-lg"),
          onAction() {
            editor.execCommand("SetYoutubeStyle", editor, { margin: "3em" })
          },
          onSetup: function (api) {
            return __check_margin_size(api, '3em')
          }
        }, {
          type: "menuitem",
          icon: "align-center",
          text: Ti.I18n.text("i18n:hmk-margin-center"),
          onAction() {
            editor.execCommand("SetYoutubeStyle", editor, { margin: "0 auto" })
          }
        }, {
          type: "menuitem",
          icon: "square-6",
          text: Ti.I18n.text("i18n:hmk-margin-no"),
          onAction() {
            editor.execCommand("SetYoutubeStyle", editor, { margin: "" })
          }
        }];
      }
    });
    //..............................................
    editor.ui.registry.addMenuItem("WnYoutubeProp", {
      text: Ti.I18n.text("i18n:hmk-w-edit-video-prop"),
      onAction() {
        editor.execCommand("ShowYoutubeProp", editor, settings)
      }
    })
    //..............................................
    editor.ui.registry.addContextMenu("wn-youtube", {
      update: function (el) {
        let $video = GetCurrentYoutubeElement(editor)
        // Guard
        if (!_.isElement($video)) {
          return []
        }
        return [
          "WnYoutubeClrSize WnYoutubeAutoFitWidth",
          "WnYoutubeFloat WnYoutubeMargin",
          "WnYoutubeProp"
        ].join(" | ")
      }
    })
    //..............................................
    let $vm = editor.__rich_tinymce_com
    $vm.registerContentCallback("wn-youtube", function () {
      //console.log("SetContent youtube")
      let els = editor.$('.wn-media.as-youtube')
      for (let i = 0; i < els.length; i++) {
        let el = els[i]
        UpdateYoutubeTagInnerHtml(el)
      }
    })
    //..............................................
    return {
      getMetadata: function () {
        return {
          name: 'Wn Youtube plugin',
          url: 'http://site0.cn'
        };
      }
    };
    //..............................................
  }
  //------------------------------------------------
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'widget-input-text.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/widget/input/text/widget-input-text.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data : ()=>({
    myText : undefined
  }),
  ////////////////////////////////////////////////////
  props : {
    //-----------------------------------
    // Data
    //-----------------------------------
    "title" : {
      type : String,
      default : "i18n:comments"
    },
    "value" : {
      type : String,
      default : undefined
    },
    "total" : {
      type : Number,
      default : undefined
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "trimed" : {
      type : Boolean,
      default : true
    },
    "resetAfterPost" : {
      type : Boolean,
      default : false
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "placeholder" : {
      type : [String, Number],
      default : undefined
    },
    "hideBorder" : {
      type : Boolean,
      default : false
    },
    "emojiBtnIcon" : {
      type : String,
      default : "far-smile"
    },
    "emojiBtnText" : {
      type : String,
      default : "i18n:emoji"
    },
    "postBtnIcon" : {
      type : String,
      default : "fas-paper-plane"
    },
    "postBtnText" : {
      type : String,
      default : "i18n:post"
    },
    //-----------------------------------
    // Measure
    //-----------------------------------
    "width" : {
      type : [Number, String],
      default : "100%"
    },
    "height" : {
      type : [Number, String],
      default : "2.6rem"
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    TopClass() {
      return Ti.Css.mergeClassName(this.className, {
        "is-self-actived" : this.isSelfActived,
        "show-border"  : !this.hideBorder,
        "hide-border"  : this.hideBorder
      })
    },
    //------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width  : this.width,
        height : this.height
      })
    },
    //------------------------------------------------
    hasTitle() {
      return this.title ? true : false
    },
    //------------------------------------------------
    TextValue() {
      return Ti.Util.fallbackNil(this.myText, this.value)
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    OnTextChange() {
      let str = this.$refs.text.value
      this.myText = this.formatValue(str)
    },
    //------------------------------------------------
    async OnBtnEmojiClick() {
      // Get Text Range
      let i_start = this.$refs.text.selectionStart
      let i_end = this.$refs.text.selectionEnd

      let emoji = await Ti.App.Open({
        title  : "i18n:emoji",
        width  : "6.4rem",
        height : "4.8rem",
        textOk : null,
        changeToClose : true,
        comType : "TiSheetEmoji",
        comConf : {

        }
      })

      // User Cancel
      if(!emoji)
        return
      
      // Insert emoji
      let str = this.$refs.text.value
      let s_0 = str.substring(0, i_start)
      let s_1 = str.substring(i_end)
      this.myText = s_0 + emoji + s_1;
    },
    //------------------------------------------------
    OnBtnPostClick() {
      let str = this.formatValue(this.$refs.text.value)
      if(str && str.length > 10) {
        this.$notify("post", str)
        if(this.resetAfterPost) {
          this.myText = ""
        }
      }
      // Blank text or content too short
      else {
        Ti.Toast.Open('i18n:post-content-blank', "warn")
      }
    },
    //------------------------------------------------
    formatValue(val) {
      if(val && this.trimed) {
        return _.trim(val)
      }
      return val
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-icon-text.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/icon/text/ti-icon-text.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  ///////////////////////////////////////////////////////
  props : {
    "icon" : {
      type : [String,Object],
      default : ""
    },
    "text" : {
      type : String,
      default : null
    }
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-text-article.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/text/article/web-text-article.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //////////////////////////////////////////
  data: ()=>({
    // When media loaded, mark in the array
    // Then I can known if the whole content ready or not
    myMedias : []
  }),
  //////////////////////////////////////////
  watch : {
    "ArticleHtml" : "redrawContent",
    "viewportMode": function(newVal, oldVal) {
      if(oldVal && !_.isEqual(newVal, oldVal)) {
        this.redrawContent()
      }
    }
  },
  //////////////////////////////////////////
  mounted: async function() {
    await this.redrawContent()
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-form-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/form/ti-form-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "data": {
    type: Object,
    default: undefined
  },
  "fields": {
    type: Array,
    default: () => []
  },
  "fieldStatus": {
    type: Object,
    default: () => ({})
  },
  // "extendFunctionSet" : {
  //   type : Object,
  //   default : undefined
  // },
  "onlyFields": {
    type: Boolean,
    default: true
  },
  "omitHiddenFields": {
    type: Boolean,
    default: false
  },
  // merge each time data change
  "fixed": {
    type: Object,
    default: undefined
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "defaultFieldType": {
    type: String,
    default: "String"
  },
  "linkFields": {
    type: Object,
    default: undefined
  },
  "keepTabIndexBy": {
    type: String,
    default: undefined
  },
  "defaultComType": {
    type: String,
    default: "ti-label"
  },
  "autoShowBlank": {
    type: Boolean,
    default: undefined
  },
  "currentTab": {
    type: Number,
    default: 0
  },
  "adjustDelay": {
    type: Number,
    default: 0
  },
  "autoColummGrid": {
    type: [Boolean, Array],
    default: true
  },
  "maxColumnHint": {
    type: Number,
    default: 3
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "bodyClass": {
    type: [String, Object, Array]
  },
  "bodyStyle": {
    type: Object
  },
  "defaultGroupClass": {
    type: [String, Object, Array]
  },
  "mode": {
    type: String,
    default: "all",
    validator: (val) => /^(all|tab)$/.test(val)
  },
  "screenMode": {
    type: String,
    default: "auto",
    validator: (val) => /^(auto|desktop|tablet|phone)$/.test(val)
  },
  "tabAt": {
    type: String,
    default: "top-center",
    validator: (v) => /^(top|bottom)-(left|center|right)$/.test(v)
  },
  "fieldBorder": {
    type: String,
    default: "bottom",
    validator: (v) => /^(none|top|bottom)$/.test(v)
  },
  "blankAs": {
    type: Object,
    default: () => ({
      icon: "fab-deezer",
      text: "i18n:empty"
    })
  },
  "icon": {
    type: String,
    default: undefined
  },
  "title": {
    type: String,
    default: undefined
  },
  "statusIcons": {
    type: Object,
    default: () => ({
      spinning: 'fas-spinner fa-spin',
      error: 'zmdi-alert-polygon',
      warn: 'zmdi-alert-triangle',
      ok: 'zmdi-check-circle',
    })
  },
  "spacing": {
    type: String,
    default: "comfy",
    validator: v => /^(comfy|tiny)$/.test(v)
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width": {
    type: [Number, String],
    default: undefined
  },
  "height": {
    type: [Number, String],
    default: undefined
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-bullet-checkbox.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/bullet/checkbox/ti-bullet-checkbox.mjs'] = (function(){
const _M = {
  //////////////////////////////////////////
  data: () => ({
    myTypeName: "ti-check-list",
  }),
  //////////////////////////////////////////
  props: {
    "valueType": {
      type: String,
      default: "Array",
      validator: (v) => /^(Array|Object|String|Json(Array|Object))$/.test(v),
    },
    // Only for valueType=="String"
    "valueSep": {
      type: String,
      default: ",",
    },
    // Only for valueType=="Json(Array|Object)"
    "formatJson": {
      type: Boolean,
      default: false,
    },
    "bulletIconOn": {
      type: String,
      default: "fas-check-square",
    },
    "bulletIconOff": {
      type: String,
      default: "far-square",
    },
    "groupSelectable": {
      type: Boolean,
      default: true,
    },
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    ToJson() {
      if (this.formatJson) {
        return function (input) {
          return JSON.stringify(input, null, "   ");
        };
      }
      return function (input) {
        return JSON.stringify(input);
      };
    },
    //--------------------------------------
    ValueMap() {
      let v = this.value;
      // Parse As JSON
      if (/^Json/.test(this.valueType) && _.isString(v)) {
        let vs = _.trim(v);
        if (vs) {
          v = JSON.parse(vs);
        } else {
          v = {};
        }
      }

      let re = {};

      // Array
      if (_.isArray(v)) {
        _.forEach(v, (k) => (re[k] = true));
        return re;
      }
      // Object
      if (_.isObject(v)) {
        return v || {};
      }
      // Build map
      else if (!_.isEmpty(v)) {
        let list = [];
        // Common Sep String
        if (_.isString(v)) {
          list = Ti.S.splitIgnoreBlank(v, this.valueSep);
        } else {
          list.push("" + v);
        }

        // Map
        for (let li of list) {
          re[li] = true;
        }
      }
      return re;
    },
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnClickOptionItem({ value }) {
      let vals = [];
      _.forEach(this.ItemGroups, (grp) => {
        _.forEach(grp.items, (it) => {
          if (this.isItemChecked(it.value, this.value)) {
            if (!_.isEqual(value, it.value)) {
              vals.push(it.value);
            }
          }
          // check it
          else if (_.isEqual(value, it.value)) {
            vals.push(it.value);
          }
        });
      });

      this.formatAndNotifyChange(vals);
    },
    //--------------------------------------
    isItemChecked(itValue) {
      return this.ValueMap[itValue] || false;
    },
    //--------------------------------------
    getItemsCheckMode(items = []) {
      let lbItem = null;
      let lbSumN = 0;
      let lbChxN = 0;
      let sumN = 0;
      let chxN = 0;

      const _check_mode = (sumN, chxN) => {
        return chxN == 0 ? "none" : sumN == chxN ? "all" : "part";
      };

      for (let it of items) {
        if ("Label" == it.type) {
          if (lbItem) {
            lbItem.checkMode = _check_mode(lbSumN, lbChxN);
            sumN += lbSumN;
            chxN += lbChxN;
          }
          lbItem = it;
          lbSumN = 0;
          lbChxN = 0;
        } else {
          lbSumN++;
          if (this.isItemChecked(it.value)) {
            lbChxN++;
          }
        }
      }
      if (lbItem) {
        lbItem.checkMode = _check_mode(lbSumN, lbChxN);
      }
      // Join summary
      sumN += lbSumN;
      chxN += lbChxN;

      return _check_mode(sumN, chxN);
    },
    //--------------------------------------
    doSelectToggle({ checkMode = "none", index, groupIndex } = {}) {
      //console.log("doSelectToggle", checkMode);
      // Label in group
      if (groupIndex >= 0) {
        alert("这个功能实现起来有点难，改天再说吧 ^_^!")
      }
      // Whole group
      else {
        if ("all" == checkMode) {
          this.cancelAllValues();
        } else {
          this.selectAllValues();
        }
      }
    },
    //--------------------------------------
    selectAllValues() {
      let vals = _.map(this.myOptionsData, (it) => it.value);
      this.formatAndNotifyChange(_.without(vals, undefined));
    },
    //--------------------------------------
    cancelAllValues() {
      this.formatAndNotifyChange([]);
    },
    //--------------------------------------
    formatAndNotifyChange(vals) {
      // Object or JsonObject
      if (/Object$/.test(this.valueType)) {
        let map = {};
        for (let v of vals) {
          map[v] = true;
        }
        if ("JsonObject" == this.valueType) {
          vals = this.ToJson(map);
        } else {
          vals = map;
        }
      } else if ("JsonArray" == this.valueType) {
        vals = this.ToJson(vals);
      } else if ("String" == this.valueType) {
        val = val.join(this.valueSep);
      }
      this.tryNotifyChange(vals);
    },
    //--------------------------------------
  },
  //////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'm-obj-axis-actions.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/mod/wn/obj-axis/m-obj-axis-actions.mjs'] = (function(){
const _M = {
  //----------------------------------------
  async reload({state, commit, dispatch}, meta) {
    if(state.status.reloading){
      return
    }
    //......................................
    // Use the default meta
    if(_.isUndefined(meta)) {
      meta = state.meta
    }
    //......................................
    if(_.isString(meta)) {
      meta = await Wn.Io.loadMeta(meta)
    }
    //......................................
    // Guard
    if(!meta) {
      commit("resetAll")
      return
    }
    // Init content as null
    commit("setStatus", {reloading:true})
    //......................................
    let ans = await Wn.Io.loadAncestors(`id:${meta.id}`)
    //......................................
    // Just update the meta
    commit("setAncestors", ans)
    commit("setMeta", meta)
    commit("setStatus", {reloading:false})
  }
  //----------------------------------------
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-browser.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/browser/wn-browser.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  data: () => ({
    myList: [],
    myPager: {},
    /*{filter: {}, sorter: {ct: -1}}*/
    mySearch: {},
    myCurrentId: undefined
  }),
  ////////////////////////////////////////////////////
  props: {
    //------------------------------------------------
    // Data
    //------------------------------------------------
    "meta": {
      type: Object
    },
    "data": {
      type: Object
    },
    "search": {
      type: Object
    },
    "status": {
      type: Object,
      default: () => ({})
    },
    "currentId": {
      type: String,
    },
    //------------------------------------------------
    // Behavior
    //------------------------------------------------
    "autoSelect": {
      type: Boolean,
      default: false
    },
    "multi": {
      type: Boolean
    },
    "reloadBy": {
      type: [String, Function],
      default: "main/query"
    },
    "viewType": String,
    "exposeHidden": Boolean,
    // TODO ... need to apply those settins below
    // in __on_events
    // "notifyName" : {
    //   type : String,
    //   default : "change"
    // },
    // "notifyWhen" : {
    //   type : String,
    //   default : "select"
    // },
    // "notifyPayload" : {
    //   type : [Object, Function]
    // },
    "events": Object,
    "canLoading": Boolean,
    //..........................
    // Table about prop
    //..........................
    "autoScrollIntoView": {
      type: Boolean,
      default: true
    },
    "columnResizable": {
      type: Boolean,
      default: false
    },
    "canCustomizedFields": {
      type: Boolean,
      default: false
    },
    "headDisplay": {
      type: [String, Object, Array],
      default: undefined
    },
    "keepCustomizedTo": {
      type: String,
      default: undefined
    },
    //------------------------------------------------
    // Aspect
    //------------------------------------------------
    "loading": Boolean,
    "loadingAs": Object,
    "tableFields": undefined,
    "listDisplay": undefined,
    "filter": {
      type: Object,
      default: () => ({
        comType: "WnThingFilter",
        comConf: {
          "placeholder": "i18n:filter",
          "status": "=status",
          "value": "=mySearch",
          "sorter": {
            "options": [
              { "value": "nm", "text": "i18n:wn-key-nm" },
              { "value": "ct", "text": "i18n:wn-key-ct" }
            ]
          }
        }
      })
    },
    "list": {
      type: Object,
      default: () => ({
        comType: "WnAdaptlist",
        comConf: {
          "rowNumberBase": "=rowNumberBase",
          "meta": "=meta",
          "currentId": "=currentId",
          "data": {
            list: "=myList",
            pager: "=myPager"
          },
          "multi": "=multi",
          "status": "=status"
        }
      })
    },
    "rowNumberBase": {
      type: Number,
      default: undefined
    },
    "itemClassName": {
      type: String
    },
    "itemBadges": {
      type: [Object, Function]
    },
    "moveToConf": {
      type: Object
    },
    "pager": {
      type: Object,
      default: () => ({
        comType: "TiPagingJumper",
        comConf: {
          "value": "=myPager",
          "valueType": "longName"
        }
      })
    },
    "nav": {
      type: Object
    },
    "detail": {
      type: Object,
      default: () => ({
        comType: "TiLabel",
        comConf: {
          "value": "I am detail"
        }
      })
    },
    "navBlock": {
      type: Object,
      default: () => ({})
    },
    "mainBlock": {
      type: Object,
      default: () => ({})
    },
    "detailBlock": {
      type: Object,
      default: () => ({})
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    ComNav() { return Ti.Util.explainObj(this, this.nav) },
    ComFilter() { return Ti.Util.explainObj(this, this.filter) },
    ComList() {
      let com = Ti.Util.explainObj(this, this.list)
      _.merge(com, {
        comConf: {
          onInit: this.OnListInit,
          itemClassName: this.itemClassName,
          itemBadges: this.itemBadges,
          viewType: this.viewType,
          exposeHidden: this.exposeHidden,
          tableFields: this.tableFields,
          listDisplay: this.listDisplay,
          moveToConf: this.moveToConf,
          // Table prop
          tableViewConf: {
            autoScrollIntoView: this.autoScrollIntoView,
            columnResizable: this.columnResizable,
            canCustomizedFields: this.canCustomizedFields,
            headDisplay: this.headDisplay,
            keepCustomizedTo: this.keepCustomizedTo
          }
        }
      })
      return com
    },
    ComPager() { return Ti.Util.explainObj(this, this.pager) },
    ComDetail() { return Ti.Util.explainObj(this, this.detail) },
    //------------------------------------------------
    TheLayout() {
      let columns = []
      //
      // Nav Block
      //
      if (this.ComNav) {
        columns.push(_.assign(
          {
            size: "16%",
            border: true,
          },
          this.navBlock,
          {
            name: "nav",
            body: "nav"
          }
        ))
      }
      //
      // Main Block
      //
      let main = []
      if (this.ComFilter) {
        main.push({
          name: "filter",
          size: 43,
          body: "filter"
        })
      }
      main.push({
        name: "list",
        size: "stretch",
        overflow: "cover",
        body: "list"
      })
      if (this.ComPager) {
        main.push({
          name: "pager",
          size: "auto",
          body: "pager"
        })
      }
      // Join to columns
      columns.push(_.assign(
        {
          size: "61.8%",
          border: true,
        },
        this.mainBlock,
        {
          type: "rows",
          blocks: main
        }
      ))
      //
      // Detail Block
      //
      if (this.ComDetail) {
        columns.push(_.assign({},
          this.detailBlock,
          {
            name: "detail",
            body: "detail"
          }
        ))
      }
      // Multi columns
      if (columns.length > 1) {
        return {
          type: "cols",
          border: true,
          blocks: columns
        }
      }
      // Single column, (main only)
      return columns[0]
    },
    //------------------------------------------------
    TheSchema() {
      return {
        nav: this.ComNav,
        filter: this.ComFilter,
        list: this.ComList,
        pager: this.ComPager,
        detail: this.ComDetail
      }
    },
    //------------------------------------------------
    CurrentObj() {
      if (this.myCurrentId && _.isArray(this.myList)) {
        for (let li of this.myList) {
          if (li.id == this.myCurrentId) {
            return li
          }
        }
      }
    },
    //------------------------------------------------
    EventRouting() {
      return _.assign({}, this.events)
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    OnListInit($adaptlist) {
      this.$adaptlist = $adaptlist
    },
    //------------------------------------------------
    OnFilterChange(filter) {
      this.reload({ filter, pager: { pageNumber: 1 } })
    },
    //------------------------------------------------
    OnSorterChange(sorter) {
      this.reload({ sorter, pager: { pageNumber: 1 } })
    },
    //------------------------------------------------
    OnPagerChange(pager) {
      this.reload({ pager })
    },
    //------------------------------------------------
    OnListViewTypeChange() {
      return { name: "listviewtype:change", stop: false }
    },
    //------------------------------------------------
    OnSelectItem({ currentId }) {
      this.myCurrentId = currentId
      return { stop: false }
    },
    //------------------------------------------------
    doAutoSelectItem() {
      // Guard
      if (!this.autoSelect)
        return
      // Try the last current Id
      if (this.myCurrentId) {
        let row = this.$adaptlist.findRowById(this.myCurrentId)
        if (row) {
          this.selectItem(row.id)
          return
        }
      }
      // Default use the first item
      this.selectItemByIndex(0)
    },
    //------------------------------------------------
    async reload({ filter, sorter, pager } = {}) {
      if (_.isString(this.reloadBy)) {
        return await Ti.App(this).dispatch(this.reloadBy, {
          filter, sorter, pager
        })
      }
      // Customized reloading
      return await this.reloadBy({ filter, sorter, pager })
    },
    //------------------------------------------------
    // Delegate methods
    setItem(newItem) {
      this.$adaptlist.setItem(newItem)
    },
    selectItem(id) {
      this.$adaptlist.selectItem(id)
    },
    selectItemByIndex(id) {
      this.$adaptlist.selectItemByIndex(id)
    },
    checkItem(id) {
      this.$adaptlist.checkItem(id)
    },
    toggleItem(id) {
      this.$adaptlist.toggleItem(id)
    },
    invokeList(methodName) {
      this.$adaptlist.invokeList(methodName)
    },
    getCurrentItem() {
      return this.$adaptlist.getCurrentItem()
    },
    getCheckedItems() {
      return this.$adaptlist.getCheckedItems()
    },
    openLocalFileSelectdDialog() {
      return this.$adaptlist.openLocalFileSelectdDialog()
    },
    async openCurrentMeta() {
      return this.$adaptlist.openCurrentMeta()
    },
    async openCurrentPrivilege() {
      return this.$adaptlist.openCurrentPrivilege()
    },
    async doCreate() {
      return this.$adaptlist.doCreate()
    },
    async doRename() {
      return this.$adaptlist.doRename()
    },
    async doBatchUpdate() {
      return this.$adaptlist.doBatchUpdate()
    },
    async doMoveTo() {
      return this.$adaptlist.doMoveTo()
    },
    async doDelete(confirm) {
      return this.$adaptlist.doDelete(confirm)
    },
    //--------------------------------------
    //
    // Callback & Events
    //
    //--------------------------------------
    // For Event Bubble Dispatching
    __on_events(name, ...args) {
      //console.log("__on_events", name, args)
      // Try to get handler
      let fn = _.get(this.EventRouting, name)
      if (!fn) {
        fn = this.$tiEventTryFallback(name, this.EventRouting)
      }

      // Gen invoking
      return Ti.Shortcut.genEventActionInvoking(fn, {
        app: Ti.App(this),
        context: _.assign({
          $args: args
        }, this.CurrentObj),
        funcSet: this
      })
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    //------------------------------------------------
    "data": {
      handler: function (newVal, oldVal) {
        if (_.isUndefined(oldVal) || !_.isEqual(newVal, oldVal)) {
          this.myList = _.get(this.data, "list")
          this.myPager = _.get(this.data, "pager")
          this.$nextTick(() => {
            _.delay(() => {
              this.doAutoSelectItem()
            }, 100)
          })
        }
      },
      immediate: true
    },
    "search": {
      handler: function () {
        this.mySearch = _.cloneDeep(this.search)
      },
      immediate: true
    },
    "currentId": {
      handler: function (newVal, oldVal) {
        if (!_.isEqual(newVal, oldVal)) {
          this.myCurrentId = newVal
        }
      },
      immediate: true
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  mounted: function () {
    this.$nextTick(() => {
      _.delay(() => {
        this.doAutoSelectItem()
      }, 100)
    })
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-input-picker.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/picker/ti-input-picker.mjs'] = (function(){
const COM_TYPE = "TiInputPicker";
const _M = {
  ////////////////////////////////////////////////////
  data: () => ({
    isPicking: false,
    myValueIcon: undefined,
    myValueText: undefined
  }),
  ////////////////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "value": undefined,
    "options": {
      type: [String, Array, Function, Ti.Dict],
      default: () => []
    },
    // If dynamic dictionary: options = '#DickName(=varName)'
    // it will use Ti.DictFactory.CheckDynamicDict,
    // The key of the instance name, should explain for the vars set
    "dictVars": {
      type: Object,
      default: () => ({})
    },
    "valueBy": {
      type: [String, Function],
      default: () => (it) => {
        return Ti.Util.getFallback(it, "value", "nm", "id");
      }
    },
    "textBy": {
      type: [String, Function],
      default: "nickname|title|text|name"
    },
    "iconBy": {
      type: [String, Function],
      default: undefined
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    "readonly": {
      type: Boolean,
      default: false
    },
    "multi": {
      type: Boolean,
      default: false
    },
    "focused": {
      type: Boolean,
      default: false
    },
    // the TiInput advance settings when multi==false
    "input": {
      type: Object
    },
    "filterlist": {
      type: Object
    },
    "mustInList": {
      type: Boolean,
      default: Ti.Config.getComProp(COM_TYPE, "mustInList", false)
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "dialog": {
      type: Object
    },
    "placeholder": {
      type: [String, Number],
      default: undefined
    },
    "pickingIcon": {
      type: String,
      default: "fas-cog fa-spin"
    },
    "pickingText": {
      type: String,
      default: "..."
    },
    "prefixIcon": {
      type: String,
      default: "zmdi-minus"
    },
    "suffixIcon": {
      type: String,
      default: "fas-cog"
    },
    // only for single box-mode
    "boxMode": {
      type: String,
      default: Ti.Config.getComProp(COM_TYPE, "boxMode", "auto"),
      validator: (v) => /^(auto|value-text|text-value|text|value)$/.test(v)
    },
    "canInput": {
      type: Boolean,
      default: true
    },
    //-----------------------------------
    // Measure
    //-----------------------------------
    "width": {
      type: [Number, String],
      default: undefined
    },
    "height": {
      type: [Number, String],
      default: undefined
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass();
    },
    //------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      });
    },
    //------------------------------------------------
    InputBoxMode() {
      if ("auto" == this.boxMode) {
        return this.canInput ? "value-text" : "text-value";
      }
      return this.boxMode || "value-text";
    },
    //------------------------------------------------
    ComType() {
      return this.multi ? "TiInputTags" : "TiInput";
    },
    //------------------------------------------------
    ComConf() {
      let conf = _.assign(
        {
          readonly: this.readonly || this.isPicking || !this.canInput,
          focused: this.focused,
          placeholder: this.placeholder
        },
        this.input
      );

      if (!this.readonly) {
        conf.suffixIcon = this.suffixIcon;
      }

      // Multi
      if (this.multi) {
        conf.dict = this.Dict;
        conf.value = this.value;
      }
      // Single
      else {
        conf.prefixIcon = this.myValueIcon || this.prefixIcon;
        conf.prefixIconNotifyName = null;

        if (!conf.readonly) {
          conf.focusValue = this.value;
        }

        if ("value-text" == this.InputBoxMode) {
          conf.value = this.value;
          conf.suffixText = this.myValueText;
        } else if ("text-value" == this.InputBoxMode) {
          conf.value = this.myValueText;
          conf.suffixText = this.value;
        } else if ("text" == this.InputBoxMode) {
          conf.value = this.myValueText;
        } else if ("value" == this.InputBoxMode) {
          conf.value = this.value;
        }
      }

      if (conf.readonly) {
        conf.hover = null;
        conf.prefixIconForClean = false;
      }

      if (this.isPicking) {
        conf.suffixIcon = this.pickingIcon;
        if (this.pickingText) {
          conf.suffixText = this.pickingText;
        }
      }

      return conf;
    },
    //------------------------------------------------
    Dict() {
      if (!this.myDict) {
        this.myDict = this.createDict();
      }
      return this.myDict;
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    async OnInputChange(value) {
      //console.log("OnInputChange");
      // Guard: only check with dict
      if (!this.Dict) {
        this.tryNotifyChange(value);
        return;
      }
      // null
      if (Ti.Util.isNil(value)) {
        this.tryNotifyChange(value);
        return;
      }
      // Multi check
      if (_.isArray(value)) {
        let vals = [];
        for (let val of value) {
          if (this.mustInList) {
            let it = await this.findItem(val);
            if (it) {
              vals.push(this.Dict.getValue(it));
            }
          } else {
            vals.push(val);
          }
        }
        this.tryNotifyChange(vals);
      }
      // Single check
      else if (this.mustInList) {
        let it = await this.findItem(value);
        if (it) {
          let v2 = this.Dict.getValue(it);
          this.tryNotifyChange(v2);
        } else {
          this.tryNotifyChange(null);
        }
      } else {
        this.tryNotifyChange(value);
      }
    },
    //------------------------------------------------
    async findItem(str) {
      if (!this.Dict) {
        return;
      }
      let it = await this.Dict.getItem(str);
      if (_.isEmpty(it)) {
        it = null;
      }
      if (!it) {
        let cans = await this.Dict.queryData(str);
        if (!_.isEmpty(cans)) {
          it = _.first(cans);
        }
      }
      return it;
    },
    //------------------------------------------------
    async OnClickSuffixIcon() {
      // Guard: Picking
      if (this.isPicking) {
        return;
      }
      // Mark: Picking
      this.isPicking = true;

      // 获取数据
      let dataList = await this.Dict.getData();

      // Prepare list conf
      let listConf = {
        multi: this.multi,
        checkable: this.multi,
        idBy: this.valueBy,
        dftLabelHoverCopy: false,
        data: dataList,
        display: [
          "<icon>",
          this.textBy || "nickname|title|text|name",
          `${this.valueBy || "value|nm|id"}::align-right as-tip-block`
        ]
      };
      if (this.multi) {
        listConf.checkedIds = this.value;
      } else {
        listConf.currentId = this.value;
      }

      // Prepare the filter list config
      let fltListConf = _.merge(
        {
          className: "ti-fill-parent",
          list: listConf
        },
        this.filterlist
      );

      // Open the dialog
      let reo = await Ti.App.Open(
        _.assign(
          {
            title: "i18n:select",
            position: "top",
            width: "4.8rem",
            height: "62%"
          },
          this.dialog,
          {
            result: {
              currentId: listConf.currentId,
              checkedIds: listConf.checkedIds
            },
            model: {
              event: "select",
              prop: ["currentId", "checkedIds"]
            },
            events: {
              open: function () {
                this.close(this.result);
              }
            },
            comType: "TiFilterlist",
            comConf: fltListConf,
            components: ["@com:ti/filterlist"],
            beforeClosed: () => {
              this.isPicking = false;
            }
          }
        )
      );

      // User Cancel
      if (!reo) {
        return;
      }

      // Multi
      if (this.multi) {
        let vals = Ti.Util.truthyKeys(reo.checkedIds);
        this.tryNotifyChange(vals);
      }
      // Change the currency
      else {
        let val = reo.currentId || null;
        this.tryNotifyChange(val);
      }
    },
    //------------------------------------------------
    tryNotifyChange(val) {
      if (!_.isEqual(val, this.vlaue)) {
        this.$notify("change", val);
      }
    },
    //------------------------------------------------
    async evalValue() {
      //console.log("evalValue", this.value)
      let it = await this.Dict.getItem(this.value);
      if (it) {
        this.myValueIcon = this.Dict.getIcon(it);
        this.myValueText = this.Dict.getText(it);
      } else {
        this.myValueIcon = undefined;
        this.myValueText = undefined;
      }
    },
    //------------------------------------------------
    createDict() {
      //console.log("createDict in combo-input")
      // Customized
      return Ti.DictFactory.CreateDictBy(this.options, {
        valueBy: this.valueBy,
        textBy: this.textBy,
        iconBy: this.iconBy,
        vars: this.dictVars,
        whenLoading: ({ loading }) => {
          this.loading = loading;
        }
      });
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    "value": {
      handler: "evalValue",
      immediate: true
    },
    "options": function (newval, oldval) {
      if (!_.isEqual(newval, oldval)) {
        this.myDict = this.createDict();
      }
    }
  }
  ////////////////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'formed_list_methods.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/support/formed_list_methods.mjs'] = (function(){
//////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  //......................................
  isSelectedItem(it={}, {value=null, multi=false}={}) {
    if(multi) {
      return _.isArray(value) && _.indexOf(value, it.value) >= 0
    }
    return _.isEqual(value, it.value)
  },
  //......................................
  normalizeData(list=[], {
    emptyItem=null,
    multi=false,
    value=null,
    focusIndex=-1,
    mapping=null,
    defaultIcon=null,
    iteratee=null,
    defaultTipKey=null
  }={}) {
    //console.log("normalizeData", iteratee)
    let index = 0
    let reList = []
    //.........................................
    // Single mode, join the empty item
    if(!multi && emptyItem) {
      let emIt = _.cloneDeep(emptyItem)
      emIt.selected = 
        _.isUndefined(emIt.value)||_.isNull(emIt.value)
          ? _.isNull(value)
          : this.isSelectedItem(emIt, {value, multi})
      if(_.isFunction(iteratee))
        emIt = iteratee(emIt, index) || emIt
      reList.push(emIt)
      index++
    }
    //.........................................
    // Format the list
    let list2 = []
    if(_.isArray(list)) {
      let theMapping = mapping
        ? _.defaults({...mapping}, {
            icon     : "icon",
            text     : "text",
            value    : "value",
            tip      : "tip"
          })
        : null
      for(let it of list) {
        // Plain Object
        if(_.isPlainObject(it)) {
          let it2
          // Mapping
          if(theMapping) {
            it2 = Ti.Util.translate(it, theMapping)
          }
          // Clone
          else {
            it2 = _.cloneDeep(it)
          }
          // Apply Default Tip
          if(!it2.tip && defaultTipKey) {
            it2.tip = it[defaultTipKey]
          }
          // Join to list
          list2.push(it2)
        }
        // Simple value
        else {
          list2.push({
            icon  : defaultIcon,
            text  : Ti.Types.toStr(it),
            value : it
          })
        }
      }
    }
    //.........................................
    // Tidy it
    for(let i=0; i<list2.length; i++) {
      let li = list2[i]
      // Mark index
      li.index = i
      li.focused = (i == focusIndex)
      // Mark icon
      li.icon = li.icon || defaultIcon
      
      // decide select: by self
      li.selected = this.isSelectedItem(li, {value, multi})
      
      // Customized
      if(_.isFunction(iteratee)) {
        list2[i] = iteratee(li, i) || li
      }
    }
    //console.log(reList)
    return list2
  },
  //------------------------------------------------
  matchItemByKey(item={}, key="value", mode="equal", val) {
    let itemValue = item[key]
    // find method by mode
    let fnCall = ({
      "equal"   : ()=>_.isEqual(itemValue, val),
      "starts"  : ()=>_.startsWith(itemValue, val),
      "contains": ()=>{
        if(_.isString(itemValue)) {
          return itemValue.indexOf(val+"") >= 0
        }
        _.indexOf(itemValue, val)>=0
      },
    })[mode]
    // Do the invoking
    if(_.isFunction(fnCall)) {
      return fnCall()
    }
    return false
  },
  //------------------------------------------------
  findItemInList(str, {
    list = [], 
    matchValue = "equal",
    matchText  = "off"
  }={}) {
    if(_.isArray(list) && !_.isEmpty(list)) {
      for(let li of list) {
        if(this.matchItemByKey(li, "value", matchValue, str)) {
          return li
        }
        if(this.matchItemByKey(li, "text", matchText, str)) {
          return li
        }
      }
    }
    return null
  },
  //------------------------------------------------
  // multi  : Array
  // single : Number
  getSelectedItemIndex(formedList, {value=null, multi=false}={}) {
    let re = []
    let sls = {value, multi}
    for(let i=0; i<formedList.length; i++) {
      let li = formedList[i]
      if(this.isSelectedItem(li, sls)) {
        if(!this.multi)
          return i
        re.push(i)
      }
    }
    if(_.isEmpty(re) && !multi) {
      return -1
    }
    return re
  },
  //......................................
  // async tryReload({loaded=false, cached=true}={}){
  //   if(!loaded || !cached) {
  //     await this.reload()
  //     return
  //   }
  //   // Return the blank Promise
  //   return new Promise((resolve)=>{
  //     resolve()
  //   })
  // },
  // //......................................
  // async doReload(options=[], vars) {
  //   vars = Ti.Util.fallback(vars, this.value)
  //   let list = []
  //   // Dynamic value
  //   if(_.isFunction(options)) {
  //     list = await options(vars)
  //     if(!_.isArray(list)){
  //       return []
  //     }
  //   }
  //   // Static value
  //   else if(_.isArray(this.options)){
  //     list = [].concat(this.options)
  //   }
  //   return list
  // }
  //......................................
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-slide-bar.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/slide/bar/ti-slide-bar.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////////////////
  data: () => ({
    myConWidth: 0,
    myConHeight: 0,
    myHdlLeft: 0,
    myValue: undefined
  }),
  ///////////////////////////////////////////////////////
  props: {
    //-----------------------------------
    // Data
    //-----------------------------------
    "value": {
      type: Number,
      default: undefined
    },
    "maxValue": {
      type: Number,
      default: 1
    },
    "minValue": {
      type: Number,
      default: 0
    },
    "markBegin": {
      type: Number,
      default: undefined
    },
    "markEnd": {
      type: Number,
      default: undefined
    },
    "precision": {
      type: Number,
      default: 2
    },
    "format": {
      type: [Function, String],
      default: undefined
    },
    //-----------------------------------
    // Behavior
    //-----------------------------------
    // 0 : notify when dragging done
    // > 0 : notify during dragging with throttle
    "notifyFrequency": {
      type: Number,
      default: 0
    },
    //-----------------------------------
    // Aspect
    //-----------------------------------
    "prefixText": {
      type: [Boolean, String],
      default: true,
      validator: v => (_.isBoolean(v) || /^(current|min|none)$/.test(v))
    },
    "suffixText": {
      type: [Boolean, String],
      default: true,
      validator: v => (_.isBoolean(v) || /^(current|max|none)$/.test(v))
    },
    //-----------------------------------
    // Measure
    //-----------------------------------
    "textWidth": {
      type: [Number, String],
      default: undefined
    },
    "barHeight": {
      type: [Number, String],
      default: undefined
    },
    "width": {
      type: [Number, String],
      default: undefined
    },
    "height": {
      type: [Number, String],
      default: undefined
    }
  },
  ///////////////////////////////////////////////////////
  computed: {
    //---------------------------------------------------
    TopClass() {
      return this.getTopClass({
        "is-show-prefix": this.isShowPreifx,
        "is-show-suffix": this.isShowSuffix
      })
    },
    //---------------------------------------------------
    TopStyle() {
      return Ti.Css.toStyle({
        width: this.width,
        height: this.height
      })
    },
    //---------------------------------------------------
    TextStyle() {
      return Ti.Css.toStyle({
        width: this.textWidth,
      })
    },
    //---------------------------------------------------
    BarStyle() {
      return Ti.Css.toStyle({
        height: this.barHeight,
      })
    },
    //---------------------------------------------------
    TheValueSize() {
      let left = this.myConWidth * this.myHdlLeft
      return Ti.Css.toSize(left)
    },
    BarInnerStyle() {
      return { width: this.TheValueSize }
    },
    HandlerStyle() {
      return { left: this.TheValueSize }
    },
    //---------------------------------------------------
    BarMarkStyle() {
      if (_.isNumber(this.markBegin) && _.isNumber(this.markEnd)) {
        let left = this.calScale(this.markBegin)
        let width = this.calScale(this.markEnd - this.markBegin)
        return Ti.Css.toStyle({
          left, width
        })
      }
    },
    //---------------------------------------------------
    FormatValue() {
      if (_.isString(this.format)) {
        if (this.format.startsWith("=>")) {
          let str = this.format.substring(2).trim()
          return Ti.Util.genInvoking(str, { partial: "right" })
        }
        return (val) => {
          return Ti.S.renderBy(this.format, { val })
        }
      }
      if (_.isFunction(this.format)) {
        return this.format;
      }
      return v => v
    },
    //---------------------------------------------------
    MaxValueText() {
      return this.FormatValue(this.maxValue) + ""
    },
    //---------------------------------------------------
    MinValueText() {
      return this.FormatValue(this.minValue) + ""
    },
    //---------------------------------------------------
    CurrentValueText() {
      return this.FormatValue(this.myValue) + ""
    },
    //---------------------------------------------------
    TextContext() {
      return {
        current: this.CurrentValueText,
        min: this.MinValueText,
        max: this.MaxValueText
      }
    },
    //---------------------------------------------------
    ThePrefixText() {
      if (this.prefixText) {
        if (_.isBoolean(this.prefixText)) {
          return this.CurrentValueText || this.MinValueText
        }
        return _.get(this.TextContext, this.prefixText)
      }
    },
    //---------------------------------------------------
    TheSuffixText() {
      if (this.suffixText) {
        if (_.isBoolean(this.suffixText)) {
          if(!this.prefixText) {
            return this.CurrentValueText
          }
          return this.MaxValueText
        }
        return _.get(this.TextContext, this.suffixText)
      }
    },
    //---------------------------------------------------
    isShowPreifx() { return this.textWidth && this.ThePrefixText },
    isShowSuffix() { return this.textWidth && this.TheSuffixText },
    //---------------------------------------------------
    ThrottleSetVal() {
      if (this.notifyFrequency > 0) {
        return _.throttle(scale => {
          this.evalMyVal(scale)
        }, this.notifyFrequency)
      }
    },
    //---------------------------------------------------
    Draggable() {
      return {
        trigger: ".as-hdl",
        viewport: ".as-con",
        prepare: ({ scaleX }) => {
          let scale = _.clamp(scaleX, 0, 1)
          let value = this.calValue(scale)
          this.$notify("drag:begin", { value, scale })
        },
        dragging: ({ scaleX }) => {
          this.evalMyHdlLeft(scaleX)
          if (this.ThrottleSetVal) {
            this.ThrottleSetVal(this.myHdlLeft)
          }
        },
        done: ({ scaleX }) => {
          this.evalMyHdlLeft(scaleX)
          this.evalMyVal(scaleX)
          this.$notify("drag:end", {
            value: this.myValue,
            scale: this.myHdlLeft
          })
        }
      }
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  methods: {
    //--------------------------------------------------
    OnResize() {
      if (_.isElement(this.$refs.con)) {
        let { width, height } = this.$refs.con.getBoundingClientRect()
        this.myConWidth = width
        this.myConHeight = height
      }
    },
    //---------------------------------------------------
    OnClickBar(evt) {
      if (evt.srcElement == this.$refs.hdl) {
        return
      }
      let { left, width } = Ti.Rects.createBy(this.$refs.con)
      let clientX = evt.clientX
      let scale = (clientX - left) / width
      console.log("OnClickBar", scale)
      this.evalMyHdlLeft(scale)
      this.evalMyVal(scale)
    },
    //---------------------------------------------------
    calScale(val) {
      let sum = this.maxValue - this.minValue
      if (sum != 0)
        return val / sum
    },
    //---------------------------------------------------
    calValue(scale) {
      scale = _.clamp(scale, 0, 1)
      let val = (this.maxValue - this.minValue) * scale
      val = Ti.Num.precise(val, this.precision)
      //console.log("calValue:", val)
      return val
    },
    //---------------------------------------------------
    evalMyHdlLeft(scale) {
      this.myHdlLeft = _.clamp(scale, 0, 1)
      //console.log("myHdlLeft:", this.myHdlLeft)
    },
    //---------------------------------------------------
    evalMyVal(scale) {
      this.myValue = this.calValue(scale)
    }
    //---------------------------------------------------
  },
  ////////////////////////////////////////////////////
  watch: {
    "value": {
      handler: function (newVal, oldVal) {
        if (newVal != oldVal) {
          newVal = newVal || 0
          let scale = newVal / (this.maxValue - this.minValue)
          this.evalMyHdlLeft(scale)
          this.myValue = newVal
        }
      },
      immediate: true
    },
    "myValue": function (newVal, oldVal) {
      if (newVal != oldVal
        && !_.isUndefined(oldVal)
        && newVal != this.value) {
        this.$notify("change", this.myValue)
      }
    }
  },
  //////////////////////////////////////////////////////
  mounted: async function () {
    Ti.Viewport.watch(this, {
      resize: () => {
        this.OnResize()
      }
    })
    _.delay(() => {
      this.OnResize()
    }, this.adjustDelay || 0)
  },
  ///////////////////////////////////////////////////
  beforeDestroy: function () {
    Ti.Viewport.unwatch(this)
  }
  ///////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-gis-leaflet-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/gis/leaflet/web-gis-leaflet-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "value" : {
    type : [Array, Object]
  },
  // - obj         : {lat, lng} 
  // - obj-list    : [{lat, lng}..]
  // - pair        : [lat, lng]
  // - pair-list   : [[lat, lng]..]
  // - geojson     : {type:"Point"...}
  "valueType" : {
    type : String,
    default : "obj",
    validator: v => /^(geojson|(obj|pair)(-list)?)$/.test(v)
  },
  // - WGS84
  // - GCJ02
  // - BD09
  "valueCoords" : {
    type : String,
    default : "WGS84",
    validator: v => /^(WGS84|GCJ02|BD09)$/.test(v)
  },
  "latlngPrecise" : {
    type : Number,
    default : 5
  },
  "displayType" : {
    type : String,
    default : "Point",
    validator: v => /^(Point|Cluster|Polyline|Polygon|Rectangle|Circle|GeoJson)$/.test(v)
  },
  "circleRadius" : {
    type : Number,
    default : 100   // In meters
  },
  "defaultLocation" : {
    type : Object,
    default : ()=>({
      lat: 39.97773512677837,
      lng: 116.3385673945887
    })
  },
  "objValue" : {
    type : [Array, Object],
    default : undefined
  },
  "objType" : {
    type : String,
    default : "obj",
    validator: v => /^(geojson|(obj|pair)(-list)?)$/.test(v)
  },
  "objDisplay" : {
    type : String,
    default : "Point",
    validator: v => /^(Point|Cluster|Polyline|Polygon|Rectangle|Circle|GeoJson)$/.test(v)
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "minZoom" : {
    type : Number,
    default : 1
  },
  "maxZoom" : {
    type : Number,
    default : 18
  },
  "zoom" : {
    type : Number,
    default : 14
  },
  "keepZoomBy" : {
    type : String,
    default : undefined
  },
  "mapOptions" : {
    type : Object,
    default : ()=>({})
  },
  "editPoint" : {
    type : String,
    default : "none",
    validator : v=>/^(none|drag|pin)$/.test(v)
  },
  "autoFitBounds" : {
    type : Boolean,
    default : true
  },
  "fitBoundsBy" : {
    type : Object,
    default : ()=>({
      padding: [50, 50]
    })
  },
  "showInfo" : {
    type : [Boolean, Object],
    default : ()=>({
      
    })
  },
  "cooling" : {
    type : Number,
    default : 500
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "showMarker" : {
    type : Boolean,
    default : false
  },
  "markerIcon" : {
    type : [String, Object, Function],
    //default : "png/map-pin-1.png"
    default : undefined
  },
  "markerIconOptions" : {
    type : Object,
    default: ()=>({})
  },
  // String : html template
  // Array  : list
  // Object : pair table
  // Function : customized HTML
  "markerPopup" : undefined,
  "markerPopupOptions" : {
    type : Object,
    default: ()=>({
      offset : [0, -40]
    })
  },
  "objShowMarker" : {
    type : Boolean,
    default : false
  },
  "objMarkerIcon" : {
    type : [String, Object],
    //default : "png/map-pin-1.png"
    default : undefined
  },
  "objMarkerIconOptions" : {
    type : Object,
    default: ()=>({})
  },
  // String : html template
  // Array  : list
  // Object : pair table
  // Function : customized HTML
  "objMarkerPopup" : undefined,
  "objMarkerPopupOptions" : {
    type : Object,
    default: ()=>({
      offset : [0, -40]
    })
  },
  "imageIconBase" : {
    type : String,
    default : "/gu/rs/ti/icons/"
  },
  "baseTileLayer" : {
    type : String,
    default: "QQ_VECTOR_NOTE"
  },
  "baseTileVars" : {
    type : Object
  },
  "noteTileLayer" : {
    type : String,
    default: null
  },
  "noteTileVars" : {
    type : Object
  },
  "aspect" : {
    type : Object,
    default: ()=>({})
  },
  "loading" : {
    type : Boolean,
    default : false
  },
  "loadingAs" : {
    type : Object,
    default : ()=>({
      className : "is-info as-big as-cover",
      icon : "fas-spinner fa-spin",
      text : "i18n:loading"
    })
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width" : {
    type : [Number, String],
    default : undefined
  },
  "height" : {
    type : [Number, String],
    default : undefined
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'www-mod-site.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/lib/www/mod/www-mod-site.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////
  getters: {
    //--------------------------------------------
    // Pre-compiled Site Routers
    routerList(state) {
      let list = []
      _.forEach(state.router, ({
        match, names = [], page = {}, preload
      } = {}) => {
        let regex = match ? new RegExp(match) : null;
        // Pre-compiled
        let li = function (path) {
          let context = {}
          if (regex) {
            let m = regex.exec(path)
            if (!m) {
              return
            }
            for (let i = 0; i < m.length; i++) {
              let val = m[i]
              context[i] = val
              let key = _.nth(names, i)
              if (key) {
                _.set(context, key, val)
              }
            }
          }
          // Match page
          return {
            context, page, preload
          }
        }

        // Join to list
        list.push(li)
      })
      return list
    },
    //--------------------------------------------
    globalApis(state) {
      return Ti.WWW.hydrateApi({
        base: state.apiBase,
        siteApis: state.apis,
        apis: state.global
      })
    },
    //--------------------------------------------
    // Site Action Mapping
    actions(state) {
      state.LOG("www-mod-site::getters.actions")
      // Global
      let map = _.cloneDeep(state.actions)

      // Evalue the actions
      map = _.mapValues(map, (val) =>
        _.isString(val)
          ? { action: val }
          : val)

      // Merge action set with the defination in page
      let page = state.page
      if (page) {
        _.forEach(page.actions, (val, key) => {
          let act = val
          // format val
          if (_.isString(val)) {
            act = { action: val }
          }

          // do merge
          let gAction = map[key]
          // Array+?
          if (_.isArray(gAction)) {
            // Array+Array
            if (_.isArray(act)) {
              if (act.length > 0) {
                // Concat Array
                if ("+" == act[0]) {
                  for (let z = 1; z < act.length; z++) {
                    gAction.push(act[z])
                  }
                }
                // Replace Array
                else {
                  map[key] = act
                }
              }
            }
            // Array+Object -> append
            else {
              gAction.push(act)
            }
          }
          // Object+Any -> replace
          else {
            map[key] = act
          }
        })
      }
      return map
    },
    //--------------------------------------------
    getUrl(state) {
      return (path) => {
        return Ti.Util.appendPath(state.base, path)
      }
    },
    //--------------------------------------------
    getApiUrl(state) {
      return (path) => {
        if (path.startsWith("/")) {
          return path
        }
        return Ti.Util.appendPath(state.apiBase, path)
      }
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  mutations: {
    //--------------------------------------------
    setSiteId(state, siteId) {
      state.siteId = siteId
    },
    //--------------------------------------------
    setDomain(state, domain) {
      state.domain = domain
      state.base = Ti.S.renderBy(state.base || "/www/${domain}/", { domain })
      state.apiBase = Ti.S.renderBy(state.apiBase || "/api/${domain}/", { domain })
    },
    //--------------------------------------------
    setLang(state, lang) {
      let as = state.langCase || "snake"
      state.lang = _[`${as}Case`](lang)
      state.langName = _.kebabCase(lang)
    },
    //--------------------------------------------
    explainNav(state) {
      if (state.nav) {
        if (!state.__nav_input) {
          state.__nav_input = _.cloneDeep(state.nav)
        }
        state.nav = Ti.Util.explainObj(state, state.__nav_input)
      }
    },
    //--------------------------------------------
    explainVars(state) {
      if (state.vars) {
        if (!state.__vars_input) {
          state.__vars_input = _.cloneDeep(state.vars)
        }
        state.vars = Ti.Util.explainObj(state, state.__vars_input)
      }
    },
    //--------------------------------------------
    setData(state, data) {
      state.data = data
    },
    //--------------------------------------------
    updateData(state, { key, value } = {}) {
      // kay-value pair is required
      if (!key || _.isUndefined(value)) {
        return
      }
      let vobj = _.set({}, key, value)
      state.data = _.assign({}, state.data, vobj)
    },
    //--------------------------------------------
    // key support path like "a.b.c"
    updateDataBy(state, { key, value }) {
      if (!key || _.isUndefined(value)) {
        return
      }
      let data = _.cloneDeep(state.data)
      _.set(data, key, value)
      state.data = data
    },
    //--------------------------------------------
    setLoading(state, loading) {
      state.loading = loading
    }
    //--------------------------------------------
  },
  ////////////////////////////////////////////////
  actions: {
    //--------------------------------------------
    async __run_gloabl_api({ commit, dispatch, state }, {
      api,
      vars,
      params,
      headers,
      body,
      ok, fail }) {
      //.....................................  
      await Ti.WWW.runApiAndPrcessReturn(state, api, {
        vars,
        params,
        headers,
        body,
        dispatch,
        ok, fail,
        mergeData: function (payload) {
          commit("mergeData", payload)
        },
        updateData: function (payload) {
          commit("updateData", payload)
        },
        doAction: async function (at) {
          await dispatch("doAction", at)
        }
      })
    },
    //--------------------------------------------
    /***
     * Reload page data by given api keys
     */
    async reloadGlobalData({ state, commit, getters, dispatch }, keys = []) {
      commit("setLoading", true)

      let apis = []
      for (let key of keys) {
        let api = _.get(getters.globalApis, key)
        if (!api) {
          continue;
        }
        state.LOG("  # -> page.reloadData -> prepareApi", api)
        if (api.preloadWhen) {
          if (!Ti.AutoMatch.test(api.preloadWhen, state)) {
            continue;
          }
        }
        apis.push(dispatch("__run_gloabl_api", { api }))
      }
      if (!_.isEmpty(apis)) {
        await Promise.all(apis)
      }
      commit("setLoading", false)
    },
    //--------------------------------------------
    navBackward() {
      if (window.history) {
        window.history.back()
      }
    },
    //--------------------------------------------
    async openUrl({ state }, {
      url, target = "_self", method = "GET", params = {}, delay = 0
    }) {
      await Ti.Be.Open(url, {
        target, method, params, delay
      })
    },
    //--------------------------------------------
    // Only handle the "page|dispatch"
    async navTo({ state, commit, dispatch }, {
      type = "page",
      value,    // page path
      anchor,   // page anchor
      data,     // page.data
      params    // page.params
    } = {}) {
      state.LOG("navToPage::", value)
      // Guarding
      if (!value)
        return
      // navTo::page
      if ("page" == type) {
        commit("setLoading", true)

        // maybe value is  full url with query string and hash
        let href = Ti.Util.parseHref(value)
        href.anchor = anchor || href.anchor
        href.params = params || href.params
        href.data = data

        // Reload
        state.LOG("@page:reload ...", _.cloneDeep(state.auth))
        await dispatch("page/reload", href)

        commit("setLoading", false)
        commit("explainNav")
        commit("explainVars")
      }
      // navTo::invoke
      else if ("invoke" == type) {
        await dispatch(value, params)
      }
      // navTo::mutation
      else if ("mutation" == type) {
        await commit(value, params)
      }
    },
    //--------------------------------------------
    /***
     * Handle the action dispatching.
     * 
     * One action should be defined in `[page].json#actions`:
     * 
     * ```js
     * {
     *    action : "xx/xx",
     *    payload : {} | [] | ...
     * }
     * ```
     * 
     * @param action{String} - action name like `page/showBlock`
     * @param payload{Object|Array} - action payload, defined in `json` file
     * @param args{Array} - the dynamic information emitted by `[Com].$emit`
     * 
     * @return {void}
     */
    async doAction({ state, dispatch }, AT) {
      // Guard nil
      if (!AT) {
        return
      }
      state.LOG("doAction", AT)
      //....................................
      // Raw function
      //....................................
      if (_.isFunction(AT)) {
        return await AT()
      }

      // Fire another action
      if (AT.fire) {
        let { name, args, memo } = AT
        // Guard for Infinite recursion
        if (_.indexOf(memo, name) >= 0) {
          console.warn("May Infinite recursion invokeAction", {
            name, args, memo
          })
          return
        }
        // Prepare to call another action
        memo.push(name)
        try {
          state.LOG("fire At", AT)
          let args2 = Ti.Util.explainObj(state, args)
          await dispatch("invokeAction", {
            name, args: args2, memo
          })
        }
        catch (E) {
          console.warn(`Fail to doAction[${name}]`, {
            name, args, memo
          })
        }
        // clean self name
        finally {
          memo.pop()
        }
        return
      }

      //....................................
      // Combo: [F(), args] or [{action}, args]
      //....................................
      if (_.isArray(AT) && AT.length == 2) {
        let actn = AT[0]
        let args = AT[1]
        // Make sure it is not batch action call
        if (args && !args.action && !_.isFunction(args)) {
          // Force args to array
          if (!_.isUndefined(args) && !_.isArray(args)) {
            args = [args]
          }
          // Normlize action form
          if (_.isFunction(actn)) {
            AT = {
              action: actn,
              args
            }
          }
          // Grouping Action
          else if (_.isArray(actn)) {
            AT = []
            for (let an of actn) {
              AT.push(_.assign({}, an, { args }))
            }
          }
          // Merge
          else {
            AT = _.assign({}, actn, { args })
          }
        }
      }
      //....................................
      // String
      if (_.isString(AT)) {
        AT = { action: AT }
      }

      //....................................
      // Groupping
      if (_.isArray(AT)) {
        for (let a of AT) {
          await dispatch("runAction", a)
        }
      }
      // Run action
      else {
        await dispatch("runAction", AT)
      }
    },
    //--------------------------------------------
    async runAction({ state, commit, dispatch }, {
      invoke,
      mutation,
      action,
      test,       // AutoMatch
      testMsg = "i18n:e-run-action-test-fail",
      confirm,
      payload,
      args
    } = {}) {
      //....................................
      if (!invoke && !action && !mutation)
        return;

      //....................................
      // Test precondition
      if (test) {
        let ctx = _.assign({}, state, { payload, args })
        let t2 = Ti.Util.explainObj(ctx, test)
        if (!Ti.AutoMatch.test(t2, state)) {
          // Warn user
          if (testMsg) {
            return await Ti.Toast.Open(testMsg, "warn")
          }
          // Skip quietly
          return
        }
      }
      //....................................
      // Confirm the operation with user
      if (confirm) {
        if (!(await Ti.Confirm(confirm, { type: "warn" }))) {
          return
        }
      }
      //....................................
      args = args || []
      let pld;

      // Use args directrly cause payload without defined
      if (_.isUndefined(payload) || _.isNull(payload)) {
        pld = _.cloneDeep(_.nth(args, 0))
      }
      //....................................
      // Explain payload
      else {
        let context = _.assign({}, state, {
          $args: args
        })
        pld = Ti.Util.explainObj(context, payload, {
          evalFunc: false
        })
      }
      //....................................

      //....................................
      if (invoke) {
        state.LOG("invoke.apply->", invoke, pld)
        invoke = Ti.Util.genInvoking(invoke, {
          context: state
        })
      }
      //....................................
      if (_.isFunction(invoke)) {
        await invoke.apply({ state, commit, dispatch }, [pld])
      }
      //....................................
      if (mutation) {
        state.LOG("invoke.mutation->", mutation, pld)
        commit(mutation, pld)
      }
      //....................................
      // Action
      if (action) {
        state.LOG("invoke.action->", action, pld)
        if (_.isFunction(action)) {
          await action(pld)
        }
        // Dispath
        else if (_.isString(action)) {
          await dispatch(action, pld)
        }
      }
    },
    //--------------------------------------------
    /***
     * Invoke action by given name
     */
    async invokeAction({ state, getters, dispatch, rootState }, {
      name = "", args = [], memo = []
    } = {}) {
      /*
      The action should like
      {
        action : "xx/xx",
        payload : {} | [] | ...
      } 
      */
      state.LOG("invokeAction", name, args)
      let actions = getters.actions;
      let AT = _.get(actions, name)

      // Try fallback
      if (!AT) {
        let canNames = _.split(name, "::")
        while (canNames.length > 1) {
          let [, ...names] = canNames
          let aName = names.join("::")
          AT = _.get(actions, aName)
          if (AT) {
            break
          }
          canNames = names
        }
      }

      // Guard
      if (!AT)
        return;

      // Invoke it
      try {
        // Batch call
        if (_.isArray(AT)) {
          for (let a of AT) {
            let da = { ...a, memo }
            if (!_.isEmpty(args)) {
              da.args = args
            }
            await dispatch("doAction", da)
            // Break
            if (!Ti.Util.isNil(a.breakNext)) {
              if (Ti.AutoMatch.test(a.breakNext, rootState)) {
                console.log("break!")
                break;
              }
            }
            // Continue
            if (!Ti.Util.isNil(a.continuNext)) {
              if (!Ti.AutoMatch.test(a.continuNext, rootState)) {
                console.log("!continuNext")
                break;
              }
            }
          }
        }
        // Direct call : String
        else if (_.isString(AT)) {
          await dispatch("doAction", {
            action: AT,
            args,
            memo
          })
        }
        // Direct call : Object
        else {
          await dispatch("doAction", {
            ...AT,
            args,
            memo
          })
        }
      }
      // For Error
      catch (e) {
        console.error(e)
      }
    },
    //--------------------------------------------
    async reload({ state, commit, dispatch, getters }, { loc, lang } = {}) {
      state.LOG = () => { }
      //state.LOG = console.log
      state.LOG("site.reload", state.entry, state.base, state.lang)
      let { wxJsSDK } = state
      //---------------------------------------
      if (wxJsSDK) {
        state.LOG("Install WeiXin JS-SDK")
        let jssdk = await Ti.Load("//res.wx.qq.com/open/js/jweixin-1.6.0.js");
        state.LOG("Get JS-SDK", jssdk)
      }
      //---------------------------------------
      // Looking for the entry page
      // {href,protocol,host,port,path,search,query,hash,anchor}
      loc = loc || Ti.Util.parseHref(window.location.href)
      //---------------------------------------
      // Format lang to the expect case: snake/kebab/camel
      if (lang) {
        commit("setLang", lang)
      }
      //---------------------------------------
      // Explain nav
      commit("explainNav")
      //---------------------------------------
      // Setup dictionary
      if (state.dictionary) {
        _.forEach(state.dictionary, (dict, name) => {
          let d = Ti.DictFactory.GetDict(name)
          if (!d) {
            state.LOG("create", name, dict)
            Ti.DictFactory.CreateDict({
              //...............................................
              data: Ti.WWW.genQuery(dict.data, { vkey: null }),
              query: Ti.WWW.genQuery(dict.query),
              item: Ti.WWW.genQuery(dict.item, {
                blankAs: "{}"
              }),
              children: Ti.WWW.genQuery(dict.children),
              //...............................................
              getValue: Ti.Util.genGetter(dict.value),
              getText: Ti.Util.genGetter(dict.text),
              getIcon: Ti.Util.genGetter(dict.icon),
              //...............................................
              shadowed: Ti.Util.fallback(dict.shadowed, true)
              //...............................................
            }, { name })
          }
        })
      }

      // Update the auth
      commit("auth/mergePaths", state.authPaths)

      // Reload the global data
      let { preloads, afterLoads } = Ti.WWW.groupPreloadApis(getters.globalApis)
      //..........................................
      // init global data
      for (let keys of preloads) {
        await dispatch("reloadGlobalData", keys)
      }

      // Eval the entry page
      let entry = state.entry
      if (loc.path.startsWith(state.base)) {
        entry = loc.path.substring(state.base.length) || entry;
      }

      // nav to page
      await dispatch("navTo", {
        type: "page",
        value: entry,
        params: loc.params,
        hash: loc.hash,
        anchor: loc.anchor,
        pushHistory: false
      })

      //..........................................
      // Load the after page completed
      if (!_.isEmpty(afterLoads.length)) {
        dispatch("reloadGlobalData", afterLoads)
      }
    }
    //--------------------------------------------
  }
  ////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'ti-search.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/search/ti-search.mjs'] = (function(){
//////////////////////////////////////////////////////
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  props: {
    //------------------------------------------------
    // Data
    //------------------------------------------------
    "list": {
      type: Array,
      default: () => []
    },
    "loading": {
      type: Boolean,
      default: false
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //------------------------------------------------
    GUILayout() {
      return {
        type: "rows",
        border: true,
        blocks: [
          {
            name: "filter",
            size: "auto",
            body: "filter"
          },
          {
            name: "list",
            size: "stretch",
            body: "list"
          },
          {
            name: "pager",
            size: "auto",
            body: "pager"
          }
        ]
      }
    },
    //------------------------------------------------
    GUISchema() {
      return {
        //................................
        filter: {
          comType: this.filterComType,
          comConf: _.assign({
            dialog: {
              "icon": "fas-search",
              "title": "i18n:search-adv",
              "position": "top",
              "width": "6.4rem",
              "height": "90%"
            },
            matchKeywords: [
              {
                "test": "^[\\d\\w:]{26,}$",
                "key": "id"
              },
              {
                "key": "title",
                "mode": "~~"
              }
            ],
            filterTags: {
              "th_live": "i18n:thing-recycle-bin",
              "id": "->ID【${val}】",
              "nm": "=val",
              "title": "=val",
              "abbr": "=val",
              "ct": "<MsDateRange>",
              "lm": "<MsDateRange>"
            },
            sorterConf: {
              options: [
                {
                  "value": "nm",
                  "text": "i18n:wn-key-nm"
                },
                {
                  "value": "ct",
                  "text": "i18n:wn-key-ct"
                },
                {
                  "value": "lm",
                  "text": "i18n:wn-key-lm"
                }
              ]
            }
          }, this.filterComConf, {
            filter: this.filter,
            sorter: this.sorter,
          })
        },
        //................................
        list: {
          comType: this.listComType,
          comConf: _.assign({
            multi: this.multi
          }, this.listComConf, {
            data: this.list
          })
        },
        //................................
        pager: {
          comType: "TiPagingJumper",
          comConf: {
            value: this.pager,
            valueType: this.pagerValueType
          }
        }
        //................................
      }
    },
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------

    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'web-text-article-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/text/article/web-text-article-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "value": {
    type: String,
    default: undefined
  },
  "type": {
    type: String,
    default: "html",
    validator: v => /^(text|html|markdown|text\/(plain|html|markdown))$/.test(v)
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "ignoreBlank": {
    type: Boolean,
    default: false
  },
  // If <p> is blank text, find the empty span and insert `&nbsp;`
  "inflateBlankP": {
    type: Boolean,
    default: true
  },
  "apiTmpl": {
    type: String,
    default: undefined
  },
  "cdnTmpl": {
    type: String,
    default: undefined
  },
  "dftImgSrc": {
    type: String,
    default: undefined
  },
  "downTmpl": {
    type: String,
    default: undefined
  },
  "fbAlbumApiTmpl": {
    type: String,
    default: undefined
  },
  "ytPlayerTmpl": {
    type: String,
    default: "https://www.youtube.com/watch?v=${id}"
  },
  "afterRedraw": {
    type: [String, Object, Function]
  },
  "redrawnNotifyName": {
    type: String,
    default: "content:redrawn"
  },
  "whenReady": {
    type: [String, Object, Function]
  },
  "readyNotifyName": {
    type: String,
    default: "content:ready"
  },
  "whenAlbumBeforeClose": {
    type: Function
  },
  "albumBeforeCloseNotifyName": {
    type: String
  },
  "whenAlbumClosed": {
    type: Function
  },
  "albumClosedNotifyName": {
    type: String
  },
  "photoGalleryShowOpener": {
    type: Boolean,
    default: true
  },
  "deconTable": {
    type: Boolean,
    default: false
  },
  "mediaRawSize": {
    type: Boolean,
    default: false
  },
  "showImageGallery": {
    type: Boolean,
    default: true
  },
  // You can write js:alert() in @href, it will be 
  // translate to javascript:alert()
  "allowJsHref": {
    type: Boolean,
    default: false
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "articleStyle": {
    type: Object
  },
  "theme": {
    type: String,
    default: "nice"
  },
  "loadingAs": {
    type: Object,
    default: () => ({
      className: "as-nil-mask as-big",
      icon: "fas-spinner fa-spin",
      text: "i18n:loading"
    })
  },
  "blankAs": {
    type: Object,
    default: () => ({
      comType: "TiLoading",
      comConf: {
        className: "as-nil-mask as-big",
        icon: "fas-coffee",
        text: null
      }
    })
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-combo-multi-input.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/combo/multi-input/wn-combo-multi-input.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  ////////////////////////////////////////////////////
  data : ()=>({
    loading : false
  }),
  ////////////////////////////////////////////////////
  // props 
  props : {
    "itemBy" : {
      type : [String, Function],
      default : undefined
    },
    "findBy" : {
      type : [String, Function],
      default : undefined
    },
    "loadingIcon" : {
      type : String,
      default : "zmdi-settings zmdi-hc-spin"
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    DropComType() {
      return this.dropComType || "wn-list"
    },
    //------------------------------------------------
    ThePrefixIcon() {
      if(this.loading && this.prefixIcon) {
        return this.loadingIcon
      }
      return this.prefixIcon
    },
    //---------------------------------------------------
    OptionsDict() {
      return Wn.Dict.evalOptionsDict(this, ({loading}) => {
        this.loading = loading
      })
    },
    //------------------------------------------------
    TheTagMapping() {
      if(!_.isEmpty(this.tagMapping)) {
        return this.tagMapping
      }
      return {
        text  : "title|text|nm",
        icon  : "icon",
        value : "id|value"
      }
    },
    //------------------------------------------------
    TheTagItemIconBy() {
      return this.tagItemIconBy
               || (meta => Wn.Util.getObjIcon(meta, this.tagItemDefaultIcon))
     },
    //---------------------------------------------------
    TheDropDisplay() {
      return this.dropDisplay || ["@<thumb>", "title", "nm"]
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-chart-raw-line.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/chart/raw/line/ti-chart-raw-line.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  props : {
    "areaView" : {
      type : [Object, Boolean],
      default : false
    },
    "pointView" : {
      type : [Object, Boolean],
      default : true
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    ChartSetup() {
      return (chart, data)=>{
        //console.log(data)
        let {list} = this.evalXYData(data)
        if(_.isEmpty(list))
          return

        // Set data
        chart.data(list);

        // Axis/Tick/Tooltip ...
        this.applyChartSetup(chart)

        // Draw line
        let view = chart.line().position(this.ChartPosition)
        this.applyViewOptions(view, this.view)

        // Draw point
        if(this.areaView) {
          view = chart.area().position(this.ChartPosition)
          this.applyViewOptions(view, this.areaView)
        }

        // Draw point
        if(this.pointView) {
          view = chart.point().position(this.ChartPosition)
          this.applyViewOptions(view, {   
            size  : 4,
            shape : 'circle',
            style : {
              stroke: '#FFF',
              lineWidth: 1
            }
          }, this.pointView)
        }

      } // ~ function
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods : {
    //------------------------------------------------
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-switcher-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/switcher/ti-switcher-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "value": null,
  "options": {
    type: [Array, Function, String, Ti.Dict],
    default: () => []
  },
  "fixedOptions": {
    type: [Array, Function, String, Ti.Dict],
    default: () => []
  },
  "valueBy": {
    type: [String, Function],
    default: undefined
  },
  "textBy": {
    type: [String, Function],
    default: undefined
  },
  "iconeBy": {
    type: [String, Function],
    default: undefined
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "readonly": {
    type: Boolean,
    default: false
  },
  "multi": {
    type: Boolean,
    default: false
  },
  "autoToggle": {
    type: Boolean,
    default: true
  },
  // In single mode, to keep at least one item selected,
  // you can set the prop to `false`
  "allowEmpty": {
    type: Boolean,
    default: true
  },
  "autoSplitValue": {
    type: [Boolean, String],
    default: true
  },
  "joinBy": {
    type: [String, Function],
    default: undefined
  },
  "autoValueTip": {
    type: Boolean,
    default: true
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "defaultIcon": {
    type: String,
    default: null
  },
  "emptyAs": {
    default: null
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width": {
    type: [Number, String],
    default: null
  },
  "height": {
    type: [Number, String],
    default: null
  }
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-gui.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/gui/wn-gui.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  inheritAttrs : false,
  /////////////////////////////////////////
  data : function(){
    return {
      "shown" : {}
    }
  },
  /////////////////////////////////////////
  props : {
    "data" : {
      type : Object,
      default : ()=>({})
    }
  },
  //////////////////////////////////////////
  computed : {
    layout() {
      if(this.data)
        return this.data.layout
      return {}
    },
    schema() {
      if(this.data)
        return this.data.schema
      return {}
    }
  },
  //////////////////////////////////////////
  watch : {
    // Notify wn-manager update the action menu
    "data.actions" : function(){
      //this.$notify("actions:updated", this.data.actions)
    }
  },
  //////////////////////////////////////////
  methods : {
    // @see ti-gui-methods.mjs#showGuiBlock
    showBlock(name) {
      this.shown = this.createGuiBlockShown(this.shown, name, true)
    },
    // @see ti-gui-methods.mjs#hideGuiBlock
    hideBlock(name) {
      this.shown = this.createGuiBlockShown(this.shown, name, false)
    }
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-paging-jumper.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/paging/jumper/ti-paging-jumper.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ///////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //--------------------------------------
    hasValue() {
      return !_.isEmpty(this.PageValue)
        && this.PageValue.pn > 0
        && this.PageValue.pgc > 0
    },
    //--------------------------------------
    PageNumberClass() {
      return this.hasValue && this.PageValue.pgc > 1
        ? "is-enabled"
        : "is-disabled"
    },
    //--------------------------------------
    SumClass() {
      return this.hasValue && this.PageValue.pgsz > 0
        ? "is-enabled"
        : "is-disabled"
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  methods: {
    //--------------------------------------
    isInvalidPageNumber(pageNumber) {
      return pageNumber <= 0
        || pageNumber > this.PageValue.pgc
        || pageNumber == this.PageValue.pn
    },
    //--------------------------------------
    getBtnClass(pageNumber) {
      if (!this.hasValue || this.isInvalidPageNumber(pageNumber)) {
        return "is-disabled"
      }
      return "is-enabled"
    },
    //--------------------------------------
    OnJumpTo(pageNumber) {
      if (!this.isInvalidPageNumber(pageNumber)) {
        //console.log("OnJumpTo", pageNumber)
        this.notifyChange({
          skip: this.PageValue.pgsz * (pageNumber - 1),
          limit: this.PageValue.pgsz,
          pn: pageNumber,
          pgsz: this.PageValue.pgsz
        })
      }
    },
    //--------------------------------------
    async OnClickCurrent() {
      // No Necessary
      if (this.PageValue.pgc <= 1)
        return
      // Ask new pageNumber
      let msg = Ti.I18n.getf("paging-change-pn", this.PageValue)
      let str = await Ti.Prompt(msg, {
        value: this.PageValue.pn
      })
      // NoChange
      if (!str || str == this.PageValue.pn)
        return
      // verify the str
      let pn = parseInt(str)
      if (isNaN(pn) || pn <= 0 || pn > this.PageValue.pgc) {
        msg = Ti.I18n.getf("paging-change-pn-invalid", this.PageValue)
        await Ti.Alert(msg, {
          title: "i18n:warn",
          type: "warn",
          icon: "im-warning",
          width: 420
        })
        return
      }
      // 通知修改
      this.notifyChange({
        skip: this.PageValue.pgsz * (pn - 1),
        limit: this.PageValue.pgsz,
        pn: pn,
        pgsz: this.PageValue.pgsz
      })
    },
    //--------------------------------------
    async OnClickSum() {
      let msg = Ti.I18n.getf("paging-change-pgsz", this.PageValue)
      let str = await Ti.Prompt(msg, {
        value: this.PageValue.pgsz
      })
      // NoChange
      if (!str || str == this.PageValue.pgsz)
        return
      // verify the str
      let pgsz = parseInt(str)
      if (isNaN(pgsz) || pgsz <= 0) {
        await Ti.Alert("i18n:paging-change-pgsz-invalid", {
          title: "i18n:warn",
          type: "warn",
          icon: "im-warning",
          width: 420
        })
        return
      }
      // 通知修改
      this.$notify("change:pgsz", pgsz)
      this.notifyChange({
        skip: 0,
        limit: pgsz,
        pn: 1,
        pgsz: pgsz
      })
    }
  }
  ///////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-input-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/ti-input-props.mjs'] = (function(){
const COM_TYPE = "TiInput";
const __TI_MOD_EXPORT_VAR_NM = {
  //-----------------------------------
  // Data
  //-----------------------------------
  "value": undefined,
  "format": undefined,
  "valueCase": {
    type: String,
    default: undefined,
    validator: (cs) => Ti.Util.isNil(cs) || Ti.S.isValidCase(cs)
  },
  "trimed": {
    type: Boolean,
    default: true
  },
  "autoJsValue": {
    type: Boolean,
    default: false
  },
  /* {test:AutoMatch, message} */
  "validator": {
    type: Object
  },
  "valueTip": {
    type: [String, Object]
  },
  //-----------------------------------
  // Behavior
  //-----------------------------------
  "emptyAsNull": {
    type: Boolean,
    default: Ti.Config.getComProp(COM_TYPE, "emptyAsNull", true)
  },
  "readonly": {
    type: Boolean,
    default: false
  },
  "focused": {
    type: Boolean,
    default: false
  },
  "hover": {
    type: [Array, String],
    default: () => ["prefixIcon", "suffixIcon"]
  },
  "prefixIconForClean": {
    type: Boolean,
    default: true
  },
  "autoSelect": {
    type: Boolean,
    default: undefined
  },
  "prefixIconNotifyName": {
    type: String,
    default: "prefix:icon"
  },
  "prefixTextNotifyName": {
    type: String,
    default: "prefix:text"
  },
  "suffixIconNotifyName": {
    type: String,
    default: "suffix:icon"
  },
  "suffixTextNotifyName": {
    type: String,
    default: "suffix:text"
  },
  "enterKeyNotifyName": {
    type: String,
    default: "key:enter:fired"
  },
  //-----------------------------------
  // Aspect
  //-----------------------------------
  "placeholder": {
    type: [String, Number],
    default: undefined
  },
  "autoI18n": {
    type: Boolean,
    default: false
  },
  "hideBorder": {
    type: Boolean,
    default: false
  },
  "prefixIcon": {
    type: [String, Object, Boolean],
    default: undefined
  },
  "prefixHoverIcon": {
    type: String,
    default: "zmdi-close-circle"
  },
  "prefixText": {
    type: [String, Number],
    default: undefined
  },
  "suffixIcon": {
    type: [String, Object],
    default: undefined
  },
  "suffixText": {
    type: [String, Number],
    default: undefined
  },
  //-----------------------------------
  // Measure
  //-----------------------------------
  "width": {
    type: [Number, String],
    default: undefined
  },
  "height": {
    type: [Number, String],
    default: undefined
  }
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-obj-adaptor-methods.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/adaptor/wn-obj-adaptor-methods.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  //--------------------------------------------
  async invoke(fnName, ...args) {
    //console.log("invoke ", fnName, args)
    let fn = _.get(this.objMethods, fnName);
    // Invoke the method
    if (_.isFunction(fn)) {
      return await fn.apply(this, args);
    }
    // Throw the error
    else {
      throw Ti.Err.make("e.thing.fail-to-invoke", fnName);
    }
  },
  //--------------------------------------------
  //
  // Export
  //
  //--------------------------------------------
  async openDataDir(target) {
    let taDir = target || `id:${this.dirId}`;
    let oDir = await Wn.Io.loadMeta(taDir);
    let link = Wn.Util.getAppLink(oDir);
    Ti.Be.Open(link.url, { params: link.params });
  },
  //--------------------------------------------
  async exportDataByModes(mode = "csv;xls;json", target) {
    await this.exportData({ target, mode });
  },
  //--------------------------------------------
  async exportData({
    target,
    mode = "xls;csv;json",
    page = "checked;current;all",
    name = "${title|nm}-${time}",
    mappingDir
  } = {}) {
    // Guard
    if (!this.oDir) {
      throw `ExportData[${this.dirId}] without oDir`;
    }
    if (!target) {
      throw `ExportData[${this.dirId}] without target`;
    }
    //............................................
    // Guard mapping dir
    mappingDir =
      mappingDir || _.get(this.oDir, "mapping_dir") || this.mappingDirPath;
    if (!mappingDir) {
      throw `ExportData[${this.dirId}] without mappingDir`;
    }
    //............................................
    let taDir = target;
    //............................................
    // Eval default export name
    let enVars = {
      ...this.oDir,
      title: Ti.I18n.text(this.oDir.title || this.oDir.nm),
      time: Ti.DateTime.format(new Date(), "yyyy-MM-dd_HHmmss")
    };
    let exportName = Ti.S.renderBy(name, enVars);
    //console.log(exportName)
    //............................................
    // Try load export mapping template
    let phMappingDir = Ti.S.renderBy(mappingDir, this.oDir);
    let oMappingDir = await Wn.Io.loadMeta(phMappingDir);
    let oMapplingItems = [];
    if (oMappingDir) {
      oMapplingItems = (await Wn.Io.loadChildren(oMappingDir)).list;
    }
    //............................................
    // The checked id list
    let checkedIds = Ti.Util.truthyKeys(this.checkedIds);
    //............................................
    // Prepare the result
    let result = {
      mode: "xls",
      page: _.isEmpty(checkedIds) ? "current" : "checked",
      limit: 1000,
      name: exportName,
      expiIn: 3,
      fltInput: null,
      cmdText: undefined,
      outPath: undefined,
      target: undefined
    };
    //............................................
    // Eval modes options
    let modeNames = mode.split(";");
    let modeMap = {
      xls: { value: "xls", text: "i18n:wn-export-c-mode-xls" },
      csv: { value: "csv", text: "i18n:wn-export-c-mode-csv" },
      json: { value: "json", text: "i18n:wn-export-c-mode-json" },
      zip: { value: "zip", text: "i18n:wn-export-c-mode-zip" }
    };
    let modeOptions = [];
    _.forEach(modeNames, (nm) => {
      if (modeMap[nm]) modeOptions.push(modeMap[nm]);
    });
    //result.mode = _.first(modeOptions).value
    //............................................
    // Eval page options
    let pageModes = page.split(";");
    let pageMap = {
      checked: { value: "checked", text: "i18n:wn-export-c-page-checked" },
      current: { value: "current", text: "i18n:wn-export-c-page-current" },
      all: { value: "all", text: "i18n:wn-export-c-page-all" }
    };
    let pageOptions = [];
    _.forEach(pageModes, (md) => {
      if (pageMap[md]) pageOptions.push(pageMap[md]);
    });
    //result.page = _.first(pageOptions).value
    //............................................
    // Make the config form fields
    let formFields = [];
    formFields.push({
      title: "i18n:wn-export-c-mode",
      name: "mode",
      comType: "TiSwitcher",
      comConf: {
        allowEmpty: false,
        options: modeOptions
      }
    });
    if (!_.isEmpty(oMapplingItems)) {
      result.mapping = _.first(oMapplingItems).id;
      formFields.push({
        title: "i18n:wn-export-c-mapping",
        name: "mapping",
        comType: "TiDroplist",
        comConf: {
          options: oMapplingItems,
          iconBy: "icon",
          valueBy: "id",
          textBy: "title|nm",
          dropDisplay: ["<icon:zmdi-book>", "title|nm"]
        }
      });
    }
    formFields.push({
      title: "i18n:wn-export-c-page",
      name: "page",
      comType: "TiSwitcher",
      comConf: {
        allowEmpty: false,
        options: pageOptions
      }
    });
    formFields.push({
      title: "i18n:wn-export-c-limit",
      name: "limit",
      type: "Integer",
      visible: {
        "page": "all"
      },
      comType: "TiInputNum",
      comConf: {}
    });
    formFields.push({
      title: "i18n:wn-export-c-name",
      name: "name",
      comType: "TiInput",
      comConf: {}
    });
    formFields.push({
      title: "i18n:wn-export-c-expi",
      name: "expiIn",
      comType: "TiSwitcher",
      comConf: {
        allowEmpty: false,
        options: [
          { value: 3, text: "i18n:wn-export-c-expi-3d" },
          { value: 7, text: "i18n:wn-export-c-expi-7d" },
          { value: 14, text: "i18n:wn-export-c-expi-14d" },
          { value: 0, text: "i18n:wn-export-c-expi-off" }
        ]
      }
    });
    //............................................
    // Open the dialog to collection user selection
    let vm = this;
    await Ti.App.Open({
      title: "i18n:export-data",
      width: 640,
      height: 640,
      position: "top",
      textOk: null,
      textCancel: null,
      result,
      comType: "TiWizard",
      comConf: {
        style: {
          padding: ".5em"
        },
        steps: [
          {
            title: "i18n:wn-export-setup",
            comType: "TiForm",
            comConf: {
              data: ":=..",
              fields: formFields
            },
            prev: false,
            next: {
              enabled: {
                name: "![BLANK]"
              },
              handler: function () {
                let outPath = `${taDir}/${this.value.name}.${this.value.mode}`;
                let cmds = [`o id:${vm.dirId} @query`];
                //............................................
                // Eval Sorter
                if (!_.isEmpty(vm.sorter)) {
                  let sort = JSON.stringify(vm.sorter);
                  cmds.push(`-sort '${sort}'`);
                }
                //............................................
                // Eval filter
                let fltInput = JSON.stringify(
                  _.assign({}, vm.filter, vm.fixedMatch)
                );
                // Checked ids
                if ("checked" == this.value.page) {
                  fltInput = JSON.stringify({
                    id: checkedIds
                  });
                }
                // Join pager
                else if ("current" == this.value.page) {
                  let limit = vm.getters.searchPageSize || 1000;
                  let skip = Math.max(
                    limit * (vm.getters.searchPageNumber - 1),
                    0
                  );
                  cmds.push(`-limit ${limit}`);
                  cmds.push(`-skip  ${skip}`);
                }
                // All pager
                else if ("all" == this.value.page) {
                  let limit = this.value.limit || 1000;
                  cmds.push(`-limit ${limit}`);
                }

                // Join the export
                cmds.push("@json -cqnl");
                cmds.push(
                  "|",
                  'sheet -process "${P} : ${id} : ${title} : ${nm}"'
                );
                cmds.push("-tpo " + this.value.mode);
                // Mapping
                if (this.value.mapping) {
                  cmds.push(`-mapping id:${this.value.mapping}`);
                }

                cmds.push(`-out '${outPath}';\n`);

                // expi time
                if (this.value.expiIn > 0) {
                  cmds.push(
                    `obj ${outPath} -u 'expi:"%ms:now+${this.value.expiIn}d"';`
                  );
                }

                // Join command
                let cmdText = cmds.join(" ");

                // Confirm change
                this.$notify("change", {
                  ...this.value,
                  outPath,
                  cmdText,
                  fltInput
                });

                // Go to run command
                this.gotoFromCurrent(1);
              }
            }
          },
          {
            title: "i18n:wn-export-ing",
            comType: "WnCmdPanel",
            comConf: {
              value: ":=cmdText",
              input: ":=fltInput",
              tipText: "i18n:wn-export-ing-tip",
              tipIcon: "fas-bullhorn",
              emitName: "step:change",
              emitPayload: "%next"
            },
            prev: false,
            next: false
          },
          {
            title: "i18n:wn-export-done",
            prepare: async function () {
              let oTa = await Wn.Io.loadMeta(this.value.outPath);
              this.$notify("change", {
                ...this.value,
                target: oTa
              });
            },
            comType: "WebMetaBadge",
            comConf: {
              className: "is-success",
              value: ":=target",
              icon: "fas-check-circle",
              title: "i18n:wn-export-done-ok",
              brief: "i18n:wn-export-done-tip",
              links: [
                {
                  icon: "fas-download",
                  text: ":=target.nm",
                  href: ":->/o/content?str=id:${target.id}&d=true",
                  newtab: true
                },
                {
                  icon: "fas-external-link-alt",
                  text: "i18n:wn-export-open-dir",
                  href: Wn.Util.getAppLink(taDir),
                  newtab: true
                }
              ]
            }
          }
        ]
      },
      components: [
        "@com:ti/wizard",
        "@com:ti/form",
        "@com:wn/cmd/panel",
        "@com:web/meta/badge"
      ]
    });
  },
  //--------------------------------------------
  //
  // Download / Upload
  //
  //--------------------------------------------
  async downloadCheckItems() {
    let list = this.getCheckedItems();
    if (_.isEmpty(list)) {
      return await Ti.Toast.Open("i18n:wn-download-none", "warn");
    }
    // Too many, confirm at first
    if (list.length > 5) {
      if (
        !(await Ti.Confirm({
          text: "i18n:wn-download-too-many",
          vars: { N: list.length }
        }))
      ) {
        return;
      }
    }
    // Do the download
    for (let it of list) {
      if ("FILE" != it.race) {
        if (
          !(await Ti.Confirm(
            {
              text: "i18n:wn-download-dir",
              vars: it
            },
            {
              textYes: "i18n:continue",
              textNo: "i18n:terminate"
            }
          ))
        ) {
          return;
        }
        continue;
      }
      let link = Wn.Util.getDownloadLink(it);
      //console.log(link, it)
      Ti.Be.OpenLink(link);
    }
  },
  //--------------------------------------------
  //
  // Open
  //
  //--------------------------------------------
  async openCurrentMetaEditor() {
    return await this.dispatch("openCurrentMetaEditor");
  },
  //--------------------------------------------
  async openCurrentPrivilege() {
    return await this.dispatch("openCurrentPrivilege");
  },
  //------------------------------------------------
  //
  // Delegate WnObjAdaptor methods
  //
  //------------------------------------------------
  getWnAdaptlist() {
    return this.findComBy(($com) => {
      return "WnAdaptlist" == $com.tiComType;
    });
  },
  //------------------------------------------------
  delegateWnAdaptlist(methodName, ...args) {
    let $AL = this.getWnAdaptlist();
    if ($AL) {
      return $AL[methodName](...args);
    }
  },
  //------------------------------------------------
  async asyncDelegateWnAdaptlist(methodName, ...args) {
    let $AL = this.getWnAdaptlist();
    if ($AL) {
      return await $AL[methodName](...args);
    }
  },
  //------------------------------------------------
  // Create
  //------------------------------------------------
  async doCreate() {
    let reo = await this.asyncDelegateWnAdaptlist("doCreate");
  },
  //------------------------------------------------
  // Delegates
  //------------------------------------------------
  invokeList(methodName) {
    return this.delegateWnAdaptlist("invokeList", methodName);
  },
  openLocalFileSelectdDialog() {
    return this.delegateWnAdaptlist("openLocalFileSelectdDialog");
  },
  async openCurrentPrivilege() {
    await this.dispatch("openCurrentPrivilege");
  },
  async doRename() {
    await this.dispatch("doRename");
  },
  async doBatchUpdate() {
    return this.asyncDelegateWnAdaptlist("doBatchUpdate");
  },
  async doMoveTo() {
    //return this.asyncDelegateWnAdaptlist("doMoveTo")
    await this.dispatch("moveTo");
  },
  async doDelete(confirm = true) {
    //return this.asyncDelegateWnAdaptlist("doDelete", confirm)
    let options = {};
    if (confirm) {
      options.confirm = "i18n:del-hard";
    }
    await this.dispatch("removeChecked", options);
  }
  //--------------------------------------------
};
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-gui-tabs.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/gui/tabs/ti-gui-tabs.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  inject: ["$gui"],
  /////////////////////////////////////////
  data: () => ({
    myCurrentTab: 0
  }),
  /////////////////////////////////////////
  props: {
    "tabAt": {
      type: String,
      default: "top-left",
      validator: (v) => /^(top|bottom)-(left|center|right)$/.test(v)
    },
    "blocks": {
      type: Array,
      default: () => []
    },
    "schema": {
      type: Object,
      default: () => ({})
    },
    "actionStatus": {
      type: Object,
      default: () => ({})
    },
    "shown": {
      type: Object,
      default: () => ({})
    }
  },
  //////////////////////////////////////////
  computed: {
    //--------------------------------------
    TopClass() {
      return this.getTopClass(`at-${this.TheTabAt[0]}`)
    },
    //--------------------------------------
    TheTabAt() {
      return this.tabAt.split("-")
    },
    //--------------------------------------
    TabClass() {
      return `as-${this.TheTabAt[1]}`
    },
    //--------------------------------------
    BlockWrapList() {
      let list = []
      for (let i = 0; i < this.blocks.length; i++) {
        let block = this.blocks[i]
        let key = block.name || `tab-${i}`
        list.push({
          index: i,
          key, block
        })
      }
      return list
    },
    //--------------------------------------
    TabItems() {
      let list = []
      for (let wrap of this.BlockWrapList) {
        let current = this.myCurrentTab == wrap.key
        let item = {
          current,
          key: wrap.key,
          index: wrap.index,
          name: wrap.block.name,
          icon: wrap.block.icon,
          title: wrap.block.title,
          className: { "is-current": current }
        }
        // tab item can not be blank
        if (!item.icon && !item.title) {
          item.title = Ti.Util.fallback(item.name, item.key)
        }
        list.push(item)
      }
      return list
    },
    //--------------------------------------
    CurrentTabItem() {
      for (let item of this.TabItems) {
        if (item.current) {
          return item
        }
      }
    },
    //--------------------------------------
    CurrentBlock() {
      for (let wrap of this.BlockWrapList) {
        if (this.myCurrentTab == wrap.key) {
          return wrap.block
        }
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  methods: {
    //--------------------------------------
    OnSetCurrentTabItem(item) {
      this.$gui.OnBlockShownUpdate({
        [item.key]: true,
        [this.CurrentTabItem.key]: false
      })
    },
    //--------------------------------------
    $current() {
      return _.nth(this.$children, 0)
    },
    //--------------------------------------
    $currentMain() {
      let $block = this.$current()
      if ($block)
        return $block.$main()
    },
    //--------------------------------------
    isBlockSizeMinimum(index) {
      return false
    },
    //--------------------------------------
    syncCurrentTabFromShown() {
      //console.log("syncCurrentTabFromShown")
      for (let wrap of this.BlockWrapList) {
        if (this.shown[wrap.key]) {
          this.myCurrentTab = wrap.key
          return
        }
      }
      // Default highlight the first tab
      if (this.BlockWrapList.length > 0) {
        this.myCurrentTab = this.BlockWrapList[0].key
      }
    }
    //--------------------------------------
  },
  //////////////////////////////////////////
  watch: {
    "shown": function () {
      this.syncCurrentTabFromShown()
    },
    "blocks": function () {
      this.syncCurrentTabFromShown()
    }
  },
  //////////////////////////////////////////
  mounted: function () {
    this.syncCurrentTabFromShown()
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'nav-columns.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/nav/columns/nav-columns.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  props : {
    "items" : {
      type : Array,
      default : ()=>[]
    },
    "path" : {
      type : String,
      default: null
    },
    "align" : {
      type : String,
      default : "center",
      validator: v => /^(left|center|right)$/.test(v)
    },
    "spacing" : {
      type : String,
      validator: v => /^(tiny|comfy|wide)$/.test(v)
    },
    "border" : {
      type : String,
      default : "solid",
      validator: v => /^(none|solid|dashed|dotted)$/.test(v)
    }
  },
  /////////////////////////////////////////
  computed : {
    //------------------------------------
    TopClass() {
      return this.getTopClass(
        `is-spacing-${this.spacing}`,
        `is-align-${this.align}`,
        ()=> {
          if(this.border)
            return `is-border-${this.border}`
        }
      )
    },
    //------------------------------------
    TheItems() {
      return this.evalItems(this.items)
    }
    //------------------------------------
  },
  /////////////////////////////////////////
  methods : {
    //------------------------------------
    OnClickLink(evt, {type,value,params}={}) {
      if(/^(page|action)$/.test(type)) {
        evt.preventDefault()
        //console.log("onClickLink", "nav:to", {type,value,params})
        this.$notify("nav:to", {type,value,params})
      }
    },
    //------------------------------------
    evalItems(items) {
      // Explain first
      items = Ti.WWW.explainNavigation(items, this.base)

      // The Eval
      let list = []
      _.forEach(items, (it, index)=>{
        //................................
        let li = _.pick(it, [
          "icon", "title", "type", "params",
          "href", "target", "value"])
        //................................
        li.index = index
        //................................
        if(this.path) {
          li.highlight = it.highlightBy(this.path)
        }
        //................................
        let hasHref = li.href ? true : false;
        li.className = {
          "has-href"    : hasHref,
          "nil-href"    : !hasHref,
          "is-highlight": li.highlight,
          "is-normal"   : !li.highlight,
        }
        //................................
        if(it.items) {
          li.items = this.evalItems(it.items)
        }
        //................................
        list.push(li)
        //................................
      })
      return list
    }
    //------------------------------------
  }
  /////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-table-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/table_old/ti-table-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  "iconBy": {
    type: [String, Function],
    default: null
  },
  "indentBy": {
    type: [String, Function],
    default: null
  },
  "fields": {
    type: Array,
    default: () => []
  },
  "head": {
    type: String,
    default: "frozen",
    validator: v =>
      Ti.Util.isNil(v)
      || /^(frozen|none|normal)$/.test(v)
  },
  "border": {
    type: String,
    default: "cell",
    validator: v => /^(row|column|cell|none)$/.test(v)
  },
  "autoScrollIntoView": {
    type: Boolean,
    default: true
  },
  "headDisplay": {
    type: [String, Object, Array],
    default: undefined
  },
  "columnResizable": {
    type: Boolean,
    default: false
  },
  "canCustomizedFields": {
    type: Boolean,
    default: false
  },
  "keepCustomizedTo": {
    type: String,
    default: undefined
  }
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-lbs-map-baidu.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/lbs/map/baidu/ti-lbs-map-baidu.mjs'] = (function(){
//
// The coordinate base on BD09
//
const __TI_MOD_EXPORT_VAR_NM = {
  /////////////////////////////////////////
  inheritAttrs : false,
  /////////////////////////////////////////
  data : ()=>({
    valueMarker : null
  }),
  /////////////////////////////////////////
  props : {
    // @see http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference_3_0.html#a5b0
    // ROADMAP    : BMAP_NORMAL_MAP
    // SATELLITE  : BMAP_SATELLITE_MAP
    // HYBRID     : BMAP_HYBRID_MAP
    "mapType" : {
      type : String,
      default : "ROADMAP"
    },
    // Map center : {"lat":39.9042, "lng":116.4074}
    // If null, it will auto sync with the value
    "center" : {
      type : Object,
      // default : ()=>({
      //   {"lat":39.9042, "lng":116.4074}
      // })
      default : null
    },
    "zoom" : {
      type : Number,
      default : 8
    },
    // A LatLng Point in map, which react the changing
    "value" : {
      type : Object,
      default : null
    },
    "valueOptions" : {
      type : Object,
      default : ()=>({
        icon : null,
        title : "UserMarker",
        // DOWN|BOUNCE|DROP|UP
        animation : "DOWN"
      })
    }
  },
  //////////////////////////////////////////
  computed : {
    //-------------------------------------
    mapCenterLatLng() {
      if(!_.isEmpty(this.center)) {
        return this.genLatLng(this.center)
      }
      if(!_.isEmpty(this.value)) {
        return this.genLatLng(this.value)
      }
      // Default center to beijing
      return this.genLatLng({lat:39.9042, lng:116.4074})
    },
    //-------------------------------------
    mapTypeId() {
      return ({
        "ROADMAP"   : BMAP_NORMAL_MAP,
        "SATELLITE" : BMAP_SATELLITE_MAP,
        "HYBRID"    : BMAP_HYBRID_MAP
      })[this.mapType] || BMAP_NORMAL_MAP
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  methods : {
    //-------------------------------------
    genLatLng({lat, lng}={}) {
      return new BMap.Point(lng, lat)
    },
    //-------------------------------------
    drawValue() {
      let $map = this.__map
      let opt  = this.valueOptions

      // Guard the value
      if(!this.value)
        return

      let point = this.genLatLng(this.value);
      var marker = new BMap.Marker(point)
      $map.addOverlay(marker);

      this.valueMarker = marker
    }
    //-------------------------------------
  },
  //////////////////////////////////////////
  watch : {
    "value" : function(){this.drawValue()}
  },
  //////////////////////////////////////////
  mounted : async function() {
    // Init Map
    let $map = new BMap.Map(this.$refs.arena, {
      mapType : this.mapTypeId
    })
    $map.centerAndZoom(this.mapCenterLatLng, this.zoom);
    $map.addControl(new BMap.MapTypeControl({
      mapTypes:[
              BMAP_NORMAL_MAP,
              BMAP_SATELLITE_MAP,
              BMAP_HYBRID_MAP
          ]}));	
    $map.enableScrollWheelZoom(true);
    // Store
    this.__map = $map
    // Draw Value
    this.drawValue()
  }
  //////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'wn-obj-adaptor-props.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/obj/adaptor/wn-obj-adaptor-props.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  "moduleName": {
    type: String,
    default: "main"
  },
  "guiShown": Object,
  //-----------------------------------
  // The Dir Home
  //-----------------------------------
  "dirId": {
    type: String
  },
  "oDir": Object,
  //-----------------------------------
  // The search list
  //-----------------------------------
  "fixedMatch": Object,
  "filter": Object,
  "sorter": Object,
  "list": Array,
  "currentId": [String, Number],
  "checkedIds": Object,
  "pager": Object,
  //-----------------------------------
  // Current Thing Meta/Content
  //-----------------------------------
  "meta": Object,
  "content": String,
  "contentData": [String, Object, Array],
  //-----------------------------------
  // Gloable Status
  //-----------------------------------
  "status": {
    type: Object,
    default: () => ({
      "reloading": false,
      "doing": false,
      "saving": false,
      "deleting": false,
      "changed": false,
      "restoring": false,
      "inRecycleBin": false
    })
  },
  "fieldStatus": {
    type: Object,
    default: () => ({})
  },
  "itemStatus": {
    type: Object,
    default: () => ({})
  },
  //-----------------------------------
  // Customized GUI
  //-----------------------------------
  "objActions": {
    type: Array, default: () => []
  },
  "layout": {
    type: Object, default: () => ({})
  },
  "schema": {
    type: Object, default: () => ({})
  },
  "objMethods": {
    type: Object, default: () => ({})
  },
  "events": {
    type: Object, default: () => ({})
  },
  //-----------------------------------
  // Getters
  //-----------------------------------
  "getters": {
    type: Object,
    default: () => ({})
  },
  "rootGetters": {
    type: Object,
    default: () => ({})
  },
  //-----------------------------------
  // Global View Setting
  //-----------------------------------
  "viewType": String,
  "exposeHidden": Boolean
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
// ============================================================
// EXPORT 'ti-input-tags.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/input/tags/ti-input-tags.mjs'] = (function(){
const _M = {
  ////////////////////////////////////////////////////
  data: () => ({

  }),
  ////////////////////////////////////////////////////
  props: {
    "inputChange": {
      type: Function,
      default: undefined
    }
  },
  ////////////////////////////////////////////////////
  computed: {
    //------------------------------------------------
    InputPrefixIcon() {
      if (this.readonly) {
        return
      }
      if (this.prefixIcon) {
        return this.prefixIcon
      }
      if (!_.isEmpty(this.value)) {
        return 'zmdi-minus'
      }
    },
    //------------------------------------------------
    /***
     * @return The tag objects list like:
     * 
     * ```js
     * [{
     *   icon  : "zmdi-phone",
     *   text  : "i18n:xxx",
     *   value : 100,
     *   options : [{icon,text,value}...]
     * }]
     * ```
     */
    theTags() {
      return this.evalTagList(this.value)
    },
    //------------------------------------------------
    hasTags() {
      return !_.isEmpty(this.theTags)
    },
    //------------------------------------------------
    thePlaceholder() {
      if (this.placeholder) {
        if (!this.readonly || !this.hasTags) {
          return this.placeholder
        }
      }
      if (this.readonly || !this.canInput) {
        return ""
      }
      return "i18n:input-tags"
    }
    //------------------------------------------------
  },
  ////////////////////////////////////////////////////
  methods: {
    //------------------------------------------------
    onInputInit($input) { this.$input = $input },
    //------------------------------------------------
    /***
     * @return The tag objects list like:
     * 
     * ```js
     * [{
     *   icon  : "zmdi-phone",
     *   text  : "i18n:xxx",
     *   value : 100,
     *   options : [{icon,text,value}...]
     * }]
     * ```
     */
    evalTagList(values = [], newTagVal) {
      //...........................................
      // Prepare the list
      let list = _.filter(_.concat(values), (v) => !Ti.Util.isNil(v))
      
      // Join the last one
      if (!Ti.Util.isNil(newTagVal)) {
        list.push(newTagVal)
      }
      // valueUnique
      if (this.valueUnique) {
        list = _.uniq(list)
      }
      // The MaxValueLen
      if (this.maxValueLen > 0) {
        list = _.slice(list, 0, this.maxValueLen)
      }
      // Slice from the end
      else if (this.maxValueLen < 0) {
        let offset = Math.max(0, list.length + this.maxValueLen)
        list = _.slice(list, offset)
      }
      // Gen Tag List
      let tags = []
      for (let li of list) {
        // Object
        if (_.isPlainObject(li)) {
          tags.push(_.assign({
            icon: this.tagIcon,
            options: this.tagOptions
          }, li))
        }
        // String or simple value
        else {
          tags.push(li)
        }
      }
      //...........................................
      return tags
    },
    //------------------------------------------------
    getTagValues(tags = []) {
      let list = []
      for (let tag of tags) {
        let val = _.isPlainObject(tag)
          ? tag.value
          : tag
        if (!Ti.Util.isNil(val)) {
          list.push(val)
        }
      }
      return list
    },
    //------------------------------------------------
    onInputInputing(val) {
      this.$notify("inputing", val)
    },
    //------------------------------------------------
    onInputChanged(val) {
      // May click the prefix icon for clean
      if (_.isNull(val)) {
        this.$notify("change", [])
      }
      // Delegate to parent
      else if (_.isFunction(this.inputChange)) {
        this.inputChange(val)
      }
      // Handle by self
      else if (val) {
        let tags = this.evalTagList(this.value, val)
        let vals = this.getTagValues(tags)
        this.$notify("change", vals)
      }
    }
    //------------------------------------------------
  }
  ////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'link-item.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/nav/links/com/link-item/link-item.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////////
  data: ()=>({
    myDockReady : false,
    myDockShow  : false,
  }),
  ///////////////////////////////////////////////////////
  methods : {
    //---------------------------------------------------
    dockSub: function() {
      // let $sub = Ti.Dom.find(".sub-items", this.$el)
      // // Guard
      // if(!$sub) {
      //   return
      // }
      // // Ready to dock
      // let $an = $sub.parentNode
      // let rAn = Ti.Rects.createBy($an)
      // let rSub = Ti.Rects.createBy($sub)
      // let css = Ti.Css.toStyle({
      //   top  : rAn.height,
      //   left : (rAn.width - rSub.width)/2
      // })
      // Ti.Dom.setStyle($sub, css)
      let $con = this.$refs.con
      if(!_.isElement($con))
        return

      let mode = "V";
      let space = {x:-1};
      if(this.isTop) {
        mode = "H"
        space = {y:-1}
      }
      Ti.Dom.dockTo($con, this.$el, {
        mode, space, coord: "target"
      })
      this.myDockReady = true
      _.delay(()=>{
        this.myDockShow = true
      }, 10)
    },
    //---------------------------------------------------
    dockSubDelay: function() {
      if(!this.isOpened) {
        this.myDockReady = false
        this.myDockShow  = false
        return
      }

      _.delay(()=>{
        if(!this.$refs.con) {
          this.dockSubDelay()
        } else {
          this.dockSub()
        }
      }, 10)
    }
    //---------------------------------------------------
  },
  ///////////////////////////////////////////////////////
  watch : {
    "isOpened" : "dockSubDelay"
  },
  ///////////////////////////////////////////////////////
  mounted : function() {
    Ti.Viewport.watch(this, {
      scroll : ()=> {
        if(this.isOpened) {
          this.notifyGroupOpenStatus(false)
        }
      }
    })
  },
  ///////////////////////////////////////////////////////
  beforeDestroy : function(){
    Ti.Viewport.unwatch(this)
  }
  ///////////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'web-pay-choose.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/web/pay/choose/web-pay-choose.mjs'] = (function(){
const _M = {
  /////////////////////////////////////////////////
  props : {
    "value" : {
      type : String,
      default : null
    }
  },
  //////////////////////////////////////////////////
  computed : {
    //----------------------------------------------
    TopClass() {
      return this.getTopClass()
    },
    //----------------------------------------------
    hasPayType() {
      return Ti.Bank.isValidPayType(this.value)
    },
    //----------------------------------------------
    PayTypeText() {
      return Ti.Bank.getPayTypeChooseI18nText(this.value, {
        text:'pay-step-choose-tip2',
        nil:'pay-step-choose-nil'
      })
    }
    //----------------------------------------------
  },
  //////////////////////////////////////////////////
  methods : {
    //----------------------------------------------
    OnChooseOption({value}={}) {
      this.$emit("change", {
        payType: value
      })
    },
    //----------------------------------------------
    getOptionClass(op) {
      if(op.value == this.value) {
        return "is-enabled"
      }
      return "is-disabled"
    }
    //----------------------------------------------
  },
  //////////////////////////////////////////////////
  mounted() {
    this.$notify("change:title", "pay-step-choose-title2")
  }
  //////////////////////////////////////////////////
}
return _M;;
})()
// ============================================================
// EXPORT 'wn-table.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/wn/table/wn-table.mjs'] = (function(){
const _M = {
  ///////////////////////////////////////////////////
  data: () => ({
  }),
  ///////////////////////////////////////////////////
  computed: {
    //----------------------------------------------
    TheHeadDisplay() {
      return this.explainDisplayItems(this.headDisplay);
    },
    //----------------------------------------------
    TheFields() {
      let list = [];
      for (let fld of this.fields) {
        let f2 = _.assign({}, fld);
        f2.display = this.explainDisplayItems(fld.display);
        list.push(f2);
      }
      return list;
    },
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  methods: {
    //----------------------------------------------
    
    //----------------------------------------------
  },
  ///////////////////////////////////////////////////
  watch: {
  },
  ///////////////////////////////////////////////////
};
return _M;;
})()
// ============================================================
// EXPORT 'ti-droplist.mjs' -> null
// ============================================================
window.TI_PACK_EXPORTS['ti/com/ti/droplist/ti-droplist.mjs'] = (function(){
const __TI_MOD_EXPORT_VAR_NM = {
  ////////////////////////////////////////////////////
  props : {
    "multi" : {
      type : Boolean,
      default : false
    }
  },
  ////////////////////////////////////////////////////
  computed : {
    //------------------------------------------------
    ComType() {
      return this.multi
        ? "ti-combo-multi-input"
        : "ti-combo-input"
    }
  }
  ////////////////////////////////////////////////////
}
return __TI_MOD_EXPORT_VAR_NM;;
})()
})();   // ~ windows.TI_EXPORTS
(function(){
//========================================
// JOIN <hm-automatch.html> ti/com/hm/automatch/hm-automatch.html
//========================================
Ti.Preload("ti/com/hm/automatch/hm-automatch.html", `<div class="hm-automatch" :class="TopClass">
  <!--
    Empty
  -->
  <TiLoading
    v-if="isEmpty"
      v-bind="blankAs"/>
  <!--
    List Match Items
  -->
  <div
    v-else
      class="as-list">
      <div
        v-for="it in DisplayItems"
          class="as-item"
          :class="it.className">
          <span class="as-icon" @click.left="OnRemoveItem(it)">
            <i class="fas fa-filter"></i>
            <i class="zmdi zmdi-close"></i>
          </span>
          <a @click.left="OnClickItem(it)">{{it.text}}</a>
          <span class="as-menu">
            <i
              class="zmdi zmdi-long-arrow-up move-up"
              @click.left="OnMoveUp(it)"></i>
            <i
              class="zmdi zmdi-long-arrow-down move-down"
              @click.left="OnMoveDown(it)"></i>
          </span>
      </div>
  </div>
  <!--
    Actions
  -->
  <TiButton
    class="is-tiny btn-r4"
    :setup="ActionSetup"/>
</div>`);
//========================================
// JOIN <hm-automatch.mjs> ti/com/hm/automatch/hm-automatch.mjs
//========================================
Ti.Preload("ti/com/hm/automatch/hm-automatch.mjs", TI_PACK_EXPORTS['ti/com/hm/automatch/hm-automatch.mjs']);
//========================================
// JOIN <_com.json> ti/com/hm/automatch/_com.json
//========================================
Ti.Preload("ti/com/hm/automatch/_com.json", {
  "name": "hm-automatch",
  "globally": true,
  "template": "./hm-automatch.html",
  "mixins": "./hm-automatch.mjs",
  "components": []
});
//========================================
// JOIN <config-io-detail.html> ti/com/hm/config/io/detail/config-io-detail.html
//========================================
Ti.Preload("ti/com/hm/config/io/detail/config-io-detail.html", `<div class="config-io-detail">
  <component
    class="ti-fill-parent"
    :is="MainCom.comType"
    v-bind="MainCom.comConf"/>
</div>`);
//========================================
// JOIN <config-io-detail.mjs> ti/com/hm/config/io/detail/config-io-detail.mjs
//========================================
Ti.Preload("ti/com/hm/config/io/detail/config-io-detail.mjs", TI_PACK_EXPORTS['ti/com/hm/config/io/detail/config-io-detail.mjs']);
//========================================
// JOIN <_com.json> ti/com/hm/config/io/detail/_com.json
//========================================
Ti.Preload("ti/com/hm/config/io/detail/_com.json", {
  "name" : "hm-config-io-detail",
  "globally" : true,
  "template" : "./config-io-detail.html",
  "mixins"   : ["./config-io-detail.mjs"],
  "components" : [
    "@com:ti/text/json",
    "@com:hm/config/io/ix/dao"
  ]
});
//========================================
// JOIN <hm-config-io.html> ti/com/hm/config/io/hm-config-io.html
//========================================
Ti.Preload("ti/com/hm/config/io/hm-config-io.html", `<WnFilesetTabs
  :meta="oHome"
  :view-ready="isViewReady"
  com-type="wn-fileset-list"
  :com-conf="FilesetListConf"
  :on-init="OnTabsInit"/>`);
//========================================
// JOIN <hm-config-io.mjs> ti/com/hm/config/io/hm-config-io.mjs
//========================================
Ti.Preload("ti/com/hm/config/io/hm-config-io.mjs", TI_PACK_EXPORTS['ti/com/hm/config/io/hm-config-io.mjs']);
//========================================
// JOIN <io-ix-dao.html> ti/com/hm/config/io/ix/dao/io-ix-dao.html
//========================================
Ti.Preload("ti/com/hm/config/io/ix/dao/io-ix-dao.html", `<TiForm
  class="hm-config-io-ix-dao auto-fit-tab-field no-pad-tab-body"
  v-bind="FormConf"
  :data="TheData"
  @change="OnFormChange"
  @field:change="OnFormFieldChange"/>`);
//========================================
// JOIN <io-ix-dao.mjs> ti/com/hm/config/io/ix/dao/io-ix-dao.mjs
//========================================
Ti.Preload("ti/com/hm/config/io/ix/dao/io-ix-dao.mjs", TI_PACK_EXPORTS['ti/com/hm/config/io/ix/dao/io-ix-dao.mjs']);
//========================================
// JOIN <_com.json> ti/com/hm/config/io/ix/dao/_com.json
//========================================
Ti.Preload("ti/com/hm/config/io/ix/dao/_com.json", {
  "name" : "hm-config-io-ix-dao",
  "globally" : true,
  "template" : "./io-ix-dao.html",
  "mixins"   : ["./io-ix-dao.mjs"],
  "components" : [
    "@com:ti/combo/table",
    "@com:ti/bullet/checkbox"
  ]
});
//========================================
// JOIN <_com.json> ti/com/hm/config/io/_com.json
//========================================
Ti.Preload("ti/com/hm/config/io/_com.json", {
  "name" : "hm-config-io",
  "globally" : true,
  "template" : "./hm-config-io.html",
  "mixins"   : ["./hm-config-io.mjs"],
  "components" : [
    "@com:hm/config/io/detail"
  ]
});
//========================================
// JOIN <hm-form-static-options.html> ti/com/hm/form/static-options/hm-form-static-options.html
//========================================
Ti.Preload("ti/com/hm/form/static-options/hm-form-static-options.html", `<TiComboTable
  :value="value"
  :quickTable="true"
  :list="ListComConf"
  :dialog="dialog"
  :form="FormComConf"
  :blankAs="blankAs"
  :actionAlign="actionAlign"
  :newItemIcon="newItemIcon"
  :newItemText="newItemText"
  :itemEditable="itemEditable"/>`);
//========================================
// JOIN <hm-form-static-options.mjs> ti/com/hm/form/static-options/hm-form-static-options.mjs
//========================================
Ti.Preload("ti/com/hm/form/static-options/hm-form-static-options.mjs", TI_PACK_EXPORTS['ti/com/hm/form/static-options/hm-form-static-options.mjs']);
//========================================
// JOIN <_com.json> ti/com/hm/form/static-options/_com.json
//========================================
Ti.Preload("ti/com/hm/form/static-options/_com.json", {
  "name": "hm-form-static-options",
  "globally": true,
  "template": "./hm-form-static-options.html",
  "mixins": "./hm-form-static-options.mjs",
  "components": [
    "@com:ti/combo/table"
  ]
});
//========================================
// JOIN <hm-prop-class-picker.html> ti/com/hm/prop/class-picker/hm-prop-class-picker.html
//========================================
Ti.Preload("ti/com/hm/prop/class-picker/hm-prop-class-picker.html", `<div class="hm-prop-class-picker full-field"
  :class="TopClass"
  @click.left="OnClickTop"
  v-ti-activable>
  <div
    v-for="txt of ValueTexts"
      class="as-name-item"><span>{{txt}}</span></div>
  <!--
    Clean btn
  -->
  <div class="as-cleaner"
    @click.left.stop="OnClickCleaner">
    <span><i class="zmdi zmdi-close"></i></span>
  </div>
</div>`);
//========================================
// JOIN <hm-prop-class-picker.mjs> ti/com/hm/prop/class-picker/hm-prop-class-picker.mjs
//========================================
Ti.Preload("ti/com/hm/prop/class-picker/hm-prop-class-picker.mjs", TI_PACK_EXPORTS['ti/com/hm/prop/class-picker/hm-prop-class-picker.mjs']);
//========================================
// JOIN <_com.json> ti/com/hm/prop/class-picker/_com.json
//========================================
Ti.Preload("ti/com/hm/prop/class-picker/_com.json", {
  "name" : "hm-prop-class-picker",
  "globally" : true,
  "template" : "./hm-prop-class-picker.html",
  "mixins" : ["./hm-prop-class-picker.mjs"],
  "components" : [
    "@com:ti/form"]
});
//========================================
// JOIN <hm-prop-css-rules.html> ti/com/hm/prop/css-rules/hm-prop-css-rules.html
//========================================
Ti.Preload("ti/com/hm/prop/css-rules/hm-prop-css-rules.html", `<div class="hm-prop-css-rules full-field"
  :class="TopClass"
  v-ti-activable>
  <!--
    ActionBar
  -->
  <TiActionbar :items="ActionItems"/>
  <!--
    Empty
  -->
  <TiButton
    v-if="isEmpty"
      size="small"
      :setup="EmptyButtonSetup"/>
  <!--
    Value table
  -->
  <table
    v-else>
      <tr
        v-for="row in ValueTable">
          <td class="as-title-cell">
            <span class="as-title">{{row.title}}</span>
          </td>
          <td class="as-value-cell">
            <span class="as-value">{{row.value}}</span>
            <span class="as-remove" @click.left="OnRemoveValue(row)">
              <i class="zmdi zmdi-close"></i>
            </span>
          </td>
      </tr>
  </table>
</div>`);
//========================================
// JOIN <hm-prop-css-rules.mjs> ti/com/hm/prop/css-rules/hm-prop-css-rules.mjs
//========================================
Ti.Preload("ti/com/hm/prop/css-rules/hm-prop-css-rules.mjs", TI_PACK_EXPORTS['ti/com/hm/prop/css-rules/hm-prop-css-rules.mjs']);
//========================================
// JOIN <_com.json> ti/com/hm/prop/css-rules/_com.json
//========================================
Ti.Preload("ti/com/hm/prop/css-rules/_com.json", {
  "name" : "hm-prop-css-rules",
  "globally" : true,
  "template" : "./hm-prop-css-rules.html",
  "mixins" : ["./hm-prop-css-rules.mjs"],
  "components" : [
    "@com:ti/form"]
});
//========================================
// JOIN <hm-react-actions.html> ti/com/hm/react/actions/hm-react-actions.html
//========================================
Ti.Preload("ti/com/hm/react/actions/hm-react-actions.html", `<div class="hm-react-actions">
  <!--
    Empty
  -->
  <TiLoading
    v-if="isEmpty"
      v-bind="blankAs"/>
  <!--
    List each action items in loop
  -->
  <div
    v-for="it in myDisplayList"
      class="as-action-item"
      :class="it.className">
      <!--
        Item head
      -->
      <div class="as-item-head">
        <!--Action Icon-->
        <TiIcon :value="it.icon"/>
        <!--Action Type-->
        <div class="as-type-text">{{it.typeText|i18n}}</div>
        <!--Action Menu-->
        <div class="as-item-menu">
          <a
            v-if="!it.atFirst"
              @click.left="OnMovePrev(it)">
              <i class="fas fa-long-arrow-alt-up"></i></a>
          <a
            v-if="!it.atLast"
              @click.left="OnMoveNext(it)">
              <i class="fas fa-long-arrow-alt-down"></i></a>
          <a @click.left="OnRemoveAction(it)"><i class="fas fa-trash-alt"></i></a>
          <a @click.left="OnEditAction(it)">{{'i18n:edit'|i18n}}</a>
        </div>
      </div>
      <!--
        Item fields
      -->
      <div class="as-item-fields">
        <div
          v-for="fld in it.fields"
            class="as-field">
            <div class="as-name">{{fld.name|i18n}}</div>
            <div class="as-text">{{fld.text}}</div>
        </div>
      </div>
  </div>
  <!--
    Actions
  -->
  <TiButton
    class="is-tiny btn-r4"
    :setup="ActionSetup"/>
</div>`);
//========================================
// JOIN <hm-react-actions.mjs> ti/com/hm/react/actions/hm-react-actions.mjs
//========================================
Ti.Preload("ti/com/hm/react/actions/hm-react-actions.mjs", TI_PACK_EXPORTS['ti/com/hm/react/actions/hm-react-actions.mjs']);
//========================================
// JOIN <_com.json> ti/com/hm/react/actions/_com.json
//========================================
Ti.Preload("ti/com/hm/react/actions/_com.json", {
  "name": "hm-react-actions",
  "globally": true,
  "template": "./hm-react-actions.html",
  "mixins": "./hm-react-actions.mjs",
  "components": [
    "@com:ti/input/list",
    "@com:ti/input/pair"
  ]
});
//========================================
// JOIN <hm-react-editor.html> ti/com/hm/react/editor/hm-react-editor.html
//========================================
Ti.Preload("ti/com/hm/react/editor/hm-react-editor.html", `<TiGui
  class="chispo-react-editor"
  :layout="GUILayout"
  :schema="GUISchema"
  :canLoading="blankAs ? true : false"
  :loading="blank"
  :loadingAs="blankAs"
  :hideWhenLoading="true"
  :maskWhenLoading="false"
  @list::select="OnListSelect"
  @form::change="OnFormChange"
  @form::field::change="OnFormFieldChange"/>`);
//========================================
// JOIN <hm-react-editor.mjs> ti/com/hm/react/editor/hm-react-editor.mjs
//========================================
Ti.Preload("ti/com/hm/react/editor/hm-react-editor.mjs", TI_PACK_EXPORTS['ti/com/hm/react/editor/hm-react-editor.mjs']);
//========================================
// JOIN <_com.json> ti/com/hm/react/editor/_com.json
//========================================
Ti.Preload("ti/com/hm/react/editor/_com.json", {
  "name": "hm-react-editor",
  "globally": true,
  "template": "./hm-react-editor.html",
  "mixins": "./hm-react-editor.mjs",
  "components": [
    "@com:hm/react/item"
  ]
});
//========================================
// JOIN <hm-react-item.html> ti/com/hm/react/item/hm-react-item.html
//========================================
Ti.Preload("ti/com/hm/react/item/hm-react-item.html", `<TiForm
  class="ti-fill-parent"
  :data="FormData"
  :fields="FormFields"
  spacing="comfy"
  :autoShowBlank="true"
  :blankAs="{icon:'zmdi-arrow-left',text:'请选择一个执行项'}"
  fieldNameAlign="right"
  fieldNameWrap="nowrap"/>`);
//========================================
// JOIN <hm-react-item.mjs> ti/com/hm/react/item/hm-react-item.mjs
//========================================
Ti.Preload("ti/com/hm/react/item/hm-react-item.mjs", TI_PACK_EXPORTS['ti/com/hm/react/item/hm-react-item.mjs']);
//========================================
// JOIN <_com.json> ti/com/hm/react/item/_com.json
//========================================
Ti.Preload("ti/com/hm/react/item/_com.json", {
  "name": "hm-react-item",
  "globally": true,
  "template": "./hm-react-item.html",
  "mixins": "./hm-react-item.mjs",
  "components": [
    "@com:ti/input/dval",
    "@com:ti/input/pair",
    "@com:ti/input/list",
    "@com:hm/automatch",
    "@com:hm/react/actions"
  ]
});
//========================================
// JOIN <vod-manager.html> ti/com/net/aliyun/vod/manager/vod-manager.html
//========================================
Ti.Preload("ti/com/net/aliyun/vod/manager/vod-manager.html", `<ti-gui
  class="net-aliyun-vod-manager"
  :class="TopClass"
  :layout="GuiLayout"
  :schema="GuiSchema"
  :can-loading="true"
  :loading-as="reloading"
  @filter::change="OnFilterChange"
  @sorter::change="OnSorterChange"
  @list::select="OnListSelect"
  @video::preview="OnVideoPreview"
  @pager::change="OnPagerChange"/>`);
//========================================
// JOIN <vod-manager.mjs> ti/com/net/aliyun/vod/manager/vod-manager.mjs
//========================================
Ti.Preload("ti/com/net/aliyun/vod/manager/vod-manager.mjs", TI_PACK_EXPORTS['ti/com/net/aliyun/vod/manager/vod-manager.mjs']);
//========================================
// JOIN <_com.json> ti/com/net/aliyun/vod/manager/_com.json
//========================================
Ti.Preload("ti/com/net/aliyun/vod/manager/_com.json", {
  "name" : "net-aliyun-vod-manager",
  "globally" : true,
  "template" : "./vod-manager.html",
  "mixins" : ["./vod-manager.mjs"],
  "components": [
    "@com:ti/wall",
    "@com:ti/combo/filter",
    "@com:ti/combo/sorter",
    "@com:ti/paging/jumper",
    "@com:net/aliyun/vod/video/info"
  ]
});
//========================================
// JOIN <vod-video-info.html> ti/com/net/aliyun/vod/video/info/vod-video-info.html
//========================================
Ti.Preload("ti/com/net/aliyun/vod/video/info/vod-video-info.html", `<div class="net-aliyun-vod-video-info"
  :class="TopClass">
  <!--
    Blank
  -->
  <ti-loading
    v-if="!hasVideo"
      class="as-big"
      icon="fas-hand-point-left"
      text="i18n:net-vod-video-nil"/>
  <!--
    Show Content
  -->
  <template v-else>
    <!--Preview-->
    <div class="as-preview">
      <img 
        class="ti-fill-parent"
        :src="VideoCoverURL"/>
      <div class="as-btn" @click.left="OnClickPreview">
        <i class="fas fa-play-circle"></i>
      </div>
    </div>
    <!--
      Detail info
    -->
    <div class="as-detail">
      <ti-form
        class="ti-cover-parent"
        spacing="tiny"
        :fields="FormFields"
        :data="value"/>
    </div>
  </template>
</div>`);
//========================================
// JOIN <vod-video-info.mjs> ti/com/net/aliyun/vod/video/info/vod-video-info.mjs
//========================================
Ti.Preload("ti/com/net/aliyun/vod/video/info/vod-video-info.mjs", TI_PACK_EXPORTS['ti/com/net/aliyun/vod/video/info/vod-video-info.mjs']);
//========================================
// JOIN <_com.json> ti/com/net/aliyun/vod/video/info/_com.json
//========================================
Ti.Preload("ti/com/net/aliyun/vod/video/info/_com.json", {
  "name" : "NetAliyunVodVideoInfo",
  "globally" : true,
  "template" : "./vod-video-info.html",
  "mixins" : ["./vod-video-info.mjs"],
  "components": [
    "@com:ti/form"
  ]
});
//========================================
// JOIN <vod-video-player.html> ti/com/net/aliyun/vod/video/player/vod-video-player.html
//========================================
Ti.Preload("ti/com/net/aliyun/vod/video/player/vod-video-player.html", `<div class="net-vod-video-player"
  :class="TopClass">
  <div :id="PlayerID"></div>
</div>`);
//========================================
// JOIN <vod-video-player.mjs> ti/com/net/aliyun/vod/video/player/vod-video-player.mjs
//========================================
Ti.Preload("ti/com/net/aliyun/vod/video/player/vod-video-player.mjs", TI_PACK_EXPORTS['ti/com/net/aliyun/vod/video/player/vod-video-player.mjs']);
//========================================
// JOIN <_com.json> ti/com/net/aliyun/vod/video/player/_com.json
//========================================
Ti.Preload("ti/com/net/aliyun/vod/video/player/_com.json", {
  "name" : "NetAliyunVodVideoPlayer",
  "globally" : true,
  "template" : "./vod-video-player.html",
  "mixins" : ["./vod-video-player.mjs"],
  "components": [
    
  ]
});
//========================================
// JOIN <net-fb-albums-gui.mjs> ti/com/net/facebook/albums/net-fb-albums-gui.mjs
//========================================
Ti.Preload("ti/com/net/facebook/albums/net-fb-albums-gui.mjs", TI_PACK_EXPORTS['ti/com/net/facebook/albums/net-fb-albums-gui.mjs']);
//========================================
// JOIN <net-fb-albums-prop.mjs> ti/com/net/facebook/albums/net-fb-albums-prop.mjs
//========================================
Ti.Preload("ti/com/net/facebook/albums/net-fb-albums-prop.mjs", TI_PACK_EXPORTS['ti/com/net/facebook/albums/net-fb-albums-prop.mjs']);
//========================================
// JOIN <net-fb-albums-sdk.mjs> ti/com/net/facebook/albums/net-fb-albums-sdk.mjs
//========================================
Ti.Preload("ti/com/net/facebook/albums/net-fb-albums-sdk.mjs", TI_PACK_EXPORTS['ti/com/net/facebook/albums/net-fb-albums-sdk.mjs']);
//========================================
// JOIN <net-fb-albums.html> ti/com/net/facebook/albums/net-fb-albums.html
//========================================
Ti.Preload("ti/com/net/facebook/albums/net-fb-albums.html", `<TiGui
  class="net-facebook-albums"
  :class="TopClass"
  :layout="GuiLayout"
  :schema="GuiSchema"
  :canLoading="true"
  :loading="isLoadingAlbums"
  :action-status="GuiActionStatus"
  @filter::change="OnFilterChange"
  @albums::select="OnAlbumSelect"
  @albums::load:more="doLoadMoreAlbums"
  @photos::load:more="doLoadMorePhotos"/>`);
//========================================
// JOIN <net-fb-albums.mjs> ti/com/net/facebook/albums/net-fb-albums.mjs
//========================================
Ti.Preload("ti/com/net/facebook/albums/net-fb-albums.mjs", TI_PACK_EXPORTS['ti/com/net/facebook/albums/net-fb-albums.mjs']);
//========================================
// JOIN <_com.json> ti/com/net/facebook/albums/_com.json
//========================================
Ti.Preload("ti/com/net/facebook/albums/_com.json", {
  "name": "net-facebook-albums",
  "globally": true,
  "template": "./net-fb-albums.html",
  "props": "./net-fb-albums-prop.mjs",
  "mixins": [
    "./net-fb-albums-sdk.mjs",
    "./net-fb-albums-gui.mjs",
    "./net-fb-albums.mjs"
  ],
  "components": [
    "@com:ti/wall",
    "@com:web/shelf/wall",
    "@com:web/media/image"
  ],
  "deps": [
    "@https://connect.facebook.net/en_US/sdk.js"
  ]
});
//========================================
// JOIN <youtube-browser.html> ti/com/net/youtube/browser/youtube-browser.html
//========================================
Ti.Preload("ti/com/net/youtube/browser/youtube-browser.html", `<ti-gui
  class="net-youtube-browser"
  :class="TopClass"
  :layout="GuiLayout"
  :schema="GuiSchema"
  :can-loading="false"
  __nav::select="OnNavSelect"
  @filter::change="OnFilterChange"
  @list::select="OnListSelect"/>`);
//========================================
// JOIN <youtube-browser.mjs> ti/com/net/youtube/browser/youtube-browser.mjs
//========================================
Ti.Preload("ti/com/net/youtube/browser/youtube-browser.mjs", TI_PACK_EXPORTS['ti/com/net/youtube/browser/youtube-browser.mjs']);
//========================================
// JOIN <_com.json> ti/com/net/youtube/browser/_com.json
//========================================
Ti.Preload("ti/com/net/youtube/browser/_com.json", {
  "name" : "net-youtube-browser",
  "globally" : true,
  "template" : "./youtube-browser.html",
  "mixins" : ["./youtube-browser.mjs"],
  "components": [
    "@com:ti/wall",
    "@com:ti/combo/filter",
    "@com:ti/combo/sorter",
    "@com:ti/paging/jumper",
    "@com:net/youtube/detail",
    "@com:wn/thing/manager/com/thing-filter"
  ]
});
//========================================
// JOIN <youtube-detail.html> ti/com/net/youtube/detail/youtube-detail.html
//========================================
Ti.Preload("ti/com/net/youtube/detail/youtube-detail.html", `<ti-gui
  class="net-youtube-detail"
  :class="TopClass"
  :layout="GuiLayout"
  :schema="GuiSchema"
  :can-loading="false"/>`);
//========================================
// JOIN <youtube-detail.mjs> ti/com/net/youtube/detail/youtube-detail.mjs
//========================================
Ti.Preload("ti/com/net/youtube/detail/youtube-detail.mjs", TI_PACK_EXPORTS['ti/com/net/youtube/detail/youtube-detail.mjs']);
//========================================
// JOIN <_com.json> ti/com/net/youtube/detail/_com.json
//========================================
Ti.Preload("ti/com/net/youtube/detail/_com.json", {
  "name" : "net-youtube-detail",
  "globally" : true,
  "template" : "./youtube-detail.html",
  "mixins" : ["./youtube-detail.mjs"],
  "components": [
    "@com:ti/form",
    "@com:net/youtube/player"
  ]
});
//========================================
// JOIN <youtube-player.html> ti/com/net/youtube/player/youtube-player.html
//========================================
Ti.Preload("ti/com/net/youtube/player/youtube-player.html", `<div class="net-youtube-player ti-fill-parent"
  :style="TopStyle">
  <!--
    Blank
  -->
  <TiLoading
    v-if="!hasValue"
      v-bind="blankAs"/>
  <!--
    Show video content
  -->
  <iframe 
    v-else
      width="100%"
      height="100%"
      :src="VideoSrc"
      frameborder="0"
      :allow="VideoAllow"
      :allowfullscreen="allowFullScreen"></iframe>
  <!--template v-else>
    <div
      v-if="!showPlayer" 
        class="as-preview"
        @click.left="showPlayer=true">
        <i class="fab fa-youtube"></i>
    </div>
    <iframe 
      v-else
        width="100%"
        height="100%"
        :src="VideoSrc"
        frameborder="0"
        :allow="VideoAllow"
        :allowfullscreen="allowFullScreen"></iframe>
  </template-->
</div>`);
//========================================
// JOIN <youtube-player.mjs> ti/com/net/youtube/player/youtube-player.mjs
//========================================
Ti.Preload("ti/com/net/youtube/player/youtube-player.mjs", TI_PACK_EXPORTS['ti/com/net/youtube/player/youtube-player.mjs']);
//========================================
// JOIN <_com.json> ti/com/net/youtube/player/_com.json
//========================================
Ti.Preload("ti/com/net/youtube/player/_com.json", {
  "name" : "net-youtube-player",
  "globally" : true,
  "template" : "./youtube-player.html",
  "mixins" : ["./youtube-player.mjs"]
});
//========================================
// JOIN <bar-item-action.html> ti/com/ti/actionbar/com/bar-item-action/bar-item-action.html
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-action/bar-item-action.html", `<div class="bar-item-action">
  <bar-item-info
    v-bind="this"
    @fire="OnFired"/>
</div>`);
//========================================
// JOIN <bar-item-action.mjs> ti/com/ti/actionbar/com/bar-item-action/bar-item-action.mjs
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-action/bar-item-action.mjs", TI_PACK_EXPORTS['ti/com/ti/actionbar/com/bar-item-action/bar-item-action.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/actionbar/com/bar-item-action/_com.json
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-action/_com.json", {
  "name" : "bar-item-action",
  "template" : "./bar-item-action.html",
  "mixins"   : ["./bar-item-action.mjs"]
});
//========================================
// JOIN <bar-item-group.html> ti/com/ti/actionbar/com/bar-item-group/bar-item-group.html
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-group/bar-item-group.html", `<div class="bar-item-group"
  :class="TopClass"
  @mouseenter.stop="OnMouseEnter"
  @mousehover.stop="OnMouseHover"
  @mouseleave.stop="OnMouseLeave">
  <!--
    Info
  -->
  <bar-item-info
    v-if="hasInfo"
      v-bind="this"
      :value="collapse"
      :status="status"
      :suffix-icon="ItemSuffixIcon"
      @fire="OnFired"/>
  <!--
    Group Children
  -->
  <template v-if="showChildren">
    <!--
      Mask
    -->
    <div 
      v-if="isDepth1 && !topHoverOpen"
        class="as-mask"
        @click="doCollapse"></div>
    <!--
      Children list
    -->
    <div ref="children"
      v-if="showChildren"
        class="as-children"
        :style="ChildrenStyle"
        @click.left="doCollapse">
          <component 
            v-for="bi in items"
              :key="bi.key"
              :is="bi.comType"
              v-bind="bi.comConf"
              :depth="depth+1"
              :items="bi.items"
              :hide-icon="isChildrenWithoutIcon"
              :status="status"/>
    </div>
  </template>
</div>`);
//========================================
// JOIN <bar-item-group.mjs> ti/com/ti/actionbar/com/bar-item-group/bar-item-group.mjs
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-group/bar-item-group.mjs", TI_PACK_EXPORTS['ti/com/ti/actionbar/com/bar-item-group/bar-item-group.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/actionbar/com/bar-item-group/_com.json
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-group/_com.json", {
  "name" : "bar-item-group",
  "template" : "./bar-item-group.html",
  "mixins"   : ["./bar-item-group.mjs"]
});
//========================================
// JOIN <bar-item-info.html> ti/com/ti/actionbar/com/bar-item-info/bar-item-info.html
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-info/bar-item-info.html", `<div class="bar-item-info"
  :class="TopClass"
  :data-ti-tip="tip"
  :data-ti-tip-mode="TipMode"
  @click.left="OnClickTop">
  <!--
    Icon
  -->
  <span
    v-if="isShowIcon"
      class="as-icon">
      <ti-icon
        v-if="hasIcon" 
          :value="CurrentDisplay.icon"/>
  </span>
  <!--
    Text
  -->
  <span
    v-if="CurrentDisplay.text"
      class="as-text"
        >{{CurrentDisplay.text|i18n}}</span>
  <!--
    Suffix Icon
  -->
  <span
    v-if="suffixIcon"
      class="as-suffix-icon"><ti-icon :value="suffixIcon"/></span>
  <!--
    Shortcut
  -->
  <span
    v-else-if="isShowShortcut"
      class="as-shortcut">{{shortcut}}</span>
</div>`);
//========================================
// JOIN <bar-item-info.mjs> ti/com/ti/actionbar/com/bar-item-info/bar-item-info.mjs
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-info/bar-item-info.mjs", TI_PACK_EXPORTS['ti/com/ti/actionbar/com/bar-item-info/bar-item-info.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/actionbar/com/bar-item-info/_com.json
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-info/_com.json", {
  "name" : "bar-item-info",
  "template" : "./bar-item-info.html",
  "mixins"   : ["./bar-item-info.mjs"]
});
//========================================
// JOIN <bar-item-line.html> ti/com/ti/actionbar/com/bar-item-line/bar-item-line.html
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-line/bar-item-line.html", `<div class="bar-item-line"
  :class="TopClass"></div>`);
//========================================
// JOIN <bar-item-line.mjs> ti/com/ti/actionbar/com/bar-item-line/bar-item-line.mjs
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-line/bar-item-line.mjs", TI_PACK_EXPORTS['ti/com/ti/actionbar/com/bar-item-line/bar-item-line.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/actionbar/com/bar-item-line/_com.json
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-line/_com.json", {
  "name" : "bar-item-line",
  "template" : "./bar-item-line.html",
  "mixins"   : ["./bar-item-line.mjs"]
});
//========================================
// JOIN <bar-item-switcher.html> ti/com/ti/actionbar/com/bar-item-switcher/bar-item-switcher.html
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-switcher/bar-item-switcher.html", `<div class="bar-item-switcher"
  :class="TopClass">
  <!--
    Icon
  -->
  <span
    v-if="isShowIcon"
      class="as-icon">
      <ti-icon
        v-if="hasIcon" 
          :value="icon"/>
  </span>
  <!--
    Text
  -->
  <span
    v-if="text"
      class="as-text"
        >{{text|i18n}}</span>
  <!--
    switcher
  -->
  <ti-switcher
    v-bind="TheSetup"
    :readonly="isDisabled"
    :value="TheValue"
    @change="OnSwitcherChange($event)"/>
</div>`);
//========================================
// JOIN <bar-item-switcher.mjs> ti/com/ti/actionbar/com/bar-item-switcher/bar-item-switcher.mjs
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-switcher/bar-item-switcher.mjs", TI_PACK_EXPORTS['ti/com/ti/actionbar/com/bar-item-switcher/bar-item-switcher.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/actionbar/com/bar-item-switcher/_com.json
//========================================
Ti.Preload("ti/com/ti/actionbar/com/bar-item-switcher/_com.json", {
  "name" : "bar-item-switcher",
  "template" : "./bar-item-switcher.html",
  "mixins"   : ["./bar-item-switcher.mjs"],
  "components" : [
    "@com:ti/switcher"
  ]
});
//========================================
// JOIN <ti-actionbar.html> ti/com/ti/actionbar/ti-actionbar.html
//========================================
Ti.Preload("ti/com/ti/actionbar/ti-actionbar.html", `<div class="ti-actionbar"
  :class="TopClass">
  <bar-item-group 
    name="Ti_ActionBar_Root_Group"
    :items="BarItems"
    :status="status"/>
</div>`);
//========================================
// JOIN <ti-actionbar.mjs> ti/com/ti/actionbar/ti-actionbar.mjs
//========================================
Ti.Preload("ti/com/ti/actionbar/ti-actionbar.mjs", TI_PACK_EXPORTS['ti/com/ti/actionbar/ti-actionbar.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/actionbar/_com.json
//========================================
Ti.Preload("ti/com/ti/actionbar/_com.json", {
  "name" : "ti-actionbar",
  "globally" : true,
  "template" : "./ti-actionbar.html",
  "mixins" : ["./ti-actionbar.mjs"],
  "components" : [
    "./com/bar-item-action",
    "./com/bar-item-switcher",
    "./com/bar-item-group",
    "./com/bar-item-line",
    "./com/bar-item-info"
  ]
});
//========================================
// JOIN <ti-adaptlist-methods.mjs> ti/com/ti/adaptlist/ti-adaptlist-methods.mjs
//========================================
Ti.Preload("ti/com/ti/adaptlist/ti-adaptlist-methods.mjs", TI_PACK_EXPORTS['ti/com/ti/adaptlist/ti-adaptlist-methods.mjs']);
//========================================
// JOIN <ti-adaptlist-props.mjs> ti/com/ti/adaptlist/ti-adaptlist-props.mjs
//========================================
Ti.Preload("ti/com/ti/adaptlist/ti-adaptlist-props.mjs", TI_PACK_EXPORTS['ti/com/ti/adaptlist/ti-adaptlist-props.mjs']);
//========================================
// JOIN <ti-adaptlist.html> ti/com/ti/adaptlist/ti-adaptlist.html
//========================================
Ti.Preload("ti/com/ti/adaptlist/ti-adaptlist.html", `<div class="wn-adaptlist" 
  :class="TopClass"
  v-ti-activable>
  <div
    class="wal-con ti-fill-parent"
    v-drop-files.mask="UploadDragAndDropHandler">
    <!--==================================
      Show Loading
    -->
    <ti-loading
      v-if="isLoading"
        class="as-reloading as-mid-tip"
        text="i18n:reloading"/>
    <!--==================================
      Data List
    -->
    <component :is="MainComType"
      v-else
        class="ti-fill-parent"
        :data="WallDataList"
        :changed-id="changedId"
        :current-id="myCurrentId"
        :checked-ids="myCheckedIds"
        :multi="multi"
        :checkable="checkable"
        :blurable="blurable"
        :selectable="selectable"
        :puppet-mode="true"
        :rowNumberBase="rowNumberBase"
        v-bind="MainComConf"
        :on-init="OnListInit"
        @select="OnItemSelecteItem"
        @open="OnItemOpen"/>
    <!--==================================
      switch view
    -->
    <div class="wal-view-switcher">
      <div class="as-ava-vt-list">
        <ul>
          <li
            v-for="vt in TheAvaViewTypes"
              @click.left="OnSwitchViewType(vt)">
              <TiIcon :value="vt.icon"/>
          </li>
        </ul>
      </div>
      <div class="as-current-vt">
        <TiIcon :value="CurrentViewType.icon"/>
      </div>
    </div>
    <!--==================================
      Hidden file upload control
    -->
    <input 
      type="file" 
      ref="file" 
      class="ti-hide"
      :accept="AcceptUploadFiles"
      multiple
      @change.stop.seft="OnSelectLocalFilesToUpload">
    <!--==================================
      Uploading Pannel
    -->
    <div
      class="wal-uploading"
      :class="UploadingClass">
      <header>
        <ti-icon value="fas-spinner fa-pulse"/>
        <span>{{'uploading'|i18n}}</span>
      </header>
      <section>
        <TiWall
          :data="TheUploadingList"
          :spacing="spacing"
          :selectable="false"
          :multi="false"
          :checkable="false"
          :blurable="false"
          :display="UploadingItemDisplay"
          :puppet-mode="true"/>
      </section>
    </div>
    <!--==================================-->
  </div>
</div>`);
//========================================
// JOIN <ti-adaptlist.mjs> ti/com/ti/adaptlist/ti-adaptlist.mjs
//========================================
Ti.Preload("ti/com/ti/adaptlist/ti-adaptlist.mjs", TI_PACK_EXPORTS['ti/com/ti/adaptlist/ti-adaptlist.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/adaptlist/_com.json
//========================================
Ti.Preload("ti/com/ti/adaptlist/_com.json", {
  "name": "ti-adaptlist",
  "globally": true,
  "template": "./ti-adaptlist.html",
  "props": "./ti-adaptlist-props.mjs",
  "methods": "./ti-adaptlist-methods.mjs",
  "mixins": [
    "./ti-adaptlist.mjs"
  ],
  "components": [
    "@com:ti/obj/thumb",
    "@com:ti/wall",
    "@com:ti/list",
    "@com:ti/table"
  ]
});
//========================================
// JOIN <ti-bullet-checkbox.mjs> ti/com/ti/bullet/checkbox/ti-bullet-checkbox.mjs
//========================================
Ti.Preload("ti/com/ti/bullet/checkbox/ti-bullet-checkbox.mjs", TI_PACK_EXPORTS['ti/com/ti/bullet/checkbox/ti-bullet-checkbox.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/bullet/checkbox/_com.json
//========================================
Ti.Preload("ti/com/ti/bullet/checkbox/_com.json", {
  "name" : "ti-bullet-checkbox",
  "globally" : true,
  "template" : "@com:ti/bullet/ti-bullet.html",
  "mixins" : [
    "@com:ti/bullet/ti-bullet-mixin.mjs",
    "./ti-bullet-checkbox.mjs"]
});
//========================================
// JOIN <ti-bullet-radio.mjs> ti/com/ti/bullet/radio/ti-bullet-radio.mjs
//========================================
Ti.Preload("ti/com/ti/bullet/radio/ti-bullet-radio.mjs", TI_PACK_EXPORTS['ti/com/ti/bullet/radio/ti-bullet-radio.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/bullet/radio/_com.json
//========================================
Ti.Preload("ti/com/ti/bullet/radio/_com.json", {
  "name" : "ti-bullet-radio",
  "globally" : true,
  "template" : "@com:ti/bullet/ti-bullet.html",
  "mixins" : [
    "@com:ti/bullet/ti-bullet-mixin.mjs",
    "./ti-bullet-radio.mjs"]
});
//========================================
// JOIN <ti-bullet-mixin.mjs> ti/com/ti/bullet/ti-bullet-mixin.mjs
//========================================
Ti.Preload("ti/com/ti/bullet/ti-bullet-mixin.mjs", TI_PACK_EXPORTS['ti/com/ti/bullet/ti-bullet-mixin.mjs']);
//========================================
// JOIN <ti-bullet.html> ti/com/ti/bullet/ti-bullet.html
//========================================
Ti.Preload("ti/com/ti/bullet/ti-bullet.html", `<div class="ti-bullet-list" :class="TopClass" :style="TopStyle">
  <!--
    Blank
  -->
  <ti-loading v-if="!hasItems || isBlank" v-bind="BlankLoadingConf" />
  <!--
    Show Items
  -->
  <template v-else>
    <!--Show Option Group-->
    <div
      v-for="grp of ItemGroups"
      :key="grp.key"
      class="as-bullet-group"
      :style="BulletGroupStyle"
    >
      <!-- Group Title -->
      <div v-if="grp.title" class="as-group-title">
        <span
          v-if="groupSelectable"
          class="as-grp-checker"
          :data-ti-tip="'i18n:check-tip-'+grp.checkMode"
          @click.left="doSelectToggle(grp)"
        >
          <i v-if="'all' == grp.checkMode" class="fas fa-check-square"></i>
          <i
            v-else-if="'part' == grp.checkMode"
            class="fas fa-minus-square"
          ></i>
          <i v-else class="far fa-square"></i>
        </span>
        <span class="as-grp-text">{{grp.title}}</span>
      </div>
      <!-- Group Items -->
      <div class="as-group-items" :style="BulletItemsStyle">
        <div
          v-for="it of grp.items"
          class="as-bullet-item"
          :class="it.className"
          @click.left="OnClickItem(it)"
        >
          <!--
                Bullet
              -->
          <ti-icon
            v-if="'Option' == it.type"
            class="as-bullet"
            :value="it.bullet"
          />
          <!--
                Icon
              -->
          <ti-icon v-if="it.icon" class="as-icon" :value="it.icon" />
          <!--
                Text
              -->
          <div class="as-text">{{it.text}}</div>
          <!--
                Tip
              -->
          <div class="as-tip" v-if="it.tip">{{it.tip}}</div>
          <!--
            Group Checker
          -->
          <div
            v-if="groupSelectable && 'Label'==it.type"
            class="as-checker"
            :data-ti-tip="'[V:]i18n:check-tip-'+it.checkMode"
            @click.left="doSelectToggle(it)"
          >
            <i v-if="'all' == it.checkMode" class="fas fa-check-square"></i>
            <i
              v-else-if="'part' == it.checkMode"
              class="fas fa-minus-square"
            ></i>
            <i v-else class="far fa-square"></i>
          </div>
        </div>
        <!-- Other option -->
        <div
          v-if="otherEnabled"
          class="as-bullet-item as-option"
          :class="OtherClassName"
          @click.left="OnClickOther"
        >
          <ti-icon class="as-bullet" :value="OtherBulletIcon" />
          <div class="as-text">
            <span>{{otherText | i18n}}</span>
            <input
              ref="other"
              :style="OtherInputStyle"
              :value="OtherValue"
              :placeholder="otherPlaceholder|i18n"
              @change="OnOtherInputChange"
            />
          </div>
        </div>
      </div>
    </div>
  </template>
</div>`);
//========================================
// JOIN <ti-button.html> ti/com/ti/button/ti-button.html
//========================================
Ti.Preload("ti/com/ti/button/ti-button.html", `<div class="ti-button"
  :class="TopClass">
  <ul :style="mainStyle">
    <li v-for="it in ButtonItems"
      :key="it.name"
      :class="it.buttonClass"
      :style="it.style"
      @click="OnClickItem(it)">
      <!--
        Icon
      -->
      <ti-icon v-if="it.icon"
        :value="it.icon"/>
      <!--
        Text
      -->
      <template v-if="it.text">
        <a :href="href" v-if="href" class="it-text">{{it.text|i18n}}</a>
        <span v-else class="it-text">{{it.text|i18n}}</span>
      </template>
    </li>
  </ul>
</div>`);
//========================================
// JOIN <ti-button.mjs> ti/com/ti/button/ti-button.mjs
//========================================
Ti.Preload("ti/com/ti/button/ti-button.mjs", TI_PACK_EXPORTS['ti/com/ti/button/ti-button.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/button/_com.json
//========================================
Ti.Preload("ti/com/ti/button/_com.json", {
  "name" : "ti-button",
  "globally" : true,
  "template" : "./ti-button.html",
  "mixins"   : ["./ti-button.mjs"],
  "components" : []
});
//========================================
// JOIN <ti-calendar.html> ti/com/ti/calendar/ti-calendar.html
//========================================
Ti.Preload("ti/com/ti/calendar/ti-calendar.html", `<div class="ti-calendar">
  <!--
    Heading
  -->
  <div class="as-head">
    <!--
      Switcher
    -->
    <div class="as-switcher" :class="switcherClass">
      <div class="as-title">
        <ti-input-month
          width="100%"
          height=".36rem"
          icon="far-calendar-alt"
          :hide-border="true"
          :value="theViewDate"
          :text="theViewRangeText"
          :editable="monthEditable"
          :begin-year="beginYear"
          :end-year="endYear"
          @change="onMonthChanged"/>
      </div>
      <div class="go-btn to-prev-block" @click="gotoMatrix(-1)">
        <ti-icon value="zmdi-chevron-left"/>
      </div>
      <div class="go-btn go-today" @click="gotoToday">
        <span>{{'today'|i18n}}</span>
      </div>
      <div class="go-btn to-next-block" @click="gotoMatrix(1)">
        <ti-icon value="zmdi-chevron-right"/>
      </div>
    </div>
    <!--
      Change Mode
      TODO maybe should support mode changing here
    -->
    
  </div>
  <!--
    Day cells
  -->
  <div class="as-matrix-table">
    <div v-for="matrix in dateMatrixList"
      class="as-matrix">
      <table>
        <thead>
          <th v-for="wt in weekTitles">{{wt.title}}</th>
        </thead>
        <tbody>
          <tr v-for="row in matrix">
            <td v-for="cell in row" :class="cell.type">
              <slot name="cell">
                <span class="as-date-item"
                  @click="onClickCell(cell)">{{cell.text}}</span>
              </slot>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>`);
//========================================
// JOIN <ti-calendar.mjs> ti/com/ti/calendar/ti-calendar.mjs
//========================================
Ti.Preload("ti/com/ti/calendar/ti-calendar.mjs", TI_PACK_EXPORTS['ti/com/ti/calendar/ti-calendar.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/calendar/_com.json
//========================================
Ti.Preload("ti/com/ti/calendar/_com.json", {
  "name" : "ti-calendar",
  "globally" : true,
  "template" : "./ti-calendar.html",
  "mixins"   : ["./ti-calendar.mjs"],
  "components" : [
    "@com:ti/input/month"]
});
//========================================
// JOIN <ti-chart-combo-props.mjs> ti/com/ti/chart/combo/ti-chart-combo-props.mjs
//========================================
Ti.Preload("ti/com/ti/chart/combo/ti-chart-combo-props.mjs", TI_PACK_EXPORTS['ti/com/ti/chart/combo/ti-chart-combo-props.mjs']);
//========================================
// JOIN <ti-chart-combo.html> ti/com/ti/chart/combo/ti-chart-combo.html
//========================================
Ti.Preload("ti/com/ti/chart/combo/ti-chart-combo.html", `<div class="ti-chart-combo"
  :class="TopClass">
  <!--
    头部
  -->
  <div class="as-head">
    <!--
      标题: 选择
    -->
    <TiDroplist
      v-if="hasMultiChartNames"
        v-bind="ChartNameListOptions"
        :auto-i18n="true"
        :options="nameList"
        :value="name"
        :width="ChartNameListWidth"
        @change="OnChartNameChange"/>
    <div
      v-else
        class="as-title">{{ChartTitle | i18n}}</div>
    <!--
      图表类型选择
    -->
    <TiSwitcher
      v-if="hasMultiChartTypes"
        :options="ChartTypeList"
        :value="ChartType"
        :allow-empty="false"
        @change="OnChartTypeChange"/>
    <!--
      时间选择
    -->
    <div class="as-date-range" v-if="hasSpanOptions">
      <span>{{DateRangeText}}</span>
      <a @click.left="OnPickDateRange">{{'modify'|i18n}}</a>
    </div>
    <!--
      操作部分
    -->
    <TiActionbar align="right"
      :items="HeadActionBarItems"
      :status="myActionStatus"/>
  </div>
  <!---
    图表
  -->
  <div class="as-chart">
    <!--
      Show chart
    -->
    <component
      v-if="hasChartCom"
        class="ti-fill-parent"
        :is="myChartCom.comType"
        v-bind="myChartCom.comConf"
        :data="ChartData"/>
    <!--
      Show loading
    -->
    <ti-loading
      v-else
        class="as-mid-tip"/>
  </div>
</div>`);
//========================================
// JOIN <ti-chart-combo.mjs> ti/com/ti/chart/combo/ti-chart-combo.mjs
//========================================
Ti.Preload("ti/com/ti/chart/combo/ti-chart-combo.mjs", TI_PACK_EXPORTS['ti/com/ti/chart/combo/ti-chart-combo.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/chart/combo/_com.json
//========================================
Ti.Preload("ti/com/ti/chart/combo/_com.json", {
  "name": "ti-chart-combo",
  "globally": true,
  "template": "./ti-chart-combo.html",
  "props": "./ti-chart-combo-props.mjs",
  "mixins": "./ti-chart-combo.mjs",
  "components": [
    "@com:ti/actionbar",
    "@com:ti/form",
    "@com:ti/droplist",
    "@com:ti/switcher",
    "@com:ti/input/date",
    "@com:ti/chart/g2"
  ]
});
//========================================
// JOIN <ti-chart-g2.html> ti/com/ti/chart/g2/ti-chart-g2.html
//========================================
Ti.Preload("ti/com/ti/chart/g2/ti-chart-g2.html", `<div class="ti-chart ti-chart-g2"
  :class="TopClass"
  :style="TopStyle">
  <div ref="chart"
    class="chart-main ti-fill-parent"></div>
</div>`);
//========================================
// JOIN <ti-chart-g2.mjs> ti/com/ti/chart/g2/ti-chart-g2.mjs
//========================================
Ti.Preload("ti/com/ti/chart/g2/ti-chart-g2.mjs", TI_PACK_EXPORTS['ti/com/ti/chart/g2/ti-chart-g2.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/chart/g2/_com.json
//========================================
Ti.Preload("ti/com/ti/chart/g2/_com.json", {
  "name" : "ti-chart-g2",
  "globally" : true,
  "template" : "./ti-chart-g2.html",
  "mixins"   : ["./ti-chart-g2.mjs"],
  "components" : [],
  "deps" : [
    "@deps:antv/v4/g2/g2.min.js"
  ]
});
//========================================
// JOIN <ti-chart-raw-bar.html> ti/com/ti/chart/raw/bar/ti-chart-raw-bar.html
//========================================
Ti.Preload("ti/com/ti/chart/raw/bar/ti-chart-raw-bar.html", `<TiChartG2
  class="as-bar"
  :class-name="className"
  :data="data"
  :width="width"
  :height="height"
  :padding="padding"
  :append-padding="appendPadding"
  :auto-source="false"
  :setup="ChartSetup"/>`);
//========================================
// JOIN <ti-chart-raw-bar.mjs> ti/com/ti/chart/raw/bar/ti-chart-raw-bar.mjs
//========================================
Ti.Preload("ti/com/ti/chart/raw/bar/ti-chart-raw-bar.mjs", TI_PACK_EXPORTS['ti/com/ti/chart/raw/bar/ti-chart-raw-bar.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/chart/raw/bar/_com.json
//========================================
Ti.Preload("ti/com/ti/chart/raw/bar/_com.json", {
  "name" : "ti-chart-raw-bar",
  "globally" : true,
  "template" : "./ti-chart-raw-bar.html",
  "mixins"   : [
    "@com:ti/chart/raw/ti-chart-raw.mjs",
    "./ti-chart-raw-bar.mjs"],
  "components" : ["@com:ti/chart/g2"]
});
//========================================
// JOIN <ti-chart-raw-line.html> ti/com/ti/chart/raw/line/ti-chart-raw-line.html
//========================================
Ti.Preload("ti/com/ti/chart/raw/line/ti-chart-raw-line.html", `<TiChartG2
  class="as-line"
  :class-name="className"
  :data="data"
  :width="width"
  :height="height"
  :padding="padding"
  :append-padding="appendPadding"
  :auto-source="false"
  :setup="ChartSetup"/>`);
//========================================
// JOIN <ti-chart-raw-line.mjs> ti/com/ti/chart/raw/line/ti-chart-raw-line.mjs
//========================================
Ti.Preload("ti/com/ti/chart/raw/line/ti-chart-raw-line.mjs", TI_PACK_EXPORTS['ti/com/ti/chart/raw/line/ti-chart-raw-line.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/chart/raw/line/_com.json
//========================================
Ti.Preload("ti/com/ti/chart/raw/line/_com.json", {
  "name" : "ti-chart-raw-line",
  "globally" : true,
  "template" : "./ti-chart-raw-line.html",
  "mixins"   : [
    "@com:ti/chart/raw/ti-chart-raw.mjs",
    "./ti-chart-raw-line.mjs"],
  "components" : ["@com:ti/chart/g2"]
});
//========================================
// JOIN <ti-chart-raw-pie.html> ti/com/ti/chart/raw/pie/ti-chart-raw-pie.html
//========================================
Ti.Preload("ti/com/ti/chart/raw/pie/ti-chart-raw-pie.html", `<TiChartG2
  class="as-pie"
  :class-name="className"
  :data="data"
  :width="width"
  :height="height"
  :padding="padding"
  :append-padding="appendPadding"
  :auto-source="false"
  :setup="ChartSetup"/>`);
//========================================
// JOIN <ti-chart-raw-pie.mjs> ti/com/ti/chart/raw/pie/ti-chart-raw-pie.mjs
//========================================
Ti.Preload("ti/com/ti/chart/raw/pie/ti-chart-raw-pie.mjs", TI_PACK_EXPORTS['ti/com/ti/chart/raw/pie/ti-chart-raw-pie.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/chart/raw/pie/_com.json
//========================================
Ti.Preload("ti/com/ti/chart/raw/pie/_com.json", {
  "name" : "ti-chart-raw-pie",
  "globally" : true,
  "template" : "./ti-chart-raw-pie.html",
  "mixins"   : [
    "@com:ti/chart/raw/ti-chart-raw.mjs",
    "./ti-chart-raw-pie.mjs"],
  "components" : ["@com:ti/chart/g2"]
});
//========================================
// JOIN <ti-chart-raw-rank.html> ti/com/ti/chart/raw/rank/ti-chart-raw-rank.html
//========================================
Ti.Preload("ti/com/ti/chart/raw/rank/ti-chart-raw-rank.html", `<TiChartG2
  class="as-bar"
  :class-name="className"
  :data="data"
  :width="width"
  :height="height"
  :padding="padding"
  :append-padding="appendPadding"
  :auto-source="false"
  :setup="ChartSetup"/>`);
//========================================
// JOIN <ti-chart-raw-rank.mjs> ti/com/ti/chart/raw/rank/ti-chart-raw-rank.mjs
//========================================
Ti.Preload("ti/com/ti/chart/raw/rank/ti-chart-raw-rank.mjs", TI_PACK_EXPORTS['ti/com/ti/chart/raw/rank/ti-chart-raw-rank.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/chart/raw/rank/_com.json
//========================================
Ti.Preload("ti/com/ti/chart/raw/rank/_com.json", {
  "name" : "ti-chart-raw-rank",
  "globally" : true,
  "template" : "./ti-chart-raw-rank.html",
  "mixins"   : [
    "@com:ti/chart/raw/ti-chart-raw.mjs",
    "./ti-chart-raw-rank.mjs"],
  "components" : ["@com:ti/chart/g2"]
});
//========================================
// JOIN <ti-chart-raw.mjs> ti/com/ti/chart/raw/ti-chart-raw.mjs
//========================================
Ti.Preload("ti/com/ti/chart/raw/ti-chart-raw.mjs", TI_PACK_EXPORTS['ti/com/ti/chart/raw/ti-chart-raw.mjs']);
//========================================
// JOIN <ti-chart-simple.html> ti/com/ti/chart/simple/ti-chart-simple.html
//========================================
Ti.Preload("ti/com/ti/chart/simple/ti-chart-simple.html", `<div class="ti-chart ti-chart-simple">
  <header 
    v-if="title" 
    @click="drawAll">{{title}}</header>
  <aside v-if="aside"
    :class="asideClass">
    <slot name="aside">
      <span v-if="unit">{{unit}}</span>
    </slot>
  </aside>
  <section class="chart-main" ref="chart"></section>
  <div v-if="hasSlider"
    ref="slider"
    class="chart-slider">
  </div>
</div>`);
//========================================
// JOIN <ti-chart-simple.mjs> ti/com/ti/chart/simple/ti-chart-simple.mjs
//========================================
Ti.Preload("ti/com/ti/chart/simple/ti-chart-simple.mjs", TI_PACK_EXPORTS['ti/com/ti/chart/simple/ti-chart-simple.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/chart/simple/_com.json
//========================================
Ti.Preload("ti/com/ti/chart/simple/_com.json", {
  "name" : "ti-chart-simple",
  "globally" : true,
  "template" : "./ti-chart-simple.html",
  "mixins"   : ["./ti-chart-simple.mjs"],
  "components" : [],
  "deps" : []
});
//========================================
// JOIN <ti-color.html> ti/com/ti/color/ti-color.html
//========================================
Ti.Preload("ti/com/ti/color/ti-color.html", `<div class="ti-color" >
  <!--
    Color Matrix Table
  -->
  <div class="as-table">
    <table>
      <thead>
        <tr>
          <th v-for="color in colorGrays">
            <span 
              :style="colorItemStyle(color)" 
              @click="OnColorClicked(color)"></span>
          </th>
        </tr>
        <tr>
            <th v-for="color in colorMajors">
              <span 
                :style="colorItemStyle(color)" 
                @click="OnColorClicked(color)"></span>
            </th>
          </tr>
      </thead>
      <!--Matrix-->
      <tbody>
        <tr v-for="row in colorMatrix"
          class="as-row">
          <td v-for="color in row">
            <span 
              :style="colorItemStyle(color)" 
              @click="OnColorClicked(color)"></span>
          </td>
        </tr>
      </tbody>
    </table>
  </div> <!-- End Matrix-->
  <!--
    Color Input
  -->
  <div class="as-input">
    <div class="as-hex">
        <input class="as-value" 
          spellcheck="false"
          :placeholder="'i18n:no-set' | i18n"
          :value="theHex"
          @change="OnHexChanged"/>
    </div>
    <div class="as-alpha" v-if="showAlpha">
      <ti-input-num 
        :value="theAlpha"
        :maxValue="100"
        :minValue="0"
        :defaultValue="100"
        :step="10"
        width="100%"
        @change="OnAlphaChanged"/>
    </div>
  </div>
  <!--
    Color Preview
  -->
  <div class="as-preview">
    <span>{{theColorValue}}</span>
  </div>
</div>`);
//========================================
// JOIN <ti-color.mjs> ti/com/ti/color/ti-color.mjs
//========================================
Ti.Preload("ti/com/ti/color/ti-color.mjs", TI_PACK_EXPORTS['ti/com/ti/color/ti-color.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/color/_com.json
//========================================
Ti.Preload("ti/com/ti/color/_com.json", {
  "name" : "ti-color",
  "globally" : true,
  "template" : "./ti-color.html",
  "mixins" : ["./ti-color.mjs"]
});
//========================================
// JOIN <ti-combo-box.html> ti/com/ti/combo/box/ti-combo-box.html
//========================================
Ti.Preload("ti/com/ti/combo/box/ti-combo-box.html", `<div class="ti-combo-box" 
  :class="topClass"
  :style="topStyle">
  <!--
    Box: Component
  -->
  <div class="as-box" ref="box" :style="theBoxStyle">
    <slot name="box"><div>ComboBox</div></slot>
  </div>
  <!--
    Mask & Drop
  -->
  <template v-if="'extended'==status">
    <!--Mask-->
    <div class="as-mask" @click.left="notifyCollapse()"></div>
    <!--Drop-->
    <div class="as-drop" ref="drop" :style="theDropStyle">
      <slot name="drop"><div>ComboBox Dropdown</div></slot>
    </div>
  </template>
</div>`);
//========================================
// JOIN <ti-combo-box.mjs> ti/com/ti/combo/box/ti-combo-box.mjs
//========================================
Ti.Preload("ti/com/ti/combo/box/ti-combo-box.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/box/ti-combo-box.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/combo/box/_com.json
//========================================
Ti.Preload("ti/com/ti/combo/box/_com.json", {
  "name" : "ti-combo-box",
  "globally" : true,
  "template" : "./ti-combo-box.html",
  "mixins" : ["./ti-combo-box.mjs"]
});
//========================================
// JOIN <ti-combo-filter-props.mjs> ti/com/ti/combo/filter/ti-combo-filter-props.mjs
//========================================
Ti.Preload("ti/com/ti/combo/filter/ti-combo-filter-props.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/filter/ti-combo-filter-props.mjs']);
//========================================
// JOIN <ti-combo-filter.html> ti/com/ti/combo/filter/ti-combo-filter.html
//========================================
Ti.Preload("ti/com/ti/combo/filter/ti-combo-filter.html", `<div class="ti-combo-filter"
  :class="TopClass">
  <!--
    Major type
  -->
  <TiDroplist
    v-if="myMajorKey && MajorConfig"
      class="as-major"
      v-bind="MajorConfig"
      :value="myMajorValue"
      @change="OnMajorChange"/>
  <!--
    Filter input box
  -->
  <ti-combo-box
    class="as-filter"
    :drop-width="dropWidth"
    :drop-height="dropHeight"
    :status="myDropStatus"
    @collapse="OnCollapse"
    v-ti-activable>
    <!--
      Box
    -->
    <template v-slot:box>
      <ti-input 
        v-bind="TheInputProps"

        :value="InputValue"
        :prefix-icon="ThePrefixIcon"
        :suffix-icon="TheSuffixIcon"

        @change="OnInputChanged"
        @input:focus="OnInputFocused"
        @prefix:icon="$notify('prefix:icon')"
        @suffix:icon="OnClickStatusIcon"/>
    </template>
    <!--
      Drop
    -->
    <template v-slot:drop="slotProps">
      <ti-form
        v-bind="form"
        :data="myFormData"
        @change="OnFormChange"/>
    </template>
  </ti-combo-box>
  <!--
    Sorter
  -->
</div>`);
//========================================
// JOIN <ti-combo-filter.mjs> ti/com/ti/combo/filter/ti-combo-filter.mjs
//========================================
Ti.Preload("ti/com/ti/combo/filter/ti-combo-filter.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/filter/ti-combo-filter.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/combo/filter/_com.json
//========================================
Ti.Preload("ti/com/ti/combo/filter/_com.json", {
  "name" : "ti-combo-filter",
  "globally" : true,
  "template" : "./ti-combo-filter.html",
  "props"    : [
    "@com:ti/input/ti-input-props.mjs",
    "@com:ti/combo/filter/ti-combo-filter-props.mjs"
  ],
  "mixins"   : "./ti-combo-filter.mjs",
  "components" : [
    "@com:ti/form",
    "@com:ti/combo/sorter"]
});
//========================================
// JOIN <ti-combo-input-props.mjs> ti/com/ti/combo/input/ti-combo-input-props.mjs
//========================================
Ti.Preload("ti/com/ti/combo/input/ti-combo-input-props.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/input/ti-combo-input-props.mjs']);
//========================================
// JOIN <ti-combo-input.html> ti/com/ti/combo/input/ti-combo-input.html
//========================================
Ti.Preload("ti/com/ti/combo/input/ti-combo-input.html", `<ti-combo-box 
  class="ti-combo-input"
  :class="TopClass"
  :keep-width-when-drop="keepWidthWhenDrop"
  :drop-width="dropWidth"
  :drop-height="dropHeight"
  :status="myDropStatus"
  @collapse="OnCollapse"
  v-ti-activable>
  <!--
    Box
  -->
  <template v-slot:box>
    <ti-input 
      v-bind="TheInputProps"
      :valueTip="ValueTip"
      :value="InputValue"
      :focusValue="InputFocusValue"
      :prefix-icon="ThePrefixIcon"
      :prefix-text="InputPrefixText"
      :suffix-text="InputSuffixText"
      :suffix-icon="TheSuffixIcon"

      @change="OnInputChanged"
      @inputing="OnInputInputing"
      @input:click="OnInputFocused"
      @prefix:icon="$notify('prefix:icon')"
      @suffix:icon="OnClickStatusIcon"/>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop="slotProps">
    <component 
      :is="DropComType"
      class="ti-fill-parent"
      v-bind="DropComConf"
      :on-init="OnDropListInit"
      @select="OnDropListSelected"/>
  </template>
</ti-combo-box>`);
//========================================
// JOIN <ti-combo-input.mjs> ti/com/ti/combo/input/ti-combo-input.mjs
//========================================
Ti.Preload("ti/com/ti/combo/input/ti-combo-input.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/input/ti-combo-input.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/combo/input/_com.json
//========================================
Ti.Preload("ti/com/ti/combo/input/_com.json", {
  "name" : "ti-combo-input",
  "globally" : true,
  "template" : "./ti-combo-input.html",
  "props"    : [
    "@com:ti/input/ti-input-props.mjs",
    "./ti-combo-input-props.mjs"],
  "mixins"   : "./ti-combo-input.mjs",
  "components" : [
    "@com:ti/combo/box"]
});
//========================================
// JOIN <ti-combo-multi-input.html> ti/com/ti/combo/multi-input/ti-combo-multi-input.html
//========================================
Ti.Preload("ti/com/ti/combo/multi-input/ti-combo-multi-input.html", `<ti-combo-box 
  class="ti-combo-multi-input"
  :class="TopClass"
  :drop-width="dropWidth"
  :drop-height="dropHeight"
  :status="myDropStatus"
  @collapse="OnCollapse"
  v-ti-activable>
  <!--
    Box
  -->
  <template v-slot:box>
    <ti-input-tags
      :input-value="myFilterValue"
      :value="InputTagValues"
      :value-case="valueCase"
      :trimed="trimed"
        :max-value-len="maxValueLen"
        :value-unique="valueUnique"
        :tag-options="tagOptions"
        :tag-mapping="tagMapping"
        :tag-explain-mapping="tagExplainMapping"

      :readonly="readonly"
      :focused="focused"
      :hover="hover"
      :auto-select="autoSelect"
        :can-input="canInput"
        :cancel-tag-bubble="cancelTagBubble"

      :placeholder="placeholder"
      :hide-border="hideBorder"
      :prefix-icon="prefixIcon"
      :prefix-hover-icon="prefixHoverIcon"
      :prefix-icon-for-clean="true"
      :prefix-text="prefixText"
      :suffix-icon="TheSuffixIcon"
      :suffix-text="suffixText"
        :tag-item-icon-by="tagItemIconBy"
        :tag-item-default-icon="tagItemDefaultIcon"
        :tag-option-default-icon="tagOptionDefaultIcon"
      
      :width="width"
      :height="height"

      :input-change="OnInputChanged"

      @inputing="OnInputInputing"
      @input:focus="OnInputFocused"
      @change="OnTagListChanged"
      @prefix:icon="$notify('prefix:icon')"
      @suffix:icon="OnClickStatusIcon"/>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <component class="ti-fill-parent"
      :is="DropComType"
      blank-class="as-mid-tip"
      v-bind="DropComConf"
      :on-init="OnDropListInit"
      @select="OnDropListSelected"/>
  </template>
</ti-combo-box>`);
//========================================
// JOIN <ti-combo-multi-input.mjs> ti/com/ti/combo/multi-input/ti-combo-multi-input.mjs
//========================================
Ti.Preload("ti/com/ti/combo/multi-input/ti-combo-multi-input.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/multi-input/ti-combo-multi-input.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/combo/multi-input/_com.json
//========================================
Ti.Preload("ti/com/ti/combo/multi-input/_com.json", {
  "name" : "ti-combo-multi-input",
  "globally" : true,
  "template" : "./ti-combo-multi-input.html",
  "props"    : [
    "@com:ti/input/ti-input-props.mjs",
    "@com:ti/input/tags/ti-input-tags-props.mjs",
    "@com:ti/combo/input/ti-combo-input-props.mjs"],
  "mixins"   : ["./ti-combo-multi-input.mjs"],
  "components" : [
    "@com:ti/combo/box"]
});
//========================================
// JOIN <ti-combo-pair-auto-props.mjs> ti/com/ti/combo/pair-auto/ti-combo-pair-auto-props.mjs
//========================================
Ti.Preload("ti/com/ti/combo/pair-auto/ti-combo-pair-auto-props.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/pair-auto/ti-combo-pair-auto-props.mjs']);
//========================================
// JOIN <ti-combo-pair-auto.html> ti/com/ti/combo/pair-auto/ti-combo-pair-auto.html
//========================================
Ti.Preload("ti/com/ti/combo/pair-auto/ti-combo-pair-auto.html", `<ti-form
  class="full-field"
  :class="TopClass"
  :data="value"
  :fields="FormFields"
  :only-fields="onlyFields"
  :fixed="fixed"
  :default-com-type="defaultComType"
  :spacing="spacing"
  :width="width"
  :height="height"/>`);
//========================================
// JOIN <ti-combo-pair-auto.mjs> ti/com/ti/combo/pair-auto/ti-combo-pair-auto.mjs
//========================================
Ti.Preload("ti/com/ti/combo/pair-auto/ti-combo-pair-auto.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/pair-auto/ti-combo-pair-auto.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/combo/pair-auto/_com.json
//========================================
Ti.Preload("ti/com/ti/combo/pair-auto/_com.json", {
  "name" : "ti-combo-pair-auto",
  "globally" : true,
  "template" : "./ti-combo-pair-auto.html",
  "props"    : ["./ti-combo-pair-auto-props.mjs"],
  "mixins"   : "./ti-combo-pair-auto.mjs"
});
//========================================
// JOIN <ti-combo-pair-group-props.mjs> ti/com/ti/combo/pair-group/ti-combo-pair-group-props.mjs
//========================================
Ti.Preload("ti/com/ti/combo/pair-group/ti-combo-pair-group-props.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/pair-group/ti-combo-pair-group-props.mjs']);
//========================================
// JOIN <ti-combo-pair-group.html> ti/com/ti/combo/pair-group/ti-combo-pair-group.html
//========================================
Ti.Preload("ti/com/ti/combo/pair-group/ti-combo-pair-group.html", `<ti-gui
  class="ti-fill-parent full-field"
  :class="TopClass"
  :layout="TheLayout"
  :shown="TheShown"
  :keep-shown-to="keepShownTo"
  @block:shown="OnShownUpdate"/>`);
//========================================
// JOIN <ti-combo-pair-group.mjs> ti/com/ti/combo/pair-group/ti-combo-pair-group.mjs
//========================================
Ti.Preload("ti/com/ti/combo/pair-group/ti-combo-pair-group.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/pair-group/ti-combo-pair-group.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/combo/pair-group/_com.json
//========================================
Ti.Preload("ti/com/ti/combo/pair-group/_com.json", {
  "name" : "ti-combo-pair-group",
  "globally" : true,
  "template" : "./ti-combo-pair-group.html",
  "props"    : ["./ti-combo-pair-group-props.mjs"],
  "mixins"   : "./ti-combo-pair-group.mjs"
});
//========================================
// JOIN <ti-combo-pair-text-props.mjs> ti/com/ti/combo/pair-text/ti-combo-pair-text-props.mjs
//========================================
Ti.Preload("ti/com/ti/combo/pair-text/ti-combo-pair-text-props.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/pair-text/ti-combo-pair-text-props.mjs']);
//========================================
// JOIN <ti-combo-pair-text.html> ti/com/ti/combo/pair-text/ti-combo-pair-text.html
//========================================
Ti.Preload("ti/com/ti/combo/pair-text/ti-combo-pair-text.html", `<div class="ti-combo-pair-text full-field">
  <div
    v-for="it in Items"
      class="as-pair">
      <!--title-->
      <div class="as-title">
        <!--Icon-->
        <ti-icon
          v-if="it.icon" 
            :value="it.icon"/>
        <!--Text-->
        <div
          v-if="it.text" 
            class="as-text">{{it.text}}</div>
      </div>
      <!--Textarea-->
      <div
        class="as-textarea">
          <textarea 
            spellcheck="false"
            :style="TextStyle"
            :placeholder="it.placeholder"
            :value="it.value"
            :readonly="readonly"
            @change="OnTextChange(it.key, $event)"></textarea></div>
  </div>
</div>`);
//========================================
// JOIN <ti-combo-pair-text.mjs> ti/com/ti/combo/pair-text/ti-combo-pair-text.mjs
//========================================
Ti.Preload("ti/com/ti/combo/pair-text/ti-combo-pair-text.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/pair-text/ti-combo-pair-text.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/combo/pair-text/_com.json
//========================================
Ti.Preload("ti/com/ti/combo/pair-text/_com.json", {
  "name" : "ti-combo-pair-text",
  "globally" : true,
  "template" : "./ti-combo-pair-text.html",
  "props"    : ["./ti-combo-pair-text-props.mjs"],
  "mixins"   : "./ti-combo-pair-text.mjs"
});
//========================================
// JOIN <ti-combo-sorter-props.mjs> ti/com/ti/combo/sorter/ti-combo-sorter-props.mjs
//========================================
Ti.Preload("ti/com/ti/combo/sorter/ti-combo-sorter-props.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/sorter/ti-combo-sorter-props.mjs']);
//========================================
// JOIN <ti-combo-sorter.html> ti/com/ti/combo/sorter/ti-combo-sorter.html
//========================================
Ti.Preload("ti/com/ti/combo/sorter/ti-combo-sorter.html", `<div class="ti-combo-sorter"
  :class="TopClass"
  :style="TopStyle">
  <!--
    sorter box
  -->
  <ti-combo-box
    class="as-sorter"
    :drop-width="dropWidth"
    :drop-height="dropHeight"
    :drop-float="false"
    :status="myDropStatus"
    @collapse="OnCollapse"
    v-ti-activable>
    <!--
      Box
    -->
    <template v-slot:box>
      <!--
        Current Sort Box
      -->
      <div class="as-sort-box"
        @click.left="OnClickBox">
        <!--Sort Icon-->
        <ti-icon
          v-if="TheSortIcon"
          class="as-sort-icon"
            :value="TheSortIcon"/>
        <!--Preifx Icon-->
        <ti-icon 
          v-if="ThePrefixIcon"
            class="at-prefix"
            :value="ThePrefixIcon"/>
        <!--Title-->
        <div class="as-title">{{SortTitle|i18n}}</div>
      </div>
      <!--Status Icon-->
      <div  
        v-if="TheSuffixIcon"
          class="as-sort-btn"
          @click.left="OnClickSuffixIcon">
            <ti-icon :value="TheSuffixIcon"/>
      </div>
    </template>
    <!--
      Drop
    -->
    <template v-slot:drop="slotProps">
      <ti-list
        id-by="value"
        :data="myListData"
        :display="['<icon>', 'text']"
        :hoverable="true"
        :current-id="SortBy"
        @select="OnDropListSelected"/>
    </template>
  </ti-combo-box>
  <!--
    Sorter
  -->
</div>`);
//========================================
// JOIN <ti-combo-sorter.mjs> ti/com/ti/combo/sorter/ti-combo-sorter.mjs
//========================================
Ti.Preload("ti/com/ti/combo/sorter/ti-combo-sorter.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/sorter/ti-combo-sorter.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/combo/sorter/_com.json
//========================================
Ti.Preload("ti/com/ti/combo/sorter/_com.json", {
  "name": "ti-combo-sorter",
  "globally": true,
  "template": "./ti-combo-sorter.html",
  "props": "@com:ti/combo/sorter/ti-combo-sorter-props.mjs",
  "mixins": "./ti-combo-sorter.mjs",
  "components": [
    "@com:ti/combo/box"
  ]
});
//========================================
// JOIN <ti-combo-table-props.mjs> ti/com/ti/combo/table/ti-combo-table-props.mjs
//========================================
Ti.Preload("ti/com/ti/combo/table/ti-combo-table-props.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/table/ti-combo-table-props.mjs']);
//========================================
// JOIN <ti-combo-table.html> ti/com/ti/combo/table/ti-combo-table.html
//========================================
Ti.Preload("ti/com/ti/combo/table/ti-combo-table.html", `<div class="ti-combo-table full-field"
  :class="TopClass"
  :style="TopStyle">
  <!--wrap-->
  <div class="as-main-con">
    <!--
      Actions
    -->
    <TiActionbar
      :items="ActionItems"
      :align="actionAlign"/>
    <!--
      Quick Table
    -->
    <TiTableQuick
      v-if="quickTable"
        v-bind="TableConfig"
        :on-init="OnInitTable"
        @select="OnTableRowSelect"
        @open="OnTableRowOpen"/>
    <!--
      Normal Table
    -->
    <TiTable
      v-else
        v-bind="TableConfig"
        :on-init="OnInitTable"
        @select="OnTableRowSelect"
        @open="OnTableRowOpen"/>
  </div>
</div>`);
//========================================
// JOIN <ti-combo-table.mjs> ti/com/ti/combo/table/ti-combo-table.mjs
//========================================
Ti.Preload("ti/com/ti/combo/table/ti-combo-table.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/table/ti-combo-table.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/combo/table/_com.json
//========================================
Ti.Preload("ti/com/ti/combo/table/_com.json", {
  "name" : "ti-combo-table",
  "globally" : true,
  "template" : "./ti-combo-table.html",
  "props"    : "./ti-combo-table-props.mjs",
  "mixins"   : "./ti-combo-table.mjs",
  "components" : [
    "@com:ti/actionbar",
    "@com:ti/table",
    "@com:ti/table/quick",
    "@com:ti/form"]
});
//========================================
// JOIN <ti-combo-watcher.html> ti/com/ti/combo/watcher/ti-combo-watcher.html
//========================================
Ti.Preload("ti/com/ti/combo/watcher/ti-combo-watcher.html", `<div class="ti-combo-watcher at-top">
  <!--
    Watching tabs
  -->
  <header>
    <!-- Watcher tab list-->
    <template v-if="hasTabItems">
      <TiActionbar :items="ActionItems" />
      <ul ref="tabs">
        <li
          v-for="li in TabItems"
          :key="li.text"
          :class="li.className"
          @click="OnSelectTab(li)"
        >
          <span class="it-text">{{li.text}}</span>
        </li>
      </ul>
    </template>
    <a
      class="as-empty-action"
      v-else
      @click="OnCreateWatch"
      :data-ti-tip="addWatchTip"
    >
      <i class="zmdi zmdi-alarm-plus"></i>
      <span>{{addWatchText | i18n}}</span>
    </a>
  </header>
  <!--
    Filterbar
  -->
  <main>
    <TiFilterbar
      :className="className"
      :filter="filter"
      :sorter="sorter"
      :matchKeywords="matchKeywords"
      :majors="majors"
      :topMajors="topMajors"
      :filterTags="filterTags"
      :advanceForm="advanceForm"
      :advanceComponents="advanceComponents"
      :sorterConf="sorterConf"
      :placeholder="placeholder"
      :dialog="dialog"
      :prefixIcon="prefixIcon"
      :suffixIcon="suffixIcon"
      @change="OnFilterChange"
    />
  </main>
</div>`);
//========================================
// JOIN <ti-combo-watcher.mjs> ti/com/ti/combo/watcher/ti-combo-watcher.mjs
//========================================
Ti.Preload("ti/com/ti/combo/watcher/ti-combo-watcher.mjs", TI_PACK_EXPORTS['ti/com/ti/combo/watcher/ti-combo-watcher.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/combo/watcher/_com.json
//========================================
Ti.Preload("ti/com/ti/combo/watcher/_com.json", {
  "name": "ti-combo-watcher",
  "globally": true,
  "template": "./ti-combo-watcher.html",
  "props": "@com:ti/filterbar/ti-filterbar-props.mjs",
  "mixins": "./ti-combo-watcher.mjs",
  "components": ["@com:ti/filterbar"]
});
//========================================
// JOIN <crumb-item.html> ti/com/ti/crumb/com/crumb-item/crumb-item.html
//========================================
Ti.Preload("ti/com/ti/crumb/com/crumb-item/crumb-item.html", `<div class="ti-crumb-item" 
  :class="TopClass"
  @click.left="OnClickTop">
  <!--
    Icon
  -->
  <ti-icon v-if="icon" 
    class="as-icon"
    :value="icon"/>
  <!--
    Text
  -->
  <template v-if="text">
    <a v-if="href"
      class="as-text"
      @click.prevent
      :href="href"
      :class="TextClass">{{TheText}}</a>
    <span v-else
      class="as-text"
      :class="TextClass">{{TheText}}</span>
  </template>
  <!--
    Asterisk
  -->
  <span v-if="asterisk"
    class="as-asterisk"
    ></span>
  <!--
    Path Icon
  -->
  <ti-icon v-if="!atLast"
    class="as-path-icon"
    :value="pathIcon"/>
</div>`);
//========================================
// JOIN <crumb-item.mjs> ti/com/ti/crumb/com/crumb-item/crumb-item.mjs
//========================================
Ti.Preload("ti/com/ti/crumb/com/crumb-item/crumb-item.mjs", TI_PACK_EXPORTS['ti/com/ti/crumb/com/crumb-item/crumb-item.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/crumb/com/crumb-item/_com.json
//========================================
Ti.Preload("ti/com/ti/crumb/com/crumb-item/_com.json", {
  "name" : "crumb-item",
  "globally" : false,
  "template" : "./crumb-item.html",
  "mixins" : ["./crumb-item.mjs"]
});
//========================================
// JOIN <ti-crumb.html> ti/com/ti/crumb/ti-crumb.html
//========================================
Ti.Preload("ti/com/ti/crumb/ti-crumb.html", `<div class="ti-crumb"
  :class="TopClass">
  <!--
    Loop items
  -->
  <crumb-item v-for="it in ItemList"
    :key="it.index"
    :path-icon="pathIcon"
    :cancel-bubble="cancelItemBubble"
    v-bind="it"/>
</div>`);
//========================================
// JOIN <ti-crumb.mjs> ti/com/ti/crumb/ti-crumb.mjs
//========================================
Ti.Preload("ti/com/ti/crumb/ti-crumb.mjs", TI_PACK_EXPORTS['ti/com/ti/crumb/ti-crumb.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/crumb/_com.json
//========================================
Ti.Preload("ti/com/ti/crumb/_com.json", {
  "name" : "ti-crumb",
  "globally" : true,
  "template" : "./ti-crumb.html",
  "mixins" : ["./ti-crumb.mjs"],
  "components" : [
    "./com/crumb-item"
  ]
});
//========================================
// JOIN <ti-datetime.html> ti/com/ti/datetime/ti-datetime.html
//========================================
Ti.Preload("ti/com/ti/datetime/ti-datetime.html", `<div class="ti-datetime">
  <!--Date-->
  <ti-calendar class="is-date"
    :value="theDate"
    :month-format="monthFormat"
    :begin-year="beginYear"
    :end-year="endYear"
    @change="onDateChanged"/>
  <!--Time-->
  <div class="is-time">
    <div class="as-time-text">{{theTimeText}}</div>
    <div class="as-time-cols">
      <ti-time
        :value="theTime"
        :mode="timeMode"
        width="100%"
        height="none"
        @change="onTimeChanged"/>
    </div>
  </div>
</div>`);
//========================================
// JOIN <ti-datetime.mjs> ti/com/ti/datetime/ti-datetime.mjs
//========================================
Ti.Preload("ti/com/ti/datetime/ti-datetime.mjs", TI_PACK_EXPORTS['ti/com/ti/datetime/ti-datetime.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/datetime/_com.json
//========================================
Ti.Preload("ti/com/ti/datetime/_com.json", {
  "name" : "ti-datetime",
  "globally" : true,
  "template" : "./ti-datetime.html",
  "mixins" : ["./ti-datetime.mjs"],
  "components" : [
    "@com:ti/time",
    "@com:ti/calendar"]
});
//========================================
// JOIN <ti-droplist.html> ti/com/ti/droplist/ti-droplist.html
//========================================
Ti.Preload("ti/com/ti/droplist/ti-droplist.html", `<component 
  class="ti-droplist"
  :is="ComType"
  v-bind="this"
  :can-input="false"
  :must-in-list="true"
  :showInputFocusValue="false"
  :auto-collapse="true"
  @change="$notify('change', $event)"/>`);
//========================================
// JOIN <ti-droplist.mjs> ti/com/ti/droplist/ti-droplist.mjs
//========================================
Ti.Preload("ti/com/ti/droplist/ti-droplist.mjs", TI_PACK_EXPORTS['ti/com/ti/droplist/ti-droplist.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/droplist/_com.json
//========================================
Ti.Preload("ti/com/ti/droplist/_com.json", {
  "name" : "ti-droplist",
  "globally" : true,
  "template" : "./ti-droplist.html",
  "props"    : [
    "@com:ti/input/ti-input-props.mjs",
    "@com:ti/input/tags/ti-input-tags-props.mjs",
    "@com:ti/combo/input/ti-combo-input-props.mjs"],
  "mixins"   : ["./ti-droplist.mjs"],
  "components" : [
    "@com:ti/combo/input",
    "@com:ti/combo/multi-input"
  ]
});
//========================================
// JOIN <ti-droptree.html> ti/com/ti/droptree/ti-droptree.html
//========================================
Ti.Preload("ti/com/ti/droptree/ti-droptree.html", `<component
  class="ti-droptree"
  :is="ComType"
  v-bind="this"
  :can-input="false"
  :must-in-list="true"
  :auto-collapse="true"
  @change="$notify('change', $event)"/>`);
//========================================
// JOIN <ti-droptree.mjs> ti/com/ti/droptree/ti-droptree.mjs
//========================================
Ti.Preload("ti/com/ti/droptree/ti-droptree.mjs", TI_PACK_EXPORTS['ti/com/ti/droptree/ti-droptree.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/droptree/_com.json
//========================================
Ti.Preload("ti/com/ti/droptree/_com.json", {
  "name" : "ti-droptree",
  "globally" : true,
  "template" : "./ti-droptree.html",
  "props"    : [
    "@com:ti/input/ti-input-props.mjs",
    "@com:ti/input/tags/ti-input-tags-props.mjs",
    "@com:ti/combo/input/ti-combo-input-props.mjs"],
  "mixins"   : ["./ti-droptree.mjs"],
  "components" : [
    "@com:ti/combo/input",
    "@com:ti/combo/multi-input"
  ]
});
//========================================
// JOIN <ti-filterbar-props.mjs> ti/com/ti/filterbar/ti-filterbar-props.mjs
//========================================
Ti.Preload("ti/com/ti/filterbar/ti-filterbar-props.mjs", TI_PACK_EXPORTS['ti/com/ti/filterbar/ti-filterbar-props.mjs']);
//========================================
// JOIN <ti-filterbar.html> ti/com/ti/filterbar/ti-filterbar.html
//========================================
Ti.Preload("ti/com/ti/filterbar/ti-filterbar.html", `<div class="ti-filterbar" :class="TopClass">
  <!--
    Top Majors
  -->
  <div
    v-if="hasTopMajors"
      class="filterbar-part as-majors at-top">
      <component
        v-for="it in myTopMajors"
          :is="it.comType"
          :key="it.index"
          class="as-major-item"
          v-bind="it.comConf"
          @change="OnMajorChange($event, it)"/>
  </div>
  <main>
    <!--
      Side Majors
    -->
    <div
      v-if="hasSideMajors"
        class="filterbar-part as-majors at-side">
        <component
          v-for="it in mySideMajors"
            :is="it.comType"
            :key="it.index"
            class="as-major-item"
            v-bind="it.comConf"
            @change="OnMajorChange($event, it)"/>
    </div>
    <!--
      Input and filtered tags
      +---------------------------------------------+
      | Tag | Tag | Tag |    Input value      | Adv |
      +---------------------------------------------+
    -->
    <div class="filterbar-part as-filter">
      <TiInput v-bind="FilterInputConf"
        @change="OnInputChange"
        @input:clean="OnInputClean"
        @open:advance="OnOpenAdvance">
        <TiTags v-bind="FilterTagConf" :value="myTags" @change="OnTagsChange"/>
      </TiInput>
    </div>
    <!--
      Sorter
    -->
    <div
      v-if="showSorter"
        class="filterbar-part as-sorter">
        <TiComboSorter
          v-bind="sorterConf"
          :value="sorter"
          @change="OnSorterChange"/>
    </div>
  </main>
</div>`);
//========================================
// JOIN <ti-filterbar.mjs> ti/com/ti/filterbar/ti-filterbar.mjs
//========================================
Ti.Preload("ti/com/ti/filterbar/ti-filterbar.mjs", TI_PACK_EXPORTS['ti/com/ti/filterbar/ti-filterbar.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/filterbar/_com.json
//========================================
Ti.Preload("ti/com/ti/filterbar/_com.json", {
  "name": "ti-filterbar",
  "globally": true,
  "template": "./ti-filterbar.html",
  "props": "./ti-filterbar-props.mjs",
  "mixins": "./ti-filterbar.mjs",
  "components": [
    "@com:ti/input",
    "@com:ti/tags",
    "@com:ti/combo/sorter"
  ]
});
//========================================
// JOIN <ti-filterlist.html> ti/com/ti/filterlist/ti-filterlist.html
//========================================
Ti.Preload("ti/com/ti/filterlist/ti-filterlist.html", `<div class="ti-filterlist" :class="TopClass">
  <!--
    Filter input
  -->
  <div class="as-filter">
    <TiInput
      v-bind="FilterInputComConf"
      :value="myFilterValue"
      @change="OnInputChange"/>
  </div>
  <!--
    List
  -->
  <component
    :is="ListComType"
    class="as-list"
    v-bind="list"
    :filterValue="myFilterValue"
    :filterBy="ListFilterBy"/>
</div>`);
//========================================
// JOIN <ti-filterlist.mjs> ti/com/ti/filterlist/ti-filterlist.mjs
//========================================
Ti.Preload("ti/com/ti/filterlist/ti-filterlist.mjs", TI_PACK_EXPORTS['ti/com/ti/filterlist/ti-filterlist.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/filterlist/_com.json
//========================================
Ti.Preload("ti/com/ti/filterlist/_com.json", {
  "name": "ti-filterlist",
  "globally": true,
  "template": "./ti-filterlist.html",
  "__props": [
    "@com:ti/support/list_props.mjs",
    "@com:ti/list/ti-list-props.mjs"
  ],
  "mixins": "./ti-filterlist.mjs",
  "components": [
    "@com:ti/input",
    "@com:ti/list"
  ]
});
//========================================
// JOIN <form-field-props.mjs> ti/com/ti/form/com/form-field/form-field-props.mjs
//========================================
Ti.Preload("ti/com/ti/form/com/form-field/form-field-props.mjs", TI_PACK_EXPORTS['ti/com/ti/form/com/form-field/form-field-props.mjs']);
//========================================
// JOIN <form-field.html> ti/com/ti/form/com/form-field/form-field.html
//========================================
Ti.Preload("ti/com/ti/form/com/form-field/form-field.html", `<div class="form-field"
  :class="TopClass"
  :style="ConStyle"
  v-ti-activable>
  <!--========================================
    Field Name
  -->
  <div 
    v-if="isShowTitle || required"
      class="field-name"
      :title="StatusText">
        <!--Status Icon-->
        <span 
          v-if="StatusIcon"
            class="name-status">
            <ti-icon :value="StatusIcon"/>
        </span>
        <!--Title Text-->
        <span
          v-if="isShowTitle"
            class="name-title">{{TheTitle|i18n}}</span>
        <!--Required-->
        <span
          v-if="required"
            class="name-required">*</span>
        <!--Field Icon-->
        <span 
          v-if="isShowIcon" 
            class="name-icon">
            <ti-icon :value="icon"/>
        </span>
  </div>
  <!--========================================
    Field Value
  -->
  <div class="field-value"
    :style="ConStyle">
    <!--
      UI Component
    -->
    <div v-if="isComReady"
      class="field-component"
      :class="ComClass"
      :style="ComStyle">
      <component 
        :is="myComType"
          v-bind="myComConf"
          @change="OnChange"/>
    </div>
    <!--
      Tips
    -->
    <div 
      v-if="isShowTip"
        class="field-tip">{{tip|i18n}}</div>
  </div>
</div>`);
//========================================
// JOIN <form-field.mjs> ti/com/ti/form/com/form-field/form-field.mjs
//========================================
Ti.Preload("ti/com/ti/form/com/form-field/form-field.mjs", TI_PACK_EXPORTS['ti/com/ti/form/com/form-field/form-field.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/form/com/form-field/_com.json
//========================================
Ti.Preload("ti/com/ti/form/com/form-field/_com.json", {
  "name" : "ti-form-field",
  "globally" : true,
  "template" : "./form-field.html",
  "methods"  : "@com:ti/support/field_display.mjs",
  "props" : "./form-field-props.mjs",
  "mixins" : ["./form-field.mjs"]
});
//========================================
// JOIN <form-group-props.mjs> ti/com/ti/form/com/form-group/form-group-props.mjs
//========================================
Ti.Preload("ti/com/ti/form/com/form-group/form-group-props.mjs", TI_PACK_EXPORTS['ti/com/ti/form/com/form-group/form-group-props.mjs']);
//========================================
// JOIN <form-group.html> ti/com/ti/form/com/form-group/form-group.html
//========================================
Ti.Preload("ti/com/ti/form/com/form-group/form-group.html", `<div class="form-group"
  :class="TopClass">
  <div
    v-if="title" 
      class="group-title">
      <ti-icon
        v-if="show.icon" 
        :value="icon"/>
      <span
        v-if="show.title"
        class="name-title">{{title|i18n}}</span>
  </div>
  <div class="group-fields">
    <template
      v-for="fld in fields">
        <!--
          Show Label
        -->
        <div 
          v-if="'Label' == fld.type"
            class="form-label">
            <ti-icon
              v-if="fld.icon" 
                class="as-label-icon"
                :value="fld.icon"/>
            <span
              v-if="fld.title"
                class="as-label-text">{{fld.title|i18n}}</span>
        </div>
        <!--
          Show Field
        -->
        <ti-form-field
          v-else
            :key="fld.uniqKey"
            v-bind="fld"
            :data="data"
            :field-status="fieldStatus"
            :status-icons="statusIcons"
            :screen-mode="screenMode"/>
    </template>
  </div>
</div>`);
//========================================
// JOIN <form-group.mjs> ti/com/ti/form/com/form-group/form-group.mjs
//========================================
Ti.Preload("ti/com/ti/form/com/form-group/form-group.mjs", TI_PACK_EXPORTS['ti/com/ti/form/com/form-group/form-group.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/form/com/form-group/_com.json
//========================================
Ti.Preload("ti/com/ti/form/com/form-group/_com.json", {
  "name" : "form-group",
  "globally" : true,
  "template" : "./form-group.html",
  "props" : "./form-group-props.mjs",
  "mixins" : ["./form-group.mjs"]
});
//========================================
// JOIN <form-support.mjs> ti/com/ti/form/form-support.mjs
//========================================
Ti.Preload("ti/com/ti/form/form-support.mjs", TI_PACK_EXPORTS['ti/com/ti/form/form-support.mjs']);
//========================================
// JOIN <grid-container.html> ti/com/ti/form/grid/com/grid-container/grid-container.html
//========================================
Ti.Preload("ti/com/ti/form/grid/com/grid-container/grid-container.html", `<div class="ti-form-grid-con" :class="TopClass" :style="TopStyle" :grid="gridColumnCount">
  <!----------------------------------------->
  <template v-for="fld in myFields">
      <!-------------- Label ---------------->
      <div
        v-if="'Label' == fld.race"
          class="field-label"
          :style="fld.nameStyle"
          :grid-start="fld.gridStart"
          :grid-span="fld.gridSpan">
          <div
            v-if="fld.icon"
              class="field-icon"><TiIcon :value="fld.icon"/></div>
          <div
            v-if="fld.title"
              class="field-text">{{fld.title | i18n}}</div>
      </div>
      <!-------------- -COM ----------------->
      <template v-else>
        <div 
          v-if="fld.showName"
            class="field-name grid-item"
            :class="fld.nameClass"
            :style="fld.nameStyle"
            :name-wrap="fld.nameWrap"
            :name-align="fld.nameAlign"
            :name-v-align="fld.nameVAlign"
            :title="fld.statusText"
            :grid-start="fld.nameGridStart"
            :grid-span="fld.nameGridSpan"
            >
            <!--------------------------------->
            <div class="field-name-con">
              <div
                v-if="fld.required" class="field-required">*</div>
              <div
                v-if="fld.icon"
                  class="field-icon"><TiIcon :value="fld.icon"/></div>
              <div
                v-if="fld.title"
                  class="field-text"
                  :style="fld.nameTextStyle"
                  v-bind="fld.nameTip"                 
                  data-ti-keyboard="ctrl"
                  >{{fld.title}}</div>
              <div
                  v-if="fld.tip && fld.tipAsPopIcon"
                    class="field-pop-tip"
                    v-bind="fld.tipObj" ><i class="zmdi zmdi-help-outline"></i></div>
              <!------Show enable switcher ------>
              <div
                v-if="canShowBatchEditableSwitcher && fld.batchDisabled && !fld.batchReadonly"
                  class="field-editable">
                  <div @click.left="$emit('field:edit', fld)">
                    <i v-if="fld.disabled" class="zmdi zmdi-square-o"></i>
                    <i v-else class="zmdi zmdi-check-square"></i>
                  </div>
              </div>
            </div>
            <!--------------------------------->
            <div
              v-if="fld.statusIcon"
                class="field-status"><TiIcon :value="fld.statusIcon"/></div>
            <!--------------------------------->
        </div>
        <!------------------------------------->
        <div
          class="field-value grid-item"
          :class="fld.valueClass"
          :style="fld.valueStyle"
          :value-wrap="fld.valueWrap"
          :value-v-align="fld.valueVAlign"
          :grid-start="fld.valueGridStart"
          :grid-span="fld.valueGridSpan"
          @click.left.stop="OnClickComValue(fld)">
          <!--------------------------------->
          <div class="field-value-com" :style="fld.comStyle">
            <component :is="fld.comType"
              v-bind="fld.comConf"
              @change="OnFldChange(fld, $event)"/>
          </div>
          <!--------------------------------->
          <div
            v-if="fld.tip && !fld.tipAsPopIcon"
              class="field-value-tip"
              :style="fld.tipStyle">{{fld.tip | i18n}}</div>
          <!------Show tip when Nil-name----->
          <div
            v-if="fld.statusIcon && !(fld.icon || fld.title)"
              class="field-status"><TiIcon :value="fld.statusIcon"/></div>
          <!------Show enable switcher ------>
          <div
            v-if="fld.batchDisabled  && !(fld.icon || fld.title)"
              class="field-editable && !fld.batchReadonly">
              <div @click.left="$emit('field:edit', fld)">
                <i v-if="fld.disabled" class="zmdi zmdi-square-o"></i>
                <i v-else class="zmdi zmdi-check-square"></i>
              </div>
          </div>
          <!--------------------------------->
        </div>
        <!------------------------------------->
      </template>
      <!------------------------------------->
  </template>  
  <!----------------------------------------->
</div>`);
//========================================
// JOIN <grid-container.mjs> ti/com/ti/form/grid/com/grid-container/grid-container.mjs
//========================================
Ti.Preload("ti/com/ti/form/grid/com/grid-container/grid-container.mjs", TI_PACK_EXPORTS['ti/com/ti/form/grid/com/grid-container/grid-container.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/form/grid/com/grid-container/_com.json
//========================================
Ti.Preload("ti/com/ti/form/grid/com/grid-container/_com.json", {
  "name": "grid-container",
  "globally": true,
  "template": "./grid-container.html",
  "mixins": "./grid-container.mjs"
});
//========================================
// JOIN <ti-form-grid-props.mjs> ti/com/ti/form/grid/ti-form-grid-props.mjs
//========================================
Ti.Preload("ti/com/ti/form/grid/ti-form-grid-props.mjs", TI_PACK_EXPORTS['ti/com/ti/form/grid/ti-form-grid-props.mjs']);
//========================================
// JOIN <ti-form-grid.html> ti/com/ti/form/grid/ti-form-grid.html
//========================================
Ti.Preload("ti/com/ti/form/grid/ti-form-grid.html", `<div class="ti-form-grid"
  :class="TopClass"
  :spacing="spacing"
  :mode="FormMode"
  @click.left="OnClickFormTop"
  v-ti-activable>
    <!--
      Blank
    -->
    <ti-loading 
      v-if="!hasData && isAutoShowBlank"
        class="nil-data as-big-mask"
        v-bind="blankAs"/>
    <!--
      Show Form
    -->
    <template v-else>
      <!--
        Title
      -->
      <header
        v-if="hasTitle"
          class="form-title"
          :class="titleClass"
          :spacing="spacing"
          :mode="FormMode">
          <span v-if="icon" class="title-icon"><ti-icon :value="icon"/></span>
          <span v-if="title" class="title-text">{{title|i18n}}</span>
      </header>
      <!--============================================
        Flat Mode
      -->
      <main 
        class="form-main"
        :class="MainClass"
        :spacing="spacing"
        :mode="FormMode"
        @scroll="OnMainScroll">
        <!--============================================
          Flat Mode
        -->
        <template v-if="isFlatMode">
          <!------------------------------------------>
          <section class="flat-body" >
            <grid-container
              v-bind="GridContainerConf"
              :fields="GridFormFields"
              :gridColumnCount="GridColumnCount"
              @field:edit="OnToggleForceEditable"
              @field:change="OnFieldChange"/>
          </section>
          <!------------------------------------------>
        </template>
        <!--============================================
          Group Mode
        -->
        <template v-else-if="isGroupMode">
          <!------------------------------------------>
          <section 
            v-for="grp in GridFormFields"
              :key="grp.uniqKey"
              class="group-body"
              :class="grp.bodyClass">
              <!-------------------------------------->
              <!--
                Group Title
              -->
              <div v-if="grp.title" class="group-title">
                <span v-if="grp.icon" class="title-icon">
                  <ti-icon :value="grp.icon"/></span>
                <span v-if="grp.title" class="title-text"
                  >{{grp.title|i18n}}</span>
              </div>
              <!--
                Group body
              -->
              <grid-container
                v-bind="GridContainerConf"
                :fields="grp.fields"
                :gridColumnCount="grp.gridColumnCount"
                @field:edit="OnToggleForceEditable"
                @field:change="OnFieldChange"/>
              <!-------------------------------------->
          </section>
          <!------------------------------------------>
          <!------------------------------------------>
        </template>
        <!--============================================
          Tab Mode
        -->
        <template v-else-if="isTabMode">
          <!----------------------------------------->
          <!--
            Tab Head
          -->
          <section class="tab-head" :spacing="spacing">
            <div
              v-for="tab in TabItems"
                class="tab-head-item"
                :class="tab.className"
                :tab-index="tab.index"
                @click="OnClickTab(tab)">
                  <!--------------------------------->
                  <span v-if="tab.icon" class="tab-icon">
                    <ti-icon :value="tab.icon"/></span>
                  <span v-if="tab.title" class="tab-text"
                    >{{tab.title|i18n}}</span>
                  <!--------------------------------->
            </div>
          </section>
          <!--
            Tab Body
          -->
          <section
            class="tab-body" 
            :class="CurrentTabGroup.bodyClass"
            :style="CurrentTabGroup.bodyStyle"
            @scroll="OnTabBodyScroll">
            <grid-container
              v-bind="GridContainerConf"
              :fields="GridFormFields"
              :gridColumnCount="GridColumnCount"
              @field:edit="OnToggleForceEditable"
              @field:change="OnFieldChange"/>
          </section>
          <!----------------------------------------->
        </template>
        <!--============================================
          Invalide Mode
        -->
        <div v-else>
          Invalide Mode : <b>{{mode}}</b>
        </div>
      </main>
      <!--
        Foot actions
      -->
      <footer
        v-if="showFooterActions"
          class="form-actions"
          :spacing="spacing"
          :mode="FormMode">
          <TiButton
            v-bind="GridActionButtons"
            @form:readonly="myReadonly=true"
            @form:edit="OnFormEdit"
            @form:confirm="OnFormConfirm"
            @form:reset="OnFormReset"
            @form:submit="OnFormSubmit"
            @form:setup:open="OnFormSetupOpen"
            @form:setup:clean="OnFormSetupClean"/>
      </footer>
      <!--
        Setup menu
      -->
      <aside
        v-if="showSetupMenu"
          class="form-setup"
          :spacing="spacing"
          :at="setupMenuAt">
          <TiActionbar
            v-bind="GridSetupMenu"
            @form:submit="OnFormSubmit"
            @form:setup:open="OnFormSetupOpen"
            @form:setup:clean="OnFormSetupClean"/>
      </aside>
    </template> <!-- Form main template-->    
</div>`);
//========================================
// JOIN <ti-form-grid.mjs> ti/com/ti/form/grid/ti-form-grid.mjs
//========================================
Ti.Preload("ti/com/ti/form/grid/ti-form-grid.mjs", TI_PACK_EXPORTS['ti/com/ti/form/grid/ti-form-grid.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/form/grid/_com.json
//========================================
Ti.Preload("ti/com/ti/form/grid/_com.json", {
  "name": "ti-form-grid",
  "globally": true,
  "template": "./ti-form-grid.html",
  "props": "./ti-form-grid-props.mjs",
  "methods"  : "@com:ti/support/field_display.mjs",
  "mixins": [
    "@com:ti/form/form-support.mjs",
    "./ti-form-grid.mjs"
  ],
  "components": [
    "./com/grid-container",
    "@com:ti/button",
    "@com:ti/input",
    "@com:ti/input/num",
    "@com:ti/input/tags",
    "@com:ti/input/color",
    "@com:ti/input/icon",
    "@com:ti/input/date",
    "@com:ti/input/time",
    "@com:ti/input/timerange",
    "@com:ti/input/month",
    "@com:ti/input/datetime",
    "@com:ti/input/daterange",
    "@com:ti/input/text",
    "@com:ti/combo/input",
    "@com:ti/combo/multi-input",
    "@com:ti/label",
    "@com:ti/toggle",
    "@com:ti/switcher",
    "@com:ti/droplist"
  ]
});
//========================================
// JOIN <ti-form-props.mjs> ti/com/ti/form/ti-form-props.mjs
//========================================
Ti.Preload("ti/com/ti/form/ti-form-props.mjs", TI_PACK_EXPORTS['ti/com/ti/form/ti-form-props.mjs']);
//========================================
// JOIN <ti-form.html> ti/com/ti/form/ti-form.html
//========================================
Ti.Preload("ti/com/ti/form/ti-form.html", `<div class="ti-form"
  :class="TopClass"
  :style="TopStyle"
  v-ti-activable>
  <template v-if="hasData || !isAutoShowBlank">
    <!--
      Form Header
    -->
    <header class="form-header" v-if="hasHeader">
      <span v-if="icon"
        class="it-icon"><ti-icon :value="icon"/></span>
      <span v-if="title"
        class="it-text">{{title|i18n}}</span>
    </header>
    <!--
      Tabs for display:"tab"
    -->
    <div class="form-tab" v-if="isTabMode">
      <ul>
        <li v-for="tab in TabItems" 
          :class="tab.className"
          @click.left="OnClickTab(tab)">
          <ti-icon 
            class="tab-icon" v-if="tab.icon" :value="tab.icon"/>
          <span 
            class="tab-text" v-if="tab.title">{{tab.title|i18n}}</span>
        </li>
      </ul>
    </div>
    <!--
      Form Fields
    -->
    <div class="form-body" :class="FormBodyClass" :style="FormBodyStyle">
      <template v-for="fld in FieldsInCurrentTab">
        <!--
          For Group
        -->
        <form-group
          v-if="'Group' == fld.type"
            v-bind="fld"
            :data="data"
            :field-status="fieldStatus"
            :status-icons="statusIcons"
            :screen-mode="ViewDisplayMode"
            @change="OnFieldChange"/>
        <!---
          Lable
        -->
        <div 
          v-else-if="'Label' == fld.type"
            class="form-label">
            <ti-icon
              v-if="fld.icon" 
                class="as-label-icon"
                :value="fld.icon"/>
            <span
              v-if="fld.title"
                class="as-label-text">{{fld.title|i18n}}</span>
        </div>
        <!--
          For field
        -->
        <ti-form-field
          v-else
            :key="fld.uniqKey"
            v-bind="fld"
            :data="data"
            :field-status="fieldStatus"
            :status-icons="statusIcons"
            :screen-mode="ViewDisplayMode"
            @change="OnFieldChange"/>
      </template>
    </div>
  </template>
  <!--
    Show Blank
  -->
  <ti-loading 
    v-else
      class="nil-data as-big-mask"
      v-bind="blankAs"/>
</div>`);
//========================================
// JOIN <ti-form.mjs> ti/com/ti/form/ti-form.mjs
//========================================
Ti.Preload("ti/com/ti/form/ti-form.mjs", TI_PACK_EXPORTS['ti/com/ti/form/ti-form.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/form/_com.json
//========================================
Ti.Preload("ti/com/ti/form/_com.json", {
  "name": "ti-form",
  "globally": true,
  "template": "./grid/ti-form-grid.html",
  "props": "./grid/ti-form-grid-props.mjs",
  "methods"  : "@com:ti/support/field_display.mjs",
  "mixins": [
    "@com:ti/form/form-support.mjs",
    "./grid/ti-form-grid.mjs"
  ],
  "components": [
    "@com:ti/form/grid/com/grid-container",
    "@com:ti/button",
    "@com:ti/input",
    "@com:ti/input/num",
    "@com:ti/input/tags",
    "@com:ti/input/color",
    "@com:ti/input/icon",
    "@com:ti/input/date",
    "@com:ti/input/time",
    "@com:ti/input/timerange",
    "@com:ti/input/month",
    "@com:ti/input/datetime",
    "@com:ti/input/daterange",
    "@com:ti/input/text",
    "@com:ti/combo/input",
    "@com:ti/combo/multi-input",
    "@com:ti/label",
    "@com:ti/toggle",
    "@com:ti/switcher",
    "@com:ti/droplist"
  ]
});
//========================================
// JOIN <_hmaker.json> ti/com/ti/form/_hmaker.json
//========================================
Ti.Preload("ti/com/ti/form/_hmaker.json", {
  "icon"   : "im-task-o",
  "title"  : "i18n:com-form",
  "scenes" : ["desktop", "tablet"],
  "editComType" : "hmaker-edit-com-form",
  "editComConf" : {
    "value" : "=comConf"
  }
});
//========================================
// JOIN <gui-adjustbar.html> ti/com/ti/gui/adjustbar/gui-adjustbar.html
//========================================
Ti.Preload("ti/com/ti/gui/adjustbar/gui-adjustbar.html", `<div
  class="block-adjust-bar"
  :class="TopClass"
  :arrow-to="MiniArrowTo"
  :arrow-at="MiniArrowAt"
  :adjacent-mode="adjacentMode"
  :resize-mode="resizeMode"
  :adjust-0="adjustIndex[0]"
  :adjust-1="adjustIndex[1]">
  <!--------------------------------------->
  <div class="bar-con">
    <!----------------------------------->
    <div class="as-action is-reset" @mouseup.stop="OnClickReset">
      <i class="zmdi zmdi-time-restore"></i></div>
    <!----------------------------------->
    <div
      v-if="hasMiniArrow"
        class="as-action is-mini"
        @mouseup.stop="OnClickMini"><i :class="MiniArrowClass"></i></div>
    <!----------------------------------->
  </div>
  <!--------------------------------------->
</div>`);
//========================================
// JOIN <gui-adjustbar.mjs> ti/com/ti/gui/adjustbar/gui-adjustbar.mjs
//========================================
Ti.Preload("ti/com/ti/gui/adjustbar/gui-adjustbar.mjs", TI_PACK_EXPORTS['ti/com/ti/gui/adjustbar/gui-adjustbar.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/gui/adjustbar/_com.json
//========================================
Ti.Preload("ti/com/ti/gui/adjustbar/_com.json", {
  "name": "ti-gui-adjustbar",
  "globally": true,
  "template": "./gui-adjustbar.html",
  "mixins": "./gui-adjustbar.mjs"
});
//========================================
// JOIN <ti-gui-block.html> ti/com/ti/gui/block/ti-gui-block.html
//========================================
Ti.Preload("ti/com/ti/gui/block/ti-gui-block.html", `<div class="ti-gui-block" :class="TopClass" :style="TopStyle">
  <div class="block-con">
    <!--
    Header
  -->
    <div class="block-head" v-if="isShowHeader">
      <!--Icon-->
      <div class="as-icon" v-if="icon">
        <ti-icon :value="icon" />
      </div>
      <!--Title-->
      <div class="as-title">
        <span v-if="title">{{title|i18n}}</span>
      </div>
      <!--Actions-->
      <div class="as-actions" v-if="hasActions">
        <ti-actionbar
          :items="actions"
          :vars="TheActionVars"
          :status="actionStatus"
        />
      </div>
    </div>
    <!--
    Content
  -->
    <div class="block-main" v-if="TheCom" :style="MainStyle">
      <!------------------------------------------->
      <div class="block-main-con" :class="MainConClass" :style="MainConStyle">
        <component
          :class="MainComponentClass"
          :is="TheCom.comType"
          v-bind="TheCom.comConf"
        />
      </div>
      <!------------------------------------------->
    </div>
  </div>
  <!--
    Bar
  -->
  <TiGuiAdjustbar
    v-if="hasAdjustBar"
    :prevMinimum="isPrevMinimumSize"
    :selfMinimum="isMinimumSize"
    :resizeMode="resizeMode"
    :adjacentMode="adjacentMode"
    :adjustBarAt="adjustBarAt"
    :adjustIndex="adjustIndex"
  />
</div>`);
//========================================
// JOIN <ti-gui-block.mjs> ti/com/ti/gui/block/ti-gui-block.mjs
//========================================
Ti.Preload("ti/com/ti/gui/block/ti-gui-block.mjs", TI_PACK_EXPORTS['ti/com/ti/gui/block/ti-gui-block.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/gui/block/_com.json
//========================================
Ti.Preload("ti/com/ti/gui/block/_com.json", {
  "name" : "ti-gui-block",
  "globally" : true,
  "template" : "./ti-gui-block.html",
  "mixins"   : ["./ti-gui-block.mjs"]
});
//========================================
// JOIN <ti-gui-cols.html> ti/com/ti/gui/cols/ti-gui-cols.html
//========================================
Ti.Preload("ti/com/ti/gui/cols/ti-gui-cols.html", `<div
  class="ti-gui-cols"
  :class="TopClass"
  :card="card"
  v-ti-draggable="Draggable">
  <template v-if="hasBlocks">
    <template v-for="(block, index) in GuiBlocks">
      <ti-gui-block v-if="!block.hide"
        :key="block.key"
        embedIn="cols"
        v-bind="block"
        :schema="schema"
        :action-status="block.actionStatus || actionStatus"
        :size="getBlockSize(index)"
        :shown="shown"
        @bar:reset="OnBarReset"
        @bar:toggle:size="OnBarToggleSize"/>
      </template>
  </template>
  <div
    v-if="isDragging"
      class="ti-gui-dragging-mask"></div>
</div>`);
//========================================
// JOIN <ti-gui-cols.mjs> ti/com/ti/gui/cols/ti-gui-cols.mjs
//========================================
Ti.Preload("ti/com/ti/gui/cols/ti-gui-cols.mjs", TI_PACK_EXPORTS['ti/com/ti/gui/cols/ti-gui-cols.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/gui/cols/_com.json
//========================================
Ti.Preload("ti/com/ti/gui/cols/_com.json", {
  "name": "ti-gui-cols",
  "globally": true,
  "template": "./ti-gui-cols.html",
  "mixins"   : [
    "@com:ti/gui/gui-block-support.mjs",
    "@com:ti/gui/gui-flex-dragging.mjs",
    "./ti-gui-cols.mjs"
  ]
});
//========================================
// JOIN <ti-gui-grid-drag.mjs> ti/com/ti/gui/grid/ti-gui-grid-drag.mjs
//========================================
Ti.Preload("ti/com/ti/gui/grid/ti-gui-grid-drag.mjs", TI_PACK_EXPORTS['ti/com/ti/gui/grid/ti-gui-grid-drag.mjs']);
//========================================
// JOIN <ti-gui-grid.html> ti/com/ti/gui/grid/ti-gui-grid.html
//========================================
Ti.Preload("ti/com/ti/gui/grid/ti-gui-grid.html", `<div
  class="ti-gui-grid"
  @mousemove="OnMouseMove"
  v-ti-draggable="GridDraggable"
>
  <main
    v-if="hasBlocks"
    ref="blocks"
    :class="TopClass"
    :card="card"
    :style="TopStyle"
  >
    <template v-for="(block, index) in GuiBlocks">
      <ti-gui-block
        v-if="!block.hide"
        :key="block.key"
        embedIn="cols"
        v-bind="block"
        :schema="schema"
        :action-status="block.actionStatus || actionStatus"
        :shown="shown"
      />
    </template>
  </main>
  <div
    v-if="isShowDragBar"
    class="ti-gui-grid-drag-bar"
    :class="DragBarClass"
    :style="DragBarStyle"
  >
    <div>
      <a @mousedown.stop="OnResetTracks" data-ti-tip="Reset to default layout"
        ><i class="zmdi zmdi-time-restore"></i
      ></a>
    </div>
  </div>
  <div v-if="isDragging" class="ti-gui-dragging-mask"></div>
</div>`);
//========================================
// JOIN <ti-gui-grid.mjs> ti/com/ti/gui/grid/ti-gui-grid.mjs
//========================================
Ti.Preload("ti/com/ti/gui/grid/ti-gui-grid.mjs", TI_PACK_EXPORTS['ti/com/ti/gui/grid/ti-gui-grid.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/gui/grid/_com.json
//========================================
Ti.Preload("ti/com/ti/gui/grid/_com.json", {
  "name": "ti-gui-grid",
  "globally": true,
  "template": "./ti-gui-grid.html",
  "mixins"   : [
    "@com:ti/gui/gui-block-support.mjs",
    "./ti-gui-grid-drag.mjs",
    "./ti-gui-grid.mjs"
  ]
});
//========================================
// JOIN <gui-block-support.mjs> ti/com/ti/gui/gui-block-support.mjs
//========================================
Ti.Preload("ti/com/ti/gui/gui-block-support.mjs", TI_PACK_EXPORTS['ti/com/ti/gui/gui-block-support.mjs']);
//========================================
// JOIN <gui-flex-dragging.mjs> ti/com/ti/gui/gui-flex-dragging.mjs
//========================================
Ti.Preload("ti/com/ti/gui/gui-flex-dragging.mjs", TI_PACK_EXPORTS['ti/com/ti/gui/gui-flex-dragging.mjs']);
//========================================
// JOIN <ti-gui-panel.html> ti/com/ti/gui/panel/ti-gui-panel.html
//========================================
Ti.Preload("ti/com/ti/gui/panel/ti-gui-panel.html", `<div class="ti-gui-panel"
  :class="TopClass"
  :style="TopStyle"
  @click.left="OnClickMask">
  <div class="panel-con"
    :style="myConStyle"
    @click.left.stop>
    <!--
      Block
    -->
    <ti-gui-block
      embed-in="panel"
      flex="none"
      :type="type"
      :title="myBlockTitle"
      :icon="icon"
      :hide-title="hideTitle"
      :actions="actions"
      :action-status="actionStatus"
      :action-vars="actionVars"
      :name="name"
      :blocks="blocks"
      :body="body"
      :main-con-class="mainConClass"
      :main-con-style="mainConStyle"
      :overflow="overflow"
      :schema="schema"
      :shown="shown"
      :capture-events="captureEvents"
      :adjustable="adjustable"
      @content:ready="OnContentReady"/>
    <!--
      Closer
    -->
    <div
      v-if="hasCloser"
        class="panel-closer"
        :class="CloserClass">
        <ti-icon
          value="zmdi-close"
          @click.native="OnClose"/>
    </div>
  </div>
</div>`);
//========================================
// JOIN <ti-gui-panel.mjs> ti/com/ti/gui/panel/ti-gui-panel.mjs
//========================================
Ti.Preload("ti/com/ti/gui/panel/ti-gui-panel.mjs", TI_PACK_EXPORTS['ti/com/ti/gui/panel/ti-gui-panel.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/gui/panel/_com.json
//========================================
Ti.Preload("ti/com/ti/gui/panel/_com.json", {
  "name" : "ti-gui-panel",
  "globally" : true,
  "template" : "./ti-gui-panel.html",
  "mixins"   : "./ti-gui-panel.mjs"
});
//========================================
// JOIN <ti-gui-rows.html> ti/com/ti/gui/rows/ti-gui-rows.html
//========================================
Ti.Preload("ti/com/ti/gui/rows/ti-gui-rows.html", `<div 
  class="ti-gui-rows" 
  :class="TopClass"
  :card="card"
  v-ti-draggable="Draggable">
  <template v-if="hasBlocks">
    <template v-for="(block, index) in GuiBlocks">
      <ti-gui-block v-if="!block.hide"
        :key="index"
        embed-in="rows"
        v-bind="block"
        :schema="schema"
        :action-status="block.actionStatus || actionStatus"
        :size="getBlockSize(index)"
        :shown="shown"
        @bar:reset="OnBarReset"
        @bar:toggle:size="OnBarToggleSize"/>
    </template>
  </template>
  <div
    v-if="isDragging"
      class="ti-gui-dragging-mask"></div>
</div>`);
//========================================
// JOIN <ti-gui-rows.mjs> ti/com/ti/gui/rows/ti-gui-rows.mjs
//========================================
Ti.Preload("ti/com/ti/gui/rows/ti-gui-rows.mjs", TI_PACK_EXPORTS['ti/com/ti/gui/rows/ti-gui-rows.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/gui/rows/_com.json
//========================================
Ti.Preload("ti/com/ti/gui/rows/_com.json", {
  "name": "ti-gui-rows",
  "globally": true,
  "template": "./ti-gui-rows.html",
  "mixins": [
    "@com:ti/gui/gui-block-support.mjs",
    "@com:ti/gui/gui-flex-dragging.mjs",
    "./ti-gui-rows.mjs"
  ]
});
//========================================
// JOIN <ti-gui-tabs.html> ti/com/ti/gui/tabs/ti-gui-tabs.html
//========================================
Ti.Preload("ti/com/ti/gui/tabs/ti-gui-tabs.html", `<div class="ti-gui-tabs" :class="TopClass">
  <!--
    Tab title bar
  -->
  <header :class="TabClass">
    <ul>
      <li v-for="it in TabItems"
        :key="it.key"
        :class="it.className"
        @click="OnSetCurrentTabItem(it)">
        <!--Icon-->
        <ti-icon
          v-if="it.icon"
            class="it-icon"
            :value="it.icon"/>
        <!--Text-->
        <span class="it-text">{{it.title|i18n}}</span>
      </li>
    </ul>
  </header>
  <!--
    Current Block
  -->
  <section v-if="CurrentBlock">
    <ti-gui-block 
      embed-in="tabs"
      v-bind="CurrentBlock"
      :action-status="CurrentBlock.actionStatus || actionStatus"
      :schema="schema"
      :shown="shown"/>
  </section>
</div>`);
//========================================
// JOIN <ti-gui-tabs.mjs> ti/com/ti/gui/tabs/ti-gui-tabs.mjs
//========================================
Ti.Preload("ti/com/ti/gui/tabs/ti-gui-tabs.mjs", TI_PACK_EXPORTS['ti/com/ti/gui/tabs/ti-gui-tabs.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/gui/tabs/_com.json
//========================================
Ti.Preload("ti/com/ti/gui/tabs/_com.json", {
  "name" : "ti-gui-tabs",
  "globally" : true,
  "template" : "./ti-gui-tabs.html",
  "mixins"   : "./ti-gui-tabs.mjs"
});
//========================================
// JOIN <ti-gui-methods.mjs> ti/com/ti/gui/ti-gui-methods.mjs
//========================================
Ti.Preload("ti/com/ti/gui/ti-gui-methods.mjs", TI_PACK_EXPORTS['ti/com/ti/gui/ti-gui-methods.mjs']);
//========================================
// JOIN <ti-gui.html> ti/com/ti/gui/ti-gui.html
//========================================
Ti.Preload("ti/com/ti/gui/ti-gui.html", `<div class="ti-gui" :class="TopClass">
  <!--===========================================
    All normal layout
  -->
  <div class="gui-con" v-if="isShowMainArea">
    <!--
      Layout as rows
    -->
    <ti-gui-rows
      v-if="'rows' == LayoutType"
      class="ti-fill-parent"
      v-bind="myLayout"
      :schema="schema"
      :shown="TheShown"
      :default-flex="defaultFlex"
      :action-status="actionStatus"
      :on-init="OnMainTypeInit"
    />
    <!--
      Layout as cols
    -->
    <ti-gui-cols
      v-else-if="'cols' == LayoutType"
      class="ti-fill-parent"
      v-bind="myLayout"
      :schema="schema"
      :shown="TheShown"
      :default-flex="defaultFlex"
      :action-status="actionStatus"
      :on-init="OnMainTypeInit"
    />
    <!--
      Layout as tabs
    -->
    <ti-gui-tabs
      v-else-if="'tabs' == LayoutType"
      class="ti-fill-parent"
      v-bind="myLayout"
      :schema="schema"
      :shown="TheShown"
      :default-flex="defaultFlex"
      :action-status="actionStatus"
      :on-init="OnMainTypeInit"
    />
    <!--
      Layout as grid
    -->
    <ti-gui-grid
      v-else-if="'grid' == LayoutType"
      class="ti-fill-parent"
      v-bind="myLayout"
      :schema="schema"
      :shown="TheShown"
      :default-flex="defaultFlex"
      :action-status="actionStatus"
      :on-init="OnMainTypeInit"
    />
  </div>
  <!--===========================================
    All float panels
  -->
  <template v-for="pan in ThePanels">
    <transition :name="pan.transName" @after-enter="OnPanelAfterEnter(pan)">
      <ti-gui-panel
        v-if="pan.visible"
        :key="pan.key"
        v-bind="pan.panel"
        :refer-element="activeElement"
        :viewport-width="myViewportWidth"
        :viewport-height="myViewportHeight"
        :schema="schema"
        :shown="TheShown"
        :visibles="myPanelVisibles"
        :default-flex="defaultFlex"
        :action-status="actionStatus"
      />
    </transition>
  </template>
  <!--===========================================
    Loading
  -->
  <template v-if="isLoading">
    <div v-if="maskWhenLoading" class="ti-mask-loading">
      <ti-loading v-bind="TheLoading" class="as-mask pad-m radius-m" />
    </div>
    <ti-loading v-else v-bind="TheLoading" class="as-mask pad-m radius-m" />
  </template>
</div>`);
//========================================
// JOIN <ti-gui.mjs> ti/com/ti/gui/ti-gui.mjs
//========================================
Ti.Preload("ti/com/ti/gui/ti-gui.mjs", TI_PACK_EXPORTS['ti/com/ti/gui/ti-gui.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/gui/_com.json
//========================================
Ti.Preload("ti/com/ti/gui/_com.json", {
  "name": "ti-gui",
  "globally": true,
  "template": "./ti-gui.html",
  "methods": "./ti-gui-methods.mjs",
  "mixins": "./ti-gui.mjs",
  "components": [
    "@com:ti/gui/adjustbar",
    "@com:ti/gui/block",
    "@com:ti/gui/cols",
    "@com:ti/gui/rows",
    "@com:ti/gui/tabs",
    "@com:ti/gui/grid",
    "@com:ti/gui/panel"
  ]
});
//========================================
// JOIN <ti-icon-text.html> ti/com/ti/icon/text/ti-icon-text.html
//========================================
Ti.Preload("ti/com/ti/icon/text/ti-icon-text.html", `<div class="ti-icon-text" 
  :class="className">
  <!--Icon-->
  <ti-icon v-if="icon" class="as-icon" :value="icon"/>
  <!--Text-->
  <div v-if="text" class="as-text">{{text|i18n}}</div>
</div>`);
//========================================
// JOIN <ti-icon-text.mjs> ti/com/ti/icon/text/ti-icon-text.mjs
//========================================
Ti.Preload("ti/com/ti/icon/text/ti-icon-text.mjs", TI_PACK_EXPORTS['ti/com/ti/icon/text/ti-icon-text.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/icon/text/_com.json
//========================================
Ti.Preload("ti/com/ti/icon/text/_com.json", {
  "name" : "ti-icon-text",
  "globally" : true,
  "template" : "./ti-icon-text.html",
  "mixins" : ["./ti-icon-text.mjs"]
});
//========================================
// JOIN <ti-icon.html> ti/com/ti/icon/ti-icon.html
//========================================
Ti.Preload("ti/com/ti/icon/ti-icon.html", `<div 
  class="ti-icon" 
  :class="TopClass"
  @click.left="OnClickTop">
  <div class="icon-icon"
    :style="Icon.outerStyle">
    <!--Font icon-->
    <i v-if="'font'==Icon.type"
      :class="Icon.className"
      :style="Icon.innerStyle">
      <!--ligature font -->
      <template v-if="Icon.text">{{Icon.text}}</template>
    </i>
    <!--Svg/Image-->
    <img v-else-if="'image'==Icon.type"
        :src="Icon.value"
        :style="Icon.innerStyle"/>
    <!--
      Default output the value
    -->
    <em v-else>{{value}}</em>
  </div>
</div>`);
//========================================
// JOIN <ti-icon.mjs> ti/com/ti/icon/ti-icon.mjs
//========================================
Ti.Preload("ti/com/ti/icon/ti-icon.mjs", TI_PACK_EXPORTS['ti/com/ti/icon/ti-icon.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/icon/_com.json
//========================================
Ti.Preload("ti/com/ti/icon/_com.json", {
  "name" : "ti-icon",
  "globally" : true,
  "template" : "./ti-icon.html",
  "mixins" : ["./ti-icon.mjs"]
});
//========================================
// JOIN <ti-imgfile.html> ti/com/ti/imgfile/ti-imgfile.html
//========================================
Ti.Preload("ti/com/ti/imgfile/ti-imgfile.html", `<div class="ti-imgfile"
  :class="TopClass">
  <!--
    Hidden input file to choose files
  -->
  <input 
    type="file" 
    ref="file" 
    class="ti-hide"
    @change.stop.seft="OnSelectLocalFilesToUpload">
  <!--
    Major preview zone
  -->
  <div class="thumb-con"
    :style="ThumbStyle"
    @click="OnClickToEdit"
    v-drop-files.mask="OnDropFiles">
    <!--
      Preview
    -->
    <ti-obj-thumb 
      :preview="PreviewThumb"
      :progress="progress"
      :footer="false"/>
  </div>
  <!--
    Remove
  -->
  <div v-if="isShowRemoveIcon"
    class="thumb-actions">
    <!--remove-->
    <div class="thumb-opt as-del"
      @click="OnRemove">
      <ti-icon value="zmdi-delete"/>
      <span class="it-text">{{'clear'|i18n}}</span>
    </div>
    <!--open-->
    <div class="thumb-opt as-open"
      @click="OnOpen">
      <ti-icon value="zmdi-open-in-new"/>
      <span class="it-text">{{'open'|i18n}}</span>
    </div>
    <!--//////-->
  </div>
</div>`);
//========================================
// JOIN <ti-imgfile.mjs> ti/com/ti/imgfile/ti-imgfile.mjs
//========================================
Ti.Preload("ti/com/ti/imgfile/ti-imgfile.mjs", TI_PACK_EXPORTS['ti/com/ti/imgfile/ti-imgfile.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/imgfile/_com.json
//========================================
Ti.Preload("ti/com/ti/imgfile/_com.json", {
  "name" : "ti-imgfile",
  "globally" : true,
  "template" : "./ti-imgfile.html",
  "mixins" : ["./ti-imgfile.mjs"],
  "components" : ["@com:ti/obj/thumb"]
});
//========================================
// JOIN <ti-input-color.html> ti/com/ti/input/color/ti-input-color.html
//========================================
Ti.Preload("ti/com/ti/input/color/ti-input-color.html", `<ti-combo-box class="ti-input-color"
  :class="topClass"
  :drop-width="null"
  :status="status"
  @collapse="doCollapse">
  <!--
    Box
  -->
  <template v-slot:box>
    <span class="as-color"
      @click.left="OnToggleDrop">
        <u class="as-bg"></u>
        <u class="as-fr" :style="colorStyle"></u>
    </span>
    <span class="as-clear" @click="OnClearColor">
      <ti-icon value="zmdi-close"/>
    </span>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <ti-color 
      :value="value"
      :showAlpha="showAlpha"
      notifyClick="change:color"
      notifyHex="change:hex"
      notifyAlpha="change:alpha"
      @change:color="OnColorChange($event, 'color')"
      @change:hex="OnColorChange($event, 'hex')"
      @change:alpha="OnColorChange($event, 'alpha')"/>
  </template>
</ti-combo-box>`);
//========================================
// JOIN <ti-input-color.mjs> ti/com/ti/input/color/ti-input-color.mjs
//========================================
Ti.Preload("ti/com/ti/input/color/ti-input-color.mjs", TI_PACK_EXPORTS['ti/com/ti/input/color/ti-input-color.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/color/_com.json
//========================================
Ti.Preload("ti/com/ti/input/color/_com.json", {
  "name" : "ti-input-color",
  "globally" : true,
  "template" : "./ti-input-color.html",
  "mixins" : ["./ti-input-color.mjs"],
  "components" : ["@com:ti/color"]
});
//========================================
// JOIN <ti-input-currency.html> ti/com/ti/input/currency/ti-input-currency.html
//========================================
Ti.Preload("ti/com/ti/input/currency/ti-input-currency.html", `<ti-input
  class="ti-input-currency"
  :class="TopClass"
  :value="DisInput"
  :focusValue="ValInput"
  :autoI18n="false"
  :placeholder="placeholder"
  :prefixIcon="ValIcon"
  :prefixIconForClean="!readonly"
  :prefixHoverIcon="InputPrefixHoverIcon"
  :suffixText="ValCurrency"
  :autoSelect="autoSelect"
  :readonly="readonly"
  :hideBorder="hideBorder||readonly"
  :focused="focused"
  :width="width"
  :height="height"
  :hover="InputHover"
  suffixTextNotifyName="click:suffix"
  @change="OnInputChange"
  @inputing="OnInputing"
  @click:suffix="OnClickSuffix"/>`);
//========================================
// JOIN <ti-input-currency.mjs> ti/com/ti/input/currency/ti-input-currency.mjs
//========================================
Ti.Preload("ti/com/ti/input/currency/ti-input-currency.mjs", TI_PACK_EXPORTS['ti/com/ti/input/currency/ti-input-currency.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/currency/_com.json
//========================================
Ti.Preload("ti/com/ti/input/currency/_com.json", {
  "name": "ti-input-currency",
  "globally": true,
  "template": "./ti-input-currency.html",
  "mixins": "./ti-input-currency.mjs",
  "components": [
    "@com:ti/input"
  ]
});
//========================================
// JOIN <ti-input-date.html> ti/com/ti/input/date/ti-input-date.html
//========================================
Ti.Preload("ti/com/ti/input/date/ti-input-date.html", `<ti-combo-box class="as-date"
  :class="topClass"
  :width="width"
  :drop-width="null"
  :status="status"
  @collapse="doCollapse">
  <!--
    Box
  -->
  <template v-slot:box>
    <ti-input 
      :readonly="!canInput"
      :hide-border="hideBorder"
      :placeholder="placeholder|i18n"
      :prefix-icon="icon"
      :suffix-icon="theStatusIcon"
      :value="theInputValue"
      :height="height"
      :focus="isExtended"
      @change="onChanged"
      @input:focus="onInputFocused"
      @suffix:icon="onClickStatusIcon"/>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <ti-calendar
      :value="theDropDate"
      :month-format="monthFormat"
      :begin-year="beginYear"
      :end-year="endYear"
      @change="onDateChanged"/>
  </template>
</ti-combo-box>`);
//========================================
// JOIN <ti-input-date.mjs> ti/com/ti/input/date/ti-input-date.mjs
//========================================
Ti.Preload("ti/com/ti/input/date/ti-input-date.mjs", TI_PACK_EXPORTS['ti/com/ti/input/date/ti-input-date.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/date/_com.json
//========================================
Ti.Preload("ti/com/ti/input/date/_com.json", {
  "name" : "ti-input-date",
  "globally" : true,
  "template" : "./ti-input-date.html",
  "mixins" : ["./ti-input-date.mjs"],
  "components" : [
    "@com:ti/combo/input",
    "@com:ti/calendar"]
});
//========================================
// JOIN <ti-input-daterange.html> ti/com/ti/input/daterange/ti-input-daterange.html
//========================================
Ti.Preload("ti/com/ti/input/daterange/ti-input-daterange.html", `<ti-combo-box class="as-daterange"
  :class="topClass"
  :drop-width="dropWidth"
  :status="status"
  @collapse="doCollapse">
  <!--
    Box
  -->
  <template v-slot:box>
    <ti-input 
      :readonly="!canInput"
      :hide-border="hideBorder"
      :placeholder="placeholder|i18n"
      :prefix-icon="icon"
      :suffix-icon="theStatusIcon"
      :value="theInputValue"
      :width="width"
      :height="height"
      :focus="isExtended"
      @change="onChanged"
      @input:focus="onInputFocused"
      @suffix:icon="onClickStatusIcon"/>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <ti-calendar
      :value="theDropRange"
      :range="true"
      :matrix-count="matrixCount"
      :month-format="monthFormat"
      :begin-year="beginYear"
      :end-year="endYear"
      @change="onDateRangeChanged"/>
  </template>
</ti-combo-box>`);
//========================================
// JOIN <ti-input-daterange.mjs> ti/com/ti/input/daterange/ti-input-daterange.mjs
//========================================
Ti.Preload("ti/com/ti/input/daterange/ti-input-daterange.mjs", TI_PACK_EXPORTS['ti/com/ti/input/daterange/ti-input-daterange.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/daterange/_com.json
//========================================
Ti.Preload("ti/com/ti/input/daterange/_com.json", {
  "name" : "ti-input-daterange",
  "globally" : true,
  "template" : "./ti-input-daterange.html",
  "mixins" : ["./ti-input-daterange.mjs"],
  "components" : [
    "@com:ti/combo/input",
    "@com:ti/calendar"]
});
//========================================
// JOIN <ti-input-datetime.html> ti/com/ti/input/datetime/ti-input-datetime.html
//========================================
Ti.Preload("ti/com/ti/input/datetime/ti-input-datetime.html", `<ti-combo-box class="as-datetime"
  :class="topClass"
  :width="width"
  :drop-width="'4rem'"
  :drop-overflow="'hidden'"
  :status="status"
  @collapse="doCollapse">
  <!--
    Box
  -->
  <template v-slot:box>
    <ti-input 
      :readonly="!canInput"
      :hide-border="hideBorder"
      :placeholder="placeholder|i18n"
      :prefix-icon="icon"
      :suffix-icon="theStatusIcon"
      :value="theInputValue"
      :height="height"
      :focus="isExtended"
      @change="onChanged"
      @input:focus="onInputFocused"
      @suffix:icon="onClickStatusIcon"/>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <ti-datetime
      :value="theDropDate"
      :month-format="monthFormat"
      :begin-year="beginYear"
      :end-year="endYear"
      @change="onDateChanged"/>
  </template>
</ti-combo-box>`);
//========================================
// JOIN <ti-input-datetime.mjs> ti/com/ti/input/datetime/ti-input-datetime.mjs
//========================================
Ti.Preload("ti/com/ti/input/datetime/ti-input-datetime.mjs", TI_PACK_EXPORTS['ti/com/ti/input/datetime/ti-input-datetime.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/datetime/_com.json
//========================================
Ti.Preload("ti/com/ti/input/datetime/_com.json", {
  "name" : "ti-input-datetime",
  "globally" : true,
  "template" : "./ti-input-datetime.html",
  "mixins" : ["./ti-input-datetime.mjs"],
  "components" : [
    "@com:ti/combo/input",
    "@com:ti/datetime"]
});
//========================================
// JOIN <ti-input-dval.html> ti/com/ti/input/dval/ti-input-dval.html
//========================================
Ti.Preload("ti/com/ti/input/dval/ti-input-dval.html", `<div  
  class="ti-input-dval full-field"
  :class="TopClass">
  <!--
    Boolean
  -->
  <template v-if="'Boolean' == DyVal.type">
    <!--Toggle-->
    <TiToggle
      class="as-main"
      :value="DyVal.value"/>
    <!--Adv-Edit Button-->
    <div class="as-edit" @click.left="OnOpenEditForm">
      <i class="fas fa-cog"></i>
    </div>
  </template>
  <!--
    TODO: 
    Function Call
    Array value
    Object value
  -->
  <!--
    Object
  -->
  <template v-else-if="'Object' == DyVal.type">
    <div class="as-icon"><i class="zmdi zmdi-toys"></i></div>
    <div class="as-info">{{ObjInfo}}</div>
    <!--Adv-Edit Button-->
    <div class="as-edit" @click.left="OnOpenEditForm">
      <i class="fas fa-cog"></i>
    </div>
  </template>
  <!--
    Array
  -->
  <template v-else-if="'Array' == DyVal.type">
    <div class="as-icon"><i class="zmdi zmdi-format-list-numbered"></i></div>
    <div class="as-info">{{ArrayInfo}}</div>
    <!--Adv-Edit Button-->
    <div class="as-edit" @click.left="OnOpenEditForm">
      <i class="fas fa-cog"></i>
    </div>
  </template>
  <!--
    Simple value by input
  -->
  <TiInput
    v-else
      class="as-main"
      :value="InputValue"
      v-bind="InputConf"
      :hideBorder="true"
      :autoJsValue="true"
      :autoSelect="true"
      suffixIcon="fas-cog"
      @suffix:icon="OnOpenEditForm"
      @change="OnInputChange"/>
</div>`);
//========================================
// JOIN <ti-input-dval.mjs> ti/com/ti/input/dval/ti-input-dval.mjs
//========================================
Ti.Preload("ti/com/ti/input/dval/ti-input-dval.mjs", TI_PACK_EXPORTS['ti/com/ti/input/dval/ti-input-dval.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/dval/_com.json
//========================================
Ti.Preload("ti/com/ti/input/dval/_com.json", {
  "name": "ti-input-dval",
  "globally": true,
  "template": "./ti-input-dval.html",
  "mixins": "./ti-input-dval.mjs",
  "components": [
    "@com:ti/input/list",
    "@com:ti/input/pair"
  ]
});
//========================================
// JOIN <ti-input-group.html> ti/com/ti/input/group/ti-input-group.html
//========================================
Ti.Preload("ti/com/ti/input/group/ti-input-group.html", `<div class="ti-input-group full-field" :class="TopClass">
  <!----------------------------------------->
  <template v-for="fld in GroupFields">
    <div v-if="fld.sepChar" class="as-sep">
      <span>{{fld.sepChar}}</span>
    </div>
    <TiInput
      v-bind="fld.input"
      :value="fld.value"
      @change="OnInputChange(fld,$event)"
    />
  </template>
  <!----------------------------------------->
</div>`);
//========================================
// JOIN <ti-input-group.mjs> ti/com/ti/input/group/ti-input-group.mjs
//========================================
Ti.Preload("ti/com/ti/input/group/ti-input-group.mjs", TI_PACK_EXPORTS['ti/com/ti/input/group/ti-input-group.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/group/_com.json
//========================================
Ti.Preload("ti/com/ti/input/group/_com.json", {
  "name": "ti-input-group",
  "globally": true,
  "template": "./ti-input-group.html",
  "mixins": "./ti-input-group.mjs"
});
//========================================
// JOIN <ti-input-icon-data.mjs> ti/com/ti/input/icon/ti-input-icon-data.mjs
//========================================
Ti.Preload("ti/com/ti/input/icon/ti-input-icon-data.mjs", TI_PACK_EXPORTS['ti/com/ti/input/icon/ti-input-icon-data.mjs']);
//========================================
// JOIN <ti-input-icon.html> ti/com/ti/input/icon/ti-input-icon.html
//========================================
Ti.Preload("ti/com/ti/input/icon/ti-input-icon.html", `<ti-combo-box class="ti-input-icon"
  :class="TopClass"
  :drop-width="dropWidth"
  :drop-height="dropHeight"
  :status="status"
  @collapse="doCollapse">
  <!--
    Box
  -->
  <template v-slot:box>
    <span class="as-value"
      :style="ValueStyle"
      @click.left="OnToggleDrop">
      <!--Show Icon-->
      <ti-icon 
        v-if="hasValue"
          :value="value"/>
      <!--No Icon-->
      <span 
        v-else
          class="no-icon"><i class="zmdi zmdi-cake"></i></span>
    </span>
    <span class="as-clear" @click="OnClearIcon">
      <ti-icon value="zmdi-close"/>
    </span>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <div class="icon-input">
      <input ref="input"
        :placeholder="'i18n:icon-code-tip'|i18n"
        @change="OnChangedIcon">
    </div>
    <div class="icon-options">
      <ul>
        <li v-for="li of OptionIcons"
          @click.left="OnSelectIcon(li)"
          @dblclick.left="OnSelectIconAndCollapse(li)"
          @mouseenter="OnHoverIcon(li)"
          @mouseleave="OnLeaveIcon(li)">
          <ti-icon :value="li.value"/>
        </li>
      </ul>
    </div>
    <div class="icon-tip">
      <template v-if="TipIcon">
        <ti-icon :value="TipIcon"/>
        <span>{{TipIcon}}</span>
      </template>
      <template v-else>
        <span>...</span>
      </template>
    </div>
  </template>
</ti-combo-box>`);
//========================================
// JOIN <ti-input-icon.mjs> ti/com/ti/input/icon/ti-input-icon.mjs
//========================================
Ti.Preload("ti/com/ti/input/icon/ti-input-icon.mjs", TI_PACK_EXPORTS['ti/com/ti/input/icon/ti-input-icon.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/icon/_com.json
//========================================
Ti.Preload("ti/com/ti/input/icon/_com.json", {
  "name" : "ti-input-icon",
  "globally" : true,
  "template" : "./ti-input-icon.html",
  "methods" : "./ti-input-icon-data.mjs",
  "mixins" : ["./ti-input-icon.mjs"]
});
//========================================
// JOIN <ti-input-langs.html> ti/com/ti/input/langs/ti-input-langs.html
//========================================
Ti.Preload("ti/com/ti/input/langs/ti-input-langs.html", `<TiObjPair
  :value="myValue"
  :canEditValue="true"
  :showHead="false"
  :multiLines="true"
  :fields="myFields"
  :onlyFields="true"/>
<!--TiObjPair
  nameComType="TiLabel"
  :nameComConf="NameComConf"
  :value="myValue"
  :nameWidth="nameWidth"
  :canAddNewItem="false"
  :canRemoveItem="false"/-->`);
//========================================
// JOIN <ti-input-langs.mjs> ti/com/ti/input/langs/ti-input-langs.mjs
//========================================
Ti.Preload("ti/com/ti/input/langs/ti-input-langs.mjs", TI_PACK_EXPORTS['ti/com/ti/input/langs/ti-input-langs.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/langs/_com.json
//========================================
Ti.Preload("ti/com/ti/input/langs/_com.json", {
  "name": "ti-input-langs",
  "globally": true,
  "template": "./ti-input-langs.html",
  "mixins": "./ti-input-langs.mjs",
  "components": [
    "@com:ti/obj/pair"
  ]
});
//========================================
// JOIN <ti-input-list.html> ti/com/ti/input/list/ti-input-list.html
//========================================
Ti.Preload("ti/com/ti/input/list/ti-input-list.html", `<div class="ti-input-list full-field" :class="TopClass">
  <!----------------------------------------->
  <div
    v-if="!isEmpty"
      class="as-list">
      <div
        v-for="it in ListItems"
          class="as-item">
            <div 
              v-if="canRemoveItem"
                class="as-deleter as-index"
                @click.left="OnDeleteItem(it)">
                <i class="zmdi zmdi-close"></i>
                <span>{{it.index}}</span>
            </div>
            <div 
              v-else
                class="as-index">
                <span>{{it.index}}</span>
            </div>
            <component 
              :is="it.comType"
              class="as-com"
              v-bind="it.comConf"
              :value="it.value"
              @change="OnValueChange(it, $event)"/>
      </div> <!--.as-item-->
  </div> <!--.as-list-->
  <!----------------------------------------->
  <div class="as-adder" v-if="canAddNewItem">
    <div class="adder-btn" @click.left="OnAddNewItem">
      <i class="zmdi zmdi-plus"></i>
      <span>{{'i18n:add-item'|i18n}}</span>
    </div>
  </div>
  <!----------------------------------------->
</div>`);
//========================================
// JOIN <ti-input-list.mjs> ti/com/ti/input/list/ti-input-list.mjs
//========================================
Ti.Preload("ti/com/ti/input/list/ti-input-list.mjs", TI_PACK_EXPORTS['ti/com/ti/input/list/ti-input-list.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/list/_com.json
//========================================
Ti.Preload("ti/com/ti/input/list/_com.json", {
  "name": "ti-input-list",
  "globally": true,
  "template": "./ti-input-list.html",
  "mixins": "./ti-input-list.mjs",
  "components": [
    "@com:ti/input/dval"
  ]
});
//========================================
// JOIN <ti-input-month.html> ti/com/ti/input/month/ti-input-month.html
//========================================
Ti.Preload("ti/com/ti/input/month/ti-input-month.html", `<ti-combo-box class="as-month"
  :class="topClass"
  :width="width"
  :drop-width="dropWidth"
  :drop-height="dropHeight"
  :drop-overflow="'hidden'"
  :status="status"
  @collapse="doCollapse">
  <!--
    Box
  -->
  <template v-slot:box>
    <ti-input 
      :readonly="!canInput"
      :hide-border="hideBorder"
      :placeholder="placeholder|i18n"
      :prefix-icon="icon"
      :suffix-icon="theStatusIcon"
      :value="theInputValue"
      :height="height"
      :focus="isExtended"
      @change="onChanged"
      @input:focus="onInputFocused"
      @suffix:icon="onClickStatusIcon"/>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <ti-month
      :value="theDropDate"
      :height="dropHeight"
      :begin-year="beginYear"
      :end-year="endYear"
      @change="onMonthChanged"/>
  </template>
</ti-combo-box>`);
//========================================
// JOIN <ti-input-month.mjs> ti/com/ti/input/month/ti-input-month.mjs
//========================================
Ti.Preload("ti/com/ti/input/month/ti-input-month.mjs", TI_PACK_EXPORTS['ti/com/ti/input/month/ti-input-month.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/month/_com.json
//========================================
Ti.Preload("ti/com/ti/input/month/_com.json", {
  "name" : "ti-input-month",
  "globally" : true,
  "template" : "./ti-input-month.html",
  "mixins" : ["./ti-input-month.mjs"],
  "components" : [
    "@com:ti/combo/input",
    "@com:ti/month"]
});
//========================================
// JOIN <ti-input-num.html> ti/com/ti/input/num/ti-input-num.html
//========================================
Ti.Preload("ti/com/ti/input/num/ti-input-num.html", `<div
  class="ti-input-num ti-fill-parent"
  :class="TopClass"
  :style="TopStyle">
  <!--
    Button: -
  -->
  <div class="as-btn is-decrease"
    :class="DesreaseClass"
    @click="changeByStep(-1)">
    <ti-icon value="zmdi-minus"/>
  </div>
  <!--
    Input
  -->
  <div class="as-input">
    <input 
      spellcheck="false" 
      :value="TheValue"
      :placeholder="placeholder || defaultValue"
      @change="onChanged">
  </div>
  <!--
    Button: +
  -->
  <div class="as-btn is-increase"
    :class="IncreaseClass"
    @click="changeByStep(1)">
    <ti-icon value="zmdi-plus"/>
  </div>
</div>`);
//========================================
// JOIN <ti-input-num.mjs> ti/com/ti/input/num/ti-input-num.mjs
//========================================
Ti.Preload("ti/com/ti/input/num/ti-input-num.mjs", TI_PACK_EXPORTS['ti/com/ti/input/num/ti-input-num.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/num/_com.json
//========================================
Ti.Preload("ti/com/ti/input/num/_com.json", {
  "name" : "ti-input-num",
  "globally" : true,
  "template" : "./ti-input-num.html",
  "mixins" : ["./ti-input-num.mjs"]
});
//========================================
// JOIN <ti-input-pair.html> ti/com/ti/input/pair/ti-input-pair.html
//========================================
Ti.Preload("ti/com/ti/input/pair/ti-input-pair.html", `<div class="ti-input-pair full-field" :class="TopClass">
  <!----------------------------------------->
  <div class="pair-grid-con" v-if="!isEmpty">
    <template v-for="fld in PairFields">
      <div class="pair-grid-item as-name" :style="NameStyle">
        <div class="cell-con">
          <div
            v-if="canRemoveItem && !readonly"
            class="as-deleter"
            @click.left="OnDeleteFld(fld)"
          >
            <i class="zmdi zmdi-close"></i>
          </div>
          <component
            :is="nameComType"
            class="as-com"
            v-bind="nameComConf"
            :value="fld.name"
            :readonly="readonly"
            @change="OnNameChange(fld, $event)"
          />
        </div>
      </div>
      <div class="pair-grid-item as-value">
        <div class="cell-con">
          <component
            :is="valueComType"
            class="as-com"
            v-bind="valueComConf"
            :value="fld.value"
            :readonly="readonly"
            @change="OnValueChange(fld, $event)"
          />
        </div>
      </div>
    </template>
  </div>
  <!----------------------------------------->
  <TiLoading v-else-if="autoShowBlank" v-bind="blankAs" />
  <!----------------------------------------->
  <TiButton
    v-if="canAddNewItem && !readonly"
    class="is-tiny btn-r4"
    :setup="ActionSetup"
  />
  <!----------------------------------------->
</div>`);
//========================================
// JOIN <ti-input-pair.mjs> ti/com/ti/input/pair/ti-input-pair.mjs
//========================================
Ti.Preload("ti/com/ti/input/pair/ti-input-pair.mjs", TI_PACK_EXPORTS['ti/com/ti/input/pair/ti-input-pair.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/pair/_com.json
//========================================
Ti.Preload("ti/com/ti/input/pair/_com.json", {
  "name": "ti-input-pair",
  "globally": true,
  "template": "./ti-input-pair.html",
  "mixins": "./ti-input-pair.mjs"
});
//========================================
// JOIN <ti-input-picker.html> ti/com/ti/input/picker/ti-input-picker.html
//========================================
Ti.Preload("ti/com/ti/input/picker/ti-input-picker.html", `<component
  :is="ComType"
  class="ti-input-picker"
  :class="TopClass"
  :style="TopStyle"
  v-bind="ComConf"
  @change="OnInputChange"
  @suffix:icon="OnClickSuffixIcon"
/>`);
//========================================
// JOIN <ti-input-picker.mjs> ti/com/ti/input/picker/ti-input-picker.mjs
//========================================
Ti.Preload("ti/com/ti/input/picker/ti-input-picker.mjs", TI_PACK_EXPORTS['ti/com/ti/input/picker/ti-input-picker.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/picker/_com.json
//========================================
Ti.Preload("ti/com/ti/input/picker/_com.json", {
  "name": "ti-input-picker",
  "globally": true,
  "template": "./ti-input-picker.html",
  "mixins": "./ti-input-picker.mjs",
  "components": [
    "@com:ti/input",
    "@com:ti/input/tags"
  ]
});
//========================================
// JOIN <ti-input-tags-props.mjs> ti/com/ti/input/tags/ti-input-tags-props.mjs
//========================================
Ti.Preload("ti/com/ti/input/tags/ti-input-tags-props.mjs", TI_PACK_EXPORTS['ti/com/ti/input/tags/ti-input-tags-props.mjs']);
//========================================
// JOIN <ti-input-tags.html> ti/com/ti/input/tags/ti-input-tags.html
//========================================
Ti.Preload("ti/com/ti/input/tags/ti-input-tags.html", `<ti-input
  class="ti-input-tags"
  :class-name="className"
  :value="inputValue"
  :value-case="valueCase"
  :trimed="trimed"

  :readonly="!canInput || readonly"
  :focused="focused"
  :hover="hover"
  :autoSelect="autoSelect"

  :placeholder="thePlaceholder"
  :autoI18n="autoI18n"
  :hideBorder="hideBorder"
  :prefixIcon="InputPrefixIcon"
  :prefixHoverIcon="prefixHoverIcon"
  :prefixIconForClean="prefixIconForClean"
  :prefixText="prefixText"
  :suffixIcon="suffixIcon"
  :suffixText="suffixText"

  :prefixIconNotifyName="prefixIconNotifyName"
  :prefixTextNotifyName="prefixTextNotifyName"
  :suffixIconNotifyName="suffixIconNotifyName"
  :suffixTextNotifyName="suffixTextNotifyName"
  :enterKeyNotifyName="enterKeyNotifyName"
  
  :width="width"
  :height="height"

  :on-init="onInputInit"
  
  @inputing="onInputInputing"
  @change="onInputChanged"
  @input:focus="$notify('input:focus')"
  @prefix:icon="$notify('prefix:icon')"
  @input:blur="$notify('input:blur')"
  @suffix:icon="$notify('suffix:icon')">
  <!--
    Tag List
  -->
  <div v-if="hasTags"
    class="as-tags">
    <ti-tags
      :value="theTags"
      :dict="dict"
      :removable="true"
      :readonly="readonly"
      :item-options="tagOptions"
      :item-icon-by="tagItemIconBy"
      :keyBy="tagKeyBy"
      :item-default-icon="tagItemDefaultIcon"
      :option-default-icon="tagOptionDefaultIcon"
      :mapping="tagMapping"
      :explainMapping="tagExplainMapping"
      :cancel-item-bubble="cancelTagBubble"
      @change="$notify('change', $event)"/>
  </div>
</ti-input>`);
//========================================
// JOIN <ti-input-tags.mjs> ti/com/ti/input/tags/ti-input-tags.mjs
//========================================
Ti.Preload("ti/com/ti/input/tags/ti-input-tags.mjs", TI_PACK_EXPORTS['ti/com/ti/input/tags/ti-input-tags.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/tags/_com.json
//========================================
Ti.Preload("ti/com/ti/input/tags/_com.json", {
  "name" : "ti-input-tags",
  "globally" : true,
  "template" : "./ti-input-tags.html",
  "props" : [
      "@com:ti/input/ti-input-props.mjs",
      "./ti-input-tags-props.mjs"
    ],
  "mixins" : ["./ti-input-tags.mjs"],
  "components" : ["@com:ti/tags"]
});
//========================================
// JOIN <ti-input-text.html> ti/com/ti/input/text/ti-input-text.html
//========================================
Ti.Preload("ti/com/ti/input/text/ti-input-text.html", `<div class="ti-input-text full-field" 
  :class="topClass" 
  :style="topStyle"
  v-ti-activable>
  <!--
    Prefix
  -->
  <div class="as-bar is-prefix" v-if="prefixIcon || prefixText">
    <!--prefix:icon-->
    <div v-if="prefixIcon"
      class="as-icon at-prefix"
      :class="getHoverClass('prefixIcon')"
      @click.left.stop="onClickPrefixIcon"
      @mouseenter="pointerHover='prefixIcon'"
      @mouseleave="pointerHover=null">
      <ti-icon :value="thePrefixIcon"/>
    </div>
    <!--prefix:text-->
    <div v-if="prefixText" 
      class="as-text at-prefix"
      :class="getHoverClass('prefixText')"
      @click.left.stop="onClickPrefixText"
      @mouseenter="pointerHover='prefixText'"
      @mouseleave="pointerHover=null">
      <span>{{prefixText|i18n}}</span>
    </div>
  </div>
  <!--input-->
  <textarea ref="input"
    spellcheck="false" 
    :readonly="readonly"
    :value="theValue"
    :placeholder="placeholder | i18n"
    @compositionstart="onInputCompositionStart"
    @compositionend="onInputCompositionEnd"
    @input="onInputing"
    @keydown="onInputKeyDown"
    @change="onInputChanged"
    @focus="onInputFocus"
    @blur="onInputBlur"></textarea>
  <!--
    Suffix
  -->
  <div class="as-bar is-suffix" v-if="suffixText || suffixIcon">
    <!--suffix:text-->
    <div v-if="suffixText"
      class="as-text at-suffix"
      :class="getHoverClass('suffixText')"
      @click.left.stop="onClickSuffixIcon"
      @mouseenter="pointerHover='suffixText'"
      @mouseleave="pointerHover=null">
      <span>{{suffixText|i18n}}</span>
    </div>
    <!--suffix:icon-->
    <div v-if="suffixIcon"
      class="as-icon at-suffix"
      :class="getHoverClass('suffixIcon')"
      @click.left.stop="onClickSuffixIcon"
      @mouseenter="pointerHover='suffixIcon'"
      @mouseleave="pointerHover=null">
      <ti-icon :value="suffixIcon"/>
    </div>
  </div>
</div>`);
//========================================
// JOIN <ti-input-text.mjs> ti/com/ti/input/text/ti-input-text.mjs
//========================================
Ti.Preload("ti/com/ti/input/text/ti-input-text.mjs", TI_PACK_EXPORTS['ti/com/ti/input/text/ti-input-text.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/text/_com.json
//========================================
Ti.Preload("ti/com/ti/input/text/_com.json", {
  "name" : "ti-input-text",
  "globally" : true,
  "template" : "./ti-input-text.html",
  "mixins" : ["./ti-input-text.mjs"],
  "components" : []
});
//========================================
// JOIN <ti-input-props.mjs> ti/com/ti/input/ti-input-props.mjs
//========================================
Ti.Preload("ti/com/ti/input/ti-input-props.mjs", TI_PACK_EXPORTS['ti/com/ti/input/ti-input-props.mjs']);
//========================================
// JOIN <ti-input.html> ti/com/ti/input/ti-input.html
//========================================
Ti.Preload("ti/com/ti/input/ti-input.html", `<div class="ti-input full-field" 
  :class="TopClass" 
  :style="TopStyle"
  v-bind="InputValueTip"
  v-ti-activable>
  <!--prefix:icon-->
  <div v-if="prefixIcon"
    class="as-input-icon at-prefix"
    :class="getHoverClass('prefixIcon')"
    @click.left="OnClickPrefixIcon"
    @mouseenter="pointerHover='prefixIcon'"
    @mouseleave="pointerHover=null">
    <ti-icon :value="ThePrefixIcon"/>
  </div>
  <!--prefix:text-->
  <div v-if="ThePrefixText" 
    class="as-input-text at-prefix"
    :class="getHoverClass('prefixText')"
    @click.left="OnClickPrefixText"
    @mouseenter="pointerHover='prefixText'"
    @mouseleave="pointerHover=null">
    <span>{{ThePrefixText|i18nTxt}}</span>
  </div>
  <!--PreSlot-->
  <slot></slot>
  <!--
    Input Box
  -->
  <div class="as-input">
    <input ref="input"
      spellcheck="false" 
      :readonly="readonly"
      :value="TheValue"
      :placeholder="placeholder|i18nTxt"
      @compositionstart="OnInputCompositionStart"
      @compositionend="OnInputCompositionEnd"
      @input="OnInputing"
      @change="OnInputChanged"
      @focus="OnInputFocus"
      @blur="OnInputBlur"
      @click.left="OnClickInput"
      @keypress="OnInputKeyPress">
    <!--suffix:text-->
    <div v-if="TheSuffixText"
      class="as-input-text at-suffix"
      :class="getHoverClass('suffixText')"
      @click.left="OnClickSuffixText"
      @mouseenter="pointerHover='suffixText'"
      @mouseleave="pointerHover=null">
      <span>{{TheSuffixText|i18nTxt}}</span>
    </div>
    <!--suffix:icon-->
    <div v-if="suffixIcon"
      class="as-input-icon at-suffix"
      :class="getHoverClass('suffixIcon')"
      @click.left="OnClickSuffixIcon"
      @mouseenter="pointerHover='suffixIcon'"
      @mouseleave="pointerHover=null">
      <ti-icon :value="suffixIcon"/>
    </div>
  </div>
</div>`);
//========================================
// JOIN <ti-input.mjs> ti/com/ti/input/ti-input.mjs
//========================================
Ti.Preload("ti/com/ti/input/ti-input.mjs", TI_PACK_EXPORTS['ti/com/ti/input/ti-input.mjs']);
//========================================
// JOIN <ti-input-time.html> ti/com/ti/input/time/ti-input-time.html
//========================================
Ti.Preload("ti/com/ti/input/time/ti-input-time.html", `<ti-combo-box class="as-time"
  :class="topClass"
  :width="width"
  :drop-width="dropWidth"
  :drop-height="dropHeight"
  :drop-overflow="'hidden'"
  :status="status"
  @collapse="doCollapse">
  <!--
    Box
  -->
  <template v-slot:box>
    <ti-input 
      :readonly="!canInput"
      :hide-border="hideBorder"
      :placeholder="placeholder|i18n"
      :prefix-icon="icon"
      :suffix-icon="theStatusIcon"
      :value="theTimeText"
      :height="height"
      :focus="isExtended"
      @change="onChanged"
      @input:focus="onInputFocused"
      @suffix:icon="onClickStatusIcon"/>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <ti-time
      :value="theDropTime"
      :height="dropHeight"
      :mode="mode"
      @change="onTimeChanged"/>
  </template>
</ti-combo-box>`);
//========================================
// JOIN <ti-input-time.mjs> ti/com/ti/input/time/ti-input-time.mjs
//========================================
Ti.Preload("ti/com/ti/input/time/ti-input-time.mjs", TI_PACK_EXPORTS['ti/com/ti/input/time/ti-input-time.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/time/_com.json
//========================================
Ti.Preload("ti/com/ti/input/time/_com.json", {
  "name" : "ti-input-time",
  "globally" : true,
  "template" : "./ti-input-time.html",
  "mixins" : ["./ti-input-time.mjs"],
  "components" : [
    "@com:ti/combo/input",
    "@com:ti/time"]
});
//========================================
// JOIN <ti-input-timerange.html> ti/com/ti/input/timerange/ti-input-timerange.html
//========================================
Ti.Preload("ti/com/ti/input/timerange/ti-input-timerange.html", `<ti-combo-box class="as-timerange"
  :class="topClass"
  :width="width"
  :drop-width="null"
  :status="status"
  @collapse="doCollapse">
  <!--
    Box
  -->
  <template v-slot:box>
    <ti-input 
      :readonly="!canInput"
      :hide-border="hideBorder"
      :placeholder="placeholder|i18n"
      :prefix-icon="icon"
      :suffix-icon="theStatusIcon"
      :value="theRangeText"
      :height="height"
      :focus="isExtended"
      @change="onChanged"
      @input:focus="onInputFocused"
      @suffix:icon="onClickStatusIcon"/>
  </template>
  <!--
    Drop
  -->
  <template v-slot:drop>
    <ti-form
      :data="theDropRange"
      v-bind="theFormConfig"
      @change="onFormChanged"/>
  </template>
</ti-combo-box>`);
//========================================
// JOIN <ti-input-timerange.mjs> ti/com/ti/input/timerange/ti-input-timerange.mjs
//========================================
Ti.Preload("ti/com/ti/input/timerange/ti-input-timerange.mjs", TI_PACK_EXPORTS['ti/com/ti/input/timerange/ti-input-timerange.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/timerange/_com.json
//========================================
Ti.Preload("ti/com/ti/input/timerange/_com.json", {
  "name" : "ti-input-timerange",
  "globally" : true,
  "template" : "./ti-input-timerange.html",
  "mixins" : ["./ti-input-timerange.mjs"],
  "components" : [
    "@com:ti/combo/input"]
});
//========================================
// JOIN <ti-input-tree-picker.html> ti/com/ti/input/tree-picker/ti-input-tree-picker.html
//========================================
Ti.Preload("ti/com/ti/input/tree-picker/ti-input-tree-picker.html", `<div class="ti-input-tree-picker full-field">
  <!--
    Multi values
  -->
  <TiInputTags
    v-if="multi"
      :value="myInputValue"
      :placeholder="placeholder"
      :dict="dict"
      :prefixIcon="myInputIcon"
      :suffixIcon="InputSuffixIcon"
      :readonly="readonly"
      @suffix:icon="OnClickSuffixIcon"/>
  <!--
    Single value
  -->
  <TiInput
    v-else
      :value="myInputValue"
      :suffxiText="myInputSuffix"
      :placeholder="placeholder"
      :readonly="true"
      :prefixIcon="myInputIcon"
      :suffixIcon="InputSuffixIcon"
      :suffixText="InputSuffixText"
      @suffix:icon="OnClickSuffixIcon"/>
</div>`);
//========================================
// JOIN <ti-input-tree-picker.mjs> ti/com/ti/input/tree-picker/ti-input-tree-picker.mjs
//========================================
Ti.Preload("ti/com/ti/input/tree-picker/ti-input-tree-picker.mjs", TI_PACK_EXPORTS['ti/com/ti/input/tree-picker/ti-input-tree-picker.mjs']);
//========================================
// JOIN <tree-picker-props.mjs> ti/com/ti/input/tree-picker/tree-picker-props.mjs
//========================================
Ti.Preload("ti/com/ti/input/tree-picker/tree-picker-props.mjs", TI_PACK_EXPORTS['ti/com/ti/input/tree-picker/tree-picker-props.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/input/tree-picker/_com.json
//========================================
Ti.Preload("ti/com/ti/input/tree-picker/_com.json", {
  "name": "ti-input-tree-picker",
  "globally": true,
  "template": "./ti-input-tree-picker.html",
  "props": "./tree-picker-props.mjs",
  "mixins": "./ti-input-tree-picker.mjs",
  "components": [
    "@com:ti/input/tags"
  ]
});
//========================================
// JOIN <_com.json> ti/com/ti/input/_com.json
//========================================
Ti.Preload("ti/com/ti/input/_com.json", {
  "name" : "ti-input",
  "globally" : true,
  "template" : "./ti-input.html",
  "props" : "./ti-input-props.mjs",
  "mixins" : ["./ti-input.mjs"],
  "components" : []
});
//========================================
// JOIN <ti-label-props.mjs> ti/com/ti/label/ti-label-props.mjs
//========================================
Ti.Preload("ti/com/ti/label/ti-label-props.mjs", TI_PACK_EXPORTS['ti/com/ti/label/ti-label-props.mjs']);
//========================================
// JOIN <ti-label.html> ti/com/ti/label/ti-label.html
//========================================
Ti.Preload("ti/com/ti/label/ti-label.html", `<div class="ti-label"
  :class="TopClass"
  :style="TopStyle"
  @click.left="OnClick"
  @dblclick.left="OnDblClick"
  @mouseenter="OnMouseEnter"
  @mouseleave="OnMouseLeave"
  v-bind="LabelValueTip">
  <!--Hover copy indicator-->
  <div
    v-if="isHoverCopy"
      class="as-hover-copy"
      @click.left.stop="copyValueToClipboard">
      <i class="fas fa-copy"></i>
  </div>
  <!--prefix:icon-->
  <div v-if="ThePrefixIcon"
    class="as-icon at-prefix"
    :class="getHoverClass('prefixIcon')"
    @click.left="OnClickPrefixIcon">
    <ti-icon :value="ThePrefixIcon"/>
  </div>
  <!--prefix:text-->
  <div v-if="ThePrefixText" 
    class="as-text at-prefix"
    :class="getHoverClass('prefixText')"
    @click.left="OnClickPrefixText">
    <span>{{ThePrefixText|i18nTxt}}</span>
  </div>
  <!--Text-->
  <div class="as-value" ref="value"
    :style="ValueStyle"
    @click.left="OnClickValue">
    <!--Link-->
    <template v-if="TheHref || valueClickable">
      <a
        v-if="editable"
          class="as-value-edit"
          :title="'i18n:edit'|i18n"
          @click.left.prevent="OnDblClick">
            <i class="far fa-edit"></i></a>
      <a 
        :href="TheHref"
        :target="newTab ? '_blank' : undefined"
        @click.left="OnClickLink">{{myDisplayText}}</a>
    </template>
    <!--Normal Text-->
    <span v-else>{{myDisplayText}}</span>
  </div>
  <!--suffix:text-->
  <div v-if="TheSuffixText"
    class="as-text at-suffix"
    :class="getHoverClass('suffixText')"
    @click.left="OnClickSuffixIcon">
    <span>{{TheSuffixText|i18nTxt}}</span>
  </div>
  <!--suffix:icon-->
  <div v-if="TheSuffixIcon"
    class="as-icon at-suffix"
    :class="getHoverClass('suffixIcon')"
    @click.left="OnClickSuffixIcon">
    <ti-icon :value="TheSuffixIcon"/>
  </div>
</div>`);
//========================================
// JOIN <ti-label.mjs> ti/com/ti/label/ti-label.mjs
//========================================
Ti.Preload("ti/com/ti/label/ti-label.mjs", TI_PACK_EXPORTS['ti/com/ti/label/ti-label.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/label/_com.json
//========================================
Ti.Preload("ti/com/ti/label/_com.json", {
  "name" : "ti-label",
  "globally" : true,
  "template" : "./ti-label.html",
  "props" : "./ti-label-props.mjs",
  "mixins" : ["./ti-label.mjs"]
});
//========================================
// JOIN <_hmaker.json> ti/com/ti/label/_hmaker.json
//========================================
Ti.Preload("ti/com/ti/label/_hmaker.json", {
  "icon"   : "im-tag",
  "title"  : "i18n:com-label",
  "scenes" : ["desktop", "tablet", "phone"],
  "editComType" : "ti-form",
  "editComConf" : {
    "mode" : "tab",
    "data" : "=comConf",
    "fields" : [{
        "title": "i18n:hmk-aspect",
        "fields": [{
            "title": "i18n:hmk-placeholder",
            "name": "placeholder",
            "comType": "ti-input"
          }, {
            "title": "i18n:hmk-autoI18n",
            "name": "autoI18n",
            "type": "Boolean",
            "defaultAs": true,
            "comType": "ti-toggle"
          }, {
            "title": "i18n:hmk-prefixIcon",
            "name": "prefixIcon",
            "comType": "ti-input-icon"
          }, {
            "title": "i18n:hmk-prefixText",
            "name": "prefixText",
            "comType": "ti-input"
          }, {
            "title": "i18n:hmk-suffixIcon",
            "name": "suffixIcon",
            "comType": "ti-input-icon"
          }, {
            "title": "i18n:hmk-suffixText",
            "name": "suffixText",
            "comType": "ti-input"
          }]
      }, {
        "title": "i18n:hmk-behavior",
        "fields": [{
            "title": "i18n:hmk-href",
            "name": "href",
            "comType": "ti-input"
          }, {
            "title": "i18n:hmk-newTab",
            "name": "newTab",
            "type": "Boolean",
            "hidden" : {
              "href": "NoEmpty"
            },
            "comType": "ti-toggle"
          }, {
            "title": "i18n:hmk-breakLine",
            "name": "breakLine",
            "type": "Boolean",
            "defaultAs": true,
            "comType": "ti-toggle"
          }, {
            "title": "i18n:hmk-editable",
            "name": "editable",
            "type": "Boolean",
            "comType": "ti-toggle"
          }]
      }, {
      "title": "i18n:hmk-data",
      "fields": [{
          "title": "i18n:hmk-value",
          "name": "value",
          "comType": "ti-input"
        }, {
          "title": "i18n:hmk-dict",
          "name": "dict",
          "comType": "ti-input"
        }, {
          "title": "i18n:hmk-trimed",
          "name": "trimed",
          "type": "Boolean",
          "comType": "ti-toggle"
        }, {
          "title": "i18n:hmk-format",
          "name": "format",
          "comType": "ti-input",
          "comConf": {
            "autoJsValue": true
          }
        }]
    }, {
      "title": "i18n:hmk-measure",
      "fields": [{
          "title": "i18n:hmk-width",
          "name": "width",
          "comType": "ti-input"
        }, {
          "title": "i18n:hmk-height",
          "name": "height",
          "comType": "ti-input"
        }, {
          "title": "i18n:hmk-valueMaxWidth",
          "name": "valueMaxWidth",
          "comType": "ti-input"
        }]
    }]
  }
});
//========================================
// JOIN <ti-lbs-map-baidu.html> ti/com/ti/lbs/map/baidu/ti-lbs-map-baidu.html
//========================================
Ti.Preload("ti/com/ti/lbs/map/baidu/ti-lbs-map-baidu.html", `<div class="ti-lbs-map by-baidu ti-fill-parent">
  <div ref="arena" class="map-arena ti-fill-parent"></div>
</div>`);
//========================================
// JOIN <ti-lbs-map-baidu.mjs> ti/com/ti/lbs/map/baidu/ti-lbs-map-baidu.mjs
//========================================
Ti.Preload("ti/com/ti/lbs/map/baidu/ti-lbs-map-baidu.mjs", TI_PACK_EXPORTS['ti/com/ti/lbs/map/baidu/ti-lbs-map-baidu.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/lbs/map/baidu/_com.json
//========================================
Ti.Preload("ti/com/ti/lbs/map/baidu/_com.json", {
  "name" : "ti-lbs-map-baidu",
  "globally" : true,
  "template" : "./ti-lbs-map-baidu.html",
  "mixins"   : ["./ti-lbs-map-baidu.mjs"],
  "components" : []
});
//========================================
// JOIN <ti-lbs-map-google.html> ti/com/ti/lbs/map/google/ti-lbs-map-google.html
//========================================
Ti.Preload("ti/com/ti/lbs/map/google/ti-lbs-map-google.html", `<div class="ti-lbs-map by-google ti-fill-parent">
  <div ref="arena" class="map-arena ti-fill-parent"></div>
  <!--div style="background:#FF0;position: absolute; bottom:0;right:0;"
    @click="redrawLayers()">Redraw</div-->
</div>`);
//========================================
// JOIN <ti-lbs-map-google.mjs> ti/com/ti/lbs/map/google/ti-lbs-map-google.mjs
//========================================
Ti.Preload("ti/com/ti/lbs/map/google/ti-lbs-map-google.mjs", TI_PACK_EXPORTS['ti/com/ti/lbs/map/google/ti-lbs-map-google.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/lbs/map/google/_com.json
//========================================
Ti.Preload("ti/com/ti/lbs/map/google/_com.json", {
  "name" : "ti-lbs-map-google",
  "globally" : true,
  "template" : "./ti-lbs-map-google.html",
  "mixins"   : ["./ti-lbs-map-google.mjs"],
  "components" : []
});
//========================================
// JOIN <ti-lbs-map-tencent.html> ti/com/ti/lbs/map/tencent/ti-lbs-map-tencent.html
//========================================
Ti.Preload("ti/com/ti/lbs/map/tencent/ti-lbs-map-tencent.html", `<div class="ti-lbs-map by-tencent ti-fill-parent">
  <div ref="arena" class="map-arena ti-fill-parent"></div>
</div>`);
//========================================
// JOIN <ti-lbs-map-tencent.mjs> ti/com/ti/lbs/map/tencent/ti-lbs-map-tencent.mjs
//========================================
Ti.Preload("ti/com/ti/lbs/map/tencent/ti-lbs-map-tencent.mjs", TI_PACK_EXPORTS['ti/com/ti/lbs/map/tencent/ti-lbs-map-tencent.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/lbs/map/tencent/_com.json
//========================================
Ti.Preload("ti/com/ti/lbs/map/tencent/_com.json", {
  "name" : "ti-lbs-map-tencent",
  "globally" : true,
  "template" : "./ti-lbs-map-tencent.html",
  "mixins"   : ["./ti-lbs-map-tencent.mjs"],
  "components" : []
});
//========================================
// JOIN <ti-lbs-map.html> ti/com/ti/lbs/map/ti-lbs-map.html
//========================================
Ti.Preload("ti/com/ti/lbs/map/ti-lbs-map.html", `<div class="ti-lbs-map" 
  :class="TopClass"
  :style="TopStyle">
  <!--
    Show Map
  -->
  <div 
    v-if="apiLoaded"
      class="map-con">
      <!--
        Map Main
      -->
      <div class="as-main">
        <component 
          :is="MapComType"
            v-bind="MapComConf"
            @center:change="OnCenterChange"
            @zoom:change="OnZoomChange"/>
      </div>
      <!--
        Wait cooling
      -->
      <div
        v-if="CoolingIcon"
          class="as-wait-cooling"><TiIcon :value="CoolingIcon"/></div>
      <!--
        Map Controls
      -->
      <div class="as-controls">
        <TiActionbar v-bind="MapActionBar"/>
      </div>
      <!--
        Map Info
      -->
      <div
        v-if="infoBar && MapCenter"
          class="as-info">
          <ul class="as-laln">
            <li><span>{{'lat'|i18n}}:</span><em>{{MapCenter.lat|float(8)}}</em></li>
            <li><span>{{'lng'|i18n}}:</span><em>{{MapCenter.lng|float(8)}}</em></li>
            <li><span>ZOOM</span><em>{{myZoom || zoom}}</em></li>
          </ul>
      </div> <!--as-info-->
  </div>
  <!--
    Show Loading 
  -->
  <ti-loading
    v-else
      class="as-big-mask"/>
</div>`);
//========================================
// JOIN <ti-lbs-map.mjs> ti/com/ti/lbs/map/ti-lbs-map.mjs
//========================================
Ti.Preload("ti/com/ti/lbs/map/ti-lbs-map.mjs", TI_PACK_EXPORTS['ti/com/ti/lbs/map/ti-lbs-map.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/lbs/map/_com.json
//========================================
Ti.Preload("ti/com/ti/lbs/map/_com.json", {
  "name" : "ti-lbs-map",
  "globally" : true,
  "template" : "./ti-lbs-map.html",
  "mixins"   : ["./ti-lbs-map.mjs"],
  "components" : [
    "./tencent/_com.json",
    "./baidu/_com.json",
    "./google/_com.json",
    "@com:ti/button"
  ]
});
//========================================
// JOIN <ti-lbs-route.html> ti/com/ti/lbs/route/ti-lbs-route.html
//========================================
Ti.Preload("ti/com/ti/lbs/route/ti-lbs-route.html", `<div class="ti-lbs-route" 
  :class="TopClass"
  :style="TopStyle">
  <!--Map-->
  <TiLbsMap
    v-bind="this"
    :gesture-handling="TheGestureHandling"
    :value="ValueItems"
    mode="path"
    @change:fullscreen="OnFullscreenChange"/>
  <!--
    Edit Panel
  -->
  <template v-if="editable">
    <!--
      Route List
    -->
    <transition name="ti-trans-fade">
      <div
        v-if="isShowList"
          class="as-list">
            <TiList
              :data="ValueItems"
              v-bind="ListConf"
              blank-class="as-big"
              :current-id="myCurrentId"
              :checked-ids="myCheckedIds"
              :puppet-mode="true"
              @select="OnListSelect"
              @open="OnListOpen"/>
      </div>
    </transition>
    <!--
      Actions
    -->
    <div class="as-actions">
      <TiButton
        :setup="ActionButtons"/>
    </div>
  </template>
</div>`);
//========================================
// JOIN <ti-lbs-route.mjs> ti/com/ti/lbs/route/ti-lbs-route.mjs
//========================================
Ti.Preload("ti/com/ti/lbs/route/ti-lbs-route.mjs", TI_PACK_EXPORTS['ti/com/ti/lbs/route/ti-lbs-route.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/lbs/route/_com.json
//========================================
Ti.Preload("ti/com/ti/lbs/route/_com.json", {
  "name" : "ti-lbs-route",
  "globally" : true,
  "template" : "./ti-lbs-route.html",
  "mixins"   : ["./ti-lbs-route.mjs"],
  "components" : [
    "@com:ti/lbs/map"]
});
//========================================
// JOIN <list-row.html> ti/com/ti/list/com/list-row/list-row.html
//========================================
Ti.Preload("ti/com/ti/list/com/list-row/list-row.html", `<div class="list-row"
  :class="TopClass">
  <!--
    Group title
  -->
  <template v-if="asGroupTitle">
    <ti-icon
        v-if="hasRealIcon"
          class="row-icon"
          :value="icon"/>
    <div class="row-con">
      <component 
        v-for="(it, index) in myDisplayItems"
          :class="'item-'+index"
          :key="it.uniqKey"
          :is="it.comType"
          v-bind="it.comConf"/>
    </div>
  </template>
  <!--
    Normal items
  -->
  <template v-else>
    <!--current actived row indicator-->
    <div class="row-actived-indicator"></div>
    <!--Changed Item-->
    <div 
      v-if="isChanged"
        class="row-changed-indicator"></div>
    <!-- Indents -->
    <div v-for="n in indent"
    class="row-indent"></div>
    <!--ICON: Handler-->
    <template v-if="icon">
      <ti-icon
        v-if="hasRealIcon"
          class="row-icon"
          :value="icon"
          @click.native.left.stop="OnClickIcon"/>
      <div v-else
        class="row-icon"></div>
    </template>
    <!--ICON: Checker-->
    <ti-icon v-if="checkable"
        class="row-checker"
        :value="theCheckIcon"
        @click.native.left.stop="OnClickChecker"/>
    <!--Row Number-->
    <div 
      v-if="hasRowNumber"
        class="row-number">{{RowNumber}}</div>
    <!-- Content -->
    <div
      class="row-con"
      @click.left="OnClickRow"
      @dblclick.left="OnDblClickRow"
      v-ti-activable>
      <component 
        v-for="(it, index) in myDisplayItems"
          :class="'item-'+index"
          :key="it.uniqKey"
          :is="it.comType"
          v-bind="it.comConf"
          @change="onItemChanged(it, $event)"/>
    </div>
  </template>
</div>`);
//========================================
// JOIN <list-row.mjs> ti/com/ti/list/com/list-row/list-row.mjs
//========================================
Ti.Preload("ti/com/ti/list/com/list-row/list-row.mjs", TI_PACK_EXPORTS['ti/com/ti/list/com/list-row/list-row.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/list/com/list-row/_com.json
//========================================
Ti.Preload("ti/com/ti/list/com/list-row/_com.json", {
  "name" : "list-row",
  "globally" : false,
  "template" : "./list-row.html",
  "methods"  : "@com:ti/support/field_display.mjs",
  "mixins" : [
    "@com:ti/support/list_item_mixins.mjs",
    "./list-row.mjs"]
});
//========================================
// JOIN <ti-list-props.mjs> ti/com/ti/list/ti-list-props.mjs
//========================================
Ti.Preload("ti/com/ti/list/ti-list-props.mjs", TI_PACK_EXPORTS['ti/com/ti/list/ti-list-props.mjs']);
//========================================
// JOIN <ti-list.html> ti/com/ti/list/ti-list.html
//========================================
Ti.Preload("ti/com/ti/list/ti-list.html", `<div class="ti-list"
  :class="TopClass"
  @click="OnClickTop"
  v-ti-activable>
  <!--
    Pending
  -->
  <ti-loading 
    v-if="isDataPending"
      class="nil-data"
      v-bind="loadingAs"/>
  <!--
    Blank
  -->
  <ti-loading 
    v-else-if="isDataEmpty"
      class="nil-data"
      v-bind="BlankLoadingConf"/>
  <!--
    Show Items
  -->
  <template v-else>
    <list-row
      v-for="row in TheData"
        :class="row.className"
        :key="row.id"
        :row-id="row.id"
        :index="row.index"
        :displayIndex="row.displayIndex"
        :icon="row.icon"
        :indent="row.indent"
        :data="row.rawData"
        :display="DisplayItems"
        :current-id="theCurrentId"
        :checked-ids="theCheckedIds"
        :changed-id="changedId"
        :checkable="checkable"
        :selectable="selectable"
        :openable="openable"
        :rowToggleKey="TheRowToggleKey"
        :rowNumberBase="rowNumberBase"
        
        :asGroupTitle="row.asGroupTitle"
        :groupTitleDisplay="RowGroupTitleDisplay"

        :className="itemClassName"
        @checker="OnRowCheckerClick"
        @select="OnRowSelect"
        @open="OnRowOpen"/>
  </template>
</div>`);
//========================================
// JOIN <ti-list.mjs> ti/com/ti/list/ti-list.mjs
//========================================
Ti.Preload("ti/com/ti/list/ti-list.mjs", TI_PACK_EXPORTS['ti/com/ti/list/ti-list.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/list/_com.json
//========================================
Ti.Preload("ti/com/ti/list/_com.json", {
  "name": "ti-list",
  "globally": true,
  "template": "./ti-list.html",
  "props": [
    "@com:ti/support/list_props.mjs",
    "./ti-list-props.mjs"
  ],
  "methods": "@com:ti/support/field_display.mjs",
  "mixins": [
    "@com:ti/support/list_mixins.mjs",
    "./ti-list.mjs"
  ],
  "components": [
    "./com/list-row",
    "@com:ti/label"
  ]
});
//========================================
// JOIN <_hmaker.json> ti/com/ti/list/_hmaker.json
//========================================
Ti.Preload("ti/com/ti/list/_hmaker.json", {
  "icon"   : "im-data",
  "title"  : "i18n:com-list",
  "screen" : ["desktop", "tablet"],
  "manual" : true,
  "tutorial" : true,
  "video" : true,
  "editComType" : "ti-form",
  "editComConf" : {
    "fields" : []
  }
});
//========================================
// JOIN <ti-loading.html> ti/com/ti/loading/ti-loading.html
//========================================
Ti.Preload("ti/com/ti/loading/ti-loading.html", `<div class="ti-loading"
  :class="TopClass">
  <ti-icon class="as-icon" :value="icon"/>
  <div class="as-text">{{text|i18n}}</div>
</div>`);
//========================================
// JOIN <ti-loading.mjs> ti/com/ti/loading/ti-loading.mjs
//========================================
Ti.Preload("ti/com/ti/loading/ti-loading.mjs", TI_PACK_EXPORTS['ti/com/ti/loading/ti-loading.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/loading/_com.json
//========================================
Ti.Preload("ti/com/ti/loading/_com.json", {
  "name" : "ti-loading",
  "globally" : true,
  "template" : "./ti-loading.html",
  "mixins" : ["./ti-loading.mjs"]
});
//========================================
// JOIN <ti-logging.html> ti/com/ti/logging/ti-logging.html
//========================================
Ti.Preload("ti/com/ti/logging/ti-logging.html", `<div class="ti-logging"
  :class="TopClass"
  :style="TopStyle">
  <pre ref="pre"><div 
    v-for="(line, index) in lines"
      :data-index="index"
      >{{line || '&nbsp;'}}</div></pre>    
</div>`);
//========================================
// JOIN <ti-logging.mjs> ti/com/ti/logging/ti-logging.mjs
//========================================
Ti.Preload("ti/com/ti/logging/ti-logging.mjs", TI_PACK_EXPORTS['ti/com/ti/logging/ti-logging.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/logging/_com.json
//========================================
Ti.Preload("ti/com/ti/logging/_com.json", {
  "name" : "ti-logging",
  "globally" : true,
  "template" : "./ti-logging.html",
  "mixins" : ["./ti-logging.mjs"]
});
//========================================
// JOIN <ti-media-audio.html> ti/com/ti/media/audio/ti-media-audio.html
//========================================
Ti.Preload("ti/com/ti/media/audio/ti-media-audio.html", `<div class="ti-media-audio"
    :class="TopClass"
    :style="TopStyle"
    v-drag-off>
    <!--
      Audio
    -->
    <audio ref="audio"
      :src="src"
      controls
      @loadstart="OnLoadsStart"
      @loadedmetadata="OnLoadedMetaData"
      @canplay="OnCanPlay"
      @durationchange="OnDurationChange"
      @loadeddata="OnLoadedData"
      @ended="OnEnded"
      @play="OnPlay"
      @pause="OnPause"
      @seeked="OnSeeked"
      @seeking="OnSeeking"
      @timeupdate="OnTimeUpdate"
      @volumechange="OnVolumeChange"
      @stalled="OnStalled"
      @waiting="OnWaiting"/>
    <!--
      Display wrapper
    -->
    <div class="ti-media-control" 
      :class="ControlClass"
      :style="ControlStyle">
      <!--
        Play Icon
      -->
      <div class="as-play-icon"
        @click.left="togglePlay">
        <TiIcon :value="PlayIcon"/>
      </div>
      <!--
        Slide bar
      -->
      <TiSlideBar
        class="as-timeline hdl-auto-hide hdl-md bar-sm"
        v-bind="TimelineConfig"
        :value="currentTime"
        :max-value="duration"
        :mark-begin="bufferedBegin"
        :mark-end="bufferedEnd"
        @drag:begin="OnTimelineDragBegin"
        @drag:end="OnTimelineDragEnd"
        @change="OnTimelineChange"/>
        <!---
          Volume button
        -->
        <div class="as-volume abc">
          <TiSlideBar
            class="as-volume-bar hdl-lg bar-md"
            v-bind="VolumeConfig"
            :value="volume"
            @change="OnVolumeBarChange"/>
          <div class="as-volume-icon"
            @click.left="toggleMuted">
            <TiIcon :value="VolumeIcon"/>
          </div>
        </div>
    </div>
</div>`);
//========================================
// JOIN <ti-media-audio.mjs> ti/com/ti/media/audio/ti-media-audio.mjs
//========================================
Ti.Preload("ti/com/ti/media/audio/ti-media-audio.mjs", TI_PACK_EXPORTS['ti/com/ti/media/audio/ti-media-audio.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/media/audio/_com.json
//========================================
Ti.Preload("ti/com/ti/media/audio/_com.json", {
  "name" : "ti-media-audio",
  "globally" : true,
  "template" : "./ti-media-audio.html",
  "mixins" : ["./ti-media-audio.mjs"],
  "components" : [
    "@com:ti/slide/bar"
  ]
});
//========================================
// JOIN <ti-media-binary.html> ti/com/ti/media/binary/ti-media-binary.html
//========================================
Ti.Preload("ti/com/ti/media/binary/ti-media-binary.html", `<div class="ti-media-binary">
  <div class="tob-icon">
    <ti-icon v-if="icon" :value="icon" size="1.28rem"/>
  </div>
  <div class="tob-title">
    {{MediaTitle}}
  </div>
  <div 
    v-if="download"
      class="tob-actions">
      <a :href="src">
        <ti-icon value="download"/>
        <span>{{'download'|i18n}}</span>
      </a>
  </div>
</div>`);
//========================================
// JOIN <ti-media-binary.mjs> ti/com/ti/media/binary/ti-media-binary.mjs
//========================================
Ti.Preload("ti/com/ti/media/binary/ti-media-binary.mjs", TI_PACK_EXPORTS['ti/com/ti/media/binary/ti-media-binary.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/media/binary/_com.json
//========================================
Ti.Preload("ti/com/ti/media/binary/_com.json", {
  "name" : "ti-media-binary",
  "globally" : true,
  "template" : "./ti-media-binary.html",
  "mixins" : ["./ti-media-binary.mjs"]
});
//========================================
// JOIN <ti-media-image.html> ti/com/ti/media/image/ti-media-image.html
//========================================
Ti.Preload("ti/com/ti/media/image/ti-media-image.html", `<div class="ti-media-image" 
     :class="topClass"
     :style="topStyle"
     :fit-mode="fitMode"
     v-drag-off>
  <div class="as-con" ref="con">
    <img ref="the_image"
      :src="src"
      :style="theImageStyle"
      @load="onImageLoaded"
      @dblclick.stop="onToggleImageFitMode">
  </div>
</div>`);
//========================================
// JOIN <ti-media-image.mjs> ti/com/ti/media/image/ti-media-image.mjs
//========================================
Ti.Preload("ti/com/ti/media/image/ti-media-image.mjs", TI_PACK_EXPORTS['ti/com/ti/media/image/ti-media-image.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/media/image/_com.json
//========================================
Ti.Preload("ti/com/ti/media/image/_com.json", {
  "name" : "ti-media-image",
  "globally" : true,
  "template" : "./ti-media-image.html",
  "mixins" : ["./ti-media-image.mjs"]
});
//========================================
// JOIN <ti-media-video.html> ti/com/ti/media/video/ti-media-video.html
//========================================
Ti.Preload("ti/com/ti/media/video/ti-media-video.html", `<div class="ti-media-video"
    :class="topClass"
    :style="topStyle"
    v-drag-off>
    <video ref="the_video"
      :src="src"
      controls
      @loadeddata="onVideoLoaded"/>
    <div class="tov-loading" v-if="loading">
      <ti-loading/>
    </div>
</div>`);
//========================================
// JOIN <ti-media-video.mjs> ti/com/ti/media/video/ti-media-video.mjs
//========================================
Ti.Preload("ti/com/ti/media/video/ti-media-video.mjs", TI_PACK_EXPORTS['ti/com/ti/media/video/ti-media-video.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/media/video/_com.json
//========================================
Ti.Preload("ti/com/ti/media/video/_com.json", {
  "name" : "ti-media-video",
  "globally" : true,
  "template" : "./ti-media-video.html",
  "mixins" : ["./ti-media-video.mjs"]
});
//========================================
// JOIN <ti-month.html> ti/com/ti/month/ti-month.html
//========================================
Ti.Preload("ti/com/ti/month/ti-month.html", `<div class="ti-col-data as-month" 
  :class="topClass" 
  :style="topStyle">
  <ti-list v-for="list in theListGroup"
    :key="list.key"
    :data="list.data"
    :display="'text'"
    :current-id="list.currentId"
    :cancelable="false"
    @select="onListSelected(list.key, $event)"/>
</div>`);
//========================================
// JOIN <ti-month.mjs> ti/com/ti/month/ti-month.mjs
//========================================
Ti.Preload("ti/com/ti/month/ti-month.mjs", TI_PACK_EXPORTS['ti/com/ti/month/ti-month.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/month/_com.json
//========================================
Ti.Preload("ti/com/ti/month/_com.json", {
  "name" : "ti-month",
  "globally" : true,
  "template" : "./ti-month.html",
  "mixins" : ["./ti-month.mjs"],
  "components" : ["@com:ti/list"]
});
//========================================
// JOIN <ti-obj-edit-tree.html> ti/com/ti/obj/edit-tree/ti-obj-edit-tree.html
//========================================
Ti.Preload("ti/com/ti/obj/edit-tree/ti-obj-edit-tree.html", `<TiGui
  :class="className"
  :layout="GUILayout"
  :schema="GUISchema"
  :canLoading="true"
  :loading="loading"
  :loadingAs="loadingAs"
  @tree::select="OnSelectTreeNode"
  @actions::do:create="OnCreateTreeNode"
  @actions::do:remove="removeTreeNode(myCurrentId)"
  @actions::do:move:up="OnMoveUpTreeNode"
  @actions::do:move:down="OnMoveDownTreeNode"
  @actions::do:move:left="OnMoveLeftTreeNode"
  @actions::do:move:right="OnMoveRightTreeNode"
  @node::field:change="OnMetaFieldChange"
  @node::change="OnMetaChange"
  />`);
//========================================
// JOIN <ti-obj-edit-tree.mjs> ti/com/ti/obj/edit-tree/ti-obj-edit-tree.mjs
//========================================
Ti.Preload("ti/com/ti/obj/edit-tree/ti-obj-edit-tree.mjs", TI_PACK_EXPORTS['ti/com/ti/obj/edit-tree/ti-obj-edit-tree.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/obj/edit-tree/_com.json
//========================================
Ti.Preload("ti/com/ti/obj/edit-tree/_com.json", {
  "name" : "ti-obj-edit-tree",
  "globally" : true,
  "template" : "./ti-obj-edit-tree.html",
  "mixins" : ["./ti-obj-edit-tree.mjs"]
});
//========================================
// JOIN <ti-obj-pair.html> ti/com/ti/obj/pair/ti-obj-pair.html
//========================================
Ti.Preload("ti/com/ti/obj/pair/ti-obj-pair.html", `<div class="ti-obj-pair full-field" 
    :class="TopClass">
  <!--
    Empty
  -->
  <ti-loading
    v-if="isEmpty && autoShowBlank"
      class="as-small-tip"
      v-bind="blankAs"/>
  <!--
    Show Pair
  -->
  <template v-else>
    <table cellpadding="0">
      <thead v-if="showHead">
        <tr>
          <th class="as-name" >{{nameText  | i18n}}</th>
          <th class="as-value">{{valueText | i18n}}</th>
        </tr>
      </thead>
      <tbody>
        <tr
          v-for="pa in myPairList">
            <!--
              Name
            -->
            <td class="as-name"  width="1%">
              <span>{{pa.title || pa.name}}</span>
            </td>
            <!--
              Value
            -->
            <td class="as-value" width="99%">
              <!--
                Customized display component
              -->
              <component
                v-if="pa.comType"
                  :is="pa.comType"
                  v-bind="pa.comConf"
                  :value="pa.value"
                  @change="OnPairComChange($event, pa)"/>
              <!--
                Value editable
              --> 
              <input 
                v-else-if="canEditValue"
                  :value="pa.value"
                  @change="OnPairValueChange($event, pa)"/>
              <!--
                Just show value
              -->
              <span
                v-else>{{pa.text || pa.value}}</span>
              <!--
                Move icon
              -->
              <div
                v-if="canEditValue && multiLines"
                  class="as-more"
                  @click.left="OnClickPairMore(pa)">
                    <b><i class="zmdi zmdi-edit"></i></b></div>
            </td>
        </tr>
      </tbody>
    </table>
  </template>
</div>`);
//========================================
// JOIN <ti-obj-pair.mjs> ti/com/ti/obj/pair/ti-obj-pair.mjs
//========================================
Ti.Preload("ti/com/ti/obj/pair/ti-obj-pair.mjs", TI_PACK_EXPORTS['ti/com/ti/obj/pair/ti-obj-pair.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/obj/pair/_com.json
//========================================
Ti.Preload("ti/com/ti/obj/pair/_com.json", {
  "name" : "ti-obj-pair",
  "globally" : true,
  "template" : "./ti-obj-pair.html",
  "mixins" : ["./ti-obj-pair.mjs"]
});
//========================================
// JOIN <ti-obj-thumb.html> ti/com/ti/obj/thumb/ti-obj-thumb.html
//========================================
Ti.Preload("ti/com/ti/obj/thumb/ti-obj-thumb.html", `<div class="ti-obj-thumb" 
    :class="TopClass">
  <!--
    Preview && Process Bar
  -->
  <header>
    <!--Preview Part-->
    <div class="as-preview" :style="previewStyle">
      <!-- Local Image -->
      <template v-if="isLocalImage">
        <img ref="localImage" is-local-file>
      </template>
      <!-- Local File -->
      <template v-else-if="isLocalFile">
        <ti-icon :value="LocalFileIcon"/>
      </template>
      <!-- Remote Image -->
      <template v-else-if="'image'==preview.type">
        <img :src="preview.value">
      </template>
      <!-- Icon -->
      <template v-else>
        <ti-icon :value="preview"/>
      </template>
      <!--Badge-->
      <div
        v-for="bdg in ThumbBadges"
          :class="bdg.className"
          :style="bdg.style">
          <!--Icon-->
          <ti-icon
            v-if="'icon' == bdg.type"
              :value="bdg.value"/>
          <!--Text-->
          <span
            v-else-if="'text' == bdg.type"
              :title="bdg.value">{{bdg.value}}</span>
      </div>
    </div>
    <!--Process bar-->
    <div v-if="isShowProgress"
      class="as-progress ti-progress-bar">
      <span class="bar-tip">{{ProgressTip}}</span>
      <b class="bar-outer">
        <em class="bar-inner" 
            :style="ProgressStyle"></em>
      </b>
    </div>
  </header>
  <!--
    Status Mask
  -->
  <section class="as-status" v-if="status">
    <ti-icon 
      :value="status"
      font-size="2em"
      width="3em"
      height="3em"/>
  </section>
  <!--
    Footer for item title text
  -->
  <footer v-if="showFooter">
    <div class="as-title">
      <a v-if="hasHref"
        :href="TheHref"
        @click.left.prevent="OnClickTitle">{{TheTitle}}</a>
      <span v-else>{{TheTitle}}</span>
    </div>
  </footer>
  <!--
    Remove Icon
  -->
  <div 
    v-if="removeIcon"
      class="as-remove"
      @click.left.stop="OnRemove">
      <ti-icon :value="removeIcon"/>
  </div>
</div>`);
//========================================
// JOIN <ti-obj-thumb.mjs> ti/com/ti/obj/thumb/ti-obj-thumb.mjs
//========================================
Ti.Preload("ti/com/ti/obj/thumb/ti-obj-thumb.mjs", TI_PACK_EXPORTS['ti/com/ti/obj/thumb/ti-obj-thumb.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/obj/thumb/_com.json
//========================================
Ti.Preload("ti/com/ti/obj/thumb/_com.json", {
  "name" : "ti-obj-thumb",
  "globally" : true,
  "template" : "./ti-obj-thumb.html",
  "mixins" : ["./ti-obj-thumb.mjs"]
});
//========================================
// JOIN <ti-obj-tile.html> ti/com/ti/obj/tile/ti-obj-tile.html
//========================================
Ti.Preload("ti/com/ti/obj/tile/ti-obj-tile.html", `<div class="ti-obj-tile" 
    :class="topClass">
  <!--
    Preview Image
  -->
  <div class="as-preview">
    <a v-if="hasHref"
      :href="href"
      @click="onClick"
      ><ti-icon 
        :value="preview"
        :height="previewHeight"/></a>
    <ti-icon v-else
      :value="preview"
      :height="previewHeight"/>
  </div>
  <!--
    Title
  -->
  <div class="as-title">
    <a v-if="hasHref"
      :href="href"
      @click="onClick"
    >{{title}}</a>
    <!--
      Without Href
    -->
    <span v-else>{{title}}</span>
  </div>
  <!--
    Footer
  -->
  <div v-if="hasBrief"
    class="as-brief">
    <span>{{brief}}</span>
  </div>
</div>`);
//========================================
// JOIN <ti-obj-tile.mjs> ti/com/ti/obj/tile/ti-obj-tile.mjs
//========================================
Ti.Preload("ti/com/ti/obj/tile/ti-obj-tile.mjs", TI_PACK_EXPORTS['ti/com/ti/obj/tile/ti-obj-tile.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/obj/tile/_com.json
//========================================
Ti.Preload("ti/com/ti/obj/tile/_com.json", {
  "name" : "ti-obj-tile",
  "globally" : true,
  "template" : "./ti-obj-tile.html",
  "mixins" : ["./ti-obj-tile.mjs"]
});
//========================================
// JOIN <ti-paging-button.html> ti/com/ti/paging/button/ti-paging-button.html
//========================================
Ti.Preload("ti/com/ti/paging/button/ti-paging-button.html", `<div class="ti-paging-button"
  :class="TopClass">
  <div class="as-pg-btn is-prev" @click.left="JumpTo(PN-1)">
    <i class="im im-angle-left"></i>
    <span>{{'i18n:paging-prev'|i18n}}</span>
  </div>
  <template 
    v-for="btn of BtnList">
      <div
        v-if="btn.ellipsis"
          class="as-ellipsis">
          <span>...</span></div>
      <div
        v-else
          class="as-pg-btn"
          :class="btn.className"
          @click.left="JumpTo(btn.value)">
          <span>{{btn.value}}</span></div>
  </template>
  <div class="as-pg-btn is-next" @click.left="JumpTo(PN+1)">
    <span>{{'i18n:paging-next'|i18n}}</span>
    <i class="im im-angle-right"></i>
  </div>
</div>`);
//========================================
// JOIN <ti-paging-button.mjs> ti/com/ti/paging/button/ti-paging-button.mjs
//========================================
Ti.Preload("ti/com/ti/paging/button/ti-paging-button.mjs", TI_PACK_EXPORTS['ti/com/ti/paging/button/ti-paging-button.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/paging/button/_com.json
//========================================
Ti.Preload("ti/com/ti/paging/button/_com.json", {
  "name" : "ti-paging-button",
  "globally" : true,
  "template" : "./ti-paging-button.html",
  "mixins" : [
    "@com:ti/paging/support/ti-paging-mixins.mjs",
    "./ti-paging-button.mjs"]
});
//========================================
// JOIN <ti-paging-jumper.html> ti/com/ti/paging/jumper/ti-paging-jumper.html
//========================================
Ti.Preload("ti/com/ti/paging/jumper/ti-paging-jumper.html", `<div class="ti-paging-jumper"
  :class="TopClass">
  <div 
    class="pj-btn"
    :class="getBtnClass(1)"
    @click="OnJumpTo(1)">
      <ti-icon value="zmdi-skip-previous"/>
      <span class="it-text">{{'paging-first'|i18n}}</span></div>
  <div 
    class="pj-btn"
    :class="getBtnClass(PageValue.pn-1)"
    @click="OnJumpTo(PageValue.pn-1)">
      <ti-icon value="zmdi-chevron-left"/>
      <span class="it-text">{{'paging-prev'|i18n}}</span></div>
  <div 
    class="pj-current"
    :class="PageNumberClass"
    @click="OnClickCurrent">
    <b>{{PageValue.pn}}</b>
  </div>
  <div 
    class="pj-btn"
    :class="getBtnClass(PageValue.pn+1)"
    @click="OnJumpTo(PageValue.pn+1)">
      <span class="it-text">{{'paging-next'|i18n}}</span>
      <ti-icon value="zmdi-chevron-right"/></div>
  <div 
    class="pj-btn"
    :class="getBtnClass(PageValue.pgc)"
    @click="OnJumpTo(PageValue.pgc)">
      <span class="it-text">{{'paging-last'|i18n}}</span>
      <ti-icon value="zmdi-skip-next"/></div>
  <div
    v-if="hasValue"
      class="pj-sum"
      :class="SumClass"
      @click="OnClickSum">{{'paging-sum'|i18n(PageValue)}}</div>
</div>`);
//========================================
// JOIN <ti-paging-jumper.mjs> ti/com/ti/paging/jumper/ti-paging-jumper.mjs
//========================================
Ti.Preload("ti/com/ti/paging/jumper/ti-paging-jumper.mjs", TI_PACK_EXPORTS['ti/com/ti/paging/jumper/ti-paging-jumper.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/paging/jumper/_com.json
//========================================
Ti.Preload("ti/com/ti/paging/jumper/_com.json", {
  "name" : "ti-paging-jumper",
  "globally" : true,
  "template" : "./ti-paging-jumper.html",
  "mixins" : [
    "@com:ti/paging/support/ti-paging-mixins.mjs",
    "./ti-paging-jumper.mjs"
  ]
});
//========================================
// JOIN <ti-paging-mixins.mjs> ti/com/ti/paging/support/ti-paging-mixins.mjs
//========================================
Ti.Preload("ti/com/ti/paging/support/ti-paging-mixins.mjs", TI_PACK_EXPORTS['ti/com/ti/paging/support/ti-paging-mixins.mjs']);
//========================================
// JOIN <ti-progress-bar.html> ti/com/ti/progress/bar/ti-progress-bar.html
//========================================
Ti.Preload("ti/com/ti/progress/bar/ti-progress-bar.html", `<div class="ti-progress-bar"
  :class="TopClass">
  <span class="bar-tip" :style="tipStyle">{{ProgressTip}}</span>
  <b class="bar-outer" :style="barOuterStyle">
    <em class="bar-inner" 
        :style="ProgressStyle"></em>
  </b>
</div>`);
//========================================
// JOIN <ti-progress-bar.mjs> ti/com/ti/progress/bar/ti-progress-bar.mjs
//========================================
Ti.Preload("ti/com/ti/progress/bar/ti-progress-bar.mjs", TI_PACK_EXPORTS['ti/com/ti/progress/bar/ti-progress-bar.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/progress/bar/_com.json
//========================================
Ti.Preload("ti/com/ti/progress/bar/_com.json", {
  "name" : "ti-progress-bar",
  "globally" : true,
  "template" : "./ti-progress-bar.html",
  "mixins" : ["./ti-progress-bar.mjs"]
});
//========================================
// JOIN <ti-roadblock.html> ti/com/ti/roadblock/ti-roadblock.html
//========================================
Ti.Preload("ti/com/ti/roadblock/ti-roadblock.html", `<div class="ti-roadblock"
  :class="TopClass">
  <div class="as-main">
    <!--Icon-->
    <div
      v-if="icon"
        class="as-icon"><ti-icon :value="icon"/></div>
    <!--Text-->
    <div
      v-if="text"
        class="as-text"><span>{{text | i18n}}</span></div>
    <!--Links-->
    <div
      v-if="hasLinks"
        class="as-links">
        <div
          v-for="li in TheLinks"
            class="link-item">
            <a :href="li.href" :target="li.target">
              <!--Link Icon-->
              <ti-icon v-if="li.icon" class="link-icon" :value="li.icon"/>
              <!--Link Text-->
              <span v-if="li.text" class="link-text">{{li.text}}</span>
            </a>
        </div>
    </div>
  </div>
</div>`);
//========================================
// JOIN <ti-roadblock.mjs> ti/com/ti/roadblock/ti-roadblock.mjs
//========================================
Ti.Preload("ti/com/ti/roadblock/ti-roadblock.mjs", TI_PACK_EXPORTS['ti/com/ti/roadblock/ti-roadblock.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/roadblock/_com.json
//========================================
Ti.Preload("ti/com/ti/roadblock/_com.json", {
  "name" : "ti-roadblock",
  "globally" : true,
  "template" : "./ti-roadblock.html",
  "mixins"   : ["./ti-roadblock.mjs"],
  "components" : []
});
//========================================
// JOIN <ti-search-props.mjs> ti/com/ti/search/ti-search-props.mjs
//========================================
Ti.Preload("ti/com/ti/search/ti-search-props.mjs", TI_PACK_EXPORTS['ti/com/ti/search/ti-search-props.mjs']);
//========================================
// JOIN <ti-search.html> ti/com/ti/search/ti-search.html
//========================================
Ti.Preload("ti/com/ti/search/ti-search.html", `<TiGui
  :class="TopClass"
  :layout="GUILayout"
  :schema="GUISchema"
  :canLoading="true"
  :loading="loading"
  />`);
//========================================
// JOIN <ti-search.mjs> ti/com/ti/search/ti-search.mjs
//========================================
Ti.Preload("ti/com/ti/search/ti-search.mjs", TI_PACK_EXPORTS['ti/com/ti/search/ti-search.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/search/_com.json
//========================================
Ti.Preload("ti/com/ti/search/_com.json", {
  "name": "TiSearch",
  "globally": true,
  "template": "./ti-search.html",
  "props": "./ti-search-props.mjs",
  "mixins": [
    "./ti-search.mjs"
  ],
  "components": [
    "@com:ti/filterbar",
    "@com:ti/list",
    "@com:ti/table",
    "@com:ti/paging/jumper"
  ]
});
//========================================
// JOIN <ti-session-badge.html> ti/com/ti/session/badge/ti-session-badge.html
//========================================
Ti.Preload("ti/com/ti/session/badge/ti-session-badge.html", `<div class="ti-session-badge"
  :class="TopClass">
  <!--
    Has Session, show account info
  -->
  <template v-if="hasSession">
    <!--Avatar-->
    <div v-if="hasAvatar"
      class="as-avatar">
      <img :src="myAvatar"/>
    </div>
    <!--User Icon-->
    <div v-else
      class="as-icon">
      <ti-icon :value="myIcon"/>
    </div>
    <!--User Name-->
    <div class="as-name">
      <!--Name Event-->
      <a
        v-if="nameEvent"
          @click.left="$notify(nameEvent)">{{myName}}</a>
      <!--Name display-->
      <span
        v-else>{{myName}}</span>
    </div>
    <!--Links-->
    <div v-for="li in theLinks"
      class="as-link">
      <!--Icon-->
      <ti-icon
        v-if="li.icon"
          class="it-icon"
          :value="li.icon"/>
      <!--Text-->
      <a
        @click.left="OnClickLink(li, $event)"
        :href="li.href"
        :target="li.newtab?'_blank':null">{{li.title|i18n}}</a>
    </div>
  </template>
  <!--
    Without session, show login link
  -->
  <template v-else>
    <div v-if="loginIcon"
      class="as-icon">
      <ti-icon :value="loginIcon"/>
    </div>
    <div class="as-link">
      <a @click="$notify(loginEvent)">{{'login'|i18n}}</a>
    </div>
  </template>
</div>`);
//========================================
// JOIN <ti-session-badge.mjs> ti/com/ti/session/badge/ti-session-badge.mjs
//========================================
Ti.Preload("ti/com/ti/session/badge/ti-session-badge.mjs", TI_PACK_EXPORTS['ti/com/ti/session/badge/ti-session-badge.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/session/badge/_com.json
//========================================
Ti.Preload("ti/com/ti/session/badge/_com.json", {
  "name" : "ti-session-badge",
  "globally" : true,
  "template" : "./ti-session-badge.html",
  "mixins" : ["./ti-session-badge.mjs"]
});
//========================================
// JOIN <ti-sheet-emoji.html> ti/com/ti/sheet/emoji/ti-sheet-emoji.html
//========================================
Ti.Preload("ti/com/ti/sheet/emoji/ti-sheet-emoji.html", `<div  class="ti-sheet-emoji" 
  :class="TopClass"
  :style="TopStyle">
  <!--
    Candidate List
  -->
  <div class="as-list">
    <div
      v-for="li in TheDataSheet"
        class="emoji-item"
        @click.left="myValue=li.value">
        <span>{{li.value}}</span>
    </div>
  </div>
</div>`);
//========================================
// JOIN <ti-sheet-emoji.mjs> ti/com/ti/sheet/emoji/ti-sheet-emoji.mjs
//========================================
Ti.Preload("ti/com/ti/sheet/emoji/ti-sheet-emoji.mjs", TI_PACK_EXPORTS['ti/com/ti/sheet/emoji/ti-sheet-emoji.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/sheet/emoji/_com.json
//========================================
Ti.Preload("ti/com/ti/sheet/emoji/_com.json", {
  "name" : "ti-sheet-emoji",
  "globally" : true,
  "template" : "./ti-sheet-emoji.html",
  "mixins" : ["./ti-sheet-emoji.mjs"]
});
//========================================
// JOIN <ti-sheet-table.html> ti/com/ti/sheet/table/ti-sheet-table.html
//========================================
Ti.Preload("ti/com/ti/sheet/table/ti-sheet-table.html", `<div class="ti-sheet-table" :class="TopClass"
  @click.left="OnCancelCell">
  <div class="sheet-con">
    <table>
      <!--
        Column size
      -->
      <colgroup>
        <col :width="indexWidth"/>
        <col
          v-for="col in SheetDisplayColumns"
            :width="col.width"/>
      </colgroup>
      <!--
        Table head
      -->
      <thead>
        <tr>
          <th class="as-row-index">&nbsp;</th>
          <th v-for="col in SheetDisplayColumns">
            <span>{{col.title}}</span>
          </th>
        </tr>
      </thead>
      <!--
        Table body
      -->
      <tbody>
        <tr
          v-for="row in myMatrix"
            :key="row.key">
            <!--Index-->
            <td class="as-row-index">
              <div class="row-index-con">
                <span>{{row.index+1}}</span>
                <div
                  v-if="isCanRemoveRow"
                    class="as-row-delete"
                    @click.left="OnClickRowDeletor(row)">
                    <i class="zmdi zmdi-close"></i>
                </div>
              </div>
            </td>
            <!--Columns-->
            <td
              v-for="cell in row.cells"
                :key="cell.key"
                class="as-row-cell"
                :class="cell.className">
                <div
                  class="as-cell-val"
                  @click.left.stop="OnClickCell(cell)">
                  <!--Major-->
                  <span
                    v-if="cell.showMajor"
                      class="as-major">{{cell.major}}</span>
                  <span
                    v-if="cell.showSuffix"
                      class="as-suffix">{{cell.suffix}}</span>
                  <!--Suffix-->
                </div>
                <component
                  v-if="!cell.readonly && cell.actived"
                    class="as-cell-editor"
                    :is="myActivedCellComType"
                    v-bind="myActivedCellComConf"
                    @click.native.left.stop
                    @change="OnCellChange($event, cell)"/>
            </td>
        </tr>
      </tbody>
    </table>
    <!--
      Add new row
    -->
    <div 
      v-if="isCanExtendRows"
        class="as-row-creator">
        <div class="as-tip">{{'i18n:add-item' | i18n}}</div>
        <TiInputNum
          :value="myNextRowAmount"
          :step="10"
          :minValue="1"
          :maxValue="1000"
          @change="myNextRowAmount=$event"/>
        <div
          class="ti-btn"
          @click.left="OnClickRowCreator">{{'i18n:add-now' | i18n}}</div>
      </div>
  </div>
</div>`);
//========================================
// JOIN <ti-sheet-table.mjs> ti/com/ti/sheet/table/ti-sheet-table.mjs
//========================================
Ti.Preload("ti/com/ti/sheet/table/ti-sheet-table.mjs", TI_PACK_EXPORTS['ti/com/ti/sheet/table/ti-sheet-table.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/sheet/table/_com.json
//========================================
Ti.Preload("ti/com/ti/sheet/table/_com.json", {
  "name" : "ti-sheet-table",
  "globally" : true,
  "template" : "./ti-sheet-table.html",
  "mixins" : ["./ti-sheet-table.mjs"]
});
//========================================
// JOIN <ti-slide-bar.html> ti/com/ti/slide/bar/ti-slide-bar.html
//========================================
Ti.Preload("ti/com/ti/slide/bar/ti-slide-bar.html", `<div class="ti-slide-bar" 
  :class="TopClass"
  :style="TopStyle" 
  v-ti-activable
  v-ti-draggable="Draggable">
  <!--Prefix text-->
  <div 
    v-if="isShowPreifx"
      class="as-text at-prefix"
      :style="TextStyle">{{ThePrefixText}}</div>
  <!--
    Bar
  -->
  <div ref="con"
    class="as-con" 
    @click.left="OnClickBar">
    <div class="as-bar" :style="BarStyle">
      <span class="as-marker" :style="BarMarkStyle"></span>
      <span class="as-inner"  :style="BarInnerStyle"></span>
    </div>
    <div class="as-hdl" :style="HandlerStyle" ref="hdl"></div>
  </div>
  <!--Suffix text-->
  <div 
    v-if="isShowSuffix"
      class="as-text at-suffix"
      :style="TextStyle">{{TheSuffixText}}</div>
</div>`);
//========================================
// JOIN <ti-slide-bar.mjs> ti/com/ti/slide/bar/ti-slide-bar.mjs
//========================================
Ti.Preload("ti/com/ti/slide/bar/ti-slide-bar.mjs", TI_PACK_EXPORTS['ti/com/ti/slide/bar/ti-slide-bar.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/slide/bar/_com.json
//========================================
Ti.Preload("ti/com/ti/slide/bar/_com.json", {
  "name" : "ti-slide-bar",
  "globally" : true,
  "template" : "./ti-slide-bar.html",
  "mixins" : ["./ti-slide-bar.mjs"]
});
//========================================
// JOIN <ti-slide-stack.html> ti/com/ti/slide/stack/ti-slide-stack.html
//========================================
Ti.Preload("ti/com/ti/slide/stack/ti-slide-stack.html", `<div class="ti-slide-stack" 
  :class="TopClass"
  v-ti-activable
  v-ti-draggable="Draggable">
  <!--
    Main part to contains stack items
  -->
  <div class="as-main ti-fill-parent" ref="main">
    <!--
      Stack item
    -->
    <div
      v-for="it in DisplayStackItems"
        class="stack-item"
        :key="it.name"
        :style="it.barStyle"
        :item-index="it.index">
        <!--Display text-->
        <span
          class="stack-item-text"
          :style="it.textStyle">{{it.valueText}}</span>
    </div><!--// Stack item-->
  </div>
  <!--
    Legend part 
  -->
  <div class="as-legend">
    <table>
      <!--
        Stack item
      -->
      <tr
        v-for="it in DisplayStackItems"
          class="legend-item"
          :key="it.name"
          :style="it.style"
          :item-index="it.index">
          <!--Legend name-->
          <td class="legend-name"><div>
            <span class="as-dot" :style="it.legendNameStyle"></span>
            <span class="as-txt">{{it.title}}</span>
          </div></td>
          <!--Item value-->
          <td class="legend-value"><input
              :style="LegendInputStyle"
              :value="it.value"
              @change="OnItemChange(it.name, $event)"/></td>
          <!--Item Tip-->
          <td class="legend-tip">({{it.min}}-{{it.max}})</td>
      </tr><!--// Legend item-->
    </table>
  </div>
</div>`);
//========================================
// JOIN <ti-slide-stack.mjs> ti/com/ti/slide/stack/ti-slide-stack.mjs
//========================================
Ti.Preload("ti/com/ti/slide/stack/ti-slide-stack.mjs", TI_PACK_EXPORTS['ti/com/ti/slide/stack/ti-slide-stack.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/slide/stack/_com.json
//========================================
Ti.Preload("ti/com/ti/slide/stack/_com.json", {
  "name" : "ti-slide-stack",
  "globally" : true,
  "template" : "./ti-slide-stack.html",
  "mixins" : ["./ti-slide-stack.mjs"]
});
//========================================
// JOIN <field_display.mjs> ti/com/ti/support/field_display.mjs
//========================================
Ti.Preload("ti/com/ti/support/field_display.mjs", TI_PACK_EXPORTS['ti/com/ti/support/field_display.mjs']);
//========================================
// JOIN <formed_list_methods.mjs> ti/com/ti/support/formed_list_methods.mjs
//========================================
Ti.Preload("ti/com/ti/support/formed_list_methods.mjs", TI_PACK_EXPORTS['ti/com/ti/support/formed_list_methods.mjs']);
//========================================
// JOIN <list_item_mixins.mjs> ti/com/ti/support/list_item_mixins.mjs
//========================================
Ti.Preload("ti/com/ti/support/list_item_mixins.mjs", TI_PACK_EXPORTS['ti/com/ti/support/list_item_mixins.mjs']);
//========================================
// JOIN <list_mixins.mjs> ti/com/ti/support/list_mixins.mjs
//========================================
Ti.Preload("ti/com/ti/support/list_mixins.mjs", TI_PACK_EXPORTS['ti/com/ti/support/list_mixins.mjs']);
//========================================
// JOIN <list_props.mjs> ti/com/ti/support/list_props.mjs
//========================================
Ti.Preload("ti/com/ti/support/list_props.mjs", TI_PACK_EXPORTS['ti/com/ti/support/list_props.mjs']);
//========================================
// JOIN <ti-switcher-props.mjs> ti/com/ti/switcher/ti-switcher-props.mjs
//========================================
Ti.Preload("ti/com/ti/switcher/ti-switcher-props.mjs", TI_PACK_EXPORTS['ti/com/ti/switcher/ti-switcher-props.mjs']);
//========================================
// JOIN <ti-switcher.html> ti/com/ti/switcher/ti-switcher.html
//========================================
Ti.Preload("ti/com/ti/switcher/ti-switcher.html", `<div class="ti-switcher"
  :class="TopClass">
  <!--
    Show Loading
  -->
  <ti-icon
    v-if="loading"
    value="zmdi-settings zmdi-hc-spin"/>
  <!--
    Options
  -->
  <div v-else
    class="switcher-con">
    <ul>
      <li v-for="it in TheItems" 
        :key="it.value"
        :class="it.className"
        v-bind="it.tip"
        @click="OnClickItem(it, $event)"
        @mousedown="OnMouseDown(it)">
        <ti-icon class="it-icon"
          size=".8em"
          v-if="it.icon" 
          :value="it.icon"/>
        <span
          v-if="it.text" 
            class="it-text">{{it.text}}</span>
      </li>
    </ul>
  </div>
</div>`);
//========================================
// JOIN <ti-switcher.mjs> ti/com/ti/switcher/ti-switcher.mjs
//========================================
Ti.Preload("ti/com/ti/switcher/ti-switcher.mjs", TI_PACK_EXPORTS['ti/com/ti/switcher/ti-switcher.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/switcher/_com.json
//========================================
Ti.Preload("ti/com/ti/switcher/_com.json", {
  "name" : "ti-switcher",
  "globally" : true,
  "template" : "./ti-switcher.html",
  "props" : "./ti-switcher-props.mjs",
  "mixins" : ["./ti-switcher.mjs"]
});
//========================================
// JOIN <ti-table-quick-action.mjs> ti/com/ti/table/quick/ti-table-quick-action.mjs
//========================================
Ti.Preload("ti/com/ti/table/quick/ti-table-quick-action.mjs", TI_PACK_EXPORTS['ti/com/ti/table/quick/ti-table-quick-action.mjs']);
//========================================
// JOIN <ti-table-quick-props.mjs> ti/com/ti/table/quick/ti-table-quick-props.mjs
//========================================
Ti.Preload("ti/com/ti/table/quick/ti-table-quick-props.mjs", TI_PACK_EXPORTS['ti/com/ti/table/quick/ti-table-quick-props.mjs']);
//========================================
// JOIN <ti-table-quick.html> ti/com/ti/table/quick/ti-table-quick.html
//========================================
Ti.Preload("ti/com/ti/table/quick/ti-table-quick.html", `<div class="ti-table as-quick is-head-frozen"
  :class="TopClass"
  :style="TopStyle"
  @click="OnClickTop">
  <!--
    Blank
  -->
  <ti-loading 
    v-if="isDataEmpty"
      class="nil-data"
      v-bind="blankAs"/>
  <!--
    Show thead/tbody
  -->
  <template v-else>
    <!--
      Table
    -->
    <table ref="table">
      <!--
        Head
      -->
      <thead
        class="table-head">
        <tr>
          <th
            v-for="fld in TableFields"
              :style="fld.headStyle"
              :col-index="fld.index"><div class="th-con">
            <!--[0] checker-->
            <div
              v-if="checkable && multi && fld.isFirst"
                class="as-checker"
                @click.left="OnClickHeadChecker">
                <ti-icon :value="HeadCheckerIcon"/>
            </div>
            <!-- field title -->
            <span class="table-head-cell-text">{{fld.title|i18n}}</span>
          </div></th>
        </tr>
      </thead>
      <!--
        Body
      -->
      <tbody
        class="table-body">
        <tr
          v-for="row in TableData"
            :key="row.id"
            :index="row.index"
            :class="row.className"
            @click.left="OnClickRow(row, $event)"
            @dblclick.left="OnDblClickRow(row, $event)">
            <!-- Begin Cell -->
            <td
              v-for="cell in row.cells"
                :key="cell.index">
                <div class="cell-wrapper">
                  <div 
                    v-if="0 == cell.index"
                      class="table-row-head">
                      <!--Indicator-->
                      <div class="row-actived-indicator"></div>
                      <!--Checker-->
                      <div
                        v-if="checkable"
                          class="row-checker"
                          @click.left.stop="OnClickRowChecker(row, $event)">
                          <i v-if="row.checked" class="fas fa-check-square"></i>
                          <i v-else class="far fa-square"></i>
                      </div>
                      <!--Row number-->
                      <div
                      v-if="row.showNumber"
                        class="row-number">{{row.number}}</div>
                  </div>
                  <div class="cell-con">
                    <!--Begin: Cell display items-->
                    <template
                      v-for="it in cell.items">
                      <!--
                        Icon
                      -->
                      <template v-if="'icon' == it.type">
                        <i
                          v-if="it.value"
                            :class="[it.className, it.displayValue.className]"
                            >{{it.displayValue.text||""}}</i>
                      </template>
                      <!--
                        Image
                      -->
                      <img
                        v-else-if="'img' == it.type"
                          :class="it.className"
                          :src="it.displayValue">
                      <!--
                        Text
                      -->
                      <span
                        v-else
                          :class="it.className"
                          >{{it.displayValue}}</span>
                    </template>
                  </div>
                </div>
                <!--End: Cell display items-->
            </td>
            <!-- End Cell -->
        </tr>
      </tbody>
    </table>
  </template>
</div>`);
//========================================
// JOIN <ti-table-quick.mjs> ti/com/ti/table/quick/ti-table-quick.mjs
//========================================
Ti.Preload("ti/com/ti/table/quick/ti-table-quick.mjs", TI_PACK_EXPORTS['ti/com/ti/table/quick/ti-table-quick.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/table/quick/_com.json
//========================================
Ti.Preload("ti/com/ti/table/quick/_com.json", {
  "name" : "ti-table-quick",
  "globally" : true,
  "template" : "./ti-table-quick.html",
  "props" : "./ti-table-quick-props.mjs",
  "methods" : "./ti-table-quick-action.mjs",
  "mixins" : "./ti-table-quick.mjs"
});
//========================================
// JOIN <ti-table-cols.mjs> ti/com/ti/table/ti-table-cols.mjs
//========================================
Ti.Preload("ti/com/ti/table/ti-table-cols.mjs", TI_PACK_EXPORTS['ti/com/ti/table/ti-table-cols.mjs']);
//========================================
// JOIN <ti-table-data.mjs> ti/com/ti/table/ti-table-data.mjs
//========================================
Ti.Preload("ti/com/ti/table/ti-table-data.mjs", TI_PACK_EXPORTS['ti/com/ti/table/ti-table-data.mjs']);
//========================================
// JOIN <ti-table-props.mjs> ti/com/ti/table/ti-table-props.mjs
//========================================
Ti.Preload("ti/com/ti/table/ti-table-props.mjs", TI_PACK_EXPORTS['ti/com/ti/table/ti-table-props.mjs']);
//========================================
// JOIN <ti-table.html> ti/com/ti/table/ti-table.html
//========================================
Ti.Preload("ti/com/ti/table/ti-table.html", `<div class="ti-table"
  :class="TopClass"
  :style="TopStyle"
  @click="OnClickTop"
  v-ti-activable>
  <!--
    Pending
  -->
  <ti-loading 
    v-if="isDataPending"
      class="nil-data"
      v-bind="loadingAs"/>
  <!--
    Blank
  -->
  <ti-loading 
    v-else-if="isDataEmpty"
      class="nil-data"
      v-bind="BlankLoadingConf"/>
  <!--
    Show thead/tbody
  -->
  <template v-else>
    <!--
      Table
    -->
    <table ref="table">
      <!--
        Head
      -->
      <thead v-if="isShowHead"
        class="table-head"
        :style="TableStyle">
        <!--field titles-->
        <tr>
          <th
            v-for="(fld, index) in TableFields"
              :style="fld.headStyle"
              :col-index="fld.index"><div class="th-con">
            <!--[0] checker-->
            <div
              v-if="checkable && multi && isShowHead && fld.isFirst"
                class="as-checker"
                @click.left="OnClickHeadChecker">
                <ti-icon :value="HeadCheckerIcon"/>
            </div>
            <!-- field title -->
            <span class="table-head-cell-text">{{fld.title|i18n}}</span>
            <!--[-1] customized button-->
            <div
              v-if="canCustomizedFields && isShowHead && fld.isLast"
                class="as-customized-btn"
                @click.left="OnCustomizeFields">
                <i class="fas fa-cog"></i>
            </div>
            <!--[N] resize column handle-->
            <div
              v-if="columnResizable && !fld.isLast"
                class="as-column-resize-hdl"
                @mousedown.left="OnColumnResizeBegin(index, fld)"
                @dblclick="OnDblClickColumnResizer(index,fld)"></div>
          </div></th>
        </tr>
      </thead>
      <!--
        Body
      -->
      <tbody
        class="table-body"
        :style="TableStyle">
        <!--=====================================-->
        <tr
          v-if="hasVirtualRowHead"
            class="table-virtual-row at-head">
            <td :style="VirtualRowHeadStyle">&nbsp;</td>
        </tr>
        <!--=====================================-->
        <tr
          v-for="row in VirtualRows"
            class="table-row"
            :class="row.disClassName"
            :key="row.id"
            :row-id="row.id"
            @click.left="OnClickRow(row,$event)"
            @dblclick.left="OnDblClickRow(row,$event)">
            <!--...............................................-->
            <!--Group Title-->
            <td 
              v-if="row.asGroupTitle && row.groupTitleComs"
                class="as-row-group-title"
                :colspan="row.cells.length">
                <div class="row-group-title-con">
                  <component
                    v-for="(it, index) in row.groupTitleComs"
                      :key="index"
                      :is="it.comType"
                      v-bind="it.comConf"/>
                </div>
            </td>
            <!--Cells-->
            <template v-else>
              <td
                v-for="cell in row.cells"
                  class="table-cell"
                  :class="cell.className">
                  <div class="cell-wrapper" :class="cell.WrapperClass">
                  <!-- First cell-->
                  <div v-if="0 == cell.index" class="table-row-head">
                    <!--current actived row indicator-->
                    <div class="row-actived-indicator"></div>
                    <!-- Indents -->
                    <div v-for="n in row.indent" class="row-indent"></div>
                      <!--ICON: Handler-->
                      <template v-if="row.icon">
                        <div 
                          v-if="row.showIcon"
                            class="ti-icon row-checker is-font"
                            @click.left.stop="OnClickRowIcon(row,$event)">
                            <div class="icon-icon">
                              <i :class="row.iconClass"></i>
                            </div>
                        </div>
                        <div v-else
                          class="row-icon"></div>
                    </template>
                    <!--ICON: Checker-->
                    <div 
                      v-if="checkable && row.checkable" 
                        class="ti-icon row-checker is-font as-checkbox"
                        @click.left.stop="OnClickChecker(row,$event)">
                        <div class="icon-icon">
                          <i :class="RowCheckIcons.on"></i>
                          <i :class="RowCheckIcons.off"></i>
                        </div>
                    </div>
                    <!--Row Number-->
                    <div 
                      v-if="row.hasRowNumber"
                        class="row-number">{{row.RowNumber}}</div>
                  </div>
                  <!--Cell Display-->
                  <div class="cell-con">
                    <template v-for="(it, index) in cell.displayItems">
                      <!-- quick label -->
                      <div 
                        v-if="it.quickLabel"
                          class="ti-label full-field" 
                          :class="it.quickLabel.className"
                          :title="it.quickLabel.text"
                          :style="it.quickLabel.style">
                            <div 
                              v-if="it.quickLabel.hoverCopy"
                                class="as-hover-copy"
                                @click.left.stop="OnClickQuickLabelCopy(it.quickLabel,$event)"><i class="fas fa-copy"></i>
                            </div>
                            <div 
                              v-if="it.quickLabel.iconHtml"
                                class="as-icon at-prefix">
                                <div class="ti-icon is-font">
                                  <div class="icon-icon" v-html="it.quickLabel.iconHtml">
                                  </div>
                                </div>
                            </div>
                            <div class="as-value">
                              <a
                                v-if="it.quickLabel.href" 
                                  :target="it.quickLabel.target"
                                  :href="it.quickLabel.href"
                                  @click.left.prevent
                                  >{{it.quickLabel.text}}</a>
                              <span v-else>{{it.quickLabel.text}}</span>
                            </div>
                      </div>
                      <!-- quick icon -->
                      <div
                        v-else-if="it.quickIcon" 
                          class="ti-icon is-font"
                          :class="it.quickIcon.className">
                          <div class="icon-icon"><i :class="it.quickIcon.iconClass"></i></div>
                      </div>
                      <!-- others -->
                      <component 
                        v-else
                          :class="it.className"
                          :key="it.uniqKey"
                          :is="it.comType"
                          v-bind="it.comConf"
                          @change="OnCellItemChanged(row, cell, it, $event)"/>
                    </template>
                    
                  </div>
                </div>
              </td>
            </template> <!--// end of cell-->
            <!--...............................................-->
        </tr>
        <!--=====================================-->
        <tr
           v-if="hasVirtualRowTail"
           class="table-virtual-row at-tail">
           <td :style="VirtualRowTailStyle">&nbsp;</td>
        </tr>
        <!--=====================================-->
      </tbody>
    </table>
  </template>
</div>`);
//========================================
// JOIN <ti-table.mjs> ti/com/ti/table/ti-table.mjs
//========================================
Ti.Preload("ti/com/ti/table/ti-table.mjs", TI_PACK_EXPORTS['ti/com/ti/table/ti-table.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/table/_com.json
//========================================
Ti.Preload("ti/com/ti/table/_com.json", {
  "name" : "ti-table",
  "globally" : true,
  "template" : "./ti-table.html",
  "props" : [
    "@com:ti/support/list_props.mjs",
    "./ti-table-props.mjs"
  ],
  "methods" : "@com:ti/support/field_display.mjs",
  "mixins" : [
    "@com:ti/support/list_mixins.mjs",
    "./ti-table-cols.mjs",
    "./ti-table-data.mjs",
    "./ti-table.mjs"
  ]
});
//========================================
// JOIN <table-cell.html> ti/com/ti/table_old/com/table-row/com/table-cell/table-cell.html
//========================================
Ti.Preload("ti/com/ti/table_old/com/table-row/com/table-cell/table-cell.html", `<td class="table-cell"
  :class="TopClass"
  :col-index="index"
  v-ti-activable
  @click.left="OnClickCell"
  @dblclick.left="OnDblClickCell">
  <div class="cell-wrapper"
    :class="WrapperClass">
    <!--Slot for first column-->
    <slot></slot>
    <!--Fields-->
    <div class="cell-con">
      <component 
        v-for="(it, index) in cellItems"
          :class="'item-'+index"
          :key="it.uniqKey"
          :is="it.comType"
          v-bind="it.comConf"
          @change="OnItemChanged(it, $event)"/>
    </div>
  </div>
</td>`);
//========================================
// JOIN <table-cell.mjs> ti/com/ti/table_old/com/table-row/com/table-cell/table-cell.mjs
//========================================
Ti.Preload("ti/com/ti/table_old/com/table-row/com/table-cell/table-cell.mjs", TI_PACK_EXPORTS['ti/com/ti/table_old/com/table-row/com/table-cell/table-cell.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/table_old/com/table-row/com/table-cell/_com.json
//========================================
Ti.Preload("ti/com/ti/table_old/com/table-row/com/table-cell/_com.json", {
  "name" : "table-cell",
  "globally" : false,
  "template" : "./table-cell.html",
  "methods"  : "@com:ti/support/field_display.mjs",
  "mixins"   : ["./table-cell.mjs"],
  "components" : ["@com:ti/label"]
});
//========================================
// JOIN <table-row.html> ti/com/ti/table_old/com/table-row/table-row.html
//========================================
Ti.Preload("ti/com/ti/table_old/com/table-row/table-row.html", `<tr class="table-row"
  :class="TopClass"
  v-ti-activable>
  <!--
    Group title
  -->
  <td 
    v-if="asGroupTitle && hasGroupTitleComs"
      class="as-row-group-title"
      :colspan="fields.length">
      <div class="row-group-title-con">
        <component
          v-for="(it, index) in groupTitleComs"
            :key="index"
            :is="it.comType"
            v-bind="it.comConf"/>
      </div>
  </td>
  <!--
    Cells
  -->
  <template v-else>
    <table-cell v-for="fld in fields"
      :key="fld.index"
      v-bind="fld"
      :row-id="rowId"
      :row-index="index"
      :is-current="isCurrent"
      :is-checked="isChecked"
      :data="data"
      @cell:click="OnClickRow"
      @cell:dblclick="OnDblClickRow">
      <template v-if="fld.index == 0">
        <div class="table-row-head">
          <!--current actived row indicator-->
          <div class="row-actived-indicator"></div>
          <!-- Indents -->
          <div v-for="n in indent"
              class="row-indent"></div>
          <!--ICON: Handler-->
          <template v-if="icon">
            <ti-icon
              v-if="hasRealIcon"
                class="row-icon row-handler"
                :value="icon"
                @click.native.left.stop="OnClickIcon"/>
            <div v-else
              class="row-icon"></div>
          </template>
          <!--ICON: Checker-->
          <ti-icon v-if="checkable"
              class="row-checker"
              :value="theCheckIcon"
              @click.native.left.stop="OnClickChecker"/>
          <!--Row Number-->
          <div 
            v-if="hasRowNumber"
              class="row-number">{{RowNumber}}</div>
        </div>
      </template>
    </table-cell>
  </template>
</tr>`);
//========================================
// JOIN <table-row.mjs> ti/com/ti/table_old/com/table-row/table-row.mjs
//========================================
Ti.Preload("ti/com/ti/table_old/com/table-row/table-row.mjs", TI_PACK_EXPORTS['ti/com/ti/table_old/com/table-row/table-row.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/table_old/com/table-row/_com.json
//========================================
Ti.Preload("ti/com/ti/table_old/com/table-row/_com.json", {
  "name" : "table-row",
  "globally" : false,
  "template" : "./table-row.html",
  "mixins" : [
    "@com:ti/support/list_item_mixins.mjs",
    "./table-row.mjs"],
  "components" : [
      "./com/table-cell"
    ]
});
//========================================
// JOIN <ti-table-props.mjs> ti/com/ti/table_old/ti-table-props.mjs
//========================================
Ti.Preload("ti/com/ti/table_old/ti-table-props.mjs", TI_PACK_EXPORTS['ti/com/ti/table_old/ti-table-props.mjs']);
//========================================
// JOIN <ti-table.html> ti/com/ti/table_old/ti-table.html
//========================================
Ti.Preload("ti/com/ti/table_old/ti-table.html", `<div class="ti-table"
  :class="TopClass"
  :style="TopStyle"
  @click="OnClickTop"
  v-ti-activable>
  <!--
    Pending
  -->
  <ti-loading 
    v-if="isDataPending"
      class="nil-data"
      v-bind="loadingAs"/>
  <!--
    Blank
  -->
  <ti-loading 
    v-else-if="isDataEmpty"
      class="nil-data"
      v-bind="BlankLoadingConf"/>
  <!--
    Show thead/tbody
  -->
  <template v-else>
    <!--
      Table
    -->
    <table ref="table">
      <!--
        Head
      -->
      <thead v-if="isShowHead"
        class="table-head"
        :style="TableStyle">
        <!--field titles-->
        <tr>
          <th
            v-for="(fld, index) in TableFields"
              :style="fld.headStyle"
              :col-index="fld.index"><div class="th-con">
            <!--[0] checker-->
            <div
              v-if="checkable && multi && isShowHead && fld.isFirst"
                class="as-checker"
                @click.left="OnClickHeadChecker">
                <ti-icon :value="HeadCheckerIcon"/>
            </div>
            <!-- field title -->
            <span class="table-head-cell-text">{{fld.title|i18n}}</span>
            <!--[-1] customized button-->
            <div
              v-if="canCustomizedFields && isShowHead && fld.isLast"
                class="as-customized-btn"
                @click.left="OnCustomizeFields">
                <i class="fas fa-cog"></i>
            </div>
            <!--[N] resize column handle-->
            <div
              v-if="columnResizable && !fld.isLast"
                class="as-column-resize-hdl"
                @mousedown.left="OnColumnResizeBegin(index, fld)"></div>
          </div></th>
        </tr>
      </thead>
      <!--
        Body
      -->
      <tbody
        class="table-body"
        :style="TableStyle">
        <table-row
          v-for="row in myData"
            :class="row.className"
            :key="row.id"
            :row-id="row.id"
            :index="row.index"
            :display-index="row.displayIndex"
            :as-group-title="row.asGroupTitle"
            :group-title-display="RowGroupTitleDisplay"
            :icon="row.icon"
            :indent="row.indent"
            :data="row.rawData"
            :item="row.item"
            :rowNumberBase="rowNumberBase"
            :rowCount="myData.length"
            :rowNumberWidth="RowNumberWidth"

            :checkable="row.checkable"
            :selectable="row.selectable"
            :openable="row.openable"

            :fields="TableFields"
            :current-id="theCurrentId"
            :checked-ids="theCheckedIds"
            :changed-id="changedId"

            @icon="$notify('icon', $event)"
            @checker="OnRowCheckerClick"
            @select="OnRowSelect"
            @open="OnRowOpen"/>
        </tbody>
    </table>
  </template>
</div>`);
//========================================
// JOIN <ti-table.mjs> ti/com/ti/table_old/ti-table.mjs
//========================================
Ti.Preload("ti/com/ti/table_old/ti-table.mjs", TI_PACK_EXPORTS['ti/com/ti/table_old/ti-table.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/table_old/_com.json
//========================================
Ti.Preload("ti/com/ti/table_old/_com.json", {
  "name" : "ti-table",
  "globally" : true,
  "template" : "./ti-table.html",
  "props" : [
    "@com:ti/support/list_props.mjs",
    "./ti-table-props.mjs"
  ],
  "methods" : "@com:ti/support/field_display.mjs",
  "mixins" : [
    "@com:ti/support/list_mixins.mjs",
    "./ti-table.mjs"
  ],
  "components" : [
    "./com/table-row"
  ]
});
//========================================
// JOIN <tags-item.html> ti/com/ti/tags/com/tags-item/tags-item.html
//========================================
Ti.Preload("ti/com/ti/tags/com/tags-item/tags-item.html", `<div class="ti-tags-item" 
  :class="topClass"
  @mouseenter="mouseEnter='top'"
  @mouseleave="mouseEnter=null"
  @click.left="OnClickTop">
  <!--
    Deleter
  -->
  <ti-icon v-if="removable && !readonly"
    class="as-del"
    :value="removeIcon"
    @mouseenter.native="mouseEnter='del'"
    @mouseleave.native="mouseEnter='top'"
    @click.native.stop="OnClickDel"/>
  <!--
    Icon
  -->
  <ti-icon v-if="icon" 
    class="as-icon"
    :value="icon"/>
  <!--
    Text
  -->
  <template v-if="text">
    <a v-if="href"
      class="as-text"
      @click.prevent
      :href="href"
      :class="textClass">{{text|i18n}}</a>
    <span v-else
      class="as-text"
      :class="textClass">{{text|i18n}}</span>
  </template>
  <!--
    Status Icon
  -->
  <ti-icon v-if="hasOptions && !readonly"
    class="as-status"
    :value="theStatusIcon"/>
  <!--
    Drop & Mask
  -->
  <template v-if="'extended' == status">
    <div class="as-mask" @click.stop="closeDrop"></div>
    <div class="as-drop" ref="drop"
      @click.stop>
      <ti-icon-text v-for="it in theOptions"
        :key="it.index"
        v-bind="it"
        @click.native="OnClickOption(it)"/>
    </div>
  </template>
</div>`);
//========================================
// JOIN <tags-item.mjs> ti/com/ti/tags/com/tags-item/tags-item.mjs
//========================================
Ti.Preload("ti/com/ti/tags/com/tags-item/tags-item.mjs", TI_PACK_EXPORTS['ti/com/ti/tags/com/tags-item/tags-item.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/tags/com/tags-item/_com.json
//========================================
Ti.Preload("ti/com/ti/tags/com/tags-item/_com.json", {
  "name" : "tags-item",
  "globally" : false,
  "template" : "./tags-item.html",
  "mixins" : ["./tags-item.mjs"],
  "components" : ["@com:ti/icon/text"]
});
//========================================
// JOIN <ti-tags.html> ti/com/ti/tags/ti-tags.html
//========================================
Ti.Preload("ti/com/ti/tags/ti-tags.html", `<div class="ti-tags"
  :class="TopClass">
  <!--
    Empty
  -->
  <span
    class="as-nil-tip"
      v-if="!hasItems && placeholder">{{placeholder | i18n}}</span>
  <!--
    Loop piece
  -->
  <tags-item
    v-else
      v-for="tag in myTags"
        :key="tag.key"
        v-bind="tag"
        :cancel-bubble="cancelItemBubble"
        :option-default-icon="optionDefaultIcon"
        :removable="removable"
        :remove-icon="removeIcon"
        :readonly="readonly"
        :status-icons="statusIcons"
        @change="OnItemChanged"
        @remove="OnItemRemoved"
        @fire="OnItemFired"/>
</div>`);
//========================================
// JOIN <ti-tags.mjs> ti/com/ti/tags/ti-tags.mjs
//========================================
Ti.Preload("ti/com/ti/tags/ti-tags.mjs", TI_PACK_EXPORTS['ti/com/ti/tags/ti-tags.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/tags/_com.json
//========================================
Ti.Preload("ti/com/ti/tags/_com.json", {
  "name" : "ti-tags",
  "globally" : true,
  "template" : "./ti-tags.html",
  "mixins" : ["./ti-tags.mjs"],
  "components" : [
    "./com/tags-item"
  ]
});
//========================================
// JOIN <code-ace-props.mjs> ti/com/ti/text/code/ace/code-ace-props.mjs
//========================================
Ti.Preload("ti/com/ti/text/code/ace/code-ace-props.mjs", TI_PACK_EXPORTS['ti/com/ti/text/code/ace/code-ace-props.mjs']);
//========================================
// JOIN <code-ace.html> ti/com/ti/text/code/ace/code-ace.html
//========================================
Ti.Preload("ti/com/ti/text/code/ace/code-ace.html", `<div class="ti-text-code-ace"
  :class="TopClass"
  v-ti-activable>
  <!--
    Editor
  -->
  <div class="as-editor" ref="edit" :style="EditorStyle"></div>
  <!--
    Show loading
  -->
  <TiLoading
    v-if="isContentLoading"
      class="as-nil-mask as-big-mask"
      :style="BlankComStyle"
      v-bind="EditorLoadingAs"/>
  <!--
    Show Blank
  -->
  <TiLoading
    v-else-if="isContentBlank"
      class="as-nil-mask as-big-mask"
      :style="BlankComStyle"
      v-bind="EditorBlankAs"/>
</div>`);
//========================================
// JOIN <code-ace.mjs> ti/com/ti/text/code/ace/code-ace.mjs
//========================================
Ti.Preload("ti/com/ti/text/code/ace/code-ace.mjs", TI_PACK_EXPORTS['ti/com/ti/text/code/ace/code-ace.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/text/code/ace/_com.json
//========================================
Ti.Preload("ti/com/ti/text/code/ace/_com.json", {
  "name" : "ti-text-code-ace",
  "globally" : true,
  "template" : "./code-ace.html",
  "props" : "./code-ace-props.mjs",
  "mixins" : "./code-ace.mjs",
  "deps" : [
    "@deps:ace/1.4.12/ace.js"
  ]
});
//========================================
// JOIN <ti-text-json.html> ti/com/ti/text/json/ti-text-json.html
//========================================
Ti.Preload("ti/com/ti/text/json/ti-text-json.html", `<ti-gui
  class="ti-text-json"
  :class="className"
  keep-shown-to="ti-text-json-editor"
  :layout="TheLayout"
  :schema="TheSchema"
  :can-loading="true"
  @change="OnChange"/>`);
//========================================
// JOIN <ti-text-json.mjs> ti/com/ti/text/json/ti-text-json.mjs
//========================================
Ti.Preload("ti/com/ti/text/json/ti-text-json.mjs", TI_PACK_EXPORTS['ti/com/ti/text/json/ti-text-json.mjs']);
//========================================
// JOIN <json-tree-item.html> ti/com/ti/text/json/tree/item/json-tree-item.html
//========================================
Ti.Preload("ti/com/ti/text/json/tree/item/json-tree-item.html", `<div class="json-value"
  :class="TopClass"
  v-ti-activable>
  <!--
  //  - Label   : Readonly
  -->
  <span v-if="isLabel"
    class="as-editing as-label">{{theLabelDisplayText}}</span>
  <!--
  //  - Boolean : Editable boolean value
  -->
  <ti-toggle v-else-if="'Boolean' == valueType"
    class="as-editing"
    :value="value"
    @change="$notify('change', $event)"/>
  <!--
  //  - Integer : Editable integer value
  //  - Float   : Editable float value
  //  - String  : Editable string value
  //  - Nil     : Edtiable any value
  -->
  <ti-label v-else
    class="as-editing is-nowrap ti-fill-parent"
    :value="value"
    :class-name="theValueClassName"
    :format="theValueFormat"
    :editable="true"
    :hoverCopy="false"
    @change="$notify('change', $event)"/>
  <!--
    Action Menu
  -->
  <div class="as-actions">
    <ti-actionbar
        :items="theActionMenuData"
        :status="theActionMenuStatus"/>
  </div>
</div>`);
//========================================
// JOIN <json-tree-item.mjs> ti/com/ti/text/json/tree/item/json-tree-item.mjs
//========================================
Ti.Preload("ti/com/ti/text/json/tree/item/json-tree-item.mjs", TI_PACK_EXPORTS['ti/com/ti/text/json/tree/item/json-tree-item.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/text/json/tree/item/_com.json
//========================================
Ti.Preload("ti/com/ti/text/json/tree/item/_com.json", {
  "name" : "ti-text-json-tree-item",
  "globally" : true,
  "template" : "./json-tree-item.html",
  "mixins" : ["./json-tree-item.mjs"]
});
//========================================
// JOIN <ti-text-json-tree.html> ti/com/ti/text/json/tree/ti-text-json-tree.html
//========================================
Ti.Preload("ti/com/ti/text/json/tree/ti-text-json-tree.html", `<ti-tree class="ti-text-json-tree"
  title="i18n:name"
  :main-width="mainWidth"
  :class="className"
  :border="border"
  :keep-open-by="keepOpenBy"
  :multi="true"
  :data="myTreeRoot"
  :display="TreeDisplay"
  :auto-open="autoOpen"
  :current-id="myTreeCurrentPathId"
  :default-open-depth="defaultOpenDepth"
  :fields="TreeFields"
  :idBy="NodeIdBy"
  :nameBy="NodeNameBy"
  @select
  @node:item:change="OnNodeItemChange"
  @opened-status:changed="OnOpenedStatusChanged"/>`);
//========================================
// JOIN <ti-text-json-tree.mjs> ti/com/ti/text/json/tree/ti-text-json-tree.mjs
//========================================
Ti.Preload("ti/com/ti/text/json/tree/ti-text-json-tree.mjs", TI_PACK_EXPORTS['ti/com/ti/text/json/tree/ti-text-json-tree.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/text/json/tree/_com.json
//========================================
Ti.Preload("ti/com/ti/text/json/tree/_com.json", {
  "name" : "ti-text-json-tree",
  "globally" : true,
  "template" : "./ti-text-json-tree.html",
  "mixins" : ["./ti-text-json-tree.mjs"],
  "components" : [
    "@com:ti/tree",
    "@com:ti/text/json/tree/item"
  ]
});
//========================================
// JOIN <_com.json> ti/com/ti/text/json/_com.json
//========================================
Ti.Preload("ti/com/ti/text/json/_com.json", {
  "name": "ti-text-json",
  "globally": true,
  "template": "./ti-text-json.html",
  "mixins": "./ti-text-json.mjs",
  "components": [
    "@com:ti/gui",
    "@com:ti/toggle",
    "@com:ti/text/code/ace",
    "@com:ti/text/json/tree"
  ]
});
//========================================
// JOIN <markdown-preview.html> ti/com/ti/text/markdown/preview/markdown-preview.html
//========================================
Ti.Preload("ti/com/ti/text/markdown/preview/markdown-preview.html", `<div class="ti-markdown-preview"
  :class="TopClass">
  <article 
    :class="ThemeClass"
    v-html="myHtml"></article>
  <!--pre>{{myHtml}}</pre-->
</div>`);
//========================================
// JOIN <markdown-preview.mjs> ti/com/ti/text/markdown/preview/markdown-preview.mjs
//========================================
Ti.Preload("ti/com/ti/text/markdown/preview/markdown-preview.mjs", TI_PACK_EXPORTS['ti/com/ti/text/markdown/preview/markdown-preview.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/text/markdown/preview/_com.json
//========================================
Ti.Preload("ti/com/ti/text/markdown/preview/_com.json", {
  "name" : "ti-text-markdown-preview",
  "globally" : true,
  "template" : "./markdown-preview.html",
  "mixins" : ["./markdown-preview.mjs"],
  "deps": [
    "@lib:code2a/cheap-markdown.mjs"
  ]
});
//========================================
// JOIN <ti-text-raw.html> ti/com/ti/text/raw/ti-text-raw.html
//========================================
Ti.Preload("ti/com/ti/text/raw/ti-text-raw.html", `<div class="ti-text-raw"
  :class="TopClass"
  v-ti-activable>
  <!--
    Header
  -->
  <div
    v-if="isShowHead"
      class="as-head">
      <ti-icon :value="icon"/>
      <span>{{title}}</span>
  </div>
  <!--
    Main
  -->
  <div class="as-main">
    <textarea ref="text" 
      spellcheck="false"
      :placeholder="placeholder | i18n"
      :value="myContent"
      :readonly="isReadonly"
      @compositionstart="OnInputCompositionStart"
      @compositionend="OnInputCompositionEnd"
      @input="OnInputing"
      @change="OnTextChanged"></textarea>
  </div>
</div>`);
//========================================
// JOIN <ti-text-raw.mjs> ti/com/ti/text/raw/ti-text-raw.mjs
//========================================
Ti.Preload("ti/com/ti/text/raw/ti-text-raw.mjs", TI_PACK_EXPORTS['ti/com/ti/text/raw/ti-text-raw.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/text/raw/_com.json
//========================================
Ti.Preload("ti/com/ti/text/raw/_com.json", {
  "name" : "ti-text-raw",
  "globally" : true,
  "template" : "./ti-text-raw.html",
  "mixins" : ["./ti-text-raw.mjs"]
});
//========================================
// JOIN <codeblock.mjs> ti/com/ti/text/rich/tinymce/plugin/codeblock.mjs
//========================================
Ti.Preload("ti/com/ti/text/rich/tinymce/plugin/codeblock.mjs", TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/codeblock.mjs']);
//========================================
// JOIN <preview.mjs> ti/com/ti/text/rich/tinymce/plugin/preview.mjs
//========================================
Ti.Preload("ti/com/ti/text/rich/tinymce/plugin/preview.mjs", TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/preview.mjs']);
//========================================
// JOIN <tiny-wn-album.mjs> ti/com/ti/text/rich/tinymce/plugin/tiny-wn-album.mjs
//========================================
Ti.Preload("ti/com/ti/text/rich/tinymce/plugin/tiny-wn-album.mjs", TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/tiny-wn-album.mjs']);
//========================================
// JOIN <tiny-wn-attachment.mjs> ti/com/ti/text/rich/tinymce/plugin/tiny-wn-attachment.mjs
//========================================
Ti.Preload("ti/com/ti/text/rich/tinymce/plugin/tiny-wn-attachment.mjs", TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/tiny-wn-attachment.mjs']);
//========================================
// JOIN <tiny-wn-audio.mjs> ti/com/ti/text/rich/tinymce/plugin/tiny-wn-audio.mjs
//========================================
Ti.Preload("ti/com/ti/text/rich/tinymce/plugin/tiny-wn-audio.mjs", TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/tiny-wn-audio.mjs']);
//========================================
// JOIN <tiny-wn-fb-album.mjs> ti/com/ti/text/rich/tinymce/plugin/tiny-wn-fb-album.mjs
//========================================
Ti.Preload("ti/com/ti/text/rich/tinymce/plugin/tiny-wn-fb-album.mjs", TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/tiny-wn-fb-album.mjs']);
//========================================
// JOIN <tiny-wn-image.mjs> ti/com/ti/text/rich/tinymce/plugin/tiny-wn-image.mjs
//========================================
Ti.Preload("ti/com/ti/text/rich/tinymce/plugin/tiny-wn-image.mjs", TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/tiny-wn-image.mjs']);
//========================================
// JOIN <tiny-wn-video.mjs> ti/com/ti/text/rich/tinymce/plugin/tiny-wn-video.mjs
//========================================
Ti.Preload("ti/com/ti/text/rich/tinymce/plugin/tiny-wn-video.mjs", TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/tiny-wn-video.mjs']);
//========================================
// JOIN <tiny-wn-web-image.mjs> ti/com/ti/text/rich/tinymce/plugin/tiny-wn-web-image.mjs
//========================================
Ti.Preload("ti/com/ti/text/rich/tinymce/plugin/tiny-wn-web-image.mjs", TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/tiny-wn-web-image.mjs']);
//========================================
// JOIN <tiny-wn-youtube.mjs> ti/com/ti/text/rich/tinymce/plugin/tiny-wn-youtube.mjs
//========================================
Ti.Preload("ti/com/ti/text/rich/tinymce/plugin/tiny-wn-youtube.mjs", TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/tiny-wn-youtube.mjs']);
//========================================
// JOIN <tiny-wn-yt-playlist.mjs> ti/com/ti/text/rich/tinymce/plugin/tiny-wn-yt-playlist.mjs
//========================================
Ti.Preload("ti/com/ti/text/rich/tinymce/plugin/tiny-wn-yt-playlist.mjs", TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/plugin/tiny-wn-yt-playlist.mjs']);
//========================================
// JOIN <rich-tinymce-obj-resizing.mjs> ti/com/ti/text/rich/tinymce/rich-tinymce-obj-resizing.mjs
//========================================
Ti.Preload("ti/com/ti/text/rich/tinymce/rich-tinymce-obj-resizing.mjs", TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/rich-tinymce-obj-resizing.mjs']);
//========================================
// JOIN <rich-tinymce-props.mjs> ti/com/ti/text/rich/tinymce/rich-tinymce-props.mjs
//========================================
Ti.Preload("ti/com/ti/text/rich/tinymce/rich-tinymce-props.mjs", TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/rich-tinymce-props.mjs']);
//========================================
// JOIN <rich-tinymce.html> ti/com/ti/text/rich/tinymce/rich-tinymce.html
//========================================
Ti.Preload("ti/com/ti/text/rich/tinymce/rich-tinymce.html", `<div class="ti-text-rich-tinymce"
  :class="TopClass"
  v-ti-activable>
  <!--
    Editor
  -->
  <div class="as-editor">
    <textarea ref="editor"></textarea>
  </div>
  <!--
    Show loading
  -->
  <TiLoading
    v-if="isContentLoading"
      class="as-nil-mask as-big-mask"
      :style="BlankComStyle"
      v-bind="loadingAs"/>
  <!--
    Show blank
  -->
  <component
    v-else-if="isContentNil"
      :style="BlankComStyle"
      :is="blankAs.comType"
      v-bind="blankAs.comConf"/>
</div>`);
//========================================
// JOIN <rich-tinymce.mjs> ti/com/ti/text/rich/tinymce/rich-tinymce.mjs
//========================================
Ti.Preload("ti/com/ti/text/rich/tinymce/rich-tinymce.mjs", TI_PACK_EXPORTS['ti/com/ti/text/rich/tinymce/rich-tinymce.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/text/rich/tinymce/_com.json
//========================================
Ti.Preload("ti/com/ti/text/rich/tinymce/_com.json", {
  "name" : "ti-text-rich-tinymce",
  "globally" : true,
  "template" : "./rich-tinymce.html",
  "props" : "./rich-tinymce-props.mjs",
  "methods" : "./rich-tinymce-obj-resizing.mjs",
  "mixins" : "./rich-tinymce.mjs",
  "components": [
    "@com:hm/prop/css-rules",
    "@com:hm/prop/class-picker"
  ],
  "deps" : [
    "@deps:tinymce/5.6.2/tinymce.min.js"
  ]
});
//========================================
// JOIN <ti-time.html> ti/com/ti/time/ti-time.html
//========================================
Ti.Preload("ti/com/ti/time/ti-time.html", `<div class="ti-col-data as-time" 
  :class="topClass" 
  :style="topStyle">
  <ti-list v-for="list in theListGroup"
    :key="list.key"
    :data="list.data"
    :display="'text'"
    :current-id="list.currentId"
    :cancelable="false"
    :dftLabelHoverCopy="false"
    @select="onListSelected(list.key, $event)"/>
</div>`);
//========================================
// JOIN <ti-time.mjs> ti/com/ti/time/ti-time.mjs
//========================================
Ti.Preload("ti/com/ti/time/ti-time.mjs", TI_PACK_EXPORTS['ti/com/ti/time/ti-time.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/time/_com.json
//========================================
Ti.Preload("ti/com/ti/time/_com.json", {
  "name" : "ti-time",
  "globally" : true,
  "template" : "./ti-time.html",
  "mixins" : ["./ti-time.mjs"],
  "components" : ["@com:ti/list"]
});
//========================================
// JOIN <ti-toggle.html> ti/com/ti/toggle/ti-toggle.html
//========================================
Ti.Preload("ti/com/ti/toggle/ti-toggle.html", `<div class="ti-toggle"
  :class="topClass">
  <aside @click.left="onClick"><b></b></aside>
</div>`);
//========================================
// JOIN <ti-toggle.mjs> ti/com/ti/toggle/ti-toggle.mjs
//========================================
Ti.Preload("ti/com/ti/toggle/ti-toggle.mjs", TI_PACK_EXPORTS['ti/com/ti/toggle/ti-toggle.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/toggle/_com.json
//========================================
Ti.Preload("ti/com/ti/toggle/_com.json", {
  "name" : "ti-toggle",
  "globally" : true,
  "template" : "./ti-toggle.html",
  "mixins" : ["./ti-toggle.mjs"]
});
//========================================
// JOIN <ti-transfer-props.mjs> ti/com/ti/transfer/ti-transfer-props.mjs
//========================================
Ti.Preload("ti/com/ti/transfer/ti-transfer-props.mjs", TI_PACK_EXPORTS['ti/com/ti/transfer/ti-transfer-props.mjs']);
//========================================
// JOIN <ti-transfer.html> ti/com/ti/transfer/ti-transfer.html
//========================================
Ti.Preload("ti/com/ti/transfer/ti-transfer.html", `<div class="ti-transfer"
  :class="TopClass"
  :style="TopStyle">
  <!--=========================================
    Left: Candidates
  -->
  <div class="as-box as-can-list">
    <!--
      Head
    -->
    <div class="as-box-head">
      <div class="as-list-checker"
        @click.left="OnClickHeadChecker(can)">
        <ti-icon :value="GetHeadCheckerIcon(can)"/>
      </div>
      <!--Title-->
      <div class="as-title">{{canTitle|i18n}}</div>
      <!--Filter-->
      <div v-if="filter"
        class="as-filter">
          <component 
            :is="fltComType"
            v-bind="FilterComConf"
            :value="myFilterValue"
            @change="OnFilterChanged"
            /></div>
    </div>
    <!--
      component
    -->
    <div class="as-box-list">
      <component :is="CanListComType"
        class="as-box-main ti-fill-parent"
        v-bind="CanListComConf"
        @select="OnCanListSelected"/>
    </div>
    <!--
      Foot
    -->
    <div class="as-box-foot">
      <span>{{'total-count'|i18n({nb:can.data.length})}}</span>
    </div>
  </div>
  <!--=========================================
    Buttons
  -->
  <div class="as-buttons">
    <!--Add-->
    <div class="as-btn is-add"
      @click.left="canListToSel">
      <ti-icon :value="assignButtons.add"/>
    </div>
    <!--Remove-->
    <div class="as-btn is-remove"
      @click.left="selListToCan">
      <ti-icon :value="assignButtons.remove"/>
    </div>
  </div>
  <!--=========================================
    Right: Checked
  -->
  <div class="as-box as-sel-list">
    <!--
      Head
    -->
    <div class="as-box-head">
      <div class="as-list-checker"
        @click.left="OnClickHeadChecker(sel)">
        <ti-icon :value="GetHeadCheckerIcon(sel)"/>
      </div>
      <div class="as-title">{{selTitle|i18n}}</div>
      <div class="as-actions">
        <ti-actionbar v-bind="SelActions"/>
      </div>
    </div>
    <!--
      component
    -->
    <div class="as-box-list">
      <component :is="SelListComType"
        class="as-box-main ti-fill-parent"
        v-bind="SelListComConf"
        @select="OnSelListSelected"/>
    </div>
    <!--
      Foot
    -->
    <div class="as-box-foot">
      <span>{{'total-count'|i18n({nb:sel.data.length})}}</span>
    </div>
  </div>
</div>`);
//========================================
// JOIN <ti-transfer.mjs> ti/com/ti/transfer/ti-transfer.mjs
//========================================
Ti.Preload("ti/com/ti/transfer/ti-transfer.mjs", TI_PACK_EXPORTS['ti/com/ti/transfer/ti-transfer.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/transfer/_com.json
//========================================
Ti.Preload("ti/com/ti/transfer/_com.json", {
  "name" : "ti-transfer",
  "globally" : true,
  "template" : "./ti-transfer.html",
  "props" : "./ti-transfer-props.mjs",
  "mixins" : ["./ti-transfer.mjs"]
});
//========================================
// JOIN <ti-tree.html> ti/com/ti/tree/ti-tree.html
//========================================
Ti.Preload("ti/com/ti/tree/ti-tree.html", `<ti-table
  class="ti-tree"
  :class="TopClass"
  id-by="id"
  icon-by="icon"
  indent-by="indent"
  raw-data-by="rawData"
  :fields="TableFields"
  :data="myTreeTableData"
  :changed-id="changedId"
  :current-id="currentId"
  :checked-ids="checkedIds"
  :multi="multi"
  :dftLabelHoverCopy="false"
  :enableScope="false"
  :row-class-by="rowClassBy"
  :row-checkable="isNodeCheckable"
  :row-selectable="isNodeSelectable"
  :row-cancelable="isNodeCancelable"
  :row-openable="isNodeOpenable"
  :row-hoverable="isNodeHoverable"
  :checkable="checkable"
  :selectable="selectable"
  :cancelable="cancelable"
  :openable="openable"
  :hoverable="hoverable"
  :puppet-mode="puppetMode"
  :width="width"
  :height="height"
  :head="TableHead"
  :border="border"
  :rowNumberBase="rowNumberBase"
  :blank-as="blankAs"
  :auto-scroll-into-view="autoScrollIntoView"
  :columnResizable="columnResizable"
  :keepCustomizedTo="keepCustomizedTo"
  :on-init="OnTableInit"
  @icon="OnRowIconClick"
  @open="OnRowOpen"
  @select="OnRowSelect"
  @cell:item:change="OnCellItemChange"
/>`);
//========================================
// JOIN <ti-tree.mjs> ti/com/ti/tree/ti-tree.mjs
//========================================
Ti.Preload("ti/com/ti/tree/ti-tree.mjs", TI_PACK_EXPORTS['ti/com/ti/tree/ti-tree.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/tree/_com.json
//========================================
Ti.Preload("ti/com/ti/tree/_com.json", {
  "name" : "ti-tree",
  "globally" : true,
  "template" : "./ti-tree.html",
  "mixins" : ["./ti-tree.mjs"],
  "components" : [
    "@com:ti/table"]
});
//========================================
// JOIN <ti-upload-file.html> ti/com/ti/upload/file/ti-upload-file.html
//========================================
Ti.Preload("ti/com/ti/upload/file/ti-upload-file.html", `<div class="ti-upload-file full-field"
  :class="TopClass">
  <!--
    Hidden input file to choose files
  -->
  <input 
    type="file" 
    ref="file" 
    class="ti-hide"
    @change.stop.seft="OnSelectLocalFilesToUpload">
  <!--
    Major preview zone
  -->
  <div ref="thumb"
    class="thumb-con"
    :style="ThumbStyle"
    @mouseleave="showMoreActions=false"
    @click="OnClickToEdit"
    v-drop-files.mask="OnDropFiles">
    <!--
      Preview
    -->
    <ti-obj-thumb 
      :preview="PreviewIcon"
      :progress="progress"
      :show-footer="false"/>
    <!--
      Preview type badge
    -->
    <div
      v-if="hasPreview"
        class="as-preview-type">
          <i v-if="'link'==previewType" class="fas fa-link"></i>
          <i v-else-if="'obj'==previewType" class="fas fa-save"></i>
    </div>
    <!--
      Actions
    -->
    <div ref="actions"
      v-if="isShowActions"
        class="thumb-actions"
        :style="ActionsStyle">
        <div
          v-for="it in TopActionItems"
            class="thumb-opt"
            :class="it.className"
            @click.left.stop="it.handler()"
            @mouseenter.left="OnMouseEnter(it)">
            <ti-icon :value="it.icon"/>
            <span class="it-text">{{it.text|i18n}}</span>
        </div>
    </div>
    <!--
      More Actions
    -->
    <div ref="more"
      v-if="MoreActionItems && showMoreActions"
        class="more-actions">
        <div
          v-for="it in MoreActionItems"
            class="thumb-opt"
            :class="it.className"
            @click.left.stop="it.handler()">
            <ti-icon :value="it.icon"/>
            <span class="it-text">{{it.text|i18n}}</span>
        </div>
    </div>
    <!--//////-->
  </div>
</div>`);
//========================================
// JOIN <ti-upload-file.mjs> ti/com/ti/upload/file/ti-upload-file.mjs
//========================================
Ti.Preload("ti/com/ti/upload/file/ti-upload-file.mjs", TI_PACK_EXPORTS['ti/com/ti/upload/file/ti-upload-file.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/upload/file/_com.json
//========================================
Ti.Preload("ti/com/ti/upload/file/_com.json", {
  "name": "ti-upload-file",
  "globally": true,
  "template": "./ti-upload-file.html",
  "mixins": [
    "./ti-upload-file.mjs"
  ],
  "components": [
    "@com:ti/obj/thumb"
  ]
});
//========================================
// JOIN <ti-upload-file-box.html> ti/com/ti/upload/file-box/ti-upload-file-box.html
//========================================
Ti.Preload("ti/com/ti/upload/file-box/ti-upload-file-box.html", `<div class="ti-upload-file-box full-field"
  :class="TopClass"
  v-drop-files.mask="OnDropFiles">
  <!--
    Hidden input file to choose files
  -->
  <input 
    type="file" 
    ref="file" 
    class="ti-hide"
    @change.stop.seft="OnSelectLocalFilesToUpload">
  <!--
    Major preview zone
  -->
  <div class="box-item">
    <!------------Prefix icon------------>
    <div class="box-item-icon"
      @mouseenter.left="OnMouseEnterPrefix"
      @mouseleave.left="OnMouseLeaverPrefix"
      @click.left="OnRemove">
      <TiIcon  :value="PreviewIcon"/>
    </div>
    <!------------box content------------>
    <div class="box-item-text">
      <a v-if="hasHref" :href="href" @click.left.prevent>{{BoxItemText}}</a>
      <span v-else>{{BoxItemText}}</span>
    </div>
    <!------------Suffix Menu------------>
    <TiActionbar class="box-item-menu" :items="ActionItems"/>
    <!----------Upload prcessing-------->
    <div v-if="isShowProgress"
      class="as-progress ti-progress-bar">
      <b class="bar-outer">
        <em class="bar-inner" 
            :style="ProgressStyle"></em>
        <span class="bar-tip">{{ProgressTip}}</span>  
      </b>
    </div>
  </div>

</div>`);
//========================================
// JOIN <ti-upload-file-box.mjs> ti/com/ti/upload/file-box/ti-upload-file-box.mjs
//========================================
Ti.Preload("ti/com/ti/upload/file-box/ti-upload-file-box.mjs", TI_PACK_EXPORTS['ti/com/ti/upload/file-box/ti-upload-file-box.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/upload/file-box/_com.json
//========================================
Ti.Preload("ti/com/ti/upload/file-box/_com.json", {
  "name": "ti-upload-file-box",
  "globally": true,
  "template": "./ti-upload-file-box.html",
  "mixins": "./ti-upload-file-box.mjs"
});
//========================================
// JOIN <ti-upload-multi-files.html> ti/com/ti/upload/multi-files/ti-upload-multi-files.html
//========================================
Ti.Preload("ti/com/ti/upload/multi-files/ti-upload-multi-files.html", `<div 
  class="ti-upload-multi-files full-field"
  :class="TopClass"><div class="as-wrapper">
  <!--
    Hidden input file to choose files
  -->
  <input 
    type="file" 
    ref="file" 
    class="ti-hide"
    multiple
    @change.stop.seft="OnSelectLocalFilesToUpload">
  <!--
    Main container
  -->
  <div class="as-main" v-drop-files.mask="OnDropFiles" ref="itemsCon">
    <!--
      Show items (Uploaded and Uploading)
    -->
    <div
      v-for="(it,index) in PreviewItems"
        :key="it.key || it.id || index"
        class="file-item as-item"
        :class="it.className">
        <!--Preview-->
        <TiObjThumb
          :style="ItemStyle"
          :preview="it.thumb"
          :title="it.text"
          :progress="it.progress"
          :show-footer="showItemText"
          :previewStyle="ItemPreviewStyle"/>
        <!--Actions-->
        <div class="item-actions">
          <ul>
              <!--Action:Remove-->
              <li v-if="isShowItemRemoveBtn" @click.left="OnRemoveItem(it)">
                <i class="zmdi zmdi-close-circle"></i>
                <span>{{'i18n:remove'|i18n}}</span>
              </li>
              <!--Action:Open-->
              <li @click.left="OnOpenItem(it)" v-if="it.id">
                <i class="zmdi zmdi-open-in-new"></i>
                <span>{{'i18n:open'|i18n}}</span>
              </li>
              <!--Action:Download-->
              <li @click.left="OnDownloadItem(it)" v-if="it.id">
                <i class="zmdi zmdi-download"></i>
                <span>{{'i18n:download'|i18n}}</span>
              </li>
          </ul>
        </div>
    </div>
    <!--
      Show the new icon
    -->
    <div 
      v-if="isShowAddBtn"
        class="file-item as-new"
        :style="ItemStyle"
        @click.left="OnClickAdd"><i class="zmdi zmdi-plus"></i></div>
    <!--
      Show placeholder
    -->
    <TiLoading
      v-if="!isShowAddBtn && !hasItems"
        v-bind="blankAs"/>
  </div>
  <!--
    Global actions
  -->
  <div
    v-if="isShowActions"
      class="as-actions">
      <!--Clean-->
      <div class="action-item" @click.left="OnClean">
        <i class="fas fa-trash-alt"></i>
        <span>{{'i18n:clean'|i18n}}</span>
      </div>
  </div>
</div></div>`);
//========================================
// JOIN <ti-upload-multi-files.mjs> ti/com/ti/upload/multi-files/ti-upload-multi-files.mjs
//========================================
Ti.Preload("ti/com/ti/upload/multi-files/ti-upload-multi-files.mjs", TI_PACK_EXPORTS['ti/com/ti/upload/multi-files/ti-upload-multi-files.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/upload/multi-files/_com.json
//========================================
Ti.Preload("ti/com/ti/upload/multi-files/_com.json", {
  "name" : "ti-upload-multi-files",
  "globally" : true,
  "template" : "./ti-upload-multi-files.html",
  "mixins" : ["./ti-upload-multi-files.mjs"]
});
//========================================
// JOIN <ti-upload-multi-files-box.html> ti/com/ti/upload/multi-files-box/ti-upload-multi-files-box.html
//========================================
Ti.Preload("ti/com/ti/upload/multi-files-box/ti-upload-multi-files-box.html", `<div 
  class="ti-upload-multi-files-box full-field"
  :class="TopClass">
  <!--
    Hidden input file to choose files
  -->
  <input 
    type="file" 
    ref="file" 
    class="ti-hide"
    multiple
    @change.stop.seft="OnSelectLocalFilesToUpload">
  <!--
    Main container
  -->
  <div class="as-main" v-drop-files.mask="OnDropFiles" ref="itemsCon">
    <!--
      Show items (Uploaded and Uploading)
    -->
    <div
      v-for="(it,index) in FileItems"
        :key="it.key || it.id || index"
        class="file-item as-item"
        :class="it.className">
        <!------------Prefix icon------------>
        <div class="box-item-icon">
          <TiIcon  :value="it.thumb"/>
        </div>
        <!------------box content------------>
        <div class="box-item-text">
          <a v-if="it.href" :href="it.href" @click.left.prevent>{{it.text}}</a>
          <span v-else>{{it.text}}</span>
        </div>
        <!------------Suffix Menu------------>
        <div class="box-item-menu">
          <a
            v-for="a in ItemActions"
              :key="a.name"
              :data-ti-tip="a.tip"
              data-ti-tip-mode="V">
              <i :class="a.icon"></i>
          </a>
        </div>
        <!-------------- <end> -------------->
      </div>
  </div>
</div>`);
//========================================
// JOIN <ti-upload-multi-files-box.mjs> ti/com/ti/upload/multi-files-box/ti-upload-multi-files-box.mjs
//========================================
Ti.Preload("ti/com/ti/upload/multi-files-box/ti-upload-multi-files-box.mjs", TI_PACK_EXPORTS['ti/com/ti/upload/multi-files-box/ti-upload-multi-files-box.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/upload/multi-files-box/_com.json
//========================================
Ti.Preload("ti/com/ti/upload/multi-files-box/_com.json", {
  "name": "ti-upload-multi-files-box",
  "globally": true,
  "template": "./ti-upload-multi-files-box.html",
  "mixins": "./ti-upload-multi-files-box.mjs"
});
//========================================
// JOIN <wall-tile.html> ti/com/ti/wall/com/wall-tile/wall-tile.html
//========================================
Ti.Preload("ti/com/ti/wall/com/wall-tile/wall-tile.html", `<div class="wall-tile"
  :class="TopClass"
  :style="TopStyle">
  <div v-if="myCom"
    class="tile-con"
    @click.left="OnClickRow"
    @dblclick.left="OnDblClickRow"
    v-ti-activable>
    <component   
      :is="myCom.comType" 
      v-bind="myCom.comConf"/>
  </div>
</div>`);
//========================================
// JOIN <wall-tile.mjs> ti/com/ti/wall/com/wall-tile/wall-tile.mjs
//========================================
Ti.Preload("ti/com/ti/wall/com/wall-tile/wall-tile.mjs", TI_PACK_EXPORTS['ti/com/ti/wall/com/wall-tile/wall-tile.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/wall/com/wall-tile/_com.json
//========================================
Ti.Preload("ti/com/ti/wall/com/wall-tile/_com.json", {
  "name" : "wall-tile",
  "globally" : false,
  "template" : "./wall-tile.html",
  "methods"  : "@com:ti/support/field_display.mjs",
  "mixins" : [
    "@com:ti/support/list_item_mixins.mjs",
    "./wall-tile.mjs"]
});
//========================================
// JOIN <ti-wall.html> ti/com/ti/wall/ti-wall.html
//========================================
Ti.Preload("ti/com/ti/wall/ti-wall.html", `<div class="ti-wall" :class="TopClass" @click="OnClickTop" @scroll="OnScroll" v-ti-activable>
  <!--
    Loading
  -->
  <ti-loading 
    v-if="isDataPending"
      class="nil-data"
      v-bind="loadingAs" />
  <!--
    Blank
  -->
  <ti-loading
    v-else-if="isDataEmpty"
      class="nil-data"
      v-bind="BlankLoadingConf"/>
  <!--
    Show tiles
  -->
  <div v-else class="wall-con">
    <!--tiles-->
    <template v-for="row in TheData">
      <!-- render tile-group  -->
      <div class="wall-group-title" v-if="row.rawData.grp">{{row.rawData.grp}}</div>
      <!-- render tile -->
      <wall-tile v-else :key="row.id" :row-id="row.id" :index="row.index" :display="ItemDisplay" :data="row.rawData"
        :current-id="theCurrentId" :checked-ids="theCheckedIds" :changed-id="changedId" :checkable="checkable"
        :selectable="selectable" :openable="openable" :class-name="itemClassName" :width="itemWidth"
        :height="itemHeight" @select="OnRowSelect" @open="OnRowOpen" />
    </template>
    <!--Blank Tile-->
    <div v-for="bc in BlankCols" class="wall-tile" :style="bc">
    </div>
  </div>
  <!--
    Show load more
  -->
  <div ref="more" v-if="showLoadMore" class="as-load-more">
    <div ref="moreBtn" class="as-load-more-btn" @click.left="OnClickLoadMore">
      <span class="as-icon">
        <TiIcon :value="LoadingMoreBtn.icon" />
      </span>
      <span class="as-text">{{LoadingMoreBtn.text | i18n}}</span>
    </div>
  </div>
</div>`);
//========================================
// JOIN <ti-wall.mjs> ti/com/ti/wall/ti-wall.mjs
//========================================
Ti.Preload("ti/com/ti/wall/ti-wall.mjs", TI_PACK_EXPORTS['ti/com/ti/wall/ti-wall.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/wall/_com.json
//========================================
Ti.Preload("ti/com/ti/wall/_com.json", {
  "name" : "ti-wall",
  "globally" : true,
  "template" : "./ti-wall.html",
  "props" : "@com:ti/support/list_props.mjs",
  "methods" : "@com:ti/support/field_display.mjs",
  "mixins" : [
    "@com:ti/support/list_mixins.mjs",
    "./ti-wall.mjs"
  ],
  "components" : [
    "./com/wall-tile",
    "@com:ti/label"
  ]
});
//========================================
// JOIN <wizard-step.html> ti/com/ti/wizard/com/wizard-step/wizard-step.html
//========================================
Ti.Preload("ti/com/ti/wizard/com/wizard-step/wizard-step.html", `<component 
  class="ti-fill-parent"
  :is="comType"
  v-bind="comConf"
  @change="OnChange"/>`);
//========================================
// JOIN <wizard-step.mjs> ti/com/ti/wizard/com/wizard-step/wizard-step.mjs
//========================================
Ti.Preload("ti/com/ti/wizard/com/wizard-step/wizard-step.mjs", TI_PACK_EXPORTS['ti/com/ti/wizard/com/wizard-step/wizard-step.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/wizard/com/wizard-step/_com.json
//========================================
Ti.Preload("ti/com/ti/wizard/com/wizard-step/_com.json", {
  "name" : "wizard-step",
  "globally" : true,
  "template" : "./wizard-step.html",
  "mixins" : ["./wizard-step.mjs"]
});
//========================================
// JOIN <ti-wizard.html> ti/com/ti/wizard/ti-wizard.html
//========================================
Ti.Preload("ti/com/ti/wizard/ti-wizard.html", `<div class="ti-wizard ti-fill-parent"
  :class="TopClass"><div class="wizard-con">
  <!--
    Header Indicators
  -->
  <div class="as-head">
    <!--Title-->
    <div
      v-if="TheTitle" 
        class="as-title">{{TheTitle | i18n}}</div>
    <!--Step indicators-->
    <ul>
      <li v-for="(step, index) in StepHeads"
        :key="step.stepKey"
        :class="step.className"
        @click.left="OnClickHeadItem(index, step)">
        <span class="as-indicator">
          <span class="as-line at-l"></span>
          <span class="as-dot">{{index+1}}</span>
          <span class="as-line at-r"></span>
        </span>
        <span class="as-text">{{step.title | i18n}}</span>
      </li>
    </ul>
  </div>
  <!--
    Current Step Component
  -->
  <div class="as-main">
    <WizardStep 
      v-bind="CurrentStep"
      @data:change="OnDataChange"
      @step:change="OnStepChange"
      @change:title="OnTitleChange"/>
  </div>
  <!--
    Footer Default Buttons
  -->
  <div v-if="BtnPrev || BtnNext"
    class="as-foot">
      <!--
        Btn: Prev
      -->
      <div
        v-if="BtnPrev" 
          class="as-btn is-prev"
          :class="BtnPrev.className"
          @click="OnClickBtnPrev">
          <span v-if="BtnPrev.icon"
            class="as-icon">
            <ti-icon :value="BtnPrev.icon"/>
          </span>
          <span class="as-sep"></span>
          <span class="as-text">{{BtnPrev.text|i18n}}</span>
      </div>
      <!--Sep-->
      <div class="as-space"></div>
      <!--
        Btn: Next
      -->
      <div
        v-if="BtnNext" 
          class="as-btn is-next"
          :class="BtnNext.className"
          @click="OnClickBtnNext">
          <span v-if="BtnNext.icon"
            class="as-icon">
            <ti-icon :value="BtnNext.icon"/>
          </span>
          <span class="as-sep"></span>
          <span class="as-text">{{BtnNext.text|i18n}}</span>
      </div>
  </div>
</div></div>`);
//========================================
// JOIN <ti-wizard.mjs> ti/com/ti/wizard/ti-wizard.mjs
//========================================
Ti.Preload("ti/com/ti/wizard/ti-wizard.mjs", TI_PACK_EXPORTS['ti/com/ti/wizard/ti-wizard.mjs']);
//========================================
// JOIN <_com.json> ti/com/ti/wizard/_com.json
//========================================
Ti.Preload("ti/com/ti/wizard/_com.json", {
  "name" : "ti-wizard",
  "globally" : true,
  "template" : "./ti-wizard.html",
  "mixins" : ["./ti-wizard.mjs"],
  "components" : [
    "./com/wizard-step"]
});
//========================================
// JOIN <auth-passwd.html> ti/com/web/auth/passwd/auth-passwd.html
//========================================
Ti.Preload("ti/com/web/auth/passwd/auth-passwd.html", `<div 
  class="web-auth-passwd web-simple-form" 
  :class="TopClass">
  <!--
    Reset Success
  -->
  <template v-if="doing">
    <div class="as-ing">
      <ti-loading class="as-hug" text="auth-reset-passwd-ing"/>
    </div>
  </template>
  <!--
    Reset Success
  -->
  <template v-else-if="myResetResult">
    <div
      class="as-done"
      :class="ResetDoneClass">
      <!--Loading Icon-->
      <ti-loading
        class="as-hug"
        :icon="ResetDoneIcon"
        :text="ResetDoneText"/>
      <!--Links-->
      <div class="as-links">
        <a @click.left="OnResetAgain">{{'auth-reset-passwd-again'|i18n}}</a>
      </div>
    </div>
  </template>
  <!--
    Reset form
  -->
  <template v-else>
    <!--
      Head text
    -->
    <header>{{ModeTitle|i18n}}</header>
    <!--
      Main Area
    -->
    <section>
      <!--
        ===================================================
        Mode: byVCode
      -->
      <template v-if="isByVode">
        <!--
          Input: name
        -->
        <div class="as-input">
          <input 
            spellcheck="false"
            :placeholder="VCodeNameTip|i18n"
            v-model="myForm.name"></div>
        <!--
          Input: vcode
        -->
        <div class="as-input">
          <input 
            spellcheck="false"
            :placeholder="VCodeCodeTip|i18n"
            v-model="myForm.vcode">
          <span>
            <em v-if="delay>0">{{'auth-vcode-delay'|i18n({sec:delay})}}</em>
            <a v-else
              @click="OnGetVcode">{{VCodeGetTip|i18n}}</a>
          </span>
        </div>
      </template>
      <!--
        ===================================================
        Mode: byPasswd
      -->
      <template v-else>
        <!--
          Passwd: old
        -->
        <div class="as-input">
          <input 
            spellcheck="false"
            :type="myPassInputType"
            :placeholder="'auth-reset-passwd-old'|i18n"
            v-model="myForm.passwd_old"></div>
      </template>
      <!--
        ===================================================
      -->
      <!--
        Passwd: new
      -->
      <div class="as-input" :class="PasswdClass">
        <input 
          spellcheck="false"
          :type="myPassInputType"
          :placeholder="'auth-reset-passwd-new'|i18n"
          v-model="myForm.passwd_new">
        <span 
          class="as-passwd-type-toggle"
          @click="OnTogglePasswdInputType">
          <ti-icon :value="PasswdInputTypeIcon"/>
        </span>
      </div>
      <!--
        Passwd: Indicator
      -->
      <div class="as-passtip">
        <!--Invalid pass-->
        <div 
          v-if="-2 == myPassTip"
            class="is-invalid">{{'passwd-invalid-char'|i18n}}</div>
        <!--No password-->
        <div 
          v-else-if="-1 == myPassTip"
            class="is-tip">{{'passwd-tip'|i18n}}</div>
        <!--Show tip bar-->
        <div 
          v-else
            class="is-tipbar">
            <span class="is-weak">{{'i18n:passwd-sl-1' | i18n}}</span>
            <u
              v-for="it in PasswdTipBar"
                :class="it.className"></u>
            <span class="is-strong">{{'i18n:passwd-sl-5' | i18n}}</span>
        </div>
      </div>
      <!--
        Passwd: repeat
      -->
      <div class="as-input" :class="PasswdClass">
        <input 
          spellcheck="false"
          :type="myPassInputType"
          :placeholder="'auth-reset-passwd-ren'|i18n"
          v-model="myForm.passwd_ren"></div>
      <!--
        Submit button
      -->
      <div class="as-btn">
        <button 
          :class="SubmitBtnClass"
          @click="OnSubmit">{{SubmitBtnText|i18n}}</button>
      </div>
      <!--
        Sublinks: switch mode / passwd-back
      -->
      <div 
        v-if="hasAltModes"
          class="as-links">
          <div
            v-for="it in AltModes"
              class="as-item">
              <a @click.left="OnChangeMode(it)">{{it.text|i18n}}</a>
          </div>
      </div>
    </section>
  </template>
</div>`);
//========================================
// JOIN <auth-passwd.mjs> ti/com/web/auth/passwd/auth-passwd.mjs
//========================================
Ti.Preload("ti/com/web/auth/passwd/auth-passwd.mjs", TI_PACK_EXPORTS['ti/com/web/auth/passwd/auth-passwd.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/auth/passwd/_com.json
//========================================
Ti.Preload("ti/com/web/auth/passwd/_com.json", {
  "name" : "web-auth-passwd",
  "globally" : true,
  "template" : "./auth-passwd.html",
  "mixins" : ["./auth-passwd.mjs"]
});
//========================================
// JOIN <auth-signup.html> ti/com/web/auth/signup/auth-signup.html
//========================================
Ti.Preload("ti/com/web/auth/signup/auth-signup.html", `<div 
  class="web-auth-signup web-simple-form" 
  :class="TopClass"
  v-ti-activable>
  <!--
    Top Logo
  -->
  <div 
    v-if="logo"
      class="as-logo">
      <ti-icon :value="logo"/>
  </div>
  <!--
    Head text
  -->
  <header>{{Msgs.title|i18n}}</header>
  <!--
    Main Area
  -->
  <section>
    <!--
      Input: Name
    -->
    <div class="as-input" :class="NameClass">
      <input 
        spellcheck="false"
        :placeholder="Msgs.nameTip|i18n"
        v-model="data.name"></div>
    <!--
      Input: Password
    -->
    <div class="as-input" :class="PasswdClass">
      <input 
        spellcheck="false"
        :type="PasswdInputType"
        :placeholder="Msgs.passwdTip|i18n"
        v-model="data.passwd">
      <span v-if="Msgs.codeGet">
        <em v-if="delay>0">{{'auth-vcode-delay'|i18n({sec:delay})}}</em>
        <a v-else
          @click="OnGetVcode">{{Msgs.codeGet|i18n}}</a>
      </span>
    </div>
    <!--
      Submit button
    -->
    <div class="as-btn">
      <button @click="OnAuthSubmit">{{Msgs.btnText|i18n}}</button>
    </div>
    <!--
      Sublinks: switch mode / passwd-back
    -->
    <ul 
      v-if="hasToggleMode"
        class="as-links">
        <li v-if="Msgs.linkLeft"
          class="at-left">
          <a @click="OnChangeMode">{{Msgs.linkLeft   |i18n}}</a></li>
        <li v-if="Msgs.linkRight"
          class="at-right">
          <a>{{Msgs.linkRight |i18n}}</a></li>
    </ul>
  </section>
  <!--
    Bottom link for oauth2
  -->
  <template v-if="hasOAuth2">
    <div class="as-spacing"></div>
    <footer class="as-bottom-oauth2">
      <a
        v-for="it in OAuth2Items"
          :href="it.href"
          :title="it.tip">
          <ti-icon :value="it.icon"/>
      </a>
    </footer>
  </template>
  <!--
    Bottom tip
  -->
  <template v-if="hasBottomTip">
    <footer
      class="as-bottom-tip">
      <div
        v-if="bottomTipAsHtml"
          v-html="bottomTip"></div>
      <div
        v-else>{{bottomTip}}</div>
    </footer>
  </template>
</div>`);
//========================================
// JOIN <auth-signup.mjs> ti/com/web/auth/signup/auth-signup.mjs
//========================================
Ti.Preload("ti/com/web/auth/signup/auth-signup.mjs", TI_PACK_EXPORTS['ti/com/web/auth/signup/auth-signup.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/auth/signup/_com.json
//========================================
Ti.Preload("ti/com/web/auth/signup/_com.json", {
  "name" : "web-auth-signup",
  "globally" : true,
  "template" : "./auth-signup.html",
  "mixins" : ["./auth-signup.mjs"]
});
//========================================
// JOIN <web-footer.html> ti/com/web/footer/web-footer.html
//========================================
Ti.Preload("ti/com/web/footer/web-footer.html", `<div class="ti-web-footer">
  I footer
</div>`);
//========================================
// JOIN <web-footer.mjs> ti/com/web/footer/web-footer.mjs
//========================================
Ti.Preload("ti/com/web/footer/web-footer.mjs", TI_PACK_EXPORTS['ti/com/web/footer/web-footer.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/footer/_com.json
//========================================
Ti.Preload("ti/com/web/footer/_com.json", {
  "name" : "web-footer",
  "globally" : true,
  "template" : "./web-footer.html",
  "mixins"   : ["./web-footer.mjs"]
});
//========================================
// JOIN <leaflet-mock-methods.mjs> ti/com/web/gis/leaflet/leaflet-mock-methods.mjs
//========================================
Ti.Preload("ti/com/web/gis/leaflet/leaflet-mock-methods.mjs", TI_PACK_EXPORTS['ti/com/web/gis/leaflet/leaflet-mock-methods.mjs']);
//========================================
// JOIN <leaflet-redraw-methods.mjs> ti/com/web/gis/leaflet/leaflet-redraw-methods.mjs
//========================================
Ti.Preload("ti/com/web/gis/leaflet/leaflet-redraw-methods.mjs", TI_PACK_EXPORTS['ti/com/web/gis/leaflet/leaflet-redraw-methods.mjs']);
//========================================
// JOIN <leaflet-tiles-methods.mjs> ti/com/web/gis/leaflet/leaflet-tiles-methods.mjs
//========================================
Ti.Preload("ti/com/web/gis/leaflet/leaflet-tiles-methods.mjs", TI_PACK_EXPORTS['ti/com/web/gis/leaflet/leaflet-tiles-methods.mjs']);
//========================================
// JOIN <web-gis-leaflet-props.mjs> ti/com/web/gis/leaflet/web-gis-leaflet-props.mjs
//========================================
Ti.Preload("ti/com/web/gis/leaflet/web-gis-leaflet-props.mjs", TI_PACK_EXPORTS['ti/com/web/gis/leaflet/web-gis-leaflet-props.mjs']);
//========================================
// JOIN <web-gis-leaflet.html> ti/com/web/gis/leaflet/web-gis-leaflet.html
//========================================
Ti.Preload("ti/com/web/gis/leaflet/web-gis-leaflet.html", `<div class="web-gsi-leaflet ti-fill-parent"
  :class="TopClass"
  :style="TopStyle">
  <!--
    Main for the map
  -->
  <div class="wgl-map-main ti-fill-parent" ref="main"></div>
  <!--
    Tip Info
  -->
  <div 
    v-if="isShowInfo"
      class="wgl-map-info">
      <!--
        Zoom
      -->
      <div class="info-ele" v-if="ShowInfo.zoom">
        <i class="fas fa-search-location"></i>
        <span>{{geo.zoom}}</span>
      </div>
      <!--
        Center
      -->
      <div class="info-ele" v-if="ShowInfo.center">
        <i class="fas fa-arrows-alt"></i>
        <span>{{GeoStr(geo.center.lat)}}, {{GeoStr(geo.center.lng)}}</span>
      </div>
      <!--
        Latitude range
      -->
      <div class="info-ele" v-if="ShowInfo.latRange">
        <i class="fas fa-arrows-alt-v"></i>
        <span>{{GeoStr(geo.N)}}</span>/<span>{{GeoStr(geo.S)}}</span>
      </div>
      <!--
        Longitude range
      -->
      <div class="info-ele" v-if="ShowInfo.lngRange">
        <i class="fas fa-arrows-alt-h"></i>
        <span>{{GeoStr(geo.W)}}</span>/<span>{{GeoStr(geo.E)}}</span>
      </div>
      <!--
        Pointer Hover
      -->
      <div 
        v-if="ShowInfo.pointerHover && !_.isEmpty(pointerHover)"
          class="info-ele">
          <i class="fas fa-map-marker"></i>
          <span>{{GeoStr(pointerHover.lat)}}, {{GeoStr(pointerHover.lng)}}</span>
      </div>
      <!--
        Pointer Click
      -->
      <div 
        v-if="ShowInfo.pointerClick && !_.isEmpty(pointerClick)"
          class="info-ele">
          <i class="fas fa-mouse" @click.left="pointerClick={}"></i>
          <span>{{GeoStr(pointerClick.lat)}}, {{GeoStr(pointerClick.lng)}}</span>
      </div>
  </div>
  <!--
    Loading Info
  -->
  <TiLoading
    v-if="loading"
      v-bind="loadingAs"/>
</div>`);
//========================================
// JOIN <web-gis-leaflet.mjs> ti/com/web/gis/leaflet/web-gis-leaflet.mjs
//========================================
Ti.Preload("ti/com/web/gis/leaflet/web-gis-leaflet.mjs", TI_PACK_EXPORTS['ti/com/web/gis/leaflet/web-gis-leaflet.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/gis/leaflet/_com.json
//========================================
Ti.Preload("ti/com/web/gis/leaflet/_com.json", {
  "name" : "web-gis-leaflet",
  "globally" : true,
  "template" : "./web-gis-leaflet.html",
  "props"   : "./web-gis-leaflet-props.mjs",
  "methods" : [
      "./leaflet-tiles-methods.mjs",
      "./leaflet-redraw-methods.mjs",
      "./leaflet-mock-methods.mjs"
    ],
  "mixins"   : ["./web-gis-leaflet.mjs"],
  "deps" : [
    "@deps:leaflet/leaflet.js",
    "@deps:leaflet/leaflet.css"
  ]
});
//========================================
// JOIN <web-media-image.html> ti/com/web/media/image/web-media-image.html
//========================================
Ti.Preload("ti/com/web/media/image/web-media-image.html", `<a class="web-media-image"
  :class="TopClass"
  :title="tip"
  :href="TheHref"
  :target="isNewTab ? '_blank' : '_self'"
  :style="TopStyle"
  @click.left="OnClickTop"
  @mousemove="OnMouseMove"
  @mouseenter="OnMouseEnter"
  @mouseleave="OnMouseLeave">
  <!--Image-->
  <div class="as-img-con"
    :style="imageConStyle"><span :style="imageStyle">
    <img ref="img"
      v-if="TheSrc"
        :src="TheSrc"
        draggable="false"
        @load="OnImageLoaded"/></span>
    <!-- Tags -->
    <div
      v-if="TheTags"
        class="as-tags"
        :style="tagsStyle">
        <div
          v-for="tag of TheTags"
            class="as-tag-item"
            :class="tag.className"
            :style="tag.style">
            <span>{{tag.text}}</span>
        </div>
    </div>
  </div>
  <!--Text-->
  <div ref="text"
    v-if="TheText || TheBrief"
      class="as-text"
      :style="textStyle">
      <div
        v-if="TheText"
          class="as-title"
          :style="titleStyle"><span>{{TheText}}</span></div>
      <div
        v-if="TheBrief"
          class="as-brief"
          :style="briefStyle"><span>{{TheBrief}}</span></div>
  </div>
  <!--Zoom len-->
  <div
    v-if="isWaitEnterCooling"
      class="as-cooling-tip">
      <i class="fas fa-cog fa-spin"></i>
  </div>
  <!--Zoom len-->
  <div v-if="zoomLens"
    class="as-zoomlen"
    :style="ZoomLenConStyle">
      <!--Picker-->
      <div ref="pick"
        class="as-zoom-pick"
        :style="ZoomLenPickStyle"></div>
      <!--Docker-->
      <div ref="dock"
        class="as-zoom-dock"
        :style="ZoomLenDockStyle"></div>
  </div>
</a>`);
//========================================
// JOIN <web-media-image.mjs> ti/com/web/media/image/web-media-image.mjs
//========================================
Ti.Preload("ti/com/web/media/image/web-media-image.mjs", TI_PACK_EXPORTS['ti/com/web/media/image/web-media-image.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/media/image/_com.json
//========================================
Ti.Preload("ti/com/web/media/image/_com.json", {
  "name" : "web-media-image",
  "globally" : true,
  "template" : "./web-media-image.html",
  "mixins"   : ["./web-media-image.mjs"]
});
//========================================
// JOIN <web-media-player.html> ti/com/web/media/player/web-media-player.html
//========================================
Ti.Preload("ti/com/web/media/player/web-media-player.html", `<div class="ti-web-image">
  
</div>`);
//========================================
// JOIN <web-media-player.mjs> ti/com/web/media/player/web-media-player.mjs
//========================================
Ti.Preload("ti/com/web/media/player/web-media-player.mjs", TI_PACK_EXPORTS['ti/com/web/media/player/web-media-player.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/media/player/_com.json
//========================================
Ti.Preload("ti/com/web/media/player/_com.json", {
  "name" : "web-media-player",
  "globally" : true,
  "template" : "./web-media-player.html",
  "mixins"   : ["./web-media-player.mjs"],
  "components": [
    "@com:net/youtube/player"
  ]
});
//========================================
// JOIN <web-media.html> ti/com/web/media/web-media.html
//========================================
Ti.Preload("ti/com/web/media/web-media.html", `<div class="web-media"
  :class="TopClass"
  :style="TopStyle"><div class="as-con">
  <!--Main media component-->
  <component
    class="web-media-com ti-fill-parent"
    :is="MediaCom.comType"
    v-bind="MediaCom.comConf"/>
  <!--Show switcher-->
  <div
    v-if="showIconPrev || showIconNext"
      class="as-switcher">
      <!--Left-->
      <div 
        v-if="showIconPrev"
          class="as-switcher-btn at-left">
          <span @click.left="OnClickPrev">
            <ti-icon :value="iconPrev"/>
          </span>
      </div>
      <!--Right-->
      <div
        v-if="showIconNext"
          class="as-switcher-btn at-right">
          <span @click.left="OnClickNext">
            <ti-icon :value="iconNext"/>
          </span>
      </div>
  </div>
</div></div>`);
//========================================
// JOIN <web-media.mjs> ti/com/web/media/web-media.mjs
//========================================
Ti.Preload("ti/com/web/media/web-media.mjs", TI_PACK_EXPORTS['ti/com/web/media/web-media.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/media/_com.json
//========================================
Ti.Preload("ti/com/web/media/_com.json", {
  "name" : "web-media",
  "globally" : true,
  "template" : "./web-media.html",
  "mixins"   : ["./web-media.mjs"],
  "components" : [
    "@com:web/media/image",
    "@com:ti/media/video",
    "@com:ti/media/audio",
    "@com:net/youtube/player"
  ]
});
//========================================
// JOIN <web-meta-article.html> ti/com/web/meta/article/web-meta-article.html
//========================================
Ti.Preload("ti/com/web/meta/article/web-meta-article.html", `<div class="web-meta-article"
  :class="TopClass">
  <!--
    Title
  -->
  <h1
    v-if="title"
      class="as-title">{{title}}</h1>
  <!--
    Information
  -->
  <div
    v-if="hasInfo"
      class="as-info">
      <!--author-->
      <div v-if="author" class="as-author">{{author}}</div>
      <!--PubDateText-->
      <div v-if="PubDateText" class="as-pub-date">{{PubDateText}}</div>
      <!--Watch Count-->
      <div
        v-if="watchCount > 0"
          class="as-watch-count">
            <i class="zmdi zmdi-eye"></i>
            <span>{{watchCount}}</span></div>
      <!--PubDateText-->
      <div v-if="duration" class="as-duration">{{DurationText}}</div>
  </div>
  <!--
    Tags
  -->
  <ul 
  v-if="hasTags"
    class="as-tags">
    <li
      v-for="tag in TheTags">{{tag}}</li></ul>
  <!--
    Brief
  -->
  <blockquote
    v-if="brief"
      class="as-brief">{{brief}}</blockquote>
  <!--
    Bottom line
  -->
  <hr v-if="bottomLine" class="as-bottom-line">
</div>`);
//========================================
// JOIN <web-meta-article.mjs> ti/com/web/meta/article/web-meta-article.mjs
//========================================
Ti.Preload("ti/com/web/meta/article/web-meta-article.mjs", TI_PACK_EXPORTS['ti/com/web/meta/article/web-meta-article.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/meta/article/_com.json
//========================================
Ti.Preload("ti/com/web/meta/article/_com.json", {
  "name" : "web-meta-article",
  "globally" : true,
  "template" : "./web-meta-article.html",
  "mixins"   : ["./web-meta-article.mjs"]
});
//========================================
// JOIN <web-meta-badge.html> ti/com/web/meta/badge/web-meta-badge.html
//========================================
Ti.Preload("ti/com/web/meta/badge/web-meta-badge.html", `<div class="web-meta-badge"
  :class="TopClass">
  <!--==============================-->
  <ti-icon
    v-if="TheIcon"
      class="as-icon"
      :value="TheIcon"
      :style="IconStyle"/>
  <!--==============================-->
  <div
    v-if="TheTitle"
      class="as-title">{{TheTitle | i18n}}</div>
  <!--==============================-->
  <div
    v-if="TheBrief"
      class="as-brief">{{TheBrief | i18n}}</div>
  <!--==============================-->
  <div
    v-if="hasLinks"
      class="as-links">
      <ul>
        <li
          v-for="li in TheLinks">
            <a 
              @click.left="OnClickLink(li, $event)"
              :href="li.href"
              :target="li.newtab?'_blank':'_self'">
                <ti-icon v-if="li.icon" :value="li.icon"/>
                <span>{{li.text | i18n}}</span></a>
        </li>
      </ul>
  </div>
</div>`);
//========================================
// JOIN <web-meta-badge.mjs> ti/com/web/meta/badge/web-meta-badge.mjs
//========================================
Ti.Preload("ti/com/web/meta/badge/web-meta-badge.mjs", TI_PACK_EXPORTS['ti/com/web/meta/badge/web-meta-badge.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/meta/badge/_com.json
//========================================
Ti.Preload("ti/com/web/meta/badge/_com.json", {
  "name" : "web-meta-badge",
  "globally" : true,
  "template" : "./web-meta-badge.html",
  "mixins"   : ["./web-meta-badge.mjs"]
});
//========================================
// JOIN <web-meta-commodity.html> ti/com/web/meta/commodity/web-meta-commodity.html
//========================================
Ti.Preload("ti/com/web/meta/commodity/web-meta-commodity.html", `<div class="web-meta-commodity"
  :class="TopClass">
  <div class="as-main">
    <!--
      Left: Preview
    -->
    <div
      v-if="previewImageSrc"
        class="at-left">
      <WebMediaImage
        :src="previewImageSrc"/>
    </div>
    <!--
      Right: Information
    -->
    <div class="at-right">
      <!--Title-->
      <h1>{{MetaTitle}}</h1>
      <div class="as-form">
        <ti-form
          v-bind="form"
          :data="FormData"
          @change="OnFormChanged"/>
      </div>
      <div class="as-btns">
        <!--Buy Button-->
        <a class="ti-btn" @click="OnClickBuyNow">{{actions.buy|i18n}}</a>
      </div>
    </div>
  </div>
</div>`);
//========================================
// JOIN <web-meta-commodity.mjs> ti/com/web/meta/commodity/web-meta-commodity.mjs
//========================================
Ti.Preload("ti/com/web/meta/commodity/web-meta-commodity.mjs", TI_PACK_EXPORTS['ti/com/web/meta/commodity/web-meta-commodity.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/meta/commodity/_com.json
//========================================
Ti.Preload("ti/com/web/meta/commodity/_com.json", {
  "name" : "web-meta-commodity",
  "globally" : true,
  "template" : "./web-meta-commodity.html",
  "mixins"   : ["./web-meta-commodity.mjs"],
  "components" : [
    "@com:web/meta/preview"
  ]
});
//========================================
// JOIN <order-item.html> ti/com/web/meta/order/com/order-item/order-item.html
//========================================
Ti.Preload("ti/com/web/meta/order/com/order-item/order-item.html", `<div class="as-row order-item">
  <!--Thumb/Title-->
  <div class="as-cell">
    <div class="as-title">
      <ti-icon 
        :value="thumbObj" 
        width=".32rem" 
        height=".32rem"/>
      <span class="as-text">{{title}}</span>
    </div>
  </div>
  <!--price-->
  <div class="as-cell as-price">
    <span>{{price}}</span>
  </div>
  <!--amount-->
  <div class="as-cell as-amount">
    <span>{{amount}}</span>
  </div>
  <!--Total-->
  <div class="as-cell as-fee">
    <em class="ti-num is-md">{{feeText}}</em>
  </div>
</div>`);
//========================================
// JOIN <order-item.mjs> ti/com/web/meta/order/com/order-item/order-item.mjs
//========================================
Ti.Preload("ti/com/web/meta/order/com/order-item/order-item.mjs", TI_PACK_EXPORTS['ti/com/web/meta/order/com/order-item/order-item.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/meta/order/com/order-item/_com.json
//========================================
Ti.Preload("ti/com/web/meta/order/com/order-item/_com.json", {
  "name" : "order-item",
  "globally" : false,
  "template" : "./order-item.html",
  "mixins"   : ["./order-item.mjs"]
});
//========================================
// JOIN <web-meta-order.html> ti/com/web/meta/order/web-meta-order.html
//========================================
Ti.Preload("ti/com/web/meta/order/web-meta-order.html", `<div class="web-meta-order"
  :class="TopClass">
  <!--
    Head： Status
  -->
  <div class="as-or-box is-head">
    <!--
      Left: ID/status
    -->
    <div class="at-left is-status">
      <!--ID-->
      <div class="as-or-id">
        <span>{{'order-k-id'|i18n}}:</span>
        <em>{{OrderId}}</em>
      </div>
      <!--Status-->
      <div class="as-or-st">
        <span :class="OrderStatus">{{OrderStatus|i18n}}</span>
      </div>
    </div>
    <!--
      Right: Timestamp
    -->
    <div class="at-right is-timestamp">
      <div
        v-for="it in Timestamps"
          :class="it.className">
          <!--Item-->
          <template v-if="'item' == it.type">
            <ti-icon :value="it.icon"/>
            <div class="as-t-title">{{it.title|i18n}}</div>
            <div class="as-t-date">{{it.dateText}}</div>
            <div class="as-t-time">{{it.timeText}}</div>
          </template>
          <!--Line-->
          <template v-else>
            <ti-icon :value="it.icon"/>
          </template>
      </div>
    </div>
  </div>
  <!--
    TODO shipping address & physical distribution
  -->
  <!--
    Product list
  -->
  <div class="as-or-box is-products">
    <table>
      <thead>
        <tr>
          <th>{{'order-k-pro-title'|i18n}}</th>
          <th>{{'order-k-pro-price'|i18n}}</th>
          <th>{{'order-k-pro-amount'|i18n}}</th>
          <th>{{'order-k-pro-subtotal'|i18n}}</th>
        </tr>
      </thead>
      <tbody>
        <tr
          v-for="it in Products"
            class="as-pro-it">
            <!--Title-->
            <td class="as-pro-title">
              <a 
                :href="it.href"
                @click.left.prevent="OnClickProduct(it)"><img :src="it.src"/></a>
              <a 
                :href="it.href"
                @click.left.prevent="OnClickProduct(it)">{{it.title}}</a>
            </td>
            <!--Price-->
            <td class="as-price">{{CurrencyChar}}{{it.price}}</td>
            <!--Amount-->
            <td class="as-amount">{{it.amount}}</td>
            <!--Subtotal-->
            <td class="as-subtotal">{{CurrencyChar}}{{it.subtotal}}</td>
        </tr>
      </tbody>
    </table>
  </div>
  <!--
    Summary
  -->
  <div class="as-or-box is-summary">
    <table>
      <tr class="as-sum-price">
        <td class="as-s-key">{{'order-k-price'|i18n}}:</td>
        <td class="as-s-val">{{CurrencyChar}}{{Order.price}}</td>
      </tr>
      <tr class="as-sum-fee">
        <td class="as-s-key">{{'order-k-fee'|i18n}}:</td>
        <td class="as-s-val">{{CurrencyChar}}{{Order.fee}}</td>
      </tr>
    </table>
  </div>
</div>`);
//========================================
// JOIN <web-meta-order.mjs> ti/com/web/meta/order/web-meta-order.mjs
//========================================
Ti.Preload("ti/com/web/meta/order/web-meta-order.mjs", TI_PACK_EXPORTS['ti/com/web/meta/order/web-meta-order.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/meta/order/_com.json
//========================================
Ti.Preload("ti/com/web/meta/order/_com.json", {
  "name" : "web-meta-order",
  "globally" : true,
  "template" : "./web-meta-order.html",
  "mixins"   : ["./web-meta-order.mjs"],
  "components" : [
    "./com/order-item"
  ]
});
//========================================
// JOIN <web-meta-preview.html> ti/com/web/meta/preview/web-meta-preview.html
//========================================
Ti.Preload("ti/com/web/meta/preview/web-meta-preview.html", `<div class="ti-web-preview ti-fill-parent">
  <!--
    Top: Image
  -->
  <div class="as-preview">
    <ti-icon value="zmdi-image"/>
  </div>
  <!--
    Bottom: List
  -->
  
</div>`);
//========================================
// JOIN <web-meta-preview.mjs> ti/com/web/meta/preview/web-meta-preview.mjs
//========================================
Ti.Preload("ti/com/web/meta/preview/web-meta-preview.mjs", TI_PACK_EXPORTS['ti/com/web/meta/preview/web-meta-preview.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/meta/preview/_com.json
//========================================
Ti.Preload("ti/com/web/meta/preview/_com.json", {
  "name" : "web-meta-preview",
  "globally" : true,
  "template" : "./web-meta-preview.html",
  "mixins"   : ["./web-meta-preview.mjs"]
});
//========================================
// JOIN <nav-columns.html> ti/com/web/nav/columns/nav-columns.html
//========================================
Ti.Preload("ti/com/web/nav/columns/nav-columns.html", `<nav class="web-nav-columns"
  :class="TopClass">
  <!--=======================================-->
  <div v-for="it in TheItems"
    class="as-column">
    <div class="item-self">
      <a
        :key="it.index"
        class="link-item"
        :class="it.className"
        :href="it.href"
        :target="it.target"
        @click.left="OnClickLink($event, it)">
        <!--Icon-->
        <ti-icon
          v-if="it.icon"
            :value="it.icon"/>
        <!--Text-->
        <span
          v-if="it.title"
            class="as-text">{{it.title}}</span>
        </a>
      </div>
      <!--===================================-->
      <!--SubItems-->
      <div
        v-if="it.items"
          class="sub-items">
          <div class="items-con">
            <a
              v-for="sub in it.items"
                :key="sub.index"
                class="sub-item"
                :class="sub.className"
                :href="sub.href"
                :target="sub.target"
                @click.left="OnClickLink($event, sub)">
                <!--Icon-->
                <ti-icon
                  v-if="sub.icon"
                    :value="sub.icon"/>
                <!--Text-->
                <span
                  v-if="sub.title"
                    class="as-text">{{sub.title}}</span>
            </a>
          </div>
      </div>
      <!--===================================-->
  </div>
  <!--=======================================-->
</nav>`);
//========================================
// JOIN <nav-columns.mjs> ti/com/web/nav/columns/nav-columns.mjs
//========================================
Ti.Preload("ti/com/web/nav/columns/nav-columns.mjs", TI_PACK_EXPORTS['ti/com/web/nav/columns/nav-columns.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/nav/columns/_com.json
//========================================
Ti.Preload("ti/com/web/nav/columns/_com.json", {
  "name" : "web-nav-columns",
  "globally" : true,
  "template" : "./nav-columns.html",
  "mixins"   : [
    "@com:web/nav/support/web-nav-mixins.mjs",
    "./nav-columns.mjs"
  ],
  "components" : []
});
//========================================
// JOIN <nav-crumb.html> ti/com/web/nav/crumb/nav-crumb.html
//========================================
Ti.Preload("ti/com/web/nav/crumb/nav-crumb.html", `<nav class="web-nav-crumb"
  :class="TopClass">
  <!--=======================================-->
  <template 
    v-for="it in TheItems">
      <!--Href render to A-->
      <a
        v-if="it.href"
          :key="it.index"
          class="link-item"
          :class="it.className"
          :href="it.href"
          :target="it.target"
          @click.left="OnClickLink($event, it)">
          <!--Icon-->
          <ti-icon
            v-if="it.icon"
              :value="it.icon"/>
          <!--Text-->
          <span
            v-if="it.title"
              class="as-text">{{it.title | i18n}}</span>
      </a>
      <!--
        Just text
      -->
      <span
        v-else
          :key="it.index"
          class="link-item"
          :class="it.className">
          <!--Icon-->
          <ti-icon
            v-if="it.icon"
              :value="it.icon"/>
          <!--Text-->
          <span
            v-if="it.title"
              class="as-text">{{it.title | i18n}}</span>
      </span>
      <!--Sep-->
      <TiIcon :value="sep"/>
  </template>
  <!--=======================================-->
  <div 
    v-if="title"
      class="as-title">{{title|i18n}}</div>
  <!--=======================================-->
</nav>`);
//========================================
// JOIN <nav-crumb.mjs> ti/com/web/nav/crumb/nav-crumb.mjs
//========================================
Ti.Preload("ti/com/web/nav/crumb/nav-crumb.mjs", TI_PACK_EXPORTS['ti/com/web/nav/crumb/nav-crumb.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/nav/crumb/_com.json
//========================================
Ti.Preload("ti/com/web/nav/crumb/_com.json", {
  "name" : "web-nav-crumb",
  "globally" : true,
  "template" : "./nav-crumb.html",
  "mixins"   : [
    "@com:web/nav/support/web-nav-mixins.mjs",
    "./nav-crumb.mjs"
  ],
  "components" : []
});
//========================================
// JOIN <link-item.html> ti/com/web/nav/links/com/link-item/link-item.html
//========================================
Ti.Preload("ti/com/web/nav/links/com/link-item/link-item.html", `<div class="link-item" 
  :class="TopClass"
  @mouseenter.stop="OnOpenGroup"
  @mouseleave.stop="OnCloseGroup">
  <!--
    Self Info
  -->
  <div ref="info"
    class="it-info"
    @click.left="OnClickItemInfo">
    <!--Icon-->
    <a
      v-if="icon"
        class="it-info-icon"
        :href="href"
        @click.left="OnClickItemLink($event)">
        <ti-icon :value="icon"/>
    </a>
    <!--Item-->
    <a
      class="it-info-text"
      :href="href"
      @click.left="OnClickItemLink($event)">{{title|i18n}}</a>
  </div>
  <!--
    Sub Container
  -->
  <div ref="con"
    v-if="hasSubItems && isOpened"
      class="it-con"><div class="it-con-wrapper">
        <LinkItem
          v-for="subIt in items"
            :key="subIt.id"
            v-bind="subIt"
            :opened-ids="openedIds"
            :opened-depth="openedDepth"/>
  </div></div>
</div>`);
//========================================
// JOIN <link-item.mjs> ti/com/web/nav/links/com/link-item/link-item.mjs
//========================================
Ti.Preload("ti/com/web/nav/links/com/link-item/link-item.mjs", TI_PACK_EXPORTS['ti/com/web/nav/links/com/link-item/link-item.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/nav/links/com/link-item/_com.json
//========================================
Ti.Preload("ti/com/web/nav/links/com/link-item/_com.json", {
  "name" : "link-item",
  "template" : "./link-item.html",
  "mixins" : [
    "@com:web/nav/support/web-nav-item-mixins.mjs",
    "./link-item.mjs"
  ]
});
//========================================
// JOIN <nav-links.html> ti/com/web/nav/links/nav-links.html
//========================================
Ti.Preload("ti/com/web/nav/links/nav-links.html", `<nav class="web-nav-links"
  :class="TopClass">
  <LinkItem
    v-for="it in TheItems"
      :key="it.id"
      v-bind="it"
      :opened-ids="myOpenedIds"
      @click:item="OnClickLink"
      @change:opened="OnChangeGroupOpened"/>
</nav>`);
//========================================
// JOIN <nav-links.mjs> ti/com/web/nav/links/nav-links.mjs
//========================================
Ti.Preload("ti/com/web/nav/links/nav-links.mjs", TI_PACK_EXPORTS['ti/com/web/nav/links/nav-links.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/nav/links/_com.json
//========================================
Ti.Preload("ti/com/web/nav/links/_com.json", {
  "name" : "web-nav-links",
  "globally" : true,
  "template" : "./nav-links.html",
  "mixins"   : [
    "@com:web/nav/support/web-nav-mixins.mjs",
    "./nav-links.mjs"
  ],
  "components" : ["./com/link-item"]
});
//========================================
// JOIN <side-item.html> ti/com/web/nav/side/com/side-item/side-item.html
//========================================
Ti.Preload("ti/com/web/nav/side/com/side-item/side-item.html", `<div class="side-item" 
  :class="TopClass">
  <!--
    Self Info
  -->
  <div class="it-info"
    @click.left="OnClickItemInfo">
    <!--Icon-->
    <span
      v-if="icon"
        class="it-info-icon">
        <ti-icon :value="icon"/>
    </span>
    <!--Group-->
    <span
      v-if="!hasHrefOrValue"
        class="it-info-text">{{title|i18n}}</span>
    <!--Item-->
    <a
      v-else
        class="it-info-text"
        :href="href"
        @click.left="OnClickItemLink($event)">{{title|i18n}}</a>
    <!--
      Status icon
    -->
    <TiIcon 
      v-if="isGroup"
        class="it-status-icon"
          :value="OpenStatusIcon"
          @click.native.left.stop="OnToggleGroupOpened"/>
  </div>
  <!--
    Sub Container
  -->
  <transition name="ti-trans-folder"
    @before-enter="OnTransBeforeEnter"
    @enter="OnTransEnter"
    @after-enter="OnTransAfterEnter"

    @before-leave="OnTransBeforeLeave"
    @leave="OnTransLeave"
    @after-leave="OnTransAfterLeave">
    <div 
      v-if="hasSubItems && isOpened"
        class="it-con">
          <SideItem
            v-for="subIt in items"
              :key="subIt.id"
              v-bind="subIt"
              :opened-ids="openedIds"
              :opened-depth="openedDepth"
              :opened-icons="openedIcons"/>
    </div>
  </transition>
</div>`);
//========================================
// JOIN <side-item.mjs> ti/com/web/nav/side/com/side-item/side-item.mjs
//========================================
Ti.Preload("ti/com/web/nav/side/com/side-item/side-item.mjs", TI_PACK_EXPORTS['ti/com/web/nav/side/com/side-item/side-item.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/nav/side/com/side-item/_com.json
//========================================
Ti.Preload("ti/com/web/nav/side/com/side-item/_com.json", {
  "name" : "side-item",
  "template" : "./side-item.html",
  "mixins" : [
    "@com:web/nav/support/web-nav-item-mixins.mjs",
    "./side-item.mjs"
  ]
});
//========================================
// JOIN <web-nav-side.html> ti/com/web/nav/side/web-nav-side.html
//========================================
Ti.Preload("ti/com/web/nav/side/web-nav-side.html", `<div class="web-nav-side"
  :class="TopClass"
  v-ti-activable>
  <SideItem
    v-for="it in TheItems"
      :key="it.id"
        v-bind="it"
        :opened-ids="myOpenedIds"
        :opened-depth="openedDepth"
        :opened-icons="openedIcons"
        @click:item="OnClickLink"
        @change:opened="OnChangeOpened"/>
</div>`);
//========================================
// JOIN <web-nav-side.mjs> ti/com/web/nav/side/web-nav-side.mjs
//========================================
Ti.Preload("ti/com/web/nav/side/web-nav-side.mjs", TI_PACK_EXPORTS['ti/com/web/nav/side/web-nav-side.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/nav/side/_com.json
//========================================
Ti.Preload("ti/com/web/nav/side/_com.json", {
  "name" : "web-nav-side",
  "globally" : true,
  "template" : "./web-nav-side.html",
  "mixins"   : [
    "@com:web/nav/support/web-nav-mixins.mjs",
    "./web-nav-side.mjs"
  ],
  "components" : ["./com/side-item"]
});
//========================================
// JOIN <web-nav-item-mixins.mjs> ti/com/web/nav/support/web-nav-item-mixins.mjs
//========================================
Ti.Preload("ti/com/web/nav/support/web-nav-item-mixins.mjs", TI_PACK_EXPORTS['ti/com/web/nav/support/web-nav-item-mixins.mjs']);
//========================================
// JOIN <web-nav-mixins.mjs> ti/com/web/nav/support/web-nav-mixins.mjs
//========================================
Ti.Preload("ti/com/web/nav/support/web-nav-mixins.mjs", TI_PACK_EXPORTS['ti/com/web/nav/support/web-nav-mixins.mjs']);
//========================================
// JOIN <web-pay-checkout-props.mjs> ti/com/web/pay/checkout/web-pay-checkout-props.mjs
//========================================
Ti.Preload("ti/com/web/pay/checkout/web-pay-checkout-props.mjs", TI_PACK_EXPORTS['ti/com/web/pay/checkout/web-pay-checkout-props.mjs']);
//========================================
// JOIN <web-pay-checkout.html> ti/com/web/pay/checkout/web-pay-checkout.html
//========================================
Ti.Preload("ti/com/web/pay/checkout/web-pay-checkout.html", `<div class="web-pay-checkout"
  :class="TopClass">
  <!--
    Blank
  -->
  <div 
    v-if="isEmpty"
      class="as-empty">
    <ti-loading
      class="as-big"
      icon="fas-shopping-basket"
      text="You should pick something to checkout!"/>
  </div>
  <!--
    List table
  -->
  <template v-else>
    <!--
      Tip
    -->
    <div class="as-tip">
      <ti-icon :value="tipIcon"/>
      <span>{{tipText | i18n}}</span>
    </div>
    <!--
      List
    -->
    <div class="as-list">
      <!--Show product in loop-->
      <table>
        <thead>
          <tr>
            <th><span>{{'pay-checkout-it-name'     | i18n}}</span></th>
            <th>
              <u>{{CurrencyChar}}</u>
              <span>{{'pay-checkout-it-price'      | i18n}}</span>
            </th>
            <th><span>{{'pay-checkout-it-amount'   | i18n}}</span></th>
            <th><span>{{'pay-checkout-it-subtotal' | i18n}}</span></th>
          </tr>
        </thead>
        <tbody>
          <tr
            v-for="it of TheItems"
              class="as-item">
              <td class="it-thumb">
                <a
                  v-if="it.thumbSrc" 
                    @click.prevent="OnShowProduct(it)" 
                    :href="it.href">
                    <img :src="it.thumbSrc"/>
                </a>
                <div class="it-title">
                  <a :href="it.href"
                    @click.prevent="OnShowProduct(it)">{{it.title}}</a>
                </div>
              </td>
              <td class="it-price">
                <em>{{CurrencyChar}}{{it.price}}</em>
              </td>
              <td class="it-amount">
                <span>{{it.amount}}</span>
              </td>
              <td class="it-subtotal">
                <em>{{CurrencyChar}}{{it.subtotal}}</em>
              </td>
            </tr>
          </tbody>
      </table>
    </div> <!--~as-list-->
    <!--
      Summary
    -->
    <div class="as-summary">
      <div class="at-left">
        <!--Maybe Coupon here-->
      </div>
      <div class="at-right">
        <div class="as-total">
          <span>Total:</span>
          <em>{{CurrencyChar}}{{TotalFee}}</em>
        </div>
      </div>
    </div>
    <!--
      Address
    -->
    <div
      v-if="'A' == orderType"
        class="as-address">
        <!--
          Current Address
        -->
        <div class="as-addr-current">
          <WebTileAddress 
            :value="currentAddr"
            title="订单收货地址"
            :countries="countries"
            :auto-highlight="false"
            :can="{remove:0,edit:0,default:0,choose:1,add:1}"
            :blank-as="{text:'i18n:order-shipaddr-nil',icon:'im-location'}"
            @choose="OnChooseAddr"
            @add="OnAddAddr"/>
        </div>
        <!--
          Address can-list
        -->
        <transition name="ti-trans-fade">
          <div
            v-if="showAddrCanList"
              class="as-can-list">
              <WebShelfList
                v-bind="AddrCanList"
                @select="OnSelectAddr"/>
              <div
                class="as-can-hide">
                <a @click.left="OnHideAddrCanList">
                  <i class="fas fa-angle-double-up"></i><br>
                  <span>{{'i18n:close'|i18n}}</span></a>
                </div>
          </div>
        </transition>
    </div>
  </template>
</div>`);
//========================================
// JOIN <web-pay-checkout.mjs> ti/com/web/pay/checkout/web-pay-checkout.mjs
//========================================
Ti.Preload("ti/com/web/pay/checkout/web-pay-checkout.mjs", TI_PACK_EXPORTS['ti/com/web/pay/checkout/web-pay-checkout.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/pay/checkout/_com.json
//========================================
Ti.Preload("ti/com/web/pay/checkout/_com.json", {
  "name" : "web-pay-checkout",
  "globally" : true,
  "template" : "./web-pay-checkout.html",
  "props"    : "./web-pay-checkout-props.mjs",
  "mixins"   : ["./web-pay-checkout.mjs"]
});
//========================================
// JOIN <web-pay-choose-props.mjs> ti/com/web/pay/choose/web-pay-choose-props.mjs
//========================================
Ti.Preload("ti/com/web/pay/choose/web-pay-choose-props.mjs", TI_PACK_EXPORTS['ti/com/web/pay/choose/web-pay-choose-props.mjs']);
//========================================
// JOIN <web-pay-choose.html> ti/com/web/pay/choose/web-pay-choose.html
//========================================
Ti.Preload("ti/com/web/pay/choose/web-pay-choose.html", `<div class="web-pay-choose"
  :class="TopClass">
  <!--Title-->
  <div class="as-title">{{'pay-step-choose-tip'|i18n}}</div>
  <!--Choosing-->
  <div class="as-options">
    <div
      v-for="op in options"
        class="as-pay-type"
        :class="getOptionClass(op)"
        @click.left="OnChooseOption(op)">
        <ti-icon :value="op.icon"/>
        <div class="as-text">{{op.text | i18n}}</div>
    </div>
  </div>
  <div class="as-tip">{{PayTypeText}}</div>
</div>`);
//========================================
// JOIN <web-pay-choose.mjs> ti/com/web/pay/choose/web-pay-choose.mjs
//========================================
Ti.Preload("ti/com/web/pay/choose/web-pay-choose.mjs", TI_PACK_EXPORTS['ti/com/web/pay/choose/web-pay-choose.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/pay/choose/_com.json
//========================================
Ti.Preload("ti/com/web/pay/choose/_com.json", {
  "name" : "web-pay-choose",
  "globally" : true,
  "template" : "./web-pay-choose.html",
  "props"    : "./web-pay-choose-props.mjs",
  "mixins"   : ["./web-pay-choose.mjs"]
});
//========================================
// JOIN <web-pay-done-props.mjs> ti/com/web/pay/done/web-pay-done-props.mjs
//========================================
Ti.Preload("ti/com/web/pay/done/web-pay-done-props.mjs", TI_PACK_EXPORTS['ti/com/web/pay/done/web-pay-done-props.mjs']);
//========================================
// JOIN <web-pay-done.html> ti/com/web/pay/done/web-pay-done.html
//========================================
Ti.Preload("ti/com/web/pay/done/web-pay-done.html", `<div class="web-pay-done"
  :class="TopClass">
  <!--
    Icon
  -->
  <div class="as-icon"><ti-icon :value="TheIcon"/></div>
  <!--
    Text
  -->
  <div class="as-text">{{TheText | i18n}}</div>
  <!--
    errMsg
  -->
  <div
    v-if="errMsg" 
      class="as-error">{{errMsg | i18n}}</div>
  <!--
    Links
  -->
  <div
    v-if="hasLinks"
      class="as-links">
      <ul>
        <li
          v-for="li in TheLinks">
          <a
            class="link-item"
            :href="li.href"
            @click.left.prevent="OnClickLink(li)">
            <ti-icon
              v-if="li.icon"
                :value="li.icon"/>
            <span class="it-text">{{li.text | i18n}}</span>
          </a>
        </li>
      </ul>
  </div>
</div>`);
//========================================
// JOIN <web-pay-done.mjs> ti/com/web/pay/done/web-pay-done.mjs
//========================================
Ti.Preload("ti/com/web/pay/done/web-pay-done.mjs", TI_PACK_EXPORTS['ti/com/web/pay/done/web-pay-done.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/pay/done/_com.json
//========================================
Ti.Preload("ti/com/web/pay/done/_com.json", {
  "name" : "web-pay-done",
  "globally" : true,
  "template" : "./web-pay-done.html",
  "props"    : "./web-pay-done-props.mjs",
  "mixins"   : ["./web-pay-done.mjs"]
});
//========================================
// JOIN <web-pay-proceed-props.mjs> ti/com/web/pay/proceed/web-pay-proceed-props.mjs
//========================================
Ti.Preload("ti/com/web/pay/proceed/web-pay-proceed-props.mjs", TI_PACK_EXPORTS['ti/com/web/pay/proceed/web-pay-proceed-props.mjs']);
//========================================
// JOIN <web-pay-proceed.html> ti/com/web/pay/proceed/web-pay-proceed.html
//========================================
Ti.Preload("ti/com/web/pay/proceed/web-pay-proceed.html", `<div class="web-pay-proceed">
  <!--
    Wait for create order
  -->
  <div 
    v-if="!hasOrder || !Payment"
      class="as-nil-order">
      <ti-loading
        class="as-big"
        :text="OrderLoadText"/>
  </div>
  <!--
    Show payment
  -->
  <template
    v-else>
    <!--QRCODE-->
    <div v-if="isQRCODE"
      class="as-main is-qrcode">
      <img 
        :style="QrcodeImageStyle"
        :src="PaymentDataAsQrcodeUrl">
    </div>
    <!--IFRAME-->
    <div v-else-if="isIFRAME"
      class="as-main is-iframe">
      <iframe 
        frameborder="0" 
        scrolling="no"
        :src="PaymentData"></iframe>
    </div>
    <!--
      JSON
    -->
    <div v-else-if="isJSON"
      class="as-main is-json">
      <!--The self/approve/update/capture links for PayPal-->
      <div
        v-if="'paypal' == payType"
          class="by-paypal">
        <!--Logo-->
        <div class="paypal-logo">
          <a 
            :href="myPaypalUrl"
            target="_blank"><i class="fab fa-paypal"></i></a>
        </div>
        <div class="paypal-tip">{{'paypal-approve-tip'|i18n}}</div>
      </div> <!--End PayPal-->
    </div>
    <!--
      Others
    -->
    <div
      v-else
        class="as-main">{{myOrder}}</div>
    <!--
      Check Button
    -->
    <div class="as-check">
      <div class="ti-btn is-huge"
        @click.left="OnClickCheckBtn">
        <ti-icon class="as-icon" :value="CheckBtnIcon"/>
        <div class="as-text">{{CheckBtnText|i18n}}</div>
      </div>
    </div>
  </template>
</div>`);
//========================================
// JOIN <web-pay-proceed.mjs> ti/com/web/pay/proceed/web-pay-proceed.mjs
//========================================
Ti.Preload("ti/com/web/pay/proceed/web-pay-proceed.mjs", TI_PACK_EXPORTS['ti/com/web/pay/proceed/web-pay-proceed.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/pay/proceed/_com.json
//========================================
Ti.Preload("ti/com/web/pay/proceed/_com.json", {
  "name" : "web-pay-proceed",
  "globally" : true,
  "template" : "./web-pay-proceed.html",
  "props": "./web-pay-proceed-props.mjs",
  "mixins"   : ["./web-pay-proceed.mjs"]
});
//========================================
// JOIN <web-pay.html> ti/com/web/pay/web-pay.html
//========================================
Ti.Preload("ti/com/web/pay/web-pay.html", `<div class="web-pay">
  <ti-wizard
    :current="0"
    :title="title"
    :steps="PaySteps"
    :value="myPayment"
    can-click-head-item="passed"
    @change="OnChange"/>
</div>`);
//========================================
// JOIN <web-pay.mjs> ti/com/web/pay/web-pay.mjs
//========================================
Ti.Preload("ti/com/web/pay/web-pay.mjs", TI_PACK_EXPORTS['ti/com/web/pay/web-pay.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/pay/_com.json
//========================================
Ti.Preload("ti/com/web/pay/_com.json", {
  "name" : "web-pay",
  "globally" : true,
  "template" : "./web-pay.html",
  "props"    : [
    "@com:web/pay/checkout/web-pay-checkout-props.mjs",
    "@com:web/pay/choose/web-pay-choose-props.mjs",
    "@com:web/pay/proceed/web-pay-proceed-props.mjs",
    "@com:web/pay/done/web-pay-done-props.mjs"
  ],
  "mixins"   : ["./web-pay.mjs"],
  "components": [
    "@com:ti/wizard",
    "@com:web/pay/checkout",
    "@com:web/pay/choose",
    "@com:web/pay/proceed",
    "@com:web/pay/done"
  ]
});
//========================================
// JOIN <web-row-article.html> ti/com/web/row/article/web-row-article.html
//========================================
Ti.Preload("ti/com/web/row/article/web-row-article.html", `<div class="web-row-article"
  :class="TopClass">
  <!--
    Left: Thumbnail
  -->
  <div 
    class="at-left"
      v-if="ThumbSrc">
      <a
        :href="ArticleLinkHref"
        :target="ArticleLinkTarget"
        @click.left="OnClickLink($event)">
        <img :src="ThumbSrc" :style="ThumbImageStyle"/>
      </a>
  </div>
  <!--
    Right: Comment
  -->
  <div class="at-right">
    <!-- Title -->
    <div class="as-title">
      <a
        :href="ArticleLinkHref"
        :target="ArticleLinkTarget"
        @click.left="OnClickLink($event)">{{Article.title}}</a>
    </div>
    <!--Info-->
    <div 
      v-if="hasInfo"
        class="as-info">
        <!--Date-->
        <div
          v-if="DateText" 
            class="as-date">{{DateText}}</div>
        <!--Watch count-->
        <div 
          v-if="Article.watchCount"
            class="as-watch-count">
            <i class="fas fa-eye"></i>
            <span>{{Article.watchCount}}</span></div>
        <!--Read time-->
        <div 
          v-if="Article.readTime"
            class="as-read-time">
            <span>{{'i18n:du-in-min'|i18n({n:Article.readTime})}}</span>
          </div>
    </div>
    <!--Brief-->
    <div class="as-brief">{{Article.brief}}</div>
  </div>
</div>`);
//========================================
// JOIN <web-row-article.mjs> ti/com/web/row/article/web-row-article.mjs
//========================================
Ti.Preload("ti/com/web/row/article/web-row-article.mjs", TI_PACK_EXPORTS['ti/com/web/row/article/web-row-article.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/row/article/_com.json
//========================================
Ti.Preload("ti/com/web/row/article/_com.json", {
  "name" : "web-row-article",
  "globally" : true,
  "template" : "./web-row-article.html",
  "mixins" : ["./web-row-article.mjs"]
});
//========================================
// JOIN <web-row-image.html> ti/com/web/row/image/web-row-image.html
//========================================
Ti.Preload("ti/com/web/row/image/web-row-image.html", `<div class="web-row-image"
  :class="TopClass"
  @click.left="OnClickTop"
  @mousemove="OnMouseMove"
  @mouseenter="OnMouseEnter"
  @mouseleave="OnMouseLeave">
  <!--
    Left
  -->
  <div class="as-part at-left" :style="LeftPartStyle" ref="partLeft">
    <div class="as-img-con" :style="imageConStyle">
      <a 
        :href="TheHref"
        :target="LinkTarget"
        @click.left="OnClickLink">
        <img ref="img"
          v-if="TheSrc"
            :style="ImageStyle"
            :src="TheSrc"
            draggable="false"
            @load="OnImageLoaded"/>
      </a>
    </div>
    <!-- Tags -->
    <div
      v-if="TheTags"
        class="as-tags">
        <div
          v-for="tag of TheTags"
            class="as-tag-item"
            :class="tag.className"
            :style="tag.style">
            <span>{{tag.text}}</span>
        </div>
    </div>
  </div>
  <!--
    Right: 
  -->
  <div class="as-part at-right" :style="RightPartStyle" ref="partRight">
      <div
        v-if="TheText"
          class="as-title"
          :style="TextStyle">
          <a 
            :href="TheHref"
            :target="LinkTarget"
            @click.left="OnClickLink">{{TheText}}</a>
      </div>
      <div
        v-if="TheBrief"
          class="as-brief"
          :style="BriefStyle"><span>{{TheBrief}}</span></div>
  </div>
</div>`);
//========================================
// JOIN <web-row-image.mjs> ti/com/web/row/image/web-row-image.mjs
//========================================
Ti.Preload("ti/com/web/row/image/web-row-image.mjs", TI_PACK_EXPORTS['ti/com/web/row/image/web-row-image.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/row/image/_com.json
//========================================
Ti.Preload("ti/com/web/row/image/_com.json", {
  "name" : "web-row-image",
  "globally" : true,
  "template" : "./web-row-image.html",
  "mixins"   : ["./web-row-image.mjs"]
});
//========================================
// JOIN <web-shelf-audio-icons.html> ti/com/web/shelf/audio-icons/web-shelf-audio-icons.html
//========================================
Ti.Preload("ti/com/web/shelf/audio-icons/web-shelf-audio-icons.html", `<div class="web-shelf-audio-icons"
  :class="TopClass">
  <!--
    No audios
  -->
  <div
    v-if="!hasAudios"
      class="nil-audios">
      <i class="fas fa-volume-up"></i>
      <span>{{'i18n:empty' | i18n}}</span>
  </div>
  <!--
    Show Audios
  -->
  <template v-else>
    <!--title-->
    <div 
      v-if="CurrentAudioTitle"
        class="as-audio-title">{{CurrentAudioTitle|i18n}}</div>
    <!--
      Player
    -->
    <component
      class="as-current-audio-player"
      :is="CurrentAudioCom.comType"
      v-bind="CurrentAudioCom.comConf"/>
    <!--
      Candidate items
    -->
    <div
      v-if="hasMultiAudios"
        class="as-audio-icons">
        <div
          v-for="(it, index) in AudioItems"
            class="as-audio-item"
            :class="it.className"
            @click.left="OnGoTo(it)">
              <span>{{index+1}}</span>
        </div>
    </div>
  </template>
</div>`);
//========================================
// JOIN <web-shelf-audio-icons.mjs> ti/com/web/shelf/audio-icons/web-shelf-audio-icons.mjs
//========================================
Ti.Preload("ti/com/web/shelf/audio-icons/web-shelf-audio-icons.mjs", TI_PACK_EXPORTS['ti/com/web/shelf/audio-icons/web-shelf-audio-icons.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/shelf/audio-icons/_com.json
//========================================
Ti.Preload("ti/com/web/shelf/audio-icons/_com.json", {
  "name" : "web-shelf-audio-icons",
  "globally" : true,
  "template" : "./web-shelf-audio-icons.html",
  "mixins" : ["./web-shelf-audio-icons.mjs"],
  "components" : [
    "@com:ti/media/audio",
    "@com:net/youtube/player"
  ]
});
//========================================
// JOIN <web-shelf-carousel.html> ti/com/web/shelf/carousel/web-shelf-carousel.html
//========================================
Ti.Preload("ti/com/web/shelf/carousel/web-shelf-carousel.html", `<div class="web-shelf-carousel"
  :class="TopClass"
  :style="TopStyle">
  <!--
    Main
  -->
  <main>
    <ul :style="MainUlStyle" ref="ul">
      <li
        v-for="it in ItemList"
          :key="it.key"
          :data-index="it.index"
          :style="MainLiStyle">
          <component :is="it.comType" v-bind="it.comConf"/>
      </li>
    </ul>
  </main>
  <!--
    Btn: Prev
  -->
  <div class="as-btn is-prev" @click.left="prevItem" v-if="hasMultiItems">
    <b><TiIcon :value="iconLeft"/></b>
  </div>
  <!--
    Btn: Next
  -->
  <div class="as-btn is-next" @click.left="nextItem" v-if="hasMultiItems">
    <b><TiIcon :value="iconRight"/></b>
  </div>
</div>`);
//========================================
// JOIN <web-shelf-carousel.mjs> ti/com/web/shelf/carousel/web-shelf-carousel.mjs
//========================================
Ti.Preload("ti/com/web/shelf/carousel/web-shelf-carousel.mjs", TI_PACK_EXPORTS['ti/com/web/shelf/carousel/web-shelf-carousel.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/shelf/carousel/_com.json
//========================================
Ti.Preload("ti/com/web/shelf/carousel/_com.json", {
  "name" : "web-shelf-carousel",
  "globally" : true,
  "template" : "./web-shelf-carousel.html",
  "mixins" : ["./web-shelf-carousel.mjs"]
});
//========================================
// JOIN <web-shelf-falls.html> ti/com/web/shelf/falls/web-shelf-falls.html
//========================================
Ti.Preload("ti/com/web/shelf/falls/web-shelf-falls.html", `<div class="web-shelf-falls"
  :class="TopClass">
  <!--
    Loading
  -->
  <ti-loading
    v-if="isLoading"
      class="as-big"
      v-bind="loadingAs"/>
  <!--
    Blank
  -->
  <ti-loading
    v-else-if="isEmpty"
      class="as-big"
      v-bind="blankAs"/>
  <!--
    Each Items
  -->
  <template v-else>
    <div 
      v-for="grp in FallsData"
        class="falls-group"
        :style="grp.style">
        <!--====================-->
        <div
          v-for="it in grp.items"
            :key="it.key"
            class="falls-tile is-com"
            :class="it.className"
            :style="it.style">
            <component :is="it.comType" v-bind="it.comConf"/>
        </div>
        <!--====================-->
    </div>
  </template>
</div>`);
//========================================
// JOIN <web-shelf-falls.mjs> ti/com/web/shelf/falls/web-shelf-falls.mjs
//========================================
Ti.Preload("ti/com/web/shelf/falls/web-shelf-falls.mjs", TI_PACK_EXPORTS['ti/com/web/shelf/falls/web-shelf-falls.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/shelf/falls/_com.json
//========================================
Ti.Preload("ti/com/web/shelf/falls/_com.json", {
  "name" : "web-shelf-falls",
  "globally" : true,
  "template" : "./web-shelf-falls.html",
  "mixins" : ["./web-shelf-falls.mjs"]
});
//========================================
// JOIN <web-shelf-free.html> ti/com/web/shelf/free/web-shelf-free.html
//========================================
Ti.Preload("ti/com/web/shelf/free/web-shelf-free.html", `<div class="web-shelf-free"
  :class="TopClass"
  :style="TopStyle">
  <!--=============================-->
  <div class="free-main"
    :style="MainStyle">
    <div 
      v-for="it in itemList"
        :key="it.key"
        class="free-item"
        :class="it.className"
        :style="it.style">
        <component
          :is="it.comType"
          v-bind="it.comConf"/>
    </div>
  </div>
  <!--=============================-->
</div>`);
//========================================
// JOIN <web-shelf-free.mjs> ti/com/web/shelf/free/web-shelf-free.mjs
//========================================
Ti.Preload("ti/com/web/shelf/free/web-shelf-free.mjs", TI_PACK_EXPORTS['ti/com/web/shelf/free/web-shelf-free.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/shelf/free/_com.json
//========================================
Ti.Preload("ti/com/web/shelf/free/_com.json", {
  "name" : "web-shelf-free",
  "globally" : true,
  "template" : "./web-shelf-free.html",
  "mixins" : ["./web-shelf-free.mjs"]
});
//========================================
// JOIN <web-shelf-gallery.html> ti/com/web/shelf/gallery/web-shelf-gallery.html
//========================================
Ti.Preload("ti/com/web/shelf/gallery/web-shelf-gallery.html", `<div class="web-shelf-gallary"
  :class="TopClass"
  :style="TopStyle"
  @mouseleave="OnMouseLeave">
  <div ref="con" class="as-gallary-con">
    <!--
      Each component container
    -->
    <div
      v-for="it in myItemList"
        :key="it.index"
        :it-index="it.index"
        class="as-gallary-item"
        :class="getItemClass(it.index)"
        :style="getItemStyle(it.index)"
        @mouseenter="OnMouseEnterItem(it)">
      <!--
        Component
      -->
      <compnent
        v-if="it.comType"
          class="ti-fill-parent"
          :is="it.comType"
          v-bind="it.comConf"/>
      <!--
        Placeholder
      -->
      <span v-else>Item {{it.index}}</span>
    </div>
</div></div>`);
//========================================
// JOIN <web-shelf-gallery.mjs> ti/com/web/shelf/gallery/web-shelf-gallery.mjs
//========================================
Ti.Preload("ti/com/web/shelf/gallery/web-shelf-gallery.mjs", TI_PACK_EXPORTS['ti/com/web/shelf/gallery/web-shelf-gallery.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/shelf/gallery/_com.json
//========================================
Ti.Preload("ti/com/web/shelf/gallery/_com.json", {
  "name" : "web-shelf-gallery",
  "globally" : true,
  "template" : "./web-shelf-gallery.html",
  "mixins" : ["./web-shelf-gallery.mjs"]
});
//========================================
// JOIN <web-shelf-iconbox.html> ti/com/web/shelf/iconbox/web-shelf-iconbox.html
//========================================
Ti.Preload("ti/com/web/shelf/iconbox/web-shelf-iconbox.html", `<div class="web-shelf-iconbox"
  :class="TopClass"
  :style="TopStyle">
  <!--
    Icon
  -->
  <div class="as-icon" @click.left="OnToggleMode">
    <ti-icon :value="icon" v-bind="iconConf"/>
  </div>
  <!--
    Mask
  -->
  <transition name="ti-trans-fade">
    <div
      v-if="isOpened"
        class="as-mask"
        @click.left="OnToggleMode"></div>
  </transition>
  <!--
    Panel
  -->
  <transition :name="PanelTransName">
    <div
      v-if="isOpened"
        class="as-panel"
        :style="PanelStyle"><div class="as-con">
        <!--Head-->
        <component
          v-if="hasHead"
            class="as-head"
            :is="head.comType"
            v-bind="head.comConf"/>
        <!--Body-->
        <component
          v-if="hasBody"
            class="as-body"
            :is="body.comType"
            v-bind="body.comConf"/>
        <!--Foot-->
        <component
          v-if="hasFoot"
            class="as-foot"
            :is="foot.comType"
            v-bind="foot.comConf"/>
        <!--Closer-->
        <div
          v-if="closeIcon"
            class="as-closer"
            @click.left="OnToggleMode">
            <ti-icon :value="closeIcon"/>
        </div>
    </div></div>
  </transition>
</div>`);
//========================================
// JOIN <web-shelf-iconbox.mjs> ti/com/web/shelf/iconbox/web-shelf-iconbox.mjs
//========================================
Ti.Preload("ti/com/web/shelf/iconbox/web-shelf-iconbox.mjs", TI_PACK_EXPORTS['ti/com/web/shelf/iconbox/web-shelf-iconbox.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/shelf/iconbox/_com.json
//========================================
Ti.Preload("ti/com/web/shelf/iconbox/_com.json", {
  "name" : "web-shelf-iconbox",
  "globally" : true,
  "template" : "./web-shelf-iconbox.html",
  "mixins" : ["./web-shelf-iconbox.mjs"]
});
//========================================
// JOIN <web-shelf-list.html> ti/com/web/shelf/list/web-shelf-list.html
//========================================
Ti.Preload("ti/com/web/shelf/list/web-shelf-list.html", `<div class="web-shelf-list"
  :class="TopClass">
  <!--
    Loading
  -->
  <ti-loading
    v-if="isLoading"
      class="as-big"
      v-bind="loadingAs"/>
  <!--
    Blank
  -->
  <ti-loading
    v-else-if="isEmpty"
      class="as-big"
      v-bind="blankAs"/>
  <!--
    Each Items in trans
  
  <template v-else-if="ItemTransName">
    <transition-group
      tag="div"
      :name="ItemTransName"
      class="list-con ti-trans">
      <div
        v-for="it in ItemList"
          class="list-item"
          :class="it.className"
          :key="it.key">
          <component
            :is="it.comType"
            v-bind="it.comConf"/>    
      </div>
    </transition-group>
  </template>
  -->
  <!--
    Each Items no trans
  -->
  <div class="list-con">
    <div
      v-for="it in ItemList"
        class="list-item"
        :class="it.className"
        :key="it.key">
        <component
          :is="it.comType"
          v-bind="it.comConf"/>    
    </div>
  </div>
</div>`);
//========================================
// JOIN <web-shelf-list.mjs> ti/com/web/shelf/list/web-shelf-list.mjs
//========================================
Ti.Preload("ti/com/web/shelf/list/web-shelf-list.mjs", TI_PACK_EXPORTS['ti/com/web/shelf/list/web-shelf-list.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/shelf/list/_com.json
//========================================
Ti.Preload("ti/com/web/shelf/list/_com.json", {
  "name" : "web-shelf-list",
  "globally" : true,
  "template" : "./web-shelf-list.html",
  "mixins" : ["./web-shelf-list.mjs"]
});
//========================================
// JOIN <web-shelf-preview-scroller.html> ti/com/web/shelf/preview-scroller/web-shelf-preview-scroller.html
//========================================
Ti.Preload("ti/com/web/shelf/preview-scroller/web-shelf-preview-scroller.html", `<div class="web-shelf-preview-scroller"
  :class="TopClass">
    <!--
      Current item preview
    -->
    <component :is="previewComType" 
      class="as-preview" 
      :class="previewComClass"
      :style="previewComStyle"
      v-bind="CurrentPreviewComConf"
      @go:prev="OnGoPrev"
      @go:next="OnGoNext"/>
    <!--
      Candidate items
    -->
    <WebShelfScroller
      v-if="hasMultiData"
        class="as-scroller"
        :class="scrollerClass"
        :style="scrollerStyle"
        v-bind="ScrollerComConf"/>
</div>`);
//========================================
// JOIN <web-shelf-preview-scroller.mjs> ti/com/web/shelf/preview-scroller/web-shelf-preview-scroller.mjs
//========================================
Ti.Preload("ti/com/web/shelf/preview-scroller/web-shelf-preview-scroller.mjs", TI_PACK_EXPORTS['ti/com/web/shelf/preview-scroller/web-shelf-preview-scroller.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/shelf/preview-scroller/_com.json
//========================================
Ti.Preload("ti/com/web/shelf/preview-scroller/_com.json", {
  "name" : "web-shelf-preview-scroller",
  "globally" : true,
  "template" : "./web-shelf-preview-scroller.html",
  "mixins" : ["./web-shelf-preview-scroller.mjs"],
  "components" : [
    "@com:web/media"
  ]
});
//========================================
// JOIN <web-shelf-rolling-cards.html> ti/com/web/shelf/rolling-cards/web-shelf-rolling-cards.html
//========================================
Ti.Preload("ti/com/web/shelf/rolling-cards/web-shelf-rolling-cards.html", `<div class="web-shelf-rolling-cards"
  :class="TopClass"
  v-ti-draggable="Draggable">
  <!--
    Show Main part
  -->
  <div ref="con" class="part-main" :style="MainStyle">
    <!--
      Loading
    -->
    <ti-loading
      v-if="isLoading"
        class="as-big"
        v-bind="loadingAs"/>
    <!--
      Blank
    -->
    <ti-loading
      v-else-if="isEmpty"
        class="as-big"
        v-bind="blankAs"/>
    <!--
      Each component container
    -->
    <template v-else>
      <div
        v-for="card in myDisplayCards"
          class="part-card"
          :class="card.className"
          :key="card.id"
          :card-index="card.index"
          :style="card.style">
        <!--
          Component
        -->
        <compnent
          v-if="card.comType"
            class="ti-fill-parent"
            :is="card.comType"
            v-bind="card.comConf"/>
        <!--
          Placeholder
        -->
        <span v-else>Item {{it.index}}</span>
      </div>
    </template>
</div></div>`);
//========================================
// JOIN <web-shelf-rolling-cards.mjs> ti/com/web/shelf/rolling-cards/web-shelf-rolling-cards.mjs
//========================================
Ti.Preload("ti/com/web/shelf/rolling-cards/web-shelf-rolling-cards.mjs", TI_PACK_EXPORTS['ti/com/web/shelf/rolling-cards/web-shelf-rolling-cards.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/shelf/rolling-cards/_com.json
//========================================
Ti.Preload("ti/com/web/shelf/rolling-cards/_com.json", {
  "name" : "web-shelf-rolling-cards",
  "globally" : true,
  "template" : "./web-shelf-rolling-cards.html",
  "mixins" : ["./web-shelf-rolling-cards.mjs"]
});
//========================================
// JOIN <web-shelf-scroller.html> ti/com/web/shelf/scroller/web-shelf-scroller.html
//========================================
Ti.Preload("ti/com/web/shelf/scroller/web-shelf-scroller.html", `<div class="web-shelf-scroller"
  :class="TopClass"
  v-ti-draggable="Draggable">
  <!--=======================================-->
  <div class="scroll-btn at-left" :class="BtnLeftClass">
    <span @click.left="OnScrollLeft"><ti-icon :value="iconLeft"/></span>
  </div>
  <!--=======================================-->
  <div class="scroller-outer" ref="outer">
    <!--=====================================-->
    <div class="scroller-inner" ref="inner"
      :style="InnerStyle">
      <!--===================================-->
      <div
        v-for="it in ItemList"
          class="scroller-tile"
          :key="it.key"
          :style="ItemStyle"
          :class="it.className"
          @click.left="OnClickTile(it.rawData, it.index)"
          @mouseenter="OnEnterTile(it.rawData, it.index)"
          @mouseleave="OnLeaveTile(it.rawData, it.index)">
          <component
            :is="it.comType"
            v-bind="it.comConf"/>
      </div>
      <!--===================================-->
    </div>
    <!--=====================================-->
  </div>
  <!--=======================================-->
  <div class="scroll-btn at-right" :class="BtnRightClass">
    <span @click.left="OnScrollRight"><ti-icon :value="iconRight"/></span>
  </div>
  <!--=======================================-->
</div>`);
//========================================
// JOIN <web-shelf-scroller.mjs> ti/com/web/shelf/scroller/web-shelf-scroller.mjs
//========================================
Ti.Preload("ti/com/web/shelf/scroller/web-shelf-scroller.mjs", TI_PACK_EXPORTS['ti/com/web/shelf/scroller/web-shelf-scroller.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/shelf/scroller/_com.json
//========================================
Ti.Preload("ti/com/web/shelf/scroller/_com.json", {
  "name" : "web-shelf-scroller",
  "globally" : true,
  "template" : "./web-shelf-scroller.html",
  "mixins" : ["./web-shelf-scroller.mjs"]
});
//========================================
// JOIN <web-shelf-slide.html> ti/com/web/shelf/slide/web-shelf-slide.html
//========================================
Ti.Preload("ti/com/web/shelf/slide/web-shelf-slide.html", `<div class="web-shelf-slide"
  :class="TopClass"
  :style="TopStyle">
  <!--
    Main
  -->
  <div class="as-main">
    <div
      v-for="it in ItemList"
        :key="it.key"
        class="as-con"
        :class="it.className">
        <component :is="it.comType" v-bind="it.comConf"/>
    </div>
  </div>
  <!--
    Item List
  -->
  <div v-if="hasMultiItems" class="as-indicator" :class="IndicatorClass">
    <div
      v-for="(it, index) in ItemList"
        class="as-item"
        :class="it.className"
        @click.left.stop="OnClickIndicator(it)">
        <span>{{index+1}}</span>
    </div>
  </div>
  <!--
    Btn: Prev
  -->
  <div class="as-btn is-prev" @click.left="prevItem" v-if="hasMultiItems">
    <i class="im im-angle-left"></i>
  </div>
  <!--
    Btn: Next
  -->
  <div class="as-btn is-next" @click.left="nextItem" v-if="hasMultiItems">
    <i class="im im-angle-right"></i>
  </div>
</div>`);
//========================================
// JOIN <web-shelf-slide.mjs> ti/com/web/shelf/slide/web-shelf-slide.mjs
//========================================
Ti.Preload("ti/com/web/shelf/slide/web-shelf-slide.mjs", TI_PACK_EXPORTS['ti/com/web/shelf/slide/web-shelf-slide.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/shelf/slide/_com.json
//========================================
Ti.Preload("ti/com/web/shelf/slide/_com.json", {
  "name" : "web-shelf-slide",
  "globally" : true,
  "template" : "./web-shelf-slide.html",
  "mixins" : ["./web-shelf-slide.mjs"]
});
//========================================
// JOIN <web-shelf-wall.html> ti/com/web/shelf/wall/web-shelf-wall.html
//========================================
Ti.Preload("ti/com/web/shelf/wall/web-shelf-wall.html", `<div class="web-shelf-wall"
  :class="TopClass"
  @scroll="OnScroll">
  <!--
    Loading
  -->
  <ti-loading
    v-if="isLoading"
      class="as-big"
      v-bind="loadingAs"/>
  <!--
    Blank
  -->
  <ti-loading
    v-else-if="isEmpty"
      class="as-big"
      v-bind="blankAs"/>
  <!--
    Each Items
  -->
  <div v-else class="wall-group" ref="group">
    <!--
      ===========================================
      Items in row
    -->
    <div
      v-for="it in WallItems"
        :key="it.key"
        class="wall-tile is-com"
        :class="it.className"
        :style="it.style">
        <component :is="it.comType" v-bind="it.comConf"/>
    </div>
    <!--
      ===========================================
      Blank items
    -->
    <div
      v-for="it in BlankItems"
        :key="it.key"
        class="wall-tile is-blank"
        :class="it.className"
        :style="it.style"></div>
  </div> <!--End Row-->
  <!--
    Show load more
  -->
  <div ref="more"
    v-if="showLoadMore"
      class="as-load-more">
      <div ref="moreBtn"
        class="as-load-more-btn"
        @click.left="OnClickLoadMore">
        <span class="as-icon"><TiIcon :value="LoadingMoreBtn.icon"/></span>
        <span class="as-text">{{LoadingMoreBtn.text | i18n}}</span>
      </div>
  </div>
</div>`);
//========================================
// JOIN <web-shelf-wall.mjs> ti/com/web/shelf/wall/web-shelf-wall.mjs
//========================================
Ti.Preload("ti/com/web/shelf/wall/web-shelf-wall.mjs", TI_PACK_EXPORTS['ti/com/web/shelf/wall/web-shelf-wall.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/shelf/wall/_com.json
//========================================
Ti.Preload("ti/com/web/shelf/wall/_com.json", {
  "name" : "web-shelf-wall",
  "globally" : true,
  "template" : "./web-shelf-wall.html",
  "mixins" : ["./web-shelf-wall.mjs"]
});
//========================================
// JOIN <web-text-article-computed.mjs> ti/com/web/text/article/web-text-article-computed.mjs
//========================================
Ti.Preload("ti/com/web/text/article/web-text-article-computed.mjs", TI_PACK_EXPORTS['ti/com/web/text/article/web-text-article-computed.mjs']);
//========================================
// JOIN <web-text-article-methods.mjs> ti/com/web/text/article/web-text-article-methods.mjs
//========================================
Ti.Preload("ti/com/web/text/article/web-text-article-methods.mjs", TI_PACK_EXPORTS['ti/com/web/text/article/web-text-article-methods.mjs']);
//========================================
// JOIN <web-text-article-props.mjs> ti/com/web/text/article/web-text-article-props.mjs
//========================================
Ti.Preload("ti/com/web/text/article/web-text-article-props.mjs", TI_PACK_EXPORTS['ti/com/web/text/article/web-text-article-props.mjs']);
//========================================
// JOIN <web-text-article.html> ti/com/web/text/article/web-text-article.html
//========================================
Ti.Preload("ti/com/web/text/article/web-text-article.html", `<div class="web-text-article" :class="TopClass">
  <!--- Loading -->
  <TiLoading
    v-if="isLoading && loadingAs"
      v-bind="loadingAs"/>
  <!-- Blank -->
  <component
    v-else-if="isBlank && blankAs"
      :is="blankAs.comType"
      v-bind="blankAs.comConf"/>
  <!-- Render content -->
  <article ref="main"
    class="ti-article"
    :class="ArticleClass"
    :style="articleStyle"></article>
</div>`);
//========================================
// JOIN <web-text-article.mjs> ti/com/web/text/article/web-text-article.mjs
//========================================
Ti.Preload("ti/com/web/text/article/web-text-article.mjs", TI_PACK_EXPORTS['ti/com/web/text/article/web-text-article.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/text/article/_com.json
//========================================
Ti.Preload("ti/com/web/text/article/_com.json", {
  "name" : "web-text-article",
  "globally" : true,
  "template" : "./web-text-article.html",
  "props" : "./web-text-article-props.mjs",
  "computed" : "./web-text-article-computed.mjs",
  "methods" : "./web-text-article-methods.mjs",
  "mixins"   : ["./web-text-article.mjs"],
  "components" : [
    "@com:ti/media/audio"
  ]
});
//========================================
// JOIN <web-text-heading.html> ti/com/web/text/heading/web-text-heading.html
//========================================
Ti.Preload("ti/com/web/text/heading/web-text-heading.html", `<div class="web-text-heading"
  :class="TopClass">
  <!--
    Back button
  -->
  <a
    v-if="showBackward"
      class="as-backward"
      href="javascript:void(0)"
      @click.left="OnClickBackward"><i class="fas fa-chevron-left"></i></a>
  <!--
    Main part
  -->
  <div class="as-main-part">
    <!--Title/Icon-->
    <a
      v-if="title"
        class="as-title"
        :class="TitleClass"
        :style="TitleStyle"
        :href="href"
        @click.left="OnClickTitle">
          <TiIcon
            v-if="icon"
              class="at-0"
              :value="icon"/>
          <span
            v-if="title"
              class="as-title-text">{{title | i18n}}</span>
          <TiIcon
            v-if="titleIcon"
              class="at-1"
              :value="titleIcon"/>
    </a>
    <!--Comments-->
    <div
      v-if="comment"
        class="as-comment"><span>{{comment | i18n}}</span></div>
  </div>
  <!--
    View more Icon
  -->
  <template v-if="showMoreIcon">
    <a
      v-for="moreIcon in TheMoreIcon"
        class="as-more"
        :href="moreIcon.href"
        :title="moreIcon.tip"
        :target="TheMoreTarget"
        :style="moreIconStyle"
        @click.left="OnClickMore(moreIcon)">
        <TiIcon
            v-bind="moreIconConf"
            :value="moreIcon"/>
    </a>
  </template>
  <!--
    view more text
  -->
  <a
    v-if="moreText"
      class="as-more-text"
      :target="TheMoreTarget"
      :href="moreHref">{{moreText|i18nTxt}}</a>
</div>`);
//========================================
// JOIN <web-text-heading.mjs> ti/com/web/text/heading/web-text-heading.mjs
//========================================
Ti.Preload("ti/com/web/text/heading/web-text-heading.mjs", TI_PACK_EXPORTS['ti/com/web/text/heading/web-text-heading.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/text/heading/_com.json
//========================================
Ti.Preload("ti/com/web/text/heading/_com.json", {
  "name" : "web-text-heading",
  "globally" : true,
  "template" : "./web-text-heading.html",
  "mixins"   : ["./web-text-heading.mjs"]
});
//========================================
// JOIN <web-text-raw.html> ti/com/web/text/raw/web-text-raw.html
//========================================
Ti.Preload("ti/com/web/text/raw/web-text-raw.html", `<div class="web-text-raw" :class="TopClass">
  <!--
    Icon
  -->
  <ti-icon 
    v-if="icon"
      :value="icon"/>
  <!--
    Value As Text
  -->
  <div
    v-if="hasValue"
      class="as-text">
      <div v-for="li in TheValue">{{li}}</div>
  </div>
</div>`);
//========================================
// JOIN <web-text-raw.mjs> ti/com/web/text/raw/web-text-raw.mjs
//========================================
Ti.Preload("ti/com/web/text/raw/web-text-raw.mjs", TI_PACK_EXPORTS['ti/com/web/text/raw/web-text-raw.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/text/raw/_com.json
//========================================
Ti.Preload("ti/com/web/text/raw/_com.json", {
  "name" : "web-text-raw",
  "globally" : true,
  "template" : "./web-text-raw.html",
  "mixins"   : ["./web-text-raw.mjs"]
});
//========================================
// JOIN <web-tile-address.html> ti/com/web/tile/address/web-tile-address.html
//========================================
Ti.Preload("ti/com/web/tile/address/web-tile-address.html", `<div class="web-tile-address"
  :class="TopClass"
  @click.left="OnClickTop">
  <!--
    Center
  -->
  <div class="at-center">
    <!--Has Value-->
    <template v-if="hasValue">
      <div class="is-info">
        <div
          v-if="Item.consignee">
            <span>{{'address-consignee'|i18n}}:</span>
            <em>{{Item.consignee}}</em></div>
        <div
          v-if="Item.phone">
            <span>{{'address-k-phone'|i18n}}:</span>
            <em>{{Item.phone}}</em></div>
        <div
          v-if="Item.email">
            <span>{{'address-k-email'|i18n}}:</span>
            <em>{{Item.email}}</em></div>
      </div>
      <div class="is-big">
        <span class="as-street">{{Item.street}}</span>
        <span class="as-door">{{Item.door}}</span>
      </div>
    </template>
    <!--Blank-->
    <ti-loading
      v-else 
        class="as-big ti-fill-parent"
        style="padding:0"
        v-bind="blankAs"/>
  </div>
  <!--
    Left top
  -->
  <div class="at-left-top is-float">
    <template v-if="title">
      <span class="is-bold">{{title | i18n}}</span>
    </template>
    <template v-else>
      <a 
        v-if="can.default && !Item.dftaddr"
          @click="OnSetDefault">{{'address-set-dft'|i18n}}</a>
      <span
        v-else-if="Item.dftaddr"
          class="is-bold">{{'address-is-dft'|i18n}}</span>
    </template>
  </div>
  <!--
    Left-bottom
  -->
  <div class="at-left-bottom is-float">
    <span
      v-if="Item.city">{{Item.city}}</span>
    <span
      v-if="Item.province">{{Item.province}}</span>
    <span
      v-if="showCountry && Item.countryName">{{Item.countryName}}</span>
  </div>
  <!--
    Right-top
  -->
  <div
    v-if="can.remove || can.edit || can.choose" 
      class="at-right-top is-float">
      <a v-if="can.remove" @click="OnRemove">{{'del'|i18n}}</a>
      <a v-if="can.edit" @click="OnEdit">{{'edit'|i18n}}</a>
      <a v-if="can.choose" @click="OnChoose">{{'choose'|i18n}}</a>
      <a v-if="can.add" @click="OnAdd">{{'address-shipping-add'|i18n}}</a>
  </div>  
</div>`);
//========================================
// JOIN <web-tile-address.mjs> ti/com/web/tile/address/web-tile-address.mjs
//========================================
Ti.Preload("ti/com/web/tile/address/web-tile-address.mjs", TI_PACK_EXPORTS['ti/com/web/tile/address/web-tile-address.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/tile/address/_com.json
//========================================
Ti.Preload("ti/com/web/tile/address/_com.json", {
  "name" : "web-tile-address",
  "globally" : true,
  "template" : "./web-tile-address.html",
  "mixins" : ["./web-tile-address.mjs"]
});
//========================================
// JOIN <web-tile-article.html> ti/com/web/tile/article/web-tile-article.html
//========================================
Ti.Preload("ti/com/web/tile/article/web-tile-article.html", `<div class="web-tile-article"
  :class="TopClass"
  :style="TopStyle"
  :title="title | i18n">
  <!--
    Title
  -->
  <a 
    v-if="title"
      class="as-header"
      :style="TheHeaderStyle"
      :target="LinkTarget"
      :href="href"><span>{{title | i18n}}</span></a>
  <!--
    Content
  -->
  <article
    v-if="hasContent"
      :style="articleStyle"
      v-html="HtmlContent"></article>
  <!--
    Button
  -->
  <footer
    v-if="hasButton"
      :style="footerStyle">
      <a class="as-btn" :href="href" :target="LinkTarget">
        <span v-if="btnText" class="as-text">{{btnText|i18n}}</span>
        <TiIcon v-if="btnIcon" :value="btnIcon"/>
      </a>
  </footer>
</div>`);
//========================================
// JOIN <web-tile-article.mjs> ti/com/web/tile/article/web-tile-article.mjs
//========================================
Ti.Preload("ti/com/web/tile/article/web-tile-article.mjs", TI_PACK_EXPORTS['ti/com/web/tile/article/web-tile-article.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/tile/article/_com.json
//========================================
Ti.Preload("ti/com/web/tile/article/_com.json", {
  "name" : "web-tile-article",
  "globally" : true,
  "template" : "./web-tile-article.html",
  "mixins" : ["./web-tile-article.mjs"]
});
//========================================
// JOIN <web-tile-comment.html> ti/com/web/tile/comment/web-tile-comment.html
//========================================
Ti.Preload("ti/com/web/tile/comment/web-tile-comment.html", `<div class="web-tile-comment"
  :class="TopClass">
  <!--
    Left: User Avator
  -->
  <div class="at-left">
    <ti-icon :value="AvatarIcon"/>
  </div>
  <!--
    Right: Comment
  -->
  <div class="at-right">
      <!--Head-->
      <div class="as-head">
        <span class="as-u-name">{{Post.userName}}</span>
        <span class="as-time">{{CreateTimeText}}</span>
      </div>
      <!--Content-->
      <div class="as-content">{{Post.content}}</div>
  </div>
</div>`);
//========================================
// JOIN <web-tile-comment.mjs> ti/com/web/tile/comment/web-tile-comment.mjs
//========================================
Ti.Preload("ti/com/web/tile/comment/web-tile-comment.mjs", TI_PACK_EXPORTS['ti/com/web/tile/comment/web-tile-comment.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/tile/comment/_com.json
//========================================
Ti.Preload("ti/com/web/tile/comment/_com.json", {
  "name" : "web-tile-comment",
  "globally" : true,
  "template" : "./web-tile-comment.html",
  "mixins" : ["./web-tile-comment.mjs"]
});
//========================================
// JOIN <web-tile-order.html> ti/com/web/tile/order/web-tile-order.html
//========================================
Ti.Preload("ti/com/web/tile/order/web-tile-order.html", `<div class="web-tile-order"
  :class="TopClass">
  <!--
    Summary
  -->
  <div class="as-summary">
    <!--ID-->
    <div class="or-field as-id">
      <span>{{'order-k-id'|i18n}}</span>
      <a 
        v-if="OrderHref"
          :href="OrderHref"
          @click.left.prevent="OnClickOrder">{{OrderId}}</a>
      <em
        v-else>{{OrderId}}</em>
    </div>
    <!--Date-->
    <div class="or-field as-datetime">
      <span>{{'wn-key-ct'|i18n}}</span>
      <em>{{Order.ct|datetime}}</em>
    </div>
    <!--Fee-->
    <div class="or-field as-price">
      <span>{{'order-k-fee'|i18n}}</span>
      <em>{{CurrencyChar}}{{Order.fee}}</em>
    </div>
    <!--Payment-->
    <div class="or-field as-pay_tp">
      <span>{{'order-k-pay_tp'|i18n}}</span>
      <em>{{'pay-by-'+Order.pay_tp|i18n}}</em>
    </div>
    <!--Status-->
    <div class="or-field as-st">
      <span>{{'order-k-st'|i18n}}</span>
      <em>{{OrderStatus|i18n}}</em>
    </div>
  </div>
  <!--
    Product list
  -->
  <div class="as-products">
    <table>
      <tr
        v-for="it in Products"
          class="as-pro-it">
          <!--Thumb-->
          <td><a 
              :href="it.href"
              @click.left.prevent="OnClickProduct(it)"><img :src="it.src"/></a></td>
          <!--Title-->
          <td>
              <a 
                :href="it.href"
                @click.left.prevent="OnClickProduct(it)">{{it.title}}</a>
          </td>
          <!--Price-->
          <td class="as-price">{{CurrencyChar}}{{it.price}}</td>
          <!--Amount-->
          <td class="as-amount">x{{it.amount}}</td>
          <!--Subtotal-->
          <td class="as-subtotal">{{CurrencyChar}}{{it.subtotal}}</td>
      </tr>
    </table>
  </div>
</div>`);
//========================================
// JOIN <web-tile-order.mjs> ti/com/web/tile/order/web-tile-order.mjs
//========================================
Ti.Preload("ti/com/web/tile/order/web-tile-order.mjs", TI_PACK_EXPORTS['ti/com/web/tile/order/web-tile-order.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/tile/order/_com.json
//========================================
Ti.Preload("ti/com/web/tile/order/_com.json", {
  "name" : "web-tile-order",
  "globally" : true,
  "template" : "./web-tile-order.html",
  "mixins" : ["./web-tile-order.mjs"]
});
//========================================
// JOIN <web-upload-file.html> ti/com/web/upload/file/web-upload-file.html
//========================================
Ti.Preload("ti/com/web/upload/file/web-upload-file.html", `<TiUploadFile
  :preview="previewIcon"
  :preview-type="PreviewType"
  :exlink="exlink"
  :width="width"
  :height="height"
  :max-width="maxWidth"
  :max-height="maxHeight"
  :progress="progress"
  :upload-file="uploadFile"
  :removable="removable"
  @upload="OnUpload"
  @remove="OnRemove"
  @exlink="OnExlink"
  @open="OnOpen"/>`);
//========================================
// JOIN <web-upload-file.mjs> ti/com/web/upload/file/web-upload-file.mjs
//========================================
Ti.Preload("ti/com/web/upload/file/web-upload-file.mjs", TI_PACK_EXPORTS['ti/com/web/upload/file/web-upload-file.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/upload/file/_com.json
//========================================
Ti.Preload("ti/com/web/upload/file/_com.json", {
  "name" : "web-upload-file",
  "globally" : true,
  "template" : "./web-upload-file.html",
  "mixins" : ["./web-upload-file.mjs"],
  "components" : [
    "@com:ti/upload/file"
  ]
});
//========================================
// JOIN <widget-frame.html> ti/com/web/widget/frame/widget-frame.html
//========================================
Ti.Preload("ti/com/web/widget/frame/widget-frame.html", `<div class="web-widget-frame"
  :class="TopClass"
  :style="TopStyle">
  <template v-if="hasFrameSrc">
    <iframe ref="frame"
      :width="width"
      :height="height"
      :src="FrameSrc"
      :style="FrameStyle"
      @load="OnFrameLoaded"></iframe>
  </template>
</div>`);
//========================================
// JOIN <widget-frame.mjs> ti/com/web/widget/frame/widget-frame.mjs
//========================================
Ti.Preload("ti/com/web/widget/frame/widget-frame.mjs", TI_PACK_EXPORTS['ti/com/web/widget/frame/widget-frame.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/widget/frame/_com.json
//========================================
Ti.Preload("ti/com/web/widget/frame/_com.json", {
  "name" : "web-widget-frame",
  "globally" : true,
  "template" : "./widget-frame.html",
  "mixins"   : ["./widget-frame.mjs"],
  "components" : []
});
//========================================
// JOIN <widget-input-text.html> ti/com/web/widget/input/text/widget-input-text.html
//========================================
Ti.Preload("ti/com/web/widget/input/text/widget-input-text.html", `<div class="web-widget-input-text" 
  :class="TopClass" 
  :style="TopStyle"
  v-ti-activable>
  <!--
    Title
  -->
  <div
    v-if="hasTitle"
      class="as-title">
      <span>{{title|i18n}}</span>
      <template v-if="total">
        <i class="far fa-comments"></i>
        <em>{{total}}</em>
      </template>
  </div>
  <!--
    Text
  -->
  <div class="as-text">
    <textarea
      ref="text"
      spellcheck="false"
      :placeholder="placeholder | i18n"
      :value="TextValue"
      @change="OnTextChange"></textarea>
    <!--
      Bottom Bar
    -->
    <div class="as-bar">
      <!--
        Left
      -->
      <div class="at-left">
        <div class="as-btn btn-emoji"
          @click.left="OnBtnEmojiClick">
          <ti-icon 
            v-if="emojiBtnIcon"
              :value="emojiBtnIcon"/>
          <span>{{emojiBtnText|i18n}}</span>
        </div>
      </div> <!--Left-->
      <!--
        Right
      -->
      <div class="at-right">
        <div class="as-btn btn-post"
          @click.left="OnBtnPostClick">
          <ti-icon 
            v-if="postBtnIcon"
              :value="postBtnIcon"/>
          <span>{{postBtnText|i18n}}</span>
        </div>
      </div> <!-- Right -->
    </div> <!-- Bottom Bar-->
  </div>
</div>`);
//========================================
// JOIN <widget-input-text.mjs> ti/com/web/widget/input/text/widget-input-text.mjs
//========================================
Ti.Preload("ti/com/web/widget/input/text/widget-input-text.mjs", TI_PACK_EXPORTS['ti/com/web/widget/input/text/widget-input-text.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/widget/input/text/_com.json
//========================================
Ti.Preload("ti/com/web/widget/input/text/_com.json", {
  "name" : "web-widget-input-text",
  "globally" : true,
  "template" : "./widget-input-text.html",
  "mixins" : ["./widget-input-text.mjs"],
  "components" : [
    "@com:ti/sheet/emoji"]
});
//========================================
// JOIN <widget-rawhtml.html> ti/com/web/widget/rawhtml/widget-rawhtml.html
//========================================
Ti.Preload("ti/com/web/widget/rawhtml/widget-rawhtml.html", `<div class="web-widget-rawhtml"
  :class="TopClass"></div>`);
//========================================
// JOIN <widget-rawhtml.mjs> ti/com/web/widget/rawhtml/widget-rawhtml.mjs
//========================================
Ti.Preload("ti/com/web/widget/rawhtml/widget-rawhtml.mjs", TI_PACK_EXPORTS['ti/com/web/widget/rawhtml/widget-rawhtml.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/widget/rawhtml/_com.json
//========================================
Ti.Preload("ti/com/web/widget/rawhtml/_com.json", {
  "name" : "web-widget-rawhtml",
  "globally" : true,
  "template" : "./widget-rawhtml.html",
  "mixins"   : ["./widget-rawhtml.mjs"],
  "components" : []
});
//========================================
// JOIN <widget-sharebar.html> ti/com/web/widget/sharebar/widget-sharebar.html
//========================================
Ti.Preload("ti/com/web/widget/sharebar/widget-sharebar.html", `<div class="web-widget-sharebar" :class="TopClass">
  <!--
    Title
  -->
  <div v-if="title" class="as-title">{{title|i18n}}</div>
  <!--
    Items
  -->
  <div class="as-items">
    <a
      v-for="it in TheItems"
      class="bar-item"
      :class="it.className"
      @click.left="OnClickItem(it)"
    >
      <i :class="it.iconClass"></i>
    </a>
  </div>
  <!--
    Weixin QrCode
  -->
  <transition name="ti-trans-fade">
    <div
      v-if="qrcodeImgSrc"
      @click.left="qrcodeImgSrc=undefined"
      class="as-weixin-qrcode-con"
    >
      <div class="as-qrcode-img">
        <img :src="qrcodeImgSrc" />
        <div>用微信扫描二维码</div>
        <div>Scan a QR code on wechat</div>
      </div>
    </div>
  </transition>
</div>`);
//========================================
// JOIN <widget-sharebar.mjs> ti/com/web/widget/sharebar/widget-sharebar.mjs
//========================================
Ti.Preload("ti/com/web/widget/sharebar/widget-sharebar.mjs", TI_PACK_EXPORTS['ti/com/web/widget/sharebar/widget-sharebar.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/widget/sharebar/_com.json
//========================================
Ti.Preload("ti/com/web/widget/sharebar/_com.json", {
  "name" : "web-widget-sharebar",
  "globally" : true,
  "template" : "./widget-sharebar.html",
  "mixins"   : ["./widget-sharebar.mjs"],
  "components" : []
});
//========================================
// JOIN <widget-summary.html> ti/com/web/widget/summary/widget-summary.html
//========================================
Ti.Preload("ti/com/web/widget/summary/widget-summary.html", `<div class="web-widget-summary"
  :class="TopClass">
  <!--
    Title
  -->
  <div
    v-if="title"
      class="as-title">{{title|i18n}}</div>
  <!--
    Items
  -->
  <div class="as-list">
    <div
      v-for="it in TheItems"
        class="as-item">
      <!--Icon-->
      <ti-icon
        v-if="it.icon"
          :value="it.icon"/>
      <!--Value-->
      <div class="as-value">{{it.value}}</div>
      <!--Text-->
      <div
        v-if="it.text"
          class="as-text">{{it.text|i18n}}</div>
    </div>
  </div>
</div>`);
//========================================
// JOIN <widget-summary.mjs> ti/com/web/widget/summary/widget-summary.mjs
//========================================
Ti.Preload("ti/com/web/widget/summary/widget-summary.mjs", TI_PACK_EXPORTS['ti/com/web/widget/summary/widget-summary.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/widget/summary/_com.json
//========================================
Ti.Preload("ti/com/web/widget/summary/_com.json", {
  "name" : "web-widget-summary",
  "globally" : true,
  "template" : "./widget-summary.html",
  "mixins"   : ["./widget-summary.mjs"],
  "components" : []
});
//========================================
// JOIN <widget-user.html> ti/com/web/widget/user/widget-user.html
//========================================
Ti.Preload("ti/com/web/widget/user/widget-user.html", `<div class="web-widget-user"
  :class="TopClass">
  <!--
    Avatar
  -->
  <div class="as-avatar">
    <ti-icon :value="TheAvatar"/>
  </div>
  <!--
    Nickname
  -->
  <div class="as-title">
    <div class="as-nickname">{{TheNickname}}</div>
  </div>
  <!--
    Action bar
  -->
  <div class="as-actions">
    <div 
      class="ti-btn reset-passwd"
      @click="$notify('go:passwd:reset')">{{'passwd-reset'|i18n}}</div>
    <div
      class="ti-btn edit-profile"
      @click="$notify('go:my:profile')">{{'profile-edit'|i18n}}</div>
  </div>
</div>`);
//========================================
// JOIN <widget-user.mjs> ti/com/web/widget/user/widget-user.mjs
//========================================
Ti.Preload("ti/com/web/widget/user/widget-user.mjs", TI_PACK_EXPORTS['ti/com/web/widget/user/widget-user.mjs']);
//========================================
// JOIN <_com.json> ti/com/web/widget/user/_com.json
//========================================
Ti.Preload("ti/com/web/widget/user/_com.json", {
  "name" : "web-widget-user",
  "globally" : true,
  "template" : "./widget-user.html",
  "mixins"   : ["./widget-user.mjs"],
  "components" : []
});
//========================================
// JOIN <wn-adaptlist-methods.mjs> ti/com/wn/adaptlist/wn-adaptlist-methods.mjs
//========================================
Ti.Preload("ti/com/wn/adaptlist/wn-adaptlist-methods.mjs", TI_PACK_EXPORTS['ti/com/wn/adaptlist/wn-adaptlist-methods.mjs']);
//========================================
// JOIN <wn-adaptlist-props.mjs> ti/com/wn/adaptlist/wn-adaptlist-props.mjs
//========================================
Ti.Preload("ti/com/wn/adaptlist/wn-adaptlist-props.mjs", TI_PACK_EXPORTS['ti/com/wn/adaptlist/wn-adaptlist-props.mjs']);
//========================================
// JOIN <wn-adaptlist.html> ti/com/wn/adaptlist/wn-adaptlist.html
//========================================
Ti.Preload("ti/com/wn/adaptlist/wn-adaptlist.html", `<div class="wn-adaptlist" 
  :class="TopClass"
  v-ti-activable>
  <div
    class="wal-con ti-fill-parent"
    v-drop-files.mask="UploadDragAndDropHandler">
    <!--==================================
      Show Loading
    -->
    <ti-loading
      v-if="isLoading"
        class="as-reloading as-mid-tip"
        text="i18n:reloading"/>
    <!--==================================
      Data List
    -->
    <component :is="MainComType"
      v-else
        class="ti-fill-parent"
        :data="WallDataList"
        :changed-id="changedId"
        :current-id="myCurrentId"
        :checked-ids="myCheckedIds"
        :multi="multi"
        :checkable="checkable"
        :blurable="blurable"
        :selectable="selectable"
        :puppet-mode="true"
        :rowNumberBase="rowNumberBase"
        v-bind="MainComConf"
        :on-init="OnListInit"
        @select="OnItemSelecteItem"
        @open="OnItemOpen"/>
    <!--==================================
      switch view
    -->
    <div class="wal-view-switcher">
      <div class="as-ava-vt-list">
        <ul>
          <li
            v-for="vt in TheAvaViewTypes"
              @click.left="OnSwitchViewType(vt)">
              <TiIcon :value="vt.icon"/>
          </li>
        </ul>
      </div>
      <div class="as-current-vt">
        <TiIcon :value="CurrentViewType.icon"/>
      </div>
    </div>
    <!--==================================
      Hidden file upload control
    -->
    <input 
      type="file" 
      ref="file" 
      class="ti-hide"
      :accept="AcceptUploadFiles"
      multiple
      @change.stop.seft="OnSelectLocalFilesToUpload">
    <!--==================================
      Uploading Pannel
    -->
    <div
      class="wal-uploading"
      :class="UploadingClass">
      <header>
        <ti-icon value="fas-spinner fa-pulse"/>
        <span>{{'uploading'|i18n}}</span>
      </header>
      <section>
        <TiWall
          :data="TheUploadingList"
          :spacing="spacing"
          :selectable="false"
          :multi="false"
          :checkable="false"
          :blurable="false"
          :display="UploadingItemDisplay"
          :puppet-mode="true"/>
      </section>
    </div>
    <!--==================================-->
  </div>
</div>`);
//========================================
// JOIN <wn-adaptlist.mjs> ti/com/wn/adaptlist/wn-adaptlist.mjs
//========================================
Ti.Preload("ti/com/wn/adaptlist/wn-adaptlist.mjs", TI_PACK_EXPORTS['ti/com/wn/adaptlist/wn-adaptlist.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/adaptlist/_com.json
//========================================
Ti.Preload("ti/com/wn/adaptlist/_com.json", {
  "name": "wn-adaptlist",
  "globally": true,
  "template": "./wn-adaptlist.html",
  "props": "./wn-adaptlist-props.mjs",
  "methods": "./wn-adaptlist-methods.mjs",
  "mixins": [
    "./wn-adaptlist.mjs"
  ],
  "components": [
    "@com:ti/obj/thumb",
    "@com:ti/wall",
    "@com:wn/list",
    "@com:wn/table"
  ]
});
//========================================
// JOIN <wn-browser.html> ti/com/wn/browser/wn-browser.html
//========================================
Ti.Preload("ti/com/wn/browser/wn-browser.html", `<TiGui
  class="wn-browser"
  :class="TopClass"
  :schema="TheSchema"
  :layout="TheLayout"
  :canLoading="canLoading"
  :loadingAs="loadingAs"
  :loading="loading"
  keep-shown-to="chispo-trademark-browser-gui-shown"
  @list::select="OnSelectItem"
  @listviewtype:change="OnListViewTypeChange"
  @filter::change="OnFilterChange"
  @sorter::change="OnSorterChange"
  @pager::change="OnPagerChange"/>`);
//========================================
// JOIN <wn-browser.mjs> ti/com/wn/browser/wn-browser.mjs
//========================================
Ti.Preload("ti/com/wn/browser/wn-browser.mjs", TI_PACK_EXPORTS['ti/com/wn/browser/wn-browser.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/browser/_com.json
//========================================
Ti.Preload("ti/com/wn/browser/_com.json", {
  "name" : "wn-browser",
  "globally" : true,
  "template" : "./wn-browser.html",
  "mixins" : ["./wn-browser.mjs"],
  "components" : [
    "@com:ti/paging/jumper",
    "@com:wn/thing/manager/com/thing-filter",
    "@com:wn/adaptlist"
  ]
});
//========================================
// JOIN <wn-chart-combo.html> ti/com/wn/chart/combo/wn-chart-combo.html
//========================================
Ti.Preload("ti/com/wn/chart/combo/wn-chart-combo.html", `<div class="wn-chart-combo"
  :class="TopClass">
  <!--
    Chart List
  -->
  <div class="as-main">
    <TiChartCombo
      v-for="li of TheChartList" 
        :key="li.index"
        v-bind="li"
        :data="getChartData(li.index)"
        @change:chart:name="OnChangeChartName(li, $event)"
        @change:chart:type="OnChangeChartType(li, $event)"
        @change:chart:datespan="OnChangeChartDateSpan(li, $event)"
        @reload:data="OnReloadChartData(li, $event)"/>
  </div>
</div>`);
//========================================
// JOIN <wn-chart-combo.mjs> ti/com/wn/chart/combo/wn-chart-combo.mjs
//========================================
Ti.Preload("ti/com/wn/chart/combo/wn-chart-combo.mjs", TI_PACK_EXPORTS['ti/com/wn/chart/combo/wn-chart-combo.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/chart/combo/_com.json
//========================================
Ti.Preload("ti/com/wn/chart/combo/_com.json", {
  "name" : "wn-chart-combo",
  "globally" : true,
  "template" : "./wn-chart-combo.html",
  "mixins"   : ["./wn-chart-combo.mjs"],
  "components" : [
    "@com:ti/chart/combo"
  ],
  "deps" : []
});
//========================================
// JOIN <wn-cmd-panel.html> ti/com/wn/cmd/panel/wn-cmd-panel.html
//========================================
Ti.Preload("ti/com/wn/cmd/panel/wn-cmd-panel.html", `<div class="wn-cmd-panel">
  <!--Head-->
  <div 
    v-if="tipText"
      class="as-tip">
      <ti-icon 
        v-if="tipIcon"
          :value="tipIcon"/>
      <div class="as-text">{{tipText|i18n}}</div>
  </div>
  <!--Logging-->
  <pre ref="lines"
    class="as-lines"
    :class="TopClass"><div  
      v-for="(line, index) in lines"
        :key="index"
        class="as-line">{{line}}</div></pre>
</div>`);
//========================================
// JOIN <wn-cmd-panel.mjs> ti/com/wn/cmd/panel/wn-cmd-panel.mjs
//========================================
Ti.Preload("ti/com/wn/cmd/panel/wn-cmd-panel.mjs", TI_PACK_EXPORTS['ti/com/wn/cmd/panel/wn-cmd-panel.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/cmd/panel/_com.json
//========================================
Ti.Preload("ti/com/wn/cmd/panel/_com.json", {
  "name" : "wn-cmd-panel",
  "globally" : true,
  "template" : "./wn-cmd-panel.html",
  "mixins"   : ["./wn-cmd-panel.mjs"]
});
//========================================
// JOIN <wn-combo-edit-com.html> ti/com/wn/combo/edit-com/wn-combo-edit-com.html
//========================================
Ti.Preload("ti/com/wn/combo/edit-com/wn-combo-edit-com.html", `<ti-label
  class="wn-combo-edit-com"
  :class="className"
  :placeholder="placeholder"
  :prefix-icon="ComIcon"
  :value="ComTitle"
  :suffix-icon="'zmdi-delete'"
  @click:value="OnClickValue"
  @suffix:icon="OnClickSuffixIcon"/>
  `);
//========================================
// JOIN <wn-combo-edit-com.mjs> ti/com/wn/combo/edit-com/wn-combo-edit-com.mjs
//========================================
Ti.Preload("ti/com/wn/combo/edit-com/wn-combo-edit-com.mjs", TI_PACK_EXPORTS['ti/com/wn/combo/edit-com/wn-combo-edit-com.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/combo/edit-com/_com.json
//========================================
Ti.Preload("ti/com/wn/combo/edit-com/_com.json", {
  "name" : "wn-combo-edit-com",
  "globally" : true,
  "template" : "./wn-combo-edit-com.html",
  "mixins"   : "./wn-combo-edit-com.mjs"
});
//========================================
// JOIN <wn-combo-input.html> ti/com/wn/combo/input/wn-combo-input.html
//========================================
Ti.Preload("ti/com/wn/combo/input/wn-combo-input.html", `<ti-combo-input v-bind="this"
  
  :options="OptionsDict"
  :drop-com-type="DropComType"
  :prefix-icon="ThePrefixIcon"
  :drop-display="TheDropDisplay"
  
  @change="$notify('change', $event)"/>
  `);
//========================================
// JOIN <wn-combo-input.mjs> ti/com/wn/combo/input/wn-combo-input.mjs
//========================================
Ti.Preload("ti/com/wn/combo/input/wn-combo-input.mjs", TI_PACK_EXPORTS['ti/com/wn/combo/input/wn-combo-input.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/combo/input/_com.json
//========================================
Ti.Preload("ti/com/wn/combo/input/_com.json", {
  "name" : "wn-combo-input",
  "globally" : true,
  "template" : "./wn-combo-input.html",
  "props"    : [
    "@com:ti/input/ti-input-props.mjs",
    "@com:ti/combo/input/ti-combo-input-props.mjs"],
  "mixins"   : "./wn-combo-input.mjs",
  "components" : [
    "@com:ti/combo/input",
    "@com:wn/list",
    "@com:wn/obj/icon"]
});
//========================================
// JOIN <wn-combo-multi-input.html> ti/com/wn/combo/multi-input/wn-combo-multi-input.html
//========================================
Ti.Preload("ti/com/wn/combo/multi-input/wn-combo-multi-input.html", `<ti-combo-multi-input v-bind="this"

  :options="OptionsDict"
  :tag-mapping="TheTagMapping"
  :drop-com-type="DropComType"
  :prefix-icon="ThePrefixIcon"
  :tag-item-icon-by="TheTagItemIconBy"
  :drop-display="TheDropDisplay"
  
  @change="$notify('change', $event)"/>
  `);
//========================================
// JOIN <wn-combo-multi-input.mjs> ti/com/wn/combo/multi-input/wn-combo-multi-input.mjs
//========================================
Ti.Preload("ti/com/wn/combo/multi-input/wn-combo-multi-input.mjs", TI_PACK_EXPORTS['ti/com/wn/combo/multi-input/wn-combo-multi-input.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/combo/multi-input/_com.json
//========================================
Ti.Preload("ti/com/wn/combo/multi-input/_com.json", {
  "name" : "wn-combo-multi-input",
  "globally" : true,
  "template" : "./wn-combo-multi-input.html",
  "props"    : [
    "@com:ti/input/ti-input-props.mjs",
    "@com:ti/input/tags/ti-input-tags-props.mjs",
    "@com:ti/combo/input/ti-combo-input-props.mjs"],
  "mixins"   : "./wn-combo-multi-input.mjs",
  "components" : [
    "@com:ti/combo/multi-input",
    "@com:wn/list",
    "@com:wn/obj/icon"]
});
//========================================
// JOIN <wn-exporter-form.html> ti/com/wn/data/exporter-form/wn-exporter-form.html
//========================================
Ti.Preload("ti/com/wn/data/exporter-form/wn-exporter-form.html", `<TiForm
  :className="TopClass"
  :autoFieldNameTip="true"
  :tipAsPopIcon="true"
  :gridColumnHint="gridColumnHint"
  :fields="FormFields"
  :data="myData"
  @target_name:reset="OnResetTargetName"
  @change="OnChange"
  @output:fields="OnOutputFieldsChange"
/>`);
//========================================
// JOIN <wn-exporter-form.mjs> ti/com/wn/data/exporter-form/wn-exporter-form.mjs
//========================================
Ti.Preload("ti/com/wn/data/exporter-form/wn-exporter-form.mjs", TI_PACK_EXPORTS['ti/com/wn/data/exporter-form/wn-exporter-form.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/data/exporter-form/_com.json
//========================================
Ti.Preload("ti/com/wn/data/exporter-form/_com.json", {
  "name": "wn-data-exporter-form",
  "globally": true,
  "template": "./wn-exporter-form.html",
  "mixins": "./wn-exporter-form.mjs",
  "components": [
    "@com:ti/bullet/checkbox",
    "@com:ti/transfer",
    "@com:ti/text/json",
    "@com:wn/cmd/panel",
    "@com:web/meta/badge"
  ]
});
//========================================
// JOIN <wn-importer-form.html> ti/com/wn/data/importer-form/wn-importer-form.html
//========================================
Ti.Preload("ti/com/wn/data/importer-form/wn-importer-form.html", `<TiForm
  :className="TopClass"
  :autoFieldNameTip="true"
  :tipAsPopIcon="true"
  :gridColumnHint="gridColumnHint"
  :fields="FormFields"
  :data="myData"
  @target_name:reset="OnResetTargetName"
  @change="OnChange"
  @output:fields="OnOutputFieldsChange"
/>`);
//========================================
// JOIN <wn-importer-form.mjs> ti/com/wn/data/importer-form/wn-importer-form.mjs
//========================================
Ti.Preload("ti/com/wn/data/importer-form/wn-importer-form.mjs", TI_PACK_EXPORTS['ti/com/wn/data/importer-form/wn-importer-form.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/data/importer-form/_com.json
//========================================
Ti.Preload("ti/com/wn/data/importer-form/_com.json", {
  "name": "wn-data-importer-form",
  "globally": true,
  "template": "./wn-importer-form.html",
  "mixins": "./wn-importer-form.mjs",
  "components": [
    "@com:ti/bullet/checkbox",
    "@com:ti/transfer",
    "@com:ti/text/json",
    "@com:wn/cmd/panel",
    "@com:wn/upload/file-box",
    "@com:web/meta/badge"
  ]
});
//========================================
// JOIN <wn-droplist.html> ti/com/wn/droplist/wn-droplist.html
//========================================
Ti.Preload("ti/com/wn/droplist/wn-droplist.html", `<component 
  class="wn-droplist"
  :is="ComType"
  v-bind="this"
  :drop-display="TheDropDisplay"
  :can-input="false"
  :must-in-list="true"
  :auto-collapse="true"
  @change="$notify('change', $event)"/>`);
//========================================
// JOIN <wn-droplist.mjs> ti/com/wn/droplist/wn-droplist.mjs
//========================================
Ti.Preload("ti/com/wn/droplist/wn-droplist.mjs", TI_PACK_EXPORTS['ti/com/wn/droplist/wn-droplist.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/droplist/_com.json
//========================================
Ti.Preload("ti/com/wn/droplist/_com.json", {
  "name" : "wn-droplist",
  "globally" : true,
  "template" : "./wn-droplist.html",
  "props"    : [
    "@com:ti/input/ti-input-props.mjs",
    "@com:ti/input/tags/ti-input-tags-props.mjs",
    "@com:ti/combo/input/ti-combo-input-props.mjs"],
  "mixins"   : ["./wn-droplist.mjs"],
  "components" : [
    "@com:wn/combo/input",
    "@com:wn/combo/multi-input"
  ]
});
//========================================
// JOIN <wn-droptree.html> ti/com/wn/droptree/wn-droptree.html
//========================================
Ti.Preload("ti/com/wn/droptree/wn-droptree.html", `<component 
  class="wn-droptree"
  :is="ComType"
  v-bind="this"
  :value="TheValue"
  drop-com-type="TiTree",
  :drop-com-conf="TreeDropComConf"
  :drop-display="TheDropDisplay"
  :can-input="false"
  :must-in-list="true"
  :auto-collapse="true"
  @change="OnValueChange"/>`);
//========================================
// JOIN <wn-droptree.mjs> ti/com/wn/droptree/wn-droptree.mjs
//========================================
Ti.Preload("ti/com/wn/droptree/wn-droptree.mjs", TI_PACK_EXPORTS['ti/com/wn/droptree/wn-droptree.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/droptree/_com.json
//========================================
Ti.Preload("ti/com/wn/droptree/_com.json", {
  "name" : "wn-droptree",
  "globally" : true,
  "template" : "./wn-droptree.html",
  "props"    : [
    "@com:ti/input/ti-input-props.mjs",
    "@com:ti/input/tags/ti-input-tags-props.mjs",
    "@com:ti/combo/input/ti-combo-input-props.mjs"],
  "mixins"   : ["./wn-droptree.mjs"],
  "components" : [
    "@com:wn/combo/input",
    "@com:wn/combo/multi-input"
  ]
});
//========================================
// JOIN <wn-entity-history.html> ti/com/wn/entity/history/wn-entity-history.html
//========================================
Ti.Preload("ti/com/wn/entity/history/wn-entity-history.html", `<ti-gui
  class="wn-entity-history"
  :class="TopClass"
  :layout="Layout"
  :schema="Schema"
  :shown="myShown"
  :can-loading="true"
  :loading-as="loading"
  @block:shown="OnShownChange"
  @filter::change="OnFilterChange"
  @sorter::change="OnSorterChange"
  @pager::change="OnPagerChange"
  @list::select="OnSelect"/>`);
//========================================
// JOIN <wn-entity-history.mjs> ti/com/wn/entity/history/wn-entity-history.mjs
//========================================
Ti.Preload("ti/com/wn/entity/history/wn-entity-history.mjs", TI_PACK_EXPORTS['ti/com/wn/entity/history/wn-entity-history.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/entity/history/_com.json
//========================================
Ti.Preload("ti/com/wn/entity/history/_com.json", {
  "name" : "wn-entity-history",
  "globally" : true,
  "template" : "./wn-entity-history.html",
  "mixins"   : ["./wn-entity-history.mjs"],
  "components": [
    "@com:ti/input/daterange",
    "@com:ti/combo/filter",
    "@com:ti/paging/jumper"
  ]
});
//========================================
// JOIN <wn-files-delegates.mjs> ti/com/wn/files/wn-files-delegates.mjs
//========================================
Ti.Preload("ti/com/wn/files/wn-files-delegates.mjs", TI_PACK_EXPORTS['ti/com/wn/files/wn-files-delegates.mjs']);
//========================================
// JOIN <wn-files.html> ti/com/wn/files/wn-files.html
//========================================
Ti.Preload("ti/com/wn/files/wn-files.html", `<WnObjAdaptor
  class="wn-files"
  :moduleName="moduleName"
  :guiShown="guiShown"
  :dirId="dirId"
  :oDir="oDir"
  :fixedMatch="fixedMatch"
  :filter="filter"
  :sorter="sorter"
  :list="list"
  :currentId="currentId"
  :checkedIds="checkedIds"
  :pager="pager"
  :meta="meta"
  :content="content"
  :status="status"
  :fieldStatus="fieldStatus"
  :objActions="objActions"
  :layout="GuiLayout"
  :schema="GuiSchema"
  :objMethods="objMethods"
  :viewType="viewType"
  :exposeHidden="exposeHidden"
  :getters="getters"
  :events="GuiEvents"/>
  `);
//========================================
// JOIN <wn-files.mjs> ti/com/wn/files/wn-files.mjs
//========================================
Ti.Preload("ti/com/wn/files/wn-files.mjs", TI_PACK_EXPORTS['ti/com/wn/files/wn-files.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/files/_com.json
//========================================
Ti.Preload("ti/com/wn/files/_com.json", {
  "name": "wn-files",
  "globally": true,
  "template": "./wn-files.html",
  "props": "@com:wn/obj/adaptor/wn-obj-adaptor-props.mjs",
  "methods": "./wn-files-delegates.mjs",
  "mixins": "./wn-files.mjs",
  "components": [
    "@com:wn/obj/adaptor",
    "@com:ti/combo/table"
  ]
});
//========================================
// JOIN <wn-fileset-config.html> ti/com/wn/fileset/config/wn-fileset-config.html
//========================================
Ti.Preload("ti/com/wn/fileset/config/wn-fileset-config.html", `<div class="wn-fileset-config"
  :class="TopClass">
  <WnFilesetTabs
    v-bind="this"
    com-type="wn-fileset-list"
    :com-conf="FilesetListConf"
    :meta="myHomeDir"
    :on-init="OnTabsInit"/>
</div>`);
//========================================
// JOIN <wn-fileset-config.mjs> ti/com/wn/fileset/config/wn-fileset-config.mjs
//========================================
Ti.Preload("ti/com/wn/fileset/config/wn-fileset-config.mjs", TI_PACK_EXPORTS['ti/com/wn/fileset/config/wn-fileset-config.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/fileset/config/_com.json
//========================================
Ti.Preload("ti/com/wn/fileset/config/_com.json", {
  "name" : "wn-fileset-config",
  "globally" : true,
  "template" : "./wn-fileset-config.html",
  "mixins"   : [
    "@com:wn/support/wn-fileset-mixins.mjs",
    "./wn-fileset-config.mjs"],
  "components" : [
    "@com:wn/fileset/list",
    "@com:wn/fileset/tabs"
  ],
  "deps" : []
});
//========================================
// JOIN <wn-fileset-list.html> ti/com/wn/fileset/list/wn-fileset-list.html
//========================================
Ti.Preload("ti/com/wn/fileset/list/wn-fileset-list.html", `<TiGui
  class="wn-fileset-list"
  :class="TopClass"
  :layout="GUILayout"
  :schema="GUISchema"
  :can-loading="true"
  :loading="isGUILoading"
  :action-status="DetailActionStatus"
  @list::select="OnListSelect"
  @list::open="OnListOpen"
  @meta::change="OnMetaChange"
  @meta::field:change="OnMetaFieldChange"
  @detail::change="OnDetailChange"/>`);
//========================================
// JOIN <wn-fileset-list.mjs> ti/com/wn/fileset/list/wn-fileset-list.mjs
//========================================
Ti.Preload("ti/com/wn/fileset/list/wn-fileset-list.mjs", TI_PACK_EXPORTS['ti/com/wn/fileset/list/wn-fileset-list.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/fileset/list/_com.json
//========================================
Ti.Preload("ti/com/wn/fileset/list/_com.json", {
  "name" : "wn-fileset-list",
  "globally" : true,
  "template" : "./wn-fileset-list.html",
  "mixins"   : [
    "@com:wn/support/wn-fileset-mixins.mjs",
    "./wn-fileset-list.mjs"],
  "components" : [],
  "deps" : []
});
//========================================
// JOIN <wn-fileset-tabs.html> ti/com/wn/fileset/tabs/wn-fileset-tabs.html
//========================================
Ti.Preload("ti/com/wn/fileset/tabs/wn-fileset-tabs.html", `<TiGui
  class="wn-fileset-tabs"
  :class="TopClass"
  :layout="TabsGUILayout"
  :on-init="OnGuiInit"
  :shown="myShown"
  @block:shown="OnShownChange"/>`);
//========================================
// JOIN <wn-fileset-tabs.mjs> ti/com/wn/fileset/tabs/wn-fileset-tabs.mjs
//========================================
Ti.Preload("ti/com/wn/fileset/tabs/wn-fileset-tabs.mjs", TI_PACK_EXPORTS['ti/com/wn/fileset/tabs/wn-fileset-tabs.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/fileset/tabs/_com.json
//========================================
Ti.Preload("ti/com/wn/fileset/tabs/_com.json", {
  "name" : "wn-fileset-tabs",
  "globally" : true,
  "template" : "./wn-fileset-tabs.html",
  "mixins"   : [
    "@com:wn/support/wn-fileset-mixins.mjs",
    "./wn-fileset-tabs.mjs"],
  "components" : [],
  "deps" : []
});
//========================================
// JOIN <wn-gui-arena.html> ti/com/wn/gui/arena/wn-gui-arena.html
//========================================
Ti.Preload("ti/com/wn/gui/arena/wn-gui-arena.html", `<div class="wn-gui-arena">
  <component 
    :is="comType"
      class="ti-cover-parent"
      v-bind="comConf"/>
</div>`);
//========================================
// JOIN <wn-gui-arena.mjs> ti/com/wn/gui/arena/wn-gui-arena.mjs
//========================================
Ti.Preload("ti/com/wn/gui/arena/wn-gui-arena.mjs", TI_PACK_EXPORTS['ti/com/wn/gui/arena/wn-gui-arena.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/gui/arena/_com.json
//========================================
Ti.Preload("ti/com/wn/gui/arena/_com.json", {
  "name" : "wn-gui-arena",
  "globally" : true,
  "template" : "./wn-gui-arena.html",
  "mixins"   : ["./wn-gui-arena.mjs"]
});
//========================================
// JOIN <wn-gui-footer.html> ti/com/wn/gui/footer/wn-gui-footer.html
//========================================
Ti.Preload("ti/com/wn/gui/footer/wn-gui-footer.html", `<div class="wn-gui-footer">
  <!--
    Info
  -->
  <div class="as-info ti-flex-center">
    <ti-icon v-if="infoIcon"
      :value="infoIcon"/>
    <span v-if="infoText"
      >{{infoText|i18n}}</span>
  </div>
  <!--
    Message
  -->
  <div class="as-msg ti-flex-center">
    {{message}}
  </div>
  <!--
    Indicator
  -->
  <div class="as-indi">
    {{indicator}}
  </div>
</div>`);
//========================================
// JOIN <wn-gui-footer.mjs> ti/com/wn/gui/footer/wn-gui-footer.mjs
//========================================
Ti.Preload("ti/com/wn/gui/footer/wn-gui-footer.mjs", TI_PACK_EXPORTS['ti/com/wn/gui/footer/wn-gui-footer.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/gui/footer/_com.json
//========================================
Ti.Preload("ti/com/wn/gui/footer/_com.json", {
  "name" : "wn-gui-footer",
  "globally" : true,
  "template" : "./wn-gui-footer.html",
  "mixins"   : ["./wn-gui-footer.mjs"]
});
//========================================
// JOIN <side-nav-item.html> ti/com/wn/gui/side/nav/com/side-nav-item/side-nav-item.html
//========================================
Ti.Preload("ti/com/wn/gui/side/nav/com/side-nav-item/side-nav-item.html", `<div class="side-nav-item" 
  :class="TopClass">
  <!--
    Self Info
  -->
  <div class="it-info" >
    <!--Icon-->
    <span v-if="icon" class="it-info-icon">
      <ti-icon :value="icon" size=".16rem"/>
    </span>
    <!--Group-->
    <span v-if="!hasHref"
      class="it-info-text"
      @click.left="OnToggleGroupStatus">{{title|i18n}}</span>
    <!--Item-->
    <a v-else
      class="it-info-text"
      :href="href"
      @click.stop.prevent="OnClickItemInfo">
      <span class="as-title">{{title|i18n}}</span>
      <span v-if="tip" class="as-tip">{{tip|i18n}}</span>
    </a>
    <!--
      Group status icon
    -->
    <span
      v-if="isGroup"
        class="it-grp-status"
        @click.left="OnToggleGroupStatus">
        <ti-icon :value="GroupStatusIcon"/>
    </span>
  </div>
  <!--
    Sub Container
  -->
  <div class="it-con" v-if="items && items.length > 0">
      <side-nav-item v-for="subIt in items"
        :key="subIt.key"
        :group-status-store-key="subIt.key"
        :highlight-id="highlightId"
        v-bind="subIt"/>
  </div>
</div>`);
//========================================
// JOIN <side-nav-item.mjs> ti/com/wn/gui/side/nav/com/side-nav-item/side-nav-item.mjs
//========================================
Ti.Preload("ti/com/wn/gui/side/nav/com/side-nav-item/side-nav-item.mjs", TI_PACK_EXPORTS['ti/com/wn/gui/side/nav/com/side-nav-item/side-nav-item.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/gui/side/nav/com/side-nav-item/_com.json
//========================================
Ti.Preload("ti/com/wn/gui/side/nav/com/side-nav-item/_com.json", {
  "name" : "side-nav-item",
  "template" : "./side-nav-item.html",
  "mixins" : ["./side-nav-item.mjs"]
});
//========================================
// JOIN <wn-gui-side-nav.html> ti/com/wn/gui/side/nav/wn-gui-side-nav.html
//========================================
Ti.Preload("ti/com/wn/gui/side/nav/wn-gui-side-nav.html", `<div class="wn-gui-side-nav" :class="TopClass" v-ti-activable>
  <header v-if="icon || title">
    <TiIcon v-if="icon" :value="icon" />
    <h2 v-if="title">{{title}}</h2>
  </header>
  <side-nav-item
    v-for="it in TheItems"
    :key="it.key"
    v-bind="it"
    @item:actived="OnItemActived"
  />
</div>`);
//========================================
// JOIN <wn-gui-side-nav.mjs> ti/com/wn/gui/side/nav/wn-gui-side-nav.mjs
//========================================
Ti.Preload("ti/com/wn/gui/side/nav/wn-gui-side-nav.mjs", TI_PACK_EXPORTS['ti/com/wn/gui/side/nav/wn-gui-side-nav.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/gui/side/nav/_com.json
//========================================
Ti.Preload("ti/com/wn/gui/side/nav/_com.json", {
  "name" : "wn-gui-side-nav",
  "globally" : true,
  "template" : "./wn-gui-side-nav.html",
  "mixins"   : ["./wn-gui-side-nav.mjs"],
  "components" : ["./com/side-nav-item"]
});
//========================================
// JOIN <wn-gui-side-tree.html> ti/com/wn/gui/side/tree/wn-gui-side-tree.html
//========================================
Ti.Preload("ti/com/wn/gui/side/tree/wn-gui-side-tree.html", `<ti-tree
  class="ti-fill-parent wn-gui-side-tree"
  id-by="value"
  name-by="name"
  :display="TreeDisplay"
  :data="myTreeData"
  :current-id="highlightItemId"
  :checked-ids="CheckedIds"
  keep-open-by="wn-gui-side-tree"
  :auto-open="true"
  :default-open-depth="2"
  :show-root="false"
  :puppet-mode="true"
  @select="onItemActived"/>`);
//========================================
// JOIN <wn-gui-side-tree.mjs> ti/com/wn/gui/side/tree/wn-gui-side-tree.mjs
//========================================
Ti.Preload("ti/com/wn/gui/side/tree/wn-gui-side-tree.mjs", TI_PACK_EXPORTS['ti/com/wn/gui/side/tree/wn-gui-side-tree.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/gui/side/tree/_com.json
//========================================
Ti.Preload("ti/com/wn/gui/side/tree/_com.json", {
  "name" : "wn-gui-side-tree",
  "globally" : true,
  "template" : "./wn-gui-side-tree.html",
  "mixins"   : ["./wn-gui-side-tree.mjs"],
  "components" : ["@com:ti/tree"]
});
//========================================
// JOIN <test.json> ti/com/wn/gui/test.json
//========================================
Ti.Preload("ti/com/wn/gui/test.json", {
  "layout" : {
    "type" : "cols",
    "border" : true,
    "blocks" : [{
      "name" : "C0",
      "icon"  : "im-award",
      "title" : "Test C0",
      "closer" : true,
      "actions" : [{
          "type" : "group",
          "icon" : "zmdi-more-vert",
          "items" :  [{
              "key" : "show-P1",
              "text" : "show P1",
              "type" : "action",
              "action" : "main:showBlock(P1)"
            }, {
              "key" : "hide-P1",
              "text" : "hide P1",
              "type" : "action",
              "action" : "main:hideBlock(P1)"
            }]
        }],
      "size" : "20%",
      "type" : "rows",
      "border" : true,
      "blocks" : [{
        "name" : "C0-1",
        "size" : 100,
        "body" : {
          "comType" : "ti-label",
          "comConf" : {"value" : "C0-1 content"}
        }
      }, {
        "name" : "C0-2",
        "body" : {
          "comType" : "ti-label",
          "comConf" : {"value" : "C0-2 content"}
        }
      }, {
        "name" : "C0-3",
        "body" : {
          "comType" : "ti-label",
          "comConf" : {"value" : "C0-3 content"}
        }
      }]
    }, {
      "name" : "C1",
      "icon"  : "im-award",
      "title" : "Test C1",
      "actions" : [{
          "type" : "group",
          "icon" : "zmdi-more-vert",
          "items" :  [{
              "key" : "show-P1",
              "text" : "show P1",
              "type" : "action",
              "action" : "main:showBlock(P1)"
            }, {
              "key" : "hide-P1",
              "text" : "hide P1",
              "type" : "action",
              "action" : "main:hideBlock(P1)"
            }]
        }],
      "size" : "stretch",
      "type" : "tabs",
      "blocks" : [{
        "name" : "C1-1",
        "size" : 100,
        "body" : {
          "comType" : "ti-label",
          "comConf" : {"value" : "C1-1 content"}
        }
      }, {
        "name" : "C1-2",
        "body" : {
          "comType" : "ti-label",
          "comConf" : {"value" : "C1-2 content"}
        }
      }, {
        "name" : "C1-3",
        "body" : {
          "comType" : "ti-label",
          "comConf" : {"value" : "C1-3 content"}
        }
      }]
    }, {
      "name" : "C2",
      "body" : "C2",
      "size" : 260
    }],
    "panels" : [{
      "name" : "P1",
      "closer" : "right",
      "position":"left-top",
      "width" : "50%",
      "height" : "50%",
      "mask" : true,
      "body" : {
        "comType" : "ti-label",
        "comConf" : {"value" : "P1"}
      }
    }]
  },
  "schema" : {
    "C1" : {
      "comType" : "ti-label",
      "comConf" : {
        "value" : "I am C11"
      }
    },
    "C2" : {
      "comType" : "ti-label",
      "comConf" : {
        "value" : "I am C22"
      }
    }
  },
  "actions" : [{
      "key"  : "reloading",
      "type" : "action",
      "icon" : "zmdi-refresh",
      "text" : "i18n:refresh",
      "altDisplay" : {
        "icon" : "zmdi-refresh zmdi-hc-spin",
        "text" : "i18n:loading"
      },
      "action" : "dispatch:main/reload",
      "shortcut" : "CTRL+R"
    }, {
      "key" : "show-P1",
      "text" : "show P1",
      "type" : "action",
      "action" : "main:showBlock(P1)"
    }, {
      "key" : "hide-P1",
      "text" : "hide P1",
      "type" : "action",
      "action" : "main:hideBlock(P1)"
    }] 
});
//========================================
// JOIN <wn-gui.html> ti/com/wn/gui/wn-gui.html
//========================================
Ti.Preload("ti/com/wn/gui/wn-gui.html", `<ti-gui
  v-bind="layout"
  :schema="schema"
  :shown="shown"
  @block:show="showBlock"
  @block:hide="hideBlock"/>`);
//========================================
// JOIN <wn-gui.mjs> ti/com/wn/gui/wn-gui.mjs
//========================================
Ti.Preload("ti/com/wn/gui/wn-gui.mjs", TI_PACK_EXPORTS['ti/com/wn/gui/wn-gui.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/gui/_com.json
//========================================
Ti.Preload("ti/com/wn/gui/_com.json", {
  "name" : "wn-gui",
  "globally" : true,
  "template" : "./wn-gui.html",
  "methods"  : "@com:ti/gui/ti-gui-methods.mjs",
  "mixins"   : ["./wn-gui.mjs"],
  "components" : ["@com:ti/gui"]
});
//========================================
// JOIN <wn-imgfile.html> ti/com/wn/imgfile/wn-imgfile.html
//========================================
Ti.Preload("ti/com/wn/imgfile/wn-imgfile.html", `<ti-imgfile
  :src="imageSrc"
  :width="width"
  :height="height"
  :progress="progress"
  :upload-file="uploadFile"
  :removable="removable"
  @upload="onUpload"
  @remove="onRemove"
  @open="onOpen"/>`);
//========================================
// JOIN <wn-imgfile.mjs> ti/com/wn/imgfile/wn-imgfile.mjs
//========================================
Ti.Preload("ti/com/wn/imgfile/wn-imgfile.mjs", TI_PACK_EXPORTS['ti/com/wn/imgfile/wn-imgfile.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/imgfile/_com.json
//========================================
Ti.Preload("ti/com/wn/imgfile/_com.json", {
  "name" : "wn-imgfile",
  "globally" : true,
  "template" : "./wn-imgfile.html",
  "mixins" : ["./wn-imgfile.mjs"],
  "components" : [
    "@com:ti/imgfile"
  ]
});
//========================================
// JOIN <wn-input-tree-picker.html> ti/com/wn/input/tree-picker/wn-input-tree-picker.html
//========================================
Ti.Preload("ti/com/wn/input/tree-picker/wn-input-tree-picker.html", `<TiInputTreePicker
  :value="value"
  :options="PickerOptions"
  :vars="vars"
  :dict="dict"

  :onlyLeaf="onlyLeaf"
  :multi="multi"
  :readonly="readonly"
  :defaultOpenDepth="defaultOpenDepth"
  
  :dialog="dialog"
  :tree="tree"
  :placeholder="placeholder"
  :suffixIcon="suffixIcon"
  />`);
//========================================
// JOIN <wn-input-tree-picker.mjs> ti/com/wn/input/tree-picker/wn-input-tree-picker.mjs
//========================================
Ti.Preload("ti/com/wn/input/tree-picker/wn-input-tree-picker.mjs", TI_PACK_EXPORTS['ti/com/wn/input/tree-picker/wn-input-tree-picker.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/input/tree-picker/_com.json
//========================================
Ti.Preload("ti/com/wn/input/tree-picker/_com.json", {
  "name" : "wn-input-tree-picker",
  "globally" : true,
  "template" : "./wn-input-tree-picker.html",
  "props": "@com:ti/input/tree-picker/tree-picker-props.mjs",
  "mixins" : "./wn-input-tree-picker.mjs",
  "components" : [
    "@com:ti/input/tree-picker"
  ]
});
//========================================
// JOIN <wn-label.html> ti/com/wn/label/wn-label.html
//========================================
Ti.Preload("ti/com/wn/label/wn-label.html", `<ti-label
  :class-name="className"
  v-bind="this"
  :value="LabelValue"
  :value-clickable="ValueClickable"
  @click:value="OnClickValue"/>`);
//========================================
// JOIN <wn-label.mjs> ti/com/wn/label/wn-label.mjs
//========================================
Ti.Preload("ti/com/wn/label/wn-label.mjs", TI_PACK_EXPORTS['ti/com/wn/label/wn-label.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/label/_com.json
//========================================
Ti.Preload("ti/com/wn/label/_com.json", {
  "name" : "wn-label",
  "globally" : true,
  "template" : "./wn-label.html",
  "props"    : [
    "@com:ti/label/ti-label-props.mjs"],
  "mixins" : ["./wn-label.mjs"],
  "components" : ["@com:ti/label"]
});
//========================================
// JOIN <wn-list.html> ti/com/wn/list/wn-list.html
//========================================
Ti.Preload("ti/com/wn/list/wn-list.html", `<ti-list
  v-bind="this"
  :data="myData"
  :display="DisplayItems"
  :on-init="OnSubListInit"
  @select="OnSelected"
  @open="$notify('open', $event)"/>`);
//========================================
// JOIN <wn-list.mjs> ti/com/wn/list/wn-list.mjs
//========================================
Ti.Preload("ti/com/wn/list/wn-list.mjs", TI_PACK_EXPORTS['ti/com/wn/list/wn-list.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/list/_com.json
//========================================
Ti.Preload("ti/com/wn/list/_com.json", {
  "name" : "wn-list",
  "globally" : true,
  "template" : "./wn-list.html",
  "props" : [
    "@com:ti/support/list_props.mjs"],
  "mixins" : [
    "@com:wn/support/wn_list_wrapper_mixins.mjs",
    "./wn-list.mjs"],
  "components" : [
    "@com:ti/table"]
});
//========================================
// JOIN <wn-obj-adaptor-gui.mjs> ti/com/wn/obj/adaptor/wn-obj-adaptor-gui.mjs
//========================================
Ti.Preload("ti/com/wn/obj/adaptor/wn-obj-adaptor-gui.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/adaptor/wn-obj-adaptor-gui.mjs']);
//========================================
// JOIN <wn-obj-adaptor-methods.mjs> ti/com/wn/obj/adaptor/wn-obj-adaptor-methods.mjs
//========================================
Ti.Preload("ti/com/wn/obj/adaptor/wn-obj-adaptor-methods.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/adaptor/wn-obj-adaptor-methods.mjs']);
//========================================
// JOIN <wn-obj-adaptor-props.mjs> ti/com/wn/obj/adaptor/wn-obj-adaptor-props.mjs
//========================================
Ti.Preload("ti/com/wn/obj/adaptor/wn-obj-adaptor-props.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/adaptor/wn-obj-adaptor-props.mjs']);
//========================================
// JOIN <wn-obj-adaptor.html> ti/com/wn/obj/adaptor/wn-obj-adaptor.html
//========================================
Ti.Preload("ti/com/wn/obj/adaptor/wn-obj-adaptor.html", `<ti-gui
  class="wn-obj-adaptor"
  :class="TopClass"
  :layout="GuiLayout"
  :schema="GuiSchema"
  :vars="GuiExplainContext"
  :shown="guiShown"
  :can-loading="true"
  :loading-as="GuiLoadingAs"
  :loading="GuiIsLoading"
  :action-status="status"/>`);
//========================================
// JOIN <wn-obj-adaptor.mjs> ti/com/wn/obj/adaptor/wn-obj-adaptor.mjs
//========================================
Ti.Preload("ti/com/wn/obj/adaptor/wn-obj-adaptor.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/adaptor/wn-obj-adaptor.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/adaptor/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/adaptor/_com.json", {
  "name": "wn-obj-adaptor",
  "globally": true,
  "template": "./wn-obj-adaptor.html",
  "props": "./wn-obj-adaptor-props.mjs",
  "methods": "./wn-obj-adaptor-methods.mjs",
  "mixins": [
    "./wn-obj-adaptor.mjs",
    "./wn-obj-adaptor-gui.mjs"
  ],
  "components": [
    "@com:ti/gui",
    "@com:ti/filterbar",
    "@com:ti/paging/jumper",
    "@com:wn/adaptlist",
    "@com:wn/table",
    "@com:wn/obj/icon",
    "@com:wn/obj/detail",
    "@com:wn/obj/puretext",
    "@com:wn/upload/file"
  ]
});
//========================================
// JOIN <wn-obj-creation.html> ti/com/wn/obj/creation/wn-obj-creation.html
//========================================
Ti.Preload("ti/com/wn/obj/creation/wn-obj-creation.html", `<div class="wn-obj-creation"
  :class="TopClass"
  v-ti-activable>
  <!--
    Side type list
  -->
  <div class="oc-types"
    v-if="hasTypes">
    <ul>
      <li
        v-for="li of TypeList"
          :class="li.className"
          @click="setCurrentType(li.name)">
          <!--Icon-->
          <ti-icon
            v-if="li.icon"
              :value="li.icon"/>
          <!--Text-->
          <span class="as-text">{{li.text|i18n}}</span>
          <!--Suffix-->
          <em v-if="li.suffix">({{li.suffix}})</em>
      </li>
    </ul>
  </div>
  <!--
    Main Area
  -->
  <div class="oc-main">
    <!--
      Type Brief
    -->
    <div v-if="hasCurrentType"
      class="oc-info">
      <div class="oc-thumb">
        <ti-icon :value="CurrentType.thumb"/>
      </div>
      <div class="oc-text">{{CurrentType.text | i18n}}</div>
      <div v-if="!CurrentIsDIR"
        class="oc-name">*.{{CurrentType.name}}</div>
      <div class="oc-brief"
        v-if="CurrentType.brief">{{CurrentType.brief}}</div>
    </div>
    <!--
      Free create
    -->
    <div v-else
      class="oc-free">
      <span>{{'wn-oc-free'|i18n}}</span>
    </div>
    <!--
      Input value
    -->
    <div class="oc-input">
      <input
        ref="input" 
        :value="value.name"
        :placeholder="'wn-oc-tip'|i18n" 
        @change="OnInputChange" 
        spellcheck="false">
    </div>
  </div>
</div>`);
//========================================
// JOIN <wn-obj-creation.mjs> ti/com/wn/obj/creation/wn-obj-creation.mjs
//========================================
Ti.Preload("ti/com/wn/obj/creation/wn-obj-creation.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/creation/wn-obj-creation.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/creation/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/creation/_com.json", {
  "name" : "wn-obj-creation",
  "globally" : true,
  "template" : "./wn-obj-creation.html",
  "mixins" : ["./wn-obj-creation.mjs"]
});
//========================================
// JOIN <wn-obj-detail.html> ti/com/wn/obj/detail/wn-obj-detail.html
//========================================
Ti.Preload("ti/com/wn/obj/detail/wn-obj-detail.html", `<TiGui
  class="wn-obj-detail"
  :class="TopClass"
  :layout="Layout"
  :schema="Schema"/>`);
//========================================
// JOIN <wn-obj-detail.mjs> ti/com/wn/obj/detail/wn-obj-detail.mjs
//========================================
Ti.Preload("ti/com/wn/obj/detail/wn-obj-detail.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/detail/wn-obj-detail.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/detail/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/detail/_com.json", {
  "name" : "wn-obj-detail",
  "globally" : true,
  "template" : "./wn-obj-detail.html",
  "mixins" : ["./wn-obj-detail.mjs"],
  "components" : [
    "@com:wn/obj/form",
    "@com:wn/obj/preview",
    "@com:wn/obj/mode"
  ]
});
//========================================
// JOIN <wn-obj-form-props.mjs> ti/com/wn/obj/form/wn-obj-form-props.mjs
//========================================
Ti.Preload("ti/com/wn/obj/form/wn-obj-form-props.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/form/wn-obj-form-props.mjs']);
//========================================
// JOIN <wn-obj-form.html> ti/com/wn/obj/form/wn-obj-form.html
//========================================
Ti.Preload("ti/com/wn/obj/form/wn-obj-form.html", `<ti-form 
  v-bind="this"
  :data="FormData"
  :fields="myFields"
  :auto-show-blank="isAutoShowBlank"
  :class-name="className"
  @field:change="OnFieldChange"
  @change="OnChange"
  @invalid="OnInvalid"/>`);
//========================================
// JOIN <wn-obj-form.mjs> ti/com/wn/obj/form/wn-obj-form.mjs
//========================================
Ti.Preload("ti/com/wn/obj/form/wn-obj-form.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/form/wn-obj-form.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/form/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/form/_com.json", {
  "name" : "wn-obj-form",
  "globally" : true,
  "template" : "./wn-obj-form.html",
  "props" : [
    "@com:ti/form/grid/ti-form-grid-props.mjs",
    "./wn-obj-form-props.mjs"
  ],
  "mixins" : ["./wn-obj-form.mjs"],
  "components" : [
    "@com:ti/form",
    "@com:wn/transfer",
    "@com:wn/droplist",
    "@com:wn/combo/input",
    "@com:wn/imgfile",
    "@com:wn/combo/multi-input"
  ]
});
//========================================
// JOIN <wn-obj-form-props.mjs> ti/com/wn/obj/form.bak/wn-obj-form-props.mjs
//========================================
Ti.Preload("ti/com/wn/obj/form.bak/wn-obj-form-props.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/form.bak/wn-obj-form-props.mjs']);
//========================================
// JOIN <wn-obj-form.html> ti/com/wn/obj/form.bak/wn-obj-form.html
//========================================
Ti.Preload("ti/com/wn/obj/form.bak/wn-obj-form.html", `<ti-form 
  v-bind="this"
  :data="FormData"
  :fields="myFields"
  :auto-show-blank="isAutoShowBlank"
  :class-name="className"
  @field:change="OnFieldChange"
  @change="OnChange"
  @invalid="OnInvalid"/>`);
//========================================
// JOIN <wn-obj-form.mjs> ti/com/wn/obj/form.bak/wn-obj-form.mjs
//========================================
Ti.Preload("ti/com/wn/obj/form.bak/wn-obj-form.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/form.bak/wn-obj-form.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/form.bak/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/form.bak/_com.json", {
  "name" : "wn-obj-form",
  "globally" : true,
  "template" : "./wn-obj-form.html",
  "props" : [
    "@com:ti/form/ti-form-props.mjs",
    "./wn-obj-form-props.mjs"
  ],
  "mixins" : ["./wn-obj-form.mjs"],
  "components" : [
    "@com:ti/form",
    "@com:wn/transfer",
    "@com:wn/droplist",
    "@com:wn/combo/input",
    "@com:wn/imgfile",
    "@com:wn/combo/multi-input"
  ]
});
//========================================
// JOIN <wn-obj-icon.html> ti/com/wn/obj/icon/wn-obj-icon.html
//========================================
Ti.Preload("ti/com/wn/obj/icon/wn-obj-icon.html", `<ti-icon 
  class="wn-obj-icon" 
  :class="topClass"
  :value="theIcon"/>`);
//========================================
// JOIN <wn-obj-icon.mjs> ti/com/wn/obj/icon/wn-obj-icon.mjs
//========================================
Ti.Preload("ti/com/wn/obj/icon/wn-obj-icon.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/icon/wn-obj-icon.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/icon/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/icon/_com.json", {
  "name" : "wn-obj-icon",
  "globally" : true,
  "template" : "./wn-obj-icon.html",
  "mixins" : ["./wn-obj-icon.mjs"]
});
//========================================
// JOIN <wn-obj-id.html> ti/com/wn/obj/id/wn-obj-id.html
//========================================
Ti.Preload("ti/com/wn/obj/id/wn-obj-id.html", `<div
  class="wn-obj-id"
  :class="TopClass"
  @mouseenter="OnMouseEnter"
  @mouseleave="OnMouseLeave"
>
  <!--
    Info Brief
  -->
  <div class="as-info-brief" ref="box">
    <!--
      ICON
    -->
    <div class="as-icon"><i class="fas fa-info-circle"></i></div>
    <!-- Empty -->
    <div v-if="!value" class="as-text">
      <em>{{'i18n:blank' | i18n}}</em>
    </div>
    <!-- Simple ID -->
    <div v-else-if="!OID.homeId" class="as-text">
      <!--span>{{OID.myId}}</span-->
      <span>{{IDText}}</span>
    </div>
    <!-- Two stage ID-->
    <div v-else class="as-text">
      <!--span>{{OID.myId}}</span-->
      <span>{{IDText}}</span>
    </div>
  </div>
  <!--
    Info Detail
  -->
  <div class="as-info-detail" ref="detail">
    <table>
      <tr v-if="OID.homeId" class="is-home-id">
        <td>HOME ID</td>
        <td @click.left.stop="OnCopyHomeId">{{OID.homeId}}</td>
        <td class="as-copy">
          <a @click.left="OnCopyHomeId">{{'i18n:copy'|i18n}}</a>
        </td>
      </tr>
      <tr class="is-my-id">
        <td>MY ID</td>
        <td @click.left.stop="OnCopyMyId">{{OID.myId}}</td>
        <!--td class="as-copy">
          <a @click.left="OnCopyMyId">{{'i18n:copy'|i18n}}</a>
        </td-->
      </tr>
    </table>
    <div class="as-menu">     
      <a target="_blank" :href="IDHref">
        <i class="fas fa-external-link-alt"></i>
        {{'i18n:open-newtab' | i18n}}
      </a>
      <a @click.left="OnCopyAll">{{'i18n:copy'|i18n}}</a>
    </div>
  </div>
</div>`);
//========================================
// JOIN <wn-obj-id.mjs> ti/com/wn/obj/id/wn-obj-id.mjs
//========================================
Ti.Preload("ti/com/wn/obj/id/wn-obj-id.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/id/wn-obj-id.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/id/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/id/_com.json", {
  "name" : "wn-obj-id",
  "globally" : true,
  "template" : "./wn-obj-id.html",
  "mixins" : ["./wn-obj-id.mjs"]
});
//========================================
// JOIN <wn-obj-json.html> ti/com/wn/obj/json/wn-obj-json.html
//========================================
Ti.Preload("ti/com/wn/obj/json/wn-obj-json.html", `<div class="wn-obj-json">
  <!--
    Show Text Editor
  -->
  <ti-text-json v-if="hasMeta"
    class="ti-fill-parent"
    :value="value"
    @change="onChangeContent"/>
  <!--
    Empty Data
  -->
  <ti-loading v-else/>
</div>`);
//========================================
// JOIN <wn-obj-json.mjs> ti/com/wn/obj/json/wn-obj-json.mjs
//========================================
Ti.Preload("ti/com/wn/obj/json/wn-obj-json.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/json/wn-obj-json.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/json/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/json/_com.json", {
  "name" : "wn-obj-json",
  "globally" : true,
  "template" : "./wn-obj-json.html",
  "mixins" : ["./wn-obj-json.mjs"],
  "components" : ["@com:ti/text/json"]
});
//========================================
// JOIN <wn-obj-mode.html> ti/com/wn/obj/mode/wn-obj-mode.html
//========================================
Ti.Preload("ti/com/wn/obj/mode/wn-obj-mode.html", `<div class="wn-obj-mode" :class="TopClass">
  <!--
    Edit bar
  -->
  <div class="as-bar">
    <!--Owner-->
    <div class="as-group is-owner">
      <header>{{'i18n:wn-md-owner'|i18n}}</header>
      <section>
        <a :class="{'is-on':ModeObj.owner.readable}" 
          @click.left="OnToggleItem('owner.readable')">{{'i18n:wn-md-R'|i18n}}</a>
        <a :class="{'is-on':ModeObj.owner.writable}" 
          @click.left="OnToggleItem('owner.writable')">{{'i18n:wn-md-W'|i18n}}</a>
        <a :class="{'is-on':ModeObj.owner.excutable}" 
          @click.left="OnToggleItem('owner.excutable')">{{'i18n:wn-md-X'|i18n}}</a>
      </section>
    </div>
    <!--Member-->
    <div class="as-group is-member">
      <header>{{'i18n:wn-md-member'|i18n}}</header>
      <section>
        <a :class="{'is-on':ModeObj.member.readable}" 
          @click.left="OnToggleItem('member.readable')">{{'i18n:wn-md-R'|i18n}}</a>
        <a :class="{'is-on':ModeObj.member.writable}" 
          @click.left="OnToggleItem('member.writable')">{{'i18n:wn-md-W'|i18n}}</a>
        <a :class="{'is-on':ModeObj.member.excutable}" 
          @click.left="OnToggleItem('member.excutable')">{{'i18n:wn-md-X'|i18n}}</a>
      </section>
    </div>
    <!--Other-->
    <div class="as-group is-other">
      <header>{{'i18n:wn-md-other'|i18n}}</header>
      <section>
        <a :class="{'is-on':ModeObj.other.readable}" 
          @click.left="OnToggleItem('other.readable')">{{'i18n:wn-md-R'|i18n}}</a>
        <a :class="{'is-on':ModeObj.other.writable}" 
          @click.left="OnToggleItem('other.writable')">{{'i18n:wn-md-W'|i18n}}</a>
        <a :class="{'is-on':ModeObj.other.excutable}" 
          @click.left="OnToggleItem('other.excutable')">{{'i18n:wn-md-X'|i18n}}</a>
      </section>
    </div>
  </div>
  <!--
    Info
  -->
  <div class="as-info">
    <div class="as-str">{{ModeObj.text}}</div>
    <div class="as-octal">{{ModeObj.octal}}</div>
    <div class="as-decimal">{{ModeObj.mode}}</div>
  </div>
</div>`);
//========================================
// JOIN <wn-obj-mode.mjs> ti/com/wn/obj/mode/wn-obj-mode.mjs
//========================================
Ti.Preload("ti/com/wn/obj/mode/wn-obj-mode.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/mode/wn-obj-mode.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/mode/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/mode/_com.json", {
  "name" : "wn-obj-mode",
  "globally" : true,
  "template" : "./wn-obj-mode.html",
  "mixins" : ["./wn-obj-mode.mjs"],
  "components" : []
});
//========================================
// JOIN <org-icons.mjs> ti/com/wn/obj/organization/org-icons.mjs
//========================================
Ti.Preload("ti/com/wn/obj/organization/org-icons.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/organization/org-icons.mjs']);
//========================================
// JOIN <wn-obj-organization.html> ti/com/wn/obj/organization/wn-obj-organization.html
//========================================
Ti.Preload("ti/com/wn/obj/organization/wn-obj-organization.html", `<TiObjEditTree
  :className="className"
  :value="value"
  :leafBy="NodeLeafBy"
  :newNodeData="NewNodeData"
  :nodeForm="NodeForm"
  :treeConf="TreeConf"
  />`);
//========================================
// JOIN <wn-obj-organization.mjs> ti/com/wn/obj/organization/wn-obj-organization.mjs
//========================================
Ti.Preload("ti/com/wn/obj/organization/wn-obj-organization.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/organization/wn-obj-organization.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/organization/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/organization/_com.json", {
  "name": "wn-obj-organization",
  "globally": true,
  "template": "./wn-obj-organization.html",
  "mixins": [
    "./org-icons.mjs",
    "./wn-obj-organization.mjs"
  ],
  "components": [
    "@com:ti/obj/edit-tree"
  ]
});
//========================================
// JOIN <wn-obj-picker.html> ti/com/wn/obj/picker/wn-obj-picker.html
//========================================
Ti.Preload("ti/com/wn/obj/picker/wn-obj-picker.html", `<div class="wn-obj-picker"
  :class="TopClass">
  <!--
    Empty Items
  -->
  <div
    v-if="!hasItems"
      class="as-empty">
      <div class="as-empty-item"
        @click.left.stop="OnPickItem">
        <i class="im im-plus"></i>
      </div>
  </div>
  <!--
    Show Items
  -->
  <div ref="itemsCon"
    v-else
      class="as-items-con"
      @click.left="OnClickItemsCon">
      <div 
        v-for="(it, index) in DisplayItems"
          :key="it._key"
          class="as-item">
          <TiObjThumb 
              v-bind="it"
              @remove="OnRemoveItem"/>        
      </div>
      <!--For multi-->
      <div
        v-if="multi" 
          class="as-empty-item"
          @click.left.stop="OnPickItem">
          <i class="im im-plus"></i>
      </div>
  </div>
  <!--
    Loading
  -->
  <ti-loading
    v-if="loading"
      class="as-mid-tip-mask"/>
</div>`);
//========================================
// JOIN <wn-obj-picker.mjs> ti/com/wn/obj/picker/wn-obj-picker.mjs
//========================================
Ti.Preload("ti/com/wn/obj/picker/wn-obj-picker.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/picker/wn-obj-picker.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/picker/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/picker/_com.json", {
  "name" : "wn-obj-picker",
  "globally" : true,
  "template" : "./wn-obj-picker.html",
  "mixins"   : ["./wn-obj-picker.mjs"],
  "components" : [
    "@com:wn/adaptlist"],
  "deps": ["@deps:sortable.js"]
});
//========================================
// JOIN <preview-info-field.html> ti/com/wn/obj/preview/com/preview-info-field/preview-info-field.html
//========================================
Ti.Preload("ti/com/wn/obj/preview/com/preview-info-field/preview-info-field.html", `<div class="info-field">
  <div class="as-name" :style="theNameStyle">
    <ti-icon v-if="icon" class="it-icon" :value="icon"/>
    <span class="it-text">{{title|i18n}}</span>
  </div>
  <div class="as-value" :style="theValueStyle">{{theValue}}</div>
</div>`);
//========================================
// JOIN <preview-info-field.mjs> ti/com/wn/obj/preview/com/preview-info-field/preview-info-field.mjs
//========================================
Ti.Preload("ti/com/wn/obj/preview/com/preview-info-field/preview-info-field.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/preview/com/preview-info-field/preview-info-field.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/preview/com/preview-info-field/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/preview/com/preview-info-field/_com.json", {
  "name" : "wn-obj-preview-info-field",
  "globally" : true,
  "template" : "./preview-info-field.html",
  "mixins" : ["./preview-info-field.mjs"]
});
//========================================
// JOIN <wn-obj-preview.html> ti/com/wn/obj/preview/wn-obj-preview.html
//========================================
Ti.Preload("ti/com/wn/obj/preview/wn-obj-preview.html", `<div class="wn-obj-preview" :class="TopClass">
  <!--
    With content
  -->
  <div
    v-if="hasMeta"
    class="wop-con"
    v-drop-files.mask="UploadDragAndDropHandler"
  >
    <!--
        Main View
      -->
    <component
      class="as-main"
      :is="PreviewCom.comType"
      v-bind="PreviewCom.comConf"
    />
    <!--
        ActionBar at top
      -->
    <div class="as-abar">
      <ul>
        <li
          v-for="it in TheActions"
          :data-ti-tip="it.text"
          data-ti-tip-mode="V"
          @click.left="OnAction(it.action)"
        >
          <ti-icon class="it-icon" :value="it.icon" />
        </li>
      </ul>
    </div>
    <!--
        Meta at bottom
      -->
    <div class="as-info" v-if="isShowInfo">
      <!--
          Head
        -->
      <div class="info-head">
        <!--Pin Status Icon-->
        <span class="it-icon" @click.left="toggleInfoFloat">
          <ti-icon :value="PreviewInfoPinIcon" />
        </span>
        <!--Head text-->
        <span class="it-text">{{'i18n:info'|i18n}}</span>
        <!--Edit Button-->
        <span class="it-edit" @click.left="OnEditInfo"
          >{{'i18n:edit'|i18n}}</span
        >
      </div>
      <!--
          Fields
        -->
      <div class="info-field-con">
        <wn-obj-preview-info-field
          v-for="fld in PrevewInfoFields"
          :key="fld.name"
          v-bind="fld"
          :data="meta"
        />
      </div>
    </div>
    <!--
        Process bar
      -->
    <div class="as-progress" v-if="uploading>0">
      <TiProgressBar class="fs-lg tip-mask" :value="uploading" />
    </div>
    <!--==================================
        Hidden file upload control
      -->
    <input
      type="file"
      ref="file"
      class="ti-hide"
      :accept="MetaMime"
      @change.stop.seft="OnSelectLocalFilesToUpload"
    />
  </div>
  <!--
    Blank 
  -->
  <ti-loading
    v-else
    v-bind="blankAs"
    class="ti-fill-parent"
    :class="blankClass"
  />
</div>`);
//========================================
// JOIN <wn-obj-preview.mjs> ti/com/wn/obj/preview/wn-obj-preview.mjs
//========================================
Ti.Preload("ti/com/wn/obj/preview/wn-obj-preview.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/preview/wn-obj-preview.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/preview/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/preview/_com.json", {
  "name" : "wn-obj-preview",
  "globally" : true,
  "i18n" : "@i18n:wn-obj-preview",
  "template" : "./wn-obj-preview.html",
  "mixins" : ["./wn-obj-preview.mjs"],
  "components" : [
    "./com/preview-info-field",
    "@com:ti/progress/bar",
    "@com:ti/media/binary",
    "@com:ti/media/image",
    "@com:ti/media/audio",
    "@com:ti/media/video",
    "@com:web/widget/frame",
    "@com:wn/obj/text",
    "@com:net/youtube/player"]
});
//========================================
// JOIN <wn-obj-privilege.html> ti/com/wn/obj/privilege/wn-obj-privilege.html
//========================================
Ti.Preload("ti/com/wn/obj/privilege/wn-obj-privilege.html", `<TiGui
  class="wn-obj-privilege"
  :layout="Layout"
  :schema="Schema"
  :can-loading="true"
  :loading-as="GuiLoadingAs"
  :loading="loading"
  @list::select="OnListSelect"
  @data::change="OnDataChange"/>`);
//========================================
// JOIN <wn-obj-privilege.mjs> ti/com/wn/obj/privilege/wn-obj-privilege.mjs
//========================================
Ti.Preload("ti/com/wn/obj/privilege/wn-obj-privilege.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/privilege/wn-obj-privilege.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/privilege/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/privilege/_com.json", {
  "name" : "wn-obj-privilege",
  "globally" : true,
  "template" : "./wn-obj-privilege.html",
  "mixins" : ["./wn-obj-privilege.mjs"],
  "components" : []
});
//========================================
// JOIN <wn-obj-puretext.html> ti/com/wn/obj/puretext/wn-obj-puretext.html
//========================================
Ti.Preload("ti/com/wn/obj/puretext/wn-obj-puretext.html", `<div class="wn-obj-puretext">
  <!--
    Show Text Editor
  -->
  <ti-text-raw v-if="hasMeta"
    class="ti-fill-parent"
    :icon="theIcon"
    :title="theTitle"
    :show-title="showTitle"
    :value="content"
    :content-is-changed="status.changed"
    :blank-text="blankText"
    @change="onChangeContent"/>
  <!--
    Empty Data
  -->
  <div v-else
    class="ti-blank is-big">
    <ti-icon value="zmdi-alert-circle-o"/>
    <span>{{"empty-data"|i18n}}</span>
  </div>
</div>`);
//========================================
// JOIN <wn-obj-puretext.mjs> ti/com/wn/obj/puretext/wn-obj-puretext.mjs
//========================================
Ti.Preload("ti/com/wn/obj/puretext/wn-obj-puretext.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/puretext/wn-obj-puretext.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/puretext/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/puretext/_com.json", {
  "name" : "wn-obj-puretext",
  "globally" : true,
  "template" : "./wn-obj-puretext.html",
  "mixins" : ["./wn-obj-puretext.mjs"],
  "components" : ["@com:ti/text/raw"]
});
//========================================
// JOIN <wn-obj-pvg.html> ti/com/wn/obj/pvg/wn-obj-pvg.html
//========================================
Ti.Preload("ti/com/wn/obj/pvg/wn-obj-pvg.html", `<TiGui
  class="wn-obj-pvg"
  :layout="Layout"
  :schema="Schema"
  :can-loading="true"
  :loading-as="GuiLoadingAs"
  :loading="loading"
  @list::select="OnListSelect"
  @data::change="OnDataChange"/>`);
//========================================
// JOIN <wn-obj-pvg.mjs> ti/com/wn/obj/pvg/wn-obj-pvg.mjs
//========================================
Ti.Preload("ti/com/wn/obj/pvg/wn-obj-pvg.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/pvg/wn-obj-pvg.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/pvg/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/pvg/_com.json", {
  "name": "wn-obj-pvg",
  "globally": true,
  "template": "./wn-obj-pvg.html",
  "mixins": "./wn-obj-pvg.mjs",
  "components": [
    "@com:ti/form",
    "@com:wn/obj/icon",
    "@com:wn/list"
  ]
});
//========================================
// JOIN <wn-obj-pvgview.html> ti/com/wn/obj/pvgview/wn-obj-pvgview.html
//========================================
Ti.Preload("ti/com/wn/obj/pvgview/wn-obj-pvgview.html", `<TiGui
  class="wn-obj-pvgview"
  :layout="Layout"
  :schema="Schema"
  :can-loading="true"
  :loading="loading"
  @list::select="OnListSelect"
  @pvg::change="OnPvgChange"
  @save:current:pvg="OnSaveCurrentPvg"
  @view:current:obj="OnViewCurrentObj"/>`);
//========================================
// JOIN <wn-obj-pvgview.mjs> ti/com/wn/obj/pvgview/wn-obj-pvgview.mjs
//========================================
Ti.Preload("ti/com/wn/obj/pvgview/wn-obj-pvgview.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/pvgview/wn-obj-pvgview.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/pvgview/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/pvgview/_com.json", {
  "name": "wn-obj-pvgview",
  "globally": true,
  "template": "./wn-obj-pvgview.html",
  "mixins": "./wn-obj-pvgview.mjs",
  "components": [
    "@com:ti/list",
    "@com:wn/obj/pvg"
  ]
});
//========================================
// JOIN <wn-obj-text.html> ti/com/wn/obj/text/wn-obj-text.html
//========================================
Ti.Preload("ti/com/wn/obj/text/wn-obj-text.html", `<div class="wn-obj-text ti-fill-parent">
  <TiLoading
    v-if="isEmpty"
      v-bind="blankAs"/>
  <div
    v-else
      class="as-text ti-fill-parent">{{myContent}}</div>
</div>`);
//========================================
// JOIN <wn-obj-text.mjs> ti/com/wn/obj/text/wn-obj-text.mjs
//========================================
Ti.Preload("ti/com/wn/obj/text/wn-obj-text.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/text/wn-obj-text.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/text/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/text/_com.json", {
  "name" : "wn-obj-text",
  "globally" : true,
  "template" : "./wn-obj-text.html",
  "mixins" : "./wn-obj-text.mjs"
});
//========================================
// JOIN <wn-obj-tree.html> ti/com/wn/obj/tree/wn-obj-tree.html
//========================================
Ti.Preload("ti/com/wn/obj/tree/wn-obj-tree.html", `<div class="wn-obj-tree"
  :class="TopClass"
  :style="TopStyle">
  <!--
    Tree
  -->
  <TiTree
    :data="treeRoot"
    :id-by="idBy"
    :name-by="nameBy"
    :children-by="childrenBy"
    :test-loading="isNodeLoading"
    :display="display"
    :row-class-by="TreeRowClassBy"

    :opened-node-paths="myOpenedNodePaths"
    
    :auto-open="autoOpen"
    :show-root="showRoot"
    :multi="multi"

    :node-checkable="nodeCheckable"
    :node-selectable="nodeSelectable"
    :node-openable="nodeOpenable"
    :node-cancelable="nodeCancelable"
    :node-hoverable="nodeHoverable"

    :checkable="checkable"
    :selectable="selectable"
    :cancelable="cancelable"
    :openable="openable"
    :hoverable="hoverable"

    :on-node-select="onNodeSelect"

    :spacing="spacing"
    :border="border"
    :loading-node="loadingNode"
    :empty-node="emptyNode"
    height="100%"
    :leaf-by="leafBy"
    :on-init="OnTreeInit"
    @select="OnNodeSelect"
    @opened="OnNodeOpened"
    @opened-status:changed="OnTreeOpenedStatusChange"/>
</div>`);
//========================================
// JOIN <wn-obj-tree.mjs> ti/com/wn/obj/tree/wn-obj-tree.mjs
//========================================
Ti.Preload("ti/com/wn/obj/tree/wn-obj-tree.mjs", TI_PACK_EXPORTS['ti/com/wn/obj/tree/wn-obj-tree.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/obj/tree/_com.json
//========================================
Ti.Preload("ti/com/wn/obj/tree/_com.json", {
  "name" : "wn-obj-tree",
  "globally" : true,
  "template" : "./wn-obj-tree.html",
  "mixins"   : ["./wn-obj-tree.mjs"],
  "components" : ["@com:ti/tree"]
});
//========================================
// JOIN <wn-session-badge.html> ti/com/wn/session/badge/wn-session-badge.html
//========================================
Ti.Preload("ti/com/wn/session/badge/wn-session-badge.html", `<div class="wn-session-badge" :class="TopClass">
  <!--
    Ti Session Badge
  -->
  <div class="as-info" ref="info">
    <TiSessionBadge
      :me="me"
      :loginIcon="TheLoginIcon"
      avatarKey="thumb"
      :avatarSrc="MyAvatarSrc"
      nameKeys="nickname|nm"
      nameEvent="show:more"
      :autoSignLink="false"
      @show:more="OnShowMore"
    />
  </div>
  <!--
    More Information
  -->
  <template v-if="!collapse">
    <!--Mask-->
    <div class="as-mask" @click="collapse=true"></div>
    <!--Drop-->
    <div ref="drop" class="as-drop" :style="DropStyle">
      <!--
        Avatar
      -->
      <div class="as-avatar">
        <TiIcon :value="TheLoginIcon" />
        <div class="as-name">
          <span>{{me.nickname}}</span>
          <span>{{me.nm}}</span>
        </div>
      </div>
      <!--
        Language
      -->
      <div class="as-lang">
        <div
          v-for="la in LangList"
          class="lang-item"
          :class="la.className"
          @click.left="OnChangeLang(la.lang)"
        >
          <img :src="la.src" />
          <div>{{la.text}}</div>
        </div>
      </div>
      <!--
        Foot: resetpasswd + logout
      -->
      <div class="as-foot">
        <a @click.left="OnResetPassword">{{'passwd-reset' | i18n}}</a>
        <a v-if="canLoginDomainSubAccount" @click.left="OnLoginDomainAccount"
          >{{'login' | i18n}}</a
        >
        <a @click.left="$notify('do:logout')">{{'logout' | i18n}}</a>
      </div>
      <!--
        As version
      -->
      <div class="as-version">{{VersionInfo}}</div>
    </div>
  </template>
</div>`);
//========================================
// JOIN <wn-session-badge.mjs> ti/com/wn/session/badge/wn-session-badge.mjs
//========================================
Ti.Preload("ti/com/wn/session/badge/wn-session-badge.mjs", TI_PACK_EXPORTS['ti/com/wn/session/badge/wn-session-badge.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/session/badge/_com.json
//========================================
Ti.Preload("ti/com/wn/session/badge/_com.json", {
  "name" : "wn-session-badge",
  "globally" : true,
  "template" : "./wn-session-badge.html",
  "mixins" : ["./wn-session-badge.mjs"],
  "components" : [
    "@com:ti/session/badge"
  ]
});
//========================================
// JOIN <wn-fileset-mixins.mjs> ti/com/wn/support/wn-fileset-mixins.mjs
//========================================
Ti.Preload("ti/com/wn/support/wn-fileset-mixins.mjs", TI_PACK_EXPORTS['ti/com/wn/support/wn-fileset-mixins.mjs']);
//========================================
// JOIN <wn_list_wrapper_mixins.mjs> ti/com/wn/support/wn_list_wrapper_mixins.mjs
//========================================
Ti.Preload("ti/com/wn/support/wn_list_wrapper_mixins.mjs", TI_PACK_EXPORTS['ti/com/wn/support/wn_list_wrapper_mixins.mjs']);
//========================================
// JOIN <wn-table.html> ti/com/wn/table/wn-table.html
//========================================
Ti.Preload("ti/com/wn/table/wn-table.html", `<ti-table
  v-bind="this"
  :data="myData"
  :fields="TheFields"
  :headDisplay="TheHeadDisplay"
  />`);
//========================================
// JOIN <wn-table.mjs> ti/com/wn/table/wn-table.mjs
//========================================
Ti.Preload("ti/com/wn/table/wn-table.mjs", TI_PACK_EXPORTS['ti/com/wn/table/wn-table.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/table/_com.json
//========================================
Ti.Preload("ti/com/wn/table/_com.json", {
  "name" : "wn-table",
  "globally" : true,
  "template" : "./wn-table.html",
  "props" : [
    "@com:ti/support/list_props.mjs",
    "@com:ti/table/ti-table-props.mjs"],
  "mixins" : [
    "@com:wn/support/wn_list_wrapper_mixins.mjs",
    "./wn-table.mjs"],
  "components" : [
    "@com:ti/table"]
});
//========================================
// JOIN <wn-th-adaptor-gui.mjs> ti/com/wn/th/adaptor/wn-th-adaptor-gui.mjs
//========================================
Ti.Preload("ti/com/wn/th/adaptor/wn-th-adaptor-gui.mjs", TI_PACK_EXPORTS['ti/com/wn/th/adaptor/wn-th-adaptor-gui.mjs']);
//========================================
// JOIN <wn-th-adaptor-methods.mjs> ti/com/wn/th/adaptor/wn-th-adaptor-methods.mjs
//========================================
Ti.Preload("ti/com/wn/th/adaptor/wn-th-adaptor-methods.mjs", TI_PACK_EXPORTS['ti/com/wn/th/adaptor/wn-th-adaptor-methods.mjs']);
//========================================
// JOIN <wn-th-adaptor-prop.mjs> ti/com/wn/th/adaptor/wn-th-adaptor-prop.mjs
//========================================
Ti.Preload("ti/com/wn/th/adaptor/wn-th-adaptor-prop.mjs", TI_PACK_EXPORTS['ti/com/wn/th/adaptor/wn-th-adaptor-prop.mjs']);
//========================================
// JOIN <wn-th-adaptor.html> ti/com/wn/th/adaptor/wn-th-adaptor.html
//========================================
Ti.Preload("ti/com/wn/th/adaptor/wn-th-adaptor.html", `<ti-gui
  class="wn-th-obj"
  :class="TopClass"
  :layout="GuiLayout"
  :schema="GuiSchema"
  :vars="GuiExplainContext"
  :shown="guiShown"
  :can-loading="true"
  :loading-as="GuiLoadingAs"
  :loading="GuiIsLoading"
  :action-status="status"/>`);
//========================================
// JOIN <wn-th-adaptor.mjs> ti/com/wn/th/adaptor/wn-th-adaptor.mjs
//========================================
Ti.Preload("ti/com/wn/th/adaptor/wn-th-adaptor.mjs", TI_PACK_EXPORTS['ti/com/wn/th/adaptor/wn-th-adaptor.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/th/adaptor/_com.json
//========================================
Ti.Preload("ti/com/wn/th/adaptor/_com.json", {
  "name": "wn-th-adaptor",
  "globally": true,
  "i18n": "@i18n:wn-thing",
  "template": "./wn-th-adaptor.html",
  "props": "./wn-th-adaptor-prop.mjs",
  "methods": "./wn-th-adaptor-methods.mjs",
  "mixins": [
    "./wn-th-adaptor.mjs",
    "./wn-th-adaptor-gui.mjs"
  ],
  "components": [
    "@com:ti/gui",
    "@com:ti/filterbar",
    "@com:ti/paging/jumper",
    "@com:wn/obj/form",
    "@com:wn/table",
    "@com:wn/obj/icon",
    "@com:wn/obj/puretext",
    "@com:wn/upload/file",
    "@com:wn/th/creator",
    "@com:wn/th/files"
  ]
});
//========================================
// JOIN <wn-th-creator.html> ti/com/wn/th/creator/wn-th-creator.html
//========================================
Ti.Preload("ti/com/wn/th/creator/wn-th-creator.html", `<div class="wn-th-creator ti-box-relative">
  <component
    :is="formType"
      v-bind="TheForm"
      :data="TheData"
      :on-init="OnFormInit"
      @field:change="OnFormFieldChange"
      @change="OnFormChange"
      @submit="OnSubmit"/>
  <div v-if="creating"
    class="ti-box-mask as-thin ti-flex-center">
    <ti-loading text="i18n:creating"/>
  </div>
</div>`);
//========================================
// JOIN <wn-th-creator.mjs> ti/com/wn/th/creator/wn-th-creator.mjs
//========================================
Ti.Preload("ti/com/wn/th/creator/wn-th-creator.mjs", TI_PACK_EXPORTS['ti/com/wn/th/creator/wn-th-creator.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/th/creator/_com.json
//========================================
Ti.Preload("ti/com/wn/th/creator/_com.json", {
  "name" : "wn-th-creator",
  "globally" : true,
  "template" : "./wn-th-creator.html",
  "mixins"   : ["./wn-th-creator.mjs"],
  "components" : []
});
//========================================
// JOIN <wn-th-files-props.mjs> ti/com/wn/th/files/wn-th-files-props.mjs
//========================================
Ti.Preload("ti/com/wn/th/files/wn-th-files-props.mjs", TI_PACK_EXPORTS['ti/com/wn/th/files/wn-th-files-props.mjs']);
//========================================
// JOIN <wn-th-files.html> ti/com/wn/th/files/wn-th-files.html
//========================================
Ti.Preload("ti/com/wn/th/files/wn-th-files.html", `<div class="wn-thing-files"
  :class="TopClass">
  <!--
    With Data Home
  -->
  <template v-if="dataHome">
    <!--
      Head bar for switch dir and actions
    -->
    <div class="as-header">
      <div v-if="dirNameTip"
        class="as-tip">
        <span>{{dirNameTip|i18n}}</span>
      </div>
      <!--Left: select files home dirName-->
      <div class="as-name" v-if="hasDataHome && hasDirNameOptions">
        <component 
          :is="dirNameComType"
          height=".3rem"
          :allow-empty="false"
          :options="dirNameOptions"
          :value="dirName"
          :prefix-icon-for-clean="false"
          @change="OnDirNameChanged"/>
      </div>
      <!--Right: Common Actions-->
      <div class="as-menu">
        <ti-actionbar 
          :items="actions"
          :status="status"/>
      </div>
    </div>
    <!--
      File Preview
    -->
    <div class="as-preview">
      <wn-obj-preview
        class="ti-fill-parent"
        v-bind="ThePreview"
        :meta="CurrentFile"/>
    </div>
    <!--
      File List
    -->
    <div class="as-list">
      <wn-adaptlist
        class="ti-fill-parent"
        v-bind="TheFiles"
        :data="data"
        :meta="myDataDirObj"
        :status="status"
        :before-upload="checkDataDir"
        @uploaded="OnFileUploaded"
        @select="OnFileSelect"
        @open:wn:obj="OnFileOpen"
        :on-init="OnAdaptListInit"/>
    </div>
  </template>
  <!--
    Without Data Home
  -->
  <ti-loading
    v-else
      class="nil-datahome as-big-mask"
      :text="nilText"
      :icon="nilIcon"/>
</div>`);
//========================================
// JOIN <wn-th-files.mjs> ti/com/wn/th/files/wn-th-files.mjs
//========================================
Ti.Preload("ti/com/wn/th/files/wn-th-files.mjs", TI_PACK_EXPORTS['ti/com/wn/th/files/wn-th-files.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/th/files/_com.json
//========================================
Ti.Preload("ti/com/wn/th/files/_com.json", {
  "name": "wn-th-files",
  "globally": true,
  "template": "./wn-th-files.html",
  "props": "./wn-th-files-props.mjs",
  "mixins": "./wn-th-files.mjs",
  "components": [
    "@com:wn/adaptlist",
    "@com:wn/obj/preview"
  ]
});
//========================================
// JOIN <wn-th-search.html> ti/com/wn/th/search/wn-th-search.html
//========================================
Ti.Preload("ti/com/wn/th/search/wn-th-search.html", `<TiSearch
  :class="className"

  :loading="myLoading"

  :filter="myFilter"
  :list="myList"
  :sorter="mySorter"
  :pager="myPager"

  :filterComType="filterComType"
  :filterComConf="filterComConf"
  :listComType="listComType"
  :listComConf="listComConf"
  :multi="multi"

  :pagerValueType="pagerValueType"
  :placeholder="placeholder"
  :dialog="dialog"
  :filterTags="filterTags"
  @filter:change="OnFilterChange"
  @sorter:change="OnSorterChange"
  @pager::change="OnPagerChange"
  />`);
//========================================
// JOIN <wn-th-search.mjs> ti/com/wn/th/search/wn-th-search.mjs
//========================================
Ti.Preload("ti/com/wn/th/search/wn-th-search.mjs", TI_PACK_EXPORTS['ti/com/wn/th/search/wn-th-search.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/th/search/_com.json
//========================================
Ti.Preload("ti/com/wn/th/search/_com.json", {
  "name": "WnThSearch",
  "globally": true,
  "template": "./wn-th-search.html",
  "props": "@com:ti/search/ti-search-props.mjs",
  "mixins": [
    "./wn-th-search.mjs"
  ],
  "components": [
    "@com:ti/search"
  ]
});
//========================================
// JOIN <thing-creator.html> ti/com/wn/thing/manager/com/thing-creator/thing-creator.html
//========================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-creator/thing-creator.html", `<div class="thing-creator ti-box-relative">
  <ti-form
    v-bind="TheForm"
    :fields="fields"
    :fixed="fixed"
    :data="TheData"
    :on-init="OnFormInit"
    @field:change="OnFormFieldChange"
    @change="OnFormChange"
    @submit="OnSubmit"/>
  <hr class="no-space">
  <div class="ti-flex-center ti-padding-10">
    <div class="ti-btn is-big" 
      @click="OnCreate">
      <span>{{'create-now'|i18n}}</span>
    </div>
  </div>
  <div v-if="creating"
    class="ti-box-mask as-thin ti-flex-center">
    <ti-loading text="i18n:creating"/>
  </div>
</div>`);
//========================================
// JOIN <thing-creator.mjs> ti/com/wn/thing/manager/com/thing-creator/thing-creator.mjs
//========================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-creator/thing-creator.mjs", TI_PACK_EXPORTS['ti/com/wn/thing/manager/com/thing-creator/thing-creator.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/thing/manager/com/thing-creator/_com.json
//========================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-creator/_com.json", {
  "name" : "wn-thing-creator",
  "globally" : true,
  "template" : "./thing-creator.html",
  "mixins"   : ["./thing-creator.mjs"],
  "components" : []
});
//========================================
// JOIN <thing-files-props.mjs> ti/com/wn/thing/manager/com/thing-files/thing-files-props.mjs
//========================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-files/thing-files-props.mjs", TI_PACK_EXPORTS['ti/com/wn/thing/manager/com/thing-files/thing-files-props.mjs']);
//========================================
// JOIN <thing-files.html> ti/com/wn/thing/manager/com/thing-files/thing-files.html
//========================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-files/thing-files.html", `<div class="wn-thing-files"
  :class="TopClass">
  <!--
    With Data Home
  -->
  <template v-if="dataHome">
    <!--
      Head bar for switch dir and actions
    -->
    <div class="as-header">
      <div v-if="dirNameTip"
        class="as-tip">
        <span>{{dirNameTip|i18n}}</span>
      </div>
      <!--Left: select files home dirName-->
      <div class="as-name" v-if="hasDataHome && hasDirNameOptions">
        <component 
          :is="dirNameComType"
          height=".3rem"
          :allow-empty="false"
          :options="dirNameOptions"
          :value="dirName"
          :prefix-icon-for-clean="false"
          @change="OnDirNameChanged"/>
      </div>
      <!--Right: Common Actions-->
      <div class="as-menu">
        <ti-actionbar 
          :items="actions"
          :status="myStatus"/>
      </div>
    </div>
    <!--
      File Preview
    -->
    <div class="as-preview">
      <wn-obj-preview
        class="ti-fill-parent"
        v-bind="ThePreview"
        :meta="CurrentFile"/>
    </div>
    <!--
      File List
    -->
    <div class="as-list">
      <wn-adaptlist
        class="ti-fill-parent"
        v-bind="TheFiles"
        :data="myData"
        :meta="myDataDirObj"
        :status="myStatus"
        :before-upload="checkDataDir"
        @uploaded="OnFileUploaded"
        @select="OnFileSelect"
        @open:wn:obj="OnFileOpen"
        :on-init="OnAdaptListInit"/>
    </div>
  </template>
  <!--
    Without Data Home
  -->
  <ti-loading
    v-else
      class="nil-datahome as-big-mask"
      :text="nilText"
      :icon="nilIcon"/>
</div>`);
//========================================
// JOIN <thing-files.mjs> ti/com/wn/thing/manager/com/thing-files/thing-files.mjs
//========================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-files/thing-files.mjs", TI_PACK_EXPORTS['ti/com/wn/thing/manager/com/thing-files/thing-files.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/thing/manager/com/thing-files/_com.json
//========================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-files/_com.json", {
  "name" : "wn-thing-files",
  "globally" : true,
  "template" : "./thing-files.html",
  "props" : "./thing-files-props.mjs",
  "mixins"   : ["./thing-files.mjs"],
  "components" : [
    "@com:wn/adaptlist"
  ]
});
//========================================
// JOIN <thing-filter.html> ti/com/wn/thing/manager/com/thing-filter/thing-filter.html
//========================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-filter/thing-filter.html", `<div class="wn-thing-filter"
  :class="TopClass">
  <!--
    Icon: Recycle Bin
  -->
  <div
    v-if="isInRecycleBin"
      class="as-recyclebin"
      @click="OnLeaveRecycleBin"><div>
        <!--Icon-->
        <div class="it-icon">
          <ti-icon value="fas-recycle"/>
          <ti-icon value="far-arrow-alt-circle-left"/>
        </div>
        <!--text-->
        <div class="it-text">{{'i18n:thing-recycle-bin'|i18n}}</div>
  </div></div>
  <!--
    Keyword
  -->
  <TiComboFilter
    class="as-filter"
    v-bind="filter"
    :placeholder="placeholder"
    :value="value.filter"
    @change="OnFilterChange"/>
  <!--
    Sorter
  -->
  <TiComboSorter
    v-if="hasSorter"
      class="as-sorter"
      v-bind="sorter"
      :value="value.sorter"
      @change="OnSorterChange"/>
</div>`);
//========================================
// JOIN <thing-filter.mjs> ti/com/wn/thing/manager/com/thing-filter/thing-filter.mjs
//========================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-filter/thing-filter.mjs", TI_PACK_EXPORTS['ti/com/wn/thing/manager/com/thing-filter/thing-filter.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/thing/manager/com/thing-filter/_com.json
//========================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-filter/_com.json", {
  "name" : "wn-thing-filter",
  "globally" : true,
  "template" : "./thing-filter.html",
  "mixins"   : ["./thing-filter.mjs"],
  "components" : [
    "@com:ti/combo/filter",
    "@com:ti/combo/sorter"
  ]
});
//========================================
// JOIN <_com.json> ti/com/wn/thing/manager/com/thing-markdown-editor/_com.json
//========================================
Ti.Preload("ti/com/wn/thing/manager/com/thing-markdown-editor/_com.json", {
  "name" : "wn-thing-markdown-richeditor",
  "globally" : true,
  "template" : "./thing-markdown-richeditor.html",
  "mixins"   : ["./thing-markdown-richeditor.mjs"],
  "components" : []
});
//========================================
// JOIN <wn-thing-manager-methods.mjs> ti/com/wn/thing/manager/wn-thing-manager-methods.mjs
//========================================
Ti.Preload("ti/com/wn/thing/manager/wn-thing-manager-methods.mjs", TI_PACK_EXPORTS['ti/com/wn/thing/manager/wn-thing-manager-methods.mjs']);
//========================================
// JOIN <wn-thing-manager.html> ti/com/wn/thing/manager/wn-thing-manager.html
//========================================
Ti.Preload("ti/com/wn/thing/manager/wn-thing-manager.html", `<ti-gui
  class="wn-thing"
  :class="TopClass"
  v-ti-activable
  :layout="TheLayout"
  :schema="TheSchema"
  :vars="TheGuiVars"
  :shown="TheShown"
  :can-loading="true"
  :loading-as="GuiLoadingAs"
  :loading="GuiIsLoading"
  :action-status="status"/>`);
//========================================
// JOIN <wn-thing-manager.mjs> ti/com/wn/thing/manager/wn-thing-manager.mjs
//========================================
Ti.Preload("ti/com/wn/thing/manager/wn-thing-manager.mjs", TI_PACK_EXPORTS['ti/com/wn/thing/manager/wn-thing-manager.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/thing/manager/_com.json
//========================================
Ti.Preload("ti/com/wn/thing/manager/_com.json", {
  "name" : "wn-thing-manager",
  "globally" : true,
  "i18n" : "@i18n:wn-thing",
  "template" : "./wn-thing-manager.html",
  "methods"  : "./wn-thing-manager-methods.mjs",
  "mixins"   : ["./wn-thing-manager.mjs"],
  "components" : [
    "./com/thing-files",
    "./com/thing-filter",
    "./com/thing-creator",
    "./com/thing-files",
    "@com:ti/gui",
    "@com:ti/combo/filter",
    "@com:ti/paging/jumper",
    "@com:wn/table",
    "@com:wn/obj/icon",
    "@com:wn/obj/puretext",
    "@com:wn/obj/preview",
    "@com:wn/obj/form",
    "@com:wn/upload/file"]
});
//========================================
// JOIN <wn-transfer.html> ti/com/wn/transfer/wn-transfer.html
//========================================
Ti.Preload("ti/com/wn/transfer/wn-transfer.html", `<ti-transfer v-bind="this"
  
  :options="OptionsDict"
  :can-com-type="TheCanComType"
  :sel-com-type="TheSelComType"
  :display="TheDisplay"

  @change="$notify('change', $event)"/>`);
//========================================
// JOIN <wn-transfer.mjs> ti/com/wn/transfer/wn-transfer.mjs
//========================================
Ti.Preload("ti/com/wn/transfer/wn-transfer.mjs", TI_PACK_EXPORTS['ti/com/wn/transfer/wn-transfer.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/transfer/_com.json
//========================================
Ti.Preload("ti/com/wn/transfer/_com.json", {
  "name" : "wn-transfer",
  "globally" : true,
  "template" : "./wn-transfer.html",
  "props" : "@com:ti/transfer/ti-transfer-props.mjs",
  "mixins" : ["./wn-transfer.mjs"],
  "components" : ["@com:ti/transfer"]
});
//========================================
// JOIN <wn-upload-file.html> ti/com/wn/upload/file/wn-upload-file.html
//========================================
Ti.Preload("ti/com/wn/upload/file/wn-upload-file.html", `<TiUploadFile
  :preview="PreviewIcon"
  :preview-type="PreviewType"
  :prefixHoverIcon="UploadPrefixHoverIcon"
  :exlink="exlink"
  :readonly="readonly"
  :actions="TheActions"
  :width="width"
  :height="height"
  :max-width="maxWidth"
  :max-height="maxHeight"
  :progress="progress"
  :upload-file="uploadFile"
  :removable="removable"
  @upload="OnUpload"
  @remove="OnRemove"
  @exlink="OnExlink"
  @download="OnDownload"
  @open="OnOpen"/>`);
//========================================
// JOIN <wn-upload-file.mjs> ti/com/wn/upload/file/wn-upload-file.mjs
//========================================
Ti.Preload("ti/com/wn/upload/file/wn-upload-file.mjs", TI_PACK_EXPORTS['ti/com/wn/upload/file/wn-upload-file.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/upload/file/_com.json
//========================================
Ti.Preload("ti/com/wn/upload/file/_com.json", {
  "name" : "wn-upload-file",
  "globally" : true,
  "template" : "./wn-upload-file.html",
  "mixins" : ["./wn-upload-file.mjs"],
  "components" : [
    "@com:ti/upload/file"
  ]
});
//========================================
// JOIN <wn-upload-file-box.html> ti/com/wn/upload/file-box/wn-upload-file-box.html
//========================================
Ti.Preload("ti/com/wn/upload/file-box/wn-upload-file-box.html", `<TiUploadFileBox
  :preview="PreviewIcon"
  :preview-type="PreviewType"
  :prefixHoverIcon="UploadPrefixHoverIcon"
  :text="FileTitle"
  :href="FileHref"
  :exlink="exlink"
  :readonly="readonly"
  :actions="TheActions"
  :progress="progress"
  :upload-file="uploadFile"
  :removable="removable"
  @upload="OnUpload"
  @remove="OnRemove"
  @exlink="OnExlink"
  @download="OnDownload"
  @open="OnOpen"/>`);
//========================================
// JOIN <_com.json> ti/com/wn/upload/file-box/_com.json
//========================================
Ti.Preload("ti/com/wn/upload/file-box/_com.json", {
  "name": "wn-upload-file-box",
  "globally": true,
  "template": "./wn-upload-file-box.html",
  "mixins": "@com:wn/upload/file/wn-upload-file.mjs",
  "components": [
    "@com:ti/upload/file-box"
  ]
});
//========================================
// JOIN <wn-upload-multi-files.html> ti/com/wn/upload/multi-files/wn-upload-multi-files.html
//========================================
Ti.Preload("ti/com/wn/upload/multi-files/wn-upload-multi-files.html", `<TiUploadMultiFiles
  :readonly="readonly"
  :items="FileItems"
  :sortable="!isQueryMode &&sortable"
  :removable="removable"
  :progress="myUploadProgress"
  :showItemText="showItemText"
  :limit="limit"
  :itemWidth="itemWidth"
  :itemHeight="itemHeight"
  :previewStyle="previewStyle"
  :fileFilter="LocalFileFilter"
  @upload="OnUploadFiles"
  @remove="OnRemove"
  @open="OnOpen"
  @download="OnDownload"
  @clean="OnClean"
/>`);
//========================================
// JOIN <wn-upload-multi-files.mjs> ti/com/wn/upload/multi-files/wn-upload-multi-files.mjs
//========================================
Ti.Preload("ti/com/wn/upload/multi-files/wn-upload-multi-files.mjs", TI_PACK_EXPORTS['ti/com/wn/upload/multi-files/wn-upload-multi-files.mjs']);
//========================================
// JOIN <_com.json> ti/com/wn/upload/multi-files/_com.json
//========================================
Ti.Preload("ti/com/wn/upload/multi-files/_com.json", {
  "name" : "wn-upload-multi-files",
  "globally" : true,
  "template" : "./wn-upload-multi-files.html",
  "mixins" : ["./wn-upload-multi-files.mjs"],
  "components" : [
    "@com:ti/upload/multi-files"
  ],
  "deps": ["@deps:sortable.js"]
});
//========================================
// JOIN <wn-upload-multi-files-box.html> ti/com/wn/upload/multi-files-box/wn-upload-multi-files-box.html
//========================================
Ti.Preload("ti/com/wn/upload/multi-files-box/wn-upload-multi-files-box.html", `<TiUploadMultiFilesBox
  :readonly="readonly"
  :items="FileItems"
  :progress="myUploadProgress"
  :removable="removable"
  :fileFilter="LocalFileFilter"
  @upload="OnUploadFiles"
  @remove="OnRemove"
  @open="OnOpen"/>`);
//========================================
// JOIN <_com.json> ti/com/wn/upload/multi-files-box/_com.json
//========================================
Ti.Preload("ti/com/wn/upload/multi-files-box/_com.json", {
  "name": "wn-upload-multi-files-box",
  "globally": true,
  "template": "./wn-upload-multi-files-box.html",
  "mixins": "@com:wn/upload/multi-files/wn-upload-multi-files.mjs",
  "components": [
    "@com:ti/upload/multi-files-box"
  ]
});
//========================================
// JOIN <site-config-actions.mjs> ti/mod/hmaker/website/mod/site-config/site-config-actions.mjs
//========================================
Ti.Preload("ti/mod/hmaker/website/mod/site-config/site-config-actions.mjs", TI_PACK_EXPORTS['ti/mod/hmaker/website/mod/site-config/site-config-actions.mjs']);
//========================================
// JOIN <site-config.json> ti/mod/hmaker/website/mod/site-config/site-config.json
//========================================
Ti.Preload("ti/mod/hmaker/website/mod/site-config/site-config.json", {
  "meta" : null,
  "desktop" : {
    "mapping" : {
      "paths" : {
        "site-state.json" : "desktopSiteStateView"
      },
      "types" : {
      },
      "mimes" : {
        "application/json" : "desktopJsonView",
        "text/*, application/*" : "desktopTextView"
      },
      "races" : {
        "DIR"  : "desktopAdaptList",
        "FILE" : "desktopObjPreview"
      }
    }
  },
  "tablet" : "desktop",
  "phone" : "desktop",
  "views" : {
    "desktopSiteStateView" : {
      "comType" : "hmaker-site-state",
      "comConf" : {
        "home" : "=home",
        "content" : "=currentContent"
      },
      "actions" : [{
          "key"  : "saving",
          "type" : "action",
          "icon" : "zmdi-floppy",
          "text" : "i18n:save-change",
          "altDisplay" : {
            "icon" : "fas-spinner fa-pulse",
            "text" : "i18n:saving"
          },
          "enableBy" : "changed",
          "action" : "dispatch:main/saveCurrent",
          "shortcut" : "CTRL+S"
        }, {
          "key"  : "reloading",
          "type" : "action",
          "icon" : "zmdi-rotate-right",
          "text" : "i18n:revoke-change",
          "altDisplay" : {
            "icon" : "zmdi-refresh zmdi-hc-spin",
            "text" : "i18n:loading"
          },
          "action" : "dispatch:main/reloadCurrent"
        }, {
          "type" : "Group",
          "icon" : "zmdi-more-vert",
          "items" : [{
              "type" : "action",
              "icon" : "zmdi-info-outline",
              "text" : "i18n:properties",
              "action" : "main:editCurrentObjMeta"
            }]
          }]
    },
    "desktopTextView" : {
      "comType" : "ti-text-raw",
      "comConf" : {
        "showTitle" : false,
        "content" : "=currentContent",
        "contentIsChanged" : "=status.changed"
      },
      "actions" : [{
          "key"  : "saving",
          "type" : "action",
          "icon" : "zmdi-floppy",
          "text" : "i18n:save-change",
          "altDisplay" : {
            "icon" : "fas-spinner fa-pulse",
            "text" : "i18n:saving"
          },
          "enableBy" : "changed",
          "action" : "dispatch:main/saveCurrent",
          "shortcut" : "CTRL+S"
        }, {
          "key"  : "reloading",
          "type" : "action",
          "icon" : "zmdi-rotate-right",
          "text" : "i18n:revoke-change",
          "altDisplay" : {
            "icon" : "zmdi-refresh zmdi-hc-spin",
            "text" : "i18n:loading"
          },
          "action" : "dispatch:main/reloadCurrent"
        }, {
          "type" : "Group",
          "icon" : "zmdi-more-vert",
          "items" : [{
              "type" : "action",
              "icon" : "zmdi-info-outline",
              "text" : "i18n:properties",
              "action" : "main:editCurrentObjMeta"
            }]
          }]
    },
    "desktopJsonView" : {
      "comType" : "ti-text-json",
      "comConf" : {
        "data" : "=currentData"
      },
      "actions" : [{
          "key"  : "saving",
          "type" : "action",
          "icon" : "zmdi-floppy",
          "text" : "i18n:save-change",
          "altDisplay" : {
            "icon" : "fas-spinner fa-pulse",
            "text" : "i18n:saving"
          },
          "enableBy" : "changed",
          "action" : "dispatch:main/saveCurrent",
          "shortcut" : "CTRL+S"
        }, {
          "key"  : "reloading",
          "type" : "action",
          "icon" : "zmdi-rotate-right",
          "text" : "i18n:revoke-change",
          "altDisplay" : {
            "icon" : "zmdi-refresh zmdi-hc-spin",
            "text" : "i18n:loading"
          },
          "action" : "dispatch:main/reloadCurrent"
        }, {
          "type" : "Group",
          "icon" : "zmdi-more-vert",
          "items" : [{
              "type" : "action",
              "icon" : "zmdi-info-outline",
              "text" : "i18n:properties",
              "action" : "main:editCurrentObjMeta"
            }]
        }]
    },
    "desktopAdaptList" : {
      "comType" : "wn-adaptlist",
      "comConf" : {
        "list" : "=currentData.list"
      }
    },
    "desktopObjPreview" : {
      "comType" : "wn-obj-preview",
      "comConf" : {
        "meta" : "=currentMeta"
      }
    }
  },
  "status" : {
    "reloading" : false
  }
});
//========================================
// JOIN <site-config.mjs> ti/mod/hmaker/website/mod/site-config/site-config.mjs
//========================================
Ti.Preload("ti/mod/hmaker/website/mod/site-config/site-config.mjs", TI_PACK_EXPORTS['ti/mod/hmaker/website/mod/site-config/site-config.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/hmaker/website/mod/site-config/_mod.json
//========================================
Ti.Preload("ti/mod/hmaker/website/mod/site-config/_mod.json", {
  "name" : "hmaker-site-config",
  "namespaced" : true,
  "state" : "./site-config.json",
  "actions" : "./site-config-actions.mjs",
  "mixins" : "./site-config.mjs"
});
//========================================
// JOIN <site-tree-actions.mjs> ti/mod/hmaker/website/mod/site-tree/site-tree-actions.mjs
//========================================
Ti.Preload("ti/mod/hmaker/website/mod/site-tree/site-tree-actions.mjs", TI_PACK_EXPORTS['ti/mod/hmaker/website/mod/site-tree/site-tree-actions.mjs']);
//========================================
// JOIN <site-tree.json> ti/mod/hmaker/website/mod/site-tree/site-tree.json
//========================================
Ti.Preload("ti/mod/hmaker/website/mod/site-tree/site-tree.json", {
  "root" : {},
  "currentId" : null,
  "openedNodePaths" : {}
});
//========================================
// JOIN <site-tree.mjs> ti/mod/hmaker/website/mod/site-tree/site-tree.mjs
//========================================
Ti.Preload("ti/mod/hmaker/website/mod/site-tree/site-tree.mjs", TI_PACK_EXPORTS['ti/mod/hmaker/website/mod/site-tree/site-tree.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/hmaker/website/mod/site-tree/_mod.json
//========================================
Ti.Preload("ti/mod/hmaker/website/mod/site-tree/_mod.json", {
  "name" : "hmaker-site-tree",
  "namespaced" : true,
  "state" : "./site-tree.json",
  "actions" : "./site-tree-actions.mjs",
  "mixins" : "./site-tree.mjs"
});
//========================================
// JOIN <website-actions.mjs> ti/mod/hmaker/website/website-actions.mjs
//========================================
Ti.Preload("ti/mod/hmaker/website/website-actions.mjs", TI_PACK_EXPORTS['ti/mod/hmaker/website/website-actions.mjs']);
//========================================
// JOIN <website.json> ti/mod/hmaker/website/website.json
//========================================
Ti.Preload("ti/mod/hmaker/website/website.json", {
  "home": null,
  "status" : {
    "reloading"  : false,
    "doing"      : false,
    "saving"     : false,
    "deleting"   : false,
    "changed"    : false,
    "publishing" : false,
    "exposeHidden" : false
  }
});
//========================================
// JOIN <website.mjs> ti/mod/hmaker/website/website.mjs
//========================================
Ti.Preload("ti/mod/hmaker/website/website.mjs", TI_PACK_EXPORTS['ti/mod/hmaker/website/website.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/hmaker/website/_mod.json
//========================================
Ti.Preload("ti/mod/hmaker/website/_mod.json", {
  "name" : "hmaker-website",
  "namespaced" : true,
  "state" : "./website.json",
  "actions" : "./website-actions.mjs",
  "mixins" : "./website.mjs",
  "modules" : {
    "tree"    : "./mod/site-tree",
    "config"  : "./mod/site-config",
    "current" : "@mod:wn/obj-current"
  }
});
//========================================
// JOIN <ti-viewport.json> ti/mod/ti/viewport/ti-viewport.json
//========================================
Ti.Preload("ti/mod/ti/viewport/ti-viewport.json", {
  "mode" : "desktop",
  "activedIds" : [],
  "exposeHidden" : false,
  "listViewType" : "wall",
  "keeyHiddenBy" : "ti-viewport-expose-hidden",
  "keeyViewTypeBy" : "ti-viewport-view-type"
});
//========================================
// JOIN <ti-viewport.mjs> ti/mod/ti/viewport/ti-viewport.mjs
//========================================
Ti.Preload("ti/mod/ti/viewport/ti-viewport.mjs", TI_PACK_EXPORTS['ti/mod/ti/viewport/ti-viewport.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/ti/viewport/_mod.json
//========================================
Ti.Preload("ti/mod/ti/viewport/_mod.json", {
  "state" : "./ti-viewport.json",
  "mixins" : "./ti-viewport.mjs"
});
//========================================
// JOIN <m-charts-actions.mjs> ti/mod/wn/charts/m-charts-actions.mjs
//========================================
Ti.Preload("ti/mod/wn/charts/m-charts-actions.mjs", TI_PACK_EXPORTS['ti/mod/wn/charts/m-charts-actions.mjs']);
//========================================
// JOIN <m-charts.json> ti/mod/wn/charts/m-charts.json
//========================================
Ti.Preload("ti/mod/wn/charts/m-charts.json", {
  "meta": null,
  "children": [],
  "chartNameList": [],
  "chartStatus": {
    "name" : "-unset-",
    "type" : "-unset-"
  },
  "global": {
    "keepToLocal": false,
    "chartStatus": {},
    "spanOptions": [],
    "chartDefines": {},
    "chartTypes": [],
    "chartOptions": {}
  },
  "chart": {
    "chartStatus": {},
    "spanOptions": [],
    "chartDefines": {},
    "chartTypes": [],
    "chartOptions": {},
    "data": null
  },
  "chartData": [],
  "status": {
    "reloading": false
  }
});
//========================================
// JOIN <m-charts.mjs> ti/mod/wn/charts/m-charts.mjs
//========================================
Ti.Preload("ti/mod/wn/charts/m-charts.mjs", TI_PACK_EXPORTS['ti/mod/wn/charts/m-charts.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/wn/charts/_mod.json
//========================================
Ti.Preload("ti/mod/wn/charts/_mod.json", {
  "name" : "wn-charts",
  "namespaced" : true,
  "state" : "./m-charts.json",
  "actions" : "./m-charts-actions.mjs",
  "mixins" : "./m-charts.mjs"
});
//========================================
// JOIN <m-wn-obj-actions.mjs> ti/mod/wn/obj/m-wn-obj-actions.mjs
//========================================
Ti.Preload("ti/mod/wn/obj/m-wn-obj-actions.mjs", TI_PACK_EXPORTS['ti/mod/wn/obj/m-wn-obj-actions.mjs']);
//========================================
// JOIN <m-wn-obj-cud.mjs> ti/mod/wn/obj/m-wn-obj-cud.mjs
//========================================
Ti.Preload("ti/mod/wn/obj/m-wn-obj-cud.mjs", TI_PACK_EXPORTS['ti/mod/wn/obj/m-wn-obj-cud.mjs']);
//========================================
// JOIN <m-wn-obj-mutations.mjs> ti/mod/wn/obj/m-wn-obj-mutations.mjs
//========================================
Ti.Preload("ti/mod/wn/obj/m-wn-obj-mutations.mjs", TI_PACK_EXPORTS['ti/mod/wn/obj/m-wn-obj-mutations.mjs']);
//========================================
// JOIN <m-wn-obj-search.mjs> ti/mod/wn/obj/m-wn-obj-search.mjs
//========================================
Ti.Preload("ti/mod/wn/obj/m-wn-obj-search.mjs", TI_PACK_EXPORTS['ti/mod/wn/obj/m-wn-obj-search.mjs']);
//========================================
// JOIN <m-wn-obj.json> ti/mod/wn/obj/m-wn-obj.json
//========================================
Ti.Preload("ti/mod/wn/obj/m-wn-obj.json", {
  "moduleName": "main",
  "pvg":{
    "remove":null,
    "create":null,
    "update":null,
    "save":null
  },
  "view": null,
  "localBehaviorKeepAt": "->WnObj-State-${dirId}",
  "localBehaviorIgnore": null,
  "lbkAt": null,
  "lbkIgnore": null,
  "lbkOff": false,
  "dirId": null,
  "oDir": null,
  "mappingDirPath": null,
  "fixedMatch": {},
  "filter": {},
  "sorter": {
    "nm": 1
  },
  "objKeys": null,
  "list": [],
  "currentId": null,
  "checkedIds": {},
  "pager": {
    "pn": 1,
    "pgsz": 50,
    "pgc": 0,
    "sum": 0,
    "skip": 0,
    "count": 0
  },
  "meta": null,
  "content": null,
  "__saved_content": null,
  "contentPath": "<self>",
  "contentType": "<MIME>",
  "contentData": null,
  "contentQuietParse": false,
  "status": {
    "reloading": false,
    "doing": false,
    "preview": false,
    "publishing": false,
    "saving": false,
    "deleting": false,
    "changed": false,
    "restoring": false,
    "hasCurrent": false,
    "hasChecked": false,
    "hasMeta": false
  },
  "fieldStatus": {},
  "itemStatus": {},
  "actionsPath": null,
  "layoutPath": null,
  "schemaPath": null,
  "methodPaths": null,
  "guiShown": {},
  "objActions": null,
  "layout": {},
  "schema": {},
  "objMethods": {}
});
//========================================
// JOIN <m-wn-obj.mjs> ti/mod/wn/obj/m-wn-obj.mjs
//========================================
Ti.Preload("ti/mod/wn/obj/m-wn-obj.mjs", TI_PACK_EXPORTS['ti/mod/wn/obj/m-wn-obj.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/wn/obj/_mod.json
//========================================
Ti.Preload("ti/mod/wn/obj/_mod.json", {
  "name": "wn-obj",
  "namespaced": true,
  "state": "./m-wn-obj.json",
  "mutations": "./m-wn-obj-mutations.mjs",
  "actions": [
    "./m-wn-obj-actions.mjs",
    "./m-wn-obj-cud.mjs",
    "./m-wn-obj-search.mjs"
  ],
  "mixins": "./m-wn-obj.mjs"
});
//========================================
// JOIN <m-obj-axis-actions.mjs> ti/mod/wn/obj-axis/m-obj-axis-actions.mjs
//========================================
Ti.Preload("ti/mod/wn/obj-axis/m-obj-axis-actions.mjs", TI_PACK_EXPORTS['ti/mod/wn/obj-axis/m-obj-axis-actions.mjs']);
//========================================
// JOIN <m-obj-axis.json> ti/mod/wn/obj-axis/m-obj-axis.json
//========================================
Ti.Preload("ti/mod/wn/obj-axis/m-obj-axis.json", {
  "ancestors" : [], 
  "parent" : null, 
  "meta": null,
  "status" : {
    "changed"   : false,
    "saving"    : false,
    "reloading" : false
  }
});
//========================================
// JOIN <m-obj-axis.mjs> ti/mod/wn/obj-axis/m-obj-axis.mjs
//========================================
Ti.Preload("ti/mod/wn/obj-axis/m-obj-axis.mjs", TI_PACK_EXPORTS['ti/mod/wn/obj-axis/m-obj-axis.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/wn/obj-axis/_mod.json
//========================================
Ti.Preload("ti/mod/wn/obj-axis/_mod.json", {
  "name" : "wn-obj-axis",
  "namespaced" : true,
  "state" : "./m-obj-axis.json",
  "actions" : "./m-obj-axis-actions.mjs",
  "mixins" : "./m-obj-axis.mjs"
});
//========================================
// JOIN <m-obj-browser-actions.mjs> ti/mod/wn/obj-browser/m-obj-browser-actions.mjs
//========================================
Ti.Preload("ti/mod/wn/obj-browser/m-obj-browser-actions.mjs", TI_PACK_EXPORTS['ti/mod/wn/obj-browser/m-obj-browser-actions.mjs']);
//========================================
// JOIN <m-obj-browser.json> ti/mod/wn/obj-browser/m-obj-browser.json
//========================================
Ti.Preload("ti/mod/wn/obj-browser/m-obj-browser.json", {
  "meta": null,
  "currentId": null,
  "keepSearch": true,
  "path": null,
  "data": {
    "list": [],
    "pager": {}
  },
  "search": {
    "defaultKey": "nm",
    "keyword": {
      "=id": "^[\\d\\w]{26}$",
      "~nm": "^[a-z0-9]{10}$",
      "title": "^.+"
    },
    "majorKey": null,
    "match": {}
  },
  "filterBy": null,
  "filter": {
    "keyword": null,
    "match": null,
    "majorValue": null
  },
  "sorter": {
    "nm": 1
  },
  "pageNumber": 1,
  "pageSize": 1000,
  "status": {
    "reloading": false
  },
  "fieldStatus": {}
});
//========================================
// JOIN <m-obj-browser.mjs> ti/mod/wn/obj-browser/m-obj-browser.mjs
//========================================
Ti.Preload("ti/mod/wn/obj-browser/m-obj-browser.mjs", TI_PACK_EXPORTS['ti/mod/wn/obj-browser/m-obj-browser.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/wn/obj-browser/_mod.json
//========================================
Ti.Preload("ti/mod/wn/obj-browser/_mod.json", {
  "name" : "wn-obj-browser",
  "namespaced" : true,
  "state" : "./m-obj-browser.json",
  "actions" : "./m-obj-browser-actions.mjs",
  "mixins" : "./m-obj-browser.mjs"
});
//========================================
// JOIN <m-obj-children-actions.mjs> ti/mod/wn/obj-children/m-obj-children-actions.mjs
//========================================
Ti.Preload("ti/mod/wn/obj-children/m-obj-children-actions.mjs", TI_PACK_EXPORTS['ti/mod/wn/obj-children/m-obj-children-actions.mjs']);
//========================================
// JOIN <m-obj-children.json> ti/mod/wn/obj-children/m-obj-children.json
//========================================
Ti.Preload("ti/mod/wn/obj-children/m-obj-children.json", {
  "meta": null,
  "currentId": null,
  "keepSearch": false,
  "filterBy": null,
  "data": {
    "list": [],
    "pager": {}
  },
  "search": {
    "defaultKey": "nm",
    "keyword": {
      "=id": "^[\\d\\w]{26}(:.+)?$",
      "~nm": "^[a-z0-9]{10}$",
      "title": "^.+"
    },
    "majorKey": null,
    "match": {}
  },
  "filter": {
    "keyword": null,
    "match": null,
    "majorValue": null
  },
  "sorter": {
    "nm": 1
  },
  "pageNumber": 1,
  "pageSize": 1000,
  "status": {
    "reloading": false
  },
  "fieldStatus": {}
});
//========================================
// JOIN <m-obj-children.mjs> ti/mod/wn/obj-children/m-obj-children.mjs
//========================================
Ti.Preload("ti/mod/wn/obj-children/m-obj-children.mjs", TI_PACK_EXPORTS['ti/mod/wn/obj-children/m-obj-children.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/wn/obj-children/_mod.json
//========================================
Ti.Preload("ti/mod/wn/obj-children/_mod.json", {
  "name" : "wn-obj-children",
  "namespaced" : true,
  "state" : "./m-obj-children.json",
  "actions" : "./m-obj-children-actions.mjs",
  "mixins" : "./m-obj-children.mjs"
});
//========================================
// JOIN <m-obj-content-actions.mjs> ti/mod/wn/obj-content/m-obj-content-actions.mjs
//========================================
Ti.Preload("ti/mod/wn/obj-content/m-obj-content-actions.mjs", TI_PACK_EXPORTS['ti/mod/wn/obj-content/m-obj-content-actions.mjs']);
//========================================
// JOIN <m-obj-content.json> ti/mod/wn/obj-content/m-obj-content.json
//========================================
Ti.Preload("ti/mod/wn/obj-content/m-obj-content.json", {
  "meta" : null,
  "content" : null,
  "data" : null,
  "__saved_content" : null,
  "status" : {
    "changed"   : false,
    "saving"    : false,
    "reloading" : false
  }
});
//========================================
// JOIN <m-obj-content.mjs> ti/mod/wn/obj-content/m-obj-content.mjs
//========================================
Ti.Preload("ti/mod/wn/obj-content/m-obj-content.mjs", TI_PACK_EXPORTS['ti/mod/wn/obj-content/m-obj-content.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/wn/obj-content/_mod.json
//========================================
Ti.Preload("ti/mod/wn/obj-content/_mod.json", {
  "name" : "wn-obj-content",
  "namespaced" : true,
  "state" : "./m-obj-content.json",
  "actions" : "./m-obj-content-actions.mjs",
  "mixins" : "./m-obj-content.mjs"
});
//========================================
// JOIN <m-obj-current-actions.mjs> ti/mod/wn/obj-current/m-obj-current-actions.mjs
//========================================
Ti.Preload("ti/mod/wn/obj-current/m-obj-current-actions.mjs", TI_PACK_EXPORTS['ti/mod/wn/obj-current/m-obj-current-actions.mjs']);
//========================================
// JOIN <m-obj-current.json> ti/mod/wn/obj-current/m-obj-current.json
//========================================
Ti.Preload("ti/mod/wn/obj-current/m-obj-current.json", {
  "meta" : null,
  "status" : {
    "changed"   : false,
    "saving"    : false,
    "reloading" : false,
    "guiLoading" : false
  },
  "fieldStatus" : {}
});
//========================================
// JOIN <m-obj-current.mjs> ti/mod/wn/obj-current/m-obj-current.mjs
//========================================
Ti.Preload("ti/mod/wn/obj-current/m-obj-current.mjs", TI_PACK_EXPORTS['ti/mod/wn/obj-current/m-obj-current.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/wn/obj-current/_mod.json
//========================================
Ti.Preload("ti/mod/wn/obj-current/_mod.json", {
  "name" : "wn-obj-current",
  "namespaced" : true,
  "state" : "./m-obj-current.json",
  "actions" : "./m-obj-current-actions.mjs",
  "mixins" : "./m-obj-current.mjs"
});
//========================================
// JOIN <m-obj-meta-actions.mjs> ti/mod/wn/obj-meta/m-obj-meta-actions.mjs
//========================================
Ti.Preload("ti/mod/wn/obj-meta/m-obj-meta-actions.mjs", TI_PACK_EXPORTS['ti/mod/wn/obj-meta/m-obj-meta-actions.mjs']);
//========================================
// JOIN <m-obj-meta.json> ti/mod/wn/obj-meta/m-obj-meta.json
//========================================
Ti.Preload("ti/mod/wn/obj-meta/m-obj-meta.json", {
  "ancestors" : [], 
  "parent" : null, 
  "meta": null,
  "status" : {
    "changed"   : false,
    "saving"    : false,
    "reloading" : false
  },
  "fieldStatus" : {}
});
//========================================
// JOIN <m-obj-meta.mjs> ti/mod/wn/obj-meta/m-obj-meta.mjs
//========================================
Ti.Preload("ti/mod/wn/obj-meta/m-obj-meta.mjs", TI_PACK_EXPORTS['ti/mod/wn/obj-meta/m-obj-meta.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/wn/obj-meta/_mod.json
//========================================
Ti.Preload("ti/mod/wn/obj-meta/_mod.json", {
  "state" : "./m-obj-meta.json",
  "actions" : "./m-obj-meta-actions.mjs",
  "mixins" : "./m-obj-meta.mjs"
});
//========================================
// JOIN <m-session.json> ti/mod/wn/session/m-session.json
//========================================
Ti.Preload("ti/mod/wn/session/m-session.json", {
  "id"     : null,
  "grp"    : null,
  "du"     : -1,
  "expi"   : 0,
  "pwd"    : "~",
  "ticket" : null,
  "uid"    : null,
  "unm"    : null,
  "me"     : null,
  "envs"   : {}
});
//========================================
// JOIN <m-session.mjs> ti/mod/wn/session/m-session.mjs
//========================================
Ti.Preload("ti/mod/wn/session/m-session.mjs", TI_PACK_EXPORTS['ti/mod/wn/session/m-session.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/wn/session/_mod.json
//========================================
Ti.Preload("ti/mod/wn/session/_mod.json", {
  "state" : "./m-session.json",
  "mixins" : ["./m-session.mjs"]
});
//========================================
// JOIN <m-th-obj-actions.mjs> ti/mod/wn/th/obj/m-th-obj-actions.mjs
//========================================
Ti.Preload("ti/mod/wn/th/obj/m-th-obj-actions.mjs", TI_PACK_EXPORTS['ti/mod/wn/th/obj/m-th-obj-actions.mjs']);
//========================================
// JOIN <m-th-obj-cud.mjs> ti/mod/wn/th/obj/m-th-obj-cud.mjs
//========================================
Ti.Preload("ti/mod/wn/th/obj/m-th-obj-cud.mjs", TI_PACK_EXPORTS['ti/mod/wn/th/obj/m-th-obj-cud.mjs']);
//========================================
// JOIN <m-th-obj-datadir.mjs> ti/mod/wn/th/obj/m-th-obj-datadir.mjs
//========================================
Ti.Preload("ti/mod/wn/th/obj/m-th-obj-datadir.mjs", TI_PACK_EXPORTS['ti/mod/wn/th/obj/m-th-obj-datadir.mjs']);
//========================================
// JOIN <m-th-obj-mutations.mjs> ti/mod/wn/th/obj/m-th-obj-mutations.mjs
//========================================
Ti.Preload("ti/mod/wn/th/obj/m-th-obj-mutations.mjs", TI_PACK_EXPORTS['ti/mod/wn/th/obj/m-th-obj-mutations.mjs']);
//========================================
// JOIN <m-th-obj-search.mjs> ti/mod/wn/th/obj/m-th-obj-search.mjs
//========================================
Ti.Preload("ti/mod/wn/th/obj/m-th-obj-search.mjs", TI_PACK_EXPORTS['ti/mod/wn/th/obj/m-th-obj-search.mjs']);
//========================================
// JOIN <m-th-obj.json> ti/mod/wn/th/obj/m-th-obj.json
//========================================
Ti.Preload("ti/mod/wn/th/obj/m-th-obj.json", {
  "moduleName": "main",
  "pvg": {
    "remove": null,
    "create": null,
    "update": null,
    "save": null
  },
  "autoQueryList": true,
  "load": {},
  "view": null,
  "localBehaviorKeepAt": "->ThingSet-State-${thingSetId}",
  "localBehaviorIgnore": null,
  "schemaBehaviorIgnore": null,
  "exportSettings": {},
  "importSettings": {},
  "lbkAt": null,
  "lbkOff": false,
  "lbkIgnore": null,
  "schemaBeIgnore": null,
  "thingSetId": null,
  "oTs": null,
  "fixedMatch": {},
  "agg": {},
  "aggResult": {},
  "aggQuery": null,
  "aggAutoReload": false,
  "filter": {},
  "sorter": {
    "ct": -1
  },
  "thingObjKeys": null,
  "list": [],
  "currentId": null,
  "checkedIds": {},
  "pager": {
    "pn": 1,
    "pgsz": 20,
    "pgc": 0,
    "sum": 0,
    "skip": 0,
    "count": 0
  },
  "meta": null,
  "content": null,
  "__saved_content": null,
  "contentPath": [
    {
      "test": {
        "guiShown": {
          "content": true
        }
      },
      "path": "<self>"
    }
  ],
  "contentType": "<MIME>",
  "contentData": null,
  "dataHome": null,
  "dataDirName": null,
  "keepDataDirNameToLocal": true,
  "dataDirFiles": {
    "list": [],
    "pager": {
      "pn": 1,
      "pgsz": 50,
      "pgc": 0,
      "sum": 0,
      "skip": 0,
      "count": 0
    }
  },
  "dataDirCurrentId": null,
  "dataDirCheckedIds": {},
  "status": {
    "reloading": false,
    "doing": false,
    "saving": false,
    "deleting": false,
    "changed": false,
    "restoring": false,
    "hasChecked": false,
    "hasCurrent": true
  },
  "fieldStatus": {},
  "actionsPath": "thing-actions.json",
  "layoutPath": "thing-layout.json",
  "schemaPath": "thing-schema.json",
  "methodPaths": null,
  "guiShown": {},
  "thingActions": null,
  "layout": {},
  "schema": {},
  "thingMethods": {}
});
//========================================
// JOIN <m-th-obj.mjs> ti/mod/wn/th/obj/m-th-obj.mjs
//========================================
Ti.Preload("ti/mod/wn/th/obj/m-th-obj.mjs", TI_PACK_EXPORTS['ti/mod/wn/th/obj/m-th-obj.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/wn/th/obj/_mod.json
//========================================
Ti.Preload("ti/mod/wn/th/obj/_mod.json", {
  "name": "wn-th-obj",
  "namespaced": true,
  "state": "./m-th-obj.json",
  "mutations": "./m-th-obj-mutations.mjs",
  "actions": [
    "./m-th-obj-actions.mjs",
    "./m-th-obj-cud.mjs",
    "./m-th-obj-search.mjs",
    "./m-th-obj-datadir.mjs"
  ],
  "mixins": "./m-th-obj.mjs"
});
//========================================
// JOIN <m-thing-actions.mjs> ti/mod/wn/thing/m-thing-actions.mjs
//========================================
Ti.Preload("ti/mod/wn/thing/m-thing-actions.mjs", TI_PACK_EXPORTS['ti/mod/wn/thing/m-thing-actions.mjs']);
//========================================
// JOIN <m-thing-export.mjs> ti/mod/wn/thing/m-thing-export.mjs
//========================================
Ti.Preload("ti/mod/wn/thing/m-thing-export.mjs", TI_PACK_EXPORTS['ti/mod/wn/thing/m-thing-export.mjs']);
//========================================
// JOIN <m-thing-import.mjs> ti/mod/wn/thing/m-thing-import.mjs
//========================================
//========================================
// JOIN <m-thing.json> ti/mod/wn/thing/m-thing.json
//========================================
Ti.Preload("ti/mod/wn/thing/m-thing.json", {
  "meta": null,
  "moduleName": "main",
  "currentDataDir": null,
  "currentDataHome": null,
  "currentDataHomeObj": null,
  "fixedSchema": {},
  "autoSelect": false,
  "status": {
    "reloading": false,
    "doing": false,
    "saving": false,
    "deleting": false,
    "changed": false,
    "restoring": false,
    "cleaning": false,
    "inRecycleBin": false
  }
});
//========================================
// JOIN <m-thing.mjs> ti/mod/wn/thing/m-thing.mjs
//========================================
Ti.Preload("ti/mod/wn/thing/m-thing.mjs", TI_PACK_EXPORTS['ti/mod/wn/thing/m-thing.mjs']);
//========================================
// JOIN <m-thing-config-actions.mjs> ti/mod/wn/thing/mod/config/m-thing-config-actions.mjs
//========================================
Ti.Preload("ti/mod/wn/thing/mod/config/m-thing-config-actions.mjs", TI_PACK_EXPORTS['ti/mod/wn/thing/mod/config/m-thing-config-actions.mjs']);
//========================================
// JOIN <m-thing-config.json> ti/mod/wn/thing/mod/config/m-thing-config.json
//========================================
Ti.Preload("ti/mod/wn/thing/mod/config/m-thing-config.json", {
  "meta": null,
  "shown" : {
    "search"  : true,
    "meta"    : true,
    "content" : true,
    "files"   : false
  },
  "listOpen" : {
    "content" : true
  },
  "schema": {},
  "layout" : {
    "deskstop" : {},
    "tablet" : {},
    "phone" : {}
  },
  "actions" : [],
  "status" : {
    "reloading" : false,
    "saving"    : false
  }
});
//========================================
// JOIN <m-thing-config.mjs> ti/mod/wn/thing/mod/config/m-thing-config.mjs
//========================================
Ti.Preload("ti/mod/wn/thing/mod/config/m-thing-config.mjs", TI_PACK_EXPORTS['ti/mod/wn/thing/mod/config/m-thing-config.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/wn/thing/mod/config/_mod.json
//========================================
Ti.Preload("ti/mod/wn/thing/mod/config/_mod.json", {
  "namespaced" : true,
  "state" : "./m-thing-config.json",
  "actions" : "./m-thing-config-actions.mjs",
  "mixins" : "./m-thing-config.mjs"
});
//========================================
// JOIN <m-thing-current-actions.mjs> ti/mod/wn/thing/mod/current/m-thing-current-actions.mjs
//========================================
Ti.Preload("ti/mod/wn/thing/mod/current/m-thing-current-actions.mjs", TI_PACK_EXPORTS['ti/mod/wn/thing/mod/current/m-thing-current-actions.mjs']);
//========================================
// JOIN <m-thing-current.json> ti/mod/wn/thing/mod/current/m-thing-current.json
//========================================
Ti.Preload("ti/mod/wn/thing/mod/current/m-thing-current.json", {
  "meta": null,
  "thingSetId": null,
  "content": null,
  "data": null,
  "__saved_content": null,
  "status": {
    "changed": false,
    "saving": false,
    "reloading": false,
    "publishing": false
  },
  "fieldStatus": {}
});
//========================================
// JOIN <m-thing-current.mjs> ti/mod/wn/thing/mod/current/m-thing-current.mjs
//========================================
Ti.Preload("ti/mod/wn/thing/mod/current/m-thing-current.mjs", TI_PACK_EXPORTS['ti/mod/wn/thing/mod/current/m-thing-current.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/wn/thing/mod/current/_mod.json
//========================================
Ti.Preload("ti/mod/wn/thing/mod/current/_mod.json", {
  "namespaced" : true,
  "state" : "./m-thing-current.json",
  "actions" : "./m-thing-current-actions.mjs",
  "mixins" : "./m-thing-current.mjs"
});
//========================================
// JOIN <m-thing-search-actions.mjs> ti/mod/wn/thing/mod/search/m-thing-search-actions.mjs
//========================================
Ti.Preload("ti/mod/wn/thing/mod/search/m-thing-search-actions.mjs", TI_PACK_EXPORTS['ti/mod/wn/thing/mod/search/m-thing-search-actions.mjs']);
//========================================
// JOIN <m-thing-search.json> ti/mod/wn/thing/mod/search/m-thing-search.json
//========================================
Ti.Preload("ti/mod/wn/thing/mod/search/m-thing-search.json", {
  "meta": null,
  "fixedMatch": {},
  "majorKey": null,
  "defaultKey": "nm",
  "keyword": {
    "=id": "^[\\d\\w]{26}(:[\\d\\w]{26})?$",
    "title": "^.+"
  },
  "filter": {},
  "sorter": {
    "ct": -1
  },
  "inRecycleBin": false,
  "pager": {
    "pn": 1,
    "pgsz": 50,
    "pgc": 0,
    "sum": 0,
    "skip": 0,
    "count": 0
  },
  "showKeys": null,
  "count": 0,
  "currentId": null,
  "checkedIds": [],
  "list": [],
  "status": {
    "reloading": false,
    "saving": false,
    "deleting": false
  }
});
//========================================
// JOIN <m-thing-search.mjs> ti/mod/wn/thing/mod/search/m-thing-search.mjs
//========================================
Ti.Preload("ti/mod/wn/thing/mod/search/m-thing-search.mjs", TI_PACK_EXPORTS['ti/mod/wn/thing/mod/search/m-thing-search.mjs']);
//========================================
// JOIN <_mod.json> ti/mod/wn/thing/mod/search/_mod.json
//========================================
Ti.Preload("ti/mod/wn/thing/mod/search/_mod.json", {
  "namespaced" : true,
  "state" : "./m-thing-search.json",
  "actions" : "./m-thing-search-actions.mjs",
  "mixins" : "./m-thing-search.mjs"
});
//========================================
// JOIN <_mod.json> ti/mod/wn/thing/_mod.json
//========================================
Ti.Preload("ti/mod/wn/thing/_mod.json", {
  "name" : "wn-thing",
  "namespaced" : true,
  "state" : "./m-thing.json",
  "actions" : [
    "./m-thing-actions.mjs",
    "./m-thing-import.mjs",
    "./m-thing-export.mjs"
  ],
  "mixins" : "./m-thing.mjs",
  "modules" : {
    "config" : "./mod/config",
    "search" : "./mod/search",
    "current" : "./mod/current"
  }
});
//========================================
// JOIN <site-main.html> ti/lib/www/com/site-main.html
//========================================
Ti.Preload("ti/lib/www/com/site-main.html", `<div class="site-main"
  :class="TopClass" 
  @click.right="OnMouseRightClick">
  <ti-gui 
    class="site-page"
    v-bind="PageGUI"
    :can-loading="true"
    :loading="loading"
    :shown="PageShown"/>
  <!--pre>{{page}}</pre-->
</div>`);
//========================================
// JOIN <site-main.mjs> ti/lib/www/com/site-main.mjs
//========================================
Ti.Preload("ti/lib/www/com/site-main.mjs", TI_PACK_EXPORTS['ti/lib/www/com/site-main.mjs']);
//========================================
// JOIN <mod-address-actions.mjs> ti/lib/www/mod/auth/mod-address-actions.mjs
//========================================
Ti.Preload("ti/lib/www/mod/auth/mod-address-actions.mjs", TI_PACK_EXPORTS['ti/lib/www/mod/auth/mod-address-actions.mjs']);
//========================================
// JOIN <mod-auth-actions.mjs> ti/lib/www/mod/auth/mod-auth-actions.mjs
//========================================
Ti.Preload("ti/lib/www/mod/auth/mod-auth-actions.mjs", TI_PACK_EXPORTS['ti/lib/www/mod/auth/mod-auth-actions.mjs']);
//========================================
// JOIN <mod-profile-actions.mjs> ti/lib/www/mod/auth/mod-profile-actions.mjs
//========================================
Ti.Preload("ti/lib/www/mod/auth/mod-profile-actions.mjs", TI_PACK_EXPORTS['ti/lib/www/mod/auth/mod-profile-actions.mjs']);
//========================================
// JOIN <www-mod-auth.json> ti/lib/www/mod/auth/www-mod-auth.json
//========================================
Ti.Preload("ti/lib/www/mod/auth/www-mod-auth.json", {
  "ticket" : null,
  "expi"   : 0,
  "me"     : null,
  "profile": null,
  "countries"  : null,
  "countryMap" : null,
  "addresses": [],
  "defaultAddr": null,
  "paths"  : {
    "checkme"         : "auth/checkme",
    "login_by_wxcode" : "auth/login_by_wxcode",
    "login_by_phone"  : "auth/login_by_phone",
    "login_by_email"  : "auth/login_by_email",
    "login_by_passwd" : "auth/login_by_passwd",
    "bind_phone"      : "auth/bind_account",
    "bind_email"      : "auth/bind_account",
    "get_sms_vcode"   : "auth/get_sms_vcode",
    "get_email_vcode" : "auth/get_email_vcode",
    "check_name"      : "auth/check_name",
    "check_phone"     : "auth/check_phone",
    "logout"          : "auth/logout",
    "resetpasswd"     : "auth/resetpasswd",
    "countries"       : "lbs/countries",
    "addr_mine"       : "address/mine",
    "addr_create"     : "address/create",
    "addr_update"     : "address/update",
    "addr_delete"     : "address/delete",
    "profile_save"    : "auth/setme"
  }
});
//========================================
// JOIN <www-mod-auth.mjs> ti/lib/www/mod/auth/www-mod-auth.mjs
//========================================
Ti.Preload("ti/lib/www/mod/auth/www-mod-auth.mjs", TI_PACK_EXPORTS['ti/lib/www/mod/auth/www-mod-auth.mjs']);
//========================================
// JOIN <_mod.json> ti/lib/www/mod/auth/_mod.json
//========================================
Ti.Preload("ti/lib/www/mod/auth/_mod.json", {
  "name" : "www-mod-auth",
  "namespaced" : true,
  "state" : "./www-mod-auth.json",
  "actions": [
      "./mod-auth-actions.mjs",
      "./mod-address-actions.mjs",
      "./mod-profile-actions.mjs"
    ],
  "mixins" : "./www-mod-auth.mjs"
});
//========================================
// JOIN <www-mod-page.json> ti/lib/www/mod/page/www-mod-page.json
//========================================
Ti.Preload("ti/lib/www/mod/page/www-mod-page.json", {
  "className": null,
  "title": null,
  "name": null,
  "href": null,
  "path": null,
  "pageUri": null,
  "pageUriWithParams": true,
  "pageAnchorTo": null,
  "ready": 0,
  "finger": null,
  "params": {},
  "anchor": null,
  "dynamicPreloads": {},
  "apis": {},
  "moduleNames": [],
  "wxJsApiList": [
    "+"
  ],
  "data": {},
  "gui": {
    "flex": "nil",
    "overflow": "none"
  },
  "activeElement": null,
  "contextMenu": true,
  "forbidCopy": false,
  "explainDataKey": [],
  "layout": {
    "desktop": {},
    "tablet": "desktop",
    "phone": "desktop"
  },
  "shown": {},
  "schema": {},
  "actions": {}
});
//========================================
// JOIN <www-mod-page.mjs> ti/lib/www/mod/page/www-mod-page.mjs
//========================================
Ti.Preload("ti/lib/www/mod/page/www-mod-page.mjs", TI_PACK_EXPORTS['ti/lib/www/mod/page/www-mod-page.mjs']);
//========================================
// JOIN <_mod.json> ti/lib/www/mod/page/_mod.json
//========================================
Ti.Preload("ti/lib/www/mod/page/_mod.json", {
  "name" : "www-mod-page",
  "namespaced" : true,
  "state" : "./www-mod-page.json",
  "mixins" : "./www-mod-page.mjs"
});
//========================================
// JOIN <www-mod-shop.json> ti/lib/www/mod/shop/www-mod-shop.json
//========================================
Ti.Preload("ti/lib/www/mod/shop/www-mod-shop.json", {
  "basket" : [],

  "payment" : null,

  "paths"  : {
    "buyIt"     : "entity/buy/it",
    "buyRemove" : "entity/buy/rm",
    "buyGetAll" : "entity/buy/all",
    "buyClean"  : "entity/buy/clean",
    "objs" : "objs",
    "buy"  : "pay/buy",
    "pay"  : "pay/pay",
    "checkOrder": "pay/check",
    "fetchOrder": "pay/order"
  }
});
//========================================
// JOIN <www-mod-shop.mjs> ti/lib/www/mod/shop/www-mod-shop.mjs
//========================================
Ti.Preload("ti/lib/www/mod/shop/www-mod-shop.mjs", TI_PACK_EXPORTS['ti/lib/www/mod/shop/www-mod-shop.mjs']);
//========================================
// JOIN <_mod.json> ti/lib/www/mod/shop/_mod.json
//========================================
Ti.Preload("ti/lib/www/mod/shop/_mod.json", {
  "name" : "www-mod-shop",
  "namespaced" : true,
  "state" : "./www-mod-shop.json",
  "mixins" : "./www-mod-shop.mjs"
});
//========================================
// JOIN <www-mod-site.mjs> ti/lib/www/mod/www-mod-site.mjs
//========================================
Ti.Preload("ti/lib/www/mod/www-mod-site.mjs", TI_PACK_EXPORTS['ti/lib/www/mod/www-mod-site.mjs']);
//========================================
// JOIN <layout.json> /a/load/wn.manager/gui/layout.json
//========================================
Ti.Preload("/a/load/wn.manager/gui/layout.json", {
  "desktop": {
    "type": "rows",
    "border": true,
    "blocks": [
      {
        "name": "sky",
        "size": 48,
        "type": "cols",
        "adjustable": false,
        "blocks": [
          {
            "name": "logo",
            "size": "auto",
            "body": "pcSkyLogo"
          },
          {
            "name": "title",
            "size": "stretch",
            "body": "pcSkyTitle"
          },
          {
            "name": "session",
            "size": "auto",
            "body": "pcSkySession"
          },
          {
            "name": "menu",
            "size": "auto",
            "body": "pcSkyMenu"
          }
        ]
      },
      {
        "name": "main",
        "size": "100px",
        "flex": "both",
        "type": "cols",
        "border": true,
        "keepCustomizedTo": "WnManager-Main-Sidebar-ColSizes",
        "blocks": [
          {
            "name": "sidebar",
            "size": "1.8rem",
            "body": "pcMainSideBar"
          },
          {
            "name": "arena",
            "size": "stretch",
            "body": "pcMainArena"
          }
        ]
      },
      {
        "name": "footer",
        "size": ".32rem",
        "body": "pcFooter"
      }
    ]
  },
  "tablet": "desktop",
  "phone": "desktop"
});
//========================================
// JOIN <schema.json> /a/load/wn.manager/gui/schema.json
//========================================
Ti.Preload("/a/load/wn.manager/gui/schema.json", {
  "pcSkyLogo": {
    "comType": "ti-icon",
    "comConf": {
      "width": "3em",
      "fontSize": "1.5em",
      "value": "=Logo"
    }
  },
  "pcSkyTitle": {
    "comType": "ti-crumb",
    "comConf": "=Crumb"
  },
  "pcSkySession": {
    "comType": "wn-session-badge",
    "comConf": "=SessionBadge"
  },
  "pcSkyMenu": {
    "comType": "ti-actionbar",
    "comConf": "=ActionMenu"
  },
  "pcMainSideBar": {
    "comType": "wn-gui-side-nav",
    "comConf": {
      "statusStoreKey": "=sidebarStatusStoreKey",
      "items": "=sidebar",
      "highlightItemId": "=MetaId",
      "highlightItemPath": "=MetaPath"
    }
  },
  "pcMainArena": {
    "comType": "=comType",
    "comConf": "=Arena"
  },
  "pcFooter": {
    "comType": "wn-gui-footer",
    "comConf": "=Footer"
  }
});
//========================================
// JOIN <setup.json> /a/load/wn.manager/gui/setup.json
//========================================
Ti.Preload("/a/load/wn.manager/gui/setup.json", {
  "shown": {
    "desktop": {
      "logo": "==Logo",
      "session": "==SessionBadge"
    },
    "tablet": {},
    "phone": {}
  },
  "canLoading": true,
  "loadingAs": {},
  "firstCrumbIndex": 1,
  "crumbTitleBy": "title",
  "logo": "<:home>",
  "listViewType": "wall"
});
//========================================
// JOIN <wn-manager-computed.mjs> /a/load/wn.manager/wn-manager-computed.mjs
//========================================
Ti.Preload("/a/load/wn.manager/wn-manager-computed.mjs", TI_PACK_EXPORTS['/a/load/wn.manager/wn-manager-computed.mjs']);
//========================================
// JOIN <wn-manager-methods.mjs> /a/load/wn.manager/wn-manager-methods.mjs
//========================================
Ti.Preload("/a/load/wn.manager/wn-manager-methods.mjs", TI_PACK_EXPORTS['/a/load/wn.manager/wn-manager-methods.mjs']);
//========================================
// JOIN <wn-manager.html> /a/load/wn.manager/wn-manager.html
//========================================
Ti.Preload("/a/load/wn.manager/wn-manager.html", `<ti-gui
  class="wn-manager"
  :class="TopClass"
  :layout="GuiLayout"
  :schema="GuiSchema"
  :shown="GuiShown"
  :can-loading="GuiCanLoading"
  :loading-as="GuiLoadingAs"
  :loading="isGuiLoading"
  @sky::menu::update:me:vars="OnUpdateMyVars"
  @do:logout="OnLogout"
  @item:active="OnCurrentMetaChange"
  @open:wn:obj="OnCurrentMetaChange"
  @arena::change="OnCurrentDataChange"
  @listviewtype:change="OnArenaListViewTypeChange"
  @arena::actions:update="OnUpdateActions"
  @arena::update:view:status="OnArenaViewStatusUpdated"/>`);
//========================================
// JOIN <wn-manager.mjs> /a/load/wn.manager/wn-manager.mjs
//========================================
Ti.Preload("/a/load/wn.manager/wn-manager.mjs", TI_PACK_EXPORTS['/a/load/wn.manager/wn-manager.mjs']);
//========================================
// JOIN <hmaker.i18n.json> ti/i18n/en-uk/hmaker.i18n.json
//========================================
Ti.Preload("ti/i18n/en-uk/hmaker.i18n.json", {
  "am-and": " and ",
  "am-blank": " is blank",
  "am-boolFalse": " is false",
  "am-boolTrue": " is true",
  "am-empty": " is empty",
  "am-equals": " equal to ${val}",
  "am-equalsIgnoreCase": " equal ignore case to \"${val}\"",
  "am-equalsType": " type equal to \"${val}\"",
  "am-exists": " has '${val}'",
  "am-findInArray": " contains a object [${val}]",
  "am-gt": " greater than ${val}",
  "am-gte": " greater than or equal to ${val}",
  "am-lt": " less than ${val}",
  "am-lte": " less than or equal to ${val}",
  "am-matchOf": " is matched with '${val}'",
  "am-must-false": " must be false",
  "am-must-true": " must be true",
  "am-nil": " is nil",
  "am-nilOf": " field ${val} is nil",
  "am-noexists": " not exists '${val}'",
  "am-not": " NOT ",
  "am-not-sure": "not sure",
  "am-notEquals": "not equals with ${val} ",
  "am-notMatchOf": "unmatch '${FFFval}'",
  "am-notNil": " not null",
  "am-notNilOf": " field ${val} is NOT null",
  "am-null": " is null",
  "am-nullOf": " field ${val} is null",
  "am-or": " or ",
  "am-undefined": " is undefined",
  "am-undefinedOf": "Field ${val} is undefined",
  "com-form": "Form",
  "com-label": "Label",
  "com-list": "list",
  "hm-am-add": "Add condition",
  "hm-am-empty": "Consition unset",
  "hm-args": "Arguments",
  "hm-args-partial": "Arg partial",
  "hm-args-partial-left": "Partial Left",
  "hm-args-partial-right": "Partial Right",
  "hm-form-options-other-dftval": "Other default",
  "hm-form-options-other-enabled": "Show Other",
  "hm-form-options-other-ph": "Other tip",
  "hm-form-options-other-ph-ph": "Enter other options",
  "hm-form-options-other-text": "Other Text",
  "hm-form-options-other-width": "Other width",
  "hm-type-Array": "Array",
  "hm-type-Boolean": "Boolean",
  "hm-type-Group": "Group",
  "hm-type-Integer": "Integer",
  "hm-type-Number": "Number",
  "hm-type-Object": "Object",
  "hm-type-String": "String",
  "hm-type-icons": {
    "Array": "Zmdi-format-list-bulleted",
    "Boolean": "Zmdi-toll",
    "Group": "Zmdi-collection-bookmark",
    "Integer": "Zmdi-n-6-square",
    "Number": "Zmdi-input-svideo",
    "Object": "Zmdi-toys",
    "String": "Zmdi-translate"
  },
  "hmaker-com-conf-blank": "请选择一个控件设置其详情",
  "hmaker-com-type-blank": "选择一个控件",
  "hmaker-edit-form-del-group-all": "组以及全部字段",
  "hmaker-edit-form-del-group-confirm": "您是要删除组以及其内的全部字段，还是仅是组？",
  "hmaker-edit-form-del-group-only": "仅是组",
  "hmaker-edit-form-field-nil": "请选择一个字段编辑详情",
  "hmaker-edit-form-new-field": "新字段",
  "hmaker-edit-form-new-field-e0": "字段名不能以数字开头，内容只能为小写英文字母数字和下划线",
  "hmaker-edit-form-new-field-e1": "字段【${val}】已存在，请另选一个名称",
  "hmaker-edit-form-new-field-tip": "请输入新字段名（只能为小写英文字母数字和下划线）",
  "hmaker-edit-form-new-group": "新分组",
  "hmaker-edit-form-new-group-tip": "请输入新分组名",
  "hmaker-edit-form-nil-field": "请先选择一个字段",
  "hmaker-edit-form-not-current": "请选择一个字段或者字段组",
  "hmaker-nav-blank-item": "请选择一个导航项目编辑",
  "hmaker-nav-k-display": "链接显示内容",
  "hmaker-nav-k-icon": "链接图标",
  "hmaker-nav-k-title": "链接文字",
  "hmaker-nav-k-type": "链接类型",
  "hmaker-nav-k-value": "链接目标",
  "hmaker-nav-tp-dispatch": "方法调用",
  "hmaker-nav-tp-href": "外部链接",
  "hmaker-nav-tp-page": "站点页面",
  "hmaker-site-k-apiBase": "接口路径",
  "hmaker-site-k-base": "资源路径",
  "hmaker-site-k-captcha": "验证码路径",
  "hmaker-site-k-domain": "所属域",
  "hmaker-site-k-entry": "着陆页",
  "hmaker-site-prop": "站点属性",
  "hmaker-site-state": "站点全局配置",
  "hmaker-site-state-actions": "全局动作表",
  "hmaker-site-state-apis": "接口集",
  "hmaker-site-state-blocks": "预定义布局",
  "hmaker-site-state-general": "通用配置",
  "hmaker-site-state-nav": "全局导航条",
  "hmaker-site-state-router": "页面路由",
  "hmaker-site-state-schema": "预定义控件",
  "hmaker-site-state-utils": "扩展函数",
  "hmaker-site-tree": "站点结构",
  "hmaker-site-tree-loading": "正在加载站点结构...",
  "hmk-adjustDelay": "调整延迟",
  "hmk-album-autofit": "Auto fit width",
  "hmk-album-clrsz": "Clear album size",
  "hmk-album-id": "Album ID",
  "hmk-album-info": "Album information",
  "hmk-album-list-mode": "List Mode",
  "hmk-album-margin": "Album margin",
  "hmk-album-name": "Album name",
  "hmk-album-prop": "Album prop",
  "hmk-album-refresh": "Reload album",
  "hmk-aspect": "外观",
  "hmk-aspect-more": "Aspect",
  "hmk-autoI18n": "国际化",
  "hmk-autofit": "Auto fit width",
  "hmk-autoscale": "Auto scale",
  "hmk-behavior": "行为",
  "hmk-blankAs": "空白样式",
  "hmk-breakLine": "维持换行",
  "hmk-class-at": "Position",
  "hmk-class-at-bottom": "Bottom",
  "hmk-class-at-bottom-left": "Left bottom",
  "hmk-class-at-bottom-right": "Right bottom",
  "hmk-class-at-center": "Center",
  "hmk-class-at-left": "Left",
  "hmk-class-at-right": "Right",
  "hmk-class-at-top": "Top",
  "hmk-class-at-top-left": "Left top",
  "hmk-class-at-top-right": "Right top",
  "hmk-class-flex": "Flex",
  "hmk-class-flex-both": "Both",
  "hmk-class-flex-grow": "Grow",
  "hmk-class-flex-none": "None",
  "hmk-class-flex-shrink": "Shrink",
  "hmk-class-font-size": "Font Size",
  "hmk-class-hover": "Hover effect",
  "hmk-class-hover-to-scale": "Hover Scale",
  "hmk-class-hover-to-up": "Hover Up",
  "hmk-class-hover-to-zoom": "Hover Zoom",
  "hmk-class-item-margin": "Item margin",
  "hmk-class-item-padding": "Item padding",
  "hmk-class-item-space": "Item space",
  "hmk-class-object-fit": "Object fit",
  "hmk-class-object-fit-contain": "Contain",
  "hmk-class-object-fit-cover": "Cover",
  "hmk-class-object-fit-fill": "Fill",
  "hmk-class-object-fit-none": "None",
  "hmk-class-pick": "Edit class selector",
  "hmk-class-sz-lg": "LG",
  "hmk-class-sz-md": "MD",
  "hmk-class-sz-no": "None",
  "hmk-class-sz-sm": "SM",
  "hmk-class-sz-xl": "XL",
  "hmk-class-sz-xs": "XS",
  "hmk-class-text": "Text",
  "hmk-class-text-at": "Text at",
  "hmk-class-text-in": "Inside",
  "hmk-class-text-mode": "Text mode",
  "hmk-class-text-out": "Outside",
  "hmk-class-text-side": "Text side",
  "hmk-class-text-style": "Text style",
  "hmk-class-text-wrap": "Text wrap",
  "hmk-class-text-wrap-auto": "Auto",
  "hmk-class-text-wrap-clip": "Clip",
  "hmk-class-text-wrap-ellipsis": "Ellipsis",
  "hmk-class-title-wrap": "Title wrap",
  "hmk-class-ts-mask": "Mask",
  "hmk-class-ts-shadow": "Shadow",
  "hmk-class-word-break-all": "Break All",
  "hmk-class-word-break-word": "Break Word",
  "hmk-class-word-keep-all": "Keep All",
  "hmk-config-choose": "Choose configuration",
  "hmk-config-nil": "Fail to found configuration",
  "hmk-css-align-center": "Center",
  "hmk-css-align-justify": "Justify",
  "hmk-css-align-left": "Left",
  "hmk-css-align-right": "Right",
  "hmk-css-background": "Background",
  "hmk-css-background-color": "Bg Color",
  "hmk-css-background-image": "Bg Image",
  "hmk-css-background-position": "Bg Pos.",
  "hmk-css-background-position-x": "Bg Pos X",
  "hmk-css-background-position-y": "Bg Pos Y",
  "hmk-css-background-repeat": "Bg Repeat",
  "hmk-css-background-repeat-no": "No repeat",
  "hmk-css-background-repeat-round": "Round",
  "hmk-css-background-repeat-space": "Space",
  "hmk-css-background-repeat-x": "Repeat X",
  "hmk-css-background-repeat-y": "Repeat Y",
  "hmk-css-background-repeat-yes": "Repeat",
  "hmk-css-background-size": "Bg Size",
  "hmk-css-background-size-auto": "Auto",
  "hmk-css-background-size-contain": "Contain",
  "hmk-css-background-size-cover": "Cover",
  "hmk-css-background-size-full": "Full",
  "hmk-css-border": "Border",
  "hmk-css-border-radius": "Radius",
  "hmk-css-box-shadow": "Box shadow",
  "hmk-css-c-auto": "auto",
  "hmk-css-color": "Color",
  "hmk-css-edit": "Edit css",
  "hmk-css-float": "Float",
  "hmk-css-float-left": "Left",
  "hmk-css-float-none": "None",
  "hmk-css-float-right": "Right",
  "hmk-css-font-size": "Font size",
  "hmk-css-font-weight": "Font Weight",
  "hmk-css-g-inherit": "inherit",
  "hmk-css-g-initial": "initial",
  "hmk-css-g-unset": "unset",
  "hmk-css-grp-aspect": "Aspect setup",
  "hmk-css-grp-background": "Background setup",
  "hmk-css-grp-measure": "Measure setup",
  "hmk-css-grp-texting": "Text setup",
  "hmk-css-height": "Height",
  "hmk-css-letter-spacing": "Letter space",
  "hmk-css-line-height": "Line height",
  "hmk-css-margin": "Margin",
  "hmk-css-max-height": "Max height",
  "hmk-css-max-width": "Max width",
  "hmk-css-min-height": "Min height",
  "hmk-css-min-width": "Min width",
  "hmk-css-object-fit": "Obj fit",
  "hmk-css-object-fit-contain": "Contain",
  "hmk-css-object-fit-cover": "Cover",
  "hmk-css-object-fit-fill": "Fill",
  "hmk-css-object-fit-none": "None",
  "hmk-css-object-fit-scale-down": "Scale",
  "hmk-css-object-position": "Obj pos",
  "hmk-css-opacity": "Opacity",
  "hmk-css-overflow": "Overflow",
  "hmk-css-overflow-clip": "clip",
  "hmk-css-overflow-hidden": "hidden",
  "hmk-css-overflow-scroll": "scroll",
  "hmk-css-overflow-visible": "visible",
  "hmk-css-padding": "Padding",
  "hmk-css-text-align": "Text align",
  "hmk-css-text-overflow": "Text overflow",
  "hmk-css-text-overflow-clip": "Clip",
  "hmk-css-text-overflow-ellipsis": "Ellipsis",
  "hmk-css-text-shadow": "Text shadow",
  "hmk-css-text-transform": "Text trans",
  "hmk-css-text-transform-capitalize": "Cap",
  "hmk-css-text-transform-lowercase": "Lower",
  "hmk-css-text-transform-none": "None",
  "hmk-css-text-transform-uppercase": "Upper",
  "hmk-css-white-space": "Word wrap",
  "hmk-css-white-space-break-space": "Keep primary and wrap (except space)",
  "hmk-css-white-space-normal": "Normal",
  "hmk-css-white-space-nowrap": "No wrap",
  "hmk-css-white-space-pre": "Keep primary",
  "hmk-css-white-space-pre-line": "Keep primary and wrap by line",
  "hmk-css-white-space-pre-wrap": "Keep primary and wrap",
  "hmk-css-width": "Width",
  "hmk-currentTab": "Current tab",
  "hmk-data": "Data",
  "hmk-dict": "Dictionary",
  "hmk-editable": "Editable",
  "hmk-fb-album-autofit": "Facebook album auto fit width",
  "hmk-fb-album-clrsz": "Clear facebook album size",
  "hmk-fb-album-id": "Facebook album ID",
  "hmk-fb-album-info": "Facebook album info",
  "hmk-fb-album-margin": "Facebook album margin",
  "hmk-fb-album-name": "Facebook album name",
  "hmk-fb-album-prop": "Facebook album prop",
  "hmk-fb-album-refresh": "Reload Facebook album",
  "hmk-field-checkEquals": "检查相等",
  "hmk-field-com": "编辑控件",
  "hmk-field-defaultAs": "默认值",
  "hmk-field-disabled": "失效条件",
  "hmk-field-height": "高度",
  "hmk-field-hidden": "隐藏条件",
  "hmk-field-icon": "图标",
  "hmk-field-name": "键名",
  "hmk-field-serializer": "自定义保存",
  "hmk-field-tip": "提示说明",
  "hmk-field-title": "显示名",
  "hmk-field-transformer": "自定义转换",
  "hmk-field-type": "类型",
  "hmk-field-width": "宽度",
  "hmk-fieldStatus": "字段状态",
  "hmk-fields": "字段",
  "hmk-fields-advance": "高级",
  "hmk-fields-general": "基本",
  "hmk-float": "Float",
  "hmk-float-clear": "Clear float",
  "hmk-float-left": "Float left",
  "hmk-float-none": "Float none",
  "hmk-float-right": "Float right",
  "hmk-form-data": "Data",
  "hmk-form-height": "Form height",
  "hmk-form-onlyFields": "Fields only",
  "hmk-form-width": "Form width",
  "hmk-format": "Format",
  "hmk-height": "Height",
  "hmk-href": "Link",
  "hmk-icon": "Form icon",
  "hmk-layout-cols": "Columns",
  "hmk-layout-falls": "Falls",
  "hmk-layout-rows": "Rows",
  "hmk-layout-tabs": "Tabs",
  "hmk-layout-wall": "Wall",
  "hmk-margin-center": "Margin center",
  "hmk-margin-lg": "Large margin",
  "hmk-margin-md": "Middle margin",
  "hmk-margin-no": "No margin",
  "hmk-margin-sm": "Small margin",
  "hmk-measure": "Measure",
  "hmk-mode": "Display mode",
  "hmk-mode-all": "All",
  "hmk-mode-tab": "Tab",
  "hmk-newTab": "New tab",
  "hmk-placeholder": "Placeholder",
  "hmk-prefixIcon": "Prefix icon",
  "hmk-prefixText": "Prefix text",
  "hmk-size": "Size",
  "hmk-spacing": "Spacing",
  "hmk-spacing-comfy": "Comfy",
  "hmk-spacing-tiny": "Tiny",
  "hmk-style-adv": "Adv style",
  "hmk-style-brief": "Brief style",
  "hmk-style-exlink": "Ex-Link",
  "hmk-style-image": "Image style",
  "hmk-style-inside": "Inner style",
  "hmk-style-outside": "Outer style",
  "hmk-style-part-left": "Left part",
  "hmk-style-part-right": "Right part",
  "hmk-style-tile": "Tile style",
  "hmk-style-title": "Title style",
  "hmk-suffixIcon": "Suffix icon",
  "hmk-suffixText": "Suffix text",
  "hmk-tabAt": "Tab at",
  "hmk-tabAt-bottom-center": "Bottom Center",
  "hmk-tabAt-bottom-left": "Bottom Left",
  "hmk-tabAt-bottom-right": "Bottom Right",
  "hmk-tabAt-top-center": "Top Center",
  "hmk-tabAt-top-left": "Top Left",
  "hmk-tabAt-top-right": "Top Right",
  "hmk-title": "Form title",
  "hmk-trimed": "Trimed",
  "hmk-value": "Value",
  "hmk-valueMaxWidth": "Val Max-W",
  "hmk-w-edit-album-autoopen": "Auto open",
  "hmk-w-edit-album-fullpreview": "Full screen",
  "hmk-w-edit-album-prop": "Edit album properties",
  "hmk-w-edit-alt-style": "Alt style",
  "hmk-w-edit-attachment": "Attachment",
  "hmk-w-edit-attachment-clrsz": "Clear attachment size",
  "hmk-w-edit-attachment-margin": "Attachment margin",
  "hmk-w-edit-attachment-prop": "Attachment prop",
  "hmk-w-edit-audio-clrsz": "Clear audio size",
  "hmk-w-edit-audio-margin": "Audio margin",
  "hmk-w-edit-audio-prop": "Audio properties",
  "hmk-w-edit-fb-album-prop": "Edit facebook album properties",
  "hmk-w-edit-img-clrsz": "Clear image size",
  "hmk-w-edit-img-info": "Image info",
  "hmk-w-edit-img-link": "Image Link",
  "hmk-w-edit-img-link-tip": "Such as: http://xxxx",
  "hmk-w-edit-img-margin": "Image magin",
  "hmk-w-edit-img-newtab": "Newtab",
  "hmk-w-edit-img-pic": "Picture",
  "hmk-w-edit-img-prop": "Image prop",
  "hmk-w-edit-img-style": "Edit image style",
  "hmk-w-edit-img-title": "Image title",
  "hmk-w-edit-img-title-tip": "Please enter image title",
  "hmk-w-edit-video-clrsz": "Clear video size",
  "hmk-w-edit-video-margin": "Video margin",
  "hmk-w-edit-video-prop": "Video prop",
  "hmk-w-edit-yt-playlist": "Edit playlist properties",
  "hmk-w-edit-yt-video": "Edit Youtube video proerties",
  "hmk-w-edit-yt-video-features": "Video features",
  "hmk-width": "Width",
  "hmk-yt-playlist-autofit": "YT playlist auto fit width",
  "hmk-yt-playlist-clrsz": "Clear YT playlist size",
  "hmk-yt-playlist-id": "Playlist ID",
  "hmk-yt-playlist-info": "YT playlist info",
  "hmk-yt-playlist-margin": "YT playlist margin",
  "hmk-yt-playlist-name": "Playlist name",
  "hmk-yt-playlist-prop": "YT playlist prop",
  "hmk-yt-playlist-refresh": "Reload YT playlist",
  "hmr-add-action": "Add New Action",
  "hmr-add-react-item": "Add React Item",
  "hmr-t-exec": "Run Script",
  "hmr-t-jsc": "Run JS",
  "hmr-t-obj_clear": "Clear Obj",
  "hmr-t-obj_create": "Create Obj",
  "hmr-t-obj_delete": "Delete Obj",
  "hmr-t-obj_update": "Update Obj",
  "hmr-t-thing_clear": "Clear Thing",
  "hmr-t-thing_create": "Create Thing",
  "hmr-t-thing_delete": "Delete Thing",
  "hmr-t-thing_update": "Update Thing",
  "react-action-add": "Add Action",
  "react-action-empty": "No action items defined",
  "vt-Array": "Array",
  "vt-BoolVar": "Bool Var",
  "vt-Boolean": "Boolean",
  "vt-Function": "Function",
  "vt-GetVar": "Get Var",
  "vt-Invoking": "Invoking",
  "vt-Null": "Null",
  "vt-Number": "Number",
  "vt-Object": "Object",
  "vt-String": "String",
  "vt-Tmpl": "Template",
  "vt-Undefined": "Undefined"
});
//========================================
// JOIN <ti-datetime.i18n.json> ti/i18n/en-uk/ti-datetime.i18n.json
//========================================
Ti.Preload("ti/i18n/en-uk/ti-datetime.i18n.json", {
  "Apr": "April",
  "Aug": "August",
  "Dec": "December",
  "Feb": "February",
  "Fri": "Fri",
  "Friday": "Friday",
  "Jan": "January",
  "Jul": "July",
  "Jun": "June",
  "Mar": "March",
  "May": "May",
  "Mon": "Mon",
  "Monday": "Monday",
  "Nov": "November",
  "Oct": "October",
  "Sat": "Sat",
  "Saturday": "Saturday",
  "Sep": "September",
  "Sun": "Sun",
  "Sunday": "Sunday",
  "Thu": "Thu",
  "Thursday": "Thursday",
  "Tue": "Tue",
  "Tuesday": "Tuesday",
  "Wed": "Wed",
  "Wednesday": "Wednesday",
  "blank-date": "Select a date",
  "blank-date-range": "Select a date range",
  "blank-datetime": "Select datetime",
  "blank-month": "Select month",
  "blank-time": "Select time",
  "blank-time-range": "Select a time range",
  "cal": {
    "abbr": {
      "Apr": "Apr",
      "Aug": "Aug",
      "Dec": "Dec",
      "Feb": "Feb",
      "Jan": "Jan",
      "Jul": "Jul",
      "Jun": "Jun",
      "Mar": "Mar",
      "May": "May",
      "Nov": "Nov",
      "Oct": "Oct",
      "Sep": "Sep"
    },
    "d-range-beyond-days": "${yy0}-${MM0}-${dd0} to ${dd1}",
    "d-range-beyond-months": "${yy0}-${MM0}-${dd0} to ${MM1}-${dd1}",
    "d-range-beyond-years": "${yy0}-${MM0}-${dd0} to ${yy1}-${MM1}-${dd1}",
    "d-range-in-same-day": "${yy0}-${MM0}-${dd0} whole day",
    "m-range-beyond-months": "${yy0}-${MT0} to ${MT1}",
    "m-range-beyond-years": "${yy0}-${MT0} to ${yy1}-${MT1}",
    "week": ["S", "M", "T", "W", "T", "F", "S"]
  },
  "date-fmt": "yyyy-MM-dd",
  "dt-range-from": "From",
  "dt-range-to": "to",
  "dt-range-unknown": "Unknown time range",
  "du-in-min": "${n}Min",
  "time": {
    "any-time": "yyyy-M-d",
    "in-year": "M-dd",
    "past-in-min": "Just now",
    "past-in-hour": "In ${min}mins",
    "past-in-day": "In ${hour}hours",
    "past-in-week": "In ${day}days",
    "future-in-min": "Soon",
    "future-in-hour": "After ${min}mins",
    "future-in-day": "After ${hour}hours",
    "future-in-week": "After ${day}days"
  },
  "time-begin": "Begin Time",
  "time-end": "End Time",
  "time-ms": "Ms",
  "today": "Today",
  "tu-day": "Day",
  "tu-hou": "Hr",
  "tu-min": "Min",
  "tu-mon": "Month",
  "tu-sec": "Sec",
  "tu-week": "Week",
  "tu-year": "Year"
});
//========================================
// JOIN <ti-text-editor.i18n.json> ti/i18n/en-uk/ti-text-editor.i18n.json
//========================================
Ti.Preload("ti/i18n/en-uk/ti-text-editor.i18n.json", {
  "wordp-h0": "Main",
  "wordp-h1": "Heading 1",
  "wordp-h2": "Heading 2",
  "wordp-h3": "Heading 3",
  "wordp-h4": "Heading 4",
  "wordp-h5": "Heading 5",
  "wordp-h6": "Heading 6",
  "wordp-heading": "Heading levels",
  "wordp-link": "Hyperlink",
  "wordp-nil-sel": "Please select a paragraph first"
});
//========================================
// JOIN <web.i18n.json> ti/i18n/en-uk/web.i18n.json
//========================================
Ti.Preload("ti/i18n/en-uk/web.i18n.json", {
  "account": "Account",
  "account-add": "Add account",
  "account-flt-tip": "Filter by account name",
  "account-manage": "Accounts",
  "account-meta": "Account properties",
  "account-meta-tip": "Choose an account for detail",
  "address-consignee": "Consignee",
  "address-empty-list": "No shipping address",
  "address-flt-tip": "Filter by address name",
  "address-is-dft": "Default shipping address",
  "address-k-area": "Area",
  "address-k-city": "City",
  "address-k-code": "Addr code",
  "address-k-code-tip": "Your postcode",
  "address-k-consignee": "Consignee",
  "address-k-country": "Country",
  "address-k-dftaddr": "Default address",
  "address-k-door": "Door",
  "address-k-email": "Email",
  "address-k-phone": "Phone",
  "address-k-postcode": "Postcode",
  "address-k-province": "Province",
  "address-k-street": "Street",
  "address-k-title": "Address",
  "address-k-tp": "Addr Type",
  "address-k-tp-s": "SELLER",
  "address-k-tp-u": "USER",
  "address-k-uid": "User",
  "address-k-uid-tip": "Filter by username",
  "address-meta": "Address properties",
  "address-nil": "Address blank",
  "address-nil-detail": "Select an address for details",
  "address-rm-confirm": "Are you sure you want to delete this address?",
  "address-set-dft": "Set as default address",
  "address-shipping-add": "Add shipping address",
  "admin-flt-tip": "Filter by admin name",
  "admin-meta": "Admin properties",
  "admin-new": "New admin",
  "admin-nickname": "Admin nickname",
  "admin-no-detail": "Select an admin for detail",
  "ar-cate": "Catetory",
  "ar-content": "Content",
  "ar-duration": "Reading time",
  "ar-flt-tip": "Filter by article title",
  "ar-meta": "Article property",
  "ar-meta-tip": "Choose an article for detail",
  "ar-new": "New article",
  "ar-nm": "Name",
  "ar-pubat": "Publish at",
  "ar-thumb": "Thumbnail",
  "ar-title": "Title",
  "ar-watch-c": "Watch count",
  "auth-bind": "Bind",
  "auth-bind-email-title": "Bind email",
  "auth-bind-phone-title": "Bind phone",
  "auth-blank-email": "Blank email address not allowed",
  "auth-blank-name": "Blank name not allowed",
  "auth-blank-name-passwd": "Blank name or password",
  "auth-blank-phone": "Blank phone number not allowd",
  "auth-doing": "Verifying",
  "auth-email-tip": "Email address",
  "auth-email-title": "Sign by email",
  "auth-email-vcode": "Email password",
  "auth-email-vcode-get": "Get email password",
  "auth-go-email": "Sign by email",
  "auth-go-passwd": "Sign in by password",
  "auth-go-phone": "Sign by sms",
  "auth-login": "Sign in",
  "auth-login-NoSaltedPasswd": "Please switch to sign by [${ta?password}]，after sign in, go to [profile > reset password] to setup your password, thanks.",
  "auth-login-or-signup": "Sign up or sign in",
  "auth-logout-confirm": "Are you sure you want to log out?",
  "auth-ok": "Verify successful",
  "auth-passwd-getback": "Get back password",
  "auth-passwd-name-email-tip": "Email/Name",
  "auth-passwd-name-phone-tip": "Phone/Name",
  "auth-passwd-tip": "Password",
  "auth-passwd-title": "Sign in by password",
  "auth-phone-tip": "Phone number",
  "auth-phone-title": "Sign by sms",
  "auth-phone-vcode": "SMS password",
  "auth-phone-vcode-get": "Get sms password",
  "auth-reset-passwd": "Reset password ...",
  "auth-reset-passwd-again": "Reset password again",
  "auth-reset-passwd-btn-invalid": "Illegal characters",
  "auth-reset-passwd-btn-lack": "Lack information",
  "auth-reset-passwd-btn-ready": "Reset password",
  "auth-reset-passwd-btn-short": "Password too short (at least 6 chars)",
  "auth-reset-passwd-btn-unmatch": "The password is not consistent",
  "auth-reset-passwd-by-email": "Reset password by email",
  "auth-reset-passwd-by-email-sent": "The email password has been sent to your registered email address ${email}",
  "auth-reset-passwd-by-email-tip": "Registered email address",
  "auth-reset-passwd-by-passwd": "Reset by old password",
  "auth-reset-passwd-by-phone": "Reset by sms",
  "auth-reset-passwd-by-phone-sent": "The sms password has been sent to your mobile phone ${phone}",
  "auth-reset-passwd-by-phone-tip": "Registered phone number",
  "auth-reset-passwd-ing": "Reseting password ...",
  "auth-reset-passwd-lack-email": "Please enter your registered email address",
  "auth-reset-passwd-lack-phone": "Please enter your registered mobile phone number",
  "auth-reset-passwd-new": "New password (at least 6 chars)",
  "auth-reset-passwd-ok": "The password has been reset and will take effect the next time you log in",
  "auth-reset-passwd-old": "Old password",
  "auth-reset-passwd-ren": "Reconfirm",
  "auth-sending-vcode": "Sending verification code",
  "auth-sent-ok": "${ta?Password} has been sent, please check in ${by} in ${min} minutes",
  "auth-ta-by-email": "Your email",
  "auth-ta-by-phone": "Your sms",
  "auth-ta-email": "Email password",
  "auth-ta-phone": "SMS password",
  "auth-vcode-delay": "Resend after ${sec}s",
  "auth-vcode-lost": "Can't get password?",
  "base-info": "Base info",
  "blog": "Blog",
  "blog-manage": "Blog management",
  "buy-checkout-nil": "You have nothing to checkout",
  "cate": "Category",
  "cate-flt-tip": "Filter by category name",
  "cate-maj": "Major category",
  "cate-meta": "Category properties",
  "cate-new": "New category",
  "cate-nil-tip": "Select a category",
  "cate-no-detail": "Select a category for details",
  "cate-pa": "Parent category",
  "cate-pa-nil": "Select a parent category",
  "cate-sub": "Child category",
  "cate-sub-nil": "Select a child category",
  "cate-val": "Category value",
  "cmt-brief": "Comment brief",
  "cmt-content": "Comment content",
  "cmt-flt-tip": "Filter by a user id or comment",
  "cmt-meta": "Comment properties",
  "cmt-no-detail": "Select a role for detail",
  "cmt-target": "Comment target",
  "cmt-type": "Comment type",
  "cmt-user": "Comment account",
  "comments": "COMMENTS",
  "cover": "Cover",
  "cover-pic": "Cover pic",
  "detail-info": "Detail info",
  "dir-media": "Media dir",
  "e-cmd-passwd-old_invalid": "Old Password Invalid",
  "e-cmd-www_passwd-Blank": "Blank new password not allowed",
  "e-cmd-www_passwd-CheckBlankAccount": "Blank account",
  "e-cmd-www_passwd-CheckBlankCode": "Blank code",
  "e-cmd-www_passwd-CheckCodeFail": "Invalid code",
  "e-cmd-www_passwd-CheckFailed": "Verify failed",
  "e-cmd-www_passwd-CheckWeirdAccount": "Weird account",
  "e-cmd-www_passwd-InvalidNewPasswd": "Invalid new password",
  "e-cmd-www_passwd-LackTarget": "Missing target",
  "e-cmd-www_passwd-TooShort": "The new password is too short",
  "e-cmd-www_passwd-nopvg": "No permission to reset passwords",
  "e-run-action-test-fail": "Insufficient action preconditions",
  "e-www-captcha-fail_send_by_email": "The email failed to send. Please check the account",
  "e-www-invalid-captcha": "Invalid ${ta?captcha}",
  "e-www-login-invalid-passwd": "Invalid password",
  "e-www-login-noexists": "Account not exists",
  "e-www-order-OutOfStore": "Goods ${val?} insufficient stock",
  "invoice-k-bankaccount": "Bank account",
  "invoice-k-bankname": "Bank",
  "invoice-k-busiaddr": "Biz address",
  "invoice-k-busiphone": "Biz phone",
  "invoice-k-invdft": "Default title",
  "invoice-k-invtfn": "TFN",
  "invoice-k-invtitle": "Invoice title",
  "invoice-k-type": "Invoice Type",
  "invoice-k-uemail": "Taker email",
  "invoice-k-uid": "Owner account",
  "invoice-k-uid-tip": "Filter by username",
  "invoice-k-uname": "Taker name",
  "invoice-k-uphone": "Taker phone",
  "invoice-kg-bank": "Bank info",
  "invoice-kg-busi": "Biz info",
  "invoice-kg-inv": "Invoice info",
  "invoice-kg-u": "Taker info",
  "k-ct-date": "Create date",
  "k-lm": "Last modifed",
  "me-k-account": "Account",
  "me-k-avatar": "Avatar",
  "me-k-city": "City",
  "me-k-country": "Country",
  "me-k-dept": "Department",
  "me-k-email": "Email",
  "me-k-job": "Jobs",
  "me-k-job-tip": "Select jobs",
  "me-k-login": "Login",
  "me-k-nickname": "Nickname",
  "me-k-nm": "Login name",
  "me-k-phone": "Phone",
  "me-k-role": "Role",
  "me-k-sex": "Gender",
  "mine": "Mine",
  "my-favors": "My favorite",
  "my-favors-blog": "Favorite blog",
  "my-favors-goods": "Favorite goods",
  "my-favors-posts": "Favorite posts",
  "my-favors-spots": "Favorite spots",
  "my-favors-video": "Favorite video",
  "my-orders": "My orders",
  "my-orders-shop": "Shopping orders",
  "my-orders-video": "VOD order",
  "my-passwd": "Reset password",
  "my-profile": "My profile",
  "my-shipping-address": "Shipping address",
  "my-shopping-car": "Shopping car",
  "or-st-ca": "Canceled",
  "or-st-dn": "Done",
  "or-st-fa": "Fail to create order",
  "or-st-nw": "New order",
  "or-st-ok": "Pay ok",
  "or-st-sp": "Shipped",
  "or-st-wt": "Wait for pay",
  "ord-detail": "Order detail",
  "order-flt-tip": "Query by order id",
  "order-k-accounts": "Accounts",
  "order-k-addr_ship": "Ship address",
  "order-k-addr_ship_code": "Ship code",
  "order-k-addr_ship_country": "Ship country",
  "order-k-addr_ship_door": "Ship door",
  "order-k-addr_user": "User address",
  "order-k-addr_user_area": "Area",
  "order-k-addr_user_city": "City",
  "order-k-addr_user_code": "User code",
  "order-k-addr_user_country": "User country",
  "order-k-addr_user_door": "User door",
  "order-k-addr_user_province": "Province",
  "order-k-addr_user_street": "Street",
  "order-k-buyer_id": "Buyer",
  "order-k-ca_at": "Cancel at",
  "order-k-currency": "Currency",
  "order-k-discount": "Discount",
  "order-k-dn_at": "Done at",
  "order-k-fa_at": "Fail at",
  "order-k-fee": "Payment amount",
  "order-k-freight": "Freight",
  "order-k-freight-m": "Alt Freight",
  "order-k-freight-m-tip": "Enter 0 to waive shipping costs",
  "order-k-id": "Order id",
  "order-k-invoice": "Invoice",
  "order-k-nominal": "Nominal",
  "order-k-note": "Note",
  "order-k-ok_at": "OK at",
  "order-k-pay_id": "Payment id",
  "order-k-pay_tp": "Pay type",
  "order-k-payment": "Total",
  "order-k-prefee": "Base price",
  "order-k-prefee-m": "Alt Total",
  "order-k-prefee-m-tip": "Enter the new total price",
  "order-k-price": "Order price",
  "order-k-pro-amount": "Amount",
  "order-k-pro-price": "Price",
  "order-k-pro-retail": "Retail",
  "order-k-pro-subretail": "Sub-Retail",
  "order-k-pro-subtotal": "Subtotal",
  "order-k-pro-title": "Product Title",
  "order-k-products": "Goods",
  "order-k-profit": "Profit",
  "order-k-seller": "Seller",
  "order-k-sp_at": "Shipping at",
  "order-k-st": "Order status",
  "order-k-title": "Order title",
  "order-k-total": "Total",
  "order-k-user_email": "User email",
  "order-k-user_name": "User name",
  "order-k-user_phone": "User phone",
  "order-k-waybil": "Waybil",
  "order-k-waybil_com": "Waybil COM",
  "order-k-waybil_nb": "Waybil NB",
  "order-k-wt_at": "Pay at",
  "order-nil-detail": "Please select an order for details",
  "order-pay-id": "Pay ID",
  "order-pay-status": "Payment status",
  "order-shipaddr-nil": "Please specify a shipping address",
  "passwd-invalid-char": "Passwords can only include english numbers/upper and lower case letters/and special characters",
  "passwd-sl-1": "Weak",
  "passwd-sl-2": "Weaker",
  "passwd-sl-3": "Normal",
  "passwd-sl-4": "Stronger",
  "passwd-sl-5": "Strong",
  "passwd-tip": "Please enter a combination of english numerals/upper and lower case letters/special characters with a minimum of 6 characters",
  "pay-by-free": "Free",
  "pay-by-paypal": "PayPal",
  "pay-by-wx-jsapi": "WeChat jsapi",
  "pay-by-wx-qrcode": "WeChat scan code",
  "pay-by-wx-scan": "WeChat payment code",
  "pay-by-zfb-qrcode": "Alipay scan code",
  "pay-by-zfb-scan": "Alipay payment code",
  "pay-checkout-it-amount": "Amount",
  "pay-checkout-it-name": "Name",
  "pay-checkout-it-price": "Price",
  "pay-checkout-it-subtotal": "Subtotal",
  "pay-checkout-tip": "Please confirm the quantity and amount of your purchase",
  "pay-paypal": "PayPal",
  "pay-proceed-check": "Check payment",
  "pay-proceed-ing": "Checking for...",
  "pay-re-fail": "Payment failure",
  "pay-re-nil": "The payoff is a schrodinger's cat",
  "pay-re-ok": "Payment success",
  "pay-re-wait": "Pending payment",
  "pay-step-checkout-title": "Confirm order",
  "pay-step-choose-nil": "☝ please select one of the above payment methods 👆",
  "pay-step-choose-tip": "You may choose any of the following payment methods to pay for this order",
  "pay-step-choose-tip2": "You will pay for this order using ${val}",
  "pay-step-choose-title": "Mode of payment",
  "pay-step-choose-title2": "Choose payment",
  "pay-step-done-title": "Done",
  "pay-step-proceed-create-order": "Creating order ...",
  "pay-step-proceed-fetch-order": "Getting order ...",
  "pay-step-proceed-nil": "Please choose a method of payment",
  "pay-step-proceed-tip": "Pay for this order with ${val}",
  "pay-step-proceed-title": "Pay",
  "pay-tip-wx-qrcode": "Please pay in wechat scan within 15 minutes",
  "pay-tip-zfb-qrcode": "Please pay by alipay scan code within 15 minutes",
  "pay-title": "Payment",
  "pay-wx": "WeChat",
  "pay-zfb": "Alipay",
  "paypal-amount_value": "Payment Amount",
  "paypal-approve-tip": "Already in the new tab for you to open the paypal payment page, if there is no open, please click on ☝ the icon above. after payment, the page will automatically perceive, if there is no response, try to click 👇 [check payment] button below.",
  "paypal-cap-id": "Capture ID",
  "paypal-cap-status": "Capture status",
  "paypal-currency": "Currency",
  "paypal-id": "PayPal TID",
  "paypal-payer_email": "Payer email",
  "paypal-payer_id": "Payer ID",
  "photo": "Photo",
  "post-content-blank": "The content you post cannot be empty or less than 10 words",
  "profile-title": "My profile",
  "pubat": "Release date",
  "read-du": "Reading spend",
  "role": "Role",
  "role-add": "Add role",
  "role-as-domain": "Domain role",
  "role-as-domain-admin": "Admin",
  "role-as-domain-guest": "Guest",
  "role-as-domain-member": "Member",
  "role-as-guest": "Guest",
  "role-as-normal": "Normal",
  "role-as-op": "Op role",
  "role-as-vip": "VIP",
  "role-dft": "Default role",
  "role-flt-tip": "Filter by role name",
  "role-manage": "Roles",
  "role-meta": "Role propery",
  "role-meta-tip": "Choose an role for detail",
  "role-name": "Role name",
  "role-select-tip": "Select role",
  "role-val": "Role value",
  "shop-basket-clean-confirm": "Are you sure you want to empty the shopping cart? this is an operation that cannot be undone.",
  "shop-basket-remove-confirm": "Are you sure you want to remove this item from your shopping cart?",
  "topic": "Topic",
  "type-new": "New type",
  "video-title": "Video title",
  "watch_c": "View count",
  "waybil-com-ane": "AN NENG Logistics",
  "waybil-com-best": "BAISHI Express",
  "waybil-com-db": "DE BANG Express",
  "waybil-com-ems": "EMS Logistics",
  "waybil-com-jdl": "JING DONG Logistics",
  "waybil-com-pj": "PIN JUN Express",
  "waybil-com-sf": "SHUN FENG Express",
  "waybil-com-sto": "SHEN TONG Express",
  "waybil-com-uce": "YOU SU Express",
  "waybil-com-yto": "YUAN TONG Express",
  "waybil-com-yunda": "YUN DA Express",
  "waybil-com-zto": "ZHONG TONG Express"
});
//========================================
// JOIN <wn-manager.i18n.json> ti/i18n/en-uk/wn-manager.i18n.json
//========================================
Ti.Preload("ti/i18n/en-uk/wn-manager.i18n.json", {
  "ti-loading": "Load...",
  "wn-adaptlist": "Object explorer",
  "wn-create-fail": "Fail to create",
  "wn-create-invalid": "Illegal characters in object name",
  "wn-create-ok": "Create ok",
  "wn-create-too-long": "Object name too long",
  "wn-del-confirm": "Are you sure you want to delete the selected ${N} items? This is an irrevocable operation!",
  "wn-del-item": "Deleting: \"${name}\"",
  "wn-del-no-empty-folder": "The directory \"${nm}\" is not empty, do you want to delete all? click \"no\" to skip",
  "wn-del-none": "Please select at least one file to delete!",
  "wn-del-ok": "${N} objects have been removed",
  "wn-download-dir": "Object \"${nm}\" is a directory, click \"continue\" to skip it and download the next file, and click \"terminate\" to end this operation!",
  "wn-download-none": "Please select at least one file to download!",
  "wn-download-too-many": "We are going to download ${n} files one by one. continue?",
  "wn-expose-hidden-off": "Not show hidden objects",
  "wn-expose-hidden-on": "Show hidden objects",
  "wn-gui": "General gui",
  "wn-list-view-type": "View Type",
  "wn-manager-is-loading": "Manager is loading",
  "wn-manager-no-meta": "Manager without meta data",
  "wn-move-to-confirm": "Are you sure you want to move the selected ${N} items? This is an irrevocable operation!",
  "wn-move-to-none": "Please select at least one file to move!",
  "wn-move-to-ok": "${N} objects have been moved",
  "wn-obj-preview": "Object preview",
  "wn-obj-puretext": "Plain text editor",
  "wn-obj-single-com": "Single control test suite",
  "wn-publish-done": "Publish success",
  "wn-publish-to-nil": "No publish target is set",
  "wn-publish-to-noexist": "The publish target does not exist",
  "wn-rename": "Rename object \"${name}\"",
  "wn-rename-fail": "Rename failed",
  "wn-rename-invalid": "The name cannot contain illegal characters",
  "wn-rename-none": "Please select a file to rename!",
  "wn-rename-ok": "Rename successful",
  "wn-rename-suffix-changed": "Your file suffix name has changed. do you need to complete the original suffix for you automatically?",
  "wn-rename-too-long": "The name is too long",
  "wn-thing-manager": "Data manager",
  "wn-view-opening": "Loading gui..."
});
//========================================
// JOIN <wn-obj-preview.i18n.json> ti/i18n/en-uk/wn-obj-preview.i18n.json
//========================================
Ti.Preload("ti/i18n/en-uk/wn-obj-preview.i18n.json", {
  "wop-fullscreen-enter": "Enter fullscreen",
  "wop-fullscreen-quit": "Exit fullscreen"
});
//========================================
// JOIN <wn-thing.i18n.json> ti/i18n/en-uk/wn-thing.i18n.json
//========================================
Ti.Preload("ti/i18n/en-uk/wn-thing.i18n.json", {
  "e-thing-ukey-duplicated": "Unique key exists",
  "thing-clean": "Empty the recycle bin",
  "thing-cleaning": "Cleaning...",
  "thing-content": "Object content",
  "thing-content-hide": "Hide content",
  "thing-content-show": "Show content",
  "thing-create": "New object",
  "thing-create-in-recyclebin": "Exit recycle bin before create object",
  "thing-enter-recyclebin": "Enter recyclebin",
  "thing-files": "Object files",
  "thing-files-attachment": "Attachments",
  "thing-files-hide": "Hide files",
  "thing-files-media": "Medias",
  "thing-files-show": "Show files",
  "thing-filter-kwdplhd": "Enter the query criteria",
  "thing-leave-recyclebin": "Leave recyclebin",
  "thing-meta": "Object properties",
  "thing-meta-hide": "Hide properties",
  "thing-meta-show": "Show properties",
  "thing-recycle-bin": "Recycle bin",
  "thing-restore": "Restore",
  "thing-restore-none": "Select the data you want to recover first",
  "thing-restoring": "Restoring..."
});
//========================================
// JOIN <_net.i18n.json> ti/i18n/en-uk/_net.i18n.json
//========================================
Ti.Preload("ti/i18n/en-uk/_net.i18n.json", {
  "net-ct": "Created",
  "net-fb-reload-album-cover": "Force reload album cover",
  "net-fb-relogin": "Relogin FB account",
  "net-flt-nil": "Query by name",
  "net-vod-add-video": "Add video",
  "net-vod-cate": "Category",
  "net-vod-du-long": "Long video",
  "net-vod-du-short": "Short video",
  "net-vod-du-tv": "TV",
  "net-vod-duration": "Duration",
  "net-vod-size": "Video size",
  "net-vod-video-nil": "Please choose one video for detail",
  "net-youtube": "Youtube",
  "net-youtube-add-video": "Add youtube video"
});
//========================================
// JOIN <_ti.i18n.json> ti/i18n/en-uk/_ti.i18n.json
//========================================
Ti.Preload("ti/i18n/en-uk/_ti.i18n.json", {
  "add": "Add",
  "add-item": "New item",
  "add-now": "Add Now",
  "add-watch": "Add Monitor",
  "add-watch-clear": "Clear All",
  "add-watch-create": "Create New Montitor",
  "add-watch-create-tip": "Please enter a monitoring name",
  "add-watch-exists": "This name already exists, please change another",
  "add-watch-remove": "Remove Current",
  "add-watch-tip": "Saves the current search criteria to local storage",
  "album": "Album",
  "album-add": "Add album",
  "album-clrsz": "Clear album size",
  "album-insert": "Insert album",
  "album-margin": "Album margin",
  "album-prop": "Album prop",
  "album-refresh": "Refresh album",
  "albums": "Albums",
  "all": "All",
  "allowfullscreen": "Allow fullscreen",
  "amount": "Amount",
  "attachment": "Attachment",
  "attachment-add": "Add attachmemt",
  "attachment-insert": "Insert attachment",
  "attachments": "Attachments",
  "audio": "Audio",
  "audio-add": "Add audio",
  "audio-insert": "Insert audio",
  "audios": "Audios",
  "avatar": "Avatar",
  "back": "Back",
  "back-to-list": "Back to list",
  "banner": "Banner",
  "batch-none": "Please choose at least one item for batch updating",
  "batch-update": "Batch update",
  "blank": "BLANK",
  "blank-to-edit": "Please choose item for editing",
  "bottom": "Bottom",
  "brief": "Brief",
  "brief-d": "Brief",
  "brief-i": "Brief",
  "buy": "Buy",
  "buy-now": "Buy now",
  "cancel": "Cancel",
  "cancel-all": "Cancel all",
  "candidate": "Candidations",
  "captcha": "Captcha",
  "captcha-chagne": "Next",
  "captcha-tip": "Please enter the captcha",
  "center": "Center",
  "chart": "Chart",
  "chart-bar": "Bar Chart",
  "chart-line": "Line Chart",
  "chart-pie": "Pie Chart",
  "chart-rank": "Rank Chart",
  "check-tip-all": "All selected, click to cancel",
  "check-tip-none": "Click to select all",
  "check-tip-part": "Partial selected, click to select all",
  "checked": "Checked",
  "choose": "Select",
  "choose-fields": "Select fields",
  "choose-file": "Select file",
  "choose-obj": "Select object",
  "clean": "Clean",
  "clear": "Clear",
  "clone": "Clone",
  "clone-copy": "Clone copy",
  "close": "Close",
  "color": "Color",
  "confirm": "Confirm",
  "confirm-change": "Confirm Change",
  "console": "Console",
  "content": "Content",
  "content-setup": "Content setup",
  "continue": "Continue",
  "copy": "Copy",
  "copy-all": "Copy all",
  "create": "New",
  "create-now": "Create now",
  "creating": "Creating",
  "currency": "货币",
  "currency-AUD": "AUD",
  "currency-CAD": "CAD",
  "currency-EUR": "EUR",
  "currency-GBP": "GBP",
  "currency-HKD": "HKD",
  "currency-JPY": "JPY",
  "currency-MOP": "MOP",
  "currency-RMB": "RMB",
  "currency-USD": "USD",
  "customize": "Customize",
  "date": "Date",
  "db-col-type-AUTO": "AUTO",
  "db-col-type-BINARY": "BINARY",
  "db-col-type-BOOLEAN": "BOOLEAN",
  "db-col-type-CHAR": "CHAR",
  "db-col-type-FLOAT": "FLOAT",
  "db-col-type-INT": "INT",
  "db-col-type-TEXT": "TEXT",
  "db-col-type-TIMESTAMP": "TIMESTAMP",
  "db-col-type-VARCHAR": "VARCHAR",
  "debug": "Debug",
  "default": "Default",
  "del": "Delete",
  "del-checked": "Delete selected",
  "del-hard": "The selected item will be deleted directly. this operation is irrevocable. are you sure you want to continue?",
  "del-ing": "Deleting...",
  "del-none": "Please choose at least one item for deleting",
  "del-not-empty-dir": "There are ${N} folders [${tip}] in your selected object that are not empty. Are you sure you want to delete them and their entire contents?",
  "dept-add": "Add Dept",
  "desktop": "Desktop",
  "detail": "Detail",
  "dis-name": "Display name",
  "disable": "Disable",
  "disabled": "Disabled",
  "doing": "Processing...",
  "download": "Download",
  "download-to-local": "Download to local",
  "drop-file-here-to-upload": "Drop file here to upload",
  "drop-here": "Drop here",
  "dt-in": "in ${val}",
  "dt-u-day": "Day",
  "dt-u-hour": "Hour",
  "dt-u-min": "Min",
  "dt-u-month": "Month",
  "dt-u-ms": "Milliseconds",
  "dt-u-sec": "Seconds",
  "dt-u-week": "Week",
  "dt-u-year": "Year",
  "duplicate": "Duplicate",
  "e-auth-account-noexists": "Account not exists",
  "e-auth-home-forbidden": "Auth home forbidden",
  "e-auth-login-NoPhoneOrEmail": "Invalid phone number or email address",
  "e-auth-login-NoSaltedPasswd": "Password without salting",
  "e-auth-login-invalid-passwd": "Invalid password",
  "e-data-InvalidScope": "Invalid data range! The valid format is similar to: 1-20 but you entered:",
  "e-export_data-ConfirmBigLimit": "You want to export a lot of data, it may take a while, should we continue?",
  "e-export_data-UnknownMode": "Unknown Export Mode",
  "e-form-incomplete": "Form Incomplete : [${title}:${name}]  ${tip}",
  "e-io-forbidden": "IO Forbidden",
  "e-io-obj-BlankName": "The object name CANNOT be empty",
  "e-io-obj-InvalidName": "Invalid object name",
  "e-io-obj-exists": "Object already exists",
  "e-io-obj-noexists": "Object does't exists",
  "e-io-obj-noexistsf": "Object[${nm}] does't exists",
  "e-io-rm-NoEmptyDir": "You can not remove a folder that not empty",
  "e-obj-invalid": "Path [${val}] invalid",
  "e-obj-noexists": "Object [${val}] not exists",
  "e-ph-noexists": "Path [${val}] not exists",
  "e-pvg-fobidden": "Operation prohibited",
  "edit": "Edit",
  "edit-com": "Edit control",
  "edit-content": "Edit Content",
  "email": "Email",
  "emoji": "Emoji",
  "empty": "Empty",
  "empty-data": "Empty data",
  "enable": "Enable",
  "enabled": "Enabled",
  "error": "Error",
  "exlink": "Ex-link",
  "exlink-tip": "Please enter a URL address",
  "exlink-tip-img": "Please enter an image URL address",
  "export-data": "Export data...",
  "fail": "Failed",
  "false": "False",
  "favorites": "Favorite",
  "female": "Female",
  "filter": "Filter",
  "find": "Find",
  "find-data": "Find data",
  "font-size": "Font size",
  "font-t-capitalize": "Capitalize",
  "font-t-lowercase": "Lowercase",
  "font-t-uppercase": "Uppercase",
  "font-transform": "Text trans",
  "font-w-bold": "Bold",
  "font-w-normal": "Normal",
  "font-weight": "Font weight",
  "form-fld-type-AMS": "Timestamp(ms)",
  "form-fld-type-ASEC": "Timestamp(sec)",
  "form-fld-type-Array": "Array",
  "form-fld-type-Boolean": "Boolean",
  "form-fld-type-Color": "Color",
  "form-fld-type-Date": "Date",
  "form-fld-type-DateTime": "DateTime",
  "form-fld-type-Float": "Float",
  "form-fld-type-Integer": "Integer",
  "form-fld-type-Number": "Number",
  "form-fld-type-Object": "Object",
  "form-fld-type-String": "String",
  "form-fld-type-Time": "Time",
  "gender": "Gender",
  "geo-alti": "Altitude",
  "geo-azimuth": "Azimuth",
  "geo-gcj02-lat": "GCJ02 Lat",
  "geo-gcj02-lng": "GCJ02 Lng",
  "geo-hash": "Geo hash",
  "geo-lat": "Latitude",
  "geo-lng": "Longitude",
  "geo-sate-cno": "Satellite Ava",
  "geo-sate-cnt": "Satellite used",
  "global-settings": "Global settings",
  "height": "Height",
  "hierarchy": "Hierarchy",
  "history-record": "History record",
  "home": "HOME",
  "home-index": "HOME",
  "href": "Link URL",
  "href-text": "Link Text",
  "i-known": "I known",
  "icon": "Icon",
  "icon-code-tip": "Please key-in code for icon, such as 'zmdi-case'",
  "img": "Image",
  "img-add": "Add image",
  "img-insert": "Insert image",
  "img-remove": "Remove image",
  "import-data": "Import data ...",
  "index": "Index",
  "info": "Information",
  "inherit": "Inherit",
  "init": "Initiate",
  "init-data": "Initiate data",
  "input": "Input",
  "input-tags": "Input tags",
  "invalid": "Invalid",
  "invalid-val": "Invalid value",
  "java-type-Boolean": "Boolean",
  "java-type-Double": "Double",
  "java-type-Float": "Float",
  "java-type-Integer": "Integer",
  "java-type-JSON": "JSON",
  "java-type-List": "Object List",
  "java-type-Long": "Long",
  "java-type-Object": "Object",
  "java-type-SArray": "String Array",
  "java-type-String": "String",
  "json-Array": "Array",
  "json-Boolean": "Boolean",
  "json-Float": "Decimal",
  "json-Integer": "Integer",
  "json-Nil": "Nil",
  "json-Number": "Number",
  "json-Object": "Object",
  "json-String": "String",
  "json-new-key": "Enter a new key",
  "json-syntax-err-tip": "Syntax Error! please switch source view to verify",
  "key": "Key",
  "keywords": "Keywords",
  "label": "Label",
  "lang": "Language",
  "lang-en-uk": "En",
  "lang-en-us": "En",
  "lang-zh-cn": "Cn",
  "lang-zh-hk": "Hk",
  "lang-zh-tw": "Tw",
  "lat": "Latitude",
  "layout": "Layout",
  "lbs-place-add": "Add place",
  "lbs-ro-rnb-k-first": "Starting number",
  "lbs-ro-rnb-k-type": "Display type",
  "lbs-ro-rnb-k-type-alpha": "Alphabet",
  "lbs-ro-rnb-k-type-capital": "Capital",
  "lbs-ro-rnb-k-type-number": "Number",
  "lbs-ro-rnb-title": "Autosets line label",
  "left": "Left",
  "left-bottom": "Left bottom",
  "left-top": "Left top",
  "limit": "Limit",
  "link": "Link",
  "link-href": "Link target",
  "link-text": "Link text",
  "list": "List",
  "lng": "Longitude",
  "load-more": "Load more",
  "load-more-pull": "Pull for load more",
  "loading": "Loading...",
  "loading-data": "Loading Data ...",
  "loading-gui": "Loading GUI ...",
  "location": "Location",
  "login": "Sign in",
  "login-name": "Login name",
  "logout": "Sign out",
  "logout-ing": "Log out ...",
  "mail": "Email",
  "mail-as-html": "HTML Email",
  "mail-bcc": "BCC",
  "mail-cc": "CC",
  "mail-charset": "Email charset",
  "mail-inbox": "Email Inbox",
  "mail-notify": "Email notify",
  "mail-r-addr": "Email addr.",
  "mail-r-name": "Name",
  "mail-scene": "Email scenarios",
  "mail-scene-ctmpl": "Template",
  "mail-scene-flt-tip": "Filter by a scene name",
  "mail-scene-meta": "Email scenario properties",
  "mail-scene-nil-detail": "Please select a mail scene for details",
  "mail-scene-nm": "Scene name",
  "mail-scene-nm-tip": "Only include english letters or numbers or underline, and guarantee unique",
  "mail-scene-var-trans": "Trans script",
  "mail-scene-var-trans-placeholder": "Just like: jsc /path/to/script.js -vars",
  "mail-scene-var-trans-tip": "Take primary vars as JSON input, output another JSON string",
  "mail-setup": "Email setup",
  "mail-subject": "Subject",
  "mail-to": "TO",
  "male": "Male",
  "map-hybrid": "HYBIRD",
  "map-location": "Map location",
  "map-location-clear": "Clear map location",
  "map-location-edit": "Edit map location",
  "map-roadmap": "ROADMAP",
  "map-satellite": "SATELLITE",
  "map-terrain": "TERRAIN",
  "map-type": "Map type",
  "me": "Me",
  "media": "Media",
  "meta": "Meta data",
  "mine": "Mine",
  "modal": "Modal",
  "modify": "Modify",
  "more": "More",
  "move": "Move",
  "move-down": "Move down",
  "move-to": "Move to...",
  "move-up": "Move up",
  "msg": "Message",
  "name": "Name",
  "new-item": "New item",
  "newsfeed": "Newfeed",
  "newtab": "New tab",
  "next": "Next",
  "nil": "Nil",
  "nil-content": "Nil content",
  "nil-detail": "Please choose one item for detail",
  "nil-item": "Please choose one item at first",
  "nil-obj": "Please choose one object",
  "nil-target": "Nil valid target",
  "no": "No",
  "no-saved": "You get data need to be saved",
  "no-selected": "None selected",
  "no-set": "Not Set",
  "no-title": "No title",
  "note": "Note",
  "null": "Null",
  "obj": "Object",
  "off": "Off",
  "ok": "Ok",
  "on": "On",
  "open": "Open",
  "open-newtab": "Open in new tab",
  "org-add": "Add Org",
  "org-choose": "Choose Organization",
  "others": "Others",
  "paging-change-pgsz": "Current page contains ${pgsz} records maximumly, you want to change it to：",
  "paging-change-pgsz-invalid": "Page size must be integer, and great than 0, but ... -_-!",
  "paging-change-pn": "Current page number is ${pn}, please enter number between 1 to ${pgc}:",
  "paging-change-pn-invalid": "Page number must be integer, and must between 1 to ${pgc}",
  "paging-first": "Head",
  "paging-last": "Tail",
  "paging-next": "Next",
  "paging-prev": "Prev",
  "paging-sum": "Total ${pgc} pages, ${sum} records，current ${count}/${pgsz}",
  "params": "Params",
  "passwd": "Password",
  "passwd-reset": "Reset password",
  "path": "Path",
  "phone": "Phone",
  "phone-nb": "Phone number",
  "post": "Post",
  "prev": "Prev",
  "preview": "Preview",
  "price": "Price",
  "profile": "Profile",
  "profile-edit": "Edit profile",
  "project-add": "Add Project",
  "prompt": "Prompt",
  "properties": "Properties",
  "publish": "Publish",
  "publishing": "Publishing ...",
  "query": "Query",
  "refresh": "Refresh",
  "refresh-hard": "Hard refresh",
  "refresh-hard-clear": "Clean cache & hard refresh",
  "reload": "Reload",
  "reloading": "Reloading ...",
  "remove": "Remove",
  "removing": "Removing ...",
  "rename": "Rename ...",
  "renaming": "Renameing ...",
  "reset": "Reset",
  "reset-change": "Reset change",
  "reset-data": "Reset data",
  "restore": "Restore",
  "revoke": "Revoke",
  "revoke-change": "Revoke change",
  "right": "Right",
  "right-bottom": "Right bottom",
  "right-top": "Right top",
  "role": "Role",
  "role-actions": "Role actions",
  "role-behaviors": "Role behaviors",
  "role-in-charge": "In charge",
  "run": "Run",
  "run-finished": "Done for running script",
  "run-welcome": "Run script, please wait for a while ...",
  "save": "Save",
  "save-change": "Save change",
  "save-done": "Save success",
  "save-now": "Save now",
  "saving": "Saving ...",
  "score": "Score",
  "score-count": "Score count",
  "search": "Search",
  "search-adv": "Advance search",
  "select": "Select",
  "select-all": "Select all",
  "send": "Send",
  "settings": "Settings",
  "setup": "Setup",
  "setup-fields": "Setup Fields",
  "setup-reset": "Setup Clean",
  "size": "Size",
  "skip": "Skip",
  "slogan": "Slogan",
  "sms-scene-nm": "Scene name",
  "sms-scene-nm-tip": "Only include english letters or numbers or underline, and guarantee unique",
  "sms-setup": "SMS setup",
  "sort": "Sort",
  "sort-asc": "ASC",
  "sort-by": "Sort by",
  "sort-desc": "DESC",
  "sort-tip-asc": "The smaller at first",
  "sort-tip-desc": "The bigger at first",
  "sort-val": "Sort value",
  "source-code": "Source code",
  "stat-date-at": "Stat at",
  "stat-date-at-oor": "Statistics on this date are not ready yet",
  "stat-date-span": "Date span",
  "stop": "Stop",
  "structure": "Structure",
  "style": "Style",
  "style-more": "More style",
  "submit": "Submit",
  "success": "Success",
  "sys-settings": "System settings",
  "tablet": "Tablet",
  "tags": "Tags",
  "target": "Target",
  "target-id": "Target ID",
  "target-name": "Target name",
  "target-path": "Target path",
  "terminal": "Terminal",
  "terminate": "Terminate",
  "text": "Text",
  "timestamp": "Timestamp",
  "title": "Title",
  "top": "Top",
  "total": "Total",
  "total-count": "Total ${nb?0} ${unit?items}",
  "total-items": "Total ${val} items",
  "trace": "Trace",
  "track": "Track message",
  "true": "True",
  "type": "Type",
  "undefined": "Undefined",
  "under-construction": "Under construction",
  "unknown": "Unknown",
  "unzip": "Unzip",
  "unzipping": "Unzipping...",
  "upload": "Upload",
  "upload-done": "Done for upload",
  "upload-file": "Uploading files ...",
  "upload-forbidden": "Upload forbidden",
  "upload-nofinished": "Upload not finished",
  "upload-notarget": "Upload target not set!",
  "upload-notarget-continue": "Upload target not set!, click [Continue] to upload next file, click [Cancel] to break file uploading",
  "uploading": "Uploading",
  "user-avator": "User avatar",
  "value": "Value",
  "video": "Video",
  "video-accelerometer": "Video accelerometer",
  "video-add": "Add video",
  "video-autoplay": "Autoplay",
  "video-clipboard-write": "Clipboard write",
  "video-encrypted-media": "Encrypted media",
  "video-features": "Video feature",
  "video-gyroscope": "Gyroscope",
  "video-insert": "Insert video",
  "video-pic-in-pic": "Pic in pic",
  "video-remove": "Remove video",
  "videos": "Videos",
  "view": "View",
  "view-resource": "View source code",
  "vu-mv": "Millivolt",
  "vu-v": "Volt",
  "warn": "Warn",
  "website": "Website",
  "width": "Width",
  "www-admin-login": "Admin login GUI",
  "www-home": "WWW home",
  "www-title": "Website",
  "yes": "Yes",
  "zip": "Zip",
  "zipping": "Zipping..."
});
//========================================
// JOIN <_wn.i18n.json> ti/i18n/en-uk/_wn.i18n.json
//========================================
Ti.Preload("ti/i18n/en-uk/_wn.i18n.json", {
  "wn-admin-check-obj-thumb": "Check obj thumbnails ...",
  "wn-admin-tools": "Admin tools",
  "wn-cmd-panel-epilog": "The script is finished, you can close the window now ^_^",
  "wn-cmd-panel-tip": "The script may take a while to run, please do not close the window",
  "wn-ctt-css-text": "CSS File",
  "wn-ctt-folder-text": "Folder",
  "wn-ctt-html-text": "HTML FILE",
  "wn-ctt-js-text": "Javascript",
  "wn-ctt-json-text": "JSON File",
  "wn-ctt-less-text": "LESS File",
  "wn-ctt-md-text": "Markdown",
  "wn-ctt-mjs-text": "Module Javascript",
  "wn-ctt-sass-text": "SASS File",
  "wn-ctt-thing_set-text": "Thing Set",
  "wn-ctt-txt-text": "Pure text",
  "wn-ctt-wnml-text": "WNML File",
  "wn-ctt-xml-text": "XML File",
  "wn-data-scope": "Range",
  "wn-data-scope-phd": "Such as: 1-100",
  "wn-data-scope-tip": "Range of data to be processed, 1-200 indicates from Record 1 to record 200 (inclusive)",
  "wn-edit-com-nil": "Default as label control",
  "wn-en-his-ct": "Created",
  "wn-en-his-flt-tip": "Please input user id or name to filtering",
  "wn-en-his-mor": "OP more",
  "wn-en-his-opt": "Operation",
  "wn-en-his-tar": "Target",
  "wn-en-his-tid": "Target id",
  "wn-en-his-tnm": "Target name",
  "wn-en-his-ttp": "Target type",
  "wn-en-his-uid": "User id",
  "wn-en-his-unm": "User name",
  "wn-en-his-usr": "User",
  "wn-en-his-utp": "User type",
  "wn-expi-10m": "10Min.",
  "wn-expi-12h": "12Hr.",
  "wn-expi-14d": "14Day",
  "wn-expi-1d": "1Day",
  "wn-expi-1h": "1Hr.",
  "wn-expi-2h": "2Hr.",
  "wn-expi-30d": "30Day",
  "wn-expi-30m": "30Min.",
  "wn-expi-3d": "3Day",
  "wn-expi-6h": "6小时",
  "wn-expi-7d": "7Day",
  "wn-expi-never": "Never",
  "wn-export-c-expi": "Expire in",
  "wn-export-c-expi-tip": "How long to keep temporary files on the server",
  "wn-export-c-mapping": "Mapping",
  "wn-export-c-mapping-phd": "Choose mapping mode",
  "wn-export-c-mapping-tip": "The so-called mapping mode, is how to output the field, including how to specify the field name, field value how to convert",
  "wn-export-c-mode": "Data Range",
  "wn-export-c-mode-all": "All Pages",
  "wn-export-c-mode-checked": "Checked",
  "wn-export-c-mode-current": "Current Page",
  "wn-export-c-name": "Export name",
  "wn-export-c-name-phd": "Enter the export file name",
  "wn-export-c-name-tip": "Export file name. If no suffix is available, it will be auto completed based on Export type",
  "wn-export-c-type": "Export Type",
  "wn-export-c-type-csv": "CSV File",
  "wn-export-c-type-json": "JSON",
  "wn-export-c-type-unknown": "Unknown Export Type",
  "wn-export-c-type-xls": "Spreadsheet",
  "wn-export-c-type-zip": "Zip data",
  "wn-export-choose-fields": "Choose Fields",
  "wn-export-confirm-many": "You want to export a lot of data, this operation may take a long time, continue?",
  "wn-export-done": "Finished",
  "wn-export-done-fail": "Fail To Export",
  "wn-export-done-fail-tip": "Please click to see the error details",
  "wn-export-done-ok": "Export success",
  "wn-export-done-ok-tip": "Please click the link below to download",
  "wn-export-ing": "Processing",
  "wn-export-ing-tip": "The export script is running, please wait for a while",
  "wn-export-open-dir": "Open export history dir...",
  "wn-export-setup": "Export setup",
  "wn-fsc-mail-scene-new": "New a email scenario",
  "wn-fsc-mail-tmpl-new": "Enter new unique name (such as 'signup')",
  "wn-import-WithoutInput": "Please upload the data file to be imported",
  "wn-import-c-expi": "Expi Time",
  "wn-import-c-expi-tip": "How long will the uploaded temporary file remain on the server",
  "wn-import-c-mapping": "Mapping rule",
  "wn-import-c-mapping-phd": "Select a field mapping rule",
  "wn-import-c-mapping-tip": "The so-called mapping rules, is the field output conversion rules, including how to specify the field name, field value how to convert",
  "wn-import-c-mode-all": "All Data",
  "wn-import-confirm-many": "You want to import a lot of data, this operation may take some time, continue?",
  "wn-import-setup": "Import Settings",
  "wn-import-upload": "Upload file",
  "wn-import-upload-xlsx-tip": "Only 'xlsx' files are supported, if 'xls' files, you need to save as 'xlsx' before uploading",
  "wn-invalid-fsize-max": "最大上传文件尺寸为 ${maxSize}，但是您上传的文件尺寸为 ${fileSize}",
  "wn-invalid-fsize-min": "最小上传文件尺寸为 ${minSize}，但是您上传的文件尺寸为 ${fileSize}",
  "wn-invalid-mimes": "Unsupported mime \"${current}\", only \"${supports}\" allowed",
  "wn-invalid-types": "Unsupported type \"${current}\", only \"${supports}\" allowed",
  "wn-key-c": "Creater",
  "wn-key-ct": "Created",
  "wn-key-d0": "D0",
  "wn-key-d1": "D1",
  "wn-key-data": "Data",
  "wn-key-duration": "Duration",
  "wn-key-expi": "Expired",
  "wn-key-g": "Group",
  "wn-key-grp-advance": "Advance",
  "wn-key-grp-basic": "Basic",
  "wn-key-grp-customized": "Customized",
  "wn-key-grp-more": "More",
  "wn-key-grp-others": "Others",
  "wn-key-grp-privilege": "Privilege",
  "wn-key-grp-thumb": "Thumb",
  "wn-key-grp-timestamp": "Timestamp",
  "wn-key-height": "Height",
  "wn-key-icon": "Icon",
  "wn-key-id": "ID",
  "wn-key-len": "Length",
  "wn-key-lm": "Modified",
  "wn-key-m": "Mender",
  "wn-key-md": "Mode",
  "wn-key-mime": "MIME",
  "wn-key-nm": "Name",
  "wn-key-ph": "Path",
  "wn-key-pid": "Parent",
  "wn-key-pvg": "Customized pvg",
  "wn-key-race": "Race",
  "wn-key-sha1": "SHA1",
  "wn-key-thumb": "Thumb",
  "wn-key-title": "Title",
  "wn-key-tp": "Type",
  "wn-key-width": "Width",
  "wn-md-R": "R",
  "wn-md-W": "W",
  "wn-md-X": "X",
  "wn-md-blend-dft": "DEFAILT",
  "wn-md-blend-mode": "Blend Mode",
  "wn-md-blend-strong": "STRONG",
  "wn-md-blend-weak": "WEAK",
  "wn-md-excutable": "Excutable",
  "wn-md-member": "Member",
  "wn-md-other": "Other",
  "wn-md-owner": "Owner",
  "wn-md-readable": "Readable",
  "wn-md-writable": "Writable",
  "wn-o-type-miss-match": "The new file type [${newType}] does not match the original file type [${oldType}]",
  "wn-o-type-miss-match-convimg": "The new image type [${newType}] does not match the original image type [${oldType}], it will be converted automatically. Click \"Yes\" to continue uploading data, click \"No\" to abandon this operation",
  "wn-obj-nosaved": "You have unsaved objects",
  "wn-oc-auto-type": "All types",
  "wn-oc-free": "Please enter the full name, including the extension, such as `myfile.xml`",
  "wn-oc-tip": "New object name",
  "wn-org-new-node": "New Org Node",
  "wn-org-type-G": "Dept",
  "wn-org-type-P": "Position",
  "wn-race-DIR": "DIRECTORY",
  "wn-race-FILE": "FILE",
  "wn-th-acc-pwd-choose-none": "Select the account to reset password (multiple allowed)",
  "wn-th-acc-pwd-done": "Password has been reset for ${n} users",
  "wn-th-acc-pwd-invalid": "Illegal characters found in password",
  "wn-th-acc-pwd-reset-tip": "Reset password to",
  "wn-th-acc-pwd-reset-tip-1": "Reset password of [${name}] to",
  "wn-th-acc-pwd-reset-tip-N": "Reset the passwords of [${name}] and other ${N} accounts to",
  "wn-th-acc-pwd-too-short": "Password too short, no less than 6 digits, better contains alphanumeric & special chars",
  "wn-th-recount-media": "Recalculate file number",
  "wn-th-recount-media-done": "Current number of files: ${n}"
});
//========================================
// JOIN <hmaker.i18n.json> ti/i18n/en-us/hmaker.i18n.json
//========================================
Ti.Preload("ti/i18n/en-us/hmaker.i18n.json", {
  "am-and": " and ",
  "am-blank": " is blank",
  "am-boolFalse": " is false",
  "am-boolTrue": " is true",
  "am-empty": " is empty",
  "am-equals": " equal to ${val}",
  "am-equalsIgnoreCase": " equal ignore case to \"${val}\"",
  "am-equalsType": " type equal to \"${val}\"",
  "am-exists": " has '${val}'",
  "am-findInArray": " contains a object [${val}]",
  "am-gt": " greater than ${val}",
  "am-gte": " greater than or equal to ${val}",
  "am-lt": " less than ${val}",
  "am-lte": " less than or equal to ${val}",
  "am-matchOf": " is matched with '${val}'",
  "am-must-false": " must be false",
  "am-must-true": " must be true",
  "am-nil": " is nil",
  "am-nilOf": " field ${val} is nil",
  "am-noexists": " not exists '${val}'",
  "am-not": " NOT ",
  "am-not-sure": "not sure",
  "am-notEquals": "not equals with ${val} ",
  "am-notMatchOf": "unmatch '${FFFval}'",
  "am-notNil": " not null",
  "am-notNilOf": " field ${val} is NOT null",
  "am-null": " is null",
  "am-nullOf": " field ${val} is null",
  "am-or": " or ",
  "am-undefined": " is undefined",
  "am-undefinedOf": "Field ${val} is undefined",
  "com-form": "Form",
  "com-label": "Label",
  "com-list": "list",
  "hm-am-add": "Add condition",
  "hm-am-empty": "Consition unset",
  "hm-args": "Arguments",
  "hm-args-partial": "Arg partial",
  "hm-args-partial-left": "Partial Left",
  "hm-args-partial-right": "Partial Right",
  "hm-form-options-other-dftval": "Other default",
  "hm-form-options-other-enabled": "Show Other",
  "hm-form-options-other-ph": "Other tip",
  "hm-form-options-other-ph-ph": "Enter other options",
  "hm-form-options-other-text": "Other Text",
  "hm-form-options-other-width": "Other width",
  "hm-type-Array": "Array",
  "hm-type-Boolean": "Boolean",
  "hm-type-Group": "Group",
  "hm-type-Integer": "Integer",
  "hm-type-Number": "Number",
  "hm-type-Object": "Object",
  "hm-type-String": "String",
  "hm-type-icons": {
    "Array": "Zmdi-format-list-bulleted",
    "Boolean": "Zmdi-toll",
    "Group": "Zmdi-collection-bookmark",
    "Integer": "Zmdi-n-6-square",
    "Number": "Zmdi-input-svideo",
    "Object": "Zmdi-toys",
    "String": "Zmdi-translate"
  },
  "hmaker-com-conf-blank": "请选择一个控件设置其详情",
  "hmaker-com-type-blank": "选择一个控件",
  "hmaker-edit-form-del-group-all": "组以及全部字段",
  "hmaker-edit-form-del-group-confirm": "您是要删除组以及其内的全部字段，还是仅是组？",
  "hmaker-edit-form-del-group-only": "仅是组",
  "hmaker-edit-form-field-nil": "请选择一个字段编辑详情",
  "hmaker-edit-form-new-field": "新字段",
  "hmaker-edit-form-new-field-e0": "字段名不能以数字开头，内容只能为小写英文字母数字和下划线",
  "hmaker-edit-form-new-field-e1": "字段【${val}】已存在，请另选一个名称",
  "hmaker-edit-form-new-field-tip": "请输入新字段名（只能为小写英文字母数字和下划线）",
  "hmaker-edit-form-new-group": "新分组",
  "hmaker-edit-form-new-group-tip": "请输入新分组名",
  "hmaker-edit-form-nil-field": "请先选择一个字段",
  "hmaker-edit-form-not-current": "请选择一个字段或者字段组",
  "hmaker-nav-blank-item": "请选择一个导航项目编辑",
  "hmaker-nav-k-display": "链接显示内容",
  "hmaker-nav-k-icon": "链接图标",
  "hmaker-nav-k-title": "链接文字",
  "hmaker-nav-k-type": "链接类型",
  "hmaker-nav-k-value": "链接目标",
  "hmaker-nav-tp-dispatch": "方法调用",
  "hmaker-nav-tp-href": "外部链接",
  "hmaker-nav-tp-page": "站点页面",
  "hmaker-site-k-apiBase": "接口路径",
  "hmaker-site-k-base": "资源路径",
  "hmaker-site-k-captcha": "验证码路径",
  "hmaker-site-k-domain": "所属域",
  "hmaker-site-k-entry": "着陆页",
  "hmaker-site-prop": "站点属性",
  "hmaker-site-state": "站点全局配置",
  "hmaker-site-state-actions": "全局动作表",
  "hmaker-site-state-apis": "接口集",
  "hmaker-site-state-blocks": "预定义布局",
  "hmaker-site-state-general": "通用配置",
  "hmaker-site-state-nav": "全局导航条",
  "hmaker-site-state-router": "页面路由",
  "hmaker-site-state-schema": "预定义控件",
  "hmaker-site-state-utils": "扩展函数",
  "hmaker-site-tree": "站点结构",
  "hmaker-site-tree-loading": "正在加载站点结构...",
  "hmk-adjustDelay": "调整延迟",
  "hmk-album-autofit": "Auto fit width",
  "hmk-album-clrsz": "Clear album size",
  "hmk-album-id": "Album ID",
  "hmk-album-info": "Album information",
  "hmk-album-list-mode": "List Mode",
  "hmk-album-margin": "Album margin",
  "hmk-album-name": "Album name",
  "hmk-album-prop": "Album prop",
  "hmk-album-refresh": "Reload album",
  "hmk-aspect": "外观",
  "hmk-aspect-more": "Aspect",
  "hmk-autoI18n": "国际化",
  "hmk-autofit": "Auto fit width",
  "hmk-autoscale": "Auto scale",
  "hmk-behavior": "行为",
  "hmk-blankAs": "空白样式",
  "hmk-breakLine": "维持换行",
  "hmk-class-at": "Position",
  "hmk-class-at-bottom": "Bottom",
  "hmk-class-at-bottom-left": "Left bottom",
  "hmk-class-at-bottom-right": "Right bottom",
  "hmk-class-at-center": "Center",
  "hmk-class-at-left": "Left",
  "hmk-class-at-right": "Right",
  "hmk-class-at-top": "Top",
  "hmk-class-at-top-left": "Left top",
  "hmk-class-at-top-right": "Right top",
  "hmk-class-flex": "Flex",
  "hmk-class-flex-both": "Both",
  "hmk-class-flex-grow": "Grow",
  "hmk-class-flex-none": "None",
  "hmk-class-flex-shrink": "Shrink",
  "hmk-class-font-size": "Font Size",
  "hmk-class-hover": "Hover effect",
  "hmk-class-hover-to-scale": "Hover Scale",
  "hmk-class-hover-to-up": "Hover Up",
  "hmk-class-hover-to-zoom": "Hover Zoom",
  "hmk-class-item-margin": "Item margin",
  "hmk-class-item-padding": "Item padding",
  "hmk-class-item-space": "Item space",
  "hmk-class-object-fit": "Object fit",
  "hmk-class-object-fit-contain": "Contain",
  "hmk-class-object-fit-cover": "Cover",
  "hmk-class-object-fit-fill": "Fill",
  "hmk-class-object-fit-none": "None",
  "hmk-class-pick": "Edit class selector",
  "hmk-class-sz-lg": "LG",
  "hmk-class-sz-md": "MD",
  "hmk-class-sz-no": "None",
  "hmk-class-sz-sm": "SM",
  "hmk-class-sz-xl": "XL",
  "hmk-class-sz-xs": "XS",
  "hmk-class-text": "Text",
  "hmk-class-text-at": "Text at",
  "hmk-class-text-in": "Inside",
  "hmk-class-text-mode": "Text mode",
  "hmk-class-text-out": "Outside",
  "hmk-class-text-side": "Text side",
  "hmk-class-text-style": "Text style",
  "hmk-class-text-wrap": "Text wrap",
  "hmk-class-text-wrap-auto": "Auto",
  "hmk-class-text-wrap-clip": "Clip",
  "hmk-class-text-wrap-ellipsis": "Ellipsis",
  "hmk-class-title-wrap": "Title wrap",
  "hmk-class-ts-mask": "Mask",
  "hmk-class-ts-shadow": "Shadow",
  "hmk-class-word-break-all": "Break All",
  "hmk-class-word-break-word": "Break Word",
  "hmk-class-word-keep-all": "Keep All",
  "hmk-config-choose": "Choose configuration",
  "hmk-config-nil": "Fail to found configuration",
  "hmk-css-align-center": "Center",
  "hmk-css-align-justify": "Justify",
  "hmk-css-align-left": "Left",
  "hmk-css-align-right": "Right",
  "hmk-css-background": "Background",
  "hmk-css-background-color": "Bg Color",
  "hmk-css-background-image": "Bg Image",
  "hmk-css-background-position": "Bg Pos.",
  "hmk-css-background-position-x": "Bg Pos X",
  "hmk-css-background-position-y": "Bg Pos Y",
  "hmk-css-background-repeat": "Bg Repeat",
  "hmk-css-background-repeat-no": "No repeat",
  "hmk-css-background-repeat-round": "Round",
  "hmk-css-background-repeat-space": "Space",
  "hmk-css-background-repeat-x": "Repeat X",
  "hmk-css-background-repeat-y": "Repeat Y",
  "hmk-css-background-repeat-yes": "Repeat",
  "hmk-css-background-size": "Bg Size",
  "hmk-css-background-size-auto": "Auto",
  "hmk-css-background-size-contain": "Contain",
  "hmk-css-background-size-cover": "Cover",
  "hmk-css-background-size-full": "Full",
  "hmk-css-border": "Border",
  "hmk-css-border-radius": "Radius",
  "hmk-css-box-shadow": "Box shadow",
  "hmk-css-c-auto": "auto",
  "hmk-css-color": "Color",
  "hmk-css-edit": "Edit css",
  "hmk-css-float": "Float",
  "hmk-css-float-left": "Left",
  "hmk-css-float-none": "None",
  "hmk-css-float-right": "Right",
  "hmk-css-font-size": "Font size",
  "hmk-css-font-weight": "Font Weight",
  "hmk-css-g-inherit": "inherit",
  "hmk-css-g-initial": "initial",
  "hmk-css-g-unset": "unset",
  "hmk-css-grp-aspect": "Aspect setup",
  "hmk-css-grp-background": "Background setup",
  "hmk-css-grp-measure": "Measure setup",
  "hmk-css-grp-texting": "Text setup",
  "hmk-css-height": "Height",
  "hmk-css-letter-spacing": "Letter space",
  "hmk-css-line-height": "Line height",
  "hmk-css-margin": "Margin",
  "hmk-css-max-height": "Max height",
  "hmk-css-max-width": "Max width",
  "hmk-css-min-height": "Min height",
  "hmk-css-min-width": "Min width",
  "hmk-css-object-fit": "Obj fit",
  "hmk-css-object-fit-contain": "Contain",
  "hmk-css-object-fit-cover": "Cover",
  "hmk-css-object-fit-fill": "Fill",
  "hmk-css-object-fit-none": "None",
  "hmk-css-object-fit-scale-down": "Scale",
  "hmk-css-object-position": "Obj pos",
  "hmk-css-opacity": "Opacity",
  "hmk-css-overflow": "Overflow",
  "hmk-css-overflow-clip": "clip",
  "hmk-css-overflow-hidden": "hidden",
  "hmk-css-overflow-scroll": "scroll",
  "hmk-css-overflow-visible": "visible",
  "hmk-css-padding": "Padding",
  "hmk-css-text-align": "Text align",
  "hmk-css-text-overflow": "Text overflow",
  "hmk-css-text-overflow-clip": "Clip",
  "hmk-css-text-overflow-ellipsis": "Ellipsis",
  "hmk-css-text-shadow": "Text shadow",
  "hmk-css-text-transform": "Text trans",
  "hmk-css-text-transform-capitalize": "Cap",
  "hmk-css-text-transform-lowercase": "Lower",
  "hmk-css-text-transform-none": "None",
  "hmk-css-text-transform-uppercase": "Upper",
  "hmk-css-white-space": "Word wrap",
  "hmk-css-white-space-break-space": "Keep primary and wrap (except space)",
  "hmk-css-white-space-normal": "Normal",
  "hmk-css-white-space-nowrap": "No wrap",
  "hmk-css-white-space-pre": "Keep primary",
  "hmk-css-white-space-pre-line": "Keep primary and wrap by line",
  "hmk-css-white-space-pre-wrap": "Keep primary and wrap",
  "hmk-css-width": "Width",
  "hmk-currentTab": "Current tab",
  "hmk-data": "Data",
  "hmk-dict": "Dictionary",
  "hmk-editable": "Editable",
  "hmk-fb-album-autofit": "Facebook album auto fit width",
  "hmk-fb-album-clrsz": "Clear facebook album size",
  "hmk-fb-album-id": "Facebook album ID",
  "hmk-fb-album-info": "Facebook album info",
  "hmk-fb-album-margin": "Facebook album margin",
  "hmk-fb-album-name": "Facebook album name",
  "hmk-fb-album-prop": "Facebook album prop",
  "hmk-fb-album-refresh": "Reload Facebook album",
  "hmk-field-checkEquals": "检查相等",
  "hmk-field-com": "编辑控件",
  "hmk-field-defaultAs": "默认值",
  "hmk-field-disabled": "失效条件",
  "hmk-field-height": "高度",
  "hmk-field-hidden": "隐藏条件",
  "hmk-field-icon": "图标",
  "hmk-field-name": "键名",
  "hmk-field-serializer": "自定义保存",
  "hmk-field-tip": "提示说明",
  "hmk-field-title": "显示名",
  "hmk-field-transformer": "自定义转换",
  "hmk-field-type": "类型",
  "hmk-field-width": "宽度",
  "hmk-fieldStatus": "字段状态",
  "hmk-fields": "字段",
  "hmk-fields-advance": "高级",
  "hmk-fields-general": "基本",
  "hmk-float": "Float",
  "hmk-float-clear": "Clear float",
  "hmk-float-left": "Float left",
  "hmk-float-none": "Float none",
  "hmk-float-right": "Float right",
  "hmk-form-data": "Data",
  "hmk-form-height": "Form height",
  "hmk-form-onlyFields": "Fields only",
  "hmk-form-width": "Form width",
  "hmk-format": "Format",
  "hmk-height": "Height",
  "hmk-href": "Link",
  "hmk-icon": "Form icon",
  "hmk-layout-cols": "Columns",
  "hmk-layout-falls": "Falls",
  "hmk-layout-rows": "Rows",
  "hmk-layout-tabs": "Tabs",
  "hmk-layout-wall": "Wall",
  "hmk-margin-center": "Margin center",
  "hmk-margin-lg": "Large margin",
  "hmk-margin-md": "Middle margin",
  "hmk-margin-no": "No margin",
  "hmk-margin-sm": "Small margin",
  "hmk-measure": "Measure",
  "hmk-mode": "Display mode",
  "hmk-mode-all": "All",
  "hmk-mode-tab": "Tab",
  "hmk-newTab": "New tab",
  "hmk-placeholder": "Placeholder",
  "hmk-prefixIcon": "Prefix icon",
  "hmk-prefixText": "Prefix text",
  "hmk-size": "Size",
  "hmk-spacing": "Spacing",
  "hmk-spacing-comfy": "Comfy",
  "hmk-spacing-tiny": "Tiny",
  "hmk-style-adv": "Adv style",
  "hmk-style-brief": "Brief style",
  "hmk-style-exlink": "Ex-Link",
  "hmk-style-image": "Image style",
  "hmk-style-inside": "Inner style",
  "hmk-style-outside": "Outer style",
  "hmk-style-part-left": "Left part",
  "hmk-style-part-right": "Right part",
  "hmk-style-tile": "Tile style",
  "hmk-style-title": "Title style",
  "hmk-suffixIcon": "Suffix icon",
  "hmk-suffixText": "Suffix text",
  "hmk-tabAt": "Tab at",
  "hmk-tabAt-bottom-center": "Bottom Center",
  "hmk-tabAt-bottom-left": "Bottom Left",
  "hmk-tabAt-bottom-right": "Bottom Right",
  "hmk-tabAt-top-center": "Top Center",
  "hmk-tabAt-top-left": "Top Left",
  "hmk-tabAt-top-right": "Top Right",
  "hmk-title": "Form title",
  "hmk-trimed": "Trimed",
  "hmk-value": "Value",
  "hmk-valueMaxWidth": "Val Max-W",
  "hmk-w-edit-album-autoopen": "Auto open",
  "hmk-w-edit-album-fullpreview": "Full screen",
  "hmk-w-edit-album-prop": "Edit album properties",
  "hmk-w-edit-alt-style": "Alt style",
  "hmk-w-edit-attachment": "Attachment",
  "hmk-w-edit-attachment-clrsz": "Clear attachment size",
  "hmk-w-edit-attachment-margin": "Attachment margin",
  "hmk-w-edit-attachment-prop": "Attachment prop",
  "hmk-w-edit-audio-clrsz": "Clear audio size",
  "hmk-w-edit-audio-margin": "Audio margin",
  "hmk-w-edit-audio-prop": "Audio properties",
  "hmk-w-edit-fb-album-prop": "Edit facebook album properties",
  "hmk-w-edit-img-clrsz": "Clear image size",
  "hmk-w-edit-img-info": "Image info",
  "hmk-w-edit-img-link": "Image Link",
  "hmk-w-edit-img-link-tip": "Such as: http://xxxx",
  "hmk-w-edit-img-margin": "Image magin",
  "hmk-w-edit-img-newtab": "Newtab",
  "hmk-w-edit-img-pic": "Picture",
  "hmk-w-edit-img-prop": "Image prop",
  "hmk-w-edit-img-style": "Edit image style",
  "hmk-w-edit-img-title": "Image title",
  "hmk-w-edit-img-title-tip": "Please enter image title",
  "hmk-w-edit-video-clrsz": "Clear video size",
  "hmk-w-edit-video-margin": "Video margin",
  "hmk-w-edit-video-prop": "Video prop",
  "hmk-w-edit-yt-playlist": "Edit playlist properties",
  "hmk-w-edit-yt-video": "Edit Youtube video proerties",
  "hmk-w-edit-yt-video-features": "Video features",
  "hmk-width": "Width",
  "hmk-yt-playlist-autofit": "YT playlist auto fit width",
  "hmk-yt-playlist-clrsz": "Clear YT playlist size",
  "hmk-yt-playlist-id": "Playlist ID",
  "hmk-yt-playlist-info": "YT playlist info",
  "hmk-yt-playlist-margin": "YT playlist margin",
  "hmk-yt-playlist-name": "Playlist name",
  "hmk-yt-playlist-prop": "YT playlist prop",
  "hmk-yt-playlist-refresh": "Reload YT playlist",
  "hmr-add-action": "Add New Action",
  "hmr-add-react-item": "Add React Item",
  "hmr-t-exec": "Run Script",
  "hmr-t-jsc": "Run JS",
  "hmr-t-obj_clear": "Clear Obj",
  "hmr-t-obj_create": "Create Obj",
  "hmr-t-obj_delete": "Delete Obj",
  "hmr-t-obj_update": "Update Obj",
  "hmr-t-thing_clear": "Clear Thing",
  "hmr-t-thing_create": "Create Thing",
  "hmr-t-thing_delete": "Delete Thing",
  "hmr-t-thing_update": "Update Thing",
  "react-action-add": "Add Action",
  "react-action-empty": "No action items defined",
  "vt-Array": "Array",
  "vt-BoolVar": "Bool Var",
  "vt-Boolean": "Boolean",
  "vt-Function": "Function",
  "vt-GetVar": "Get Var",
  "vt-Invoking": "Invoking",
  "vt-Null": "Null",
  "vt-Number": "Number",
  "vt-Object": "Object",
  "vt-String": "String",
  "vt-Tmpl": "Template",
  "vt-Undefined": "Undefined"
});
//========================================
// JOIN <ti-datetime.i18n.json> ti/i18n/en-us/ti-datetime.i18n.json
//========================================
Ti.Preload("ti/i18n/en-us/ti-datetime.i18n.json", {
  "Apr": "April",
  "Aug": "August",
  "Dec": "December",
  "Feb": "February",
  "Fri": "Fri",
  "Friday": "Friday",
  "Jan": "January",
  "Jul": "July",
  "Jun": "June",
  "Mar": "March",
  "May": "May",
  "Mon": "Mon",
  "Monday": "Monday",
  "Nov": "November",
  "Oct": "October",
  "Sat": "Sat",
  "Saturday": "Saturday",
  "Sep": "September",
  "Sun": "Sun",
  "Sunday": "Sunday",
  "Thu": "Thu",
  "Thursday": "Thursday",
  "Tue": "Tue",
  "Tuesday": "Tuesday",
  "Wed": "Wed",
  "Wednesday": "Wednesday",
  "blank-date": "Select a date",
  "blank-date-range": "Select a date range",
  "blank-datetime": "Select datetime",
  "blank-month": "Select month",
  "blank-time": "Select time",
  "blank-time-range": "Select a time range",
  "cal": {
    "abbr": {
      "Apr": "Apr",
      "Aug": "Aug",
      "Dec": "Dec",
      "Feb": "Feb",
      "Jan": "Jan",
      "Jul": "Jul",
      "Jun": "Jun",
      "Mar": "Mar",
      "May": "May",
      "Nov": "Nov",
      "Oct": "Oct",
      "Sep": "Sep"
    },
    "d-range-beyond-days": "${yy0}-${MM0}-${dd0} to ${dd1}",
    "d-range-beyond-months": "${yy0}-${MM0}-${dd0} to ${MM1}-${dd1}",
    "d-range-beyond-years": "${yy0}-${MM0}-${dd0} to ${yy1}-${MM1}-${dd1}",
    "d-range-in-same-day": "${yy0}-${MM0}-${dd0} whole day",
    "m-range-beyond-months": "${yy0}-${MT0} to ${MT1}",
    "m-range-beyond-years": "${yy0}-${MT0} to ${yy1}-${MT1}",
    "week": ["S", "M", "T", "W", "T", "F", "S"]
  },
  "date-fmt": "yyyy-MM-dd",
  "dt-range-from": "From",
  "dt-range-to": "to",
  "dt-range-unknown": "Unknown time range",
  "du-in-min": "${n}Min",
  "time": {
    "any-time": "yyyy-M-d",
    "in-year": "M-dd",
    "past-in-min": "Just now",
    "past-in-hour": "In ${min}mins",
    "past-in-day": "In ${hour}hours",
    "past-in-week": "In ${day}days",
    "future-in-min": "Soon",
    "future-in-hour": "After ${min}mins",
    "future-in-day": "After ${hour}hours",
    "future-in-week": "After ${day}days"
  },
  "time-begin": "Begin Time",
  "time-end": "End Time",
  "time-ms": "Ms",
  "today": "Today",
  "tu-day": "Day",
  "tu-hou": "Hr",
  "tu-min": "Min",
  "tu-mon": "Month",
  "tu-sec": "Sec",
  "tu-week": "Week",
  "tu-year": "Year"
});
//========================================
// JOIN <ti-text-editor.i18n.json> ti/i18n/en-us/ti-text-editor.i18n.json
//========================================
Ti.Preload("ti/i18n/en-us/ti-text-editor.i18n.json", {
  "wordp-h0": "Main",
  "wordp-h1": "Heading 1",
  "wordp-h2": "Heading 2",
  "wordp-h3": "Heading 3",
  "wordp-h4": "Heading 4",
  "wordp-h5": "Heading 5",
  "wordp-h6": "Heading 6",
  "wordp-heading": "Heading levels",
  "wordp-link": "Hyperlink",
  "wordp-nil-sel": "Please select a paragraph first"
});
//========================================
// JOIN <web.i18n.json> ti/i18n/en-us/web.i18n.json
//========================================
Ti.Preload("ti/i18n/en-us/web.i18n.json", {
  "account": "Account",
  "account-add": "Add account",
  "account-flt-tip": "Filter by account name",
  "account-manage": "Accounts",
  "account-meta": "Account properties",
  "account-meta-tip": "Choose an account for detail",
  "address-consignee": "Consignee",
  "address-empty-list": "No shipping address",
  "address-flt-tip": "Filter by address name",
  "address-is-dft": "Default shipping address",
  "address-k-area": "Area",
  "address-k-city": "City",
  "address-k-code": "Addr code",
  "address-k-code-tip": "Your postcode",
  "address-k-consignee": "Consignee",
  "address-k-country": "Country",
  "address-k-dftaddr": "Default address",
  "address-k-door": "Door",
  "address-k-email": "Email",
  "address-k-phone": "Phone",
  "address-k-postcode": "Postcode",
  "address-k-province": "Province",
  "address-k-street": "Street",
  "address-k-title": "Address",
  "address-k-tp": "Addr Type",
  "address-k-tp-s": "SELLER",
  "address-k-tp-u": "USER",
  "address-k-uid": "User",
  "address-k-uid-tip": "Filter by username",
  "address-meta": "Address properties",
  "address-nil": "Address blank",
  "address-nil-detail": "Select an address for details",
  "address-rm-confirm": "Are you sure you want to delete this address?",
  "address-set-dft": "Set as default address",
  "address-shipping-add": "Add shipping address",
  "admin-flt-tip": "Filter by admin name",
  "admin-meta": "Admin properties",
  "admin-new": "New admin",
  "admin-nickname": "Admin nickname",
  "admin-no-detail": "Select an admin for detail",
  "ar-cate": "Catetory",
  "ar-content": "Content",
  "ar-duration": "Reading time",
  "ar-flt-tip": "Filter by article title",
  "ar-meta": "Article property",
  "ar-meta-tip": "Choose an article for detail",
  "ar-new": "New article",
  "ar-nm": "Name",
  "ar-pubat": "Publish at",
  "ar-thumb": "Thumbnail",
  "ar-title": "Title",
  "ar-watch-c": "Watch count",
  "auth-bind": "Bind",
  "auth-bind-email-title": "Bind email",
  "auth-bind-phone-title": "Bind phone",
  "auth-blank-email": "Blank email address not allowed",
  "auth-blank-name": "Blank name not allowed",
  "auth-blank-name-passwd": "Blank name or password",
  "auth-blank-phone": "Blank phone number not allowd",
  "auth-doing": "Verifying",
  "auth-email-tip": "Email address",
  "auth-email-title": "Sign by email",
  "auth-email-vcode": "Email password",
  "auth-email-vcode-get": "Get email password",
  "auth-go-email": "Sign by email",
  "auth-go-passwd": "Sign in by password",
  "auth-go-phone": "Sign by sms",
  "auth-login": "Sign in",
  "auth-login-NoSaltedPasswd": "Please switch to sign by [${ta?password}]，after sign in, go to [profile > reset password] to setup your password, thanks.",
  "auth-login-or-signup": "Sign up or sign in",
  "auth-logout-confirm": "Are you sure you want to log out?",
  "auth-ok": "Verify successful",
  "auth-passwd-getback": "Get back password",
  "auth-passwd-name-email-tip": "Email/Name",
  "auth-passwd-name-phone-tip": "Phone/Name",
  "auth-passwd-tip": "Password",
  "auth-passwd-title": "Sign in by password",
  "auth-phone-tip": "Phone number",
  "auth-phone-title": "Sign by sms",
  "auth-phone-vcode": "SMS password",
  "auth-phone-vcode-get": "Get sms password",
  "auth-reset-passwd": "Reset password ...",
  "auth-reset-passwd-again": "Reset password again",
  "auth-reset-passwd-btn-invalid": "Illegal characters",
  "auth-reset-passwd-btn-lack": "Lack information",
  "auth-reset-passwd-btn-ready": "Reset password",
  "auth-reset-passwd-btn-short": "Password too short (at least 6 chars)",
  "auth-reset-passwd-btn-unmatch": "The password is not consistent",
  "auth-reset-passwd-by-email": "Reset password by email",
  "auth-reset-passwd-by-email-sent": "The email password has been sent to your registered email address ${email}",
  "auth-reset-passwd-by-email-tip": "Registered email address",
  "auth-reset-passwd-by-passwd": "Reset by old password",
  "auth-reset-passwd-by-phone": "Reset by sms",
  "auth-reset-passwd-by-phone-sent": "The sms password has been sent to your mobile phone ${phone}",
  "auth-reset-passwd-by-phone-tip": "Registered phone number",
  "auth-reset-passwd-ing": "Reseting password ...",
  "auth-reset-passwd-lack-email": "Please enter your registered email address",
  "auth-reset-passwd-lack-phone": "Please enter your registered mobile phone number",
  "auth-reset-passwd-new": "New password (at least 6 chars)",
  "auth-reset-passwd-ok": "The password has been reset and will take effect the next time you log in",
  "auth-reset-passwd-old": "Old password",
  "auth-reset-passwd-ren": "Reconfirm",
  "auth-sending-vcode": "Sending verification code",
  "auth-sent-ok": "${ta?Password} has been sent, please check in ${by} in ${min} minutes",
  "auth-ta-by-email": "Your email",
  "auth-ta-by-phone": "Your sms",
  "auth-ta-email": "Email password",
  "auth-ta-phone": "SMS password",
  "auth-vcode-delay": "Resend after ${sec}s",
  "auth-vcode-lost": "Can't get password?",
  "base-info": "Base info",
  "blog": "Blog",
  "blog-manage": "Blog management",
  "buy-checkout-nil": "You have nothing to checkout",
  "cate": "Category",
  "cate-flt-tip": "Filter by category name",
  "cate-maj": "Major category",
  "cate-meta": "Category properties",
  "cate-new": "New category",
  "cate-nil-tip": "Select a category",
  "cate-no-detail": "Select a category for details",
  "cate-pa": "Parent category",
  "cate-pa-nil": "Select a parent category",
  "cate-sub": "Child category",
  "cate-sub-nil": "Select a child category",
  "cate-val": "Category value",
  "cmt-brief": "Comment brief",
  "cmt-content": "Comment content",
  "cmt-flt-tip": "Filter by a user id or comment",
  "cmt-meta": "Comment properties",
  "cmt-no-detail": "Select a role for detail",
  "cmt-target": "Comment target",
  "cmt-type": "Comment type",
  "cmt-user": "Comment account",
  "comments": "COMMENTS",
  "cover": "Cover",
  "cover-pic": "Cover pic",
  "detail-info": "Detail info",
  "dir-media": "Media dir",
  "e-cmd-passwd-old_invalid": "Old Password Invalid",
  "e-cmd-www_passwd-Blank": "Blank new password not allowed",
  "e-cmd-www_passwd-CheckBlankAccount": "Blank account",
  "e-cmd-www_passwd-CheckBlankCode": "Blank code",
  "e-cmd-www_passwd-CheckCodeFail": "Invalid code",
  "e-cmd-www_passwd-CheckFailed": "Verify failed",
  "e-cmd-www_passwd-CheckWeirdAccount": "Weird account",
  "e-cmd-www_passwd-InvalidNewPasswd": "Invalid new password",
  "e-cmd-www_passwd-LackTarget": "Missing target",
  "e-cmd-www_passwd-TooShort": "The new password is too short",
  "e-cmd-www_passwd-nopvg": "No permission to reset passwords",
  "e-run-action-test-fail": "Insufficient action preconditions",
  "e-www-captcha-fail_send_by_email": "The email failed to send. Please check the account",
  "e-www-invalid-captcha": "Invalid ${ta?captcha}",
  "e-www-login-invalid-passwd": "Invalid password",
  "e-www-login-noexists": "Account not exists",
  "e-www-order-OutOfStore": "Goods ${val?} insufficient stock",
  "invoice-k-bankaccount": "Bank account",
  "invoice-k-bankname": "Bank",
  "invoice-k-busiaddr": "Biz address",
  "invoice-k-busiphone": "Biz phone",
  "invoice-k-invdft": "Default title",
  "invoice-k-invtfn": "TFN",
  "invoice-k-invtitle": "Invoice title",
  "invoice-k-type": "Invoice Type",
  "invoice-k-uemail": "Taker email",
  "invoice-k-uid": "Owner account",
  "invoice-k-uid-tip": "Filter by username",
  "invoice-k-uname": "Taker name",
  "invoice-k-uphone": "Taker phone",
  "invoice-kg-bank": "Bank info",
  "invoice-kg-busi": "Biz info",
  "invoice-kg-inv": "Invoice info",
  "invoice-kg-u": "Taker info",
  "k-ct-date": "Create date",
  "k-lm": "Last modifed",
  "me-k-account": "Account",
  "me-k-avatar": "Avatar",
  "me-k-city": "City",
  "me-k-country": "Country",
  "me-k-dept": "Department",
  "me-k-email": "Email",
  "me-k-job": "Jobs",
  "me-k-job-tip": "Select jobs",
  "me-k-login": "Login",
  "me-k-nickname": "Nickname",
  "me-k-nm": "Login name",
  "me-k-phone": "Phone",
  "me-k-role": "Role",
  "me-k-sex": "Gender",
  "mine": "Mine",
  "my-favors": "My favorite",
  "my-favors-blog": "Favorite blog",
  "my-favors-goods": "Favorite goods",
  "my-favors-posts": "Favorite posts",
  "my-favors-spots": "Favorite spots",
  "my-favors-video": "Favorite video",
  "my-orders": "My orders",
  "my-orders-shop": "Shopping orders",
  "my-orders-video": "VOD order",
  "my-passwd": "Reset password",
  "my-profile": "My profile",
  "my-shipping-address": "Shipping address",
  "my-shopping-car": "Shopping car",
  "or-st-ca": "Canceled",
  "or-st-dn": "Done",
  "or-st-fa": "Fail to create order",
  "or-st-nw": "New order",
  "or-st-ok": "Pay ok",
  "or-st-sp": "Shipped",
  "or-st-wt": "Wait for pay",
  "ord-detail": "Order detail",
  "order-flt-tip": "Query by order id",
  "order-k-accounts": "Accounts",
  "order-k-addr_ship": "Ship address",
  "order-k-addr_ship_code": "Ship code",
  "order-k-addr_ship_country": "Ship country",
  "order-k-addr_ship_door": "Ship door",
  "order-k-addr_user": "User address",
  "order-k-addr_user_area": "Area",
  "order-k-addr_user_city": "City",
  "order-k-addr_user_code": "User code",
  "order-k-addr_user_country": "User country",
  "order-k-addr_user_door": "User door",
  "order-k-addr_user_province": "Province",
  "order-k-addr_user_street": "Street",
  "order-k-buyer_id": "Buyer",
  "order-k-ca_at": "Cancel at",
  "order-k-currency": "Currency",
  "order-k-discount": "Discount",
  "order-k-dn_at": "Done at",
  "order-k-fa_at": "Fail at",
  "order-k-fee": "Payment amount",
  "order-k-freight": "Freight",
  "order-k-freight-m": "Alt Freight",
  "order-k-freight-m-tip": "Enter 0 to waive shipping costs",
  "order-k-id": "Order id",
  "order-k-invoice": "Invoice",
  "order-k-nominal": "Nominal",
  "order-k-note": "Note",
  "order-k-ok_at": "OK at",
  "order-k-pay_id": "Payment id",
  "order-k-pay_tp": "Pay type",
  "order-k-payment": "Total",
  "order-k-prefee": "Base price",
  "order-k-prefee-m": "Alt Total",
  "order-k-prefee-m-tip": "Enter the new total price",
  "order-k-price": "Order price",
  "order-k-pro-amount": "Amount",
  "order-k-pro-price": "Price",
  "order-k-pro-retail": "Retail",
  "order-k-pro-subretail": "Sub-Retail",
  "order-k-pro-subtotal": "Subtotal",
  "order-k-pro-title": "Product Title",
  "order-k-products": "Goods",
  "order-k-profit": "Profit",
  "order-k-seller": "Seller",
  "order-k-sp_at": "Shipping at",
  "order-k-st": "Order status",
  "order-k-title": "Order title",
  "order-k-total": "Total",
  "order-k-user_email": "User email",
  "order-k-user_name": "User name",
  "order-k-user_phone": "User phone",
  "order-k-waybil": "Waybil",
  "order-k-waybil_com": "Waybil COM",
  "order-k-waybil_nb": "Waybil NB",
  "order-k-wt_at": "Pay at",
  "order-nil-detail": "Please select an order for details",
  "order-pay-id": "Pay ID",
  "order-pay-status": "Payment status",
  "order-shipaddr-nil": "Please specify a shipping address",
  "passwd-invalid-char": "Passwords can only include english numbers/upper and lower case letters/and special characters",
  "passwd-sl-1": "Weak",
  "passwd-sl-2": "Weaker",
  "passwd-sl-3": "Normal",
  "passwd-sl-4": "Stronger",
  "passwd-sl-5": "Strong",
  "passwd-tip": "Please enter a combination of english numerals/upper and lower case letters/special characters with a minimum of 6 characters",
  "pay-by-free": "Free",
  "pay-by-paypal": "PayPal",
  "pay-by-wx-jsapi": "WeChat jsapi",
  "pay-by-wx-qrcode": "WeChat scan code",
  "pay-by-wx-scan": "WeChat payment code",
  "pay-by-zfb-qrcode": "Alipay scan code",
  "pay-by-zfb-scan": "Alipay payment code",
  "pay-checkout-it-amount": "Amount",
  "pay-checkout-it-name": "Name",
  "pay-checkout-it-price": "Price",
  "pay-checkout-it-subtotal": "Subtotal",
  "pay-checkout-tip": "Please confirm the quantity and amount of your purchase",
  "pay-paypal": "PayPal",
  "pay-proceed-check": "Check payment",
  "pay-proceed-ing": "Checking for...",
  "pay-re-fail": "Payment failure",
  "pay-re-nil": "The payoff is a schrodinger's cat",
  "pay-re-ok": "Payment success",
  "pay-re-wait": "Pending payment",
  "pay-step-checkout-title": "Confirm order",
  "pay-step-choose-nil": "☝ please select one of the above payment methods 👆",
  "pay-step-choose-tip": "You may choose any of the following payment methods to pay for this order",
  "pay-step-choose-tip2": "You will pay for this order using ${val}",
  "pay-step-choose-title": "Mode of payment",
  "pay-step-choose-title2": "Choose payment",
  "pay-step-done-title": "Done",
  "pay-step-proceed-create-order": "Creating order ...",
  "pay-step-proceed-fetch-order": "Getting order ...",
  "pay-step-proceed-nil": "Please choose a method of payment",
  "pay-step-proceed-tip": "Pay for this order with ${val}",
  "pay-step-proceed-title": "Pay",
  "pay-tip-wx-qrcode": "Please pay in wechat scan within 15 minutes",
  "pay-tip-zfb-qrcode": "Please pay by alipay scan code within 15 minutes",
  "pay-title": "Payment",
  "pay-wx": "WeChat",
  "pay-zfb": "Alipay",
  "paypal-amount_value": "Payment Amount",
  "paypal-approve-tip": "Already in the new tab for you to open the paypal payment page, if there is no open, please click on ☝ the icon above. after payment, the page will automatically perceive, if there is no response, try to click 👇 [check payment] button below.",
  "paypal-cap-id": "Capture ID",
  "paypal-cap-status": "Capture status",
  "paypal-currency": "Currency",
  "paypal-id": "PayPal TID",
  "paypal-payer_email": "Payer email",
  "paypal-payer_id": "Payer ID",
  "photo": "Photo",
  "post-content-blank": "The content you post cannot be empty or less than 10 words",
  "profile-title": "My profile",
  "pubat": "Release date",
  "read-du": "Reading spend",
  "role": "Role",
  "role-add": "Add role",
  "role-as-domain": "Domain role",
  "role-as-domain-admin": "Admin",
  "role-as-domain-guest": "Guest",
  "role-as-domain-member": "Member",
  "role-as-guest": "Guest",
  "role-as-normal": "Normal",
  "role-as-op": "Op role",
  "role-as-vip": "VIP",
  "role-dft": "Default role",
  "role-flt-tip": "Filter by role name",
  "role-manage": "Roles",
  "role-meta": "Role propery",
  "role-meta-tip": "Choose an role for detail",
  "role-name": "Role name",
  "role-select-tip": "Select role",
  "role-val": "Role value",
  "shop-basket-clean-confirm": "Are you sure you want to empty the shopping cart? this is an operation that cannot be undone.",
  "shop-basket-remove-confirm": "Are you sure you want to remove this item from your shopping cart?",
  "topic": "Topic",
  "type-new": "New type",
  "video-title": "Video title",
  "watch_c": "View count",
  "waybil-com-ane": "AN NENG Logistics",
  "waybil-com-best": "BAISHI Express",
  "waybil-com-db": "DE BANG Express",
  "waybil-com-ems": "EMS Logistics",
  "waybil-com-jdl": "JING DONG Logistics",
  "waybil-com-pj": "PIN JUN Express",
  "waybil-com-sf": "SHUN FENG Express",
  "waybil-com-sto": "SHEN TONG Express",
  "waybil-com-uce": "YOU SU Express",
  "waybil-com-yto": "YUAN TONG Express",
  "waybil-com-yunda": "YUN DA Express",
  "waybil-com-zto": "ZHONG TONG Express"
});
//========================================
// JOIN <wn-manager.i18n.json> ti/i18n/en-us/wn-manager.i18n.json
//========================================
Ti.Preload("ti/i18n/en-us/wn-manager.i18n.json", {
  "ti-loading": "Load...",
  "wn-adaptlist": "Object explorer",
  "wn-create-fail": "Fail to create",
  "wn-create-invalid": "Illegal characters in object name",
  "wn-create-ok": "Create ok",
  "wn-create-too-long": "Object name too long",
  "wn-del-confirm": "Are you sure you want to delete the selected ${N} items? This is an irrevocable operation!",
  "wn-del-item": "Deleting: \"${name}\"",
  "wn-del-no-empty-folder": "The directory \"${nm}\" is not empty, do you want to delete all? click \"no\" to skip",
  "wn-del-none": "Please select at least one file to delete!",
  "wn-del-ok": "${N} objects have been removed",
  "wn-download-dir": "Object \"${nm}\" is a directory, click \"continue\" to skip it and download the next file, and click \"terminate\" to end this operation!",
  "wn-download-none": "Please select at least one file to download!",
  "wn-download-too-many": "We are going to download ${n} files one by one. continue?",
  "wn-expose-hidden-off": "Not show hidden objects",
  "wn-expose-hidden-on": "Show hidden objects",
  "wn-gui": "General gui",
  "wn-list-view-type": "View Type",
  "wn-manager-is-loading": "Manager is loading",
  "wn-manager-no-meta": "Manager without meta data",
  "wn-move-to-confirm": "Are you sure you want to move the selected ${N} items? This is an irrevocable operation!",
  "wn-move-to-none": "Please select at least one file to move!",
  "wn-move-to-ok": "${N} objects have been moved",
  "wn-obj-preview": "Object preview",
  "wn-obj-puretext": "Plain text editor",
  "wn-obj-single-com": "Single control test suite",
  "wn-publish-done": "Publish success",
  "wn-publish-to-nil": "No publish target is set",
  "wn-publish-to-noexist": "The publish target does not exist",
  "wn-rename": "Rename object \"${name}\"",
  "wn-rename-fail": "Rename failed",
  "wn-rename-invalid": "The name cannot contain illegal characters",
  "wn-rename-none": "Please select a file to rename!",
  "wn-rename-ok": "Rename successful",
  "wn-rename-suffix-changed": "Your file suffix name has changed. do you need to complete the original suffix for you automatically?",
  "wn-rename-too-long": "The name is too long",
  "wn-thing-manager": "Data manager",
  "wn-view-opening": "Loading gui..."
});
//========================================
// JOIN <wn-obj-preview.i18n.json> ti/i18n/en-us/wn-obj-preview.i18n.json
//========================================
Ti.Preload("ti/i18n/en-us/wn-obj-preview.i18n.json", {
  "wop-fullscreen-enter": "Enter fullscreen",
  "wop-fullscreen-quit": "Exit fullscreen"
});
//========================================
// JOIN <wn-thing.i18n.json> ti/i18n/en-us/wn-thing.i18n.json
//========================================
Ti.Preload("ti/i18n/en-us/wn-thing.i18n.json", {
  "e-thing-ukey-duplicated": "Unique key exists",
  "thing-clean": "Empty the recycle bin",
  "thing-cleaning": "Cleaning...",
  "thing-content": "Object content",
  "thing-content-hide": "Hide content",
  "thing-content-show": "Show content",
  "thing-create": "New object",
  "thing-create-in-recyclebin": "Exit recycle bin before create object",
  "thing-enter-recyclebin": "Enter recyclebin",
  "thing-files": "Object files",
  "thing-files-attachment": "Attachments",
  "thing-files-hide": "Hide files",
  "thing-files-media": "Medias",
  "thing-files-show": "Show files",
  "thing-filter-kwdplhd": "Enter the query criteria",
  "thing-leave-recyclebin": "Leave recyclebin",
  "thing-meta": "Object properties",
  "thing-meta-hide": "Hide properties",
  "thing-meta-show": "Show properties",
  "thing-recycle-bin": "Recycle bin",
  "thing-restore": "Restore",
  "thing-restore-none": "Select the data you want to recover first",
  "thing-restoring": "Restoring..."
});
//========================================
// JOIN <_net.i18n.json> ti/i18n/en-us/_net.i18n.json
//========================================
Ti.Preload("ti/i18n/en-us/_net.i18n.json", {
  "net-ct": "Created",
  "net-fb-reload-album-cover": "Force reload album cover",
  "net-fb-relogin": "Relogin FB account",
  "net-flt-nil": "Query by name",
  "net-vod-add-video": "Add video",
  "net-vod-cate": "Category",
  "net-vod-du-long": "Long video",
  "net-vod-du-short": "Short video",
  "net-vod-du-tv": "TV",
  "net-vod-duration": "Duration",
  "net-vod-size": "Video size",
  "net-vod-video-nil": "Please choose one video for detail",
  "net-youtube": "Youtube",
  "net-youtube-add-video": "Add youtube video"
});
//========================================
// JOIN <_ti.i18n.json> ti/i18n/en-us/_ti.i18n.json
//========================================
Ti.Preload("ti/i18n/en-us/_ti.i18n.json", {
  "add": "Add",
  "add-item": "New item",
  "add-now": "Add Now",
  "add-watch": "Add Monitor",
  "add-watch-clear": "Clear All",
  "add-watch-create": "Create New Montitor",
  "add-watch-create-tip": "Please enter a monitoring name",
  "add-watch-exists": "This name already exists, please change another",
  "add-watch-remove": "Remove Current",
  "add-watch-tip": "Saves the current search criteria to local storage",
  "album": "Album",
  "album-add": "Add album",
  "album-clrsz": "Clear album size",
  "album-insert": "Insert album",
  "album-margin": "Album margin",
  "album-prop": "Album prop",
  "album-refresh": "Refresh album",
  "albums": "Albums",
  "all": "All",
  "allowfullscreen": "Allow fullscreen",
  "amount": "Amount",
  "attachment": "Attachment",
  "attachment-add": "Add attachmemt",
  "attachment-insert": "Insert attachment",
  "attachments": "Attachments",
  "audio": "Audio",
  "audio-add": "Add audio",
  "audio-insert": "Insert audio",
  "audios": "Audios",
  "avatar": "Avatar",
  "back": "Back",
  "back-to-list": "Back to list",
  "banner": "Banner",
  "batch-none": "Please choose at least one item for batch updating",
  "batch-update": "Batch update",
  "blank": "BLANK",
  "blank-to-edit": "Please choose item for editing",
  "bottom": "Bottom",
  "brief": "Brief",
  "brief-d": "Brief",
  "brief-i": "Brief",
  "buy": "Buy",
  "buy-now": "Buy now",
  "cancel": "Cancel",
  "cancel-all": "Cancel all",
  "candidate": "Candidations",
  "captcha": "Captcha",
  "captcha-chagne": "Next",
  "captcha-tip": "Please enter the captcha",
  "center": "Center",
  "chart": "Chart",
  "chart-bar": "Bar Chart",
  "chart-line": "Line Chart",
  "chart-pie": "Pie Chart",
  "chart-rank": "Rank Chart",
  "check-tip-all": "All selected, click to cancel",
  "check-tip-none": "Click to select all",
  "check-tip-part": "Partial selected, click to select all",
  "checked": "Checked",
  "choose": "Select",
  "choose-fields": "Select fields",
  "choose-file": "Select file",
  "choose-obj": "Select object",
  "clean": "Clean",
  "clear": "Clear",
  "clone": "Clone",
  "clone-copy": "Clone copy",
  "close": "Close",
  "color": "Color",
  "confirm": "Confirm",
  "confirm-change": "Confirm Change",
  "console": "Console",
  "content": "Content",
  "content-setup": "Content setup",
  "continue": "Continue",
  "copy": "Copy",
  "copy-all": "Copy all",
  "create": "New",
  "create-now": "Create now",
  "creating": "Creating",
  "currency": "货币",
  "currency-AUD": "AUD",
  "currency-CAD": "CAD",
  "currency-EUR": "EUR",
  "currency-GBP": "GBP",
  "currency-HKD": "HKD",
  "currency-JPY": "JPY",
  "currency-MOP": "MOP",
  "currency-RMB": "RMB",
  "currency-USD": "USD",
  "customize": "Customize",
  "date": "Date",
  "db-col-type-AUTO": "AUTO",
  "db-col-type-BINARY": "BINARY",
  "db-col-type-BOOLEAN": "BOOLEAN",
  "db-col-type-CHAR": "CHAR",
  "db-col-type-FLOAT": "FLOAT",
  "db-col-type-INT": "INT",
  "db-col-type-TEXT": "TEXT",
  "db-col-type-TIMESTAMP": "TIMESTAMP",
  "db-col-type-VARCHAR": "VARCHAR",
  "debug": "Debug",
  "default": "Default",
  "del": "Delete",
  "del-checked": "Delete selected",
  "del-hard": "The selected item will be deleted directly. this operation is irrevocable. are you sure you want to continue?",
  "del-ing": "Deleting...",
  "del-none": "Please choose at least one item for deleting",
  "del-not-empty-dir": "There are ${N} folders [${tip}] in your selected object that are not empty. Are you sure you want to delete them and their entire contents?",
  "dept-add": "Add Dept",
  "desktop": "Desktop",
  "detail": "Detail",
  "dis-name": "Display name",
  "disable": "Disable",
  "disabled": "Disabled",
  "doing": "Processing...",
  "download": "Download",
  "download-to-local": "Download to local",
  "drop-file-here-to-upload": "Drop file here to upload",
  "drop-here": "Drop here",
  "dt-in": "in ${val}",
  "dt-u-day": "Day",
  "dt-u-hour": "Hour",
  "dt-u-min": "Min",
  "dt-u-month": "Month",
  "dt-u-ms": "Milliseconds",
  "dt-u-sec": "Seconds",
  "dt-u-week": "Week",
  "dt-u-year": "Year",
  "duplicate": "Duplicate",
  "e-auth-account-noexists": "Account not exists",
  "e-auth-home-forbidden": "Auth home forbidden",
  "e-auth-login-NoPhoneOrEmail": "Invalid phone number or email address",
  "e-auth-login-NoSaltedPasswd": "Password without salting",
  "e-auth-login-invalid-passwd": "Invalid password",
  "e-data-InvalidScope": "Invalid data range! The valid format is similar to: 1-20 but you entered:",
  "e-export_data-ConfirmBigLimit": "You want to export a lot of data, it may take a while, should we continue?",
  "e-export_data-UnknownMode": "Unknown Export Mode",
  "e-form-incomplete": "Form Incomplete : [${title}:${name}]  ${tip}",
  "e-io-forbidden": "IO Forbidden",
  "e-io-obj-BlankName": "The object name CANNOT be empty",
  "e-io-obj-InvalidName": "Invalid object name",
  "e-io-obj-exists": "Object already exists",
  "e-io-obj-noexists": "Object does't exists",
  "e-io-obj-noexistsf": "Object[${nm}] does't exists",
  "e-io-rm-NoEmptyDir": "You can not remove a folder that not empty",
  "e-obj-invalid": "Path [${val}] invalid",
  "e-obj-noexists": "Object [${val}] not exists",
  "e-ph-noexists": "Path [${val}] not exists",
  "e-pvg-fobidden": "Operation prohibited",
  "edit": "Edit",
  "edit-com": "Edit control",
  "edit-content": "Edit Content",
  "email": "Email",
  "emoji": "Emoji",
  "empty": "Empty",
  "empty-data": "Empty data",
  "enable": "Enable",
  "enabled": "Enabled",
  "error": "Error",
  "exlink": "Ex-link",
  "exlink-tip": "Please enter a URL address",
  "exlink-tip-img": "Please enter an image URL address",
  "export-data": "Export data...",
  "fail": "Failed",
  "false": "False",
  "favorites": "Favorite",
  "female": "Female",
  "filter": "Filter",
  "find": "Find",
  "find-data": "Find data",
  "font-size": "Font size",
  "font-t-capitalize": "Capitalize",
  "font-t-lowercase": "Lowercase",
  "font-t-uppercase": "Uppercase",
  "font-transform": "Text trans",
  "font-w-bold": "Bold",
  "font-w-normal": "Normal",
  "font-weight": "Font weight",
  "form-fld-type-AMS": "Timestamp(ms)",
  "form-fld-type-ASEC": "Timestamp(sec)",
  "form-fld-type-Array": "Array",
  "form-fld-type-Boolean": "Boolean",
  "form-fld-type-Color": "Color",
  "form-fld-type-Date": "Date",
  "form-fld-type-DateTime": "DateTime",
  "form-fld-type-Float": "Float",
  "form-fld-type-Integer": "Integer",
  "form-fld-type-Number": "Number",
  "form-fld-type-Object": "Object",
  "form-fld-type-String": "String",
  "form-fld-type-Time": "Time",
  "gender": "Gender",
  "geo-alti": "Altitude",
  "geo-azimuth": "Azimuth",
  "geo-gcj02-lat": "GCJ02 Lat",
  "geo-gcj02-lng": "GCJ02 Lng",
  "geo-hash": "Geo hash",
  "geo-lat": "Latitude",
  "geo-lng": "Longitude",
  "geo-sate-cno": "Satellite Ava",
  "geo-sate-cnt": "Satellite used",
  "global-settings": "Global settings",
  "height": "Height",
  "hierarchy": "Hierarchy",
  "history-record": "History record",
  "home": "HOME",
  "home-index": "HOME",
  "href": "Link URL",
  "href-text": "Link Text",
  "i-known": "I known",
  "icon": "Icon",
  "icon-code-tip": "Please key-in code for icon, such as 'zmdi-case'",
  "img": "Image",
  "img-add": "Add image",
  "img-insert": "Insert image",
  "img-remove": "Remove image",
  "import-data": "Import data ...",
  "index": "Index",
  "info": "Information",
  "inherit": "Inherit",
  "init": "Initiate",
  "init-data": "Initiate data",
  "input": "Input",
  "input-tags": "Input tags",
  "invalid": "Invalid",
  "invalid-val": "Invalid value",
  "java-type-Boolean": "Boolean",
  "java-type-Double": "Double",
  "java-type-Float": "Float",
  "java-type-Integer": "Integer",
  "java-type-JSON": "JSON",
  "java-type-List": "Object List",
  "java-type-Long": "Long",
  "java-type-Object": "Object",
  "java-type-SArray": "String Array",
  "java-type-String": "String",
  "json-Array": "Array",
  "json-Boolean": "Boolean",
  "json-Float": "Decimal",
  "json-Integer": "Integer",
  "json-Nil": "Nil",
  "json-Number": "Number",
  "json-Object": "Object",
  "json-String": "String",
  "json-new-key": "Enter a new key",
  "json-syntax-err-tip": "Syntax Error! please switch source view to verify",
  "key": "Key",
  "keywords": "Keywords",
  "label": "Label",
  "lang": "Language",
  "lang-en-uk": "En",
  "lang-en-us": "En",
  "lang-zh-cn": "Cn",
  "lang-zh-hk": "Hk",
  "lang-zh-tw": "Tw",
  "lat": "Latitude",
  "layout": "Layout",
  "lbs-place-add": "Add place",
  "lbs-ro-rnb-k-first": "Starting number",
  "lbs-ro-rnb-k-type": "Display type",
  "lbs-ro-rnb-k-type-alpha": "Alphabet",
  "lbs-ro-rnb-k-type-capital": "Capital",
  "lbs-ro-rnb-k-type-number": "Number",
  "lbs-ro-rnb-title": "Autosets line label",
  "left": "Left",
  "left-bottom": "Left bottom",
  "left-top": "Left top",
  "limit": "Limit",
  "link": "Link",
  "link-href": "Link target",
  "link-text": "Link text",
  "list": "List",
  "lng": "Longitude",
  "load-more": "Load more",
  "load-more-pull": "Pull for load more",
  "loading": "Loading...",
  "loading-data": "Loading Data ...",
  "loading-gui": "Loading GUI ...",
  "location": "Location",
  "login": "Sign in",
  "login-name": "Login name",
  "logout": "Sign out",
  "logout-ing": "Log out ...",
  "mail": "Email",
  "mail-as-html": "HTML Email",
  "mail-bcc": "BCC",
  "mail-cc": "CC",
  "mail-charset": "Email charset",
  "mail-inbox": "Email Inbox",
  "mail-notify": "Email notify",
  "mail-r-addr": "Email addr.",
  "mail-r-name": "Name",
  "mail-scene": "Email scenarios",
  "mail-scene-ctmpl": "Template",
  "mail-scene-flt-tip": "Filter by a scene name",
  "mail-scene-meta": "Email scenario properties",
  "mail-scene-nil-detail": "Please select a mail scene for details",
  "mail-scene-nm": "Scene name",
  "mail-scene-nm-tip": "Only include english letters or numbers or underline, and guarantee unique",
  "mail-scene-var-trans": "Trans script",
  "mail-scene-var-trans-placeholder": "Just like: jsc /path/to/script.js -vars",
  "mail-scene-var-trans-tip": "Take primary vars as JSON input, output another JSON string",
  "mail-setup": "Email setup",
  "mail-subject": "Subject",
  "mail-to": "TO",
  "male": "Male",
  "map-hybrid": "HYBIRD",
  "map-location": "Map location",
  "map-location-clear": "Clear map location",
  "map-location-edit": "Edit map location",
  "map-roadmap": "ROADMAP",
  "map-satellite": "SATELLITE",
  "map-terrain": "TERRAIN",
  "map-type": "Map type",
  "me": "Me",
  "media": "Media",
  "meta": "Meta data",
  "mine": "Mine",
  "modal": "Modal",
  "modify": "Modify",
  "more": "More",
  "move": "Move",
  "move-down": "Move down",
  "move-to": "Move to...",
  "move-up": "Move up",
  "msg": "Message",
  "name": "Name",
  "new-item": "New item",
  "newsfeed": "Newfeed",
  "newtab": "New tab",
  "next": "Next",
  "nil": "Nil",
  "nil-content": "Nil content",
  "nil-detail": "Please choose one item for detail",
  "nil-item": "Please choose one item at first",
  "nil-obj": "Please choose one object",
  "nil-target": "Nil valid target",
  "no": "No",
  "no-saved": "You get data need to be saved",
  "no-selected": "None selected",
  "no-set": "Not Set",
  "no-title": "No title",
  "note": "Note",
  "null": "Null",
  "obj": "Object",
  "off": "Off",
  "ok": "Ok",
  "on": "On",
  "open": "Open",
  "open-newtab": "Open in new tab",
  "org-add": "Add Org",
  "org-choose": "Choose Organization",
  "others": "Others",
  "paging-change-pgsz": "Current page contains ${pgsz} records maximumly, you want to change it to：",
  "paging-change-pgsz-invalid": "Page size must be integer, and great than 0, but ... -_-!",
  "paging-change-pn": "Current page number is ${pn}, please enter number between 1 to ${pgc}:",
  "paging-change-pn-invalid": "Page number must be integer, and must between 1 to ${pgc}",
  "paging-first": "Head",
  "paging-last": "Tail",
  "paging-next": "Next",
  "paging-prev": "Prev",
  "paging-sum": "Total ${pgc} pages, ${sum} records，current ${count}/${pgsz}",
  "params": "Params",
  "passwd": "Password",
  "passwd-reset": "Reset password",
  "path": "Path",
  "phone": "Phone",
  "phone-nb": "Phone number",
  "post": "Post",
  "prev": "Prev",
  "preview": "Preview",
  "price": "Price",
  "profile": "Profile",
  "profile-edit": "Edit profile",
  "project-add": "Add Project",
  "prompt": "Prompt",
  "properties": "Properties",
  "publish": "Publish",
  "publishing": "Publishing ...",
  "query": "Query",
  "refresh": "Refresh",
  "refresh-hard": "Hard refresh",
  "refresh-hard-clear": "Clean cache & hard refresh",
  "reload": "Reload",
  "reloading": "Reloading ...",
  "remove": "Remove",
  "removing": "Removing ...",
  "rename": "Rename ...",
  "renaming": "Renameing ...",
  "reset": "Reset",
  "reset-change": "Reset change",
  "reset-data": "Reset data",
  "restore": "Restore",
  "revoke": "Revoke",
  "revoke-change": "Revoke change",
  "right": "Right",
  "right-bottom": "Right bottom",
  "right-top": "Right top",
  "role": "Role",
  "role-actions": "Role actions",
  "role-behaviors": "Role behaviors",
  "role-in-charge": "In charge",
  "run": "Run",
  "run-finished": "Done for running script",
  "run-welcome": "Run script, please wait for a while ...",
  "save": "Save",
  "save-change": "Save change",
  "save-done": "Save success",
  "save-now": "Save now",
  "saving": "Saving ...",
  "score": "Score",
  "score-count": "Score count",
  "search": "Search",
  "search-adv": "Advance search",
  "select": "Select",
  "select-all": "Select all",
  "send": "Send",
  "settings": "Settings",
  "setup": "Setup",
  "setup-fields": "Setup Fields",
  "setup-reset": "Setup Clean",
  "size": "Size",
  "skip": "Skip",
  "slogan": "Slogan",
  "sms-scene-nm": "Scene name",
  "sms-scene-nm-tip": "Only include english letters or numbers or underline, and guarantee unique",
  "sms-setup": "SMS setup",
  "sort": "Sort",
  "sort-asc": "ASC",
  "sort-by": "Sort by",
  "sort-desc": "DESC",
  "sort-tip-asc": "The smaller at first",
  "sort-tip-desc": "The bigger at first",
  "sort-val": "Sort value",
  "source-code": "Source code",
  "stat-date-at": "Stat at",
  "stat-date-at-oor": "Statistics on this date are not ready yet",
  "stat-date-span": "Date span",
  "stop": "Stop",
  "structure": "Structure",
  "style": "Style",
  "style-more": "More style",
  "submit": "Submit",
  "success": "Success",
  "sys-settings": "System settings",
  "tablet": "Tablet",
  "tags": "Tags",
  "target": "Target",
  "target-id": "Target ID",
  "target-name": "Target name",
  "target-path": "Target path",
  "terminal": "Terminal",
  "terminate": "Terminate",
  "text": "Text",
  "timestamp": "Timestamp",
  "title": "Title",
  "top": "Top",
  "total": "Total",
  "total-count": "Total ${nb?0} ${unit?items}",
  "total-items": "Total ${val} items",
  "trace": "Trace",
  "track": "Track message",
  "true": "True",
  "type": "Type",
  "undefined": "Undefined",
  "under-construction": "Under construction",
  "unknown": "Unknown",
  "unzip": "Unzip",
  "unzipping": "Unzipping...",
  "upload": "Upload",
  "upload-done": "Done for upload",
  "upload-file": "Uploading files ...",
  "upload-forbidden": "Upload forbidden",
  "upload-nofinished": "Upload not finished",
  "upload-notarget": "Upload target not set!",
  "upload-notarget-continue": "Upload target not set!, click [Continue] to upload next file, click [Cancel] to break file uploading",
  "uploading": "Uploading",
  "user-avator": "User avatar",
  "value": "Value",
  "video": "Video",
  "video-accelerometer": "Video accelerometer",
  "video-add": "Add video",
  "video-autoplay": "Autoplay",
  "video-clipboard-write": "Clipboard write",
  "video-encrypted-media": "Encrypted media",
  "video-features": "Video feature",
  "video-gyroscope": "Gyroscope",
  "video-insert": "Insert video",
  "video-pic-in-pic": "Pic in pic",
  "video-remove": "Remove video",
  "videos": "Videos",
  "view": "View",
  "view-resource": "View source code",
  "vu-mv": "Millivolt",
  "vu-v": "Volt",
  "warn": "Warn",
  "website": "Website",
  "width": "Width",
  "www-admin-login": "Admin login GUI",
  "www-home": "WWW home",
  "www-title": "Website",
  "yes": "Yes",
  "zip": "Zip",
  "zipping": "Zipping..."
});
//========================================
// JOIN <_wn.i18n.json> ti/i18n/en-us/_wn.i18n.json
//========================================
Ti.Preload("ti/i18n/en-us/_wn.i18n.json", {
  "wn-admin-check-obj-thumb": "Check obj thumbnails ...",
  "wn-admin-tools": "Admin tools",
  "wn-cmd-panel-epilog": "The script is finished, you can close the window now ^_^",
  "wn-cmd-panel-tip": "The script may take a while to run, please do not close the window",
  "wn-ctt-css-text": "CSS File",
  "wn-ctt-folder-text": "Folder",
  "wn-ctt-html-text": "HTML FILE",
  "wn-ctt-js-text": "Javascript",
  "wn-ctt-json-text": "JSON File",
  "wn-ctt-less-text": "LESS File",
  "wn-ctt-md-text": "Markdown",
  "wn-ctt-mjs-text": "Module Javascript",
  "wn-ctt-sass-text": "SASS File",
  "wn-ctt-thing_set-text": "Thing Set",
  "wn-ctt-txt-text": "Pure text",
  "wn-ctt-wnml-text": "WNML File",
  "wn-ctt-xml-text": "XML File",
  "wn-data-scope": "Range",
  "wn-data-scope-phd": "Such as: 1-100",
  "wn-data-scope-tip": "Range of data to be processed, 1-200 indicates from Record 1 to record 200 (inclusive)",
  "wn-edit-com-nil": "Default as label control",
  "wn-en-his-ct": "Created",
  "wn-en-his-flt-tip": "Please input user id or name to filtering",
  "wn-en-his-mor": "OP more",
  "wn-en-his-opt": "Operation",
  "wn-en-his-tar": "Target",
  "wn-en-his-tid": "Target id",
  "wn-en-his-tnm": "Target name",
  "wn-en-his-ttp": "Target type",
  "wn-en-his-uid": "User id",
  "wn-en-his-unm": "User name",
  "wn-en-his-usr": "User",
  "wn-en-his-utp": "User type",
  "wn-expi-10m": "10Min.",
  "wn-expi-12h": "12Hr.",
  "wn-expi-14d": "14Day",
  "wn-expi-1d": "1Day",
  "wn-expi-1h": "1Hr.",
  "wn-expi-2h": "2Hr.",
  "wn-expi-30d": "30Day",
  "wn-expi-30m": "30Min.",
  "wn-expi-3d": "3Day",
  "wn-expi-6h": "6小时",
  "wn-expi-7d": "7Day",
  "wn-expi-never": "Never",
  "wn-export-c-expi": "Expire in",
  "wn-export-c-expi-tip": "How long to keep temporary files on the server",
  "wn-export-c-mapping": "Mapping",
  "wn-export-c-mapping-phd": "Choose mapping mode",
  "wn-export-c-mapping-tip": "The so-called mapping mode, is how to output the field, including how to specify the field name, field value how to convert",
  "wn-export-c-mode": "Data Range",
  "wn-export-c-mode-all": "All Pages",
  "wn-export-c-mode-checked": "Checked",
  "wn-export-c-mode-current": "Current Page",
  "wn-export-c-name": "Export name",
  "wn-export-c-name-phd": "Enter the export file name",
  "wn-export-c-name-tip": "Export file name. If no suffix is available, it will be auto completed based on Export type",
  "wn-export-c-type": "Export Type",
  "wn-export-c-type-csv": "CSV File",
  "wn-export-c-type-json": "JSON",
  "wn-export-c-type-unknown": "Unknown Export Type",
  "wn-export-c-type-xls": "Spreadsheet",
  "wn-export-c-type-zip": "Zip data",
  "wn-export-choose-fields": "Choose Fields",
  "wn-export-confirm-many": "You want to export a lot of data, this operation may take a long time, continue?",
  "wn-export-done": "Finished",
  "wn-export-done-fail": "Fail To Export",
  "wn-export-done-fail-tip": "Please click to see the error details",
  "wn-export-done-ok": "Export success",
  "wn-export-done-ok-tip": "Please click the link below to download",
  "wn-export-ing": "Processing",
  "wn-export-ing-tip": "The export script is running, please wait for a while",
  "wn-export-open-dir": "Open export history dir...",
  "wn-export-setup": "Export setup",
  "wn-fsc-mail-scene-new": "New a email scenario",
  "wn-fsc-mail-tmpl-new": "Enter new unique name (such as 'signup')",
  "wn-import-WithoutInput": "Please upload the data file to be imported",
  "wn-import-c-expi": "Expi Time",
  "wn-import-c-expi-tip": "How long will the uploaded temporary file remain on the server",
  "wn-import-c-mapping": "Mapping rule",
  "wn-import-c-mapping-phd": "Select a field mapping rule",
  "wn-import-c-mapping-tip": "The so-called mapping rules, is the field output conversion rules, including how to specify the field name, field value how to convert",
  "wn-import-c-mode-all": "All Data",
  "wn-import-confirm-many": "You want to import a lot of data, this operation may take some time, continue?",
  "wn-import-setup": "Import Settings",
  "wn-import-upload": "Upload file",
  "wn-import-upload-xlsx-tip": "Only 'xlsx' files are supported, if 'xls' files, you need to save as 'xlsx' before uploading",
  "wn-invalid-fsize-max": "最大上传文件尺寸为 ${maxSize}，但是您上传的文件尺寸为 ${fileSize}",
  "wn-invalid-fsize-min": "最小上传文件尺寸为 ${minSize}，但是您上传的文件尺寸为 ${fileSize}",
  "wn-invalid-mimes": "Unsupported mime \"${current}\", only \"${supports}\" allowed",
  "wn-invalid-types": "Unsupported type \"${current}\", only \"${supports}\" allowed",
  "wn-key-c": "Creater",
  "wn-key-ct": "Created",
  "wn-key-d0": "D0",
  "wn-key-d1": "D1",
  "wn-key-data": "Data",
  "wn-key-duration": "Duration",
  "wn-key-expi": "Expired",
  "wn-key-g": "Group",
  "wn-key-grp-advance": "Advance",
  "wn-key-grp-basic": "Basic",
  "wn-key-grp-customized": "Customized",
  "wn-key-grp-more": "More",
  "wn-key-grp-others": "Others",
  "wn-key-grp-privilege": "Privilege",
  "wn-key-grp-thumb": "Thumb",
  "wn-key-grp-timestamp": "Timestamp",
  "wn-key-height": "Height",
  "wn-key-icon": "Icon",
  "wn-key-id": "ID",
  "wn-key-len": "Length",
  "wn-key-lm": "Modified",
  "wn-key-m": "Mender",
  "wn-key-md": "Mode",
  "wn-key-mime": "MIME",
  "wn-key-nm": "Name",
  "wn-key-ph": "Path",
  "wn-key-pid": "Parent",
  "wn-key-pvg": "Customized pvg",
  "wn-key-race": "Race",
  "wn-key-sha1": "SHA1",
  "wn-key-thumb": "Thumb",
  "wn-key-title": "Title",
  "wn-key-tp": "Type",
  "wn-key-width": "Width",
  "wn-md-R": "R",
  "wn-md-W": "W",
  "wn-md-X": "X",
  "wn-md-blend-dft": "DEFAILT",
  "wn-md-blend-mode": "Blend Mode",
  "wn-md-blend-strong": "STRONG",
  "wn-md-blend-weak": "WEAK",
  "wn-md-excutable": "Excutable",
  "wn-md-member": "Member",
  "wn-md-other": "Other",
  "wn-md-owner": "Owner",
  "wn-md-readable": "Readable",
  "wn-md-writable": "Writable",
  "wn-o-type-miss-match": "The new file type [${newType}] does not match the original file type [${oldType}]",
  "wn-o-type-miss-match-convimg": "The new image type [${newType}] does not match the original image type [${oldType}], it will be converted automatically. Click \"Yes\" to continue uploading data, click \"No\" to abandon this operation",
  "wn-obj-nosaved": "You have unsaved objects",
  "wn-oc-auto-type": "All types",
  "wn-oc-free": "Please enter the full name, including the extension, such as `myfile.xml`",
  "wn-oc-tip": "New object name",
  "wn-org-new-node": "New Org Node",
  "wn-org-type-G": "Dept",
  "wn-org-type-P": "Position",
  "wn-race-DIR": "DIRECTORY",
  "wn-race-FILE": "FILE",
  "wn-th-acc-pwd-choose-none": "Select the account to reset password (multiple allowed)",
  "wn-th-acc-pwd-done": "Password has been reset for ${n} users",
  "wn-th-acc-pwd-invalid": "Illegal characters found in password",
  "wn-th-acc-pwd-reset-tip": "Reset password to",
  "wn-th-acc-pwd-reset-tip-1": "Reset password of [${name}] to",
  "wn-th-acc-pwd-reset-tip-N": "Reset the passwords of [${name}] and other ${N} accounts to",
  "wn-th-acc-pwd-too-short": "Password too short, no less than 6 digits, better contains alphanumeric & special chars",
  "wn-th-recount-media": "Recalculate file number",
  "wn-th-recount-media-done": "Current number of files: ${n}"
});
//========================================
// JOIN <hmaker.i18n.json> ti/i18n/zh-cn/hmaker.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-cn/hmaker.i18n.json", {
  "am-and": "并且",
  "am-blank": "为空白",
  "am-boolFalse": "为假",
  "am-boolTrue": "为真",
  "am-empty": "为空",
  "am-equals": "等于${val} ",
  "am-equalsIgnoreCase": "等于\"${val}\"且无视大小写",
  "am-equalsType": "类型等于\"${val}\"",
  "am-exists": "存在'${val}'",
  "am-findInArray": "存在一个【${val}】的对象",
  "am-gt": "大于${val}",
  "am-gte": "大于等于${val}",
  "am-lt": "小于${val}",
  "am-lte": "小于等于${val}",
  "am-matchOf": "匹配'${val}'",
  "am-must-false": "肯定为假",
  "am-must-true": "肯定为真",
  "am-nil": "为空",
  "am-nilOf": "字段${val}为空",
  "am-noexists": "不存在'${val}'",
  "am-not": "不",
  "am-not-sure": "不太确定",
  "am-notEquals": "不等于${val} ",
  "am-notMatchOf": "不匹配'${FFFval}'",
  "am-notNil": "不为空",
  "am-notNilOf": "字段${val}不为空",
  "am-null": "为空值",
  "am-nullOf": "字段${val}为空值",
  "am-or": "或者",
  "am-undefined": "未定义",
  "am-undefinedOf": "字段${val}未定义",
  "com-form": "表单",
  "com-label": "标签",
  "com-list": "列表",
  "hm-am-add": "添加条件",
  "hm-am-empty": "未设置条件",
  "hm-args": "参数表",
  "hm-args-partial": "参数填充",
  "hm-args-partial-left": "左填充",
  "hm-args-partial-right": "右填充",
  "hm-form-options-other-dftval": "其他·默认值",
  "hm-form-options-other-enabled": "显示其他",
  "hm-form-options-other-ph": "其他·提示信息",
  "hm-form-options-other-ph-ph": "输入其他选项",
  "hm-form-options-other-text": "其他·文字",
  "hm-form-options-other-width": "其他·宽度",
  "hm-type-Array": "数组",
  "hm-type-Boolean": "布尔",
  "hm-type-Group": "字段分组",
  "hm-type-Integer": "整数",
  "hm-type-Number": "数字",
  "hm-type-Object": "对象",
  "hm-type-String": "文本",
  "hm-type-icons": {
    "Array": "zmdi-format-list-bulleted",
    "Boolean": "zmdi-toll",
    "Group": "zmdi-collection-bookmark",
    "Integer": "zmdi-n-6-square",
    "Number": "zmdi-input-svideo",
    "Object": "zmdi-toys",
    "String": "zmdi-translate"
  },
  "hmaker-com-conf-blank": "请选择一个控件设置其详情",
  "hmaker-com-type-blank": "选择一个控件",
  "hmaker-edit-form-del-group-all": "组以及全部字段",
  "hmaker-edit-form-del-group-confirm": "您是要删除组以及其内的全部字段，还是仅是组？",
  "hmaker-edit-form-del-group-only": "仅是组",
  "hmaker-edit-form-field-nil": "请选择一个字段编辑详情",
  "hmaker-edit-form-new-field": "新字段",
  "hmaker-edit-form-new-field-e0": "字段名不能以数字开头，内容只能为小写英文字母数字和下划线",
  "hmaker-edit-form-new-field-e1": "字段【${val}】已存在，请另选一个名称",
  "hmaker-edit-form-new-field-tip": "请输入新字段名（只能为小写英文字母数字和下划线）",
  "hmaker-edit-form-new-group": "新分组",
  "hmaker-edit-form-new-group-tip": "请输入新分组名",
  "hmaker-edit-form-nil-field": "请先选择一个字段",
  "hmaker-edit-form-not-current": "请选择一个字段或者字段组",
  "hmaker-nav-blank-item": "请选择一个导航项目编辑",
  "hmaker-nav-k-display": "链接显示内容",
  "hmaker-nav-k-icon": "链接图标",
  "hmaker-nav-k-title": "链接文字",
  "hmaker-nav-k-type": "链接类型",
  "hmaker-nav-k-value": "链接目标",
  "hmaker-nav-tp-dispatch": "方法调用",
  "hmaker-nav-tp-href": "外部链接",
  "hmaker-nav-tp-page": "站点页面",
  "hmaker-site-k-apiBase": "接口路径",
  "hmaker-site-k-base": "资源路径",
  "hmaker-site-k-captcha": "验证码路径",
  "hmaker-site-k-domain": "所属域",
  "hmaker-site-k-entry": "着陆页",
  "hmaker-site-prop": "站点属性",
  "hmaker-site-state": "站点全局配置",
  "hmaker-site-state-actions": "全局动作表",
  "hmaker-site-state-apis": "接口集",
  "hmaker-site-state-blocks": "预定义布局",
  "hmaker-site-state-general": "通用配置",
  "hmaker-site-state-nav": "全局导航条",
  "hmaker-site-state-router": "页面路由",
  "hmaker-site-state-schema": "预定义控件",
  "hmaker-site-state-utils": "扩展函数",
  "hmaker-site-tree": "站点结构",
  "hmaker-site-tree-loading": "正在加载站点结构...",
  "hmk-adjustDelay": "调整延迟",
  "hmk-album-autofit": "自动适应宽度",
  "hmk-album-clrsz": "清除相册尺寸",
  "hmk-album-id": "相册ID",
  "hmk-album-info": "相册信息",
  "hmk-album-list-mode": "列表模式",
  "hmk-album-margin": "相册边距",
  "hmk-album-name": "相册名称",
  "hmk-album-prop": "相册属性",
  "hmk-album-refresh": "刷新相册内容",
  "hmk-aspect": "外观",
  "hmk-aspect-more": "样式外观",
  "hmk-autoI18n": "国际化",
  "hmk-autofit": "自动适应宽度",
  "hmk-autoscale": "恢复比例",
  "hmk-behavior": "行为",
  "hmk-blankAs": "空白样式",
  "hmk-breakLine": "维持换行",
  "hmk-class-at": "位置",
  "hmk-class-at-bottom": "下部",
  "hmk-class-at-bottom-left": "左下",
  "hmk-class-at-bottom-right": "右下",
  "hmk-class-at-center": "居中",
  "hmk-class-at-left": "左侧",
  "hmk-class-at-right": "右侧",
  "hmk-class-at-top": "上部",
  "hmk-class-at-top-left": "左上",
  "hmk-class-at-top-right": "右上",
  "hmk-class-flex": "自动伸缩",
  "hmk-class-flex-both": "双向",
  "hmk-class-flex-grow": "伸展",
  "hmk-class-flex-none": "关闭",
  "hmk-class-flex-shrink": "收缩",
  "hmk-class-font-size": "文字大小",
  "hmk-class-hover": "悬停效果",
  "hmk-class-hover-to-scale": "悬停放大",
  "hmk-class-hover-to-up": "悬停上浮",
  "hmk-class-hover-to-zoom": "悬停缩放",
  "hmk-class-item-margin": "项外距",
  "hmk-class-item-padding": "项内距",
  "hmk-class-item-space": "项间距",
  "hmk-class-object-fit": "对象填充",
  "hmk-class-object-fit-contain": "包含",
  "hmk-class-object-fit-cover": "封面",
  "hmk-class-object-fit-fill": "拉伸",
  "hmk-class-object-fit-none": "无",
  "hmk-class-pick": "编辑类选择器",
  "hmk-class-sz-lg": "较大",
  "hmk-class-sz-md": "正常",
  "hmk-class-sz-no": "无",
  "hmk-class-sz-sm": "较小",
  "hmk-class-sz-xl": "特大",
  "hmk-class-sz-xs": "特小",
  "hmk-class-text": "文字",
  "hmk-class-text-at": "文字位置",
  "hmk-class-text-in": "居内",
  "hmk-class-text-mode": "文字模式",
  "hmk-class-text-out": "居外",
  "hmk-class-text-side": "文字放置",
  "hmk-class-text-style": "文字风格",
  "hmk-class-text-wrap": "文字折行",
  "hmk-class-text-wrap-auto": "自动",
  "hmk-class-text-wrap-clip": "剪裁",
  "hmk-class-text-wrap-ellipsis": "省略号",
  "hmk-class-title-wrap": "标题折行",
  "hmk-class-ts-mask": "遮罩",
  "hmk-class-ts-shadow": "阴影",
  "hmk-class-word-break-all": "按字母",
  "hmk-class-word-break-word": "按单词",
  "hmk-class-word-keep-all": "不折行",
  "hmk-config-choose": "选择配置信息",
  "hmk-config-nil": "找不到配置信息",
  "hmk-css-align-center": "居中",
  "hmk-css-align-justify": "两端对齐",
  "hmk-css-align-left": "左对齐",
  "hmk-css-align-right": "右对齐",
  "hmk-css-background": "背景",
  "hmk-css-background-color": "背景颜色",
  "hmk-css-background-image": "背景图片",
  "hmk-css-background-position": "背景位置",
  "hmk-css-background-position-x": "背景X轴位置",
  "hmk-css-background-position-y": "背景Y轴位置",
  "hmk-css-background-repeat": "背景重复",
  "hmk-css-background-repeat-no": "不重复",
  "hmk-css-background-repeat-round": "填充间隔",
  "hmk-css-background-repeat-space": "自动间隔",
  "hmk-css-background-repeat-x": "横向平铺",
  "hmk-css-background-repeat-y": "纵向平铺",
  "hmk-css-background-repeat-yes": "双向平铺",
  "hmk-css-background-size": "背景尺寸",
  "hmk-css-background-size-auto": "自动",
  "hmk-css-background-size-contain": "包含",
  "hmk-css-background-size-cover": "封面",
  "hmk-css-background-size-full": "拉伸",
  "hmk-css-border": "边框",
  "hmk-css-border-radius": "圆角",
  "hmk-css-box-shadow": "块阴影",
  "hmk-css-c-auto": "自动",
  "hmk-css-color": "文字颜色",
  "hmk-css-edit": "编辑CSS样式",
  "hmk-css-float": "文本绕图",
  "hmk-css-float-left": "左浮动",
  "hmk-css-float-none": "不绕图",
  "hmk-css-float-right": "右浮动",
  "hmk-css-font-size": "文字大小",
  "hmk-css-font-weight": "文字粗细",
  "hmk-css-g-inherit": "继承",
  "hmk-css-g-initial": "初始",
  "hmk-css-g-unset": "默认",
  "hmk-css-grp-aspect": "外观设置",
  "hmk-css-grp-background": "背景设置",
  "hmk-css-grp-measure": "尺度设置",
  "hmk-css-grp-texting": "文字设置",
  "hmk-css-height": "高度",
  "hmk-css-letter-spacing": "字间距",
  "hmk-css-line-height": "行高",
  "hmk-css-margin": "外边距",
  "hmk-css-max-height": "最大高度",
  "hmk-css-max-width": "最大宽度",
  "hmk-css-min-height": "最小高度",
  "hmk-css-min-width": "最小宽度",
  "hmk-css-object-fit": "内容缩放",
  "hmk-css-object-fit-contain": "包含",
  "hmk-css-object-fit-cover": "封面",
  "hmk-css-object-fit-fill": "拉伸",
  "hmk-css-object-fit-none": "无",
  "hmk-css-object-fit-scale-down": "等比",
  "hmk-css-object-position": "内容位置",
  "hmk-css-opacity": "不透明度",
  "hmk-css-overflow": "内容溢出",
  "hmk-css-overflow-clip": "剪裁",
  "hmk-css-overflow-hidden": "隐藏",
  "hmk-css-overflow-scroll": "滚动",
  "hmk-css-overflow-visible": "可见",
  "hmk-css-padding": "内边距",
  "hmk-css-text-align": "文字排列",
  "hmk-css-text-overflow": "文字溢出",
  "hmk-css-text-overflow-clip": "剪裁",
  "hmk-css-text-overflow-ellipsis": "省略号",
  "hmk-css-text-shadow": "文字阴影",
  "hmk-css-text-transform": "文字转换",
  "hmk-css-text-transform-capitalize": "首大写",
  "hmk-css-text-transform-lowercase": "全小写",
  "hmk-css-text-transform-none": "无",
  "hmk-css-text-transform-uppercase": "全大写",
  "hmk-css-white-space": "文字折行",
  "hmk-css-white-space-break-space": "保持预先格式并自动折行（除了空格）",
  "hmk-css-white-space-normal": "正常",
  "hmk-css-white-space-nowrap": "不折行",
  "hmk-css-white-space-pre": "保持预先格式",
  "hmk-css-white-space-pre-line": "保持预先格式并按行自动折行",
  "hmk-css-white-space-pre-wrap": "保持预先格式并自动折行",
  "hmk-css-width": "宽度",
  "hmk-currentTab": "当前标签",
  "hmk-data": "数据",
  "hmk-dict": "数据字典",
  "hmk-editable": "可编辑",
  "hmk-fb-album-autofit": "脸书相册自动适应宽度",
  "hmk-fb-album-clrsz": "清除脸书相册尺寸",
  "hmk-fb-album-id": "脸书相册ID",
  "hmk-fb-album-info": "脸书相册信息",
  "hmk-fb-album-margin": "脸书相册边距",
  "hmk-fb-album-name": "脸书相册名称",
  "hmk-fb-album-prop": "相册脸书属性",
  "hmk-fb-album-refresh": "刷新脸书相册内容",
  "hmk-field-checkEquals": "检查相等",
  "hmk-field-com": "编辑控件",
  "hmk-field-defaultAs": "默认值",
  "hmk-field-disabled": "失效条件",
  "hmk-field-height": "高度",
  "hmk-field-hidden": "隐藏条件",
  "hmk-field-icon": "图标",
  "hmk-field-name": "键名",
  "hmk-field-serializer": "自定义保存",
  "hmk-field-tip": "提示说明",
  "hmk-field-title": "显示名",
  "hmk-field-transformer": "自定义转换",
  "hmk-field-type": "类型",
  "hmk-field-width": "宽度",
  "hmk-fieldStatus": "字段状态",
  "hmk-fields": "字段",
  "hmk-fields-advance": "高级",
  "hmk-fields-general": "基本",
  "hmk-float": "文本绕图",
  "hmk-float-clear": "清除浮动",
  "hmk-float-left": "居左绕图",
  "hmk-float-none": "不绕图",
  "hmk-float-right": "居右绕图",
  "hmk-form-data": "数据源",
  "hmk-form-height": "表单高度",
  "hmk-form-onlyFields": "仅声明字段",
  "hmk-form-width": "表单宽度",
  "hmk-format": "格式化",
  "hmk-height": "控件高度",
  "hmk-href": "超链接",
  "hmk-icon": "表单图标",
  "hmk-layout-cols": "列布局",
  "hmk-layout-falls": "瀑布",
  "hmk-layout-rows": "行布局",
  "hmk-layout-tabs": "标签布局",
  "hmk-layout-wall": "墙贴",
  "hmk-margin-center": "边距居中",
  "hmk-margin-lg": "较大边距",
  "hmk-margin-md": "中等边距",
  "hmk-margin-no": "清除边距",
  "hmk-margin-sm": "小边距",
  "hmk-measure": "尺寸",
  "hmk-mode": "显示方式",
  "hmk-mode-all": "全部",
  "hmk-mode-tab": "标签",
  "hmk-newTab": "新窗口",
  "hmk-placeholder": "占位文本",
  "hmk-prefixIcon": "前缀图标",
  "hmk-prefixText": "前缀文字",
  "hmk-size": "尺寸",
  "hmk-spacing": "间距",
  "hmk-spacing-comfy": "舒适",
  "hmk-spacing-tiny": "紧凑",
  "hmk-style-adv": "高级样式",
  "hmk-style-brief": "摘要样式",
  "hmk-style-exlink": "扩展链接",
  "hmk-style-image": "图片样式",
  "hmk-style-inside": "内部样式",
  "hmk-style-outside": "外部样式",
  "hmk-style-part-left": "左部样式",
  "hmk-style-part-right": "右部样式",
  "hmk-style-tile": "瓦片样式",
  "hmk-style-title": "标题样式",
  "hmk-suffixIcon": "后缀图标",
  "hmk-suffixText": "后缀文字",
  "hmk-tabAt": "标签位置",
  "hmk-tabAt-bottom-center": "下部居中",
  "hmk-tabAt-bottom-left": "下部居左",
  "hmk-tabAt-bottom-right": "下部居右",
  "hmk-tabAt-top-center": "上部居中",
  "hmk-tabAt-top-left": "上部居左",
  "hmk-tabAt-top-right": "上部居右",
  "hmk-title": "表单标题",
  "hmk-trimed": "修剪空白",
  "hmk-value": "输入值",
  "hmk-valueMaxWidth": "值最大宽度",
  "hmk-w-edit-album-autoopen": "自动打开",
  "hmk-w-edit-album-fullpreview": "全屏预览",
  "hmk-w-edit-album-prop": "编辑相册属性",
  "hmk-w-edit-alt-style": "标题样式",
  "hmk-w-edit-attachment": "附件",
  "hmk-w-edit-attachment-clrsz": "清除附件尺寸",
  "hmk-w-edit-attachment-margin": "附件边距",
  "hmk-w-edit-attachment-prop": "附件属性",
  "hmk-w-edit-audio-clrsz": "清除音频尺寸",
  "hmk-w-edit-audio-margin": "音频边距",
  "hmk-w-edit-audio-prop": "音频属性",
  "hmk-w-edit-fb-album-prop": "编辑脸书相册属性",
  "hmk-w-edit-img-clrsz": "清除图片尺寸",
  "hmk-w-edit-img-info": "图片信息",
  "hmk-w-edit-img-link": "图片链接",
  "hmk-w-edit-img-link-tip": "譬如 http://xxxx",
  "hmk-w-edit-img-margin": "图片边距",
  "hmk-w-edit-img-newtab": "新窗口",
  "hmk-w-edit-img-pic": "图片",
  "hmk-w-edit-img-prop": "图片属性",
  "hmk-w-edit-img-style": "图片样式",
  "hmk-w-edit-img-title": "图片标题",
  "hmk-w-edit-img-title-tip": "请输入图片的标题",
  "hmk-w-edit-video-clrsz": "清除视频尺寸",
  "hmk-w-edit-video-margin": "视频边距",
  "hmk-w-edit-video-prop": "视频属性",
  "hmk-w-edit-yt-playlist": "编辑播放列表属性",
  "hmk-w-edit-yt-video": "编辑Youtube视频属性",
  "hmk-w-edit-yt-video-features": "视频特性",
  "hmk-width": "控件宽度",
  "hmk-yt-playlist-autofit": "YT播放列表自动适应宽度",
  "hmk-yt-playlist-clrsz": "清除YT播放列表尺寸",
  "hmk-yt-playlist-id": "列表ID",
  "hmk-yt-playlist-info": "YT播放列表信息",
  "hmk-yt-playlist-margin": "YT播放列表边距",
  "hmk-yt-playlist-name": "列表名称",
  "hmk-yt-playlist-prop": "YT播放列表属性",
  "hmk-yt-playlist-refresh": "刷新YT播放列表内容",
  "hmr-add-action": "添加新动作项",
  "hmr-add-react-item": "新建执行项",
  "hmr-t-exec": "执行脚本",
  "hmr-t-jsc": "执行JS脚本",
  "hmr-t-obj_clear": "清理标准对象",
  "hmr-t-obj_create": "创建标准对象",
  "hmr-t-obj_delete": "删除标准对象",
  "hmr-t-obj_update": "更新标准对象",
  "hmr-t-thing_clear": "清理数据集对象",
  "hmr-t-thing_create": "创建数据集对象",
  "hmr-t-thing_delete": "删除数据集对象",
  "hmr-t-thing_update": "更新数据集对象",
  "react-action-add": "添加动作项",
  "react-action-empty": "未定义任何动作项",
  "vt-Array": "数组",
  "vt-BoolVar": "布尔变量",
  "vt-Boolean": "布尔",
  "vt-Function": "函数",
  "vt-GetVar": "获取变量",
  "vt-Invoking": "调用",
  "vt-Null": "空值",
  "vt-Number": "数字",
  "vt-Object": "对象",
  "vt-String": "字符串",
  "vt-Tmpl": "模板",
  "vt-Undefined": "未定义"
});
//========================================
// JOIN <ti-datetime.i18n.json> ti/i18n/zh-cn/ti-datetime.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-cn/ti-datetime.i18n.json", {
  "Apr": "四月",
  "Aug": "八月",
  "Dec": "十二月",
  "Feb": "二月",
  "Fri": "周五",
  "Friday": "星期五",
  "Jan": "一月",
  "Jul": "七月",
  "Jun": "六月",
  "Mar": "三月",
  "May": "五月",
  "Mon": "周一",
  "Monday": "星期一",
  "Nov": "十一月",
  "Oct": "十月",
  "Sat": "周六",
  "Saturday": "星期六",
  "Sep": "九月",
  "Sun": "周日",
  "Sunday": "星期日",
  "Thu": "周四",
  "Thursday": "星期四",
  "Tue": "周二",
  "Tuesday": "星期二",
  "Wed": "周三",
  "Wednesday": "星期三",
  "blank-date": "请选择日期",
  "blank-date-range": "请选择日期范围",
  "blank-datetime": "请选择日期时间",
  "blank-month": "请选择月份",
  "blank-time": "请选择时间",
  "blank-time-range": "请选择时间范围",
  "cal": {
    "abbr": {
      "Apr": "四月",
      "Aug": "八月",
      "Dec": "十二",
      "Feb": "二月",
      "Jan": "一月",
      "Jul": "七月",
      "Jun": "六月",
      "Mar": "三月",
      "May": "五月",
      "Nov": "十一",
      "Oct": "十月",
      "Sep": "九月"
    },
    "d-range-beyond-days": "${yy0}年${MM0}月${dd0}至${dd1}日",
    "d-range-beyond-months": "${yy0}年${MM0}月${dd0}日至${MM1}月${dd1}日",
    "d-range-beyond-years": "${yy0}年${MM0}月${dd0}日至${yy1}年${MM1}月${dd1}日",
    "d-range-in-same-day": "${yy0}年${MM0}月${dd0}日全天",
    "m-range-beyond-months": "${yy0}年${MT0}至${MT1}",
    "m-range-beyond-years": "${yy0}年${MT0}至${yy1}年${MT1}",
    "week": ["日", "一", "二", "三", "四", "五", "六"]
  },
  "date-fmt": "yyyy年M月d日",
  "dt-range-from": "从",
  "dt-range-to": "至",
  "dt-range-unknown": "未知时间范围",
  "du-in-min": "${n}分钟",
  "time": {
    "any-time": "yyyy年M月d日",
    "in-year": "M月d日",
    "past-in-min": "刚刚",
    "past-in-hour": "${min}分钟前",
    "past-in-day": "${hour}小时前",
    "past-in-week": "${day}天前",
    "future-in-min": "即将",
    "future-in-hour": "${min}分钟后",
    "future-in-day": "${hour}小时后",
    "future-in-week": "${day}天后"
  },
  "time-begin": "开始时间",
  "time-end": "结束时间",
  "time-ms": "毫秒",
  "today": "今天",
  "tu-day": "天",
  "tu-hou": "小时",
  "tu-min": "分钟",
  "tu-mon": "月",
  "tu-sec": "秒",
  "tu-week": "周",
  "tu-year": "年"
});
//========================================
// JOIN <ti-text-editor.i18n.json> ti/i18n/zh-cn/ti-text-editor.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-cn/ti-text-editor.i18n.json", {
  "wordp-h0": "正文",
  "wordp-h1": "标题 1",
  "wordp-h2": "标题 2",
  "wordp-h3": "标题 3",
  "wordp-h4": "标题 4",
  "wordp-h5": "标题 5",
  "wordp-h6": "标题 6",
  "wordp-heading": "标题级别",
  "wordp-link": "超链接",
  "wordp-nil-sel": "请先选择一段文字"
});
//========================================
// JOIN <web.i18n.json> ti/i18n/zh-cn/web.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-cn/web.i18n.json", {
  "account": "账户",
  "account-add": "添加账户",
  "account-flt-tip": "请输入账号名过滤",
  "account-manage": "账户管理",
  "account-meta": "账户属性",
  "account-meta-tip": "请选择一个账号查看详情",
  "address-consignee": "收货人",
  "address-empty-list": "未设置任何收货地址",
  "address-flt-tip": "请输入地址名过滤",
  "address-is-dft": "默认收货地址",
  "address-k-area": "区县",
  "address-k-city": "城市",
  "address-k-code": "地址编码",
  "address-k-code-tip": "12位国家地址编码",
  "address-k-consignee": "收货人姓名",
  "address-k-country": "国家",
  "address-k-dftaddr": "默认地址",
  "address-k-door": "门牌",
  "address-k-email": "邮箱",
  "address-k-phone": "电话",
  "address-k-postcode": "邮编",
  "address-k-province": "省/直辖市",
  "address-k-street": "乡镇/街道",
  "address-k-title": "地址",
  "address-k-tp": "地址类型",
  "address-k-tp-s": "卖家地址",
  "address-k-tp-u": "用户地址",
  "address-k-uid": "用户",
  "address-k-uid-tip": "输入关联用户名过滤",
  "address-meta": "地址属性",
  "address-nil": "空地址",
  "address-nil-detail": "请选择一个地址查看详情",
  "address-rm-confirm": "您确定要删除这个地址吗？",
  "address-set-dft": "设为默认地址",
  "address-shipping-add": "添加收货地址",
  "admin-flt-tip": "请输入管理员名过滤",
  "admin-meta": "管理员属性",
  "admin-new": "新管理员",
  "admin-nickname": "管理员昵称",
  "admin-no-detail": "请选择一个管理员查看详情",
  "ar-cate": "文章分类",
  "ar-content": "文章内容",
  "ar-duration": "阅读时长",
  "ar-flt-tip": "请输入文章标题过滤",
  "ar-meta": "文章属性",
  "ar-meta-tip": "请选择一篇文章查看详情",
  "ar-new": "新文章",
  "ar-nm": "文章名称",
  "ar-pubat": "发布日期",
  "ar-thumb": "缩略封面",
  "ar-title": "文章标题",
  "ar-watch-c": "浏览次数",
  "auth-bind": "绑定",
  "auth-bind-email-title": "绑定邮箱",
  "auth-bind-phone-title": "绑定手机",
  "auth-blank-email": "邮箱不能为空",
  "auth-blank-name": "名称不能为空",
  "auth-blank-name-passwd": "名称或者密码不能为空",
  "auth-blank-phone": "手机号不能为空",
  "auth-doing": "正在验证",
  "auth-email-tip": "邮箱地址",
  "auth-email-title": "邮件密码登录/注册",
  "auth-email-vcode": "邮件密码",
  "auth-email-vcode-get": "获取邮件密码",
  "auth-go-email": "邮件密码登录/注册",
  "auth-go-passwd": "账号密码登录",
  "auth-go-phone": "短信密码登录/注册",
  "auth-login": "登录",
  "auth-login-NoSaltedPasswd": "你还未初始化您的登录密码，请切换至【${ta?验证码}】登录，之后前往【用户中心 > 重置密码】初始化您的登录密码，谢谢",
  "auth-login-or-signup": "登录/注册",
  "auth-logout-confirm": "您确定要退出登录吗？",
  "auth-ok": "账号验证通过",
  "auth-passwd-getback": "找回密码",
  "auth-passwd-name-email-tip": "邮箱地址/登录名",
  "auth-passwd-name-phone-tip": "手机号/登录名",
  "auth-passwd-tip": "密码",
  "auth-passwd-title": "账号密码登录",
  "auth-phone-tip": "手机号",
  "auth-phone-title": "短信密码登录/注册",
  "auth-phone-vcode": "短信密码",
  "auth-phone-vcode-get": "获取短信密码",
  "auth-reset-passwd": "重置密码 ...",
  "auth-reset-passwd-again": "再次重置密码",
  "auth-reset-passwd-btn-invalid": "密码包含非法字符",
  "auth-reset-passwd-btn-lack": "请填写必要信息",
  "auth-reset-passwd-btn-ready": "立即重置密码",
  "auth-reset-passwd-btn-short": "密码至少6位",
  "auth-reset-passwd-btn-unmatch": "密码两次输入不一致",
  "auth-reset-passwd-by-email": "用邮箱重置密码",
  "auth-reset-passwd-by-email-sent": "已经向您的注册邮箱 ${email} 发送了邮件密码",
  "auth-reset-passwd-by-email-tip": "请输入注册邮箱地址",
  "auth-reset-passwd-by-passwd": "用旧密码重置密码",
  "auth-reset-passwd-by-phone": "用手机重置密码",
  "auth-reset-passwd-by-phone-sent": "已经向您的手机 ${phone} 发送了短信密码",
  "auth-reset-passwd-by-phone-tip": "请输入注册手机号码",
  "auth-reset-passwd-ing": "正在重置密码...",
  "auth-reset-passwd-lack-email": "请输入注册邮箱地址",
  "auth-reset-passwd-lack-phone": "请输入注册手机号",
  "auth-reset-passwd-new": "新密码（最少6位）",
  "auth-reset-passwd-ok": "密码已经重置，下次登录时生效",
  "auth-reset-passwd-old": "旧密码",
  "auth-reset-passwd-ren": "再次确认",
  "auth-sending-vcode": "正在发送验证码",
  "auth-sent-ok": "${ta?验证码}已发出，请在${by}查收，${min}分钟内有效",
  "auth-ta-by-email": "邮箱里",
  "auth-ta-by-phone": "手机上",
  "auth-ta-email": "邮件密码",
  "auth-ta-phone": "手机密码",
  "auth-vcode-delay": "${sec} 秒后重新发送",
  "auth-vcode-lost": "收不到验证码？",
  "base-info": "基本信息",
  "blog": "博客",
  "blog-manage": "博客管理",
  "buy-checkout-nil": "请选择要付款的商品",
  "cate": "分类",
  "cate-flt-tip": "请输入分类名过滤",
  "cate-maj": "主分类",
  "cate-meta": "分类属性",
  "cate-new": "新分类",
  "cate-nil-tip": "请选择一个分类",
  "cate-no-detail": "请选择一个分类查看详情",
  "cate-pa": "父分类",
  "cate-pa-nil": "请选择自己的父分类",
  "cate-sub": "子分类",
  "cate-sub-nil": "请选择自己的子分类",
  "cate-val": "分类值",
  "cmt-brief": "评论摘要",
  "cmt-content": "评论内容",
  "cmt-flt-tip": "请输入用户ID或者评论内容过滤",
  "cmt-meta": "评论属性",
  "cmt-no-detail": "请选择一个角色查看详情",
  "cmt-target": "评论目标",
  "cmt-type": "评论类型",
  "cmt-user": "评论账户",
  "comments": "评论",
  "cover": "封面",
  "cover-pic": "封面图片",
  "detail-info": "详细信息",
  "dir-media": "媒体目录",
  "e-cmd-passwd-old_invalid": "旧密码错误",
  "e-cmd-www_passwd-Blank": "新密码为空",
  "e-cmd-www_passwd-CheckBlankAccount": "空账户",
  "e-cmd-www_passwd-CheckBlankCode": "空验证码",
  "e-cmd-www_passwd-CheckCodeFail": "验证码错误",
  "e-cmd-www_passwd-CheckFailed": "校验错误",
  "e-cmd-www_passwd-CheckWeirdAccount": "诡异的账户",
  "e-cmd-www_passwd-InvalidNewPasswd": "新密码无效",
  "e-cmd-www_passwd-LackTarget": "缺少重置目标",
  "e-cmd-www_passwd-TooShort": "新密码太短",
  "e-cmd-www_passwd-nopvg": "没有重置密码的权限",
  "e-run-action-test-fail": "执行操作前置条件不足",
  "e-www-captcha-fail_send_by_email": "邮件密码发送失败，请检查邮件账户是否正确",
  "e-www-invalid-captcha": "${ta?验证码}错误",
  "e-www-login-invalid-passwd": "账号密码错误",
  "e-www-login-noexists": "账号不存在",
  "e-www-order-OutOfStore": "商品${val?}库存不足",
  "invoice-k-bankaccount": "银行账号",
  "invoice-k-bankname": "开户行",
  "invoice-k-busiaddr": "企业地址",
  "invoice-k-busiphone": "企业电话",
  "invoice-k-invdft": "默认抬头",
  "invoice-k-invtfn": "发票税号",
  "invoice-k-invtitle": "发票抬头",
  "invoice-k-type": "发票类型",
  "invoice-k-uemail": "收票人邮箱",
  "invoice-k-uid": "关联账户",
  "invoice-k-uid-tip": "输入关联用户名过滤",
  "invoice-k-uname": "收票人名称",
  "invoice-k-uphone": "收票人电话",
  "invoice-kg-bank": "银行信息",
  "invoice-kg-busi": "企业信息",
  "invoice-kg-inv": "发票信息",
  "invoice-kg-u": "收票人信息",
  "k-ct-date": "创建日期",
  "k-lm": "最后更新",
  "me-k-account": "账户",
  "me-k-avatar": "头像",
  "me-k-city": "城市",
  "me-k-country": "国家",
  "me-k-dept": "所属部门",
  "me-k-email": "邮箱",
  "me-k-job": "职位",
  "me-k-job-tip": "请选择职位",
  "me-k-login": "最后登录",
  "me-k-nickname": "用户昵称",
  "me-k-nm": "登录名",
  "me-k-phone": "手机号",
  "me-k-role": "角色",
  "me-k-sex": "性别",
  "mine": "我的",
  "my-favors": "我的收藏",
  "my-favors-blog": "收藏的博客",
  "my-favors-goods": "收藏的商品",
  "my-favors-posts": "收藏的文章",
  "my-favors-spots": "收藏的景点",
  "my-favors-video": "收藏的视频",
  "my-orders": "我的订单",
  "my-orders-shop": "购物订单",
  "my-orders-video": "视频订单",
  "my-passwd": "重置密码",
  "my-profile": "我的资料",
  "my-shipping-address": "收货地址",
  "my-shopping-car": "购物车",
  "or-st-ca": "已取消",
  "or-st-dn": "完成",
  "or-st-fa": "创建订单失败",
  "or-st-nw": "提交订单",
  "or-st-ok": "支付成功",
  "or-st-sp": "已发货",
  "or-st-wt": "待支付",
  "ord-detail": "订单详情",
  "order-flt-tip": "请输入订单ID查询",
  "order-k-accounts": "用户库",
  "order-k-addr_ship": "发货地址",
  "order-k-addr_ship_code": "发货地址编码",
  "order-k-addr_ship_country": "发货国家",
  "order-k-addr_ship_door": "发货门牌",
  "order-k-addr_user": "收货地址",
  "order-k-addr_user_area": "地区",
  "order-k-addr_user_city": "城市",
  "order-k-addr_user_code": "收货地址编码",
  "order-k-addr_user_country": "收货国家",
  "order-k-addr_user_door": "收货门牌",
  "order-k-addr_user_province": "省",
  "order-k-addr_user_street": "街道",
  "order-k-buyer_id": "买家",
  "order-k-ca_at": "取消时间",
  "order-k-currency": "货币单位",
  "order-k-discount": "优惠",
  "order-k-dn_at": "完成时间",
  "order-k-fa_at": "支付失败",
  "order-k-fee": "支付金额",
  "order-k-freight": "运费",
  "order-k-freight-m": "修改运费",
  "order-k-freight-m-tip": "可以在这里输入0为客户免去运费",
  "order-k-id": "订单号",
  "order-k-invoice": "发票信息",
  "order-k-nominal": "标称总价",
  "order-k-note": "备注",
  "order-k-ok_at": "支付成功",
  "order-k-pay_id": "支付单",
  "order-k-pay_tp": "支付类型",
  "order-k-payment": "支付信息",
  "order-k-prefee": "基础金额",
  "order-k-prefee-m": "修改总价",
  "order-k-prefee-m-tip": "为用户输入新的协商后的商品总价",
  "order-k-price": "订单金额",
  "order-k-pro-amount": "数量",
  "order-k-pro-price": "单价",
  "order-k-pro-retail": "零售价",
  "order-k-pro-subretail": "零计",
  "order-k-pro-subtotal": "小计",
  "order-k-pro-title": "商品标题",
  "order-k-products": "商品信息",
  "order-k-profit": "收益金额",
  "order-k-seller": "卖家",
  "order-k-sp_at": "发货时间",
  "order-k-st": "订单状态",
  "order-k-title": "订单标题",
  "order-k-total": "商品总价",
  "order-k-user_email": "收货人邮箱",
  "order-k-user_name": "收货人姓名",
  "order-k-user_phone": "收货人手机",
  "order-k-waybil": "物流信息",
  "order-k-waybil_com": "物流公司",
  "order-k-waybil_nb": "运单号",
  "order-k-wt_at": "支付时间",
  "order-nil-detail": "请选择一个订单查看详情",
  "order-pay-id": "支付单号",
  "order-pay-status": "交易状态",
  "order-shipaddr-nil": "请指定一个收货地址",
  "passwd-invalid-char": "密码只能包括英文数字/大小写字母/以及特殊字符",
  "passwd-sl-1": "弱",
  "passwd-sl-2": "较弱",
  "passwd-sl-3": "中",
  "passwd-sl-4": "较强",
  "passwd-sl-5": "强",
  "passwd-tip": "请输入最少6位的英文数字/大小写字母/特殊字符的组合",
  "pay-by-free": "免费",
  "pay-by-paypal": "PayPal",
  "pay-by-wx-jsapi": "微信JSAPI",
  "pay-by-wx-qrcode": "微信扫码",
  "pay-by-wx-scan": "微信付款码",
  "pay-by-zfb-qrcode": "支付宝扫码",
  "pay-by-zfb-scan": "支付宝付款码",
  "pay-checkout-it-amount": "数量",
  "pay-checkout-it-name": "商品名称",
  "pay-checkout-it-price": "单价",
  "pay-checkout-it-subtotal": "小计",
  "pay-checkout-tip": "请确认你购买的商品数量和金额",
  "pay-paypal": "PayPal",
  "pay-proceed-check": "检查支付结果",
  "pay-proceed-ing": "正在检查...",
  "pay-re-fail": "支付失败",
  "pay-re-nil": "支付结果是一只薛定谔的猫",
  "pay-re-ok": "支付成功",
  "pay-re-wait": "等待支付中",
  "pay-step-checkout-title": "确认订单",
  "pay-step-choose-nil": "☝ 请选择上面的一个支付方式 👆",
  "pay-step-choose-tip": "您可以选择下面任意一种支付方式支付本订单",
  "pay-step-choose-tip2": "您将使用${val}支付本订单",
  "pay-step-choose-title": "支付方式",
  "pay-step-choose-title2": "选择支付方式",
  "pay-step-done-title": "完成",
  "pay-step-proceed-create-order": "正在创建订单...",
  "pay-step-proceed-fetch-order": "正在获取订单...",
  "pay-step-proceed-nil": "您未选择任何支付方式",
  "pay-step-proceed-tip": "使用${val}支付本订单",
  "pay-step-proceed-title": "支付",
  "pay-tip-wx-qrcode": "请于15分钟内用微信扫一扫付款码",
  "pay-tip-zfb-qrcode": "请于15分钟内用支付宝扫一扫付款码",
  "pay-title": "支付流程",
  "pay-wx": "微信支付",
  "pay-zfb": "支付宝",
  "paypal-amount_value": "交易金额",
  "paypal-approve-tip": "已经在新标签里为您打开了PayPal支付页面，如果没有打开，请点击☝上面的图标。支付完毕，页面会自动感知到，如果没有反应，试着点击👇下面的【检查支付结果】按钮。",
  "paypal-cap-id": "记录ID",
  "paypal-cap-status": "记录状态",
  "paypal-currency": "货币单位",
  "paypal-id": "PayPal交易号",
  "paypal-payer_email": "交易账户邮箱",
  "paypal-payer_id": "交易账户ID",
  "photo": "照片",
  "post-content-blank": "您提交的内容不能为空，也不能少于10个字",
  "profile-title": "我的基本信息",
  "pubat": "发布日期",
  "read-du": "阅读时长",
  "role": "角色",
  "role-add": "添加角色",
  "role-as-domain": "域角色",
  "role-as-domain-admin": "管理员",
  "role-as-domain-guest": "访客",
  "role-as-domain-member": "成员",
  "role-as-guest": "访客",
  "role-as-normal": "普通用户",
  "role-as-op": "运维角色",
  "role-as-vip": "VIP用户",
  "role-dft": "默认角色",
  "role-flt-tip": "请输入角色名过滤",
  "role-manage": "角色管理",
  "role-meta": "角色属性",
  "role-meta-tip": "请选择一个角色查看详情",
  "role-name": "角色名",
  "role-select-tip": "请选择角色",
  "role-val": "角色值",
  "shop-basket-clean-confirm": "您确定要清空购物车内全部商品吗？这是一个不能撤回的操作。",
  "shop-basket-remove-confirm": "您确定要从购物车中删除这个商品吗？",
  "topic": "主题",
  "type-new": "新类型",
  "video-title": "视频标题",
  "watch_c": "浏览次数",
  "waybil-com-ane": "安能物流",
  "waybil-com-best": "百世快递",
  "waybil-com-db": "德邦快递",
  "waybil-com-ems": "中国邮政速递物流",
  "waybil-com-jdl": "京东物流",
  "waybil-com-pj": "品骏快递",
  "waybil-com-sf": "顺丰快递",
  "waybil-com-sto": "申通快递",
  "waybil-com-uce": "优速快递",
  "waybil-com-yto": "圆通速递",
  "waybil-com-yunda": "韵达快递",
  "waybil-com-zto": "中通快递"
});
//========================================
// JOIN <wn-manager.i18n.json> ti/i18n/zh-cn/wn-manager.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-cn/wn-manager.i18n.json", {
  "ti-loading": "加载中...",
  "wn-adaptlist": "对象浏览器",
  "wn-create-fail": "创建失败",
  "wn-create-invalid": "新对象名称不能包括非法字符",
  "wn-create-ok": "创建成功",
  "wn-create-too-long": "新对象名称过长",
  "wn-del-confirm": "您确定要删除选中的${N}个项目吗？这是一个不可撤销的操作！",
  "wn-del-item": "正在删除: \"${name}\"",
  "wn-del-no-empty-folder": "目录\"${nm}\"不是空的，您是否要全部删除？点击\"否\"跳过",
  "wn-del-none": "请选择至少一个对象进行删除!",
  "wn-del-ok": "已有 ${N} 个对象被移除",
  "wn-download-dir": "对象 \"${nm}\" 是一个目录，点击\"继续\"将跳过它并下载下一个文件，点击\"终止\"将结束本次操作!",
  "wn-download-none": "请选择至少一个文件进行下载!",
  "wn-download-too-many": "即将逐个下载 ${N} 个文件，继续吗？",
  "wn-expose-hidden-off": "不显示隐藏的对象",
  "wn-expose-hidden-on": "显示隐藏的对象",
  "wn-gui": "通用布局界面",
  "wn-list-view-type": "视图类型",
  "wn-manager-is-loading": "管理器正在加载数据",
  "wn-manager-no-meta": "管理器未设置对象",
  "wn-move-to-confirm": "您确定要移动选中的${N}个项目吗？这是一个不可撤销的操作！",
  "wn-move-to-none": "请选择至少一个对象进行移动!",
  "wn-move-to-ok": "已有 ${N} 个对象被移动到了新的目标",
  "wn-obj-preview": "对象预览",
  "wn-obj-puretext": "纯文本编辑器",
  "wn-obj-single-com": "单控件测试套",
  "wn-publish-done": "发布成功",
  "wn-publish-to-nil": "未设置发布目标",
  "wn-publish-to-noexist": "发布目标不存在",
  "wn-rename": "重命名对象 \"${name}\"",
  "wn-rename-fail": "重命名失败",
  "wn-rename-invalid": "名称不能包括非法字符",
  "wn-rename-none": "请选择一个文件重命名!",
  "wn-rename-ok": "重命名成功",
  "wn-rename-suffix-changed": "您的文件后缀名发生变化，您需要自动为您补全原来的后缀吗？",
  "wn-rename-too-long": "名称过长",
  "wn-thing-manager": "数据管理器",
  "wn-view-opening": "正在加载界面..."
});
//========================================
// JOIN <wn-obj-preview.i18n.json> ti/i18n/zh-cn/wn-obj-preview.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-cn/wn-obj-preview.i18n.json", {
  "wop-fullscreen-enter": "进入全屏",
  "wop-fullscreen-quit": "退出全屏"
});
//========================================
// JOIN <wn-thing.i18n.json> ti/i18n/zh-cn/wn-thing.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-cn/wn-thing.i18n.json", {
  "e-thing-ukey-duplicated": "违反唯一键约束",
  "thing-clean": "清空回收站",
  "thing-cleaning": "正在清空...",
  "thing-content": "对象内容",
  "thing-content-hide": "隐藏内容",
  "thing-content-show": "显示内容",
  "thing-create": "创建新对象",
  "thing-create-in-recyclebin": "请先退出回收站，再创建新对象",
  "thing-enter-recyclebin": "打开回收站",
  "thing-files": "对象文件表",
  "thing-files-attachment": "附件目录",
  "thing-files-hide": "隐藏文件表",
  "thing-files-media": "媒体目录",
  "thing-files-show": "显示文件表",
  "thing-filter-kwdplhd": "请输入查询条件",
  "thing-leave-recyclebin": "退出回收站",
  "thing-meta": "对象属性",
  "thing-meta-hide": "隐藏属性",
  "thing-meta-show": "显示属性",
  "thing-recycle-bin": "回收站",
  "thing-restore": "恢复选中",
  "thing-restore-none": "请先选择要恢复的数据",
  "thing-restoring": "正在恢复..."
});
//========================================
// JOIN <_net.i18n.json> ti/i18n/zh-cn/_net.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-cn/_net.i18n.json", {
  "net-ct": "创建时间",
  "net-fb-reload-album-cover": "强制刷新相册封面",
  "net-fb-relogin": "重新登录FB账户",
  "net-flt-nil": "查找视频名称",
  "net-vod-add-video": "添加视频",
  "net-vod-cate": "视频分类",
  "net-vod-du-long": "长视频",
  "net-vod-du-short": "短视频",
  "net-vod-du-tv": "剧集视频",
  "net-vod-duration": "视频时长",
  "net-vod-size": "视频大小",
  "net-vod-video-nil": "请选择一个视频查看详情",
  "net-youtube": "Youtube",
  "net-youtube-add-video": "添加Youtube视频"
});
//========================================
// JOIN <_ti.i18n.json> ti/i18n/zh-cn/_ti.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-cn/_ti.i18n.json", {
  "add": "添加",
  "add-item": "添加新项",
  "add-now": "立即添加",
  "add-watch": "添加监控",
  "add-watch-clear": "清除全部监控",
  "add-watch-create": "建立新监控",
  "add-watch-create-tip": "请输入监控名称",
  "add-watch-exists": "这个名字已经存在了，请换一个",
  "add-watch-remove": "删除当前监控",
  "add-watch-tip": "将当前的搜索条件保存到本地存储",
  "album": "相册",
  "album-add": "添加相册",
  "album-clrsz": "清除相册尺寸",
  "album-insert": "插入相册",
  "album-margin": "相册边距",
  "album-prop": "相册属性",
  "album-refresh": "刷新相册内容",
  "albums": "相册",
  "all": "全部",
  "allowfullscreen": "允许全屏",
  "amount": "数量",
  "attachment": "附件",
  "attachment-add": "添加附件",
  "attachment-insert": "插入附件",
  "attachments": "附件",
  "audio": "音频",
  "audio-add": "添加音频",
  "audio-insert": "插入音频",
  "audios": "音频",
  "avatar": "头像",
  "back": "回退",
  "back-to-list": "回退到列表",
  "banner": "头图",
  "batch-none": "请从下面列表中选择至少一个对象进行批量更新",
  "batch-update": "批量更新",
  "blank": "空白",
  "blank-to-edit": "请选择要编辑的项目",
  "bottom": "下",
  "brief": "摘要",
  "brief-d": "摘要描述",
  "brief-i": "摘要说明",
  "buy": "购买",
  "buy-now": "立即购买",
  "cancel": "取消",
  "cancel-all": "取消选中",
  "candidate": "备选项",
  "captcha": "验证码",
  "captcha-chagne": "换一张",
  "captcha-tip": "请输入图中的验证码",
  "center": "居中",
  "chart": "图表",
  "chart-bar": "柱状图",
  "chart-line": "折线图",
  "chart-pie": "饼状图",
  "chart-rank": "条状图",
  "check-tip-all": "全选项目，点击取消全选",
  "check-tip-none": "点击全选",
  "check-tip-part": "部分选中项目，点击全选",
  "checked": "已选中",
  "choose": "选择",
  "choose-fields": "选择字段",
  "choose-file": "选择文件",
  "choose-obj": "选择对象",
  "clean": "清理",
  "clear": "清除",
  "clone": "克隆",
  "clone-copy": "克隆副本",
  "close": "关闭",
  "color": "颜色",
  "confirm": "确认",
  "confirm-change": "确认改动",
  "console": "控制台",
  "content": "内容",
  "content-setup": "内容设置",
  "continue": "继续",
  "copy": "复制",
  "copy-all": "全部复制",
  "create": "新建",
  "create-now": "立即创建",
  "creating": "正在创建...",
  "currency": "货币",
  "currency-AUD": "澳元",
  "currency-CAD": "加元",
  "currency-EUR": "欧元",
  "currency-GBP": "英镑",
  "currency-HKD": "港元",
  "currency-JPY": "日元",
  "currency-MOP": "澳门元",
  "currency-RMB": "人民币",
  "currency-USD": "美元",
  "customize": "定制",
  "date": "日期",
  "db-col-type-AUTO": "自动",
  "db-col-type-BINARY": "二进制",
  "db-col-type-BOOLEAN": "布尔",
  "db-col-type-CHAR": "定长字符",
  "db-col-type-FLOAT": "浮点数",
  "db-col-type-INT": "整数",
  "db-col-type-TEXT": "长文本",
  "db-col-type-TIMESTAMP": "时间戳",
  "db-col-type-VARCHAR": "变长字符",
  "debug": "调试",
  "default": "默认",
  "del": "删除",
  "del-checked": "删除选中",
  "del-hard": "选中项目即将被直接删除，此操作不可撤销，您确定要继续吗？",
  "del-ing": "正在删除...",
  "del-none": "请从下面列表中选择至少一个对象进行删除",
  "del-not-empty-dir": "您选中的对象中，有${N}个目录【${tip}】并不为空，您确定要删除它们以及它们内的全部内容吗？",
  "dept-add": "添加部门",
  "desktop": "桌面",
  "detail": "详情",
  "dis-name": "显示名",
  "disable": "禁用",
  "disabled": "禁用的",
  "doing": "正在执行...",
  "download": "下载",
  "download-to-local": "下载到本地",
  "drop-file-here-to-upload": "拖拽文件至此以便上传",
  "drop-here": "拖拽文件至此",
  "dt-in": "在${val}内",
  "dt-u-day": "天",
  "dt-u-hour": "小时",
  "dt-u-min": "分钟",
  "dt-u-month": "月",
  "dt-u-ms": "好眠",
  "dt-u-sec": "秒",
  "dt-u-week": "周",
  "dt-u-year": "年",
  "duplicate": "创建副本",
  "e-auth-account-noexists": "账户不存在",
  "e-auth-home-forbidden": "账户不具备进入主目录的权限",
  "e-auth-login-NoPhoneOrEmail": "错误的手机号或邮箱地址",
  "e-auth-login-NoSaltedPasswd": "未设置合法的密码",
  "e-auth-login-invalid-passwd": "账户密码未通过校验",
  "e-data-InvalidScope": "你声明的数据范围格式不正确，正确的格式类似：1-20 但是你却输入了：",
  "e-export_data-ConfirmBigLimit": "你要导出很多数据，这可能需要一些时间，要继续吗?",
  "e-export_data-UnknownMode": "未知的导出模式",
  "e-form-incomplete": "表单缺失必要字段: 【${title}:${name}】 ${tip?}",
  "e-io-forbidden": "禁止写入",
  "e-io-obj-BlankName": "对象名称不能为空",
  "e-io-obj-InvalidName": "对象名称非法",
  "e-io-obj-exists": "但是对象已然存在",
  "e-io-obj-noexists": "对象其实并不存在",
  "e-io-obj-noexistsf": "对象[${nm}]其实并不存在",
  "e-io-rm-NoEmptyDir": "要移除的目录还有内容，不能删除",
  "e-obj-invalid": "路径[${val}]非法",
  "e-obj-noexists": "对象[${val}]不存在",
  "e-ph-noexists": "路径[${val}]不存在",
  "e-pvg-fobidden": "操作被禁止",
  "edit": "编辑",
  "edit-com": "编辑控件",
  "edit-content": "编辑内容",
  "email": "邮箱",
  "emoji": "表情符合",
  "empty": "空",
  "empty-data": "无数据",
  "enable": "启用",
  "enabled": "启用的",
  "error": "错误",
  "exlink": "外部链接",
  "exlink-tip": "请输入一个超链接地址",
  "exlink-tip-img": "请输入图片超链接地址",
  "export-data": "导出数据...",
  "fail": "失败",
  "false": "否",
  "favorites": "收藏",
  "female": "女",
  "filter": "过滤",
  "find": "查找",
  "find-data": "查找数据",
  "font-size": "文字大小",
  "font-t-capitalize": "首字母大写",
  "font-t-lowercase": "全小写",
  "font-t-uppercase": "全大写",
  "font-transform": "文字转换",
  "font-w-bold": "加粗",
  "font-w-normal": "正常",
  "font-weight": "文字粗细",
  "form-fld-type-AMS": "时间戳(毫秒)",
  "form-fld-type-ASEC": "时间戳(秒)",
  "form-fld-type-Array": "数组",
  "form-fld-type-Boolean": "布尔",
  "form-fld-type-Color": "颜色",
  "form-fld-type-Date": "日期",
  "form-fld-type-DateTime": "日期时间",
  "form-fld-type-Float": "浮点数",
  "form-fld-type-Integer": "整数",
  "form-fld-type-Number": "数字",
  "form-fld-type-Object": "对象",
  "form-fld-type-String": "字符串",
  "form-fld-type-Time": "时间",
  "gender": "性别",
  "geo-alti": "海拔",
  "geo-azimuth": "方向角",
  "geo-gcj02-lat": "火星纬度",
  "geo-gcj02-lng": "火星经度",
  "geo-hash": "地理哈希",
  "geo-lat": "纬度",
  "geo-lng": "经度",
  "geo-sate-cno": "可见卫星数",
  "geo-sate-cnt": "使用卫星数",
  "global-settings": "全局设置",
  "height": "高度",
  "hierarchy": "层级",
  "history-record": "历史记录",
  "home": "主目录",
  "home-index": "首页",
  "href": "超链接",
  "href-text": "链接文字",
  "i-known": "我知道了",
  "icon": "图标",
  "icon-code-tip": "请输入图标代码，如 zmdi-case",
  "img": "图像",
  "img-add": "添加图像",
  "img-insert": "插入图像",
  "img-remove": "删除图像",
  "import-data": "导入数据...",
  "index": "索引",
  "info": "信息",
  "inherit": "继承",
  "init": "初始化",
  "init-data": "初始化数据",
  "input": "输入",
  "input-tags": "输入标签",
  "invalid": "不正确的",
  "invalid-val": "不正确的值",
  "java-type-Boolean": "布尔",
  "java-type-Double": "双精度浮点",
  "java-type-Float": "浮点",
  "java-type-Integer": "整数",
  "java-type-JSON": "JSON对象",
  "java-type-List": "对象列表",
  "java-type-Long": "长整数",
  "java-type-Object": "对象",
  "java-type-SArray": "字符串数组",
  "java-type-String": "字符串",
  "json-Array": "数组",
  "json-Boolean": "布尔",
  "json-Float": "小数",
  "json-Integer": "整数",
  "json-Nil": "空值",
  "json-Number": "数字",
  "json-Object": "对象",
  "json-String": "字符串",
  "json-new-key": "请输入一个新键名",
  "json-syntax-err-tip": "语法错误，请切换源码视图检查",
  "key": "键",
  "keywords": "关键字",
  "label": "标签",
  "lang": "语言",
  "lang-en-uk": "英",
  "lang-en-us": "英",
  "lang-zh-cn": "简",
  "lang-zh-hk": "繁",
  "lang-zh-tw": "繁",
  "lat": "纬度",
  "layout": "布局",
  "lbs-place-add": "添加地点",
  "lbs-ro-rnb-k-first": "起始数字",
  "lbs-ro-rnb-k-type": "显示类型",
  "lbs-ro-rnb-k-type-alpha": "小写字母",
  "lbs-ro-rnb-k-type-capital": "大写字母",
  "lbs-ro-rnb-k-type-number": "数字",
  "lbs-ro-rnb-title": "自动设置线路标签",
  "left": "左",
  "left-bottom": "左下",
  "left-top": "左上",
  "limit": "限制",
  "link": "链接",
  "link-href": "链接目标",
  "link-text": "链接文字",
  "list": "列表",
  "lng": "经度",
  "load-more": "加载更多",
  "load-more-pull": "下拉加载更多",
  "loading": "加载中...",
  "loading-data": "正在加载数据 ...",
  "loading-gui": "正在加载界面 ...",
  "location": "位置",
  "login": "登录",
  "login-name": "登录名",
  "logout": "退出",
  "logout-ing": "正在注销...",
  "mail": "邮件",
  "mail-as-html": "HTML邮件",
  "mail-bcc": "密送",
  "mail-cc": "抄送",
  "mail-charset": "邮件字符编码",
  "mail-inbox": "收件箱",
  "mail-notify": "邮件通知",
  "mail-r-addr": "邮件地址",
  "mail-r-name": "名称",
  "mail-scene": "邮件场景",
  "mail-scene-ctmpl": "内容模板",
  "mail-scene-flt-tip": "请输入场景名称查询",
  "mail-scene-meta": "邮件场景属性",
  "mail-scene-nil-detail": "请选择一个邮件场景查看详情",
  "mail-scene-nm": "场景名称",
  "mail-scene-nm-tip": "请用半角英文数字或者下划线组合，并保证唯一",
  "mail-scene-var-trans": "转换脚本",
  "mail-scene-var-trans-placeholder": "譬如 jsc /path/to/script.js -vars",
  "mail-scene-var-trans-tip": "输入是原始变量的JSON，输出是一个JSON变量集合",
  "mail-setup": "邮件设置",
  "mail-subject": "邮件标题",
  "mail-to": "收信人",
  "male": "男",
  "map-hybrid": "俯瞰地图",
  "map-location": "地图位置",
  "map-location-clear": "清除地图位置",
  "map-location-edit": "编辑地图位置...",
  "map-roadmap": "道路地图",
  "map-satellite": "卫星照片",
  "map-terrain": "地形地图",
  "map-type": "地图类型",
  "me": "我",
  "media": "媒体",
  "meta": "元数据",
  "mine": "我的",
  "modal": "模式",
  "modify": "修改",
  "more": "更多",
  "move": "移动",
  "move-down": "下移",
  "move-to": "移动到...",
  "move-up": "上移",
  "msg": "消息",
  "name": "名称",
  "new-item": "新项目",
  "newsfeed": "消息流",
  "newtab": "新窗口",
  "next": "下一步",
  "nil": "无",
  "nil-content": "无内容",
  "nil-detail": "请选择一项查看详情",
  "nil-item": "请先选择一项",
  "nil-obj": "请选择一个对象",
  "nil-target": "未设置有效目标",
  "no": "否",
  "no-saved": "您有未保存的数据",
  "no-selected": "未选择",
  "no-set": "未设置",
  "no-title": "无标题",
  "note": "备注",
  "null": "空值",
  "obj": "对象",
  "off": "关",
  "ok": "确定",
  "on": "开",
  "open": "打开",
  "open-newtab": "在新标签打开",
  "org-add": "添加机构",
  "org-choose": "选择机构",
  "others": "其他",
  "paging-change-pgsz": "当前每页有${pgsz}条记录，您想修改为：",
  "paging-change-pgsz-invalid": "页大小必须是整数数字，而且必须大于0，可您... -_-!",
  "paging-change-pn": "当前第${pn}页，您想跳转到：（请输入 1 至 ${pgc} 之间的数字）",
  "paging-change-pn-invalid": "页码必须是整数数字，而且必须为 1 至 ${pgc} 之间的数字",
  "paging-first": "首页",
  "paging-last": "尾页",
  "paging-next": "后一页",
  "paging-prev": "前一页",
  "paging-sum": "共${pgc}页${sum}条记录，当前${count}/${pgsz}",
  "params": "参数",
  "passwd": "密码",
  "passwd-reset": "重置密码",
  "path": "路径",
  "phone": "手机",
  "phone-nb": "手机号",
  "post": "提交",
  "prev": "上一步",
  "preview": "预览",
  "price": "价格",
  "profile": "资料",
  "profile-edit": "编辑资料",
  "project-add": "添加项目",
  "prompt": "询问",
  "properties": "属性",
  "publish": "发布",
  "publishing": "正在发布...",
  "query": "查询",
  "refresh": "刷新",
  "refresh-hard": "硬性刷新",
  "refresh-hard-clear": "清空缓存并硬性刷新",
  "reload": "重新加载",
  "reloading": "重新加载数据...",
  "remove": "移除",
  "removing": "正在移除...",
  "rename": "重命名...",
  "renaming": "正在重命名...",
  "reset": "重置",
  "reset-change": "撤销修改",
  "reset-data": "重置数据",
  "restore": "恢复",
  "revoke": "撤销",
  "revoke-change": "撤销修改",
  "right": "右",
  "right-bottom": "右下",
  "right-top": "右上",
  "role": "角色",
  "role-actions": "角色动作",
  "role-behaviors": "业务权限",
  "role-in-charge": "负责人",
  "run": "运行",
  "run-finished": "脚本执行结束",
  "run-welcome": "正在运行脚本，请稍后 ...",
  "save": "保存",
  "save-change": "保存修改",
  "save-done": "保存成功",
  "save-now": "立即保存",
  "saving": "正在保存...",
  "score": "评分",
  "score-count": "打分人数",
  "search": "搜索",
  "search-adv": "高级搜索",
  "select": "选择",
  "select-all": "全部选中",
  "send": "发送",
  "settings": "设置",
  "setup": "设置",
  "setup-fields": "设置字段",
  "setup-reset": "重置设置",
  "size": "尺寸",
  "skip": "跳过",
  "slogan": "标语",
  "sms-scene-nm": "场景名称",
  "sms-scene-nm-tip": "请用半角英文数字或者下划线组合，并保证唯一",
  "sms-setup": "短信配置",
  "sort": "排序",
  "sort-asc": "升序",
  "sort-by": "排序方式",
  "sort-desc": "降序",
  "sort-tip-asc": "越小越靠前",
  "sort-tip-desc": "越大越靠前",
  "sort-val": "排序值",
  "source-code": "源代码",
  "stat-date-at": "统计日期",
  "stat-date-at-oor": "这个日期的统计数据还未就绪",
  "stat-date-span": "时间跨度",
  "stop": "停止",
  "structure": "结构",
  "style": "样式",
  "style-more": "更多样式",
  "submit": "提交",
  "success": "成功",
  "sys-settings": "系统设置",
  "tablet": "平板",
  "tags": "标签",
  "target": "目标",
  "target-id": "目标ID",
  "target-name": "目标名称",
  "target-path": "目标路径",
  "terminal": "终端",
  "terminate": "终止",
  "text": "文字",
  "timestamp": "时间戳",
  "title": "标题",
  "top": "上",
  "total": "总共",
  "total-count": "共 ${nb?0} ${unit?项}",
  "total-items": "总共${val}项",
  "trace": "跟踪",
  "track": "消息",
  "true": "是",
  "type": "类型",
  "undefined": "未定义",
  "under-construction": "正在施工中",
  "unknown": "未知",
  "unzip": "解压缩",
  "unzipping": "正在解压缩...",
  "upload": "上传",
  "upload-done": "文件上传已完成",
  "upload-file": "上传文件...",
  "upload-forbidden": "上传被禁止",
  "upload-nofinished": "文件上传还没有完成",
  "upload-notarget": "未设置上传目标",
  "upload-notarget-continue": "未设置上传目标，点击【继续】处理下一个文件，点击【取消】结束上传",
  "uploading": "正在上传",
  "user-avator": "用户头像",
  "value": "值",
  "video": "视频",
  "video-accelerometer": "视频加速",
  "video-add": "添加视频",
  "video-autoplay": "自动播放",
  "video-clipboard-write": "剪贴板写入",
  "video-encrypted-media": "媒体加密",
  "video-features": "视频特性",
  "video-gyroscope": "重播",
  "video-insert": "插入视频",
  "video-pic-in-pic": "画中画",
  "video-remove": "删除视频",
  "videos": "视频",
  "view": "查看",
  "view-resource": "查看源代码",
  "vu-mv": "毫伏",
  "vu-v": "伏特",
  "warn": "警告",
  "website": "网站",
  "width": "宽度",
  "www-admin-login": "后台登录界面",
  "www-home": "网站目录",
  "www-title": "前端网站",
  "yes": "是",
  "zip": "压缩",
  "zipping": "正在压缩..."
});
//========================================
// JOIN <_wn.i18n.json> ti/i18n/zh-cn/_wn.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-cn/_wn.i18n.json", {
  "wn-admin-check-obj-thumb": "检查图像缩略图...",
  "wn-admin-tools": "管理工具",
  "wn-cmd-panel-epilog": "脚本执行完毕，您可以关闭本窗口了 ^_^",
  "wn-cmd-panel-tip": "脚本运行可能需要一点时间，请不要关闭窗口",
  "wn-ctt-css-text": "CSS样式文件",
  "wn-ctt-folder-text": "文件夹",
  "wn-ctt-html-text": "HTML文本",
  "wn-ctt-js-text": "JS脚本",
  "wn-ctt-json-text": "JSON文本",
  "wn-ctt-less-text": "LESS文本",
  "wn-ctt-md-text": "Markdown文本",
  "wn-ctt-mjs-text": "模块化JS脚本",
  "wn-ctt-sass-text": "SASS文本",
  "wn-ctt-thing_set-text": "数据集合",
  "wn-ctt-txt-text": "纯文本",
  "wn-ctt-wnml-text": "WNML源文件",
  "wn-ctt-xml-text": "XML文本",
  "wn-data-scope": "指定范围",
  "wn-data-scope-phd": "譬如: 1-100",
  "wn-data-scope-tip": "要处理的数据范围，1-200 表示从第1条记录到第200条记录（包含）",
  "wn-edit-com-nil": "默认为标签控件",
  "wn-en-his-ct": "创建时间",
  "wn-en-his-flt-tip": "请输入用户ID或者名称过滤",
  "wn-en-his-mor": "操作细节",
  "wn-en-his-opt": "操作",
  "wn-en-his-tar": "目标",
  "wn-en-his-tid": "目标ID",
  "wn-en-his-tnm": "目标名",
  "wn-en-his-ttp": "目标类型",
  "wn-en-his-uid": "用户ID",
  "wn-en-his-unm": "用户名",
  "wn-en-his-usr": "用户",
  "wn-en-his-utp": "用户类型",
  "wn-expi-10m": "10分钟",
  "wn-expi-12h": "12小时",
  "wn-expi-14d": "14天",
  "wn-expi-1d": "1天",
  "wn-expi-1h": "1小时",
  "wn-expi-2h": "2小时",
  "wn-expi-30d": "30天",
  "wn-expi-30m": "30分钟",
  "wn-expi-3d": "3天",
  "wn-expi-6h": "6小时",
  "wn-expi-7d": "7天",
  "wn-expi-never": "永不过期",
  "wn-export-c-expi": "保存时间",
  "wn-export-c-expi-tip": "输出的临时文件将在服务器端保留多久",
  "wn-export-c-mapping": "映射规则",
  "wn-export-c-mapping-phd": "选择一种字段映射规则",
  "wn-export-c-mapping-tip": "所谓映射规则，就是字段输出时的转换的规则，包括如何指定字段名称，字段值如何转换等",
  "wn-export-c-mode": "数据范围",
  "wn-export-c-mode-all": "全部页",
  "wn-export-c-mode-checked": "选中记录",
  "wn-export-c-mode-current": "当前页",
  "wn-export-c-name": "导出文件名",
  "wn-export-c-name-phd": "请输入导出文件名",
  "wn-export-c-name-tip": "导出文件名，如果没有后缀名，会自动根据【导出类型】补全",
  "wn-export-c-type": "导出类型",
  "wn-export-c-type-csv": "CSV文件",
  "wn-export-c-type-json": "JSON",
  "wn-export-c-type-unknown": "未知的导出类型",
  "wn-export-c-type-xls": "电子表格",
  "wn-export-c-type-zip": "数据压缩包",
  "wn-export-choose-fields": "选择字段",
  "wn-export-confirm-many": "你要导出的数据很多，这个操作可能会需要较长时间，你确定要继续导出吗？",
  "wn-export-done": "完成",
  "wn-export-done-fail": "导出失败",
  "wn-export-done-fail-tip": "请点击查看错误详情",
  "wn-export-done-ok": "导出成功",
  "wn-export-done-ok-tip": "请点击下载链接下载",
  "wn-export-ing": "执行导出",
  "wn-export-ing-tip": "正在执行导出脚本，请稍后",
  "wn-export-open-dir": "打开导出历史目录...",
  "wn-export-setup": "导出设置",
  "wn-fsc-mail-scene-new": "新建一个邮件场景",
  "wn-fsc-mail-tmpl-new": "请输入新邮件模板的名称(要唯一，譬如 signup)",
  "wn-import-WithoutInput": "请上传要导入的数据文件",
  "wn-import-c-expi": "暂存时间",
  "wn-import-c-expi-tip": "上传的临时文件将在服务器端保留多久",
  "wn-import-c-mapping": "映射规则",
  "wn-import-c-mapping-phd": "选择一种字段映射规则",
  "wn-import-c-mapping-tip": "所谓映射规则，就是字段输出时的转换的规则，包括如何指定字段名称，字段值如何转换等",
  "wn-import-c-mode-all": "全部数据",
  "wn-import-c-tags": "数据标签",
  "wn-import-c-tags-tip": "为你导入的数据统一打上一个数据标签，有助于你在之后统一搜索到它们",
  "wn-import-confirm-many": "你要导入的数据很多，这个操作可能会需要花一些时间，你确定要继续导入吗？",
  "wn-import-setup": "导入设置",
  "wn-import-c-uniqkey": "唯一键",
  "wn-import-c-uniqkey-tip": "指定了唯一键，将会采用这一列去重",
  "wn-import-c-uniqkey-nil": "不用唯一键去重",
  "wn-import-c-withhook": "启用钩子",
  "wn-import-c-withhook-tip": "钩子是数据的关联处理逻辑，关闭它会让数据导入速度更快，但是自动设置的值你需要后续通过手工来处理",
  "wn-import-upload": "上传文件",
  "wn-import-upload-xlsx-tip": "仅支持 'xlsx' 文件，如果是 'xls' 文件，你需要另存为 'xlsx'再上传",
  "wn-invalid-fsize-max": "The maximum upload file size is ${maxSize}, but your file size is ${fileSize}",
  "wn-invalid-fsize-min": "The minimum upload file size is ${minSize}, but your file size is ${fileSize}",
  "wn-invalid-mimes": "不支持的文件内容类型 \"${current}\"，仅能支持 \"${supports}\"",
  "wn-invalid-types": "不支持的文件扩展名 \"${current}\"，仅能支持 \"${supports}\"",
  "wn-key-c": "创建者",
  "wn-key-ct": "创建时间",
  "wn-key-d0": "D0",
  "wn-key-d1": "D1",
  "wn-key-data": "数据",
  "wn-key-duration": "时长",
  "wn-key-expi": "过期时间",
  "wn-key-g": "主组",
  "wn-key-grp-advance": "高级",
  "wn-key-grp-basic": "基本",
  "wn-key-grp-customized": "自定义",
  "wn-key-grp-more": "更多",
  "wn-key-grp-others": "其他",
  "wn-key-grp-privilege": "权限",
  "wn-key-grp-thumb": "缩略图",
  "wn-key-grp-timestamp": "时间戳",
  "wn-key-height": "高",
  "wn-key-icon": "图标",
  "wn-key-id": "ID",
  "wn-key-len": "大小",
  "wn-key-lm": "最后修改",
  "wn-key-lbls": "标签",
  "wn-key-m": "修改者",
  "wn-key-md": "基本权限",
  "wn-key-mime": "内容类型",
  "wn-key-nm": "对象名",
  "wn-key-ph": "路径",
  "wn-key-pid": "父对象",
  "wn-key-pvg": "定制权限",
  "wn-key-race": "族类",
  "wn-key-sha1": "内容签名",
  "wn-key-thumb": "缩略图",
  "wn-key-title": "标题",
  "wn-key-tp": "类型",
  "wn-key-width": "宽",
  "wn-md-R": "读",
  "wn-md-W": "写",
  "wn-md-X": "用",
  "wn-md-blend-dft": "默认",
  "wn-md-blend-mode": "混合模式",
  "wn-md-blend-strong": "强覆盖",
  "wn-md-blend-weak": "弱混合",
  "wn-md-excutable": "可使用",
  "wn-md-member": "成员",
  "wn-md-other": "其他人",
  "wn-md-owner": "所有者",
  "wn-md-readable": "可读取",
  "wn-md-writable": "可写入",
  "wn-o-type-miss-match": "新文件类型【${newType}】与原始类型【${oldType}】不匹配",
  "wn-o-type-miss-match-convimg": "新图片类型【${newType}】与原始类型【${oldType}】不匹配，将会被自动转换，点击【是】继续上传数据，点击【否】将放弃本次操作",
  "wn-obj-nosaved": "您有未保存的对象",
  "wn-oc-auto-type": "全部类型",
  "wn-oc-free": "请输入对象完整名称，包括扩展名，譬如 `myfile.xml`",
  "wn-oc-tip": "新对象名称",
  "wn-org-new-node": "新组织节点",
  "wn-org-type-G": "部门",
  "wn-org-type-P": "职位",
  "wn-race-DIR": "目录",
  "wn-race-FILE": "文件",
  "wn-th-acc-pwd-choose-none": "请选择要重置密码的账号（可多选）",
  "wn-th-acc-pwd-done": "已经为${n}名用户重置了密码",
  "wn-th-acc-pwd-invalid": "密码中不得包含单双引号星号等非法字符",
  "wn-th-acc-pwd-reset-tip": "将密码重置为",
  "wn-th-acc-pwd-reset-tip-1": "将【${name}】的密码重置为",
  "wn-th-acc-pwd-reset-tip-N": "将【${name}】等${N}个账号的密码统统重置为",
  "wn-th-acc-pwd-too-short": "您输入的密码过短，不能少于6位，最好为数字字母以及特殊字符的组合",
  "wn-th-recount-media": "重新计算当前文件数量",
  "wn-th-recount-media-done": "当前文件数量: ${n}"
});
//========================================
// JOIN <hmaker.i18n.json> ti/i18n/zh-hk/hmaker.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-hk/hmaker.i18n.json", {
   "am-and": "並且",
   "am-blank": "爲空白",
   "am-boolFalse": "爲假",
   "am-boolTrue": "爲真",
   "am-empty": "爲空",
   "am-equals": "等於${val} ",
   "am-equalsIgnoreCase": "等於\"${val}\"且無視大小寫",
   "am-equalsType": "類型等於\"${val}\"",
   "am-exists": "存在'${val}'",
   "am-findInArray": "存在一個【${val}】的對象",
   "am-gt": "大於${val}",
   "am-gte": "大於等於${val}",
   "am-lt": "小於${val}",
   "am-lte": "小於等於${val}",
   "am-matchOf": "匹配'${val}'",
   "am-must-false": "肯定爲假",
   "am-must-true": "肯定爲真",
   "am-nil": "爲空",
   "am-nilOf": "字段${val}爲空",
   "am-noexists": "不存在'${val}'",
   "am-not": "不",
   "am-not-sure": "不太確定",
   "am-notEquals": "不等於${val} ",
   "am-notMatchOf": "不匹配'${FFFval}'",
   "am-notNil": "不爲空",
   "am-notNilOf": "字段${val}不爲空",
   "am-null": "爲空值",
   "am-nullOf": "字段${val}爲空值",
   "am-or": "或者",
   "am-undefined": "未定義",
   "am-undefinedOf": "字段${val}未定義",
   "com-form": "表單",
   "com-label": "標籤",
   "com-list": "列表",
   "hm-am-add": "添加條件",
   "hm-am-empty": "未設置條件",
   "hm-args": "參數表",
   "hm-args-partial": "參數填充",
   "hm-args-partial-left": "左填充",
   "hm-args-partial-right": "右填充",
   "hm-form-options-other-dftval": "其他·默認值",
   "hm-form-options-other-enabled": "顯示其他",
   "hm-form-options-other-ph": "其他·提示信息",
   "hm-form-options-other-ph-ph": "輸入其他選項",
   "hm-form-options-other-text": "其他·文字",
   "hm-form-options-other-width": "其他·寬度",
   "hm-type-Array": "數組",
   "hm-type-Boolean": "布爾",
   "hm-type-Group": "字段分組",
   "hm-type-Integer": "整數",
   "hm-type-Number": "數字",
   "hm-type-Object": "對象",
   "hm-type-String": "文本",
   "hm-type-icons": {
      "Array": "zmdi-format-list-bulleted",
      "Boolean": "zmdi-toll",
      "Group": "zmdi-collection-bookmark",
      "Integer": "zmdi-n-6-square",
      "Number": "zmdi-input-svideo",
      "Object": "zmdi-toys",
      "String": "zmdi-translate"
   },
   "hmaker-com-conf-blank": "請選擇一個控件設置其詳情",
   "hmaker-com-type-blank": "選擇一個控件",
   "hmaker-edit-form-del-group-all": "組以及全部字段",
   "hmaker-edit-form-del-group-confirm": "您是要刪除組以及其內的全部字段，還是僅是組？",
   "hmaker-edit-form-del-group-only": "僅是組",
   "hmaker-edit-form-field-nil": "請選擇一個字段編輯詳情",
   "hmaker-edit-form-new-field": "新字段",
   "hmaker-edit-form-new-field-e0": "字段名不能以數字開頭，內容只能爲小寫英文字母數字和下劃線",
   "hmaker-edit-form-new-field-e1": "字段【${val}】已存在，請另選一個名稱",
   "hmaker-edit-form-new-field-tip": "請輸入新字段名（只能爲小寫英文字母數字和下劃線）",
   "hmaker-edit-form-new-group": "新分組",
   "hmaker-edit-form-new-group-tip": "請輸入新分組名",
   "hmaker-edit-form-nil-field": "請先選擇一個字段",
   "hmaker-edit-form-not-current": "請選擇一個字段或者字段組",
   "hmaker-nav-blank-item": "請選擇一個導航項目編輯",
   "hmaker-nav-k-display": "鏈接顯示內容",
   "hmaker-nav-k-icon": "鏈接圖標",
   "hmaker-nav-k-title": "鏈接文字",
   "hmaker-nav-k-type": "鏈接類型",
   "hmaker-nav-k-value": "鏈接目標",
   "hmaker-nav-tp-dispatch": "方法調用",
   "hmaker-nav-tp-href": "外部鏈接",
   "hmaker-nav-tp-page": "站點頁面",
   "hmaker-site-k-apiBase": "接口路徑",
   "hmaker-site-k-base": "資源路徑",
   "hmaker-site-k-captcha": "驗證碼路徑",
   "hmaker-site-k-domain": "所屬域",
   "hmaker-site-k-entry": "着陸頁",
   "hmaker-site-prop": "站點屬性",
   "hmaker-site-state": "站點全局配置",
   "hmaker-site-state-actions": "全局動作表",
   "hmaker-site-state-apis": "接口集",
   "hmaker-site-state-blocks": "預定義佈局",
   "hmaker-site-state-general": "通用配置",
   "hmaker-site-state-nav": "全局導航條",
   "hmaker-site-state-router": "頁面路由",
   "hmaker-site-state-schema": "預定義控件",
   "hmaker-site-state-utils": "擴展函數",
   "hmaker-site-tree": "站點結構",
   "hmaker-site-tree-loading": "正在加載站點結構...",
   "hmk-adjustDelay": "調整延遲",
   "hmk-album-autofit": "自動適應寬度",
   "hmk-album-clrsz": "清除相冊尺寸",
   "hmk-album-id": "相冊ID",
   "hmk-album-info": "相冊信息",
   "hmk-album-list-mode": "列表模式",
   "hmk-album-margin": "相冊邊距",
   "hmk-album-name": "相冊名稱",
   "hmk-album-prop": "相冊屬性",
   "hmk-album-refresh": "刷新相冊內容",
   "hmk-aspect": "外觀",
   "hmk-aspect-more": "樣式外觀",
   "hmk-autoI18n": "國際化",
   "hmk-autofit": "自動適應寬度",
   "hmk-autoscale": "恢復比例",
   "hmk-behavior": "行爲",
   "hmk-blankAs": "空白樣式",
   "hmk-breakLine": "維持換行",
   "hmk-class-at": "位置",
   "hmk-class-at-bottom": "下部",
   "hmk-class-at-bottom-left": "左下",
   "hmk-class-at-bottom-right": "右下",
   "hmk-class-at-center": "居中",
   "hmk-class-at-left": "左側",
   "hmk-class-at-right": "右側",
   "hmk-class-at-top": "上部",
   "hmk-class-at-top-left": "左上",
   "hmk-class-at-top-right": "右上",
   "hmk-class-flex": "自動伸縮",
   "hmk-class-flex-both": "雙向",
   "hmk-class-flex-grow": "伸展",
   "hmk-class-flex-none": "關閉",
   "hmk-class-flex-shrink": "收縮",
   "hmk-class-font-size": "文字大小",
   "hmk-class-hover": "懸停效果",
   "hmk-class-hover-to-scale": "懸停放大",
   "hmk-class-hover-to-up": "懸停上浮",
   "hmk-class-hover-to-zoom": "懸停縮放",
   "hmk-class-item-margin": "項外距",
   "hmk-class-item-padding": "項內距",
   "hmk-class-item-space": "項間距",
   "hmk-class-object-fit": "對象填充",
   "hmk-class-object-fit-contain": "包含",
   "hmk-class-object-fit-cover": "封面",
   "hmk-class-object-fit-fill": "拉伸",
   "hmk-class-object-fit-none": "無",
   "hmk-class-pick": "編輯類選擇器",
   "hmk-class-sz-lg": "較大",
   "hmk-class-sz-md": "正常",
   "hmk-class-sz-no": "無",
   "hmk-class-sz-sm": "較小",
   "hmk-class-sz-xl": "特大",
   "hmk-class-sz-xs": "特小",
   "hmk-class-text": "文字",
   "hmk-class-text-at": "文字位置",
   "hmk-class-text-in": "居內",
   "hmk-class-text-mode": "文字模式",
   "hmk-class-text-out": "居外",
   "hmk-class-text-side": "文字放置",
   "hmk-class-text-style": "文字風格",
   "hmk-class-text-wrap": "文字折行",
   "hmk-class-text-wrap-auto": "自動",
   "hmk-class-text-wrap-clip": "剪裁",
   "hmk-class-text-wrap-ellipsis": "省略號",
   "hmk-class-title-wrap": "標題折行",
   "hmk-class-ts-mask": "遮罩",
   "hmk-class-ts-shadow": "陰影",
   "hmk-class-word-break-all": "按字母",
   "hmk-class-word-break-word": "按單詞",
   "hmk-class-word-keep-all": "不折行",
   "hmk-config-choose": "選擇配置信息",
   "hmk-config-nil": "找不到配置信息",
   "hmk-css-align-center": "居中",
   "hmk-css-align-justify": "兩端對齊",
   "hmk-css-align-left": "左對齊",
   "hmk-css-align-right": "右對齊",
   "hmk-css-background": "背景",
   "hmk-css-background-color": "背景顏色",
   "hmk-css-background-image": "背景圖片",
   "hmk-css-background-position": "背景位置",
   "hmk-css-background-position-x": "背景X軸位置",
   "hmk-css-background-position-y": "背景Y軸位置",
   "hmk-css-background-repeat": "背景重複",
   "hmk-css-background-repeat-no": "不重複",
   "hmk-css-background-repeat-round": "填充間隔",
   "hmk-css-background-repeat-space": "自動間隔",
   "hmk-css-background-repeat-x": "橫向平鋪",
   "hmk-css-background-repeat-y": "縱向平鋪",
   "hmk-css-background-repeat-yes": "雙向平鋪",
   "hmk-css-background-size": "背景尺寸",
   "hmk-css-background-size-auto": "自動",
   "hmk-css-background-size-contain": "包含",
   "hmk-css-background-size-cover": "封面",
   "hmk-css-background-size-full": "拉伸",
   "hmk-css-border": "邊框",
   "hmk-css-border-radius": "圓角",
   "hmk-css-box-shadow": "塊陰影",
   "hmk-css-c-auto": "自動",
   "hmk-css-color": "文字顏色",
   "hmk-css-edit": "編輯CSS樣式",
   "hmk-css-float": "文本繞圖",
   "hmk-css-float-left": "左浮動",
   "hmk-css-float-none": "不繞圖",
   "hmk-css-float-right": "右浮動",
   "hmk-css-font-size": "文字大小",
   "hmk-css-font-weight": "文字粗細",
   "hmk-css-g-inherit": "繼承",
   "hmk-css-g-initial": "初始",
   "hmk-css-g-unset": "默認",
   "hmk-css-grp-aspect": "外觀設置",
   "hmk-css-grp-background": "背景設置",
   "hmk-css-grp-measure": "尺度設置",
   "hmk-css-grp-texting": "文字設置",
   "hmk-css-height": "高度",
   "hmk-css-letter-spacing": "字間距",
   "hmk-css-line-height": "行高",
   "hmk-css-margin": "外邊距",
   "hmk-css-max-height": "最大高度",
   "hmk-css-max-width": "最大寬度",
   "hmk-css-min-height": "最小高度",
   "hmk-css-min-width": "最小寬度",
   "hmk-css-object-fit": "內容縮放",
   "hmk-css-object-fit-contain": "包含",
   "hmk-css-object-fit-cover": "封面",
   "hmk-css-object-fit-fill": "拉伸",
   "hmk-css-object-fit-none": "無",
   "hmk-css-object-fit-scale-down": "等比",
   "hmk-css-object-position": "內容位置",
   "hmk-css-opacity": "不透明度",
   "hmk-css-overflow": "內容溢出",
   "hmk-css-overflow-clip": "剪裁",
   "hmk-css-overflow-hidden": "隱藏",
   "hmk-css-overflow-scroll": "滾動",
   "hmk-css-overflow-visible": "可見",
   "hmk-css-padding": "內邊距",
   "hmk-css-text-align": "文字排列",
   "hmk-css-text-overflow": "文字溢出",
   "hmk-css-text-overflow-clip": "剪裁",
   "hmk-css-text-overflow-ellipsis": "省略號",
   "hmk-css-text-shadow": "文字陰影",
   "hmk-css-text-transform": "文字轉換",
   "hmk-css-text-transform-capitalize": "首大寫",
   "hmk-css-text-transform-lowercase": "全小寫",
   "hmk-css-text-transform-none": "無",
   "hmk-css-text-transform-uppercase": "全大寫",
   "hmk-css-white-space": "文字折行",
   "hmk-css-white-space-break-space": "保持預先格式並自動折行（除了空格）",
   "hmk-css-white-space-normal": "正常",
   "hmk-css-white-space-nowrap": "不折行",
   "hmk-css-white-space-pre": "保持預先格式",
   "hmk-css-white-space-pre-line": "保持預先格式並按行自動折行",
   "hmk-css-white-space-pre-wrap": "保持預先格式並自動折行",
   "hmk-css-width": "寬度",
   "hmk-currentTab": "當前標籤",
   "hmk-data": "數據",
   "hmk-dict": "數據字典",
   "hmk-editable": "可編輯",
   "hmk-fb-album-autofit": "臉書相冊自動適應寬度",
   "hmk-fb-album-clrsz": "清除臉書相冊尺寸",
   "hmk-fb-album-id": "臉書相冊ID",
   "hmk-fb-album-info": "臉書相冊信息",
   "hmk-fb-album-margin": "臉書相冊邊距",
   "hmk-fb-album-name": "臉書相冊名稱",
   "hmk-fb-album-prop": "相冊臉書屬性",
   "hmk-fb-album-refresh": "刷新臉書相冊內容",
   "hmk-field-checkEquals": "檢查相等",
   "hmk-field-com": "編輯控件",
   "hmk-field-defaultAs": "默認值",
   "hmk-field-disabled": "失效條件",
   "hmk-field-height": "高度",
   "hmk-field-hidden": "隱藏條件",
   "hmk-field-icon": "圖標",
   "hmk-field-name": "鍵名",
   "hmk-field-serializer": "自定義保存",
   "hmk-field-tip": "提示說明",
   "hmk-field-title": "顯示名",
   "hmk-field-transformer": "自定義轉換",
   "hmk-field-type": "類型",
   "hmk-field-width": "寬度",
   "hmk-fieldStatus": "字段狀態",
   "hmk-fields": "字段",
   "hmk-fields-advance": "高級",
   "hmk-fields-general": "基本",
   "hmk-float": "文本繞圖",
   "hmk-float-clear": "清除浮動",
   "hmk-float-left": "居左繞圖",
   "hmk-float-none": "不繞圖",
   "hmk-float-right": "居右繞圖",
   "hmk-form-data": "數據源",
   "hmk-form-height": "表單高度",
   "hmk-form-onlyFields": "僅聲明字段",
   "hmk-form-width": "表單寬度",
   "hmk-format": "格式化",
   "hmk-height": "控件高度",
   "hmk-href": "超鏈接",
   "hmk-icon": "表單圖標",
   "hmk-layout-cols": "列布局",
   "hmk-layout-falls": "瀑布",
   "hmk-layout-rows": "行佈局",
   "hmk-layout-tabs": "標籤佈局",
   "hmk-layout-wall": "牆貼",
   "hmk-margin-center": "邊距居中",
   "hmk-margin-lg": "較大邊距",
   "hmk-margin-md": "中等邊距",
   "hmk-margin-no": "清除邊距",
   "hmk-margin-sm": "小邊距",
   "hmk-measure": "尺寸",
   "hmk-mode": "顯示方式",
   "hmk-mode-all": "全部",
   "hmk-mode-tab": "標籤",
   "hmk-newTab": "新窗口",
   "hmk-placeholder": "佔位文本",
   "hmk-prefixIcon": "前綴圖標",
   "hmk-prefixText": "前綴文字",
   "hmk-size": "尺寸",
   "hmk-spacing": "間距",
   "hmk-spacing-comfy": "舒適",
   "hmk-spacing-tiny": "緊湊",
   "hmk-style-adv": "高級樣式",
   "hmk-style-brief": "摘要樣式",
   "hmk-style-exlink": "擴展鏈接",
   "hmk-style-image": "圖片樣式",
   "hmk-style-inside": "內部樣式",
   "hmk-style-outside": "外部樣式",
   "hmk-style-part-left": "左部樣式",
   "hmk-style-part-right": "右部樣式",
   "hmk-style-tile": "瓦片樣式",
   "hmk-style-title": "標題樣式",
   "hmk-suffixIcon": "後綴圖標",
   "hmk-suffixText": "後綴文字",
   "hmk-tabAt": "標籤位置",
   "hmk-tabAt-bottom-center": "下部居中",
   "hmk-tabAt-bottom-left": "下部居左",
   "hmk-tabAt-bottom-right": "下部居右",
   "hmk-tabAt-top-center": "上部居中",
   "hmk-tabAt-top-left": "上部居左",
   "hmk-tabAt-top-right": "上部居右",
   "hmk-title": "表單標題",
   "hmk-trimed": "修剪空白",
   "hmk-value": "輸入值",
   "hmk-valueMaxWidth": "值最大寬度",
   "hmk-w-edit-album-autoopen": "自動打開",
   "hmk-w-edit-album-fullpreview": "全屏預覽",
   "hmk-w-edit-album-prop": "編輯相冊屬性",
   "hmk-w-edit-alt-style": "標題樣式",
   "hmk-w-edit-attachment": "附件",
   "hmk-w-edit-attachment-clrsz": "清除附件尺寸",
   "hmk-w-edit-attachment-margin": "附件邊距",
   "hmk-w-edit-attachment-prop": "附件屬性",
   "hmk-w-edit-audio-clrsz": "清除音頻尺寸",
   "hmk-w-edit-audio-margin": "音頻邊距",
   "hmk-w-edit-audio-prop": "音頻屬性",
   "hmk-w-edit-fb-album-prop": "編輯臉書相冊屬性",
   "hmk-w-edit-img-clrsz": "清除圖片尺寸",
   "hmk-w-edit-img-info": "圖片信息",
   "hmk-w-edit-img-link": "圖片鏈接",
   "hmk-w-edit-img-link-tip": "譬如 http://xxxx",
   "hmk-w-edit-img-margin": "圖片邊距",
   "hmk-w-edit-img-newtab": "新窗口",
   "hmk-w-edit-img-pic": "圖片",
   "hmk-w-edit-img-prop": "圖片屬性",
   "hmk-w-edit-img-style": "圖片樣式",
   "hmk-w-edit-img-title": "圖片標題",
   "hmk-w-edit-img-title-tip": "請輸入圖片的標題",
   "hmk-w-edit-video-clrsz": "清除視頻尺寸",
   "hmk-w-edit-video-margin": "視頻邊距",
   "hmk-w-edit-video-prop": "視頻屬性",
   "hmk-w-edit-yt-playlist": "編輯播放列表屬性",
   "hmk-w-edit-yt-video": "編輯Youtube視頻屬性",
   "hmk-w-edit-yt-video-features": "視頻特性",
   "hmk-width": "控件寬度",
   "hmk-yt-playlist-autofit": "YT播放列表自動適應寬度",
   "hmk-yt-playlist-clrsz": "清除YT播放列表尺寸",
   "hmk-yt-playlist-id": "列表ID",
   "hmk-yt-playlist-info": "YT播放列表信息",
   "hmk-yt-playlist-margin": "YT播放列表邊距",
   "hmk-yt-playlist-name": "列表名稱",
   "hmk-yt-playlist-prop": "YT播放列表屬性",
   "hmk-yt-playlist-refresh": "刷新YT播放列表內容",
   "hmr-add-action": "添加新動作項",
   "hmr-add-react-item": "新建執行項",
   "hmr-t-exec": "執行腳本",
   "hmr-t-jsc": "執行JS腳本",
   "hmr-t-obj_clear": "清理標準對象",
   "hmr-t-obj_create": "創建標準對象",
   "hmr-t-obj_delete": "刪除標準對象",
   "hmr-t-obj_update": "更新標準對象",
   "hmr-t-thing_clear": "清理數據集對象",
   "hmr-t-thing_create": "創建數據集對象",
   "hmr-t-thing_delete": "刪除數據集對象",
   "hmr-t-thing_update": "更新數據集對象",
   "react-action-add": "添加動作項",
   "react-action-empty": "未定義任何動作項",
   "vt-Array": "數組",
   "vt-BoolVar": "布爾變量",
   "vt-Boolean": "布爾",
   "vt-Function": "函數",
   "vt-GetVar": "獲取變量",
   "vt-Invoking": "調用",
   "vt-Null": "空值",
   "vt-Number": "數字",
   "vt-Object": "對象",
   "vt-String": "字符串",
   "vt-Tmpl": "模板",
   "vt-Undefined": "未定義"
});
//========================================
// JOIN <ti-datetime.i18n.json> ti/i18n/zh-hk/ti-datetime.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-hk/ti-datetime.i18n.json", {
   "Apr": "四月",
   "Aug": "八月",
   "Dec": "十二月",
   "Feb": "二月",
   "Fri": "週五",
   "Friday": "星期五",
   "Jan": "一月",
   "Jul": "七月",
   "Jun": "六月",
   "Mar": "三月",
   "May": "五月",
   "Mon": "週一",
   "Monday": "星期一",
   "Nov": "十一月",
   "Oct": "十月",
   "Sat": "週六",
   "Saturday": "星期六",
   "Sep": "九月",
   "Sun": "週日",
   "Sunday": "星期日",
   "Thu": "週四",
   "Thursday": "星期四",
   "Tue": "週二",
   "Tuesday": "星期二",
   "Wed": "週三",
   "Wednesday": "星期三",
   "blank-date": "請選擇日期",
   "blank-date-range": "請選擇日期範圍",
   "blank-datetime": "請選擇日期時間",
   "blank-month": "請選擇月份",
   "blank-time": "請選擇時間",
   "blank-time-range": "請選擇時間範圍",
   "cal": {
      "abbr": {
         "Apr": "四月",
         "Aug": "八月",
         "Dec": "十二",
         "Feb": "二月",
         "Jan": "一月",
         "Jul": "七月",
         "Jun": "六月",
         "Mar": "三月",
         "May": "五月",
         "Nov": "十一",
         "Oct": "十月",
         "Sep": "九月"
      },
      "d-range-beyond-days": "${yy0}年${MM0}月${dd0}至${dd1}日",
      "d-range-beyond-months": "${yy0}年${MM0}月${dd0}日至${MM1}月${dd1}日",
      "d-range-beyond-years": "${yy0}年${MM0}月${dd0}日至${yy1}年${MM1}月${dd1}日",
      "d-range-in-same-day": "${yy0}年${MM0}月${dd0}日全天",
      "m-range-beyond-months": "${yy0}年${MT0}至${MT1}",
      "m-range-beyond-years": "${yy0}年${MT0}至${yy1}年${MT1}",
      "week": ["日", "一", "二", "三", "四", "五", "六"]
   },
   "date-fmt": "yyyy年M月d日",
   "dt-range-from": "從",
   "dt-range-to": "至",
   "dt-range-unknown": "未知時間範圍",
   "du-in-min": "${n}分鐘",
   "time": {
      "any-time": "yyyy年M月d日",
      "in-year": "M月d日",
      "past-in-min": "剛剛",
      "past-in-hour": "${min}分鐘前",
      "past-in-day": "${hour}小時前",
      "past-in-week": "${day}天前",
      "future-in-min": "即將",
      "future-in-hour": "${min}分鐘後",
      "future-in-day": "${hour}小時後",
      "future-in-week": "${day}天后"
   },
   "time-begin": "開始時間",
   "time-end": "結束時間",
   "time-ms": "毫秒",
   "today": "今天",
   "tu-day": "天",
   "tu-hou": "小時",
   "tu-min": "分鐘",
   "tu-mon": "月",
   "tu-sec": "秒",
   "tu-week": "周",
   "tu-year": "年"
});
//========================================
// JOIN <ti-text-editor.i18n.json> ti/i18n/zh-hk/ti-text-editor.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-hk/ti-text-editor.i18n.json", {
   "wordp-h0": "正文",
   "wordp-h1": "標題 1",
   "wordp-h2": "標題 2",
   "wordp-h3": "標題 3",
   "wordp-h4": "標題 4",
   "wordp-h5": "標題 5",
   "wordp-h6": "標題 6",
   "wordp-heading": "標題級別",
   "wordp-link": "超鏈接",
   "wordp-nil-sel": "請先選擇一段文字"
});
//========================================
// JOIN <web.i18n.json> ti/i18n/zh-hk/web.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-hk/web.i18n.json", {
   "account": "賬戶",
   "account-add": "添加賬戶",
   "account-flt-tip": "請輸入賬號名過濾",
   "account-manage": "賬戶管理",
   "account-meta": "賬戶屬性",
   "account-meta-tip": "請選擇一個賬號查看詳情",
   "address-consignee": "收貨人",
   "address-empty-list": "未設置任何收貨地址",
   "address-flt-tip": "請輸入地址名過濾",
   "address-is-dft": "默認收貨地址",
   "address-k-area": "區縣",
   "address-k-city": "城市",
   "address-k-code": "地址編碼",
   "address-k-code-tip": "12位國家地址編碼",
   "address-k-consignee": "收貨人姓名",
   "address-k-country": "國家",
   "address-k-dftaddr": "默認地址",
   "address-k-door": "門牌",
   "address-k-email": "郵箱",
   "address-k-phone": "電話",
   "address-k-postcode": "郵編",
   "address-k-province": "省/直轄市",
   "address-k-street": "鄉鎮/街道",
   "address-k-title": "地址",
   "address-k-tp": "地址類型",
   "address-k-tp-s": "賣家地址",
   "address-k-tp-u": "用戶地址",
   "address-k-uid": "用戶",
   "address-k-uid-tip": "輸入關聯用戶名過濾",
   "address-meta": "地址屬性",
   "address-nil": "空地址",
   "address-nil-detail": "請選擇一個地址查看詳情",
   "address-rm-confirm": "您確定要刪除這個地址嗎？",
   "address-set-dft": "設爲默認地址",
   "address-shipping-add": "添加收貨地址",
   "admin-flt-tip": "請輸入管理員名過濾",
   "admin-meta": "管理員屬性",
   "admin-new": "新管理員",
   "admin-nickname": "管理員暱稱",
   "admin-no-detail": "請選擇一個管理員查看詳情",
   "ar-cate": "文章分類",
   "ar-content": "文章內容",
   "ar-duration": "閱讀時長",
   "ar-flt-tip": "請輸入文章標題過濾",
   "ar-meta": "文章屬性",
   "ar-meta-tip": "請選擇一篇文章查看詳情",
   "ar-new": "新文章",
   "ar-nm": "文章名稱",
   "ar-pubat": "發佈日期",
   "ar-thumb": "縮略封面",
   "ar-title": "文章標題",
   "ar-watch-c": "瀏覽次數",
   "auth-bind": "綁定",
   "auth-bind-email-title": "綁定郵箱",
   "auth-bind-phone-title": "綁定手機",
   "auth-blank-email": "郵箱不能爲空",
   "auth-blank-name": "名稱不能爲空",
   "auth-blank-name-passwd": "名稱或者密碼不能爲空",
   "auth-blank-phone": "手機號不能爲空",
   "auth-doing": "正在驗證",
   "auth-email-tip": "郵箱地址",
   "auth-email-title": "郵件密碼登錄/註冊",
   "auth-email-vcode": "郵件密碼",
   "auth-email-vcode-get": "獲取郵件密碼",
   "auth-go-email": "郵件密碼登錄/註冊",
   "auth-go-passwd": "賬號密碼登錄",
   "auth-go-phone": "短信密碼登錄/註冊",
   "auth-login": "登錄",
   "auth-login-NoSaltedPasswd": "你還未初始化您的登錄密碼，請切換至【${ta?驗證碼}】登錄，之後前往【用戶中心 > 重置密碼】初始化您的登錄密碼，謝謝",
   "auth-login-or-signup": "登錄/註冊",
   "auth-logout-confirm": "您確定要退出登錄嗎？",
   "auth-ok": "賬號驗證通過",
   "auth-passwd-getback": "找回密碼",
   "auth-passwd-name-email-tip": "郵箱地址/登錄名",
   "auth-passwd-name-phone-tip": "手機號/登錄名",
   "auth-passwd-tip": "密碼",
   "auth-passwd-title": "賬號密碼登錄",
   "auth-phone-tip": "手機號",
   "auth-phone-title": "短信密碼登錄/註冊",
   "auth-phone-vcode": "短信密碼",
   "auth-phone-vcode-get": "獲取短信密碼",
   "auth-reset-passwd": "重置密碼 ...",
   "auth-reset-passwd-again": "再次重置密碼",
   "auth-reset-passwd-btn-invalid": "密碼包含非法字符",
   "auth-reset-passwd-btn-lack": "請填寫必要信息",
   "auth-reset-passwd-btn-ready": "立即重置密碼",
   "auth-reset-passwd-btn-short": "密碼至少6位",
   "auth-reset-passwd-btn-unmatch": "密碼兩次輸入不一致",
   "auth-reset-passwd-by-email": "用郵箱重置密碼",
   "auth-reset-passwd-by-email-sent": "已經向您的註冊郵箱 ${email} 發送了郵件密碼",
   "auth-reset-passwd-by-email-tip": "請輸入註冊郵箱地址",
   "auth-reset-passwd-by-passwd": "用舊密碼重置密碼",
   "auth-reset-passwd-by-phone": "用手機重置密碼",
   "auth-reset-passwd-by-phone-sent": "已經向您的手機 ${phone} 發送了短信密碼",
   "auth-reset-passwd-by-phone-tip": "請輸入註冊手機號碼",
   "auth-reset-passwd-ing": "正在重置密碼...",
   "auth-reset-passwd-lack-email": "請輸入註冊郵箱地址",
   "auth-reset-passwd-lack-phone": "請輸入註冊手機號",
   "auth-reset-passwd-new": "新密碼（最少6位）",
   "auth-reset-passwd-ok": "密碼已經重置，下次登錄時生效",
   "auth-reset-passwd-old": "舊密碼",
   "auth-reset-passwd-ren": "再次確認",
   "auth-sending-vcode": "正在發送驗證碼",
   "auth-sent-ok": "${ta?驗證碼}已發出，請在${by}查收，${min}分鐘內有效",
   "auth-ta-by-email": "郵箱裏",
   "auth-ta-by-phone": "手機上",
   "auth-ta-email": "郵件密碼",
   "auth-ta-phone": "手機密碼",
   "auth-vcode-delay": "${sec} 秒後重新發送",
   "auth-vcode-lost": "收不到驗證碼？",
   "base-info": "基本信息",
   "blog": "博客",
   "blog-manage": "博客管理",
   "buy-checkout-nil": "請選擇要付款的商品",
   "cate": "分類",
   "cate-flt-tip": "請輸入分類名過濾",
   "cate-maj": "主分類",
   "cate-meta": "分類屬性",
   "cate-new": "新分類",
   "cate-nil-tip": "請選擇一個分類",
   "cate-no-detail": "請選擇一個分類查看詳情",
   "cate-pa": "父分類",
   "cate-pa-nil": "請選擇自己的父分類",
   "cate-sub": "子分類",
   "cate-sub-nil": "請選擇自己的子分類",
   "cate-val": "分類值",
   "cmt-brief": "評論摘要",
   "cmt-content": "評論內容",
   "cmt-flt-tip": "請輸入用戶ID或者評論內容過濾",
   "cmt-meta": "評論屬性",
   "cmt-no-detail": "請選擇一個角色查看詳情",
   "cmt-target": "評論目標",
   "cmt-type": "評論類型",
   "cmt-user": "評論賬戶",
   "comments": "評論",
   "cover": "封面",
   "cover-pic": "封面圖片",
   "detail-info": "詳細信息",
   "dir-media": "媒體目錄",
   "e-cmd-passwd-old_invalid": "舊密碼錯誤",
   "e-cmd-www_passwd-Blank": "新密碼爲空",
   "e-cmd-www_passwd-CheckBlankAccount": "空賬戶",
   "e-cmd-www_passwd-CheckBlankCode": "空驗證碼",
   "e-cmd-www_passwd-CheckCodeFail": "驗證碼錯誤",
   "e-cmd-www_passwd-CheckFailed": "校驗錯誤",
   "e-cmd-www_passwd-CheckWeirdAccount": "詭異的賬戶",
   "e-cmd-www_passwd-InvalidNewPasswd": "新密碼無效",
   "e-cmd-www_passwd-LackTarget": "缺少重置目標",
   "e-cmd-www_passwd-TooShort": "新密碼太短",
   "e-cmd-www_passwd-nopvg": "沒有重置密碼的權限",
   "e-run-action-test-fail": "執行操作前置條件不足",
   "e-www-captcha-fail_send_by_email": "郵件密碼發送失敗，請檢查郵件賬戶是否正確",
   "e-www-invalid-captcha": "${ta?驗證碼}錯誤",
   "e-www-login-invalid-passwd": "賬號密碼錯誤",
   "e-www-login-noexists": "賬號不存在",
   "e-www-order-OutOfStore": "商品${val?}庫存不足",
   "invoice-k-bankaccount": "銀行賬號",
   "invoice-k-bankname": "開戶行",
   "invoice-k-busiaddr": "企業地址",
   "invoice-k-busiphone": "企業電話",
   "invoice-k-invdft": "默認擡頭",
   "invoice-k-invtfn": "發票稅號",
   "invoice-k-invtitle": "發票擡頭",
   "invoice-k-type": "發票類型",
   "invoice-k-uemail": "收票人郵箱",
   "invoice-k-uid": "關聯賬戶",
   "invoice-k-uid-tip": "輸入關聯用戶名過濾",
   "invoice-k-uname": "收票人名稱",
   "invoice-k-uphone": "收票人電話",
   "invoice-kg-bank": "銀行信息",
   "invoice-kg-busi": "企業信息",
   "invoice-kg-inv": "發票信息",
   "invoice-kg-u": "收票人信息",
   "k-ct-date": "創建日期",
   "k-lm": "最後更新",
   "me-k-account": "賬戶",
   "me-k-avatar": "頭像",
   "me-k-city": "城市",
   "me-k-country": "國家",
   "me-k-dept": "所屬部門",
   "me-k-email": "郵箱",
   "me-k-job": "職位",
   "me-k-job-tip": "請選擇職位",
   "me-k-login": "最後登錄",
   "me-k-nickname": "用戶暱稱",
   "me-k-nm": "登錄名",
   "me-k-phone": "手機號",
   "me-k-role": "角色",
   "me-k-sex": "性別",
   "mine": "我的",
   "my-favors": "我的收藏",
   "my-favors-blog": "收藏的博客",
   "my-favors-goods": "收藏的商品",
   "my-favors-posts": "收藏的文章",
   "my-favors-spots": "收藏的景點",
   "my-favors-video": "收藏的視頻",
   "my-orders": "我的訂單",
   "my-orders-shop": "購物訂單",
   "my-orders-video": "視頻訂單",
   "my-passwd": "重置密碼",
   "my-profile": "我的資料",
   "my-shipping-address": "收貨地址",
   "my-shopping-car": "購物車",
   "or-st-ca": "已取消",
   "or-st-dn": "完成",
   "or-st-fa": "創建訂單失敗",
   "or-st-nw": "提交訂單",
   "or-st-ok": "支付成功",
   "or-st-sp": "已發貨",
   "or-st-wt": "待支付",
   "ord-detail": "訂單詳情",
   "order-flt-tip": "請輸入訂單ID查詢",
   "order-k-accounts": "用戶庫",
   "order-k-addr_ship": "發貨地址",
   "order-k-addr_ship_code": "發貨地址編碼",
   "order-k-addr_ship_country": "發貨國家",
   "order-k-addr_ship_door": "發貨門牌",
   "order-k-addr_user": "收貨地址",
   "order-k-addr_user_area": "地區",
   "order-k-addr_user_city": "城市",
   "order-k-addr_user_code": "收貨地址編碼",
   "order-k-addr_user_country": "收貨國家",
   "order-k-addr_user_door": "收貨門牌",
   "order-k-addr_user_province": "省",
   "order-k-addr_user_street": "街道",
   "order-k-buyer_id": "買家",
   "order-k-ca_at": "取消時間",
   "order-k-currency": "貨幣單位",
   "order-k-discount": "優惠",
   "order-k-dn_at": "完成時間",
   "order-k-fa_at": "支付失敗",
   "order-k-fee": "支付金額",
   "order-k-freight": "運費",
   "order-k-freight-m": "修改運費",
   "order-k-freight-m-tip": "可以在這裏輸入0爲客戶免去運費",
   "order-k-id": "訂單號",
   "order-k-invoice": "發票信息",
   "order-k-nominal": "標稱總價",
   "order-k-note": "備註",
   "order-k-ok_at": "支付成功",
   "order-k-pay_id": "支付單",
   "order-k-pay_tp": "支付類型",
   "order-k-payment": "支付信息",
   "order-k-prefee": "基礎金額",
   "order-k-prefee-m": "修改總價",
   "order-k-prefee-m-tip": "爲用戶輸入新的協商後的商品總價",
   "order-k-price": "訂單金額",
   "order-k-pro-amount": "數量",
   "order-k-pro-price": "單價",
   "order-k-pro-retail": "零售價",
   "order-k-pro-subretail": "零計",
   "order-k-pro-subtotal": "小計",
   "order-k-pro-title": "商品標題",
   "order-k-products": "商品信息",
   "order-k-profit": "收益金額",
   "order-k-seller": "賣家",
   "order-k-sp_at": "發貨時間",
   "order-k-st": "訂單狀態",
   "order-k-title": "訂單標題",
   "order-k-total": "商品總價",
   "order-k-user_email": "收貨人郵箱",
   "order-k-user_name": "收貨人姓名",
   "order-k-user_phone": "收貨人手機",
   "order-k-waybil": "物流信息",
   "order-k-waybil_com": "物流公司",
   "order-k-waybil_nb": "運單號",
   "order-k-wt_at": "支付時間",
   "order-nil-detail": "請選擇一個訂單查看詳情",
   "order-pay-id": "支付單號",
   "order-pay-status": "交易狀態",
   "order-shipaddr-nil": "請指定一個收貨地址",
   "passwd-invalid-char": "密碼只能包括英文數字/大小寫字母/以及特殊字符",
   "passwd-sl-1": "弱",
   "passwd-sl-2": "較弱",
   "passwd-sl-3": "中",
   "passwd-sl-4": "較強",
   "passwd-sl-5": "強",
   "passwd-tip": "請輸入最少6位的英文數字/大小寫字母/特殊字符的組合",
   "pay-by-free": "免費",
   "pay-by-paypal": "PayPal",
   "pay-by-wx-jsapi": "微信JSAPI",
   "pay-by-wx-qrcode": "微信掃碼",
   "pay-by-wx-scan": "微信付款碼",
   "pay-by-zfb-qrcode": "支付寶掃碼",
   "pay-by-zfb-scan": "支付寶付款碼",
   "pay-checkout-it-amount": "數量",
   "pay-checkout-it-name": "商品名稱",
   "pay-checkout-it-price": "單價",
   "pay-checkout-it-subtotal": "小計",
   "pay-checkout-tip": "請確認你購買的商品數量和金額",
   "pay-paypal": "PayPal",
   "pay-proceed-check": "檢查支付結果",
   "pay-proceed-ing": "正在檢查...",
   "pay-re-fail": "支付失敗",
   "pay-re-nil": "支付結果是一隻薛定諤的貓",
   "pay-re-ok": "支付成功",
   "pay-re-wait": "等待支付中",
   "pay-step-checkout-title": "確認訂單",
   "pay-step-choose-nil": "☝ 請選擇上面的一個支付方式 👆",
   "pay-step-choose-tip": "您可以選擇下面任意一種支付方式支付本訂單",
   "pay-step-choose-tip2": "您將使用${val}支付本訂單",
   "pay-step-choose-title": "支付方式",
   "pay-step-choose-title2": "選擇支付方式",
   "pay-step-done-title": "完成",
   "pay-step-proceed-create-order": "正在創建訂單...",
   "pay-step-proceed-fetch-order": "正在獲取訂單...",
   "pay-step-proceed-nil": "您未選擇任何支付方式",
   "pay-step-proceed-tip": "使用${val}支付本訂單",
   "pay-step-proceed-title": "支付",
   "pay-tip-wx-qrcode": "請於15分鐘內用微信掃一掃付款碼",
   "pay-tip-zfb-qrcode": "請於15分鐘內用支付寶掃一掃付款碼",
   "pay-title": "支付流程",
   "pay-wx": "微信支付",
   "pay-zfb": "支付寶",
   "paypal-amount_value": "交易金額",
   "paypal-approve-tip": "已經在新標籤裏爲您打開了PayPal支付頁面，如果沒有打開，請點擊☝上面的圖標。支付完畢，頁面會自動感知到，如果沒有反應，試着點擊👇下面的【檢查支付結果】按鈕。",
   "paypal-cap-id": "記錄ID",
   "paypal-cap-status": "記錄狀態",
   "paypal-currency": "貨幣單位",
   "paypal-id": "PayPal交易號",
   "paypal-payer_email": "交易賬戶郵箱",
   "paypal-payer_id": "交易賬戶ID",
   "photo": "照片",
   "post-content-blank": "您提交的內容不能爲空，也不能少於10個字",
   "profile-title": "我的基本信息",
   "pubat": "發佈日期",
   "read-du": "閱讀時長",
   "role": "角色",
   "role-add": "添加角色",
   "role-as-domain": "域角色",
   "role-as-domain-admin": "管理員",
   "role-as-domain-guest": "訪客",
   "role-as-domain-member": "成員",
   "role-as-guest": "訪客",
   "role-as-normal": "普通用戶",
   "role-as-op": "運維角色",
   "role-as-vip": "VIP用戶",
   "role-dft": "默認角色",
   "role-flt-tip": "請輸入角色名過濾",
   "role-manage": "角色管理",
   "role-meta": "角色屬性",
   "role-meta-tip": "請選擇一個角色查看詳情",
   "role-name": "角色名",
   "role-select-tip": "請選擇角色",
   "role-val": "角色值",
   "shop-basket-clean-confirm": "您確定要清空購物車內全部商品嗎？這是一個不能撤回的操作。",
   "shop-basket-remove-confirm": "您確定要從購物車中刪除這個商品嗎？",
   "topic": "主題",
   "type-new": "新類型",
   "video-title": "視頻標題",
   "watch_c": "瀏覽次數",
   "waybil-com-ane": "安能物流",
   "waybil-com-best": "百世快遞",
   "waybil-com-db": "德邦快遞",
   "waybil-com-ems": "中國郵政速遞物流",
   "waybil-com-jdl": "京東物流",
   "waybil-com-pj": "品駿快遞",
   "waybil-com-sf": "順豐快遞",
   "waybil-com-sto": "申通快遞",
   "waybil-com-uce": "優速快遞",
   "waybil-com-yto": "圓通速遞",
   "waybil-com-yunda": "韻達快遞",
   "waybil-com-zto": "中通快遞"
});
//========================================
// JOIN <wn-manager.i18n.json> ti/i18n/zh-hk/wn-manager.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-hk/wn-manager.i18n.json", {
   "ti-loading": "加載中...",
   "wn-adaptlist": "對象瀏覽器",
   "wn-create-fail": "創建失敗",
   "wn-create-invalid": "新對象名稱不能包括非法字符",
   "wn-create-ok": "創建成功",
   "wn-create-too-long": "新對象名稱過長",
   "wn-del-confirm": "您確定要刪除選中的${N}個項目嗎？這是一個不可撤銷的操作！",
   "wn-del-item": "正在刪除: \"${name}\"",
   "wn-del-no-empty-folder": "目錄\"${nm}\"不是空的，您是否要全部刪除？點擊\"否\"跳過",
   "wn-del-none": "請選擇至少一個對象進行刪除!",
   "wn-del-ok": "已有 ${N} 個對象被移除",
   "wn-download-dir": "對象 \"${nm}\" 是一個目錄，點擊\"繼續\"將跳過它並下載下一個文件，點擊\"終止\"將結束本次操作!",
   "wn-download-none": "請選擇至少一個文件進行下載!",
   "wn-download-too-many": "即將逐個下載 ${N} 個文件，繼續嗎？",
   "wn-expose-hidden-off": "不顯示隱藏的對象",
   "wn-expose-hidden-on": "顯示隱藏的對象",
   "wn-gui": "通用佈局界面",
   "wn-list-view-type": "視圖類型",
   "wn-manager-is-loading": "管理器正在加載數據",
   "wn-manager-no-meta": "管理器未設置對象",
   "wn-move-to-confirm": "您確定要移動選中的${N}個項目嗎？這是一個不可撤銷的操作！",
   "wn-move-to-none": "請選擇至少一個對象進行移動!",
   "wn-move-to-ok": "已有 ${N} 個對象被移動到了新的目標",
   "wn-obj-preview": "對象預覽",
   "wn-obj-puretext": "純文本編輯器",
   "wn-obj-single-com": "單控件測試套",
   "wn-publish-done": "發佈成功",
   "wn-publish-to-nil": "未設置發佈目標",
   "wn-publish-to-noexist": "發佈目標不存在",
   "wn-rename": "重命名對象 \"${name}\"",
   "wn-rename-fail": "重命名失敗",
   "wn-rename-invalid": "名稱不能包括非法字符",
   "wn-rename-none": "請選擇一個文件重命名!",
   "wn-rename-ok": "重命名成功",
   "wn-rename-suffix-changed": "您的文件後綴名發生變化，您需要自動爲您補全原來的後綴嗎？",
   "wn-rename-too-long": "名稱過長",
   "wn-thing-manager": "數據管理器",
   "wn-view-opening": "正在加載界面..."
});
//========================================
// JOIN <wn-obj-preview.i18n.json> ti/i18n/zh-hk/wn-obj-preview.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-hk/wn-obj-preview.i18n.json", {
   "wop-fullscreen-enter": "進入全屏",
   "wop-fullscreen-quit": "退出全屏"
});
//========================================
// JOIN <wn-thing.i18n.json> ti/i18n/zh-hk/wn-thing.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-hk/wn-thing.i18n.json", {
   "e-thing-ukey-duplicated": "違反唯一鍵約束",
   "thing-clean": "清空回收站",
   "thing-cleaning": "正在清空...",
   "thing-content": "對象內容",
   "thing-content-hide": "隱藏內容",
   "thing-content-show": "顯示內容",
   "thing-create": "創建新對象",
   "thing-create-in-recyclebin": "請先退出回收站，再創建新對象",
   "thing-enter-recyclebin": "打開回收站",
   "thing-files": "對象文件表",
   "thing-files-attachment": "附件目錄",
   "thing-files-hide": "隱藏文件表",
   "thing-files-media": "媒體目錄",
   "thing-files-show": "顯示文件表",
   "thing-filter-kwdplhd": "請輸入查詢條件",
   "thing-leave-recyclebin": "退出回收站",
   "thing-meta": "對象屬性",
   "thing-meta-hide": "隱藏屬性",
   "thing-meta-show": "顯示屬性",
   "thing-recycle-bin": "回收站",
   "thing-restore": "恢復選中",
   "thing-restore-none": "請先選擇要恢復的數據",
   "thing-restoring": "正在恢復..."
});
//========================================
// JOIN <_net.i18n.json> ti/i18n/zh-hk/_net.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-hk/_net.i18n.json", {
   "net-ct": "創建時間",
   "net-fb-reload-album-cover": "強制刷新相冊封面",
   "net-fb-relogin": "重新登錄FB賬戶",
   "net-flt-nil": "查找視頻名稱",
   "net-vod-add-video": "添加視頻",
   "net-vod-cate": "視頻分類",
   "net-vod-du-long": "長視頻",
   "net-vod-du-short": "短視頻",
   "net-vod-du-tv": "劇集視頻",
   "net-vod-duration": "視頻時長",
   "net-vod-size": "視頻大小",
   "net-vod-video-nil": "請選擇一個視頻查看詳情",
   "net-youtube": "Youtube",
   "net-youtube-add-video": "添加Youtube視頻"
});
//========================================
// JOIN <_ti.i18n.json> ti/i18n/zh-hk/_ti.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-hk/_ti.i18n.json", {
   "add": "添加",
   "add-item": "添加新項",
   "add-now": "立即添加",
   "add-watch": "添加監控",
   "add-watch-clear": "清除全部監控",
   "add-watch-create": "建立新監控",
   "add-watch-create-tip": "請輸入監控名稱",
   "add-watch-exists": "這個名字已經存在了，請換一個",
   "add-watch-remove": "刪除當前監控",
   "add-watch-tip": "將當前的搜索條件保存到本地存儲",
   "album": "相冊",
   "album-add": "添加相冊",
   "album-clrsz": "清除相冊尺寸",
   "album-insert": "插入相冊",
   "album-margin": "相冊邊距",
   "album-prop": "相冊屬性",
   "album-refresh": "刷新相冊內容",
   "albums": "相冊",
   "all": "全部",
   "allowfullscreen": "允許全屏",
   "amount": "數量",
   "attachment": "附件",
   "attachment-add": "添加附件",
   "attachment-insert": "插入附件",
   "attachments": "附件",
   "audio": "音頻",
   "audio-add": "添加音頻",
   "audio-insert": "插入音頻",
   "audios": "音頻",
   "avatar": "頭像",
   "back": "回退",
   "back-to-list": "回退到列表",
   "banner": "頭圖",
   "batch-none": "請從下面列表中選擇至少一個對象進行批量更新",
   "batch-update": "批量更新",
   "blank": "空白",
   "blank-to-edit": "請選擇要編輯的項目",
   "bottom": "下",
   "brief": "摘要",
   "brief-d": "摘要描述",
   "brief-i": "摘要說明",
   "buy": "購買",
   "buy-now": "立即購買",
   "cancel": "取消",
   "cancel-all": "取消選中",
   "candidate": "備選項",
   "captcha": "驗證碼",
   "captcha-chagne": "換一張",
   "captcha-tip": "請輸入圖中的驗證碼",
   "center": "居中",
   "chart": "圖表",
   "chart-bar": "柱狀圖",
   "chart-line": "折線圖",
   "chart-pie": "餅狀圖",
   "chart-rank": "條狀圖",
   "check-tip-all": "全選項目，點擊取消全選",
   "check-tip-none": "點擊全選",
   "check-tip-part": "部分選中項目，點擊全選",
   "checked": "已選中",
   "choose": "選擇",
   "choose-fields": "選擇字段",
   "choose-file": "選擇文件",
   "choose-obj": "選擇對象",
   "clean": "清理",
   "clear": "清除",
   "clone": "克隆",
   "clone-copy": "克隆副本",
   "close": "關閉",
   "color": "顏色",
   "confirm": "確認",
   "confirm-change": "確認改動",
   "console": "控制檯",
   "content": "內容",
   "content-setup": "內容設置",
   "continue": "繼續",
   "copy": "複製",
   "copy-all": "全部複製",
   "create": "新建",
   "create-now": "立即創建",
   "creating": "正在創建...",
   "currency": "貨幣",
   "currency-AUD": "澳元",
   "currency-CAD": "加元",
   "currency-EUR": "歐元",
   "currency-GBP": "英鎊",
   "currency-HKD": "港元",
   "currency-JPY": "日元",
   "currency-MOP": "澳門元",
   "currency-RMB": "人民幣",
   "currency-USD": "美元",
   "customize": "定製",
   "date": "日期",
   "db-col-type-AUTO": "自動",
   "db-col-type-BINARY": "二進制",
   "db-col-type-BOOLEAN": "布爾",
   "db-col-type-CHAR": "定長字符",
   "db-col-type-FLOAT": "浮點數",
   "db-col-type-INT": "整數",
   "db-col-type-TEXT": "長文本",
   "db-col-type-TIMESTAMP": "時間戳",
   "db-col-type-VARCHAR": "變長字符",
   "debug": "調試",
   "default": "默認",
   "del": "刪除",
   "del-checked": "刪除選中",
   "del-hard": "選中項目即將被直接刪除，此操作不可撤銷，您確定要繼續嗎？",
   "del-ing": "正在刪除...",
   "del-none": "請從下面列表中選擇至少一個對象進行刪除",
   "del-not-empty-dir": "您選中的對象中，有${N}個目錄【${tip}】並不爲空，您確定要刪除它們以及它們內的全部內容嗎？",
   "dept-add": "添加部門",
   "desktop": "桌面",
   "detail": "詳情",
   "dis-name": "顯示名",
   "disable": "禁用",
   "disabled": "禁用的",
   "doing": "正在執行...",
   "download": "下載",
   "download-to-local": "下載到本地",
   "drop-file-here-to-upload": "拖拽文件至此以便上傳",
   "drop-here": "拖拽文件至此",
   "dt-in": "在${val}內",
   "dt-u-day": "天",
   "dt-u-hour": "小時",
   "dt-u-min": "分鐘",
   "dt-u-month": "月",
   "dt-u-ms": "好眠",
   "dt-u-sec": "秒",
   "dt-u-week": "周",
   "dt-u-year": "年",
   "duplicate": "創建副本",
   "e-auth-account-noexists": "賬戶不存在",
   "e-auth-home-forbidden": "賬戶不具備進入主目錄的權限",
   "e-auth-login-NoPhoneOrEmail": "錯誤的手機號或郵箱地址",
   "e-auth-login-NoSaltedPasswd": "未設置合法的密碼",
   "e-auth-login-invalid-passwd": "賬戶密碼未通過校驗",
   "e-data-InvalidScope": "你聲明的數據範圍格式不正確，正確的格式類似：1-20 但是你卻輸入了：",
   "e-export_data-ConfirmBigLimit": "你要導出很多數據，這可能需要一些時間，要繼續嗎?",
   "e-export_data-UnknownMode": "未知的導出模式",
   "e-form-incomplete": "表單缺失必要字段: 【${title}:${name}】 ${tip?}",
   "e-io-forbidden": "禁止寫入",
   "e-io-obj-BlankName": "對象名稱不能爲空",
   "e-io-obj-InvalidName": "對象名稱非法",
   "e-io-obj-exists": "但是對象已然存在",
   "e-io-obj-noexists": "對象其實並不存在",
   "e-io-obj-noexistsf": "對象[${nm}]其實並不存在",
   "e-io-rm-NoEmptyDir": "要移除的目錄還有內容，不能刪除",
   "e-obj-invalid": "路徑[${val}]非法",
   "e-obj-noexists": "對象[${val}]不存在",
   "e-ph-noexists": "路徑[${val}]不存在",
   "e-pvg-fobidden": "操作被禁止",
   "edit": "編輯",
   "edit-com": "編輯控件",
   "edit-content": "編輯內容",
   "email": "郵箱",
   "emoji": "表情符合",
   "empty": "空",
   "empty-data": "無數據",
   "enable": "啓用",
   "enabled": "啓用的",
   "error": "錯誤",
   "exlink": "外部鏈接",
   "exlink-tip": "請輸入一個超鏈接地址",
   "exlink-tip-img": "請輸入圖片超鏈接地址",
   "export-data": "導出數據...",
   "fail": "失敗",
   "false": "否",
   "favorites": "收藏",
   "female": "女",
   "filter": "過濾",
   "find": "查找",
   "find-data": "查找數據",
   "font-size": "文字大小",
   "font-t-capitalize": "首字母大寫",
   "font-t-lowercase": "全小寫",
   "font-t-uppercase": "全大寫",
   "font-transform": "文字轉換",
   "font-w-bold": "加粗",
   "font-w-normal": "正常",
   "font-weight": "文字粗細",
   "form-fld-type-AMS": "時間戳(毫秒)",
   "form-fld-type-ASEC": "時間戳(秒)",
   "form-fld-type-Array": "數組",
   "form-fld-type-Boolean": "布爾",
   "form-fld-type-Color": "顏色",
   "form-fld-type-Date": "日期",
   "form-fld-type-DateTime": "日期時間",
   "form-fld-type-Float": "浮點數",
   "form-fld-type-Integer": "整數",
   "form-fld-type-Number": "數字",
   "form-fld-type-Object": "對象",
   "form-fld-type-String": "字符串",
   "form-fld-type-Time": "時間",
   "gender": "性別",
   "geo-alti": "海拔",
   "geo-azimuth": "方向角",
   "geo-gcj02-lat": "火星緯度",
   "geo-gcj02-lng": "火星經度",
   "geo-hash": "地理哈希",
   "geo-lat": "緯度",
   "geo-lng": "經度",
   "geo-sate-cno": "可見衛星數",
   "geo-sate-cnt": "使用衛星數",
   "global-settings": "全局設置",
   "height": "高度",
   "hierarchy": "層級",
   "history-record": "歷史記錄",
   "home": "主目錄",
   "home-index": "首頁",
   "href": "超鏈接",
   "href-text": "鏈接文字",
   "i-known": "我知道了",
   "icon": "圖標",
   "icon-code-tip": "請輸入圖標代碼，如 zmdi-case",
   "img": "圖像",
   "img-add": "添加圖像",
   "img-insert": "插入圖像",
   "img-remove": "刪除圖像",
   "import-data": "導入數據...",
   "index": "索引",
   "info": "信息",
   "inherit": "繼承",
   "init": "初始化",
   "init-data": "初始化數據",
   "input": "輸入",
   "input-tags": "輸入標籤",
   "invalid": "不正確的",
   "invalid-val": "不正確的值",
   "java-type-Boolean": "布爾",
   "java-type-Double": "雙精度浮點",
   "java-type-Float": "浮點",
   "java-type-Integer": "整數",
   "java-type-JSON": "JSON對象",
   "java-type-List": "對象列表",
   "java-type-Long": "長整數",
   "java-type-Object": "對象",
   "java-type-SArray": "字符串數組",
   "java-type-String": "字符串",
   "json-Array": "數組",
   "json-Boolean": "布爾",
   "json-Float": "小數",
   "json-Integer": "整數",
   "json-Nil": "空值",
   "json-Number": "數字",
   "json-Object": "對象",
   "json-String": "字符串",
   "json-new-key": "請輸入一個新鍵名",
   "json-syntax-err-tip": "語法錯誤，請切換源碼視圖檢查",
   "key": "鍵",
   "keywords": "關鍵字",
   "label": "標籤",
   "lang": "語言",
   "lang-en-uk": "英",
   "lang-en-us": "英",
   "lang-zh-cn": "簡",
   "lang-zh-hk": "繁",
   "lang-zh-tw": "繁",
   "lat": "緯度",
   "layout": "佈局",
   "lbs-place-add": "添加地點",
   "lbs-ro-rnb-k-first": "起始數字",
   "lbs-ro-rnb-k-type": "顯示類型",
   "lbs-ro-rnb-k-type-alpha": "小寫字母",
   "lbs-ro-rnb-k-type-capital": "大寫字母",
   "lbs-ro-rnb-k-type-number": "數字",
   "lbs-ro-rnb-title": "自動設置線路標籤",
   "left": "左",
   "left-bottom": "左下",
   "left-top": "左上",
   "limit": "限制",
   "link": "鏈接",
   "link-href": "鏈接目標",
   "link-text": "鏈接文字",
   "list": "列表",
   "lng": "經度",
   "load-more": "加載更多",
   "load-more-pull": "下拉加載更多",
   "loading": "加載中...",
   "loading-data": "正在加載數據 ...",
   "loading-gui": "正在加載界面 ...",
   "location": "位置",
   "login": "登錄",
   "login-name": "登錄名",
   "logout": "退出",
   "logout-ing": "正在註銷...",
   "mail": "郵件",
   "mail-as-html": "HTML郵件",
   "mail-bcc": "密送",
   "mail-cc": "抄送",
   "mail-charset": "郵件字符編碼",
   "mail-inbox": "收件箱",
   "mail-notify": "郵件通知",
   "mail-r-addr": "郵件地址",
   "mail-r-name": "名稱",
   "mail-scene": "郵件場景",
   "mail-scene-ctmpl": "內容模板",
   "mail-scene-flt-tip": "請輸入場景名稱查詢",
   "mail-scene-meta": "郵件場景屬性",
   "mail-scene-nil-detail": "請選擇一個郵件場景查看詳情",
   "mail-scene-nm": "場景名稱",
   "mail-scene-nm-tip": "請用半角英文數字或者下劃線組合，並保證唯一",
   "mail-scene-var-trans": "轉換腳本",
   "mail-scene-var-trans-placeholder": "譬如 jsc /path/to/script.js -vars",
   "mail-scene-var-trans-tip": "輸入是原始變量的JSON，輸出是一個JSON變量集合",
   "mail-setup": "郵件設置",
   "mail-subject": "郵件標題",
   "mail-to": "收信人",
   "male": "男",
   "map-hybrid": "俯瞰地圖",
   "map-location": "地圖位置",
   "map-location-clear": "清除地圖位置",
   "map-location-edit": "編輯地圖位置...",
   "map-roadmap": "道路地圖",
   "map-satellite": "衛星照片",
   "map-terrain": "地形地圖",
   "map-type": "地圖類型",
   "me": "我",
   "media": "媒體",
   "meta": "元數據",
   "mine": "我的",
   "modal": "模式",
   "modify": "修改",
   "more": "更多",
   "move": "移動",
   "move-down": "下移",
   "move-to": "移動到...",
   "move-up": "上移",
   "msg": "消息",
   "name": "名稱",
   "new-item": "新項目",
   "newsfeed": "消息流",
   "newtab": "新窗口",
   "next": "下一步",
   "nil": "無",
   "nil-content": "無內容",
   "nil-detail": "請選擇一項查看詳情",
   "nil-item": "請先選擇一項",
   "nil-obj": "請選擇一個對象",
   "nil-target": "未設置有效目標",
   "no": "否",
   "no-saved": "您有未保存的數據",
   "no-selected": "未選擇",
   "no-set": "未設置",
   "no-title": "無標題",
   "note": "備註",
   "null": "空值",
   "obj": "對象",
   "off": "關",
   "ok": "確定",
   "on": "開",
   "open": "打開",
   "open-newtab": "在新標籤打開",
   "org-add": "添加機構",
   "org-choose": "選擇機構",
   "others": "其他",
   "paging-change-pgsz": "當前每頁有${pgsz}條記錄，您想修改爲：",
   "paging-change-pgsz-invalid": "頁大小必須是整數數字，而且必須大於0，可您... -_-!",
   "paging-change-pn": "當前第${pn}頁，您想跳轉到：（請輸入 1 至 ${pgc} 之間的數字）",
   "paging-change-pn-invalid": "頁碼必須是整數數字，而且必須爲 1 至 ${pgc} 之間的數字",
   "paging-first": "首頁",
   "paging-last": "尾頁",
   "paging-next": "後一頁",
   "paging-prev": "前一頁",
   "paging-sum": "共${pgc}頁${sum}條記錄，當前${count}/${pgsz}",
   "params": "參數",
   "passwd": "密碼",
   "passwd-reset": "重置密碼",
   "path": "路徑",
   "phone": "手機",
   "phone-nb": "手機號",
   "post": "提交",
   "prev": "上一步",
   "preview": "預覽",
   "price": "價格",
   "profile": "資料",
   "profile-edit": "編輯資料",
   "project-add": "添加項目",
   "prompt": "詢問",
   "properties": "屬性",
   "publish": "發佈",
   "publishing": "正在發佈...",
   "query": "查詢",
   "refresh": "刷新",
   "refresh-hard": "硬性刷新",
   "refresh-hard-clear": "清空緩存並硬性刷新",
   "reload": "重新加載",
   "reloading": "重新加載數據...",
   "remove": "移除",
   "removing": "正在移除...",
   "rename": "重命名...",
   "renaming": "正在重命名...",
   "reset": "重置",
   "reset-change": "撤銷修改",
   "reset-data": "重置數據",
   "restore": "恢復",
   "revoke": "撤銷",
   "revoke-change": "撤銷修改",
   "right": "右",
   "right-bottom": "右下",
   "right-top": "右上",
   "role": "角色",
   "role-actions": "角色動作",
   "role-behaviors": "業務權限",
   "role-in-charge": "負責人",
   "run": "運行",
   "run-finished": "腳本執行結束",
   "run-welcome": "正在運行腳本，請稍後 ...",
   "save": "保存",
   "save-change": "保存修改",
   "save-done": "保存成功",
   "save-now": "立即保存",
   "saving": "正在保存...",
   "score": "評分",
   "score-count": "打分人數",
   "search": "搜索",
   "search-adv": "高級搜索",
   "select": "選擇",
   "select-all": "全部選中",
   "send": "發送",
   "settings": "設置",
   "setup": "設置",
   "setup-fields": "設置字段",
   "setup-reset": "重置設置",
   "size": "尺寸",
   "skip": "跳過",
   "slogan": "標語",
   "sms-scene-nm": "場景名稱",
   "sms-scene-nm-tip": "請用半角英文數字或者下劃線組合，並保證唯一",
   "sms-setup": "短信配置",
   "sort": "排序",
   "sort-asc": "升序",
   "sort-by": "排序方式",
   "sort-desc": "降序",
   "sort-tip-asc": "越小越靠前",
   "sort-tip-desc": "越大越靠前",
   "sort-val": "排序值",
   "source-code": "源代碼",
   "stat-date-at": "統計日期",
   "stat-date-at-oor": "這個日期的統計數據還未就緒",
   "stat-date-span": "時間跨度",
   "stop": "停止",
   "structure": "結構",
   "style": "樣式",
   "style-more": "更多樣式",
   "submit": "提交",
   "success": "成功",
   "sys-settings": "系統設置",
   "tablet": "平板",
   "tags": "標籤",
   "target": "目標",
   "target-id": "目標ID",
   "target-name": "目標名稱",
   "target-path": "目標路徑",
   "terminal": "終端",
   "terminate": "終止",
   "text": "文字",
   "timestamp": "時間戳",
   "title": "標題",
   "top": "上",
   "total": "總共",
   "total-count": "共 ${nb?0} ${unit?項}",
   "total-items": "總共${val}項",
   "trace": "跟蹤",
   "track": "消息",
   "true": "是",
   "type": "類型",
   "undefined": "未定義",
   "under-construction": "正在施工中",
   "unknown": "未知",
   "unzip": "解壓縮",
   "unzipping": "正在解壓縮...",
   "upload": "上傳",
   "upload-done": "文件上傳已完成",
   "upload-file": "上傳文件...",
   "upload-forbidden": "上傳被禁止",
   "upload-nofinished": "文件上傳還沒有完成",
   "upload-notarget": "未設置上傳目標",
   "upload-notarget-continue": "未設置上傳目標，點擊【繼續】處理下一個文件，點擊【取消】結束上傳",
   "uploading": "正在上傳",
   "user-avator": "用戶頭像",
   "value": "值",
   "video": "視頻",
   "video-accelerometer": "視頻加速",
   "video-add": "添加視頻",
   "video-autoplay": "自動播放",
   "video-clipboard-write": "剪貼板寫入",
   "video-encrypted-media": "媒體加密",
   "video-features": "視頻特性",
   "video-gyroscope": "重播",
   "video-insert": "插入視頻",
   "video-pic-in-pic": "畫中畫",
   "video-remove": "刪除視頻",
   "videos": "視頻",
   "view": "查看",
   "view-resource": "查看源代碼",
   "vu-mv": "毫伏",
   "vu-v": "伏特",
   "warn": "警告",
   "website": "網站",
   "width": "寬度",
   "www-admin-login": "後臺登錄界面",
   "www-home": "網站目錄",
   "www-title": "前端網站",
   "yes": "是",
   "zip": "壓縮",
   "zipping": "正在壓縮..."
});
//========================================
// JOIN <_wn.i18n.json> ti/i18n/zh-hk/_wn.i18n.json
//========================================
Ti.Preload("ti/i18n/zh-hk/_wn.i18n.json", {
   "wn-admin-check-obj-thumb": "檢查圖像縮略圖...",
   "wn-admin-tools": "管理工具",
   "wn-cmd-panel-epilog": "腳本執行完畢，您可以關閉本窗口了 ^_^",
   "wn-cmd-panel-tip": "腳本運行可能需要一點時間，請不要關閉窗口",
   "wn-ctt-css-text": "CSS樣式文件",
   "wn-ctt-folder-text": "文件夾",
   "wn-ctt-html-text": "HTML文本",
   "wn-ctt-js-text": "JS腳本",
   "wn-ctt-json-text": "JSON文本",
   "wn-ctt-less-text": "LESS文本",
   "wn-ctt-md-text": "Markdown文本",
   "wn-ctt-mjs-text": "模塊化JS腳本",
   "wn-ctt-sass-text": "SASS文本",
   "wn-ctt-thing_set-text": "數據集合",
   "wn-ctt-txt-text": "純文本",
   "wn-ctt-wnml-text": "WNML源文件",
   "wn-ctt-xml-text": "XML文本",
   "wn-data-scope": "指定範圍",
   "wn-data-scope-phd": "譬如: 1-100",
   "wn-data-scope-tip": "要處理的數據範圍，1-200 表示從第1條記錄到第200條記錄（包含）",
   "wn-edit-com-nil": "默認爲標籤控件",
   "wn-en-his-ct": "創建時間",
   "wn-en-his-flt-tip": "請輸入用戶ID或者名稱過濾",
   "wn-en-his-mor": "操作細節",
   "wn-en-his-opt": "操作",
   "wn-en-his-tar": "目標",
   "wn-en-his-tid": "目標ID",
   "wn-en-his-tnm": "目標名",
   "wn-en-his-ttp": "目標類型",
   "wn-en-his-uid": "用戶ID",
   "wn-en-his-unm": "用戶名",
   "wn-en-his-usr": "用戶",
   "wn-en-his-utp": "用戶類型",
   "wn-expi-10m": "10分鐘",
   "wn-expi-12h": "12小時",
   "wn-expi-14d": "14天",
   "wn-expi-1d": "1天",
   "wn-expi-1h": "1小時",
   "wn-expi-2h": "2小時",
   "wn-expi-30d": "30天",
   "wn-expi-30m": "30分鐘",
   "wn-expi-3d": "3天",
   "wn-expi-6h": "6小時",
   "wn-expi-7d": "7天",
   "wn-expi-never": "永不過期",
   "wn-export-c-expi": "保存時間",
   "wn-export-c-expi-tip": "輸出的臨時文件將在服務器端保留多久",
   "wn-export-c-mapping": "映射規則",
   "wn-export-c-mapping-phd": "選擇一種字段映射規則",
   "wn-export-c-mapping-tip": "所謂映射規則，就是字段輸出時的轉換的規則，包括如何指定字段名稱，字段值如何轉換等",
   "wn-export-c-mode": "數據範圍",
   "wn-export-c-mode-all": "全部頁",
   "wn-export-c-mode-checked": "選中記錄",
   "wn-export-c-mode-current": "當前頁",
   "wn-export-c-name": "導出文件名",
   "wn-export-c-name-phd": "請輸入導出文件名",
   "wn-export-c-name-tip": "導出文件名，如果沒有後綴名，會自動根據【導出類型】補全",
   "wn-export-c-type": "導出類型",
   "wn-export-c-type-csv": "CSV文件",
   "wn-export-c-type-json": "JSON",
   "wn-export-c-type-unknown": "未知的導出類型",
   "wn-export-c-type-xls": "電子表格",
   "wn-export-c-type-zip": "數據壓縮包",
   "wn-export-choose-fields": "選擇字段",
   "wn-export-confirm-many": "你要導出的數據很多，這個操作可能會需要較長時間，你確定要繼續導出嗎？",
   "wn-export-done": "完成",
   "wn-export-done-fail": "導出失敗",
   "wn-export-done-fail-tip": "請點擊查看錯誤詳情",
   "wn-export-done-ok": "導出成功",
   "wn-export-done-ok-tip": "請點擊下載鏈接下載",
   "wn-export-ing": "執行導出",
   "wn-export-ing-tip": "正在執行導出腳本，請稍後",
   "wn-export-open-dir": "打開導出歷史目錄...",
   "wn-export-setup": "導出設置",
   "wn-fsc-mail-scene-new": "新建一個郵件場景",
   "wn-fsc-mail-tmpl-new": "請輸入新郵件模板的名稱(要唯一，譬如 signup)",
   "wn-import-WithoutInput": "請上傳要導入的數據文件",
   "wn-import-c-expi": "暫存時間",
   "wn-import-c-expi-tip": "上傳的臨時文件將在服務器端保留多久",
   "wn-import-c-mapping": "映射規則",
   "wn-import-c-mapping-phd": "選擇一種字段映射規則",
   "wn-import-c-mapping-tip": "所謂映射規則，就是字段輸出時的轉換的規則，包括如何指定字段名稱，字段值如何轉換等",
   "wn-import-c-mode-all": "全部數據",
   "wn-import-c-tags": "數據標籤",
   "wn-import-c-tags-tip": "爲你導入的數據統一打上一個數據標籤，有助於你在之後統一搜索到它們",
   "wn-import-confirm-many": "你要導入的數據很多，這個操作可能會需要花一些時間，你確定要繼續導入嗎？",
   "wn-import-setup": "導入設置",
   "wn-import-c-uniqkey": "唯一鍵",
   "wn-import-c-uniqkey-tip": "指定了唯一鍵，將會採用這一列去重",
   "wn-import-c-uniqkey-nil": "不用唯一鍵去重",
   "wn-import-c-withhook": "啓用鉤子",
   "wn-import-c-withhook-tip": "鉤子是數據的關聯處理邏輯，關閉它會讓數據導入速度更快，但是自動設置的值你需要後續通過手工來處理",
   "wn-import-upload": "上傳文件",
   "wn-import-upload-xlsx-tip": "僅支持 'xlsx' 文件，如果是 'xls' 文件，你需要另存爲 'xlsx'再上傳",
   "wn-invalid-fsize-max": "The maximum upload file size is ${maxSize}, but your file size is ${fileSize}",
   "wn-invalid-fsize-min": "The minimum upload file size is ${minSize}, but your file size is ${fileSize}",
   "wn-invalid-mimes": "不支持的文件內容類型 \"${current}\"，僅能支持 \"${supports}\"",
   "wn-invalid-types": "不支持的文件擴展名 \"${current}\"，僅能支持 \"${supports}\"",
   "wn-key-c": "創建者",
   "wn-key-ct": "創建時間",
   "wn-key-d0": "D0",
   "wn-key-d1": "D1",
   "wn-key-data": "數據",
   "wn-key-duration": "時長",
   "wn-key-expi": "過期時間",
   "wn-key-g": "主組",
   "wn-key-grp-advance": "高級",
   "wn-key-grp-basic": "基本",
   "wn-key-grp-customized": "自定義",
   "wn-key-grp-more": "更多",
   "wn-key-grp-others": "其他",
   "wn-key-grp-privilege": "權限",
   "wn-key-grp-thumb": "縮略圖",
   "wn-key-grp-timestamp": "時間戳",
   "wn-key-height": "高",
   "wn-key-icon": "圖標",
   "wn-key-id": "ID",
   "wn-key-len": "大小",
   "wn-key-lm": "最後修改",
   "wn-key-lbls": "標籤",
   "wn-key-m": "修改者",
   "wn-key-md": "基本權限",
   "wn-key-mime": "內容類型",
   "wn-key-nm": "對象名",
   "wn-key-ph": "路徑",
   "wn-key-pid": "父對象",
   "wn-key-pvg": "定製權限",
   "wn-key-race": "族類",
   "wn-key-sha1": "內容簽名",
   "wn-key-thumb": "縮略圖",
   "wn-key-title": "標題",
   "wn-key-tp": "類型",
   "wn-key-width": "寬",
   "wn-md-R": "讀",
   "wn-md-W": "寫",
   "wn-md-X": "用",
   "wn-md-blend-dft": "默認",
   "wn-md-blend-mode": "混合模式",
   "wn-md-blend-strong": "強覆蓋",
   "wn-md-blend-weak": "弱混合",
   "wn-md-excutable": "可使用",
   "wn-md-member": "成員",
   "wn-md-other": "其他人",
   "wn-md-owner": "所有者",
   "wn-md-readable": "可讀取",
   "wn-md-writable": "可寫入",
   "wn-o-type-miss-match": "新文件類型【${newType}】與原始類型【${oldType}】不匹配",
   "wn-o-type-miss-match-convimg": "新圖片類型【${newType}】與原始類型【${oldType}】不匹配，將會被自動轉換，點擊【是】繼續上傳數據，點擊【否】將放棄本次操作",
   "wn-obj-nosaved": "您有未保存的對象",
   "wn-oc-auto-type": "全部類型",
   "wn-oc-free": "請輸入對象完整名稱，包括擴展名，譬如 `myfile.xml`",
   "wn-oc-tip": "新對象名稱",
   "wn-org-new-node": "新組織節點",
   "wn-org-type-G": "部門",
   "wn-org-type-P": "職位",
   "wn-race-DIR": "目錄",
   "wn-race-FILE": "文件",
   "wn-th-acc-pwd-choose-none": "請選擇要重置密碼的賬號（可多選）",
   "wn-th-acc-pwd-done": "已經爲${n}名用戶重置了密碼",
   "wn-th-acc-pwd-invalid": "密碼中不得包含單雙引號星號等非法字符",
   "wn-th-acc-pwd-reset-tip": "將密碼重置爲",
   "wn-th-acc-pwd-reset-tip-1": "將【${name}】的密碼重置爲",
   "wn-th-acc-pwd-reset-tip-N": "將【${name}】等${N}個賬號的密碼統統重置爲",
   "wn-th-acc-pwd-too-short": "您輸入的密碼過短，不能少於6位，最好爲數字字母以及特殊字符的組合",
   "wn-th-recount-media": "重新計算當前文件數量",
   "wn-th-recount-media-done": "當前文件數量: ${n}"
});
//////////////////////////////////////////////////
// The End
})();