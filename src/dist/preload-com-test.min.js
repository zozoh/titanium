!function(){Ti.Preload("/gu/rs/ti/com/ti/label/_com.json",{name:"ti-label",globally:!0,template:"./ti-label.html",props:"./ti-label-props.mjs",mixins:["./ti-label.mjs"]}),Ti.Preload("/gu/rs/ti/com/ti/label/ti-label.html",'<div class="ti-label"\n  :class="TopClass"\n  :style="TopStyle"\n  @dblclick.left="OnDblClick">\n  \x3c!--prefix:icon--\x3e\n  <div v-if="ThePrefixIcon"\n    class="as-icon at-prefix"\n    :class="getHoverClass(\'prefixIcon\')"\n    @click.left="OnClickPrefixIcon">\n    <ti-icon :value="ThePrefixIcon"/>\n  </div>\n  \x3c!--prefix:text--\x3e\n  <div v-if="prefixText" \n    class="as-text at-prefix"\n    :class="getHoverClass(\'prefixText\')"\n    @click.left="OnClickPrefixText">\n    <span>{{prefixText|i18n}}</span>\n  </div>\n  \x3c!--Text--\x3e\n  <div class="as-value"\n    :style="ValueStyle"\n    @click.left="OnClickValue">\n    \x3c!--Link--\x3e\n    <a v-if="href"\n        :href="href"\n        :taget="newTab ? \'_blank\' : undefined"\n        @click.left.prevent>{{myDisplayText}}</a>\n    \x3c!--Normal Text--\x3e\n    <span v-else>{{myDisplayText}}</span>\n  </div>\n  \x3c!--suffix:text--\x3e\n  <div v-if="suffixText"\n    class="as-text at-suffix"\n    :class="getHoverClass(\'suffixText\')"\n    @click.left="OnClickSuffixIcon">\n    <span>{{suffixText|i18n}}</span>\n  </div>\n  \x3c!--suffix:icon--\x3e\n  <div v-if="suffixIcon"\n    class="as-icon at-suffix"\n    :class="getHoverClass(\'suffixIcon\')"\n    @click.left="OnClickSuffixIcon">\n    <ti-icon :value="suffixIcon"/>\n  </div>\n</div>');const i={data:()=>({myDisplayIcon:void 0,myDisplayText:void 0,myDictValKey:void 0}),computed:{TopClass(){return this.getTopClass({"is-blank":!_.isNumber(this.TheValue)&&_.isEmpty(this.TheValue)})},TopStyle(){return Ti.Css.toStyle({width:this.width,height:this.height})},ValueStyle(){return Ti.Css.toStyle({maxWidth:this.valueMaxWidth})},ThePrefixIcon(){return this.myDisplayIcon||this.prefixIcon},TheHover(){let i={},t=_.concat(this.hover);for(let e of t)e&&(i[e]=!0);return i},TheValue(){let i=this.value;return this.trim&&_.isString(i)?_.trim(i):i},Dict(){if(this.dict){if(this.dict instanceof Ti.Dict)return this.myDictValKey=".text",this.dict;let{name:i,vKey:t}=Ti.DictFactory.explainDictName(this.dict);return this.myDictValKey=t||".text",Ti.DictFactory.CheckDict(i)}}},methods:{isCanHover(i){return!!this.TheHover[i]},getHoverClass(i){let t=this.isCanHover(i);return{"can-hover":t,"for-look":!t,"is-prefix-icon-hover":"prefixIcon"==i}},OnDblClick(){this.editable&&Ti.Be.EditIt(this.$el,{text:this.TheValue,ok:i=>{this.$notify("change",i)}})},OnClickPrefixIcon(){this.$notify("prefix:icon")},OnClickPrefixText(){this.$notify("prefix:text")},OnClickValue(){this.$notify("click:value")},OnClickSuffixIcon(){this.$notify("suffix:icon")},OnClickSuffixText(){this.$notify("suffix:text")},async evalDisplay(i){if(this.Dict){let t=await this.Dict.getItem(i);t?(this.myDisplayIcon=this.Dict.getIcon(t),i=this.Dict.getBy(this.myDictValKey,t,i)):this.myDisplayIcon=null}return _.isNumber(i)?i:_.isArray(i)||_.isPlainObject(i)?JSON.stringify(i,null,"  "):Ti.Util.isNil(i)?Ti.I18n.text(this.placeholder):_.isDate(i)?Ti.Types.toStr(i,this.format):(this.format&&(i=Ti.Types.toStr(i,this.format)),this.autoI18n?Ti.I18n.text(i):i)},async reloadMyDisplay(){this.myDisplayIcon=null,this.myDisplayText=await this.evalDisplay(this.TheValue)}},watch:{value:{handler:"reloadMyDisplay",immediate:!0}}};Ti.Preload("/gu/rs/ti/com/ti/label/ti-label.mjs",i)}();