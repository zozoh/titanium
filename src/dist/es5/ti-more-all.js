"use strict";

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }

function _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

// Pack At: 2020-10-27 20:55:44
(function () {
  //============================================================
  // JOIN: hmaker/edit-com/form/edit-com-form.html
  //============================================================
  Ti.Preload("ti/com/hmaker/edit-com/form/edit-com-form.html", "<ti-form \n  class=\"hmaker-edit-com-form\"\n  v-bind=\"FormConf\"/>"); //============================================================
  // JOIN: hmaker/edit-com/form/edit-com-form.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////
      props: {
        "value": {
          type: Object,
          "default": undefined
        },
        "keepTabIndexBy": {
          type: String,
          "default": "hMakerEditComForm"
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        FormConf: function FormConf() {
          return {
            //..................................
            mode: "tab",
            keepTabIndexBy: this.keepTabIndexBy,
            //..................................
            spacing: "tiny",
            //..................................
            data: this.value,
            //..................................
            fields: [//................................
            // Aspect
            {
              type: "Group",
              title: "i18n:hmk-aspect",
              fields: [{
                name: "title",
                title: "i18n:hmk-title",
                type: "String",
                comType: "ti-input"
              }, {
                name: "icon",
                title: "i18n:hmk-icon",
                type: "String",
                comType: "ti-input-icon"
              }, {
                name: "mode",
                title: "i18n:hmk-mode",
                type: "String",
                defaultAs: "all",
                comType: "ti-switcher",
                comConf: {
                  options: [{
                    value: "all",
                    text: "i18n:hmk-mode-all"
                  }, {
                    value: "tab",
                    text: "i18n:hmk-mode-tab"
                  }]
                }
              }, {
                name: "tabAt",
                title: "i18n:hmk-tabAt",
                type: "String",
                defaultAs: "top-center",
                width: 240,
                hidden: {
                  "mode": {
                    name: "isEqual",
                    args: "tab",
                    not: true
                  }
                },
                comType: "ti-droplist",
                comConf: {
                  placeholder: "i18n:hmk-tabAt-top-center",
                  autoI18n: true,
                  options: [{
                    value: "top-left",
                    text: "i18n:hmk-tabAt-top-left"
                  }, {
                    value: "top-center",
                    text: "i18n:hmk-tabAt-top-center"
                  }, {
                    value: "top-right",
                    text: "i18n:hmk-tabAt-top-right"
                  }, {
                    value: "bottom-left",
                    text: "i18n:hmk-tabAt-bottom-left"
                  }, {
                    value: "bottom-center",
                    text: "i18n:hmk-tabAt-bottom-center"
                  }, {
                    value: "bottom-right",
                    text: "i18n:hmk-tabAt-bottom-right"
                  }]
                }
              }, {
                name: "currentTab",
                title: "i18n:hmk-currentTab",
                type: "Integer",
                defaultAs: 0,
                width: 120,
                hidden: {
                  "mode": {
                    name: "isEqual",
                    args: "tab",
                    not: true
                  }
                },
                comType: "ti-input-num"
              }, {
                name: "spacing",
                title: "i18n:hmk-spacing",
                type: "String",
                defaultAs: "comfy",
                comType: "ti-switcher",
                comConf: {
                  options: [{
                    value: "comfy",
                    text: "i18n:hmk-spacing-comfy"
                  }, {
                    value: "tiny",
                    text: "i18n:hmk-spacing-tiny"
                  }]
                }
              }, {
                name: "adjustDelay",
                title: "i18n:hmk-adjustDelay",
                type: "Integer",
                defaultAs: 0,
                width: 120,
                comType: "ti-input-num"
              }, {
                name: "blankAs",
                title: "i18n:hmk-blankAs",
                type: "Object",
                comType: "ti-input"
              }]
            }, //................................
            // Fields
            {
              type: "Group",
              title: "i18n:hmk-fields",
              fields: [{
                name: "fields",
                type: "Array",
                height: "100%",
                comType: "hmaker-edit-form-fieldset",
                comConf: {
                  className: "ti-fill-parent",
                  keepTabIndexBy: this.keepTabIndexBy
                }
              }]
            }, //................................
            // Data
            {
              type: "Group",
              title: "i18n:hmk-data",
              fields: [{
                title: "i18n:hmk-form-data",
                name: "data",
                comType: "ti-input"
              }, {
                name: "fieldStatus",
                title: "i18n:hmk-fieldStatus",
                comType: "ti-input"
              }, {
                name: "onlyFields",
                title: "i18n:hmk-form-onlyFields",
                type: "Boolean",
                defaultAs: true,
                comType: "ti-toggle"
              }]
            }, //................................
            // Measure
            {
              title: "i18n:hmk-measure",
              fields: [{
                title: "i18n:hmk-form-width",
                name: "width",
                comType: "ti-input"
              }, {
                title: "i18n:hmk-form-height",
                name: "height",
                comType: "ti-input"
              }]
            }]
          };
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {//--------------------------------------
        //--------------------------------------
      },
      //////////////////////////////////////////
      created: function () {
        var _created = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  Wn.Dict.hMakerComponents();

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function created() {
          return _created.apply(this, arguments);
        }

        return created;
      }() //////////////////////////////////////////

    };
    Ti.Preload("ti/com/hmaker/edit-com/form/edit-com-form.mjs", _M);
  })(); //============================================================
  // JOIN: hmaker/edit-com/form/field/edit-form-field.html
  //============================================================


  Ti.Preload("ti/com/hmaker/edit-com/form/field/edit-form-field.html", "<div class=\"hmaker-edit-form-field ti-scroll-v\">\n  <!--\n    Empty\n  -->\n  <ti-loading \n    v-if=\"isEmpty\"\n      icon=\"fas-hand-point-left\"\n      text=\"i18n:hmaker-edit-form-field-nil\"/>\n  <!--\n    Editing\n  -->\n  <ti-form\n    v-else\n      v-bind=\"TheForm\"\n      :data=\"value\"/>\n</div>"); //============================================================
  // JOIN: hmaker/edit-com/form/field/edit-form-field.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////
      props: {
        "value": {
          type: Object,
          "default": undefined
        },
        "keepTabIndexBy": {
          type: String,
          "default": undefined
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        isEmpty: function isEmpty() {
          return Ti.Util.isNil(this.value);
        },
        //--------------------------------------
        TheFormGeneralFields: function TheFormGeneralFields() {
          var gen_options = function gen_options(types) {
            return _.map(types, function (v) {
              return {
                icon: Ti.I18n.get("hm-type-icons")[v],
                value: v,
                text: Ti.I18n.get("hm-type-".concat(v))
              };
            });
          };

          return [//.................................
          // type
          {
            hidden: this.isGroup,
            name: "type",
            title: "hmk-field-type",
            defaultAs: "String",
            comType: "ti-droplist",
            comConf: {
              placeholder: "i18n:hm-type-String",
              options: gen_options(["Object", "Number", "Integer", "Boolean", "String", "Array"]),
              dropDisplay: ["<icon>", "text", "value"]
            }
          }, //.................................
          // title
          {
            name: "title",
            title: "hmk-field-title",
            comType: "ti-input"
          }, //.................................
          // icon
          {
            name: "icon",
            title: "hmk-field-icon",
            comType: "ti-input-icon"
          }, //.................................
          // name
          {
            hidden: this.isGroup,
            name: "name",
            title: "hmk-field-name",
            comType: "ti-input"
          }, //.................................
          // tip
          {
            hidden: this.isGroup,
            name: "tip",
            title: "hmk-field-tip",
            comType: "ti-input"
          }, //.................................
          // width
          {
            hidden: this.isGroup,
            name: "width",
            title: "hmk-field-width",
            width: 120,
            comType: "ti-input"
          }, //.................................
          // height
          {
            hidden: this.isGroup,
            name: "height",
            title: "hmk-field-height",
            width: 120,
            comType: "ti-input"
          }, //.................................
          // defaultAs
          {
            hidden: this.isGroup,
            name: "defaultAs",
            title: "hmk-field-defaultAs",
            comType: "ti-input",
            comConf: {
              autoJsValue: true
            }
          }, //.................................
          // com
          {
            hidden: this.isGroup,
            name: ["comType", "comConf"],
            title: "hmk-field-com",
            type: "Object",
            width: "auto",
            comType: "wn-combo-edit-com"
          } //.................................
          ];
        },
        //--------------------------------------
        TheFormAdvanceFields: function TheFormAdvanceFields() {
          return [//.................................
          // disabled
          {
            name: "disabled",
            title: "hmk-field-disabled",
            comType: "ti-input",
            comConf: {
              autoJsValue: true
            }
          }, //.................................
          // hidden
          {
            name: "hidden",
            title: "hmk-field-hidden",
            comType: "ti-input",
            comConf: {
              autoJsValue: true
            }
          }, //.................................
          // checkEquals
          {
            name: "checkEquals",
            title: "hmk-field-checkEquals",
            comType: "ti-toggle"
          }, //.................................
          // transformer
          {
            name: "transformer",
            title: "hmk-field-transformer",
            comType: "ti-input-text",
            comConf: {
              autoJsValue: true
            }
          }, //.................................
          // serializer
          {
            name: "serializer",
            title: "hmk-field-serializer",
            comType: "ti-input-text",
            comConf: {
              autoJsValue: true
            }
          } //.................................
          ];
        },
        //--------------------------------------
        TheForm: function TheForm() {
          return {
            //..................................
            // mode : "tab",
            // tabAt : "bottom-left",
            spacing: "tiny",
            keepTabIndexBy: this.keepTabIndexBy,
            //..................................
            fields: [{
              type: "Group",
              title: "i18n:hmk-fields-general",
              fields: this.TheFormGeneralFields
            }, {
              type: "Group",
              title: "i18n:hmk-fields-advance",
              hidden: this.isGroup,
              fields: this.TheFormAdvanceFields
            }] //..................................

          };
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        isGroup: function isGroup(fld) {
          return _.isArray(fld.fields) || "Group" == fld.type;
        } //--------------------------------------

      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/hmaker/edit-com/form/field/edit-form-field.mjs", _M);
  })(); //============================================================
  // JOIN: hmaker/edit-com/form/field/_com.json
  //============================================================


  Ti.Preload("ti/com/hmaker/edit-com/form/field/_com.json", {
    "name": "hmaker-edit-form-field",
    "globally": true,
    "template": "./edit-form-field.html",
    "mixins": ["./edit-form-field.mjs"]
  }); //============================================================
  // JOIN: hmaker/edit-com/form/fieldset/edit-form-fieldset.html
  //============================================================

  Ti.Preload("ti/com/hmaker/edit-com/form/fieldset/edit-form-fieldset.html", "<ti-gui\n  class=\"hmaker-edit-form-fieldset\"\n  :class=\"TopClass\"\n  :layout=\"Layout\"\n  :schema=\"Schema\"\n  :can-loading=\"false\"\n  @tree::select=\"OnFieldTreeSelect\"\n  @detail::change=\"OnFieldChange\"/>"); //============================================================
  // JOIN: hmaker/edit-com/form/fieldset/edit-form-fieldset.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////
      data: function data() {
        return {
          myCurrentId: null
        };
      },
      //////////////////////////////////////////
      props: {
        "value": {
          type: Array,
          "default": undefined
        },
        "keepTabIndexBy": {
          type: String,
          "default": "hMakerEditComForm"
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //--------------------------------------
        TheDetailCom: function TheDetailCom() {
          return {
            comType: "hmaker-edit-form-field",
            comConf: {
              value: this.CurrentField,
              keepTabIndexBy: this.keepTabIndexBy ? "".concat(this.keepTabIndexBy, "-field") : null
            }
          };
        },
        //--------------------------------------
        CurrentField: function CurrentField() {
          if (this.myCurrentId) {
            var node = this.$tree.findTableRow(this.myCurrentId);

            if (node) {
              return node.rawData;
            }
          }
        },
        //--------------------------------------
        Layout: function Layout() {
          return {
            type: "cols",
            border: true,
            blocks: [{
              type: "rows",
              size: "37%",
              border: true,
              blocks: [{
                size: 40,
                body: "actions"
              }, {
                name: "tree",
                body: "tree"
              }]
            }, {
              name: "detail",
              body: "detail"
            }]
          };
        },
        //--------------------------------------
        Schema: function Schema() {
          var _this = this;

          return {
            //..................................
            actions: {
              comType: "ti-actionbar",
              comConf: {
                items: [{
                  type: "action",
                  icon: "im-plus",
                  text: "i18n:hmaker-edit-form-new-field",
                  action: function action() {
                    return _this.addNewField();
                  }
                }, {
                  type: "action",
                  icon: "im-folder-add",
                  text: "i18n:hmaker-edit-form-new-group",
                  action: function action() {
                    return _this.addNewGroup();
                  }
                }, {
                  type: "line"
                }, {
                  type: "action",
                  icon: "im-trash-can",
                  action: function action() {
                    return _this.removeSelectedFieldOrGroup();
                  }
                }, {
                  type: "line"
                }, {
                  type: "action",
                  icon: "im-arrow-up",
                  action: function action() {
                    return _this.moveSelectedFieldsUp();
                  }
                }, {
                  type: "action",
                  icon: "im-arrow-down",
                  action: function action() {
                    return _this.moveSelectedFieldsDown();
                  }
                }]
              }
            },
            //..................................
            tree: {
              comType: "ti-tree",
              comConf: {
                data: this.value,
                showRoot: false,
                puppetMode: true,
                autoOpen: true,
                border: "row",
                defaultOpenDepth: 2,
                currentId: this.myCurrentId,
                nameBy: function nameBy(it) {
                  return it.name || it.title;
                },
                childrenBy: function childrenBy(it) {
                  return it.fields;
                },
                leafBy: function leafBy(it) {
                  return "Group" != it.type;
                },
                display: [{
                  key: "type",
                  transformer: {
                    name: "toStr",
                    args: [{
                      "Group": "zmdi-collection-bookmark",
                      "Object": "zmdi-toys",
                      "Number": "zmdi-input-svideo",
                      "Integer": "zmdi-n-6-square",
                      "Boolean": "zmdi-toll",
                      "String": "zmdi-translate",
                      "Array": "zmdi-format-list-bulleted"
                    }]
                  },
                  defaultAs: "im-question",
                  comType: "ti-icon"
                }, {
                  key: "name",
                  transformer: function transformer(v) {
                    return _.isArray(v) ? v.join("+") : v;
                  }
                }, "title"],
                onInit: this.OnTreeInit
              }
            },
            //..................................
            detail: this.TheDetailCom //..................................

          };
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnTreeInit: function OnTreeInit($tree) {
          this.$tree = $tree;
        },
        //--------------------------------------
        OnFieldTreeSelect: function OnFieldTreeSelect(_ref) {
          var currentId = _ref.currentId;
          this.myCurrentId = currentId;
        },
        //--------------------------------------
        OnFieldChange: function OnFieldChange(newFld) {
          this.updateCurrentField(newFld);
        },
        //--------------------------------------
        // Utility
        //--------------------------------------
        getMyCurrent: function getMyCurrent() {
          var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.value;

          if (!this.myCurrentId || !_.isArray(fields)) {
            return;
          }

          var path = this.myCurrentId.split("/");
          var re = {
            path: path,
            index: [],
            group: null,
            field: null
          }; // Find the top field or group

          if (path.length > 0) {
            var fnm = path[0];

            for (var i = 0; i < fields.length; i++) {
              var fg = fields[i]; // Is group

              if (_.isArray(fg.fields) || "Group" == fg.type) {
                if (fnm == fg.title) {
                  re.group = fg;
                  re.index.push(i);
                  break;
                }
              } // Is field
              else {
                  if (fnm == fg.name) {
                    re.field = fg;
                    re.index.push(i);
                    break;
                  }
                }
            }
          } // Find in group


          if (path.length > 1 && re.group && _.isArray(re.group.fields)) {
            var _fnm = path[1];

            for (var _i = 0; _i < re.group.fields.length; _i++) {
              var fld = re.group.fields[_i];

              if (_fnm == fld.name) {
                re.field = fld;
                re.index.push(_i);
              }
            }
          } // Done


          return re;
        },
        //--------------------------------------
        isGroup: function isGroup(fld) {
          return "Group" == fld.type || _.isArray(fld.fields);
        },
        //--------------------------------------
        selectNextIdByIndex: function selectNextIdByIndex() {
          var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value;
          var names = [];

          var _iterator = _createForOfIteratorHelper(index),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var i = _step.value;

              if (!fields || _.isEmpty(fields)) {
                break;
              }

              var fld = _.nth(fields, i); // Find prev


              if (!fld) {
                fld = _.nth(fields, i - 1);
              } // Join


              if (fld) {
                names.push(fld.name || fld.title);
                fields = fld.fields;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          this.myCurrentId = names.join("/") || null;
        },
        //--------------------------------------
        findByName: function findByName(name) {
          // Guard
          if (!_.isArray(this.value)) {
            return;
          } // Top list


          for (var i = 0; i < this.value.length; i++) {
            var fld = this.value[i];
            var fldName = fld.name || fld.title;

            if (_.isEqual(name, fldName)) {
              var fd = {
                index: [i],
                path: [fldName],
                field: fld
              };

              if (this.isGroup(fld)) {
                fd.group = fld;
              } else {
                fd.field = fld;
              }

              return fd;
            } // Group


            if (this.isGroup(fld)) {
              for (var x = 0; x < fld.fields.length; x++) {
                var sub = fld.fields[x];
                var subName = sub.name || sub.title;

                if (_.isEqual(name, subName)) {
                  return {
                    index: [i, x],
                    path: [fldName, subName],
                    group: fld,
                    field: sub
                  };
                }
              }
            } // ~ if(this.isGroup(fld)) {

          } // ~ for(let i=0; i<this.value.length; i++)

        },
        //--------------------------------------
        existsName: function existsName(name) {
          var ff = this.findByName(name);
          return ff ? true : false;
        },
        //--------------------------------------
        updateCurrentField: function updateCurrentField(newFld) {
          var fields = _.cloneDeep(this.value);

          var cur = this.getMyCurrent(fields);
          console.log(cur); // Field in group

          if (cur.group && cur.field) {
            var i1 = _.last(cur.index);

            cur.group.fields[i1] = newFld;
          } // Group
          else if (cur.group) {
              var i0 = _.first(cur.index);

              _.assign(fields[i0], newFld);
            } // Field
            else if (cur.field) {
                var _i2 = _.first(cur.index);

                fields[_i2] = newFld;
              } // Impossiable
              else {
                  return;
                } //....................................
          // Select new item


          this.selectNextIdByIndex(cur.index, fields); //....................................
          // Notify change

          this.$notify("change", fields);
        },
        //--------------------------------------
        addFieldOrGroup: function addFieldOrGroup(fld) {
          //....................................
          // Clone the old
          var fields = _.cloneDeep(this.value) || []; //....................................
          // Find pos

          var cur = this.getMyCurrent(fields);
          var names = []; //....................................
          // push to tail

          if (!cur) {
            fields.push(fld);
          } //....................................
          // in group
          else if (cur.group) {
              if (this.isGroup(fld)) {
                Ti.Util.insertToArray(fields, _.first(cur.index), fld);
                names.push(fld.title);
              } // in position
              else if (cur.field) {
                  Ti.Util.insertToArray(cur.group.fields, _.last(cur.index) + 1, fld);
                  names.push(cur.path[0], fld.name);
                } // At the tail
                else if (_.isArray(cur.group.fields)) {
                    cur.group.fields.push(fld);
                    names.push(cur.path[0], fld.name);
                  } // New list
                  else {
                      cur.group.fields = [fld];
                      names.push(cur.path[0], fld.name);
                    }
            } // At top 
            else {
                Ti.Util.insertToArray(fields, _.last(cur.index) + 1, fld);
                names.push(fld.name || fld.title);
              } //....................................
          // Notify change


          this.$notify("change", fields); //....................................
          // Hightlight it

          this.myCurrentId = names.join("/");
        },
        //--------------------------------------
        addNewField: function addNewField() {
          var _this2 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
            var name, ss, _iterator2, _step2, s, fldName;

            return regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return Ti.Prompt("i18n:hmaker-edit-form-new-field-tip");

                  case 2:
                    name = _context2.sent;
                    name = _.trim(name); // User cancel

                    if (name) {
                      _context2.next = 6;
                      break;
                    }

                    return _context2.abrupt("return");

                  case 6:
                    // Form the name
                    ss = _.without(name.split(/[\s\W]/), ""); // Check

                    _iterator2 = _createForOfIteratorHelper(ss);
                    _context2.prev = 8;

                    _iterator2.s();

                  case 10:
                    if ((_step2 = _iterator2.n()).done) {
                      _context2.next = 18;
                      break;
                    }

                    s = _step2.value;

                    if (/^[a-z_][\da-z_]+$/.test(s)) {
                      _context2.next = 16;
                      break;
                    }

                    _context2.next = 15;
                    return Ti.Toast.Open("i18n:hmaker-edit-form-new-field-e0", "error");

                  case 15:
                    return _context2.abrupt("return", _context2.sent);

                  case 16:
                    _context2.next = 10;
                    break;

                  case 18:
                    _context2.next = 23;
                    break;

                  case 20:
                    _context2.prev = 20;
                    _context2.t0 = _context2["catch"](8);

                    _iterator2.e(_context2.t0);

                  case 23:
                    _context2.prev = 23;

                    _iterator2.f();

                    return _context2.finish(23);

                  case 26:
                    // The field name
                    fldName = ss.length == 1 ? name : ss; // Check Duplicate

                    if (!_this2.existsName(fldName)) {
                      _context2.next = 31;
                      break;
                    }

                    _context2.next = 30;
                    return Ti.Toast.Open({
                      content: "i18n:hmaker-edit-form-new-field-e1",
                      type: "error",
                      vars: {
                        val: name
                      },
                      position: "center",
                      duration: 5000
                    });

                  case 30:
                    return _context2.abrupt("return", _context2.sent);

                  case 31:
                    // Then Add new 
                    _this2.addFieldOrGroup({
                      name: fldName,
                      type: _.isArray(fldName) ? "Object" : "String",
                      comType: "ti-input"
                    });

                  case 32:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, null, [[8, 20, 23, 26]]);
          }))();
        },
        //--------------------------------------
        addNewGroup: function addNewGroup() {
          var _this3 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
            var name;
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _context3.next = 2;
                    return Ti.Prompt("i18n:hmaker-edit-form-new-group-tip");

                  case 2:
                    name = _context3.sent;
                    name = _.trim(name); // User cancel

                    if (name) {
                      _context3.next = 6;
                      break;
                    }

                    return _context3.abrupt("return");

                  case 6:
                    if (!_this3.existsName(name)) {
                      _context3.next = 10;
                      break;
                    }

                    _context3.next = 9;
                    return Ti.Toast.Open({
                      content: "i18n:hmaker-edit-form-new-field-e1",
                      type: "error",
                      vars: {
                        val: name
                      },
                      position: "center",
                      duration: 5000
                    });

                  case 9:
                    return _context3.abrupt("return", _context3.sent);

                  case 10:
                    // Then Add new 
                    _this3.addFieldOrGroup({
                      type: "Group",
                      title: name,
                      fields: []
                    });

                  case 11:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3);
          }))();
        },
        //--------------------------------------
        removeSelectedFieldOrGroup: function removeSelectedFieldOrGroup() {
          var _this4 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
            var cur, fields, ask, index, _Ti$Util, grp, i0, i1, _index;

            return regeneratorRuntime.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    cur = _this4.getMyCurrent(); //....................................
                    // Guard

                    if (cur) {
                      _context4.next = 3;
                      break;
                    }

                    return _context4.abrupt("return", Ti.Toast.Open("i18n:hmaker-edit-form-nil-field", "warn"));

                  case 3:
                    if (!(cur.group && !cur.field)) {
                      _context4.next = 16;
                      break;
                    }

                    ask = true;

                    if (_.isEmpty(cur.group.fields)) {
                      _context4.next = 9;
                      break;
                    }

                    _context4.next = 8;
                    return Ti.Confirm("i18n:hmaker-edit-form-del-group-confirm", {
                      closer: true,
                      textYes: "i18n:hmaker-edit-form-del-group-all",
                      textNo: "i18n:hmaker-edit-form-del-group-only"
                    });

                  case 8:
                    ask = _context4.sent;

                  case 9:
                    if (!_.isUndefined(ask)) {
                      _context4.next = 11;
                      break;
                    }

                    return _context4.abrupt("return");

                  case 11:
                    // Remove Group
                    index = _.first(cur.index);
                    fields = _.filter(_this4.value, function (_, i) {
                      return i != index;
                    }); // Group only, insert the fields back to list

                    if (false === ask) {
                      if (!_.isEmpty(cur.group.fields)) {
                        (_Ti$Util = Ti.Util).insertToArray.apply(_Ti$Util, [fields, index].concat(_toConsumableArray(cur.group.fields)));
                      }
                    }

                    _context4.next = 17;
                    break;

                  case 16:
                    //....................................
                    // Delete field in group
                    if (cur.group && cur.field) {
                      fields = _.cloneDeep(_this4.value);
                      grp = _.cloneDeep(cur.group);
                      i0 = _.first(cur.index);
                      i1 = _.last(cur.index);
                      grp.fields = _.filter(grp.fields, function (_, i) {
                        return i != i1;
                      });
                      fields[i0] = grp;
                    } //....................................
                    // Delete field
                    else {
                        _index = _.first(cur.index);
                        fields = _.filter(_this4.value, function (_, i) {
                          return i != _index;
                        });
                      }

                  case 17:
                    //....................................
                    // Select next item
                    _this4.selectNextIdByIndex(cur.index, fields); //....................................
                    // Notify change


                    _this4.$notify("change", fields);

                  case 19:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4);
          }))();
        },
        //--------------------------------------
        moveSelectedFieldsUp: function moveSelectedFieldsUp() {
          var fields = _.cloneDeep(this.value);

          var cur = this.getMyCurrent(fields); //....................................
          // Guard

          if (!cur) {
            return Ti.Toast.Open("i18n:hmaker-edit-form-nil-field", "warn");
          }

          var i0 = _.first(cur.index); //....................................
          // In Group


          if (cur.group && cur.field) {
            var i1 = _.last(cur.index); // Move out from group


            if (i1 == 0) {
              _.remove(cur.group.fields, function (_, i) {
                return i == i1;
              });

              Ti.Util.insertToArray(fields, i0, cur.field);
              this.myCurrentId = _.last(cur.path);
            } // Just move up
            else {
                cur.group.fields[i1] = cur.group.fields[i1 - 1];
                cur.group.fields[i1 - 1] = cur.field;
              }
          } // At top
          else if (i0 > 0) {
              var prev = fields[i0 - 1]; // Move in to group

              if (this.isGroup(prev) && cur.field && this.$tree.isOpened(prev.title)) {
                _.remove(fields, function (_, i) {
                  return i == i0;
                });

                if (_.isArray(prev.fields)) {
                  prev.fields.push(cur.field);
                } else {
                  prev.fields = [cur.field];
                }

                this.myCurrentId = [prev.title, _.last(cur.path)].join("/");
              } // Switch
              else {
                  fields[i0] = fields[i0 - 1];
                  fields[i0 - 1] = cur.field || cur.group;
                }
            } //....................................
          // Notify change


          this.$notify("change", fields);
        },
        //--------------------------------------
        moveSelectedFieldsDown: function moveSelectedFieldsDown() {
          var fields = _.cloneDeep(this.value);

          var cur = this.getMyCurrent(fields); //....................................
          // Guard

          if (!cur) {
            return Ti.Toast.Open("i18n:hmaker-edit-form-nil-field", "warn");
          }

          var i0 = _.first(cur.index); //....................................
          // In Group


          if (cur.group && cur.field) {
            var i1 = _.last(cur.index); // Move out from group


            if (i1 >= cur.group.fields.length - 1) {
              _.remove(cur.group.fields, function (_, i) {
                return i == i1;
              });

              Ti.Util.insertToArray(fields, i0 + 1, cur.field);
              this.myCurrentId = _.last(cur.path);
            } // Just move down
            else {
                cur.group.fields[i1] = cur.group.fields[i1 + 1];
                cur.group.fields[i1 + 1] = cur.field;
              }
          } // At top
          else if (i0 < fields.length - 1) {
              var next = fields[i0 + 1]; // Move in to group

              if (this.isGroup(next) && cur.field && this.$tree.isOpened(next.title)) {
                _.remove(fields, function (_, i) {
                  return i == i0;
                });

                if (_.isArray(next.fields)) {
                  Ti.Util.insertToArray(next.fields, 0, cur.field);
                } else {
                  next.fields = [cur.field];
                }

                this.myCurrentId = [next.title, _.last(cur.path)].join("/");
              } // Switch
              else {
                  fields[i0] = fields[i0 + 1];
                  fields[i0 + 1] = cur.field || cur.group;
                }
            } //....................................
          // Notify change


          this.$notify("change", fields);
        } //--------------------------------------

      },
      //////////////////////////////////////////
      mounted: function mounted() {
        // !!!!!!!!!!!!!!!!!!!!!!!!!
        //console.log("mounted")
        var vueDropMe = Ti.Storage.local.getObject("vue-drop-me", null);

        if (vueDropMe) {
          var du = Date.now() - vueDropMe.timeInMs;
          console.log({
            du: du
          });

          if (du < 1000) {
            this.myCurrentId = vueDropMe.myCurrentId;
          }

          Ti.Storage.local.remove("vue-drop-me");
        } // Auto Select first item
        else {
            this.selectNextIdByIndex([0]);
          }
      },
      //////////////////////////////////////////
      beforeDestroy: function beforeDestroy() {
        // !!!!!!!!!!!!!!!!!!!!!!!!!
        //console.log("beforeDestroy")
        // Vue will drop the com in some magical time
        // So I need  keep the state in 1000ms in case
        Ti.Storage.local.setObject("vue-drop-me", {
          myCurrentId: this.myCurrentId,
          timeInMs: Date.now()
        });
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/hmaker/edit-com/form/fieldset/edit-form-fieldset.mjs", _M);
  })(); //============================================================
  // JOIN: hmaker/edit-com/form/fieldset/_com.json
  //============================================================


  Ti.Preload("ti/com/hmaker/edit-com/form/fieldset/_com.json", {
    "name": "hmaker-edit-form-fieldset",
    "globally": true,
    "template": "./edit-form-fieldset.html",
    "mixins": ["./edit-form-fieldset.mjs"],
    "components": ["@com:hmaker/edit-com/form/field", "@com:hmaker/edit-com/form/group"]
  }); //============================================================
  // JOIN: hmaker/edit-com/form/group/edit-form-group.html
  //============================================================

  Ti.Preload("ti/com/hmaker/edit-com/form/group/edit-form-group.html", "<div class=\"hmaker-edit-form-group\">\n  Group: {{value}}\n</div>"); //============================================================
  // JOIN: hmaker/edit-com/form/group/edit-form-group.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////
      props: {
        "value": {
          type: Object,
          "default": undefined
        }
      },
      //////////////////////////////////////////
      computed: {//--------------------------------------
        //--------------------------------------
      },
      //////////////////////////////////////////
      methods: {} //--------------------------------------
      //--------------------------------------
      //////////////////////////////////////////

    };
    Ti.Preload("ti/com/hmaker/edit-com/form/group/edit-form-group.mjs", _M);
  })(); //============================================================
  // JOIN: hmaker/edit-com/form/group/_com.json
  //============================================================


  Ti.Preload("ti/com/hmaker/edit-com/form/group/_com.json", {
    "name": "hmaker-edit-form-group",
    "globally": true,
    "template": "./edit-form-group.html",
    "mixins": ["./edit-form-group.mjs"]
  }); //============================================================
  // JOIN: hmaker/edit-com/form/_com.json
  //============================================================

  Ti.Preload("ti/com/hmaker/edit-com/form/_com.json", {
    "name": "hmaker-edit-com-form",
    "globally": true,
    "template": "./edit-com-form.html",
    "mixins": ["./edit-com-form.mjs"],
    "components": ["@com:hmaker/edit-com/form/fieldset"]
  }); //============================================================
  // JOIN: hmaker/edit-com/hmaker-edit-com.html
  //============================================================

  Ti.Preload("ti/com/hmaker/edit-com/hmaker-edit-com.html", "<div class=\"hmaker-edit-com\">\n  <!--\n    Select Com Type\n  -->\n  <div class=\"as-com-type\">\n    <ti-combo-input \n      v-bind=\"ComTypeComboInput\"\n      :value=\"ComType\"\n      @change=\"OnComTypeChange\"/>\n  </div>\n  <!--\n    Edit Com Conf\n  -->\n  <div class=\"as-com-conf\"><div class=\"as-con\">\n    <!--\n      Show Com Editor\n    -->\n    <component\n      v-if=\"hasEditCom\"\n        class=\"ti-fill-parent\"\n        :is=\"EditComType\"\n        v-bind=\"EditComConf\"\n        @change=\"OnComConfChange\"/>\n    <!--\n      Show Blank\n    -->\n    <ti-loading \n      v-else\n        icon=\"fas-hand-pointer\"\n        text=\"i18n:hmaker-com-conf-blank\"/>\n  </div></div>\n</div>"); //============================================================
  // JOIN: hmaker/edit-com/hmaker-edit-com.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////
      data: function data() {
        return {
          myCom: null
        };
      },
      //////////////////////////////////////////
      props: {
        "value": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //------------------------------------------------
        Dict: function Dict() {
          return Wn.Dict.hMakerComponents();
        },
        //--------------------------------------
        ComTypeComboInput: function ComTypeComboInput() {
          return {
            options: this.Dict,
            placeholder: "i18n:hmaker-com-type-blank",
            autoI18n: true,
            mustInList: true,
            autoCollapse: true,
            dropDisplay: ["<icon:im-plugin>", "title|name"]
          };
        },
        //--------------------------------------
        hasEditCom: function hasEditCom() {
          return this.myCom ? true : false;
        },
        //--------------------------------------
        ComType: function ComType() {
          return _.get(this.value, "comType");
        },
        //--------------------------------------
        ComConf: function ComConf() {
          return _.get(this.value, "comConf");
        },
        //--------------------------------------
        EditComType: function EditComType() {
          return _.get(this.myCom, "editComType");
        },
        //--------------------------------------
        EditComConf: function EditComConf() {
          var conf = _.get(this.myCom, "editComConf");

          return Ti.Util.explainObj(this.value, conf);
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnComTypeChange: function OnComTypeChange(comType) {
          var _this5 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
            return regeneratorRuntime.wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    _context5.next = 2;
                    return _this5.Dict.getItem(comType);

                  case 2:
                    _this5.myCom = _context5.sent;

                    _this5.notifyChange({
                      comType: comType,
                      comConf: _this5.ComConf
                    });

                  case 4:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5);
          }))();
        },
        //--------------------------------------
        OnComConfChange: function OnComConfChange() {
          var comConf = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          this.notifyChange({
            comType: this.ComType,
            comConf: comConf
          });
        },
        //--------------------------------------
        notifyChange: function notifyChange() {
          var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          this.$notify("change", payload);
        },
        //--------------------------------------
        reloadMyCom: function reloadMyCom() {
          var _this6 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
            var comType;
            return regeneratorRuntime.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    if (_.isEmpty(_this6.value)) {
                      _context6.next = 7;
                      break;
                    }

                    comType = _this6.value.comType;
                    _context6.next = 4;
                    return _this6.Dict.getItem(comType);

                  case 4:
                    _this6.myCom = _context6.sent;
                    _context6.next = 8;
                    break;

                  case 7:
                    _this6.myCom = null;

                  case 8:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6);
          }))();
        } //--------------------------------------

      },
      //////////////////////////////////////////
      watch: {
        "value": {
          handler: "reloadMyCom",
          immediate: true
        }
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/hmaker/edit-com/hmaker-edit-com.mjs", _M);
  })(); //============================================================
  // JOIN: hmaker/edit-com/_com.json
  //============================================================


  Ti.Preload("ti/com/hmaker/edit-com/_com.json", {
    "name": "hmaker-edit-com",
    "globally": true,
    "template": "./hmaker-edit-com.html",
    "mixins": ["./hmaker-edit-com.mjs"],
    "components": ["@com:hmaker/edit-com/form", "@com:wn/combo/edit-com"]
  }); //============================================================
  // JOIN: hmaker/edit-site-actions/edit-site-actions.html
  //============================================================

  Ti.Preload("ti/com/hmaker/edit-site-actions/edit-site-actions.html", "<div class=\"hmaker-edit-site-actions\">\n  Actions\n</div>"); //============================================================
  // JOIN: hmaker/edit-site-actions/edit-site-actions.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      //////////////////////////////////////////
      data: function data() {
        return {};
      },
      //////////////////////////////////////////
      props: {
        "data": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        theConfig: function theConfig() {} //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {} //--------------------------------------
      //--------------------------------------
      //////////////////////////////////////////

    };
    Ti.Preload("ti/com/hmaker/edit-site-actions/edit-site-actions.mjs", _M);
  })(); //============================================================
  // JOIN: hmaker/edit-site-actions/_com.json
  //============================================================


  Ti.Preload("ti/com/hmaker/edit-site-actions/_com.json", {
    "name": "hmaker-edit-site-actions",
    "globally": true,
    "template": "./edit-site-actions.html",
    "mixins": ["./edit-site-actions.mjs"]
  }); //============================================================
  // JOIN: hmaker/edit-site-apis/edit-site-apis.html
  //============================================================

  Ti.Preload("ti/com/hmaker/edit-site-apis/edit-site-apis.html", "<div class=\"hmaker-edit-site-apis\">\n  Apis\n</div>"); //============================================================
  // JOIN: hmaker/edit-site-apis/edit-site-apis.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      //////////////////////////////////////////
      data: function data() {
        return {};
      },
      //////////////////////////////////////////
      props: {
        "data": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        theConfig: function theConfig() {} //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {} //--------------------------------------
      //--------------------------------------
      //////////////////////////////////////////

    };
    Ti.Preload("ti/com/hmaker/edit-site-apis/edit-site-apis.mjs", _M);
  })(); //============================================================
  // JOIN: hmaker/edit-site-apis/_com.json
  //============================================================


  Ti.Preload("ti/com/hmaker/edit-site-apis/_com.json", {
    "name": "hmaker-edit-site-apis",
    "globally": true,
    "template": "./edit-site-apis.html",
    "mixins": ["./edit-site-apis.mjs"]
  }); //============================================================
  // JOIN: hmaker/edit-site-blocks/edit-site-blocks.html
  //============================================================

  Ti.Preload("ti/com/hmaker/edit-site-blocks/edit-site-blocks.html", "<div class=\"hmaker-edit-site-blocks\">\n  Blocks\n</div>"); //============================================================
  // JOIN: hmaker/edit-site-blocks/edit-site-blocks.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      //////////////////////////////////////////
      data: function data() {
        return {};
      },
      //////////////////////////////////////////
      props: {
        "data": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        theConfig: function theConfig() {} //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {} //--------------------------------------
      //--------------------------------------
      //////////////////////////////////////////

    };
    Ti.Preload("ti/com/hmaker/edit-site-blocks/edit-site-blocks.mjs", _M);
  })(); //============================================================
  // JOIN: hmaker/edit-site-blocks/_com.json
  //============================================================


  Ti.Preload("ti/com/hmaker/edit-site-blocks/_com.json", {
    "name": "hmaker-edit-site-blocks",
    "globally": true,
    "template": "./edit-site-blocks.html",
    "mixins": ["./edit-site-blocks.mjs"]
  }); //============================================================
  // JOIN: hmaker/edit-site-general/edit-site-general.html
  //============================================================

  Ti.Preload("ti/com/hmaker/edit-site-general/edit-site-general.html", "<ti-form class=\"hmaker-edit-site-general\"\n  :fields=\"TheFields\"\n  :data=\"data\"/>"); //============================================================
  // JOIN: hmaker/edit-site-general/edit-site-general.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      //////////////////////////////////////////
      data: function data() {
        return {};
      },
      //////////////////////////////////////////
      props: {
        "data": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TheFields: function TheFields() {
          return [{
            title: "i18n:hmaker-site-k-domain",
            name: "domain"
          }, {
            title: "i18n:hmaker-site-k-apiBase",
            name: "apiBase"
          }, {
            title: "i18n:hmaker-site-k-captcha",
            name: "captcha"
          }, {
            title: "i18n:hmaker-site-k-base",
            name: "base"
          }, {
            title: "i18n:hmaker-site-k-entry",
            name: "entry"
          }];
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {} //--------------------------------------
      //--------------------------------------
      //////////////////////////////////////////

    };
    Ti.Preload("ti/com/hmaker/edit-site-general/edit-site-general.mjs", _M);
  })(); //============================================================
  // JOIN: hmaker/edit-site-general/_com.json
  //============================================================


  Ti.Preload("ti/com/hmaker/edit-site-general/_com.json", {
    "name": "hmaker-edit-site-general",
    "globally": true,
    "template": "./edit-site-general.html",
    "mixins": ["./edit-site-general.mjs"]
  }); //============================================================
  // JOIN: hmaker/edit-site-nav/edit-site-nav.html
  //============================================================

  Ti.Preload("ti/com/hmaker/edit-site-nav/edit-site-nav.html", "<div class=\"hmaker-edit-site-nav\">\n  <!--\n    Nav Table\n  -->\n  <div class=\"as-table ti-fill-parent\">\n    <ti-table class=\"ti-fill-parent\"\n      :data=\"TableData\"\n      :fields=\"TableFields\"\n      :selectable=\"true\"\n      :checkable=\"true\"\n      :multi=\"true\"\n      :current-id=\"myCurrentId\"\n      :checked-ids=\"myCheckedIds\"\n      @select=\"OnRowSelected\"/>\n  </div>\n  <!--\n    Nav Form\n  -->\n  <div class=\"as-form\">\n    <ti-form\n      class=\"ti-fill-parent\"\n      :fields=\"FormFields\"\n      :blank-as=\"FormBlankAs\"\n      :data=\"FormData\"\n      @change=\"OnFormChanged\"/>\n  </div>\n</div>"); //============================================================
  // JOIN: hmaker/edit-site-nav/edit-site-nav.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////
      data: function data() {
        return {
          myCurrentIndex: -1,
          myCurrentId: null,
          myCheckedIds: {},
          myActionStatus: {
            "remove": false,
            "moveUp": false,
            "moveDown": false
          }
        };
      },
      //////////////////////////////////////////
      props: {
        "data": {
          type: Array,
          "default": function _default() {
            return [];
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TableData: function TableData() {
          var list = [];

          _.forEach(this.data, function (it, index) {
            list.push(_.assign({
              id: "N".concat(index)
            }, it));
          });

          return list;
        },
        //--------------------------------------
        TableLastIndex: function TableLastIndex() {
          return this.TableData.length - 1;
        },
        //--------------------------------------
        TableFields: function TableFields() {
          return [{
            title: "i18n:hmaker-nav-k-display",
            display: [{
              key: "icon",
              comType: "ti-icon"
            }, "title"],
            width: -150
          }, {
            title: "i18n:hmaker-nav-k-type",
            name: "type",
            width: -100,
            display: [{
              comType: "ti-icon",
              transformer: {
                name: "toStr",
                args: {
                  page: "zmdi-file",
                  href: "zmdi-link",
                  dispatch: "zmdi-flash-auto"
                }
              }
            }, {
              transformer: {
                name: "toStr",
                args: {
                  page: "i18n:hmaker-nav-tp-page",
                  href: "i18n:hmaker-nav-tp-href",
                  dispatch: "i18n:hmaker-nav-tp-dispatch"
                }
              }
            }]
          }, {
            title: "i18n:hmaker-nav-k-value",
            display: "value"
          }];
        },
        //--------------------------------------
        FormBlankAs: function FormBlankAs() {
          return {
            icon: "zmdi-long-arrow-return zmdi-hc-rotate-90",
            text: "i18n:hmaker-nav-blank-item"
          };
        },
        //--------------------------------------
        FormFields: function FormFields() {
          return [{
            title: "i18n:hmaker-nav-k-title",
            name: "title",
            comType: "ti-input"
          }, {
            title: "i18n:hmaker-nav-k-icon",
            name: "icon",
            comType: "ti-input-icon"
          }, {
            title: "i18n:hmaker-nav-k-type",
            name: "type",
            comType: "ti-switcher",
            comConf: {
              options: [{
                icon: "zmdi-file",
                text: "i18n:hmaker-nav-tp-page",
                value: "page"
              }, {
                icon: "zmdi-link",
                text: "i18n:hmaker-nav-tp-href",
                value: "href"
              }, {
                icon: "zmdi-flash-auto",
                text: "i18n:hmaker-nav-tp-dispatch",
                value: "dispatch"
              }]
            }
          }, {
            title: "i18n:hmaker-nav-k-value",
            name: "value",
            comType: "ti-input"
          }];
        },
        //--------------------------------------
        FormData: function FormData() {
          if (this.myCurrentIndex >= 0) {
            return this.TableData[this.myCurrentIndex];
          }
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnRowSelected: function OnRowSelected(_ref2) {
          var currentId = _ref2.currentId,
              checkedIds = _ref2.checkedIds,
              currentIndex = _ref2.currentIndex;
          //console.log(currentId, current)
          this.myCurrentIndex = currentIndex;
          this.myCurrentId = currentId;
          this.myCheckedIds = checkedIds;

          _.assign(this.myActionStatus, {
            moveUp: currentIndex > 0,
            moveDown: currentIndex >= 0 && currentIndex < this.TableLastIndex,
            remove: currentIndex >= 0
          });
        },
        //--------------------------------------
        OnFormChanged: function OnFormChanged() {
          var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              name = _ref3.name,
              value = _ref3.value;

          //console.log("onFormChanged", {name, value})
          if (this.myCurrentIndex >= 0) {
            var data = _.cloneDeep(this.data);

            data[this.myCurrentIndex][name] = value;
            this.notifyChange(data);
          }
        },
        //--------------------------------------
        updateParentActionMenu: function updateParentActionMenu() {
          this.$notify("actions:update", {
            data: [{
              key: "create",
              text: "i18n:add-item",
              type: "action",
              icon: "zmdi-plus",
              action: "$parent:callChild(createNewOne)"
            }, {
              type: "line"
            }, {
              key: "remove",
              type: "action",
              icon: "zmdi-delete",
              action: "$parent:callChild(removeChecked)",
              enableBy: "remove"
            }, {
              type: "line"
            }, {
              key: "moveUp",
              type: "action",
              icon: "zmdi-long-arrow-up",
              action: "$parent:callChild(moveUp)",
              enableBy: "moveUp"
            }, {
              key: "moveDown",
              type: "action",
              icon: "zmdi-long-arrow-down",
              action: "$parent:callChild(moveDown)",
              enableBy: "moveDown"
            }],
            status: this.myActionStatus
          });
        },
        //--------------------------------------
        notifyChange: function notifyChange() {
          var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var list = [];

          _.forEach(data, function (it) {
            list.push(_.pick(it, "icon", "title", "type", "value"));
          });

          this.$notify("change", list);
        },
        //--------------------------------------
        __recover_selected: function __recover_selected(pos, len) {
          var _this7 = this;

          var ids = {};

          for (var i = 0; i < len; i++) {
            ids["N".concat(pos + i)] = true;
          }

          console.log(ids);
          this.$nextTick(function () {
            _this7.OnRowSelected({
              currentId: "N".concat(pos),
              currentIndex: pos,
              checkedIds: ids
            });
          });
        },
        //--------------------------------------
        moveUp: function moveUp() {
          var _this8 = this;

          var data = _.cloneDeep(this.TableData);

          var items = _.remove(data, function (_ref4) {
            var id = _ref4.id;
            return _this8.myCheckedIds[id];
          });

          if (!_.isEmpty(items)) {
            var firstIndex = _.first(items).id.substring(1) * 1;
            var pos = Math.max(0, firstIndex - 1);

            if (pos >= 0) {
              var _Ti$Util2;

              (_Ti$Util2 = Ti.Util).insertToArray.apply(_Ti$Util2, [data, pos].concat(_toConsumableArray(items)));

              this.notifyChange(data); // Recover selected

              this.__recover_selected(pos, items.length);
            }
          }
        },
        //--------------------------------------
        moveDown: function moveDown() {
          var _this9 = this;

          var data = _.cloneDeep(this.TableData);

          var items = _.remove(data, function (_ref5) {
            var id = _ref5.id;
            return _this9.myCheckedIds[id];
          });

          if (!_.isEmpty(items)) {
            var firstIndex = _.first(items).id.substring(1) * 1;
            var pos = firstIndex + 1;

            if (pos <= this.TableData.length - items.length) {
              var _Ti$Util3;

              (_Ti$Util3 = Ti.Util).insertToArray.apply(_Ti$Util3, [data, pos].concat(_toConsumableArray(items)));

              this.notifyChange(data); // Recover selected

              this.__recover_selected(pos, items.length);
            }
          }
        },
        //--------------------------------------
        removeChecked: function removeChecked() {
          var _this10 = this;

          var data = _.filter(this.TableData, function (_ref6) {
            var id = _ref6.id;
            return !_this10.myCheckedIds[id];
          });

          this.notifyChange(data);
          this.myCurrentIndex = -1;
          this.myCurrentId = null;
          this.myCheckedIds = {};
        },
        //--------------------------------------
        createNewOne: function createNewOne() {
          var data = _.cloneDeep(this.TableData);

          Ti.Util.insertToArray(data, this.myCurrentIndex, {
            title: Ti.I18n.get("new-item"),
            type: "page"
          });
          console.log(data);
          this.notifyChange(data);
        } //--------------------------------------

      },
      mounted: function mounted() {
        this.updateParentActionMenu();
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/hmaker/edit-site-nav/edit-site-nav.mjs", _M);
  })(); //============================================================
  // JOIN: hmaker/edit-site-nav/_com.json
  //============================================================


  Ti.Preload("ti/com/hmaker/edit-site-nav/_com.json", {
    "name": "hmaker-edit-site-nav",
    "globally": true,
    "template": "./edit-site-nav.html",
    "mixins": ["./edit-site-nav.mjs"]
  }); //============================================================
  // JOIN: hmaker/edit-site-router/edit-site-router.html
  //============================================================

  Ti.Preload("ti/com/hmaker/edit-site-router/edit-site-router.html", "<div class=\"hmaker-edit-site-router\">\n  Routers\n</div>"); //============================================================
  // JOIN: hmaker/edit-site-router/edit-site-router.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      //////////////////////////////////////////
      data: function data() {
        return {};
      },
      //////////////////////////////////////////
      props: {
        "data": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        theConfig: function theConfig() {} //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {} //--------------------------------------
      //--------------------------------------
      //////////////////////////////////////////

    };
    Ti.Preload("ti/com/hmaker/edit-site-router/edit-site-router.mjs", _M);
  })(); //============================================================
  // JOIN: hmaker/edit-site-router/_com.json
  //============================================================


  Ti.Preload("ti/com/hmaker/edit-site-router/_com.json", {
    "name": "hmaker-edit-site-router",
    "globally": true,
    "template": "./edit-site-router.html",
    "mixins": ["./edit-site-router.mjs"]
  }); //============================================================
  // JOIN: hmaker/edit-site-schema/edit-site-schema.html
  //============================================================

  Ti.Preload("ti/com/hmaker/edit-site-schema/edit-site-schema.html", "<div class=\"hmaker-edit-site-schema\">\n  SCHEMA\n</div>"); //============================================================
  // JOIN: hmaker/edit-site-schema/edit-site-schema.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      //////////////////////////////////////////
      data: function data() {
        return {};
      },
      //////////////////////////////////////////
      props: {
        "data": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        theConfig: function theConfig() {} //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {} //--------------------------------------
      //--------------------------------------
      //////////////////////////////////////////

    };
    Ti.Preload("ti/com/hmaker/edit-site-schema/edit-site-schema.mjs", _M);
  })(); //============================================================
  // JOIN: hmaker/edit-site-schema/_com.json
  //============================================================


  Ti.Preload("ti/com/hmaker/edit-site-schema/_com.json", {
    "name": "hmaker-edit-site-schema",
    "globally": true,
    "template": "./edit-site-schema.html",
    "mixins": ["./edit-site-schema.mjs"]
  }); //============================================================
  // JOIN: hmaker/edit-site-utils/edit-site-utils.html
  //============================================================

  Ti.Preload("ti/com/hmaker/edit-site-utils/edit-site-utils.html", "<div class=\"hmaker-edit-site-utils\">\n  Utils\n</div>"); //============================================================
  // JOIN: hmaker/edit-site-utils/edit-site-utils.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      //////////////////////////////////////////
      data: function data() {
        return {};
      },
      //////////////////////////////////////////
      props: {
        "data": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        theConfig: function theConfig() {} //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {} //--------------------------------------
      //--------------------------------------
      //////////////////////////////////////////

    };
    Ti.Preload("ti/com/hmaker/edit-site-utils/edit-site-utils.mjs", _M);
  })(); //============================================================
  // JOIN: hmaker/edit-site-utils/_com.json
  //============================================================


  Ti.Preload("ti/com/hmaker/edit-site-utils/_com.json", {
    "name": "hmaker-edit-site-utils",
    "globally": true,
    "template": "./edit-site-utils.html",
    "mixins": ["./edit-site-utils.mjs"]
  }); //============================================================
  // JOIN: hmaker/site-current-view/com/current-view-con/current-view-con.html
  //============================================================

  Ti.Preload("ti/com/hmaker/site-current-view/com/current-view-con/current-view-con.html", "<div class=\"current-view-con\">\n  <component :is=\"comType\"\n    class=\"ti-cover-parent\"\n    v-bind=\"comConf\"/>\n</div>"); //============================================================
  // JOIN: hmaker/site-current-view/com/current-view-con/current-view-con.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      /////////////////////////////////////////
      props: {
        "comType": {
          type: String,
          "default": "ti-loading"
        },
        "comConf": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/hmaker/site-current-view/com/current-view-con/current-view-con.mjs", _M);
  })(); //============================================================
  // JOIN: hmaker/site-current-view/com/current-view-con/_com.json
  //============================================================


  Ti.Preload("ti/com/hmaker/site-current-view/com/current-view-con/_com.json", {
    "name": "current-view-con",
    "globally": false,
    "template": "./current-view-con.html",
    "mixins": ["./current-view-con.mjs"]
  }); //============================================================
  // JOIN: hmaker/site-current-view/site-current-view.html
  //============================================================

  Ti.Preload("ti/com/hmaker/site-current-view/site-current-view.html", "<div class=\"site-current-view\"\n  :class=\"topClass\">\n  <!--\n    Title\n  -->\n  <div class=\"current-view-title\">\n    <!-- For Site -->\n    <div class=\"as-name\">\n      <ti-icon \n        class=\"as-icon\"\n        :value=\"theTitleIcon\"/>\n      <span\n        class=\"as-text\">{{theTitleText|i18n}}</span>\n    </div>\n    <!-- Crumb -->\n    <div class=\"as-crumb\"></div>\n    <!-- Actions -->\n    <div class=\"as-actions\">\n      <ti-menu\n        v-if=\"theCurrentAction\"\n          :data=\"theCurrentAction\"\n          :status=\"status\"/>\n    </div>\n  </div>\n  <!--\n    Main Area\n  -->\n  <current-view-con\n    class=\"ti-fill-parent\"\n    :com-type=\"theCurrentView.comType\"\n    :com-conf=\"theCurrentView.comConf\"/>\n</div>"); //============================================================
  // JOIN: hmaker/site-current-view/site-current-view.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      //////////////////////////////////////////
      props: {
        "home": {
          type: Object,
          "default": null
        },
        "tree": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "currentMeta": {
          type: Object,
          "default": null
        },
        "currentContent": {
          type: String,
          "default": null
        },
        "currentData": {
          type: Object,
          "default": null
        },
        "mapping": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "views": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "status": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        topClass: function topClass() {
          return {
            "is-changed": this.status.changed
          };
        },
        //--------------------------------------
        theViewsMapping: function theViewsMapping() {
          return new HmViewMapping(this.mapping || {});
        },
        //--------------------------------------
        hasCurrent: function hasCurrent() {
          return this.currentMeta;
        },
        //--------------------------------------
        theTitleIcon: function theTitleIcon() {
          return Wn.Util.getIconObj(this.currentMeta || this.home);
        },
        //--------------------------------------
        theTitleText: function theTitleText() {
          return Wn.Util.getObjDisplayName(this.currentMeta || this.home);
        },
        //--------------------------------------
        theCurrentView: function theCurrentView() {
          // The default view
          var view = {
            comType: "ti-loading",
            comConf: {
              icon: "zmdi-alert-circle-o",
              text: "i18n:blank"
            }
          }; // Find the view by current meta

          if (this.hasCurrent) {
            var homePath = this.home.ph;
            var currentPath = this.currentMeta.ph;
            view = this.theViewsMapping.getView({
              path: Ti.Util.getRelativePath(homePath, currentPath),
              type: this.currentMeta.tp,
              mime: this.currentMeta.mime,
              race: this.currentMeta.race
            }, view);

            if (_.isString(view)) {
              view = this.views[view];
            }
          } // Explain it ...


          return Ti.Util.explainObj(this, view);
        },
        //--------------------------------------
        theCurrentAction: function theCurrentAction() {
          return this.theCurrentView.actions;
        } //--------------------------------------

      } //////////////////////////////////////////

    }; /////////////////////////////////////////////

    var HmViewMapping = /*#__PURE__*/function () {
      function HmViewMapping(mapping) {
        _classCallCheck(this, HmViewMapping);

        this.paths = new Ti.Mapping(mapping.paths);
        this.types = new Ti.Mapping(mapping.types);
        this.mimes = new Ti.Mapping(mapping.mimes);
        this.races = new Ti.Mapping(mapping.races);
      }

      _createClass(HmViewMapping, [{
        key: "getView",
        value: function getView() {
          var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              path = _ref7.path,
              type = _ref7.type,
              mime = _ref7.mime,
              race = _ref7.race;

          var dft = arguments.length > 1 ? arguments[1] : undefined;
          return this.paths.get(path) || this.types.get(type) || this.mimes.get(mime) || this.races.get(race) || dft;
        }
      }]);

      return HmViewMapping;
    }();

    Ti.Preload("ti/com/hmaker/site-current-view/site-current-view.mjs", _M);
  })(); //============================================================
  // JOIN: hmaker/site-current-view/_com.json
  //============================================================


  Ti.Preload("ti/com/hmaker/site-current-view/_com.json", {
    "name": "hmaker-site-current-view",
    "globally": true,
    "template": "./site-current-view.html",
    "mixins": ["./site-current-view.mjs"],
    "components": ["./com/current-view-con", "@com:hmaker/site-state", "@com:ti/text/raw", "@com:ti/obj/json", "@com:wn/obj/preview", "@com:wn/adaptlist"]
  }); //============================================================
  // JOIN: hmaker/site-manager/hm-site-manager.html
  //============================================================

  Ti.Preload("ti/com/hmaker/site-manager/hm-site-manager.html", "<ti-gui\n  class=\"hmaker-site-manager\"\n  :class=\"className\"\n  keep-shown-to=\"hmaker-site-manager\"\n  :layout=\"theLayout\"\n  :schema=\"theSchema\"\n  :can-loading=\"true\"\n  :loading-as=\"status.reloading\"\n  @block:event=\"onBlockEvent\"/>"); //============================================================
  // JOIN: hmaker/site-manager/hm-site-manager.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      //////////////////////////////////////////
      props: {
        "home": {
          type: Object,
          "default": null
        },
        "tree": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "current": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "config": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "status": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        theConfig: function theConfig() {
          return this.config[this.viewportMode] || {};
        },
        //--------------------------------------
        theLayout: function theLayout() {
          return {
            type: "cols",
            border: true,
            blocks: [{
              title: "i18n:hmaker-site-tree",
              size: 280,
              name: "site-tree",
              body: "desktop-site-tree"
            }, {
              name: "site-current",
              body: "desktop-site-current"
            }]
          };
        },
        //--------------------------------------
        theSchema: function theSchema() {
          //....................................
          // Done
          return {
            "desktop-site-tree": {
              comType: "ti-tree",
              comConf: {
                //=========================
                data: this.tree.root,
                //=========================
                display: [{
                  key: "rawData",
                  type: "Object",
                  transformer: "getIconObj",
                  comType: "ti-icon"
                }, "rawData.title", "name"],
                //=========================
                blankAs: {
                  icon: "zmdi-settings zmdi-hc-spin",
                  text: "i18n:hmaker-site-tree-loading"
                },
                //=========================
                currentId: this.tree.currentId,
                showRoot: false,
                defaultOpenDepth: 1,
                extendFunctionSet: Wn.Util,
                openedNodePaths: this.tree.openedNodePaths //=========================

              }
            },
            "desktop-site-current": {
              comType: "hmaker-site-current-view",
              comConf: {
                home: this.home,
                tree: this.tree,
                currentMeta: this.current.meta,
                currentContent: this.current.content,
                currentData: this.current.data,
                mapping: this.theConfig.mapping,
                views: this.config.views,
                status: this.status
              }
            }
          }; //....................................
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        onBlockEvent: function onBlockEvent() {
          var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              block = _ref8.block,
              name = _ref8.name,
              args = _ref8.args;

          var evKey = _.concat(block || [], name || []).join(".");

          var data = _.first(args);

          console.log("hmaker-site-manager:onBlockEvent", evKey, data); //....................................
          // Ignore the undefined data

          if (_.isUndefined(data)) {
            return;
          } //....................................
          // Opened Node


          if ("site-tree.opened" == evKey) {
            Ti.App(this).dispatch("main/reloadTreeNode", {
              id: data.id
            });
          } //....................................
          // Save Tree opened Status


          if ("site-tree.opened-status:change" == evKey) {
            Ti.App(this).dispatch("main/setTreeOpenedNodePaths", data);
          } //....................................
          // Save Tree selected Status


          if ("site-tree.select" == evKey) {
            Ti.App(this).dispatch("main/setTreeSelected", data.currentId);
          } //....................................
          // Save Tree selected Status


          if ("site-current.open" == evKey) {
            Ti.App(this).dispatch("main/reloadCurrent", data.rawData);
          } //....................................


          if ("site-current.change" == evKey) {
            Ti.App(this).dispatch("main/onCurrentChanged", data);
          } //....................................

        },
        //--------------------------------------
        editCurrentObjMeta: function editCurrentObjMeta() {
          var meta = this.current.meta || this.home;

          if (!meta) {
            return Ti.Toast.Open("i18n:nil-obj");
          }

          Wn.EditObjMeta(meta);
        } //--------------------------------------

      },
      //////////////////////////////////////////
      mounted: function mounted() {
        var _this11 = this;

        //----------------------------------------
        Ti.Fuse.getOrCreate().add({
          key: "hmaker-site-manager",
          everythingOk: function everythingOk() {
            return !_this11.status.changed;
          },
          fail: function fail() {
            Ti.Toast.Open("i18n:wn-obj-nosaved", "warn");
          }
        }); //----------------------------------------
      },
      //////////////////////////////////////////
      beforeDestroy: function beforeDestroy() {
        Ti.Fuse.get().remove("hmaker-site-manager");
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/hmaker/site-manager/hm-site-manager.mjs", _M);
  })(); //============================================================
  // JOIN: hmaker/site-manager/_com.json
  //============================================================


  Ti.Preload("ti/com/hmaker/site-manager/_com.json", {
    "name": "hmaker-site-manager",
    "globally": true,
    "i18n": "@i18n:hmaker",
    "template": "./hm-site-manager.html",
    "mixins": ["./hm-site-manager.mjs"],
    "components": ["@com:hmaker/site-current-view"]
  }); //============================================================
  // JOIN: hmaker/site-state/com/site-node-editing/site-node-editing.html
  //============================================================

  Ti.Preload("ti/com/hmaker/site-state/com/site-node-editing/site-node-editing.html", "<div class=\"hmaker-site-node-editing\">\n  <template v-if=\"hasNode\">\n    <!--\n      Heading\n    -->\n    <div class=\"as-head\">\n      <!--Title Bar-->\n      <div class=\"at-left\">\n        <ti-icon :value=\"node.icon\"/>\n        <span>{{node.title | i18n}}</span>\n      </div>\n      <!--Action Menu-->\n      <div \n        v-if=\"hasActionMenu\"\n          class=\"at-right\">\n          <ti-menu v-bind=\"myActionMenu\"/>\n      </div>\n    </div>\n    <!--\n      Editing\n    -->\n    <div class=\"as-edit\">\n      <component class=\"ti-fill-parent\"\n        :is=\"Com.comType\"\n        v-bind=\"Com.comConf\"\n        :on-init=\"OnChildInit\"\n        @change=\"OnChange\"\n        @actions:update=\"OnActionsUpdate\"/>\n    </div>\n  </template>\n  <!--\n    Blank\n  -->\n  <template v-else>\n    <ti-loading\n      text=\"i18n:blank-to-edit\"\n      icon=\"zmdi-arrow-left\"/>\n  </template>\n</div>"); //============================================================
  // JOIN: hmaker/site-state/com/site-node-editing/site-node-editing.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      //////////////////////////////////////////
      data: function data() {
        return {
          myActionMenu: null
        };
      },
      //////////////////////////////////////////
      props: {
        "path": {
          type: String,
          "default": null
        },
        "node": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        hasNode: function hasNode() {
          return this.path && !_.isEmpty(this.node);
        },
        //--------------------------------------
        hasActionMenu: function hasActionMenu() {
          return !_.isEmpty(this.myActionMenu);
        },
        //--------------------------------------
        Com: function Com() {
          //....................................
          // General
          if ("general" == this.path) {
            return {
              comType: "hmaker-edit-site-general",
              comConf: {
                data: this.node.data
              }
            };
          } //....................................
          // General


          if ("nav" == this.path) {
            return {
              comType: "hmaker-edit-site-nav",
              comConf: {
                data: this.node.data
              }
            };
          } //....................................
          // Default


          return {
            comType: "ti-form",
            comConf: {
              fields: [{
                name: "path" //comConf : {value:this.path}

              }, {
                name: "node",
                comType: "ti-input-text",
                comConf: {
                  readonly: true,
                  height: "7rem"
                }
              }],
              data: {
                path: this.path,
                node: JSON.stringify(this.node, null, '  ')
              }
            }
          };
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnChange: function OnChange(payload) {
          //console.log("onChanged", payload)
          this.$notify("change", {
            path: this.path,
            node: this.node,
            payload: payload
          });
        },
        //--------------------------------------
        OnActionsUpdate: function OnActionsUpdate() {
          var menu = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          this.myActionMenu = menu;
        },
        //--------------------------------------
        OnChildInit: function OnChildInit($myChildCom) {
          this.$myChildCom = $myChildCom;
        },
        //--------------------------------------
        callChild: function callChild(actionName) {
          console.log(actionName);

          if (this.$myChildCom) {
            this.$myChildCom[actionName]();
          }
        } //--------------------------------------

      },
      //////////////////////////////////////////
      watch: {
        "path": function path() {
          this.myActionMenu = null;
        }
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/hmaker/site-state/com/site-node-editing/site-node-editing.mjs", _M);
  })(); //============================================================
  // JOIN: hmaker/site-state/com/site-node-editing/_com.json
  //============================================================


  Ti.Preload("ti/com/hmaker/site-state/com/site-node-editing/_com.json", {
    "name": "hmaker-site-node-editing",
    "globally": true,
    "template": "./site-node-editing.html",
    "mixins": ["./site-node-editing.mjs"],
    "components": ["@com:hmaker/edit-site-general", "@com:hmaker/edit-site-utils", "@com:hmaker/edit-site-apis", "@com:hmaker/edit-site-schema", "@com:hmaker/edit-site-blocks", "@com:hmaker/edit-site-nav", "@com:hmaker/edit-site-router", "@com:hmaker/edit-site-actions", "@com:ti/form"]
  }); //============================================================
  // JOIN: hmaker/site-state/hm-site-state.html
  //============================================================

  Ti.Preload("ti/com/hmaker/site-state/hm-site-state.html", "<ti-gui\n  class=\"hmaker-site-state ti-fill-parent\"\n  keep-shown-to=\"hmaker-site-state\"\n  :layout=\"theLayout\"\n  :schema=\"theSchema\"\n  @block:event=\"onBlockEvent\"/>"); //============================================================
  // JOIN: hmaker/site-state/hm-site-state.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      //////////////////////////////////////////
      data: function data() {
        return {
          myCurrentPathId: null,
          myTreeOpenedStatus: {}
        };
      },
      //////////////////////////////////////////
      props: {
        "home": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "content": {
          type: String,
          "default": null
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        theData: function theData() {
          var str = _.trim(this.content);

          if (!str) {
            return {};
          }

          return JSON.parse(str);
        },
        //--------------------------------------
        theTreeDisplay: function theTreeDisplay() {
          return ["<icon>", "title", "tip"];
        },
        //--------------------------------------
        theTreeData: function theTreeData() {
          return {
            name: "ROOT",
            children: [this._general, this._nav, this._apis, this._schema, this._blocks, this._router, this._actions, this._utils]
          };
        },
        //--------------------------------------
        _general: function _general() {
          return {
            icon: "fas-sliders-h",
            name: "general",
            title: "i18n:hmaker-site-state-general",
            data: _.pick(this.theData, ["domain", "apiBase", "captcha", "base", "entry"])
          };
        },
        //--------------------------------------
        _utils: function _utils() {
          return {
            icon: "zmdi-card-sd",
            name: "utils",
            title: "i18n:hmaker-site-state-utils",
            data: _.assign({}, this.theData.utils)
          };
        },
        //--------------------------------------
        _apis: function _apis() {
          var children = []; //....................................

          _.forEach(this.theData.apis, function (val, key) {
            children.push({
              icon: "zmdi-input-power",
              name: key,
              title: val.title || key,
              tip: key,
              data: val
            });
          }); //....................................


          return {
            icon: "zmdi-input-composite",
            name: "apis",
            title: "i18n:hmaker-site-state-apis",
            children: children
          };
        },
        //......................................
        _schema: function _schema() {
          var children = []; //....................................

          _.forEach(this.theData.schema, function (val, key) {
            children.push({
              icon: "fas-puzzle-piece",
              name: key,
              title: val.title || key,
              data: val
            });
          }); //....................................


          return {
            icon: "fas-pencil-ruler",
            name: "schema",
            title: "i18n:hmaker-site-state-schema",
            children: children
          };
        },
        //......................................
        _blocks: function _blocks() {
          //....................................
          var __sub_block = function __sub_block(block, key) {
            //..................................
            // Block as refer
            if (_.isString(block)) {
              return {
                icon: "fas-external-link-alt",
                name: key,
                title: block,
                data: block
              };
            } //..................................
            // Block as component
            else if (block.body) {
                var comName = _.isString(block.body) ? block.body : block.body.comType || "ti-label";
                var titleKey = _.isNumber(key) ? "[".concat(key, "]") : "\"".concat(key, "\"");
                return {
                  icon: "fas-puzzle-piece",
                  name: key,
                  title: "".concat(titleKey, ":<").concat(comName, ">"),
                  data: block
                };
              } //..................................
              // Block as layout
              else {
                  //................................
                  var _children = []; //................................

                  _.forEach(block.blocks, function (block, index) {
                    _children.push(__sub_block(block, index));
                  }); //................................


                  var _titleKey = _.isNumber(key) ? "[".concat(key, "]") : "\"".concat(key, "\""); //................................


                  var blockName = [_titleKey, Ti.I18n.get("hmaker-layout-".concat(block.type || "cols"))]; //................................

                  return {
                    icon: "im-layer",
                    name: key,
                    title: blockName.join(":"),
                    data: block,
                    children: _children
                  };
                }
          }; //....................................


          var children = [];

          _.forEach(this.theData.blocks, function (deviceInfo, deviceType) {
            //..................................
            var subs = [];

            _.forEach(deviceInfo, function (block, key) {
              subs.push(__sub_block(block, key));
            }); //..................................


            children.push({
              icon: {
                "desktop": "zmdi-desktop-windows",
                "tablet": "zmdi-tablet",
                "phone": "zmdi-smartphone-iphone"
              }[deviceType],
              name: deviceType,
              title: "i18n:".concat(deviceType),
              data: deviceInfo,
              children: subs
            }); //..................................
          }); //....................................


          return {
            icon: "far-object-group",
            name: "blocks",
            title: "i18n:hmaker-site-state-blocks",
            children: children
          };
        },
        //......................................
        _nav: function _nav() {
          return {
            icon: "im-sitemap",
            name: "nav",
            title: "i18n:hmaker-site-state-nav",
            data: this.theData.nav || []
          };
        },
        //......................................
        // router
        _router: function _router() {
          var children = []; //....................................

          _.forEach(this.theData.router, function (val, key) {
            children.push({
              icon: "im-share",
              name: key,
              title: val.match,
              data: val
            });
          }); //....................................


          return {
            icon: "zmdi-router",
            name: "router",
            title: "i18n:hmaker-site-state-router",
            children: children
          };
        },
        //......................................
        _actions: function _actions() {
          var children = []; //....................................

          _.forEach(this.theData.actions, function (val, key) {
            children.push({
              icon: "im-flash",
              name: key,
              title: key,
              data: val
            });
          }); //....................................


          return {
            icon: "im-rocket",
            name: "actions",
            title: "i18n:hmaker-site-state-actions",
            children: children
          };
        },
        //--------------------------------------
        theLayout: function theLayout() {
          return {
            type: "tabs",
            tabAt: "bottom-left",
            blocks: [{
              title: "i18n:structure",
              type: "cols",
              border: true,
              blocks: [{
                size: .372,
                name: "tree",
                body: "desktopStructureTree"
              }, {
                name: "edit",
                body: "desktopStructureEdit"
              }]
            }, {
              title: "i18n:source-code",
              name: "source",
              body: "desktopSourceCode"
            }]
          };
        },
        //--------------------------------------
        theSchema: function theSchema() {
          return {
            // structure: tree
            "desktopStructureTree": {
              comType: "ti-tree",
              comConf: {
                mainWidth: 300,
                border: "cell",
                multi: false,
                data: this.theTreeData,
                display: this.theTreeDisplay,
                autoOpen: false,
                currentId: this.myCurrentPathId,
                defaultOpenDepth: 0,
                keepOpenBy: "hm-site-state-".concat(this.home.id, "-opened"),
                keepCurrentBy: "hm-site-state-".concat(this.home.id, "-current"),
                showRoot: false
              }
            },
            // structure: edit
            "desktopStructureEdit": {
              comType: "hmaker-site-node-editing",
              comConf: {
                path: this.myCurrentPathId,
                node: this.theCurrentNode
              }
            },
            // source code 
            "desktopSourceCode": {
              comType: "ti-text-raw",
              comConf: {
                showTitle: false,
                content: this.content,
                ignoreKeyUp: true
              }
            }
          };
        },
        //--------------------------------------
        theCurrentNode: function theCurrentNode() {
          if (this.myCurrentPathId) {
            return Ti.Trees.getNodeByPath(this.theTreeData, this.myCurrentPathId);
          }

          return null;
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        updateByPath: function updateByPath() {
          var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              path = _ref9.path,
              payload = _ref9.payload;

          //console.log("udpateByPath", path, payload)
          var data = _.cloneDeep(this.theData);

          _.set(data, path, payload); //console.log(JSON.stringify(data, null, '  '))


          Ti.App(this).dispatch("main/onCurrentChanged", data);
        },
        //--------------------------------------
        onBlockEvent: function onBlockEvent() {
          var _ref10 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              block = _ref10.block,
              name = _ref10.name,
              args = _ref10.args;

          var evKey = _.concat(block || [], name || []).join(".");

          var data = _.first(args);

          console.log("hmaker-site-state:onBlockEvent", evKey, data); //....................................
          // Ignore the undefined data

          if (_.isUndefined(data)) {
            return;
          } //....................................
          else if ("tree.select" == evKey) {
              this.onSelected(data);
            } //....................................
            else if ("tree.opened-status:change" == evKey) {
                this.onOpenedStatusChanged(data);
              } //....................................
              else if ("edit.change" == evKey) {
                  this.updateByPath(data);
                } //....................................
                else if ("source.change" == evKey) {
                    Ti.App(this).dispatch("main/onCurrentChanged", data);
                  } //....................................

        },
        //--------------------------------------
        onSelected: function onSelected() {
          var _arguments = arguments,
              _this12 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
            var _ref11, currentId, current;

            return regeneratorRuntime.wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    _ref11 = _arguments.length > 0 && _arguments[0] !== undefined ? _arguments[0] : {}, currentId = _ref11.currentId, current = _ref11.current;
                    //console.log("onSelected", currentId, _.cloneDeep(current))
                    _this12.myCurrentPathId = currentId;

                  case 2:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7);
          }))();
        },
        //--------------------------------------
        onOpenedStatusChanged: function onOpenedStatusChanged(opened) {
          //console.log("onOpenedStatusChanged", _.cloneDeep(opened))
          this.myTreeOpenedStatus = opened;
        } //--------------------------------------

      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/hmaker/site-state/hm-site-state.mjs", _M);
  })(); //============================================================
  // JOIN: hmaker/site-state/_com.json
  //============================================================


  Ti.Preload("ti/com/hmaker/site-state/_com.json", {
    "name": "hmaker-site-state",
    "globally": true,
    "template": "./hm-site-state.html",
    "mixins": ["./hm-site-state.mjs"],
    "components": ["./com/site-node-editing"]
  }); //============================================================
  // JOIN: net/aliyun/vod/manager/vod-manager.html
  //============================================================

  Ti.Preload("ti/com/net/aliyun/vod/manager/vod-manager.html", "<ti-gui\n  class=\"net-aliyun-vod-manager\"\n  :class=\"TopClass\"\n  :layout=\"GuiLayout\"\n  :schema=\"GuiSchema\"\n  :can-loading=\"true\"\n  :loading-as=\"reloading\"\n  @filter::change=\"OnFilterChange\"\n  @sorter::change=\"OnSorterChange\"\n  @list::select=\"OnListSelect\"\n  @video::preview=\"OnVideoPreview\"\n  @pager::change=\"OnPagerChange\"/>"); //============================================================
  // JOIN: net/aliyun/vod/manager/vod-manager.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////////////////
      data: function data() {
        return {
          reloading: false,
          list: [],
          pager: {},
          scrollToken: null,
          myCurrentId: null,
          myCurrentVideo: null,
          myFilter: {
            match: {}
          },
          mySort: {
            CreationTime: -1
          }
        };
      },
      ///////////////////////////////////////////////////////
      props: {
        "meta": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "fields": {
          type: String,
          "default": "Title,CoverURL,Duration,CateName,Size,Description,RegionID"
        },
        "filter": {
          type: Object,
          "default": function _default() {
            return {
              comType: "ti-combo-filter",
              comConf: {
                placeholder: "i18n:net-flt-nil",
                form: {
                  fields: [{
                    title: "i18n:net-ct",
                    name: "CreationTime",
                    type: "Array",
                    comType: "ti-input-daterange",
                    comConf: {
                      "valueType": "ms-array"
                    } // }, {
                    //   title: "i18n:net-vod-cate",
                    //   name : "CateName",
                    //   comType: "ti-input"

                  }, {
                    title: "i18n:net-vod-duration",
                    name: "Duration",
                    comType: "ti-switcher",
                    comConf: {
                      autoSplitValue: false,
                      options: [{
                        value: "[0, 600]",
                        text: "i18n:net-vod-du-short"
                      }, {
                        value: "(600, 4800]",
                        text: "i18n:net-vod-du-tv"
                      }, {
                        value: "(4800, )",
                        text: "i18n:net-vod-du-long"
                      }]
                    }
                  }]
                }
              }
            };
          }
        },
        "sorter": {
          type: Object,
          "default": function _default() {
            return {
              comType: "ti-combo-sorter",
              comConf: {
                options: [{
                  value: "CreationTime",
                  text: "i18n:net-ct"
                }]
              }
            };
          }
        },
        "pageSize": {
          type: Number,
          "default": 20
        },
        "multi": {
          type: Boolean,
          "default": true
        }
      },
      ///////////////////////////////////////////////////////
      computed: {
        //---------------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //---------------------------------------------------
        ConfName: function ConfName() {
          return _.get(this.meta, "vodConfigName");
        },
        //---------------------------------------------------
        CmdPrefix: function CmdPrefix() {
          if (this.ConfName) {
            return "aliyunvod ".concat(this.ConfName);
          }

          return "aliyunvod";
        },
        //---------------------------------------------------
        ThePageNumber: function ThePageNumber() {
          return _.get(this.pager, "pn") || 1;
        },
        //---------------------------------------------------
        ThePageSize: function ThePageSize() {
          return _.get(this.pager, "pgsz") || this.pageSize;
        },
        //---------------------------------------------------
        WallItemDisplay: function WallItemDisplay() {
          return {
            key: "..",
            comType: 'ti-obj-thumb',
            comConf: function comConf(it) {
              return {
                id: it.videoId,
                title: it.title,
                preview: {
                  type: "image",
                  value: it.coverURL
                }
              };
            }
          };
        },
        //---------------------------------------------------
        GuiLayout: function GuiLayout() {
          return {
            type: "cols",
            border: true,
            blocks: [{
              type: "rows",
              size: "61.8%",
              border: true,
              blocks: [{
                type: "cols",
                size: ".44rem",
                blocks: [{
                  name: "filter",
                  flex: "both",
                  body: "pcFilter"
                }, {
                  name: "sorter",
                  flex: "none",
                  body: "pcSorter"
                }]
              }, {
                name: "list",
                body: "pcList"
              }, {
                name: "pager",
                size: 40,
                body: "pcPager"
              }]
            }, {
              icon: "zmdi-tv-alt-play",
              title: "i18n:video",
              name: "video",
              body: "pcVideo"
            }]
          };
        },
        //---------------------------------------------------
        GuiSchema: function GuiSchema() {
          return {
            pcFilter: {
              comType: this.filter.comType,
              comConf: _.assign({
                value: this.myFilter
              }, this.filter.comConf)
            },
            pcSorter: {
              comType: this.sorter.comType,
              comConf: _.assign({
                value: this.mySort
              }, this.sorter.comConf)
            },
            pcList: {
              comType: "ti-wall",
              comConf: {
                data: this.list,
                idBy: "videoId",
                multi: this.multi,
                display: this.WallItemDisplay
              }
            },
            pcPager: {
              comType: "ti-paging-jumper",
              comConf: {
                value: this.pager
              }
            },
            pcVideo: {
              comType: "net-aliyun-vod-video-info",
              comConf: {
                value: this.myCurrentVideo
              }
            }
          };
        } //---------------------------------------------------

      },
      ///////////////////////////////////////////////////////
      methods: {
        //---------------------------------------------------
        OnFilterChange: function OnFilterChange(filter) {
          var _this13 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
            return regeneratorRuntime.wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    _this13.myFilter = filter;
                    _this13.pager = _.assign({}, _this13.pager, {
                      pn: 1
                    });
                    _context8.next = 4;
                    return _this13.reloadVideos();

                  case 4:
                  case "end":
                    return _context8.stop();
                }
              }
            }, _callee8);
          }))();
        },
        //---------------------------------------------------
        OnSorterChange: function OnSorterChange(sort) {
          var _this14 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
            return regeneratorRuntime.wrap(function _callee9$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    _this14.mySort = sort;
                    _this14.pager = _.assign({}, _this14.pager, {
                      pn: 1
                    });
                    _context9.next = 4;
                    return _this14.reloadVideos();

                  case 4:
                  case "end":
                    return _context9.stop();
                }
              }
            }, _callee9);
          }))();
        },
        //---------------------------------------------------
        OnPagerChange: function OnPagerChange(pg) {
          var _this15 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
            var pgsz;
            return regeneratorRuntime.wrap(function _callee10$(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    _this15.pager = _.assign({}, _this15.pager, pg); // Save pageSize

                    if (_this15.meta) {
                      pgsz = _.get(pg, "pgsz");

                      if (!Ti.Util.isNil(pgsz)) {
                        Ti.Storage.session.setObject(_this15.meta.id, {
                          pgsz: pgsz
                        });
                      }
                    }

                    _context10.next = 4;
                    return _this15.reloadVideos();

                  case 4:
                  case "end":
                    return _context10.stop();
                }
              }
            }, _callee10);
          }))();
        },
        //---------------------------------------------------
        OnListSelect: function OnListSelect(_ref12) {
          var _this16 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
            var currentId, checkedIds, checked;
            return regeneratorRuntime.wrap(function _callee11$(_context11) {
              while (1) {
                switch (_context11.prev = _context11.next) {
                  case 0:
                    currentId = _ref12.currentId, checkedIds = _ref12.checkedIds, checked = _ref12.checked;
                    _this16.myCurrentId = currentId; // Select some thing

                    if (!currentId) {
                      _context11.next = 9;
                      break;
                    }

                    _context11.next = 5;
                    return _this16.reloadVideoInfo(currentId);

                  case 5:
                    _this16.myCurrentVideo = _context11.sent;

                    _this16.$notify("change", {
                      currentId: _this16.myCurrentId,
                      current: _this16.myCurrentVideo,
                      checkedIds: checkedIds,
                      checked: checked
                    });

                    _context11.next = 11;
                    break;

                  case 9:
                    _this16.myCurrentVideo = null;

                    _this16.$notify("change", undefined);

                  case 11:
                  case "end":
                    return _context11.stop();
                }
              }
            }, _callee11);
          }))();
        },
        //---------------------------------------------------
        OnVideoPreview: function OnVideoPreview() {
          var _arguments2 = arguments,
              _this17 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
            var _ref13, title, videoId, coverURL, playAuth;

            return regeneratorRuntime.wrap(function _callee12$(_context12) {
              while (1) {
                switch (_context12.prev = _context12.next) {
                  case 0:
                    _ref13 = _arguments2.length > 0 && _arguments2[0] !== undefined ? _arguments2[0] : {}, title = _ref13.title, videoId = _ref13.videoId, coverURL = _ref13.coverURL;
                    _context12.next = 3;
                    return _this17.requestPlayAuth(videoId);

                  case 3:
                    playAuth = _context12.sent;
                    _context12.next = 6;
                    return Ti.App.Open({
                      icon: "zmdi-tv-alt-play",
                      title: "Preview: ".concat(title),
                      textOk: null,
                      textCancel: "i18n:close",
                      position: "top",
                      width: "90%",
                      height: "90%",
                      comType: "NetAliyunVodVideoPlayer",
                      comConf: {
                        videoId: videoId,
                        playAuth: playAuth,
                        coverUrl: coverURL
                      },
                      components: "@com:net/aliyun/vod/video/player"
                    });

                  case 6:
                  case "end":
                    return _context12.stop();
                }
              }
            }, _callee12);
          }))();
        },
        //---------------------------------------------------
        requestPlayAuth: function requestPlayAuth(videoId) {
          var _this18 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
            var cmds, reo;
            return regeneratorRuntime.wrap(function _callee13$(_context13) {
              while (1) {
                switch (_context13.prev = _context13.next) {
                  case 0:
                    _this18.reloading = true;
                    cmds = [_this18.CmdPrefix, "playauth", videoId, "-cqn"];
                    _context13.next = 4;
                    return Wn.Sys.exec2(cmds.join(" "), {
                      as: "json"
                    });

                  case 4:
                    reo = _context13.sent;
                    _this18.reloading = false;
                    return _context13.abrupt("return", reo.playAuth);

                  case 7:
                  case "end":
                    return _context13.stop();
                }
              }
            }, _callee13);
          }))();
        },
        //---------------------------------------------------
        reloadVideoInfo: function reloadVideoInfo(videoId) {
          var _this19 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
            var cmds, reo;
            return regeneratorRuntime.wrap(function _callee14$(_context14) {
              while (1) {
                switch (_context14.prev = _context14.next) {
                  case 0:
                    _this19.reloading = true;
                    cmds = [_this19.CmdPrefix, "video", videoId, "-cqn"];
                    _context14.next = 4;
                    return Wn.Sys.exec2(cmds.join(" "), {
                      as: "json"
                    });

                  case 4:
                    reo = _context14.sent;
                    _this19.reloading = false;
                    return _context14.abrupt("return", reo);

                  case 7:
                  case "end":
                    return _context14.stop();
                }
              }
            }, _callee14);
          }))();
        },
        //---------------------------------------------------
        toAliyunTime: function toAliyunTime(tm) {
          return;
        },
        //---------------------------------------------------
        toMatchStr: function toMatchStr(keyword) {
          var match = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var ss = [];

          if (!Ti.S.isBlank(keyword)) {
            // ID
            if (/^[a-z0-9]{32}$/.test(keyword)) {
              ss.push("VideoId = '".concat(keyword, "'"));
            } // Title
            else {
                ss.push("Title in ('".concat(keyword.replace(/'/g, ""), "')"));
              }
          } // March


          _.forEach(match, function (val, key) {
            if (Ti.Util.isNil(val)) {
              return;
            } //......................................
            // Region


            if (_.isString(val) && /^[\[(].+[)\]]$/.test(val)) {
              ss.push("".concat(key, "=").concat(val));
            } //......................................
            // Time
            else if (/time/i.test(key)) {
                var tfmt = "yyyy-MM-dd'T'HH:mm:ss'Z'";
                var times = Ti.Types.formatDateTime(val, tfmt);
                times = _.concat(times); // All day

                if (times.length == 1) {
                  times.push(times[0]);
                } // Move the last date


                var lastDay = Ti.Types.toDate(times[1]).getTime() + 86400000;
                times[1] = Ti.Types.formatDateTime(lastDay, tfmt); // Add scope

                ss.push("".concat(key, "=['").concat(times[0], "', '").concat(times[1], "')"));
              } //......................................
              // In list
              else if (_.isArray(val)) {
                  var vv = _.map(val, function (v) {
                    if (_.isString(v)) return v.replace(/'/g, "");
                    return v;
                  });

                  ss.push("".concat(key, " in (").concat(vv.join(","), ")"));
                } //......................................
                // String
                else if (_.isString(val)) {
                    ss.push("".concat(key, " in ('").concat(val.replace(/'/g, ""), "')"));
                  } //......................................
                  // Others
                  else {
                      ss.push("".concat(key, " = ").concat(val));
                    }
          });

          return ss.join(" and ");
        },
        //---------------------------------------------------
        reloadVideos: function reloadVideos() {
          var _this20 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
            var cmds, keyword, match, sort, reo;
            return regeneratorRuntime.wrap(function _callee15$(_context15) {
              while (1) {
                switch (_context15.prev = _context15.next) {
                  case 0:
                    _this20.reloading = true; // prepare the command

                    cmds = [_this20.CmdPrefix]; //.................................................

                    cmds.push("search", "-fields", "'".concat(_this20.fields, "'")); //.................................................
                    // Join the Filter: Match/keyword

                    keyword = _.get(_this20.myFilter, "keyword");
                    match = _.get(_this20.myFilter, "match");

                    if (!_.isEmpty(match) || !Ti.Util.isNil(keyword)) {
                      try {
                        cmds.push("-match", "\"".concat(_this20.toMatchStr(keyword, match), "\""));
                      } catch (E) {
                        console.error(E);
                      }
                    } //.................................................
                    // Join the Filter: Sort


                    sort = [];

                    _.forEach(_this20.mySort, function (as, by) {
                      sort.push("".concat(by, ":").concat(as > 0 ? 'ASC' : 'DESC'));
                    });

                    if (!_.isEmpty(sort)) {
                      cmds.push("-sort ", "".concat(sort.join(" ")));
                    } //.................................................
                    // Join paging


                    cmds.push("-pn", _this20.ThePageNumber);
                    cmds.push("-pgsz", _this20.ThePageSize);
                    cmds.push("-as page -cqn"); //console.log("reloadVideo", cmds.join(' '))
                    //.................................................
                    // Run

                    _context15.next = 14;
                    return Wn.Sys.exec2(cmds.join(" "), {
                      as: "json"
                    });

                  case 14:
                    reo = _context15.sent;
                    _this20.list = reo.list;
                    _this20.pager = reo.pager;
                    _this20.scrollToken = reo.scrollToken; // Mark

                    _this20.reloading = false;

                  case 19:
                  case "end":
                    return _context15.stop();
                }
              }
            }, _callee15);
          }))();
        } //---------------------------------------------------

      },
      ///////////////////////////////////////////////////////
      mounted: function mounted() {
        if (this.meta) {
          var pager = Ti.Storage.session.getObject(this.meta.id);

          if (pager) {
            var pgsz = _.get(pager, "pgsz");

            this.pager.pgsz = pgsz;
          }
        }

        this.reloadVideos();
      } ///////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/net/aliyun/vod/manager/vod-manager.mjs", _M);
  })(); //============================================================
  // JOIN: net/aliyun/vod/manager/_com.json
  //============================================================


  Ti.Preload("ti/com/net/aliyun/vod/manager/_com.json", {
    "name": "net-aliyun-vod-manager",
    "globally": true,
    "template": "./vod-manager.html",
    "mixins": ["./vod-manager.mjs"],
    "components": ["@com:ti/wall", "@com:ti/combo/filter", "@com:ti/combo/sorter", "@com:ti/paging/jumper", "@com:net/aliyun/vod/video/info"]
  }); //============================================================
  // JOIN: net/aliyun/vod/video/info/vod-video-info.html
  //============================================================

  Ti.Preload("ti/com/net/aliyun/vod/video/info/vod-video-info.html", "<div class=\"net-aliyun-vod-video-info\"\n  :class=\"TopClass\">\n  <!--\n    Blank\n  -->\n  <ti-loading\n    v-if=\"!hasVideo\"\n      class=\"as-big\"\n      icon=\"fas-hand-point-left\"\n      text=\"i18n:net-vod-video-nil\"/>\n  <!--\n    Show Content\n  -->\n  <template v-else>\n    <!--Preview-->\n    <div class=\"as-preview\">\n      <img \n        class=\"ti-fill-parent\"\n        :src=\"VideoCoverURL\"/>\n      <div class=\"as-btn\" @click.left=\"OnClickPreview\">\n        <i class=\"fas fa-play-circle\"></i>\n      </div>\n    </div>\n    <!--\n      Detail info\n    -->\n    <div class=\"as-detail\">\n      <ti-form\n        class=\"ti-cover-parent\"\n        spacing=\"tiny\"\n        :fields=\"FormFields\"\n        :data=\"value\"/>\n    </div>\n  </template>\n</div>"); //============================================================
  // JOIN: net/aliyun/vod/video/info/vod-video-info.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////////////////
      props: {
        "value": {
          type: Object,
          "default": undefined
        }
      },
      ///////////////////////////////////////////////////////
      computed: {
        //---------------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //---------------------------------------------------
        hasVideo: function hasVideo() {
          return this.value ? true : false;
        },
        //---------------------------------------------------
        VideoCoverURL: function VideoCoverURL() {
          return _.get(this.value, "coverURL");
        },
        //---------------------------------------------------
        FormFields: function FormFields() {
          return [{
            title: "VideoID",
            name: "videoId"
          }, {
            title: "Title",
            name: "title"
          }, {
            title: "CateName",
            name: "cateName"
          }, {
            title: "Description",
            name: "description"
          }, {
            title: "Duration",
            name: "duration"
          }, {
            title: "RegionId",
            name: "regionId"
          }, {
            title: "Size",
            name: "size"
          }, {
            title: "Status",
            name: "status"
          }, {
            title: "Tags",
            name: "tags" // }, {
            //   title : "AuditStatus",
            //   name  : "auditStatus"
            // }, {
            //   title : "DownloadSwitch",
            //   name  : "downloadSwitch"
            // }, {
            //   title : "PreprocessStatus",
            //   name  : "preprocessStatus"

          }, {
            title: "CreateTime",
            name: "createTime"
          }, {
            title: "ModifyTime",
            name: "modifyTime"
          }];
        } //---------------------------------------------------

      },
      ///////////////////////////////////////////////////////
      methods: {
        //---------------------------------------------------
        OnClickPreview: function OnClickPreview() {
          this.$notify("preview", this.value);
        } //---------------------------------------------------

      } ///////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/net/aliyun/vod/video/info/vod-video-info.mjs", _M);
  })(); //============================================================
  // JOIN: net/aliyun/vod/video/info/_com.json
  //============================================================


  Ti.Preload("ti/com/net/aliyun/vod/video/info/_com.json", {
    "name": "NetAliyunVodVideoInfo",
    "globally": true,
    "template": "./vod-video-info.html",
    "mixins": ["./vod-video-info.mjs"],
    "components": ["@com:ti/form"]
  }); //============================================================
  // JOIN: net/aliyun/vod/video/player/vod-video-player.html
  //============================================================

  Ti.Preload("ti/com/net/aliyun/vod/video/player/vod-video-player.html", "<div class=\"net-vod-video-player\"\n  :class=\"TopClass\">\n  <div :id=\"PlayerID\"></div>\n</div>"); //============================================================
  // JOIN: net/aliyun/vod/video/player/vod-video-player.mjs
  //============================================================

  (function () {
    /*
    Aliyun Player JS SDK properties and API:
    https://help.aliyun.com/document_detail/125572.html?spm=a2c4g.11186623.6.1101.19dc1c4cAXr5Cs
    
    Aliyun VOD get play address api:
    https://help.aliyun.com/document_detail/56124.html?spm=a2c4g.11186623.2.31.6c797fbfuEVYDi
    */
    var _M = {
      ///////////////////////////////////////////////////////
      props: {
        "autoplay": {
          type: Boolean,
          "default": false
        },
        "videoId": {
          type: String,
          "default": undefined
        },
        "coverUrl": {
          type: String,
          "default": undefined
        },
        "playAuth": {
          type: String,
          "default": undefined
        },
        "encryptType": {
          type: Number,
          "default": undefined
        },
        "lang": {
          type: String,
          "default": undefined
        },
        "format": {
          type: String,
          "default": "m3u8"
        },
        "definition": {
          type: String,
          "default": "FD,LD,SD,HD,OD,2K,4K"
        },
        "defaultDefinition": {
          type: String,
          "default": "FD"
        }
      },
      ///////////////////////////////////////////////////////
      computed: {
        //---------------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //---------------------------------------------------
        PlayerID: function PlayerID() {
          var n = parseInt(Math.random() * 100000);
          return "ALIPLAYER_".concat(n);
        } //---------------------------------------------------

      },
      ///////////////////////////////////////////////////////
      methods: {
        //---------------------------------------------------
        initPlayer: function initPlayer() {
          if (!this.$player && this.playAuth && this.videoId && this.coverUrl) {
            // console.log("haha", {
            //   playAuth: this.playAuth,
            //   videoId: this.videoId,
            //   coverUrl: this.coverUrl
            // })
            var lang = this.lang || Ti.Config.lang();
            this.$player = new Aliplayer({
              id: this.PlayerID,
              width: "100%",
              height: "100%",
              autoplay: this.autoplay,
              useH5Prism: true,
              format: this.format,
              definition: this.definition,
              defaultDefinition: this.defaultDefinition,
              language: lang,
              vid: this.videoId,
              cover: this.coverUrl,
              encryptType: this.encryptType,
              playauth: this.playAuth
            });
          }
        } //---------------------------------------------------

      },
      ///////////////////////////////////////////////////////
      watch: {// "playAuth": function() {
        //   this.$nextTick(()=>this.initPlayer())
        // },
        // "videoId": function() {
        //   this.$nextTick(()=>this.initPlayer())
        // },
        // "coverUrl": function() {
        //   this.$nextTick(()=>this.initPlayer())
        // }
      },
      ///////////////////////////////////////////////////////
      mounted: function mounted() {
        this.initPlayer();
      },
      ///////////////////////////////////////////////////////
      beforeDestroy: function beforeDestroy() {
        if (this.$player) {
          this.$player.dispose();
        }
      } ///////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/net/aliyun/vod/video/player/vod-video-player.mjs", _M);
  })(); //============================================================
  // JOIN: net/aliyun/vod/video/player/_com.json
  //============================================================


  Ti.Preload("ti/com/net/aliyun/vod/video/player/_com.json", {
    "name": "NetAliyunVodVideoPlayer",
    "globally": true,
    "template": "./vod-video-player.html",
    "mixins": ["./vod-video-player.mjs"],
    "components": []
  }); //============================================================
  // JOIN: ti/actionbar/com/bar-item-action/bar-item-action.html
  //============================================================

  Ti.Preload("ti/com/ti/actionbar/com/bar-item-action/bar-item-action.html", "<div class=\"bar-item-action\">\n  <bar-item-info\n    v-bind=\"this\"\n    @fire=\"OnFired\"/>\n</div>"); //============================================================
  // JOIN: ti/actionbar/com/bar-item-action/bar-item-action.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////
      inject: ["$bar"],
      ///////////////////////////////////////
      props: {
        //-----------------------------------
        // Same as <bar-item-info>
        //-----------------------------------
        "name": {
          type: String,
          "default": undefined
        },
        "icon": {
          type: String,
          "default": undefined
        },
        "hideIcon": {
          type: Boolean,
          "default": false
        },
        "text": {
          type: String,
          "default": undefined
        },
        "tip": {
          type: String,
          "default": undefined
        },
        "altDisplay": {
          type: [Object, Array],
          "default": function _default() {
            return [];
          }
        },
        "enabled": {
          type: [String, Array, Object],
          "default": undefined
        },
        "disabled": {
          type: [String, Array, Object],
          "default": undefined
        },
        "highlight": {
          type: [String, Array, Object],
          "default": undefined
        },
        "value": {
          type: [Boolean, String, Number, Array],
          "default": true
        },
        "depth": {
          type: Number,
          "default": 0
        },
        "status": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        //-----------------------------------
        // Self Props
        //-----------------------------------
        "action": {
          type: [String, Object, Function],
          "default": undefined
        },
        "notify": {
          type: [Boolean, String],
          "default": false
        },
        "wait": {
          type: Number,
          "default": 0
        },
        "shortcut": {
          type: String,
          "default": undefined
        }
      },
      ///////////////////////////////////////
      computed: {
        notifyName: function notifyName() {
          if (this.notify) {
            return _.isString(this.notify) ? this.notify : this.name;
          }
        },
        TheAction: function TheAction() {
          if (_.isFunction(this.action) && this.wait > 0) {
            return _.debounce(this.action, this.wait, {
              leading: true
            });
          }

          return this.action;
        }
      },
      ///////////////////////////////////////
      methods: {
        OnFired: function OnFired(val) {
          // Call Action
          if (this.action) {
            var app = Ti.App(this);
            var invoking = Ti.Shortcut.genActionInvoking(this.TheAction, {
              $com: this.$bar.$parent,
              argContext: app.$state()
            }); // Invoke it

            invoking();
          } // notify


          if (this.notifyName) {
            this.$bar.notifyChange({
              name: this.notifyName,
              value: val
            });
          }
        }
      },
      ///////////////////////////////////////
      mounted: function mounted() {
        var _this21 = this;

        if (this.shortcut) {
          Ti.App(this).guardShortcut(this, this.shortcut, function () {
            return _this21.isEnabled;
          });
        }
      },
      ///////////////////////////////////////
      destroyed: function destroyed() {
        if (this.shortcut) {
          Ti.App(this).pulloutShortcut(this);
        }
      } ///////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/actionbar/com/bar-item-action/bar-item-action.mjs", _M);
  })(); //============================================================
  // JOIN: ti/actionbar/com/bar-item-action/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/actionbar/com/bar-item-action/_com.json", {
    "name": "bar-item-action",
    "template": "./bar-item-action.html",
    "mixins": ["./bar-item-action.mjs"]
  }); //============================================================
  // JOIN: ti/actionbar/com/bar-item-group/bar-item-group.html
  //============================================================

  Ti.Preload("ti/com/ti/actionbar/com/bar-item-group/bar-item-group.html", "<div class=\"bar-item-group\"\n  :class=\"TopClass\"\n  @mouseenter.stop=\"OnMouseEnter\"\n  @mouseleave.stop=\"OnMouseLeave\">\n  <!--\n    Info\n  -->\n  <bar-item-info\n    v-if=\"hasInfo\"\n      v-bind=\"this\"\n      :value=\"collapse\"\n      :status=\"status\"\n      :suffix-icon=\"ItemSuffixIcon\"\n      @fire=\"OnFired\"/>\n  <!--\n    Group Children\n  -->\n  <template v-if=\"showChildren\">\n    <div v-if=\"isDepth1\"\n      class=\"as-mask\"\n      @click=\"doCollapse\"></div>\n    <div ref=\"children\"\n      v-if=\"showChildren\"\n        class=\"as-children\"\n        :style=\"ChildrenStyle\"\n        @click.left=\"doCollapse\">\n          <component \n            v-for=\"bi in items\"\n              :key=\"bi.key\"\n              :is=\"bi.comType\"\n              v-bind=\"bi.comConf\"\n              :depth=\"depth+1\"\n              :items=\"bi.items\"\n              :hide-icon=\"isChildrenWithoutIcon\"\n              :status=\"status\"/>\n    </div>\n  </template>\n</div>"); //============================================================
  // JOIN: ti/actionbar/com/bar-item-group/bar-item-group.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////
      inject: ["$bar"],
      ///////////////////////////////////////////
      provide: function provide() {
        return {
          depth: this.depth + 1
        };
      },
      ///////////////////////////////////////
      data: function data() {
        return {
          collapse: true,
          isDocked: false,
          barItems: []
        };
      },
      ///////////////////////////////////////
      props: {
        //-----------------------------------
        // Same as <bar-item-info>
        //-----------------------------------
        "name": {
          type: String,
          "default": undefined
        },
        "icon": {
          type: String,
          "default": undefined
        },
        "hideIcon": {
          type: Boolean,
          "default": false
        },
        "text": {
          type: String,
          "default": undefined
        },
        "tip": {
          type: String,
          "default": undefined
        },
        "altDisplay": {
          type: [Object, Array],
          "default": function _default() {
            return [];
          }
        },
        "enabled": {
          type: [String, Array, Object],
          "default": undefined
        },
        "disabled": {
          type: [String, Array, Object],
          "default": undefined
        },
        "highlight": {
          type: [String, Array, Object],
          "default": undefined
        },
        "depth": {
          type: Number,
          "default": 0
        },
        "status": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        //-----------------------------------
        // Self Props
        //-----------------------------------
        "items": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "autoExtend": {
          type: Boolean,
          "default": false
        }
      },
      ///////////////////////////////////////////
      computed: {
        //---------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass({
            "is-collapse": this.collapse,
            "is-extended": !this.collapse,
            "is-depth-x": this.isDepthX
          }, "is-depth-".concat(this.depth));
        },
        //---------------------------------------
        isDepth0: function isDepth0() {
          return 0 == this.depth;
        },
        isDepth1: function isDepth1() {
          return 1 == this.depth;
        },
        isDepthX: function isDepthX() {
          return this.depth > 1;
        },
        //---------------------------------------
        hasInfo: function hasInfo() {
          return this.icon || this.text;
        },
        //---------------------------------------
        isChildrenWithoutIcon: function isChildrenWithoutIcon() {
          var _iterator3 = _createForOfIteratorHelper(this.items),
              _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var it = _step3.value;

              if (it.comConf && it.comConf.icon) {
                return false;
              }
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }

          return true;
        },
        //---------------------------------------
        showChildren: function showChildren() {
          return this.isDepth0 || !this.collapse;
        },
        //---------------------------------------
        ItemSuffixIcon: function ItemSuffixIcon() {
          if (this.isDepthX) {
            return "im-angle-right";
          }
        },
        //---------------------------------------
        ChildrenStyle: function ChildrenStyle() {
          if (!this.isDepth0) {
            if (!this.isDocked) {
              return {
                "visibility": "hidden"
              };
            }
          }
        } //---------------------------------------

      },
      ///////////////////////////////////////////
      methods: {
        //---------------------------------------
        OnMouseEnter: function OnMouseEnter() {
          if (this.isDepthX) {
            this.doExtend();
          }
        },
        //---------------------------------------
        OnMouseLeave: function OnMouseLeave() {
          if (this.isDepthX) {
            this.doCollapse();
          }
        },
        //---------------------------------------
        OnFired: function OnFired(collapse) {
          if (collapse) {
            this.doExtend();
          } else {
            this.doCollapse();
          }
        },
        //---------------------------------------
        doExtend: function doExtend() {
          this.collapse = false; //this.$bar.notifyChange({name:this.name, value:true})
        },
        //---------------------------------------
        doCollapse: function doCollapse() {
          this.collapse = true;
          this.isDocked = false; //this.$bar.notifyChange({name:this.name, value:false})
        },
        //---------------------------------------
        doDockChildren: function doDockChildren() {
          var _this22 = this;

          this.$nextTick(function () {
            if (_this22.$refs.children && _this22.depth > 0) {
              Ti.Dom.dockTo(_this22.$refs.children, _this22.$el, {
                mode: _this22.isDepthX ? "V" : "H",
                position: "fixed",
                space: _this22.isDepthX ? {
                  x: -1
                } : {
                  y: 3
                }
              });

              _.delay(function () {
                _this22.isDocked = true;
              }, 5);
            }
          });
        } //---------------------------------------

      },
      ///////////////////////////////////////////
      watch: {
        "collapse": "doDockChildren"
      },
      ///////////////////////////////////////////
      mounted: function mounted() {
        this.doDockChildren();
        this.$bar.allocGroup(this);
      },
      ///////////////////////////////////////////
      beforeDestroy: function beforeDestroy() {
        this.$bar.freeGroup(this);
      } ///////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/actionbar/com/bar-item-group/bar-item-group.mjs", _M);
  })(); //============================================================
  // JOIN: ti/actionbar/com/bar-item-group/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/actionbar/com/bar-item-group/_com.json", {
    "name": "bar-item-group",
    "template": "./bar-item-group.html",
    "mixins": ["./bar-item-group.mjs"]
  }); //============================================================
  // JOIN: ti/actionbar/com/bar-item-info/bar-item-info.html
  //============================================================

  Ti.Preload("ti/com/ti/actionbar/com/bar-item-info/bar-item-info.html", "<div class=\"bar-item-info\"\n  :class=\"TopClass\"\n  @click.left=\"OnClickTop\">\n  <!--\n    Icon\n  -->\n  <span\n    v-if=\"isShowIcon\"\n      class=\"as-icon\">\n      <ti-icon\n        v-if=\"hasIcon\" \n          :value=\"CurrentDisplay.icon\"/>\n  </span>\n  <!--\n    Text\n  -->\n  <span\n    v-if=\"CurrentDisplay.text\"\n      class=\"as-text\"\n        >{{CurrentDisplay.text|i18n}}</span>\n  <!--\n    Suffix Icon\n  -->\n  <span\n    v-if=\"suffixIcon\"\n      class=\"as-suffix-icon\"><ti-icon :value=\"suffixIcon\"/></span>\n  <!--\n    Shortcut\n  -->\n  <span\n    v-else-if=\"isShowShortcut\"\n      class=\"as-shortcut\">{{shortcut}}</span>\n</div>"); //============================================================
  // JOIN: ti/actionbar/com/bar-item-info/bar-item-info.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////
      inject: ["$bar"],
      ///////////////////////////////////////
      props: {
        "name": {
          type: String,
          "default": undefined
        },
        "icon": {
          type: String,
          "default": undefined
        },
        "hideIcon": {
          type: Boolean,
          "default": false
        },
        "text": {
          type: String,
          "default": undefined
        },
        "tip": {
          type: String,
          "default": undefined
        },
        "shortcut": {
          type: String,
          "default": undefined
        },
        "suffixIcon": {
          type: String,
          "default": undefined
        },
        "altDisplay": {
          type: [Object, Array],
          "default": function _default() {
            return [];
          }
        },
        "enabled": {
          type: [Boolean, String, Array, Object],
          "default": undefined
        },
        "disabled": {
          type: [Boolean, String, Array, Object],
          "default": undefined
        },
        "highlight": {
          type: [Boolean, String, Array, Object],
          "default": undefined
        },
        "value": {
          type: [Boolean, String, Number, Array],
          "default": undefined
        },
        "depth": {
          type: Number,
          "default": 0
        },
        "status": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      ///////////////////////////////////////
      computed: {
        //-----------------------------------
        TopClass: function TopClass() {
          return this.getTopClass({
            "is-enabled": this.isEnabled,
            "is-disabled": this.isDisabled,
            "is-highlight": this.isHighlight,
            "is-top": this.depth == 1,
            "is-sub": this.depth > 1,
            "has-icon": this.icon ? true : false,
            "no-icon": this.icon ? false : true,
            "show-icon": this.isShowIcon,
            "hide-icon": !this.isShowIcon
          }, "is-depth-".concat(this.depth));
        },
        //-----------------------------------
        AltDisplay: function AltDisplay() {
          if (_.isArray(this.altDisplay)) {
            return this.altDisplay;
          }

          return this.altDisplay ? [this.altDisplay] : [];
        },
        //-----------------------------------
        isEnabled: function isEnabled() {
          if (!Ti.Util.isNil(this.enabled)) {
            return this.isMatchStatus(this.enabled);
          }

          if (!Ti.Util.isNil(this.disabled)) {
            if (this.isMatchStatus(this.disabled)) {
              return false;
            }
          }

          return true;
        },
        //-----------------------------------
        isDisabled: function isDisabled() {
          return !this.isEnabled;
        },
        //-----------------------------------
        isHighlight: function isHighlight() {
          if (!Ti.Util.isNil(this.highlight)) {
            return this.isMatchStatus(this.highlight);
          }

          return false;
        },
        //-----------------------------------
        isShowShortcut: function isShowShortcut() {
          return this.shortcut && this.depth > 1;
        },
        //-----------------------------------
        isShowIcon: function isShowIcon() {
          return !this.hideIcon || this.hasIcon;
        },
        //-----------------------------------
        hasIcon: function hasIcon() {
          return this.CurrentDisplay.icon ? true : false;
        },
        //-----------------------------------
        CurrentDisplay: function CurrentDisplay() {
          // if("bold" == this.name)
          //   console.log("CurrentDisplay", this.name)
          // Prepare default
          var dis = {
            icon: this.icon,
            text: this.text,
            tip: this.tip,
            value: this.value
          }; // Alt Display

          if (!_.isEmpty(this.AltDisplay)) {
            var _iterator4 = _createForOfIteratorHelper(this.AltDisplay),
                _step4;

            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var alt = _step4.value;
                var mat = alt.match || this.name;

                if (this.isMatchStatus(mat)) {
                  _.assign(dis, _.pick(alt, ["icon", "text", "tip", "value"]));

                  break;
                }
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }
          } // Done


          return dis;
        },
        //-----------------------------------
        TheValues: function TheValues() {
          var val = this.CurrentDisplay.value; // Bool

          if (_.isBoolean(val)) {
            return [val, !val];
          } // Array


          if (_.isArray(val)) return val; // Normal value

          return [val];
        } //-----------------------------------

      },
      ///////////////////////////////////////
      methods: {
        //---------------------------------------
        OnClickTop: function OnClickTop() {
          if (!this.isDisabled) {
            var val = this.isHighlight ? _.last(this.TheValues) : _.first(this.TheValues);
            this.$emit('fire', val);
          }
        },
        //---------------------------------------
        isMatchStatus: function isMatchStatus(mat) {
          if (_.isBoolean(mat)) {
            return mat;
          } // Key | `"saving"`


          if (_.isString(mat)) {
            return _.get(this.status, mat) ? true : false;
          } // KeySet | `["saving","changed"]`
          else if (_.isArray(mat)) {
              var _iterator5 = _createForOfIteratorHelper(mat),
                  _step5;

              try {
                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                  var k = _step5.value;

                  if (!_.get(this.status, k)) {
                    return false;
                  }
                }
              } catch (err) {
                _iterator5.e(err);
              } finally {
                _iterator5.f();
              }

              return true;
            } // Complex match
            else if (_.isPlainObject(mat)) {
                // Validate | `{validate:{..}}`
                if (mat.validate) {
                  return Ti.Validate.match(this.status, mat.validate);
                } // Match  | `{saving:true}`


                return _.isMatch(this.status, mat);
              }

          return false;
        } //---------------------------------------

      } ///////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/actionbar/com/bar-item-info/bar-item-info.mjs", _M);
  })(); //============================================================
  // JOIN: ti/actionbar/com/bar-item-info/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/actionbar/com/bar-item-info/_com.json", {
    "name": "bar-item-info",
    "template": "./bar-item-info.html",
    "mixins": ["./bar-item-info.mjs"]
  }); //============================================================
  // JOIN: ti/actionbar/com/bar-item-line/bar-item-line.html
  //============================================================

  Ti.Preload("ti/com/ti/actionbar/com/bar-item-line/bar-item-line.html", "<div class=\"bar-item-line\"\n  :class=\"TopClass\"></div>"); //============================================================
  // JOIN: ti/actionbar/com/bar-item-line/bar-item-line.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////
      inject: ["$bar"],
      ///////////////////////////////////////
      props: {
        "depth": {
          type: Number,
          "default": 0
        }
      },
      ///////////////////////////////////////
      computed: {
        //-----------------------------------
        TopClass: function TopClass() {
          return this.getTopClass({
            "is-top": this.depth == 1,
            "is-sub": this.depth > 1
          });
        } //-----------------------------------

      } ///////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/actionbar/com/bar-item-line/bar-item-line.mjs", _M);
  })(); //============================================================
  // JOIN: ti/actionbar/com/bar-item-line/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/actionbar/com/bar-item-line/_com.json", {
    "name": "bar-item-line",
    "template": "./bar-item-line.html",
    "mixins": ["./bar-item-line.mjs"]
  }); //============================================================
  // JOIN: ti/actionbar/ti-actionbar.html
  //============================================================

  Ti.Preload("ti/com/ti/actionbar/ti-actionbar.html", "<div class=\"ti-actionbar\"\n  :class=\"TopClass\"\n  v-ti-activable>\n  <bar-item-group \n    name=\"Ti_ActionBar_Root_Group\"\n    :items=\"BarItems\"\n    :status=\"status\"/>\n</div>"); //============================================================
  // JOIN: ti/actionbar/ti-actionbar.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////
      provide: function provide() {
        return {
          "$bar": this,
          "depth": 0
        };
      },
      ///////////////////////////////////////////
      data: function data() {
        return {
          mySeq: 0,
          myGroups: {}
        };
      },
      ///////////////////////////////////////////
      props: {
        "items": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "align": {
          type: String,
          "default": "left",
          validator: function validator(v) {
            return /^(left|right|center)$/.test(v);
          }
        },
        "status": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      ///////////////////////////////////////////
      computed: {
        //---------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass("align-".concat(this.align));
        },
        //---------------------------------------
        BarItems: function BarItems() {
          var _this23 = this;

          //console.log("EvalBarItems")
          var list = [];

          _.forEach(this.items, function (it) {
            var bi = _this23.evalBarItem(it);

            if (bi) {
              list.push(bi);
            }
          });

          return list;
        } //---------------------------------------

      },
      ///////////////////////////////////////////
      methods: {
        //---------------------------------------
        allocGroup: function allocGroup($big) {
          //console.log("allocGroup", $big.name)
          this.myGroups[$big.name] = $big;
        },
        //---------------------------------------
        freeGroup: function freeGroup($big) {
          //console.log("freeGroup", $big.name)
          delete this.myGroups[$big.name];
        },
        //---------------------------------------
        notifyChange: function notifyChange() {
          var _ref14 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              name = _ref14.name,
              value = _ref14.value;

          if (name) {
            this.$notify("change", {
              name: name,
              value: value
            });
          }
        },
        //---------------------------------------
        evalBarItem: function evalBarItem(it) {
          var type = this.getItemType(it);
          var key = this.getItemKey(type);
          var bi = {
            type: type,
            key: key,
            comType: "bar-item-".concat(type),
            comConf: _.defaults(_.omit(it, "items"), {
              name: key
            })
          };

          if ("group" == type && _.isArray(it.items)) {
            bi.items = [];

            var _iterator6 = _createForOfIteratorHelper(it.items),
                _step6;

            try {
              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                var child = _step6.value;
                var ci = this.evalBarItem(child);
                bi.items.push(ci);
              }
            } catch (err) {
              _iterator6.e(err);
            } finally {
              _iterator6.f();
            }
          }

          return bi;
        },
        //---------------------------------------
        getItemType: function getItemType(bi) {
          if (bi.type) {
            return _.toLower(bi.type);
          } // Line


          if (_.isEmpty(bi)) {
            return "line";
          } // Group
          else if (_.isArray(bi.items)) {
              return "group";
            } // TODO support switcher
          // Default is action


          return "action";
        },
        //---------------------------------------
        getItemKey: function getItemKey() {
          var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "BarItem";
          return "".concat(type, "-").concat(this.mySeq++);
        },
        //---------------------------------------
        collapseAllGroup: function collapseAllGroup() {
          _.forEach(this.myGroups, function ($big) {
            $big.doCollapse();
          });
        },
        //---------------------------------------
        __ti_shortcut: function __ti_shortcut(uniqKey) {
          var _this24 = this;

          Ti.InvokeBy({
            "ESCAPE": function ESCAPE() {
              return _this24.collapseAllGroup();
            }
          }, uniqKey);
        } //---------------------------------------

      },
      ///////////////////////////////////////////
      mounted: function mounted() {
        var _this25 = this;

        Ti.Viewport.watch(this, {
          resize: function resize() {
            return _this25.collapseAllGroup();
          }
        });
      },
      ///////////////////////////////////////////
      beforeDestroy: function beforeDestroy() {
        Ti.Viewport.unwatch(this);
      } ///////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/actionbar/ti-actionbar.mjs", _M);
  })(); //============================================================
  // JOIN: ti/actionbar/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/actionbar/_com.json", {
    "name": "ti-actionbar",
    "globally": true,
    "template": "./ti-actionbar.html",
    "mixins": ["./ti-actionbar.mjs"],
    "components": ["./com/bar-item-action", "./com/bar-item-group", "./com/bar-item-line", "./com/bar-item-info"]
  }); //============================================================
  // JOIN: ti/button/ti-button.html
  //============================================================

  Ti.Preload("ti/com/ti/button/ti-button.html", "<div class=\"ti-button\"\n  :class=\"topClass\">\n  <ul>\n    <li v-for=\"it in items\"\n      :key=\"it.name\"\n      :class=\"it.buttonClass\"\n      @click=\"OnClickItem(it)\">\n      <!--\n        Icon\n      -->\n      <ti-icon v-if=\"it.icon\"\n        :value=\"it.icon\"/>\n      <!--\n        Text\n      -->\n      <span v-if=\"it.text\"\n        class=\"it-text\">{{it.text|i18n}}</span>\n    </li>\n  </ul>\n</div>"); //============================================================
  // JOIN: ti/button/ti-button.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      props: {
        "size": {
          type: String,
          "default": "normal",
          validator: function validator(v) {
            return /^(big|normal|small|tiny)$/.test(v);
          }
        },
        // center|top|left|right|bottom|
        // left-top|right-top|bottom-left|bottom-right
        "align": {
          type: String,
          "default": "center"
        },
        "setup": {
          type: [Array, Object],
          "default": function _default() {
            return [];
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //......................................
        topClass: function topClass() {
          return Ti.Css.mergeClassName(["is-".concat(this.size), "at-".concat(this.align)], this.className);
        },
        //......................................
        items: function items() {
          var list = [].concat(this.setup);
          var re = [];

          _.forEach(list, function (li, index) {
            var _it$buttonClass;

            var it = {};
            it.name = li.name || "item-".concat(index);
            it.eventName = li.eventName || it.name;
            it.payload = li.payload;
            it.icon = li.icon;
            it.text = li.text;
            it.disabled = li.disabled;
            it.handler = li.handler;
            it.buttonClass = (_it$buttonClass = {}, _defineProperty(_it$buttonClass, "as-do-".concat(it.name), true), _defineProperty(_it$buttonClass, "is-enabled", !li.disabled ? true : false), _defineProperty(_it$buttonClass, "is-disabled", li.disabled ? true : false), _defineProperty(_it$buttonClass, "is-invert-icon", li.invertIcon ? true : false), _it$buttonClass);
            re.push(it);
          });

          return re;
        } //......................................

      },
      //////////////////////////////////////////
      methods: {
        OnClickItem: function OnClickItem(it) {
          if (!it.disabled) {
            if (_.isFunction(it.handler)) {
              it.handler();
            }

            if (_.isString(it.eventName)) {
              this.$notify(it.eventName, it.payload);
            }
          }
        }
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/button/ti-button.mjs", _M);
  })(); //============================================================
  // JOIN: ti/button/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/button/_com.json", {
    "name": "ti-button",
    "globally": true,
    "template": "./ti-button.html",
    "mixins": ["./ti-button.mjs"],
    "components": []
  }); //============================================================
  // JOIN: ti/calendar/ti-calendar.html
  //============================================================

  Ti.Preload("ti/com/ti/calendar/ti-calendar.html", "<div class=\"ti-calendar\">\n  <!--\n    Heading\n  -->\n  <div class=\"as-head\">\n    <!--\n      Switcher\n    -->\n    <div class=\"as-switcher\" :class=\"switcherClass\">\n      <div class=\"as-title\">\n        <ti-input-month\n          width=\"100%\"\n          height=\".36rem\"\n          icon=\"far-calendar-alt\"\n          :hide-border=\"true\"\n          :value=\"theViewDate\"\n          :text=\"theViewRangeText\"\n          :editable=\"monthEditable\"\n          :begin-year=\"beginYear\"\n          :end-year=\"endYear\"\n          @change=\"onMonthChanged\"/>\n      </div>\n      <div class=\"go-btn to-prev-block\" @click=\"gotoMatrix(-1)\">\n        <ti-icon value=\"zmdi-chevron-left\"/>\n      </div>\n      <div class=\"go-btn go-today\" @click=\"gotoToday\">\n        <span>{{'today'|i18n}}</span>\n      </div>\n      <div class=\"go-btn to-next-block\" @click=\"gotoMatrix(1)\">\n        <ti-icon value=\"zmdi-chevron-right\"/>\n      </div>\n    </div>\n    <!--\n      Change Mode\n      TODO maybe should support mode changing here\n    -->\n    \n  </div>\n  <!--\n    Day cells\n  -->\n  <div class=\"as-matrix-table\">\n    <div v-for=\"matrix in dateMatrixList\"\n      class=\"as-matrix\">\n      <table>\n        <thead>\n          <th v-for=\"wt in weekTitles\">{{wt.title}}</th>\n        </thead>\n        <tbody>\n          <tr v-for=\"row in matrix\">\n            <td v-for=\"cell in row\" :class=\"cell.type\">\n              <slot name=\"cell\">\n                <span class=\"as-date-item\"\n                  @click=\"onClickCell(cell)\">{{cell.text}}</span>\n              </slot>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>"); //============================================================
  // JOIN: ti/calendar/ti-calendar.mjs
  //============================================================

  (function () {
    ///////////////////////////////////////////
    var _M = {
      /////////////////////////////////////////
      data: function data() {
        return {
          "view_date": null
        };
      },
      /////////////////////////////////////////
      props: {
        "value": {
          type: [String, Number, Date, Array],
          "default": null
        },

        /***
         * The value represent a **Date Range**.
         * It must be a Array with two elements, first one is begin date
         * of the range, the last one is the end of the range.
         * Both the two date is includsive of the range.
         * 
         * If the value passed in is not array, It will be taken as 
         * the begin date
         */
        "range": {
          type: Boolean,
          "default": false
        },
        // Which day is first day
        //  0 - Sunday
        //  1 - Monday
        "firstDayInWeek": {
          type: [Number, String],
          // 0, or "Sun" or "Sunday"
          "default": 0
        },

        /***
         * How to decide the matrix end date
         * 
         * - "monthly" : show whole month
         * - "weekly"  : show few weeks defined by `matrixCount`
         */
        "matrixMode": {
          type: String,
          "default": "monthly"
        },

        /***
         * Define the matrix block count by `matrixMode`
         * 
         * - "monthly" - how many calenars should be shown in same time
         * - "weekly"  - how many week should be shown in block
         */
        "matrixCount": {
          type: Number,
          "default": 1
        },
        // true : can write time directly
        "monthEditable": {
          type: Boolean,
          "default": true
        },
        "monthFormat": {
          type: String,
          "default": "yyyy-MM-dd"
        },
        "beginYear": {
          type: [Number, String],
          "default": 1970
        },
        "endYear": {
          type: [Number, String],
          "default": new Date().getFullYear() + 1
        }
      },
      //////////////////////////////////////////
      watch: {
        // If the value changed outside,
        // and if the value our-of-view
        // It should auto switch the viewDate
        "value": function value(newVal, oldVal) {
          if (!_.isEmpty(newVal) && !_.isEqual(newVal, oldVal)) {
            var _ref15;

            var _concat = [].concat(newVal),
                _concat2 = _slicedToArray(_concat, 1),
                v0 = _concat2[0];

            var dt = Ti.Types.toDate(v0);
            var ms = dt.getTime();

            if (!(_ref15 = _).inRange.apply(_ref15, [ms].concat(_toConsumableArray(this.theMatrixRangeInMs)))) {
              this.view_date = null;
            }
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        switcherClass: function switcherClass() {
          if (this.isMonthly && this.matrixCount > 1) {
            return "sz-double";
          }
        },
        //--------------------------------------
        isMonthly: function isMonthly() {
          return "monthly" == this.matrixMode;
        },
        isWeekly: function isWeekly() {
          return "weekly" == this.matrixMode;
        },
        //--------------------------------------
        today: function today() {
          return new Date();
        },
        todayName: function todayName() {
          return Ti.Types.formatDate(this.today, "yyyy-MM-dd");
        },
        //--------------------------------------
        theDate: function theDate() {
          if (_.isArray(this.value)) {
            if (this.value.length > 0) {
              return Ti.Types.toDate(this.value[0]);
            }

            return null;
          }

          return Ti.Types.toDate(this.value, null);
        },
        //--------------------------------------
        theRangeInMs: function theRangeInMs() {
          // Move to 00:00:00
          var dt0 = new Date(this.theDate); // Define the dt1

          var dt1;

          if (_.isArray(this.value) && this.value.length > 1) {
            dt1 = Ti.Types.toDate(this.value[1]);
          } // The End of the Day
          else {
              dt1 = new Date(dt0);
            } // Make the range


          var msRange = [dt0.getTime(), dt1.getTime()].sort(); // dt0 start of the day

          dt0 = Ti.DateTime.setTime(new Date(msRange[0])); // dt1 end of the day

          dt1 = Ti.DateTime.setDayLastTime(new Date(msRange[1])); // rebuild the range

          return [dt0.getTime(), dt1.getTime()];
        },
        //--------------------------------------
        theRangeInText: function theRangeInText() {
          return Ti.Types.formatDate(this.theRangeInMs, "yyyy-MM-dd");
        },
        //--------------------------------------
        theRangeBeginDate: function theRangeBeginDate() {
          return new Date(this.theRangeInMs[0]);
        },
        //--------------------------------------
        theRangeEndDate: function theRangeEndDate() {
          return new Date(this.theRangeInMs[1]);
        },
        //--------------------------------------
        theMatrixRangeInMs: function theMatrixRangeInMs() {
          var c0 = this.dateMatrixList[0][0][0];
          var i = this.dateMatrixList.length - 1;
          var y = this.dateMatrixList[i].length - 1;
          var x = this.dateMatrixList[i][y].length - 1;
          var c1 = this.dateMatrixList[i][y][x];
          var dt0 = new Date(c0.raw);
          var dt1 = new Date(c1.raw);
          Ti.DateTime.setTime(dt0);
          Ti.DateTime.setDayLastTime(dt1);
          return [dt0.getTime(), dt1.getTime()];
        },
        //--------------------------------------
        theMatrixRange: function theMatrixRange() {
          var dt0 = new Date(this.theMatrixRangeInMs[0]);
          var dt1 = new Date(this.theMatrixRangeInMs[1]);
          return [dt0, dt1];
        },
        //--------------------------------------
        theViewRange: function theViewRange() {
          var i = this.dateMatrixList.length - 1;
          var y = this.dateMatrixList[i].length - 1;
          var x = this.dateMatrixList[i][y].length - 1;
          var c1 = this.dateMatrixList[i][y][x];

          while (c1.type != "in-month" && x > 0) {
            c1 = this.dateMatrixList[i][y][--x];
          }

          var dt0 = new Date(this.theViewDate);
          var dt1 = new Date(c1.raw);
          Ti.DateTime.setTime(dt0);
          Ti.DateTime.setDayLastTime(dt1);
          return [dt0, dt1];
        },
        //--------------------------------------
        theViewRangeText: function theViewRangeText() {
          var dt0 = this.theViewRange[0];

          if (this.isMonthly && this.matrixCount > 1) {
            var dt1 = this.theViewRange[1];
            var yy0 = dt0.getFullYear();
            var MM0 = dt0.getMonth();
            var yy1 = dt1.getFullYear();
            var MM1 = dt1.getMonth();
            var abbr0 = Ti.DateTime.getMonthAbbr(MM0);
            var abbr1 = Ti.DateTime.getMonthAbbr(MM1);
            var MT0 = Ti.I18n.get("cal.abbr.".concat(abbr0));
            var MT1 = Ti.I18n.get("cal.abbr.".concat(abbr1));
            MM0++;
            MM1++; // Month change to 1 base

            var vars = {
              yy0: yy0,
              yy1: yy1,
              MM0: MM0,
              MM1: MM1,
              MT0: MT0,
              MT1: MT1
            }; // Beyound year

            if (yy0 != yy1) {
              return Ti.I18n.getf("cal.m-range-beyond-years", vars);
            } // Beyound month


            if (MM0 != MM1) {
              return Ti.I18n.getf("cal.m-range-beyond-months", vars);
            }
          }

          return Ti.Types.formatDate(dt0, this.monthFormat);
        },
        //--------------------------------------
        theDateName: function theDateName() {
          return Ti.Types.formatDate(this.theDate, "yyyy-MM-dd");
        },
        //--------------------------------------
        theViewDate: function theViewDate() {
          return this.view_date || this.theDate || new Date();
        },
        //--------------------------------------
        theViewYear: function theViewYear() {
          return this.theViewDate.getFullYear();
        },
        //--------------------------------------
        theViewMonth: function theViewMonth() {
          return this.theViewDate.getMonth();
        },
        theViewMonthAbbr: function theViewMonthAbbr() {
          return Ti.DateTime.getMonthAbbr(this.theViewMonth);
        },
        //--------------------------------------
        weekTitles: function weekTitles() {
          var day = this.firstDayInWeek; // Week day index

          if (_.isNumber(day)) {
            day = _.clamp(day, 0, 6);
          } // Week day abbr or name
          else if (_.isString(day)) {
              var dayName = _.lowerCase(day);

              day = Ti.DateTime.getWeekDayValue(dayName, 0);
            } // Join list


          var list = [];

          for (var i = 0; i < 7; i++) {
            list.push({
              day: day,
              title: Ti.I18n.get(["cal", "week", day])
            });

            if (++day >= 7) {
              day = 0;
            }
          } // Return it


          return list;
        },
        //--------------------------------------
        weekFirstDayValue: function weekFirstDayValue() {
          if (_.isString(this.firstDayInWeek)) {
            return Ti.DateTime.getWeekDayValue(this.firstDayInWeek, 0);
          }

          return _.clamp(this.firstDayInWeek, 0, 6);
        },
        //--------------------------------------
        dateMatrixList: function dateMatrixList() {
          var beginDate = new Date(this.theViewDate); //............................

          var list = [];
          var theYear = this.theViewYear;
          var theMonth = this.theViewMonth; // Monthly: may create multi-matrix

          if (this.isMonthly) {
            for (var i = 0; i < this.matrixCount; i++) {
              var _this$createMatrix = this.createMatrix(beginDate, theYear, theMonth),
                  matrix = _this$createMatrix.matrix,
                  lastDate = _this$createMatrix.lastDate;

              list.push(matrix);
              beginDate = Ti.DateTime.moveDate(new Date(lastDate), 1);
              theMonth++;

              if (theMonth >= 12) {
                theMonth = 0;
                theYear++;
              }
            }
          } // Weekly
          else {
              var _this$createMatrix2 = this.createMatrix(beginDate),
                  _matrix = _this$createMatrix2.matrix;

              list.push(_matrix);
            }

          return list; //............................
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------

        /***
         * Create a date matrix
         */
        createMatrix: function createMatrix(beginDate, theYear, theMonth) {
          // Move to the first date in month
          if (this.isMonthly) {
            beginDate.setDate(1);
          } //............................
          // Move the first day of week


          var wfdv = this.weekFirstDayValue;

          while (beginDate.getDay() > wfdv) {
            Ti.DateTime.moveDate(beginDate, -1);
          }

          while (beginDate.getDay() < wfdv) {
            Ti.DateTime.moveDate(beginDate, 1);
          } //............................
          // Build the matrix


          var len = 7;
          var y = 0;
          var matrix = [];
          var lastDate = null;

          while (true) {
            var row = [];

            for (var x = 0; x < len; x++) {
              var index = y * len + x;
              lastDate = Ti.DateTime.createDate(beginDate, index);
              var month = lastDate.getMonth();
              var date = lastDate.getDate();
              var name = Ti.Types.formatDate(lastDate, "yyyy-MM-dd");
              var isSelected = false; // Range: match begin/end date

              if (this.range) {
                var _ref16;

                isSelected = (_ref16 = _).inRange.apply(_ref16, [lastDate.getTime()].concat(_toConsumableArray(this.theRangeInMs)));
              } // Single: match the date
              else {
                  isSelected = name == this.theDateName;
                }

              var type = {
                "is-prev": month < theMonth,
                "is-next": month > theMonth,
                "in-month": month == theMonth,
                "is-today": this.todayName == name,
                "is-selected": isSelected
              }; // Eval displayText in cell
              // The first day of month should the Abbr

              var text = "" + date;

              if (1 == date && (this.isMonthly && this.matrixCount > 1 || this.isWeekly)) {
                var abbr = Ti.DateTime.getMonthAbbr(month);
                text = Ti.I18n.get("cal.abbr.".concat(abbr));
              } // Join to the row


              row.push({
                x: x,
                y: y,
                index: index,
                type: type,
                name: name,
                text: text,
                year: lastDate.getFullYear(),
                month: month,
                day: lastDate.getDay(),
                date: lastDate.getDate(),
                raw: lastDate
              });
            } // Move to next row


            y++; // End by week count

            if (this.isWeekly) {
              var count = _.clamp(this.matrixCount, 1, 100);

              if (y > count) break;
            } // End by next month
            else if (this.isMonthly) {
                if (row[0].year == theYear && row[0].month > theMonth || row[0].year > theYear) {
                  break;
                }
              } // Invalid mode, break now
              else {
                  break;
                } // Join to matrix


            matrix.push(row);
          } //............................


          return {
            matrix: matrix,
            lastDate: lastDate
          };
        },
        //--------------------------------------
        gotoToday: function gotoToday() {
          this.view_date = new Date();
        },
        //--------------------------------------
        gotoMatrix: function gotoMatrix() {
          var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          var cd = this.theViewDate;
          var dt = new Date(cd.getFullYear(), cd.getMonth(), cd.getDate()); // Monthly

          if (this.isMonthly) {
            Ti.DateTime.moveMonth(dt, offset);
          } // Weekly
          else if (this.isWeekly) {
              Ti.DateTime.moveDate(dt, offset * 7 * this.matrixCount);
            } // Invalid mode
            else {
                return;
              } // Switch the current view


          this.view_date = dt;
        },
        //--------------------------------------
        onMonthChanged: function onMonthChanged(month) {
          var dt = Ti.Types.toDate(month);
          this.view_date = dt;
        },
        //--------------------------------------
        onClickCell: function onClickCell(cell) {
          // Range
          if (this.range) {
            // If array ...
            if (_.isArray(this.value)) {
              //console.log(this.value)
              // Finish the range
              if (this.value.length == 1) {
                var msRange = [cell.raw.getTime(), this.theDate.getTime()].sort();
                var dt0 = Ti.Types.toDate(msRange[0]);
                var dt1 = Ti.Types.toDate(msRange[1]);
                this.$notify("change", [dt0, dt1]);
              } // Start a new range
              else {
                  this.$notify("change", [cell.raw]);
                }
            } // Has Value
            else {
                this.$notify("change", [cell.raw]);
              }
          } // Single value
          else {
              this.$notify("change", cell.raw);
            }
        } //--------------------------------------

      },
      //////////////////////////////////////////
      mounted: function mounted() {
        this.view_date = this.theDate || new Date();
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/calendar/ti-calendar.mjs", _M);
  })(); //============================================================
  // JOIN: ti/calendar/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/calendar/_com.json", {
    "name": "ti-calendar",
    "globally": true,
    "template": "./ti-calendar.html",
    "mixins": ["./ti-calendar.mjs"],
    "components": ["@com:ti/input/month"]
  }); //============================================================
  // JOIN: ti/chart/combo/ti-chart-combo.html
  //============================================================

  Ti.Preload("ti/com/ti/chart/combo/ti-chart-combo.html", "<div class=\"ti-chart-combo\"\n  :class=\"TopClass\">\n  <!--\n    \u5934\u90E8\n  -->\n  <div class=\"as-head\">\n    <!--\n      \u6807\u9898: \u9009\u62E9\n    -->\n    <TiDroplist\n      v-if=\"hasMultiChartNames\"\n        v-bind=\"ChartNameListOptions\"\n        :auto-i18n=\"true\"\n        :options=\"nameList\"\n        :value=\"name\"\n        @change=\"OnChartNameChange\"/>\n    <div\n      v-else\n        class=\"as-title\">{{ChartTitle | i18n}}</div>\n    <!--\n      \u56FE\u8868\u7C7B\u578B\u9009\u62E9\n    -->\n    <TiSwitcher\n      v-if=\"hasMultiChartTypes\"\n        :options=\"ChartTypeList\"\n        :value=\"ChartType\"\n        :allow-empty=\"false\"\n        @change=\"OnChartTypeChange\"/>\n    <!--\n      \u65F6\u95F4\u9009\u62E9\n    -->\n    <div class=\"as-date-range\">\n      <span>{{DateRangeText}}</span>\n      <a @click.left=\"OnPickDateRange\">{{'modify'|i18n}}</a>\n    </div>\n    <!--\n      \u64CD\u4F5C\u90E8\u5206\n    -->\n    <TiActionbar align=\"right\"\n      :items=\"HeadActionBarItems\"\n      :status=\"myActionStatus\"/>\n  </div>\n  <!---\n    \u56FE\u8868\n  -->\n  <div class=\"as-chart\">\n    <!--\n      Show chart\n    -->\n    <component\n      v-if=\"hasChartCom\"\n        class=\"ti-fill-parent\"\n        :is=\"myChartCom.comType\"\n        v-bind=\"myChartCom.comConf\"\n        :data=\"ChartData\"/>\n    <!--\n      Show loading\n    -->\n    <ti-loading\n      v-else\n        class=\"as-mid-tip\"/>\n  </div>\n</div>"); //============================================================
  // JOIN: ti/chart/combo/ti-chart-combo.mjs
  //============================================================

  (function () {
    //////////////////////////////////////////////////////
    var _CHARTS = {
      "pie": {
        "icon": "im-pie-chart",
        "tip": "i18n:chart-pie",
        "comPath": "@com:ti/chart/raw/pie",
        "comType": "TiChartRawPie",
        "comConf": {}
      },
      "bar": {
        "icon": "im-bar-chart",
        "tip": "i18n:chart-bar",
        "comPath": "@com:ti/chart/raw/bar",
        "comType": "TiChartRawBar",
        "comConf": {}
      },
      "line": {
        "icon": "im-line-chart-up",
        "tip": "i18n:chart-line",
        "comPath": "@com:ti/chart/raw/line",
        "comType": "TiChartRawLine",
        "comConf": {}
      },
      "rank": {
        "icon": "zmdi-sort-amount-desc",
        "tip": "i18n:chart-rank",
        "comPath": "@com:ti/chart/raw/rank",
        "comType": "TiChartRawRank",
        "comConf": {}
      }
    }; //////////////////////////////////////////////////////

    var _M = {
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          myActionStatus: {
            reloading: false,
            force: false
          },
          myChartCom: undefined
        };
      },
      ////////////////////////////////////////////////////
      props: {
        // array -> droplist
        // object/string -> single title
        "nameList": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "name": {
          type: String,
          "default": undefined
        },
        "date": {
          type: [Number, String, Date],
          "default": undefined
        },
        "maxDate": {
          type: [Number, String, Date],
          "default": undefined
        },
        "span": {
          type: String,
          "default": "7d"
        },
        "spanOptions": {
          type: Array,
          "default": function _default() {
            return [{
              text: "7",
              value: "7d"
            }, {
              text: "30",
              value: "30d"
            }, {
              text: "60",
              value: "60d"
            }, {
              text: "90",
              value: "90d"
            }];
          }
        },
        "chartDefines": {
          type: Object,
          "default": undefined
        },
        "chartTypes": {
          type: [Array, String],
          "default": "pie,bar,line"
        },
        "type": {
          type: String,
          "default": undefined
        },
        // {pie:{..}, bar:{..}, line:{..}  ...}
        "chartOptions": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "data": {
          type: Array,
          "default": function _default() {
            return [];
          }
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //------------------------------------------------
        hasChartCom: function hasChartCom() {
          return this.myChartCom && this.myChartCom.comType ? true : false;
        },
        //------------------------------------------------
        hasMultiChartNames: function hasMultiChartNames() {
          return !_.isEmpty(this.nameList) && this.nameList.length > 1;
        },
        //------------------------------------------------
        ChartNameListOptions: function ChartNameListOptions() {
          return {
            prefixIconForClean: false,
            keepWidthWhenDrop: true,
            hover: "suffixIcon",
            valueBy: "name",
            textBy: "title",
            dropDisplay: "title"
          };
        },
        //------------------------------------------------
        ChartTitle: function ChartTitle() {
          if (!_.isEmpty(this.nameList)) {
            var _iterator7 = _createForOfIteratorHelper(this.nameList),
                _step7;

            try {
              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                var li = _step7.value;

                if (li.name == this.name) {
                  return li.title;
                }
              }
            } catch (err) {
              _iterator7.e(err);
            } finally {
              _iterator7.f();
            }
          }

          return this.name;
        },
        //------------------------------------------------
        HeadActionBarItems: function HeadActionBarItems() {
          var _this26 = this;

          return [{
            "name": "reloading",
            "type": "action",
            "icon": "zmdi-refresh",
            "text": "i18n:refresh",
            "altDisplay": {
              "icon": "zmdi-refresh zmdi-hc-spin",
              "text": "i18n:loading"
            },
            "action": function action() {
              return _this26.reloadData(false);
            }
          }, {
            "type": "group",
            "icon": "im-menu-dot-v",
            "items": [{
              "name": "forceReloading",
              "type": "action",
              "icon": "im-reset",
              "text": "i18n:refresh-hard",
              "altDisplay": {
                "icon": "zmdi-refresh zmdi-hc-spin",
                "text": "i18n:loading",
                "match": {
                  "reloading": true,
                  "force": true
                }
              },
              "action": function action() {
                return _this26.reloadData(true);
              }
            }, {
              "name": "forceClearReloading",
              "type": "action",
              "icon": "im-reset",
              "text": "i18n:refresh-hard-clear",
              "altDisplay": {
                "icon": "zmdi-refresh zmdi-hc-spin",
                "text": "i18n:loading",
                "match": {
                  "reloading": true,
                  "force": true
                }
              },
              "action": function action() {
                return _this26.reloadData(true, true);
              }
            }]
          }];
        },
        //------------------------------------------------
        TheDate: function TheDate() {
          var d = Ti.DateTime.moveDate(new Date(), -1);

          if (this.date) {
            d = Ti.DateTime.parse(this.date);
          }

          return Ti.DateTime.format(d, "yyyy-MM-dd");
        },
        //------------------------------------------------
        TheMaxDate: function TheMaxDate() {
          var d = Ti.DateTime.moveDate(new Date(), -1);

          if (this.maxDate) {
            d = Ti.DateTime.parse(this.maxDate);
          }

          return d;
        },
        //------------------------------------------------
        TheSpan: function TheSpan() {
          return this.span || "7d";
        },
        //------------------------------------------------
        DateRangeText: function DateRangeText() {
          // Prepare the text
          var str = []; // Get date

          var d = this.TheDate;
          str.push(Ti.DateTime.format(d, "yyyy-MM-dd")); // Get span

          var m = /^(\d+)([smhdw])?$/.exec(this.TheSpan);

          if (m) {
            var val = parseInt(m[1]);
            var unitText = {
              "w": "dt-u-week",
              "d": "dt-u-day",
              "h": "dt-u-hour",
              "m": "dt-u-min",
              "s": "dt-u-sec",
              "ms": "dt-u-ms"
            }[m[2] || "ms"];
            var s = "".concat(val).concat(Ti.I18n.get(unitText));
            str.push(Ti.I18n.getf("dt-in", {
              val: s
            }));
          }

          return str.join(" ");
        },
        //------------------------------------------------
        hasMultiChartTypes: function hasMultiChartTypes() {
          return !_.isEmpty(this.chartTypes) && this.chartTypes.length > 0;
        },
        //------------------------------------------------
        ChartTypeList: function ChartTypeList() {
          var types = this.chartTypes;

          if (_.isString(types)) {
            types = Ti.S.toArray(types);
          }

          var list = [];

          var _iterator8 = _createForOfIteratorHelper(types),
              _step8;

          try {
            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
              var type = _step8.value;
              var li = this.loadChartDefine(type);

              if (li) {
                li.value = type;
                list.push(li);
              }
            }
          } catch (err) {
            _iterator8.e(err);
          } finally {
            _iterator8.f();
          }

          return list;
        },
        //------------------------------------------------
        ChartType: function ChartType() {
          if (this.type) return this.type;
          if (!_.isEmpty(this.chartTypes)) return _.first(this.ChartTypeList).value;
          return undefined;
        },
        //------------------------------------------------
        ChartData: function ChartData() {
          return this.data || [];
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        OnChartNameChange: function OnChartNameChange(name) {
          this.$notify("change:chart:name", name);
        },
        //------------------------------------------------
        OnChartTypeChange: function OnChartTypeChange(name) {
          this.$notify("change:chart:type", name);
        },
        //------------------------------------------------
        OnPickDateRange: function OnPickDateRange() {
          var _this27 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
            var reo, d;
            return regeneratorRuntime.wrap(function _callee16$(_context16) {
              while (1) {
                switch (_context16.prev = _context16.next) {
                  case 0:
                    _context16.next = 2;
                    return Ti.App.Open({
                      title: "i18n:edit",
                      width: "5rem",
                      height: "5rem",
                      result: {
                        date: _this27.TheDate,
                        span: _this27.TheSpan
                      },
                      model: {
                        prop: "data",
                        event: "change"
                      },
                      comType: "TiForm",
                      comConf: [{
                        fields: [{
                          title: "i18n:stat-date-at",
                          name: "date",
                          comType: "TiInputDate",
                          comConf: {}
                        }, {
                          title: "i18n:stat-date-span",
                          name: "span",
                          tip: "i18n:dt-u-day",
                          width: "auto",
                          comType: "TiSwitcher",
                          comConf: {
                            options: _this27.spanOptions
                          }
                        }]
                      }]
                    });

                  case 2:
                    reo = _context16.sent;

                    if (!(!reo || !reo.date)) {
                      _context16.next = 5;
                      break;
                    }

                    return _context16.abrupt("return");

                  case 5:
                    // Invalid date
                    d = Ti.DateTime.parse(reo.date);

                    if (!(d.getTime() > _this27.TheMaxDate.getTime())) {
                      _context16.next = 10;
                      break;
                    }

                    _context16.next = 9;
                    return Ti.Toast.Open("i18n:stat-date-at-oor", "warn");

                  case 9:
                    return _context16.abrupt("return", _context16.sent);

                  case 10:
                    _this27.$notify("change:chart:datespan", {
                      date: reo.date,
                      span: reo.span
                    });

                  case 11:
                  case "end":
                    return _context16.stop();
                }
              }
            }, _callee16);
          }))();
        },
        //------------------------------------------------
        loadChartDefine: function loadChartDefine(type) {
          var chart = _.get(this.chartDefines, type);

          if (!chart) {
            chart = _.get(_CHARTS, type);
          }

          if (chart) {
            return _.cloneDeep(chart);
          }
        },
        //------------------------------------------------
        reloadData: function reloadData() {
          var _this28 = this;

          var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
          var cleanCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          this.myActionStatus = {
            reloading: true,
            force: force
          };
          this.$notify("reload:data", {
            force: force,
            cleanCache: cleanCache,
            done: function done() {
              _this28.myActionStatus = {};
            }
          });
        },
        ////////////////////////////////////////////////////
        reloadChartCom: function reloadChartCom() {
          var _arguments3 = arguments,
              _this29 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
            var type, chart, comType, comConf;
            return regeneratorRuntime.wrap(function _callee17$(_context17) {
              while (1) {
                switch (_context17.prev = _context17.next) {
                  case 0:
                    type = _arguments3.length > 0 && _arguments3[0] !== undefined ? _arguments3[0] : _this29.type;
                    chart = _this29.loadChartDefine(type);

                    if (chart) {
                      _context17.next = 5;
                      break;
                    }

                    console.warn("Fail to reloadChartCom by type : \"".concat(type, "\""));
                    return _context17.abrupt("return");

                  case 5:
                    _context17.next = 7;
                    return Ti.App(_this29).loadView({
                      comType: chart.comPath
                    });

                  case 7:
                    console.log({
                      type: type,
                      chart: chart
                    }); // Eval The Chart Com

                    comType = chart.comType;
                    comConf = _.assign({}, chart.comConf, _.get(_this29.chartOptions, _this29.type)); // Assign com

                    _this29.myChartCom = {
                      comType: comType,
                      comConf: comConf
                    };

                  case 11:
                  case "end":
                    return _context17.stop();
                }
              }
            }, _callee17);
          }))();
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      watch: {
        "type": {
          handler: "reloadChartCom",
          immediate: true
        },
        "name": function name() {
          this.reloadChartCom();
        }
      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/chart/combo/ti-chart-combo.mjs", _M);
  })(); //============================================================
  // JOIN: ti/chart/combo/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/chart/combo/_com.json", {
    "name": "ti-chart-combo",
    "globally": true,
    "template": "./ti-chart-combo.html",
    "mixins": ["./ti-chart-combo.mjs"],
    "components": ["@com:ti/actionbar", "@com:ti/form", "@com:ti/droplist", "@com:ti/switcher", "@com:ti/input/date", "@com:ti/chart/g2"]
  }); //============================================================
  // JOIN: ti/chart/g2/ti-chart-g2.html
  //============================================================

  Ti.Preload("ti/com/ti/chart/g2/ti-chart-g2.html", "<div class=\"ti-chart ti-chart-g2\"\n  :class=\"TopClass\"\n  :style=\"TopStyle\">\n  <div ref=\"chart\"\n    class=\"chart-main ti-fill-parent\"></div>\n</div>"); //============================================================
  // JOIN: ti/chart/g2/ti-chart-g2.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      props: {
        "data": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "width": {
          type: [Number, String],
          "default": undefined
        },
        "height": {
          type: [Number, String],
          "default": undefined
        },
        "padding": {
          type: [Number, Array, String],
          "default": "auto"
        },
        "appendPadding": {
          type: [Number, Array, String],
          "default": undefined
        },
        // Function(chart, data):void
        "setup": {
          type: Function,
          "default": _.identity
        },
        "autoSource": {
          type: Boolean,
          "default": true
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //--------------------------------------
        TopStyle: function TopStyle() {
          return Ti.Css.toStyle({
            width: this.width,
            height: this.height
          });
        },
        //--------------------------------------
        hasData: function hasData() {
          return !_.isEmpty(this.data);
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        draw_chart: function draw_chart() {
          var $container = this.$refs.chart; //let rect = Ti.Rects.createBy($container)
          //let {width, height} = rect
          //--------------------------------------.
          // Create The Chart

          var chart = new G2.Chart({
            container: $container,
            padding: this.padding,
            appendPadding: this.appendPadding,
            autoFit: true //width, height

          }); //--------------------------------------.
          // Set datasource

          if (this.autoSource && this.hasData) chart.data(this.data); //--------------------------------------.
          // Setup chart

          if (_.isFunction(this.setup)) {
            this.setup(chart, this.data);
          } //--------------------------------------.
          // 渲染并返回


          chart.render();
          return chart;
        },
        //--------------------------------------
        redrawChart: function redrawChart() {
          if (!_.isElement(this.$refs.chart)) {
            return;
          }

          if (this.$G2Chart) {
            try {
              this.$G2Chart.destroy();
            } catch (E) {}

            $(this.$refs.chart).empty();
          }

          this.$G2Chart = this.draw_chart(this);
        },
        drawAll: function drawAll() {
          var _this30 = this;

          //console.log("I am drawAll")
          this.$nextTick(function () {
            _this30.redrawChart();
          });
        } //--------------------------------------

      },
      //////////////////////////////////////////
      watch: {
        "data": "drawAll"
      },
      //////////////////////////////////////////
      mounted: function mounted() {
        this.drawAll(); // 监控窗口尺寸变化

        Ti.Viewport.watch(this, {
          resize: function resize() {
            var chart = this.$G2Chart;

            if (chart) {
              this.$notify("before_resize"); // let $container = this.$refs.chart
              // let rect = Ti.Rects.createBy($container)
              // let {width, height} = rect
              //chart.changeSize({width, height})

              chart.forceFit();
            }
          }
        });
      },
      //////////////////////////////////////////
      beforeDestroy: function beforeDestroy() {
        if (this.$G2Chart) {
          this.$G2Chart.destroy();
        } // 解除窗口监控


        Ti.Viewport.unwatch(this);
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/chart/g2/ti-chart-g2.mjs", _M);
  })(); //============================================================
  // JOIN: ti/chart/g2/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/chart/g2/_com.json", {
    "name": "ti-chart-g2",
    "globally": true,
    "template": "./ti-chart-g2.html",
    "mixins": ["./ti-chart-g2.mjs"],
    "components": [],
    "deps": ["@/gu/rs/ti/deps/antv/v4/g2/g2.min.js"]
  }); //============================================================
  // JOIN: ti/chart/raw/bar/ti-chart-raw-bar.html
  //============================================================

  Ti.Preload("ti/com/ti/chart/raw/bar/ti-chart-raw-bar.html", "<TiChartG2\n  class=\"as-bar\"\n  :class-name=\"className\"\n  :data=\"data\"\n  :width=\"width\"\n  :height=\"height\"\n  :padding=\"padding\"\n  :append-padding=\"appendPadding\"\n  :auto-source=\"false\"\n  :setup=\"ChartSetup\"/>"); //============================================================
  // JOIN: ti/chart/raw/bar/ti-chart-raw-bar.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      props: {
        "scaleX": {
          type: Object,
          "default": function _default() {
            return {
              "range": [0.1, 0.9]
            };
          }
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        ChartSetup: function ChartSetup() {
          var _this31 = this;

          return function (chart, data) {
            //console.log(data)
            var _this31$evalXYData = _this31.evalXYData(data),
                list = _this31$evalXYData.list;

            if (_.isEmpty(list)) return; // Set data

            chart.data(list); // Axis/Tick/Tooltip ...

            _this31.applyChartSetup(chart); // Setup view


            var view = chart.interval().position(_this31.ChartPosition);

            _this31.applyViewOptions(view, _this31.view);
          }; // ~ function
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {} //------------------------------------------------
      //------------------------------------------------
      ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/chart/raw/bar/ti-chart-raw-bar.mjs", _M);
  })(); //============================================================
  // JOIN: ti/chart/raw/bar/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/chart/raw/bar/_com.json", {
    "name": "ti-chart-raw-bar",
    "globally": true,
    "template": "./ti-chart-raw-bar.html",
    "mixins": ["@com:ti/chart/raw/ti-chart-raw.mjs", "./ti-chart-raw-bar.mjs"],
    "components": ["@com:ti/chart/g2"]
  }); //============================================================
  // JOIN: ti/chart/raw/line/ti-chart-raw-line.html
  //============================================================

  Ti.Preload("ti/com/ti/chart/raw/line/ti-chart-raw-line.html", "<TiChartG2\n  class=\"as-line\"\n  :class-name=\"className\"\n  :data=\"data\"\n  :width=\"width\"\n  :height=\"height\"\n  :padding=\"padding\"\n  :append-padding=\"appendPadding\"\n  :auto-source=\"false\"\n  :setup=\"ChartSetup\"/>"); //============================================================
  // JOIN: ti/chart/raw/line/ti-chart-raw-line.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      props: {
        "areaView": {
          type: [Object, Boolean],
          "default": false
        },
        "pointView": {
          type: [Object, Boolean],
          "default": true
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        ChartSetup: function ChartSetup() {
          var _this32 = this;

          return function (chart, data) {
            //console.log(data)
            var _this32$evalXYData = _this32.evalXYData(data),
                list = _this32$evalXYData.list;

            if (_.isEmpty(list)) return; // Set data

            chart.data(list); // Axis/Tick/Tooltip ...

            _this32.applyChartSetup(chart); // Draw line


            var view = chart.line().position(_this32.ChartPosition);

            _this32.applyViewOptions(view, _this32.view); // Draw point


            if (_this32.areaView) {
              view = chart.area().position(_this32.ChartPosition);

              _this32.applyViewOptions(view, _this32.areaView);
            } // Draw point


            if (_this32.pointView) {
              view = chart.point().position(_this32.ChartPosition);

              _this32.applyViewOptions(view, {
                size: 4,
                shape: 'circle',
                style: {
                  stroke: '#FFF',
                  lineWidth: 1
                }
              }, _this32.pointView);
            }
          }; // ~ function
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {} //------------------------------------------------
      //------------------------------------------------
      ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/chart/raw/line/ti-chart-raw-line.mjs", _M);
  })(); //============================================================
  // JOIN: ti/chart/raw/line/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/chart/raw/line/_com.json", {
    "name": "ti-chart-raw-line",
    "globally": true,
    "template": "./ti-chart-raw-line.html",
    "mixins": ["@com:ti/chart/raw/ti-chart-raw.mjs", "./ti-chart-raw-line.mjs"],
    "components": ["@com:ti/chart/g2"]
  }); //============================================================
  // JOIN: ti/chart/raw/pie/ti-chart-raw-pie.html
  //============================================================

  Ti.Preload("ti/com/ti/chart/raw/pie/ti-chart-raw-pie.html", "<TiChartG2\n  class=\"as-pie\"\n  :class-name=\"className\"\n  :data=\"data\"\n  :width=\"width\"\n  :height=\"height\"\n  :padding=\"padding\"\n  :append-padding=\"appendPadding\"\n  :auto-source=\"false\"\n  :setup=\"ChartSetup\"/>"); //============================================================
  // JOIN: ti/chart/raw/pie/ti-chart-raw-pie.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      props: {
        "percentKey": {
          type: String,
          "default": "percent"
        },
        "precise": {
          type: Number,
          "default": 2
        },
        "labelX": {
          type: [Boolean, Object, String, Function],
          "default": "${i18n:name} : ${percent}% : ${value}"
        },
        "tooltip": {
          type: [Boolean, Object],
          "default": function _default() {
            return {
              showTitle: false,
              showMarkers: false,
              showCrosshairs: false,
              itemTpl: '<li class="g2-tooltip-list-item">{name} : {percent}% : {value}</li>'
            };
          }
        },
        "view": {
          type: Object,
          "default": function _default() {
            return {
              tooltip: ["name*percent*value", function (n, p, v) {
                return {
                  name: n,
                  percent: p,
                  value: v
                };
              }]
            };
          }
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        ChartSetup: function ChartSetup() {
          var _this33 = this;

          return function (chart, data) {
            var _this33$evalXYData = _this33.evalXYData(data),
                list = _this33$evalXYData.list,
                sum = _this33$evalXYData.sum;

            if (_.isEmpty(list)) return; // Eval percent

            var _iterator9 = _createForOfIteratorHelper(list),
                _step9;

            try {
              for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                var li = _step9.value;
                var v = li[_this33.positionY];
                li[_this33.percentKey] = Ti.Num.precise(v * 100 / sum, _this33.precise);
              } //console.log(list)

            } catch (err) {
              _iterator9.e(err);
            } finally {
              _iterator9.f();
            }

            chart.data(list); // Axis/Tick/Tooltip ...

            _this33.applyChartSetup(chart); // Coordinate


            chart.coordinate('theta', {
              radius: 0.75
            });
            var view = chart.interval().adjust('stack');
            view.position(_this33.percentKey).color(_this33.positionX); // View label

            _this33.applyViewLabel(view);

            _this33.applyViewOptions(view, {
              style: {
                opacity: 0.4
              },
              state: {
                active: {
                  style: function style(element) {
                    var shape = element.shape;
                    return {
                      matrix: G2.Util.zoom(shape, 1.5)
                    };
                  }
                }
              }
            }, _this33.view);

            chart.interaction('element-single-selected');
          }; // ~ function
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {} //------------------------------------------------
      //------------------------------------------------
      ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/chart/raw/pie/ti-chart-raw-pie.mjs", _M);
  })(); //============================================================
  // JOIN: ti/chart/raw/pie/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/chart/raw/pie/_com.json", {
    "name": "ti-chart-raw-pie",
    "globally": true,
    "template": "./ti-chart-raw-pie.html",
    "mixins": ["@com:ti/chart/raw/ti-chart-raw.mjs", "./ti-chart-raw-pie.mjs"],
    "components": ["@com:ti/chart/g2"]
  }); //============================================================
  // JOIN: ti/chart/raw/rank/ti-chart-raw-rank.html
  //============================================================

  Ti.Preload("ti/com/ti/chart/raw/rank/ti-chart-raw-rank.html", "<TiChartG2\n  class=\"as-bar\"\n  :class-name=\"className\"\n  :data=\"data\"\n  :width=\"width\"\n  :height=\"height\"\n  :padding=\"padding\"\n  :append-padding=\"appendPadding\"\n  :auto-source=\"false\"\n  :setup=\"ChartSetup\"/>"); //============================================================
  // JOIN: ti/chart/raw/rank/ti-chart-raw-rank.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      props: {},
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        ChartSetup: function ChartSetup() {
          var _this34 = this;

          return function (chart, data) {
            //console.log(data)
            var _this34$evalXYData = _this34.evalXYData(data),
                list = _this34$evalXYData.list;

            if (_.isEmpty(list)) return; // Set data
            //list.reverse()

            chart.data(list); // Axis/Tick/Tooltip ...

            _this34.applyChartSetup(chart);

            chart.coordinate().transpose();
            var view = chart.interval().position(_this34.ChartPosition);

            _this34.applyViewOptions(view, _this34.view);

            chart.interaction('element-active');
          }; // ~ function
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {} //------------------------------------------------
      //------------------------------------------------
      ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/chart/raw/rank/ti-chart-raw-rank.mjs", _M);
  })(); //============================================================
  // JOIN: ti/chart/raw/rank/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/chart/raw/rank/_com.json", {
    "name": "ti-chart-raw-rank",
    "globally": true,
    "template": "./ti-chart-raw-rank.html",
    "mixins": ["@com:ti/chart/raw/ti-chart-raw.mjs", "./ti-chart-raw-rank.mjs"],
    "components": ["@com:ti/chart/g2"]
  }); //============================================================
  // JOIN: ti/chart/raw/ti-chart-raw.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          minDataValue: undefined,
          maxDataValue: undefined
        };
      },
      ////////////////////////////////////////////////////
      props: {
        //-----------------------------------
        // Data
        //-----------------------------------
        "data": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "xKey": {
          type: String,
          "default": "name"
        },
        "yKey": {
          type: String,
          "default": "value"
        },
        "positionX": {
          type: String,
          "default": "name"
        },
        "positionY": {
          type: String,
          "default": "value"
        },
        //-----------------------------------
        // Behavior
        //-----------------------------------
        "scaleX": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        // Plus support: 
        //  - tickUnit : 50  // for tickCount, unit to 50
        "scaleY": {
          type: Object,
          "default": function _default() {
            return {
              nice: true,
              tickCount: 10
            };
          }
        },
        "axisX": {
          type: Object,
          "default": undefined
        },
        "axisY": {
          type: Object,
          "default": undefined
        },
        "labelX": {
          type: [Boolean, Object, String, Function],
          "default": undefined
        },
        "labelY": {
          type: [Boolean, Object, String, Function],
          "default": undefined
        },
        "tooltip": {
          type: [Boolean, Object],
          "default": function _default() {
            return {
              showCrosshairs: true
            };
          }
        },
        "legend": {
          type: [Boolean, Object],
          "default": function _default() {
            return {
              flipPage: false
            };
          }
        },
        "view": {
          type: Object,
          "default": undefined
        },
        //-----------------------------------
        // Aspect
        //-----------------------------------
        "padding": {
          type: [Number, Array, String],
          "default": "auto"
        },
        "appendPadding": {
          type: [Number, Array, String],
          "default": undefined
        },
        //-----------------------------------
        // Measure
        //-----------------------------------
        "width": {
          type: [Number, String],
          "default": undefined
        },
        "height": {
          type: [Number, String],
          "default": undefined
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        ChartPosition: function ChartPosition() {
          return "".concat(this.positionX, "*").concat(this.positionY);
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        evalXYData: function evalXYData(data) {
          var iteratee = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _.identity;
          var list = [];
          var max,
              min,
              sum = 0;
          var i = 0;

          var _iterator10 = _createForOfIteratorHelper(data),
              _step10;

          try {
            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
              var _iteratee;

              var it = _step10.value;
              var value = it[this.yKey] * 1 || 0;
              var li = iteratee((_iteratee = {}, _defineProperty(_iteratee, this.positionX, Ti.I18n.text(it[this.xKey])), _defineProperty(_iteratee, this.positionY, value), _iteratee));
              list.push(li);
              sum += value;

              if (i++ > 0) {
                min = Math.min(value, min);
                max = Math.max(value, max);
              } else {
                min = value;
                max = value;
              }
            }
          } catch (err) {
            _iterator10.e(err);
          } finally {
            _iterator10.f();
          }

          this.maxDataValue = max;
          this.minDataValue = min;
          return {
            list: list,
            max: max,
            min: min,
            sum: sum
          };
        },
        //------------------------------------------------
        getChartScaleX: function getChartScaleX() {
          return _.assign({}, this.scaleX);
        },
        //------------------------------------------------
        getChartScaleY: function getChartScaleY() {
          var config = _.cloneDeep(this.scaleY) || {};

          if ("auto" == config.min || true === config.min) {
            config.min = this.minDataValue;
          }

          if ("auto" == config.max || true === config.max) {
            config.max = this.maxDataValue;
          }

          return config;
        },
        //------------------------------------------------
        applyChartScale: function applyChartScale(chart) {
          this.__apply_scale(chart, this.positionX, this.getChartScaleX());

          this.__apply_scale(chart, this.positionY, this.getChartScaleY());
        },
        //------------------------------------------------
        __apply_scale: function __apply_scale(chart, key, config) {
          if (!_.isEmpty(config)) {
            if (config.tickUnit > 0) {
              config.min = Ti.Num.floorUnit(config.min, config.tickUnit);
              config.max = Ti.Num.ceilUnit(config.max, config.tickUnit);
            }

            chart.scale(key, config);
          }
        },
        //------------------------------------------------
        applyChartAxis: function applyChartAxis(chart) {
          if (!_.isEmpty(this.axisX)) {
            chart.axis(this.positionX, this.axisX);
          }

          if (!_.isEmpty(this.axisY)) {
            chart.axis(this.positionY, this.axisY);
          }
        },
        //------------------------------------------------
        applyChartTooltip: function applyChartTooltip(chart) {
          if (!_.isEmpty(this.tooltip)) {
            chart.tooltip(this.tooltip);
          }
        },
        //------------------------------------------------
        applyChartSetup: function applyChartSetup(chart) {
          // Axis
          this.applyChartAxis(chart); // Tick

          this.applyChartScale(chart); // Tooltip

          this.applyChartTooltip(chart); // legend

          if (!_.isUndefined(this.legend)) {
            chart.legend(this.legend);
          }
        },
        //------------------------------------------------
        applyViewLabel: function applyViewLabel(view) {
          this.__apply_view_label(view, this.positionX, this.labelX);

          this.__apply_view_label(view, this.positionY, this.labelY);
        },
        //------------------------------------------------
        __apply_view_label: function __apply_view_label(view, key, labelConfig) {
          if (!Ti.Util.isNil(labelConfig)) {
            var config = _.cloneDeep(labelConfig);

            if (_.isString(config)) {
              config = {
                content: config
              };
            }

            if (_.isString(config.content)) {
              var tmpl = config.content;

              config.content = function (obj) {
                return Ti.S.renderBy(tmpl, obj);
              };
            }

            view.label(key, config);
          }
        },
        //------------------------------------------------
        applyViewOptions: function applyViewOptions(view) {
          var _ref17;

          for (var _len = arguments.length, options = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            options[_key - 1] = arguments[_key];
          }

          var config = (_ref17 = _).merge.apply(_ref17, [{}].concat(options));

          _.forEach(config, function (v, k) {
            if (Ti.Util.isNil(v)) return;

            var args = _.concat(v);

            view[k].apply(view, args);
          });
        } //------------------------------------------------

      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/chart/raw/ti-chart-raw.mjs", _M);
  })(); //============================================================
  // JOIN: ti/chart/simple/ti-chart-simple.html
  //============================================================


  Ti.Preload("ti/com/ti/chart/simple/ti-chart-simple.html", "<div class=\"ti-chart ti-chart-simple\">\n  <header \n    v-if=\"title\" \n    @click=\"drawAll\">{{title}}</header>\n  <aside v-if=\"aside\"\n    :class=\"asideClass\">\n    <slot name=\"aside\">\n      <span v-if=\"unit\">{{unit}}</span>\n    </slot>\n  </aside>\n  <section class=\"chart-main\" ref=\"chart\"></section>\n  <div v-if=\"hasSlider\"\n    ref=\"slider\"\n    class=\"chart-slider\">\n  </div>\n</div>"); //============================================================
  // JOIN: ti/chart/simple/ti-chart-simple.mjs
  //============================================================

  (function () {
    function draw_chart() {
      var _ref18 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          $refs = _ref18.$refs,
          _ref18$type = _ref18.type,
          type = _ref18$type === void 0 ? "interval" : _ref18$type,
          unit = _ref18.unit,
          _ref18$data = _ref18.data,
          data = _ref18$data === void 0 ? [] : _ref18$data,
          axisX = _ref18.axisX,
          axisY = _ref18.axisY,
          color = _ref18.color,
          animate = _ref18.animate,
          padding = _ref18.padding,
          minValue = _ref18.minValue,
          maxValue = _ref18.maxValue,
          valueInterval = _ref18.valueInterval,
          coord = _ref18.coord;

      var $container = $refs.chart; //console.log(data)

      var width = G2.DomUtil.getWidth($container);
      var height = G2.DomUtil.getHeight($container); // if(width > 500 && width < 510)
      //   console.log(width, height)
      // if(hasSlider)
      //   console.log("XXXX", data)
      //.......................................
      // maxValue

      if (_.isUndefined(maxValue)) {
        maxValue = 0;
        var valKey = axisY.name;

        var _iterator11 = _createForOfIteratorHelper(data),
            _step11;

        try {
          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
            var it = _step11.value;
            maxValue = Math.max(maxValue, it[valKey]);
          }
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }
      } //.......................................
      // Create The Chart


      var chart = new G2.Chart({
        container: $container,
        padding: padding,
        width: width,
        height: height
      }); //.......................................
      // Set datasource

      chart.source(data); //.......................................
      // Setup title

      chart.legend(false); //.......................................
      // axisX

      var axisXOptions = {
        label: {
          textStyle: {
            fill: axisX.color || "#888"
          }
        }
      };
      chart.axis(axisX.name, axisXOptions); //.......................................
      // 纵轴设定

      var axisYOptions = {
        label: {
          autoRotate: false,
          textStyle: {
            fill: axisY.color || "#888"
          }
        },
        grid: {
          type: 'line',
          lineStyle: {
            stroke: 'rgba(255,255,255,0.4)',
            lineWidth: 0.5,
            lineDash: false
          }
        }
      };
      chart.axis(axisY.name, axisYOptions); //.......................................
      // 坐标系变换

      if (coord) {
        if ("transpose" == coord) {
          chart.coord().transpose();
        }
      } //.......................................
      // 视图缩放


      var alias = axisY.title || axisY.name;
      chart.scale(axisY.name, {
        alias: alias,
        type: "linear",
        min: minValue,
        max: maxValue,
        tickInterval: valueInterval
      }); //.......................................
      // 图表种类和风格

      var factory = {
        //+++++++++++++++++++++++++++++++++++++
        // 折线
        line: function line() {
          var geom = chart.line().position(position);
          chart.point().position(position).size(4).shape('circle').style({
            stroke: '#fff',
            lineWidth: 1
          });
          return geom;
        },
        //+++++++++++++++++++++++++++++++++++++
        // 柱图·单柱
        interval: function interval() {
          return chart.interval().position(position);
        },
        //+++++++++++++++++++++++++++++++++++++
        // 柱图·分组
        intervalDodge: function intervalDodge() {
          return chart.interval().position(position).adjust([{
            type: 'dodge',
            marginRatio: 1 / 32
          }]);
        },
        //+++++++++++++++++++++++++++++++++++++
        // 柱图·堆叠
        intervalStack: function intervalStack(position) {
          return chart.intervalStack().position(position);
        }
      }[type]; // 默认就是柱图

      factory = factory || function (position) {
        return chart.interval().position(position);
      }; //.......................................
      // 生成图表


      var position = "".concat(axisX.name, "*").concat(axisY.name);
      var geom = factory(position); //.......................................
      // 设置数据显示
      //.color(color || 'l(270) 0:#0d4a6a 1:#00fddd')
      // .animate({
      //   appear: {
      //     delay: 500, // 动画延迟执行时间
      //     duration: 1000 // 动画执行时间
      //   }
      // });

      if (color) {
        geom.color(color);
      }

      if (animate) {
        geom.animate(animate);
      } //.......................................
      // 渲染并返回


      chart.render();
      return chart;
    } ///////////////////////////////////////////


    var _M = {
      /////////////////////////////////////////
      inheritAttrs: false,
      /////////////////////////////////////////
      props: {
        "title": {
          type: String,
          "default": null
        },
        "data": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "type": {
          type: String,
          "default": "interval"
        },
        "axisX": {
          type: Object,
          "default": function _default() {
            return {
              name: "name",
              title: "name"
            };
          }
        },
        "axisY": {
          type: Object,
          "default": function _default() {
            return {
              name: "value",
              title: "value"
            };
          }
        },
        "aside": {
          type: String,
          "default": "left" // none|left|center|right

        },
        "unit": {
          type: String,
          "default": null
        },
        "padding": {
          type: Array,
          "default": function _default() {
            return [20, 20, 50, 50];
          }
        },
        "minValue": {
          type: Number,
          "default": 0
        },
        "maxValue": {
          type: Number,
          "default": undefined
        },
        "color": {
          type: String,
          "default": null
        },
        "animate": {
          type: Object,
          "default": function _default() {
            return {
              delay: 500,
              // 动画延迟执行时间
              duration: 1000 // 动画执行时间

            };
          }
        },
        "valueInterval": {
          type: Number,
          "default": 100
        },
        // 坐标系变换
        "coord": {
          type: [String, Object],
          "default": null
        }
      },
      //////////////////////////////////////////
      watch: {
        "data": function data() {
          this.debounceRedrawChart();
        } // "type" : function() {this.debounceRedrawAll()},
        // "axisX" : function() {this.debounceRedrawAll()},
        // "axisY" : function() {this.debounceRedrawAll()}

      },
      //////////////////////////////////////////
      computed: {
        //......................................
        asideClass: function asideClass() {
          return "at-".concat(this.aside || "none");
        },
        //......................................
        // TODO support slider
        hasSlider: function hasSlider() {
          return false;
        } //......................................

      },
      //////////////////////////////////////////
      methods: {
        //......................................
        redrawChart: function redrawChart() {
          //console.log("I am redrawChart")
          if (this.__g2_chart) {
            this.__g2_chart.destroy();

            $(this.$refs.chart).empty();
          }

          this.__g2_chart = draw_chart(this);
        },
        drawAll: function drawAll() {
          var _this35 = this;

          //console.log("I am drawAll")
          this.$nextTick(function () {
            _this35.redrawChart(); //this.redrawSlider()

          });
        } //......................................

      },
      /////////////////////////////////////////
      mounted: function mounted() {
        var _this36 = this;

        this.drawAll();
        this.debounceRedrawChart = _.debounce(function () {
          _this36.redrawChart();
        }, 500);
        this.debounceRedrawAll = _.debounce(function () {
          _this36.drawAll();
        }, 500);
      },
      beforeDestroy: function beforeDestroy() {
        if (this.__g2_chart) {
          this.__g2_chart.destroy();
        } // if(this.__g2_slider) {
        //   this.__g2_slider.destroy()
        // }

      } /////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/chart/simple/ti-chart-simple.mjs", _M);
  })(); //============================================================
  // JOIN: ti/chart/simple/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/chart/simple/_com.json", {
    "name": "ti-chart-simple",
    "globally": true,
    "template": "./ti-chart-simple.html",
    "mixins": ["./ti-chart-simple.mjs"],
    "components": [],
    "deps": []
  }); //============================================================
  // JOIN: ti/color/ti-color.html
  //============================================================

  Ti.Preload("ti/com/ti/color/ti-color.html", "<div class=\"ti-color\" >\n  <!--\n    Color Matrix Table\n  -->\n  <div class=\"as-table\">\n    <table>\n      <thead>\n        <tr>\n          <th v-for=\"color in colorGrays\">\n            <span \n              :style=\"colorItemStyle(color)\" \n              @click=\"onColorClicked(color)\"></span>\n          </th>\n        </tr>\n        <tr>\n            <th v-for=\"color in colorMajors\">\n              <span \n                :style=\"colorItemStyle(color)\" \n                @click=\"onColorClicked(color)\"></span>\n            </th>\n          </tr>\n      </thead>\n      <!--Matrix-->\n      <tbody>\n        <tr v-for=\"row in colorMatrix\"\n          class=\"as-row\">\n          <td v-for=\"color in row\">\n            <span \n              :style=\"colorItemStyle(color)\" \n              @click=\"onColorClicked(color)\"></span>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div> <!-- End Matrix-->\n  <!--\n    Color Input\n  -->\n  <div class=\"as-input\">\n    <div class=\"as-hex\">\n        <input class=\"as-value\" \n          spellcheck=\"false\"\n          :value=\"theHex\"\n          @change=\"onHexChanged\"/>\n    </div>\n    <div class=\"as-alpha\">\n      <ti-input-num \n        :value=\"theAlpha\"\n        :max-value=\"100\"\n        :min-value=\"0\"\n        :step=\"10\"\n        @change=\"onAlphaChanged\"/>\n    </div>\n  </div>\n  <!--\n    Color Preview\n  -->\n  <div class=\"as-preview\">\n    <span>{{theColorValue}}</span>\n  </div>\n</div>"); //============================================================
  // JOIN: ti/color/ti-color.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      ///////////////////////////////////////////////////////
      props: {
        "value": {
          type: [String, Number],
          "default": null
        },
        "majorColors": {
          type: Array,
          "default": function _default() {
            return ["#980000", "#ff0000", "#ff9900", "#ffff00", "#00ff00", "#00ffff", "#4a86e8", "#0000ff", "#9900ff", "#ff00ff"];
          }
        },
        // List the colors at first rows
        "topColors": {
          type: Array,
          "default": function _default() {
            return ["#e6b8af", "#f4cccc", "#fce5cd", "#fff2cc", "#d9ead3", "#d0e0e3", "#c9daf8", "#cfe2f3", "#d9d2e9", "#ead1dc"];
          }
        },
        // List the colors at last rows
        // it should same lenght with topColors
        "bottomColors": {
          type: Array,
          "default": function _default() {
            return ["#5b0f00", "#660000", "#783f04", "#7f6000", "#274e13", "#0c343d", "#1c4587", "#073763", "#20124d", "#4c1130"];
          }
        },
        // How many middle colors between the head and bottom
        "middleDegree": {
          type: Number,
          "default": 5
        }
      },
      ///////////////////////////////////////////////////////
      computed: {
        //---------------------------------------------------
        theColor: function theColor() {
          return Ti.Types.toColor(this.value, null);
        },
        //---------------------------------------------------
        theHex: function theHex() {
          if (this.theColor) return this.theColor.hex;
        },
        //---------------------------------------------------
        theAlpha: function theAlpha() {
          if (this.theColor) return Math.round(this.theColor.alpha * 100);
        },
        //---------------------------------------------------
        theColorValue: function theColorValue() {
          if (this.theColor) return this.theColor.rgba;
          return Ti.I18n.get("empty");
        },
        //---------------------------------------------------
        colCount: function colCount() {
          return this.topColors.length;
        },
        //---------------------------------------------------
        colorGrays: function colorGrays() {
          var grays = [];
          var step = 255 / this.colCount;

          for (var i = 0; i < this.colCount; i++) {
            var v = Math.round((i + 1) * step);
            grays.push(Ti.Types.toColor(v));
          }

          return grays;
        },
        //---------------------------------------------------
        colorMajors: function colorMajors() {
          var majors = [];

          var _iterator12 = _createForOfIteratorHelper(this.majorColors),
              _step12;

          try {
            for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
              var v = _step12.value;
              majors.push(Ti.Types.toColor(v));
            }
          } catch (err) {
            _iterator12.e(err);
          } finally {
            _iterator12.f();
          }

          return majors;
        },
        //---------------------------------------------------
        colorMatrix: function colorMatrix() {
          // Head Colors
          var tops = [];

          var _iterator13 = _createForOfIteratorHelper(this.topColors),
              _step13;

          try {
            for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
              var v = _step13.value;
              tops.push(Ti.Types.toColor(v));
            } // Bottom colors

          } catch (err) {
            _iterator13.e(err);
          } finally {
            _iterator13.f();
          }

          var bottoms = [];

          var _iterator14 = _createForOfIteratorHelper(this.bottomColors),
              _step14;

          try {
            for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
              var _v = _step14.value;
              bottoms.push(Ti.Types.toColor(_v));
            } // Middle Colors

          } catch (err) {
            _iterator14.e(err);
          } finally {
            _iterator14.f();
          }

          var matrix = [tops];

          for (var y = 0; y < this.middleDegree - 1; y++) {
            var rows = [];

            for (var x = 0; x < this.colCount; x++) {
              var top = tops[x];
              var bottom = bottoms[x];
              var pos = (y + 1) / this.middleDegree;
              var color = top.between(bottom, pos);
              color.adjustByHSL({
                s: .5
              });
              rows.push(color);
            }

            matrix.push(rows);
          } // The bottom


          matrix.push(bottoms); // Return the matrix

          return matrix;
        } //---------------------------------------------------

      },
      ///////////////////////////////////////////////////////
      methods: {
        //---------------------------------------------------
        colorItemStyle: function colorItemStyle(color) {
          return {
            "background-color": color.rgb
          };
        },
        //---------------------------------------------------
        onHexChanged: function onHexChanged(evt) {
          var hex = _.trim(evt.target.value);

          if (/^[0-9a-f]{3,6}$/i.test(hex)) {
            hex = "#" + hex;
          }

          var co = Ti.Types.toColor(hex);
          this.$notify("change", co);
        },
        //---------------------------------------------------
        onAlphaChanged: function onAlphaChanged(a) {
          var co = this.theColor ? this.theColor.clone() : Ti.Types.toColor("black");
          co.alpha = a / 100;
          this.$notify("change", co);
        },
        //---------------------------------------------------
        onColorClicked: function onColorClicked(color) {
          var co = color.clone();

          if (_.isNumber(this.theAlpha)) {
            co.alpha = this.theAlpha / 100;
          }

          this.$notify("change", co);
        } //---------------------------------------------------

      } ///////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/color/ti-color.mjs", _M);
  })(); //============================================================
  // JOIN: ti/color/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/color/_com.json", {
    "name": "ti-color",
    "globally": true,
    "template": "./ti-color.html",
    "mixins": ["./ti-color.mjs"]
  }); //============================================================
  // JOIN: ti/combo/box/ti-combo-box.html
  //============================================================

  Ti.Preload("ti/com/ti/combo/box/ti-combo-box.html", "<div class=\"ti-combo-box\" \n  :class=\"topClass\"\n  :style=\"topStyle\">\n  <!--\n    Box: Component\n  -->\n  <div class=\"as-box\" ref=\"box\" :style=\"theBoxStyle\">\n    <slot name=\"box\"><div>ComboBox</div></slot>\n  </div>\n  <!--\n    Mask & Drop\n  -->\n  <template v-if=\"'extended'==status\">\n    <!--Mask-->\n    <div class=\"as-mask\" @click.left=\"notifyCollapse()\"></div>\n    <!--Drop-->\n    <div class=\"as-drop\" ref=\"drop\" :style=\"theDropStyle\">\n      <slot name=\"drop\"><div>ComboBox Dropdown</div></slot>\n    </div>\n  </template>\n</div>"); //============================================================
  // JOIN: ti/combo/box/ti-combo-box.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          box: {
            "position": null,
            "width": null,
            "height": null,
            "top": null,
            "left": null
          },
          myDropDockReady: false
        };
      },
      ////////////////////////////////////////////////////
      props: {
        "keepWidthWhenDrop": {
          type: Boolean,
          "default": true
        },
        "width": {
          type: [Number, String],
          "default": null
        },
        "height": {
          type: [Number, String],
          "default": null
        },
        "dropFloat": {
          type: Boolean,
          "default": true
        },
        "dropWidth": {
          type: [Number, String],
          "default": "box"
        },
        "dropHeight": {
          type: [Number, String],
          "default": null
        },
        "dropOverflow": {
          type: [String, Array],
          "default": "auto",
          validator: function validator(v) {
            if (Ti.Util.isNil(v)) {
              return true;
            }

            if (_.isString(v)) {
              v = v.split(" ");
            }

            if (_.isArray(v)) {
              if (v.length > 2 || v.length == 0) {
                return false;
              }

              var _iterator15 = _createForOfIteratorHelper(v),
                  _step15;

              try {
                for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
                  var s = _step15.value;

                  if (!/^(auto|hidden|visible|scroll)$/.test(s)) {
                    return false;
                  }
                }
              } catch (err) {
                _iterator15.e(err);
              } finally {
                _iterator15.f();
              }

              return true;
            }

            return false;
          }
        },
        "status": {
          type: String,
          "default": "collapse",
          validator: function validator(st) {
            return /^(collapse|extended)$/.test(st);
          }
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        topClass: function topClass() {
          return this.getTopClass("is-".concat(this.status));
        },
        //------------------------------------------------
        topStyle: function topStyle() {
          var width;
          if (this.keepWidthWhenDrop) width = this.box.width;
          var height = this.box.height;
          return Ti.Css.toStyle({
            width: width,
            height: height
          });
        },
        //------------------------------------------------
        theBoxStyle: function theBoxStyle() {
          if (this.dropFloat) {
            return Ti.Css.toStyle(this.box);
          }
        },
        //------------------------------------------------
        theDropStyle: function theDropStyle() {
          return Ti.Css.toStyle({
            "overflow": this.dropOverflow,
            "visibility": this.myDropDockReady ? "visible" : "hidden"
          });
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        notifyCollapse: function notifyCollapse() {
          var escaped = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
          this.$notify("collapse", {
            escaped: escaped
          });
        },
        //------------------------------------------------
        dockDrop: function dockDrop() {
          var _this37 = this;

          var $drop = this.$refs.drop;
          var $box = this.$refs.box; // Guard the elements

          if (!_.isElement($drop) || !_.isElement($box)) {
            return;
          } //............................................
          // If drop opened, make the box position fixed
          // to at the top of mask


          if ("extended" == this.status) {
            // Wait 1ms for drop content done for drawing
            _.delay(function () {
              var r_box = Ti.Rects.createBy($box);
              var r_drop = Ti.Rects.createBy($drop); //..........................................
              // Mark box to fixed position

              _this37.box = _.assign({
                position: "fixed"
              }, r_box.raw()); //..........................................
              // Make drop same width with box

              var dropStyle = {};

              if ("box" == _this37.dropWidth) {
                dropStyle.width = Math.max(r_box.width, r_drop.width);
              } else if (!Ti.Util.isNil(_this37.dropWidth)) {
                // The min drop width
                if (_this37.dropWidth < 0) {
                  dropStyle.width = Math.max(r_box.width, Math.abs(_this37.dropWidth));
                } // Fix drop width
                else {
                    dropStyle.width = _this37.dropWidth;
                  }
              }

              if (!Ti.Util.isNil(_this37.dropHeight)) {
                dropStyle.height = _this37.dropHeight;
              } //..........................................S


              Ti.Dom.setStyle($drop, Ti.Css.toStyle(dropStyle)); //..........................................
              // Dock drop to box

              Ti.Dom.dockTo($drop, $box, {
                space: {
                  y: 2
                }
              }); // Make drop visible

              _.delay(function () {
                _this37.myDropDockReady = true;
              }, 1);
            }, 1); //..........................................

          } //............................................

        },
        //------------------------------------------------
        reDockDrop: function reDockDrop() {
          var _this38 = this;

          this.resetBoxStyle();
          this.$nextTick(function () {
            _this38.dockDrop();
          });
        },
        //------------------------------------------------
        resetBoxStyle: function resetBoxStyle() {
          // Recover the $box width/height
          this.box = {};
          this.myDropDockReady = false;
        },
        //------------------------------------------------
        __ti_shortcut: function __ti_shortcut(uniqKey) {
          if ("ESCAPE" == uniqKey) {
            this.notifyCollapse(true);
          }
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      watch: {
        "status": function status(sta) {
          var _this39 = this;

          this.$nextTick(function () {
            // If collapse, it should clean the box styles
            if ("collapse" == sta) {
              _this39.resetBoxStyle();
            } // try docking
            else {
                _this39.dockDrop();
              }
          });
        }
      },
      ////////////////////////////////////////////////////
      mounted: function mounted() {
        var _this40 = this;

        this.dropOpened = this.autoOpenDrop;
        this.box.width = this.width;
        this.box.height = this.height;
        this.dockDrop();
        Ti.Viewport.watch(this, {
          scroll: function scroll() {
            return _this40.notifyCollapse();
          },
          resize: function resize() {
            return _this40.notifyCollapse();
          }
        });
      },
      ////////////////////////////////////////////////////
      beforeDestroy: function beforeDestroy() {
        Ti.Viewport.unwatch(this);
      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/combo/box/ti-combo-box.mjs", _M);
  })(); //============================================================
  // JOIN: ti/combo/box/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/combo/box/_com.json", {
    "name": "ti-combo-box",
    "globally": true,
    "template": "./ti-combo-box.html",
    "mixins": ["./ti-combo-box.mjs"]
  }); //============================================================
  // JOIN: ti/combo/filter/ti-combo-filter-props.mjs
  //============================================================

  (function () {
    var _M = {
      "form": {
        type: Object,
        "default": null
      },
      "autoCollapse": {
        type: Boolean,
        "default": false
      },
      "statusIcons": {
        type: Object,
        "default": function _default() {
          return {
            collapse: "zmdi-chevron-down",
            extended: "zmdi-chevron-up"
          };
        }
      },
      "autoFocusExtended": {
        type: Boolean,
        "default": true
      },
      "spacing": {
        type: String,
        "default": "tiny",
        validator: function validator(v) {
          return /^(none|comfy|tiny)$/.test(v);
        }
      },
      "dropWidth": {
        type: [Number, String],
        "default": "box"
      },
      "dropHeight": {
        type: [Number, String],
        "default": null
      }
    };
    Ti.Preload("ti/com/ti/combo/filter/ti-combo-filter-props.mjs", _M);
  })(); //============================================================
  // JOIN: ti/combo/filter/ti-combo-filter.html
  //============================================================


  Ti.Preload("ti/com/ti/combo/filter/ti-combo-filter.html", "<div class=\"ti-combo-filter\"\n  :class=\"TopClass\">\n  <!--\n    Marjor type\n  -->\n\n  <!--\n    Filter input box\n  -->\n  <ti-combo-box\n    class=\"as-filter\"\n    :drop-width=\"dropWidth\"\n    :drop-height=\"dropHeight\"\n    :status=\"myDropStatus\"\n    @collapse=\"OnCollapse\"\n    v-ti-activable>\n    <!--\n      Box\n    -->\n    <template v-slot:box>\n      <ti-input \n        v-bind=\"TheInputProps\"\n\n        :value=\"InputValue\"\n        :prefix-icon=\"ThePrefixIcon\"\n        :suffix-icon=\"TheSuffixIcon\"\n\n        @change=\"OnInputChanged\"\n        @input:focus=\"OnInputFocused\"\n        @prefix:icon=\"$notify('prefix:icon')\"\n        @suffix:icon=\"OnClickStatusIcon\"/>\n    </template>\n    <!--\n      Drop\n    -->\n    <template v-slot:drop=\"slotProps\">\n      <ti-form\n        v-bind=\"form\"\n        :data=\"myFormData\"\n        @change=\"OnFormChange\"/>\n    </template>\n  </ti-combo-box>\n  <!--\n    Sorter\n  -->\n</div>"); //============================================================
  // JOIN: ti/combo/filter/ti-combo-filter.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////

      /*
      {
        keyword: "xxx",  -> myFreeValue
        match: {..}      -> myFormData
      }
      */
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          myDropStatus: "collapse",
          myFreeValue: null,
          myFormData: {}
        };
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass({
            "is-enabled": this.isFilterEnabled
          }, "as-spacing-".concat(this.spacing));
        },
        //------------------------------------------------
        isCollapse: function isCollapse() {
          return "collapse" == this.myDropStatus;
        },
        isExtended: function isExtended() {
          return "extended" == this.myDropStatus;
        },
        //------------------------------------------------
        hasForm: function hasForm() {
          return !_.isEmpty(this.form);
        },
        //------------------------------------------------
        isFilterEnabled: function isFilterEnabled() {
          return !_.isEmpty(this.myFreeValue) || !_.isEmpty(this.myFormData);
        },
        //------------------------------------------------
        TheInputProps: function TheInputProps() {
          return _.assign({}, this, {
            autoI18n: this.autoI18n,
            placeholder: this.placeholder
          });
        },
        //------------------------------------------------
        InputValue: function InputValue() {
          return this.myFreeValue;
        },
        //------------------------------------------------
        ThePrefixIcon: function ThePrefixIcon() {
          var icon = this.prefixIcon;
          return icon || "im-filter";
        },
        //------------------------------------------------
        TheSuffixIcon: function TheSuffixIcon() {
          if (this.hasForm) {
            return this.statusIcons[this.myDropStatus];
          }
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        OnCollapse: function OnCollapse() {
          this.doCollapse();
        },
        //-----------------------------------------------
        OnInputChanged: function OnInputChanged(val) {
          this.myFreeValue = val;
          this.myDropStatus = "collapse"; // Clean all

          if (Ti.Util.isNil(val)) {
            this.myFormData = {};
          }

          this.tryNotifyChanged();
        },
        //-----------------------------------------------
        OnInputFocused: function OnInputFocused() {
          if (this.autoFocusExtended && !this.isExtended) {
            this.doExtend();
          }
        },
        //-----------------------------------------------
        OnClickStatusIcon: function OnClickStatusIcon() {
          if (this.isExtended) {
            this.doCollapse();
          } else {
            this.doExtend();
          }
        },
        //-----------------------------------------------
        OnFormChange: function OnFormChange(formData) {
          //console.log("filter form chanaged", formData)
          this.myFormData = formData;
        },
        //-----------------------------------------------
        // Core Methods
        //-----------------------------------------------
        doExtend: function doExtend() {
          var tryReload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

          if (this.hasForm && !this.isExtended) {
            this.myDropStatus = "extended";
          }
        },
        //-----------------------------------------------
        doCollapse: function doCollapse() {
          var _ref19 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              _ref19$escaped = _ref19.escaped,
              escaped = _ref19$escaped === void 0 ? false : _ref19$escaped;

          if (!this.isCollapse) {
            if (!escaped) {
              this.tryNotifyChanged();
            }

            this.myDropStatus = "collapse";
          }
        },
        //-----------------------------------------------
        tryNotifyChanged: function tryNotifyChanged() {
          //console.log("tryNotifyChanged")
          var val = this.genValue();

          if (!_.isEqual(val, this.value)) {
            this.$notify("change", val);
          }
        },
        //-----------------------------------------------
        // Utility
        //-----------------------------------------------
        genValue: function genValue() {
          return {
            keyword: this.myFreeValue,
            match: this.myFormData
          };
        },
        //-----------------------------------------------
        evalMyValue: function evalMyValue() {
          var val = _.assign({}, this.value);

          this.myFreeValue = val.keyword;
          this.myFormData = val.match;
        },
        //-----------------------------------------------
        // Callback
        //-----------------------------------------------
        __ti_shortcut: function __ti_shortcut(uniqKey) {
          //console.log("ti-combo-filter", uniqKey)
          //....................................
          if ("ESCAPE" == uniqKey) {
            this.doCollapse({
              escaped: true
            });
            return {
              prevent: true,
              stop: true,
              quit: true
            };
          } //....................................


          if ("ARROWDOWN" == uniqKey) {
            this.doExtend();
            return;
          } //....................................


          if ("ARROWUP" == uniqKey) {
            this.doCollapse();
            return;
          } // //....................................
          // // If droplist is actived, should collapse it
          // if("ENTER" == uniqKey) {
          //   this.doCollapse()
          //   return {stop:true, quit:true}
          // }
          //....................................

        } //-----------------------------------------------

      },
      ////////////////////////////////////////////////////
      watch: {
        //-----------------------------------------------
        "value": {
          handler: "evalMyValue",
          immediate: true
        } //-----------------------------------------------

      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/combo/filter/ti-combo-filter.mjs", _M);
  })(); //============================================================
  // JOIN: ti/combo/filter/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/combo/filter/_com.json", {
    "name": "ti-combo-filter",
    "globally": true,
    "template": "./ti-combo-filter.html",
    "props": ["@com:ti/input/ti-input-props.mjs", "@com:ti/combo/filter/ti-combo-filter-props.mjs"],
    "mixins": "./ti-combo-filter.mjs",
    "components": ["@com:ti/form", "@com:ti/combo/sorter"]
  }); //============================================================
  // JOIN: ti/combo/input/ti-combo-input-props.mjs
  //============================================================

  (function () {
    var _M = {
      //-----------------------------------
      // Data
      //-----------------------------------
      "options": {
        type: [String, Array, Function, Ti.Dict],
        "default": function _default() {
          return [];
        }
      },
      "valueBy": {
        type: [String, Function],
        "default": undefined
      },
      "textBy": {
        type: [String, Function],
        "default": undefined
      },
      "iconeBy": {
        type: [String, Function],
        "default": undefined
      },
      "childrenBy": {
        type: [String, Function],
        "default": undefined
      },
      //-----------------------------------
      // Behavior
      //-----------------------------------
      "dropComType": {
        type: String,
        "default": undefined
      },
      "dropComConf": {
        type: Object,
        "default": undefined
      },
      "mustInList": {
        type: Boolean,
        "default": false
      },
      "autoFocusExtended": {
        type: Boolean,
        "default": true
      },
      "filter": {
        type: Boolean,
        "default": true
      },
      "delay": {
        type: Number,
        "default": 800
      },
      //-----------------------------------
      // Aspect
      //-----------------------------------
      "statusIcons": {
        type: Object,
        "default": function _default() {
          return {
            collapse: "zmdi-chevron-down",
            extended: "zmdi-chevron-up"
          };
        }
      },
      "dropDisplay": {
        type: [Object, String, Array],
        "default": undefined
      },
      "dropItemBorder": {
        type: Boolean,
        "default": true
      },
      //-----------------------------------
      // Measure
      //-----------------------------------
      "keepWidthWhenDrop": {
        type: Boolean,
        "default": undefined
      },
      "dropWidth": {
        type: [Number, String],
        "default": "box"
      },
      "dropHeight": {
        type: [Number, String],
        "default": null
      }
    };
    Ti.Preload("ti/com/ti/combo/input/ti-combo-input-props.mjs", _M);
  })(); //============================================================
  // JOIN: ti/combo/input/ti-combo-input.html
  //============================================================


  Ti.Preload("ti/com/ti/combo/input/ti-combo-input.html", "<ti-combo-box \n  class=\"ti-combo-input full-field\"\n  :class=\"TopClass\"\n  :keep-width-when-drop=\"keepWidthWhenDrop\"\n  :drop-width=\"dropWidth\"\n  :drop-height=\"dropHeight\"\n  :status=\"myDropStatus\"\n  @collapse=\"OnCollapse\"\n  v-ti-activable>\n  <!--\n    Box\n  -->\n  <template v-slot:box>\n    <ti-input \n      v-bind=\"TheInputProps\"\n\n      :value=\"InputValue\"\n      :prefix-icon=\"ThePrefixIcon\"\n      :suffix-icon=\"TheSuffixIcon\"\n\n      @change=\"OnInputChanged\"\n      @inputing=\"OnInputInputing\"\n      @input:focus=\"OnInputFocused\"\n      @prefix:icon=\"$notify('prefix:icon')\"\n      @suffix:icon=\"OnClickStatusIcon\"/>\n  </template>\n  <!--\n    Drop\n  -->\n  <template v-slot:drop=\"slotProps\">\n    <component \n      :is=\"DropComType\"\n      class=\"ti-fill-parent\"\n      blank-class=\"as-mid-tip\"\n      v-bind=\"DropComConf\"\n      :on-init=\"OnDropListInit\"\n      @select=\"OnDropListSelected\"/>\n  </template>\n</ti-combo-box>"); //============================================================
  // JOIN: ti/combo/input/ti-combo-input.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          myDropStatus: "collapse",
          myItem: null,
          myFreeValue: null,
          myFilterValue: null,
          myOptionsData: null,
          myCurrentId: null,
          myCheckedIds: {},
          myOldValue: undefined,
          myDict: undefined,
          loading: false
        };
      },
      ////////////////////////////////////////////////////
      props: {
        "canInput": {
          type: Boolean,
          "default": true
        },
        "autoCollapse": {
          type: Boolean,
          "default": false
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        isCollapse: function isCollapse() {
          return "collapse" == this.myDropStatus;
        },
        isExtended: function isExtended() {
          return "extended" == this.myDropStatus;
        },
        //------------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //------------------------------------------------
        TheInputProps: function TheInputProps() {
          return _.assign({}, this, {
            readonly: !this.canInput || this.readonly,
            autoI18n: this.autoI18n,
            placeholder: this.placeholder,
            hover: this.hover,
            prefixIconForClean: this.prefixIconForClean
          });
        },
        //------------------------------------------------
        InputValue: function InputValue() {
          if (!Ti.Util.isNil(this.myFilterValue)) {
            return this.myFilterValue;
          }

          if (this.myItem) {
            return this.Dict.getText(this.myItem) || this.Dict.getValue(this.myItem);
          }

          return this.myFreeValue;
        },
        //------------------------------------------------
        GetValueBy: function GetValueBy() {
          var _this41 = this;

          return function (it) {
            return _this41.Dict.getValue(it);
          };
        },
        //------------------------------------------------
        ThePrefixIcon: function ThePrefixIcon() {
          if (this.loading) {
            return "zmdi-settings zmdi-hc-spin";
          }

          var icon = this.prefixIcon;

          if (this.myItem) {
            icon = this.Dict.getIcon(this.myItem) || icon;
          }

          return icon || "zmdi-minus";
        },
        //------------------------------------------------
        TheSuffixIcon: function TheSuffixIcon() {
          return this.statusIcons[this.myDropStatus];
        },
        //------------------------------------------------
        DropComType: function DropComType() {
          return this.dropComType || "ti-list";
        },
        DropComConf: function DropComConf() {
          return _.assign({
            display: this.dropDisplay || "text",
            border: this.dropItemBorder
          }, this.dropComConf, {
            data: this.myOptionsData,
            currentId: this.myCurrentId,
            checkedIds: this.myCheckedIds,
            idBy: this.GetValueBy,
            multi: false,
            hoverable: true,
            checkable: false,
            autoCheckCurrent: true
          });
        },
        //------------------------------------------------
        Dict: function Dict() {
          if (!this.myDict) {
            this.myDict = this.createDict();
          }

          return this.myDict;
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //-----------------------------------------------
        OnDropListInit: function OnDropListInit($dropList) {
          this.$dropList = $dropList;
        },
        //------------------------------------------------
        OnCollapse: function OnCollapse() {
          this.doCollapse();
        },
        //-----------------------------------------------
        OnInputInputing: function OnInputInputing(val) {
          if (this.filter) {
            this.myFilterValue = val; // Auto extends

            if (this.autoFocusExtended) {
              if (!this.isExtended) {
                this.doExtend(false);
              }
            } // Reload options data


            if (this.isExtended) {
              this.debReload();
            }
          }
        },
        //-----------------------------------------------
        OnInputChanged: function OnInputChanged(val, byKeyboardArrow) {
          var _this42 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {
            var it;
            return regeneratorRuntime.wrap(function _callee18$(_context18) {
              while (1) {
                switch (_context18.prev = _context18.next) {
                  case 0:
                    //console.log("haha")
                    // Clean filter
                    _this42.myFilterValue = null; // Clean

                    if (val) {
                      _context18.next = 8;
                      break;
                    }

                    _this42.myItem = null;
                    _this42.myFreeValue = null;
                    _this42.myCheckedIds = {};
                    _this42.myCurrentId = null;
                    _context18.next = 12;
                    break;

                  case 8:
                    _context18.next = 10;
                    return _this42.Dict.getItem(val);

                  case 10:
                    it = _context18.sent;

                    // Matched tag
                    if (it) {
                      _this42.myItem = it;
                      _this42.myFreeValue = null;
                    } else if (!_this42.mustInList) {
                      _this42.myItem = null;
                      _this42.myFreeValue = val;
                    }

                  case 12:
                    if (!byKeyboardArrow) _this42.tryNotifyChanged();

                  case 13:
                  case "end":
                    return _context18.stop();
                }
              }
            }, _callee18);
          }))();
        },
        //-----------------------------------------------
        OnInputFocused: function OnInputFocused() {
          var _this43 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
            return regeneratorRuntime.wrap(function _callee19$(_context19) {
              while (1) {
                switch (_context19.prev = _context19.next) {
                  case 0:
                    if (!(_this43.autoFocusExtended && !_this43.isExtended)) {
                      _context19.next = 3;
                      break;
                    }

                    _context19.next = 3;
                    return _this43.doExtend();

                  case 3:
                  case "end":
                    return _context19.stop();
                }
              }
            }, _callee19);
          }))();
        },
        //-----------------------------------------------
        OnClickStatusIcon: function OnClickStatusIcon() {
          var _this44 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20() {
            return regeneratorRuntime.wrap(function _callee20$(_context20) {
              while (1) {
                switch (_context20.prev = _context20.next) {
                  case 0:
                    if (!_this44.isExtended) {
                      _context20.next = 5;
                      break;
                    }

                    _context20.next = 3;
                    return _this44.doCollapse();

                  case 3:
                    _context20.next = 7;
                    break;

                  case 5:
                    _context20.next = 7;
                    return _this44.doExtend();

                  case 7:
                  case "end":
                    return _context20.stop();
                }
              }
            }, _callee20);
          }))();
        },
        //-----------------------------------------------
        OnDropListSelected: function OnDropListSelected() {
          var _arguments4 = arguments,
              _this45 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21() {
            var _ref20, currentId, byKeyboardArrow;

            return regeneratorRuntime.wrap(function _callee21$(_context21) {
              while (1) {
                switch (_context21.prev = _context21.next) {
                  case 0:
                    _ref20 = _arguments4.length > 0 && _arguments4[0] !== undefined ? _arguments4[0] : {}, currentId = _ref20.currentId, byKeyboardArrow = _ref20.byKeyboardArrow;
                    //console.log({currentId, byKeyboardArrow})
                    _this45.myCurrentId = currentId;
                    _context21.next = 4;
                    return _this45.OnInputChanged(currentId, byKeyboardArrow);

                  case 4:
                    if (!(_this45.autoCollapse && !byKeyboardArrow)) {
                      _context21.next = 7;
                      break;
                    }

                    _context21.next = 7;
                    return _this45.doCollapse({
                      escaped: true
                    });

                  case 7:
                  case "end":
                    return _context21.stop();
                }
              }
            }, _callee21);
          }))();
        },
        //-----------------------------------------------
        // Core Methods
        //-----------------------------------------------
        doExtend: function doExtend() {
          var _arguments5 = arguments,
              _this46 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22() {
            var tryReload;
            return regeneratorRuntime.wrap(function _callee22$(_context22) {
              while (1) {
                switch (_context22.prev = _context22.next) {
                  case 0:
                    tryReload = _arguments5.length > 0 && _arguments5[0] !== undefined ? _arguments5[0] : true;
                    _this46.myOldValue = _this46.evalMyValue(); // Try reload options again

                    if (!(tryReload && _.isEmpty(_this46.myOptionsData))) {
                      _context22.next = 5;
                      break;
                    }

                    _context22.next = 5;
                    return _this46.reloadMyOptionData(true);

                  case 5:
                    _this46.$nextTick(function () {
                      _this46.myDropStatus = "extended";
                    });

                  case 6:
                  case "end":
                    return _context22.stop();
                }
              }
            }, _callee22);
          }))();
        },
        //-----------------------------------------------
        doCollapse: function doCollapse() {
          var _arguments6 = arguments,
              _this47 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23() {
            var _ref21, _ref21$escaped, escaped;

            return regeneratorRuntime.wrap(function _callee23$(_context23) {
              while (1) {
                switch (_context23.prev = _context23.next) {
                  case 0:
                    _ref21 = _arguments6.length > 0 && _arguments6[0] !== undefined ? _arguments6[0] : {}, _ref21$escaped = _ref21.escaped, escaped = _ref21$escaped === void 0 ? false : _ref21$escaped;

                    if (escaped) {
                      _this47.evalMyItem(_this47.myOldValue);
                    } // Try notify
                    else {
                        _this47.tryNotifyChanged();
                      }

                    _this47.myDropStatus = "collapse";
                    _this47.myOldValue = undefined;

                  case 4:
                  case "end":
                    return _context23.stop();
                }
              }
            }, _callee23);
          }))();
        },
        //-----------------------------------------------
        tryNotifyChanged: function tryNotifyChanged() {
          var val = this.evalMyValue(); //console.log("tryNotifyChanged", val)

          if (!_.isEqual(val, this.value)) {
            this.$notify("change", val);
          }
        },
        //-----------------------------------------------
        // Utility
        //-----------------------------------------------
        evalMyValue: function evalMyValue() {
          var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.myItem;
          var freeValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.myFreeValue;

          //console.log("evalMyValue", item, freeValue)
          // Item
          if (item) {
            return this.Dict.getValue(item);
          } // Ignore free values


          return this.mustInList ? null : freeValue;
        },
        //-----------------------------------------------
        evalMyItem: function evalMyItem() {
          var _arguments7 = arguments,
              _this48 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24() {
            var val, it, itV;
            return regeneratorRuntime.wrap(function _callee24$(_context24) {
              while (1) {
                switch (_context24.prev = _context24.next) {
                  case 0:
                    val = _arguments7.length > 0 && _arguments7[0] !== undefined ? _arguments7[0] : _this48.value;
                    _context24.next = 3;
                    return _this48.Dict.getItem(val);

                  case 3:
                    it = _context24.sent;

                    //console.log("evalMyItem", val)
                    if (_.isArray(it)) {
                      console.error("!!!!!!! kao ~~~~~~~");
                      it = null;
                    } // Update state


                    if (it) {
                      itV = _this48.Dict.getValue(it);
                      _this48.myItem = it;
                      _this48.myFreeValue = null;
                      _this48.myCurrentId = itV;
                      _this48.myCheckedIds = _defineProperty({}, itV, true);
                    } // Clean
                    else {
                        _this48.myItem = null;
                        _this48.myFreeValue = _this48.mustInList ? null : val;
                        _this48.myCurrentId = null;
                        _this48.myCheckedIds = {};
                      }

                  case 6:
                  case "end":
                    return _context24.stop();
                }
              }
            }, _callee24);
          }))();
        },
        //------------------------------------------------
        createDict: function createDict() {
          var _this49 = this;

          // Customized
          if (this.options instanceof Ti.Dict) {
            return this.options;
          } // Refer dict


          if (_.isString(this.options)) {
            var dictName = Ti.DictFactory.DictReferName(this.options);

            if (dictName) {
              return Ti.DictFactory.CheckDict(dictName, function (_ref22) {
                var loading = _ref22.loading;
                _this49.loading = loading;
              });
            }
          } // Auto Create


          return Ti.DictFactory.CreateDict({
            data: this.options,
            getValue: Ti.Util.genGetter(this.valueBy || "value"),
            getText: Ti.Util.genGetter(this.textBy || "text|name"),
            getIcon: Ti.Util.genGetter(this.iconBy || "icon")
          });
        },
        //-----------------------------------------------
        reloadMyOptionData: function reloadMyOptionData() {
          var _arguments8 = arguments,
              _this50 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25() {
            var force, list;
            return regeneratorRuntime.wrap(function _callee25$(_context25) {
              while (1) {
                switch (_context25.prev = _context25.next) {
                  case 0:
                    force = _arguments8.length > 0 && _arguments8[0] !== undefined ? _arguments8[0] : false;

                    if (!(force || _this50.isExtended)) {
                      _context25.next = 8;
                      break;
                    }

                    _context25.next = 4;
                    return _this50.Dict.queryData(_this50.myFilterValue);

                  case 4:
                    list = _context25.sent;
                    _this50.myOptionsData = list;
                    _context25.next = 9;
                    break;

                  case 8:
                    _this50.myOptionsData = [];

                  case 9:
                  case "end":
                    return _context25.stop();
                }
              }
            }, _callee25);
          }))();
        },
        //-----------------------------------------------
        // Callback
        //-----------------------------------------------
        __ti_shortcut: function __ti_shortcut(uniqKey) {
          //console.log("ti-combo-multi-input", uniqKey)
          //....................................
          if ("ESCAPE" == uniqKey) {
            this.doCollapse({
              escaped: true
            });
            return {
              prevent: true,
              stop: true,
              quit: true
            };
          } //....................................
          // If droplist is actived, should collapse it


          if ("ENTER" == uniqKey) {
            //if(this.$dropList && this.$dropList.isActived) {
            this.doCollapse();
            return {
              stop: true,
              quit: false
            }; //}
          } //....................................


          if ("ARROWUP" == uniqKey) {
            if (this.$dropList) {
              this.$dropList.selectPrevRow({
                payload: {
                  byKeyboardArrow: true
                }
              });
            }

            return {
              prevent: true,
              stop: true,
              quit: true
            };
          } //....................................


          if ("ARROWDOWN" == uniqKey) {
            if (this.$dropList && this.isExtended) {
              this.$dropList.selectNextRow({
                payload: {
                  byKeyboardArrow: true
                }
              });
            } else {
              this.doExtend();
            }

            return {
              prevent: true,
              stop: true,
              quit: true
            };
          }
        } //-----------------------------------------------

      },
      ////////////////////////////////////////////////////
      watch: {
        //-----------------------------------------------
        "value": {
          handler: function handler() {
            var _this51 = this;

            this.$nextTick(function () {
              _this51.evalMyItem();
            });
          },
          immediate: true
        },
        //-----------------------------------------------
        "options": function options(newval, oldval) {
          var _this52 = this;

          if (!_.isEqual(newval, oldval)) {
            this.myDict = this.createDict();
            this.myOptionsData = [];

            if (this.isExtended) {
              this.$nextTick(function () {
                _this52.reloadMyOptionData(true);
              });
            }
          }
        } //-----------------------------------------------

      },
      ////////////////////////////////////////////////////
      created: function created() {
        var _this53 = this;

        this.debReload = _.debounce(function (val) {
          _this53.reloadMyOptionData();
        }, this.delay);
      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/combo/input/ti-combo-input.mjs", _M);
  })(); //============================================================
  // JOIN: ti/combo/input/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/combo/input/_com.json", {
    "name": "ti-combo-input",
    "globally": true,
    "template": "./ti-combo-input.html",
    "props": ["@com:ti/input/ti-input-props.mjs", "./ti-combo-input-props.mjs"],
    "mixins": "./ti-combo-input.mjs",
    "components": ["@com:ti/combo/box"]
  }); //============================================================
  // JOIN: ti/combo/multi-input/ti-combo-multi-input.html
  //============================================================

  Ti.Preload("ti/com/ti/combo/multi-input/ti-combo-multi-input.html", "<ti-combo-box \n  class=\"ti-combo-multi-input full-field\"\n  :class=\"TopClass\"\n  :drop-width=\"dropWidth\"\n  :drop-height=\"dropHeight\"\n  :status=\"myDropStatus\"\n  @collapse=\"OnCollapse\"\n  v-ti-activable>\n  <!--\n    Box\n  -->\n  <template v-slot:box>\n    <ti-input-tags\n      :input-value=\"myFilterValue\"\n      :value=\"InputTagValues\"\n      :value-case=\"valueCase\"\n      :trimed=\"trimed\"\n        :max-value-len=\"maxValueLen\"\n        :value-unique=\"valueUnique\"\n        :tag-options=\"tagOptions\"\n        :tag-mapping=\"tagMapping\"\n\n      :readonly=\"readonly\"\n      :focused=\"focused\"\n      :hover=\"hover\"\n      :auto-select=\"autoSelect\"\n        :can-input=\"canInput\"\n        :cancel-tag-bubble=\"cancelTagBubble\"\n\n      :placeholder=\"placeholder\"\n      :hide-border=\"hideBorder\"\n      :prefix-icon=\"prefixIcon\"\n      :prefix-hover-icon=\"prefixHoverIcon\"\n      :prefix-icon-for-clean=\"prefixIconForClean\"\n      :prefix-text=\"prefixText\"\n      :suffix-icon=\"TheSuffixIcon\"\n      :suffix-text=\"suffixText\"\n        :tag-item-icon-by=\"tagItemIconBy\"\n        :tag-item-default-icon=\"tagItemDefaultIcon\"\n        :tag-option-default-icon=\"tagOptionDefaultIcon\"\n      \n      :width=\"width\"\n      :height=\"height\"\n\n      :input-change=\"OnInputChanged\"\n\n      @inputing=\"OnInputInputing\"\n      @input:focus=\"OnInputFocused\"\n      @change=\"OnTagListChanged\"\n      @prefix:icon=\"$notify('prefix:icon')\"\n      @suffix:icon=\"OnClickStatusIcon\"/>\n  </template>\n  <!--\n    Drop\n  -->\n  <template v-slot:drop>\n    <component class=\"ti-fill-parent\"\n      :is=\"DropComType\"\n      blank-class=\"as-mid-tip\"\n      v-bind=\"DropComConf\"\n      :on-init=\"OnDropListInit\"\n      @select=\"OnDropListSelected\"/>\n  </template>\n</ti-combo-box>"); //============================================================
  // JOIN: ti/combo/multi-input/ti-combo-multi-input.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          myDropStatus: "collapse",
          myTags: [],
          myFreeValues: [],
          myFilterValue: null,
          myOptionsData: [],
          myCurrentId: null,
          myCheckedIds: {},
          myOldValue: undefined,
          myDict: undefined,
          loading: false
        };
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        isCollapse: function isCollapse() {
          return "collapse" == this.myDropStatus;
        },
        isExtended: function isExtended() {
          return "extended" == this.myDropStatus;
        },
        //------------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //------------------------------------------------
        Values: function Values() {
          return Ti.S.toArray(this.value);
        },
        //------------------------------------------------
        InputTagValues: function InputTagValues() {
          return _.concat(this.myTags, this.myFreeValues);
        },
        //------------------------------------------------
        GetValueBy: function GetValueBy() {
          var _this54 = this;

          return function (it) {
            return _this54.Dict.getValue(it);
          };
        },
        //------------------------------------------------
        TheSuffixIcon: function TheSuffixIcon() {
          return this.statusIcons[this.myDropStatus];
        },
        //------------------------------------------------
        DropComType: function DropComType() {
          return this.dropComType || "ti-list";
        },
        DropComConf: function DropComConf() {
          return _.assign({
            display: this.dropDisplay || "text",
            border: this.dropItemBorder
          }, this.dropComConf, {
            data: this.myOptionsData,
            currentId: this.myCurrentId,
            checkedIds: this.myCheckedIds,
            idBy: this.GetValueBy,
            multi: true,
            hoverable: true,
            checkable: true,
            autoCheckCurrent: false
          });
        },
        //------------------------------------------------
        Dict: function Dict() {
          if (!this.myDict) {
            this.myDict = this.createDict();
          }

          return this.myDict;
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        OnDropListInit: function OnDropListInit($dropList) {
          this.$dropList = $dropList;
        },
        //------------------------------------------------
        OnCollapse: function OnCollapse() {
          var _this55 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26() {
            return regeneratorRuntime.wrap(function _callee26$(_context26) {
              while (1) {
                switch (_context26.prev = _context26.next) {
                  case 0:
                    _this55.doCollapse();

                  case 1:
                  case "end":
                    return _context26.stop();
                }
              }
            }, _callee26);
          }))();
        },
        //------------------------------------------------
        OnInputInputing: function OnInputInputing(val) {
          if (this.filter) {
            this.myFilterValue = val;
            this.debReload();
          }
        },
        //------------------------------------------------
        OnInputChanged: function OnInputChanged(val) {
          var _this56 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27() {
            var _iterator16, _step16, tag, tagV, it;

            return regeneratorRuntime.wrap(function _callee27$(_context27) {
              while (1) {
                switch (_context27.prev = _context27.next) {
                  case 0:
                    // Clean filter
                    _this56.myFilterValue = null; // Uniq 

                    if (!_this56.valueUnique) {
                      _context27.next = 22;
                      break;
                    }

                    if (!(_.indexOf(_this56.myFreeValues, val) >= 0)) {
                      _context27.next = 4;
                      break;
                    }

                    return _context27.abrupt("return");

                  case 4:
                    _iterator16 = _createForOfIteratorHelper(_this56.myTags);
                    _context27.prev = 5;

                    _iterator16.s();

                  case 7:
                    if ((_step16 = _iterator16.n()).done) {
                      _context27.next = 14;
                      break;
                    }

                    tag = _step16.value;
                    tagV = _this56.Dict.getValue(tag);

                    if (!(tagV == val)) {
                      _context27.next = 12;
                      break;
                    }

                    return _context27.abrupt("return");

                  case 12:
                    _context27.next = 7;
                    break;

                  case 14:
                    _context27.next = 19;
                    break;

                  case 16:
                    _context27.prev = 16;
                    _context27.t0 = _context27["catch"](5);

                    _iterator16.e(_context27.t0);

                  case 19:
                    _context27.prev = 19;

                    _iterator16.f();

                    return _context27.finish(19);

                  case 22:
                    _context27.next = 24;
                    return _this56.Dict.getItem(val);

                  case 24:
                    it = _context27.sent;

                    // Matched tag
                    if (it) {
                      _this56.myTags.push(it);
                    } // Join to free value
                    else if (val && !_this56.mustInList) {
                        _this56.myFreeValues.push(val);
                      }

                    _this56.tryNotifyChanged();

                  case 27:
                  case "end":
                    return _context27.stop();
                }
              }
            }, _callee27, null, [[5, 16, 19, 22]]);
          }))();
        },
        //-----------------------------------------------
        OnInputFocused: function OnInputFocused() {
          var _this57 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28() {
            return regeneratorRuntime.wrap(function _callee28$(_context28) {
              while (1) {
                switch (_context28.prev = _context28.next) {
                  case 0:
                    if (!(_this57.autoFocusExtended && !_this57.isExtended)) {
                      _context28.next = 3;
                      break;
                    }

                    _context28.next = 3;
                    return _this57.doExtend();

                  case 3:
                  case "end":
                    return _context28.stop();
                }
              }
            }, _callee28);
          }))();
        },
        //-----------------------------------------------
        OnTagListChanged: function OnTagListChanged() {
          var _arguments9 = arguments,
              _this58 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29() {
            var vals;
            return regeneratorRuntime.wrap(function _callee29$(_context29) {
              while (1) {
                switch (_context29.prev = _context29.next) {
                  case 0:
                    vals = _arguments9.length > 0 && _arguments9[0] !== undefined ? _arguments9[0] : [];
                    _context29.next = 3;
                    return _this58.evalMyTags(vals);

                  case 3:
                    _this58.tryNotifyChanged();

                  case 4:
                  case "end":
                    return _context29.stop();
                }
              }
            }, _callee29);
          }))();
        },
        //-----------------------------------------------
        OnClickStatusIcon: function OnClickStatusIcon() {
          var _this59 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee30() {
            return regeneratorRuntime.wrap(function _callee30$(_context30) {
              while (1) {
                switch (_context30.prev = _context30.next) {
                  case 0:
                    if (!_this59.isExtended) {
                      _context30.next = 4;
                      break;
                    }

                    _this59.doCollapse();

                    _context30.next = 6;
                    break;

                  case 4:
                    _context30.next = 6;
                    return _this59.doExtend();

                  case 6:
                  case "end":
                    return _context30.stop();
                }
              }
            }, _callee30);
          }))();
        },
        //-----------------------------------------------
        OnDropListSelected: function OnDropListSelected() {
          var _arguments10 = arguments,
              _this60 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee31() {
            var _ref23, currentId, checkedIds, vals;

            return regeneratorRuntime.wrap(function _callee31$(_context31) {
              while (1) {
                switch (_context31.prev = _context31.next) {
                  case 0:
                    _ref23 = _arguments10.length > 0 && _arguments10[0] !== undefined ? _arguments10[0] : {}, currentId = _ref23.currentId, checkedIds = _ref23.checkedIds;
                    _this60.myCurrentId = currentId;
                    _this60.myCheckedIds = checkedIds;
                    vals = Ti.Util.truthyKeys(checkedIds);
                    _context31.next = 6;
                    return _this60.evalMyTags(_.concat(vals, _this60.myFreeValues));

                  case 6:
                    _this60.tryNotifyChanged();

                  case 7:
                  case "end":
                    return _context31.stop();
                }
              }
            }, _callee31);
          }))();
        },
        //-----------------------------------------------
        // Core Methods
        //-----------------------------------------------
        doExtend: function doExtend() {
          var _this61 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee32() {
            return regeneratorRuntime.wrap(function _callee32$(_context32) {
              while (1) {
                switch (_context32.prev = _context32.next) {
                  case 0:
                    _this61.myOldValue = _this61.evalMyValues(); // Try reload options again

                    if (!_.isEmpty(_this61.myOptionsData)) {
                      _context32.next = 4;
                      break;
                    }

                    _context32.next = 4;
                    return _this61.reloadMyOptionData(true);

                  case 4:
                    _this61.$nextTick(function () {
                      _this61.myDropStatus = "extended";
                    });

                  case 5:
                  case "end":
                    return _context32.stop();
                }
              }
            }, _callee32);
          }))();
        },
        //-----------------------------------------------
        doCollapse: function doCollapse() {
          var _ref24 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              _ref24$escaped = _ref24.escaped,
              escaped = _ref24$escaped === void 0 ? false : _ref24$escaped;

          if (escaped) {
            this.$notify("change", this.myOldValue);
          }

          this.myDropStatus = "collapse";
          this.myOldValue = undefined;
        },
        //-----------------------------------------------
        tryNotifyChanged: function tryNotifyChanged() {
          var escaped = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
          var vals = this.evalMyValues();

          if (!escaped && !_.isEqual(vals, this.Values)) {
            this.$notify("change", vals);
          }
        },
        //-----------------------------------------------
        // Utility
        //-----------------------------------------------
        evalMyValues: function evalMyValues() {
          var _this62 = this;

          var tags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.myTags;
          var freeValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.myFreeValues;
          var vals = []; // Tags

          _.forEach(tags, function (tag) {
            var v = _this62.Dict.getValue(tag);

            if (!Ti.Util.isNil(v)) {
              vals.push(v);
            } else if (!_this62.mustInList) {
              vals.push(tag);
            }
          }); // Ignore free values


          if (this.mustInList || _.isEmpty(freeValues)) {
            return vals;
          } // Join free values


          return _.concat(vals, freeValues);
        },
        //-----------------------------------------------
        evalMyTags: function evalMyTags() {
          var _arguments11 = arguments,
              _this63 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee33() {
            var vals, tags, ids, frees, _iterator17, _step17, v, tag;

            return regeneratorRuntime.wrap(function _callee33$(_context33) {
              while (1) {
                switch (_context33.prev = _context33.next) {
                  case 0:
                    vals = _arguments11.length > 0 && _arguments11[0] !== undefined ? _arguments11[0] : _this63.value;
                    vals = Ti.S.toArray(vals);
                    tags = [];
                    ids = {};
                    frees = [];
                    _iterator17 = _createForOfIteratorHelper(vals);
                    _context33.prev = 6;

                    _iterator17.s();

                  case 8:
                    if ((_step17 = _iterator17.n()).done) {
                      _context33.next = 16;
                      break;
                    }

                    v = _step17.value;
                    _context33.next = 12;
                    return _this63.Dict.getItem(v);

                  case 12:
                    tag = _context33.sent;

                    if (tag) {
                      tags.push(tag);
                      ids[v] = true;
                    } else {
                      frees.push(v);
                    }

                  case 14:
                    _context33.next = 8;
                    break;

                  case 16:
                    _context33.next = 21;
                    break;

                  case 18:
                    _context33.prev = 18;
                    _context33.t0 = _context33["catch"](6);

                    _iterator17.e(_context33.t0);

                  case 21:
                    _context33.prev = 21;

                    _iterator17.f();

                    return _context33.finish(21);

                  case 24:
                    _this63.myTags = tags;
                    _this63.myFreeValues = frees;
                    _this63.myCheckedIds = ids;

                  case 27:
                  case "end":
                    return _context33.stop();
                }
              }
            }, _callee33, null, [[6, 18, 21, 24]]);
          }))();
        },
        //------------------------------------------------
        createDict: function createDict() {
          var _this64 = this;

          // Customized
          if (this.options instanceof Ti.Dict) {
            return this.options;
          } // Refer dict


          if (_.isString(this.options)) {
            var dictName = Ti.DictFactory.DictReferName(this.options);

            if (dictName) {
              return Ti.DictFactory.CheckDict(dictName, function (_ref25) {
                var loading = _ref25.loading;
                _this64.loading = loading;
              });
            }
          } // Auto Create


          return Ti.DictFactory.CreateDict({
            data: this.options,
            getValue: Ti.Util.genGetter(this.valueBy || "value"),
            getText: Ti.Util.genGetter(this.textBy || "text|name"),
            getIcon: Ti.Util.genGetter(this.iconBy || "icon")
          });
        },
        //-----------------------------------------------
        reloadMyOptionData: function reloadMyOptionData() {
          var _arguments12 = arguments,
              _this65 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee34() {
            var force;
            return regeneratorRuntime.wrap(function _callee34$(_context34) {
              while (1) {
                switch (_context34.prev = _context34.next) {
                  case 0:
                    force = _arguments12.length > 0 && _arguments12[0] !== undefined ? _arguments12[0] : false;

                    if (!(force || _this65.isExtended)) {
                      _context34.next = 7;
                      break;
                    }

                    _context34.next = 4;
                    return _this65.Dict.queryData(_this65.myFilterValue);

                  case 4:
                    _this65.myOptionsData = _context34.sent;
                    _context34.next = 8;
                    break;

                  case 7:
                    _this65.myOptionsData = [];

                  case 8:
                  case "end":
                    return _context34.stop();
                }
              }
            }, _callee34);
          }))();
        },
        //-----------------------------------------------
        // Callback
        //-----------------------------------------------
        __ti_shortcut: function __ti_shortcut(uniqKey) {
          //console.log("ti-combo-multi-input", uniqKey)
          //....................................
          if ("ESCAPE" == uniqKey) {
            this.doCollapse({
              escaped: true
            });
            return {
              prevent: true,
              stop: true,
              quit: true
            };
          } //....................................
          // If droplist is actived, should collapse it


          if ("ENTER" == uniqKey) {
            if (this.$dropList && this.$dropList.isActived) {
              this.doCollapse();
              return {
                stop: true,
                quit: true
              };
            }
          } //....................................


          if ("ARROWUP" == uniqKey) {
            if (this.$dropList) {
              this.$dropList.selectPrevRow({
                payload: {
                  byKeyboardArrow: true
                }
              });
            }

            return {
              prevent: true,
              stop: true,
              quit: true
            };
          } //....................................


          if ("ARROWDOWN" == uniqKey) {
            if (this.$dropList && this.isExtended) {
              this.$dropList.selectNextRow({
                payload: {
                  byKeyboardArrow: true
                }
              });
            } else {
              this.doExtend();
            }

            return {
              prevent: true,
              stop: true,
              quit: true
            };
          }
        } //-----------------------------------------------

      },
      ////////////////////////////////////////////////////
      watch: {
        //-----------------------------------------------
        "value": {
          handler: "evalMyTags",
          immediate: true
        },
        //-----------------------------------------------
        "options": function options(newval, oldval) {
          var _this66 = this;

          if (!_.isEqual(newval, oldval)) {
            this.myDict = this.createDict();
            this.myOptionsData = [];

            if (this.isExtended) {
              this.$nextTick(function () {
                _this66.reloadMyOptionData(true);
              });
            }
          }
        } //-----------------------------------------------

      },
      ////////////////////////////////////////////////////
      created: function created() {
        var _this67 = this;

        this.debReload = _.debounce(function (val) {
          _this67.reloadMyOptionData();
        }, this.delay);
      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/combo/multi-input/ti-combo-multi-input.mjs", _M);
  })(); //============================================================
  // JOIN: ti/combo/multi-input/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/combo/multi-input/_com.json", {
    "name": "ti-combo-multi-input",
    "globally": true,
    "template": "./ti-combo-multi-input.html",
    "props": ["@com:ti/input/ti-input-props.mjs", "@com:ti/input/tags/ti-input-tags-props.mjs", "@com:ti/combo/input/ti-combo-input-props.mjs"],
    "mixins": ["./ti-combo-multi-input.mjs"],
    "components": ["@com:ti/combo/box"]
  }); //============================================================
  // JOIN: ti/combo/pair-auto/ti-combo-pair-auto-props.mjs
  //============================================================

  (function () {
    var _M = {
      //-----------------------------------
      // Data
      //-----------------------------------
      "value": {
        type: Object,
        "default": undefined
      },
      "group": {
        type: Boolean,
        "default": true
      },
      "fields": {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      "onlyFields": {
        type: Boolean,
        "default": true
      },
      // merge each time data change
      "fixed": {
        type: Object,
        "default": undefined
      },
      //-----------------------------------
      // Behavior
      //-----------------------------------
      "defaultComType": {
        type: String,
        "default": "ti-input"
      },
      //-----------------------------------
      // Aspect
      //-----------------------------------
      "spacing": {
        type: String,
        "default": undefined
      },
      //-----------------------------------
      // Measure
      //-----------------------------------
      "width": {
        type: [Number, String],
        "default": undefined
      },
      "height": {
        type: [Number, String],
        "default": undefined
      }
    };
    Ti.Preload("ti/com/ti/combo/pair-auto/ti-combo-pair-auto-props.mjs", _M);
  })(); //============================================================
  // JOIN: ti/combo/pair-auto/ti-combo-pair-auto.html
  //============================================================


  Ti.Preload("ti/com/ti/combo/pair-auto/ti-combo-pair-auto.html", "<ti-form\n  class=\"full-field\"\n  :class=\"TopClass\"\n  :data=\"value\"\n  :fields=\"FormFields\"\n  :only-fields=\"onlyFields\"\n  :fixed=\"fixed\"\n  :default-com-type=\"defaultComType\"\n  :spacing=\"spacing\"\n  :width=\"width\"\n  :height=\"height\"/>"); //============================================================
  // JOIN: ti/combo/pair-auto/ti-combo-pair-auto.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //------------------------------------------------
        FormFields: function FormFields() {
          if (this.group) {
            return this.genFormFieldsByGroup();
          }

          return this.genFormFields(this.value);
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        genFormFieldsByGroup: function genFormFieldsByGroup() {
          var _this68 = this;

          console.log("haha");
          var list = [];

          _.forEach(this.value, function (val, key) {
            var grp = _.defaults(_this68.getFieldDefine(key), {
              title: key,
              name: key,
              fields: _this68.genFormFields(val, key)
            });

            list.push(grp);
          });

          return list;
        },
        //-----------------------------------------------
        genFormFields: function genFormFields() {
          var _this69 = this;

          var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var groupName = arguments.length > 1 ? arguments[1] : undefined;
          var list = [];
          var keys = groupName ? [groupName] : [];

          _.forEach(data, function (v, k) {
            var fld = _.defaults(_this69.getFieldDefine(k, groupName), {
              title: k,
              name: _.concat(keys, k).join(".")
            });

            list.push(fld);
          });

          return list;
        },
        //-----------------------------------------------
        getFieldDefine: function getFieldDefine(name, group) {
          var _Ti$Util4;

          var keys = [];

          if (group) {
            keys.push("".concat(group, ".").concat(name));
          }

          keys.push(name);
          keys.push("@default");

          var fld = (_Ti$Util4 = Ti.Util).getFallbackNil.apply(_Ti$Util4, [this.fields].concat(keys));

          if (fld && fld.title) {
            fld = _.cloneDeep(fld);
            fld.title = Ti.S.renderBy(fld.title, {
              name: name,
              group: group
            });
          }

          return fld;
        } //-----------------------------------------------

      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/combo/pair-auto/ti-combo-pair-auto.mjs", _M);
  })(); //============================================================
  // JOIN: ti/combo/pair-auto/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/combo/pair-auto/_com.json", {
    "name": "ti-combo-pair-auto",
    "globally": true,
    "template": "./ti-combo-pair-auto.html",
    "props": ["./ti-combo-pair-auto-props.mjs"],
    "mixins": "./ti-combo-pair-auto.mjs"
  }); //============================================================
  // JOIN: ti/combo/pair-group/ti-combo-pair-group-props.mjs
  //============================================================

  (function () {
    var _M = {
      //-----------------------------------
      // Data
      //-----------------------------------
      "value": undefined,
      "fields": {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      //-----------------------------------
      // Behavior
      //-----------------------------------
      // ...
      "keepShownTo": {
        type: String,
        "default": undefined
      },
      //-----------------------------------
      // Aspect
      //-----------------------------------
      "tabAt": {
        type: String,
        "default": undefined
      } //-----------------------------------
      // Measure
      //-----------------------------------
      // ...

    };
    Ti.Preload("ti/com/ti/combo/pair-group/ti-combo-pair-group-props.mjs", _M);
  })(); //============================================================
  // JOIN: ti/combo/pair-group/ti-combo-pair-group.html
  //============================================================


  Ti.Preload("ti/com/ti/combo/pair-group/ti-combo-pair-group.html", "<ti-gui\n  class=\"ti-fill-parent full-field\"\n  :class=\"TopClass\"\n  :layout=\"TheLayout\"\n  :shown=\"TheShown\"\n  :keep-shown-to=\"keepShownTo\"\n  @block:shown=\"OnShownUpdate\"/>"); //============================================================
  // JOIN: ti/combo/pair-group/ti-combo-pair-group.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          myFieldNames: [],
          myFieldMap: {},
          myCurrentTabName: null
        };
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //------------------------------------------------
        ValueObj: function ValueObj() {
          if (Ti.Util.isNil(this.value) || _.isEmpty(this.value)) {
            return {};
          }

          if (_.isString(this.value)) {
            var str = _.trim(this.value);

            if (!str) {
              return {};
            }

            return JSON.parse(this.value);
          }

          if (_.isPlainObject(this.value)) {
            return this.value;
          }

          console.warn("Unsupported value object:", this.value);
        },
        //------------------------------------------------
        TheBlocks: function TheBlocks() {
          // Update Block Keys, add the key noexists in map
          var names = _.cloneDeep(this.myFieldNames);

          _.forEach(this.ValueObj, function (block, key) {
            if (_.indexOf(names, key) < 0) {
              names.push(key);
            }
          });

          this.myFieldNames = names; // Gen-block by keys

          var list = [];

          var _iterator18 = _createForOfIteratorHelper(names),
              _step18;

          try {
            for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
              var name = _step18.value;

              var val = _.get(this.ValueObj, name);

              var field = _.get(this.myFieldMap, name) || {}; // Explain block

              var b2 = Ti.Util.explainObj(val, _objectSpread({
                title: name,
                name: name
              }, _.pick(field, "title", "name", "icon"), {
                body: {
                  comType: field.comType || "ti-input-text",
                  comConf: field.comConf || {
                    value: "=.."
                  }
                }
              }));
              list.push(b2);
            }
          } catch (err) {
            _iterator18.e(err);
          } finally {
            _iterator18.f();
          }

          return list;
        },
        //------------------------------------------------
        TheLayout: function TheLayout() {
          return {
            type: "tabs",
            tabAt: this.tabAt,
            blocks: this.TheBlocks
          };
        },
        //------------------------------------------------
        TheShown: function TheShown() {
          var _this70 = this;

          if (this.keepShownTo) {
            return;
          }

          var shown = {};

          _.forEach(this.myFieldNames, function (name) {
            shown[name] = name == _this70.myCurrentTabName;
          });

          return shown;
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        __on_events: function __on_events(eventFullName, payload) {
          var _this71 = this;

          var _eventFullName$split = eventFullName.split("::"),
              _eventFullName$split2 = _slicedToArray(_eventFullName$split, 2),
              key = _eventFullName$split2[0],
              eventName = _eventFullName$split2[1]; //console.log(key, eventName, payload)
          // For Change


          if ("change" == eventName && this.$parent) {
            return function () {
              var data = _.cloneDeep(_this71.ValueObj);

              _.set(data, key, payload);

              _this71.$parent.$notify("change", data);

              return true;
            };
          } // Cancel others bubble


          return function () {
            return true;
          };
        },
        //------------------------------------------------
        OnShownUpdate: function OnShownUpdate(shown) {
          var keys = Ti.Util.truthyKeys(shown);
          this.myCurrentTabName = _.first(keys);
        },
        //------------------------------------------------
        evalBlocks: function evalBlocks() {
          var map = {};
          var keys = [];

          _.forEach(this.fields, function (block) {
            map[block.name] = block;
            keys.push(block.name);
          });

          this.myFieldNames = keys;
          this.myFieldMap = map;
        } //-----------------------------------------------

      },
      ////////////////////////////////////////////////////
      watch: {
        //-----------------------------------------------
        "blocks": {
          handler: "evalBlocks",
          immediate: true
        } //-----------------------------------------------

      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/combo/pair-group/ti-combo-pair-group.mjs", _M);
  })(); //============================================================
  // JOIN: ti/combo/pair-group/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/combo/pair-group/_com.json", {
    "name": "ti-combo-pair-group",
    "globally": true,
    "template": "./ti-combo-pair-group.html",
    "props": ["./ti-combo-pair-group-props.mjs"],
    "mixins": "./ti-combo-pair-group.mjs"
  }); //============================================================
  // JOIN: ti/combo/pair-text/ti-combo-pair-text-props.mjs
  //============================================================

  (function () {
    var _M = {
      //-----------------------------------
      // Data
      //-----------------------------------
      "value": {
        type: Object,
        "default": undefined
      },
      "options": {
        type: [String, Array, Function, Ti.Dict],
        "default": function _default() {
          return [];
        }
      },
      "valueBy": {
        type: [String, Function],
        "default": undefined
      },
      "textBy": {
        type: [String, Function],
        "default": undefined
      },
      "iconeBy": {
        type: [String, Function],
        "default": undefined
      },
      //-----------------------------------
      // Behavior
      //-----------------------------------
      "trimed": {
        type: Boolean,
        "default": true
      },
      "readonly": {
        type: Boolean,
        "default": false
      },
      //-----------------------------------
      // Aspect
      //-----------------------------------
      "placeholder": {
        type: String,
        "default": undefined
      },
      //-----------------------------------
      // Measure
      //-----------------------------------
      "textWidth": {
        type: [Number, String],
        "default": undefined
      },
      "textHeight": {
        type: [Number, String],
        "default": undefined
      }
    };
    Ti.Preload("ti/com/ti/combo/pair-text/ti-combo-pair-text-props.mjs", _M);
  })(); //============================================================
  // JOIN: ti/combo/pair-text/ti-combo-pair-text.html
  //============================================================


  Ti.Preload("ti/com/ti/combo/pair-text/ti-combo-pair-text.html", "<div class=\"ti-combo-pair-text full-field\">\n  <div\n    v-for=\"it in Items\"\n      class=\"as-pair\">\n      <!--title-->\n      <div class=\"as-title\">\n        <!--Icon-->\n        <ti-icon\n          v-if=\"it.icon\" \n            :value=\"it.icon\"/>\n        <!--Text-->\n        <div\n          v-if=\"it.text\" \n            class=\"as-text\">{{it.text}}</div>\n      </div>\n      <!--Textarea-->\n      <div\n        class=\"as-textarea\">\n          <textarea \n            spellcheck=\"false\"\n            :style=\"TextStyle\"\n            :placeholder=\"it.placeholder\"\n            :value=\"it.value\"\n            :readonly=\"readonly\"\n            @change=\"OnTextChange(it.key, $event)\"></textarea></div>\n  </div>\n</div>"); //============================================================
  // JOIN: ti/combo/pair-text/ti-combo-pair-text.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          myOptionsData: null,
          myDict: undefined,
          myValue: {}
        };
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //------------------------------------------------
        Items: function Items() {
          var _this72 = this;

          var list = [];

          _.forEach(this.myOptionsData, function (it) {
            var text = _this72.Dict.getText(it);

            var key = _this72.Dict.getValue(it);

            var icon = _this72.Dict.getIcon(it);

            var value = _.get(_this72.myValue, key);

            var placeholder = it.placeholder || _this72.placeholder;
            list.push({
              value: value,
              text: text,
              icon: icon,
              key: key,
              placeholder: placeholder
            });
          });

          return list;
        },
        //------------------------------------------------
        TextStyle: function TextStyle() {
          return Ti.Css.toStyleRem100({
            width: this.textWidth,
            height: this.textHeight
          });
        },
        //------------------------------------------------
        Dict: function Dict() {
          if (!this.myDict) {
            this.myDict = this.createDict();
          }

          return this.myDict;
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        OnTextChange: function OnTextChange(key, $evn) {
          var $text = $evn.srcElement;
          var val = $text.value;

          if (this.trimed) {
            val = _.trim(val);
          } //console.log({key, val})


          this.updateValue(_defineProperty({}, key, val));
        },
        //------------------------------------------------
        updateValue: function updateValue(obj) {
          this.myValue = _.assign({}, this.myValue, obj);
        },
        //------------------------------------------------
        createDict: function createDict() {
          var _this73 = this;

          // Customized
          if (this.options instanceof Ti.Dict) {
            return this.options;
          } // Refer dict


          if (_.isString(this.options)) {
            var dictName = Ti.DictFactory.DictReferName(this.options);

            if (dictName) {
              return Ti.DictFactory.CheckDict(dictName, function (_ref26) {
                var loading = _ref26.loading;
                _this73.loading = loading;
              });
            }
          } // Auto Create


          return Ti.DictFactory.CreateDict({
            data: this.options || [],
            getValue: Ti.Util.genGetter(this.valueBy || "value"),
            getText: Ti.Util.genGetter(this.textBy || "text|name"),
            getIcon: Ti.Util.genGetter(this.iconBy || "icon")
          });
        },
        //-----------------------------------------------
        reloadMyOptionData: function reloadMyOptionData() {
          var _this74 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee35() {
            return regeneratorRuntime.wrap(function _callee35$(_context35) {
              while (1) {
                switch (_context35.prev = _context35.next) {
                  case 0:
                    _context35.next = 2;
                    return _this74.Dict.getData();

                  case 2:
                    _this74.myOptionsData = _context35.sent;

                  case 3:
                  case "end":
                    return _context35.stop();
                }
              }
            }, _callee35);
          }))();
        } //-----------------------------------------------

      },
      ////////////////////////////////////////////////////
      watch: {
        //-----------------------------------------------
        "value": {
          handler: function handler(newVal, oldVal) {
            if (!_.isEqual(newVal, oldVal)) {
              this.myValue = _.cloneDeep(newVal);
            }
          },
          immediate: true
        },
        //-----------------------------------------------
        "options": function () {
          var _options = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee36(newVal, oldVal) {
            return regeneratorRuntime.wrap(function _callee36$(_context36) {
              while (1) {
                switch (_context36.prev = _context36.next) {
                  case 0:
                    if (_.isEqual(newVal, oldVal)) {
                      _context36.next = 4;
                      break;
                    }

                    this.myDict = this.createDict();
                    _context36.next = 4;
                    return this.reloadMyOptionData();

                  case 4:
                  case "end":
                    return _context36.stop();
                }
              }
            }, _callee36, this);
          }));

          function options(_x, _x2) {
            return _options.apply(this, arguments);
          }

          return options;
        }(),
        //-----------------------------------------------
        "myValue": function myValue(newVal, oldVal) {
          if (!_.isEqual(newVal, oldVal)) {
            this.$notify("change", this.myValue);
          }
        } //-----------------------------------------------

      },
      ////////////////////////////////////////////////////
      mounted: function () {
        var _mounted = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee37() {
          return regeneratorRuntime.wrap(function _callee37$(_context37) {
            while (1) {
              switch (_context37.prev = _context37.next) {
                case 0:
                  _context37.next = 2;
                  return this.reloadMyOptionData();

                case 2:
                case "end":
                  return _context37.stop();
              }
            }
          }, _callee37, this);
        }));

        function mounted() {
          return _mounted.apply(this, arguments);
        }

        return mounted;
      }() ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/combo/pair-text/ti-combo-pair-text.mjs", _M);
  })(); //============================================================
  // JOIN: ti/combo/pair-text/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/combo/pair-text/_com.json", {
    "name": "ti-combo-pair-text",
    "globally": true,
    "template": "./ti-combo-pair-text.html",
    "props": ["./ti-combo-pair-text-props.mjs"],
    "mixins": "./ti-combo-pair-text.mjs"
  }); //============================================================
  // JOIN: ti/combo/sorter/ti-combo-sorter-props.mjs
  //============================================================

  (function () {
    var _M = {
      "placeholder": {
        type: String,
        "default": "i18n:no-title"
      },
      "options": {
        type: Array,
        "default": function _default() {
          return [];
        }
      },

      /*
      {
        "CreateTime": 1  // 1:ASC, -1:DESC
      }
      */
      "value": {
        type: Object,
        "default": null
      },
      "width": {
        type: [Number, String],
        "default": undefined
      },
      "height": {
        type: [Number, String],
        "default": undefined
      },
      "dropWidth": {
        type: [Number, String],
        "default": "box"
      },
      "dropHeight": {
        type: [Number, String],
        "default": null
      },
      "sortIcons": {
        type: Object,
        "default": function _default() {
          return {
            asc: "im-arrow-up",
            desc: "im-arrow-down"
          };
        }
      },
      "suffixIcon": {
        type: String,
        "default": "im-menu-list"
      }
    };
    Ti.Preload("ti/com/ti/combo/sorter/ti-combo-sorter-props.mjs", _M);
  })(); //============================================================
  // JOIN: ti/combo/sorter/ti-combo-sorter.html
  //============================================================


  Ti.Preload("ti/com/ti/combo/sorter/ti-combo-sorter.html", "<div class=\"ti-combo-sorter\"\n  :class=\"TopClass\"\n  :style=\"TopStyle\">\n  <!--\n    sorter box\n  -->\n  <ti-combo-box\n    class=\"as-sorter\"\n    :drop-width=\"dropWidth\"\n    :drop-height=\"dropHeight\"\n    :drop-float=\"false\"\n    :status=\"myDropStatus\"\n    @collapse=\"OnCollapse\"\n    v-ti-activable>\n    <!--\n      Box\n    -->\n    <template v-slot:box>\n      <!--\n        Current Sort Box\n      -->\n      <div class=\"as-sort-box\"\n        @click.left=\"OnClickBox\">\n        <!--Sort Icon-->\n        <ti-icon\n          v-if=\"TheSortIcon\"\n          class=\"as-sort-icon\"\n            :value=\"TheSortIcon\"/>\n        <!--Preifx Icon-->\n        <ti-icon \n          v-if=\"ThePrefixIcon\"\n            class=\"at-prefix\"\n            :value=\"ThePrefixIcon\"/>\n        <!--Title-->\n        <div class=\"as-title\">{{SortTitle|i18n}}</div>\n      </div>\n      <!--Status Icon-->\n      <div  \n        v-if=\"TheSuffixIcon\"\n          class=\"as-sort-btn\"\n          @click.left=\"OnClickSuffixIcon\">\n            <ti-icon :value=\"TheSuffixIcon\"/>\n      </div>\n    </template>\n    <!--\n      Drop\n    -->\n    <template v-slot:drop=\"slotProps\">\n      <ti-list\n        id-by=\"value\"\n        :data=\"myListData\"\n        :display=\"['<icon>', 'text']\"\n        :hoverable=\"true\"\n        :current-id=\"SortBy\"\n        @select=\"OnDropListSelected\"/>\n    </template>\n  </ti-combo-box>\n  <!--\n    Sorter\n  -->\n</div>"); //============================================================
  // JOIN: ti/combo/sorter/ti-combo-sorter.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          myDropStatus: "collapse",
          myItem: null,
          isASC: true,
          myListData: []
        };
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        isCollapse: function isCollapse() {
          return "collapse" == this.myDropStatus;
        },
        isExtended: function isExtended() {
          return "extended" == this.myDropStatus;
        },
        //------------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //------------------------------------------------
        TopStyle: function TopStyle() {
          return Ti.Css.toStyle({
            width: this.width,
            height: this.height
          });
        },
        //------------------------------------------------
        SortTitle: function SortTitle() {
          return Ti.Util.getOrPick(this.myItem, "text|value", this.placeholder);
        },
        //------------------------------------------------
        SortBy: function SortBy() {
          return _.first(_.keys(this.value));
        },
        //------------------------------------------------
        SortAs: function SortAs() {
          return _.get(this.value, this.SortBy) || 1;
        },
        //------------------------------------------------
        ThePrefixIcon: function ThePrefixIcon() {
          return _.get(this.myItem, "icon");
        },
        //------------------------------------------------
        TheSortIcon: function TheSortIcon() {
          return this.isASC ? this.sortIcons.asc : this.sortIcons.desc;
        },
        //------------------------------------------------
        TheSuffixIcon: function TheSuffixIcon() {
          if (!_.isEmpty(this.myListData) && this.myListData.length > 1) {
            return this.suffixIcon;
          }
        },
        //------------------------------------------------
        Dict: function Dict() {
          var _this75 = this;

          // Customized
          if (this.options instanceof Ti.Dict) {
            return this.options;
          } // Refer dict


          if (_.isString(this.options)) {
            var dictName = Ti.DictFactory.DictReferName(this.options);

            if (dictName) {
              return Ti.DictFactory.CheckDict(dictName, function (_ref27) {
                var loading = _ref27.loading;
                _this75.loading = loading;
              });
            }
          } // Auto Create


          return Ti.DictFactory.CreateDict({
            data: this.options,
            getValue: Ti.Util.genGetter(this.valueBy || "value"),
            getText: Ti.Util.genGetter(this.textBy || "text|name"),
            getIcon: Ti.Util.genGetter(this.iconBy || "icon")
          });
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        OnCollapse: function OnCollapse() {
          this.doCollapse();
        },
        //-----------------------------------------------
        OnClickBox: function OnClickBox() {
          this.isASC = !this.isASC;
          this.tryNotifyChanged();
        },
        //-----------------------------------------------
        OnClickSuffixIcon: function OnClickSuffixIcon() {
          if (this.isExtended) {
            this.doCollapse();
          } else {
            this.doExtend();
          }
        },
        //-----------------------------------------------
        OnDropListSelected: function OnDropListSelected() {
          var _ref28 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              current = _ref28.current;

          this.myItem = current;
          this.doCollapse();
        },
        //-----------------------------------------------
        // Core Methods
        //-----------------------------------------------
        doExtend: function doExtend() {
          this.myDropStatus = "extended";
        },
        //-----------------------------------------------
        doCollapse: function doCollapse() {
          var _ref29 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              _ref29$escaped = _ref29.escaped,
              escaped = _ref29$escaped === void 0 ? false : _ref29$escaped;

          this.myDropStatus = "collapse";

          if (!escaped) {
            this.tryNotifyChanged();
          }
        },
        //-----------------------------------------------
        tryNotifyChanged: function tryNotifyChanged() {
          //console.log("tryNotifyChanged")
          var val = this.genValue();

          if (!_.isEqual(val, this.value)) {
            this.$notify("change", val);
          }
        },
        //-----------------------------------------------
        // Utility
        //-----------------------------------------------
        genValue: function genValue() {
          var by = _.get(this.myItem, "value");

          var as = this.isASC ? 1 : -1; //console.log({by, as})

          return _defineProperty({}, by, as);
        },
        //-----------------------------------------------
        evalMyValue: function evalMyValue() {
          var _this76 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee38() {
            var val, ss, it;
            return regeneratorRuntime.wrap(function _callee38$(_context38) {
              while (1) {
                switch (_context38.prev = _context38.next) {
                  case 0:
                    val = {
                      by: null,
                      as: 1
                    }; // String: "CreateTime:1"

                    if (_.isString(_this76.value)) {
                      ss = _this76.value.split(":");
                      val.by = _.nth(ss, 0);
                      val.as = _.nth(ss, 1) == "1" ? 1 : -1;
                    } // Array: ["CreateTime", 1]
                    else if (_.isArray(_this76.value)) {
                        val.by = _.nth(_this76.value, 0);
                        val.as = _.nth(_this76.value, 1) > 0 ? 1 : -1;
                      } // Object as default {"CreateTime":1}
                      else {
                          val.by = _this76.SortBy;
                          val.as = _this76.SortAs;
                        }

                    _context38.next = 4;
                    return _this76.Dict.getItem(val.by);

                  case 4:
                    it = _context38.sent;

                    if (it) {
                      _this76.myItem = it;
                    } else {
                      _this76.myItem = {
                        text: _this76.text || val.by,
                        value: val.by
                      };
                    }

                    _this76.isASC = val.as == 1;

                  case 7:
                  case "end":
                    return _context38.stop();
                }
              }
            }, _callee38);
          }))();
        },
        //-----------------------------------------------
        // Callback
        //-----------------------------------------------
        __ti_shortcut: function __ti_shortcut(uniqKey) {
          //console.log("ti-combo-multi-input", uniqKey)
          //....................................
          if ("ESCAPE" == uniqKey) {
            this.doCollapse({
              escaped: true
            });
            return {
              prevent: true,
              stop: true,
              quit: true
            };
          } //....................................

        } //-----------------------------------------------

      },
      ////////////////////////////////////////////////////
      watch: {
        //-----------------------------------------------
        "value": {
          handler: "evalMyValue",
          immediate: true
        } //-----------------------------------------------

      },
      ////////////////////////////////////////////////////
      mounted: function () {
        var _mounted2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee39() {
          return regeneratorRuntime.wrap(function _callee39$(_context39) {
            while (1) {
              switch (_context39.prev = _context39.next) {
                case 0:
                  _context39.next = 2;
                  return this.Dict.getData();

                case 2:
                  this.myListData = _context39.sent;

                case 3:
                case "end":
                  return _context39.stop();
              }
            }
          }, _callee39, this);
        }));

        function mounted() {
          return _mounted2.apply(this, arguments);
        }

        return mounted;
      }() ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/combo/sorter/ti-combo-sorter.mjs", _M);
  })(); //============================================================
  // JOIN: ti/combo/sorter/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/combo/sorter/_com.json", {
    "name": "ti-combo-sorter",
    "globally": true,
    "template": "./ti-combo-sorter.html",
    "props": "@com:ti/combo/sorter/ti-combo-sorter-props.mjs",
    "mixins": "./ti-combo-sorter.mjs",
    "components": ["@com:ti/combo/box"]
  }); //============================================================
  // JOIN: ti/crumb/com/crumb-item/crumb-item.html
  //============================================================

  Ti.Preload("ti/com/ti/crumb/com/crumb-item/crumb-item.html", "<div class=\"ti-crumb-item\" \n  :class=\"TopClass\"\n  @click.left=\"OnClickTop\">\n  <!--\n    Icon\n  -->\n  <ti-icon v-if=\"icon\" \n    class=\"as-icon\"\n    :value=\"icon\"/>\n  <!--\n    Text\n  -->\n  <template v-if=\"text\">\n    <a v-if=\"href\"\n      class=\"as-text\"\n      @click.prevent\n      :href=\"href\"\n      :class=\"TextClass\">{{TheText}}</a>\n    <span v-else\n      class=\"as-text\"\n      :class=\"TextClass\">{{TheText}}</span>\n  </template>\n  <!--\n    Asterisk\n  -->\n  <span v-if=\"asterisk\"\n    class=\"as-asterisk\"\n    ></span>\n  <!--\n    Path Icon\n  -->\n  <ti-icon v-if=\"!atLast\"\n    class=\"as-path-icon\"\n    :value=\"pathIcon\"/>\n</div>"); //============================================================
  // JOIN: ti/crumb/com/crumb-item/crumb-item.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      props: {
        "index": {
          type: Number,
          "default": -1
        },
        "atLast": {
          type: Boolean,
          "default": false
        },
        "icon": {
          type: [String, Object],
          "default": null
        },
        "text": {
          type: String,
          "default": null
        },
        "href": {
          type: String,
          "default": null
        },
        "value": {
          type: [String, Number, Boolean, Object],
          "default": null
        },
        "pathIcon": {
          type: String,
          "default": null
        },
        "asterisk": {
          type: Boolean,
          "default": false
        },
        "cancelBubble": {
          type: Boolean,
          "default": true
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        TopClass: function TopClass() {
          return Ti.Css.mergeClassName({
            "at-tail": this.atLast,
            "at-path": !this.atLast,
            "is-asterisk": this.asterisk
          }, this.className);
        },
        //------------------------------------------------
        TextClass: function TextClass() {
          return {
            "without-icon": !this.hasIcon && !this.removeIcon
          };
        },
        //------------------------------------------------
        hasIcon: function hasIcon() {
          return this.icon ? true : false;
        },
        //------------------------------------------------
        TheText: function TheText() {
          return Ti.I18n.text(this.text);
        },
        //------------------------------------------------
        TheData: function TheData() {
          return {
            index: this.index,
            icon: this.icon,
            text: this.text,
            value: this.value,
            href: this.href,
            atLast: this.atLast,
            asterisk: this.asterisk
          };
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        OnClickTop: function OnClickTop($event) {
          // Show Drop Down
          if (this.hasOptions) {
            $event.stopPropagation();
            this.openDrop();
          } // Stop Bubble Up
          else if (this.cancelBubble) {
              $event.stopPropagation();
            } // Emit event


          if (this.href) {
            this.$notify("item:active", this.TheData);
          }
        } //------------------------------------------------

      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/crumb/com/crumb-item/crumb-item.mjs", _M);
  })(); //============================================================
  // JOIN: ti/crumb/com/crumb-item/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/crumb/com/crumb-item/_com.json", {
    "name": "crumb-item",
    "globally": false,
    "template": "./crumb-item.html",
    "mixins": ["./crumb-item.mjs"]
  }); //============================================================
  // JOIN: ti/crumb/ti-crumb.html
  //============================================================

  Ti.Preload("ti/com/ti/crumb/ti-crumb.html", "<div class=\"ti-crumb\"\n  :class=\"topClass\">\n  <!--\n    Loop items\n  -->\n  <crumb-item v-for=\"it in theData\"\n    :key=\"it.index\"\n    :path-icon=\"pathIcon\"\n    :cancel-bubble=\"cancelItemBubble\"\n    v-bind=\"it\"/>\n</div>"); //============================================================
  // JOIN: ti/crumb/ti-crumb.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      ////////////////////////////////////////////////////
      props: {
        "data": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "itemIcon": {
          type: String,
          "default": null
        },
        "pathIcon": {
          type: String,
          "default": "zmdi-chevron-right"
        },
        "cancelItemBubble": {
          type: Boolean,
          "default": true
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        topClass: function topClass() {
          if (this.className) return this.className;
        },
        //------------------------------------------------
        theData: function theData() {
          var _this77 = this;

          var list = [];

          if (_.isArray(this.data)) {
            _.forEach(this.data, function (val, index) {
              list.push(_.assign({
                icon: _this77.itemIcon
              }, val, {
                index: index,
                atLast: index == _this77.data.length - 1
              }));
            });
          }

          return list;
        },
        //------------------------------------------------
        theDataValues: function theDataValues() {
          var list = [];

          var _iterator19 = _createForOfIteratorHelper(this.theData),
              _step19;

          try {
            for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
              var it = _step19.value;
              list.push(Ti.Util.fallback(it.value, null));
            }
          } catch (err) {
            _iterator19.e(err);
          } finally {
            _iterator19.f();
          }

          return list;
        } //------------------------------------------------

      } ////////////////////////////////////////////////////
      // methods : {
      //   //------------------------------------------------
      //   onItemFired({index=-1}={}) {
      //     if(index >= 0) {
      //       let it = _.nth(this.theData, index)
      //       if(it) {
      //         this.$notify("item:actived", it)
      //       }
      //     }
      //   }
      //   //------------------------------------------------
      // }
      ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/crumb/ti-crumb.mjs", _M);
  })(); //============================================================
  // JOIN: ti/crumb/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/crumb/_com.json", {
    "name": "ti-crumb",
    "globally": true,
    "template": "./ti-crumb.html",
    "mixins": ["./ti-crumb.mjs"],
    "components": ["./com/crumb-item"]
  }); //============================================================
  // JOIN: ti/datetime/ti-datetime.html
  //============================================================

  Ti.Preload("ti/com/ti/datetime/ti-datetime.html", "<div class=\"ti-datetime\">\n  <!--Date-->\n  <ti-calendar class=\"is-date\"\n    :value=\"theDate\"\n    :month-format=\"monthFormat\"\n    :begin-year=\"beginYear\"\n    :end-year=\"endYear\"\n    @change=\"onDateChanged\"/>\n  <!--Time-->\n  <div class=\"is-time\">\n    <div class=\"as-time-text\">{{theTimeText}}</div>\n    <div class=\"as-time-cols\">\n      <ti-time\n        :value=\"theTime\"\n        :mode=\"timeMode\"\n        width=\"100%\"\n        height=\"none\"\n        @change=\"onTimeChanged\"/>\n    </div>\n  </div>\n</div>"); //============================================================
  // JOIN: ti/datetime/ti-datetime.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      ////////////////////////////////////////////////////
      props: {
        "value": {
          type: [String, Number, Date],
          "default": null
        },
        "timeMode": {
          type: String,
          "default": "sec",

          /***
           * - `sec`  : "HH:mm:ss"
           * - `min`  : "HH:mm"
           * - `auto` : "HH:mm:ss"
           */
          validator: function validator(unit) {
            return /^(sec|min|auto)$/.test(unit);
          }
        },
        "monthFormat": {
          type: String,
          "default": "yyyy-MM"
        },
        "beginYear": {
          type: [Number, String],
          "default": 1970
        },
        "endYear": {
          type: [Number, String],
          "default": new Date().getFullYear() + 1
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        topClass: function topClass() {
          return this.className;
        },
        //------------------------------------------------
        theDate: function theDate() {
          return Ti.Types.toDate(this.value, null);
        },
        //------------------------------------------------
        theTime: function theTime() {
          return Ti.Types.toTime(this.theDate);
        },
        //------------------------------------------------
        theTimeFormat: function theTimeFormat() {
          return {
            "sec": "HH:mm:ss",
            "min": "HH:mm",
            "auto": "auto"
          }[this.timeMode];
        },
        //------------------------------------------------
        theTimeText: function theTimeText() {
          return this.getTimeText(this.theTime);
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        onDateChanged: function onDateChanged(dt) {
          var theDate = this.theDate || new Date();
          var tm = Ti.Types.toTime(this.theTime || 0);
          dt = new Date(dt);
          dt.setHours(tm.hours);
          dt.setMinutes(tm.minutes);
          dt.setSeconds(tm.seconds);
          dt.setMilliseconds(tm.milliseconds);
          this.$notify("change", dt);
        },
        //------------------------------------------------
        onTimeChanged: function onTimeChanged(tm) {
          var theDate = this.theDate || new Date();
          var dt = new Date(theDate);
          dt.setHours(tm.hours);
          dt.setMinutes(tm.minutes);
          dt.setSeconds(tm.seconds);
          dt.setMilliseconds(tm.milliseconds);
          this.$notify("change", dt);
        },
        //------------------------------------------------
        getTimeText: function getTimeText(tm) {
          if (tm instanceof Ti.Types.Time) {
            return tm.toString(this.theTimeFormat);
          }
        } //------------------------------------------------

      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/datetime/ti-datetime.mjs", _M);
  })(); //============================================================
  // JOIN: ti/datetime/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/datetime/_com.json", {
    "name": "ti-datetime",
    "globally": true,
    "template": "./ti-datetime.html",
    "mixins": ["./ti-datetime.mjs"],
    "components": ["@com:ti/time", "@com:ti/calendar"]
  }); //============================================================
  // JOIN: ti/droplist/ti-droplist.html
  //============================================================

  Ti.Preload("ti/com/ti/droplist/ti-droplist.html", "<component \n  :is=\"ComType\"\n  v-bind=\"this\"\n  :can-input=\"false\"\n  :must-in-list=\"true\"\n  :auto-collapse=\"true\"\n  @change=\"$notify('change', $event)\"/>"); //============================================================
  // JOIN: ti/droplist/ti-droplist.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      props: {
        "multi": {
          type: Boolean,
          "default": false
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        ComType: function ComType() {
          return this.multi ? "ti-combo-multi-input" : "ti-combo-input";
        }
      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/droplist/ti-droplist.mjs", _M);
  })(); //============================================================
  // JOIN: ti/droplist/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/droplist/_com.json", {
    "name": "ti-droplist",
    "globally": true,
    "template": "./ti-droplist.html",
    "props": ["@com:ti/input/ti-input-props.mjs", "@com:ti/input/tags/ti-input-tags-props.mjs", "@com:ti/combo/input/ti-combo-input-props.mjs"],
    "mixins": ["./ti-droplist.mjs"],
    "components": ["@com:ti/combo/input", "@com:ti/combo/multi-input"]
  }); //============================================================
  // JOIN: ti/form/com/form-field/form-field-props.mjs
  //============================================================

  (function () {
    var _M = {
      "type": {
        type: String,
        "default": "String"
      },
      "disabled": {
        type: Boolean,
        "default": false
      },
      "uniqKey": {
        type: String,
        "default": null
      },
      "name": {
        type: [String, Array],
        "default": null
      },
      "icon": {
        type: String,
        "default": null
      },
      "fieldStatus": {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      "message": {
        type: String,
        "default": null
      },
      "title": {
        type: String,
        "default": null
      },
      "tip": {
        type: String,
        "default": null
      },
      "width": {
        type: [String, Number],
        "default": "stretch"
      },
      "height": {
        type: [String, Number],
        "default": undefined
      },
      "checkEquals": {
        type: Boolean,
        "default": true
      },
      "undefinedAs": {
        "default": undefined
      },
      "nullAs": {
        "default": undefined
      },
      "nanAs": {
        type: Number,
        "default": undefined
      },
      "emptyAs": {
        type: String,
        "default": undefined
      },
      "defaultAs": {
        "default": undefined
      },
      "display": {
        type: [String, Object, Boolean],
        "default": false
      },
      // "funcSet" : {
      //   type : Object,
      //   default : ()=>({})
      // },
      "comType": {
        type: String,
        "default": "ti-label"
      },
      "comConf": {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      "autoValue": {
        type: String,
        "default": "value"
      },
      "serializer": {
        type: Function,
        "default": _.identity
      },
      "transformer": {
        type: Function,
        "default": _.identity
      },
      "data": {
        type: Object,
        "default": null
      },
      "statusIcons": {
        type: Object,
        "default": function _default() {
          return {
            spinning: 'fas-spinner fa-spin',
            error: 'zmdi-alert-polygon',
            warn: 'zmdi-alert-triangle',
            ok: 'zmdi-check-circle'
          };
        }
      }
    };
    Ti.Preload("ti/com/ti/form/com/form-field/form-field-props.mjs", _M);
  })(); //============================================================
  // JOIN: ti/form/com/form-field/form-field.html
  //============================================================


  Ti.Preload("ti/com/ti/form/com/form-field/form-field.html", "<div class=\"form-field\"\n  :class=\"TopClass\"\n  :style=\"ConStyle\"\n  v-ti-activable>\n  <!--========================================\n    Field Name\n  -->\n  <div \n    v-if=\"isShowTitle\"\n      class=\"field-name\"\n      :title=\"StatusText\">\n        <!--Status Icon-->\n        <span \n          v-if=\"StatusIcon\"\n            class=\"name-status\">\n            <ti-icon :value=\"StatusIcon\"/>\n        </span>\n        <!--Title Text-->\n        <span class=\"name-title\">{{TheTitle|i18n}}</span>\n        <!--Field Icon-->\n        <span \n          v-if=\"isShowIcon\" \n            class=\"name-icon\">\n            <ti-icon :value=\"icon\"/>\n        </span>\n  </div>\n  <!--========================================\n    Field Value\n  -->\n  <div class=\"field-value\"\n    :style=\"ConStyle\">\n    <!--\n      UI Component\n    -->\n    <div v-if=\"isComReady\"\n      class=\"field-component\"\n      :class=\"ComClass\"\n      :style=\"ComStyle\">\n      <component \n        :is=\"myComType\"\n          v-bind=\"myComConf\"\n          @change=\"OnChange\"/>\n    </div>\n    <!--\n      Tips\n    -->\n    <div \n      v-if=\"isShowTip\"\n        class=\"field-tip\">{{tip|i18n}}</div>\n  </div>\n</div>"); //============================================================
  // JOIN: ti/form/com/form-field/form-field.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////////
      data: function data() {
        return {
          isComReady: false,
          myComType: null,
          myComConf: null
        };
      },
      //////////////////////////////////////////////
      computed: {
        //----------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass({
            "no-status-icons": !this.hasStatusIcons,
            "has-status-icons": this.hasStatusIcons,
            "is-disabled": this.disabled
          }, "as-".concat(this.viewportMode), this.StatusType ? "is-".concat(this.StatusType) : null);
        },
        //----------------------------------------
        isShowTitle: function isShowTitle() {
          return !Ti.Util.isNil(this.title);
        },
        isShowIcon: function isShowIcon() {
          return !Ti.Util.isNil(this.icon);
        },
        isShowTip: function isShowTip() {
          return !Ti.Util.isNil(this.tip);
        },
        hasStatusIcons: function hasStatusIcons() {
          return !_.isEmpty(this.statusIcons);
        },
        //----------------------------------------
        isNumberType: function isNumberType() {
          return /^(Number|Integer|Float)$/.test(this.type);
        },
        //----------------------------------------
        UniqName: function UniqName() {
          return _.isArray(this.name) ? this.name.join("-") : this.name;
        },
        //----------------------------------------
        TheTitle: function TheTitle() {
          return this.title || this.UniqName;
        },
        //----------------------------------------
        ComClass: function ComClass() {
          var auto = "auto" == this.width;
          var full = "full" == this.width;
          var stretch = "stretch" == this.width;
          var fixed = !auto && !full && !stretch && !Ti.Util.isNil(this.width);
          return {
            "is-size-auto": auto,
            "is-size-full": full,
            "is-size-stretch": stretch,
            "is-size-fixed": fixed
          };
        },
        //----------------------------------------
        ConStyle: function ConStyle() {
          return Ti.Css.toStyle({
            height: this.height
          });
        },
        //----------------------------------------
        ComStyle: function ComStyle() {
          var css = {
            height: this.height
          };

          if (this.width && !/^(auto|stretch)$/.test(this.width)) {
            css.width = Ti.Css.toSize(this.width);
          }

          return Ti.Css.toStyle(css);
        },
        //----------------------------------------
        TheDisplay: function TheDisplay() {
          // Guard
          if (!this.display) {
            return;
          } // Eval setting


          if (!_.isBoolean(this.display) && this.display) {
            return this.evalFieldDisplayItem(this.display, {
              //funcSet    : this.funcSet,
              defaultKey: this.name
            });
          } // return default.


          return {
            comType: "ti-label",
            comConf: {}
          };
        },
        //----------------------------------------
        CurrentDisplayItem: function CurrentDisplayItem() {
          // Display Mode
          var dis = this.TheDisplay || {}; // If Actived reset the display

          if (this.isActived || !this.display) {
            dis = {
              defaultAs: this.defaultAs,
              comType: this.comType,
              comConf: this.comConf
            };
          } // Assign the default value and return


          return _.defaults(_.cloneDeep(dis), {
            comType: "ti-label",
            key: this.name,
            type: this.type,
            dict: this.dict,
            transformer: this.transformer
          });
        },
        //----------------------------------------
        Status: function Status() {
          return _.get(this.fieldStatus, this.uniqKey);
        },
        //----------------------------------------
        StatusType: function StatusType() {
          return _.get(this.Status, "type");
        },
        //----------------------------------------
        StatusText: function StatusText() {
          return _.get(this.Status, "text");
        },
        //----------------------------------------
        StatusIcon: function StatusIcon() {
          if (this.Status && this.hasStatusIcons) {
            return this.statusIcons[this.Status.type];
          }
        } //----------------------------------------

      },
      ////////////////////////////////////////////////
      methods: {
        //--------------------------------------------
        __before_bubble: function __before_bubble(_ref31) {
          var name = _ref31.name,
              args = _ref31.args;

          if (this.name) {
            return {
              name: "".concat(this.UniqName, "::").concat(name),
              args: args
            };
          }
        },
        //--------------------------------------------
        OnChange: function OnChange(val) {
          // Customized value
          var v2 = val;

          try {
            //console.log("this.serializer(val):", val)
            v2 = this.serializer(val); //console.log("field changed", val, v2)
          } // Invalid 
          catch (error) {
            this.$notify("invalid", {
              errMessage: "" + error,
              name: this.name,
              value: val
            });
            return;
          } // apply default


          v2 = this.evalInputValue(v2); // emit event

          if (!this.checkEquals || !_.isEqual(v2, this.fieldValue)) {
            //console.log("  #field.change:", v2)
            this.$notify("change", {
              name: this.name,
              value: v2
            });
          }
        },
        //--------------------------------------------
        evalTheCom: function evalTheCom() {
          var _this78 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee40() {
            var theCom;
            return regeneratorRuntime.wrap(function _callee40$(_context40) {
              while (1) {
                switch (_context40.prev = _context40.next) {
                  case 0:
                    _context40.next = 2;
                    return _this78.evalDataForFieldDisplayItem({
                      itemData: _this78.data,
                      displayItem: _this78.CurrentDisplayItem,
                      vars: {
                        "isActived": _this78.isActived,
                        "disabled": _this78.disabled
                      },
                      autoIgnoreNil: false,
                      autoIgnoreBlank: false,
                      autoValue: _this78.autoValue
                    });

                  case 2:
                    theCom = _context40.sent;

                    if (theCom) {
                      _context40.next = 8;
                      break;
                    }

                    _this78.myComType = undefined;
                    _this78.myComConf = undefined;
                    _this78.isComReady = false;
                    return _context40.abrupt("return");

                  case 8:
                    _this78.myComType = theCom.comType;
                    _this78.myComConf = theCom.comConf;
                    _this78.isComReady = true;

                  case 11:
                  case "end":
                    return _context40.stop();
                }
              }
            }, _callee40);
          }))();
        },
        //--------------------------------------------
        evalInputValue: function evalInputValue(val) {
          // apply default
          if (_.isUndefined(val)) {
            return _.cloneDeep(Ti.Util.fallback(this.undefinedAs, this.defaultAs));
          }

          if (_.isNull(val)) {
            return _.cloneDeep(Ti.Util.fallback(this.nullAs, this.defaultAs, null));
          }

          if (this.isNumberType && isNaN(val)) {
            return _.cloneDeep(Ti.Util.fallback(this.nanAs, this.defaultAs, NaN));
          }

          if (_.isEmpty(val) && _.isString(val)) {
            return _.cloneDeep(Ti.Util.fallback(this.emptyAs, this.defaultAs, ""));
          }

          return val;
        } //--------------------------------------------

      },
      ////////////////////////////////////////////////
      watch: {
        "CurrentDisplayItem": "evalTheCom",
        "data": {
          handler: "evalTheCom",
          immediate: true
        }
      } ////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/form/com/form-field/form-field.mjs", _M);
  })(); //============================================================
  // JOIN: ti/form/com/form-field/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/form/com/form-field/_com.json", {
    "name": "ti-form-field",
    "globally": true,
    "template": "./form-field.html",
    "methods": "@com:ti/support/field_display.mjs",
    "props": "./form-field-props.mjs",
    "mixins": ["./form-field.mjs"]
  }); //============================================================
  // JOIN: ti/form/com/form-group/form-group-props.mjs
  //============================================================

  (function () {
    var _M = {
      "type": {
        type: String,
        "default": "Group"
      },
      "icon": {
        type: String,
        "default": null
      },
      "title": {
        type: String,
        "default": null
      },
      "fields": {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      "data": {
        type: Object,
        "default": null
      },
      "fieldStatus": {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      "statusIcons": {
        spinning: 'fas-spinner fa-spin',
        error: 'zmdi-alert-polygon',
        warn: 'zmdi-alert-triangle',
        ok: 'zmdi-check-circle'
      }
    };
    Ti.Preload("ti/com/ti/form/com/form-group/form-group-props.mjs", _M);
  })(); //============================================================
  // JOIN: ti/form/com/form-group/form-group.html
  //============================================================


  Ti.Preload("ti/com/ti/form/com/form-group/form-group.html", "<div class=\"form-group\"\n  :class=\"topClass\">\n  <div class=\"group-title\">\n    <ti-icon\n      v-if=\"show.icon\" \n      :value=\"icon\"/>\n    <span\n      v-if=\"show.title\"\n      class=\"name-title\">{{title|i18n}}</span>\n  </div>\n  <div class=\"group-fields\">\n      <ti-form-field v-for=\"fld in fields\"\n        :key=\"fld.key\"\n        v-bind=\"fld\"\n        :data=\"data\"\n        :field-status=\"fieldStatus\"\n        :status-icons=\"statusIcons\"/>\n  </div>\n</div>"); //============================================================
  // JOIN: ti/form/com/form-group/form-group.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      ///////////////////////////////////////////
      computed: {
        //----------------------------------------
        topClass: function topClass() {
          var klass = ["as-".concat(this.viewportMode)];

          if (this.className) {
            klass.push(this.className);
          }

          return klass;
        },
        //----------------------------------------
        show: function show() {
          return {
            title: this.title ? true : false,
            icon: this.icon ? true : false
          };
        } //----------------------------------------

      } ///////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/form/com/form-group/form-group.mjs", _M);
  })(); //============================================================
  // JOIN: ti/form/com/form-group/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/form/com/form-group/_com.json", {
    "name": "form-group",
    "globally": false,
    "template": "./form-group.html",
    "props": "./form-group-props.mjs",
    "mixins": ["./form-group.mjs"]
  }); //============================================================
  // JOIN: ti/form/ti-form-props.mjs
  //============================================================

  (function () {
    var _M = {
      //-----------------------------------
      // Data
      //-----------------------------------
      "data": {
        type: Object,
        "default": undefined
      },
      "fields": {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      "fieldStatus": {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      // "extendFunctionSet" : {
      //   type : Object,
      //   default : undefined
      // },
      "onlyFields": {
        type: Boolean,
        "default": true
      },
      // merge each time data change
      "fixed": {
        type: Object,
        "default": undefined
      },
      //-----------------------------------
      // Behavior
      //-----------------------------------
      "keepTabIndexBy": {
        type: String,
        "default": undefined
      },
      "defaultComType": {
        type: String,
        "default": "ti-label"
      },
      "autoShowBlank": {
        type: Boolean,
        "default": undefined
      },
      "currentTab": {
        type: Number,
        "default": 0
      },
      "adjustDelay": {
        type: Number,
        "default": 0
      },
      //-----------------------------------
      // Aspect
      //-----------------------------------
      "mode": {
        type: String,
        "default": "all",
        validator: function validator(val) {
          return /^(all|tab)$/.test(val);
        }
      },
      "tabAt": {
        type: String,
        "default": "top-center",
        validator: function validator(v) {
          return /^(top|bottom)-(left|center|right)$/.test(v);
        }
      },
      "blankAs": {
        type: Object,
        "default": function _default() {
          return {
            icon: "fas-dna",
            "default": undefined
          };
        }
      },
      "icon": {
        type: String,
        "default": undefined
      },
      "title": {
        type: String,
        "default": undefined
      },
      "statusIcons": {
        type: Object,
        "default": function _default() {
          return {
            spinning: 'fas-spinner fa-spin',
            error: 'zmdi-alert-polygon',
            warn: 'zmdi-alert-triangle',
            ok: 'zmdi-check-circle'
          };
        }
      },
      "spacing": {
        type: String,
        "default": "comfy",
        validator: function validator(v) {
          return /^(comfy|tiny)$/.test(v);
        }
      },
      //-----------------------------------
      // Measure
      //-----------------------------------
      "width": {
        type: [Number, String],
        "default": undefined
      },
      "height": {
        type: [Number, String],
        "default": undefined
      }
    };
    Ti.Preload("ti/com/ti/form/ti-form-props.mjs", _M);
  })(); //============================================================
  // JOIN: ti/form/ti-form.html
  //============================================================


  Ti.Preload("ti/com/ti/form/ti-form.html", "<div class=\"ti-form\"\n  :class=\"TopClass\"\n  :style=\"TopStyle\"\n  v-ti-activable>\n  <template v-if=\"hasData || !isAutoShowBlank\">\n    <!--\n      Form Header\n    -->\n    <header class=\"form-header\" v-if=\"hasHeader\">\n      <span v-if=\"icon\"\n        class=\"it-icon\"><ti-icon :value=\"icon\"/></span>\n      <span v-if=\"title\"\n        class=\"it-text\">{{title|i18n}}</span>\n    </header>\n    <!--\n      Tabs for display:\"tab\"\n    -->\n    <div class=\"form-tab\" v-if=\"isTabMode\">\n      <ul>\n        <li v-for=\"tab in TabItems\" \n          :class=\"tab.className\"\n          @click.left=\"OnClickTab(tab)\">\n          <ti-icon \n            class=\"tab-icon\" v-if=\"tab.icon\" :value=\"tab.icon\"/>\n          <span \n            class=\"tab-text\" v-if=\"tab.title\">{{tab.title|i18n}}</span>\n        </li>\n      </ul>\n    </div>\n    <!--\n      Form Fields\n    -->\n    <div class=\"form-body\" :class=\"FormBodyClass\">\n      <template v-for=\"fld in FieldsInCurrentTab\">\n        <!--\n          For Group\n        -->\n        <form-group v-if=\"'Group' == fld.type\"\n          v-bind=\"fld\"\n          :data=\"data\"\n          :field-status=\"fieldStatus\"\n          :status-icons=\"statusIcons\"\n          @change=\"OnFieldChange\"/>\n        <!--\n          For field\n        -->\n        <ti-form-field v-else\n          :key=\"fld.key\"\n          v-bind=\"fld\"\n          :data=\"data\"\n          :field-status=\"fieldStatus\"\n          :status-icons=\"statusIcons\"\n          @change=\"OnFieldChange\"/>\n      </template>\n    </div>\n  </template>\n  <!--\n    Show Blank\n  -->\n  <ti-loading \n    v-else\n      class=\"nil-data as-big-mask\"\n      v-bind=\"blankAs\"/>\n</div>"); //============================================================
  // JOIN: ti/form/ti-form.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////////////////
      model: {
        prop: "data",
        event: "change"
      },
      //////////////////////////////////////////////////////
      data: function data() {
        return {
          myKeysInFields: [],
          currentTabIndex: 0
        };
      },
      //////////////////////////////////////////////////////
      computed: {
        //--------------------------------------------------
        TopClass: function TopClass() {
          var _this$getTopClass;

          return this.getTopClass((_this$getTopClass = {
            "is-tab-mode": this.isTabMode,
            "is-all-mode": this.isAllMode
          }, _defineProperty(_this$getTopClass, "tab-at-".concat(this.tabAt), this.isTabMode), _defineProperty(_this$getTopClass, "tab-at-".concat(this.TheTabAtX), this.isTabMode), _defineProperty(_this$getTopClass, "tab-at-".concat(this.TheTabAtY), this.isTabMode), _this$getTopClass), "as-".concat(this.viewportMode), "as-spacing-".concat(this.spacing || "comfy"));
        },
        //--------------------------------------------------
        TopStyle: function TopStyle() {
          return Ti.Css.toStyle({
            width: this.width,
            height: this.height
          });
        },
        //--------------------------------------------------
        hasHeader: function hasHeader() {
          return this.title || this.icon ? true : false;
        },
        //--------------------------------------------------
        hasData: function hasData() {
          return !Ti.Util.isNil(this.data);
        },
        //--------------------------------------------------
        isTabMode: function isTabMode() {
          return 'tab' == this.mode;
        },
        isAllMode: function isAllMode() {
          return 'all' == (this.mode || "all");
        },
        isAutoShowBlank: function isAutoShowBlank() {
          return Ti.Util.fallback(this.autoShowBlank, false);
        },
        //--------------------------------------------------
        TheTabAt: function TheTabAt() {
          return this.tabAt.split("-");
        },
        TheTabAtX: function TheTabAtX() {
          return this.TheTabAt[1];
        },
        TheTabAtY: function TheTabAtY() {
          return this.TheTabAt[0];
        },
        //--------------------------------------------------
        TheFields: function TheFields() {
          var _this79 = this;

          var list = [];
          var keys = []; //................................................

          _.forEach(this.fields, function (fld, index) {
            var fld2 = _this79.evalFormField(fld, [index]);

            if (fld2) {
              list.push(fld2); // Gather keys

              if (!fld2.disabled) {
                // Field group ...
                if ("Group" == fld2.type) {
                  _.forEach(fld2.fields, function (_ref32) {
                    var disabled = _ref32.disabled,
                        name = _ref32.name;

                    if (!disabled) {
                      keys.push(name);
                    }
                  });
                } // The fields
                else {
                    keys.push(fld2.name);
                  }
              }
            }
          }); //................................................


          this.myKeysInFields = _.flattenDeep(keys); //................................................

          return list;
        },
        //--------------------------------------------------
        TabList: function TabList() {
          var list = [];
          var otherFields = [];

          if (this.isTabMode) {
            var _iterator20 = _createForOfIteratorHelper(this.TheFields),
                _step20;

            try {
              for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
                var fld = _step20.value;

                if (fld.type == "Group") {
                  list.push(fld);
                } // Collect to others
                else {
                    otherFields.push(fld);
                  }
              } // Join others

            } catch (err) {
              _iterator20.e(err);
            } finally {
              _iterator20.f();
            }

            if (!_.isEmpty(otherFields)) {
              list.push({
                type: "Group",
                title: "i18n:others",
                fields: otherFields
              });
            }
          }

          return list;
        },
        //--------------------------------------------------
        // add "current" to theTabList
        TabItems: function TabItems() {
          var _this80 = this;

          var items = [];

          _.forEach(this.TabList, function (li, index) {
            var isCurrent = index == _this80.currentTabIndex;
            items.push(_.assign({}, li, {
              index: index,
              isCurrent: isCurrent,
              className: {
                "is-current": isCurrent
              }
            }));
          });

          return items;
        },
        //--------------------------------------------------
        CurrentTab: function CurrentTab() {
          var _iterator21 = _createForOfIteratorHelper(this.TabItems),
              _step21;

          try {
            for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
              var tab = _step21.value;

              if (tab.isCurrent) {
                return tab;
              }
            }
          } catch (err) {
            _iterator21.e(err);
          } finally {
            _iterator21.f();
          }
        },
        //--------------------------------------------------
        FormBodyClass: function FormBodyClass() {
          if (this.CurrentTab) {
            return "tab-body-".concat(this.CurrentTab.index);
          }
        },
        //--------------------------------------------------
        FieldsInCurrentTab: function FieldsInCurrentTab() {
          // Current Tab
          if (this.isTabMode) {
            if (this.CurrentTab) {
              return this.CurrentTab.fields || [];
            }

            return [];
          } // Show All
          else {
              return this.TheFields;
            }
        },
        //--------------------------------------------------

        /***
         * Eval function set for `transformer|serializer` of each fields
         * 
         * Defaultly, it will support the function set defined in `Ti.Types`
         */
        // FuncSet() {
        //   return _.assign({}, Ti.GlobalFuncs(), this.extendFunctionSet)
        // },
        //--------------------------------------------------
        TheData: function TheData() {
          if (this.data) {
            if (this.onlyFields) {
              return _.pick(this.data, this.myKeysInFields);
            }

            return this.data;
          }

          return {};
        } //--------------------------------------------------

      },
      //////////////////////////////////////////////////////
      methods: {
        //--------------------------------------------------
        OnClickTab: function OnClickTab(tab) {
          this.currentTabIndex = tab.index;
          this.$notify("tab:change", tab);
        },
        //--------------------------------------------------
        OnFieldChange: function OnFieldChange() {
          var _this81 = this;

          var _ref33 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              name = _ref33.name,
              value = _ref33.value;

          // Notify at first
          //console.log("notify field")
          this.$notify("field:change", {
            name: name,
            value: value
          }); // Notify later ...
          // Wait a tick, give the change parent
          // Update the data input
          // The computed field "TheField"
          // will auto-update the field status 'disabled/hidden'
          // It may change the notify data

          this.$nextTick(function () {
            //console.log("notify data")
            var data = _this81.getData({
              name: name,
              value: value
            });

            _this81.$notify("change", data);
          });
        },
        //--------------------------------------
        getData: function getData() {
          var _ref34 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              name = _ref34.name,
              value = _ref34.value;

          var data = _.cloneDeep(this.TheData); // Signle value


          if (name && _.isString(name)) {
            // Whole data
            if (".." == name) {
              _.assign(data, value);
            } // Statci value
            else if (/^'[^']+'$/.test(name)) {
                return;
              } // Dynamic value
              else {
                  _.set(data, name, value);
                }
          } // Object
          else if (_.isArray(name)) {
              var vo = {};

              var _iterator22 = _createForOfIteratorHelper(name),
                  _step22;

              try {
                for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
                  var k = _step22.value;
                  vo[k] = _.get(value, k);
                }
              } catch (err) {
                _iterator22.e(err);
              } finally {
                _iterator22.f();
              }

              _.assign(data, vo);
            } // Join the fixed data


          if (this.fixed) {
            _.assign(data, fixed);
          }

          return data;
        },
        //--------------------------------------
        isGroup: function isGroup(fld) {
          return "Group" == fld.type || _.isArray(fld.fields);
        },
        //--------------------------------------------------
        evalFormField: function evalFormField() {
          var _this82 = this;

          var fld = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var nbs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

          // Hide or disabled
          if (fld.hidden) {
            if (Ti.Validate.match(this.data, fld.hidden)) {
              return;
            }
          } // Disable


          var disabled = false;

          if (fld.disabled) {
            disabled = Ti.Validate.match(this.data, fld.disabled);
          } // The key


          var fldKey = Ti.Util.anyKey(fld.name || nbs, "ti-fld"); // let fldKey = fld.name
          //   ? [].concat(fld.name).join("-")
          //   : "ti-fld-" + nbs.join("-")
          //............................................
          // For group

          if (this.isGroup(fld)) {
            var group = {
              disabled: disabled,
              type: "Group",
              key: fldKey,
              className: fld.className,
              icon: fld.icon,
              title: fld.title,
              fields: []
            }; // Group fields

            _.forEach(fld.fields, function (subfld, index) {
              var newSubFld = _this82.evalFormField(subfld, [].concat(_toConsumableArray(nbs), [index]));

              if (newSubFld) {
                group.fields.push(newSubFld);
              }
            }); // Done


            return _.isEmpty(group.fields) ? null : group;
          } //............................................
          // For Normal Field


          if (fld.name) {
            var field = _.defaults(_.omit(fld, "disabled"), {
              type: "String",
              comType: this.defaultComType,
              disabled: disabled
            }); // The UniqKey of field


            field.uniqKey = _.concat(field.name).join("-"); //console.log(field.uniqKey)
            // // field status
            // let fStatus = _.get(this.fieldStatus, funiqKey)
            // if(fStatus) {
            //   field.status  = fStatus.status
            //   field.message = fStatus.message
            // }
            // Default

            if (!field.serializer) {
              var fnName = Ti.Types.getFuncByType(field.type || "String", "serializer");
              field.serializer = "Ti.Types.".concat(fnName);
            }

            if (!field.transformer) {
              var _fnName = Ti.Types.getFuncByType(field.type || "String", "transformer");

              field.transformer = "Ti.Types.".concat(_fnName);
            } // Tidy form function


            var invokeOpt = {
              context: this,
              partial: "right"
            };
            field.serializer = Ti.Util.genInvoking(field.serializer, invokeOpt);
            field.transformer = Ti.Util.genInvoking(field.transformer, invokeOpt); // Done

            return field;
          }
        },
        //--------------------------------------------------
        __adjust_fields_width: function __adjust_fields_width() {
          // Guard
          if (!_.isElement(this.$el)) return; // Find all field-name Elements

          var $fldNames = Ti.Dom.findAll(".form-field > .field-name", this.$el); // Reset them to org-width

          var _iterator23 = _createForOfIteratorHelper($fldNames),
              _step23;

          try {
            for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
              var $fldnm = _step23.value;
              Ti.Dom.setStyle($fldnm, {
                width: ""
              });
            } // Get the max-width of them

          } catch (err) {
            _iterator23.e(err);
          } finally {
            _iterator23.f();
          }

          var maxWidth = 0;

          var _iterator24 = _createForOfIteratorHelper($fldNames),
              _step24;

          try {
            for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
              var _$fldnm = _step24.value;
              var rect = Ti.Rects.createBy(_$fldnm);
              maxWidth = Math.ceil(Math.max(rect.width, maxWidth));
            } // Wait for whole view rendered, and align the field-name

          } catch (err) {
            _iterator24.e(err);
          } finally {
            _iterator24.f();
          }

          var _iterator25 = _createForOfIteratorHelper($fldNames),
              _step25;

          try {
            for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
              var _$fldnm2 = _step25.value;
              Ti.Dom.setStyle(_$fldnm2, {
                width: maxWidth
              });
            }
          } catch (err) {
            _iterator25.e(err);
          } finally {
            _iterator25.f();
          }
        },
        //--------------------------------------------------
        adjustFieldsWidth: function adjustFieldsWidth() {
          var _this83 = this;

          if (this.adjustDelay > 0) {
            _.delay(function () {
              _this83.__adjust_fields_width();
            }, this.adjustDelay);
          } else {
            this.$nextTick(function () {
              _this83.__adjust_fields_width();
            });
          }
        },
        //--------------------------------------------------
        // Callback
        //--------------------------------------------------
        __ti_shortcut: function __ti_shortcut(uniqKey) {
          var _this84 = this;

          //console.log("ti-form", uniqKey)
          if ("ENTER" == uniqKey) {
            // It should wait a while before submit
            // <ti-input> will apply change at @change event
            // And the @change event will be fired when ENTER 
            // bubble fade away
            _.delay(function () {
              _this84.$notify("submit");
            }, 100);
          }
        } //--------------------------------------------------

      },
      //////////////////////////////////////////////////////
      watch: {
        "TheFields": function TheFields() {
          this.adjustFieldsWidth();
        },
        "currentTab": function currentTab(index) {
          this.currentTabIndex = index;
        },
        "currentTabIndex": function currentTabIndex(index) {
          if (this.keepTabIndexBy) {
            Ti.Storage.session.set(this.keepTabIndexBy, index);
          }

          this.adjustFieldsWidth();
        }
      },
      //////////////////////////////////////////////////////
      created: function created() {
        var _this85 = this;

        this.__debounce_adjust_fields_width = _.debounce(function () {
          _this85.__adjust_fields_width();
        }, 500);
      },
      //////////////////////////////////////////////////////
      mounted: function mounted() {
        var _this86 = this;

        //--------------------------------------------------
        this.currentTabIndex = Ti.Storage.session.getInt(this.keepTabIndexBy, this.currentTab); //--------------------------------------------------

        Ti.Viewport.watch(this, {
          resize: function resize() {
            _this86.__debounce_adjust_fields_width();
          }
        }); //--------------------------------------------------

        this.adjustFieldsWidth(); //--------------------------------------------------
      },
      //////////////////////////////////////////////////////
      beforeDestroy: function beforeDestroy() {
        Ti.Viewport.unwatch(this);
      } //////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/form/ti-form.mjs", _M);
  })(); //============================================================
  // JOIN: ti/form/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/form/_com.json", {
    "name": "ti-form",
    "globally": true,
    "template": "./ti-form.html",
    "methods": "@com:ti/support/field_display.mjs",
    "props": "./ti-form-props.mjs",
    "mixins": ["./ti-form.mjs"],
    "components": ["./com/form-group", "./com/form-field", "@com:ti/input", "@com:ti/input/num", "@com:ti/input/tags", "@com:ti/input/color", "@com:ti/input/icon", "@com:ti/input/date", "@com:ti/input/time", "@com:ti/input/timerange", "@com:ti/input/month", "@com:ti/input/datetime", "@com:ti/input/daterange", "@com:ti/input/text", "@com:ti/combo/input", "@com:ti/combo/multi-input", "@com:ti/label", "@com:ti/toggle", "@com:ti/switcher", "@com:ti/droplist"]
  }); //============================================================
  // JOIN: ti/form/_hmaker.json
  //============================================================

  Ti.Preload("ti/com/ti/form/_hmaker.json", {
    "icon": "im-task-o",
    "title": "i18n:com-form",
    "scenes": ["desktop", "tablet"],
    "editComType": "hmaker-edit-com-form",
    "editComConf": {
      "value": "=comConf"
    }
  }); //============================================================
  // JOIN: ti/gui/block/ti-gui-block.html
  //============================================================

  Ti.Preload("ti/com/ti/gui/block/ti-gui-block.html", "<div class=\"ti-gui-block\" \n  :class=\"TopClass\"\n  :style=\"TopStyle\">\n  <!--\n    Header\n  -->\n  <div class=\"block-head\" v-if=\"isShowHeader\">\n    <!--Icon-->\n    <div class=\"as-icon\" v-if=\"icon\">\n      <ti-icon :value=\"icon\"/>\n    </div>\n    <!--Title-->\n    <div class=\"as-title\">\n      <span v-if=\"title\">{{title|i18n}}</span>\n    </div>\n    <!--Actions-->\n    <div class=\"as-actions\" v-if=\"hasActions\">\n      <ti-actionbar \n        :items=\"actions\"\n        :status=\"actionStatus\"/>\n    </div>\n  </div>\n  <!--\n    Content\n  -->\n  <div class=\"block-main\" v-if=\"TheCom\">\n    <div class=\"block-main-con\"\n      :class=\"MainConClass\">\n      <component \n        :class=\"MainComponentClass\"\n        :is=\"TheCom.comType\"\n        v-bind=\"TheCom.comConf\"/>\n    </div>\n  </div>\n  <!--Blank-->\n  </div>"); //============================================================
  // JOIN: ti/gui/block/ti-gui-block.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////
      inject: ["$gui"],
      /////////////////////////////////////////
      props: {
        "type": {
          type: String,
          "default": null,
          validator: function validator(v) {
            return Ti.Util.isNil(v) || /^(cols|rows|tabs)$/.test(v);
          }
        },
        "title": {
          type: String,
          "default": null
        },
        "icon": {
          type: [String, Object],
          "default": null
        },
        "hideTitle": {
          type: Boolean,
          "default": false
        },
        "actions": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "actionStatus": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "name": {
          type: String,
          "default": null
        },
        "blocks": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "comClass": {
          type: String,
          "default": undefined
        },
        "body": {
          type: [String, Object],
          "default": null
        },
        "embedIn": {
          type: String,
          "default": null,
          validator: function validator(v) {
            return /^(panel|rows|cols|tabs)$/.test(v);
          }
        },
        "size": {
          type: [String, Number],
          "default": null
        },
        "overflow": {
          type: String,
          "default": undefined,
          validator: function validator(v) {
            return _.isUndefined(v) || /^(auto|none|fill|cover)$/.test(v);
          }
        },
        "flex": {
          type: String,
          "default": undefined,
          validator: function validator(v) {
            return _.isUndefined(v) || /^(nil|auto|grow|shrink|both|none)$/.test(v);
          }
        },
        "schema": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "shown": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "captureEvents": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        // Those 3 props for by-pass to sub-(cols/rows)
        "tabAt": undefined,
        "adjustable": undefined,
        "border": undefined
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          var _this$getTopClass2;

          return this.getTopClass((_this$getTopClass2 = {}, _defineProperty(_this$getTopClass2, "gui-block-".concat(this.name), this.name ? true : false), _defineProperty(_this$getTopClass2, "is-show-header", this.isShowHeader), _defineProperty(_this$getTopClass2, "is-hide-header", !this.isShowHeader), _defineProperty(_this$getTopClass2, "ti-fill-parent", /^(tabs|panel)$/.test(this.embedIn)), _this$getTopClass2), "is-flex-".concat(this.FlexName));
        },
        //--------------------------------------
        TopStyle: function TopStyle() {
          var _this87 = this;

          return Ti.Css.toStyle({
            //..................................
            rows: function rows() {
              return {
                height: _this87.BlockSize
              };
            },
            //..................................
            cols: function cols() {
              return {
                width: _this87.BlockSize
              };
            },
            //..................................
            tabs: function tabs() {
              return {};
            },
            //..................................
            panel: function panel() {
              return {};
            } //..................................

          }[this.embedIn]());
        },
        //--------------------------------------
        MainConClass: function MainConClass() {
          if (!this.isFlexNil) {
            return {
              "fill-parent": "fill" == this.TheOverflow,
              "cover-parent": "cover" == this.TheOverflow
            };
          }
        },
        //--------------------------------------
        MainComponentClass: function MainComponentClass() {
          return Ti.Css.mergeClassName(this.$gui.defaultComClass, this.comClass);
        },
        //--------------------------------------
        TheOverflow: function TheOverflow() {
          var ov = this.overflow || this.$gui.defaultOverflow || "auto";

          if ("auto" == ov) {
            if (this.isFlexNone) {
              return "fill";
            }

            if (/^(both|shrink)$/.test(this.FlexName)) {
              return "cover";
            }
          }

          return ov;
        },
        //--------------------------------------
        BlockSize: function BlockSize() {
          var size = this.size;
          return /^(auto|stretch)$/.test(size) ? null : size;
        },
        //--------------------------------------
        FlexName: function FlexName() {
          var flex = this.flex || this.$gui.defaultFlex || "auto";

          if ("auto" == flex) {
            if ("stretch" == this.size || Ti.Util.isNil(this.size)) {
              return "both";
            }

            return "none";
          }

          return flex || "both";
        },
        //--------------------------------------
        isFlexNil: function isFlexNil() {
          return "nil" == this.FlexName;
        },
        //--------------------------------------
        isFlexNone: function isFlexNone() {
          return "none" == this.FlexName;
        },
        //--------------------------------------
        isShowHeader: function isShowHeader() {
          if (this.hideTitle || 'tabs' == this.embedIn) {
            return false;
          }

          if (this.title || this.hasActions) {
            return true;
          }

          return false;
        },
        //--------------------------------------
        hasActions: function hasActions() {
          return !_.isEmpty(this.actions);
        },
        //--------------------------------------
        TheCom: function TheCom() {
          //....................................
          // Body -> Component
          if (this.body) {
            var com = _.isString(this.body) ? this.schema[this.body] : this.body;

            if (com) {
              var parent = this.schema[com["extends"]];

              var self = _.omit(com, "extends");

              com = _.merge({}, parent, self);
              return _.defaults(com, {
                comType: "ti-label",
                comConf: {}
              });
            }
          } //....................................
          // Sub GUI


          if (!_.isEmpty(this.blocks)) {
            var comType = "ti-gui-".concat(this.type || "cols");
            var comConf = {
              tabAt: this.tabAt,
              border: this.border,
              adjustable: this.adjustable,
              blocks: this.blocks,
              schema: this.schema,
              actionStatus: this.actionStatus,
              shown: this.shown,
              defaultFlex: this.defaultFlex
            };
            return {
              comType: comType,
              comConf: comConf
            };
          } //....................................

        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        __before_bubble: function __before_bubble(_ref35) {
          var name = _ref35.name,
              args = _ref35.args;

          if (this.name) {
            return {
              name: "".concat(this.name, "::").concat(name),
              args: args
            };
          }
        } //--------------------------------------

      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/gui/block/ti-gui-block.mjs", _M);
  })(); //============================================================
  // JOIN: ti/gui/block/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/gui/block/_com.json", {
    "name": "ti-gui-block",
    "globally": true,
    "template": "./ti-gui-block.html",
    "mixins": ["./ti-gui-block.mjs"]
  }); //============================================================
  // JOIN: ti/gui/cols/ti-gui-cols.html
  //============================================================

  Ti.Preload("ti/com/ti/gui/cols/ti-gui-cols.html", "<div class=\"ti-gui-cols\" :class=\"topClass\">\n  <template v-if=\"hasBlocks\">\n    <template v-for=\"(block, index) in blocks\">\n      <ti-gui-block v-if=\"!block.hide\"\n        :key=\"index\"\n        embed-in=\"cols\"\n        v-bind=\"block\"\n        :schema=\"schema\"\n        :action-status=\"actionStatus\"\n        :shown=\"shown\"/>\n      </template>\n  </template>\n</div>"); //============================================================
  // JOIN: ti/gui/cols/ti-gui-cols.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      /////////////////////////////////////////
      props: {
        "blocks": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "adjustable": {
          type: Boolean,
          "default": true
        },
        "border": {
          type: Boolean,
          "default": false
        },
        "schema": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "actionStatus": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "shown": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        topClass: function topClass() {
          return Ti.Css.mergeClassName({
            "is-adjustable": this.adjustable,
            "show-border": this.border
          }, this.className);
        },
        //--------------------------------------
        hasBlocks: function hasBlocks() {
          return !_.isEmpty(this.blocks);
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {} //--------------------------------------
      //--------------------------------------
      //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/gui/cols/ti-gui-cols.mjs", _M);
  })(); //============================================================
  // JOIN: ti/gui/cols/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/gui/cols/_com.json", {
    "name": "ti-gui-cols",
    "globally": true,
    "template": "./ti-gui-cols.html",
    "mixins": ["./ti-gui-cols.mjs"],
    "components": ["@com:ti/gui/block"]
  }); //============================================================
  // JOIN: ti/gui/panel/ti-gui-panel.html
  //============================================================

  Ti.Preload("ti/com/ti/gui/panel/ti-gui-panel.html", "<div class=\"ti-gui-panel\"\n  :class=\"TopClass\"\n  @click.left=\"OnClickMask\">\n  <div class=\"panel-con\"\n    :style=\"ConStyle\"\n    @click.left.stop>\n    <!--\n      Block\n    -->\n    <ti-gui-block\n      embed-in=\"panel\"\n      flex=\"none\"\n      :type=\"type\"\n      :title=\"title\"\n      :icon=\"icon\"\n      :hide-title=\"hideTitle\"\n      :actions=\"actions\"\n      :action-status=\"actionStatus\"\n      :name=\"name\"\n      :blocks=\"blocks\"\n      :body=\"body\"\n      :overflow=\"overflow\"\n      :schema=\"schema\"\n      :shown=\"shown\"\n      :capture-events=\"captureEvents\"/>\n    <!--\n      Closer\n    -->\n    <div\n      v-if=\"hasCloser\"\n        class=\"panel-closer\"\n        :class=\"CloserClass\">\n        <ti-icon\n          value=\"zmdi-close\"\n          @click.native=\"OnClose\"/>\n    </div>\n  </div>\n</div>"); //============================================================
  // JOIN: ti/gui/panel/ti-gui-panel.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      inject: ["$gui"],
      /////////////////////////////////////////
      props: {
        "captureEvents": undefined,
        "title": {
          type: String,
          "default": null
        },
        "icon": {
          type: [String, Object],
          "default": null
        },
        "hideTitle": {
          type: Boolean,
          "default": false
        },
        "actions": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "actionStatus": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "name": {
          type: String,
          "default": null
        },
        "type": {
          type: String,
          "default": null,
          validator: function validator(v) {
            return Ti.Util.isNil(v) || /^(cols|rows|tabs)$/.test(v);
          }
        },
        "blocks": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "body": {
          type: [String, Object],
          "default": null
        },
        "adjustable": {
          type: [Boolean, String],
          "default": true,
          validator: function validator(v) {
            return _.isBoolean(v) || /^(x|y)$/.test(v);
          }
        },
        "overflow": {
          type: String,
          "default": undefined
        },
        "width": {
          type: [String, Number],
          "default": -1
        },
        "height": {
          type: [String, Number],
          "default": -1
        },
        "viewportWidth": {
          type: [String, Number],
          "default": 0
        },
        "viewportHeight": {
          type: [String, Number],
          "default": 0
        },
        "position": {
          type: String,
          "default": "center",
          validator: function validator(v) {
            return /^(left|right|top|bottom|center)$/.test(v) || /^((left|right)-top|bottom-(left|right))$/.test(v);
          }
        },
        "fixed": {
          type: Boolean,
          "default": false
        },
        "closer": {
          type: String,
          "default": "default",
          validator: function validator(v) {
            return _.isNull(v) || /^(default|bottom|top|left|right)$/.test(v);
          }
        },
        "mask": {
          type: Boolean,
          "default": false
        },
        "transparent": {
          type: Boolean,
          "default": false
        },
        "clickMaskToClose": {
          type: Boolean,
          "default": false
        },
        "schema": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "shown": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass({
            "show-mask": this.mask,
            "no-mask": !this.mask,
            "is-bg-transparent": this.transparent,
            "is-bg-opaque": !this.transparent,
            "is-closer-default": this.isCloserDefault,
            "is-fixed": this.fixed
          }, "at-".concat(this.position));
        },
        //--------------------------------------
        ConStyle: function ConStyle() {
          var width = Ti.Css.toPixel(this.width, this.viewportWidth, this.width);
          var height = Ti.Css.toPixel(this.height, this.viewportHeight, this.height);
          return Ti.Css.toStyle({
            width: width,
            height: height
          });
        },
        //--------------------------------------
        hasCloser: function hasCloser() {
          return this.closer ? true : false;
        },
        //--------------------------------------
        isCloserDefault: function isCloserDefault() {
          return true === this.closer || "default" == this.closer;
        },
        //--------------------------------------
        CloserClass: function CloserClass() {
          return Ti.Css.mergeClassName(_defineProperty({
            'as-lamp-cord': !this.isCloserDefault,
            'as-default': this.isCloserDefault
          }, "at-".concat(this.closer), !this.isCloserDefault));
        } //--------------------------------------
        // theCloserIconName() {
        //   return this.isCloserDefault
        //           ? "zmdi-minus"
        //           : "zmdi-close";
        //}
        //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnClose: function OnClose() {
          this.$gui.OnBlockHide(this.name);
        },
        //--------------------------------------
        OnClickMask: function OnClickMask() {
          if (this.clickMaskToClose) {
            this.$gui.OnBlockHide(this.name);
          }
        } //--------------------------------------

      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/gui/panel/ti-gui-panel.mjs", _M);
  })(); //============================================================
  // JOIN: ti/gui/panel/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/gui/panel/_com.json", {
    "name": "ti-gui-panel",
    "globally": true,
    "template": "./ti-gui-panel.html",
    "mixins": ["./ti-gui-panel.mjs"],
    "components": ["@com:ti/gui/block"]
  }); //============================================================
  // JOIN: ti/gui/rows/ti-gui-rows.html
  //============================================================

  Ti.Preload("ti/com/ti/gui/rows/ti-gui-rows.html", "<div class=\"ti-gui-rows\" :class=\"topClass\">\n  <template v-if=\"hasBlocks\">\n    <template v-for=\"(block, index) in blocks\">\n      <ti-gui-block v-if=\"!block.hide\"\n        :key=\"index\"\n        embed-in=\"rows\"\n        v-bind=\"block\"\n        :schema=\"schema\"\n        :action-status=\"actionStatus\"\n        :shown=\"shown\"/>\n    </template>\n  </template>\n</div>"); //============================================================
  // JOIN: ti/gui/rows/ti-gui-rows.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      /////////////////////////////////////////
      props: {
        "blocks": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "adjustable": {
          type: Boolean,
          "default": true
        },
        "border": {
          type: Boolean,
          "default": false
        },
        "schema": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "actionStatus": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "shown": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        topClass: function topClass() {
          return Ti.Css.mergeClassName({
            "is-adjustable": this.adjustable,
            "show-border": this.border
          }, this.className);
        },
        //--------------------------------------
        hasBlocks: function hasBlocks() {
          return !_.isEmpty(this.blocks);
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {} //--------------------------------------
      //--------------------------------------
      //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/gui/rows/ti-gui-rows.mjs", _M);
  })(); //============================================================
  // JOIN: ti/gui/rows/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/gui/rows/_com.json", {
    "name": "ti-gui-rows",
    "globally": true,
    "template": "./ti-gui-rows.html",
    "mixins": ["./ti-gui-rows.mjs"],
    "components": ["@com:ti/gui/block"]
  }); //============================================================
  // JOIN: ti/gui/tabs/ti-gui-tabs.html
  //============================================================

  Ti.Preload("ti/com/ti/gui/tabs/ti-gui-tabs.html", "<div class=\"ti-gui-tabs\" :class=\"TopClass\">\n  <!--\n    Tab title bar\n  -->\n  <header :class=\"TabClass\">\n    <ul>\n      <li v-for=\"it in TabItems\"\n        :key=\"it.key\"\n        :class=\"it.className\"\n        @click=\"OnSetCurrentTabItem(it)\">\n        <!--Icon-->\n        <ti-icon\n          v-if=\"it.icon\"\n            class=\"it-icon\"\n            :value=\"it.icon\"/>\n        <!--Text-->\n        <span class=\"it-text\">{{it.title|i18n}}</span>\n      </li>\n    </ul>\n  </header>\n  <!--\n    Current Block\n  -->\n  <section v-if=\"CurrentBlock\">\n    <ti-gui-block \n      embed-in=\"tabs\"\n      v-bind=\"CurrentBlock\"\n      :action-status=\"actionStatus\"\n      :schema=\"schema\"\n      :shown=\"shown\"/>\n  </section>\n</div>"); //============================================================
  // JOIN: ti/gui/tabs/ti-gui-tabs.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      inject: ["$gui"],
      /////////////////////////////////////////
      data: function data() {
        return {
          myCurrentTab: 0
        };
      },
      /////////////////////////////////////////
      props: {
        "tabAt": {
          type: String,
          "default": "top-left",
          validator: function validator(v) {
            return /^(top|bottom)-(left|center|right)$/.test(v);
          }
        },
        "blocks": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "schema": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "actionStatus": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "shown": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass("at-".concat(this.TheTabAt[0]));
        },
        //--------------------------------------
        TheTabAt: function TheTabAt() {
          return this.tabAt.split("-");
        },
        //--------------------------------------
        TabClass: function TabClass() {
          return "as-".concat(this.TheTabAt[1]);
        },
        //--------------------------------------
        BlockWrapList: function BlockWrapList() {
          var list = [];

          for (var i = 0; i < this.blocks.length; i++) {
            var block = this.blocks[i];
            var key = block.name || "tab-".concat(i);
            list.push({
              index: i,
              key: key,
              block: block
            });
          }

          return list;
        },
        //--------------------------------------
        TabItems: function TabItems() {
          var list = [];

          var _iterator26 = _createForOfIteratorHelper(this.BlockWrapList),
              _step26;

          try {
            for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
              var wrap = _step26.value;
              var current = this.myCurrentTab == wrap.key;
              var item = {
                current: current,
                key: wrap.key,
                index: wrap.index,
                name: wrap.block.name,
                icon: wrap.block.icon,
                title: wrap.block.title,
                className: {
                  "is-current": current
                }
              }; // tab item can not be blank

              if (!item.icon && !item.title) {
                item.title = Ti.Util.fallback(item.name, item.key);
              }

              list.push(item);
            }
          } catch (err) {
            _iterator26.e(err);
          } finally {
            _iterator26.f();
          }

          return list;
        },
        //--------------------------------------
        CurrentTabItem: function CurrentTabItem() {
          var _iterator27 = _createForOfIteratorHelper(this.TabItems),
              _step27;

          try {
            for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
              var item = _step27.value;

              if (item.current) {
                return item;
              }
            }
          } catch (err) {
            _iterator27.e(err);
          } finally {
            _iterator27.f();
          }
        },
        //--------------------------------------
        CurrentBlock: function CurrentBlock() {
          var _iterator28 = _createForOfIteratorHelper(this.BlockWrapList),
              _step28;

          try {
            for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
              var wrap = _step28.value;

              if (this.myCurrentTab == wrap.key) {
                return wrap.block;
              }
            }
          } catch (err) {
            _iterator28.e(err);
          } finally {
            _iterator28.f();
          }
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnSetCurrentTabItem: function OnSetCurrentTabItem(item) {
          var _this$$gui$OnBlockSho;

          this.$gui.OnBlockShownUpdate((_this$$gui$OnBlockSho = {}, _defineProperty(_this$$gui$OnBlockSho, item.key, true), _defineProperty(_this$$gui$OnBlockSho, this.CurrentTabItem.key, false), _this$$gui$OnBlockSho));
        },
        //--------------------------------------
        syncCurrentTabFromShown: function syncCurrentTabFromShown() {
          //console.log("syncCurrentTabFromShown")
          var _iterator29 = _createForOfIteratorHelper(this.BlockWrapList),
              _step29;

          try {
            for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
              var wrap = _step29.value;

              if (this.shown[wrap.key]) {
                this.myCurrentTab = wrap.key;
                return;
              }
            } // Default highlight the first tab

          } catch (err) {
            _iterator29.e(err);
          } finally {
            _iterator29.f();
          }

          if (this.BlockWrapList.length > 0) {
            this.myCurrentTab = this.BlockWrapList[0].key;
          }
        } //--------------------------------------

      },
      //////////////////////////////////////////
      watch: {
        "shown": function shown() {
          this.syncCurrentTabFromShown();
        },
        "blocks": function blocks() {
          this.syncCurrentTabFromShown();
        }
      },
      //////////////////////////////////////////
      mounted: function mounted() {
        this.syncCurrentTabFromShown();
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/gui/tabs/ti-gui-tabs.mjs", _M);
  })(); //============================================================
  // JOIN: ti/gui/tabs/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/gui/tabs/_com.json", {
    "name": "ti-gui-tabs",
    "globally": true,
    "template": "./ti-gui-tabs.html",
    "mixins": ["./ti-gui-tabs.mjs"],
    "components": ["@com:ti/gui/block"]
  }); //============================================================
  // JOIN: ti/gui/ti-gui-methods.mjs
  //============================================================

  (function () {
    var _M = {
      //--------------------------------------
      formatGuiBlock: function formatGuiBlock() {
        var b = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var shown = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var _float = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        // ClassName
        var klass = ["at-".concat(b.position || "center")]; // Show/hide

        var isShown = shown[b.name];

        if (_.isUndefined(isShown)) {
          // hide panel block in default
          if (_float) {
            isShown = false;
          } // show normal block in default
          else {
              isShown = true;
            }
        } // Mask


        if (b.mask) {
          klass.push("show-mask");
        } else {
          klass.push("no-mask");
        } // Transition Name


        var transName = b.position ? "gui-panel-".concat(b.position) : null; // Block Info

        var pickKeys = ["className", "actionDisplayMode", "flex", "icon", "title", "actions", "name", "adjustable", "closer", "position", "overflow", "status"];
        var panelSize = {}; // !!!
        // If block is float, that mean it in a panel
        // keep the width/height outside block info
        // it should not set to the block but the panel
        // !!!

        if (!_float || b.mask) {
          pickKeys.push("width");
          pickKeys.push("height");
        } // panelSize should be assign to top
        else {
            // left/right:  panel hold the with
            if (/^(left|right)$/.test(b.position)) {
              pickKeys.push("height");
              panelSize.width = b.width;
            } // top/bottom:  panel hold the height
            else if (/^(top|bottom)$/.test(b.position)) {
                pickKeys.push("width");
                panelSize.height = b.height;
              } // center, block hold the size
              else if ("center" == b.position) {
                  pickKeys.push("width");
                  pickKeys.push("height");
                } // Others, panel hold the size
                else {
                    panelSize.width = b.width;
                    panelSize.height = b.height;
                  }
          }

        var info = _.pick(b, pickKeys); // Sizing


        if (b.size && "stretch" != b.size) {
          // Cols
          if ("cols" == this.type) {
            info.width = b.size;
          } // Rows
          else if ("rows" == this.type) {
              info.height = b.size;
            }
        } // ComType as body


        var comType, comConf;

        if (b.body) {
          var com = b.body || {};

          if (_.isString(com)) {
            var sch = this.schema[com]; // Define the detail in schema

            if (_.isPlainObject(sch)) {
              com = sch; // explain the "extends"

              if (com["extends"]) {
                var parentSchema = this.schema[com["extends"]];

                var mySchema = _.omit(com, ["extends"]);

                com = _.merge({}, parentSchema, mySchema);
              }
            } // Just a com-type
            else {
                com = {
                  comType: com,
                  comConf: {}
                };
              }
          }

          comType = com.comType || "ti-label";
          comConf = com.comConf || {
            value: b.name || "GUI"
          };
        } // ComType as layout/block
        else if (!_.isEmpty(b.blocks)) {
            comType = "ti-gui";
            comConf = _.pick(b, ["type", "blocks", "adjustable", "border"]);

            _.defaults(comConf, {
              type: "cols",
              schema: this.schema,
              shown: this.shown
            });
          } // Join to result list


        return {
          className: klass.join(" "),
          panelStyle: Ti.Css.toStyle(panelSize),
          name: b.name,
          isShown: isShown,
          transName: transName,
          info: info,
          comType: comType,
          comConf: comConf
        };
      },
      //--------------------------------------
      getFormedBlockList: function getFormedBlockList() {
        var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var shown = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var _float2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        var list2 = [];

        if (_.isArray(list)) {
          var _iterator30 = _createForOfIteratorHelper(list),
              _step30;

          try {
            for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
              var b = _step30.value;
              var b2 = this.formatGuiBlock(b, shown, _float2);
              list2.push(b2);
            }
          } catch (err) {
            _iterator30.e(err);
          } finally {
            _iterator30.f();
          }
        } //console.log(list2)


        return list2;
      },
      //--------------------------------------

      /***
       * Create new plain object to represent the blocks shown.
       * 
       * @param show{Object} : The primary shown object to be merge
       * @param name{String|Array|Object} : Value to marge.
       *  - `String` : Set the single key to the `value`
       *  - `Array`  : Batch set a group of keys to the `value`
       *  - `Object` : Merge to `shown` directly, the third argument `value` willl 
       *               be ignored.
       * @param value{Any} : if `name` is string, it will be taken as value.
       */
      createGuiBlockShown: function createGuiBlockShown() {
        var shown = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var name = arguments.length > 1 ? arguments[1] : undefined;
        var value = arguments.length > 2 ? arguments[2] : undefined;

        var re = _objectSpread({}, shown); // String


        if (_.isString(name)) {
          re[name] = value;
        } // Array
        else if (_.isArray(name)) {
            var _iterator31 = _createForOfIteratorHelper(name),
                _step31;

            try {
              for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
                var nm = _step31.value;
                re[nm] = value;
              }
            } catch (err) {
              _iterator31.e(err);
            } finally {
              _iterator31.f();
            }
          } // Object
          else if (_.isPlainObject(name)) {
              _.assign(re, name);
            }

        return re;
      } //--------------------------------------

    };
    Ti.Preload("ti/com/ti/gui/ti-gui-methods.mjs", _M);
  })(); //============================================================
  // JOIN: ti/gui/ti-gui.html
  //============================================================


  Ti.Preload("ti/com/ti/gui/ti-gui.html", "<div class=\"ti-gui\" :class=\"TopClass\">\n  <!--===========================================\n    All normal layout\n  -->\n  <div class=\"gui-con\">\n    <!--\n      Layout as rows\n    -->\n    <ti-gui-rows v-if=\"isRowsLayout\"\n      class=\"ti-fill-parent\"\n      v-bind=\"TheLayout\"\n      :schema=\"schema\"\n      :shown=\"TheShown\"\n      :default-flex=\"defaultFlex\"\n      :action-status=\"actionStatus\"/>\n    <!--\n      Layout as cols\n    -->\n    <ti-gui-cols v-else-if=\"isColsLayout\"\n      class=\"ti-fill-parent\"\n      v-bind=\"TheLayout\"\n      :schema=\"schema\"\n      :shown=\"TheShown\"\n      :default-flex=\"defaultFlex\"\n      :action-status=\"actionStatus\"/>\n    <!--\n      Layout as tabs\n    -->\n    <ti-gui-tabs v-else-if=\"isTabsLayout\"\n      class=\"ti-fill-parent\"\n      v-bind=\"TheLayout\"\n      :schema=\"schema\"\n      :shown=\"TheShown\"\n      :default-flex=\"defaultFlex\"\n      :action-status=\"actionStatus\"/>\n  </div>\n  <!--===========================================\n    All float panels\n  -->\n  <template v-for=\"pan in ThePanels\">\n    <transition :name=\"pan.transName\">\n      <ti-gui-panel\n        v-if=\"pan.visible\"\n          :key=\"pan.key\"\n          v-bind=\"pan.panel\"\n          :viewport-width=\"myViewportWidth\"\n          :viewport-height=\"myViewportHeight\"\n          :schema=\"schema\"\n          :shown=\"TheShown\"\n          :default-flex=\"defaultFlex\"\n          :action-status=\"actionStatus\"/>\n    </transition>\n  </template>\n  <!--===========================================\n    Loading\n  -->\n  <div v-if=\"isLoading\"\n    class=\"ti-mask-loading\">\n    <ti-loading v-bind=\"TheLoading\"/>\n  </div>\n</div>"); //============================================================
  // JOIN: ti/gui/ti-gui.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////
      provide: function provide() {
        return {
          "$gui": this
        };
      },
      /////////////////////////////////////////
      data: function data() {
        return {
          myShown: {},
          myViewportWidth: 0,
          myViewportHeight: 0
        };
      },
      /////////////////////////////////////////
      props: {
        "defaultFlex": {
          type: String,
          "default": undefined,
          validator: function validator(v) {
            return _.isUndefined(v) || /^(nil|auto|grow|shrink|both|none)$/.test(v);
          }
        },
        "defaultOverflow": {
          type: String,
          "default": undefined,
          validator: function validator(v) {
            return _.isUndefined(v) || /^(auto|none|fill|cover)$/.test(v);
          }
        },
        "defaultComClass": {
          type: String,
          "default": "ti-fill-parent"
        },
        "layout": {
          type: Object,
          "default": function _default() {
            return {
              desktop: {},
              tablet: "desktop",
              phone: "desktop"
            };
          }
        },
        "schema": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "keepShownTo": {
          type: String,
          "default": undefined
        },
        "actionStatus": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "shown": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "canLoading": {
          type: Boolean,
          "default": false
        },
        // value should be prop of ti-loading
        "loadingAs": {
          type: [Boolean, Object],
          "default": undefined
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass({
            "is-loading": this.isLoading
          });
        },
        //--------------------------------------
        TheLayout: function TheLayout() {
          if (_.isEmpty(this.layout)) return {}; //....................................
          // Raw layout

          if (/^(rows|cols|tabs)$/.test(this.layout.type)) {
            return this.layout;
          } //....................................
          // Auto adapt viewMode


          var lay = this.layout[this.viewportMode]; // Refer onece

          if (_.isString(lay)) {
            lay = this.layout[lay];
          } // Refer twice (I think it is enough for most of cases)


          if (_.isString(lay)) {
            lay = this.layout[lay];
          }

          return lay || {};
        },
        //--------------------------------------
        isRowsLayout: function isRowsLayout() {
          return "rows" == this.TheLayout.type;
        },
        isColsLayout: function isColsLayout() {
          return "cols" == this.TheLayout.type;
        },
        isTabsLayout: function isTabsLayout() {
          return "tabs" == this.TheLayout.type;
        },
        //--------------------------------------
        ThePanels: function ThePanels() {
          var list = []; // Join Global Panels

          this.joinThePanels(list, this.layout.panels, "G"); // Join Current Mode Panels

          if (this.layout != this.TheLayout) {
            this.joinThePanels(list, this.TheLayout.panels, this.viewportMode);
          } // Done


          return list;
        },
        //--------------------------------------
        TheShown: function TheShown() {
          return this.keepShownTo ? this.myShown : this.shown;
        },
        //--------------------------------------
        isLoading: function isLoading() {
          return this.canLoading && this.loadingAs ? true : false;
        },
        //--------------------------------------
        TheLoading: function TheLoading() {
          if (_.isPlainObject(this.loadingAs)) {
            return this.loadingAs;
          }

          return {};
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        isShown: function isShown() {
          for (var _len2 = arguments.length, names = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            names[_key2] = arguments[_key2];
          }

          for (var _i3 = 0, _names = names; _i3 < _names.length; _i3++) {
            var name = _names[_i3];
            if (this.TheShown[name]) return true;
          }

          return false;
        },
        //--------------------------------------
        joinThePanels: function joinThePanels() {
          var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var panels = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
          var keyPrefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

          if (_.isArray(panels) && panels.length > 0) {
            for (var i = 0; i < panels.length; i++) {
              var pan = panels[i];
              var pos = Ti.Util.fallback(pan.position, "center");
              var index = list.length;
              list.push({
                index: index,
                visible: this.isShown(pan.name),
                key: pan.name || "panel-".concat(keyPrefix, "-").concat(index),
                transName: "ti-gui-panel-".concat(pos),
                panel: pan
              });
            }
          }
        },
        //--------------------------------------
        updateShown: function updateShown(shown) {
          //console.log("updateShown", shown)
          this.syncMyShown(shown);
          this.persistMyStatus();
        },
        //--------------------------------------
        OnBlockShow: function OnBlockShow(name) {
          // Update privated status
          if (this.keepShownTo) {
            this.updateShown(_defineProperty({}, name, true));
          } // Leave it to parent
          else {
              this.$notify("block:show", name);
            }
        },
        //--------------------------------------
        OnBlockHide: function OnBlockHide(name) {
          // Update privated status
          if (this.keepShownTo) {
            this.updateShown(_defineProperty({}, name, false));
          } // Leave it to parent
          else {
              this.$notify("block:hide", name);
            }
        },
        //--------------------------------------
        OnBlockShownUpdate: function OnBlockShownUpdate(shown) {
          // Update privated status
          if (this.keepShownTo) {
            this.updateShown(shown);
          } // Leave it to parent
          else {
              this.$notify("block:shown", shown);
            }
        },
        //--------------------------------------
        syncMyShown: function syncMyShown() {
          if (this.keepShownTo) {
            var _ref36;

            for (var _len3 = arguments.length, showns = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              showns[_key3] = arguments[_key3];
            }

            this.myShown = (_ref36 = _).assign.apply(_ref36, [{}, this.myShown].concat(showns));
          }
        },
        //--------------------------------------
        persistMyStatus: function persistMyStatus() {
          if (this.keepShownTo) {
            var shown = _.omitBy(this.myShown, function (v) {
              return !v;
            });

            Ti.Storage.session.setObject(this.keepShownTo, shown);
          }
        },
        //--------------------------------------
        loadMyStatus: function loadMyStatus() {
          if (this.keepShownTo) {
            var shown = Ti.Storage.session.getObject(this.keepShownTo);
            this.syncMyShown(this.shown, shown);
          }
        },
        //--------------------------------------
        syncViewportMeasure: function syncViewportMeasure() {
          var rect = Ti.Rects.createBy(this.$el);
          this.myViewportWidth = rect.width;
          this.myViewportHeight = rect.height;
        } //--------------------------------------

      },
      //////////////////////////////////////////
      watch: {
        "shown": function shown(_shown) {
          //console.log("ti-gui shown changed", shown)
          this.syncMyShown(_shown);
        }
      },
      //////////////////////////////////////////
      mounted: function mounted() {
        var _this88 = this;

        //......................................
        Ti.Viewport.watch(this, {
          resize: _.debounce(function () {
            return _this88.syncViewportMeasure();
          }, 100)
        }); //......................................

        this.syncViewportMeasure(); //......................................

        this.loadMyStatus(); //......................................
      },
      ///////////////////////////////////////////////////
      beforeDestroy: function beforeDestroy() {
        Ti.Viewport.unwatch(this);
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/gui/ti-gui.mjs", _M);
  })(); //============================================================
  // JOIN: ti/gui/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/gui/_com.json", {
    "name": "ti-gui",
    "globally": true,
    "template": "./ti-gui.html",
    "methods": "./ti-gui-methods.mjs",
    "mixins": ["./ti-gui.mjs"],
    "components": ["@com:ti/gui/cols", "@com:ti/gui/rows", "@com:ti/gui/tabs", "@com:ti/gui/panel"]
  }); //============================================================
  // JOIN: ti/icon/text/ti-icon-text.html
  //============================================================

  Ti.Preload("ti/com/ti/icon/text/ti-icon-text.html", "<div class=\"ti-icon-text\" \n  :class=\"className\">\n  <!--Icon-->\n  <ti-icon v-if=\"icon\" class=\"as-icon\" :value=\"icon\"/>\n  <!--Text-->\n  <div v-if=\"text\" class=\"as-text\">{{text|i18n}}</div>\n</div>"); //============================================================
  // JOIN: ti/icon/text/ti-icon-text.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      ///////////////////////////////////////////////////////
      props: {
        "icon": {
          type: [String, Object],
          "default": ""
        },
        "text": {
          type: String,
          "default": null
        }
      } ///////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/icon/text/ti-icon-text.mjs", _M);
  })(); //============================================================
  // JOIN: ti/icon/text/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/icon/text/_com.json", {
    "name": "ti-icon-text",
    "globally": true,
    "template": "./ti-icon-text.html",
    "mixins": ["./ti-icon-text.mjs"]
  }); //============================================================
  // JOIN: ti/icon/ti-icon.html
  //============================================================

  Ti.Preload("ti/com/ti/icon/ti-icon.html", "<div \n  class=\"ti-icon\" \n  :class=\"TopClass\"\n  @click.left=\"OnClickTop\">\n  <div class=\"icon-icon\"\n    :style=\"Icon.outerStyle\">\n    <!--Font icon-->\n    <i v-if=\"'font'==Icon.type\"\n      :class=\"Icon.className\"\n      :style=\"Icon.innerStyle\">\n      <!--ligature font -->\n      <template v-if=\"Icon.text\">{{Icon.text}}</template>\n    </i>\n    <!--Svg/Image-->\n    <img v-else-if=\"'svg'==Icon.type || 'image'==Icon.type\"\n        :src=\"Icon.value\"\n        :style=\"Icon.innerStyle\"/>\n    <!--\n      Default output the value\n    -->\n    <em v-else>{{value}}</em>\n  </div>\n</div>"); //============================================================
  // JOIN: ti/icon/ti-icon.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////////////////
      data: function data() {
        return {
          myValue: null
        };
      },
      ///////////////////////////////////////////////////////
      props: {
        // If image, join the base
        "base": {
          type: String,
          "default": null
        },
        "value": {
          type: [String, Object, Number],
          "default": null
        },
        "dict": {
          type: [String, Ti.Dict],
          "default": null
        },
        "defaultValue": {
          type: [String, Object],
          "default": null
        },
        "fontSize": {
          type: [Number, String],
          "default": null
        },
        "width": {
          type: [Number, String],
          "default": null
        },
        "height": {
          type: [Number, String],
          "default": null
        },
        "color": {
          type: String,
          "default": ""
        },
        "opacity": {
          type: Number,
          "default": -1
        },
        "notifyName": {
          type: String,
          "default": undefined
        },
        "notifyConf": {
          type: [Object, String, Number, Boolean, Array],
          "default": undefined
        }
      },
      ///////////////////////////////////////////////////////
      computed: {
        //---------------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass({
            "can-click": this.notifyName ? true : false
          }, "is-".concat(this.Icon.type));
        },
        //---------------------------------------------------
        Dict: function Dict() {
          if (this.dict) {
            // Already Dict
            if (this.dict instanceof Ti.Dict) {
              return this.dict;
            } // Get back


            var _Ti$DictFactory$expla = Ti.DictFactory.explainDictName(this.dict),
                name = _Ti$DictFactory$expla.name;

            return Ti.DictFactory.CheckDict(name);
          }
        },
        //---------------------------------------------------
        // formed icon data
        Icon: function Icon() {
          var icn;

          if (_.isPlainObject(this.myValue)) {
            // Regular icon object, return it directly
            if (this.myValue.type && this.myValue.value) {
              icn = this.myValue;
            } // Eval it as meta
            else {
                icn = {
                  type: "font",
                  value: Ti.Icons.get(this.myValue)
                };
              }
          } // String
          else {
              icn = {
                type: "font",
                value: this.myValue
              };

              if (_.isString(this.myValue)) {
                icn.type = Ti.Util.getSuffixName(this.myValue) || "font";
              } // for image


              if (/^(jpe?g|gif|png)$/i.test(icn.type)) {
                icn.type = "image";
              }
            } // Join `className / text` to show icon font


          if ('font' == icn.type) {
            var val = Ti.Icons.getByName(icn.value, icn.value);

            _.assign(icn, Ti.Icons.parseFontIcon(val));
          } // Join base
          else if ('image' == icn.type) {
              if (!Ti.Util.isBlank(this.base)) {
                icn.value = Ti.Util.appendPath(this.base, icn.value);
              }
            } // join style:outer


          icn.outerStyle = Ti.Css.toStyle({
            width: this.width,
            height: this.height,
            color: this.color,
            opacity: this.opacity >= 0 ? this.opacity : undefined
          }); // join style:inner

          if ('image' == icn.type) {
            icn.innerStyle = {
              "width": this.width ? "100%" : undefined,
              "height": this.height ? "100%" : undefined
            };
          } // font size
          else if ('font' == icn.type) {
              icn.innerStyle = {
                "font-size": this.fontSize ? Ti.Css.toSize(this.fontSize) : undefined
              };
            }

          return icn;
        } //---------------------------------------------------

      },
      methods: {
        //---------------------------------------------------
        OnClickTop: function OnClickTop() {
          if (this.notifyName) {
            this.$notify(this.notifyName, this.notifyConf);
          }
        },
        //---------------------------------------------------
        evalMyValue: function evalMyValue() {
          var _this89 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee41() {
            var val;
            return regeneratorRuntime.wrap(function _callee41$(_context41) {
              while (1) {
                switch (_context41.prev = _context41.next) {
                  case 0:
                    val = Ti.Util.fallbackNil(_this89.value, _this89.defaultValue); // Translate by dict

                    if (!_this89.Dict) {
                      _context41.next = 7;
                      break;
                    }

                    _context41.next = 4;
                    return _this89.Dict.getItemIcon(val);

                  case 4:
                    _this89.myValue = _context41.sent;
                    _context41.next = 8;
                    break;

                  case 7:
                    _this89.myValue = val;

                  case 8:
                  case "end":
                    return _context41.stop();
                }
              }
            }, _callee41);
          }))();
        } //---------------------------------------------------

      },
      ///////////////////////////////////////////////////////
      watch: {
        "value": {
          handler: "evalMyValue",
          immediate: true
        }
      } ///////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/icon/ti-icon.mjs", _M);
  })(); //============================================================
  // JOIN: ti/icon/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/icon/_com.json", {
    "name": "ti-icon",
    "globally": true,
    "template": "./ti-icon.html",
    "mixins": ["./ti-icon.mjs"]
  }); //============================================================
  // JOIN: ti/imgfile/ti-imgfile.html
  //============================================================

  Ti.Preload("ti/com/ti/imgfile/ti-imgfile.html", "<div class=\"ti-imgfile\"\n  :class=\"TopClass\">\n  <!--\n    Hidden input file to choose files\n  -->\n  <input \n    type=\"file\" \n    ref=\"file\" \n    class=\"ti-hide\"\n    @change.stop.seft=\"OnSelectLocalFilesToUpload\">\n  <!--\n    Major preview zone\n  -->\n  <div class=\"thumb-con\"\n    :style=\"ThumbStyle\"\n    @click=\"OnClickToEdit\"\n    v-drop-files.mask=\"OnDropFiles\">\n    <!--\n      Preview\n    -->\n    <ti-obj-thumb \n      :preview=\"PreviewThumb\"\n      :progress=\"progress\"\n      :footer=\"false\"/>\n  </div>\n  <!--\n    Remove\n  -->\n  <div v-if=\"isShowRemoveIcon\"\n    class=\"thumb-actions\">\n    <!--remove-->\n    <div class=\"thumb-opt as-del\"\n      @click=\"OnRemove\">\n      <ti-icon value=\"zmdi-delete\"/>\n      <span class=\"it-text\">{{'clear'|i18n}}</span>\n    </div>\n    <!--open-->\n    <div class=\"thumb-opt as-open\"\n      @click=\"OnOpen\">\n      <ti-icon value=\"zmdi-open-in-new\"/>\n      <span class=\"it-text\">{{'open'|i18n}}</span>\n    </div>\n    <!--//////-->\n  </div>\n</div>"); //============================================================
  // JOIN: ti/imgfile/ti-imgfile.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      props: {
        // The source to display image
        "src": {
          type: String,
          "default": null
        },
        // The value must be a LocalFile object
        // to prerender the LocalFile during uploading
        "uploadFile": {
          type: File,
          "default": null
        },
        // Show the process `0.0-1.0` during the uploading
        "progress": {
          type: Number,
          "default": -1
        },
        // Display width
        "width": {
          type: [String, Number],
          "default": 100
        },
        // Display height
        "height": {
          type: [String, Number],
          "default": 100
        },
        // support remove the objects
        "removable": {
          type: Boolean,
          "default": true
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //--------------------------------------
        ThumbStyle: function ThumbStyle() {
          return Ti.Css.toStyle({
            width: this.width,
            height: this.height
          });
        },
        //--------------------------------------
        isShowRemoveIcon: function isShowRemoveIcon() {
          if (!this.uploadFile && this.src) {
            return true;
          }

          return false;
        },
        //--------------------------------------
        PreviewThumb: function PreviewThumb() {
          if (this.uploadFile) {
            return {
              type: "localFile",
              value: this.uploadFile
            };
          } // Normal image


          if (this.src) {
            return {
              type: "image",
              value: this.src
            };
          } // Show Icon


          return {
            type: "font",
            value: "zmdi-plus"
          };
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnClickToEdit: function OnClickToEdit() {
          this.$refs.file.click();
        },
        //--------------------------------------
        OnDropFiles: function OnDropFiles(files) {
          var _this90 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee42() {
            var file;
            return regeneratorRuntime.wrap(function _callee42$(_context42) {
              while (1) {
                switch (_context42.prev = _context42.next) {
                  case 0:
                    file = _.get(files, 0);

                    if (file) {
                      _this90.$notify("upload", file);
                    }

                  case 2:
                  case "end":
                    return _context42.stop();
                }
              }
            }, _callee42);
          }))();
        },
        //--------------------------------------
        OnSelectLocalFilesToUpload: function OnSelectLocalFilesToUpload(evt) {
          var _this91 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee43() {
            return regeneratorRuntime.wrap(function _callee43$(_context43) {
              while (1) {
                switch (_context43.prev = _context43.next) {
                  case 0:
                    _context43.next = 2;
                    return _this91.OnDropFiles(evt.target.files);

                  case 2:
                    _this91.$refs.file.value = "";

                  case 3:
                  case "end":
                    return _context43.stop();
                }
              }
            }, _callee43);
          }))();
        },
        //--------------------------------------
        OnRemove: function OnRemove() {
          this.$notify("remove");
        },
        //--------------------------------------
        OnOpen: function OnOpen() {
          this.$notify("open");
        } //--------------------------------------

      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/imgfile/ti-imgfile.mjs", _M);
  })(); //============================================================
  // JOIN: ti/imgfile/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/imgfile/_com.json", {
    "name": "ti-imgfile",
    "globally": true,
    "template": "./ti-imgfile.html",
    "mixins": ["./ti-imgfile.mjs"],
    "components": ["@com:ti/obj/thumb"]
  }); //============================================================
  // JOIN: ti/input/color/ti-input-color.html
  //============================================================

  Ti.Preload("ti/com/ti/input/color/ti-input-color.html", "<ti-combo-box class=\"ti-input-color\"\n  :class=\"topClass\"\n  :drop-width=\"null\"\n  :status=\"status\"\n  @collapse=\"doCollapse\">\n  <!--\n    Box\n  -->\n  <template v-slot:box>\n    <span class=\"as-color\"\n      @click.left=\"onToggleDrop\">\n        <u class=\"as-bg\"></u>\n        <u class=\"as-fr\" :style=\"colorStyle\"></u>\n    </span>\n    <span class=\"as-clear\" @click=\"onClearColor\">\n      <ti-icon value=\"zmdi-close\"/>\n    </span>\n  </template>\n  <!--\n    Drop\n  -->\n  <template v-slot:drop>\n    <ti-color \n      :value=\"value\"\n      @change=\"onColorChanged\"/>\n  </template>\n</ti-combo-box>"); //============================================================
  // JOIN: ti/input/color/ti-input-color.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      inheritAttrs: false,
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          hideBorder: false,
          status: "collapse"
        };
      },
      ////////////////////////////////////////////////////
      props: {
        "value": {
          type: [String, Number],
          "default": null
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        topClass: function topClass() {
          return Ti.Css.mergeClassName({
            "is-empty": !this.hasValue,
            "is-valued": this.hasValue,
            "show-border": !this.hideBorder,
            "hide-border": this.hideBorder
          }, this.className);
        },
        //------------------------------------------------
        colorStyle: function colorStyle() {
          var color = Ti.Types.toColor(this.value, null);

          if (color) {
            return {
              "background": color.rgba
            };
          }
        },
        //------------------------------------------------
        isCollapse: function isCollapse() {
          return "collapse" == this.status;
        },
        isExtended: function isExtended() {
          return "extended" == this.status;
        },
        //------------------------------------------------
        hasValue: function hasValue() {
          return !Ti.Util.isNil(this.value);
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        onToggleDrop: function onToggleDrop() {
          this.status = {
            "collapse": "extended",
            "extended": "collapse"
          }[this.status];
        },
        //------------------------------------------------
        onClearColor: function onClearColor() {
          this.$notify("change", null);
        },
        //------------------------------------------------
        onColorChanged: function onColorChanged(color) {
          var co = Ti.Types.toColor(color);
          this.$notify("change", co ? co.toString() : null);
        },
        //------------------------------------------------
        doCollapse: function doCollapse() {
          this.status = "collapse";
        } //------------------------------------------------

      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/input/color/ti-input-color.mjs", _M);
  })(); //============================================================
  // JOIN: ti/input/color/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/input/color/_com.json", {
    "name": "ti-input-color",
    "globally": true,
    "template": "./ti-input-color.html",
    "mixins": ["./ti-input-color.mjs"],
    "components": ["@com:ti/color"]
  }); //============================================================
  // JOIN: ti/input/date/ti-input-date.html
  //============================================================

  Ti.Preload("ti/com/ti/input/date/ti-input-date.html", "<ti-combo-box class=\"as-date\"\n  :class=\"topClass\"\n  :width=\"width\"\n  :drop-width=\"null\"\n  :status=\"status\"\n  @collapse=\"doCollapse\">\n  <!--\n    Box\n  -->\n  <template v-slot:box>\n    <ti-input \n      :readonly=\"!canInput\"\n      :hide-border=\"hideBorder\"\n      :placeholder=\"placeholder|i18n\"\n      :prefix-icon=\"icon\"\n      :suffix-icon=\"theStatusIcon\"\n      :value=\"theInputValue\"\n      :height=\"height\"\n      :focus=\"isExtended\"\n      @change=\"onChanged\"\n      @input:focus=\"onInputFocused\"\n      @suffix:icon=\"onClickStatusIcon\"/>\n  </template>\n  <!--\n    Drop\n  -->\n  <template v-slot:drop>\n    <ti-calendar\n      :value=\"theDropDate\"\n      :month-format=\"monthFormat\"\n      :begin-year=\"beginYear\"\n      :end-year=\"endYear\"\n      @change=\"onDateChanged\"/>\n  </template>\n</ti-combo-box>"); //============================================================
  // JOIN: ti/input/date/ti-input-date.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          "runtime": null,
          "status": "collapse"
        };
      },
      ////////////////////////////////////////////////////
      props: {
        "canInput": {
          type: Boolean,
          "default": true
        },
        "value": {
          type: [String, Number, Date],
          "default": null
        },
        "icon": {
          type: String,
          "default": "far-calendar-alt"
        },
        "format": {
          type: String,
          "default": "yyyy-MM-dd"
        },
        "placeholder": {
          type: [String, Number],
          "default": "i18n:blank-date"
        },
        "hideBorder": {
          type: Boolean,
          "default": false
        },
        "autoCollapse": {
          type: Boolean,
          "default": true
        },
        "width": {
          type: [Number, String],
          "default": "2rem"
        },
        "height": {
          type: [Number, String],
          "default": undefined
        },
        "monthFormat": {
          type: String,
          "default": "yyyy-MM"
        },
        "beginYear": {
          type: [Number, String],
          "default": 1970
        },
        "endYear": {
          type: [Number, String],
          "default": new Date().getFullYear() + 1
        },
        "statusIcons": {
          type: Object,
          "default": function _default() {
            return {
              collapse: "zmdi-chevron-down",
              extended: "zmdi-chevron-up"
            };
          }
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        topClass: function topClass() {
          return Ti.Css.mergeClassName(this.className);
        },
        //------------------------------------------------
        isCollapse: function isCollapse() {
          return "collapse" == this.status;
        },
        isExtended: function isExtended() {
          return "extended" == this.status;
        },
        //------------------------------------------------
        theDate: function theDate() {
          return Ti.Types.toDate(this.value, null);
        },
        //------------------------------------------------
        theDropDate: function theDropDate() {
          return this.runtime || this.theDate;
        },
        //------------------------------------------------
        theInputValue: function theInputValue() {
          if (this.isExtended) {
            return this.getDateText(this.theDropDate);
          }

          return this.getDateText(this.theDropDate, this.format);
        },
        //------------------------------------------------
        theStatusIcon: function theStatusIcon() {
          return this.statusIcons[this.status];
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        applyRuntime: function applyRuntime() {
          if (this.runtime) {
            var dt = this.runtime;
            this.runtime = null;
            var str = this.getDateText(dt);
            this.$notify("change", str);
          }
        },
        //-----------------------------------------------
        doExtend: function doExtend() {
          this.status = "extended";
        },
        //-----------------------------------------------
        doCollapse: function doCollapse() {
          var _ref37 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              _ref37$escaped = _ref37.escaped,
              escaped = _ref37$escaped === void 0 ? false : _ref37$escaped;

          this.status = "collapse"; // Drop runtime

          if (escaped) {
            this.runtime = null;
          } // Apply Changed for runtime
          else {
              this.applyRuntime();
            }
        },
        //------------------------------------------------
        onInputFocused: function onInputFocused() {
          this.doExtend();
        },
        //------------------------------------------------
        onChanged: function onChanged(val) {
          // Empty value as null
          if (_.isEmpty(val)) {
            this.$notify("change", null);
          } // Parsed value
          else {
              var dt = Ti.Types.toDate(val);
              var str = this.getDateText(dt);
              this.$notify("change", str);
            }
        },
        //------------------------------------------------
        onClickStatusIcon: function onClickStatusIcon() {
          // extended -> collapse
          if (this.isExtended) {
            this.doCollapse();
          } // collapse -> extended
          else {
              this.doExtend();
            }
        },
        //------------------------------------------------
        onDateChanged: function onDateChanged(dt) {
          this.runtime = dt;

          if (this.autoCollapse) {
            this.doCollapse();
          }
        },
        //------------------------------------------------
        getDateText: function getDateText(dt) {
          var fmt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "yyyy-MM-dd";
          var dt2 = Ti.Types.toDate(dt, null);
          return Ti.Types.formatDate(dt2, fmt);
        } //------------------------------------------------

      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/input/date/ti-input-date.mjs", _M);
  })(); //============================================================
  // JOIN: ti/input/date/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/input/date/_com.json", {
    "name": "ti-input-date",
    "globally": true,
    "template": "./ti-input-date.html",
    "mixins": ["./ti-input-date.mjs"],
    "components": ["@com:ti/combo/input", "@com:ti/calendar"]
  }); //============================================================
  // JOIN: ti/input/daterange/ti-input-daterange.html
  //============================================================

  Ti.Preload("ti/com/ti/input/daterange/ti-input-daterange.html", "<ti-combo-box class=\"as-daterange\"\n  :class=\"topClass\"\n  :drop-width=\"null\"\n  :status=\"status\"\n  @collapse=\"doCollapse\">\n  <!--\n    Box\n  -->\n  <template v-slot:box>\n    <ti-input \n      :readonly=\"!canInput\"\n      :hide-border=\"hideBorder\"\n      :placeholder=\"placeholder|i18n\"\n      :prefix-icon=\"icon\"\n      :suffix-icon=\"theStatusIcon\"\n      :value=\"theInputValue\"\n      :width=\"width\"\n      :height=\"height\"\n      :focus=\"isExtended\"\n      @change=\"onChanged\"\n      @input:focus=\"onInputFocused\"\n      @suffix:icon=\"onClickStatusIcon\"/>\n  </template>\n  <!--\n    Drop\n  -->\n  <template v-slot:drop>\n    <ti-calendar\n      :value=\"theDropRange\"\n      :range=\"true\"\n      :matrix-count=\"matrixCount\"\n      :month-format=\"monthFormat\"\n      :begin-year=\"beginYear\"\n      :end-year=\"endYear\"\n      @change=\"onDateRangeChanged\"/>\n  </template>\n</ti-combo-box>"); //============================================================
  // JOIN: ti/input/daterange/ti-input-daterange.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          "runtime": null,
          "status": "collapse"
        };
      },
      ////////////////////////////////////////////////////
      props: {
        "canInput": {
          type: Boolean,
          "default": true
        },
        "value": {
          type: [String, Number, Date, Array],
          "default": null
        },
        "icon": {
          type: String,
          "default": "fas-calendar-alt"
        },
        "format": {
          type: String,
          "default": "yyyy-MM-dd HH:mm:ss"
        },
        "valueType": {
          type: String,
          "default": "ms-range",
          validator: function validator(v) {
            return /^(ms-(array|range)|ds-(array|range)|date-array)$/.test(v);
          }
        },
        "placeholder": {
          type: String,
          "default": "i18n:blank-date-range"
        },
        "hideBorder": {
          type: Boolean,
          "default": false
        },
        "width": {
          type: [Number, String],
          "default": "3rem"
        },
        "height": {
          type: [Number, String],
          "default": undefined
        },
        "matrixCount": {
          type: Number,
          "default": 2
        },
        "monthFormat": {
          type: String,
          "default": "yyyy-MM-dd"
        },
        "beginYear": {
          type: [Number, String],
          "default": 1970
        },
        "endYear": {
          type: [Number, String],
          "default": new Date().getFullYear() + 1
        },
        "statusIcons": {
          type: Object,
          "default": function _default() {
            return {
              collapse: "zmdi-chevron-down",
              extended: "zmdi-chevron-up"
            };
          }
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        topClass: function topClass() {
          return Ti.Css.mergeClassName(this.className);
        },
        //------------------------------------------------
        isCollapse: function isCollapse() {
          return "collapse" == this.status;
        },
        isExtended: function isExtended() {
          return "extended" == this.status;
        },
        //--------------------------------------
        theValue: function theValue() {
          if (_.isEmpty(this.value)) {
            return null;
          }

          if (_.isString(this.value)) {
            var str = _.trim(this.value);

            var m = /^[[(](.+)[\])]$/.exec(str);

            if (m) {
              str = _.trim(m[1]);
            }

            var ss = Ti.S.toArray(str, {
              sep: ","
            });

            if (ss.length > 0) {
              return Ti.Types.toDate(ss);
            }

            return Ti.Types.toDate(str);
          }

          return Ti.Types.toDate(this.value);
        },
        //--------------------------------------
        theDate: function theDate() {
          if (_.isArray(this.theValue) && !_.isEmpty(this.theValue)) {
            return Ti.Types.toDate(this.theValue[0]);
          }

          if (this.theValue) {
            return Ti.Types.toDate(this.theValue);
          }
        },
        //--------------------------------------
        theRangeInMs: function theRangeInMs() {
          if (!this.theDate) {
            return [];
          } // Move to 00:00:00


          var dt0 = new Date(this.theDate); // Define the dt1

          var dt1;

          if (_.isArray(this.theValue) && this.theValue.length > 1) {
            dt1 = Ti.Types.toDate(this.theValue[1]);
          } // The End of the Day
          else {
              dt1 = new Date(dt0);
            } // Make the range


          var msRange = [dt0.getTime(), dt1.getTime()].sort(); // dt0 start of the day

          dt0 = Ti.DateTime.setTime(new Date(msRange[0])); // dt1 end of the day

          dt1 = Ti.DateTime.setDayLastTime(new Date(msRange[1])); // rebuild the range

          return [dt0.getTime(), dt1.getTime()];
        },
        //------------------------------------------------
        theRange: function theRange() {
          if (_.isEmpty(this.theRangeInMs)) {
            return [];
          }

          return [new Date(this.theRangeInMs[0]), new Date(this.theRangeInMs[1])];
        },
        //------------------------------------------------
        theDropRange: function theDropRange() {
          return this.runtime || this.theRange;
        },
        //------------------------------------------------
        theRangeValue: function theRangeValue() {
          return this.formatRangeValue(this.theRange, {
            valueType: "ds-array",
            format: "yyyy-MM-dd",
            collapse: true
          }).join(", ");
        },
        //------------------------------------------------
        theRangeText: function theRangeText() {
          if (!_.isEmpty(this.theRange)) {
            var dt0 = this.theRange[0];
            var dt1 = this.theRange[1];
            var yy0 = dt0.getFullYear();
            var MM0 = dt0.getMonth();
            var dd0 = dt0.getDate();
            var yy1 = dt1.getFullYear();
            var MM1 = dt1.getMonth();
            var dd1 = dt1.getDate();
            var MA0 = Ti.DateTime.getMonthAbbr(MM0);
            var MA1 = Ti.DateTime.getMonthAbbr(MM1);
            var MT0 = Ti.I18n.get(MA0);
            var MT1 = Ti.I18n.get(MA1);
            MM0++;
            MM1++; // Month change to 1 base

            var vars = {
              yy0: yy0,
              yy1: yy1,
              MM0: MM0,
              MM1: MM1,
              dd0: dd0,
              dd1: dd1,
              MA0: MA0,
              MA1: MA1,
              MT0: MT0,
              MT1: MT1
            }; // Beyond year

            if (yy0 != yy1) {
              return Ti.I18n.getf("cal.d-range-beyond-years", vars);
            } // Beyond month


            if (MM0 != MM1) {
              return Ti.I18n.getf("cal.d-range-beyond-months", vars);
            } // Beyond day


            if (dd0 != dd1) {
              return Ti.I18n.getf("cal.d-range-beyond-days", vars);
            } // Same day


            return Ti.I18n.getf("cal.d-range-in-same-day", vars);
          }
        },
        //------------------------------------------------
        theInputValue: function theInputValue() {
          if (this.isExtended) {
            return this.theRangeValue;
          }

          return this.theRangeText;
        },
        //------------------------------------------------
        theStatusIcon: function theStatusIcon() {
          return this.statusIcons[this.status];
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        applyRuntime: function applyRuntime() {
          if (this.runtime) {
            var rg = this.runtime;
            this.runtime = null;
            var rg2 = this.formatRangeValue(rg);
            this.$notify("change", rg2);
          }
        },
        //-----------------------------------------------
        doExtend: function doExtend() {
          this.status = "extended";
        },
        //-----------------------------------------------
        doCollapse: function doCollapse() {
          var _ref38 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              _ref38$escaped = _ref38.escaped,
              escaped = _ref38$escaped === void 0 ? false : _ref38$escaped;

          this.status = "collapse"; // Drop runtime

          if (escaped) {
            this.runtime = null;
          } // Apply Changed for runtime
          else {
              this.applyRuntime();
            }
        },
        //------------------------------------------------
        onInputFocused: function onInputFocused() {
          this.doExtend();
        },
        //------------------------------------------------
        onChanged: function onChanged(val) {
          var rg = this.parseDateRange(val); // Empty Range

          if (_.isEmpty(rg)) {
            this.$notify("change", null);
          } // Format the Range
          else {
              var rg2 = this.formatRangeValue(rg);
              this.$notify("change", rg2);
            }
        },
        //------------------------------------------------
        onClickStatusIcon: function onClickStatusIcon() {
          // extended -> collapse
          if (this.isExtended) {
            this.doCollapse();
          } // collapse -> extended
          else {
              this.doExtend();
            }
        },
        //------------------------------------------------
        onDateRangeChanged: function onDateRangeChanged(rg) {
          this.runtime = rg;
        },
        //------------------------------------------------
        parseDateRange: function parseDateRange(val) {
          // Empty value as null
          if (_.isEmpty(val)) {
            return [];
          } // Parsed value


          var ss = val.split(","); // Empty

          if (_.isEmpty(ss)) {
            return [];
          } // One date


          if (ss.length == 1) {
            var _dt = Ti.Types.toDate(ss[0]);

            Ti.DateTime.setTime(_dt);

            var _dt2 = new Date(_dt.getTime());

            Ti.DateTime.setDayLastTime(_dt2);
            return [_dt, _dt2];
          } // range


          var dt0 = Ti.Types.toDate(ss[0]);
          Ti.DateTime.setTime(dt0);
          var dt1 = Ti.Types.toDate(ss[1]);
          Ti.DateTime.setDayLastTime(dt1);
          return [dt0, dt1].sort(function (dt0, dt1) {
            return dt0.getTime() - dt1.getTime();
          });
        },
        //------------------------------------------------
        formatRangeValue: function formatRangeValue(range) {
          var _ref39 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
              valueType = _ref39.valueType,
              format = _ref39.format,
              _ref39$collapse = _ref39.collapse,
              collapse = _ref39$collapse === void 0 ? false : _ref39$collapse;

          var _ref40 = range || [],
              _ref41 = _slicedToArray(_ref40, 2),
              d0 = _ref41[0],
              d1 = _ref41[1];

          if (!d0) {
            return [];
          }

          if (!d1) {
            d1 = new Date(d0);
            Ti.DateTime.setDayLastTime(d1);
          }

          valueType = valueType || this.valueType;
          format = format || this.format; // as range

          var func = {
            "ms-range": function msRange() {
              return "[".concat(d0.getTime(), ",").concat(d1.getTime(), "]");
            },
            "ms-array": function msArray() {
              return [d0.getTime(), d1.getTime()];
            },
            "ds-range": function dsRange() {
              return '[' + [Ti.Types.formatDate(d0, format), Ti.Types.formatDate(d1, format)].join(",") + ']';
            },
            "ds-array": function dsArray() {
              return [Ti.Types.formatDate(d0, format), Ti.Types.formatDate(d1, format)];
            },
            "date-array": function dateArray() {
              return [d0, d1];
            }
          }[valueType]; // As array

          var re = func();

          if (collapse) {
            if (re[0] == re[1]) return [re[0]];
          }

          return re;
        } //------------------------------------------------

      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/input/daterange/ti-input-daterange.mjs", _M);
  })(); //============================================================
  // JOIN: ti/input/daterange/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/input/daterange/_com.json", {
    "name": "ti-input-daterange",
    "globally": true,
    "template": "./ti-input-daterange.html",
    "mixins": ["./ti-input-daterange.mjs"],
    "components": ["@com:ti/combo/input", "@com:ti/calendar"]
  }); //============================================================
  // JOIN: ti/input/datetime/ti-input-datetime.html
  //============================================================

  Ti.Preload("ti/com/ti/input/datetime/ti-input-datetime.html", "<ti-combo-box class=\"as-datetime\"\n  :class=\"topClass\"\n  :width=\"width\"\n  :drop-width=\"'box'\"\n  :drop-overflow=\"'hidden'\"\n  :status=\"status\"\n  @collapse=\"doCollapse\">\n  <!--\n    Box\n  -->\n  <template v-slot:box>\n    <ti-input \n      :readonly=\"!canInput\"\n      :hide-border=\"hideBorder\"\n      :placeholder=\"placeholder|i18n\"\n      :prefix-icon=\"icon\"\n      :suffix-icon=\"theStatusIcon\"\n      :value=\"theInputValue\"\n      :height=\"height\"\n      :focus=\"isExtended\"\n      @change=\"onChanged\"\n      @input:focus=\"onInputFocused\"\n      @suffix:icon=\"onClickStatusIcon\"/>\n  </template>\n  <!--\n    Drop\n  -->\n  <template v-slot:drop>\n    <ti-datetime\n      :value=\"theDropDate\"\n      :month-format=\"monthFormat\"\n      :begin-year=\"beginYear\"\n      :end-year=\"endYear\"\n      @change=\"onDateChanged\"/>\n  </template>\n</ti-combo-box>"); //============================================================
  // JOIN: ti/input/datetime/ti-input-datetime.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          "runtime": null,
          "status": "collapse"
        };
      },
      ////////////////////////////////////////////////////
      props: {
        "canInput": {
          type: Boolean,
          "default": true
        },
        "value": {
          type: [String, Number, Date],
          "default": null
        },
        "icon": {
          type: String,
          "default": "fas-clock"
        },
        "format": {
          type: String,
          "default": "yyyy-MM-dd HH:mm:ss"
        },
        "placeholder": {
          type: [String, Number],
          "default": "i18n:blank-datetime"
        },
        "hideBorder": {
          type: Boolean,
          "default": false
        },
        "autoCollapse": {
          type: Boolean,
          "default": false
        },
        "width": {
          type: [Number, String],
          "default": "2.4rem"
        },
        "height": {
          type: [Number, String],
          "default": undefined
        },
        "monthFormat": {
          type: String,
          "default": "yyyy-MM"
        },
        "beginYear": {
          type: [Number, String],
          "default": 1970
        },
        "endYear": {
          type: [Number, String],
          "default": new Date().getFullYear() + 1
        },
        "statusIcons": {
          type: Object,
          "default": function _default() {
            return {
              collapse: "zmdi-chevron-down",
              extended: "zmdi-chevron-up"
            };
          }
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        topClass: function topClass() {
          return Ti.Css.mergeClassName(this.className);
        },
        //------------------------------------------------
        isCollapse: function isCollapse() {
          return "collapse" == this.status;
        },
        isExtended: function isExtended() {
          return "extended" == this.status;
        },
        //------------------------------------------------
        theDate: function theDate() {
          return Ti.Types.toDate(this.value, null);
        },
        //------------------------------------------------
        theDropDate: function theDropDate() {
          return this.runtime || this.theDate;
        },
        //------------------------------------------------
        theInputValue: function theInputValue() {
          if (this.isExtended) {
            return this.getDateText(this.theDropDate);
          }

          return this.getDateText(this.theDropDate, this.format);
        },
        //------------------------------------------------
        theStatusIcon: function theStatusIcon() {
          return this.statusIcons[this.status];
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        applyRuntime: function applyRuntime() {
          if (this.runtime) {
            var dt = this.runtime;
            this.runtime = null;
            var str = this.getDateText(dt);
            this.$notify("change", str);
          }
        },
        //-----------------------------------------------
        doExtend: function doExtend() {
          this.status = "extended";
        },
        //-----------------------------------------------
        doCollapse: function doCollapse() {
          var _ref42 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              _ref42$escaped = _ref42.escaped,
              escaped = _ref42$escaped === void 0 ? false : _ref42$escaped;

          this.status = "collapse"; // Drop runtime

          if (escaped) {
            this.runtime = null;
          } // Apply Changed for runtime
          else {
              this.applyRuntime();
            }
        },
        //------------------------------------------------
        onInputFocused: function onInputFocused() {
          this.doExtend();
        },
        //------------------------------------------------
        onChanged: function onChanged(val) {
          // Empty value as null
          if (_.isEmpty(val)) {
            this.$notify("change", null);
          } // Parsed value
          else {
              var dt = Ti.Types.toDate(val);
              var str = this.getDateText(dt);
              this.$notify("change", str);
            }
        },
        //------------------------------------------------
        onClickStatusIcon: function onClickStatusIcon() {
          // extended -> collapse
          if (this.isExtended) {
            this.doCollapse();
          } // collapse -> extended
          else {
              this.doExtend();
            }
        },
        //------------------------------------------------
        onDateChanged: function onDateChanged(dt) {
          this.runtime = dt;

          if (this.autoCollapse) {
            this.doCollapse();
          }
        },
        //------------------------------------------------
        getDateText: function getDateText(dt) {
          var fmt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "yyyy-MM-dd HH:mm:ss";
          var dt2 = Ti.Types.toDate(dt, null);
          return Ti.Types.formatDate(dt2, fmt);
        } //------------------------------------------------

      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/input/datetime/ti-input-datetime.mjs", _M);
  })(); //============================================================
  // JOIN: ti/input/datetime/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/input/datetime/_com.json", {
    "name": "ti-input-datetime",
    "globally": true,
    "template": "./ti-input-datetime.html",
    "mixins": ["./ti-input-datetime.mjs"],
    "components": ["@com:ti/combo/input", "@com:ti/datetime"]
  }); //============================================================
  // JOIN: ti/input/icon/ti-input-icon-props.mjs
  //============================================================

  (function () {
    var _M = {
      "options": {
        type: Array,
        "default": function _default() {
          return ["im-spotify", "im-newsletter", "im-award", "im-headphones", "im-megaphone", "im-barcode", "im-google-play", "im-facebook-messenger", "im-wechat", "im-line", "im-git", "im-first-aid", "im-ribbon", "im-plane", "im-idea", "im-data", "im-data-delete", "im-data-validate", "im-folder-add", "im-radar", "im-pizza", "im-truck", "im-support", "im-reset", "im-import", "im-export", "im-color-fan", "im-cookie", "im-gift-card", "im-factory", "im-pulse", "im-accessibility", "im-apartment", "im-plugin", "im-layer", "im-direction", "im-dribbble", "im-radio", "im-bank", "im-battery-empty", "im-battery", "im-battery-full", "im-x-mark-circle-o", "im-timer", "im-hashtag", "im-server", "im-flask", "im-anchor", "im-umbrella", "im-cc-amex", "im-cc-visa", "im-cc-mastercard", "im-cc-paypal", "im-cc-amazon", "im-cc-bitcoin", "im-car", "im-paintbrush", "im-cube", "im-cubes", "im-language", "im-calculator", "im-user-settings", "im-trophy", "im-pointer", "im-edit", "im-warning-circle", "im-check-mark-circle-o", "im-date-o", "im-newspaper-o", "im-wrench", "im-binoculars", "im-gamepad", "im-history", "im-bell-active", "im-coffee", "im-leaf", "im-gift", "im-flip-chart-o", "im-clock", "im-line-chart-up", "im-laptop-o", "im-monitor-o", "im-cursor", "im-keyboard", "im-pin", "im-store", "im-graduation-hat", "im-certificate-o", "im-sun", "im-diamond-o", "im-drop", "im-paperplane", "im-fingerprint", "im-lifebuoy", "im-power", "im-target", "im-navigation", "im-bug", "im-network", "im-pie-chart", "im-note-o", "im-id-card", "im-tags", "im-floppy-disk", "im-dashboard", "im-tools", "im-users", "im-trash-can", "im-x-mark-circle", "im-x-mark", "im-shield", "im-mobile", "im-inbox", "im-crown", "im-check-square", "im-check-square-o", "im-check-mark-circle", "im-check-mark", "im-redo", "im-undo", "im-map-o", "im-task-o", "im-menu-dot-v", "im-edit-off", "im-facebook", "im-sitemap", "im-save", "im-volume-off", "im-volume", "im-sign-out", "im-sign-in", "im-shopping-cart", "im-rocket", "im-banknote", "im-fullscreen", "im-minimize", "im-maximize", "im-light-bulb", "im-filter", "im-picture-o", "im-eye-off", "im-eye", "im-external-link", "im-random", "im-loop", "im-next", "im-previous", "im-eject", "im-stop", "im-pause", "im-play", "im-credit-card", "im-bookmark", "im-upload", "im-download", "im-video-camera", "im-photo-camera", "im-care-up", "im-care-down", "im-care-left", "im-arrow-up-circle", "im-arrow-down-circle", "im-arrow-left-circle", "im-arrow-right-circle", "im-arrow-up", "im-arrow-down", "im-arrow-left", "im-arrow-right", "im-angle-up-circle", "im-angle-down-circle", "im-angle-left-circle", "im-angle-right-circle", "im-angle-up", "im-angle-down", "im-angle-left", "im-angle-right", "im-twitch", "im-reddit", "im-edge", "im-whatsapp", "im-amazon", "im-snapchat", "im-instagram", "im-fire", "im-sync", "im-toggle", "im-control-panel", "im-archive", "im-bell", "im-bell-off", "im-youtube", "im-spinner", "im-smiley-o", "im-frown-o", "im-code", "im-android-os", "im-linux-os", "im-apple-os", "im-menu", "im-menu-list", "im-menu-dot-h", "im-windows-os", "im-square-o", "im-check-square-i", "im-radio-button-circle", "im-radio-button-circle-o", "im-flag", "im-opera", "im-thumb-up", "im-thumb-down", "im-safari", "im-paper-clip", "im-firefox", "im-copy", "im-chrome", "im-quote-left", "im-quote-right", "im-ie", "im-briefcase", "im-forbidden", "im-vk", "im-wizard", "im-location", "im-paypal", "im-coin", "im-key", "im-lock", "im-lock-open", "im-share", "im-flash", "im-cloud", "im-database", "im-wifi", "im-book", "im-audio", "im-video", "im-microphone", "im-printer", "im-computer", "im-phone", "im-user-male", "im-user-female", "im-user-circle", "im-clock-o", "im-calendar", "im-pencil", "im-question", "im-bar-chart", "im-info", "im-folder", "im-folder-open", "im-file", "im-file-o", "im-files-o", "im-warning", "im-link", "im-unlink", "im-tag", "im-heart", "im-cloud-upload", "im-cloud-download", "im-speech-bubble", "im-speech-bubble-comment", "im-speech-bubble-comments", "im-mail", "im-globe", "im-home", "im-window-o", "im-table", "im-windows-o", "im-gear", "im-twitter", "im-magnifier", "im-magnifier-plus", "im-magnifier-minus", "im-minus", "im-minus-circle", "im-plus", "im-plus-circle", "im-care-right", "im-star", "im-star-half", "im-star-o", "im-circle-o", "im-xing", "im-vimeo", "im-tumblr", "im-stumbleupon", "im-stackoverflow", "im-soundcloud", "im-skype", "im-pinterest", "im-linkedin", "im-google-plus", "im-github", "im-flickr", "im-facebook-like", "im-blogger", "im-behance"];
        }
      }
    };
    Ti.Preload("ti/com/ti/input/icon/ti-input-icon-props.mjs", _M);
  })(); //============================================================
  // JOIN: ti/input/icon/ti-input-icon.html
  //============================================================


  Ti.Preload("ti/com/ti/input/icon/ti-input-icon.html", "<ti-combo-box class=\"ti-input-icon\"\n  :class=\"TopClass\"\n  :drop-width=\"dropWidth\"\n  :drop-height=\"dropHeight\"\n  :status=\"status\"\n  @collapse=\"doCollapse\">\n  <!--\n    Box\n  -->\n  <template v-slot:box>\n    <span class=\"as-value\"\n      :style=\"ValueStyle\"\n      @click.left=\"OnToggleDrop\">\n      <!--Show Icon-->\n      <ti-icon \n        v-if=\"hasValue\"\n          :value=\"value\"/>\n      <!--No Icon-->\n      <span \n        v-else\n          class=\"no-icon\"><i class=\"zmdi zmdi-cake\"></i></span>\n    </span>\n    <span class=\"as-clear\" @click=\"OnClearIcon\">\n      <ti-icon value=\"zmdi-close\"/>\n    </span>\n  </template>\n  <!--\n    Drop\n  -->\n  <template v-slot:drop>\n    <div class=\"icon-input\">\n      <input ref=\"input\"\n        :placeholder=\"'i18n:icon-code-tip'|i18n\"\n        @change=\"OnChangedIcon\">\n    </div>\n    <div class=\"icon-options\">\n      <ul>\n        <li v-for=\"li of OptionIcons\"\n          @click.left=\"OnSelectIcon(li)\"\n          @dblclick.left=\"OnSelectIconAndCollapse(li)\"\n          @mouseenter=\"OnHoverIcon(li)\"\n          @mouseleave=\"OnLeaveIcon(li)\">\n          <ti-icon :value=\"li.value\"/>\n        </li>\n      </ul>\n    </div>\n    <div class=\"icon-tip\">\n      <template v-if=\"TipIcon\">\n        <ti-icon :value=\"TipIcon\"/>\n        <span>{{TipIcon}}</span>\n      </template>\n      <template v-else>\n        <span>...</span>\n      </template>\n    </div>\n  </template>\n</ti-combo-box>"); //============================================================
  // JOIN: ti/input/icon/ti-input-icon.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          hideBorder: false,
          myHoverIcon: null,
          status: "collapse"
        };
      },
      ////////////////////////////////////////////////////
      props: {
        // "hideBorder"  : {
        //   type : Boolean,
        //   default : false
        // },
        "value": {
          type: [String, Object],
          "default": null
        },
        "iconSize": {
          type: [Number, String],
          "default": null
        },
        "dropWidth": {
          type: [Number, String],
          "default": "4rem"
        },
        "dropHeight": {
          type: [Number, String],
          "default": "4rem"
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        TopClass: function TopClass() {
          return Ti.Css.mergeClassName({
            "show-border": !this.hideBorder,
            "hide-border": this.hideBorder
          }, this.className);
        },
        //------------------------------------------------
        ValueStyle: function ValueStyle() {
          return {
            "font-size": Ti.Css.toSize(this.iconSize)
          };
        },
        //------------------------------------------------
        isCollapse: function isCollapse() {
          return "collapse" == this.status;
        },
        isExtended: function isExtended() {
          return "extended" == this.status;
        },
        //------------------------------------------------
        hasValue: function hasValue() {
          return !Ti.Util.isNil(this.value);
        },
        //------------------------------------------------
        TipIcon: function TipIcon() {
          return this.myHoverIcon || this.value;
        },
        //------------------------------------------------
        OptionIcons: function OptionIcons() {
          var list = [];

          _.forEach(this.options, function (icon, index) {
            var m = /^([a-z]+)-(.+)$/.exec(icon);
            list.push({
              value: icon,
              index: index,
              type: m[1],
              name: m[2]
            });
          });

          return list;
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        OnToggleDrop: function OnToggleDrop() {
          this.status = {
            "collapse": "extended",
            "extended": "collapse"
          }[this.status];
        },
        //------------------------------------------------
        OnSelectIcon: function OnSelectIcon() {
          var _ref43 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              value = _ref43.value;

          this.$notify("change", value);
        },
        //------------------------------------------------
        OnSelectIconAndCollapse: function OnSelectIconAndCollapse() {
          var _ref44 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              value = _ref44.value;

          this.$notify("change", value);
          this.status = "collapse";
        },
        //------------------------------------------------
        OnChangedIcon: function OnChangedIcon() {
          var icon = _.trim(this.$refs.input.value);

          console.log("haha", icon);
          this.$notify("change", icon);
        },
        //------------------------------------------------
        OnHoverIcon: function OnHoverIcon() {
          var _ref45 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              value = _ref45.value;

          this.myHoverIcon = value;
        },
        //------------------------------------------------
        OnLeaveIcon: function OnLeaveIcon() {
          this.myHoverIcon = null;
        },
        //------------------------------------------------
        OnClearIcon: function OnClearIcon() {
          this.$notify("change", null);
        },
        //------------------------------------------------
        doCollapse: function doCollapse() {
          this.status = "collapse";
        } //------------------------------------------------

      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/input/icon/ti-input-icon.mjs", _M);
  })(); //============================================================
  // JOIN: ti/input/icon/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/input/icon/_com.json", {
    "name": "ti-input-icon",
    "globally": true,
    "template": "./ti-input-icon.html",
    "props": "./ti-input-icon-props.mjs",
    "mixins": ["./ti-input-icon.mjs"]
  }); //============================================================
  // JOIN: ti/input/month/ti-input-month.html
  //============================================================

  Ti.Preload("ti/com/ti/input/month/ti-input-month.html", "<ti-combo-box class=\"as-month\"\n  :class=\"topClass\"\n  :width=\"width\"\n  :drop-width=\"dropWidth\"\n  :drop-height=\"dropHeight\"\n  :drop-overflow=\"'hidden'\"\n  :status=\"status\"\n  @collapse=\"doCollapse\">\n  <!--\n    Box\n  -->\n  <template v-slot:box>\n    <ti-input \n      :readonly=\"!canInput\"\n      :hide-border=\"hideBorder\"\n      :placeholder=\"placeholder|i18n\"\n      :prefix-icon=\"icon\"\n      :suffix-icon=\"theStatusIcon\"\n      :value=\"theInputValue\"\n      :height=\"height\"\n      :focus=\"isExtended\"\n      @change=\"onChanged\"\n      @input:focus=\"onInputFocused\"\n      @suffix:icon=\"onClickStatusIcon\"/>\n  </template>\n  <!--\n    Drop\n  -->\n  <template v-slot:drop>\n    <ti-month\n      :value=\"theDropDate\"\n      :height=\"dropHeight\"\n      :begin-year=\"beginYear\"\n      :end-year=\"endYear\"\n      @change=\"onMonthChanged\"/>\n  </template>\n</ti-combo-box>"); //============================================================
  // JOIN: ti/input/month/ti-input-month.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          "runtime": null,
          "status": "collapse"
        };
      },
      ////////////////////////////////////////////////////
      props: {
        "canInput": {
          type: Boolean,
          "default": true
        },
        "value": {
          type: [String, Number, Date],
          "default": undefined
        },
        "text": {
          type: String,
          "default": undefined
        },
        "icon": {
          type: String,
          "default": "far-calendar"
        },
        "format": {
          type: String,
          "default": "yyyy-MM"
        },
        "placeholder": {
          type: [String, Number],
          "default": "i18n:blank-month"
        },
        "hideBorder": {
          type: Boolean,
          "default": false
        },
        "width": {
          type: [Number, String],
          "default": "1.6rem"
        },
        "height": {
          type: [Number, String],
          "default": undefined
        },
        "dropWidth": {
          type: [Number, String],
          "default": "box"
        },
        // the height of drop list
        "dropHeight": {
          type: [Number, String],
          "default": 200
        },
        "beginYear": {
          type: [Number, String],
          "default": 1970
        },
        "endYear": {
          type: [Number, String],
          "default": new Date().getFullYear() + 1
        },
        "statusIcons": {
          type: Object,
          "default": function _default() {
            return {
              collapse: "zmdi-chevron-down",
              extended: "zmdi-chevron-up"
            };
          }
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        topClass: function topClass() {
          return Ti.Css.mergeClassName(this.className);
        },
        //------------------------------------------------
        isCollapse: function isCollapse() {
          return "collapse" == this.status;
        },
        isExtended: function isExtended() {
          return "extended" == this.status;
        },
        //------------------------------------------------
        theDate: function theDate() {
          return Ti.Types.toDate(this.value, null);
        },
        //------------------------------------------------
        theDropDate: function theDropDate() {
          return this.runtime || this.theDate;
        },
        //------------------------------------------------
        theInputValue: function theInputValue() {
          if (this.isExtended) {
            return this.getDateText(this.theDropDate, this.format);
          }

          return this.text || this.getDateText(this.theDropDate, this.format);
        },
        //------------------------------------------------
        theStatusIcon: function theStatusIcon() {
          return this.statusIcons[this.status];
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        applyRuntime: function applyRuntime() {
          if (this.runtime) {
            var dt = this.runtime;
            this.runtime = null;
            var str = this.getDateText(dt);
            this.$notify("change", str);
          }
        },
        //-----------------------------------------------
        doExtend: function doExtend() {
          this.status = "extended";
        },
        //-----------------------------------------------
        doCollapse: function doCollapse() {
          var _ref46 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              _ref46$escaped = _ref46.escaped,
              escaped = _ref46$escaped === void 0 ? false : _ref46$escaped;

          this.status = "collapse"; // Drop runtime

          if (escaped) {
            this.runtime = null;
          } // Apply Changed for runtime
          else {
              this.applyRuntime();
            }
        },
        //------------------------------------------------
        onInputFocused: function onInputFocused() {
          this.doExtend();
        },
        //------------------------------------------------
        onChanged: function onChanged(val) {
          // Empty value as null
          if (_.isEmpty(val)) {
            this.$notify("change", null);
          } // Parsed value
          else {
              var dt = Ti.Types.toDate(val);
              var str = this.getDateText(dt);
              this.$notify("change", str);
            }
        },
        //------------------------------------------------
        onClickStatusIcon: function onClickStatusIcon() {
          // extended -> collapse
          if (this.isExtended) {
            this.doCollapse();
          } // collapse -> extended
          else {
              this.doExtend();
            }
        },
        //------------------------------------------------
        onMonthChanged: function onMonthChanged(dt) {
          this.runtime = dt;
        },
        //------------------------------------------------
        getDateText: function getDateText(dt) {
          var fmt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "yyyy-MM";
          var dt2 = Ti.Types.toDate(dt, null);
          return Ti.Types.formatDate(dt2, fmt);
        } //------------------------------------------------

      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/input/month/ti-input-month.mjs", _M);
  })(); //============================================================
  // JOIN: ti/input/month/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/input/month/_com.json", {
    "name": "ti-input-month",
    "globally": true,
    "template": "./ti-input-month.html",
    "mixins": ["./ti-input-month.mjs"],
    "components": ["@com:ti/combo/input", "@com:ti/month"]
  }); //============================================================
  // JOIN: ti/input/num/ti-input-num.html
  //============================================================

  Ti.Preload("ti/com/ti/input/num/ti-input-num.html", "<div\n  class=\"ti-input-num ti-fill-parent\"\n  :class=\"TopClass\"\n  :style=\"TopStyle\">\n  <!--\n    Button: -\n  -->\n  <div class=\"as-btn is-decrease\"\n    :class=\"DesreaseClass\"\n    @click=\"changeByStep(-1)\">\n    <ti-icon value=\"zmdi-minus\"/>\n  </div>\n  <!--\n    Input\n  -->\n  <div class=\"as-input\">\n    <input \n      spellcheck=\"false\" \n      :value=\"TheValue\"\n      @change=\"onChanged\">\n  </div>\n  <!--\n    Button: +\n  -->\n  <div class=\"as-btn is-increase\"\n    :class=\"IncreaseClass\"\n    @click=\"changeByStep(1)\">\n    <ti-icon value=\"zmdi-plus\"/>\n  </div>\n</div>"); //============================================================
  // JOIN: ti/input/num/ti-input-num.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      props: {
        "value": null,
        "defaultValue": {
          type: Number,
          "default": 0
        },
        "maxValue": {
          type: Number,
          "default": undefined
        },
        "minValue": {
          type: Number,
          "default": undefined
        },
        "step": {
          type: Number,
          "default": 1
        },
        "width": {
          type: [Number, String],
          "default": 200
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        TopStyle: function TopStyle() {
          return Ti.Css.toStyleRem100({
            width: this.width
          });
        },
        DesreaseClass: function DesreaseClass() {
          if (!_.isUndefined(this.minValue) && this.value <= this.minValue) {
            return "is-disabled";
          }

          return "is-enabled";
        },
        IncreaseClass: function IncreaseClass() {
          if (!_.isUndefined(this.maxValue) && this.value >= this.maxValue) {
            return "is-disabled";
          }

          return "is-enabled";
        },
        TheValue: function TheValue() {
          if (isNaN(this.value) || !_.isNumber(this.value)) {
            return;
          }

          return this.getValue(this.value);
        }
      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        getValue: function getValue(val) {
          if (isNaN(val) || !_.isNumber(val)) {
            return this.defaultValue;
          }

          if (!_.isUndefined(this.minValue) && val < this.minValue) {
            return this.minValue;
          }

          if (!_.isUndefined(this.maxValue) && val > this.maxValue) {
            return this.maxValue;
          }

          return val;
        },
        //------------------------------------------------
        changeByStep: function changeByStep() {
          var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          var val = this.TheValue; // Start with default value

          if (_.isUndefined(val)) {
            val = this.defaultValue;
          } // change by step
          else {
              val += n * this.step;
            } // Eval the min/max range


          val = this.getValue(val); // Emit change

          if (val != this.value) {
            this.$notify("change", val);
          }
        },
        //------------------------------------------------
        onChanged: function onChanged($event) {
          var $in = $event.target;

          if (_.isElement($in)) {
            var str = _.trim($in.value); // Notify nil


            if (_.isEmpty(str)) {
              this.$notify("change", null);
            } // Notify value
            else {
                var val = str ? str * 1 : this.defaultValue;

                if (!isNaN(val)) {
                  this.$notify("change", val);
                }
              }
          }
        } //------------------------------------------------

      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/input/num/ti-input-num.mjs", _M);
  })(); //============================================================
  // JOIN: ti/input/num/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/input/num/_com.json", {
    "name": "ti-input-num",
    "globally": true,
    "template": "./ti-input-num.html",
    "mixins": ["./ti-input-num.mjs"]
  }); //============================================================
  // JOIN: ti/input/tags/ti-input-tags-props.mjs
  //============================================================

  (function () {
    var _M = {
      //-----------------------------------
      // Data
      //-----------------------------------
      "dict": {
        type: [String, Ti.Dict],
        "default": null
      },
      "inputValue": null,
      // +1 from the begin
      // -1 from the last
      "maxValueLen": {
        type: Number,
        "default": 0
      },
      "valueUnique": {
        type: Boolean,
        "default": true
      },
      "tagOptions": {
        type: [Array, Function],
        "default": function _default() {
          return [];
        }
      },
      "tagMapping": {
        type: Object,
        "default": undefined
      },
      //-----------------------------------
      // Behavior
      //-----------------------------------
      "canInput": {
        type: Boolean,
        "default": true
      },
      "cancelTagBubble": {
        type: Boolean,
        "default": false
      },
      //-----------------------------------
      // Aspect
      //-----------------------------------
      "tagItemIconBy": {
        type: [String, Function],
        "default": undefined
      },
      "tagItemDefaultIcon": {
        type: String,
        "default": undefined
      },
      "tagOptionDefaultIcon": {
        type: String,
        "default": undefined
      }
    };
    Ti.Preload("ti/com/ti/input/tags/ti-input-tags-props.mjs", _M);
  })(); //============================================================
  // JOIN: ti/input/tags/ti-input-tags.html
  //============================================================


  Ti.Preload("ti/com/ti/input/tags/ti-input-tags.html", "<ti-input\n  class=\"ti-input-tags\"\n  :class-name=\"className\"\n  :value=\"inputValue\"\n  :value-case=\"valueCase\"\n  :trimed=\"trimed\"\n\n  :readonly=\"!canInput || readonly\"\n  :focused=\"focused\"\n  :hover=\"hover\"\n  :auto-select=\"autoSelect\"\n\n  :placeholder=\"thePlaceholder\"\n  :auto-i18n=\"autoI18n\"\n  :hide-border=\"hideBorder\"\n  :prefix-icon=\"prefixIcon\"\n  :prefix-hover-icon=\"prefixHoverIcon\"\n  :prefix-icon-for-clean=\"prefixIconForClean\"\n  :prefix-text=\"prefixText\"\n  :suffix-icon=\"suffixIcon\"\n  :suffix-text=\"suffixText\"\n  \n  :width=\"width\"\n  :height=\"height\"\n\n  :on-init=\"onInputInit\"\n  \n  @inputing=\"onInputInputing\"\n  @change=\"onInputChanged\"\n  @input:focus=\"$notify('input:focus')\"\n  @prefix:icon=\"$notify('prefix:icon')\"\n  @input:blur=\"$notify('input:blur')\"\n  @suffix:icon=\"$notify('suffix:icon')\">\n  <!--\n    Tag List\n  -->\n  <div v-if=\"hasTags\"\n    class=\"as-tags\">\n    <ti-tags\n      :value=\"theTags\"\n      :dict=\"dict\"\n      :removable=\"true\"\n      :item-options=\"tagOptions\"\n      :item-icon-by=\"tagItemIconBy\"\n      :item-default-icon=\"tagItemDefaultIcon\"\n      :option-default-icon=\"tagOptionDefaultIcon\"\n      :mapping=\"tagMapping\"\n      :cancel-item-bubble=\"cancelTagBubble\"\n      @change=\"$notify('change', $event)\"/>\n  </div>\n</ti-input>"); //============================================================
  // JOIN: ti/input/tags/ti-input-tags.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      data: function data() {
        return {};
      },
      ////////////////////////////////////////////////////
      props: {
        "inputChange": {
          type: Function,
          "default": undefined
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------

        /***
         * @return The tag objects list like:
         * 
         * ```js
         * [{
         *   icon  : "zmdi-phone",
         *   text  : "i18n:xxx",
         *   value : 100,
         *   options : [{icon,text,value}...]
         * }]
         * ```
         */
        theTags: function theTags() {
          return this.evalTagList(this.value);
        },
        //------------------------------------------------
        hasTags: function hasTags() {
          return !_.isEmpty(this.theTags);
        },
        //------------------------------------------------
        thePlaceholder: function thePlaceholder() {
          if (this.placeholder) {
            return this.placeholder;
          }

          if (this.readonly || !this.canInput) {
            return "";
          }

          return "i18n:input-tags";
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        onInputInit: function onInputInit($input) {
          this.$input = $input;
        },
        //------------------------------------------------

        /***
         * @return The tag objects list like:
         * 
         * ```js
         * [{
         *   icon  : "zmdi-phone",
         *   text  : "i18n:xxx",
         *   value : 100,
         *   options : [{icon,text,value}...]
         * }]
         * ```
         */
        evalTagList: function evalTagList() {
          var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var newTagVal = arguments.length > 1 ? arguments[1] : undefined;

          //...........................................
          // Prepare the list
          var list = _.filter(_.concat(values), function (v) {
            return !Ti.Util.isNil(v);
          }); // Join the last one


          if (!Ti.Util.isNil(newTagVal)) {
            list.push(newTagVal);
          } // valueUnique


          if (this.valueUnique) {
            list = _.uniq(list);
          } // The MaxValueLen


          if (this.maxValueLen > 0) {
            list = _.slice(list, 0, this.maxValueLen);
          } // Slice from the end
          else if (this.maxValueLen < 0) {
              var offset = Math.max(0, list.length + this.maxValueLen);
              list = _.slice(list, offset);
            } // Gen Tag List


          var tags = [];

          var _iterator32 = _createForOfIteratorHelper(list),
              _step32;

          try {
            for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
              var li = _step32.value;

              // Object
              if (_.isPlainObject(li)) {
                tags.push(_.assign({
                  icon: this.tagIcon,
                  options: this.tagOptions
                }, li));
              } // String or simple value
              else {
                  tags.push(li);
                }
            } //...........................................

          } catch (err) {
            _iterator32.e(err);
          } finally {
            _iterator32.f();
          }

          return tags;
        },
        //------------------------------------------------
        getTagValues: function getTagValues() {
          var tags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var list = [];

          var _iterator33 = _createForOfIteratorHelper(tags),
              _step33;

          try {
            for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {
              var tag = _step33.value;
              var val = _.isPlainObject(tag) ? tag.value : tag;

              if (!Ti.Util.isNil(val)) {
                list.push(val);
              }
            }
          } catch (err) {
            _iterator33.e(err);
          } finally {
            _iterator33.f();
          }

          return list;
        },
        //------------------------------------------------
        onInputInputing: function onInputInputing(val) {
          this.$notify("inputing", val);
        },
        //------------------------------------------------
        onInputChanged: function onInputChanged(val) {
          // May click the prefix icon for clean
          if (_.isNull(val)) {
            this.$notify("change", []);
          } // Delegate to parent
          else if (_.isFunction(this.inputChange)) {
              this.inputChange(val);
            } // Handle by self
            else if (val) {
                var tags = this.evalTagList(this.value, val);
                var vals = this.getTagValues(tags);
                this.$notify("change", vals);
              }
        } //------------------------------------------------

      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/input/tags/ti-input-tags.mjs", _M);
  })(); //============================================================
  // JOIN: ti/input/tags/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/input/tags/_com.json", {
    "name": "ti-input-tags",
    "globally": true,
    "template": "./ti-input-tags.html",
    "props": ["@com:ti/input/ti-input-props.mjs", "./ti-input-tags-props.mjs"],
    "mixins": ["./ti-input-tags.mjs"],
    "components": ["@com:ti/tags"]
  }); //============================================================
  // JOIN: ti/input/text/ti-input-text.html
  //============================================================

  Ti.Preload("ti/com/ti/input/text/ti-input-text.html", "<div class=\"ti-input-text full-field\" \n  :class=\"topClass\" \n  :style=\"topStyle\"\n  v-ti-activable>\n  <!--\n    Prefix\n  -->\n  <div class=\"as-bar is-prefix\">\n    <!--prefix:icon-->\n    <div v-if=\"prefixIcon\"\n      class=\"as-icon at-prefix\"\n      :class=\"getHoverClass('prefixIcon')\"\n      @click.left.stop=\"onClickPrefixIcon\"\n      @mouseenter=\"pointerHover='prefixIcon'\"\n      @mouseleave=\"pointerHover=null\">\n      <ti-icon :value=\"thePrefixIcon\"/>\n    </div>\n    <!--prefix:text-->\n    <div v-if=\"prefixText\" \n      class=\"as-text at-prefix\"\n      :class=\"getHoverClass('prefixText')\"\n      @click.left.stop=\"onClickPrefixText\"\n      @mouseenter=\"pointerHover='prefixText'\"\n      @mouseleave=\"pointerHover=null\">\n      <span>{{prefixText|i18n}}</span>\n    </div>\n  </div>\n  <!--input-->\n  <textarea ref=\"input\"\n    spellcheck=\"false\" \n    :readonly=\"readonly\"\n    :value=\"theValue\"\n    :placeholder=\"placeholder | i18n\"\n    @compositionstart=\"onInputCompositionStart\"\n    @compositionend=\"onInputCompositionEnd\"\n    @input=\"onInputing\"\n    @keydown=\"onInputKeyDown\"\n    @change=\"onInputChanged\"\n    @focus=\"onInputFocus\"\n    @blur=\"onInputBlur\"></textarea>\n  <!--\n    Suffox\n  -->\n  <div class=\"as-bar is-suffix\">\n    <!--suffix:text-->\n    <div v-if=\"suffixText\"\n      class=\"as-text at-suffix\"\n      :class=\"getHoverClass('suffixText')\"\n      @click.left.stop=\"onClickSuffixIcon\"\n      @mouseenter=\"pointerHover='suffixText'\"\n      @mouseleave=\"pointerHover=null\">\n      <span>{{suffixText|i18n}}</span>\n    </div>\n    <!--suffix:icon-->\n    <div v-if=\"suffixIcon\"\n      class=\"as-icon at-suffix\"\n      :class=\"getHoverClass('suffixIcon')\"\n      @click.left.stop=\"onClickSuffixIcon\"\n      @mouseenter=\"pointerHover='suffixIcon'\"\n      @mouseleave=\"pointerHover=null\">\n      <ti-icon :value=\"suffixIcon\"/>\n    </div>\n  </div>\n</div>"); //============================================================
  // JOIN: ti/input/text/ti-input-text.mjs
  //============================================================

  (function () {
    var _M2;

    var _M = (_M2 = {
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          "inputCompositionstart": false,
          "isFocused": false,
          "pointerHover": null
        };
      },
      ////////////////////////////////////////////////////
      watch: {
        "focus": function focus(v) {
          this.isFocused = v;
        }
      },
      ////////////////////////////////////////////////////
      props: {
        "value": null,
        "format": {
          type: [String, Array, Object],
          "default": undefined
        },
        "readonly": {
          type: Boolean,
          "default": false
        },
        "valueCase": {
          type: String,
          "default": null,
          validator: function validator(cs) {
            return Ti.Util.isNil(cs) || Ti.S.isValidCase(cs);
          }
        },
        "placeholder": {
          type: [String, Number],
          "default": null
        },
        "trimed": {
          type: Boolean,
          "default": true
        },
        "autoJsValue": {
          type: Boolean,
          "default": false
        },
        "hideBorder": {
          type: Boolean,
          "default": false
        },
        "width": {
          type: [Number, String],
          "default": null
        },
        "height": {
          type: [Number, String],
          "default": null
        },
        "prefixHoverIcon": {
          type: String,
          "default": "zmdi-close-circle"
        },
        "prefixIconForClean": {
          type: Boolean,
          "default": true
        },
        "prefixIcon": {
          type: String,
          "default": null
        },
        "prefixText": {
          type: String,
          "default": null
        },
        "suffixText": {
          type: String,
          "default": null
        },
        "suffixIcon": {
          type: String,
          "default": null
        },
        "focus": {
          type: Boolean,
          "default": false
        },
        "hover": {
          type: [Array, String],
          "default": function _default() {
            return ["prefixIcon", "suffixIcon"];
          }
        },
        "autoSelect": {
          type: Boolean,
          "default": false
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        topClass: function topClass() {
          return Ti.Css.mergeClassName(this.className, {
            "is-self-actived": this.isSelfActived,
            "is-actived": this.isActived,
            "is-focused": this.isFocused,
            "is-blurred": !this.isFocused,
            "is-readonly": this.readonly,
            "show-border": !this.hideBorder,
            "hide-border": this.hideBorder,
            "has-prefix-icon": this.thePrefixIcon,
            "has-prefix-text": this.prefixText,
            "has-suffix-icon": this.suffixIcon,
            "has-suffix-text": this.suffixText
          });
        },
        //------------------------------------------------
        topStyle: function topStyle() {
          return Ti.Css.toStyle({
            width: this.width,
            height: this.height
          });
        },
        //------------------------------------------------
        theValue: function theValue() {
          //console.log("input value:", this.value)
          // if(_.isArray(this.value)) {
          //   return this.value.join("\r\n")
          // }
          return Ti.Types.toStr(this.value, this.format);
        },
        //------------------------------------------------
        thePrefixIcon: function thePrefixIcon() {
          if ("prefixIcon" == this.pointerHover && this.isCanHover("prefixIcon")) {
            return this.prefixHoverIcon || this.prefixIcon;
          }

          return this.prefixIcon;
        },
        //------------------------------------------------
        theHover: function theHover() {
          var map = {};

          var hos = _.concat(this.hover);

          var _iterator34 = _createForOfIteratorHelper(hos),
              _step34;

          try {
            for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {
              var ho = _step34.value;

              if (ho) {
                map[ho] = true;
              }
            }
          } catch (err) {
            _iterator34.e(err);
          } finally {
            _iterator34.f();
          }

          return map;
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        isCanHover: function isCanHover(hoverName) {
          return this.theHover[hoverName] ? true : false;
        },
        //------------------------------------------------
        getHoverClass: function getHoverClass(hoverName) {
          var canHover = this.isCanHover(hoverName);
          return {
            "can-hover": canHover,
            "for-look": !canHover
          };
        },
        //------------------------------------------------
        onInputCompositionStart: function onInputCompositionStart() {
          this.inputCompositionstart = true;
        },
        //------------------------------------------------
        onInputCompositionEnd: function onInputCompositionEnd() {
          this.inputCompositionstart = false;
          this.doWhenInput();
        },
        //------------------------------------------------
        onInputing: function onInputing($event) {
          if (!this.inputCompositionstart) {
            this.doWhenInput();
          }
        },
        //------------------------------------------------
        doWhenInput: function doWhenInput() {
          var emitName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "inputing";
          var autoJsValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

          if (_.isElement(this.$refs.input)) {
            //console.log("doWhenInput", emitName)
            var val = this.$refs.input.value; // Auto js value

            if (autoJsValue) {
              val = Ti.S.toJsValue(val, {
                autoNil: true,
                autoDate: false,
                trimed: this.trimed
              });
            } // Trim
            else if (this.trimed) {
                val = _.trim(val);
              } // case


            val = Ti.S.toCase(val, this.valueCase); // notify

            this.$notify(emitName, val);
          }
        },
        //------------------------------------------------
        onInputKeyDown: function onInputKeyDown($event) {
          var payload = _.pick($event, "code", "key", "keyCode", "altKey", "ctrlKey", "metaKey", "shiftKey");

          payload.uniqueKey = Ti.Shortcut.getUniqueKey(payload);
          payload.$event = $event;
          this.$notify("keypress", payload);
        },
        //------------------------------------------------
        onInputChanged: function onInputChanged() {
          this.doWhenInput("change", this.autoJsValue);
        },
        //------------------------------------------------
        onInputFocus: function onInputFocus() {
          if (!this.readonly) {
            if (this.autoSelect) {
              this.$refs.input.select();
            } else {
              this.$refs.input.focus();
            }
          }

          this.isFocused = true;
          this.$notify("input:focus"); // Auto Actived

          if (!this.isActived) {
            this.setActived();
          }
        },
        //------------------------------------------------
        onInputBlur: function onInputBlur() {
          this.isFocused = false;
          this.$notify("input:blur");
        },
        //------------------------------------------------
        onClickPrefixIcon: function onClickPrefixIcon() {
          if (this.prefixIconForClean) {
            this.$notify("change", null);
          }

          this.$notify("prefix:icon");
        },
        //------------------------------------------------
        onClickPrefixText: function onClickPrefixText() {
          this.$notify("prefix:text");
        },
        //------------------------------------------------
        onClickSuffixIcon: function onClickSuffixIcon() {
          this.$notify("suffix:icon");
        },
        //------------------------------------------------
        onClickSuffixText: function onClickSuffixText() {
          this.$notify("suffix:text");
        },
        //------------------------------------------------
        doAutoFocus: function doAutoFocus() {
          if (this.focus && !this.isFocused) {
            this.onInputFocus();
          }
        } //------------------------------------------------

      }
    }, _defineProperty(_M2, "watch", {
      "focus": function focus() {
        this.doAutoFocus();
      }
    }), _defineProperty(_M2, "mounted", function mounted() {
      this.doAutoFocus();
    }), _M2);

    Ti.Preload("ti/com/ti/input/text/ti-input-text.mjs", _M);
  })(); //============================================================
  // JOIN: ti/input/text/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/input/text/_com.json", {
    "name": "ti-input-text",
    "globally": true,
    "template": "./ti-input-text.html",
    "mixins": ["./ti-input-text.mjs"],
    "components": []
  }); //============================================================
  // JOIN: ti/input/ti-input-props.mjs
  //============================================================

  (function () {
    var _M = {
      //-----------------------------------
      // Data
      //-----------------------------------
      "value": undefined,
      "format": undefined,
      "valueCase": {
        type: String,
        "default": undefined,
        validator: function validator(cs) {
          return Ti.Util.isNil(cs) || Ti.S.isValidCase(cs);
        }
      },
      "trimed": {
        type: Boolean,
        "default": true
      },
      "autoJsValue": {
        type: Boolean,
        "default": false
      },
      //-----------------------------------
      // Behavior
      //-----------------------------------
      "readonly": {
        type: Boolean,
        "default": false
      },
      "focused": {
        type: Boolean,
        "default": false
      },
      "hover": {
        type: [Array, String],
        "default": function _default() {
          return ["prefixIcon", "suffixIcon"];
        }
      },
      "autoSelect": {
        type: Boolean,
        "default": false
      },
      //-----------------------------------
      // Aspect
      //-----------------------------------
      "placeholder": {
        type: [String, Number],
        "default": undefined
      },
      "autoI18n": {
        type: Boolean,
        "default": false
      },
      "hideBorder": {
        type: Boolean,
        "default": false
      },
      "prefixIcon": {
        type: [String, Object],
        "default": undefined
      },
      "prefixHoverIcon": {
        type: String,
        "default": "zmdi-close-circle"
      },
      "prefixIconForClean": {
        type: Boolean,
        "default": true
      },
      "prefixText": {
        type: String,
        "default": undefined
      },
      "suffixIcon": {
        type: [String, Object],
        "default": undefined
      },
      "suffixText": {
        type: String,
        "default": undefined
      },
      //-----------------------------------
      // Measure
      //-----------------------------------
      "width": {
        type: [Number, String],
        "default": undefined
      },
      "height": {
        type: [Number, String],
        "default": undefined
      }
    };
    Ti.Preload("ti/com/ti/input/ti-input-props.mjs", _M);
  })(); //============================================================
  // JOIN: ti/input/ti-input.html
  //============================================================


  Ti.Preload("ti/com/ti/input/ti-input.html", "<div class=\"ti-input full-field\" \n  :class=\"TopClass\" \n  :style=\"TopStyle\"\n  v-ti-activable>\n  <!--prefix:icon-->\n  <div v-if=\"prefixIcon\"\n    class=\"as-input-icon at-prefix\"\n    :class=\"getHoverClass('prefixIcon')\"\n    @click.left=\"OnClickPrefixIcon\"\n    @mouseenter=\"pointerHover='prefixIcon'\"\n    @mouseleave=\"pointerHover=null\">\n    <ti-icon :value=\"ThePrefixIcon\"/>\n  </div>\n  <!--prefix:text-->\n  <div v-if=\"prefixText\" \n    class=\"as-input-text at-prefix\"\n    :class=\"getHoverClass('prefixText')\"\n    @click.left=\"OnClickPrefixText\"\n    @mouseenter=\"pointerHover='prefixText'\"\n    @mouseleave=\"pointerHover=null\">\n    <span>{{prefixText|i18n}}</span>\n  </div>\n  <!--PreSlot-->\n  <slot></slot>\n  <!--\n    Input Box\n  -->\n  <div class=\"as-input\">\n    <input ref=\"input\"\n      spellcheck=\"false\" \n      :readonly=\"readonly\"\n      :value=\"TheValue\"\n      :placeholder=\"placeholder|i18n\"\n      @compositionstart=\"OnInputCompositionStart\"\n      @compositionend=\"OnInputCompositionEnd\"\n      @input=\"OnInputing\"\n      @change=\"OnInputChanged\"\n      @focus=\"OnInputFocus\"\n      @blur=\"OnInputBlur\">\n    <!--suffix:text-->\n    <div v-if=\"suffixText\"\n      class=\"as-input-text at-suffix\"\n      :class=\"getHoverClass('suffixText')\"\n      @click.left=\"OnClickSuffixIcon\"\n      @mouseenter=\"pointerHover='suffixText'\"\n      @mouseleave=\"pointerHover=null\">\n      <span>{{suffixText|i18n}}</span>\n    </div>\n    <!--suffix:icon-->\n    <div v-if=\"suffixIcon\"\n      class=\"as-input-icon at-suffix\"\n      :class=\"getHoverClass('suffixIcon')\"\n      @click.left=\"OnClickSuffixIcon\"\n      @mouseenter=\"pointerHover='suffixIcon'\"\n      @mouseleave=\"pointerHover=null\">\n      <ti-icon :value=\"suffixIcon\"/>\n    </div>\n  </div>\n</div>"); //============================================================
  // JOIN: ti/input/ti-input.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      model: {
        prop: "value",
        event: "change"
      },
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          "inputCompositionstart": false,
          "isFocused": false,
          "pointerHover": null
        };
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass({
            "is-focused": this.isFocused,
            "is-blurred": !this.isFocused,
            "is-readonly": this.readonly,
            "show-border": !this.hideBorder,
            "hide-border": this.hideBorder,
            "has-prefix-icon": this.prefixIcon,
            "has-prefix-text": this.prefixText,
            "has-suffix-icon": this.suffixIcon,
            "has-suffix-text": this.suffixText
          });
        },
        //------------------------------------------------
        TopStyle: function TopStyle() {
          return Ti.Css.toStyle({
            width: this.width,
            height: this.height
          });
        },
        //------------------------------------------------
        TheValue: function TheValue() {
          //console.log("input value:", this.value)
          var val = Ti.Types.toStr(this.value, this.format);

          if (this.autoI18n) {
            return Ti.I18n.text(val);
          }

          return val;
        },
        //------------------------------------------------
        ThePrefixIcon: function ThePrefixIcon() {
          if ("prefixIcon" == this.pointerHover && this.isCanHover("prefixIcon")) {
            return this.prefixHoverIcon || this.prefixIcon;
          }

          return this.prefixIcon;
        },
        //------------------------------------------------
        TheHover: function TheHover() {
          var map = {};

          var hos = _.concat(this.hover);

          var _iterator35 = _createForOfIteratorHelper(hos),
              _step35;

          try {
            for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {
              var ho = _step35.value;

              if (ho) {
                map[ho] = true;
              }
            }
          } catch (err) {
            _iterator35.e(err);
          } finally {
            _iterator35.f();
          }

          return map;
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        isCanHover: function isCanHover(hoverName) {
          return this.TheHover[hoverName] ? true : false;
        },
        //------------------------------------------------
        getHoverClass: function getHoverClass(hoverName) {
          var canHover = this.isCanHover(hoverName);
          return {
            "can-hover": canHover,
            "for-look": !canHover,
            "is-prefix-icon-hover": "prefixIcon" == hoverName
          };
        },
        //------------------------------------------------
        OnInputCompositionStart: function OnInputCompositionStart() {
          this.inputCompositionstart = true;
        },
        //------------------------------------------------
        OnInputCompositionEnd: function OnInputCompositionEnd() {
          this.inputCompositionstart = false;
          this.doWhenInput();
        },
        //------------------------------------------------
        OnInputing: function OnInputing($event) {
          if (!this.inputCompositionstart) {
            this.doWhenInput();
          }
        },
        //------------------------------------------------
        doWhenInput: function doWhenInput() {
          var val = this.getInputValue(false);

          if (!Ti.Util.isNil(val)) {
            this.$notify("inputing", val);
          }
        },
        //------------------------------------------------
        // OnInputKeyDown($event) {
        //   let payload = _.pick($event, 
        //     "code","key","keyCode",
        //     "altKey","ctrlKey","metaKey","shiftKey")
        //   payload.uniqueKey = Ti.Shortcut.getUniqueKey(payload)
        //   payload.$event = $event
        //   this.$notify("keypress", payload)
        // },
        //------------------------------------------------
        OnInputChanged: function OnInputChanged() {
          var val = this.getInputValue(this.autoJsValue);
          this.$notify("change", val);
        },
        //------------------------------------------------
        OnInputFocus: function OnInputFocus() {
          if (!this.readonly) {
            if (this.autoSelect) {
              this.$refs.input.select();
            } else {
              this.$refs.input.focus();
            }
          }

          this.isFocused = true;
          this.$notify("input:focus"); // Auto Actived

          if (!this.isActived) {
            this.setActived();
          }
        },
        //------------------------------------------------
        OnInputBlur: function OnInputBlur() {
          this.isFocused = false;
          this.$notify("input:blur");
        },
        //------------------------------------------------
        OnClickPrefixIcon: function OnClickPrefixIcon() {
          if (this.prefixIconForClean) {
            this.$notify("change", null);
          }

          this.$notify("prefix:icon");
        },
        //------------------------------------------------
        OnClickPrefixText: function OnClickPrefixText() {
          this.$notify("prefix:text");
        },
        //------------------------------------------------
        OnClickSuffixIcon: function OnClickSuffixIcon() {
          this.$notify("suffix:icon");
        },
        //------------------------------------------------
        OnClickSuffixText: function OnClickSuffixText() {
          this.$notify("suffix:text");
        },
        //------------------------------------------------
        // Utility
        //------------------------------------------------
        getInputValue: function getInputValue() {
          var autoJsValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

          if (_.isElement(this.$refs.input)) {
            //console.log("doWhenInput", emitName)
            var val = this.$refs.input.value; // Auto js value

            if (autoJsValue) {
              val = Ti.S.toJsValue(val, {
                autoNil: true,
                autoDate: false,
                trimed: this.trimed
              });
            } // Trim
            else if (this.trimed) {
                val = _.trim(val);
              } // case


            val = Ti.S.toCase(val, this.valueCase); // notify

            return val;
          }
        },
        //------------------------------------------------
        doAutoFocus: function doAutoFocus() {
          if (this.focused && !this.isFocused) {
            this.OnInputFocus();
          }
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      watch: {
        "focused": "doAutoFocus"
      },
      ////////////////////////////////////////////////////
      mounted: function mounted() {
        this.doAutoFocus();
      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/input/ti-input.mjs", _M);
  })(); //============================================================
  // JOIN: ti/input/time/ti-input-time.html
  //============================================================


  Ti.Preload("ti/com/ti/input/time/ti-input-time.html", "<ti-combo-box class=\"as-time\"\n  :class=\"topClass\"\n  :width=\"width\"\n  :drop-width=\"dropWidth\"\n  :drop-height=\"dropHeight\"\n  :drop-overflow=\"'hidden'\"\n  :status=\"status\"\n  @collapse=\"doCollapse\">\n  <!--\n    Box\n  -->\n  <template v-slot:box>\n    <ti-input \n      :readonly=\"!canInput\"\n      :hide-border=\"hideBorder\"\n      :placeholder=\"placeholder|i18n\"\n      :prefix-icon=\"icon\"\n      :suffix-icon=\"theStatusIcon\"\n      :value=\"theTimeText\"\n      :height=\"height\"\n      :focus=\"isExtended\"\n      @change=\"onChanged\"\n      @input:focus=\"onInputFocused\"\n      @suffix:icon=\"onClickStatusIcon\"/>\n  </template>\n  <!--\n    Drop\n  -->\n  <template v-slot:drop>\n    <ti-time\n      :value=\"theDropTime\"\n      :height=\"dropHeight\"\n      :mode=\"mode\"\n      @change=\"onTimeChanged\"/>\n  </template>\n</ti-combo-box>"); //============================================================
  // JOIN: ti/input/time/ti-input-time.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          "runtime": null,
          "status": "collapse"
        };
      },
      ////////////////////////////////////////////////////
      props: {
        "canInput": {
          type: Boolean,
          "default": true
        },
        "value": {
          type: [String, Number, Ti.Types.Time],
          "default": null
        },
        "icon": {
          type: String,
          "default": "far-clock"
        },

        /***
         * Value unit when value is Number
         */
        "valueUnit": {
          type: String,
          "default": "s",
          validator: function validator(unit) {
            return /^(ms|s|min|hr)$/.test(unit);
          }
        },
        // Display mode
        "mode": {
          type: String,
          "default": "auto",

          /***
           * - `sec`  : "HH:mm:ss"
           * - `min`  : "HH:mm"
           * - `auto` : "HH:mm" or "HH:mm:ss" if `ss` no zero
           */
          validator: function validator(unit) {
            return /^(sec|min|auto)$/.test(unit);
          }
        },
        "placeholder": {
          type: [String, Number],
          "default": "i18n:blank-time"
        },
        "hideBorder": {
          type: Boolean,
          "default": false
        },
        "width": {
          type: [Number, String],
          "default": "1.6rem"
        },
        "height": {
          type: [Number, String],
          "default": undefined
        },
        "dropWidth": {
          type: [Number, String],
          "default": "box"
        },
        "dropHeight": {
          type: [Number, String],
          "default": 400
        },
        "statusIcons": {
          type: Object,
          "default": function _default() {
            return {
              collapse: "zmdi-chevron-down",
              extended: "zmdi-chevron-up"
            };
          }
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        topClass: function topClass() {
          return Ti.Css.mergeClassName(this.className);
        },
        //------------------------------------------------
        isCollapse: function isCollapse() {
          return "collapse" == this.status;
        },
        isExtended: function isExtended() {
          return "extended" == this.status;
        },
        //------------------------------------------------
        theTime: function theTime() {
          //console.log("input value:", this.value)
          return Ti.Types.toTime(this.value, this.valueUnit);
        },
        //------------------------------------------------
        theDropTime: function theDropTime() {
          return this.runtime || this.theTime;
        },
        //------------------------------------------------
        theTimeFormat: function theTimeFormat() {
          return {
            "sec": "HH:mm:ss",
            "min": "HH:mm",
            "auto": "auto"
          }[this.mode];
        },
        //------------------------------------------------
        theTimeText: function theTimeText() {
          return this.getTimeText(this.theDropTime);
        },
        //------------------------------------------------
        theStatusIcon: function theStatusIcon() {
          return this.statusIcons[this.status];
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        applyRuntime: function applyRuntime() {
          if (this.runtime) {
            var tm = this.runtime;
            this.runtime = null;
            var str = this.getTimeText(tm);
            this.$notify("change", str);
          }
        },
        //-----------------------------------------------
        doExtend: function doExtend() {
          this.status = "extended";
        },
        //-----------------------------------------------
        doCollapse: function doCollapse() {
          var _ref47 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              _ref47$escaped = _ref47.escaped,
              escaped = _ref47$escaped === void 0 ? false : _ref47$escaped;

          //console.log("time doCollapse", {escaped})
          this.status = "collapse"; // Drop runtime

          if (escaped) {
            this.runtime = null;
          } // Apply Changed for runtime
          else {
              this.applyRuntime();
            }
        },
        //------------------------------------------------
        onInputFocused: function onInputFocused() {
          this.doExtend();
        },
        //------------------------------------------------
        onChanged: function onChanged(val) {
          // Empty value as null
          if (_.isEmpty(val)) {
            this.$notify("change", null);
          } // Parsed value
          else {
              var tm = Ti.Types.toTime(val);
              var str = this.getTimeText(tm);
              this.$notify("change", str);
            }
        },
        //------------------------------------------------
        onClickStatusIcon: function onClickStatusIcon() {
          // extended -> collapse
          if (this.isExtended) {
            this.doCollapse();
          } // collapse -> extended
          else {
              this.doExtend();
            }
        },
        //------------------------------------------------
        onTimeChanged: function onTimeChanged(time) {
          this.runtime = time;
        },
        //------------------------------------------------
        getTimeText: function getTimeText(tm) {
          if (tm instanceof Ti.Types.Time) {
            return tm.toString(this.theTimeFormat);
          }
        } //------------------------------------------------

      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/input/time/ti-input-time.mjs", _M);
  })(); //============================================================
  // JOIN: ti/input/time/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/input/time/_com.json", {
    "name": "ti-input-time",
    "globally": true,
    "template": "./ti-input-time.html",
    "mixins": ["./ti-input-time.mjs"],
    "components": ["@com:ti/combo/input", "@com:ti/time"]
  }); //============================================================
  // JOIN: ti/input/timerange/ti-input-timerange.html
  //============================================================

  Ti.Preload("ti/com/ti/input/timerange/ti-input-timerange.html", "<ti-combo-box class=\"as-timerange\"\n  :class=\"topClass\"\n  :width=\"width\"\n  :drop-width=\"null\"\n  :status=\"status\"\n  @collapse=\"doCollapse\">\n  <!--\n    Box\n  -->\n  <template v-slot:box>\n    <ti-input \n      :readonly=\"!canInput\"\n      :hide-border=\"hideBorder\"\n      :placeholder=\"placeholder|i18n\"\n      :prefix-icon=\"icon\"\n      :suffix-icon=\"theStatusIcon\"\n      :value=\"theRangeText\"\n      :height=\"height\"\n      :focus=\"isExtended\"\n      @change=\"onChanged\"\n      @input:focus=\"onInputFocused\"\n      @suffix:icon=\"onClickStatusIcon\"/>\n  </template>\n  <!--\n    Drop\n  -->\n  <template v-slot:drop>\n    <ti-form\n      :data=\"theDropRange\"\n      v-bind=\"theFormConfig\"\n      @change=\"onFormChanged\"/>\n  </template>\n</ti-combo-box>"); //============================================================
  // JOIN: ti/input/timerange/ti-input-timerange.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          "runtime": null,
          "status": "collapse"
        };
      },
      ////////////////////////////////////////////////////
      props: {
        "canInput": {
          type: Boolean,
          "default": true
        },
        "value": {
          type: [String, Object, Number, Array],
          "default": null
        },
        "rangeKeys": {
          type: Array,
          "default": function _default() {
            return ["beginTime", "endTime"];
          }
        },
        // TODO only str-array supported now
        // please fix it refer by ti-input-daterange.mjs
        "valueType": {
          type: String,
          "default": "str-array",
          validator: function validator(v) {
            return /^((str|ms|sec)-(array|obj))$/.test(v);
          }
        },
        "dftValue": {
          type: Array,
          "default": function _default() {
            return ["09:00", "17:00"];
          }
        },
        "icon": {
          type: String,
          "default": "zmdi-time-interval"
        },
        "unit": {
          type: String,
          "default": "ms"
        },
        "format": {
          type: String,
          "default": "HH:mm"
        },
        "placeholder": {
          type: String,
          "default": "i18n:blank-time-range"
        },
        "hideBorder": {
          type: Boolean,
          "default": false
        },
        "width": {
          type: [Number, String],
          "default": "2rem"
        },
        "height": {
          type: [Number, String],
          "default": undefined
        },
        "statusIcons": {
          type: Object,
          "default": function _default() {
            return {
              collapse: "zmdi-chevron-down",
              extended: "zmdi-chevron-up"
            };
          }
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        topClass: function topClass() {
          return Ti.Css.mergeClassName(this.className);
        },
        //------------------------------------------------
        isCollapse: function isCollapse() {
          return "collapse" == this.status;
        },
        isExtended: function isExtended() {
          return "extended" == this.status;
        },
        //--------------------------------------
        theFormConfig: function theFormConfig() {
          var _this$rangeKeys = _slicedToArray(this.rangeKeys, 2),
              keyBegin = _this$rangeKeys[0],
              keyEnd = _this$rangeKeys[1];

          var fields = [{
            name: keyBegin,
            type: "Time",
            title: "i18n:time-begin",
            comType: "ti-input-time"
          }, {
            name: keyEnd,
            type: "Time",
            title: "i18n:time-end",
            comType: "ti-input-time"
          }];
          return {
            fields: fields,
            spacing: "tiny",
            statusIcons: null
          };
        },
        //--------------------------------------
        theRange: function theRange() {
          return this.parseTimeRange(this.value);
        },
        //--------------------------------------
        theRangeText: function theRangeText() {
          var _this92 = this;

          var _this$rangeKeys2 = _slicedToArray(this.rangeKeys, 2),
              keyBegin = _this$rangeKeys2[0],
              keyEnd = _this$rangeKeys2[1];

          var ss = [];

          _.forEach(this.theRange, function (val) {
            // Time
            if (val) {
              ss.push(val.toString(_this92.format));
            } // Zero
            else {
                ss.push(Ti.Types.formatTime(0, _this92.unit, _this92.format));
              }
          });

          return ss.join(" ~ ");
        },
        //--------------------------------------
        theRangeValue: function theRangeValue() {
          return this.formatRangeValue(this.theRange);
        },
        //------------------------------------------------
        theDropRange: function theDropRange() {
          return this.runtime || this.theRangeValue;
        },
        //------------------------------------------------
        theStatusIcon: function theStatusIcon() {
          return this.statusIcons[this.status];
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        applyRuntime: function applyRuntime() {
          if (this.runtime) {
            console.log("hah");
            var rg = this.parseTimeRange(this.runtime);
            this.runtime = null;
            var rg2 = this.formatRangeValue(rg);
            var rg3 = this.formatEmitRangeValue(rg2);
            this.$notify("change", rg3);
          }
        },
        //-----------------------------------------------
        doExtend: function doExtend() {
          this.status = "extended";
        },
        //-----------------------------------------------
        doCollapse: function doCollapse() {
          var _ref48 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              _ref48$escaped = _ref48.escaped,
              escaped = _ref48$escaped === void 0 ? false : _ref48$escaped;

          this.status = "collapse"; // Drop runtime

          if (escaped) {
            this.runtime = null;
          } // Apply Changed for runtime
          else {
              this.applyRuntime();
            }
        },
        //------------------------------------------------
        onInputFocused: function onInputFocused() {
          this.doExtend();
        },
        //------------------------------------------------
        onChanged: function onChanged(val) {
          var rg = this.parseTimeRange(val); // Empty Range

          if (_.isEmpty(rg)) {
            this.$notify("change", null);
          } // Format the Range
          else {
              var rg2 = this.formatRangeValue(rg);
              var rg3 = this.formatEmitRangeValue(rg2);
              this.$notify("change", rg3);
            }
        },
        //------------------------------------------------
        onClickStatusIcon: function onClickStatusIcon() {
          // extended -> collapse
          if (this.isExtended) {
            this.doCollapse();
          } // collapse -> extended
          else {
              this.doExtend();
            }
        },
        //------------------------------------------------
        formatEmitRangeValue: function formatEmitRangeValue(rg) {
          var _this$rangeKeys3 = _slicedToArray(this.rangeKeys, 2),
              keyBegin = _this$rangeKeys3[0],
              keyEnd = _this$rangeKeys3[1]; // Format the value to array


          if (rg && "Array" == this.valueType) {
            var re = [rg[keyBegin], rg[keyEnd]];
            return _.filter(re, function (v) {
              return v && _.isString(v);
            });
          } // Default as object


          return rg;
        },
        //------------------------------------------------
        onFormChanged: function onFormChanged(payload) {
          this.runtime = _.cloneDeep(payload);
        },
        //------------------------------------------------
        parseTimeRange: function parseTimeRange(val) {
          var _this$rangeKeys4 = _slicedToArray(this.rangeKeys, 2),
              keyBegin = _this$rangeKeys4[0],
              keyEnd = _this$rangeKeys4[1];

          val = Ti.Util.fallback(val, this.dftValue, {});
          var rg = {}; // Number 

          if (_.isNumber(val)) {
            var tm = Ti.Types.toTime(val);
            rg = _defineProperty({}, keyBegin, tm);
          } // String
          else if (_.isString(val)) {
              var _rg2;

              var str = _.trim(val);

              var ss = _.split(str, /[\t ,\/~-]+/);

              var tm0 = Ti.Types.toTime(ss[0]);
              var tm1 = Ti.Types.toTime(ss[1]);
              rg = (_rg2 = {}, _defineProperty(_rg2, keyBegin, tm0), _defineProperty(_rg2, keyEnd, tm1), _rg2);
            } // Array
            else if (_.isArray(val)) {
                var _rg3;

                rg = (_rg3 = {}, _defineProperty(_rg3, keyBegin, Ti.Types.toTime(val[0])), _defineProperty(_rg3, keyEnd, Ti.Types.toTime(val[1])), _rg3);
              } // Plain Object
              else if (_.isPlainObject(val)) {
                  rg = _.pick(val, this.rangeKeys);
                } // Then make sure the range beignTime is the less one


          return this.normalizeRange(rg);
        },
        //------------------------------------------------
        // Then make sure the range beignTime is the less one
        normalizeRange: function normalizeRange(rg) {
          var _this$rangeKeys5 = _slicedToArray(this.rangeKeys, 2),
              keyBegin = _this$rangeKeys5[0],
              keyEnd = _this$rangeKeys5[1];

          if (rg && (rg[keyBegin] || rg[keyEnd])) {
            if (!rg[keyBegin]) {
              var tBegin = Ti.Types.toTime(0);
              rg[keyBegin] = tBegin.toString();
            }

            if (!rg[keyEnd]) {
              var tEnd = Ti.Types.toTime(86400000 - 1);
              rg[keyEnd] = tEnd.toString();
            }

            var tmBegin = Ti.Types.toTime(rg[keyBegin]);
            var tmEnd = Ti.Types.toTime(rg[keyEnd]);

            if (tmBegin.valueInMilliseconds > tmEnd.valueInMilliseconds) {
              var tm = rg[keyBegin];
              rg[keyBegin] = tmEnd;
              rg[keyEnd] = tmBegin;
            }
          }

          return rg;
        },
        //------------------------------------------------
        formatRangeValue: function formatRangeValue(range) {
          var rg = _.assign({}, range);

          _.forEach(rg, function (val, key) {
            // Time
            if (val) {
              rg[key] = val.toString();
            } // Zero
            else {
                rg[key] = Ti.Types.formatTime(0);
              }
          });

          return rg;
        } //------------------------------------------------

      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/input/timerange/ti-input-timerange.mjs", _M);
  })(); //============================================================
  // JOIN: ti/input/timerange/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/input/timerange/_com.json", {
    "name": "ti-input-timerange",
    "globally": true,
    "template": "./ti-input-timerange.html",
    "mixins": ["./ti-input-timerange.mjs"],
    "components": ["@com:ti/combo/input"]
  }); //============================================================
  // JOIN: ti/input/_com.json
  //============================================================

  Ti.Preload("ti/com/ti/input/_com.json", {
    "name": "ti-input",
    "globally": true,
    "template": "./ti-input.html",
    "props": "./ti-input-props.mjs",
    "mixins": ["./ti-input.mjs"],
    "components": []
  }); //============================================================
  // JOIN: ti/label/ti-label-props.mjs
  //============================================================

  (function () {
    var _M = {
      //-----------------------------------
      // Data
      //-----------------------------------
      "value": null,
      "dict": {
        type: [String, Ti.Dict],
        "default": undefined
      },
      "trimed": {
        type: Boolean,
        "default": true
      },
      "format": undefined,
      //-----------------------------------
      // Behavior
      //-----------------------------------
      "href": {
        type: String,
        "default": undefined
      },
      "newTab": {
        type: Boolean,
        "default": false
      },
      "editable": {
        type: Boolean,
        "default": false
      },
      "hover": {
        type: [Array, String],
        "default": function _default() {
          return ["suffixIcon"];
        }
      },
      //-----------------------------------
      // Aspect
      //-----------------------------------
      "placeholder": {
        type: String,
        "default": "i18n:nil"
      },
      "autoI18n": {
        type: Boolean,
        "default": true
      },
      "prefixIcon": {
        type: String,
        "default": undefined
      },
      "prefixText": {
        type: String,
        "default": undefined
      },
      "suffixText": {
        type: String,
        "default": undefined
      },
      "suffixIcon": {
        type: String,
        "default": undefined
      },
      //-----------------------------------
      // Measure
      //-----------------------------------
      "width": {
        type: [Number, String],
        "default": undefined
      },
      "height": {
        type: [Number, String],
        "default": undefined
      },
      "valueMaxWidth": {
        type: [Number, String],
        "default": undefined
      }
    };
    Ti.Preload("ti/com/ti/label/ti-label-props.mjs", _M);
  })(); //============================================================
  // JOIN: ti/label/ti-label.html
  //============================================================


  Ti.Preload("ti/com/ti/label/ti-label.html", "<div class=\"ti-label\"\n  :class=\"TopClass\"\n  :style=\"TopStyle\"\n  @dblclick.left=\"OnDblClick\"\n  :title=\"myDisplayText\">\n  <!--prefix:icon-->\n  <div v-if=\"ThePrefixIcon\"\n    class=\"as-icon at-prefix\"\n    :class=\"getHoverClass('prefixIcon')\"\n    @click.left=\"OnClickPrefixIcon\">\n    <ti-icon :value=\"ThePrefixIcon\"/>\n  </div>\n  <!--prefix:text-->\n  <div v-if=\"prefixText\" \n    class=\"as-text at-prefix\"\n    :class=\"getHoverClass('prefixText')\"\n    @click.left=\"OnClickPrefixText\">\n    <span>{{prefixText|i18n}}</span>\n  </div>\n  <!--Text-->\n  <div class=\"as-value\"\n    :style=\"ValueStyle\"\n    @click.left=\"OnClickValue\">\n    <!--Link-->\n    <a v-if=\"href || valueClickable\"\n        :href=\"href\"\n        :taget=\"newTab ? '_blank' : undefined\"\n        @click.left.prevent>{{myDisplayText}}</a>\n    <!--Normal Text-->\n    <span v-else>{{myDisplayText}}</span>\n  </div>\n  <!--suffix:text-->\n  <div v-if=\"suffixText\"\n    class=\"as-text at-suffix\"\n    :class=\"getHoverClass('suffixText')\"\n    @click.left=\"OnClickSuffixIcon\">\n    <span>{{suffixText|i18n}}</span>\n  </div>\n  <!--suffix:icon-->\n  <div v-if=\"suffixIcon\"\n    class=\"as-icon at-suffix\"\n    :class=\"getHoverClass('suffixIcon')\"\n    @click.left=\"OnClickSuffixIcon\">\n    <ti-icon :value=\"suffixIcon\"/>\n  </div>\n</div>"); //============================================================
  // JOIN: ti/label/ti-label.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////
      data: function data() {
        return {
          myDisplayIcon: undefined,
          myDisplayText: undefined,
          myDictValKey: undefined
        };
      },
      //////////////////////////////////////////
      props: {
        "autoLoadDictIcon": {
          type: Boolean,
          "default": true
        },
        "valueClickable": {
          type: Boolean,
          "default": false
        },
        "fullField": {
          type: Boolean,
          "default": true
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass({
            "is-blank": !_.isNumber(this.TheValue) && _.isEmpty(this.TheValue),
            "is-nowrap": this.valueMaxWidth > 0,
            "full-field": this.fullField
          });
        },
        //--------------------------------------
        TopStyle: function TopStyle() {
          return Ti.Css.toStyle({
            width: this.width,
            height: this.height
          });
        },
        //--------------------------------------
        ValueStyle: function ValueStyle() {
          return Ti.Css.toStyle({
            maxWidth: this.valueMaxWidth
          });
        },
        //--------------------------------------
        ThePrefixIcon: function ThePrefixIcon() {
          if (null === this.prefixIcon) return null;
          return this.myDisplayIcon || this.prefixIcon;
        },
        //------------------------------------------------
        TheHover: function TheHover() {
          var map = {};

          var hos = _.concat(this.hover);

          var _iterator36 = _createForOfIteratorHelper(hos),
              _step36;

          try {
            for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {
              var ho = _step36.value;

              if (ho) {
                map[ho] = true;
              }
            }
          } catch (err) {
            _iterator36.e(err);
          } finally {
            _iterator36.f();
          }

          return map;
        },
        //--------------------------------------
        TheValue: function TheValue() {
          var str = this.value; // Auto trim

          if (this.trim && _.isString(str)) {
            return _.trim(str);
          } // Return it directly


          return str;
        },
        //--------------------------------------
        Dict: function Dict() {
          if (this.dict) {
            // Already Dict
            if (this.dict instanceof Ti.Dict) {
              this.myDictValKey = ".text";
              return this.dict;
            } // Get back


            var _Ti$DictFactory$expla2 = Ti.DictFactory.explainDictName(this.dict),
                name = _Ti$DictFactory$expla2.name,
                vKey = _Ti$DictFactory$expla2.vKey;

            this.myDictValKey = vKey || ".text";
            return Ti.DictFactory.CheckDict(name);
          }
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //------------------------------------------------
        isCanHover: function isCanHover(hoverName) {
          return this.TheHover[hoverName] ? true : false;
        },
        //------------------------------------------------
        getHoverClass: function getHoverClass(hoverName) {
          var canHover = this.isCanHover(hoverName);
          return {
            "can-hover": canHover,
            "for-look": !canHover,
            "is-prefix-icon-hover": "prefixIcon" == hoverName
          };
        },
        //--------------------------------------
        OnDblClick: function OnDblClick() {
          var _this93 = this;

          if (this.editable) {
            Ti.Be.EditIt(this.$el, {
              text: this.TheValue,
              ok: function ok(newVal) {
                _this93.$notify("change", newVal);
              }
            });
          }
        },
        //------------------------------------------------
        OnClickPrefixIcon: function OnClickPrefixIcon() {
          this.$notify("prefix:icon");
        },
        //------------------------------------------------
        OnClickPrefixText: function OnClickPrefixText() {
          this.$notify("prefix:text");
        },
        //------------------------------------------------
        OnClickValue: function OnClickValue() {
          if (this.valueClickable) {
            this.$notify("click:value");
          }
        },
        //------------------------------------------------
        OnClickSuffixIcon: function OnClickSuffixIcon() {
          this.$notify("suffix:icon");
        },
        //------------------------------------------------
        OnClickSuffixText: function OnClickSuffixText() {
          this.$notify("suffix:text");
        },
        //--------------------------------------
        evalDisplay: function evalDisplay(val) {
          var _this94 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee44() {
            var it;
            return regeneratorRuntime.wrap(function _callee44$(_context44) {
              while (1) {
                switch (_context44.prev = _context44.next) {
                  case 0:
                    if (!_this94.Dict) {
                      _context44.next = 5;
                      break;
                    }

                    _context44.next = 3;
                    return _this94.Dict.getItem(val);

                  case 3:
                    it = _context44.sent;

                    if (it) {
                      if (_this94.autoLoadDictIcon) {
                        _this94.myDisplayIcon = _this94.Dict.getIcon(it);
                      }

                      val = _this94.Dict.getBy(_this94.myDictValKey, it, val);
                    } else {
                      _this94.myDisplayIcon = null;
                    }

                  case 5:
                    if (!_.isNumber(val)) {
                      _context44.next = 9;
                      break;
                    }

                    if (!_this94.format) {
                      _context44.next = 8;
                      break;
                    }

                    return _context44.abrupt("return", Ti.Types.toStr(val, _this94.format));

                  case 8:
                    return _context44.abrupt("return", val);

                  case 9:
                    if (!(_.isArray(val) || _.isPlainObject(val))) {
                      _context44.next = 11;
                      break;
                    }

                    return _context44.abrupt("return", JSON.stringify(val, null, '  '));

                  case 11:
                    if (!Ti.Util.isNil(val)) {
                      _context44.next = 13;
                      break;
                    }

                    return _context44.abrupt("return", Ti.I18n.text(_this94.placeholder));

                  case 13:
                    if (!_.isDate(val)) {
                      _context44.next = 15;
                      break;
                    }

                    return _context44.abrupt("return", Ti.Types.toStr(val, _this94.format));

                  case 15:
                    // Auto format
                    if (_this94.format) {
                      val = Ti.Types.toStr(val, _this94.format);
                    } // Return & auto-i18n


                    return _context44.abrupt("return", _this94.autoI18n ? Ti.I18n.text(val) : val);

                  case 17:
                  case "end":
                    return _context44.stop();
                }
              }
            }, _callee44);
          }))();
        },
        //--------------------------------------
        reloadMyDisplay: function reloadMyDisplay() {
          var _this95 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee45() {
            return regeneratorRuntime.wrap(function _callee45$(_context45) {
              while (1) {
                switch (_context45.prev = _context45.next) {
                  case 0:
                    _this95.myDisplayIcon = null;
                    _context45.next = 3;
                    return _this95.evalDisplay(_this95.TheValue);

                  case 3:
                    _this95.myDisplayText = _context45.sent;

                  case 4:
                  case "end":
                    return _context45.stop();
                }
              }
            }, _callee45);
          }))();
        } //--------------------------------------

      },
      //////////////////////////////////////////
      watch: {
        "value": {
          handler: "reloadMyDisplay",
          immediate: true
        }
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/label/ti-label.mjs", _M);
  })(); //============================================================
  // JOIN: ti/label/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/label/_com.json", {
    "name": "ti-label",
    "globally": true,
    "template": "./ti-label.html",
    "props": "./ti-label-props.mjs",
    "mixins": ["./ti-label.mjs"]
  }); //============================================================
  // JOIN: ti/label/_hmaker.json
  //============================================================

  Ti.Preload("ti/com/ti/label/_hmaker.json", {
    "icon": "im-tag",
    "title": "i18n:com-label",
    "scenes": ["desktop", "tablet", "phone"],
    "editComType": "ti-form",
    "editComConf": {
      "mode": "tab",
      "data": "=comConf",
      "fields": [{
        "title": "i18n:hmk-aspect",
        "fields": [{
          "title": "i18n:hmk-placeholder",
          "name": "placeholder",
          "comType": "ti-input"
        }, {
          "title": "i18n:hmk-autoI18n",
          "name": "autoI18n",
          "type": "Boolean",
          "defaultAs": true,
          "comType": "ti-toggle"
        }, {
          "title": "i18n:hmk-prefixIcon",
          "name": "prefixIcon",
          "comType": "ti-input-icon"
        }, {
          "title": "i18n:hmk-prefixText",
          "name": "prefixText",
          "comType": "ti-input"
        }, {
          "title": "i18n:hmk-suffixIcon",
          "name": "suffixIcon",
          "comType": "ti-input-icon"
        }, {
          "title": "i18n:hmk-suffixText",
          "name": "suffixText",
          "comType": "ti-input"
        }]
      }, {
        "title": "i18n:hmk-behavior",
        "fields": [{
          "title": "i18n:hmk-href",
          "name": "href",
          "comType": "ti-input"
        }, {
          "title": "i18n:hmk-newTab",
          "name": "newTab",
          "type": "Boolean",
          "hidden": {
            "href": "NoEmpty"
          },
          "comType": "ti-toggle"
        }, {
          "title": "i18n:hmk-breakLine",
          "name": "breakLine",
          "type": "Boolean",
          "defaultAs": true,
          "comType": "ti-toggle"
        }, {
          "title": "i18n:hmk-editable",
          "name": "editable",
          "type": "Boolean",
          "comType": "ti-toggle"
        }]
      }, {
        "title": "i18n:hmk-data",
        "fields": [{
          "title": "i18n:hmk-value",
          "name": "value",
          "comType": "ti-input"
        }, {
          "title": "i18n:hmk-dict",
          "name": "dict",
          "comType": "ti-input"
        }, {
          "title": "i18n:hmk-trimed",
          "name": "trimed",
          "type": "Boolean",
          "comType": "ti-toggle"
        }, {
          "title": "i18n:hmk-format",
          "name": "format",
          "comType": "ti-input",
          "comConf": {
            "autoJsValue": true
          }
        }]
      }, {
        "title": "i18n:hmk-measure",
        "fields": [{
          "title": "i18n:hmk-width",
          "name": "width",
          "comType": "ti-input"
        }, {
          "title": "i18n:hmk-height",
          "name": "height",
          "comType": "ti-input"
        }, {
          "title": "i18n:hmk-valueMaxWidth",
          "name": "valueMaxWidth",
          "comType": "ti-input"
        }]
      }]
    }
  }); //============================================================
  // JOIN: ti/lbs/map/baidu/ti-lbs-map-baidu.html
  //============================================================

  Ti.Preload("ti/com/ti/lbs/map/baidu/ti-lbs-map-baidu.html", "<div class=\"ti-lbs-map by-baidu ti-fill-parent\">\n  <div ref=\"arena\" class=\"map-arena ti-fill-parent\"></div>\n</div>"); //============================================================
  // JOIN: ti/lbs/map/baidu/ti-lbs-map-baidu.mjs
  //============================================================

  (function () {
    //
    // The coordinate base on BD09
    //
    var _M = {
      /////////////////////////////////////////
      inheritAttrs: false,
      /////////////////////////////////////////
      data: function data() {
        return {
          valueMarker: null
        };
      },
      /////////////////////////////////////////
      props: {
        // @see http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference_3_0.html#a5b0
        // ROADMAP    : BMAP_NORMAL_MAP
        // SATELLITE  : BMAP_SATELLITE_MAP
        // HYBRID     : BMAP_HYBRID_MAP
        "mapType": {
          type: String,
          "default": "ROADMAP"
        },
        // Map center : {"lat":39.9042, "lng":116.4074}
        // If null, it will auto sync with the value
        "center": {
          type: Object,
          // default : ()=>({
          //   {"lat":39.9042, "lng":116.4074}
          // })
          "default": null
        },
        "zoom": {
          type: Number,
          "default": 8
        },
        // A LatLng Point in map, which react the changing
        "value": {
          type: Object,
          "default": null
        },
        "valueOptions": {
          type: Object,
          "default": function _default() {
            return {
              icon: null,
              title: "UserMarker",
              // DOWN|BOUNCE|DROP|UP
              animation: "DOWN"
            };
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //-------------------------------------
        mapCenterLatLng: function mapCenterLatLng() {
          if (!_.isEmpty(this.center)) {
            return this.genLatLng(this.center);
          }

          if (!_.isEmpty(this.value)) {
            return this.genLatLng(this.value);
          } // Default center to beijing


          return this.genLatLng({
            lat: 39.9042,
            lng: 116.4074
          });
        },
        //-------------------------------------
        mapTypeId: function mapTypeId() {
          return {
            "ROADMAP": BMAP_NORMAL_MAP,
            "SATELLITE": BMAP_SATELLITE_MAP,
            "HYBRID": BMAP_HYBRID_MAP
          }[this.mapType] || BMAP_NORMAL_MAP;
        } //-------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //-------------------------------------
        genLatLng: function genLatLng() {
          var _ref49 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              lat = _ref49.lat,
              lng = _ref49.lng;

          return new BMap.Point(lng, lat);
        },
        //-------------------------------------
        drawValue: function drawValue() {
          var $map = this.__map;
          var opt = this.valueOptions; // Guard the value

          if (!this.value) return;
          var point = this.genLatLng(this.value);
          var marker = new BMap.Marker(point);
          $map.addOverlay(marker);
          this.valueMarker = marker;
        } //-------------------------------------

      },
      //////////////////////////////////////////
      watch: {
        "value": function value() {
          this.drawValue();
        }
      },
      //////////////////////////////////////////
      mounted: function () {
        var _mounted3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee46() {
          var $map;
          return regeneratorRuntime.wrap(function _callee46$(_context46) {
            while (1) {
              switch (_context46.prev = _context46.next) {
                case 0:
                  // Init Map
                  $map = new BMap.Map(this.$refs.arena, {
                    mapType: this.mapTypeId
                  });
                  $map.centerAndZoom(this.mapCenterLatLng, this.zoom);
                  $map.addControl(new BMap.MapTypeControl({
                    mapTypes: [BMAP_NORMAL_MAP, BMAP_SATELLITE_MAP, BMAP_HYBRID_MAP]
                  }));
                  $map.enableScrollWheelZoom(true); // Store

                  this.__map = $map; // Draw Value

                  this.drawValue();

                case 6:
                case "end":
                  return _context46.stop();
              }
            }
          }, _callee46, this);
        }));

        function mounted() {
          return _mounted3.apply(this, arguments);
        }

        return mounted;
      }() //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/lbs/map/baidu/ti-lbs-map-baidu.mjs", _M);
  })(); //============================================================
  // JOIN: ti/lbs/map/baidu/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/lbs/map/baidu/_com.json", {
    "name": "ti-lbs-map-baidu",
    "globally": true,
    "template": "./ti-lbs-map-baidu.html",
    "mixins": ["./ti-lbs-map-baidu.mjs"],
    "components": []
  }); //============================================================
  // JOIN: ti/lbs/map/google/ti-lbs-map-google.html
  //============================================================

  Ti.Preload("ti/com/ti/lbs/map/google/ti-lbs-map-google.html", "<div class=\"ti-lbs-map by-google ti-fill-parent\">\n  <div ref=\"arena\" class=\"map-arena ti-fill-parent\"></div>\n  <!--div style=\"background:#FF0;position: absolute; bottom:0;right:0;\"\n    @click=\"redrawLayers()\">Redraw</div-->\n</div>"); //============================================================
  // JOIN: ti/lbs/map/google/ti-lbs-map-google.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      data: function data() {
        return {
          // + Move cooling
          myLastMove: undefined,
          // => Input cooling
          mySyncTime: undefined,
          myUpTime: undefined,
          myCenterMarker: undefined,

          /*
          {
            [layerName] : Polyline,
            [layerName] : [Marker...]
          }
          */
          myLayers: {},
          myGrid: {
            x: [],
            y: [],
            x_step: undefined,
            y_step: undefined
          }
        };
      },
      /////////////////////////////////////////
      props: {
        // @see https://developers.google.com/maps/documentation/javascript/maptypes?hl=zh_CN
        // ROADMAP | SATELLITE | HYBRID | TERRAIN
        "mapType": {
          type: String,
          "default": "ROADMAP"
        },
        // Map center : {"lat":39.9042, "lng":116.4074}
        // If null, it will auto sync with the value
        // If Array, mean bounds
        // [sw, ne]
        //  sw: LatLng, ne: LatLng
        "center": {
          type: [Object, Array],
          "default": undefined
        },
        "zoom": {
          type: Number,
          "default": undefined
        },
        "bounds": {
          type: Array,
          "default": undefined
        },

        /*
        [{
          name:"xxx",
          type:"point|path|area"
          items: [{lat,lng,title,icon}]
        }]
        */
        "layers": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "pinCenter": {
          type: Boolean,
          "default": false
        },
        "cooling": {
          type: Number,
          "default": 1000
        },
        "maxZoom": {
          type: Number,
          "default": 22
        },
        "minZoom": {
          type: Number,
          "default": 1
        },
        "boundPadding": {
          type: [Object, Number],
          "default": 10
        },
        "stroke": {
          type: Object,
          "default": function _default() {
            return {
              color: "#08F",
              opacity: 0.8,
              weight: 8
            };
          }
        },
        // Refer by goole map api: gestureHandling
        // https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions
        "gestureHandling": {
          type: String,
          "default": "auto",
          validator: function validator(v) {
            return /^(cooperative|greedy|none|auto)$/.test(v);
          }
        },

        /*
        {
          x: 10, y: 10, label: "=n", src: "/img/abc.png"
        }
        */
        "clustering": {
          type: Object,
          "default": undefined
        }
      },
      //////////////////////////////////////////
      computed: {
        //-------------------------------------
        MapTypeId: function MapTypeId() {
          return this.getMapTypeId(this.mapType);
        },
        //-------------------------------------
        MapCenter: function MapCenter() {
          // Bound
          if (_.isArray(this.center)) {
            var _this$center = _slicedToArray(this.center, 2),
                sw = _this$center[0],
                ne = _this$center[1];

            return {
              lat: (sw.lat - ne.lat) / 2 + ne.lat,
              lng: (sw.lng - ne.lng) / 2 + ne.lng
            };
          } // Point


          return this.center;
        } //-------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //-------------------------------------
        isCoolDown: function isCoolDown() {
          if (!this.myUpTime) {
            return true;
          }

          var du = Date.now() - this.myUpTime;
          return du > this.cooling;
        },
        //-------------------------------------
        isInSync: function isInSync() {
          if (!this.mySyncTime) {
            return false;
          }

          var du = Date.now() - this.mySyncTime;
          return du < this.cooling;
        },
        //-------------------------------------
        getMapTypeId: function getMapTypeId() {
          var mapType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "ROADMAP";
          return google.maps.MapTypeId[mapType] || google.maps.MapTypeId.ROADMAP;
        },
        //-------------------------------------
        draw_center_marker: function draw_center_marker(lalCenter) {
          if (!lalCenter) lalCenter = this.$map.getCenter(); // Update

          if (this.myCenterMarker) {
            this.myCenterMarker.setPosition(lalCenter);
          } // Drop one
          else {
              this.myCenterMarker = new google.maps.Marker({
                position: lalCenter,
                map: this.$map
              });
            }

          return lalCenter;
        },
        //-------------------------------------
        draw_as_point: function draw_as_point() {
          var _this96 = this;

          var _ref50 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              name = _ref50.name,
              _ref50$items = _ref50.items,
              items = _ref50$items === void 0 ? [] : _ref50$items,
              iconSize = _ref50.iconSize,
              iconSizeHoverScale = _ref50.iconSizeHoverScale,
              clickable = _ref50.clickable;

          //..................................
          if (!name) {
            throw "draw_as_point without layer name!";
          } //console.log("draw_as_point", name)
          //..................................


          var doClustering = !_.isUndefined(this.myGrid.x_step) && !_.isUndefined(this.myGrid.y_step); //..................................
          // Get map bound for clustering

          var bound = this.$map.getBounds();
          if (!bound) return;
          bound = bound.toJSON(); //..................................
          // Prepare the layer marker list

          var markerList = [];
          var matrix = []; // matrix for clustering
          //..................................
          // Define the marker drawing function

          var draw_marker = function draw_marker(it) {
            var icon, size, size2;
            var label = it.label;

            if (_.isString(label)) {
              label = {
                color: "#FFF",
                text: label
              };
            } // Item icon


            if (it.src) {
              size = iconSize || {
                width: 100,
                height: 100
              };
              icon = {
                url: it.src,
                scaledSize: size
              };

              if (iconSizeHoverScale) {
                size2 = {
                  width: size.width * iconSizeHoverScale,
                  height: size.height * iconSizeHoverScale
                };
              }
            } // Create marker


            var marker = new google.maps.Marker({
              position: it,
              title: it.title,
              label: label,
              icon: icon,
              //label: `x:${box.x}: y:${box.y}`,
              clickable: clickable
            });
            markerList.push(marker); // Event

            if (clickable) {
              marker.addListener("click", function () {
                _this96.$notify("point:click", it);
              }); // Hover to change the size

              if (size2) {
                marker.addListener("mouseover", function () {
                  //marker.setAnimation(google.maps.Animation.BOUNCE)
                  marker.setIcon({
                    url: it.src,
                    scaledSize: size2
                  });
                });
                marker.addListener("mouseout", function () {
                  //marker.setAnimation(null)
                  marker.setIcon({
                    url: it.src,
                    scaledSize: size
                  });
                });
              }
            }
          }; //..................................
          // Define the multi-marker drawing function


          var draw_multi_markers = function draw_multi_markers(its) {
            var icon, icon2, size, size2, label;
            var ctx = {
              n: its.length,
              title0: its[0].title,
              title1: its[1].title
            }; // title

            var title = Ti.Util.explainObj(ctx, _this96.clustering.title || "->${n} places"); // label

            if (_this96.clustering.label) {
              label = Ti.Util.explainObj(ctx, _this96.clustering.label);
            } // Icon


            if (_this96.clustering.src) {
              size = iconSize || {
                width: 100,
                height: 100
              };
              icon = {
                url: _this96.clustering.src,
                scaledSize: size
              };

              if (iconSizeHoverScale) {
                size2 = {
                  width: size.width * iconSizeHoverScale,
                  height: size.height * iconSizeHoverScale
                };
                icon2 = {
                  url: _this96.clustering.src,
                  scaledSize: size2
                };
              }
            } // Get center


            var lalList = [];

            _.forEach(its, function (_ref51) {
              var it = _ref51.it;
              return lalList.push(it);
            });

            var lalCenter = Ti.GPS.getCenter(lalList); // Create marker

            var marker = new google.maps.Marker({
              position: lalCenter,
              title: title,
              label: label,
              icon: icon,
              //label: `x:${box.x}: y:${box.y}`,
              clickable: true
            }); // Click to zoom

            marker.addListener("click", function () {
              _this96.$map.panTo(lalCenter);

              _this96.$map.setZoom(_this96.$map.getZoom() + 1);
            }); // Hover to change the size

            if (icon2) {
              marker.addListener("mouseover", function () {
                //marker.setAnimation(google.maps.Animation.BOUNCE)
                marker.setIcon(icon2);
              });
              marker.addListener("mouseout", function () {
                //marker.setAnimation(null)
                marker.setIcon(icon);
              });
            } // Add to markers


            markerList.push(marker);
          }; //..................................
          // Define the items drawing function


          var draw_item = function draw_item(it) {
            // Clustering items
            if (_.isArray(it)) {
              // Multi-marker
              if (it.length > 1) {
                draw_multi_markers(it);
              } // Single marker
              else if (it.length > 0) {
                  draw_marker(it[0].it);
                }
            } // Single item
            else {
                draw_marker(it);
              }
          }; //..................................


          if (doClustering) {
            var _iterator37 = _createForOfIteratorHelper(items),
                _step37;

            try {
              for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {
                var it = _step37.value;
                if (!it || !_.isNumber(it.lat) || !_.isNumber(it.lng)) continue; // Count box base clustering

                var box = {}; //console.log("haha", it.title)

                box.x = Math.round(Ti.GPS.getLngToWest(it.lng, bound.west) / this.myGrid.x_step);
                box.y = Math.round(Ti.GPS.getLatToSouth(it.lat, bound.south) / this.myGrid.y_step);
                var rows = matrix[box.y];

                if (!_.isArray(rows)) {
                  rows = [];
                  matrix[box.y] = rows;
                }

                var cell = rows[box.x];

                if (!_.isArray(cell)) {
                  cell = [];
                  rows[box.x] = cell;
                }

                cell.push(_objectSpread({}, box, {
                  title: it.title,
                  it: it
                }));
              }
            } catch (err) {
              _iterator37.e(err);
            } finally {
              _iterator37.f();
            }

            console.log(this.__dump_matrix(matrix));
            var cluList = this.clusteringMatrix(matrix);
            console.log(cluList);

            _.forEach(cluList, draw_item);
          } // Add marker to map
          else {
              _.forEach(items, draw_marker);
            } //..................................
          // Add to global layer list for clean later


          this.myLayers[name] = markerList; //..................................
          // Append to map

          _.forEach(markerList, function (marker) {
            return marker.setMap(_this96.$map);
          });
        },
        //-------------------------------------
        clusteringMatrix: function clusteringMatrix(matrix) {
          var list = [];

          for (var y = 0; y < matrix.length; y++) {
            var rows = matrix[y];

            if (rows) {
              for (var x = 0; x < rows.length; x++) {
                var cell = rows[x]; // find my adjacent cell

                if (cell && cell.length > 0) {
                  // Right
                  var next = rows[x + 1];

                  if (next && next.length > 0) {
                    rows[x + 1] = undefined;
                    cell.push.apply(cell, _toConsumableArray(next));
                  } // Down


                  var adjRow = matrix[y + 1];

                  if (adjRow && adjRow.length > 0) {
                    // Down
                    next = adjRow[x];

                    if (next && next.length > 0) {
                      adjRow[x] = undefined;
                      cell.push.apply(cell, _toConsumableArray(next));
                    } // Down right


                    next = adjRow[x + 1];

                    if (next && next.length > 0) {
                      adjRow[x + 1] = undefined;
                      cell.push.apply(cell, _toConsumableArray(next));
                    }
                  } // Join to list


                  list.push(cell);
                }
              }
            }
          } // Done


          return list;
        },
        //-------------------------------------
        __dump_matrix: function __dump_matrix(matrix) {
          var sb = "";

          for (var y = 0; y < matrix.length; y++) {
            var rows = matrix[y];
            sb += "".concat(y, ": ");

            if (rows) {
              for (var x = 0; x < rows.length; x++) {
                var cell = rows[x];
                sb += "[".concat(cell ? cell.length : 0, "]");
              }
            }

            sb += "\n";
          } //console.log(sb)

        },
        //-------------------------------------
        tidyGridAxisLine: function tidyGridAxisLine(list, n) {
          if (list.length > n) {
            var more = list.slice(n);

            var _iterator38 = _createForOfIteratorHelper(more),
                _step38;

            try {
              for (_iterator38.s(); !(_step38 = _iterator38.n()).done;) {
                var pol = _step38.value;
                pol.setMap(null);
              }
            } catch (err) {
              _iterator38.e(err);
            } finally {
              _iterator38.f();
            }

            return list.slice(0, n);
          }

          for (var i = list.length; i < n; i++) {
            list.push(new google.maps.Polyline({
              map: this.$map,
              geodesic: false,
              strokeColor: "#FF0000",
              strokeOpacity: 1.0,
              strokeWeight: 1
            }));
          }

          return list;
        },
        //-------------------------------------
        eval_grid: function eval_grid() {
          var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
          var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
          var bound = this.$map.getBounds();
          if (!bound) return;
          bound = bound.toJSON();
          var ew = bound.east - bound.west;
          var ns = bound.north - bound.south;

          if (ew < 0) {
            ew += 360;
          }

          var lngStep = ew / x;
          var latStep = ns / y; //console.log({ew, ns, ew_u: lngStep, ns_u: latStep})
          // Build enouth grid

          var xN = x - 1;
          var yN = y - 1;
          this.myGrid.x = this.tidyGridAxisLine(this.myGrid.x, xN);
          this.myGrid.y = this.tidyGridAxisLine(this.myGrid.y, yN);
          this.myGrid.x_step = lngStep;
          this.myGrid.y_step = latStep; // // Draw line : X

          if (this.showGrid) {
            for (var i = 1; i < x; i++) {
              var off = lngStep * i;
              var lng = Ti.GPS.normlizedLng(bound.west + off); //console.log(i, {off, lng})

              var path = [{
                lat: bound.north,
                lng: lng
              }, {
                lat: bound.south,
                lng: lng
              }];
              this.myGrid.x[i - 1].setPath(path);
            } // Draw line : Y


            for (var _i4 = 1; _i4 < y; _i4++) {
              var _off = latStep * _i4;

              var lat = Ti.GPS.normlizedLat(bound.south + _off); //console.log(i, {off, lat})

              var _path = [{
                lat: lat,
                lng: bound.west
              }, {
                lat: lat,
                lng: bound.east
              }];

              this.myGrid.y[_i4 - 1].setPath(_path);
            }
          }
        },
        //-------------------------------------
        draw_as_path: function draw_as_path() {
          var _ref52 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              name = _ref52.name,
              _ref52$items = _ref52.items,
              items = _ref52$items === void 0 ? [] : _ref52$items,
              iconSize = _ref52.iconSize,
              clickable = _ref52.clickable;

          if (!name) {
            throw "draw_as_path without layer name!";
          } // Draw points


          this.draw_as_point({
            name: name,
            items: items,
            iconSize: iconSize,
            clickable: clickable
          }); // Draw Path

          if (_.isArray(items) && items.length > 1) {
            var it = _.first(items);

            if (it && _.isNumber(it.lat) && _.isNumber(it.lng)) {
              this.myLayers["".concat(name, "-path")] = new google.maps.Polyline({
                map: this.$map,
                path: items,
                strokeColor: this.stroke.color,
                strokeOpacity: this.stroke.opacity,
                strokeWeight: this.stroke.weight
              });
            }
          }
        },
        //-------------------------------------
        drawLayers: function drawLayers() {
          // console.log("drawLayers")
          if (this.clustering) {
            var _this$clustering = this.clustering,
                x = _this$clustering.x,
                y = _this$clustering.y;
            this.eval_grid(x, y);
          } //...................................
          // Pin Center


          if (this.pinCenter) {
            this.draw_center_marker();
          } //...................................
          // Guard


          if (_.isEmpty(this.layers)) {
            return;
          } //...................................
          // Loop layer


          var i = 0;

          var _iterator39 = _createForOfIteratorHelper(this.layers),
              _step39;

          try {
            for (_iterator39.s(); !(_step39 = _iterator39.n()).done;) {
              var lay = _step39.value;
              //console.log(lay)
              i++;
              if (!lay.name) lay.name = "Layer-".concat(i);
              this["draw_as_".concat(lay.type)](lay);
            } //...................................

          } catch (err) {
            _iterator39.e(err);
          } finally {
            _iterator39.f();
          }
        },
        //-------------------------------------
        clearLayer: function clearLayer(lay) {
          // Guard
          if (!lay) {
            return;
          } // Only one map items


          if (_.isFunction(lay.setMap)) {
            lay.setMap(null);
          } // A group of map items
          else {
              _.forEach(lay, function (li) {
                li.setMap(null);
              });
            }
        },
        //-------------------------------------
        cleanLayers: function cleanLayers(name) {
          var _this97 = this;

          //console.log("cleanLayers")
          // Clean center
          if (this.myCenterMarker) {
            this.myCenterMarker.setMap(null);
            this.myCenterMarker = undefined;
          } // Clean layers


          if (name) {
            var lay = this.myLayers[name];
            this.clearLayer(lay);
            this.myLayers[name] = undefined;
          } // Clean all
          else {
              _.forEach(this.myLayers, function (lay) {
                _this97.clearLayer(lay);
              }); // Reset


              this.myLayers = {};
            }
        },
        //-------------------------------------
        redrawLayers: function redrawLayers() {
          this.cleanLayers();
          this.drawLayers();
        },
        //-------------------------------------
        redrawWhenMoveCoolDown: function redrawWhenMoveCoolDown() {
          var _this98 = this;

          var du = Date.now() - this.myLastMove;
          if (isNaN(du)) return;

          if (du > 500) {
            this.redrawLayers();
            this.myLastMove = undefined;
            return;
          }

          _.delay(function () {
            _this98.redrawWhenMoveCoolDown();
          }, du);
        } //-------------------------------------

      },
      //////////////////////////////////////////
      watch: {
        "mapType": function mapType(newVal) {
          var mapType = this.getMapTypeId(newVal);
          this.$map.setMapTypeId(mapType);
        },
        //"value" : function(){this.drawValue()}
        "layers": function layers(newVal, oldVal) {
          if (!_.isEqual(newVal, oldVal)) {
            this.redrawLayers();
          }
        },
        "center": function center(newVal, oldVal) {
          if (this.isCoolDown() && newVal) {
            this.mySyncTime = Date.now(); // Bounds

            if (_.isArray(newVal)) {
              //console.log("google bounds changed", {newVal, oldVal})
              var sw = new google.maps.LatLng(newVal[0]);
              var ne = new google.maps.LatLng(newVal[1]);
              var bounds = new google.maps.LatLngBounds(sw, ne);
              this.$map.fitBounds(bounds, this.boundPadding);
            } // Pointer
            else if (_.isNumber(newVal.lat) && _.isNumber(newVal.lng)) {
                //console.log("google center changed", {newVal, oldVal})
                this.$map.panTo(newVal);
              }
          }
        },
        "zoom": function zoom(newVal) {
          if (this.isCoolDown() && _.isNumber(newVal) && newVal > 0) {
            this.$map.setZoom(newVal);
          }
        },
        "gestureHandling": function gestureHandling(newVal) {
          this.$map.setOptions({
            gestureHandling: newVal
          });
        }
      },
      //////////////////////////////////////////
      mounted: function () {
        var _mounted4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee47() {
          var _this99 = this;

          return regeneratorRuntime.wrap(function _callee47$(_context47) {
            while (1) {
              switch (_context47.prev = _context47.next) {
                case 0:
                  // Init Map
                  //console.log("mounted", this.zoom, this.center)
                  //......................................
                  this.$map = new google.maps.Map(this.$refs.arena, {
                    zoom: this.zoom,
                    center: this.MapCenter,
                    mapTypeId: this.MapTypeId,
                    //...................................
                    maxZoom: this.maxZoom,
                    minZoom: this.minZoom,
                    //...................................
                    fullscreenControl: false,
                    mapTypeControl: false,
                    streetViewControl: false,
                    zoomControl: false,
                    gestureHandling: this.gestureHandling,
                    //...................................
                    center_changed: function center_changed() {
                      //console.log(this.$map.getBounds().toJSON(), this.$map.getCenter().toJSON())
                      var lal = _this99.$map.getCenter();

                      if (_this99.clustering) {
                        // May need to redraw when move cool down
                        if (_.isUndefined(_this99.myLastMove)) {
                          _.delay(function () {
                            _this99.redrawWhenMoveCoolDown();
                          }, 500);
                        }
                      }

                      _this99.myLastMove = Date.now();

                      if (_this99.pinCenter) {
                        _this99.draw_center_marker(lal);
                      }

                      if (!_this99.isInSync()) {
                        _this99.myUpTime = Date.now();
                        var lan = lal.toJSON();
                        lan.lng = Ti.GPS.normlizedLng(lan.lng);

                        _this99.$emit("center:change", lan);
                      }
                    },
                    //...................................
                    zoom_changed: function zoom_changed() {
                      if (_this99.clustering) {
                        _this99.redrawLayers();
                      }

                      _this99.myUpTime = Date.now();

                      _this99.$emit("zoom:change", _this99.$map.getZoom());
                    } //...................................

                  }); //......................................
                  // Draw Value

                  _.delay(function () {
                    _this99.redrawLayers();
                  }, 1000);

                case 2:
                case "end":
                  return _context47.stop();
              }
            }
          }, _callee47, this);
        }));

        function mounted() {
          return _mounted4.apply(this, arguments);
        }

        return mounted;
      }() //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/lbs/map/google/ti-lbs-map-google.mjs", _M);
  })(); //============================================================
  // JOIN: ti/lbs/map/google/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/lbs/map/google/_com.json", {
    "name": "ti-lbs-map-google",
    "globally": true,
    "template": "./ti-lbs-map-google.html",
    "mixins": ["./ti-lbs-map-google.mjs"],
    "components": []
  }); //============================================================
  // JOIN: ti/lbs/map/tencent/ti-lbs-map-tencent.html
  //============================================================

  Ti.Preload("ti/com/ti/lbs/map/tencent/ti-lbs-map-tencent.html", "<div class=\"ti-lbs-map by-tencent ti-fill-parent\">\n  <div ref=\"arena\" class=\"map-arena ti-fill-parent\"></div>\n</div>"); //============================================================
  // JOIN: ti/lbs/map/tencent/ti-lbs-map-tencent.mjs
  //============================================================

  (function () {
    //
    // The coordinate base on GCJ02
    //
    var _M = {
      /////////////////////////////////////////
      inheritAttrs: false,
      /////////////////////////////////////////
      data: function data() {
        return {
          valueMarker: null
        };
      },
      /////////////////////////////////////////
      props: {
        // @see https://lbs.qq.com/javascript_v2/doc/maptypeid.html
        // ROADMAP | SATELLITE | HYBRID
        "mapType": {
          type: String,
          "default": "ROADMAP"
        },
        // Map center : {"lat":39.9042, "lng":116.4074}
        // If null, it will auto sync with the value
        "center": {
          type: Object,
          // default : ()=>({
          //   {"lat":39.9042, "lng":116.4074}
          // })
          "default": null
        },
        "zoom": {
          type: Number,
          "default": 8
        },
        // A LatLng Point in map, which react the changing
        "value": {
          type: Object,
          "default": null
        },
        "valueOptions": {
          type: Object,
          "default": function _default() {
            return {
              icon: null,
              title: "UserMarker",
              // DOWN|BOUNCE|DROP|UP
              animation: "DOWN"
            };
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //-------------------------------------
        mapCenterLatLng: function mapCenterLatLng() {
          if (!_.isEmpty(this.center)) {
            return this.genLatLng(this.center);
          }

          if (!_.isEmpty(this.value)) {
            return this.genLatLng(this.value);
          } // Default center to beijing


          return this.genLatLng({
            lat: 39.9042,
            lng: 116.4074
          });
        },
        //-------------------------------------
        mapTypeId: function mapTypeId() {
          return qq.maps.MapTypeId[this.mapType] || qq.maps.MapTypeId.ROADMAP;
        } //-------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //-------------------------------------
        genLatLng: function genLatLng() {
          var _ref53 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              lat = _ref53.lat,
              lng = _ref53.lng;

          return new qq.maps.LatLng(lat, lng);
        },
        //-------------------------------------
        drawValue: function drawValue() {
          var $map = this.__map;
          var opt = this.valueOptions; // Guard the value

          if (!this.value) return;
          var llpos = this.genLatLng(this.value);
          var marker = new qq.maps.Marker({
            position: llpos,
            animation: qq.maps.MarkerAnimation[opt.animation],
            //设置显示Marker的地图
            map: $map,
            //设置Marker可拖动
            draggable: true,
            // //自定义Marker图标为大头针样式
            // icon: new qq.maps.MarkerImage(
            //     "https://open.map.qq.com/doc/img/nilt.png"),
            // //自定义Marker图标的阴影
            // shadow: new qq.maps.MarkerImage(
            //     "https://open.map.qq.com/doc/img/nilb.png"),
            //设置Marker标题，鼠标划过Marker时显示
            title: opt.title,
            //设置Marker的可见性，为true时可见,false时不可见
            visible: true
          });
          this.valueMarker = marker;
        } //-------------------------------------

      },
      //////////////////////////////////////////
      watch: {
        "value": function value() {
          this.drawValue();
        }
      },
      //////////////////////////////////////////
      mounted: function () {
        var _mounted5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee48() {
          var $map;
          return regeneratorRuntime.wrap(function _callee48$(_context48) {
            while (1) {
              switch (_context48.prev = _context48.next) {
                case 0:
                  // Init Map
                  $map = new qq.maps.Map(this.$refs.arena, {
                    zoom: this.zoom,
                    center: this.mapCenterLatLng,
                    mapTypeId: this.mapTypeId
                  }); // Store

                  this.__map = $map; // Draw Value

                  this.drawValue();

                case 3:
                case "end":
                  return _context48.stop();
              }
            }
          }, _callee48, this);
        }));

        function mounted() {
          return _mounted5.apply(this, arguments);
        }

        return mounted;
      }() //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/lbs/map/tencent/ti-lbs-map-tencent.mjs", _M);
  })(); //============================================================
  // JOIN: ti/lbs/map/tencent/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/lbs/map/tencent/_com.json", {
    "name": "ti-lbs-map-tencent",
    "globally": true,
    "template": "./ti-lbs-map-tencent.html",
    "mixins": ["./ti-lbs-map-tencent.mjs"],
    "components": []
  }); //============================================================
  // JOIN: ti/lbs/map/ti-lbs-map.html
  //============================================================

  Ti.Preload("ti/com/ti/lbs/map/ti-lbs-map.html", "<div class=\"ti-lbs-map\" \n  :class=\"TopClass\"\n  :style=\"TopStyle\">\n  <!--\n    Show Map\n  -->\n  <div \n    v-if=\"apiLoaded\"\n      class=\"map-con\">\n      <!--\n        Map Main\n      -->\n      <div class=\"as-main\">\n        <component \n          :is=\"MapComType\"\n            v-bind=\"MapComConf\"\n            @center:change=\"OnCenterChange\"\n            @zoom:change=\"OnZoomChange\"/>\n      </div>\n      <!--\n        Wait cooling\n      -->\n      <div\n        v-if=\"CoolingIcon\"\n          class=\"as-wait-cooling\"><TiIcon :value=\"CoolingIcon\"/></div>\n      <!--\n        Map Controls\n      -->\n      <div class=\"as-controls\">\n        <TiActionbar v-bind=\"MapActionBar\"/>\n      </div>\n      <!--\n        Map Info\n      -->\n      <div\n        v-if=\"infoBar && MapCenter\"\n          class=\"as-info\">\n          <ul class=\"as-laln\">\n            <li><span>{{'lat'|i18n}}:</span><em>{{MapCenter.lat|float(8)}}</em></li>\n            <li><span>{{'lng'|i18n}}:</span><em>{{MapCenter.lng|float(8)}}</em></li>\n            <li><span>ZOOM</span><em>{{myZoom || zoom}}</em></li>\n          </ul>\n      </div> <!--as-info-->\n  </div>\n  <!--\n    Show Loading \n  -->\n  <ti-loading\n    v-else\n      class=\"as-big-mask\"/>\n</div>"); //============================================================
  // JOIN: ti/lbs/map/ti-lbs-map.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      inject: {
        '$vars': {
          "default": {}
        }
      },
      /////////////////////////////////////////
      data: function data() {
        return {
          myUpTime: undefined,
          myWaitCooling: false,
          myFullscreen: false,
          myMapCenter: undefined,
          myZoom: undefined,
          myMapType: undefined,
          apiLoaded: false
        };
      },
      /////////////////////////////////////////
      props: {
        // tencent|baidu|google ...
        "by": {
          type: String,
          "default": "tencent"
        },
        // Map security key pattern 
        // it will find the key from "$vars" which injected to the com.
        // default, if by=google, the mapKey in "$vars" should be "googleMapKey"
        "secretKey": {
          type: String,
          "default": "${by}MapKey"
        },
        // All Map api support URL
        // key by 'by' prop
        "apiUrls": {
          type: Object,
          "default": function _default() {
            return {
              "google": '!js://maps.googleapis.com/maps/api/js?key=${key}'
            };
          }
        },
        // @see https://lbs.qq.com/javascript_v2/doc/maptypeid.html
        // @see http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference_3_0.html#a5b0
        // ROADMAP | SATELLITE | HYBRID | TERRAIN(google only)
        "mapType": {
          type: String,
          "default": "ROADMAP"
        },
        // Sometime, the lat/lng valued by integer
        // this prop defined how to translate them to float
        "autoFloat": {
          type: Number,
          "default": 10000000
        },
        // Map width
        "width": {
          type: [String, Number],
          "default": 400
        },
        // Map height
        "height": {
          type: [String, Number],
          "default": 400
        },
        "zoom": {
          type: Number,
          "default": 8
        },
        // The Coordinate System for input LatLng (center/value...)
        //  - WGS84 : Standard GPS 
        //  - BD09  : for Baidu Map
        //  - GCJ02 : (Mars) QQ/GaoDe/AliYun ...
        "coordinate": {
          type: String,
          "default": "WGS84"
        },
        // A LatLng Point Object or Polygon Array in map
        // Point - Map center will be it
        // Polygon - Auto count the map center
        "value": {
          type: [Object, Array],
          "default": null
        },
        // Display mode
        //  - auto  : base on the value
        //  - point : show marker on map by value
        //  - path  : show path on map by value
        //  - area  : show polygon on map by value
        "mode": {
          type: String,
          "default": "auto",
          validator: function validator(v) {
            return /^(auto|point|path|area)$/.test(v);
          }
        },
        "keepStateBy": {
          type: String,
          "default": undefined
        },
        "cooling": {
          type: Number,
          "default": 1200
        },
        "maxZoom": {
          type: Number,
          "default": 22
        },
        "minZoom": {
          type: Number,
          "default": 1
        },
        "infoBar": {
          type: Boolean,
          "default": true
        },
        "iconSize": {
          type: Object,
          "default": undefined
        },
        "iconSizeHoverScale": {
          type: Number,
          "default": 1.3
        },
        "boundPadding": {
          type: [Object, Number],
          "default": 10
        },
        "pointClickable": {
          type: Boolean,
          "default": true
        },
        // Refer by goole map api: gestureHandling
        // https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions
        "gestureHandling": {
          type: String,
          "default": "auto",
          validator: function validator(v) {
            return /^(cooperative|greedy|none|auto)$/.test(v);
          }
        },
        "clustering": {
          type: Object,
          "default": undefined
        }
      },
      //////////////////////////////////////////
      computed: {
        //-------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass({
            "is-fullscreen": this.myFullscreen,
            "is-embed": !this.myFullscreen
          });
        },
        //-------------------------------------
        TopStyle: function TopStyle() {
          if (!this.myFullscreen) {
            return Ti.Css.toStyle({
              width: this.width,
              height: this.height
            });
          }
        },
        //-------------------------------------
        TheMapSecretKey: function TheMapSecretKey() {
          var vnm = Ti.S.renderBy(this.secretKey, this);
          return _.get(this.$vars, vnm);
        },
        //-------------------------------------
        TheMapApiUrl: function TheMapApiUrl() {
          var url = _.get(this.apiUrls, this.by);

          url = Ti.S.renderBy(url, {
            key: this.TheMapSecretKey
          });
          return url;
        },
        //-------------------------------------
        TheGestureHandling: function TheGestureHandling() {
          if (this.myFullscreen) {
            return "greedy";
          }

          return this.gestureHandling;
        },
        //-------------------------------------
        ToggleIcon: function ToggleIcon() {
          return this.myFullscreen ? "zmdi-fullscreen-exit" : "zmdi-fullscreen";
        },
        //-------------------------------------
        MapComType: function MapComType() {
          return "ti-lbs-map-".concat(this.by);
        },
        //-------------------------------------
        MapComConf: function MapComConf() {
          return _objectSpread({
            "secretKey": this.TheMapSecretKey,
            "center": this.MapCenter,
            "mapType": this.myMapType,
            "zoom": this.myZoom,
            "maxZoom": this.maxZoom,
            "minZoom": this.minZoom,
            "boundPadding": this.boundPadding,
            "gestureHandling": this.TheGestureHandling,
            "clustering": this.clustering
          }, this.MapComConfByMode);
        },
        //-------------------------------------
        MapComConfByMode: function MapComConfByMode() {
          var _this100 = this;

          // Prepare mode functions
          var fns = {
            //.........................
            auto: function auto(val) {
              if (_.isArray(val)) {
                return fns.path(val);
              }

              return fns.point(val);
            },
            //.........................
            point: function point(val) {
              // Show markers
              if (_.isArray(val)) {
                return {
                  layers: [{
                    type: "point",
                    items: _.concat(val),
                    iconSize: _this100.iconSize,
                    iconSizeHoverScale: _this100.iconSizeHoverScale,
                    clickable: _this100.pointClickable
                  }]
                };
              } // Edit mode


              return {
                pinCenter: true
              };
            },
            //.........................
            path: function path(val) {
              if (!val) return {};
              return {
                layers: [{
                  type: "path",
                  items: _.concat(val),
                  iconSize: _this100.iconSize
                }]
              };
            },
            //.........................
            area: function area(val) {
              if (!val) return {};
              return {
                layers: [{
                  type: "area",
                  items: _.concat(val),
                  iconSize: _this100.iconSize
                }]
              };
            } //.........................

          };
          return fns[this.mode](this.LalValue);
        },
        //-------------------------------------
        TargetCoordinate: function TargetCoordinate() {
          return {
            "tencent": "GCJ02",
            "baidu": "BD09",
            "ali": "GCJ02"
          }[this.by] || "WGS84";
        },
        //-------------------------------------
        LalValue: function LalValue() {
          // Guard
          if (_.isEmpty(this.value)) {
            return {
              lat: 39.908765655793395,
              lng: 116.39748860418158
            };
          } // Polygon


          if (_.isArray(this.value)) {
            var list = [];

            var _iterator40 = _createForOfIteratorHelper(this.value),
                _step40;

            try {
              for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {
                var it = _step40.value;

                var _lal = this.genLngLat(it); // Transform preview src


                var src = it.src;

                if (it.obj, it.preview) {
                  src = Ti.WWW.evalObjPreviewSrc(it.obj, it.preview);
                }

                list.push(_.assign({}, it, _lal, {
                  src: src
                }));
              }
            } catch (err) {
              _iterator40.e(err);
            } finally {
              _iterator40.f();
            }

            return list;
          } // Point


          var lal = this.genLngLat(this.value);
          return _.assign({}, this.value, lal);
        },
        //-------------------------------------
        MapCenter: function MapCenter() {
          if (this.myMapCenter) {
            return this.myMapCenter;
          } // Guard


          if (!this.LalValue) {
            return;
          } // Polygon


          if (_.isArray(this.LalValue)) {
            return Ti.GPS.getBounds(this.LalValue);
          } // Point


          return _.pick(this.LalValue, "lng", "lat");
        },
        //-------------------------------------
        MapActionBar: function MapActionBar() {
          var _this101 = this;

          return {
            items: [{
              className: "big-icon",
              icon: this.myFullscreen ? "im-minimize" : "im-maximize",
              action: function action() {
                return _this101.myFullscreen = !_this101.myFullscreen;
              }
            }, {
              icon: "far-map",
              text: "i18n:map-type",
              altDisplay: [{
                icon: "fas-road",
                text: "i18n:map-roadmap",
                match: {
                  myMapType: "ROADMAP"
                }
              }, {
                icon: "fas-satellite",
                text: "i18n:map-satellite",
                match: {
                  myMapType: "SATELLITE"
                }
              }, {
                icon: "fas-globe-asia",
                text: "i18n:map-hybrid",
                match: {
                  myMapType: "HYBRID"
                }
              }, {
                icon: "fas-drafting-compass",
                text: "i18n:map-terrain",
                match: {
                  myMapType: "TERRAIN"
                }
              }],
              items: [{
                icon: "fas-road",
                text: "i18n:map-roadmap",
                highlight: {
                  myMapType: "ROADMAP"
                },
                action: function action() {
                  return _this101.myMapType = "ROADMAP";
                }
              }, {
                icon: "fas-globe-asia",
                text: "i18n:map-hybrid",
                highlight: {
                  myMapType: "HYBRID"
                },
                action: function action() {
                  return _this101.myMapType = "HYBRID";
                }
              }, {
                icon: "fas-satellite",
                text: "i18n:map-satellite",
                highlight: {
                  myMapType: "SATELLITE"
                },
                action: function action() {
                  return _this101.myMapType = "SATELLITE";
                }
              }, {
                icon: "fas-drafting-compass",
                text: "i18n:map-terrain",
                highlight: {
                  myMapType: "TERRAIN"
                },
                action: function action() {
                  return _this101.myMapType = "TERRAIN";
                }
              }]
            }, {
              className: "big-icon",
              icon: "im-plus",
              wait: 1200,
              action: function action() {
                return _this101.zoomMap(1);
              }
            }, {
              className: "big-icon",
              icon: "im-minus",
              wait: 1200,
              action: function action() {
                return _this101.zoomMap(-1);
              }
            }],
            status: this
          };
        },
        //-------------------------------------
        CoolingIcon: function CoolingIcon() {
          if (this.myUpTime > 0) {
            if (this.myWaitCooling) {
              return "fas-spinner fa-spin";
            }

            return "zmdi-check-circle";
          }
        } //-------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //-------------------------------------
        OnCenterChange: function OnCenterChange(lal) {
          this.myMapCenter = lal;

          if (this.MapComConfByMode.pinCenter) {
            this.myUpTime = Date.now();

            if (!this.myWaitCooling) {
              this.checkUpdate();
            }
          }
        },
        //-------------------------------------
        OnZoomChange: function OnZoomChange(zoom) {
          this.myZoom = zoom;
          this.saveState({
            zoom: zoom
          });
        },
        //-------------------------------------
        zoomMap: function zoomMap(offset) {
          var zoom = this.myZoom + offset;

          if (_.inRange(zoom, this.minZoom, this.maxZoom + 1)) {
            this.myZoom = zoom;
            this.saveState({
              zoom: zoom
            });
          }
        },
        //-------------------------------------
        isCoolDown: function isCoolDown() {
          if (!this.myUpTime) {
            return true;
          }

          var du = Date.now() - this.myUpTime;
          return du > this.cooling;
        },
        //-------------------------------------
        checkUpdate: function checkUpdate() {
          var _this102 = this;

          if (this.isCoolDown()) {
            var lal = _.pick(this.myMapCenter, "lng", "lat"); //console.log("notify change", lal)


            this.$notify("change", lal);
            this.myWaitCooling = false;

            _.delay(function () {
              _this102.myUpTime = undefined;
            }, 1000);
          } // Wait
          else {
              this.myWaitCooling = true;
              var du = Date.now() - this.myUpTime; //console.log("wait cooling", this.cooling, du)

              _.delay(function () {
                _this102.checkUpdate();
              }, this.cooling);
            }
        },
        //-------------------------------------
        autoLatLng: function autoLatLng(val) {
          if (val > 360) {
            return val / this.autoFloat;
          }

          return val;
        },
        //-------------------------------------
        genLngLat: function genLngLat() {
          var _ref54 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              lat = _ref54.lat,
              lng = _ref54.lng;

          lat = this.autoLatLng(lat);
          lng = this.autoLatLng(lng); // Transform coordinate

          var from = this.coordinate;
          var to = this.TargetCoordinate;

          if (from == to) {
            return {
              lat: lat,
              lng: lng
            };
          } // find the trans-methods


          var methodName = "".concat(from, "_TO_").concat(to); // like `WGS84_TO_BD09` or `WGS84_TO_GCJ02`

          var fn = Ti.GPS[methodName];
          return fn(lat, lng);
        },
        //-------------------------------------
        saveState: function saveState(st) {
          if (this.keepStateBy) {
            var state = Ti.Storage.session.getObject(this.keepStateBy);

            _.assign(state, st);

            Ti.Storage.session.setObject(this.keepStateBy, state);
          }
        } //-------------------------------------

      },
      //////////////////////////////////////////
      watch: {
        "value": function value() {
          if (_.isUndefined(this.myUpTime)) {
            this.myMapCenter = undefined;
          }
        },
        "myFullscreen": function myFullscreen(newVal, oldVal) {
          if (!_.isEqual(newVal, oldVal)) {
            this.$notify("change:fullscreen", newVal);
          }
        }
      },
      //////////////////////////////////////////
      created: function created() {
        // Init private data
        this.myMapType = this.mapType;
        this.myZoom = this.zoom;

        if (this.keepStateBy) {
          var state = Ti.Storage.session.getObject(this.keepStateBy);
          this.myMapType = state.mapType || this.mapType;
          this.myZoom = state.zoom || this.zoom;
        }
      },
      //////////////////////////////////////////
      mounted: function () {
        var _mounted6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee49() {
          var url;
          return regeneratorRuntime.wrap(function _callee49$(_context49) {
            while (1) {
              switch (_context49.prev = _context49.next) {
                case 0:
                  // Load Map API
                  url = this.TheMapApiUrl;

                  if (!url) {
                    _context49.next = 5;
                    break;
                  }

                  _context49.next = 4;
                  return Ti.Load(url);

                case 4:
                  this.apiLoaded = true;

                case 5:
                case "end":
                  return _context49.stop();
              }
            }
          }, _callee49, this);
        }));

        function mounted() {
          return _mounted6.apply(this, arguments);
        }

        return mounted;
      }() //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/lbs/map/ti-lbs-map.mjs", _M);
  })(); //============================================================
  // JOIN: ti/lbs/map/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/lbs/map/_com.json", {
    "name": "ti-lbs-map",
    "globally": true,
    "template": "./ti-lbs-map.html",
    "mixins": ["./ti-lbs-map.mjs"],
    "components": ["./tencent/_com.json", "./baidu/_com.json", "./google/_com.json", "@com:ti/button"]
  }); //============================================================
  // JOIN: ti/lbs/route/ti-lbs-route.html
  //============================================================

  Ti.Preload("ti/com/ti/lbs/route/ti-lbs-route.html", "<div class=\"ti-lbs-route\" \n  :class=\"TopClass\"\n  :style=\"TopStyle\">\n  <!--Map-->\n  <TiLbsMap\n    v-bind=\"this\"\n    :gesture-handling=\"TheGestureHandling\"\n    :value=\"ValueItems\"\n    mode=\"path\"\n    @change:fullscreen=\"OnFullscreenChange\"/>\n  <!--\n    Edit Panel\n  -->\n  <template v-if=\"editable\">\n    <!--\n      Route List\n    -->\n    <transition name=\"ti-trans-fade\">\n      <div\n        v-if=\"isShowList\"\n          class=\"as-list\">\n            <TiList\n              :data=\"ValueItems\"\n              v-bind=\"ListConf\"\n              blank-class=\"as-big\"\n              :current-id=\"myCurrentId\"\n              :checked-ids=\"myCheckedIds\"\n              :puppet-mode=\"true\"\n              @select=\"OnListSelect\"\n              @open=\"OnListOpen\"/>\n      </div>\n    </transition>\n    <!--\n      Actions\n    -->\n    <div class=\"as-actions\">\n      <TiButton\n        :setup=\"ActionButtons\"/>\n    </div>\n  </template>\n</div>"); //============================================================
  // JOIN: ti/lbs/route/ti-lbs-route.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      inject: {
        '$vars': {
          "default": {}
        }
      },
      /////////////////////////////////////////
      data: function data() {
        return {
          myShowList: undefined,
          myCurrentId: undefined,
          myCheckedIds: undefined,
          myFullscreen: false,
          apiLoaded: false
        };
      },
      /////////////////////////////////////////
      props: {
        // tencent|baidu|google ...
        "by": {
          type: String,
          "default": "tencent"
        },
        // Map security key pattern 
        // it will find the key from "$vars" which injected to the com.
        // default, if by=google, the mapKey in "$vars" should be "googleMapKey"
        "secretKey": {
          type: String,
          "default": "${by}MapKey"
        },
        // All Map api support URL
        // key by 'by' prop
        "apiUrls": {
          type: Object,
          "default": function _default() {
            return {
              "google": '!js://maps.googleapis.com/maps/api/js?key=${key}'
            };
          }
        },
        // @see https://lbs.qq.com/javascript_v2/doc/maptypeid.html
        // @see http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference_3_0.html#a5b0
        // ROADMAP | SATELLITE | HYBRID | TERRAIN(google only)
        "mapType": {
          type: String,
          "default": "ROADMAP"
        },
        // Sometime, the lat/lng valued by integer
        // this prop defined how to translate them to float
        "autoFloat": {
          type: Number,
          "default": 10000000
        },
        // Map width
        "width": {
          type: [String, Number],
          "default": 400
        },
        // Map height
        "height": {
          type: [String, Number],
          "default": 400
        },
        "zoom": {
          type: Number,
          "default": 8
        },
        // The Coordinate System for input LatLng (center/value...)
        //  - WGS84 : Standard GPS 
        //  - BD09  : for Baidu Map
        //  - GCJ02 : (Mars) QQ/GaoDe/AliYun ...
        "coordinate": {
          type: String,
          "default": "WGS84"
        },
        "maxZoom": {
          type: Number,
          "default": 22
        },
        "minZoom": {
          type: Number,
          "default": 1
        },
        "infoBar": {
          type: Boolean,
          "default": true
        },
        "editable": {
          type: Boolean,
          "default": false
        },
        "iconSize": {
          type: Object,
          "default": undefined
        },
        // A LatLng Point Object or Polygon Array in map
        // Point - Map center will be it
        // Polygon - Auto count the map center
        "value": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "keepStateBy": {
          type: String,
          "default": undefined
        },
        "showList": {
          type: Boolean,
          "default": true
        },

        /*
        Open Modal-> ti-transer 
        whatever, you need gen the result like:
        [{
          id, title, lng, lat, label[Optional]
        }]
        */
        "addBy": {
          type: Object,
          "default": undefined
        },
        // Refer by goole map api: gestureHandling
        // https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions
        "gestureHandling": {
          type: String,
          "default": "auto",
          validator: function validator(v) {
            return /^(cooperative|greedy|none|auto)$/.test(v);
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //-------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass({
            "is-fullscreen": this.myFullscreen
          });
        },
        //-------------------------------------
        TopStyle: function TopStyle() {
          if (!this.myFullscreen) {
            return Ti.Css.toStyle({
              width: this.width,
              height: this.height
            });
          }
        },
        //-------------------------------------
        TheMapSecretKey: function TheMapSecretKey() {
          var vnm = Ti.S.renderBy(this.secretKey, this);
          return _.get(this.$vars, vnm);
        },
        //-------------------------------------
        TheMapApiUrl: function TheMapApiUrl() {
          var url = _.get(this.apiUrls, this.by);

          url = Ti.S.renderBy(url, {
            key: this.TheMapSecretKey
          });
          return url;
        },
        //-------------------------------------
        TheGestureHandling: function TheGestureHandling() {
          if (this.myFullscreen) {
            return "greedy";
          }

          return this.gestureHandling;
        },
        //-------------------------------------
        ValueItems: function ValueItems() {
          var list = [];

          _.forEach(this.value, function (it, index) {
            var li = _.cloneDeep(it); // Default Label


            if (!li.label) {
              li.label = "" + (index + 1);
            } // Default ID


            if (!li.id) {
              li.id = "R".concat(index);
            } // Join it


            list.push(li);
          });

          return list;
        },
        //-------------------------------------
        hasItems: function hasItems() {
          return !_.isEmpty(this.ValueItems);
        },
        //-------------------------------------
        ListConf: function ListConf() {
          return {
            display: ["<icon:zmdi-pin>", "label:[$${val}]", "title"],
            multi: true
          };
        },
        //-------------------------------------
        ActionButtons: function ActionButtons() {
          var _this103 = this;

          var list = [{
            icon: "zmdi-edit",
            disabled: !this.hasCurrentId,
            handler: function handler() {
              return _this103.editCurrent();
            }
          }, {
            icon: "fas-sort-numeric-down",
            disabled: !this.hasItems,
            handler: function handler() {
              return _this103.renumberItems();
            }
          }, {
            icon: "zmdi-long-arrow-up",
            disabled: !this.hasCheckedIds,
            handler: function handler() {
              return _this103.moveCheckedUp();
            }
          }, {
            icon: "zmdi-long-arrow-down",
            disabled: !this.hasCheckedIds,
            handler: function handler() {
              return _this103.moveCheckedDown();
            }
          }, {
            icon: "zmdi-delete",
            disabled: !this.hasCheckedIds,
            handler: function handler() {
              return _this103.removeChecked();
            }
          }, {
            icon: "zmdi-format-list-bulleted",
            handler: function handler() {
              _this103.myShowList = !_this103.isShowList;
            }
          }];

          if (this.addBy) {
            return _.concat({
              icon: "zmdi-plus",
              text: "i18n:lbs-place-add",
              handler: function handler() {
                return _this103.openNewItemSelector();
              }
            }, list);
          }

          return list;
        },
        //-------------------------------------
        hasCurrentId: function hasCurrentId() {
          return !Ti.Util.isNil(this.myCurrentId);
        },
        //-------------------------------------
        hasCheckedIds: function hasCheckedIds() {
          return !_.isEmpty(this.myCheckedIds);
        },
        //-------------------------------------
        isShowList: function isShowList() {
          return Ti.Util.fallback(this.myShowList, this.showList);
        } //-------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //-------------------------------------
        OnFullscreenChange: function OnFullscreenChange(fullscreen) {
          console.log("OnFullscreenChange", fullscreen);
          this.myFullscreen = fullscreen;
        },
        //-------------------------------------
        OnListSelect: function OnListSelect(_ref55) {
          var currentId = _ref55.currentId,
              checkedIds = _ref55.checkedIds;
          this.myCurrentId = currentId;
          this.myCheckedIds = checkedIds;
        },
        //-------------------------------------
        OnListOpen: function OnListOpen(_ref56) {
          var _this104 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee50() {
            var index, item, reo, list;
            return regeneratorRuntime.wrap(function _callee50$(_context50) {
              while (1) {
                switch (_context50.prev = _context50.next) {
                  case 0:
                    index = _ref56.index, item = _ref56.item;
                    _context50.next = 3;
                    return Ti.App.Open({
                      title: "i18n:edit",
                      position: "right",
                      result: item,
                      comType: "TiForm",
                      comConf: {
                        data: "=result",
                        fields: [{
                          title: "i18n:title",
                          name: "title",
                          comType: "ti-input"
                        }, {
                          title: "i18n:label",
                          name: "label",
                          comType: "ti-input"
                        }]
                      }
                    });

                  case 3:
                    reo = _context50.sent;

                    if (!_.isEmpty(reo)) {
                      _context50.next = 6;
                      break;
                    }

                    return _context50.abrupt("return");

                  case 6:
                    // Update
                    list = _.cloneDeep(_this104.ValueItems);

                    _.assign(list[index], reo);

                    _this104.$notify("change", list);

                  case 9:
                  case "end":
                    return _context50.stop();
                }
              }
            }, _callee50);
          }))();
        },
        //-------------------------------------
        renumberItems: function renumberItems() {
          var _this105 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee51() {
            var reo, nbList, list;
            return regeneratorRuntime.wrap(function _callee51$(_context51) {
              while (1) {
                switch (_context51.prev = _context51.next) {
                  case 0:
                    _context51.next = 2;
                    return Ti.App.Open({
                      title: "i18n:lbs-ro-rnb-title",
                      position: "right",
                      result: {
                        first: 1,
                        type: "capital"
                      },
                      model: {
                        prop: "data",
                        event: "change"
                      },
                      comType: "TiForm",
                      comConf: {
                        fields: [{
                          title: "i18n:lbs-ro-rnb-k-first",
                          name: "first",
                          type: "Integer",
                          comType: "ti-input-num"
                        }, {
                          title: "i18n:lbs-ro-rnb-k-type",
                          name: "type",
                          comType: "ti-switcher",
                          comConf: {
                            options: [{
                              value: "capital",
                              text: "i18n:lbs-ro-rnb-k-type-capital"
                            }, {
                              value: "alpha",
                              text: "i18n:lbs-ro-rnb-k-type-alpha"
                            }, {
                              value: "number",
                              text: "i18n:lbs-ro-rnb-k-type-number"
                            }]
                          }
                        }]
                      }
                    });

                  case 2:
                    reo = _context51.sent;

                    if (reo) {
                      _context51.next = 5;
                      break;
                    }

                    return _context51.abrupt("return");

                  case 5:
                    // Prepare the number list
                    nbList = {
                      "alpha": "abcdefghijklmnopqrstuvwxyz".split(""),
                      "capital": "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("")
                    }[reo.type]; // Assign the label

                    list = _.cloneDeep(_this105.ValueItems);

                    _.forEach(list, function (li, index) {
                      var i = reo.first + index;

                      if (nbList) {
                        var ni = Ti.Num.scrollIndex(i - 1, nbList.length);
                        li.label = _.nth(nbList, ni);
                      } // Just use number
                      else {
                          li.label = "" + i;
                        }
                    }); // Update


                    _this105.$notify("change", list);

                  case 9:
                  case "end":
                    return _context51.stop();
                }
              }
            }, _callee51);
          }))();
        },
        //-------------------------------------
        editCurrent: function editCurrent() {
          var _this106 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee52() {
            var index, item, _iterator41, _step41, it;

            return regeneratorRuntime.wrap(function _callee52$(_context52) {
              while (1) {
                switch (_context52.prev = _context52.next) {
                  case 0:
                    if (_this106.myCurrentId) {
                      _context52.next = 2;
                      break;
                    }

                    return _context52.abrupt("return");

                  case 2:
                    // Find the index
                    index = 0, item = null;
                    _iterator41 = _createForOfIteratorHelper(_this106.ValueItems);
                    _context52.prev = 4;

                    _iterator41.s();

                  case 6:
                    if ((_step41 = _iterator41.n()).done) {
                      _context52.next = 14;
                      break;
                    }

                    it = _step41.value;

                    if (!(_this106.myCurrentId == it.id)) {
                      _context52.next = 11;
                      break;
                    }

                    item = it;
                    return _context52.abrupt("break", 14);

                  case 11:
                    index++;

                  case 12:
                    _context52.next = 6;
                    break;

                  case 14:
                    _context52.next = 19;
                    break;

                  case 16:
                    _context52.prev = 16;
                    _context52.t0 = _context52["catch"](4);

                    _iterator41.e(_context52.t0);

                  case 19:
                    _context52.prev = 19;

                    _iterator41.f();

                    return _context52.finish(19);

                  case 22:
                    _context52.next = 24;
                    return _this106.OnListOpen({
                      index: index,
                      item: item
                    });

                  case 24:
                  case "end":
                    return _context52.stop();
                }
              }
            }, _callee52, null, [[4, 16, 19, 22]]);
          }))();
        },
        //-------------------------------------
        openNewItemSelector: function openNewItemSelector() {
          var _this107 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee53() {
            var diaConf, reo, list, memo;
            return regeneratorRuntime.wrap(function _callee53$(_context53) {
              while (1) {
                switch (_context53.prev = _context53.next) {
                  case 0:
                    if (_this107.addBy) {
                      _context53.next = 2;
                      break;
                    }

                    return _context53.abrupt("return");

                  case 2:
                    diaConf = _.merge({
                      icon: "zmdi-plus-circle-o",
                      title: "add-item",
                      width: "80%",
                      height: "80%",
                      position: "top",
                      result: _this107.ValueItems,
                      comType: "TiTransfer",
                      comConf: {}
                    }, _this107.addBy);
                    _context53.next = 5;
                    return Ti.App.Open(diaConf);

                  case 5:
                    reo = _context53.sent;

                    if (!Ti.Util.isNil(reo)) {
                      _context53.next = 8;
                      break;
                    }

                    return _context53.abrupt("return");

                  case 8:
                    // Remove dup
                    list = [];
                    memo = {}; // Remember old

                    _.forEach(list, function (it) {
                      return memo[it.id] = true;
                    }); // Join new


                    _.forEach(reo, function (it) {
                      if (!memo[it.id]) {
                        memo[it.id] = true;

                        if (Ti.Util.isNil(it.label)) {
                          it.label = list.length + 1 + "";
                        }

                        list.push(it);
                      }
                    }); // Notify change


                    _this107.$notify("change", list);

                  case 13:
                  case "end":
                    return _context53.stop();
                }
              }
            }, _callee53);
          }))();
        },
        //-------------------------------------
        moveCheckedUp: function moveCheckedUp() {
          var mc = this.genMoveContext();

          if (_.isEmpty(mc.checkeds)) {
            return Ti.Toast.Open("i18n:nil-obj", "warn");
          }

          if (mc.firstIndex > 0) {
            var _Ti$Util5;

            var list = mc.remains;
            var pos = mc.firstIndex - 1;

            (_Ti$Util5 = Ti.Util).insertToArray.apply(_Ti$Util5, [list, pos].concat(_toConsumableArray(mc.checkeds))); // Update the auto-generated ID


            if (Ti.Util.isNil(_.first(mc.checkeds).id)) {
              var checkeds = {};

              for (var i = 0; i < mc.checkeds.length; i++) {
                checkeds["R".concat(i + pos)] = true;
              }

              this.myCurrentId = null;
              this.myCheckedIds = checkeds;
            }

            this.$notify("change", list);
          }
        },
        //-------------------------------------
        moveCheckedDown: function moveCheckedDown() {
          var mc = this.genMoveContext();

          if (_.isEmpty(mc.checkeds)) {
            return Ti.Toast.Open("i18n:nil-obj", "warn");
          }

          if (mc.lastIndex < mc.remains.length) {
            var _Ti$Util6;

            var list = mc.remains;
            var pos = mc.lastIndex + 1;

            (_Ti$Util6 = Ti.Util).insertToArray.apply(_Ti$Util6, [list, pos].concat(_toConsumableArray(mc.checkeds))); // Update the auto-generated ID


            if (Ti.Util.isNil(_.first(mc.checkeds).id)) {
              var checkeds = {};

              for (var i = 0; i < mc.checkeds.length; i++) {
                checkeds["R".concat(i + pos)] = true;
              }

              this.myCurrentId = null;
              this.myCheckedIds = checkeds;
            }

            this.$notify("change", list);
          }
        },
        //-------------------------------------
        removeChecked: function removeChecked() {
          var mc = this.genMoveContext();

          if (_.isEmpty(mc.checkeds)) {
            return Ti.Toast.Open("i18n:del-none", "warn");
          }

          this.myCheckedIds = {};
          this.myCurrentId = null;
          this.$notify("change", mc.remains);
        },
        //-------------------------------------
        genMoveContext: function genMoveContext() {
          var _this108 = this;

          var mc = {
            firstIndex: -1,
            lastIndex: -1,
            checkeds: [],
            remains: []
          };

          _.forEach(this.ValueItems, function (it, index) {
            var isChecked = _.get(_this108.myCheckedIds, it.id);

            var priIt = _this108.value[index]; // Checked

            if (isChecked) {
              mc.checkeds.push(priIt);

              if (mc.firstIndex < 0) {
                mc.firstIndex = index;
                mc.lastIndex = index;
              } else {
                mc.lastIndex = mc.remains.length;
              }
            } // Remain
            else {
                mc.remains.push(priIt);
              }
          }); //console.log(mc)


          return mc;
        } //-------------------------------------

      },
      //////////////////////////////////////////
      mounted: function () {
        var _mounted7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee54() {
          var url;
          return regeneratorRuntime.wrap(function _callee54$(_context54) {
            while (1) {
              switch (_context54.prev = _context54.next) {
                case 0:
                  // Load Map API
                  url = this.TheMapApiUrl;

                  if (!url) {
                    _context54.next = 5;
                    break;
                  }

                  _context54.next = 4;
                  return Ti.Load(url);

                case 4:
                  this.apiLoaded = true;

                case 5:
                case "end":
                  return _context54.stop();
              }
            }
          }, _callee54, this);
        }));

        function mounted() {
          return _mounted7.apply(this, arguments);
        }

        return mounted;
      }() //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/lbs/route/ti-lbs-route.mjs", _M);
  })(); //============================================================
  // JOIN: ti/lbs/route/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/lbs/route/_com.json", {
    "name": "ti-lbs-route",
    "globally": true,
    "template": "./ti-lbs-route.html",
    "mixins": ["./ti-lbs-route.mjs"],
    "components": ["@com:ti/lbs/map"]
  }); //============================================================
  // JOIN: ti/list/com/list-row/list-row.html
  //============================================================

  Ti.Preload("ti/com/ti/list/com/list-row/list-row.html", "<div class=\"list-row\"\n  :class=\"TopClass\">\n  <!--current actived row indicator-->\n  <div class=\"row-actived-indicator\"></div>\n  <!-- Indents -->\n  <div v-for=\"n in indent\"\n  class=\"row-indent\"></div>\n  <!--ICON: Handler-->\n  <template v-if=\"icon\">\n    <ti-icon\n      v-if=\"hasRealIcon\"\n        class=\"row-icon\"\n        :value=\"icon\"\n        @click.native.left.stop=\"OnClickIcon\"/>\n    <div v-else\n      class=\"row-icon\"></div>\n  </template>\n  <!--ICON: Checker-->\n  <ti-icon v-if=\"checkable\"\n      class=\"row-checker\"\n      :value=\"theCheckIcon\"\n      @click.native.left.stop=\"OnClickChecker\"/>\n  <!-- Content -->\n  <div\n    class=\"row-con\"\n    @click.left=\"OnClickRow\"\n    @dblclick.left=\"OnDblClickRow\"\n    v-ti-activable>\n    <component \n      v-for=\"(it, index) in myDisplayItems\"\n        :class=\"'item-'+index\"\n        :key=\"it.uniqueKey\"\n        :is=\"it.comType\"\n        v-bind=\"it.comConf\"\n        @change=\"onItemChanged(it, $event)\"/>\n  </div>\n\n</div>"); //============================================================
  // JOIN: ti/list/com/list-row/list-row.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      ///////////////////////////////////////////////////
      data: function data() {
        return {
          myDisplayItems: []
        };
      },
      ///////////////////////////////////////////////////
      props: {
        "indent": {
          type: Number,
          "default": 0
        },
        "icon": {
          type: [Boolean, String],
          "default": null
        },
        "display": {
          type: Array,
          "default": function _default() {
            return [];
          }
        }
      },
      ///////////////////////////////////////////////////
      computed: {
        //-----------------------------------------------
        TopClass: function TopClass() {
          return this.getListItemClass("row-indent-".concat(this.indent));
        },
        //-----------------------------------------------
        hasRealIcon: function hasRealIcon() {
          return this.icon && _.isString(this.icon);
        } //-----------------------------------------------

      },
      ///////////////////////////////////////////////////
      methods: {
        //-----------------------------------------------
        evalMyDisplayItems: function evalMyDisplayItems() {
          var _this109 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee55() {
            var items, _iterator42, _step42, displayItem, it;

            return regeneratorRuntime.wrap(function _callee55$(_context55) {
              while (1) {
                switch (_context55.prev = _context55.next) {
                  case 0:
                    items = []; // if(this.data && this.data.title && this.data.type) {
                    //   console.log("evalCellDisplayItems", this.data)
                    // }
                    // Eval each items

                    _iterator42 = _createForOfIteratorHelper(_this109.display);
                    _context55.prev = 2;

                    _iterator42.s();

                  case 4:
                    if ((_step42 = _iterator42.n()).done) {
                      _context55.next = 12;
                      break;
                    }

                    displayItem = _step42.value;
                    _context55.next = 8;
                    return _this109.evalDataForFieldDisplayItem({
                      itemData: _this109.data,
                      displayItem: displayItem,
                      vars: {
                        "isCurrent": _this109.isCurrent,
                        "isChecked": _this109.isChecked,
                        "isChanged": _this109.isChanged,
                        "isActived": _this109.isActived,
                        "rowId": _this109.rowId
                      }
                    });

                  case 8:
                    it = _context55.sent;

                    if (it) {
                      items.push(it);
                    }

                  case 10:
                    _context55.next = 4;
                    break;

                  case 12:
                    _context55.next = 17;
                    break;

                  case 14:
                    _context55.prev = 14;
                    _context55.t0 = _context55["catch"](2);

                    _iterator42.e(_context55.t0);

                  case 17:
                    _context55.prev = 17;

                    _iterator42.f();

                    return _context55.finish(17);

                  case 20:
                    // Update and return
                    _this109.myDisplayItems = items;

                  case 21:
                  case "end":
                    return _context55.stop();
                }
              }
            }, _callee55, null, [[2, 14, 17, 20]]);
          }))();
        },
        //-----------------------------------------------
        onItemChanged: function onItemChanged() {
          var _ref57 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              name = _ref57.name,
              value = _ref57.value;

          this.$notify("item:changed", {
            name: name,
            value: value,
            rowId: this.rowId,
            data: this.data
          });
        },
        //-----------------------------------------------
        OnClickIcon: function OnClickIcon($event) {
          this.$notify("icon", {
            rowId: this.rowId,
            shift: $event.shiftKey,
            toggle: $event.ctrlKey || $event.metaKey
          });
        },
        //--------------------------------------
        __ti_shortcut: function __ti_shortcut(uniqKey) {
          //console.log("ti-list-row", uniqKey)
          if (!_.isEmpty(this.rowToggleKey)) {
            if (this.isRowToggleKey(uniqKey)) {
              this.onClickChecker({});
              return {
                prevent: true,
                stop: true,
                quit: true
              };
            }
          }
        } //-----------------------------------------------

      },
      ///////////////////////////////////////////////////
      watch: {
        "display": function display() {
          this.evalMyDisplayItems();
        },
        "data": function data() {
          //console.log("data changed")
          this.evalMyDisplayItems();
        },
        "isCurrent": function isCurrent() {
          this.evalMyDisplayItems();
        },
        "isChecked": function isChecked() {
          this.evalMyDisplayItems();
        }
      },
      ///////////////////////////////////////////////////
      mounted: function mounted() {
        this.evalMyDisplayItems();
      } ///////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/list/com/list-row/list-row.mjs", _M);
  })(); //============================================================
  // JOIN: ti/list/com/list-row/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/list/com/list-row/_com.json", {
    "name": "list-row",
    "globally": false,
    "template": "./list-row.html",
    "methods": "@com:ti/support/field_display.mjs",
    "mixins": ["@com:ti/support/list_item_mixins.mjs", "./list-row.mjs"]
  }); //============================================================
  // JOIN: ti/list/ti-list.html
  //============================================================

  Ti.Preload("ti/com/ti/list/ti-list.html", "<div class=\"ti-list\"\n  :class=\"TopClass\"\n  @click=\"OnClickTop\"\n  v-ti-activable>\n  <!--\n    Blank\n  -->\n  <ti-loading \n    v-if=\"isDataEmpty\"\n      class=\"nil-data\"\n      :class=\"blankClass\"\n      v-bind=\"blankAs\"/>\n  <!--\n    Show Items\n  -->\n  <template v-else>\n    <list-row\n      v-for=\"row in TheData\"\n        :key=\"row.id\"\n        :row-id=\"row.id\"\n        :index=\"row.index\"\n        :icon=\"row.icon\"\n        :indent=\"row.indent\"\n        :data=\"row.rawData\"\n        :display=\"DisplayItems\"\n        :current-id=\"theCurrentId\"\n        :checked-ids=\"theCheckedIds\"\n        :changed-id=\"changedId\"\n        :checkable=\"checkable\"\n        :selectable=\"selectable\"\n        :openable=\"openable\"\n        :row-toggle-key=\"TheRowToggleKey\"\n        :class-name=\"itemClassName\"\n        @checker=\"OnRowCheckerClick\"\n        @select=\"OnRowSelect\"\n        @open=\"OnRowOpen\"/>\n  </template>\n</div>"); //============================================================
  // JOIN: ti/list/ti-list.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////
      data: function data() {
        return {
          myData: []
        };
      },
      //////////////////////////////////////////
      props: {
        "iconBy": {
          type: [String, Function],
          "default": null
        },
        "indentBy": {
          type: [String, Function],
          "default": null
        },
        "itemClassName": undefined,
        "display": {
          type: [Object, String, Array],
          "default": function _default() {
            return {
              key: "..",
              comType: "ti-label"
            };
          }
        },
        "border": {
          type: Boolean,
          "default": true
        },
        "autoScrollIntoView": {
          type: Boolean,
          "default": true
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass({
            "is-hoverable": this.hoverable,
            "show-border": this.border
          });
        },
        //--------------------------------------
        getRowIndent: function getRowIndent() {
          var _this110 = this;

          if (_.isFunction(this.indentBy)) {
            return function (it) {
              return _this110.indentBy(it);
            };
          }

          if (_.isString(this.indentBy)) {
            return function (it) {
              return _.get(it, _this110.indentBy);
            };
          }

          return function (it) {
            return 0;
          };
        },
        //--------------------------------------
        getRowIcon: function getRowIcon() {
          var _this111 = this;

          if (_.isFunction(this.iconBy)) {
            return function (it) {
              return _this111.iconBy(it);
            };
          }

          if (_.isString(this.iconBy)) {
            return function (it) {
              return _.get(it, _this111.iconBy);
            };
          }

          return function (it) {
            return null;
          };
        },
        //--------------------------------------
        DisplayItems: function DisplayItems() {
          var diss = _.concat(this.display); // Prepare the return list


          var items = []; // Loop each items

          var _iterator43 = _createForOfIteratorHelper(diss),
              _step43;

          try {
            for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {
              var dis = _step43.value;
              var item = this.evalFieldDisplayItem(dis);

              if (item) {
                items.push(item);
              }
            } // Done

          } catch (err) {
            _iterator43.e(err);
          } finally {
            _iterator43.f();
          }

          return items;
        },
        //--------------------------------------
        TheData: function TheData() {
          return this.myData;
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnClickTop: function OnClickTop($event) {
          if (this.cancelable) {
            // Click The body or top to cancel the row selection
            if (Ti.Dom.hasOneClass($event.target, 'ti-list', 'list-item')) {
              this.cancelRow();
            }
          }
        },
        //--------------------------------------
        scrollCurrentIntoView: function scrollCurrentIntoView() {
          // Guard
          if (!this.autoScrollIntoView || Ti.Util.isNil(this.myCurrentId)) {
            return;
          }

          var _Ti$Dom$findAll = Ti.Dom.findAll(".list-row.is-current", this.$el),
              _Ti$Dom$findAll2 = _slicedToArray(_Ti$Dom$findAll, 1),
              $first = _Ti$Dom$findAll2[0];

          if ($first) {
            var rect = Ti.Rects.createBy($first);
            var view = Ti.Rects.createBy(this.$el);

            if (!view.contains(rect)) {
              this.$el.scrollTop += rect.top - view.top;
            }
          }
        },
        //--------------------------------------
        __ti_shortcut: function __ti_shortcut(uniqKey) {
          //console.log("ti-list", uniqKey)
          if ("ARROWUP" == uniqKey) {
            this.selectPrevRow({
              payload: {
                byKeyboardArrow: true
              }
            });
            this.scrollCurrentIntoView();
            return {
              prevent: true,
              stop: true,
              quit: true
            };
          }

          if ("ARROWDOWN" == uniqKey) {
            this.selectNextRow({
              payload: {
                byKeyboardArrow: true
              }
            });
            this.scrollCurrentIntoView();
            return {
              prevent: true,
              stop: true,
              quit: true
            };
          }
        } //--------------------------------------

      },
      ///////////////////////////////////////////////////
      watch: {
        "data": {
          handler: function () {
            var _handler = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee56(newVal, oldVal) {
              var _this112 = this;

              var isSame;
              return regeneratorRuntime.wrap(function _callee56$(_context56) {
                while (1) {
                  switch (_context56.prev = _context56.next) {
                    case 0:
                      isSame = _.isEqual(newVal, oldVal);

                      if (isSame) {
                        _context56.next = 6;
                        break;
                      }

                      _context56.next = 4;
                      return this.evalData(function (it) {
                        it.icon = _this112.getRowIcon(it.item);
                        it.indent = _this112.getRowIndent(it.item);
                      });

                    case 4:
                      this.myData = _context56.sent;
                      this.$nextTick(function () {
                        _this112.scrollCurrentIntoView();
                      });

                    case 6:
                    case "end":
                      return _context56.stop();
                  }
                }
              }, _callee56, this);
            }));

            function handler(_x3, _x4) {
              return _handler.apply(this, arguments);
            }

            return handler;
          }(),
          immediate: true
        },
        "myCurrentId": function myCurrentId() {
          var _this113 = this;

          this.$nextTick(function () {
            _this113.scrollCurrentIntoView();
          });
        }
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/list/ti-list.mjs", _M);
  })(); //============================================================
  // JOIN: ti/list/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/list/_com.json", {
    "name": "ti-list",
    "globally": true,
    "template": "./ti-list.html",
    "props": "@com:ti/support/list_props.mjs",
    "methods": "@com:ti/support/field_display.mjs",
    "mixins": ["@com:ti/support/list_mixins.mjs", "./ti-list.mjs"],
    "components": ["./com/list-row", "@com:ti/label"]
  }); //============================================================
  // JOIN: ti/list/_hmaker.json
  //============================================================

  Ti.Preload("ti/com/ti/list/_hmaker.json", {
    "icon": "im-data",
    "title": "i18n:com-list",
    "screen": ["desktop", "tablet"],
    "manual": true,
    "tutorial": true,
    "video": true,
    "editComType": "ti-form",
    "editComConf": {
      "fields": []
    }
  }); //============================================================
  // JOIN: ti/loading/ti-loading.html
  //============================================================

  Ti.Preload("ti/com/ti/loading/ti-loading.html", "<div class=\"ti-loading\"\n  :class=\"TopClass\">\n  <ti-icon class=\"as-icon\" :value=\"icon\"/>\n  <div class=\"as-text\">{{text|i18n}}</div>\n</div>"); //============================================================
  // JOIN: ti/loading/ti-loading.mjs
  //============================================================

  (function () {
    var _M = {
      props: {
        icon: {
          type: String,
          "default": "fas-spinner fa-spin"
        },
        text: {
          type: String,
          "default": "i18n:loading"
        }
      },
      computed: {
        TopClass: function TopClass() {
          return this.getTopClass();
        }
      }
    };
    Ti.Preload("ti/com/ti/loading/ti-loading.mjs", _M);
  })(); //============================================================
  // JOIN: ti/loading/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/loading/_com.json", {
    "name": "ti-loading",
    "globally": true,
    "template": "./ti-loading.html",
    "mixins": ["./ti-loading.mjs"]
  }); //============================================================
  // JOIN: ti/logging/ti-logging.html
  //============================================================

  Ti.Preload("ti/com/ti/logging/ti-logging.html", "<div class=\"ti-logging\"\n  :class=\"TopClass\"\n  :style=\"TopStyle\">\n  <pre ref=\"pre\"><div \n    v-for=\"(line, index) in lines\"\n      :data-index=\"index\"\n      >{{line || '&nbsp;'}}</div></pre>    \n</div>"); //============================================================
  // JOIN: ti/logging/ti-logging.mjs
  //============================================================

  (function () {
    var _M = {
      props: {
        "lines": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "width": {
          type: [Number, String],
          "default": null
        },
        "height": {
          type: [Number, String],
          "default": null
        }
      },
      computed: {
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        TopStyle: function TopStyle() {
          return Ti.Css.toStyle({
            width: this.width,
            height: this.height
          });
        }
      },
      methods: {
        scrollToBottom: function scrollToBottom() {
          var $pre = this.$refs.pre;
          $pre.scrollTop = $pre.scrollHeight;
        }
      },
      watch: {
        "lines": function lines() {
          var _this114 = this;

          //console.log(this.lines.length)
          this.$nextTick(function () {
            _this114.scrollToBottom();
          });
        }
      }
    };
    Ti.Preload("ti/com/ti/logging/ti-logging.mjs", _M);
  })(); //============================================================
  // JOIN: ti/logging/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/logging/_com.json", {
    "name": "ti-logging",
    "globally": true,
    "template": "./ti-logging.html",
    "mixins": ["./ti-logging.mjs"]
  }); //============================================================
  // JOIN: ti/media/binary/ti-media-binary.html
  //============================================================

  Ti.Preload("ti/com/ti/media/binary/ti-media-binary.html", "<div class=\"ti-media-binary\">\n  <div class=\"tob-icon\">\n    <ti-icon v-if=\"icon\" :value=\"icon\" size=\"1.28rem\"/>\n  </div>\n  <div class=\"tob-title\">\n    {{title}}\n  </div>\n  <div class=\"tob-actions\">\n    <a :href=\"src\">\n      <ti-icon value=\"download\"/>\n      <span>{{'download'|i18n}}</span>\n    </a>\n  </div>\n</div>"); //============================================================
  // JOIN: ti/media/binary/ti-media-binary.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      props: {
        "icon": {
          type: [String, Object],
          "default": null
        },
        "title": {
          type: String,
          "default": null
        },
        "src": {
          type: String,
          "default": null
        },
        "width": {
          type: [String, Number],
          "default": ""
        },
        "height": {
          type: [String, Number],
          "default": ""
        }
      },
      computed: {},
      methods: {}
    };
    Ti.Preload("ti/com/ti/media/binary/ti-media-binary.mjs", _M);
  })(); //============================================================
  // JOIN: ti/media/binary/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/media/binary/_com.json", {
    "name": "ti-media-binary",
    "globally": true,
    "template": "./ti-media-binary.html",
    "mixins": ["./ti-media-binary.mjs"]
  }); //============================================================
  // JOIN: ti/media/image/ti-media-image.html
  //============================================================

  Ti.Preload("ti/com/ti/media/image/ti-media-image.html", "<div class=\"ti-media-image\" \n     :class=\"topClass\"\n     :style=\"topStyle\"\n     :fit-mode=\"fitMode\"\n     v-drag-off>\n  <div class=\"as-con\" ref=\"con\">\n    <img ref=\"the_image\"\n      :src=\"src\"\n      :style=\"theImageStyle\"\n      @load=\"onImageLoaded\"\n      @dblclick.stop=\"onToggleImageFitMode\">\n  </div>\n</div>"); //============================================================
  // JOIN: ti/media/image/ti-media-image.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////
      data: function data() {
        return {
          naturalWidth: -1,
          naturalHeight: -1,
          viewportWidth: -1,
          viewportHeight: -1,
          fitMode: "contain",
          imgLoading: true,
          inViewport: false
        };
      },
      ///////////////////////////////////
      props: {
        "src": {
          type: String,
          "default": null
        },
        "width": {
          type: [String, Number],
          "default": ""
        },
        "height": {
          type: [String, Number],
          "default": ""
        }
      },
      ///////////////////////////////////
      computed: {
        topClass: function topClass() {
          return Ti.Css.mergeClassName({
            "as-fitmode-cover": this.fitMode == "cover",
            "as-fitmode-contain": this.fitMode == "contain",
            "is-img-loading": this.imgLoading,
            "is-in-viewport": this.inViewport
          }, this.className);
        },
        topStyle: function topStyle() {
          return {
            width: this.width,
            height: this.height
          };
        },
        theImageStyle: function theImageStyle() {
          var css = {
            "visibility": "hidden",
            "position": "relative"
          }; // If ready, then resize to zoom

          if (this.naturalWidth > 0 && this.naturalHeight > 0) {
            // Get the measure of viewport
            var viewport = Ti.Rects.create({
              top: 0,
              left: 0,
              width: this.viewportWidth,
              height: this.viewportHeight
            }); // Get the measure of image

            var r_img = Ti.Rects.create({
              top: 2,
              left: 2,
              width: this.naturalWidth,
              height: this.naturalHeight
            }); // Zoom it

            var r_im2 = r_img.zoomTo({
              width: viewport.width,
              height: viewport.height,
              mode: this.fitMode
            }); // mark

            this.inViewport = viewport.contains(r_im2, 2); // append to css

            css.width = r_im2.width;
            css.height = r_im2.height;
            css.left = (viewport.width - r_im2.width) / 2;
            css.top = (viewport.height - r_im2.height) / 2;
            css.visibility = "visible";
          } // done


          return Ti.Css.toStyle(css);
        }
      },
      ///////////////////////////////////
      methods: {
        onImageLoaded: function onImageLoaded() {
          var $img = this.$refs.the_image;

          if ($img) {
            this.naturalWidth = $img.naturalWidth;
            this.naturalHeight = $img.naturalHeight;
            this.imgLoading = false;
          }
        },
        onResizeViewport: function onResizeViewport() {
          var r_vpt = Ti.Rects.createBy(this.$refs.con);
          this.viewportWidth = r_vpt.width;
          this.viewportHeight = r_vpt.height;
        },
        onToggleImageFitMode: function onToggleImageFitMode() {
          this.fitMode = {
            "contain": "cover",
            "cover": "contain"
          }[this.fitMode];
        }
      },
      ///////////////////////////////////
      mounted: function mounted() {
        var _this115 = this;

        Ti.Viewport.watch(this, {
          resize: function resize() {
            _this115.onResizeViewport();
          }
        });
        this.onResizeViewport();
      },
      ///////////////////////////////////
      beforeDestroy: function beforeDestroy() {
        Ti.Viewport.unwatch(this);
      } ///////////////////////////////////

    };
    Ti.Preload("ti/com/ti/media/image/ti-media-image.mjs", _M);
  })(); //============================================================
  // JOIN: ti/media/image/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/media/image/_com.json", {
    "name": "ti-media-image",
    "globally": true,
    "template": "./ti-media-image.html",
    "mixins": ["./ti-media-image.mjs"]
  }); //============================================================
  // JOIN: ti/media/video/ti-media-video.html
  //============================================================

  Ti.Preload("ti/com/ti/media/video/ti-media-video.html", "<div class=\"ti-media-video\"\n    :class=\"topClass\"\n    :style=\"topStyle\"\n    v-drag-off>\n    <video ref=\"the_video\"\n      :src=\"src\"\n      controls\n      @loadeddata=\"onVideoLoaded\"/>\n    <div class=\"tov-loading\" v-if=\"loading\">\n      <ti-loading/>\n    </div>\n</div>"); //============================================================
  // JOIN: ti/media/video/ti-media-video.mjs
  //============================================================

  (function () {
    var resize = function resize(evt) {
      this.doResizeVideo();
    }; //-----------------------------------


    var _M = {
      inheritAttrs: false,
      data: function data() {
        return {
          naturalWidth: -1,
          naturalHeight: -1,
          fitMode: "none",
          loading: true
        };
      },
      props: {
        "src": {
          type: String,
          "default": null
        },
        "width": {
          type: [String, Number],
          "default": ""
        },
        "height": {
          type: [String, Number],
          "default": ""
        }
      },
      computed: {
        topClass: function topClass() {
          return {
            "as-none": this.fitMode == "none",
            "as-contain": this.fitMode == "contain",
            "as-loading": this.loading
          };
        },
        topStyle: function topStyle() {
          return {
            width: this.width,
            height: this.height
          };
        }
      },
      methods: {
        onVideoLoaded: function onVideoLoaded() {
          var $video = this.$refs.the_video;
          this.naturalWidth = $video.videoWidth;
          this.naturalHeight = $video.videoHeight; //console.log(this.naturalWidth, this.naturalHeight)

          this.loading = false; //$video.volume = 1

          this.doResizeVideo();
        },
        isContainsByViewport: function isContainsByViewport() {
          // Get the viewport
          var vpRect = Ti.Rects.createBy(this.$el);
          var imRect = Ti.Rects.create(_objectSpread({}, vpRect.raw("tl"), {
            width: this.naturalWidth,
            height: this.naturalHeight
          })); // console.log("vpRect", vpRect.toString())
          // console.log("imRect", imRect.toString())

          return vpRect.contains(imRect);
        },
        doResizeVideo: function doResizeVideo() {
          // Image is in viewport
          if (this.isContainsByViewport()) {
            this.fitMode = "none";
          } // Image is too big, mark "cover"
          else {
              this.fitMode = "contain";
            }
        }
      },
      mounted: function mounted() {
        Ti.Viewport.watch(this, {
          resize: resize
        });
      },
      beforeDestroy: function beforeDestroy() {
        Ti.Viewport.unwatch(this);
      }
    };
    Ti.Preload("ti/com/ti/media/video/ti-media-video.mjs", _M);
  })(); //============================================================
  // JOIN: ti/media/video/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/media/video/_com.json", {
    "name": "ti-media-video",
    "globally": true,
    "template": "./ti-media-video.html",
    "mixins": ["./ti-media-video.mjs"]
  }); //============================================================
  // JOIN: ti/month/ti-month.html
  //============================================================

  Ti.Preload("ti/com/ti/month/ti-month.html", "<div class=\"ti-col-data as-month\" \n  :class=\"topClass\" \n  :style=\"topStyle\">\n  <ti-list v-for=\"list in theListGroup\"\n    :key=\"list.key\"\n    :data=\"list.data\"\n    :display=\"'text'\"\n    :current-id=\"list.currentId\"\n    :cancelable=\"false\"\n    @select=\"onListSelected(list.key, $event)\"/>\n</div>"); //============================================================
  // JOIN: ti/month/ti-month.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      ////////////////////////////////////////////////////
      props: {
        "value": {
          type: [String, Number, Date],
          "default": null
        },
        // the height of drop list
        "height": {
          type: [Number, String],
          "default": 200
        },
        "beginYear": {
          type: [Number, String],
          "default": 1970
        },
        "endYear": {
          type: [Number, String],
          "default": new Date().getFullYear() + 1
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        topClass: function topClass() {
          return this.getTopClass();
        },
        //------------------------------------------------
        topStyle: function topStyle() {
          return {
            "height": Ti.Css.toSize(this.height)
          };
        },
        //------------------------------------------------
        theDate: function theDate() {
          return Ti.Types.toDate(this.value, null);
        },
        //------------------------------------------------
        theListGroup: function theListGroup() {
          return [this.createList("year", this.beginYear * 1, this.endYear * 1, this.theDate ? this.theDate.getFullYear() : null, {
            reverse: true
          }), this.createList("month", 0, 12, this.theDate ? this.theDate.getMonth() : null, {
            getText: function getText(val) {
              var abbr = Ti.DateTime.getMonthAbbr(val);
              return Ti.I18n.get(abbr);
            }
          })];
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        createList: function createList(key, fromVal, toVal, currentVal) {
          var _ref58 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {},
              _ref58$reverse = _ref58.reverse,
              reverse = _ref58$reverse === void 0 ? false : _ref58$reverse,
              _ref58$getText = _ref58.getText,
              getText = _ref58$getText === void 0 ? function (val) {
            return val;
          } : _ref58$getText;

          var list = {
            key: key,
            currentId: "R-".concat(currentVal),
            data: []
          };

          for (var i = fromVal; i < toVal; i++) {
            list.data.push({
              id: "R-".concat(i),
              value: i,
              text: getText(i)
            });
          }

          if (reverse) {
            list.data.reverse();
          }

          return list;
        },
        //------------------------------------------------
        onListSelected: function onListSelected(key) {
          var _ref59 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
              current = _ref59.current;

          var val = _.get(current, "value") || 0;
          var theDate = this.theDate || new Date();
          var d = {
            "month": function month(m) {
              return new Date(theDate.getFullYear(), m);
            },
            "year": function year(y) {
              return new Date(y, theDate.getMonth());
            }
          }[key](val);
          this.$notify("change", d);
        } //------------------------------------------------

      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/month/ti-month.mjs", _M);
  })(); //============================================================
  // JOIN: ti/month/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/month/_com.json", {
    "name": "ti-month",
    "globally": true,
    "template": "./ti-month.html",
    "mixins": ["./ti-month.mjs"],
    "components": ["@com:ti/list"]
  }); //============================================================
  // JOIN: ti/obj/pair/ti-obj-pair.html
  //============================================================

  Ti.Preload("ti/com/ti/obj/pair/ti-obj-pair.html", "<div class=\"ti-obj-pair\" \n    :class=\"TopClass\">\n  <!--\n    Empty\n  -->\n  <ti-loading\n    v-if=\"isEmpty\"\n      v-bind=\"blankAs\"/>\n  <!--\n    Show Pair\n  -->\n  <template v-else>\n    <table>\n      <thead v-if=\"showHead\">\n        <tr>\n          <th class=\"as-name\" >{{nameText  | i18n}}</th>\n          <th class=\"as-value\">{{valueText | i18n}}</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr\n          v-for=\"pa in myPairList\">\n          <td class=\"as-name\" >{{pa.title}}</td>\n          <td class=\"as-value\">{{pa.text || pa.value}}</td>\n        </tr>\n      </tbody>\n    </table>\n  </template>\n</div>"); //============================================================
  // JOIN: ti/obj/pair/ti-obj-pair.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////
      data: function data() {
        return {
          myPairList: []
        };
      },
      ////////////////////////////////////////////////
      props: {
        //-----------------------------------
        // Data
        //-----------------------------------
        "value": {
          type: [String, Object],
          "default": undefined
        },
        //-----------------------------------
        // Behavior
        //-----------------------------------
        //-----------------------------------
        // Aspect
        //-----------------------------------
        "nameText": {
          type: String,
          "default": "i18n:name"
        },
        "valueText": {
          type: String,
          "default": "i18n:value"
        },
        "fields": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "onlyFields": {
          type: Boolean,
          "default": false
        },
        "blankAs": {
          type: Object,
          "default": function _default() {
            return {
              icon: "im-plug",
              "default": undefined
            };
          }
        },
        "showHead": {
          type: Boolean,
          "default": true
        },
        "autoI18n": {
          type: Boolean,
          "default": true
        } //-----------------------------------
        // Measure
        //-----------------------------------

      },
      ////////////////////////////////////////////////
      computed: {
        //--------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //--------------------------------------------
        FieldsMap: function FieldsMap() {
          var map = {};

          var _iterator44 = _createForOfIteratorHelper(this.fields),
              _step44;

          try {
            for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {
              var fld = _step44.value;
              if (fld.name) map[fld.name] = fld;
            }
          } catch (err) {
            _iterator44.e(err);
          } finally {
            _iterator44.f();
          }

          return map;
        },
        //--------------------------------------------
        TheData: function TheData() {
          if (!this.value) {
            return {};
          }

          if (_.isString(this.value)) {
            return JSON.parse(this.value);
          }

          if (_.isPlainObject(this.value)) return this.value;
          return {};
        },
        //--------------------------------------------
        isEmpty: function isEmpty() {
          return _.isEmpty(this.TheData);
        } //--------------------------------------------

      },
      ////////////////////////////////////////////////
      methods: {
        //--------------------------------------------
        evalThePairList: function evalThePairList() {
          var _this116 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee57() {
            var pairs, list, _iterator45, _step45, fld, pa, title, d, remains;

            return regeneratorRuntime.wrap(function _callee57$(_context57) {
              while (1) {
                switch (_context57.prev = _context57.next) {
                  case 0:
                    // Flat pairs  [keyPath] : [pairValue]
                    pairs = {};

                    _this116.joinPairs(pairs, [], _this116.TheData); // format list


                    list = [];
                    _iterator45 = _createForOfIteratorHelper(_this116.fields);
                    _context57.prev = 4;

                    _iterator45.s();

                  case 6:
                    if ((_step45 = _iterator45.n()).done) {
                      _context57.next = 21;
                      break;
                    }

                    fld = _step45.value;
                    pa = pairs[fld.name];

                    if (!pa) {
                      _context57.next = 19;
                      break;
                    }

                    // Title
                    title = fld.title || fld.name;

                    if (_this116.autoI18n) {
                      title = Ti.I18n.text(title);
                    }

                    pa.title = title; // Mapping Value

                    if (!fld.dict) {
                      _context57.next = 18;
                      break;
                    }

                    d = Ti.DictFactory.CheckDict(fld.dict);
                    _context57.next = 17;
                    return d.getItemText(pa.value);

                  case 17:
                    pa.text = _context57.sent;

                  case 18:
                    // Push
                    list.push(pa);

                  case 19:
                    _context57.next = 6;
                    break;

                  case 21:
                    _context57.next = 26;
                    break;

                  case 23:
                    _context57.prev = 23;
                    _context57.t0 = _context57["catch"](4);

                    _iterator45.e(_context57.t0);

                  case 26:
                    _context57.prev = 26;

                    _iterator45.f();

                    return _context57.finish(26);

                  case 29:
                    // find remain
                    if (!_this116.onlyFields) {
                      remains = [];

                      _.forEach(pairs, function (pa) {
                        if (pa.name && !_this116.FieldsMap[pa.name]) {
                          pa.title = pa.name;
                          remains.push(pa);
                        }
                      });

                      list.push.apply(list, remains);
                    }

                    _this116.myPairList = list;

                  case 31:
                  case "end":
                    return _context57.stop();
                }
              }
            }, _callee57, null, [[4, 23, 26, 29]]);
          }))();
        },
        //--------------------------------------------
        joinPairs: function joinPairs() {
          var _this117 = this;

          var pairs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
          var obj = arguments.length > 2 ? arguments[2] : undefined;

          // recursion
          if (_.isPlainObject(obj)) {
            _.forEach(obj, function (val, key) {
              _this117.joinPairs(pairs, _.concat(path, key), val);
            });
          } // Array
          else if (_.isArray(obj)) {
              for (var i = 0; i < obj.length; i++) {
                var val = obj[i];
                this.joinPairs(pairs, _.concat(path, i + ""), val);
              }
            } // join pair
            else {
                var name = path.join(".");
                var value = Ti.Types.toStr(obj);
                pairs[name] = {
                  name: name,
                  value: value
                };
              }
        } //--------------------------------------------

      },
      ////////////////////////////////////////////////
      watch: {
        "value": "evalThePairList"
      },
      ////////////////////////////////////////////////
      mounted: function mounted() {
        this.evalThePairList();
      } ////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/obj/pair/ti-obj-pair.mjs", _M);
  })(); //============================================================
  // JOIN: ti/obj/pair/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/obj/pair/_com.json", {
    "name": "ti-obj-pair",
    "globally": true,
    "template": "./ti-obj-pair.html",
    "mixins": ["./ti-obj-pair.mjs"]
  }); //============================================================
  // JOIN: ti/obj/thumb/ti-obj-thumb.html
  //============================================================

  Ti.Preload("ti/com/ti/obj/thumb/ti-obj-thumb.html", "<div class=\"ti-obj-thumb\" \n    :class=\"TopClass\">\n  <!--\n    Preview && Process Bar\n  -->\n  <header>\n    <!--Preview Part-->\n    <div class=\"as-preview\">\n      <!-- Local Image -->\n      <template v-if=\"isLocalImage\">\n        <img ref=\"localImage\" is-local-file>\n      </template>\n      <!-- Local File -->\n      <template v-else-if=\"isLocalFile\">\n        <ti-icon :value=\"LocalFileIcon\"/>\n      </template>\n      <!-- Remote Image -->\n      <template v-else-if=\"'image'==preview.type\">\n        <img :src=\"preview.value\">\n      </template>\n      <!-- Icon -->\n      <template v-else>\n        <ti-icon :value=\"preview\"/>\n      </template>\n      <!--Badge-->\n      <template v-if=\"badges\">\n        <div v-if=\"badges.NW\" class=\"as-badge at-nw\"><ti-icon :value=\"badges.NW\"/></div>\n        <div v-if=\"badges.NE\" class=\"as-badge at-ne\"><ti-icon :value=\"badges.NE\"/></div>\n        <div v-if=\"badges.SW\" class=\"as-badge at-sw\"><ti-icon :value=\"badges.SW\"/></div>\n        <div v-if=\"badges.SE\" class=\"as-badge at-se\"><ti-icon :value=\"badges.SE\"/></div>\n      </template>\n    </div>\n    <!--Process bar-->\n    <div v-if=\"isShowProgress\"\n      class=\"as-progress ti-progress-bar\">\n      <span class=\"bar-tip\">{{ProgressTip}}</span>\n      <b class=\"bar-outer\">\n        <em class=\"bar-inner\" \n            :style=\"ProgressStyle\"></em>\n      </b>\n    </div>\n  </header>\n  <!--\n    Status Mask\n  -->\n  <section class=\"as-status\" v-if=\"status\">\n    <ti-icon \n      :value=\"status\"\n      font-size=\"2em\"\n      width=\"3em\"\n      height=\"3em\"/>\n  </section>\n  <!--\n    Footer for item title text\n  -->\n  <footer v-if=\"showFooter\">\n    <div class=\"as-title\">\n      <a v-if=\"hasHref\"\n        :href=\"TheHref\"\n        @click.left.prevent=\"OnClickTitle\">{{TheTitle}}</a>\n      <span v-else>{{TheTitle}}</span>\n    </div>\n  </footer>\n  <!--\n    Remove Icon\n  -->\n  <div \n    v-if=\"removeIcon\"\n      class=\"as-remove\"\n      @click.left.stop=\"OnRemove\">\n      <ti-icon :value=\"removeIcon\"/>\n  </div>\n</div>"); //============================================================
  // JOIN: ti/obj/thumb/ti-obj-thumb.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////
      props: {
        "index": {
          type: Number,
          "default": -1
        },
        "id": {
          type: String,
          "default": undefined
        },
        // The text to present the object
        "title": {
          type: String,
          "default": undefined
        },
        // The URL of thumb
        "preview": {
          type: [String, Object],
          "default": "broken_image"
        },
        "href": {
          type: String,
          "default": undefined
        },
        "status": {
          type: [String, Object],
          "default": undefined
        },
        "progress": {
          type: Number,
          "default": -1
        },
        "visibility": {
          type: String,
          "default": "show" // `show|weak|hide`

        },
        // true - alwasy show the footer part
        "showFooter": {
          type: Boolean,
          "default": true
        },
        "badges": {
          type: Object,
          "default": function _default() {
            return {
              "NW": null,
              "NE": null,
              "SW": null,
              "SE": null
            };
          }
        },
        "removeIcon": {
          type: [String, Object],
          "default": undefined
        },
        "onTitle": {
          type: [String, Function, Boolean],
          "default": undefined
        }
      },
      ////////////////////////////////////////////////
      watch: {
        "preview": function preview() {
          this.renderLocalFile();
        }
      },
      ////////////////////////////////////////////////
      computed: {
        //--------------------------------------------
        TopClass: function TopClass() {
          var _this118 = this;

          return this.getTopClass({
            "is-hide": 'hide' == this.visibility,
            "is-weak": 'weak' == this.visibility
          }, function () {
            return _this118.status ? "is-status-".concat(_this118.status) : null;
          });
        },
        //--------------------------------------------
        PreviewType: function PreviewType() {
          return _.get(this.preview, "type") || "auto";
        },
        //--------------------------------------------
        isLocalFile: function isLocalFile() {
          return "localFile" == this.PreviewType;
        },
        //--------------------------------------------
        isLocalImage: function isLocalImage() {
          return this.isLocalFile && /^image\//.test(this.LocalFile.type);
        },
        //--------------------------------------------
        LocalFile: function LocalFile() {
          if (this.isLocalFile) {
            return this.preview.value;
          }
        },
        //--------------------------------------------
        LocalFileIcon: function LocalFileIcon() {
          if (this.isLocalFile) {
            var file = this.LocalFile;
            var oF = {
              type: Ti.Util.getSuffixName(file.name),
              mime: file.type,
              race: Ti.Util.isNil(file.type) ? "DIR" : "FILE"
            };
            return Ti.Icons.get(oF);
          }
        },
        //--------------------------------------------
        isShowProgress: function isShowProgress() {
          return this.progress >= 0;
        },
        //--------------------------------------------
        ProgressTip: function ProgressTip() {
          return Ti.S.toPercent(this.progress, {
            fixed: 1,
            auto: false
          });
        },
        //--------------------------------------------
        ProgressStyle: function ProgressStyle() {
          return {
            width: this.ProgressTip
          };
        },
        //--------------------------------------------
        hasHref: function hasHref() {
          return this.href ? true : false;
        },
        //--------------------------------------------
        TheHref: function TheHref() {
          return encodeURI(this.href);
        },
        //--------------------------------------------
        TheTitle: function TheTitle() {
          return Ti.I18n.text(this.title);
        } //--------------------------------------------

      },
      ////////////////////////////////////////////////
      methods: {
        //--------------------------------------------
        OnRemove: function OnRemove() {
          var context = this.genEventContext();
          this.$notify("remove", context);
        },
        //--------------------------------------------
        OnClickTitle: function OnClickTitle($event) {
          var context = this.genEventContext(); // String -> Emit event

          if (false === this.onTitle) {
            $event.stopPropagation();
          } // Notify
          else if (_.isString(this.onTitle)) {
              this.$notify(this.onTitle, context);
            } // Function -> Handle
            else if (_.isFunction(this.onTitle)) {
                $event.stopPropagation();
                this.onTitle(context);
              }
        },
        //--------------------------------------------
        genEventContext: function genEventContext() {
          return {
            index: this.index,
            id: this.id,
            title: this.title
          };
        },
        //--------------------------------------------
        renderLocalFile: function renderLocalFile() {
          var _this119 = this;

          //console.log(this.LocalFile)
          if (this.isLocalImage) {
            var reader = new FileReader();

            reader.onload = function (evt) {
              if (_this119.$refs.localImage) {
                _this119.$refs.localImage.src = evt.target.result;
              }
            };

            reader.readAsDataURL(this.preview.value);
          }
        } //--------------------------------------------

      },
      ////////////////////////////////////////////////
      mounted: function mounted() {
        this.renderLocalFile();
      } ////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/obj/thumb/ti-obj-thumb.mjs", _M);
  })(); //============================================================
  // JOIN: ti/obj/thumb/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/obj/thumb/_com.json", {
    "name": "ti-obj-thumb",
    "globally": true,
    "template": "./ti-obj-thumb.html",
    "mixins": ["./ti-obj-thumb.mjs"]
  }); //============================================================
  // JOIN: ti/obj/tile/ti-obj-tile.html
  //============================================================

  Ti.Preload("ti/com/ti/obj/tile/ti-obj-tile.html", "<div class=\"ti-obj-tile\" \n    :class=\"topClass\">\n  <!--\n    Preview Image\n  -->\n  <div class=\"as-preview\">\n    <a v-if=\"hasHref\"\n      :href=\"href\"\n      @click=\"onClick\"\n      ><ti-icon \n        :value=\"preview\"\n        :height=\"previewHeight\"/></a>\n    <ti-icon v-else\n      :value=\"preview\"\n      :height=\"previewHeight\"/>\n  </div>\n  <!--\n    Title\n  -->\n  <div class=\"as-title\">\n    <a v-if=\"hasHref\"\n      :href=\"href\"\n      @click=\"onClick\"\n    >{{title}}</a>\n    <!--\n      Without Href\n    -->\n    <span v-else>{{title}}</span>\n  </div>\n  <!--\n    Footer\n  -->\n  <div v-if=\"hasBrief\"\n    class=\"as-brief\">\n    <span>{{brief}}</span>\n  </div>\n</div>"); //============================================================
  // JOIN: ti/obj/tile/ti-obj-tile.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      ////////////////////////////////////////////////
      props: {
        "index": {
          type: Number,
          "default": -1
        },
        "id": {
          type: String,
          "default": null
        },
        // The URL of thumb
        "preview": {
          type: [Object, String],
          "default": function _default() {
            return {
              type: "font",
              value: "broken_image"
            };
          }
        },
        // The preview part height
        "previewHeight": {
          type: [String, Number],
          "default": null
        },
        "hover": {
          type: String,
          "default": null,
          validator: function validator(val) {
            return !val || /^(up|down|left|right|zoom)$/.test(val);
          }
        },
        // The text to present the object
        "title": {
          type: String,
          "default": null
        },
        "href": {
          type: String,
          "default": null
        },
        // true - alwasy show the footer part
        "brief": {
          type: String,
          "default": null
        },
        "emitBy": {
          type: Object,
          "default": function _default() {
            return {
              evantName: null,
              payload: {}
            };
          }
        }
      },
      ////////////////////////////////////////////////
      computed: {
        topClass: function topClass() {
          var klass = [this.className];

          if (this.hover) {
            klass.push("on-hover");
            klass.push("on-hover-".concat(this.hover));
          }

          return klass;
        },
        hasHref: function hasHref() {
          return this.href ? true : false;
        },
        hasBrief: function hasBrief() {
          return this.brief ? true : false;
        }
      },
      ////////////////////////////////////////////////
      methods: {
        //--------------------------------------------
        onClick: function onClick(evt) {
          // Prevent default and emit event
          if (this.emitBy.eventName) {
            evt.preventDefault();
            var eventName = this.emitBy.eventName;
            var payload = this.emitBy.payload || {}; //............................

            console.log("onClick", eventName, payload);
            this.$notify(eventName, payload);
          }
        } //--------------------------------------------

      } ////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/obj/tile/ti-obj-tile.mjs", _M);
  })(); //============================================================
  // JOIN: ti/obj/tile/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/obj/tile/_com.json", {
    "name": "ti-obj-tile",
    "globally": true,
    "template": "./ti-obj-tile.html",
    "mixins": ["./ti-obj-tile.mjs"]
  }); //============================================================
  // JOIN: ti/paging/button/ti-paging-button.html
  //============================================================

  Ti.Preload("ti/com/ti/paging/button/ti-paging-button.html", "<div class=\"ti-paging-button\"\n  :class=\"TopClass\">\n  <div class=\"as-pg-btn is-prev\" @click.left=\"JumpTo(PN-1)\">\n    <i class=\"im im-angle-left\"></i>\n    <span>{{'i18n:prev'|i18n}}</span>\n  </div>\n  <template \n    v-for=\"btn of BtnList\">\n      <div\n        v-if=\"btn.ellipsis\"\n          class=\"as-ellipsis\">\n          <span>...</span></div>\n      <div\n        v-else\n          class=\"as-pg-btn\"\n          :class=\"btn.className\"\n          @click.left=\"JumpTo(btn.value)\">\n          <span>{{btn.value}}</span></div>\n  </template>\n  <div class=\"as-pg-btn is-next\" @click.left=\"JumpTo(PN+1)\">\n    <span>{{'i18n:next'|i18n}}</span>\n    <i class=\"im im-angle-right\"></i>\n  </div>\n</div>"); //============================================================
  // JOIN: ti/paging/button/ti-paging-button.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////
      props: {
        "value": {
          type: Object,
          "default": function _default() {
            return {
              pn: 0,
              // Page Number
              pgsz: 0,
              // PageSize
              pgc: 0,
              // page count
              sum: 0,
              // Total
              count: 0 // Record in page

            };
          }
        },
        "maxNumber": {
          type: Number,
          "default": 10
        }
      },
      ///////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass({
            "is-first": 1 == this.PN,
            "is-last": this.PN == this.LastPN
          });
        },
        //--------------------------------------
        // 1base
        PN: function PN() {
          return _.get(this.value, "pn");
        },
        //--------------------------------------
        // 1base
        LastPN: function LastPN() {
          return _.get(this.value, "pgc");
        },
        //--------------------------------------
        isFirstPage: function isFirstPage() {
          return 1 == this.PN;
        },
        //--------------------------------------
        isLastPage: function isLastPage() {
          return this.LastPN == this.PN;
        },
        //--------------------------------------
        BtnList: function BtnList() {
          var fullnb = this.maxNumber - 2;
          var remain = this.LastPN - 2;
          var list = [];

          if (remain < fullnb) {
            for (var pn = 1; pn <= this.LastPN; pn++) {
              list.push(this.genBtn(pn));
            }
          } // Move view port
          else {
              var half = fullnb / 2;
              var from = Math.round(this.PN - half);
              var to = Math.round(this.PN + half);

              if (from <= 1) {
                to += 1 - from;
                from = 2;
              } else if (to >= this.LastPN) {
                from -= to - this.LastPN;
                to = this.LastPN - 1;
              } else {
                to--;
              }

              list.push(this.genBtn(1));

              if (from > 2) {
                list.push(this.genBtn(".."));
              }

              for (var i = from; i <= to; i++) {
                list.push(this.genBtn(i));
              }

              if (to < this.LastPN - 2) {
                list.push(this.genBtn(".."));
              }

              list.push(this.genBtn(this.LastPN));
            }

          return list;
        } //--------------------------------------

      },
      ///////////////////////////////////////////
      methods: {
        //--------------------------------------
        genBtn: function genBtn(pn) {
          if (".." == pn) {
            return {
              ellipsis: true
            };
          }

          return {
            value: pn,
            className: {
              "is-current": this.PN == pn
            }
          };
        },
        //--------------------------------------
        JumpTo: function JumpTo(pn) {
          if (pn != this.PN && pn >= 1 && pn <= this.LastPN) {
            this.$notify("change", {
              skip: this.value.pgsz * (pn - 1),
              limit: this.value.pgsz,
              pn: pn,
              pgsz: this.value.pgsz
            });
          }
        }
      } ///////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/paging/button/ti-paging-button.mjs", _M);
  })(); //============================================================
  // JOIN: ti/paging/button/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/paging/button/_com.json", {
    "name": "ti-paging-button",
    "globally": true,
    "template": "./ti-paging-button.html",
    "mixins": ["./ti-paging-button.mjs"]
  }); //============================================================
  // JOIN: ti/paging/jumper/ti-paging-jumper.html
  //============================================================

  Ti.Preload("ti/com/ti/paging/jumper/ti-paging-jumper.html", "<div class=\"ti-paging-jumper\"\n  :class=\"TopClass\">\n  <div \n    class=\"pj-btn\"\n    :class=\"getBtnClass(1)\"\n    @click=\"OnJumpTo(1)\">\n      <ti-icon value=\"zmdi-skip-previous\"/>\n      <span class=\"it-text\">{{'paging-first'|i18n}}</span></div>\n  <div \n    class=\"pj-btn\"\n    :class=\"getBtnClass(value.pn-1)\"\n    @click=\"OnJumpTo(value.pn-1)\">\n      <ti-icon value=\"zmdi-chevron-left\"/>\n      <span class=\"it-text\">{{'paging-prev'|i18n}}</span></div>\n  <div \n    class=\"pj-current\"\n    :class=\"PageNumberClass\"\n    @click=\"OnClickCurrent\">\n    <b>{{value.pn}}</b>\n  </div>\n  <div \n    class=\"pj-btn\"\n    :class=\"getBtnClass(value.pn+1)\"\n    @click=\"OnJumpTo(value.pn+1)\">\n      <span class=\"it-text\">{{'paging-next'|i18n}}</span>\n      <ti-icon value=\"zmdi-chevron-right\"/></div>\n  <div \n    class=\"pj-btn\"\n    :class=\"getBtnClass(value.pgc)\"\n    @click=\"OnJumpTo(value.pgc)\">\n      <span class=\"it-text\">{{'paging-last'|i18n}}</span>\n      <ti-icon value=\"zmdi-skip-next\"/></div>\n  <div\n    v-if=\"hasValue\"\n      class=\"pj-sum\"\n      :class=\"SumClass\"\n      @click=\"OnClickSum\">{{'paging-sum'|i18n(value)}}</div>\n</div>"); //============================================================
  // JOIN: ti/paging/jumper/ti-paging-jumper.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////
      props: {
        "value": {
          type: Object,
          "default": function _default() {
            return {
              pn: 0,
              // Page Number
              pgsz: 0,
              // PageSize
              pgc: 0,
              // page count
              sum: 0,
              // Total
              count: 0 // Record in page

            };
          }
        }
      },
      ///////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //--------------------------------------
        hasValue: function hasValue() {
          return !_.isEmpty(this.value) && this.value.pn > 0;
        },
        //--------------------------------------
        PageNumberClass: function PageNumberClass() {
          return this.hasValue && this.value.pgc > 1 ? "is-enabled" : "is-disabled";
        },
        //--------------------------------------
        SumClass: function SumClass() {
          return this.hasValue && this.value.pgsz > 0 ? "is-enabled" : "is-disabled";
        } //--------------------------------------

      },
      ///////////////////////////////////////////
      methods: {
        //--------------------------------------
        isInvalidPageNumber: function isInvalidPageNumber(pageNumber) {
          return pageNumber <= 0 || pageNumber > this.value.pgc || pageNumber == this.value.pn;
        },
        //--------------------------------------
        getBtnClass: function getBtnClass(pageNumber) {
          if (!this.hasValue || this.isInvalidPageNumber(pageNumber)) {
            return "is-disabled";
          }

          return "is-enabled";
        },
        //--------------------------------------
        OnJumpTo: function OnJumpTo(pageNumber) {
          if (!this.isInvalidPageNumber(pageNumber)) {
            this.$notify("change", {
              skip: this.value.pgsz * (pageNumber - 1),
              limit: this.value.pgsz,
              pn: pageNumber,
              pgsz: this.value.pgsz
            });
          }
        },
        //--------------------------------------
        OnClickCurrent: function OnClickCurrent() {
          var _this120 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee58() {
            var msg, str, pn;
            return regeneratorRuntime.wrap(function _callee58$(_context58) {
              while (1) {
                switch (_context58.prev = _context58.next) {
                  case 0:
                    if (!(_this120.value.pgc <= 1)) {
                      _context58.next = 2;
                      break;
                    }

                    return _context58.abrupt("return");

                  case 2:
                    // Ask new pageNumber
                    msg = Ti.I18n.getf("paging-change-pn", _this120.value);
                    _context58.next = 5;
                    return Ti.Prompt(msg, {
                      value: _this120.value.pn
                    });

                  case 5:
                    str = _context58.sent;

                    if (!(!str || str == _this120.value.pn)) {
                      _context58.next = 8;
                      break;
                    }

                    return _context58.abrupt("return");

                  case 8:
                    // verify the str
                    pn = parseInt(str);

                    if (!(isNaN(pn) || pn <= 0 || pn > _this120.value.pgc)) {
                      _context58.next = 14;
                      break;
                    }

                    msg = Ti.I18n.getf("paging-change-pn-invalid", _this120.value);
                    _context58.next = 13;
                    return Ti.Alert(msg, {
                      title: "i18n:warn",
                      type: "warn",
                      icon: "im-warning",
                      width: 420
                    });

                  case 13:
                    return _context58.abrupt("return");

                  case 14:
                    // 通知修改
                    _this120.$notify("change", {
                      skip: _this120.value.pgsz * (pn - 1),
                      limit: _this120.value.pgsz,
                      pn: pn,
                      pgsz: _this120.value.pgsz
                    });

                  case 15:
                  case "end":
                    return _context58.stop();
                }
              }
            }, _callee58);
          }))();
        },
        //--------------------------------------
        OnClickSum: function OnClickSum() {
          var _this121 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee59() {
            var msg, str, pgsz;
            return regeneratorRuntime.wrap(function _callee59$(_context59) {
              while (1) {
                switch (_context59.prev = _context59.next) {
                  case 0:
                    msg = Ti.I18n.getf("paging-change-pgsz", _this121.value);
                    _context59.next = 3;
                    return Ti.Prompt(msg, {
                      value: _this121.value.pgsz
                    });

                  case 3:
                    str = _context59.sent;

                    if (!(!str || str == _this121.value.pgsz)) {
                      _context59.next = 6;
                      break;
                    }

                    return _context59.abrupt("return");

                  case 6:
                    // verify the str
                    pgsz = parseInt(str);

                    if (!(isNaN(pgsz) || pgsz <= 0)) {
                      _context59.next = 11;
                      break;
                    }

                    _context59.next = 10;
                    return Ti.Alert("i18n:paging-change-pgsz-invalid", {
                      title: "i18n:warn",
                      type: "warn",
                      icon: "im-warning",
                      width: 420
                    });

                  case 10:
                    return _context59.abrupt("return");

                  case 11:
                    // 通知修改
                    _this121.$notify("change:pgsz", pgsz);

                    _this121.$notify("change", {
                      pn: 1,
                      pgsz: pgsz
                    });

                  case 13:
                  case "end":
                    return _context59.stop();
                }
              }
            }, _callee59);
          }))();
        }
      } ///////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/paging/jumper/ti-paging-jumper.mjs", _M);
  })(); //============================================================
  // JOIN: ti/paging/jumper/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/paging/jumper/_com.json", {
    "name": "ti-paging-jumper",
    "globally": true,
    "template": "./ti-paging-jumper.html",
    "mixins": ["./ti-paging-jumper.mjs"]
  }); //============================================================
  // JOIN: ti/roadblock/ti-roadblock.html
  //============================================================

  Ti.Preload("ti/com/ti/roadblock/ti-roadblock.html", "<div class=\"ti-roadblock\"\n  :class=\"TopClass\">\n  <div class=\"as-main\">\n    <div v-if=\"icon\" class=\"as-icon\">\n      <ti-icon :value=\"icon\"/>\n    </div>\n    <div v-if=\"text\" class=\"as-text\">\n      <span>{{text | i18n}}</span>\n    </div>\n  </div>\n</div>"); //============================================================
  // JOIN: ti/roadblock/ti-roadblock.mjs
  //============================================================

  (function () {
    /***
     * In Building ....
     */
    var _M = {
      /////////////////////////////////////////
      props: {
        "icon": {
          type: String,
          "default": "fas-exclamation-triangle"
        },
        "text": {
          type: String,
          "default": null
        }
      },
      //////////////////////////////////////////
      computed: {
        TopClass: function TopClass() {
          return this.getTopClass();
        }
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/roadblock/ti-roadblock.mjs", _M);
  })(); //============================================================
  // JOIN: ti/roadblock/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/roadblock/_com.json", {
    "name": "ti-roadblock",
    "globally": true,
    "template": "./ti-roadblock.html",
    "mixins": ["./ti-roadblock.mjs"],
    "components": []
  }); //============================================================
  // JOIN: ti/session/badge/ti-session-badge.html
  //============================================================

  Ti.Preload("ti/com/ti/session/badge/ti-session-badge.html", "<div class=\"ti-session-badge\"\n  :class=\"TopClass\">\n  <!--\n    Has Session, show account info\n  -->\n  <template v-if=\"hasSession\">\n    <!--Avatar-->\n    <div v-if=\"hasAvatar\"\n      class=\"as-avatar\">\n      <img :src=\"myAvatar\"/>\n    </div>\n    <!--User Icon-->\n    <div v-else\n      class=\"as-icon\">\n      <ti-icon :value=\"myIcon\"/>\n    </div>\n    <!--User Name-->\n    <div class=\"as-name\">\n      <!--Name Event-->\n      <a\n        v-if=\"nameEvent\"\n          @click.left=\"$notify(nameEvent)\">{{myName}}</a>\n      <!--Name display-->\n      <span\n        v-else>{{myName}}</span>\n    </div>\n    <!--Links-->\n    <div v-for=\"li in theLinks\"\n      class=\"as-link\">\n      <!--Icon-->\n      <ti-icon\n        v-if=\"li.icon\"\n          class=\"it-icon\"\n          :value=\"li.icon\"/>\n      <!--Text-->\n      <a\n        @click.left=\"OnClickLink(li, $event)\"\n        :href=\"li.href\"\n        :target=\"li.newtab?'_blank':null\">{{li.title|i18n}}</a>\n    </div>\n  </template>\n  <!--\n    Without session, show login link\n  -->\n  <template v-else>\n    <div v-if=\"loginIcon\"\n      class=\"as-icon\">\n      <ti-icon :value=\"loginIcon\"/>\n    </div>\n    <div class=\"as-link\">\n      <a @click=\"$notify(loginEvent)\">{{'login'|i18n}}</a>\n    </div>\n  </template>\n</div>"); //============================================================
  // JOIN: ti/session/badge/ti-session-badge.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      props: {
        "me": {
          type: Object,
          "default": null
        },
        // Key to indicate Avatar existing
        // null - will not support avatar
        "avatarKey": {
          type: String,
          "default": null
        },
        // Avatar Source Template
        // null - will not support avatar
        "avatarSrc": {
          type: String,
          "default": null
        },
        "loginIcon": {
          type: String,
          "default": "zmdi-account-circle"
        },
        "nameKeys": {
          type: [String, Array],
          "default": "name"
        },
        "nameEvent": {
          type: String,
          "default": "go:dashboard"
        },
        "loginEvent": {
          type: String,
          "default": "do:login"
        },
        "logoutEvent": {
          type: String,
          "default": "do:logout"
        },

        /***
         * The customized link before `login/logout`.
         * 
         * ```
         * {
         *    icon   : "im-xxx",
         *    text   : "i18n:xxx",
         *    href   : "/path/to/uri"  // The <a href>
         *    newtab : false,        // if href, the open target
         *    emit   : "do:login"      // Mutex(href)
         * }
         * ```
         */
        "links": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "autoSignLink": {
          type: Boolean,
          "default": true
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //--------------------------------------
        theLinks: function theLinks() {
          var list = _.cloneDeep(this.links) || []; //---------------------------
          // // Join the links
          // for(let li of this.links) {
          //   // Ignore out-of-session link
          //   if(li.inSession && !this.hasSession) {
          //     continue;
          //   }
          //   // Join
          //   list.push(li)
          // }
          //---------------------------
          // Add the Login/Logout link

          if (this.autoSignLink) {
            if (this.hasSession) {
              list.push({
                title: "i18n:logout",
                emit: this.logoutEvent
              });
            } // Login 
            else {
                list.push({
                  title: "i18n:login",
                  emit: this.loginEvent
                });
              }
          } //---------------------------


          return list;
        },
        //--------------------------------------
        myName: function myName() {
          if (this.me) {
            return Ti.Util.getOrPick(this.me, this.nameKeys) || Ti.I18n.get("mine");
          }
        },
        //--------------------------------------
        myIcon: function myIcon() {
          if (this.me) {
            if (2 == this.me.sex) {
              return "im-user-female";
            }

            return "im-user-male";
          }

          return "far-user";
        },
        //--------------------------------------
        myAvatar: function myAvatar() {
          if (this.avatarSrc) {
            return Ti.S.renderBy(this.avatarSrc, this.me);
          }
        },
        //--------------------------------------
        hasAvatar: function hasAvatar() {
          return this.avatarSrc && this.avatarKey && this.me && this.me[this.avatarKey];
        },
        //--------------------------------------
        hasSession: function hasSession() {
          return this.me ? true : false;
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnClickLink: function OnClickLink(link, $event) {
          // Emit
          if (link.emit) {
            $event.preventDefault();
            this.$notify(link.emit);
          } // Href: do nothing

        } //--------------------------------------

      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/session/badge/ti-session-badge.mjs", _M);
  })(); //============================================================
  // JOIN: ti/session/badge/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/session/badge/_com.json", {
    "name": "ti-session-badge",
    "globally": true,
    "template": "./ti-session-badge.html",
    "mixins": ["./ti-session-badge.mjs"]
  }); //============================================================
  // JOIN: ti/sheet/emoji/ti-sheet-emoji.html
  //============================================================

  Ti.Preload("ti/com/ti/sheet/emoji/ti-sheet-emoji.html", "<div  class=\"ti-sheet-emoji\" \n  :class=\"TopClass\"\n  :style=\"TopStyle\">\n  <!--\n    Candidate List\n  -->\n  <div class=\"as-list\">\n    <div\n      v-for=\"li in TheDataSheet\"\n        class=\"emoji-item\"\n        @click.left=\"myValue=li.value\">\n        <span>{{li.value}}</span>\n    </div>\n  </div>\n</div>"); //============================================================
  // JOIN: ti/sheet/emoji/ti-sheet-emoji.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////////////////
      data: function data() {
        return {
          myValue: null
        };
      },
      ///////////////////////////////////////////////////////
      props: {
        "value": {
          type: [String, Object, Number],
          "default": null
        },
        "width": {
          type: [Number, String],
          "default": "100%"
        },
        "height": {
          type: [Number, String],
          "default": "100%"
        },
        "data": {
          type: [String, Array],
          "default": function _default() {
            return ["😀 😃 😄 😁 😆 😅 🤣 😂 🙂 🙃 😉 😊 😇", "🥰 😍 🤩 😘 😗 😚 😙 😋 😛 😜 🤪 😝 🤑", "🤗 🤭 🤫 🤔 🤐 🤨 😐 😑 😶 😏 😒 🙄 😬", "🤥 😌 😔 😪 🤤 😴 😷 🤒 🤕 🤢 🤮 🤧 🥵", "🥶 🥴 😵 🤯 🤠 🥳 😎 🤓 🧐 😕 😟 🙁 ☹️", "😮 😯 😲 😳 🥺 😦 😧 😨 😰 😥 😢 😭 😱", "😖 😣 😞 😓 😩 😫 🥱 😤 😡 😠 🤬 😈 👿", "💀 ☠️ 💩 🤡 👹 👺 👻 👽 👾 🤖 😺 😸 😹", "😻 😼 😽 🙀 😿 😾 🙈 🙉 🙊 "];
          }
        }
      },
      ///////////////////////////////////////////////////////
      computed: {
        //---------------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //---------------------------------------------------
        TopStyle: function TopStyle() {
          return Ti.Css.toStyle({
            width: this.width,
            height: this.height
          });
        },
        //---------------------------------------------------
        hasValue: function hasValue() {
          return this.TheValue ? true : false;
        },
        //---------------------------------------------------
        TheValue: function TheValue() {
          return this.myValue || this.value;
        },
        //---------------------------------------------------
        TheDataSheet: function TheDataSheet() {
          var list = [];

          var sheet = _.flattenDeep(this.data).join("").replace(/[ ]/g, ""); // 逐字解析


          for (var i = 0; i < sheet.length; i += 2) {
            var c = sheet.substring(i, i + 2);
            list.push({
              value: c
            });
          }

          return list;
        } //---------------------------------------------------

      },
      methods: {
        //---------------------------------------------------
        OnClickTop: function OnClickTop() {
          if (this.notifyName) {
            this.$notify(this.notifyName, this.notifyConf);
          }
        } //---------------------------------------------------

      },
      ////////////////////////////////////////////////////
      watch: {
        "myValue": function myValue() {
          this.$notify("change", this.myValue);
        }
      } ///////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/sheet/emoji/ti-sheet-emoji.mjs", _M);
  })(); //============================================================
  // JOIN: ti/sheet/emoji/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/sheet/emoji/_com.json", {
    "name": "ti-sheet-emoji",
    "globally": true,
    "template": "./ti-sheet-emoji.html",
    "mixins": ["./ti-sheet-emoji.mjs"]
  }); //============================================================
  // JOIN: ti/support/field_display.mjs
  //============================================================

  (function () {
    //////////////////////////////////////////////
    function _render_iteratee() {
      var _ref60 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          varName = _ref60.varName,
          vars = _ref60.vars,
          matched = _ref60.matched;

      if (matched.startsWith("$$")) {
        return matched.substring(1);
      } // ${=xxx}  get value from vars
      // ${pos.x} get value from itemData


      var m = /^(=)?([^?]+)(\?(.*))?$/.exec(varName);
      var ctx = "=" == m[1] ? vars.vars : vars.itemData;

      var vkey = _.trim(m[2]);

      var vdft = Ti.Util.fallbackNil(_.trim(m[4]), matched);
      var rev = Ti.Util.getOrPick(ctx, vkey);
      return Ti.Util.fallback(rev, vdft);
    } //////////////////////////////////////////////
    // cx = {vars, itemData, value}


    function __eval_com_conf_item(val) {
      var cx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // String valu3
      if (_.isString(val)) {
        //........................................
        // Function call
        //........................................
        var m = /^=>(.+)$/.exec(val);

        if (m) {
          var func = Ti.Util.genInvoking(m[1], {
            context: _objectSpread({}, cx, {
              item: cx.itemData
            }),
            partial: "left"
          });
          return func();
        } //........................................
        // Quick Value
        //........................................
        // VAL: evalue the special value, like:
        //  - "${=value}"
        //  - "${=..}"
        //  - "${=varName}"


        m = /^\$\{=([^${}=]+)\}$/.exec(val);

        if (m) {
          var varName = _.trim(m[1]); // Whole Context


          if (".." == varName) {
            return cx.itemData;
          } // Value


          if ("value" == varName) {
            return cx.value;
          } // In var set
          else {
              return Ti.Util.fallback(_.get(cx.vars, varName), val);
            }
        } //........................................
        // String Template
        //........................................
        // VAL as template (xxx)?xxx${nn}
        // the placeholder support:
        //  - "${=varName}"
        //  - "${info.age}"


        m = /^(\((.+)\)\?)?(.+)$/.exec(val);

        if (m) {
          var preKey = _.trim(m[2]);

          var tmpl = _.trim(m[3]); //console.log("haha", preKey, tmpl)
          // Only `itemData` contains the preKey, render the value


          if (preKey) {
            // "(age)?xxx"  :: get from itemDAta
            if (_.get(cx.itemData, preKey)) {
              return Ti.S.renderBy(tmpl, cx, {
                iteratee: _render_iteratee
              });
            }

            return null;
          } // Render the value


          return Ti.S.renderBy(tmpl, cx, {
            iteratee: _render_iteratee
          });
        } //........................................
        // Primary
        //........................................


        return val;
      } // Object Value
      else if (_.isPlainObject(val)) {
          //........................................
          // Nested Objects
          //........................................
          var obj = {};

          _.forEach(val, function (v, k) {
            var v2 = __eval_com_conf_item(v, cx);

            if ("..." == k) {
              _.assign(obj, v2);
            } else {
              obj[k] = v2;
            }
          });

          return obj;
        } // Array Value
        else if (_.isArray(val)) {
            var list = [];

            var _iterator46 = _createForOfIteratorHelper(val),
                _step46;

            try {
              for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {
                var v = _step46.value;

                var v2 = __eval_com_conf_item(v, cx);

                list.push(v2);
              }
            } catch (err) {
              _iterator46.e(err);
            } finally {
              _iterator46.f();
            }

            return list;
          } // Keep original value


      return val;
    } //////////////////////////////////////////////


    var FieldDisplay = {
      //------------------------------------------
      evalFieldDisplayItem: function evalFieldDisplayItem() {
        var _this122 = this;

        var displayItem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var _ref61 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            defaultKey = _ref61.defaultKey;

        //........................................
        var __gen_dis = function __gen_dis() {
          //......................................
          // Guard it
          if (Ti.Util.isNil(displayItem)) {
            return defaultKey ? {
              key: defaultKey,
              comType: "ti-label"
            } : null;
          } //......................................
          // {key:"xxx", comType:"xxx"}


          if (_.isPlainObject(displayItem)) {
            var _dis = _.assign({
              key: defaultKey,
              comType: "ti-label"
            }, displayItem);

            if (_dis.transformer) {
              var invokeOpt = {
                context: _this122,
                partial: "right"
              };
              _dis.transformer = Ti.Util.genInvoking(_dis.transformer, invokeOpt);
            }

            return _dis;
          } //......................................
          // Array to multi key


          if (_.isArray(displayItem)) {
            return {
              key: displayItem,
              comType: "ti-label"
            };
          } //......................................
          // Boolean


          if (true === displayItem) {
            return {
              key: defaultKey,
              comType: "ti-label"
            };
          } //......................................


          if (_.isString(displayItem)) {
            // <icon:zmdi-user>
            var m = /^<([^:>=]*)(:([^>]+))?>$/.exec(displayItem);

            if (m) {
              return {
                key: m[1] || defaultKey || ":ti-icon",
                defaultAs: m[3] || undefined,
                comType: "ti-icon"
              };
            } //......................................
            // #DictName(xxx) -> ti-label
            // just like `#RelayStatus(status)`


            m = /^(!)?[@#]([^\(]+)\(([^)]+)\)(:([^:]*)(:([^:]+))?)?$/.exec(displayItem);

            if (m) {
              return {
                key: m[3] || defaultKey,
                comType: "ti-label",
                comConf: {
                  dict: m[2],
                  format: m[5] || undefined,
                  className: m[7] || "is-nowrap",
                  autoLoadDictIcon: m[1] != "!"
                }
              };
            } //......................................
            // "<=ti-label:key>" or ":<=ti-label>"


            m = /^<=([^:]+)(:(.+))?>$/.exec(displayItem);

            if (m) {
              return {
                key: m[3] || defaultKey || Symbol(displayItem),
                comType: m[1]
              };
            } //......................................
            // String -> ti-label
            // - "name" or ["name", "age"]
            // - "'Static Text'"
            // - "text+>/a/link?nm=${name}"
            // - "'More'->/a/link?id=${id}"
            // - "name:【${val}】->/a/link?id=${id}"


            m = /^([^+-:>]+)(:([^+-:]*)(:([^:]+))?)?(([+-])>([^%]*))?$/.exec(displayItem);

            if (m) {
              var key = _.trim(m[1] || m[0]);

              var format = m[3] || undefined;
              var newTab = m[7] == "+";

              var href = _.trim(m[8]);

              return {
                key: key,
                comType: "ti-label",
                comConf: {
                  className: m[5] || "is-nowrap",
                  newTab: newTab,
                  href: href,
                  format: format
                }
              };
            } //......................................
            // Default as lable


            return {
              key: displayItem,
              comType: "ti-label"
            }; //......................................
          } //......................................


          return displayItem;
        }; //........................................


        var dis = __gen_dis(); //........................................


        if (dis.dict) {
          var _Ti$DictFactory$expla3 = Ti.DictFactory.explainDictName(dis.dict),
              name = _Ti$DictFactory$expla3.name,
              vKey = _Ti$DictFactory$expla3.vKey;

          dis.$dict = Ti.DictFactory.CheckDict(name);
          dis.$dictValueKey = vKey || ".text";
        } //........................................
        // Then return


        return dis;
      },
      //------------------------------------------

      /***
       * @param itemData{Object} - raw data
       * @param displayItem{Object} - display item setting
       * @param vars{Object} - special value forms like:
       * ```js
       * {
       *   "isCurrent" : this.isCurrent,
       *   "isChecked" : this.isChecked,
       *   "isHover"   : this.isHover,
       *   "isActived" : this.isActived,
       *   "rowId"     : this.rowId
       * }
       * ```
       */
      evalDataForFieldDisplayItem: function evalDataForFieldDisplayItem() {
        var _arguments13 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee60() {
          var _ref62, _ref62$itemData, itemData, _ref62$displayItem, displayItem, _ref62$vars, vars, _ref62$autoIgnoreNil, autoIgnoreNil, _ref62$autoIgnoreBlan, autoIgnoreBlank, _ref62$autoValue, autoValue, uniqueKey, dis, value, reDisplayItem, comConf;

          return regeneratorRuntime.wrap(function _callee60$(_context60) {
            while (1) {
              switch (_context60.prev = _context60.next) {
                case 0:
                  _ref62 = _arguments13.length > 0 && _arguments13[0] !== undefined ? _arguments13[0] : {}, _ref62$itemData = _ref62.itemData, itemData = _ref62$itemData === void 0 ? {} : _ref62$itemData, _ref62$displayItem = _ref62.displayItem, displayItem = _ref62$displayItem === void 0 ? {} : _ref62$displayItem, _ref62$vars = _ref62.vars, vars = _ref62$vars === void 0 ? {} : _ref62$vars, _ref62$autoIgnoreNil = _ref62.autoIgnoreNil, autoIgnoreNil = _ref62$autoIgnoreNil === void 0 ? true : _ref62$autoIgnoreNil, _ref62$autoIgnoreBlan = _ref62.autoIgnoreBlank, autoIgnoreBlank = _ref62$autoIgnoreBlan === void 0 ? true : _ref62$autoIgnoreBlan, _ref62$autoValue = _ref62.autoValue, autoValue = _ref62$autoValue === void 0 ? "value" : _ref62$autoValue, uniqueKey = _ref62.uniqueKey;
                  dis = displayItem; // if("sex" == dis.key) 
                  //   console.log(dis)

                  value = dis.defaultAs; //.....................................
                  // Array -> Obj

                  if (_.isArray(dis.key)) {
                    value = _.pick(itemData, dis.key);
                  } // String ...
                  else if (_.isString(dis.key)) {
                      // Whole data
                      if (".." == dis.key) {
                        value = itemData;
                      } // Statci value
                      else if (/^'[^']+'$/.test(dis.key)) {
                          value = dis.key.substring(1, dis.key.length - 1);
                        } // Template
                        else if (/^->(.+)$/.test(dis.key)) {
                            value = Ti.S.renderBy(dis.key.substring(2), itemData);
                          } // Dynamic value
                          else {
                              value = Ti.Util.fallback(Ti.Util.getOrPickNoBlank(itemData, dis.key), value);
                            }
                    } //.....................................
                  // Transformer


                  if (_.isFunction(dis.transformer)) {
                    //console.log("do trans")
                    // Sometimes, we need transform nil also
                    if (!Ti.Util.isNil(value) || dis.transNil) {
                      value = dis.transformer(value);
                    }
                  } // Ignore the Blank


                  if (!(autoIgnoreBlank && Ti.S.isBlank(value))) {
                    _context60.next = 8;
                    break;
                  }

                  if (!Ti.Util.fallback(dis.ignoreBlank, true)) {
                    _context60.next = 8;
                    break;
                  }

                  return _context60.abrupt("return");

                case 8:
                  if (!(autoIgnoreNil && Ti.Util.isNil(value))) {
                    _context60.next = 11;
                    break;
                  }

                  if (!Ti.Util.fallback(dis.ignoreNil, true)) {
                    _context60.next = 11;
                    break;
                  }

                  return _context60.abrupt("return");

                case 11:
                  if (!dis.$dict) {
                    _context60.next = 15;
                    break;
                  }

                  _context60.next = 14;
                  return dis.$dict.getItemAs(dis.$dictValueKey, value);

                case 14:
                  value = _context60.sent;

                case 15:
                  //.....................................
                  // Add value to comConf
                  reDisplayItem = _.cloneDeep(dis);
                  comConf = {}; //.....................................
                  // Customized comConf

                  if (_.isFunction(dis.comConf)) {
                    comConf = _.assign({}, dis.comConf(itemData));
                  } //.....................................
                  // Eval comConf
                  else if (dis.comConf) {
                      comConf = __eval_com_conf_item(dis.comConf, {
                        vars: vars,
                        itemData: itemData,
                        value: value
                      });
                    } //.....................................
                  // Set the default value key


                  if (autoValue && _.isUndefined(comConf[autoValue])) {
                    comConf[autoValue] = value;
                  } //.....................................


                  reDisplayItem.comConf = comConf; //.....................................

                  if (uniqueKey) {
                    reDisplayItem.uniqueKey = uniqueKey;
                  } else {
                    reDisplayItem.uniqueKey = _.concat(reDisplayItem.key, reDisplayItem.comType).join("-");
                  } //.....................................


                  return _context60.abrupt("return", reDisplayItem);

                case 22:
                case "end":
                  return _context60.stop();
              }
            }
          }, _callee60);
        }))();
      } //------------------------------------------

    }; //////////////////////////////////////////////

    Ti.Preload("ti/com/ti/support/field_display.mjs", FieldDisplay);
  })(); //============================================================
  // JOIN: ti/support/formed_list_methods.mjs
  //============================================================


  (function () {
    //////////////////////////////////////////
    var _M = {
      //......................................
      isSelectedItem: function isSelectedItem() {
        var it = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var _ref63 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            _ref63$value = _ref63.value,
            value = _ref63$value === void 0 ? null : _ref63$value,
            _ref63$multi = _ref63.multi,
            multi = _ref63$multi === void 0 ? false : _ref63$multi;

        if (multi) {
          return _.isArray(value) && _.indexOf(value, it.value) >= 0;
        }

        return _.isEqual(value, it.value);
      },
      //......................................
      normalizeData: function normalizeData() {
        var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        var _ref64 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            _ref64$emptyItem = _ref64.emptyItem,
            emptyItem = _ref64$emptyItem === void 0 ? null : _ref64$emptyItem,
            _ref64$multi = _ref64.multi,
            multi = _ref64$multi === void 0 ? false : _ref64$multi,
            _ref64$value = _ref64.value,
            value = _ref64$value === void 0 ? null : _ref64$value,
            _ref64$focusIndex = _ref64.focusIndex,
            focusIndex = _ref64$focusIndex === void 0 ? -1 : _ref64$focusIndex,
            _ref64$mapping = _ref64.mapping,
            mapping = _ref64$mapping === void 0 ? null : _ref64$mapping,
            _ref64$defaultIcon = _ref64.defaultIcon,
            defaultIcon = _ref64$defaultIcon === void 0 ? null : _ref64$defaultIcon,
            _ref64$iteratee = _ref64.iteratee,
            iteratee = _ref64$iteratee === void 0 ? null : _ref64$iteratee,
            _ref64$defaultTipKey = _ref64.defaultTipKey,
            defaultTipKey = _ref64$defaultTipKey === void 0 ? null : _ref64$defaultTipKey;

        //console.log("normalizeData", iteratee)
        var index = 0;
        var reList = []; //.........................................
        // Single mode, join the empty item

        if (!multi && emptyItem) {
          var emIt = _.cloneDeep(emptyItem);

          emIt.selected = _.isUndefined(emIt.value) || _.isNull(emIt.value) ? _.isNull(value) : this.isSelectedItem(emIt, {
            value: value,
            multi: multi
          });
          if (_.isFunction(iteratee)) emIt = iteratee(emIt, index) || emIt;
          reList.push(emIt);
          index++;
        } //.........................................
        // Format the list


        var list2 = [];

        if (_.isArray(list)) {
          var theMapping = mapping ? _.defaults(_objectSpread({}, mapping), {
            icon: "icon",
            text: "text",
            value: "value",
            tip: "tip"
          }) : null;

          var _iterator47 = _createForOfIteratorHelper(list),
              _step47;

          try {
            for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {
              var it = _step47.value;

              // Plain Object
              if (_.isPlainObject(it)) {
                var it2 = void 0; // Mapping

                if (theMapping) {
                  it2 = Ti.Util.translate(it, theMapping);
                } // Clone
                else {
                    it2 = _.cloneDeep(it);
                  } // Apply Default Tip


                if (!it2.tip && defaultTipKey) {
                  it2.tip = it[defaultTipKey];
                } // Join to list


                list2.push(it2);
              } // Simple value
              else {
                  list2.push({
                    icon: defaultIcon,
                    text: Ti.Types.toStr(it),
                    value: it
                  });
                }
            }
          } catch (err) {
            _iterator47.e(err);
          } finally {
            _iterator47.f();
          }
        } //.........................................
        // Tidy it


        for (var i = 0; i < list2.length; i++) {
          var li = list2[i]; // Mark index

          li.index = i;
          li.focused = i == focusIndex; // Mark icon

          li.icon = li.icon || defaultIcon; // decide select: by self

          li.selected = this.isSelectedItem(li, {
            value: value,
            multi: multi
          }); // Customized

          if (_.isFunction(iteratee)) {
            list2[i] = iteratee(li, i) || li;
          }
        } //console.log(reList)


        return list2;
      },
      //------------------------------------------------
      matchItemByKey: function matchItemByKey() {
        var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "value";
        var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "equal";
        var val = arguments.length > 3 ? arguments[3] : undefined;
        var itemValue = item[key]; // find method by mode

        var fnCall = {
          "equal": function equal() {
            return _.isEqual(itemValue, val);
          },
          "starts": function starts() {
            return _.startsWith(itemValue, val);
          },
          "contains": function contains() {
            if (_.isString(itemValue)) {
              return itemValue.indexOf(val + "") >= 0;
            }

            _.indexOf(itemValue, val) >= 0;
          }
        }[mode]; // Do the invoking

        if (_.isFunction(fnCall)) {
          return fnCall();
        }

        return false;
      },
      //------------------------------------------------
      findItemInList: function findItemInList(str) {
        var _ref65 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            _ref65$list = _ref65.list,
            list = _ref65$list === void 0 ? [] : _ref65$list,
            _ref65$matchValue = _ref65.matchValue,
            matchValue = _ref65$matchValue === void 0 ? "equal" : _ref65$matchValue,
            _ref65$matchText = _ref65.matchText,
            matchText = _ref65$matchText === void 0 ? "off" : _ref65$matchText;

        if (_.isArray(list) && !_.isEmpty(list)) {
          var _iterator48 = _createForOfIteratorHelper(list),
              _step48;

          try {
            for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {
              var li = _step48.value;

              if (this.matchItemByKey(li, "value", matchValue, str)) {
                return li;
              }

              if (this.matchItemByKey(li, "text", matchText, str)) {
                return li;
              }
            }
          } catch (err) {
            _iterator48.e(err);
          } finally {
            _iterator48.f();
          }
        }

        return null;
      },
      //------------------------------------------------
      // multi  : Array
      // single : Number
      getSelectedItemIndex: function getSelectedItemIndex(formedList) {
        var _ref66 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            _ref66$value = _ref66.value,
            value = _ref66$value === void 0 ? null : _ref66$value,
            _ref66$multi = _ref66.multi,
            multi = _ref66$multi === void 0 ? false : _ref66$multi;

        var re = [];
        var sls = {
          value: value,
          multi: multi
        };

        for (var i = 0; i < formedList.length; i++) {
          var li = formedList[i];

          if (this.isSelectedItem(li, sls)) {
            if (!this.multi) return i;
            re.push(i);
          }
        }

        if (_.isEmpty(re) && !multi) {
          return -1;
        }

        return re;
      } //......................................
      // async tryReload({loaded=false, cached=true}={}){
      //   if(!loaded || !cached) {
      //     await this.reload()
      //     return
      //   }
      //   // Return the blank Promise
      //   return new Promise((resolve)=>{
      //     resolve()
      //   })
      // },
      // //......................................
      // async doReload(options=[], vars) {
      //   vars = Ti.Util.fallback(vars, this.value)
      //   let list = []
      //   // Dynamic value
      //   if(_.isFunction(options)) {
      //     list = await options(vars)
      //     if(!_.isArray(list)){
      //       return []
      //     }
      //   }
      //   // Static value
      //   else if(_.isArray(this.options)){
      //     list = [].concat(this.options)
      //   }
      //   return list
      // }
      //......................................

    };
    Ti.Preload("ti/com/ti/support/formed_list_methods.mjs", _M);
  })(); //============================================================
  // JOIN: ti/support/list_item_mixins.mjs
  //============================================================


  (function () {
    var _M = {
      inject: ["$vars"],
      ///////////////////////////////////////////////////
      props: {
        "index": {
          type: Number,
          "default": -1
        },
        "rowId": {
          type: String,
          "default": null
        },
        "data": null,
        "changedId": {
          type: String,
          "default": null
        },
        "currentId": {
          type: String,
          "default": null
        },
        "checkedIds": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "checkable": {
          type: Boolean,
          "default": false
        },
        "selectable": {
          type: Boolean,
          "default": true
        },
        "openable": {
          type: Boolean,
          "default": true
        },
        "rowToggleKey": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "checkIcons": {
          type: Object,
          "default": function _default() {
            return {
              on: "fas-check-square",
              off: "far-square"
            };
          }
        }
      },
      ///////////////////////////////////////////////////
      computed: {
        //-----------------------------------------------
        getListItemClass: function getListItemClass() {
          var _this123 = this;

          return function () {
            for (var _len4 = arguments.length, klass = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
              klass[_key4] = arguments[_key4];
            }

            return _this123.getTopClass({
              "is-current": _this123.isCurrent,
              "is-checked": _this123.isChecked,
              "is-changed": _this123.isChanged,
              "no-checked": !_this123.isChecked
            }, klass);
          };
        },
        //-----------------------------------------------
        isCurrent: function isCurrent() {
          return this.rowId == this.currentId;
        },
        //-----------------------------------------------
        isChanged: function isChanged() {
          return this.rowId == this.changedId;
        },
        //-----------------------------------------------
        isChecked: function isChecked() {
          return this.checkedIds[this.rowId] ? true : false;
        },
        //-----------------------------------------------
        theCheckIcon: function theCheckIcon() {
          if (this.checkedIds[this.rowId]) {
            return this.checkIcons.on;
          }

          return this.checkIcons.off;
        } //-----------------------------------------------

      },
      ///////////////////////////////////////////////////
      methods: {
        //-----------------------------------------------
        isRowToggleKey: function isRowToggleKey(uniqKey) {
          return _.indexOf(this.rowToggleKey, uniqKey) >= 0;
        },
        //-----------------------------------------------
        OnClickChecker: function OnClickChecker() {
          var $event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          if (this.checkable) {
            this.$notify("checker", {
              rowId: this.rowId,
              shift: $event.shiftKey,
              toggle: $event.ctrlKey || $event.metaKey
            });
          }
        },
        //-----------------------------------------------
        OnClickRow: function OnClickRow() {
          var $event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var toggle = $event.ctrlKey || $event.metaKey;

          if (this.selectable && (!this.isCurrent || !this.isChecked || toggle)) {
            this.$notify("select", {
              rowId: this.rowId,
              shift: $event.shiftKey,
              toggle: toggle
            });
          }
        },
        //-----------------------------------------------
        OnDblClickRow: function OnDblClickRow() {
          var $event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          if (this.openable) {
            $event.stopPropagation();
            this.$notify("open", {
              rowId: this.rowId
            });
          }
        },
        //-----------------------------------------------
        doAutoActived: function doAutoActived() {
          if (!this.isActived && this.isCurrent) {
            this.setActived();
          }
        } //-----------------------------------------------

      },
      ///////////////////////////////////////////////////
      watch: {
        "isCurrent": function isCurrent() {
          this.doAutoActived();
        }
      },
      ///////////////////////////////////////////////////
      mounted: function mounted() {
        this.doAutoActived();
      } ///////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/support/list_item_mixins.mjs", _M);
  })(); //============================================================
  // JOIN: ti/support/list_mixins.mjs
  //============================================================


  (function () {
    var LIST_MIXINS = {
      ///////////////////////////////////////////////////
      provide: function provide() {
        return {
          "$vars": this.vars || {}
        };
      },
      ///////////////////////////////////////////////////
      data: function data() {
        return {
          myLastIndex: -1,
          // The last row index selected by user
          myCurrentId: null,
          // Current row ID
          myCheckedIds: {} // Which row has been checked

        };
      },
      ///////////////////////////////////////////////////
      // props -> list_props.mjs
      ///////////////////////////////////////////////////
      computed: {
        //-----------------------------------------------
        TopStyle: function TopStyle() {
          var w = this.width;
          var h = this.height;
          return Ti.Css.toStyle({
            width: w,
            height: h
          });
        },
        //-----------------------------------------------
        hasRowToggleKey: function hasRowToggleKey() {
          return !_.isEmpty(this.rowToggleKey);
        },
        //-----------------------------------------------
        TheRowToggleKey: function TheRowToggleKey() {
          return _.without(_.concat(this.rowToggleKey), undefined);
        },
        //-----------------------------------------------
        getRowId: function getRowId() {
          return Ti.Util.genRowIdGetter(this.idBy);
        },
        //-----------------------------------------------
        getRowData: function getRowData() {
          return Ti.Util.genRowDataGetter(this.rawDataBy);
        },
        //-----------------------------------------------
        isDataEmpty: function isDataEmpty() {
          return !_.isArray(this.data) || _.isEmpty(this.data);
        },
        //-----------------------------------------------
        isAllChecked: function isAllChecked() {
          // Empty list, nothing checked
          if (this.isDataEmpty) {
            return false;
          } // Checking ...


          var _iterator49 = _createForOfIteratorHelper(this.TheData),
              _step49;

          try {
            for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {
              var row = _step49.value;
              if (!this.theCheckedIds[row.id]) return false;
            }
          } catch (err) {
            _iterator49.e(err);
          } finally {
            _iterator49.f();
          }

          return true;
        },
        //-----------------------------------------------
        hasChecked: function hasChecked() {
          var _iterator50 = _createForOfIteratorHelper(this.data),
              _step50;

          try {
            for (_iterator50.s(); !(_step50 = _iterator50.n()).done;) {
              var it = _step50.value;
              var itId = this.getRowId(it);
              if (this.theCheckedIds[itId]) return true;
            }
          } catch (err) {
            _iterator50.e(err);
          } finally {
            _iterator50.f();
          }

          return false;
        },
        //-----------------------------------------------
        theCurrentRowId: function theCurrentRowId() {
          return this.wrapRowId(this.currentId);
        },
        //-----------------------------------------------
        theCurrentId: function theCurrentId() {
          return this.puppetMode ? this.theCurrentRowId : this.myCurrentId;
        },
        //-----------------------------------------------
        theCheckedIds: function theCheckedIds() {
          return this.puppetMode ? this.getCheckedIdsMap(this.checkedIds) : this.myCheckedIds;
        },
        //-----------------------------------------------
        // fnSet() {
        //   return _.assign({}, Ti.GlobalFuncs(), this.extendFunctionSet)
        // },
        //-----------------------------------------------
        Dict: function Dict() {
          if (this.dict) {
            // Already Dict
            if (this.dict instanceof Ti.Dict) {
              return this.dict;
            } // Get back


            var _Ti$DictFactory$expla4 = Ti.DictFactory.explainDictName(this.dict),
                name = _Ti$DictFactory$expla4.name;

            return Ti.DictFactory.CheckDict(name);
          }
        } //-----------------------------------------------

      },
      ///////////////////////////////////////////////////
      methods: {
        //-----------------------------------------------
        wrapRowId: function wrapRowId(rowId) {
          if (_.isNumber(rowId)) {
            return "" + rowId;
          }

          return rowId;
        },
        //-----------------------------------------------
        evalData: function evalData() {
          var _arguments14 = arguments,
              _this124 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee61() {
            var iteratee, data, data2, i, it, it2, list;
            return regeneratorRuntime.wrap(function _callee61$(_context61) {
              while (1) {
                switch (_context61.prev = _context61.next) {
                  case 0:
                    iteratee = _arguments14.length > 0 && _arguments14[0] !== undefined ? _arguments14[0] : _.identity;
                    data = _this124.data; //............................................
                    // May need translate

                    if (!_this124.Dict) {
                      _context61.next = 31;
                      break;
                    }

                    if (!_.isString(data)) {
                      _context61.next = 9;
                      break;
                    }

                    _context61.next = 6;
                    return _this124.Dict.queryData(data);

                  case 6:
                    data = _context61.sent;
                    _context61.next = 31;
                    break;

                  case 9:
                    if (!_.isArray(data)) {
                      _context61.next = 28;
                      break;
                    }

                    data2 = [];
                    i = 0;

                  case 12:
                    if (!(i < data.length)) {
                      _context61.next = 25;
                      break;
                    }

                    it = data[i]; // Check the real item

                    if (!_.isString(it)) {
                      _context61.next = 21;
                      break;
                    }

                    _context61.next = 17;
                    return _this124.Dict.getItem(it);

                  case 17:
                    it2 = _context61.sent;

                    if (it2) {
                      data2.push(it2);
                    }

                    _context61.next = 22;
                    break;

                  case 21:
                    data2.push(it);

                  case 22:
                    i++;
                    _context61.next = 12;
                    break;

                  case 25:
                    data = data2;
                    _context61.next = 31;
                    break;

                  case 28:
                    _context61.next = 30;
                    return _this124.Dict.getData();

                  case 30:
                    data = _context61.sent;

                  case 31:
                    //............................................
                    // Then format the list
                    list = [];

                    _.forEach(data, function (it, index) {
                      var item = {
                        index: index,
                        id: _this124.getRowId(it, index),
                        rawData: _this124.getRowData(it),
                        item: it
                      };
                      item = iteratee(item) || item; // Join

                      list.push(item);
                    }); //............................................


                    return _context61.abrupt("return", list);

                  case 34:
                  case "end":
                    return _context61.stop();
                }
              }
            }, _callee61);
          }))();
        },
        //-----------------------------------------------
        findRowIndexById: function findRowIndexById(rowId) {
          var _iterator51 = _createForOfIteratorHelper(this.TheData),
              _step51;

          try {
            for (_iterator51.s(); !(_step51 = _iterator51.n()).done;) {
              var row = _step51.value;

              if (row.id == rowId) {
                return row.index;
              }
            }
          } catch (err) {
            _iterator51.e(err);
          } finally {
            _iterator51.f();
          }

          return -1;
        },
        //-----------------------------------------------
        findRowById: function findRowById(rowId) {
          var _iterator52 = _createForOfIteratorHelper(this.TheData),
              _step52;

          try {
            for (_iterator52.s(); !(_step52 = _iterator52.n()).done;) {
              var row = _step52.value;

              if (row.id == rowId) {
                return row;
              }
            }
          } catch (err) {
            _iterator52.e(err);
          } finally {
            _iterator52.f();
          }
        },
        //------------------------------------------
        getCurrentRow: function getCurrentRow() {
          var currentId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.theCurrentId;
          return this.findRowById(currentId);
        },
        //------------------------------------------
        getCurrent: function getCurrent() {
          var currentId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.theCurrentId;
          var row = this.getCurrentRow(currentId);
          return row ? row.rawData : null;
        },
        //------------------------------------------
        getCheckedRow: function getCheckedRow() {
          var idMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.theCheckedIds;
          var list = [];

          var _iterator53 = _createForOfIteratorHelper(this.TheData),
              _step53;

          try {
            for (_iterator53.s(); !(_step53 = _iterator53.n()).done;) {
              var row = _step53.value;

              if (idMap[row.id]) {
                list.push(row);
              }
            }
          } catch (err) {
            _iterator53.e(err);
          } finally {
            _iterator53.f();
          }

          return list;
        },
        //------------------------------------------
        getChecked: function getChecked() {
          var idMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.theCheckedIds;
          var rows = this.getCheckedRow(idMap);
          return _.map(rows, function (row) {
            return row.rawData;
          });
        },
        //-----------------------------------------------
        getEmitContext: function getEmitContext(currentId) {
          var checkedIds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var checked = [];
          var current = null;
          var currentIndex = -1;

          var _iterator54 = _createForOfIteratorHelper(this.TheData),
              _step54;

          try {
            for (_iterator54.s(); !(_step54 = _iterator54.n()).done;) {
              var row = _step54.value;

              if (row.id == currentId) {
                current = row.rawData;
                currentIndex = row.index;
              }

              if (checkedIds[row.id]) {
                checked.push(row.rawData);
              }
            }
          } catch (err) {
            _iterator54.e(err);
          } finally {
            _iterator54.f();
          }

          return {
            current: current,
            currentId: currentId,
            currentIndex: currentIndex,
            checked: checked,
            checkedIds: checkedIds
          };
        },
        //-----------------------------------------------
        selectRow: function selectRow(rowId) {
          var _ref67 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
              _ref67$quiet = _ref67.quiet,
              quiet = _ref67$quiet === void 0 ? false : _ref67$quiet,
              payload = _ref67.payload;

          var idMap = {};
          var curId = null; // Change the current & checked

          if (this.autoCheckCurrent) {
            idMap = rowId ? _defineProperty({}, rowId, true) : {};
            curId = rowId || null;
          } // Just change to current
          else {
              idMap = _.cloneDeep(this.myCheckedIds);
              curId = rowId;
            }

          var emitContext = this.getEmitContext(curId, idMap); // Private Mode

          if (!this.puppetMode) {
            this.myCheckedIds = idMap;
            this.myCurrentId = curId;
          }

          this.myLastIndex = this.findRowIndexById(rowId); // Notify Changes

          if (!quiet) {
            _.defaults(emitContext, payload);

            this.doNotifySelect(emitContext);
          }
        },
        //-----------------------------------------------
        selectRowByIndex: function selectRowByIndex(rowIndex, options) {
          //console.log(rowIndex)
          var index = rowIndex;

          if (this.scrollIndex) {
            index = Ti.Num.scrollIndex(rowIndex, this.TheData.length);
          }

          if (_.inRange(index, 0, this.TheData.length)) {
            var row = this.TheData[index];
            this.selectRow(row.id, options);
          }
        },
        //-----------------------------------------------
        selectPrevRow: function selectPrevRow(options) {
          this.selectRowByIndex(Math.max(-1, this.myLastIndex - 1), options);
        },
        //-----------------------------------------------
        selectNextRow: function selectNextRow(options) {
          this.selectRowByIndex(this.myLastIndex + 1, options);
        },
        //-----------------------------------------------
        selectRowsToCurrent: function selectRowsToCurrent(rowId) {
          var idMap = _.cloneDeep(this.theCheckedIds);

          var curId = this.theCurrentId;
          var index = this.findRowIndexById(rowId);

          if (index >= 0) {
            var fromIndex = Math.min(index, this.myLastIndex);
            var toIndex = Math.max(index, this.myLastIndex);

            if (fromIndex < 0) {
              fromIndex = 0;
            }

            for (var i = fromIndex; i <= toIndex; i++) {
              var row = this.TheData[i];
              idMap[row.id] = true;
            } // Eval context


            var emitContext = this.getEmitContext(curId, idMap); // Private Mode

            if (!this.puppetMode) {
              this.myCheckedIds = idMap;
              this.myCurrentId = curId;
            }

            this.myLastIndex = index; // Notify Changes

            this.doNotifySelect(emitContext);
          }
        },
        //-----------------------------------------------
        checkRow: function checkRow(rowId) {
          var idMap = _.cloneDeep(this.theCheckedIds);

          var curId = this.theCurrentId;
          var index = this.myLastIndex;
          var rowIndex = this.findRowIndexById(rowId); // All rows

          if (_.isUndefined(rowId)) {
            idMap = {};

            _.forEach(this.TheData, function (row) {
              idMap[row.id] = true;
            });
          } // Multi rows
          else if (_.isArray(rowId)) {
              var lastRowId = _.last(rowId);

              _.forEach(rowId, function (r_id) {
                idMap[r_id] = true;
              });

              if (this.autoCheckCurrent) {
                index = this.findRowIndexById(lastRowId);
              }
            } // Single row
            else {
                idMap[rowId] = true;

                if (this.autoCheckCurrent) {
                  index = rowIndex;
                }
              } // Eval context


          var emitContext = this.getEmitContext(curId, idMap); // Private Mode

          if (!this.puppetMode) {
            this.myCheckedIds = idMap;
            this.myCurrentId = curId;
          }

          this.myLastIndex = rowIndex; // Notify Changes

          this.doNotifySelect(emitContext);
        },
        //-----------------------------------------------
        cancelRow: function cancelRow(rowId) {
          var idMap = _.cloneDeep(this.theCheckedIds);

          var curId = this.theCurrentId;
          var index = -1; //console.log("cancelRow", rowId)

          if (_.isUndefined(rowId)) {
            idMap = {};
            curId = null;
          } // Single row
          else {
              index = this.findRowIndexById(rowId);
              idMap[rowId] = false;

              if (this.autoCheckCurrent && curId == rowId) {
                curId = null;
              }
            } // Eval context


          var emitContext = this.getEmitContext(curId, idMap); // Private Mode

          if (!this.puppetMode) {
            this.myCheckedIds = idMap;
            this.myCurrentId = curId;
            this.myLastIndex = index;
          } // Notify Changes


          this.doNotifySelect(emitContext);
        },
        //-----------------------------------------------
        toggleRow: function toggleRow(rowId) {
          if (this.theCheckedIds[rowId]) {
            this.cancelRow(rowId);
          } else {
            this.checkRow(rowId);
          }
        },
        //-----------------------------------------------
        doNotifySelect: function doNotifySelect(emitContext) {
          this.$notify("select", emitContext);

          if (_.isFunction(this.onSelect)) {
            this.onSelect(emitContext);
          }
        },
        //-----------------------------------------------
        OnRowCheckerClick: function OnRowCheckerClick() {
          var _ref69 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              rowId = _ref69.rowId,
              shift = _ref69.shift;

          if (this.multi) {
            // Shift Mode
            if (shift) {
              this.selectRowsToCurrent(rowId);
            } // Simple Toggle Mode
            else {
                this.toggleRow(rowId);
              }
          } // Single Mode
          else {
              this.selectRow(rowId);
            }
        },
        //-----------------------------------------------
        OnRowSelect: function OnRowSelect() {
          var _ref70 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              rowId = _ref70.rowId,
              shift = _ref70.shift,
              toggle = _ref70.toggle;

          // Multi + Shift Mode
          if (shift && this.multi) {
            this.selectRowsToCurrent(rowId);
          } // Multi + Toggle Mode
          else if (toggle && this.multi) {
              this.toggleRow(rowId);
            } // Toggle Mode
            else if (!Ti.Util.isNil(rowId) && !this.autoCheckCurrent) {
                this.toggleRow(rowId);
              } // Single Mode
              else {
                  this.selectRow(rowId);
                }
        },
        //-----------------------------------------------
        OnRowOpen: function OnRowOpen() {
          var _ref71 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              rowId = _ref71.rowId;

          var row = this.findRowById(rowId);

          if (row) {
            this.$notify("open", row);

            if (_.isFunction(this.onOpen)) {
              this.onOpen(row);
            }
          }
        },
        //-----------------------------------------------
        getCheckedIdsMap: function getCheckedIdsMap() {
          var idList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var idMap = {}; // ID List

          if (_.isArray(idList)) {
            _.forEach(idList, function (rowId) {
              idMap[rowId] = true;
            });
          } // Map
          else {
              _.forEach(idList, function (checked, rowId) {
                if (checked) {
                  idMap[rowId] = true;
                }
              });
            } // Force to check current


          if (this.autoCheckCurrent && !Ti.Util.isNil(this.theCurrentId)) {
            idMap[this.theCurrentId] = true;
          }

          return idMap;
        },
        //-----------------------------------------------
        syncCurrentId: function syncCurrentId() {
          if (!this.puppetMode && this.theCurrentId != this.theCurrentRowId) {
            //console.log("syncCurrentId", this.theCurrentRowId)
            this.selectRow(this.theCurrentRowId, {
              quiet: true
            });
          } // Just update the last
          else {
              this.myLastIndex = this.findRowIndexById(this.theCurrentRowId);
            }
        },
        //-----------------------------------------------
        syncCheckedIds: function syncCheckedIds() {
          if (!this.puppetMode) {
            this.myCheckedIds = this.getCheckedIdsMap(this.checkedIds);
          }
        } //-----------------------------------------------

      },
      ///////////////////////////////////////////////////
      watch: {
        "currentId": function currentId() {
          this.syncCurrentId();
        },
        "checkedIds": function checkedIds() {
          this.syncCheckedIds();
        },
        "data": function data() {
          if (this.theCurrentId) {
            this.myLastIndex = this.findRowIndexById(this.theCurrentId);
          }
        }
      },
      ///////////////////////////////////////////////////
      mounted: function () {
        var _mounted8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee62() {
          return regeneratorRuntime.wrap(function _callee62$(_context62) {
            while (1) {
              switch (_context62.prev = _context62.next) {
                case 0:
                  //.................................
                  this.syncCheckedIds();
                  this.syncCurrentId(); //.................................

                case 2:
                case "end":
                  return _context62.stop();
              }
            }
          }, _callee62, this);
        }));

        function mounted() {
          return _mounted8.apply(this, arguments);
        }

        return mounted;
      }() ///////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/support/list_mixins.mjs", LIST_MIXINS);
  })(); //============================================================
  // JOIN: ti/support/list_props.mjs
  //============================================================


  (function () {
    var _M = {
      //-----------------------------------
      // Data
      //-----------------------------------
      "data": {
        type: [Array, String],
        "default": function _default() {
          return [];
        }
      },
      // If input the value(ID) Array
      // it can translate by this Dict
      "dict": {
        type: [String, Ti.Dict],
        "default": null
      },
      "idBy": {
        type: [String, Function],
        "default": "id"
      },
      "rawDataBy": {
        type: [Object, String, Function],
        "default": _.identity
      },
      "currentId": {
        type: [String, Number],
        "default": null
      },
      "checkedIds": {
        type: [Array, Object],
        "default": function _default() {
          return [];
        }
      },
      "changedId": {
        type: String,
        "default": null
      },
      // "extendFunctionSet" : {
      //   type : Object,
      //   default : ()=>({})
      // },
      "vars": {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      //-----------------------------------
      // Behavior
      //-----------------------------------
      "multi": {
        type: Boolean,
        "default": false
      },
      // in selectRow(), auto check current and drop primary checked rows?
      "autoCheckCurrent": {
        type: Boolean,
        "default": true
      },
      // in multi mode, which key to toggle row checker?
      "rowToggleKey": {
        type: [String, Array],
        "default": function _default() {
          return ["SPACE"];
        }
      },
      "checkable": {
        type: Boolean,
        "default": false
      },
      "selectable": {
        type: Boolean,
        "default": true
      },
      "openable": {
        type: Boolean,
        "default": true
      },
      "cancelable": {
        type: Boolean,
        "default": true
      },
      "hoverable": {
        type: Boolean,
        "default": false
      },
      "puppetMode": {
        type: Boolean,
        "default": false
      },
      "scrollIndex": {
        type: Boolean,
        "default": false
      },
      "onSelect": {
        type: Function,
        "default": undefined
      },
      "onOpen": {
        type: Function,
        "default": undefined
      },
      //-----------------------------------
      // Aspect
      //-----------------------------------
      "blankAs": {
        type: Object,
        "default": function _default() {
          return {
            icon: "fas-disease",
            text: "empty-data"
          };
        }
      },
      "blankClass": {
        type: String,
        "default": "as-big-mask",
        validator: function validator(v) {
          return /^as-(big|hug|big-mask|mid-tip)$/.test(v);
        }
      },
      //-----------------------------------
      // Measure
      //-----------------------------------
      "width": {
        type: [Number, String],
        "default": null
      },
      "height": {
        type: [Number, String],
        "default": null
      }
    };
    Ti.Preload("ti/com/ti/support/list_props.mjs", _M);
  })(); //============================================================
  // JOIN: ti/switcher/ti-switcher-props.mjs
  //============================================================


  (function () {
    var _M = {
      //-----------------------------------
      // Data
      //-----------------------------------
      "value": null,
      "options": {
        type: [Array, Function, String, Ti.Dict],
        "default": function _default() {
          return [];
        }
      },
      "valueBy": {
        type: [String, Function],
        "default": undefined
      },
      "textBy": {
        type: [String, Function],
        "default": undefined
      },
      "iconeBy": {
        type: [String, Function],
        "default": undefined
      },
      //-----------------------------------
      // Behavior
      //-----------------------------------
      "multi": false,
      // In single mode, to keep at least one item selected,
      // you can set the prop to `false`
      "allowEmpty": {
        type: Boolean,
        "default": true
      },
      "autoSplitValue": {
        type: [Boolean, String],
        "default": true
      },
      //-----------------------------------
      // Aspect
      //-----------------------------------
      "defaultIcon": {
        type: String,
        "default": null
      },
      "emptylAs": {
        "default": null
      },
      //-----------------------------------
      // Measure
      //-----------------------------------
      "width": {
        type: [Number, String],
        "default": null
      },
      "height": {
        type: [Number, String],
        "default": null
      }
    };
    Ti.Preload("ti/com/ti/switcher/ti-switcher-props.mjs", _M);
  })(); //============================================================
  // JOIN: ti/switcher/ti-switcher.html
  //============================================================


  Ti.Preload("ti/com/ti/switcher/ti-switcher.html", "<div class=\"ti-switcher\"\n  :class=\"TopClass\">\n  <!--\n    Show Loading\n  -->\n  <ti-icon\n    v-if=\"loading\"\n    value=\"zmdi-settings zmdi-hc-spin\"/>\n  <!--\n    Options\n  -->\n  <div v-else\n    class=\"switcher-con\">\n    <ul>\n      <li v-for=\"it in TheItems\" \n        :key=\"it.value\"\n        :class=\"it.className\"\n        @click=\"OnClickItem(it, $event)\"\n        @mousedown=\"myFocusIndex=it.index;\">\n        <ti-icon class=\"it-icon\"\n          size=\".8em\"\n          v-if=\"it.icon\" \n          :value=\"it.icon\"/>\n        <span\n          class=\"it-text\">{{it.text|i18n}}</span>\n      </li>\n    </ul>\n  </div>\n</div>"); //============================================================
  // JOIN: ti/switcher/ti-switcher.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////////////////
      data: function data() {
        return {
          loading: false,
          myOptionsData: [],
          myValueMap: {},
          myLastIndex: 0,
          myFocusIndex: -1
        };
      },
      /////////////////////////////////////////////////////
      computed: {
        //-------------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //-------------------------------------------------
        Dict: function Dict() {
          var _this125 = this;

          // Customized
          if (this.options instanceof Ti.Dict) {
            return this.options;
          } // Refer dict


          if (_.isString(this.options)) {
            var dictName = Ti.DictFactory.DictReferName(this.options);

            if (dictName) {
              return Ti.DictFactory.CheckDict(dictName, function (_ref72) {
                var loading = _ref72.loading;
                _this125.loading = loading;
              });
            }
          }

          return Ti.DictFactory.GetOrCreate({
            data: this.options,
            getValue: Ti.Util.genGetter(this.valueBy || "value"),
            getText: Ti.Util.genGetter(this.textBy || "text|name"),
            getIcon: Ti.Util.genGetter(this.iconBy || "icon")
          }, {
            hooks: function hooks(_ref73) {
              var loading = _ref73.loading;
              return _this125.loading = loading;
            }
          });
        },
        //-------------------------------------------------
        TheItems: function TheItems() {
          var _this126 = this;

          return _.map(this.myOptionsData, function (it, index) {
            var itV = _this126.Dict.getValue(it);

            return {
              index: index,
              className: {
                "is-selected": _this126.myValueMap[itV],
                "is-focused": index == _this126.myFocusIndex
              },
              text: _this126.Dict.getText(it),
              value: itV,
              icon: _this126.Dict.getIcon(it) || _this126.defaultIcon
            };
          });
        } //-------------------------------------------------

      },
      /////////////////////////////////////////////////////
      methods: {
        //-------------------------------------------------
        OnClickItem: function OnClickItem(_ref74, $event) {
          var value = _ref74.value,
              index = _ref74.index;
          var toggle = $event.ctrlKey || $event.metaKey;
          var shift = $event.shiftKey; // Multi + Shift Mode

          if (shift && this.multi) {
            this.selectItemsToCurrent(value, index);
          } // Multi + Toggle Mode
          else if (toggle && this.multi) {
              this.toggleItem(value);
            } // Toggle Mode
            else if (this.allowEmpty) {
                this.toggleItem(value);
              } // Single Mode
              else {
                  this.myValueMap = _defineProperty({}, value, true);
                } // Last Index


          this.myLastIndex = index; // Notify

          this.tryNotifyChanged();
        },
        //-------------------------------------------------
        // Utility
        //-------------------------------------------------
        findItemIndexByValue: function findItemIndexByValue(val) {
          var _iterator55 = _createForOfIteratorHelper(this.TheItems),
              _step55;

          try {
            for (_iterator55.s(); !(_step55 = _iterator55.n()).done;) {
              var it = _step55.value;
              if (it.value == val) return it.index;
            }
          } catch (err) {
            _iterator55.e(err);
          } finally {
            _iterator55.f();
          }

          return -1;
        },
        //-------------------------------------------------
        selectItemsToCurrent: function selectItemsToCurrent(val) {
          var vmap = _.cloneDeep(this.myValueMap);

          var index = this.findItemIndexByValue(val);

          if (index >= 0) {
            var fromIndex = Math.min(index, this.myLastIndex);
            var toIndex = Math.max(index, this.myLastIndex);

            if (fromIndex < 0) {
              fromIndex = 0;
            }

            for (var i = fromIndex; i <= toIndex; i++) {
              var it = this.TheItems[i];
              vmap[it.value] = true;
            }
          }

          this.myValueMap = vmap;
        },
        //-------------------------------------------------
        toggleItem: function toggleItem(val) {
          var oldV = this.myValueMap[val];

          if (this.multi) {
            this.myValueMap = _.assign({}, this.myValueMap, _defineProperty({}, val, !oldV));
          } else {
            this.myValueMap = _defineProperty({}, val, !oldV);
          }
        },
        //-------------------------------------------------
        tryNotifyChanged: function tryNotifyChanged() {
          var vals = Ti.Util.truthyKeys(this.myValueMap);

          if (!_.isEqual(vals, this.Values)) {
            var v = this.multi ? vals : vals.join(",");
            this.$notify("change", v);
          }
        },
        //......................................
        reloadMyOptionsData: function reloadMyOptionsData() {
          var _this127 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee63() {
            return regeneratorRuntime.wrap(function _callee63$(_context63) {
              while (1) {
                switch (_context63.prev = _context63.next) {
                  case 0:
                    _context63.next = 2;
                    return _this127.Dict.getData();

                  case 2:
                    _this127.myOptionsData = _context63.sent;

                  case 3:
                  case "end":
                    return _context63.stop();
                }
              }
            }, _callee63);
          }))();
        },
        //......................................
        reloadMyValueMap: function reloadMyValueMap() {
          var sep = null;

          if (this.autoSplitValue) {
            if (_.isBoolean(this.autoSplitValue)) {
              sep = /[:,;\t\n\/]+/g;
            } else {
              sep = this.autoSplitValue;
            }
          }

          var vals = Ti.S.toArray(this.value, {
            sep: sep
          });
          var vmap = {};

          _.forEach(vals, function (v) {
            return vmap[v] = true;
          });

          this.myValueMap = vmap;
        } //......................................

      },
      /////////////////////////////////////////
      watch: {
        "options": {
          handler: "reloadMyOptionsData",
          immediate: true
        },
        "value": {
          handler: "reloadMyValueMap",
          immediate: true
        }
      },
      /////////////////////////////////////////
      mounted: function () {
        var _mounted9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee64() {
          var _this128 = this;

          return regeneratorRuntime.wrap(function _callee64$(_context64) {
            while (1) {
              switch (_context64.prev = _context64.next) {
                case 0:
                  Ti.Dom.watchDocument("mouseup", function () {
                    return _this128.myFocusIndex = -1;
                  });

                case 1:
                case "end":
                  return _context64.stop();
              }
            }
          }, _callee64);
        }));

        function mounted() {
          return _mounted9.apply(this, arguments);
        }

        return mounted;
      }(),
      /////////////////////////////////////////
      beforeDestroy: function beforeDestroy() {
        Ti.Dom.unwatchDocument("mouseup", this.__on_mouseup);
      } /////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/switcher/ti-switcher.mjs", _M);
  })(); //============================================================
  // JOIN: ti/switcher/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/switcher/_com.json", {
    "name": "ti-switcher",
    "globally": true,
    "template": "./ti-switcher.html",
    "props": "./ti-switcher-props.mjs",
    "mixins": ["./ti-switcher.mjs"]
  }); //============================================================
  // JOIN: ti/table/com/table-row/com/table-cell/table-cell.html
  //============================================================

  Ti.Preload("ti/com/ti/table/com/table-row/com/table-cell/table-cell.html", "<td class=\"table-cell\"\n  :class=\"TopClass\"\n  :col-index=\"index\"\n  v-ti-activable>\n  <div class=\"cell-wrapper\"\n    :class=\"WrapperClass\">\n    <!--Slot for first column-->\n    <slot></slot>\n    <!--Fields-->\n    <div class=\"cell-con\">\n      <component \n        v-for=\"(it, index) in cellItems\"\n          :class=\"'item-'+index\"\n          :key=\"it.uniqueKey\"\n          :is=\"it.comType\"\n          v-bind=\"it.comConf\"\n          @change=\"OnItemChanged(it, $event)\"/>\n    </div>\n  </div>\n</td>"); //============================================================
  // JOIN: ti/table/com/table-row/com/table-cell/table-cell.mjs
  //============================================================

  (function () {
    /////////////////////////////////////////////////////
    var _M = {
      ///////////////////////////////////////////////////
      inject: ["$table"],
      ///////////////////////////////////////////////////
      data: function data() {
        return {
          isEditingMode: false,
          cellItems: [],
          myCellSize: -1
        };
      },
      ///////////////////////////////////////////////////
      props: {
        "index": {
          type: Number,
          "default": -1
        },
        "rowId": {
          type: String,
          "default": null
        },
        "rowIndex": {
          type: Number,
          "default": -1
        },
        //..........................
        "title": {
          type: String,
          "default": null
        },
        "nowrap": {
          type: Boolean,
          "default": true
        },
        //..........................
        "display": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        //..........................
        "name": {
          type: [String, Array],
          "default": null
        },
        "type": {
          type: String,
          "default": "String"
        },
        "dict": {
          type: String,
          "default": "String"
        },
        "comType": {
          type: String,
          "default": null
        },
        "comConf": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "serializer": {
          type: Function,
          "default": _.identity
        },
        "transformer": {
          type: Function,
          "default": _.identity
        },
        //..........................
        "data": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        //..........................
        "isCurrent": {
          type: Boolean,
          "default": false
        },
        "isHover": {
          type: Boolean,
          "default": false
        },
        "isChecked": {
          type: Boolean,
          "default": false
        },
        //..........................
        "ignoreNil": {
          type: Boolean,
          "default": true
        },
        //..........................
        "focusBy": {
          type: String,
          "default": "focus"
        } //..........................

      },
      ///////////////////////////////////////////////////
      computed: {
        //-----------------------------------------------
        TopClass: function TopClass() {
          var hasAlign = this.className && this.className.indexOf("align-") >= 0;
          return this.getTopClass({
            "has-align": hasAlign,
            "not-align": !hasAlign
          });
        },
        //-----------------------------------------------
        WrapperClass: function WrapperClass() {
          return {
            "is-nowrap": this.nowrap,
            "is-editing-mode": this.isEditingMode
          };
        },
        //-----------------------------------------------
        theCurrentDisplayItems: function theCurrentDisplayItems() {
          // Edit Mode
          if (this.isActived && this.comType || _.isEmpty(this.display)) {
            //...........................................
            this.isEditingMode = true; //...........................................

            var comConf = _.assign({}, this.comConf);

            if (this.focusBy) {
              comConf[this.focusBy] = "${=isActived}";
            } //...........................................


            return [{
              comType: this.comType,
              comConf: comConf,
              key: this.name,
              type: this.type,
              dict: this.dict,
              transformer: this.transformer,
              ignoreNil: false
            }]; //...........................................
          } // Display Mode


          this.isEditingMode = false;
          return this.display;
        } //-----------------------------------------------

      },
      ///////////////////////////////////////////////////
      methods: {
        //-----------------------------------------------
        evalCellDisplayItems: function evalCellDisplayItems() {
          var _this129 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee65() {
            var items, i, displayItem, it, old, nit;
            return regeneratorRuntime.wrap(function _callee65$(_context65) {
              while (1) {
                switch (_context65.prev = _context65.next) {
                  case 0:
                    items = []; // Eval each items

                    i = 0;

                  case 2:
                    if (!(i < _this129.theCurrentDisplayItems.length)) {
                      _context65.next = 11;
                      break;
                    }

                    displayItem = _this129.theCurrentDisplayItems[i];
                    _context65.next = 6;
                    return _this129.evalDataForFieldDisplayItem({
                      itemData: _this129.data,
                      displayItem: displayItem,
                      vars: {
                        "rowId": _this129.rowId,
                        "isCurrent": _this129.isCurrent
                      },
                      autoIgnoreNil: true,
                      uniqueKey: "row".concat(_this129.rowId, "-cell").concat(_this129.index, "-").concat(i)
                    });

                  case 6:
                    it = _context65.sent;

                    if (it) {
                      items.push(it);
                    }

                  case 8:
                    i++;
                    _context65.next = 2;
                    break;

                  case 11:
                    //if(0 == this.rowIndex && 1==this.index) {
                    //console.log("evalCellDisplayItems", this.rowIndex, this.index)
                    //}
                    // Update and return
                    old = Ti.Util.pureCloneDeep(_this129.cellItems);
                    nit = Ti.Util.pureCloneDeep(items);

                    if (!_.isEqual(old, nit)) {
                      //console.log(`-> Cell[${this.rowIndex}-${this.index}]:`, {old, nit})
                      _this129.cellItems = items;
                    }

                  case 14:
                  case "end":
                    return _context65.stop();
                }
              }
            }, _callee65);
          }))();
        },
        //-----------------------------------------------
        OnItemChanged: function OnItemChanged(item, payload) {
          this.$table.$notify("cell:item:change", {
            rowId: this.rowId,
            cellIndex: this.index,
            index: this.rowIndex,
            name: item.key,
            value: payload
          });
        } //-----------------------------------------------

      },
      ///////////////////////////////////////////////////
      watch: {
        "data": {
          handler: "evalCellDisplayItems",
          immediate: true
        },
        "isCurrent": "evalCellDisplayItems"
      } ///////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/table/com/table-row/com/table-cell/table-cell.mjs", _M);
  })(); //============================================================
  // JOIN: ti/table/com/table-row/com/table-cell/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/table/com/table-row/com/table-cell/_com.json", {
    "name": "table-cell",
    "globally": false,
    "template": "./table-cell.html",
    "methods": "@com:ti/support/field_display.mjs",
    "mixins": ["./table-cell.mjs"],
    "components": ["@com:ti/label"]
  }); //============================================================
  // JOIN: ti/table/com/table-row/table-row.html
  //============================================================

  Ti.Preload("ti/com/ti/table/com/table-row/table-row.html", "<tr class=\"table-row\"\n  :class=\"TopClass\"\n  @click.left=\"OnClickRow\"\n  @dblclick.left=\"OnDblClickRow\"\n  v-ti-activable>\n  <!--\n    Cells\n  -->\n  <table-cell v-for=\"fld in fields\"\n    :key=\"fld.index\"\n    v-bind=\"fld\"\n    :row-id=\"rowId\"\n    :row-index=\"index\"\n    :is-current=\"isCurrent\"\n    :is-hover=\"isHover\"\n    :is-checked=\"isChecked\"\n    :data=\"data\">\n    <template v-if=\"fld.index == 0\">\n      <div class=\"table-row-head\">\n        <!--current actived row indicator-->\n        <div class=\"row-actived-indicator\"></div>\n        <!-- Indents -->\n        <div v-for=\"n in indent\"\n            class=\"row-indent\"></div>\n        <!--ICON: Handler-->\n        <template v-if=\"icon\">\n          <ti-icon\n            v-if=\"hasRealIcon\"\n              class=\"row-icon\"\n              :value=\"icon\"\n              @click.native.left.stop=\"OnClickIcon\"/>\n          <div v-else\n            class=\"row-icon\"></div>\n        </template>\n        <!--ICON: Checker-->\n        <ti-icon v-if=\"checkable\"\n            class=\"row-checker\"\n            :value=\"theCheckIcon\"\n            @click.native.left.stop=\"OnClickChecker\"/>\n      </div>\n    </template>\n  </table-cell>\n</tr>"); //============================================================
  // JOIN: ti/table/com/table-row/table-row.mjs
  //============================================================

  (function () {
    /////////////////////////////////////////////////////
    var _M = {
      ///////////////////////////////////////////////////
      props: {
        "indent": {
          type: Number,
          "default": 0
        },
        "icon": {
          type: [Boolean, String],
          "default": null
        },
        "fields": {
          type: Array,
          "default": function _default() {
            return [];
          }
        }
      },
      ///////////////////////////////////////////////////
      computed: {
        //-----------------------------------------------
        TopClass: function TopClass() {
          return this.getListItemClass({
            "is-hover": this.isHover
          }, "row-indent-".concat(this.indent));
        },
        //-----------------------------------------------
        isHover: function isHover() {
          return this.hoverId && this.rowId == this.hoverId;
        },
        //-----------------------------------------------
        hasRealIcon: function hasRealIcon() {
          return this.icon && _.isString(this.icon);
        } //-----------------------------------------------

      },
      ///////////////////////////////////////////////////
      methods: {
        //-----------------------------------------------
        OnClickIcon: function OnClickIcon($event) {
          this.$notify("icon", {
            rowId: this.rowId,
            shift: $event.shiftKey,
            toggle: $event.ctrlKey || $event.metaKey
          });
        } //-----------------------------------------------

      } ///////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/table/com/table-row/table-row.mjs", _M);
  })(); //============================================================
  // JOIN: ti/table/com/table-row/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/table/com/table-row/_com.json", {
    "name": "table-row",
    "globally": false,
    "template": "./table-row.html",
    "mixins": ["@com:ti/support/list_item_mixins.mjs", "./table-row.mjs"],
    "components": ["./com/table-cell"]
  }); //============================================================
  // JOIN: ti/table/ti-table-props.mjs
  //============================================================

  (function () {
    var _M = {
      "iconBy": {
        type: [String, Function],
        "default": null
      },
      "indentBy": {
        type: [String, Function],
        "default": null
      },
      "fields": {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      "head": {
        type: String,
        "default": "frozen",
        validator: function validator(v) {
          return Ti.Util.isNil(v) || /^(frozen|none|normal)$/.test(v);
        }
      },
      "border": {
        type: String,
        "default": "cell",
        validator: function validator(v) {
          return /^(row|column|cell|none)$/.test(v);
        }
      },
      "autoScrollIntoView": {
        type: Boolean,
        "default": true
      }
    };
    Ti.Preload("ti/com/ti/table/ti-table-props.mjs", _M);
  })(); //============================================================
  // JOIN: ti/table/ti-table-resizes.mjs
  //============================================================


  (function () {
    var _M = {
      ///////////////////////////////////////////////////
      data: function data() {
        return {
          myViewportWidth: 0,
          // Update-in-time, root element width
          myTableWidth: 0,
          // Update-in-time, table width
          myColSizes: {
            priHead: [],
            // Primary head column sizing
            priBody: [],
            // Primary body column sizing
            primary: [],
            // Primary Max Col-Sizes
            fixeds: [],
            // Fixed value [480, .23, 'auto', 'stretch']
            // Eval when `evalEachColumnSize`
            //  - 480 : fixed width
            //  - -480 : fixed width and override primary
            //  - .23 : as percent eval each time resize
            //  - 'auto' : it will keep the primary sizing
            //  - 'stretch' : it will join to the auto-remains-assignment
            amended: [] // The col-size to display in DOM

          },
          myCellsReady: false,
          myCellsReport: {},
          I_am_in_resizing: false
        };
      },
      ///////////////////////////////////////////////////
      methods: {
        //--------------------------------------
        reportReady: function reportReady() {
          var _this130 = this;

          var rowIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
          var cellIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
          var isDone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
          var key = "R".concat(rowIndex, "-C").concat(cellIndex); //console.log(key, isDone)

          if (isDone) {
            delete this.myCellsReport[key];
          } else {
            this.myCellsReport[key] = isDone;
          } // Check the status


          _.delay(function () {
            _this130.myCellsReady = _.isEmpty(_this130.myCellsReport); // Do resize

            if (_this130.myCellsReady) {
              _this130.evalEachColumnSize();
            }
          });
        },
        //--------------------------------------
        evalEachColumnSize: function evalEachColumnSize() {
          var _this131 = this;

          // Guard
          if (this.I_am_in_resizing) {
            return;
          } //console.log("evalEachColumnSize", this, this.tiComType)
          // Remember the current scrollTop


          var oldScrollTop = _.get(this.$refs.body, "scrollTop"); // Reset each column size


          this.I_am_in_resizing = true;
          this.myTableWidth = 0;
          this.myColSizes = {
            priHead: [],
            priBody: [],
            primary: [],
            fixeds: [],
            amended: []
          }; //.........................................
          // Eval the fixeds

          var _iterator56 = _createForOfIteratorHelper(this.TableFields),
              _step56;

          try {
            for (_iterator56.s(); !(_step56 = _iterator56.n()).done;) {
              var fld = _step56.value;
              var fldWidth = fld.width || "stretch"; // Stretch/Auto

              if (/^(stretch|auto)$/.test(fldWidth)) {
                this.myColSizes.fixeds.push(fldWidth);
              } // Fixed or percent
              else {
                  this.myColSizes.fixeds.push(Ti.Css.toPixel(fldWidth, 1));
                }
            } //.........................................
            // Wait reset applied, and ...

          } catch (err) {
            _iterator56.e(err);
          } finally {
            _iterator56.f();
          }

          this.$nextTick(function () {
            // Get original size: head
            var $heads = Ti.Dom.findAll(".table-head ul li", _this131.$el);

            var _iterator57 = _createForOfIteratorHelper($heads),
                _step57;

            try {
              for (_iterator57.s(); !(_step57 = _iterator57.n()).done;) {
                var $he = _step57.value;
                var rect = Ti.Rects.createBy($he);

                _this131.myColSizes.priHead.push(rect.width);
              } // Get original size: body

            } catch (err) {
              _iterator57.e(err);
            } finally {
              _iterator57.f();
            }

            var $rows = Ti.Dom.findAll(".table-body .table-row", _this131.$el);

            var _iterator58 = _createForOfIteratorHelper($rows),
                _step58;

            try {
              for (_iterator58.s(); !(_step58 = _iterator58.n()).done;) {
                var $row = _step58.value;
                var $cells = Ti.Dom.findAll(":scope > div", $row);

                for (var x = 0; x < $cells.length; x++) {
                  var $cell = $cells[x];

                  var _rect = Ti.Rects.createBy($cell);

                  if (x >= _this131.myColSizes.priBody.length) {
                    _this131.myColSizes.priBody[x] = _rect.width;
                  } else {
                    _this131.myColSizes.priBody[x] = Math.max(_rect.width, _this131.myColSizes.priBody[x]);
                  }
                }
              } // Count the primary max sizing for each columns

            } catch (err) {
              _iterator58.e(err);
            } finally {
              _iterator58.f();
            }

            for (var i = 0; i < _this131.myColSizes.priHead.length; i++) {
              var wHeadCell = _this131.myColSizes.priHead[i];
              var wBodyCell = _this131.myColSizes.priBody[i];
              var w = Math.max(wHeadCell, wBodyCell);

              _this131.myColSizes.primary.push(w);
            } // Resize Table


            _this131.onTableResize(); // Mark back the resizing and restore scrollTop


            _.delay(function () {
              _this131.I_am_in_resizing = false;
              if (_this131.$refs.body) _this131.$refs.body.scrollTop = oldScrollTop;
            }, 10);
          });
        },
        //--------------------------------------
        onTableResize: function onTableResize() {
          // Guard it
          var colN = this.myColSizes.primary.length;

          if (colN <= 0) {
            return;
          } // Get the viewport width


          var viewportWidth = Ti.Rects.createBy(this.$el).width; //console.log("onTableResize")
          // Assign the fixed width
          // And count how many fields to join the remains-assignment

          var raIndexs = [];
          var amended = [];

          for (var i = 0; i < this.myColSizes.fixeds.length; i++) {
            var fxW = this.myColSizes.fixeds[i]; // Get the primary width

            var priW = this.myColSizes.primary[i]; // join to auto-remains-assignment

            if ("stretch" == fxW) {
              raIndexs.push(i);
              amended.push(priW);
            } // keep primary
            else if ("auto" == fxW) {
                amended.push(priW);
              } // Eval percent
              else if (fxW <= 1 && fxW > 0) {
                  amended.push(fxW * viewportWidth);
                } // Eval percent and join remains-assignment
                else if (fxW < 0 && fxW >= -1) {
                    var w = Math.abs(fxW * viewportWidth);
                    amended.push(Math.max(w, priW));
                  } // Fixed width and join remains-assignment
                  else if (fxW < -1) {
                      var _w = Math.abs(fxW);

                      amended.push(Math.max(_w, priW));
                    } // Fixed width
                    else {
                        amended.push(fxW);
                      }
          } // Count the tableWidth


          var sumWidth = _.sum(amended);

          var tableWidth = Math.max(viewportWidth, sumWidth);
          this.myTableWidth = tableWidth; // Assign the remain

          if (raIndexs.length > 0) {
            var remain = tableWidth - sumWidth;

            if (remain > 0) {
              var remainCell = remain / raIndexs.length;

              var _iterator59 = _createForOfIteratorHelper(raIndexs),
                  _step59;

              try {
                for (_iterator59.s(); !(_step59 = _iterator59.n()).done;) {
                  var index = _step59.value;
                  amended[index] += remainCell;
                }
              } catch (err) {
                _iterator59.e(err);
              } finally {
                _iterator59.f();
              }
            }
          } // apply amended


          this.myColSizes.amended = amended;
        } //--------------------------------------

      },
      ///////////////////////////////////////////////////
      mounted: function () {
        var _mounted10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee66() {
          var _this132 = this;

          return regeneratorRuntime.wrap(function _callee66$(_context66) {
            while (1) {
              switch (_context66.prev = _context66.next) {
                case 0:
                  //.................................
                  Ti.Viewport.watch(this, {
                    resize: _.debounce(function () {
                      return _this132.onTableResize();
                    }, 10)
                  }); //.................................

                case 1:
                case "end":
                  return _context66.stop();
              }
            }
          }, _callee66, this);
        }));

        function mounted() {
          return _mounted10.apply(this, arguments);
        }

        return mounted;
      }(),
      ///////////////////////////////////////////////////
      beforeDestroy: function beforeDestroy() {
        Ti.Viewport.unwatch(this);
      } ///////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/table/ti-table-resizes.mjs", _M);
  })(); //============================================================
  // JOIN: ti/table/ti-table.html
  //============================================================


  Ti.Preload("ti/com/ti/table/ti-table.html", "<div class=\"ti-table\"\n  :class=\"TopClass\"\n  @click=\"OnClickTop\"\n  v-ti-activable>\n  <!--\n    Blank\n  -->\n  <ti-loading \n    v-if=\"isDataEmpty\"\n      class=\"nil-data\"\n      :class=\"blankClass\"\n      v-bind=\"blankAs\"/>\n  <!--\n    Show thead/tbody\n  -->\n  <template v-else>\n    <!--\n      Table\n    -->\n    <table ref=\"table\">\n      <!--\n        Head\n      -->\n      <thead v-if=\"isShowHead\"\n        class=\"table-head\"\n        :style=\"TableStyle\">\n        <!--field titles-->\n        <tr>\n          <th\n            v-for=\"fld in TableFields\"\n              :style=\"getHeadCellStyle(fld)\"\n              :col-index=\"fld.index\">\n            <span class=\"table-head-cell-text\">{{fld.title|i18n}}</span>\n          </th>\n        </tr>\n      </thead>\n      <!--\n        Body\n      -->\n      <tbody\n        class=\"table-body\"\n        :style=\"TableStyle\">\n        <table-row\n          v-for=\"row in myData\"\n            :key=\"row.id\"\n            :row-id=\"row.id\"\n            :index=\"row.index\"\n            :icon=\"row.icon\"\n            :indent=\"row.indent\"\n            :data=\"row.rawData\"\n            :fields=\"TableFields\"\n            :current-id=\"theCurrentId\"\n            :checked-ids=\"theCheckedIds\"\n            :changed-id=\"changedId\"\n            :checkable=\"checkable\"\n            :selectable=\"selectable\"\n            :openable=\"openable\"\n            @icon=\"$notify('icon', $event)\"\n            @checker=\"OnRowCheckerClick\"\n            @select=\"OnRowSelect\"\n            @open=\"OnRowOpen\"/>\n        </tbody>\n    </table>\n    <!--checker-->\n    <div\n      v-if=\"checkable && multi && isShowHead\"\n        class=\"as-checker\"\n        @click.left=\"OnClickHeadChecker\">\n        <ti-icon :value=\"HeadCheckerIcon\"/>\n    </div>\n  </template>\n</div>"); //============================================================
  // JOIN: ti/table/ti-table.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////////////
      provide: function provide() {
        return {
          "$table": this
        };
      },
      ///////////////////////////////////////////////////
      data: function data() {
        return {
          myTableRect: null,
          myData: []
        };
      },
      ///////////////////////////////////////////////////
      // props -> ti-table-props.mjs
      ///////////////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          var klass = this.getTopClass({
            // "is-cells-no-ready" : !this.myCellsReady,
            // "is-layout-ready" : this.myCellsReady,
            "is-hoverable": this.hoverable
          }, ["is-border-".concat(this.border), "is-head-".concat(this.head || "none")]); // Auto judgement table layout

          if (!klass['is-layout-fixed'] && !klass['is-layout-auto']) {
            var tableLayout = "auto";

            for (var i = 0; i < this.fields.length; i++) {
              var fld = this.fields[i];

              if (!Ti.Util.isNil(fld.width)) {
                tableLayout = "fixed";
                break;
              }
            }

            klass["is-layout-".concat(tableLayout)] = true;
          }

          return klass;
        },
        //--------------------------------------
        TableStyle: function TableStyle() {
          if (this.myTableWidth > 0) {
            return Ti.Css.toStyle({
              "width": this.myTableWidth
            });
          }
        },
        //--------------------------------------
        getRowIndent: function getRowIndent() {
          var _this133 = this;

          if (_.isFunction(this.indentBy)) {
            return function (it) {
              return _this133.indentBy(it);
            };
          }

          if (_.isString(this.indentBy)) {
            return function (it) {
              return _.get(it, _this133.indentBy);
            };
          }

          return function (it) {
            return 0;
          };
        },
        //--------------------------------------
        getRowIcon: function getRowIcon() {
          var _this134 = this;

          if (_.isFunction(this.iconBy)) {
            return function (it) {
              return _this134.iconBy(it);
            };
          }

          if (_.isString(this.iconBy)) {
            return function (it) {
              return _.get(it, _this134.iconBy);
            };
          }

          return function (it) {
            return null;
          };
        },
        //--------------------------------------
        TheData: function TheData() {
          return this.myData;
        },
        //--------------------------------------
        isShowHead: function isShowHead() {
          return /^(frozen|normal)$/.test(this.head);
        },
        //--------------------------------------
        HeadCheckerIcon: function HeadCheckerIcon() {
          if (this.isAllChecked) {
            return "fas-check-square";
          }

          if (this.hasChecked) {
            return "fas-minus-square";
          }

          return "far-square";
        },
        //--------------------------------------
        TableFields: function TableFields() {
          var fields = [];

          for (var i = 0; i < this.fields.length; i++) {
            var fld = this.fields[i]; //..................................

            var display = this.evalFieldDisplay(fld.display, fld.name); //..................................

            var fldWidth = Ti.Util.fallbackNil(fld.width, "stretch"); //..................................

            if (_.isString(fldWidth)) {
              // Percent
              if (/^\d+(\.\d+)?%$/.test(fldWidth)) {
                fldWidth = fldWidth.substring(0, fldWidth.length - 1) / 100;
              } // Auto or stretch
              else if (!/^(auto|stretch)$/.test(fldWidth)) {
                  fldWidth = "stretch";
                }
            } // Must be number
            else if (!_.isNumber(fldWidth)) {
                fldWidth = "stretch";
              } //..................................


            fields.push({
              index: i,
              title: fld.title,
              nowrap: fld.nowrap,
              width: fldWidth,
              className: fld.className,
              //.....................
              name: fld.name,
              display: display,
              //.....................
              type: fld.type,
              comType: fld.comType,
              comConf: fld.comConf,
              transformer: fld.transformer,
              serializer: fld.serializer
            });
          }

          return fields;
        } //--------------------------------------

      },
      ///////////////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnClickHeadChecker: function OnClickHeadChecker() {
          // Cancel All
          if (this.isAllChecked) {
            this.cancelRow();
          } // Check All
          else {
              this.checkRow();
            }
        },
        //--------------------------------------
        OnClickTop: function OnClickTop($event) {
          if (this.cancelable) {
            // Click The body or top to cancel the row selection
            if (Ti.Dom.hasOneClass($event.target, 'ti-table', 'table-body', 'table-head-cell', 'table-head-cell-text')) {
              this.cancelRow();
            }
          }
        },
        //--------------------------------------
        onItemChanged: function onItemChanged(payload) {
          this.$notify("item:change", payload);
        },
        //--------------------------------------
        getHeadCellStyle: function getHeadCellStyle(fld) {
          if (fld && !Ti.Util.isNil(fld.width) && this.myTableRect && this.myTableRect.width > 0) {
            // Copy width
            var width = fld.width; // Number

            if (_.isNumber(width)) {
              // -100: it will conver to percent
              if (width < 0) {
                var per = Math.abs(width / this.myTableRect.width);
                width = Math.round(per * 100) + "%";
              } // 0-1: => Percent
              else if (width >= 0 && width < 1) {
                  width = Math.round(width * 100) + "%";
                } // 100: => pixcel
                else {
                    width = "".concat(width, "px");
                  }
            }

            return {
              width: width
            };
          }
        },
        //--------------------------------------
        evalFieldDisplay: function evalFieldDisplay() {
          var displayItems = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var defaultKey = arguments.length > 1 ? arguments[1] : undefined;
          // Force to Array
          displayItems = _.concat(displayItems); // Prepare the return list

          var items = []; // Loop each items

          var _iterator60 = _createForOfIteratorHelper(displayItems),
              _step60;

          try {
            for (_iterator60.s(); !(_step60 = _iterator60.n()).done;) {
              var li = _step60.value;
              var item = this.evalFieldDisplayItem(li, {
                defaultKey: defaultKey
              });

              if (item) {
                items.push(item);
              }
            } // // Gen transformer for each item
            // for(let it of items) {
            //   // Transformer
            //   it.transformer = Ti.Types.getFuncBy(it, "transformer", this.fnSet)
            // }
            // Array to pick

          } catch (err) {
            _iterator60.e(err);
          } finally {
            _iterator60.f();
          }

          return items;
        },
        //--------------------------------------
        scrollCurrentIntoView: function scrollCurrentIntoView() {
          //console.log("scrollCurrentIntoView", this.myLastIndex)
          if (this.autoScrollIntoView && this.theCurrentId) {
            var index = this.findRowIndexById(this.theCurrentId); //console.log("scroll", index)

            var $view = this.$el;
            var $row = Ti.Dom.find(".table-row:nth-child(".concat(index + 1, ")"), $view);

            if (!_.isElement($view) || !_.isElement($row)) {
              return;
            }

            var r_view = Ti.Rects.createBy($view);
            var r_row = Ti.Rects.createBy($row); // test it need to scroll or not

            if (!r_view.contains(r_row)) {
              // at bottom
              if (r_row.bottom > r_view.bottom) {
                $view.scrollTop += r_row.bottom - r_view.bottom;
              } // at top
              else {
                  $view.scrollTop += r_row.top - r_view.top;
                }
            }
          }
        },
        //--------------------------------------
        OnResize: function OnResize() {
          if (this.$refs.table) {
            this.myTableRect = Ti.Rects.createBy(this.$refs.table); //console.log("OnResize", this.myTableRect.width)
          }
        },
        //--------------------------------------
        __ti_shortcut: function __ti_shortcut(uniqKey) {
          //console.log("ti-table", uniqKey)
          if ("ARROWUP" == uniqKey) {
            this.selectPrevRow({
              payload: {
                byKeyboardArrow: true
              }
            });
            this.scrollCurrentIntoView();
            return {
              prevent: true,
              stop: true,
              quit: true
            };
          }

          if ("ARROWDOWN" == uniqKey) {
            this.selectNextRow({
              payload: {
                byKeyboardArrow: true
              }
            });
            this.scrollCurrentIntoView();
            return {
              prevent: true,
              stop: true,
              quit: true
            };
          }
        } //--------------------------------------

      },
      ///////////////////////////////////////////////////
      watch: {
        "data": {
          handler: function () {
            var _handler2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee67(newVal, oldVal) {
              var _this135 = this;

              var isSame;
              return regeneratorRuntime.wrap(function _callee67$(_context67) {
                while (1) {
                  switch (_context67.prev = _context67.next) {
                    case 0:
                      isSame = _.isEqual(newVal, oldVal);

                      if (isSame) {
                        _context67.next = 5;
                        break;
                      }

                      _context67.next = 4;
                      return this.evalData(function (it) {
                        it.icon = _this135.getRowIcon(it.item);
                        it.indent = _this135.getRowIndent(it.item);
                      });

                    case 4:
                      this.myData = _context67.sent;

                    case 5:
                      // Check ready 
                      if (_.isEmpty(this.data)) {
                        this.myCellsReady = true;
                      }

                    case 6:
                    case "end":
                      return _context67.stop();
                  }
                }
              }, _callee67, this);
            }));

            function handler(_x5, _x6) {
              return _handler2.apply(this, arguments);
            }

            return handler;
          }(),
          immediate: true
        }
      },
      ///////////////////////////////////////////////////
      mounted: function mounted() {
        var _this136 = this;

        Ti.Viewport.watch(this, {
          resize: _.debounce(function () {
            return _this136.OnResize();
          }, 10)
        });
        this.$nextTick(function () {
          return _this136.OnResize();
        });

        if (this.autoScrollIntoView) {
          _.delay(function () {
            _this136.scrollCurrentIntoView();
          }, 0);
        }
      },
      ///////////////////////////////////////////////////
      beforeDestroy: function beforeDestroy() {
        Ti.Viewport.unwatch(this);
      } ///////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/table/ti-table.mjs", _M);
  })(); //============================================================
  // JOIN: ti/table/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/table/_com.json", {
    "name": "ti-table",
    "globally": true,
    "template": "./ti-table.html",
    "props": ["@com:ti/support/list_props.mjs", "./ti-table-props.mjs"],
    "methods": "@com:ti/support/field_display.mjs",
    "mixins": ["@com:ti/support/list_mixins.mjs", "./ti-table.mjs"],
    "components": ["./com/table-row"]
  }); //============================================================
  // JOIN: ti/tags/com/tags-item/tags-item.html
  //============================================================

  Ti.Preload("ti/com/ti/tags/com/tags-item/tags-item.html", "<div class=\"ti-tags-item\" \n  :class=\"topClass\"\n  @mouseenter=\"mouseEnter='top'\"\n  @mouseleave=\"mouseEnter=null\"\n  @click.left=\"onClickTop\">\n  <!--\n    Deleter\n  -->\n  <ti-icon v-if=\"removable\"\n    class=\"as-del\"\n    :value=\"removeIcon\"\n    @mouseenter.native=\"mouseEnter='del'\"\n    @mouseleave.native=\"mouseEnter='top'\"\n    @click.native.stop=\"onClickDel\"/>\n  <!--\n    Icon\n  -->\n  <ti-icon v-if=\"icon\" \n    class=\"as-icon\"\n    :value=\"icon\"/>\n  <!--\n    Text\n  -->\n  <template v-if=\"text\">\n    <a v-if=\"href\"\n      class=\"as-text\"\n      @click.prevent\n      :href=\"href\"\n      :class=\"textClass\">{{text|i18n}}</a>\n    <span v-else\n      class=\"as-text\"\n      :class=\"textClass\">{{text|i18n}}</span>\n  </template>\n  <!--\n    Status Icon\n  -->\n  <ti-icon v-if=\"hasOptions\"\n    class=\"as-status\"\n    :value=\"theStatusIcon\"/>\n  <!--\n    Drop & Mask\n  -->\n  <template v-if=\"'extended' == status\">\n    <div class=\"as-mask\" @click.stop=\"closeDrop\"></div>\n    <div class=\"as-drop\" ref=\"drop\"\n      @click.stop>\n      <ti-icon-text v-for=\"it in theOptions\"\n        :key=\"it.index\"\n        v-bind=\"it\"\n        @click.native=\"onClickOption(it)\"/>\n    </div>\n  </template>\n</div>"); //============================================================
  // JOIN: ti/tags/com/tags-item/tags-item.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          // null / top / del
          mouseEnter: null,
          // collapse / extended
          status: "collapse"
        };
      },
      ////////////////////////////////////////////////////
      props: {
        "index": {
          type: Number,
          "default": -1
        },
        "atLast": {
          type: Boolean,
          "default": false
        },
        "icon": {
          type: [String, Object],
          "default": null
        },
        "text": {
          type: String,
          "default": null
        },
        "href": {
          type: String,
          "default": null
        },
        "value": {
          type: [String, Number, Boolean, Object],
          "default": null
        },

        /***
         * Show drop list for changing the piece value
         * 
         * ```js
         * [{
         *   icon  : "zmdi-card-giftcard",
         *   text  : "随便什么礼物",
         *   value : "Gift"
         * }, {
         *   icon  : "zmdi-cocktail",
         *   text  : "鸡尾酒会",
         *   value : "Cocktail"
         * }, {
         *   icon  : "zmdi-nature-people",
         *   text  : "人在树下；雨在天空",
         *   value : "NaturePeople"
         * }]
         * ```
         */
        "options": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "optionDefaultIcon": {
          type: String,
          "default": null
        },
        "cancelBubble": {
          type: Boolean,
          "default": false
        },
        "removable": {
          type: Boolean,
          "default": false
        },
        "removeIcon": {
          type: String,
          "default": null
        },
        "statusIcons": {
          type: Object,
          "default": function _default() {
            return {
              collapse: "zmdi-chevron-down",
              extended: "zmdi-chevron-up"
            };
          }
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        topClass: function topClass() {
          return Ti.Css.mergeClassName({
            "has-options": this.hasOptions,
            "is-enter-top": 'top' == this.mouseEnter && this.hasOptions,
            "is-enter-del": 'del' == this.mouseEnter
          }, this.className);
        },
        //------------------------------------------------
        textClass: function textClass() {
          return {
            "without-icon": !this.hasIcon && !this.removable,
            "without-options": !this.hasOptions
          };
        },
        //------------------------------------------------
        hasIcon: function hasIcon() {
          return this.icon ? true : false;
        },
        //------------------------------------------------
        hasOptions: function hasOptions() {
          return _.isArray(this.options) && this.options.length > 0;
        },
        //------------------------------------------------

        /***
         * @return The objects list like:
         * 
         * ```js
         * [{
          *   icon  : "zmdi-phone",
          *   text  : "i18n:xxx",
          *   value : 100,
          *   options : [{icon,text,value}...]
          * }]
          * ```
          */
        theOptions: function theOptions() {
          var _this137 = this;

          var list = _.filter(_.concat(this.options), function (v) {
            return !Ti.Util.isNil(v);
          });

          var tags = [];

          _.forEach(list, function (li, index) {
            var tag; // Object

            if (_.isPlainObject(li)) {
              tag = _.assign({
                icon: _this137.optionDefaultIcon
              }, li, {
                index: index
              });
            } // String or simple value
            else {
                tag = {
                  index: index,
                  icon: _this137.optionDefaultIcon,
                  text: Ti.Types.toStr(li),
                  value: li
                };
              } // Join to


            if (!_.isEqual(tag.value, _this137.value)) {
              tags.push(tag);
            }
          });

          return tags;
        },
        //------------------------------------------------
        theStatusIcon: function theStatusIcon() {
          return this.statusIcons[this.status];
        },
        //------------------------------------------------
        theData: function theData() {
          return {
            index: this.index,
            icon: this.icon,
            text: this.text,
            value: this.value,
            href: this.href,
            atLast: this.atLast,
            asterisk: this.asterisk
          };
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        onClickDel: function onClickDel() {
          this.$notify("remove", this.theData);
        },
        //------------------------------------------------
        onClickOption: function onClickOption() {
          var _ref75 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              value = _ref75.value,
              text = _ref75.text,
              icon = _ref75.icon;

          this.$notify("change", {
            value: value,
            text: text,
            icon: icon,
            index: this.index
          });
          this.closeDrop();
        },
        //------------------------------------------------
        onClickTop: function onClickTop($event) {
          // Show Drop Down
          if (this.hasOptions) {
            $event.stopPropagation();
            this.openDrop();
          } // Stop Bubble Up
          else if (this.cancelBubble) {
              $event.stopPropagation();
            } // Emit event


          if (this.href) {
            this.$notify("fire", this.theData);
          }
        },
        //------------------------------------------------
        openDrop: function openDrop() {
          var _this138 = this;

          if (this.hasOptions) {
            this.status = "extended";
            this.$nextTick(function () {
              _this138.dockDrop();
            });
          }
        },
        //------------------------------------------------
        closeDrop: function closeDrop() {
          this.status = "collapse";
          this.mouseEnter = null;
        },
        //------------------------------------------------
        dockDrop: function dockDrop() {
          var $drop = this.$refs.drop;
          var $box = this.$el; // Guard the elements

          if (!_.isElement($drop) || !_.isElement($box)) {
            return;
          } // If drop opened, make the box position fixed
          // to at the top of mask


          if ("extended" == this.status) {
            var r_box = Ti.Rects.createBy($box); //..........................................
            // Make drop same width with box

            Ti.Dom.setStyle($drop, {
              "min-width": "".concat(r_box.width, "px")
            }); //..........................................
            // Dock drop to box

            Ti.Dom.dockTo($drop, $box, {
              space: {
                y: 2
              },
              posListX: ["left", "right"]
            }); //..........................................
          }
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      mounted: function mounted() {
        this.dockDrop();
      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/tags/com/tags-item/tags-item.mjs", _M);
  })(); //============================================================
  // JOIN: ti/tags/com/tags-item/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/tags/com/tags-item/_com.json", {
    "name": "tags-item",
    "globally": false,
    "template": "./tags-item.html",
    "mixins": ["./tags-item.mjs"],
    "components": ["@com:ti/icon/text"]
  }); //============================================================
  // JOIN: ti/tags/ti-tags.html
  //============================================================

  Ti.Preload("ti/com/ti/tags/ti-tags.html", "<div class=\"ti-tags\"\n  :class=\"TopClass\">\n  <!--\n    Loop piece\n  -->\n  <tags-item v-for=\"tag in myTags\"\n    :key=\"tag.index\"\n    v-bind=\"tag\"\n    :cancel-bubble=\"cancelItemBubble\"\n    :option-default-icon=\"optionDefaultIcon\"\n    :removable=\"removable\"\n    :remove-icon=\"removeIcon\"\n    :status-icons=\"statusIcons\"\n    @change=\"OnItemChanged\"\n    @remove=\"OnItemRemoved\"\n    @fire=\"OnItemFired\"/>\n</div>"); //============================================================
  // JOIN: ti/tags/ti-tags.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          myTags: [],
          myValues: []
        };
      },
      ////////////////////////////////////////////////////
      props: {
        //-----------------------------------
        // Data
        //-----------------------------------
        "value": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "dict": {
          type: [String, Ti.Dict],
          "default": null
        },
        "mapping": {
          type: Object,
          "default": undefined
        },
        "itemOptions": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        //-----------------------------------
        // Behavior
        //-----------------------------------
        "cancelItemBubble": {
          type: Boolean,
          "default": false
        },
        "removable": {
          type: Boolean,
          "default": false
        },
        //-----------------------------------
        // Aspect
        //-----------------------------------
        "itemIconBy": {
          type: [String, Function],
          "default": undefined
        },
        "optionDefaultIcon": {
          type: String,
          "default": undefined
        },
        "itemDefaultIcon": {
          type: String,
          "default": undefined
        },
        "removeIcon": {
          type: String,
          "default": "zmdi-close"
        },
        "statusIcons": {
          type: Object,
          "default": function _default() {
            return {
              collapse: "zmdi-chevron-down",
              extended: "zmdi-chevron-up"
            };
          }
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        TopClass: function TopClass() {
          if (this.className) return this.className;
        },
        //------------------------------------------------
        getTagItemIcon: function getTagItemIcon() {
          var _this139 = this;

          if (_.isFunction(this.itemIconBy)) {
            return function (it) {
              return _this139.itemIconBy(it);
            };
          }

          if (_.isString(this.itemIconBy)) {
            return function (it) {
              return _.get(it, _this139.itemIconBy);
            };
          }

          return function (it) {
            return null;
          };
        },
        //--------------------------------------
        Dict: function Dict() {
          if (this.dict) {
            // Already Dict
            if (this.dict instanceof Ti.Dict) {
              return this.dict;
            } // Get back


            var _Ti$DictFactory$expla5 = Ti.DictFactory.explainDictName(this.dict),
                name = _Ti$DictFactory$expla5.name;

            return Ti.DictFactory.CheckDict(name);
          }
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        OnItemChanged: function OnItemChanged() {
          var _ref76 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              index = _ref76.index,
              value = _ref76.value;

          if (index >= 0) {
            var values = this.getMyValues();
            values[index] = Ti.Util.fallback(value, null);
            this.$notify("change", values);
          }
        },
        //------------------------------------------------
        OnItemRemoved: function OnItemRemoved() {
          var _ref77 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              index = _ref77.index;

          if (index >= 0) {
            var values = this.getMyValues();

            _.pullAt(values, index);

            this.$notify("change", values);
          }
        },
        //------------------------------------------------
        OnItemFired: function OnItemFired() {
          var _ref78 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              _ref78$index = _ref78.index,
              index = _ref78$index === void 0 ? -1 : _ref78$index;

          if (index >= 0) {
            var it = _.nth(this.theData, index);

            if (it) {
              this.$notify("item:actived", it);
            }
          }
        },
        //------------------------------------------------
        evalMyData: function evalMyData() {
          var _this140 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee68() {
            var tags, lastIndex, index, val, tag, it;
            return regeneratorRuntime.wrap(function _callee68$(_context68) {
              while (1) {
                switch (_context68.prev = _context68.next) {
                  case 0:
                    tags = [];

                    if (!_.isArray(_this140.value)) {
                      _context68.next = 26;
                      break;
                    }

                    lastIndex = _this140.value.length - 1;
                    index = 0;

                  case 4:
                    if (!(index < _this140.value.length)) {
                      _context68.next = 25;
                      break;
                    }

                    val = _this140.value[index];
                    tag = void 0; // Auto mapping plain object

                    if (!_.isPlainObject(val)) {
                      _context68.next = 12;
                      break;
                    }

                    tag = _this140.mapping ? Ti.Util.translate(val, _this140.mapping) : _.cloneDeep(val); // Customized the icon

                    if (!tag.icon) {
                      tag.icon = _this140.getTagItemIcon(val);
                    }

                    _context68.next = 20;
                    break;

                  case 12:
                    if (!_this140.Dict) {
                      _context68.next = 19;
                      break;
                    }

                    _context68.next = 15;
                    return _this140.Dict.getItem(val);

                  case 15:
                    it = _context68.sent;
                    tag = _.defaults({
                      icon: _this140.Dict.getIcon(it),
                      text: _this140.Dict.getText(it) || val,
                      value: val
                    });
                    _context68.next = 20;
                    break;

                  case 19:
                    tag = {
                      text: val,
                      value: val
                    };

                  case 20:
                    // Join default value
                    _.defaults(tag, {
                      index: index,
                      icon: _this140.itemDefaultIcon,
                      options: _this140.itemOptions,
                      atLast: index == lastIndex
                    }); // Join to tags


                    tags.push(tag);

                  case 22:
                    index++;
                    _context68.next = 4;
                    break;

                  case 25:
                    ; // _.forEach

                  case 26:
                    // assign the tags
                    _this140.myTags = tags;

                  case 27:
                  case "end":
                    return _context68.stop();
                }
              }
            }, _callee68);
          }))();
        },
        //------------------------------------------------
        getMyValues: function getMyValues() {
          var vals = [];

          var _iterator61 = _createForOfIteratorHelper(this.myTags),
              _step61;

          try {
            for (_iterator61.s(); !(_step61 = _iterator61.n()).done;) {
              var tag = _step61.value;
              vals.push(Ti.Util.fallback(tag.value, null));
            }
          } catch (err) {
            _iterator61.e(err);
          } finally {
            _iterator61.f();
          }

          return vals;
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      watch: {
        "value": {
          handler: "evalMyData",
          immediate: true
        }
      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/tags/ti-tags.mjs", _M);
  })(); //============================================================
  // JOIN: ti/tags/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/tags/_com.json", {
    "name": "ti-tags",
    "globally": true,
    "template": "./ti-tags.html",
    "mixins": ["./ti-tags.mjs"],
    "components": ["./com/tags-item"]
  }); //============================================================
  // JOIN: ti/text/json/ti-text-json.html
  //============================================================

  Ti.Preload("ti/com/ti/text/json/ti-text-json.html", "<ti-gui\n  class=\"ti-text-json\"\n  :class=\"className\"\n  keep-shown-to=\"ti-text-json-editor\"\n  :layout=\"TheLayout\"\n  :schema=\"TheSchema\"\n  :can-loading=\"true\"\n  @change=\"OnChange\"/>"); //============================================================
  // JOIN: ti/text/json/ti-text-json.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////
      props: {
        "tabAt": {
          type: String,
          "default": "bottom-left",
          validator: function validator(v) {
            return /^(top|bottom)-(left|center|right)$/.test(v);
          }
        },
        "value": undefined,
        "valueType": {
          type: String,
          "default": "text",
          validator: function validator(v) {
            return /^(text|obj)$/.test(v);
          }
        },
        "jsonIndent": {
          type: String,
          "default": '   '
        },
        "tree": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TheContent: function TheContent() {
          if (!Ti.Util.isNil(this.value)) {
            return this.value;
          }

          return "";
        },
        //--------------------------------------
        TheData: function TheData() {
          if (!Ti.Util.isNil(this.value)) {
            return Ti.Types.safeParseJson(this.value, null);
          }

          return null;
        },
        //--------------------------------------
        TheSource: function TheSource() {
          if (this.TheData) {
            return JSON.stringify(this.TheData, null, '   ');
          }

          return "";
        },
        //--------------------------------------
        TheLayout: function TheLayout() {
          return {
            type: "tabs",
            tabAt: this.tabAt,
            blocks: [{
              title: "i18n:structure",
              name: "tree",
              body: "desktop-tree"
            }, {
              title: "i18n:source-code",
              name: "source",
              body: "desktop-source"
            }]
          };
        },
        //--------------------------------------
        TheSchema: function TheSchema() {
          //....................................
          // Tree Conf
          var treeConf = _.assign({}, this.tree, {
            value: this.TheData
          }); //....................................
          // Source Conf


          var sourceConf = {
            showTitle: false,
            value: this.TheSource
          }; //....................................
          // Done

          return {
            "desktop-tree": {
              comType: "ti-text-json-tree",
              comConf: treeConf
            },
            "desktop-source": {
              comType: "ti-text-raw",
              comConf: sourceConf
            }
          }; //....................................
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnChange: function OnChange(payload) {
          //console.log("TiObjJson->OnChange", payload)
          // If string, try parse
          var val = payload;

          if (_.isString(payload)) {
            try {
              val = JSON.parse(payload);
            } catch (E) {
              // wait for valid input
              return;
            }
          } // obey the valueType


          if ("text" == this.valueType) {
            if (this.jsonIndent) {
              val = JSON.stringify(val, null, this.jsonIndent);
            } else {
              val = JSON.stringify(val);
            }
          }

          this.$notify('change', val);
        } //--------------------------------------

      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/text/json/ti-text-json.mjs", _M);
  })(); //============================================================
  // JOIN: ti/text/json/tree/item/json-tree-item.html
  //============================================================


  Ti.Preload("ti/com/ti/text/json/tree/item/json-tree-item.html", "<div class=\"json-value\"\n  :class=\"TopClass\"\n  v-ti-activable>\n  <!--\n  //  - Label   : Readonly\n  -->\n  <span v-if=\"isLabel\"\n    class=\"as-editing as-label\">{{theLabelDisplayText}}</span>\n  <!--\n  //  - Boolean : Editable boolean value\n  -->\n  <ti-toggle v-else-if=\"'Boolean' == valueType\"\n    class=\"as-editing\"\n    :value=\"value\"\n    @change=\"$notify('change', $event)\"/>\n  <!--\n  //  - Integer : Editable integer value\n  //  - Float   : Editable float value\n  //  - String  : Editable string value\n  //  - Nil     : Edtiable any value\n  -->\n  <ti-label v-else\n    class=\"as-editing is-nowrap ti-fill-parent\"\n    :value=\"value\"\n    :class-name=\"theValueClassName\"\n    :format=\"theValueFormat\"\n    :editable=\"true\"\n    @change=\"$notify('change', $event)\"/>\n  <!--\n    Action Menu\n  -->\n  <ti-actionbar\n    v-if=\"showActions\"\n      class=\"as-actions\"\n      :items=\"theActionMenuData\"\n      :status=\"theActionMenuStatus\"/>\n</div>"); //============================================================
  // JOIN: ti/text/json/tree/item/json-tree-item.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////
      data: function data() {
        return {};
      },
      //////////////////////////////////////////
      props: {
        "value": null,
        "valueType": {
          type: String,
          "default": "Nil"
        },
        "valuePath": {
          type: [String, Array],
          "default": function _default() {
            return [];
          }
        },
        "showActions": {
          type: Boolean,
          "default": false
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return Ti.Css.mergeClassName({
            "is-self-actived": this.isSelfActived,
            "is-actived": this.isActived
          });
        },
        //--------------------------------------
        isLabel: function isLabel() {
          return /^(Array|Object)$/.test(this.valueType);
        },
        //--------------------------------------
        isTop: function isTop() {
          return this.theValuePath.length == 0;
        },
        //--------------------------------------
        theLabelDisplayText: function theLabelDisplayText() {
          if ('Array' == this.valueType) {
            return '[..]';
          }

          if ('Object' == this.valueType) {
            return '{..}';
          }

          return '???';
        },
        //--------------------------------------
        theValuePath: function theValuePath() {
          if (_.isArray(this.valuePath)) {
            return this.valuePath;
          }

          if (_.isString(this.valuePath)) {
            return _.without(this.valuePath.split(/[\/.]/g), "");
          }

          return [];
        },
        //--------------------------------------
        theValueClassName: function theValueClassName() {
          return _.kebabCase("is".concat(this.valueType));
        },
        //--------------------------------------
        theValueFormat: function theValueFormat() {
          if ('String' == this.valueType) {
            return function (val) {
              if (val) {
                return "\"".concat(val, "\"");
              }

              return '""';
            };
          }
        },
        //--------------------------------------
        theActionMenuData: function theActionMenuData() {
          var _this141 = this;

          //................................
          var jvTypes = [{
            name: "jvTypeArray",
            text: "i18n:json-Array",
            type: "action",
            altDisplay: {
              icon: "zmdi-check",
              capture: false
            },
            action: function action() {
              _this141.$notify("change", {
                jsonMutate: "ChangeValueType",
                args: "Array"
              });
            }
          }, {
            name: "jvTypeObject",
            text: "i18n:json-Object",
            type: "action",
            altDisplay: {
              icon: "zmdi-check",
              capture: false
            },
            action: function action() {
              _this141.$notify("change", {
                jsonMutate: "ChangeValueType",
                args: "Object"
              });
            }
          }]; //................................
          // Add

          var menuData = [{
            name: "jv-add",
            type: "action",
            icon: "zmdi-plus",
            action: function action() {
              _this141.$notify("change", {
                jsonMutate: "Add"
              });
            }
          }]; //................................
          // Remove : If not the top

          if (!this.isTop) {
            menuData.push({
              type: "line"
            }); // Can not remove top node

            menuData.push({
              name: "jv-remove",
              type: "action",
              icon: "zmdi-delete",
              action: function action() {
                _this141.$notify("change", {
                  jsonMutate: "Remove"
                });
              }
            }); // Add More Types

            jvTypes.push({
              type: "line"
            }); // AddType: Boolean

            jvTypes.push({
              name: "jvTypeBoolean",
              text: "i18n:json-Boolean",
              type: "action",
              altDisplay: {
                icon: "zmdi-check",
                capture: false
              },
              action: function action() {
                _this141.$notify("change", {
                  jsonMutate: "ChangeValueType",
                  args: "Boolean"
                });
              }
            }); // AddType: Number

            jvTypes.push({
              name: "jvTypeNumber",
              text: "i18n:json-Number",
              type: "action",
              altDisplay: {
                icon: "zmdi-check",
                capture: false
              },
              action: function action() {
                _this141.$notify("change", {
                  jsonMutate: "ChangeValueType",
                  args: "Number"
                });
              }
            }); // AddType: String

            jvTypes.push({
              name: "jvTypeString",
              text: "i18n:json-String",
              type: "action",
              altDisplay: {
                icon: "zmdi-check",
                capture: false
              },
              action: function action() {
                _this141.$notify("change", {
                  jsonMutate: "ChangeValueType",
                  args: "String"
                });
              }
            }); // AddType: Nil

            jvTypes.push({
              name: "jvTypeNil",
              text: "i18n:json-Nil",
              type: "action",
              altDisplay: {
                icon: "zmdi-check",
                capture: false
              },
              action: function action() {
                _this141.$notify("change", {
                  jsonMutate: "ChangeValueType",
                  args: "Nil"
                });
              }
            });
          } //................................
          // More: Change Type


          menuData.push({
            type: "line"
          });
          menuData.push({
            key: "jv-types",
            type: "group",
            icon: "zmdi-more",
            items: jvTypes
          }); // Done

          return menuData;
        },
        //--------------------------------------
        theActionMenuStatus: function theActionMenuStatus() {
          return {
            jvTypeBoolean: "Boolean" == this.valueType,
            jvTypeInteger: "Integer" == this.valueType,
            jvTypeFloat: "Float" == this.valueType,
            jvTypeNumber: "Number" == this.valueType,
            jvTypeString: "String" == this.valueType,
            jvTypeArray: "Array" == this.valueType,
            jvTypeObject: "Object" == this.valueType,
            jvTypeNil: "Nil" == this.valueType
          };
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {//--------------------------------------
        //--------------------------------------
      },
      //////////////////////////////////////////
      watch: {},
      //////////////////////////////////////////
      mounted: function mounted() {} //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/text/json/tree/item/json-tree-item.mjs", _M);
  })(); //============================================================
  // JOIN: ti/text/json/tree/item/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/text/json/tree/item/_com.json", {
    "name": "ti-text-json-tree-item",
    "globally": true,
    "template": "./json-tree-item.html",
    "mixins": ["./json-tree-item.mjs"]
  }); //============================================================
  // JOIN: ti/text/json/tree/ti-text-json-tree.html
  //============================================================

  Ti.Preload("ti/com/ti/text/json/tree/ti-text-json-tree.html", "<ti-tree class=\"ti-text-json-tree\"\n  title=\"i18n:name\"\n  :main-width=\"mainWidth\"\n  :class=\"className\"\n  :border=\"border\"\n  :keep-open-by=\"keepOpenBy\"\n  :multi=\"true\"\n  :data=\"myTreeRoot\"\n  :display=\"TreeDisplay\"\n  :auto-open=\"autoOpen\"\n  :current-id=\"myTreeCurrentPathId\"\n  :default-open-depth=\"2\"\n  :fields=\"TreeFields\"\n  @select\n  @node:item:change=\"OnNodeItemChange\"\n  @opened-status:changed=\"OnOpenedStatusChanged\"/>"); //============================================================
  // JOIN: ti/text/json/tree/ti-text-json-tree.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////
      data: function data() {
        return {
          myTreeRoot: [],
          myTreeCurrentPathId: null,
          myTreeOpenedStatus: {}
        };
      },
      //////////////////////////////////////////
      props: {
        "value": null,
        "mainWidth": {
          type: [String, Number],
          "default": .372
        },
        "border": {
          type: String,
          "default": "cell",
          validator: function validator(v) {
            return /^(row|column|cell|none)$/.test(v);
          }
        },
        "keepOpenBy": {
          type: String,
          "default": null
        },
        "autoOpen": {
          type: Boolean,
          "default": false
        },
        "showRoot": {
          type: Boolean,
          "default": true
        },
        "editing": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TreeDisplay: function TreeDisplay() {
          return {
            key: "name",
            comType: "ti-label",
            comConf: function comConf(it) {
              return {
                className: _.kebabCase("is-".concat(it.nameType)),
                editable: 'Key' == it.nameType,
                format: {
                  "Index": "[${val}]",
                  "Label": "i18n:json-${val}"
                }[it.nameType]
              };
            }
          };
        },
        //--------------------------------------
        TreeFields: function TreeFields() {
          return [{
            title: "i18n:value",
            width: .618,
            display: {
              key: "value",
              ignoreNil: false,
              comType: "ti-text-json-tree-item",
              comConf: {
                valueType: "${valueType}",
                valuePath: "${=rowId}",
                showActions: "${=isCurrent}"
              }
            }
          }];
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        evalTreeData: function evalTreeData() {
          var list = []; // Join the top data

          this.joinTreeTableRow(list, this.value); // Update Tree Data

          this.myTreeRoot = _.first(list);
        },
        //--------------------------------------
        getJsValueType: function getJsValueType(val) {
          if (Ti.Util.isNil(val)) return "Nil";
          if (_.isArray(val)) return "Array";

          if (_.isNumber(val)) {
            return "Number";
          }

          return _.upperFirst(_typeof(val));
        },
        //--------------------------------------
        joinTreeTableRow: function joinTreeTableRow() {
          var _this142 = this;

          var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var item = arguments.length > 1 ? arguments[1] : undefined;
          var key = arguments.length > 2 ? arguments[2] : undefined;
          var nameType;
          var valueType = this.getJsValueType(item); // Default itemKey is self-type
          // For top leval

          if (_.isUndefined(key)) {
            key = valueType;
            nameType = "Label";
          } // Index key
          else if (_.isNumber(key)) {
              nameType = "Index";
            } // String key
            else {
                nameType = "Key";
              } //................................
          // undefined


          if (_.isUndefined(item)) {
            list.push({
              nameType: nameType,
              valueType: valueType,
              name: key,
              value: undefined
            });
          } //................................
          // null
          else if (_.isNull(item)) {
              list.push({
                nameType: nameType,
                valueType: valueType,
                name: key,
                value: null
              });
            } //................................
          // Array


          if (_.isArray(item)) {
            // Create self
            var node = {
              nameType: nameType,
              valueType: "Array",
              name: key,
              value: item,
              children: []
            }; // Join Children

            for (var i = 0; i < item.length; i++) {
              var child = item[i];
              this.joinTreeTableRow(node.children, child, i);
            } // Join self


            list.push(node);
          } //................................
          // Object
          else if (_.isPlainObject(item)) {
              // Create self
              var _node = {
                nameType: nameType,
                valueType: "Object",
                name: key,
                value: item,
                children: []
              }; // Join Children

              _.forEach(item, function (v, k) {
                _this142.joinTreeTableRow(_node.children, v, k);
              }); // Join self


              list.push(_node);
            } //................................
            // Boolean
            else if (_.isBoolean(item)) {
                list.push({
                  nameType: nameType,
                  valueType: valueType,
                  name: key,
                  value: item ? true : false
                });
              } //................................
              // Number 
              else if (_.isNumber(item)) {
                  list.push({
                    nameType: nameType,
                    valueType: valueType,
                    name: key,
                    value: item * 1
                  });
                } //................................
                // String
                else if (_.isString(item)) {
                    list.push({
                      nameType: nameType,
                      valueType: valueType,
                      name: key,
                      value: item + ""
                    });
                  }
        },
        //--------------------------------------
        doAdd: function doAdd() {
          var _arguments15 = arguments,
              _this143 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee69() {
            var root, path, hie, target, isOpened, newKey, p_ph, parent, keyOrIndex, stub, _newKey;

            return regeneratorRuntime.wrap(function _callee69$(_context69) {
              while (1) {
                switch (_context69.prev = _context69.next) {
                  case 0:
                    root = _arguments15.length > 0 && _arguments15[0] !== undefined ? _arguments15[0] : {};
                    path = _arguments15.length > 1 && _arguments15[1] !== undefined ? _arguments15[1] : [];
                    // Looking for the target from data
                    hie = Ti.Trees.getByPath(_this143.myTreeRoot, path);
                    target = _.isEmpty(path) ? root : _.get(root, path);
                    isOpened = _this143.myTreeOpenedStatus[path.join("/")]; //console.log({root, path, target, hie, isOpened})
                    //.....................................
                    // Guard: Fail to find the target

                    if (hie) {
                      _context69.next = 7;
                      break;
                    }

                    return _context69.abrupt("return");

                  case 7:
                    if (!(isOpened && _.isArray(target))) {
                      _context69.next = 11;
                      break;
                    }

                    // just append the nil at tail
                    target.push(null);
                    _context69.next = 39;
                    break;

                  case 11:
                    if (!(isOpened && _.isPlainObject(target))) {
                      _context69.next = 20;
                      break;
                    }

                    _context69.next = 14;
                    return Ti.Prompt("i18n:json-new-key");

                  case 14:
                    newKey = _context69.sent;

                    if (!Ti.Util.isNil(newKey)) {
                      _context69.next = 17;
                      break;
                    }

                    return _context69.abrupt("return");

                  case 17:
                    // and insert nil at the tail
                    target[newKey] = null;
                    _context69.next = 39;
                    break;

                  case 20:
                    if (!(path.length > 0)) {
                      _context69.next = 39;
                      break;
                    }

                    //...................................
                    // get the parent node
                    p_ph = path.slice(0, path.length - 1);
                    parent = _.isEmpty(p_ph) ? root : _.get(root, p_ph);
                    keyOrIndex = _.last(path); //...................................
                    // Prepare the new data

                    if (!_.isArray(parent)) {
                      _context69.next = 29;
                      break;
                    }

                    stub = parent;
                    Ti.Util.insertToArray(parent, keyOrIndex + 1, null);
                    _context69.next = 36;
                    break;

                  case 29:
                    if (!_.isPlainObject(parent)) {
                      _context69.next = 36;
                      break;
                    }

                    _context69.next = 32;
                    return Ti.Prompt("i18n:json-new-key");

                  case 32:
                    _newKey = _context69.sent;

                    if (!Ti.Util.isNil(_newKey)) {
                      _context69.next = 35;
                      break;
                    }

                    return _context69.abrupt("return");

                  case 35:
                    // and insert nil after current path
                    stub = Ti.Util.appendToObject(parent, keyOrIndex, _defineProperty({}, _newKey, null));

                  case 36:
                    if (!(p_ph.length == 0)) {
                      _context69.next = 38;
                      break;
                    }

                    return _context69.abrupt("return", stub);

                  case 38:
                    // Set stub
                    _.set(root, p_ph, stub);

                  case 39:
                    return _context69.abrupt("return", root);

                  case 40:
                  case "end":
                    return _context69.stop();
                }
              }
            }, _callee69);
          }))();
        },
        //--------------------------------------
        doRemove: function doRemove() {
          var _this144 = this;

          var root = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

          // Forbid to remove the top
          if (_.isEmpty(path)) {
            return;
          } //...................................
          // get the candidate for next highlight


          var hie = Ti.Trees.getByPath(this.myTreeRoot, path);
          var can = Ti.Trees.nextCandidate(hie); //...................................
          // get the parent node

          var p_ph = path.slice(0, path.length - 1);
          var parent = _.isEmpty(p_ph) ? root : _.get(root, p_ph);

          var keyOrIndex = _.last(path); //...................................
          // Prepare the new data


          var stub; //...................................
          // If array, insert nil after current

          if (_.isArray(parent)) {
            stub = [];

            _.forEach(parent, function (val, index) {
              if (index != keyOrIndex) {
                stub.push(val);
              }
            });
          } //...................................
          // If Object
          else if (_.isPlainObject(parent)) {
              stub = {}; // and insert nil after current path

              _.forEach(parent, function (val, key) {
                if (key != keyOrIndex) {
                  stub[key] = val;
                }
              });
            } //.....................................
          // Highlight the next


          if (can && can.node) {
            var nextPathId = _.concat(can.path, can.node.name).join("/");

            this.$nextTick(function () {
              _this144.myTreeCurrentPathId = nextPathId;
            });
          } //...................................
          // If root, return the stub 


          if (p_ph.length == 0) {
            return stub;
          } // Set stub


          _.set(root, p_ph, stub); //.....................................


          return root;
        },
        //--------------------------------------
        doChangeValueType: function doChangeValueType() {
          var root = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
          var type = arguments.length > 2 ? arguments[2] : undefined;

          // Get the source
          var isRoot = _.isEmpty(path);

          var src = isRoot ? root : _.get(root, path); //.....................................
          // Prepare converter

          var convert = {
            //...................................
            "Boolean": function Boolean(src) {
              return src ? true : false;
            },
            //...................................
            "Number": function Number(src) {
              var nb = src * 1;
              return isNaN(nb) ? -1 : nb;
            },
            //...................................
            "Integer": function Integer(src) {
              var nb = parseInt(src);
              return isNaN(nb) ? -1 : nb;
            },
            //...................................
            "Float": function Float(src) {
              var nb = src * 1;
              return isNaN(nb) ? -1 : nb;
            },
            //...................................
            "String": function String(src) {
              // Array/Object
              if (_.isArray(src) || _.isObject(src)) {
                return JSON.stringify(src);
              } // Other value


              return src + "";
            },
            //...................................
            "Array": function Array(src) {
              // Array
              if (_.isArray(src)) {
                return;
              } // Nil
              else if (Ti.Util.isNil(src)) {
                  return [];
                } // Wrap to array
                else {
                    return [src];
                  }
            },
            //...................................
            "Object": function Object(src) {
              // Array
              if (_.isArray(src)) {
                // Try array as pairs
                var pairs = _.fromPairs(src);

                var stub = {};

                _.forEach(pairs, function (val, key) {
                  if (!Ti.Util.isNil(key) && !_.isUndefined(val)) {
                    stub[key] = val;
                  }
                }); // Maybe merget it 


                if (_.isEmpty(stub) && !_.isEmpty(src)) {
                  Ti.Util.merge(stub, src);
                } // Whatever return the object


                return stub;
              } // Object
              else if (_.isPlainObject(src)) {
                  return;
                } // String try to JSON
                else if (_.isString(src)) {
                    return Ti.Types.safeParseJson(src, {
                      "value": src
                    });
                  } // Other value, just wrap to Object


              return {
                "value": src
              };
            },
            //...................................
            "Nil": function Nil(src) {
              return null;
            } //...................................

          }[type]; //.....................................
          // Do convert

          if (_.isFunction(convert)) {
            var stub = convert(src); // Canceled

            if (_.isUndefined(stub)) {
              return;
            } // Root object, return directly


            if (isRoot) {
              return stub;
            } // Update to main data


            _.set(root, path, stub);

            return root;
          } //.....................................
          // Fail to find the converter, return undeinfed to cancel

        },
        //--------------------------------------
        OnNodeItemChange: function OnNodeItemChange() {
          var _arguments16 = arguments,
              _this145 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee70() {
            var _ref79, name, value, data, node, nodeId, newData, path, fn, _fn, v2;

            return regeneratorRuntime.wrap(function _callee70$(_context70) {
              while (1) {
                switch (_context70.prev = _context70.next) {
                  case 0:
                    _ref79 = _arguments16.length > 0 && _arguments16[0] !== undefined ? _arguments16[0] : {}, name = _ref79.name, value = _ref79.value, data = _ref79.data, node = _ref79.node, nodeId = _ref79.nodeId;

                    if (node.id) {
                      _context70.next = 3;
                      break;
                    }

                    return _context70.abrupt("return");

                  case 3:
                    //....................................
                    // Prepare the new Data
                    newData = _.cloneDeep(_this145.value); //....................................
                    // Get the target JSON path

                    path = node.path; //....................................
                    // Mutate JSON structure

                    if (!(value && value.jsonMutate)) {
                      _context70.next = 14;
                      break;
                    }

                    fn = {
                      Add: _this145.doAdd,
                      Remove: _this145.doRemove,
                      ChangeValueType: _this145.doChangeValueType
                    }[value.jsonMutate]; // Invoke it

                    _context70.next = 9;
                    return Ti.DoInvoke(fn, _.concat([newData, path], value.args), _this145);

                  case 9:
                    newData = _context70.sent;

                    if (!_.isUndefined(newData)) {
                      _context70.next = 12;
                      break;
                    }

                    return _context70.abrupt("return");

                  case 12:
                    _context70.next = 15;
                    break;

                  case 14:
                    // Set the Key
                    if ("name" == name) {
                      newData = Ti.Util.setKey(newData, path, value);
                    } // Set the Value
                    else if ("value" == name) {
                        // Eval the value smartly
                        _fn = {
                          "Integer": function Integer(v) {
                            var v2 = parseInt(v);

                            if (isNaN(v2)) {
                              return v;
                            }

                            return v2;
                          },
                          "Float": function Float(v) {
                            var v2 = v * 1;

                            if (isNaN(v2)) {
                              return v;
                            }

                            return v2;
                          },
                          "Number": function Number(v) {
                            var v2 = v * 1;

                            if (isNaN(v2)) {
                              return v;
                            }

                            return v2;
                          },
                          "Nil": function Nil(v) {
                            return Ti.S.toJsValue(v, {
                              autoDate: false
                            });
                          }
                        }[data.valueType];
                        v2 = _.isFunction(_fn) ? _fn(value) : value; // Set it to data

                        _.set(newData, path, v2);
                      }

                  case 15:
                    //....................................
                    // Emit the change
                    _this145.$notify("change", newData);

                  case 16:
                  case "end":
                    return _context70.stop();
                }
              }
            }, _callee70);
          }))();
        },
        //--------------------------------------
        OnOpenedStatusChanged: function OnOpenedStatusChanged(opened) {
          this.myTreeOpenedStatus = opened;
        } //--------------------------------------

      },
      //////////////////////////////////////////
      watch: {
        "value": function value() {
          this.evalTreeData();
        }
      },
      //////////////////////////////////////////
      mounted: function mounted() {
        this.evalTreeData();
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/text/json/tree/ti-text-json-tree.mjs", _M);
  })(); //============================================================
  // JOIN: ti/text/json/tree/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/text/json/tree/_com.json", {
    "name": "ti-text-json-tree",
    "globally": true,
    "i18n": "@i18n:ti-text-json",
    "template": "./ti-text-json-tree.html",
    "mixins": ["./ti-text-json-tree.mjs"],
    "components": ["@com:ti/tree", "@com:ti/text/json/tree/item"]
  }); //============================================================
  // JOIN: ti/text/json/_com.json
  //============================================================

  Ti.Preload("ti/com/ti/text/json/_com.json", {
    "name": "ti-text-json",
    "globally": true,
    "i18n": "@i18n:ti-text-json",
    "template": "./ti-text-json.html",
    "mixins": ["./ti-text-json.mjs"],
    "components": ["@com:ti/gui", "@com:ti/text/raw", "@com:ti/toggle", "@com:ti/text/json/tree"]
  }); //============================================================
  // JOIN: ti/text/markdown/preview/markdown-preview.html
  //============================================================

  Ti.Preload("ti/com/ti/text/markdown/preview/markdown-preview.html", "<div class=\"ti-markdown-preview\"\n  :class=\"TopClass\">\n  <article \n    :class=\"ThemeClass\"\n    v-html=\"myHtml\"></article>\n  <!--pre>{{myHtml}}</pre-->\n</div>"); //============================================================
  // JOIN: ti/text/markdown/preview/markdown-preview.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////////////
      data: function data() {
        return {
          myHtml: null,
          myTheme: null
        };
      },
      ///////////////////////////////////////////////////
      props: {
        "previewMediaSrc": {
          type: [String, Function],
          "default": undefined
        },
        "value": {
          type: String,
          "default": ""
        },
        "placeholder": {
          type: String,
          "default": "i18n:blank"
        },
        "theme": {
          type: String,
          "default": "nice"
        }
      },
      ///////////////////////////////////////////////////
      computed: {
        //-----------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //-----------------------------------------------
        ThemeClass: function ThemeClass() {
          if (this.myTheme) {
            return "ti-markdown-theme-".concat(this.myTheme);
          }
        },
        //-----------------------------------------------
        ThePreviewMediaSrc: function ThePreviewMediaSrc() {
          var _this146 = this;

          var transSrc = _.identity; // String mode

          if (_.isString(this.previewMediaSrc)) {
            transSrc = function transSrc(src) {
              return Ti.S.renderBy(_this146.previewMediaSrc, {
                src: src
              });
            };
          } // Function Mode
          else if (_.isFunction(this.previewMediaSrc)) {
              transSrc = this.previewMediaSrc;
            }

          return /*#__PURE__*/function () {
            var _ref80 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee71(src) {
              return regeneratorRuntime.wrap(function _callee71$(_context71) {
                while (1) {
                  switch (_context71.prev = _context71.next) {
                    case 0:
                      if (!/^(https?:)(\/\/)/.test(src)) {
                        _context71.next = 2;
                        break;
                      }

                      return _context71.abrupt("return", src);

                    case 2:
                      return _context71.abrupt("return", transSrc(src));

                    case 3:
                    case "end":
                      return _context71.stop();
                  }
                }
              }, _callee71);
            }));

            return function (_x7) {
              return _ref80.apply(this, arguments);
            };
          }();
        } //-----------------------------------------------

      },
      ///////////////////////////////////////////////////
      methods: {
        //-----------------------------------------------
        renderMarkdown: function renderMarkdown() {
          var _this147 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee72() {
            var MdDoc;
            return regeneratorRuntime.wrap(function _callee72$(_context72) {
              while (1) {
                switch (_context72.prev = _context72.next) {
                  case 0:
                    if (Ti.Util.isBlank(_this147.value)) {
                      _context72.next = 8;
                      break;
                    }

                    MdDoc = Cheap.parseMarkdown(_this147.value); //console.log(MdDoc.toString())

                    _context72.next = 4;
                    return MdDoc.toBodyInnerHtml({
                      mediaSrc: _this147.ThePreviewMediaSrc
                    });

                  case 4:
                    _this147.myHtml = _context72.sent;
                    _this147.myTheme = MdDoc.getMeta("theme", _this147.theme);
                    _context72.next = 10;
                    break;

                  case 8:
                    _this147.myHtml = Ti.I18n.text(_this147.placeholder);
                    _this147.myTheme = _this147.theme;

                  case 10:
                  case "end":
                    return _context72.stop();
                }
              }
            }, _callee72);
          }))();
        } //-----------------------------------------------

      },
      ///////////////////////////////////////////////////
      watch: {
        "value": {
          handler: "renderMarkdown",
          immediate: true
        }
      } ///////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/text/markdown/preview/markdown-preview.mjs", _M);
  })(); //============================================================
  // JOIN: ti/text/markdown/preview/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/text/markdown/preview/_com.json", {
    "name": "ti-text-markdown-preview",
    "globally": true,
    "template": "./markdown-preview.html",
    "mixins": ["./markdown-preview.mjs"]
  }); //============================================================
  // JOIN: ti/text/markdown/richeditor/ti-markdown-richeditor-delegate-methods.mjs
  //============================================================

  (function () {
    var _M = {
      //-----------------------------------------------
      // Delegate Quill Methods
      //-----------------------------------------------
      getSelection: function getSelection() {
        var _this$$editor;

        return (_this$$editor = this.$editor).getSelection.apply(_this$$editor, arguments);
      },
      setSelection: function setSelection() {
        var _this$$editor2;

        return (_this$$editor2 = this.$editor).setSelection.apply(_this$$editor2, arguments);
      },
      updateContents: function updateContents() {
        var _this$$editor3;

        return (_this$$editor3 = this.$editor).updateContents.apply(_this$$editor3, arguments);
      }
    };
    Ti.Preload("ti/com/ti/text/markdown/richeditor/ti-markdown-richeditor-delegate-methods.mjs", _M);
  })(); //============================================================
  // JOIN: ti/text/markdown/richeditor/ti-markdown-richeditor-props.mjs
  //============================================================


  (function () {
    var _M = {
      //...............................................
      // Data
      //...............................................
      "mediaBase": {
        type: String,
        "default": undefined
      },
      "value": {
        type: String,
        "default": ""
      },
      //...............................................
      // Behavior
      //...............................................
      // Ext-toolbar item defination
      "actions": {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      // preview -> markdown -> save
      "markdownMediaSrc": {
        type: [String, Function],
        "default": undefined
      },
      // load -> markdown -> preview
      "previewMediaSrc": {
        type: [String, Function],
        "default": undefined
      },
      //...............................................
      // Aspact
      //...............................................
      "placeholder": {
        type: String,
        "default": "i18n:blank"
      },
      "theme": {
        type: String,
        "default": "nice"
      },
      "toolbar": {
        type: Array,
        "default": function _default() {
          return ["Heading", "|", "B", "I", "|", "Link", "Code", "|", "BlockQuote", "CodeBlock", "|", "Outdent", "Indent", "|", "UL", "OL"];
        }
      },
      "toolbarAlign": {
        type: String,
        "default": "left",
        validator: function validator(v) {
          return /^(left|right|center)$/.test(v);
        }
      },
      "blankAs": {
        type: Object,
        "default": function _default() {
          return {
            icon: "fas-coffee",
            text: null
          };
        }
      }
    };
    Ti.Preload("ti/com/ti/text/markdown/richeditor/ti-markdown-richeditor-props.mjs", _M);
  })(); //============================================================
  // JOIN: ti/text/markdown/richeditor/ti-markdown-richeditor.html
  //============================================================


  Ti.Preload("ti/com/ti/text/markdown/richeditor/ti-markdown-richeditor.html", "<div class=\"ti-markdown-richeditor\"\n  :class=\"TopClass\">\n  <!--\n    Toolbar\n  -->\n  <ti-actionbar \n    v-if=\"hasToolbar\"\n      class=\"as-toolbar\"\n      :items=\"ToolbarMenuData\" \n      :align=\"toolbarAlign\"\n      :status=\"myToolbarStatus\"\n      @change=\"OnToolbarChange\"/>\n  <!--\n    Stage\n  -->\n  <div ref=\"stage\"\n    class=\"as-stage\"\n    spellcheck=\"false\"\n    :class=\"ThemeClass\"></div>\n  <!--\n    Cover when nil\n  -->\n  <ti-loading\n    v-if=\"isNilContent\"\n      class=\"as-nil-mask as-big-mask\"\n      v-bind=\"blankAs\"/>\n</div>"); //============================================================
  // JOIN: ti/text/markdown/richeditor/ti-markdown-richeditor.mjs
  //============================================================

  (function () {
    /////////////////////////////////////////////////////
    function ResetQuillConfig(Quill) {
      //.................................................
      // Reset once
      if (Quill.__has_been_reset) return; //.................................................
      // hljs.configure({   // optionally configure hljs
      //   languages: ['javascript', 'ruby', 'python']
      // });
      //.................................................
      // Reset Indent    

      var Indent = Quill["import"]('formats/indent');
      Indent.keyName = "li-indent";
      Indent.whitelist = [1, 2, 3, 4, 5, 6]; //.................................................
      // New format
      // ...
      //.................................................
      // Mark it

      Quill.__has_been_reset = true;
    } /////////////////////////////////////////////////////


    var BUILTIN_TOOLBAR_ACTIONS = {
      //.........................................
      "|": {
        type: "line"
      },
      //.........................................
      "B": {
        icon: "fas-bold",
        notify: "bold",
        highlight: "bold",
        disabled: "italic"
      },
      //.........................................
      "I": {
        icon: "fas-italic",
        notify: "italic",
        highlight: "italic",
        disabled: "bold"
      },
      //.........................................
      "Link": {
        icon: "fas-link",
        notify: "link",
        highlight: "link"
      },
      //.........................................
      "Code": {
        icon: "zmdi-code",
        notify: "code",
        highlight: "code"
      },
      //.........................................
      "Heading": {
        type: "group",
        icon: "fas-hashtag",
        text: "i18n:wordp-heading",
        items: [{
          text: "i18n:wordp-h1",
          notify: "header",
          highlight: "h1",
          value: 1
        }, {
          text: "i18n:wordp-h2",
          notify: "header",
          highlight: "h2",
          value: 2
        }, {
          text: "i18n:wordp-h3",
          notify: "header",
          highlight: "h3",
          value: 3
        }, {
          text: "i18n:wordp-h4",
          notify: "header",
          highlight: "h4",
          value: 4
        }, {
          text: "i18n:wordp-h5",
          notify: "header",
          highlight: "h5",
          value: 5
        }, {
          text: "i18n:wordp-h6",
          notify: "header",
          highlight: "h6",
          value: 6
        }, {
          text: "i18n:wordp-h0",
          notify: "header",
          highlight: "h0",
          value: 0
        }]
      },
      //.........................................
      "BlockQuote": {
        icon: "fas-quote-right",
        notify: "blockquote",
        highlight: "blockquote"
      },
      //.........................................
      "CodeBlock": {
        icon: "fas-code",
        notify: "code_block",
        highlight: "code-block"
      },
      //.........................................
      "Indent": {
        icon: "fas-indent",
        notify: "indent"
      },
      //.........................................
      "Outdent": {
        icon: "fas-outdent",
        notify: "outdent"
      },
      //.........................................
      "UL": {
        icon: "fas-list-ul",
        notify: "list",
        value: "bullet",
        highlight: {
          list: "bullet"
        }
      },
      //.........................................
      "OL": {
        icon: "fas-list-ol",
        notify: "list",
        value: "ordered",
        highlight: {
          list: "ordered"
        }
      } //.........................................

    }; /////////////////////////////////////////////////////

    var _M = {
      ///////////////////////////////////////////////////
      data: function data() {
        return {
          myMeta: {},
          syncForbid: 0,
          myToolbarStatus: {}
        };
      },
      ///////////////////////////////////////////////////
      computed: {
        //-----------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass({
            "nil-content": this.isNilContent,
            "has-content": !this.isNilContent
          });
        },
        //-----------------------------------------------
        ThemeClass: function ThemeClass() {
          if (this.ThemeName) {
            return "ti-markdown-theme-".concat(this.ThemeName);
          }
        },
        //-----------------------------------------------
        ThemeName: function ThemeName() {
          return _.get(this.myMeta, "theme") || this.theme;
        },
        //-----------------------------------------------
        hasToolbar: function hasToolbar() {
          return !_.isEmpty(this.ToolbarMenuData);
        },
        //-----------------------------------------------
        isNilContent: function isNilContent() {
          return Ti.Util.isNil(this.value);
        },
        //-----------------------------------------------
        ToolbarActions: function ToolbarActions() {
          return _.merge({}, BUILTIN_TOOLBAR_ACTIONS, this.actions);
        },
        //-----------------------------------------------
        ToolbarMenuData: function ToolbarMenuData() {
          var _this148 = this;

          var list = [];

          _.forEach(this.toolbar, function (v) {
            var it = _.get(_this148.ToolbarActions, v); //...........................................


            if (it) {
              list.push(it);
            } //...........................................

          }); // list.push({
          //   text: "HL",
          //   action : "$parent:highlightCode"
          // })


          return list;
        },
        //-----------------------------------------------
        TheMarkdownMediaSrc: function TheMarkdownMediaSrc() {
          if (_.isFunction(this.markdownMediaSrc)) {
            return this.markdownMediaSrc;
          }

          if (_.isString(this.markdownMediaSrc)) {
            return Ti.Util.genInvoking(this.markdownMediaSrc, {
              partial: "right"
            });
          }
        },
        //-----------------------------------------------
        ThePreviewMediaSrc: function ThePreviewMediaSrc() {
          if (_.isFunction(this.previewMediaSrc)) {
            return this.previewMediaSrc;
          }

          if (_.isString(this.previewMediaSrc)) {
            return Ti.Util.genInvoking(this.previewMediaSrc, {
              partial: "right"
            });
          }
        } //-----------------------------------------------

      },
      ///////////////////////////////////////////////////
      methods: {
        //-----------------------------------------------
        // Events
        //-----------------------------------------------
        OnToolbarChange: function OnToolbarChange() {
          var _ref81 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              name = _ref81.name,
              value = _ref81.value;

          //console.log("OnToolbarChange", {name, value})
          var fn = {
            //...........................................  
            bold: function bold($q, val) {
              $q.format("bold", val);
            },
            italic: function italic($q, val) {
              $q.format("italic", val);
            },
            code: function code($q, val) {
              $q.format("code", val);
            },
            //...........................................
            header: function header($q, val) {
              $q.format("header", val);
            },
            //...........................................
            blockquote: function blockquote($q, val) {
              $q.format("blockquote", val);
            },
            code_block: function code_block($q, val) {
              $q.format("code-block", val);
            },
            //..........................................
            link: function link($q, val) {
              return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee73() {
                var range, _$q$getFormat, link, text, _$q$getLeaf, _$q$getLeaf2, bolt, offset, index, length, newtab, reo, newText;

                return regeneratorRuntime.wrap(function _callee73$(_context73) {
                  while (1) {
                    switch (_context73.prev = _context73.next) {
                      case 0:
                        range = $q.getSelection();

                        if (range) {
                          _context73.next = 5;
                          break;
                        }

                        _context73.next = 4;
                        return Ti.Toast.Open("i18n:wordp-nil-sel", "warn");

                      case 4:
                        return _context73.abrupt("return", _context73.sent);

                      case 5:
                        // Eval Format
                        _$q$getFormat = $q.getFormat(range), link = _$q$getFormat.link; // Adjust range

                        if (link) {
                          _$q$getLeaf = $q.getLeaf(range.index), _$q$getLeaf2 = _slicedToArray(_$q$getLeaf, 2), bolt = _$q$getLeaf2[0], offset = _$q$getLeaf2[1];
                          text = bolt.text;
                          index = range.index - offset;
                          length = text.length;
                          range = {
                            index: index,
                            length: length
                          };
                        } else {
                          text = $q.getText(range);
                        } // Eval new tab


                        newtab = false;

                        if (/^\+/.test(text)) {
                          text = text.substring(1);
                          newtab = true;
                        } // Get link information


                        _context73.next = 11;
                        return Ti.App.Open({
                          icon: "fas-link",
                          title: "i18n:wordp-link",
                          height: "3.2rem",
                          result: {
                            text: text,
                            newtab: newtab,
                            link: link
                          },
                          model: {
                            prop: "data",
                            event: "change"
                          },
                          comType: "TiForm",
                          comConf: {
                            fields: [{
                              title: "i18n:link-href",
                              name: "link",
                              comType: "ti-input"
                            }, {
                              title: "i18n:link-text",
                              name: "text",
                              comType: "ti-input"
                            }, {
                              title: "i18n:open-newtab",
                              name: "newtab",
                              type: "Boolean",
                              comType: "ti-toggle"
                            }]
                          }
                        });

                      case 11:
                        reo = _context73.sent;

                        if (reo) {
                          _context73.next = 14;
                          break;
                        }

                        return _context73.abrupt("return");

                      case 14:
                        newText = reo.text;
                        if (reo.link && reo.newtab) newText = "+" + newText;
                        $q.updateContents({
                          ops: [{
                            retain: range.index
                          }, {
                            "delete": range.length
                          }, {
                            insert: newText,
                            attributes: {
                              link: reo.link,
                              newtab: true
                            }
                          }]
                        });

                      case 17:
                      case "end":
                        return _context73.stop();
                    }
                  }
                }, _callee73);
              }))();
            },
            //...........................................
            indent: function indent($q) {
              $q.format("indent", "+1");
            },
            outdent: function outdent($q) {
              $q.format("indent", "-1");
            },
            //...........................................
            list: function list($q) {
              var val = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "bullet";
              $q.format("list", val);
            } //...........................................

          }[name]; //.............................................
          // Invoke

          if (_.isFunction(fn)) {
            fn(this.$editor, value);
            this.quillUpdateFormat();
          } //.............................................

        },
        //-----------------------------------------------
        // Utility
        //-----------------------------------------------
        renderMarkdown: function renderMarkdown() {
          var _this149 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee74() {
            var MdDoc, delta;
            return regeneratorRuntime.wrap(function _callee74$(_context74) {
              while (1) {
                switch (_context74.prev = _context74.next) {
                  case 0:
                    if (Ti.Util.isBlank(_this149.value)) {
                      _context74.next = 10;
                      break;
                    }

                    // Parse markdown
                    MdDoc = Cheap.parseMarkdown(_this149.value); //console.log(MdDoc.toString())

                    window.MdDoc = MdDoc;
                    _this149.myMeta = _.cloneDeep(MdDoc.getMeta()); // Get delta

                    _context74.next = 6;
                    return MdDoc.toDelta({
                      mediaSrc: _this149.ThePreviewMediaSrc
                    });

                  case 6:
                    delta = _context74.sent;

                    //console.log(JSON.stringify(delta, null, '   '))
                    // Update Quill editor content
                    _this149.$editor.setContents(delta);

                    _context74.next = 12;
                    break;

                  case 10:
                    _this149.myMeta = {};

                    _this149.$editor.setContents([]);

                  case 12:
                  case "end":
                    return _context74.stop();
                }
              }
            }, _callee74);
          }))();
        },
        //-----------------------------------------------
        syncMarkdown: function syncMarkdown() {
          if (this.syncForbid > 0) {
            //console.log("!forbid! syncMarkdown", this.syncForbid)
            this.syncForbid--;
            return;
          }

          this.renderMarkdown();
        },
        //-----------------------------------------------
        // Highlight
        //-----------------------------------------------
        // highlightCode() {
        //   for(let $code of this.$refs.stage.querySelectorAll("pre")) {
        //     console.log($code)
        //     hljs.highlightBlock($code)
        //   }
        // },
        //-----------------------------------------------
        // Quill
        //-----------------------------------------------
        quillChanged: function quillChanged(delta) {
          var _this150 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee75() {
            var MdDoc, markdown;
            return regeneratorRuntime.wrap(function _callee75$(_context75) {
              while (1) {
                switch (_context75.prev = _context75.next) {
                  case 0:
                    if (!_this150.isNilContent) {
                      _context75.next = 2;
                      break;
                    }

                    return _context75.abrupt("return");

                  case 2:
                    // Delat => CheapDocument
                    MdDoc = Cheap.parseDelta(delta);
                    MdDoc.setDefaultMeta(_this150.myMeta);
                    _this150.myMeta = MdDoc.getMeta(); //console.log(MdDoc.toString())
                    // CheapDocument => markdown

                    _context75.next = 7;
                    return MdDoc.toMarkdown({
                      mediaSrc: _this150.TheMarkdownMediaSrc
                    });

                  case 7:
                    markdown = _context75.sent;

                    //console.log(markdown)
                    if (markdown != _this150.value) {
                      _this150.syncForbid = 1;

                      _this150.$notify("change", markdown);
                    }

                  case 9:
                  case "end":
                    return _context75.stop();
                }
              }
            }, _callee75);
          }))();
        },
        //-----------------------------------------------
        quillSelectionChanged: function quillSelectionChanged(range) {
          // Update selection info
          if (range) {
            // Indicate row:col
            var ii = [range.index];

            if (range.length > 0) {
              ii.push(range.length);
            }

            this.$notify("indicate", ii.join(":")); // Update format

            this.quillUpdateFormat(range);
          }
        },
        //-----------------------------------------------
        quillUpdateFormat: function quillUpdateFormat(range) {
          var fmt = this.$editor.getFormat(range); //console.log(fmt)
          //fmt = _.cloneDeep(fmt)

          if (fmt.header) {
            fmt["h".concat(fmt.header)] = true;
          } else {
            fmt["h0"] = true;
          }

          if (!_.isEqual(this.myToolbarStatus, fmt)) {
            this.myToolbarStatus = fmt;
          }
        },
        //-----------------------------------------------
        installQuillEditor: function installQuillEditor() {
          var _this151 = this;

          // Guard
          if (this.$editor) {
            return;
          } //.............................................
          // Reset the Quill Default


          ResetQuillConfig(Quill); //Quill.register(MyIndent)
          //.............................................

          this.$editor = new Quill(this.$refs.stage, {
            modules: {
              syntax: false
            },
            bounds: this.$refs.stage,
            placeholder: Ti.I18n.text(this.placeholder)
          }); //.............................................

          this.debounceQuillChanged = _.debounce(function (newDelta, oldDelta) {
            var delta = oldDelta.compose(newDelta);

            _this151.quillChanged(delta);
          }, 1000); //.............................................

          this.$editor.on("text-change", function (newDelta, oldDelta, source) {
            //console.log("text-change",this.isNilContent, _.cloneDeep({newDelta, oldDelta}))
            if (!_this151.isNilContent) {
              _this151.debounceQuillChanged(newDelta, oldDelta);
            }
          }); //.............................................

          this.$editor.on("selection-change", function (range, oldRange, source) {
            _this151.quillSelectionChanged(range);
          });
        } //-----------------------------------------------

      },
      ///////////////////////////////////////////////////
      watch: {
        "value": {
          handler: "syncMarkdown"
        },
        "isNilContent": function isNilContent(newVal, oldVal) {
          //console.log("isNilContent", newVal, oldVal)
          if (newVal) {
            this.syncForbid = 0;
          }
        }
      },
      ///////////////////////////////////////////////////
      mounted: function mounted() {
        this.syncForbid = 0;
        this.installQuillEditor();
        this.syncMarkdown();
      },
      ///////////////////////////////////////////////////
      beforeDestroy: function beforeDestroy() {
        this.syncForbid = 0;
      } ///////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/text/markdown/richeditor/ti-markdown-richeditor.mjs", _M);
  })(); //============================================================
  // JOIN: ti/text/markdown/richeditor/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/text/markdown/richeditor/_com.json", {
    "name": "ti-text-markdown-richeditor",
    "globally": true,
    "i18n": "@i18n:ti-text-editor",
    "css": "@deps:highlight/default.css",
    "template": "./ti-markdown-richeditor.html",
    "props": "./ti-markdown-richeditor-props.mjs",
    "methods": "./ti-markdown-richeditor-delegate-methods.mjs",
    "mixins": ["./ti-markdown-richeditor.mjs"],
    "components": ["@com:wn/adaptlist"],
    "deps": ["@deps:quill/quill.js", "@deps:highlight/highlight.js"]
  }); //============================================================
  // JOIN: ti/text/raw/ti-text-raw.html
  //============================================================

  Ti.Preload("ti/com/ti/text/raw/ti-text-raw.html", "<div class=\"ti-text-raw\"\n  :class=\"TopClass\"\n  v-ti-activable>\n  <!--\n    Header\n  -->\n  <div\n    v-if=\"isShowHead\"\n      class=\"as-head\">\n      <ti-icon :value=\"icon\"/>\n      <span>{{title}}</span>\n  </div>\n  <!--\n    Main\n  -->\n  <div class=\"as-main\">\n    <textarea ref=\"text\" \n      spellcheck=\"false\"\n      :placeholder=\"placeholder | i18n\"\n      :value=\"myContent\"\n      @compositionstart=\"OnInputCompositionStart\"\n      @compositionend=\"OnInputCompositionEnd\"\n      @input=\"OnInputing\"\n      @change=\"OnTextChanged\"></textarea>\n  </div>\n</div>"); //============================================================
  // JOIN: ti/text/raw/ti-text-raw.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////////////
      data: function data() {
        return {
          myContent: null,
          inputCompositionstart: false
        };
      },
      ///////////////////////////////////////////////////
      props: {
        "icon": {
          type: [String, Object],
          "default": undefined
        },
        "title": {
          type: String,
          "default": undefined
        },
        "trimed": {
          type: Boolean,
          "default": false
        },
        "value": {
          type: String,
          "default": ""
        },
        "placeholder": {
          type: String,
          "default": "i18n:blank"
        },
        "status": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      ///////////////////////////////////////////////////
      computed: {
        //-----------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass({
            "show-title": this.showTitle,
            "hide-title": !this.showTitle,
            "is-changed": _.get(this.status, "changed")
          });
        },
        //-----------------------------------------------
        isShowHead: function isShowHead() {
          return this.title || this.icon;
        },
        //-----------------------------------------------
        hasContent: function hasContent() {
          return !Ti.Util.isNil(this.value);
        } //-----------------------------------------------

      },
      ///////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        OnInputCompositionStart: function OnInputCompositionStart() {
          this.inputCompositionstart = true;
        },
        //------------------------------------------------
        OnInputCompositionEnd: function OnInputCompositionEnd() {
          this.inputCompositionstart = false;
          this.OnTextChanged();
        },
        //------------------------------------------------
        OnInputing: function OnInputing($event) {
          if (!this.inputCompositionstart) {
            this.OnTextChanged();
          }
        },
        //-----------------------------------------------
        OnTextChanged: function OnTextChanged() {
          var str = _.get(this.$refs.text, "value");

          if (this.trimed) {
            str = _.trim(str);
          }

          this.myContent = str;
        },
        //-----------------------------------------------
        syncMyContent: function syncMyContent() {
          this.myContent = this.value;
        },
        //-----------------------------------------------
        checkMyContent: function checkMyContent() {
          if (this.myContent != this.value) {
            this.$notify("change", this.myContent);
          }
        },
        //-----------------------------------------------
        __ti_shortcut: function __ti_shortcut(uniqKey) {
          if ("CTRL+ENTER" == uniqKey) {
            if (this.myContent != this.value) {
              this.$notify("change", this.myContent);
            }

            return {
              prevent: true
            };
          }
        } //-----------------------------------------------

      },
      ///////////////////////////////////////////////////
      watch: {
        "value": "syncMyContent",
        "myContent": function myContent() {
          this.debCheckChange();
        }
      },
      ///////////////////////////////////////////////////
      created: function created() {
        var _this152 = this;

        this.debCheckChange = _.debounce(function () {
          _this152.checkMyContent();
        }, 500);
      },
      ///////////////////////////////////////////////////
      mounted: function mounted() {
        this.syncMyContent();
      } ///////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/text/raw/ti-text-raw.mjs", _M);
  })(); //============================================================
  // JOIN: ti/text/raw/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/text/raw/_com.json", {
    "name": "ti-text-raw",
    "globally": true,
    "template": "./ti-text-raw.html",
    "mixins": ["./ti-text-raw.mjs"]
  }); //============================================================
  // JOIN: ti/time/ti-time.html
  //============================================================

  Ti.Preload("ti/com/ti/time/ti-time.html", "<div class=\"ti-col-data as-time\" \n  :class=\"topClass\" \n  :style=\"topStyle\">\n  <ti-list v-for=\"list in theListGroup\"\n    :key=\"list.key\"\n    :data=\"list.data\"\n    :display=\"'text'\"\n    :current-id=\"list.currentId\"\n    :cancelable=\"false\"\n    @select=\"onListSelected(list.key, $event)\"/>\n</div>"); //============================================================
  // JOIN: ti/time/ti-time.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      ////////////////////////////////////////////////////
      props: {
        "value": {
          type: [String, Number, Date, Ti.Types.Time],
          "default": null
        },

        /***
         * Value unit when value is Number
         */
        "valueUnit": {
          type: String,
          "default": "s",
          validator: function validator(unit) {
            return /^(ms|s|min|hr)$/.test(unit);
          }
        },
        // Display mode
        "mode": {
          type: String,
          "default": "auto",

          /***
           * - `sec`  : "HH:mm:ss"
           * - `min`  : "HH:mm"
           * - `auto` : "HH:mm:ss"
           */
          validator: function validator(unit) {
            return /^(sec|min|auto)$/.test(unit);
          }
        },
        // the height of drop list
        "width": {
          type: [Number, String],
          "default": null
        },
        // the height of drop list
        "height": {
          type: [Number, String],
          "default": 200
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        topClass: function topClass() {
          return this.getTopClass();
        },
        //------------------------------------------------
        topStyle: function topStyle() {
          return Ti.Css.toStyle({
            width: this.width,
            height: this.height
          });
        },
        //------------------------------------------------
        theTime: function theTime() {
          return Ti.Types.toTime(this.value || 0, {
            unit: this.valueUnit
          });
        },
        //------------------------------------------------
        theListGroup: function theListGroup() {
          var re = [this.createList("hours", 0, 24, this.theTime.hours), this.createList("minutes", 0, 60, this.theTime.minutes)];

          if (/^(auto|sec)$/.test(this.mode)) {
            re.push(this.createList("seconds", 0, 60, this.theTime.seconds));
          }

          return re;
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        createList: function createList(key, fromVal, toVal) {
          var currentVal = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
          var list = {
            key: key,
            currentId: "R-".concat(currentVal),
            data: []
          };

          for (var i = fromVal; i < toVal; i++) {
            list.data.push({
              id: "R-".concat(i),
              value: i,
              text: _.padStart(i, 2, '0')
            });
          }

          return list;
        },
        //------------------------------------------------
        onListSelected: function onListSelected(key) {
          var _ref82 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
              current = _ref82.current;

          var tm = this.theTime.clone();
          tm[key] = _.get(current, "value") || 0;
          this.$notify("change", tm);
        } //------------------------------------------------

      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/time/ti-time.mjs", _M);
  })(); //============================================================
  // JOIN: ti/time/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/time/_com.json", {
    "name": "ti-time",
    "globally": true,
    "template": "./ti-time.html",
    "mixins": ["./ti-time.mjs"],
    "components": ["@com:ti/list"]
  }); //============================================================
  // JOIN: ti/toggle/ti-toggle.html
  //============================================================

  Ti.Preload("ti/com/ti/toggle/ti-toggle.html", "<div class=\"ti-toggle\"\n  :class=\"topClass\">\n  <aside @click.left=\"onClick\"><b></b></aside>\n</div>"); //============================================================
  // JOIN: ti/toggle/ti-toggle.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      data: function data() {
        return {
          isOn: false
        };
      },
      /////////////////////////////////////////
      props: {
        "value": false,
        "readonly": false,
        "options": {
          type: Array,
          "default": function _default() {
            return [false, true];
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //......................................
        topClass: function topClass() {
          return Ti.Css.mergeClassName({
            "is-off": !this.isOn,
            "is-on": this.isOn
          }, this.className);
        } //......................................

      },
      //////////////////////////////////////////
      methods: {
        onClick: function onClick() {
          if (!this.readonly) {
            var v = this.isOn ? 0 : 1;
            this.$notify("change", this.options[v]);
          }
        }
      },
      //////////////////////////////////////////
      watch: {
        "value": function value() {
          this.isOn = this.value ? true : false;
        }
      },
      //////////////////////////////////////////
      mounted: function mounted() {
        this.isOn = this.value ? true : false;
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/toggle/ti-toggle.mjs", _M);
  })(); //============================================================
  // JOIN: ti/toggle/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/toggle/_com.json", {
    "name": "ti-toggle",
    "globally": true,
    "template": "./ti-toggle.html",
    "mixins": ["./ti-toggle.mjs"]
  }); //============================================================
  // JOIN: ti/transfer/ti-transfer-props.mjs
  //============================================================

  (function () {
    var _M = {
      //-----------------------------------
      // Data
      //-----------------------------------
      // option() -> all list
      // option(inputing) -> condition list
      "options": {
        type: [String, Array, Function, Ti.Dict],
        "default": function _default() {
          return [];
        }
      },
      "valueBy": {
        type: [String, Function],
        "default": undefined
      },
      "textBy": {
        type: [String, Function],
        "default": undefined
      },
      "iconeBy": {
        type: [String, Function],
        "default": undefined
      },
      "value": undefined,
      // Value format
      // If declare the valueType
      // It will transform the WnObj
      // to relaitve value mode
      "valueType": {
        type: String,
        "default": "id",
        validator: function validator(v) {
          return /^(id|obj|item)$/.test(v);
        }
      },
      // for valueType=="obj", which key is id => value
      // The key is for the primary obj, not the result
      // of mapping translate if you declare the mapping option.
      "idBy": {
        type: String,
        "default": "id"
      },
      // for valueType=="obj|item", translate the value
      "mapping": {
        type: Object,
        "default": undefined
      },
      //-----------------------------------
      // Behavior
      //-----------------------------------
      "canComType": {
        type: String,
        "default": undefined
      },
      "canComConf": {
        type: Object,
        "default": undefined
      },
      "selComType": {
        type: String,
        "default": undefined
      },
      "selComConf": {
        type: Object,
        "default": undefined
      },
      "filter": {
        type: Boolean,
        "default": true
      },
      "fltComType": {
        type: String,
        "default": "ti-input"
      },
      "fltComConf": {
        type: Object,
        "default": undefined
      },
      //-----------------------------------
      // Aspect
      //-----------------------------------
      "display": {
        type: [Object, String, Array],
        "default": undefined
      },
      "assignButtons": {
        type: Object,
        "default": function _default() {
          return {
            add: "fas-angle-double-right",
            remove: "fas-angle-double-left"
          };
        }
      },
      "canTitle": {
        type: String,
        "default": "i18n:candidate"
      },
      "selTitle": {
        type: String,
        "default": "i18n:checked"
      },
      //-----------------------------------
      // Measure
      //-----------------------------------
      "width": {
        type: [Number, String],
        "default": null
      },
      "height": {
        type: [Number, String],
        "default": null
      }
    };
    Ti.Preload("ti/com/ti/transfer/ti-transfer-props.mjs", _M);
  })(); //============================================================
  // JOIN: ti/transfer/ti-transfer.html
  //============================================================


  Ti.Preload("ti/com/ti/transfer/ti-transfer.html", "<div class=\"ti-transfer\"\n  :class=\"TopClass\"\n  :style=\"TopStyle\">\n  <!--=========================================\n    Left: Candidates\n  -->\n  <div class=\"as-box as-can-list\">\n    <!--\n      Head\n    -->\n    <div class=\"as-box-head\">\n      <div class=\"as-list-checker\"\n        @click.left=\"OnClickHeadChecker(can)\">\n        <ti-icon :value=\"GetHeadCheckerIcon(can)\"/>\n      </div>\n      <!--Title-->\n      <div class=\"as-title\">{{canTitle|i18n}}</div>\n      <!--Filter-->\n      <div v-if=\"filter\"\n        class=\"as-filter\">\n          <component \n            :is=\"fltComType\"\n            v-bind=\"FilterComConf\"\n            :value=\"myFilterValue\"\n            @change=\"OnFilterChanged\"\n            /></div>\n    </div>\n    <!--\n      component\n    -->\n    <div class=\"as-box-list\">\n      <component :is=\"CanListComType\"\n        class=\"as-box-main ti-fill-parent\"\n        v-bind=\"CanListComConf\"\n        @select=\"OnCanListSelected\"/>\n    </div>\n    <!--\n      Foot\n    -->\n    <div class=\"as-box-foot\">\n      <span>{{'total-count'|i18n({nb:can.data.length})}}</span>\n    </div>\n  </div>\n  <!--=========================================\n    Buttons\n  -->\n  <div class=\"as-buttons\">\n    <!--Add-->\n    <div class=\"as-btn is-add\"\n      @click.left=\"canListToSel\">\n      <ti-icon :value=\"assignButtons.add\"/>\n    </div>\n    <!--Remove-->\n    <div class=\"as-btn is-remove\"\n      @click.left=\"selListToCan\">\n      <ti-icon :value=\"assignButtons.remove\"/>\n    </div>\n  </div>\n  <!--=========================================\n    Right: Checked\n  -->\n  <div class=\"as-box as-sel-list\">\n    <!--\n      Head\n    -->\n    <div class=\"as-box-head\">\n      <div class=\"as-list-checker\"\n        @click.left=\"OnClickHeadChecker(sel)\">\n        <ti-icon :value=\"GetHeadCheckerIcon(sel)\"/>\n      </div>\n      <div class=\"as-title\">{{selTitle|i18n}}</div>\n      <div class=\"as-actions\">\n        <ti-actionbar v-bind=\"SelActions\"/>\n      </div>\n    </div>\n    <!--\n      component\n    -->\n    <div class=\"as-box-list\">\n      <component :is=\"SelListComType\"\n        class=\"as-box-main ti-cover-parent\"\n        v-bind=\"SelListComConf\"\n        @select=\"OnSelListSelected\"/>\n    </div>\n    <!--\n      Foot\n    -->\n    <div class=\"as-box-foot\">\n      <span>{{'total-count'|i18n({nb:sel.data.length})}}</span>\n    </div>\n  </div>\n</div>"); //============================================================
  // JOIN: ti/transfer/ti-transfer.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////////////////
      data: function data() {
        return {
          myFilterValue: null,
          myOptionsData: [],
          can: {
            data: [],
            checkedIds: []
          },
          sel: {
            data: [],
            checkedIds: []
          },
          selIdMap: {},
          loading: true
        };
      },
      ///////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //------------------------------------------------
        TopStyle: function TopStyle() {
          return Ti.Css.toStyle({
            width: this.width,
            height: this.height
          });
        },
        //------------------------------------------------
        Values: function Values() {
          return Ti.S.toArray(this.value);
        },
        //------------------------------------------------
        CanListComType: function CanListComType() {
          return this.canComType || "ti-list";
        },
        SelListComType: function SelListComType() {
          return this.selComType || "ti-list";
        },
        //------------------------------------------------
        CanListComConf: function CanListComConf() {
          return this.genComConf(this.canComConf, this.can);
        },
        SelListComConf: function SelListComConf() {
          return this.genComConf(this.selComConf, this.sel);
        },
        //------------------------------------------------
        SelActions: function SelActions() {
          var _this153 = this;

          return {
            items: [{
              name: "moveUp",
              type: "action",
              icon: "zmdi-long-arrow-up",
              action: function action() {
                _this153.selMoveUp();
              }
            }, {
              name: "moveDown",
              type: "action",
              icon: "zmdi-long-arrow-down",
              action: function action() {
                _this153.selMoveDown();
              }
            }]
          };
        },
        //------------------------------------------------
        FilterComConf: function FilterComConf() {
          return _.assign({
            trimed: true,
            width: "100%",
            prefixIcon: this.loading ? "fas-spinner fa-spin" : "zmdi-filter-list",
            placeholder: "i18n:filter",
            hover: ['prefixIcon', 'suffixText', 'suffixIcon'],
            loading: this.loading
          }, this.fltComConf);
        },
        //------------------------------------------------
        GetValueBy: function GetValueBy() {
          var _this154 = this;

          return function (it) {
            return _this154.Dict.getValue(it);
          };
        },
        //------------------------------------------------
        ReverMapping: function ReverMapping() {
          if (this.mapping) {
            var re = {};

            _.forEach(this.mapping, function (v, k) {
              re[v] = k;
            });

            return re;
          }
        },
        //------------------------------------------------
        Dict: function Dict() {
          var _this155 = this;

          // Define the loading hook
          var _hook_loading = function _hook_loading(_ref83) {
            var loading = _ref83.loading;
            _this155.loading = loading;
          }; // Customized


          if (this.options instanceof Ti.Dict) {
            var d = this.options.duplicate();
            d.addHooks(_hook_loading);
            return d;
          } // Refer dict


          if (_.isString(this.options)) {
            var dictName = Ti.DictFactory.DictReferName(this.options);

            if (dictName) {
              return Ti.DictFactory.CheckDict(dictName, _hook_loading);
            }
          } // Auto Create


          return Ti.DictFactory.CreateDict({
            data: this.options,
            getValue: Ti.Util.genGetter(this.valueBy || "value"),
            getText: Ti.Util.genGetter(this.textBy || "text|name"),
            getIcon: Ti.Util.genGetter(this.textBy || "icon")
          }, {
            hooks: _hook_loading
          });
        } //---------------------------------------------------

      },
      ///////////////////////////////////////////////////////
      methods: {
        //---------------------------------------------------
        OnCanListSelected: function OnCanListSelected(_ref84) {
          var checkedIds = _ref84.checkedIds;
          this.can.checkedIds = Ti.Util.truthyKeys(checkedIds);
        },
        //---------------------------------------------------
        OnSelListSelected: function OnSelListSelected(_ref85) {
          var checkedIds = _ref85.checkedIds;
          this.sel.checkedIds = Ti.Util.truthyKeys(checkedIds);
        },
        //---------------------------------------------------
        OnClickHeadChecker: function OnClickHeadChecker(list) {
          var data = list.data,
              checkedIds = list.checkedIds; // All -> none

          if (data.length == checkedIds.length) {
            list.checkedIds = [];
          } // Others to All
          else {
              var idMap = this.rebuildIdMap(data);
              list.checkedIds = Ti.Util.truthyKeys(idMap);
            }
        },
        //---------------------------------------------------
        OnFilterChanged: function OnFilterChanged(val) {
          var _this156 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee76() {
            return regeneratorRuntime.wrap(function _callee76$(_context76) {
              while (1) {
                switch (_context76.prev = _context76.next) {
                  case 0:
                    console.log("OnFilterChanged", val);
                    _this156.myFilterValue = val;
                    _context76.next = 4;
                    return _this156.Dict.queryData(val);

                  case 4:
                    _this156.myOptionsData = _context76.sent;

                    _this156.evalShownCanList();

                  case 6:
                  case "end":
                    return _context76.stop();
                }
              }
            }, _callee76);
          }))();
        },
        //---------------------------------------------------
        GetHeadCheckerIcon: function GetHeadCheckerIcon(_ref86) {
          var data = _ref86.data,
              checkedIds = _ref86.checkedIds;

          if (data.length > 0) {
            // All
            if (data.length == checkedIds.length) {
              return "fas-check-square";
            } // Partally


            if (checkedIds.length > 0) {
              return "fas-minus-square";
            }
          }

          return "far-square"; // none
        },
        //---------------------------------------------------
        // Core Methods
        //---------------------------------------------------
        canListToSel: function canListToSel() {
          // Guard
          if (_.isEmpty(this.can.checkedIds)) return; // Assign

          var _this$assignToList = this.assignToList(this.can, this.sel),
              src = _this$assignToList.src,
              tag = _this$assignToList.tag;

          this.can = src;
          this.sel = tag;
        },
        //---------------------------------------------------
        selListToCan: function selListToCan() {
          // Guard
          if (_.isEmpty(this.sel.checkedIds)) return; // Assign

          var _this$assignToList2 = this.assignToList(this.sel, this.can),
              src = _this$assignToList2.src,
              tag = _this$assignToList2.tag;

          this.can = tag;
          this.sel = src;
        },
        //---------------------------------------------------
        selMoveUp: function selMoveUp() {
          var _this$evalTheList = this.evalTheList(this.sel),
              remains = _this$evalTheList.remains,
              checks = _this$evalTheList.checks,
              minIndex = _this$evalTheList.minIndex,
              maxIndex = _this$evalTheList.maxIndex,
              checkedIds = _this$evalTheList.checkedIds;

          if (!_.isEmpty(checks) && minIndex > 0) {
            var _Ti$Util7;

            (_Ti$Util7 = Ti.Util).insertToArray.apply(_Ti$Util7, [remains, minIndex - 1].concat(_toConsumableArray(checks)));

            this.sel = {
              data: remains,
              checkedIds: checkedIds
            };
          }
        },
        //---------------------------------------------------
        selMoveDown: function selMoveDown() {
          var _this$evalTheList2 = this.evalTheList(this.sel),
              remains = _this$evalTheList2.remains,
              checks = _this$evalTheList2.checks,
              minIndex = _this$evalTheList2.minIndex,
              maxIndex = _this$evalTheList2.maxIndex,
              checkedIds = _this$evalTheList2.checkedIds;

          if (!_.isEmpty(checks)) {
            var _Ti$Util8;

            if (maxIndex < remains.length) {
              maxIndex++;
            }

            (_Ti$Util8 = Ti.Util).insertToArray.apply(_Ti$Util8, [remains, maxIndex].concat(_toConsumableArray(checks)));

            this.sel = {
              data: remains,
              checkedIds: checkedIds
            };
          }
        },
        //---------------------------------------------------
        // Utility
        //---------------------------------------------------
        // Eval the can/sel List 
        evalTheList: function evalTheList() {
          var _this157 = this;

          var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var remains = [];
          var checks = [];
          var checkedIds = [];
          var idMap = {};
          var minIndex = list.data.length;
          var maxIndex = -1; // Build ID map

          _.forEach(list.checkedIds, function (id) {
            idMap[id] = true;
          }); // Eval checked and remains


          _.forEach(list.data, function (li, index) {
            var id = _this157.GetValueBy(li);

            if (idMap[id]) {
              minIndex = Math.min(index, minIndex);
              maxIndex = Math.max(index, maxIndex);
              checkedIds.push(id);
              checks.push(li);
            } else {
              remains.push(li);
            }
          }); // Done for eval


          return {
            remains: remains,
            checks: checks,
            minIndex: minIndex,
            maxIndex: maxIndex - checks.length + 1,
            checkedIds: checkedIds
          };
        },
        //---------------------------------------------------
        assignToList: function assignToList(_ref87, ta) {
          var _this158 = this;

          var data = _ref87.data,
              checkedIds = _ref87.checkedIds;
          // Make ids map
          var ids = {};

          _.forEach(checkedIds, function (v) {
            return ids[v] = true;
          }); // pick remove list


          var remains = [];
          var joins = [];

          _.forEach(data, function (it) {
            var itV = _this158.Dict.getValue(it);

            if (ids[itV]) {
              joins.push(it);
            } else {
              remains.push(it);
            }
          }); // Merge checked ids


          _.forEach(ta.checkedIds, function (v) {
            return ids[v] = true;
          }); // Join to new list


          return {
            src: {
              data: remains,
              checkedIds: []
            },
            tag: {
              data: _.concat(ta.data, joins),
              checkedIds: _.keys(ids)
            }
          };
        },
        //---------------------------------------------------
        genComConf: function genComConf(comConf, _ref88) {
          var data = _ref88.data,
              checkedIds = _ref88.checkedIds;
          return _.assign({
            idBy: this.GetValueBy,
            display: this.display || "text"
          }, comConf, {
            data: data,
            checkedIds: checkedIds,
            multi: true,
            checkable: true,
            puppetMode: true,
            autoCheckCurrent: false
          });
        },
        //---------------------------------------------------
        evalShownCanList: function evalShownCanList() {
          var _this159 = this;

          var list = [];

          _.forEach(this.myOptionsData, function (it) {
            var itV = _this159.Dict.getValue(it);

            if (!_this159.selIdMap[itV]) {
              list.push(it);
            }
          });

          this.can.data = list;
          this.can.checkedIds = [];
        },
        //---------------------------------------------------
        reloadCanList: function reloadCanList() {
          var _this160 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee77() {
            return regeneratorRuntime.wrap(function _callee77$(_context77) {
              while (1) {
                switch (_context77.prev = _context77.next) {
                  case 0:
                    _context77.next = 2;
                    return _this160.Dict.queryData(_this160.myFilterValue);

                  case 2:
                    _this160.myOptionsData = _context77.sent;

                    _this160.evalShownCanList();

                  case 4:
                  case "end":
                    return _context77.stop();
                }
              }
            }, _callee77);
          }))();
        },
        //---------------------------------------------------
        reloadSelList: function reloadSelList() {
          var _arguments17 = arguments,
              _this161 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee78() {
            var vals, list, _iterator62, _step62, val, v, it;

            return regeneratorRuntime.wrap(function _callee78$(_context78) {
              while (1) {
                switch (_context78.prev = _context78.next) {
                  case 0:
                    vals = _arguments17.length > 0 && _arguments17[0] !== undefined ? _arguments17[0] : _this161.Values;
                    //console.log("reloadSelList")
                    list = [];
                    _iterator62 = _createForOfIteratorHelper(vals);
                    _context78.prev = 3;

                    _iterator62.s();

                  case 5:
                    if ((_step62 = _iterator62.n()).done) {
                      _context78.next = 14;
                      break;
                    }

                    val = _step62.value;
                    v = _this161.evalValue(val);
                    _context78.next = 10;
                    return _this161.Dict.getItem(v);

                  case 10:
                    it = _context78.sent;

                    if (it) {
                      list.push(it);
                    } else {
                      list.push(v);
                    }

                  case 12:
                    _context78.next = 5;
                    break;

                  case 14:
                    _context78.next = 19;
                    break;

                  case 16:
                    _context78.prev = 16;
                    _context78.t0 = _context78["catch"](3);

                    _iterator62.e(_context78.t0);

                  case 19:
                    _context78.prev = 19;

                    _iterator62.f();

                    return _context78.finish(19);

                  case 22:
                    _this161.sel = {
                      data: list,
                      checkedIds: _.get(_this161.sel, "checkedIds") || []
                    };

                  case 23:
                  case "end":
                    return _context78.stop();
                }
              }
            }, _callee78, null, [[3, 16, 19, 22]]);
          }))();
        },
        //---------------------------------------------------
        rebuildIdMap: function rebuildIdMap(data) {
          var _this162 = this;

          var ids = {};

          _.forEach(data, function (it) {
            var itV = _this162.Dict.getValue(it);

            ids[itV] = true;
          });

          return ids;
        },
        //---------------------------------------------------
        rebuildSelIdMap: function rebuildSelIdMap() {
          this.selIdMap = this.rebuildIdMap(this.sel.data);
        },
        //---------------------------------------------------
        evalValue: function evalValue(val) {
          var _this163 = this;

          // Guard
          if (Ti.Util.isNil(val)) {
            return val;
          } // Cases


          return {
            id: function id(v) {
              return v;
            },
            obj: function obj(v) {
              if (_this163.ReverMapping) {
                v = Ti.Util.translate(v, _this163.ReverMapping);
              }

              return _.get(v, _this163.idBy);
            },
            item: function item(v) {
              if (_this163.ReverMapping) {
                v = Ti.Util.translate(v, _this163.ReverMapping);
              }

              return _.get(v, "value");
            }
          }[this.valueType](val);
        },
        //---------------------------------------------------
        genValue: function genValue() {
          var _this164 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee81() {
            var ids;
            return regeneratorRuntime.wrap(function _callee81$(_context81) {
              while (1) {
                switch (_context81.prev = _context81.next) {
                  case 0:
                    ids = _.keys(_this164.selIdMap); // Guard

                    if (!_.isEmpty(ids)) {
                      _context81.next = 3;
                      break;
                    }

                    return _context81.abrupt("return", []);

                  case 3:
                    _context81.next = 5;
                    return {
                      id: function id(ids) {
                        return ids;
                      },
                      obj: function () {
                        var _obj = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee79(ids) {
                          var list, _iterator63, _step63, id, it;

                          return regeneratorRuntime.wrap(function _callee79$(_context79) {
                            while (1) {
                              switch (_context79.prev = _context79.next) {
                                case 0:
                                  list = [];
                                  _iterator63 = _createForOfIteratorHelper(ids);
                                  _context79.prev = 2;

                                  _iterator63.s();

                                case 4:
                                  if ((_step63 = _iterator63.n()).done) {
                                    _context79.next = 13;
                                    break;
                                  }

                                  id = _step63.value;
                                  _context79.next = 8;
                                  return _this164.Dict.getItem(id);

                                case 8:
                                  it = _context79.sent;
                                  if (it) if (_this164.mapping) {
                                    it = Ti.Util.translate(it, _this164.mapping);
                                  }
                                  list.push(it);

                                case 11:
                                  _context79.next = 4;
                                  break;

                                case 13:
                                  _context79.next = 18;
                                  break;

                                case 15:
                                  _context79.prev = 15;
                                  _context79.t0 = _context79["catch"](2);

                                  _iterator63.e(_context79.t0);

                                case 18:
                                  _context79.prev = 18;

                                  _iterator63.f();

                                  return _context79.finish(18);

                                case 21:
                                  return _context79.abrupt("return", list);

                                case 22:
                                case "end":
                                  return _context79.stop();
                              }
                            }
                          }, _callee79, null, [[2, 15, 18, 21]]);
                        }));

                        function obj(_x8) {
                          return _obj.apply(this, arguments);
                        }

                        return obj;
                      }(),
                      item: function () {
                        var _item = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee80(ids) {
                          var list, _iterator64, _step64, id, obj, it;

                          return regeneratorRuntime.wrap(function _callee80$(_context80) {
                            while (1) {
                              switch (_context80.prev = _context80.next) {
                                case 0:
                                  list = [];
                                  _iterator64 = _createForOfIteratorHelper(ids);
                                  _context80.prev = 2;

                                  _iterator64.s();

                                case 4:
                                  if ((_step64 = _iterator64.n()).done) {
                                    _context80.next = 13;
                                    break;
                                  }

                                  id = _step64.value;
                                  _context80.next = 8;
                                  return _this164.Dict.getItem(id);

                                case 8:
                                  obj = _context80.sent;
                                  it = {
                                    text: _this164.Dict.getText(obj),
                                    value: _this164.Dict.getValue(obj)
                                  };

                                  if (it) {
                                    if (_this164.mapping) {
                                      it = Ti.Util.translate(it, _this164.mapping);
                                    }

                                    list.push(it);
                                  }

                                case 11:
                                  _context80.next = 4;
                                  break;

                                case 13:
                                  _context80.next = 18;
                                  break;

                                case 15:
                                  _context80.prev = 15;
                                  _context80.t0 = _context80["catch"](2);

                                  _iterator64.e(_context80.t0);

                                case 18:
                                  _context80.prev = 18;

                                  _iterator64.f();

                                  return _context80.finish(18);

                                case 21:
                                  return _context80.abrupt("return", list);

                                case 22:
                                case "end":
                                  return _context80.stop();
                              }
                            }
                          }, _callee80, null, [[2, 15, 18, 21]]);
                        }));

                        function item(_x9) {
                          return _item.apply(this, arguments);
                        }

                        return item;
                      }()
                    }[_this164.valueType](ids);

                  case 5:
                    return _context81.abrupt("return", _context81.sent);

                  case 6:
                  case "end":
                    return _context81.stop();
                }
              }
            }, _callee81);
          }))();
        } //---------------------------------------------------

      },
      ///////////////////////////////////////////////////////
      watch: {
        "value": function value(newVal, oldVal) {
          if (!_.isEqual(newVal, oldVal)) {
            this.reloadSelList();
          }
        },
        "options": function options(newVal, oldVal) {
          if (!_.isEqual(newVal, oldVal)) {
            this.reloadCanList();
          }
        },
        "sel.data": function () {
          var _selData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee82() {
            var val;
            return regeneratorRuntime.wrap(function _callee82$(_context82) {
              while (1) {
                switch (_context82.prev = _context82.next) {
                  case 0:
                    this.rebuildSelIdMap();
                    _context82.next = 3;
                    return this.genValue();

                  case 3:
                    val = _context82.sent;

                    if (!_.isEqual(val, this.Values)) {
                      this.$notify("change", val);
                    }

                  case 5:
                  case "end":
                    return _context82.stop();
                }
              }
            }, _callee82, this);
          }));

          function selData() {
            return _selData.apply(this, arguments);
          }

          return selData;
        }()
      },
      ///////////////////////////////////////////////////////
      mounted: function () {
        var _mounted11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee83() {
          return regeneratorRuntime.wrap(function _callee83$(_context83) {
            while (1) {
              switch (_context83.prev = _context83.next) {
                case 0:
                  _context83.next = 2;
                  return this.reloadSelList();

                case 2:
                  _context83.next = 4;
                  return this.reloadCanList();

                case 4:
                case "end":
                  return _context83.stop();
              }
            }
          }, _callee83, this);
        }));

        function mounted() {
          return _mounted11.apply(this, arguments);
        }

        return mounted;
      }() ///////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/transfer/ti-transfer.mjs", _M);
  })(); //============================================================
  // JOIN: ti/transfer/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/transfer/_com.json", {
    "name": "ti-transfer",
    "globally": true,
    "template": "./ti-transfer.html",
    "props": "./ti-transfer-props.mjs",
    "mixins": ["./ti-transfer.mjs"]
  }); //============================================================
  // JOIN: ti/tree/ti-tree.html
  //============================================================

  Ti.Preload("ti/com/ti/tree/ti-tree.html", "<ti-table\n  class=\"ti-tree\"\n  :class=\"TopClass\"\n  id-by=\"id\"\n  icon-by=\"icon\"\n  indent-by=\"indent\"\n  raw-data-by=\"rawData\"\n  :fields=\"TableFields\"\n  :data=\"myTreeTableData\"\n  :changed-id=\"changedId\"\n  :current-id=\"currentId\"\n  :checked-ids=\"checkedIds\"\n  :multi=\"multi\"\n  :checkable=\"checkable\"\n  :selectable=\"selectable\"\n  :cancelable=\"cancelable\"\n  :hoverable=\"hoverable\"\n  :puppet-mode=\"puppetMode\"\n  :width=\"width\"\n  :height=\"height\"\n  :head=\"TableHead\"\n  :border=\"border\"\n  :blank-as=\"blankAs\"\n  :auto-scroll-into-view=\"autoScrollIntoView\"\n  @icon=\"OnRowIconClick\"\n  @open=\"OnRowOpen\"\n  @select=\"OnRowSelect\"\n  @cell:item:change=\"OnCellItemChange\"/>\n  "); //============================================================
  // JOIN: ti/tree/ti-tree.mjs
  //============================================================

  (function () {
    var _TI_TREE;

    var TI_TREE = (_TI_TREE = {
      //////////////////////////////////////////
      data: function data() {
        return {
          "myTreeTableData": [],
          "myOpenedNodePaths": {},
          "myCurrentId": null
        };
      },
      //////////////////////////////////////////
      props: {
        "nodeClassName": {
          type: String,
          "default": null
        },
        // The list to be rendered
        "data": {
          type: [Object, Array],
          "default": null
        },
        "idBy": {
          type: [String, Function],
          "default": "id"
        },
        "nameBy": {
          type: [String, Function],
          "default": "name"
        },
        "childrenBy": {
          type: [String, Function],
          "default": "children"
        },
        "leafBy": {
          type: [String, Function],
          "default": "!children"
        },
        "title": {
          type: String,
          "default": 'i18n:title'
        },
        "mainWidth": {
          type: [String, Number],
          "default": 'stretch'
        },
        "display": {
          type: [String, Object, Array],
          "default": "name"
        },
        // Default to open the node in depth.
        // the top node depth is 1, which is eqausl the path array length.
        // If 0, it will close all top leavel nodes
        "defaultOpenDepth": {
          type: Number,
          "default": 0
        },
        // Local store to save the tree open status
        "keepOpenBy": {
          type: String,
          "default": null
        },
        "keepCurrentBy": {
          type: String,
          "default": null
        },
        "changedId": {
          type: String,
          "default": null
        },
        "currentId": {
          type: String,
          "default": null
        },
        "checkedIds": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "openedNodePaths": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "multi": {
          type: Boolean,
          "default": false
        },
        "checkable": {
          type: Boolean,
          "default": false
        },
        // select item
        "selectable": {
          type: Boolean,
          "default": true
        },
        "cancelable": {
          type: Boolean,
          "default": true
        },
        "hoverable": {
          type: Boolean,
          "default": false
        },
        "width": {
          type: [String, Number],
          "default": null
        },
        "puppetMode": {
          type: Boolean,
          "default": false
        },
        "height": {
          type: [String, Number],
          "default": null
        },
        "autoScrollIntoView": {
          type: Boolean,
          "default": true
        },
        "autoOpen": {
          type: Boolean,
          "default": false
        },
        "showRoot": {
          type: Boolean,
          "default": true
        },
        "nodeHandleIcons": {
          type: Array,
          "default": function _default() {
            return ["zmdi-chevron-right", "zmdi-chevron-down"];
          }
        },
        "border": {
          type: String,
          "default": "column",
          validator: function validator(v) {
            return /^(row|column|cell|none)$/.test(v);
          }
        },
        // "extendFunctionSet" : {
        //   type : Object,
        //   default : ()=>({})
        // },
        "fields": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "blankAs": undefined
      },
      //////////////////////////////////////////
      watch: {},
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return Ti.Css.mergeClassName({
            "is-selectable": this.selectable,
            "is-hoverable": this.hoverable
          }, this.className);
        },
        //--------------------------------------
        getNodeId: function getNodeId() {
          var _this165 = this;

          if (_.isFunction(this.idBy)) {
            return function (it) {
              return _this165.idBy(it);
            };
          }

          return function (it) {
            return _.get(it, _this165.idBy);
          };
        },
        //--------------------------------------
        getNodeName: function getNodeName() {
          var _this166 = this;

          if (_.isFunction(this.nameBy)) {
            return function (it) {
              return _this166.nameBy(it);
            };
          }

          return function (it) {
            return _.get(it, _this166.nameBy);
          };
        },
        //--------------------------------------
        isNodeLeaf: function isNodeLeaf() {
          var _this167 = this;

          if (_.isFunction(this.leafBy)) {
            return function (it) {
              return _this167.leafBy(it) ? true : false;
            };
          } // Not


          var m = /^(!)?(.+)$/.exec(this.leafBy);
          var isNot = m[1] ? true : false;

          var keyPath = _.trim(m[2]);

          return function (it) {
            return _.get(it, keyPath) ? !isNot : isNot;
          };
        },
        //--------------------------------------
        getNodeChildren: function getNodeChildren() {
          var _this168 = this;

          if (_.isFunction(this.childrenBy)) {
            return function (it) {
              return _this168.childrenBy(it);
            };
          }

          return function (it) {
            return _.get(it, _this168.childrenBy);
          };
        },
        //--------------------------------------
        isTable: function isTable() {
          return _.isArray(this.fields) && !_.isEmpty(this.fields);
        },
        //--------------------------------------
        TableHead: function TableHead() {
          if (this.isTable) {
            return "frozen";
          }

          return "none";
        },
        //--------------------------------------
        TableFields: function TableFields() {
          var mainCol = {
            title: this.title,
            width: this.mainWidth,
            nowrap: true,
            display: this.display
          };

          if (this.isTable) {
            return _.concat(mainCol, this.fields);
          }

          return [mainCol];
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        evalTreeTableData: function evalTreeTableData() {
          var _this169 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee84() {
            var tableData;
            return regeneratorRuntime.wrap(function _callee84$(_context84) {
              while (1) {
                switch (_context84.prev = _context84.next) {
                  case 0:
                    // if(_.get(this.data, "value.title"))
                    //     console.log("evalTreeTableData", _.get(this.data, "value.title"))
                    tableData = []; //if(this.showRoot)
                    //console.log("evalTreeTableData", this.data)
                    // Array push to root

                    if (!_.isArray(_this169.data)) {
                      _context84.next = 6;
                      break;
                    }

                    _context84.next = 4;
                    return _this169.joinTreeTableRow(tableData, {}, null, _this169.data);

                  case 4:
                    _context84.next = 9;
                    break;

                  case 6:
                    if (!_this169.data) {
                      _context84.next = 9;
                      break;
                    }

                    _context84.next = 9;
                    return _this169.joinTreeTableRow(tableData, _this169.data, null);

                  case 9:
                    _this169.myTreeTableData = tableData;

                  case 10:
                  case "end":
                    return _context84.stop();
                }
              }
            }, _callee84);
          }))();
        },
        //--------------------------------------
        joinTreeTableRow: function joinTreeTableRow() {
          var _arguments18 = arguments,
              _this170 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee85() {
            var rows, item, path, children, self, _iterator65, _step65, child;

            return regeneratorRuntime.wrap(function _callee85$(_context85) {
              while (1) {
                switch (_context85.prev = _context85.next) {
                  case 0:
                    rows = _arguments18.length > 0 && _arguments18[0] !== undefined ? _arguments18[0] : [];
                    item = _arguments18.length > 1 && _arguments18[1] !== undefined ? _arguments18[1] : {};
                    path = _arguments18.length > 2 && _arguments18[2] !== undefined ? _arguments18[2] : [];
                    children = _arguments18.length > 3 ? _arguments18[3] : undefined;
                    // if(this.showRoot)
                    //console.log("joinTreeTableRow", item)
                    self = {}; //....................................
                    // For ROOT

                    if (!path) {
                      self.name = _this170.getNodeName(item) || "$ROOT$";
                      self.path = [];
                      self.pathId = "/";
                      self.id = Ti.Util.fallbackNil(_this170.getNodeId(item), self.pathId);
                      self.indent = 0;
                      self.leaf = false;
                      self.opened = !_this170.showRoot ? true : Ti.Util.fallback(_this170.myOpenedNodePaths[self.pathId], self.indent < _this170.defaultOpenDepth);
                      self.icon = self.leaf ? true : _this170.nodeHandleIcons[self.opened ? 1 : 0];
                    } // Others node
                    else {
                        self.name = _this170.getNodeName(item);
                        self.path = _.concat(path, self.name);
                        self.pathId = self.path.join("/");
                        self.id = Ti.Util.fallbackNil(_this170.getNodeId(item), self.pathId);
                        self.indent = self.path.length;
                        self.leaf = _this170.isNodeLeaf(item);
                        self.opened = Ti.Util.fallback(_this170.myOpenedNodePaths[self.pathId], self.indent < _this170.defaultOpenDepth);
                        self.icon = self.leaf ? true : _this170.nodeHandleIcons[self.opened ? 1 : 0];
                      } //....................................
                    // Join the rawData


                    self.rawData = item; //....................................
                    // Add root if necesssary

                    if (_this170.showRoot) {
                      rows.push(self);
                    } // If not show root, minus depth
                    else {
                        self.indent--;

                        if (self.indent >= 0) {
                          rows.push(self);
                        }
                      } //....................................
                    // Join Children


                    if (!(self.opened && !self.leaf)) {
                      _context85.next = 31;
                      break;
                    }

                    if (children) {
                      _context85.next = 13;
                      break;
                    }

                    _context85.next = 12;
                    return _this170.getNodeChildren(item);

                  case 12:
                    children = _context85.sent;

                  case 13:
                    if (!_.isArray(children)) {
                      _context85.next = 31;
                      break;
                    }

                    _iterator65 = _createForOfIteratorHelper(children);
                    _context85.prev = 15;

                    _iterator65.s();

                  case 17:
                    if ((_step65 = _iterator65.n()).done) {
                      _context85.next = 23;
                      break;
                    }

                    child = _step65.value;
                    _context85.next = 21;
                    return _this170.joinTreeTableRow(rows, child, self.path);

                  case 21:
                    _context85.next = 17;
                    break;

                  case 23:
                    _context85.next = 28;
                    break;

                  case 25:
                    _context85.prev = 25;
                    _context85.t0 = _context85["catch"](15);

                    _iterator65.e(_context85.t0);

                  case 28:
                    _context85.prev = 28;

                    _iterator65.f();

                    return _context85.finish(28);

                  case 31:
                  case "end":
                    return _context85.stop();
                }
              }
            }, _callee85, null, [[15, 25, 28, 31]]);
          }))();
        },
        //--------------------------------------
        findTableRow: function findTableRow(rowId) {
          if (!Ti.Util.isNil(rowId)) {
            var _iterator66 = _createForOfIteratorHelper(this.myTreeTableData),
                _step66;

            try {
              for (_iterator66.s(); !(_step66 = _iterator66.n()).done;) {
                var row = _step66.value;

                if (row.id == rowId) {
                  return row;
                }
              }
            } catch (err) {
              _iterator66.e(err);
            } finally {
              _iterator66.f();
            }
          }
        },
        //--------------------------------------
        OnCellItemChange: function OnCellItemChange() {
          var _ref89 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              name = _ref89.name,
              value = _ref89.value,
              rowId = _ref89.rowId;

          //console.log("OnCellItemChange", {name, value, rowId})
          var row = this.findTableRow(rowId);

          if (row) {
            this.$notify("node:item:change", {
              name: name,
              value: value,
              node: row,
              nodeId: rowId,
              data: row.rawData
            });
          }
        },
        //--------------------------------------
        OnRowSelect: function OnRowSelect() {
          var _ref90 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              currentId = _ref90.currentId,
              _ref90$checkedIds = _ref90.checkedIds,
              checkedIds = _ref90$checkedIds === void 0 ? {} : _ref90$checkedIds;

          var current,
              node,
              selected = []; // Has selected

          if (currentId) {
            var currentRow;

            var _iterator67 = _createForOfIteratorHelper(this.myTreeTableData),
                _step67;

            try {
              for (_iterator67.s(); !(_step67 = _iterator67.n()).done;) {
                var row = _step67.value;

                if (row.id == currentId) {
                  currentRow = row;
                  current = row.rawData;
                }

                if (checkedIds[row.id]) {
                  selected.push(row.rawData);
                }
              } // Auto Open

            } catch (err) {
              _iterator67.e(err);
            } finally {
              _iterator67.f();
            }

            if (currentRow && this.autoOpen) {
              this.openRow(currentRow);
            } // Store current Id


            this.myCurrentId = _.get(currentRow, "id");
            node = currentRow;
          } // Cancel current row
          else {
              this.myCurrentId = null;
            } // Save local status


          if (this.keepCurrentBy) {
            if (!this.puppetMode) {
              Ti.Storage.session.set(this.keepCurrentBy, this.myCurrentId);
            }
          } // Emit the value


          this.$notify("select", {
            node: node,
            current: current,
            selected: selected,
            currentId: currentId,
            checkedIds: checkedIds
          });
        },
        //--------------------------------------
        OnRowIconClick: function OnRowIconClick() {
          var _ref91 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              rowId = _ref91.rowId;

          var row = this.findTableRow(rowId); // Open it

          if (row && !row.leaf && !row.opened) {
            this.openRow(row);
          } // Close it
          else {
              this.closeRow(row);
            }
        },
        //--------------------------------------
        OnRowOpen: function OnRowOpen() {
          var _ref92 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              id = _ref92.id;

          var row = this.findTableRow(id);

          if (row && !row.leaf && !row.opened) {
            this.openRow(row);
          }
        },
        //--------------------------------------
        openRow: function openRow(rowOrId) {
          var row = _.isString(rowOrId) ? this.findTableRow(rowOrId) : rowOrId;

          if (row && !row.leaf && !row.opened) {
            this.$set(this.myOpenedNodePaths, row.pathId, true); // Notify status changed

            this.$notify("opened", row); // Save to Local

            this.saveNodeOpenStatus();
          }
        },
        //--------------------------------------
        isOpened: function isOpened(rowOrId) {
          var row = _.isString(rowOrId) ? this.findTableRow(rowOrId) : rowOrId;
          return row ? row.opened : false;
        },
        //--------------------------------------
        closeRow: function closeRow(rowOrId) {
          var row = _.isString(rowOrId) ? this.findTableRow(rowOrId) : rowOrId;

          if (row && !row.leaf && row.opened) {
            this.$set(this.myOpenedNodePaths, row.pathId, false); // Notify status changed

            this.$notify("closed", row); // Save to Local

            this.saveNodeOpenStatus();
          }
        },
        //--------------------------------------
        saveNodeOpenStatus: function saveNodeOpenStatus() {
          if (this.keepOpenBy) {
            Ti.Storage.session.setObject(this.keepOpenBy, this.myOpenedNodePaths);
          }

          this.$notify("opened-status:changed", this.myOpenedNodePaths);
        },
        //--------------------------------------
        syncOpenedNodePaths: function syncOpenedNodePaths() {
          this.myOpenedNodePaths = _.assign({}, this.openedNodePaths);
        },
        //--------------------------------------
        __ti_shortcut: function __ti_shortcut(uniqKey) {
          if ("ARROWLEFT" == uniqKey) {
            this.closeRow(this.myCurrentId);
          }

          if ("ARROWRIGHT" == uniqKey) {
            this.openRow(this.myCurrentId);
          }
        } //--------------------------------------

      }
    }, _defineProperty(_TI_TREE, "watch", {
      "data": function () {
        var _data = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee86(newVal, oldVal) {
          return regeneratorRuntime.wrap(function _callee86$(_context86) {
            while (1) {
              switch (_context86.prev = _context86.next) {
                case 0:
                  if (_.isEqual(newVal, oldVal)) {
                    _context86.next = 3;
                    break;
                  }

                  _context86.next = 3;
                  return this.evalTreeTableData();

                case 3:
                case "end":
                  return _context86.stop();
              }
            }
          }, _callee86, this);
        }));

        function data(_x10, _x11) {
          return _data.apply(this, arguments);
        }

        return data;
      }(),
      "openedNodePaths": function openedNodePaths(newVal, oldVal) {
        if (!_.isEqual(newVal, oldVal)) {
          //console.log("tree openedNodePaths changed")
          this.syncOpenedNodePaths();
        }
      }
    }), _defineProperty(_TI_TREE, "mounted", function () {
      var _mounted12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee87() {
        var _this171 = this;

        var currentId;
        return regeneratorRuntime.wrap(function _callee87$(_context87) {
          while (1) {
            switch (_context87.prev = _context87.next) {
              case 0:
                //.................................
                this.syncOpenedNodePaths(); //.................................
                // Ti.Dom.watchDocument("mouseup", this.__on_mouseup)
                // Recover the open status from local store

                if (this.keepOpenBy) {
                  this.myOpenedNodePaths = Ti.Storage.session.getObject(this.keepOpenBy);

                  if (!this.puppetMode) {
                    this.$notify("opened-status:changed", this.myOpenedNodePaths);
                  }
                } //................................
                // Eval Data


                _context87.next = 4;
                return this.evalTreeTableData();

              case 4:
                //................................
                // Watch Deep
                this.$watch("myOpenedNodePaths", function () {
                  _this171.evalTreeTableData();
                }, {
                  deep: true
                }); //................................
                // Recover the current

                if (this.keepCurrentBy) {
                  currentId = Ti.Storage.session.get(this.keepCurrentBy);

                  if (!Ti.Util.isNil(currentId)) {
                    this.$nextTick(function () {
                      _this171.$children[0].selectRow(currentId);
                    });
                  }
                } //................................


              case 6:
              case "end":
                return _context87.stop();
            }
          }
        }, _callee87, this);
      }));

      function mounted() {
        return _mounted12.apply(this, arguments);
      }

      return mounted;
    }()), _defineProperty(_TI_TREE, "beforeDestroy", function beforeDestroy() {} //Ti.Dom.unwatchDocument("mouseup", this.__on_mouseup)
    //////////////////////////////////////////
    ), _TI_TREE);
    Ti.Preload("ti/com/ti/tree/ti-tree.mjs", TI_TREE);
  })(); //============================================================
  // JOIN: ti/tree/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/tree/_com.json", {
    "name": "ti-tree",
    "globally": true,
    "template": "./ti-tree.html",
    "mixins": ["./ti-tree.mjs"],
    "components": ["@com:ti/table"]
  }); //============================================================
  // JOIN: ti/upload/file/ti-upload-file.html
  //============================================================

  Ti.Preload("ti/com/ti/upload/file/ti-upload-file.html", "<div class=\"ti-upload-file full-field\"\n  :class=\"TopClass\">\n  <!--\n    Hidden input file to choose files\n  -->\n  <input \n    type=\"file\" \n    ref=\"file\" \n    class=\"ti-hide\"\n    @change.stop.seft=\"OnSelectLocalFilesToUpload\">\n  <!--\n    Major preview zone\n  -->\n  <div ref=\"thumb\"\n    class=\"thumb-con\"\n    :style=\"ThumbStyle\"\n    @click=\"OnClickToEdit\"\n    v-drop-files.mask=\"OnDropFiles\">\n    <!--\n      Preview\n    -->\n    <ti-obj-thumb \n      :preview=\"PreviewIcon\"\n      :progress=\"progress\"\n      :show-footer=\"false\"/>\n    <!--\n      Remove\n    -->\n    <div ref=\"actions\"\n      v-if=\"isShowRemoveIcon\"\n        class=\"thumb-actions\"\n        :style=\"ActionsStyle\">\n        <!--remove-->\n        <div class=\"thumb-opt as-del\"\n          @click.left.stop=\"OnRemove\">\n          <ti-icon value=\"zmdi-delete\"/>\n          <span class=\"it-text\">{{'clear'|i18n}}</span>\n        </div>\n        <!--open-->\n        <div class=\"thumb-opt as-open\"\n          @click.left.stop=\"OnOpen\">\n          <ti-icon value=\"zmdi-open-in-new\"/>\n          <span class=\"it-text\">{{'open'|i18n}}</span>\n        </div>\n    </div>\n    <!--//////-->\n  </div>\n</div>"); //============================================================
  // JOIN: ti/upload/file/ti-upload-file.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      data: function data() {
        return {
          myArea: 0,
          myActionsWidth: 0
        };
      },
      /////////////////////////////////////////
      props: {
        // The source to display image
        "preview": {
          type: [String, Object],
          "default": null
        },
        // The value must be a LocalFile object
        // to prerender the LocalFile during uploading
        "uploadFile": {
          type: File,
          "default": null
        },
        // Show the process `0.0-1.0` during the uploading
        "progress": {
          type: Number,
          "default": -1
        },
        // Display width
        "width": {
          type: [String, Number],
          "default": 120
        },
        // Display height
        "height": {
          type: [String, Number],
          "default": 120
        },
        // support remove the objects
        "removable": {
          type: Boolean,
          "default": true
        },
        "areaSize": {
          type: Object,
          "default": function _default() {
            return {
              //xl: (800 * 800),
              xs: 100 * 100,
              sm: 200 * 200,
              md: 400 * 400,
              lg: 600 * 600
            };
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass("is-area-".concat(this.AreaType));
        },
        //--------------------------------------
        AreaType: function AreaType() {
          var AS = this.areaSize;
          var ar = this.myArea;

          if (ar <= 0) {
            return "nil";
          }

          if (_.inRange(ar, 0, AS.xs + 1)) return "xs";
          if (_.inRange(ar, AS.xs, AS.sm + 1)) return "sm";
          if (_.inRange(ar, AS.sm, AS.md + 1)) return "md";
          if (_.inRange(ar, AS.md, AS.lg + 1)) return "lg";
          return "xl";
        },
        //--------------------------------------
        ThumbStyle: function ThumbStyle() {
          return Ti.Css.toStyle({
            width: this.width,
            height: this.height
          });
        },
        //--------------------------------------
        ActionsStyle: function ActionsStyle() {
          if (/^(xs|sm)$/.test(this.AreaType)) {
            return {
              right: Ti.Css.toSize(this.myActionsWidth * -1)
            };
          }
        },
        //--------------------------------------
        hasPreview: function hasPreview() {
          return this.preview ? true : false;
        },
        //--------------------------------------
        isShowRemoveIcon: function isShowRemoveIcon() {
          if (!this.uploadFile && this.hasPreview) {
            return true;
          }

          return false;
        },
        //--------------------------------------
        PreviewIcon: function PreviewIcon() {
          if (this.uploadFile) {
            return {
              type: "localFile",
              value: this.uploadFile
            };
          } // Normal image


          if (this.preview) {
            return this.preview;
          } // Show Icon


          return "zmdi-plus";
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnClickToEdit: function OnClickToEdit() {
          this.$refs.file.click();
        },
        //--------------------------------------
        OnDropFiles: function OnDropFiles(files) {
          var _this172 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee88() {
            var file;
            return regeneratorRuntime.wrap(function _callee88$(_context88) {
              while (1) {
                switch (_context88.prev = _context88.next) {
                  case 0:
                    file = _.get(files, 0);

                    if (file) {
                      _this172.$notify("upload", file);
                    }

                  case 2:
                  case "end":
                    return _context88.stop();
                }
              }
            }, _callee88);
          }))();
        },
        //--------------------------------------
        OnSelectLocalFilesToUpload: function OnSelectLocalFilesToUpload(evt) {
          var _this173 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee89() {
            return regeneratorRuntime.wrap(function _callee89$(_context89) {
              while (1) {
                switch (_context89.prev = _context89.next) {
                  case 0:
                    _context89.next = 2;
                    return _this173.OnDropFiles(evt.target.files);

                  case 2:
                    _this173.$refs.file.value = "";

                  case 3:
                  case "end":
                    return _context89.stop();
                }
              }
            }, _callee89);
          }))();
        },
        //--------------------------------------
        OnRemove: function OnRemove() {
          this.$notify("remove");
        },
        //--------------------------------------
        OnOpen: function OnOpen() {
          this.$notify("open");
        },
        //--------------------------------------
        recountArea: function recountArea() {
          var rect = Ti.Rects.createBy(this.$refs.thumb);
          this.myArea = rect.width * rect.height;

          if (this.$refs.actions) {
            this.myActionsWidth = this.$refs.actions.getBoundingClientRect().width;
          } else {
            this.myActionsWidth = 0;
          }
        },
        //--------------------------------------
        shouldRecountArea: function shouldRecountArea() {
          var _this174 = this;

          _.delay(function () {
            _this174.recountArea();
          }, 10);
        } //--------------------------------------

      },
      //////////////////////////////////////////
      watch: {
        "preview": "shouldRecountArea",
        "width": "shouldRecountArea",
        "height": "shouldRecountArea",
        "removable": "shouldRecountArea",
        "areaSize": "shouldRecountArea"
      },
      //////////////////////////////////////////
      created: function created() {
        var _this175 = this;

        Ti.Viewport.watch(this, {
          resize: function resize() {
            _this175.recountArea();
          }
        });
      },
      //////////////////////////////////////////
      mounted: function mounted() {
        var _this176 = this;

        this.$nextTick(function () {
          return _this176.recountArea();
        });
      },
      //////////////////////////////////////////
      beforeDestroy: function beforeDestroy() {
        Ti.Viewport.unwatch(this);
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/upload/file/ti-upload-file.mjs", _M);
  })(); //============================================================
  // JOIN: ti/upload/file/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/upload/file/_com.json", {
    "name": "ti-upload-file",
    "globally": true,
    "template": "./ti-upload-file.html",
    "mixins": ["./ti-upload-file.mjs"]
  }); //============================================================
  // JOIN: ti/wall/com/wall-tile/wall-tile.html
  //============================================================

  Ti.Preload("ti/com/ti/wall/com/wall-tile/wall-tile.html", "<div class=\"wall-tile\"\n  :class=\"TopClass\"\n  :style=\"TopStyle\">\n  <div v-if=\"myCom\"\n    class=\"tile-con\"\n    @click.left=\"OnClickRow\"\n    @dblclick.left=\"OnDblClickRow\"\n    v-ti-activable>\n    <component   \n      :is=\"myCom.comType\" \n      v-bind=\"myCom.comConf\"/>\n  </div>\n</div>"); //============================================================
  // JOIN: ti/wall/com/wall-tile/wall-tile.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////////////
      inject: ["$wall"],
      ///////////////////////////////////////////////////
      data: function data() {
        return {
          myCom: null
        };
      },
      ///////////////////////////////////////////////////
      props: {
        "display": {
          type: Object,
          "default": null
        },
        // Wall-Tile width
        "width": {
          type: [String, Number],
          "default": null
        },
        // Wall-Tile height
        "height": {
          type: [String, Number],
          "default": null
        }
      },
      ///////////////////////////////////////////////////
      computed: {
        //-----------------------------------------------
        TopClass: function TopClass() {
          return this.getListItemClass();
        },
        //--------------------------------------
        TopStyle: function TopStyle() {
          var css = {};

          if (this.width) {
            css.width = this.width;
          }

          if (this.height) {
            css.height = this.height;
          }

          return Ti.Css.toStyle(css);
        } //-----------------------------------------------

      },
      ///////////////////////////////////////////////////
      methods: {
        //-----------------------------------------------
        evalMyDisplayCom: function evalMyDisplayCom() {
          var _this177 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee90() {
            var com, old, nit;
            return regeneratorRuntime.wrap(function _callee90$(_context90) {
              while (1) {
                switch (_context90.prev = _context90.next) {
                  case 0:
                    //console.log("evalMyDisplayCom", this.data)
                    _this177.$wall.reportReady(_this177.index, !Ti.Util.isNil(_this177.myCom));

                    _context90.next = 3;
                    return _this177.evalDataForFieldDisplayItem({
                      itemData: _this177.data,
                      displayItem: _this177.display,
                      vars: _objectSpread({
                        "isCurrent": _this177.isCurrent,
                        "isChecked": _this177.isChecked,
                        "isChanged": _this177.isChanged,
                        "isActived": _this177.isActived,
                        "rowId": _this177.rowId
                      }, _this177.$vars)
                    });

                  case 3:
                    com = _context90.sent;
                    // Update and return
                    old = Ti.Util.pureCloneDeep(_this177.myCom);
                    nit = Ti.Util.pureCloneDeep(com);

                    if (!_.isEqual(old, nit)) {
                      //console.log(`-> Cell[${this.rowIndex}-${this.index}]:`, {old, nit})
                      _this177.myCom = com;
                    } // report ready


                    _this177.$wall.reportReady(_this177.index, true);

                  case 8:
                  case "end":
                    return _context90.stop();
                }
              }
            }, _callee90);
          }))();
        } //-----------------------------------------------

      },
      ///////////////////////////////////////////////////
      watch: {
        "data": {
          handler: "evalMyDisplayCom",
          immediate: true
        },
        "isCurrent": "evalMyDisplayCom",
        "isChecked": "evalMyDisplayCom"
      } ///////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/wall/com/wall-tile/wall-tile.mjs", _M);
  })(); //============================================================
  // JOIN: ti/wall/com/wall-tile/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/wall/com/wall-tile/_com.json", {
    "name": "wall-tile",
    "globally": false,
    "template": "./wall-tile.html",
    "methods": "@com:ti/support/field_display.mjs",
    "mixins": ["@com:ti/support/list_item_mixins.mjs", "./wall-tile.mjs"]
  }); //============================================================
  // JOIN: ti/wall/ti-wall.html
  //============================================================

  Ti.Preload("ti/com/ti/wall/ti-wall.html", "<div class=\"ti-wall\" \n  :class=\"TopClass\"\n  @click=\"OnClickTop\"\n  v-ti-activable>\n  <!--\n    Blank\n  -->\n  <ti-loading \n    v-if=\"isDataEmpty\"\n      class=\"nil-data\"\n      :class=\"blankClass\"\n      v-bind=\"blankAs\"/>\n  <!--\n    Show tiles\n  -->\n  <template v-else>\n    <!--tiles-->\n    <wall-tile\n      v-for=\"row in TheData\"\n        :key=\"row.id\"\n        :row-id=\"row.id\"\n        :index=\"row.index\"\n        :display=\"ItemDisplay\"\n        :data=\"row.rawData\"\n        :current-id=\"theCurrentId\"\n        :checked-ids=\"theCheckedIds\"\n        :changed-id=\"changedId\"\n        :checkable=\"checkable\"\n        :selectable=\"selectable\"\n        :openable=\"openable\"\n        :class-name=\"itemClassName\"\n        :width=\"itemWidth\"\n        :height=\"itemHeight\"\n        @select=\"OnRowSelect\"\n        @open=\"OnRowOpen\"/>\n    <!--Blank Tile-->\n    <div v-for=\"bc in BlankCols\"\n      class=\"wall-tile\"\n      :style=\"bc\">\n    </div>\n  </template>\n</div>"); //============================================================
  // JOIN: ti/wall/ti-wall.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////////////
      provide: function provide() {
        return {
          "$wall": this
        };
      },
      //////////////////////////////////////////
      data: function data() {
        return {
          myData: [],
          myColCount: 0,
          myColWidth: 0,
          isOnlyOneRow: false,
          myCellsReport: {},
          myNeedResize: true
        };
      },
      //////////////////////////////////////////
      props: {
        "itemClassName": undefined,
        "display": {
          type: [Object, String],
          "default": function _default() {
            return {
              key: "..",
              comType: "ti-label"
            };
          }
        },
        "border": {
          type: Boolean,
          "default": true
        },
        // aspect: list item spacing
        // `no|xs|sm|md|lg|xl`
        "spacing": {
          type: String,
          "default": "sm"
        },
        // Wall-Tile width
        "itemWidth": {
          type: [String, Number],
          "default": null
        },
        // Wall-Tile height
        "itemHeight": {
          type: [String, Number],
          "default": null
        },
        "resizeDelay": {
          type: Number,
          "default": 0
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass({
            "is-hoverable": this.hoverable,
            "show-border": this.border,
            "is-only-one-row": this.isOnlyOneRow,
            "is-multi-rows": !this.isOnlyOneRow
          }, ["spacing-".concat(this.spacing)]);
        },
        //--------------------------------------
        ItemDisplay: function ItemDisplay() {
          return this.evalFieldDisplayItem(this.display);
        },
        //--------------------------------------
        TheData: function TheData() {
          return this.myData;
        },
        //--------------------------------------
        ListRealCount: function ListRealCount() {
          return this.TheData.length;
        },
        //--------------------------------------
        BlankCols: function BlankCols() {
          var list = [];

          if (!_.isEmpty(this.TheData) && this.myColCount > 0 && this.myColWidth > 1 && !this.isOnlyOneRow) {
            // get list real count
            var n = this.ListRealCount % this.myColCount;

            if (n > 0) {
              var nr = this.myColCount - n;

              for (var i = 0; i < nr; i++) {
                list.push({
                  width: "".concat(this.myColWidth, "px")
                });
              }
            }
          } //console.log(list)


          return list;
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnClickTop: function OnClickTop($event) {
          if (this.cancelable) {
            // Click The body or top to cancel the row selection
            if (Ti.Dom.hasOneClass($event.target, 'ti-wall', 'wall-tile')) {
              this.cancelRow();
            }
          }
        },
        //--------------------------------------
        OnWallResize: function OnWallResize() {
          //console.log("OnWallResize")
          var $divs = Ti.Dom.findAll(":scope > .wall-tile", this.$el); // Guard empty

          if (_.isEmpty($divs)) return; // Eval the cols and width
          //console.log("  ~~~ do", this.data)

          var cols = 0;
          var width = 1;
          var top = -1;
          var isOnlyOneRow = true;

          var _iterator68 = _createForOfIteratorHelper($divs),
              _step68;

          try {
            for (_iterator68.s(); !(_step68 = _iterator68.n()).done;) {
              var $div = _step68.value;
              var rect = $div.getBoundingClientRect();

              if (top < 0) {
                top = rect.top;
              }

              if (top == rect.top) {
                cols++;
                width = Math.max(rect.width, width);
              } // Find the next row
              else {
                  isOnlyOneRow = false;
                  break;
                }
            } //console.log({cols, width, top})

          } catch (err) {
            _iterator68.e(err);
          } finally {
            _iterator68.f();
          }

          if (width > 1) {
            this.myColCount = cols;
            this.myColWidth = width;
            this.isOnlyOneRow = isOnlyOneRow;
          }
        },
        //--------------------------------------
        reportReady: function reportReady() {
          var _this178 = this;

          var rowIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
          var isDone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          var key = "R".concat(rowIndex); //console.log(key, isDone)

          if (isDone) {
            delete this.myCellsReport[key];
          } else {
            this.myCellsReport[key] = false;
            this.myNeedResize = true;
          } // Check the status


          if (isDone) {
            _.delay(function () {
              var allReady = _.isEmpty(_this178.myCellsReport); // Do resize


              if (allReady && _this178.myNeedResize) {
                _.delay(function () {
                  _this178.OnWallResize();
                }, _this178.resizeDelay);

                _this178.myNeedResize = false;
              }
            });
          }
        } //--------------------------------------

      },
      //////////////////////////////////////////
      watch: {
        "data": {
          handler: function () {
            var _handler3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee91(newVal, oldVal) {
              var isSame;
              return regeneratorRuntime.wrap(function _callee91$(_context91) {
                while (1) {
                  switch (_context91.prev = _context91.next) {
                    case 0:
                      isSame = _.isEqual(newVal, oldVal);

                      if (isSame) {
                        _context91.next = 5;
                        break;
                      }

                      _context91.next = 4;
                      return this.evalData();

                    case 4:
                      this.myData = _context91.sent;

                    case 5:
                    case "end":
                      return _context91.stop();
                  }
                }
              }, _callee91, this);
            }));

            function handler(_x12, _x13) {
              return _handler3.apply(this, arguments);
            }

            return handler;
          }(),
          immediate: true
        }
      },
      //////////////////////////////////////////
      mounted: function mounted() {
        var _this179 = this;

        //.................................
        Ti.Viewport.watch(this, {
          resize: _.debounce(function () {
            return _this179.OnWallResize();
          }, 20)
        }); //.................................
      },
      //////////////////////////////////////////
      destroyed: function destroyed() {
        Ti.Viewport.unwatch(this);
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/wall/ti-wall.mjs", _M);
  })(); //============================================================
  // JOIN: ti/wall/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/wall/_com.json", {
    "name": "ti-wall",
    "globally": true,
    "template": "./ti-wall.html",
    "props": "@com:ti/support/list_props.mjs",
    "methods": "@com:ti/support/field_display.mjs",
    "mixins": ["@com:ti/support/list_mixins.mjs", "./ti-wall.mjs"],
    "components": ["./com/wall-tile", "@com:ti/label"]
  }); //============================================================
  // JOIN: ti/wizard/com/wizard-step/wizard-step.html
  //============================================================

  Ti.Preload("ti/com/ti/wizard/com/wizard-step/wizard-step.html", "<component \n  class=\"ti-fill-parent\"\n  :is=\"comType\"\n  v-bind=\"comConf\"\n  @change=\"OnChange\"/>"); //============================================================
  // JOIN: ti/wizard/com/wizard-step/wizard-step.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////////////
      props: {
        "index": {
          type: Number,
          "default": -1
        },
        "stepKey": {
          type: String,
          "default": undefined
        },
        "dataKey": {
          type: String,
          "default": undefined
        },
        "title": {
          type: String,
          "default": undefined
        },
        "serializer": {
          type: Function,
          "default": undefined
        },
        "comType": {
          type: String,
          "default": "ti-label"
        },
        "comConf": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      ///////////////////////////////////////////////////
      methods: {
        //----------------------------------------------
        OnChange: function OnChange(payload) {
          if (_.isFunction(this.serializer)) {
            payload = this.serializer(payload);
          }

          if (this.dataKey) {
            payload = _.set({}, this.dataKey, payload);
          }

          this.$emit("data:change", payload);
        } //----------------------------------------------

      },
      ///////////////////////////////////////////////////
      watch: {
        "title": {
          handler: function handler() {
            this.$notify("change:title", this.title);
          },
          immediate: true
        }
      } ///////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/wizard/com/wizard-step/wizard-step.mjs", _M);
  })(); //============================================================
  // JOIN: ti/wizard/com/wizard-step/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/wizard/com/wizard-step/_com.json", {
    "name": "wizard-step",
    "globally": true,
    "template": "./wizard-step.html",
    "mixins": ["./wizard-step.mjs"]
  }); //============================================================
  // JOIN: ti/wizard/ti-wizard.html
  //============================================================

  Ti.Preload("ti/com/ti/wizard/ti-wizard.html", "<div class=\"ti-wizard ti-fill-parent\"\n  :class=\"TopClass\"><div class=\"wizard-con\">\n  <!--\n    Header Indicators\n  -->\n  <div class=\"as-head\">\n    <!--Title-->\n    <div\n      v-if=\"TheTitle\" \n        class=\"as-title\">{{TheTitle | i18n}}</div>\n    <!--Step indicators-->\n    <ul>\n      <li v-for=\"(step, index) in StepHeads\"\n        :key=\"step.stepKey\"\n        :class=\"step.className\"\n        @click.left=\"OnClickHeadItem(index, step)\">\n        <span class=\"as-indicator\">\n          <span class=\"as-line at-l\"></span>\n          <span class=\"as-dot\">{{index+1}}</span>\n          <span class=\"as-line at-r\"></span>\n        </span>\n        <span class=\"as-text\">{{step.title | i18n}}</span>\n      </li>\n    </ul>\n  </div>\n  <!--\n    Current Step Component\n  -->\n  <div class=\"as-main\">\n    <WizardStep \n      v-bind=\"CurrentStep\"\n      @data:change=\"OnDataChange\"\n      @step:change=\"OnStepChange\"\n      @change:title=\"OnTitleChange\"/>\n  </div>\n  <!--\n    Footer Default Buttons\n  -->\n  <div v-if=\"BtnPrev || BtnNext\"\n    class=\"as-foot\">\n      <!--\n        Btn: Prev\n      -->\n      <div\n        v-if=\"BtnPrev\" \n          class=\"as-btn is-prev\"\n          :class=\"BtnPrev.className\"\n          @click=\"OnClickBtnPrev\">\n          <span v-if=\"BtnPrev.icon\"\n            class=\"as-icon\">\n            <ti-icon :value=\"BtnPrev.icon\"/>\n          </span>\n          <span class=\"as-sep\"></span>\n          <span class=\"as-text\">{{BtnPrev.text|i18n}}</span>\n      </div>\n      <!--Sep-->\n      <div class=\"as-space\"></div>\n      <!--\n        Btn: Next\n      -->\n      <div\n        v-if=\"BtnNext\" \n          class=\"as-btn is-next\"\n          :class=\"BtnNext.className\"\n          @click=\"OnClickBtnNext\">\n          <span v-if=\"BtnNext.icon\"\n            class=\"as-icon\">\n            <ti-icon :value=\"BtnNext.icon\"/>\n          </span>\n          <span class=\"as-sep\"></span>\n          <span class=\"as-text\">{{BtnNext.text|i18n}}</span>\n      </div>\n  </div>\n</div></div>"); //============================================================
  // JOIN: ti/wizard/ti-wizard.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////////////
      data: function data() {
        return {
          myCurrent: undefined,
          myTitle: undefined
        };
      },
      ///////////////////////////////////////////////////
      props: {
        "title": {
          type: String,
          "default": undefined
        },
        "steps": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "value": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "current": {
          type: [Number, String],
          "default": 0
        },
        "canClickHeadItem": {
          type: String,
          "default": undefined
        },
        "evalStepConfFunc": {
          type: Boolean,
          "default": false
        }
      },
      ///////////////////////////////////////////////////
      computed: {
        //----------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //----------------------------------------------
        StepList: function StepList() {
          var list = [];

          if (_.isArray(this.steps)) {
            for (var i = 0; i < this.steps.length; i++) {
              var step = this.steps[i];
              var stepKey = step.key || "step".concat(i); // Join to the list

              list.push({
                index: i,
                stepKey: stepKey,
                dataKey: step.dataKey,
                title: step.title || stepKey,
                comType: step.comType || "ti-label",
                comConf: step.comConf,
                serializer: step.serializer,
                prev: step.prev,
                next: step.next
              });
            }
          }

          return list;
        },
        //----------------------------------------------
        StepHeads: function StepHeads() {
          var list = [];

          if (_.isArray(this.steps)) {
            var _iterator69 = _createForOfIteratorHelper(this.StepList),
                _step69;

            try {
              for (_iterator69.s(); !(_step69 = _iterator69.n()).done;) {
                var step = _step69.value;
                var className = [];

                if (this.CurrentStepIndex == step.index) {
                  className.push("is-current");
                } else if (step.index > this.CurrentStepIndex) {
                  className.push("is-future");
                } else {
                  className.push("is-passed");
                } // Join to the list


                list.push(_.assign({}, step, {
                  className: className
                }));
              }
            } catch (err) {
              _iterator69.e(err);
            } finally {
              _iterator69.f();
            }
          }

          return list;
        },
        //----------------------------------------------
        CurrentStepIndex: function CurrentStepIndex() {
          return this.CurrentStep ? this.CurrentStep.index : -1;
        },
        //----------------------------------------------
        hasCurrentStep: function hasCurrentStep() {
          return this.CurrentStep ? true : false;
        },
        //----------------------------------------------
        TheTitle: function TheTitle() {
          return this.myTitle || this.title;
        },
        //----------------------------------------------
        CurrentStep: function CurrentStep() {
          var cs = Ti.Util.fallback(this.myCurrent, this.current);

          var step = _.cloneDeep(this.getStep(cs)); // Eval serializer


          var serializer = step.serializer ? Ti.Util.genInvoking(step.serializer, {
            context: this.value,
            partial: "right"
          }) : _.identity; // Eval comConf

          var comConf = Ti.Util.explainObj(this.value, step.comConf, {
            evalFunc: this.evalStepConfFunc
          });
          return _.assign({}, step, {
            serializer: serializer,
            comConf: comConf
          });
        },
        //----------------------------------------------
        BtnPrev: function BtnPrev() {
          var btn = _.get(this.CurrentStep, "prev");

          return this.getStepAction(btn, {
            icon: "zmdi-chevron-left",
            text: "i18n:prev",
            enabled: true
          });
        },
        //----------------------------------------------
        BtnNext: function BtnNext() {
          var btn = _.get(this.CurrentStep, "next");

          return this.getStepAction(btn, {
            icon: "zmdi-chevron-right",
            text: "i18n:next",
            enabled: true,
            reverse: _.get(btn, "icon") ? false : true
          });
        } //----------------------------------------------

      },
      ///////////////////////////////////////////////////
      methods: {
        //----------------------------------------------
        OnTitleChange: function OnTitleChange(title) {
          this.myTitle = title;
        },
        //----------------------------------------------
        OnDataChange: function OnDataChange(payload) {
          //console.log("wizard:OnStepDataChange", payload)
          var newData = _.assign({}, this.value, payload);

          this.$notify("change", newData);
        },
        //----------------------------------------------
        OnStepChange: function OnStepChange(payload) {
          // Prev
          if ("@prev" == payload) {
            this.gotoFromCurrent(-1);
          } // Next
          else if ("@next" == payload) {
              this.gotoFromCurrent(1);
            } // absolute step
            else {
                this.gotoStep(payload);
              }
        },
        //----------------------------------------------
        OnClickHeadItem: function OnClickHeadItem(index) {
          // Can Click Passed Steps
          if ("passed" == this.canClickHeadItem && this.CurrentStepIndex > index) {
            this.gotoStep(index);
          }
        },
        //----------------------------------------------
        OnClickBtnPrev: function OnClickBtnPrev() {
          if (this.BtnPrev && this.BtnPrev.enabled) {
            if (this.BtnPrev.handler) {
              var invoking = Ti.Util.genInvoking(this.BtnPrev.handler, {
                context: this.value,
                partial: false
              });
              invoking.apply(this, [this.value]);
            } else {
              this.gotoFromCurrent(-1);
            }
          }
        },
        //----------------------------------------------
        OnClickBtnNext: function OnClickBtnNext() {
          if (this.BtnNext && this.BtnNext.enabled) {
            if (this.BtnNext.handler) {
              var invoking = Ti.Util.genInvoking(this.BtnNext.handler, {
                context: this.value,
                partial: false
              });
              invoking.apply(this, [this.value]);
            } else {
              this.gotoFromCurrent(1);
            }
          }
        },
        //----------------------------------------------
        //
        // Utility Methods
        //
        //----------------------------------------------
        getStep: function getStep(keyOrIndex) {
          // By Index: -1 is the last item
          if (_.isNumber(keyOrIndex)) {
            var i = Ti.Num.scrollIndex(keyOrIndex, this.StepList.length);
            if (i >= 0) return this.StepList[i];
          } // By Key
          else {
              var _iterator70 = _createForOfIteratorHelper(this.StepList),
                  _step70;

              try {
                for (_iterator70.s(); !(_step70 = _iterator70.n()).done;) {
                  var step = _step70.value;

                  if (step.stepKey == keyOrIndex) {
                    return step;
                  }
                }
              } catch (err) {
                _iterator70.e(err);
              } finally {
                _iterator70.f();
              }
            } // Return undefined

        },
        //----------------------------------------------
        gotoStep: function gotoStep(keyOrIndex) {
          var step = this.getStep(keyOrIndex);

          if (step) {
            var oldStep = _.cloneDeep(this.CurrentStep);

            this.myCurrent = step.index;
            this.$notify("step:chanage", {
              index: step.index,
              step: step,
              oldStep: oldStep
            });
          }
        },
        //----------------------------------------------
        gotoFromCurrent: function gotoFromCurrent() {
          var off = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

          if (this.CurrentStep) {
            var nextStepIndex = this.CurrentStep.index + off;
            this.gotoStep(nextStepIndex);
          }
        },
        //----------------------------------------------
        getStepAction: function getStepAction(stepBtn) {
          var dftSetting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

          if (stepBtn) {
            var btn; // Boolean default

            if (_.isBoolean(stepBtn)) {
              btn = {};
            } // Customized Text 
            else if (_.isString(stepBtn)) {
                btn = {
                  text: stepBtn || dftText
                };
              } // Actions
              else {
                  btn = _.assign({}, stepBtn); // Eval enabled

                  if (_.isPlainObject(btn.enabled)) {
                    btn.enabled = Ti.Validate.match(this.value, btn.enabled);
                  } // Customized
                  else if (_.isFunction(btn.enabled)) {
                      btn.enabled = btn.enabled();
                    }
                } // Setup 


            _.defaults(btn, dftSetting);

            btn.className = Ti.Css.mergeClassName(btn.className); // ClassName

            if (btn.enabled) {
              btn.className["is-enabled"] = true;
            } // Revers


            if (btn.reverse) {
              btn.className["is-reverse"] = true;
            } // Return 


            return btn;
          }
        } //----------------------------------------------

      } ///////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/ti/wizard/ti-wizard.mjs", _M);
  })(); //============================================================
  // JOIN: ti/wizard/_com.json
  //============================================================


  Ti.Preload("ti/com/ti/wizard/_com.json", {
    "name": "ti-wizard",
    "globally": true,
    "template": "./ti-wizard.html",
    "mixins": ["./ti-wizard.mjs"],
    "components": ["./com/wizard-step"]
  }); //============================================================
  // JOIN: web/auth/passwd/auth-passwd.html
  //============================================================

  Ti.Preload("ti/com/web/auth/passwd/auth-passwd.html", "<div \n  class=\"web-auth-passwd web-simple-form\" \n  :class=\"TopClass\">\n  <!--\n    Reset Success\n  -->\n  <template v-if=\"doing\">\n    <div class=\"as-ing\">\n      <ti-loading class=\"as-hug\" text=\"auth-reset-passwd-ing\"/>\n    </div>\n  </template>\n  <!--\n    Reset Success\n  -->\n  <template v-else-if=\"myResetResult\">\n    <div\n      class=\"as-done\"\n      :class=\"ResetDoneClass\">\n      <!--Loading Icon-->\n      <ti-loading\n        class=\"as-hug\"\n        :icon=\"ResetDoneIcon\"\n        :text=\"ResetDoneText\"/>\n      <!--Links-->\n      <div class=\"as-links\">\n        <a @click.left=\"OnResetAgain\">{{'auth-reset-passwd-again'|i18n}}</a>\n      </div>\n    </div>\n  </template>\n  <!--\n    Reset form\n  -->\n  <template v-else>\n    <!--\n      Head text\n    -->\n    <header>{{ModeTitle|i18n}}</header>\n    <!--\n      Main Area\n    -->\n    <section>\n      <!--\n        ===================================================\n        Mode: byVCode\n      -->\n      <template v-if=\"isByVode\">\n        <!--\n          Input: name\n        -->\n        <div class=\"as-input\">\n          <input \n            spellcheck=\"false\"\n            :placeholder=\"VCodeNameTip|i18n\"\n            v-model=\"myForm.name\"></div>\n        <!--\n          Input: vcode\n        -->\n        <div class=\"as-input\">\n          <input \n            spellcheck=\"false\"\n            :placeholder=\"VCodeCodeTip|i18n\"\n            v-model=\"myForm.vcode\">\n          <span>\n            <em v-if=\"delay>0\">{{'auth-vcode-delay'|i18n({sec:delay})}}</em>\n            <a v-else\n              @click=\"OnGetVcode\">{{VCodeGetTip|i18n}}</a>\n          </span>\n        </div>\n      </template>\n      <!--\n        ===================================================\n        Mode: byPasswd\n      -->\n      <template v-else>\n        <!--\n          Passwd: old\n        -->\n        <div class=\"as-input\">\n          <input \n            spellcheck=\"false\"\n            :type=\"myPassInputType\"\n            :placeholder=\"'auth-reset-passwd-old'|i18n\"\n            v-model=\"myForm.passwd_old\"></div>\n      </template>\n      <!--\n        ===================================================\n      -->\n      <!--\n        Passwd: new\n      -->\n      <div class=\"as-input\" :class=\"PasswdClass\">\n        <input \n          spellcheck=\"false\"\n          :type=\"myPassInputType\"\n          :placeholder=\"'auth-reset-passwd-new'|i18n\"\n          v-model=\"myForm.passwd_new\">\n        <span \n          class=\"as-passwd-type-toggle\"\n          @click=\"OnTogglePasswdInputType\">\n          <ti-icon :value=\"PasswdInputTypeIcon\"/>\n        </span>\n      </div>\n      <!--\n        Passwd: Indicator\n      -->\n      <div class=\"as-passtip\">\n        <!--Invalid pass-->\n        <div \n          v-if=\"-2 == myPassTip\"\n            class=\"is-invalid\">{{'passwd-invalid-char'|i18n}}</div>\n        <!--No password-->\n        <div \n          v-else-if=\"-1 == myPassTip\"\n            class=\"is-tip\">{{'passwd-tip'|i18n}}</div>\n        <!--Show tip bar-->\n        <div \n          v-else\n            class=\"is-tipbar\">\n            <span class=\"is-weak\">{{'i18n:passwd-sl-1' | i18n}}</span>\n            <u\n              v-for=\"it in PasswdTipBar\"\n                :class=\"it.className\"></u>\n            <span class=\"is-strong\">{{'i18n:passwd-sl-5' | i18n}}</span>\n        </div>\n      </div>\n      <!--\n        Passwd: repeat\n      -->\n      <div class=\"as-input\" :class=\"PasswdClass\">\n        <input \n          spellcheck=\"false\"\n          :type=\"myPassInputType\"\n          :placeholder=\"'auth-reset-passwd-ren'|i18n\"\n          v-model=\"myForm.passwd_ren\"></div>\n      <!--\n        Submit button\n      -->\n      <div class=\"as-btn\">\n        <button \n          :class=\"SubmitBtnClass\"\n          @click=\"OnSubmit\">{{SubmitBtnText|i18n}}</button>\n      </div>\n      <!--\n        Sublinks: switch mode / passwd-back\n      -->\n      <div \n        v-if=\"hasAltModes\"\n          class=\"as-links\">\n          <div\n            v-for=\"it in AltModes\"\n              class=\"as-item\">\n              <a @click.left=\"OnChangeMode(it)\">{{it.text|i18n}}</a>\n          </div>\n      </div>\n    </section>\n  </template>\n</div>"); //============================================================
  // JOIN: web/auth/passwd/auth-passwd.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////////////////
      data: function data() {
        return {
          "myPassInputType": "password",
          "myForm": {
            "name": null,
            "vcode": null,
            "passwd_old": null,
            "passwd_new": null,
            "passwd_ren": null
          },
          "myPassTip": -1,
          "myMode": "passwd",
          // delay to get the next captcha to prevent robot
          "delay": -1,
          "myResetResult": null,
          "doing": false
        };
      },
      ///////////////////////////////////////////////////////
      props: {
        // - "passwd"
        // - "phone"
        // - "email"
        "mode": {
          type: String,
          "default": "passwd"
        },
        "allowModes": {
          type: Object,
          "default": function _default() {
            return {
              "passwd": true,
              "phone": true,
              "email": true
            };
          }
        },
        "captcha": {
          type: String,
          //required : true,
          "default": null
        },
        "scenes": {
          type: Object,
          "default": function _default() {
            return {
              "robot": "robot",
              "passwd": "resetpasswd",
              "email": "resetpasswd",
              "phone": "resetpasswd"
            };
          }
        },
        // The interval of get capche to prevent robot
        // (in second)
        "getDelay": {
          type: Number,
          "default": 60
        }
      },
      ///////////////////////////////////////////////////////
      computed: {
        //---------------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //---------------------------------------------------
        PasswdClass: function PasswdClass() {},
        //---------------------------------------------------
        TheAllowModes: function TheAllowModes() {
          return Ti.Util.truthyKeys(this.allowModes);
        },
        //---------------------------------------------------
        isByVode: function isByVode() {
          return "passwd" != this.myMode;
        },
        //---------------------------------------------------
        ModeTitle: function ModeTitle() {
          return "i18n:auth-reset-passwd-by-".concat(this.myMode);
        },
        //---------------------------------------------------
        VCodeNameTip: function VCodeNameTip() {
          return "i18n:auth-reset-passwd-by-".concat(this.myMode, "-tip");
        },
        //---------------------------------------------------
        VCodeCodeTip: function VCodeCodeTip() {
          if ("email" == this.myMode) {
            return "i18n:auth-email-vcode";
          }

          return "i18n:auth-phone-vcode";
        },
        //---------------------------------------------------
        VCodeGetTip: function VCodeGetTip() {
          if ("email" == this.myMode) {
            return "i18n:auth-email-vcode-get";
          }

          return "i18n:auth-phone-vcode-get";
        },
        //---------------------------------------------------
        PasswdInputTypeIcon: function PasswdInputTypeIcon() {
          return {
            "password": "fas-eye-slash",
            "text": "fas-eye"
          }[this.myPassInputType];
        },
        //---------------------------------------------------
        AltModes: function AltModes() {
          var list = [];

          var _iterator71 = _createForOfIteratorHelper(this.TheAllowModes),
              _step71;

          try {
            for (_iterator71.s(); !(_step71 = _iterator71.n()).done;) {
              var md = _step71.value;

              if (md != this.myMode) {
                list.push({
                  text: "i18n:auth-reset-passwd-by-".concat(md),
                  mode: md
                });
              }
            }
          } catch (err) {
            _iterator71.e(err);
          } finally {
            _iterator71.f();
          }

          return list;
        },
        //---------------------------------------------------
        hasAltModes: function hasAltModes() {
          return !_.isEmpty(this.AltModes);
        },
        //---------------------------------------------------
        PasswdTipBar: function PasswdTipBar() {
          var items = [];

          for (var i = 1; i <= 5; i++) {
            items.push({
              text: "i18n:passwd-sl-".concat(i),
              className: i > this.myPassTip ? "is-off" : "is-on"
            });
          }

          return items;
        },
        //---------------------------------------------------
        FormStatus: function FormStatus() {
          // passwd: Lake params
          if ("passwd" == this.myMode) {
            if (!_.trim(this.myForm.passwd_old) || !_.trim(this.myForm.passwd_new) || !_.trim(this.myForm.passwd_ren)) {
              return "lack";
            }
          } // vcode: Lake params
          else if (!_.trim(this.myForm.name) || !_.trim(this.myForm.vcode) || !_.trim(this.myForm.passwd_new) || !_.trim(this.myForm.passwd_ren)) {
              return "lack";
            } // vcode: new password too short


          if (this.myForm.passwd_new.length < 6) {
            return "short";
          } // 2 password unmatched


          if (this.myForm.passwd_new != this.myForm.passwd_ren) {
            return "unmatch";
          }

          return "ready";
        },
        //---------------------------------------------------
        SubmitBtnText: function SubmitBtnText() {
          return "i18n:auth-reset-passwd-btn-".concat(this.FormStatus);
        },
        //---------------------------------------------------
        SubmitBtnClass: function SubmitBtnClass() {
          return "is-".concat(this.FormStatus);
        },
        //---------------------------------------------------
        ResetOK: function ResetOK() {
          return _.get(this.myResetResult, "ok") ? true : false;
        },
        //---------------------------------------------------
        ResetDoneClass: function ResetDoneClass() {
          return this.ResetOK ? 'is-ok' : 'is-fail';
        },
        //---------------------------------------------------
        ResetDoneIcon: function ResetDoneIcon() {
          return this.ResetOK ? "im-check-mark-circle" : "im-warning";
        },
        //---------------------------------------------------
        ResetDoneText: function ResetDoneText() {
          return this.ResetOK ? "i18n:auth-reset-passwd-ok" : _.get(this.myResetResult, "errCode");
        } //---------------------------------------------------

      },
      ///////////////////////////////////////////////////////
      methods: {
        //---------------------------------------------------
        OnChangeMode: function OnChangeMode(_ref93) {
          var mode = _ref93.mode;
          this.myMode = mode;
        },
        //---------------------------------------------------
        OnTogglePasswdInputType: function OnTogglePasswdInputType() {
          this.myPassInputType = {
            "password": "text",
            "text": "password"
          }[this.myPassInputType];
        },
        //---------------------------------------------------
        OnResetAgain: function OnResetAgain() {
          this.myResetResult = null;

          _.assign(this.myForm, {
            "name": null,
            "vcode": null,
            "passwd_old": null,
            "passwd_new": null,
            "passwd_ren": null
          });
        },
        //---------------------------------------------------
        OnSubmit: function OnSubmit() {
          var _this180 = this;

          if ("ready" == this.FormStatus) {
            this.doing = true;
            this.$notify("passwd:reset", {
              mode: this.myMode,
              scene: _.get(this.scenes, this.myMode),
              account: _.trim(this.myForm.name),
              vcode: _.trim(this.myForm.vcode),
              oldpwd: _.trim(this.myForm.passwd_old),
              newpwd: _.trim(this.myForm.passwd_new),
              done: function done(reo) {
                _this180.doing = false;
                _this180.myResetResult = reo;
              }
            });
          }
        },
        //---------------------------------------------------
        OnGetVcode: function OnGetVcode() {
          var _this181 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee92() {
            var name, vars, src, captcha, toast;
            return regeneratorRuntime.wrap(function _callee92$(_context92) {
              while (1) {
                switch (_context92.prev = _context92.next) {
                  case 0:
                    name = _.trim(_this181.myForm.name);

                    if (name) {
                      _context92.next = 4;
                      break;
                    }

                    Ti.Toast.Open("i18n:auth-reset-passwd-lack-".concat(_this181.myMode), "warn");
                    return _context92.abrupt("return");

                  case 4:
                    vars = {
                      scene: _this181.scenes.robot,
                      account: name
                    }; // Get the captcha

                    src = Ti.S.renderBy(_this181.captcha, vars);
                    _context92.next = 8;
                    return Ti.Captcha(src);

                  case 8:
                    captcha = _context92.sent;

                    if (captcha) {
                      _context92.next = 11;
                      break;
                    }

                    return _context92.abrupt("return");

                  case 11:
                    // Mask GUI
                    toast = Ti.Toast.Open({
                      icon: "fas-spinner fa-spin",
                      content: "i18n:auth-sending-vcode",
                      position: "center",
                      duration: 0,
                      closer: false
                    }); // Process to get vcode

                    _this181.$notify("get:vcode", {
                      type: _this181.myMode,
                      scene: _.get(_this181.scenes, _this181.myMode),
                      account: name,
                      captcha: captcha,
                      done: function done() {
                        toast.close();
                        _this181.myForm.vcode = null;
                      },
                      ok: function ok() {
                        var _ref94 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                            _ref94$duInMin = _ref94.duInMin,
                            duInMin = _ref94$duInMin === void 0 ? 60 : _ref94$duInMin;

                        _this181.delay = _this181.getDelay;
                        Ti.Toast.Open({
                          type: "success",
                          position: "top",
                          content: "i18n:auth-sent-ok",
                          vars: {
                            ta: Ti.I18n.get("auth-ta-".concat(_this181.myMode)),
                            by: Ti.I18n.get("auth-ta-by-".concat(_this181.myMode)),
                            min: duInMin
                          },
                          duration: 5000
                        });
                      },
                      fail: function fail() {
                        var _ref95 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                            errCode = _ref95.errCode,
                            data = _ref95.data;

                        Ti.Toast.Open({
                          type: "warn",
                          position: "top",
                          content: "i18n:".concat(errCode),
                          duration: 5000
                        });
                      }
                    });

                  case 13:
                  case "end":
                    return _context92.stop();
                }
              }
            }, _callee92);
          }))();
        },
        //---------------------------------------------------
        evalCurrentMode: function evalCurrentMode(mode) {
          //console.log("evalCurrentMode", mode)
          // Find the first allowed modes
          if (!_.get(this.allowModes, mode)) {
            if (_.isEmpty(this.TheAllowModes)) {
              throw "mode[".concat(mode, "] push me to corner!");
            }

            return _.first(this.TheAllowModes);
          } // The mode seems ok


          return mode;
        },
        //---------------------------------------------------
        updatePasswordTip: function updatePasswordTip() {
          var passwd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.myForm.passwd_new;

          if (_.isEmpty(passwd) || !_.isString(passwd) || passwd.length < 6) {
            this.myPassTip = -1;
            return;
          } // Score the passwd


          var score = 0; //  > 8

          if (passwd.length > 8) {
            score += 1;
          } // Count char type


          var map = {
            a_z: 0,
            A_Z: 0,
            dig: 0,
            spe: 0
          };

          for (var i = 0; i < passwd.length; i++) {
            var code = passwd.charCodeAt(i); // a-z

            if (code >= 97 && code <= 122) {
              map.a_z = 1;
            } // A-Z
            else if (code >= 65 && code <= 90) {
                map.A_Z = 1;
              } // 0-9
              else if (code >= 48 && code <= 57) {
                  map.dig = 1;
                } // Special char
                else if (code >= 20 && code <= 128) {
                    map.spe = 1;
                  } // Invalid char
                  else {
                      this.myPassTip = -2;
                      return;
                    }
          } // Count score


          score += _.sum(_.values(map));
          this.myPassTip = score;
        },
        //---------------------------------------------------
        syncCurrentMode: function syncCurrentMode() {
          this.myMode = this.evalCurrentMode(this.mode);
        } //---------------------------------------------------

      },
      ///////////////////////////////////////////////////////
      watch: {
        "mode": {
          handler: "syncCurrentMode"
        },
        "allowModes": {
          handler: "syncCurrentMode"
        },
        "myForm.passwd_new": "updatePasswordTip"
      },
      ///////////////////////////////////////////////////////
      mounted: function mounted() {
        var _this182 = this;

        this.syncCurrentMode(); // count the secound

        this.__H = window.setInterval(function () {
          if (_this182.delay >= 0) _this182.delay--;
        }, 1000);
      },
      ///////////////////////////////////////////////////////
      beforeDestroy: function beforeDestroy() {
        if (this.__H) {
          window.clearInterval(this.__H);
        }
      } ///////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/auth/passwd/auth-passwd.mjs", _M);
  })(); //============================================================
  // JOIN: web/auth/passwd/_com.json
  //============================================================


  Ti.Preload("ti/com/web/auth/passwd/_com.json", {
    "name": "web-auth-passwd",
    "globally": true,
    "template": "./auth-passwd.html",
    "mixins": ["./auth-passwd.mjs"]
  }); //============================================================
  // JOIN: web/auth/signup/auth-signup.html
  //============================================================

  Ti.Preload("ti/com/web/auth/signup/auth-signup.html", "<div \n  class=\"web-auth-signup web-simple-form\" \n  :class=\"TopClass\"\n  v-ti-activable>\n  <!--\n    Top Logo\n  -->\n  <div \n    v-if=\"logo\"\n      class=\"as-logo\">\n      <ti-icon :value=\"logo\"/>\n  </div>\n  <!--\n    Head text\n  -->\n  <header>{{Msgs.title|i18n}}</header>\n  <!--\n    Main Area\n  -->\n  <section>\n    <!--\n      Input: Name\n    -->\n    <div class=\"as-input\" :class=\"NameClass\">\n      <input \n        spellcheck=\"false\"\n        :placeholder=\"Msgs.nameTip|i18n\"\n        v-model=\"data.name\"></div>\n    <!--\n      Input: Password\n    -->\n    <div class=\"as-input\" :class=\"PasswdClass\">\n      <input \n        spellcheck=\"false\"\n        :type=\"PasswdInputType\"\n        :placeholder=\"Msgs.passwdTip|i18n\"\n        v-model=\"data.passwd\">\n      <span v-if=\"Msgs.codeGet\">\n        <em v-if=\"delay>0\">{{'auth-vcode-delay'|i18n({sec:delay})}}</em>\n        <a v-else\n          @click=\"OnGetVcode\">{{Msgs.codeGet|i18n}}</a>\n      </span>\n    </div>\n    <!--\n      Submit button\n    -->\n    <div class=\"as-btn\">\n      <button @click=\"OnAuthSubmit\">{{Msgs.btnText|i18n}}</button>\n    </div>\n    <!--\n      Sublinks: switch mode / passwd-back\n    -->\n    <ul \n      v-if=\"hasToggleMode\"\n        class=\"as-links\">\n        <li v-if=\"Msgs.linkLeft\"\n          class=\"at-left\">\n          <a @click=\"OnChangeMode\">{{Msgs.linkLeft   |i18n}}</a></li>\n        <li v-if=\"Msgs.linkRight\"\n          class=\"at-right\">\n          <a>{{Msgs.linkRight |i18n}}</a></li>\n    </ul>\n  </section>\n  <!--\n    Bottom link for oauth2\n  -->\n  <template v-if=\"hasOAuth2\">\n    <div class=\"as-spacing\"></div>\n    <footer>\n      <a\n        v-for=\"it in OAuth2Items\"\n          :href=\"it.href\"\n          :title=\"it.tip\">\n          <ti-icon :value=\"it.icon\"/>\n      </a>\n    </footer>\n  </template>\n</div>"); //============================================================
  // JOIN: web/auth/signup/auth-signup.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////////////////
      data: function data() {
        return {
          "data": {
            "name": null,
            "passwd": null
          },
          "guarding": false,
          "currentMode": "login_by_passwd",
          // String, Array
          "invalidField": null,
          // delay to get the next captcha to prevent robot
          "delay": -1
        };
      },
      ///////////////////////////////////////////////////////
      props: {
        // - "login_by_passwd"
        // - "login_by_phone"
        // - "login_by_email"
        // - "bind_phone"
        // - "bind_email"
        "mode": {
          type: String,
          "default": "login_by_passwd"
        },
        "toggleMode": {
          type: String,
          "default": "login_by_phone"
        },
        "captcha": {
          type: String,
          required: true,
          "default": null
        },
        "scenes": {
          type: Object,
          "default": function _default() {
            return {
              robot: "robot",
              bind_phone: "auth",
              bind_email: "auth",
              login_by_email: "auth",
              login_by_phone: "auth",
              login_by_passwd: "auth"
            };
          }
        },
        // The interval of get capche to prevent robot
        // (in second)
        "getDelay": {
          type: Number,
          "default": 60
        },
        // "invalidField" : {
        //   type : [String, Array],
        //   default : null
        // }
        "logo": {
          type: String,
          "default": undefined
        },
        "oauth2": {
          type: Array,
          "default": function _default() {
            return [];
          }
        }
      },
      ///////////////////////////////////////////////////////
      computed: {
        //---------------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //---------------------------------------------------
        Msgs: function Msgs() {
          // Login by password
          if ("login_by_passwd" == this.currentMode) {
            return {
              "title": "i18n:auth-passwd-title",
              "nameTip": "login_by_email" == this.toggleMode ? "i18n:auth-passwd-name-email-tip" : "i18n:auth-passwd-name-phone-tip",
              "passwdTip": "i18n:auth-passwd-tip",
              "btnText": "i18n:auth-login",
              "linkLeft": "login_by_email" == this.toggleMode ? "i18n:auth-go-email" : "i18n:auth-go-phone",
              "linkRight": "i18n:auth-passwd-getback",
              "blankName": "i18n:auth-blank-name"
            };
          } // Login by Phone


          if ("login_by_phone" == this.currentMode) {
            return {
              "title": "i18n:auth-phone-title",
              "nameTip": "i18n:auth-phone-tip",
              "passwdTip": "i18n:auth-phone-vcode",
              "codeGet": "i18n:auth-phone-vcode-get",
              "btnText": "i18n:auth-login-or-signup",
              "linkLeft": "i18n:auth-go-passwd",
              "linkRight": "i18n:auth-vcode-lost",
              "blankName": "i18n:auth-blank-phone"
            };
          } // Login by email


          if ("login_by_email" == this.currentMode) {
            return {
              "title": "i18n:auth-email-title",
              "nameTip": "i18n:auth-email-tip",
              "passwdTip": "i18n:auth-email-vcode",
              "codeGet": "i18n:auth-email-vcode-get",
              "btnText": "i18n:auth-login-or-signup",
              "linkLeft": "i18n:auth-go-passwd",
              "linkRight": "i18n:auth-vcode-lost",
              "blankName": "i18n:auth-blank-email"
            };
          } // Bind the phone


          if ("bind_phone" == this.currentMode) {
            return {
              "title": "i18n:auth-bind-phone-title",
              "nameTip": "i18n:auth-phone-tip",
              "passwdTip": "i18n:auth-phone-vcode",
              "codeGet": "i18n:auth-phone-vcode-get",
              "btnText": "i18n:auth-bind",
              //"linkLeft"  : "i18n:auth-bind-link-left",
              "linkRight": "i18n:auth-vcode-lost",
              "blankName": "i18n:auth-blank-phone"
            };
          } // Bind the email


          if ("bind_email" == this.currentMode) {
            return {
              "title": "i18n:auth-bind-email-title",
              "nameTip": "i18n:auth-email-tip",
              "passwdTip": "i18n:auth-email-vcode",
              "codeGet": "i18n:auth-email-vcode-get",
              "btnText": "i18n:auth-bind",
              //"linkLeft"  : "i18n:auth-bind-link-left",
              "linkRight": "i18n:auth-vcode-lost",
              "blankName": "i18n:auth-blank-email"
            };
          } // Invalid mode


          throw Ti.Err.make("e.com.combo.auth.invalid-mode", this.currentMode);
        },
        //---------------------------------------------------
        Params: function Params() {
          return _.mapValues(this.data, function (str) {
            return _.trim(str);
          });
        },
        //---------------------------------------------------
        isBlankName: function isBlankName() {
          return this.Params.name ? false : true;
        },
        //---------------------------------------------------
        isBlankNameOrPasswd: function isBlankNameOrPasswd() {
          var _this$Params = this.Params,
              name = _this$Params.name,
              passwd = _this$Params.passwd;
          return !name || !passwd;
        },
        //---------------------------------------------------
        Invalid: function Invalid() {
          return {
            name: this.isInvalid("name"),
            passwd: this.isInvalid("passwd")
          };
        },
        //---------------------------------------------------
        NameClass: function NameClass() {
          if (this.guarding && (this.Invalid.name || !this.Params.name)) return "is-invalid";
        },
        //---------------------------------------------------
        PasswdClass: function PasswdClass() {
          if (this.guarding && (this.Invalid.passwd || !this.Params.passwd)) return "is-invalid";
        },
        //---------------------------------------------------
        PasswdInputType: function PasswdInputType() {
          return "login_by_passwd" == this.currentMode ? "password" : "text";
        },
        //---------------------------------------------------
        OAuth2Items: function OAuth2Items() {
          return _.cloneDeep(this.oauth2);
        },
        //---------------------------------------------------
        hasOAuth2: function hasOAuth2() {
          return !_.isEmpty(this.OAuth2Items);
        },
        //---------------------------------------------------
        hasToggleMode: function hasToggleMode() {
          return !_.isEmpty(this.toggleMode);
        },
        //---------------------------------------------------
        // 验证码发送目标的名称（i18n）
        ToggleModeName: function ToggleModeName() {
          return {
            "login_by_phone": "i18n:auth-ta-phone",
            "login_by_email": "i18n:auth-ta-email",
            "bind_phone": "i18n:auth-ta-phone",
            "bind_email": "i18n:auth-ta-email"
          }[this.toggleMode];
        },
        //---------------------------------------------------
        // 验证码发送目标的名称（i18n）
        vCodeTargetName: function vCodeTargetName() {
          return {
            "login_by_phone": "i18n:auth-ta-phone",
            "login_by_email": "i18n:auth-ta-email",
            "bind_phone": "i18n:auth-ta-phone",
            "bind_email": "i18n:auth-ta-email"
          }[this.currentMode];
        },
        //---------------------------------------------------
        // 验证码发送目标的名称（i18n）
        vCodeTargetBy: function vCodeTargetBy() {
          return {
            "login_by_phone": "i18n:auth-ta-by-phone",
            "login_by_email": "i18n:auth-ta-by-email",
            "bind_phone": "i18n:auth-ta-by-phone",
            "bind_email": "i18n:auth-ta-by-email"
          }[this.currentMode];
        },
        //---------------------------------------------------
        // 不同模式下的场景
        vCodeScene: function vCodeScene() {
          return _.get(this.scenes, this.currentMode) || "auth";
        } //---------------------------------------------------

      },
      ///////////////////////////////////////////////////////
      methods: {
        //---------------------------------------------------
        OnChangeMode: function OnChangeMode() {
          // -> login-by-vcode
          if ("login_by_passwd" == this.currentMode) {
            this.currentMode = this.toggleMode;
          } // -> login-by-passwd
          else {
              this.currentMode = "login_by_passwd";
            }

          Ti.Be.BlinkIt(this.$el);
        },
        //---------------------------------------------------
        OnAuthSubmit: function OnAuthSubmit() {
          var _this183 = this;

          this.guarding = true; // Guarding

          if (this.isBlankNameOrPasswd) {
            return Ti.Toast.Open("i18n:auth-blank-name-passwd", "warn");
          } // Mask GUI


          var toast = Ti.Toast.Open({
            icon: "fas-spinner fa-spin",
            content: "i18n:auth-doing",
            position: "center",
            duration: 0,
            closer: false
          }); // Do Auth

          this.$notify("auth:send", {
            type: this.currentMode,
            name: this.Params.name,
            passwd: this.Params.passwd,
            // Close loading toast
            done: function done() {
              toast.close();
              _this183.InvalidField = null;
            },
            ok: function ok() {
              Ti.Toast.Open({
                type: "success",
                position: "top",
                content: "i18n:auth-ok",
                duration: 2000
              });

              _this183.$notify("auth:ok");
            },
            noexist: function noexist() {
              _this183.InvalidField = "name";
            },
            invalid: function invalid() {
              _this183.InvalidField = "passwd";
            },
            others: function others() {
              _this183.InvalidField = ["name", "passwd"];
            },
            fail: function fail() {
              var _ref96 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                  errCode = _ref96.errCode,
                  data = _ref96.data;

              // VCode Error
              if ("e.auth.captcha.invalid" == errCode) {
                Ti.Toast.Open({
                  type: "warn",
                  position: "top",
                  content: "i18n:e-www-invalid-captcha",
                  vars: {
                    ta: Ti.I18n.text(_this183.vCodeTargetName)
                  },
                  duration: 5000
                });
              } // NoSaltedPasswd
              else if ("e.auth.login.NoSaltedPasswd" == errCode) {
                  Ti.Alert("i18n:auth-login-NoSaltedPasswd", {
                    title: "i18n:e-auth-login-NoSaltedPasswd",
                    icon: "zmdi-shield-security",
                    textOk: "i18n:i-known",
                    vars: {
                      ta: Ti.I18n.text(_this183.ToggleModeName)
                    }
                  });
                } // Others Error
                else {
                    Ti.Toast.Open({
                      type: "warn",
                      position: "top",
                      content: "i18n:".concat(errCode),
                      duration: 5000
                    });
                  }
            }
          });
        },
        //---------------------------------------------------
        OnGetVcode: function OnGetVcode() {
          var _this184 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee93() {
            var vars, src, captcha, toast;
            return regeneratorRuntime.wrap(function _callee93$(_context93) {
              while (1) {
                switch (_context93.prev = _context93.next) {
                  case 0:
                    _this184.guarding = true; // The Account Name is required

                    if (!_this184.isBlankName) {
                      _context93.next = 5;
                      break;
                    }

                    _this184.InvalidField = "name";
                    Ti.Toast.Open(_this184.Msgs["blankName"], "warn");
                    return _context93.abrupt("return");

                  case 5:
                    // Reset invalid
                    _this184.guarding = false;
                    _this184.InvalidField = null; // Show the image captcha to prevent robot
                    //console.log("captcha", this.captcha)

                    vars = {
                      scene: _this184.scenes.robot,
                      account: _this184.Params.name
                    }; //let src = "/api/joysenses/auth/captcha?site=rv340tg5gcigsp6p5hvigc2gjb&account=18501211423"

                    src = Ti.S.renderBy(_this184.captcha, vars);
                    _context93.next = 11;
                    return Ti.Captcha(src);

                  case 11:
                    captcha = _context93.sent;

                    if (captcha) {
                      _context93.next = 14;
                      break;
                    }

                    return _context93.abrupt("return");

                  case 14:
                    // Mask GUI
                    toast = Ti.Toast.Open({
                      icon: "fas-spinner fa-spin",
                      content: "i18n:auth-sending-vcode",
                      position: "center",
                      duration: 0,
                      closer: false
                    }); // use the captcha to get code

                    _this184.$notify("get:vcode", {
                      type: _this184.currentMode,
                      scene: _this184.vCodeScene,
                      account: _this184.data.name,
                      captcha: captcha,
                      done: function done() {
                        toast.close();
                        _this184.InvalidField = null;
                        _this184.data.passwd = "";
                      },
                      ok: function ok() {
                        var _ref97 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                            _ref97$duInMin = _ref97.duInMin,
                            duInMin = _ref97$duInMin === void 0 ? 60 : _ref97$duInMin;

                        _this184.delay = _this184.getDelay;
                        Ti.Toast.Open({
                          type: "success",
                          position: "top",
                          content: "i18n:auth-sent-ok",
                          vars: {
                            ta: Ti.I18n.text(_this184.vCodeTargetName),
                            by: Ti.I18n.text(_this184.vCodeTargetBy),
                            min: duInMin
                          },
                          duration: 5000
                        });
                      },
                      fail: function fail() {
                        var _ref98 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                            errCode = _ref98.errCode,
                            data = _ref98.data;

                        Ti.Toast.Open({
                          type: "warn",
                          position: "top",
                          content: "i18n:".concat(errCode),
                          duration: 5000
                        });
                      }
                    });

                  case 16:
                  case "end":
                    return _context93.stop();
                }
              }
            }, _callee93);
          }))();
        },
        //---------------------------------------------------
        isInvalid: function isInvalid() {
          var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

          if (_.isArray(this.InvalidField)) {
            return _.indexOf(this.InvalidField, name) >= 0;
          }

          return name == this.InvalidField;
        },
        //-----------------------------------------------
        // Callback
        //-----------------------------------------------
        __ti_shortcut: function __ti_shortcut(uniqKey) {
          var _this185 = this;

          //....................................
          // If droplist is actived, should collapse it
          if ("ENTER" == uniqKey) {
            if (!this.isBlankNameOrPasswd) {
              this.$nextTick(function () {
                _this185.OnAuthSubmit();
              });
              return {
                stop: true,
                quit: true
              };
            }
          }
        } //---------------------------------------------------

      },
      ///////////////////////////////////////////////////////
      watch: {
        "currentMode": function currentMode() {
          this.guarding = false; //this.data.name = ""

          this.data.passwd = "";
        }
      },
      ///////////////////////////////////////////////////////
      mounted: function mounted() {
        var _this186 = this;

        if (this.mode) {
          this.currentMode = this.mode;
        } // count the secound


        this.__H = window.setInterval(function () {
          if (_this186.delay >= 0) _this186.delay--;
        }, 1000);
      },
      ///////////////////////////////////////////////////////
      beforeDestroy: function beforeDestroy() {
        if (this.__H) {
          window.clearInterval(this.__H);
        }
      } ///////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/auth/signup/auth-signup.mjs", _M);
  })(); //============================================================
  // JOIN: web/auth/signup/_com.json
  //============================================================


  Ti.Preload("ti/com/web/auth/signup/_com.json", {
    "name": "web-auth-signup",
    "globally": true,
    "template": "./auth-signup.html",
    "mixins": ["./auth-signup.mjs"]
  }); //============================================================
  // JOIN: web/footer/web-footer.html
  //============================================================

  Ti.Preload("ti/com/web/footer/web-footer.html", "<div class=\"ti-web-footer\">\n  I footer\n</div>"); //============================================================
  // JOIN: web/footer/web-footer.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      /////////////////////////////////////////
      props: {
        "logo": {
          type: [String, Object],
          "default": "zmdi-chevron-down"
        },
        "brief": {
          type: String,
          "default": null
        },
        "copyright": {
          type: String,
          "default": null
        }
      },
      //////////////////////////////////////////
      computed: {} //......................................
      //////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/footer/web-footer.mjs", _M);
  })(); //============================================================
  // JOIN: web/footer/_com.json
  //============================================================


  Ti.Preload("ti/com/web/footer/_com.json", {
    "name": "web-footer",
    "globally": true,
    "template": "./web-footer.html",
    "mixins": ["./web-footer.mjs"]
  }); //============================================================
  // JOIN: web/media/image/web-media-image.html
  //============================================================

  Ti.Preload("ti/com/web/media/image/web-media-image.html", "<a class=\"web-media-image\"\n  :class=\"TopClass\"\n  :style=\"TopStyle\"\n  :href=\"TheHref\"\n  :target=\"isNewTab ? '_blank' : '_self'\"\n  @mousemove=\"OnMouseMove\"\n  @mouseleave=\"OnMouseLeave\">\n  <!--Image-->\n  <img ref=\"img\"\n    v-if=\"TheSrc\" \n      :src=\"TheSrc\"\n      @load=\"OnImageLoaded\"/>\n  <!--Text-->\n  <div\n    v-if=\"TheText\"\n      class=\"as-text\">\n      <span>{{TheText}}</span>\n  </div>\n  <!--Zoom len-->\n  <template v-if=\"zoomLens\">\n    <!--Picker-->\n    <div ref=\"pick\"\n      class=\"as-zoom-pick\"\n      :style=\"ZoomLenPickStyle\"></div>\n    <!--Docker-->\n    <div ref=\"dock\"\n      v-if=\"showZoomPick\"\n        class=\"as-zoom-dock\"\n        :style=\"ZoomLenDockStyle\"></div>\n  </template>\n</a>"); //============================================================
  // JOIN: web/media/image/web-media-image.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////
      data: function data() {
        return {
          showZoomPick: false,
          showZoomDock: false,
          naturalWidth: -1,
          naturalHeight: -1,
          clientWidth: -1,
          clientHeight: -1,
          imgLoading: true,
          pickRect: {}
        };
      },
      /////////////////////////////////////////
      props: {
        "src": {
          type: [String, Object],
          "default": undefined
        },
        "preview": {
          type: Object,
          "default": undefined
        },
        "text": {
          type: String,
          "default": undefined
        },
        "href": {
          type: String,
          "default": undefined
        },
        "newtab": {
          type: [String, Boolean],
          "default": undefined
        },
        "i18n": {
          type: Boolean,
          "default": true
        },
        "width": {
          type: [String, Number],
          "default": undefined
        },
        "height": {
          type: [String, Number],
          "default": undefined
        },

        /*
        Show zoom lens and dock aside to the image
        - pickWidth : (0-1) percent | >1 for pixcle
        - scale : 2 zoome leave base on pick zoomLens
        - dockMode  : "V"
        - dockSpace : 10
        */
        "zoomLens": {
          type: Object,
          "default": undefined
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass({
            "has-href": this.TheHref ? true : false,
            "no-href": this.TheHref ? false : true
          });
        },
        //--------------------------------------
        TopStyle: function TopStyle() {
          return Ti.Css.toStyle({
            width: this.width,
            height: this.height
          });
        },
        //--------------------------------------
        TheZoomLens: function TheZoomLens() {
          if (!this.zoomLens || this.clientWidth <= 0 || this.clientHeight <= 0) return;

          var pickW = _.get(this.zoomLens, "pickWidth", .618);

          var pickH = _.get(this.zoomLens, "pickHeight", -1);

          var zl = {};
          zl.pickWidth = pickW < 1 ? this.clientWidth * pickW : pickW;
          zl.pickHeight = pickH <= 0 ? zl.pickWidth : pickH < 1 ? this.clientHeight * pickH : pickH;

          var scale = _.get(this.zoomLens, "scale", 2);

          zl.dockWidth = zl.pickWidth * scale;
          zl.dockHeight = zl.pickHeight * scale;

          _.defaults(zl, {
            dockMode: "V",
            dockSpace: {
              x: 10,
              y: 0
            },
            dockPosListY: ["top", "bottom"]
          });

          return zl;
        },
        //--------------------------------------
        ZoomLenPickStyle: function ZoomLenPickStyle() {
          if (this.zoomLens && !_.isEmpty(this.pickRect)) {
            return Ti.Css.toStyle({
              visibility: this.showZoomPick ? "visible" : "hidden",
              top: this.pickRect.top,
              left: this.pickRect.left,
              width: this.TheZoomLens.pickWidth,
              height: this.TheZoomLens.pickHeight
            });
          }
        },
        //--------------------------------------
        ZoomLenDockStyle: function ZoomLenDockStyle() {
          if (this.zoomLens && !_.isEmpty(this.pickRect)) {
            var scale = _.get(this.zoomLens, "scale", 2);

            var cW = this.clientWidth;
            var cH = this.clientHeight;
            var pLeft = this.pickRect.left;
            var pTop = this.pickRect.top;
            return Ti.Css.toStyle({
              visibility: this.showZoomDock ? "visible" : "hidden",
              width: this.TheZoomLens.dockWidth,
              height: this.TheZoomLens.dockHeight,
              backgroundImage: "url(\"".concat(this.TheSrc, "\")"),
              backgroundSize: "".concat(cW * scale, "px ").concat(cH * scale, "px"),
              backgroundPosition: "".concat(pLeft * scale * -1, "px ").concat(pTop * scale * -1, "px")
            });
          }
        },
        //--------------------------------------
        TheSrc: function TheSrc() {
          return Ti.WWW.evalObjPreviewSrc(this.src, this.preview);
        },
        //--------------------------------------
        TheText: function TheText() {
          if (this.text) {
            var str = this.text;

            if (_.isPlainObject(this.src)) {
              str = Ti.Util.explainObj(this.src, this.text);
            }

            if (this.i18n) {
              str = Ti.I18n.text(str);
            }

            return str;
          }
        },
        //--------------------------------------
        TheHref: function TheHref() {
          if (this.href) {
            var href = this.href;

            if (_.isPlainObject(this.src)) {
              href = Ti.Util.explainObj(this.src, this.href);
            }

            return href;
          }
        },
        //--------------------------------------
        isNewTab: function isNewTab() {
          var newtab = this.newtab;

          if (_.isString(newtab)) {
            if (_.isPlainObject(this.src)) {
              newtab = Ti.Util.explainObj(this.src, this.newtab);
            }
          }

          return newtab ? true : false;
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnImageLoaded: function OnImageLoaded() {
          var $img = this.$refs.img;

          if ($img) {
            this.naturalWidth = $img.naturalWidth;
            this.naturalHeight = $img.naturalHeight;
            this.clientWidth = $img.clientWidth;
            this.clientHeight = $img.clientHeight;
            this.imgLoading = false;
          }
        },
        //--------------------------------------
        OnMouseMove: function OnMouseMove($event) {
          if (!_.isElement(this.$refs.img) || !_.isElement(this.$refs.pick)) {
            return;
          }

          var imRect = Ti.Rects.createBy(this.$refs.img);
          var pkRect = Ti.Rects.createBy(this.$refs.pick);
          var clientX = $event.clientX,
              clientY = $event.clientY;
          var rect = Ti.Rects.create({
            x: clientX,
            y: clientY,
            width: pkRect.width,
            height: pkRect.height
          });
          imRect.wrap(rect);
          rect.relative(imRect);
          this.pickRect = rect;
          this.showZoomPick = true;
        },
        //--------------------------------------
        OnMouseLeave: function OnMouseLeave() {
          this.showZoomPick = false;
          this.showZoomDock = false;
        } //--------------------------------------

      },
      //////////////////////////////////////////
      watch: {
        "showZoomPick": function showZoomPick(newVal) {
          var _this187 = this;

          if (newVal && this.zoomLens) {
            this.$nextTick(function () {
              Ti.Dom.dockTo(_this187.$refs.dock, _this187.$refs.img, {
                mode: _this187.TheZoomLens.dockMode,
                space: _this187.TheZoomLens.dockSpace,
                posListX: _this187.TheZoomLens.dockPosListX,
                posListY: _this187.TheZoomLens.dockPosListY
              });

              _.delay(function () {
                _this187.showZoomDock = true;
              }, 100);
            });
          }
        }
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/media/image/web-media-image.mjs", _M);
  })(); //============================================================
  // JOIN: web/media/image/_com.json
  //============================================================


  Ti.Preload("ti/com/web/media/image/_com.json", {
    "name": "web-media-image",
    "globally": true,
    "template": "./web-media-image.html",
    "mixins": ["./web-media-image.mjs"]
  }); //============================================================
  // JOIN: web/media/player/web-media-player.html
  //============================================================

  Ti.Preload("ti/com/web/media/player/web-media-player.html", "<div class=\"ti-web-image\">\n  \n</div>"); //============================================================
  // JOIN: web/media/player/web-media-player.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      /////////////////////////////////////////
      props: {
        "src": {
          type: String,
          "default": undefined
        },
        "value": {
          type: [String, Number],
          "default": undefined
        },
        "bgColor": {
          type: [String, Number],
          "default": "#000000"
        },
        // [{text:"xxx", className:"xxx", cssStyle:""}]
        // [{src:"xxx",  className:"xxx", cssStyle:""}]
        "items": {
          type: [Array],
          "default": function _default() {
            return [];
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TheItems: function TheItems() {
          var list = [];

          _.forEach(this.items, function (it) {});

          return list;
        } //--------------------------------------

      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/media/player/web-media-player.mjs", _M);
  })(); //============================================================
  // JOIN: web/media/player/_com.json
  //============================================================


  Ti.Preload("ti/com/web/media/player/_com.json", {
    "name": "web-media-player",
    "globally": true,
    "template": "./web-media-player.html",
    "mixins": ["./web-media-player.mjs"]
  }); //============================================================
  // JOIN: web/meta/article/web-meta-article.html
  //============================================================

  Ti.Preload("ti/com/web/meta/article/web-meta-article.html", "<div class=\"web-meta-article\"\n  :class=\"TopClass\">\n  <!--\n    Title\n  -->\n  <h1\n    v-if=\"title\"\n      class=\"as-title\">{{title}}</h1>\n  <!--\n    Information\n  -->\n  <div\n    v-if=\"hasInfo\"\n      class=\"as-info\">\n      <!--author-->\n      <div v-if=\"author\" class=\"as-author\">{{author}}</div>\n      <!--PubDateText-->\n      <div v-if=\"PubDateText\" class=\"as-pub-date\">{{PubDateText}}</div>\n      <!--Watch Count-->\n      <div\n        v-if=\"watchCount > 0\"\n          class=\"as-watch-count\">\n            <i class=\"zmdi zmdi-eye\"></i>\n            <span>{{watchCount}}</span></div>\n      <!--PubDateText-->\n      <div v-if=\"duration\" class=\"as-duration\">{{DurationText}}</div>\n  </div>\n  <!--\n    Tags\n  -->\n  <ul \n  v-if=\"hasTags\"\n    class=\"as-tags\">\n    <li\n      v-for=\"tag in TheTags\">{{tag}}</li></ul>\n  <!--\n    Brief\n  -->\n  <blockquote\n    v-if=\"brief\"\n      class=\"as-brief\">{{brief}}</blockquote>\n  <!--\n    Bottom line\n  -->\n  <hr v-if=\"bottomLine\" class=\"as-bottom-line\">\n</div>"); //============================================================
  // JOIN: web/meta/article/web-meta-article.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      props: {
        "title": {
          type: String,
          "default": undefined
        },
        "brief": {
          type: String,
          "default": undefined
        },
        "pubDate": {
          type: [String, Number, Date],
          "default": undefined
        },
        "tags": {
          type: [String, Array],
          "default": undefined
        },
        "dateFormat": {
          type: String,
          "default": "yyyy-MM-dd"
        },
        "author": {
          type: String,
          "default": undefined
        },
        "duration": {
          type: [String, Number],
          "default": undefined
        },
        "watchCount": {
          type: Number,
          "default": 0
        },
        "align": {
          type: String,
          "default": "center",
          validator: function validator(v) {
            return /^(left|center|right)$/.test(v);
          }
        },
        "bottomLine": {
          type: Boolean,
          "default": true
        }
      },
      //////////////////////////////////////////
      computed: {
        //......................................
        TopClass: function TopClass() {
          return this.getTopClass("align-".concat(this.align));
        },
        //......................................
        TheTags: function TheTags() {
          return Ti.S.toArray(this.tags);
        },
        //......................................
        hasTags: function hasTags() {
          return !_.isEmpty(this.TheTags);
        },
        //......................................
        DurationText: function DurationText() {
          if (_.isNumber(this.duration)) {
            return Ti.I18n.getf("du-in-min", {
              n: this.duration
            });
          }

          return this.duration;
        },
        //......................................
        PubDateText: function PubDateText() {
          if (this.pubDate) {
            return Ti.DateTime.format(this.pubDate, this.dateFormat);
          }
        },
        //......................................
        hasInfo: function hasInfo() {
          return this.author || this.watchCount > 0 || this.author || this.duration;
        } //......................................

      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/meta/article/web-meta-article.mjs", _M);
  })(); //============================================================
  // JOIN: web/meta/article/_com.json
  //============================================================


  Ti.Preload("ti/com/web/meta/article/_com.json", {
    "name": "web-meta-article",
    "globally": true,
    "template": "./web-meta-article.html",
    "mixins": ["./web-meta-article.mjs"]
  }); //============================================================
  // JOIN: web/meta/commodity/web-meta-commodity.html
  //============================================================

  Ti.Preload("ti/com/web/meta/commodity/web-meta-commodity.html", "<div class=\"web-meta-commodity\"\n  :class=\"TopClass\">\n  <div class=\"as-main\">\n    <!--\n      Left: Preview\n    -->\n    <div\n      v-if=\"previewImageSrc\"\n        class=\"at-left\">\n      <WebMediaImage\n        :src=\"previewImageSrc\"/>\n    </div>\n    <!--\n      Right: Information\n    -->\n    <div class=\"at-right\">\n      <!--Title-->\n      <h1>{{MetaTitle}}</h1>\n      <div class=\"as-form\">\n        <ti-form\n          v-bind=\"form\"\n          :data=\"FormData\"\n          @change=\"OnFormChanged\"/>\n      </div>\n      <div class=\"as-btns\">\n        <!--Buy Button-->\n        <a class=\"ti-btn\" @click=\"OnClickBuyNow\">{{actions.buy|i18n}}</a>\n      </div>\n    </div>\n  </div>\n</div>"); //============================================================
  // JOIN: web/meta/commodity/web-meta-commodity.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      props: {
        "meta": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "previewSrc": {
          type: String,
          "default": null
        },
        "titleKey": {
          type: String,
          "default": "title"
        },
        "buyAmount": {
          type: Number,
          "default": 1
        },
        "form": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "actions": {
          type: Object,
          "default": function _default() {
            return {
              "buy": "i18n:buy-now"
            };
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //......................................
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //......................................
        FormData: function FormData() {
          return _objectSpread({}, this.meta, {
            buyAmount: this.buyAmount
          });
        },
        //......................................
        previewImageSrc: function previewImageSrc() {
          if (this.previewSrc && this.meta) {
            return Ti.S.renderBy(this.previewSrc, this.meta);
          }
        },
        //......................................
        MetaTitle: function MetaTitle() {
          if (this.titleKey) {
            return _.get(this.meta, this.titleKey);
          }

          return "NoTitle";
        } //......................................

      },
      //////////////////////////////////////////
      methods: {
        //......................................
        OnClickBuyNow: function OnClickBuyNow() {
          this.$notify("buy:now");
        },
        //......................................
        OnFormChanged: function OnFormChanged(_ref99) {
          var name = _ref99.name,
              value = _ref99.value;
          this.$notify("meta:changed", {
            name: name,
            value: value
          });
        } //......................................

      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/meta/commodity/web-meta-commodity.mjs", _M);
  })(); //============================================================
  // JOIN: web/meta/commodity/_com.json
  //============================================================


  Ti.Preload("ti/com/web/meta/commodity/_com.json", {
    "name": "web-meta-commodity",
    "globally": true,
    "template": "./web-meta-commodity.html",
    "mixins": ["./web-meta-commodity.mjs"],
    "components": ["@com:web/meta/preview"]
  }); //============================================================
  // JOIN: web/meta/order/com/order-item/order-item.html
  //============================================================

  Ti.Preload("ti/com/web/meta/order/com/order-item/order-item.html", "<div class=\"as-row order-item\">\n  <!--Thumb/Title-->\n  <div class=\"as-cell\">\n    <div class=\"as-title\">\n      <ti-icon \n        :value=\"thumbObj\" \n        width=\".32rem\" \n        height=\".32rem\"/>\n      <span class=\"as-text\">{{title}}</span>\n    </div>\n  </div>\n  <!--price-->\n  <div class=\"as-cell as-price\">\n    <span>{{price}}</span>\n  </div>\n  <!--amount-->\n  <div class=\"as-cell as-amount\">\n    <span>{{amount}}</span>\n  </div>\n  <!--Total-->\n  <div class=\"as-cell as-fee\">\n    <em class=\"ti-num is-md\">{{feeText}}</em>\n  </div>\n</div>"); //============================================================
  // JOIN: web/meta/order/com/order-item/order-item.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      props: {
        "id": {
          type: String,
          "default": null
        },
        "thumb": {
          type: String,
          "default": null
        },
        "src": {
          type: String,
          "default": "/api/thumb?id:${id}"
        },
        "dftIcon": {
          type: String,
          "default": "fas-cube"
        },
        "title": {
          type: String,
          "default": null
        },
        "price": {
          type: Number,
          "default": 1
        },
        "currency": {
          type: String,
          "default": "RMB"
        },
        "amount": {
          type: Number,
          "default": 1
        }
      },
      //////////////////////////////////////////
      computed: {
        //......................................
        thumbObj: function thumbObj() {
          if (this.thumb) {
            var imgSrc = Ti.S.renderBy(this.src, this);
            return {
              type: "image",
              value: imgSrc
            };
          }

          return this.dftIcon;
        },
        //......................................
        fee: function fee() {
          return Ti.WWW.evalFee(this);
        },
        //......................................
        feeText: function feeText() {
          return Ti.WWW.feeText(this.fee, this.currency);
        } //......................................

      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/meta/order/com/order-item/order-item.mjs", _M);
  })(); //============================================================
  // JOIN: web/meta/order/com/order-item/_com.json
  //============================================================


  Ti.Preload("ti/com/web/meta/order/com/order-item/_com.json", {
    "name": "order-item",
    "globally": false,
    "template": "./order-item.html",
    "mixins": ["./order-item.mjs"]
  }); //============================================================
  // JOIN: web/meta/order/web-meta-order.html
  //============================================================

  Ti.Preload("ti/com/web/meta/order/web-meta-order.html", "<div class=\"web-meta-order\"\n  :class=\"TopClass\">\n  <!--\n    Head\uFF1A Status\n  -->\n  <div class=\"as-or-box is-head\">\n    <!--\n      Left: ID/status\n    -->\n    <div class=\"at-left is-status\">\n      <!--ID-->\n      <div class=\"as-or-id\">\n        <span>{{'order-k-id'|i18n}}:</span>\n        <em>{{OrderId}}</em>\n      </div>\n      <!--Status-->\n      <div class=\"as-or-st\">\n        <span :class=\"OrderStatus\">{{OrderStatus|i18n}}</span>\n      </div>\n    </div>\n    <!--\n      Right: Timestamp\n    -->\n    <div class=\"at-right is-timestamp\">\n      <div\n        v-for=\"it in Timestamps\"\n          :class=\"it.className\">\n          <!--Item-->\n          <template v-if=\"'item' == it.type\">\n            <ti-icon :value=\"it.icon\"/>\n            <div class=\"as-t-title\">{{it.title|i18n}}</div>\n            <div class=\"as-t-date\">{{it.dateText}}</div>\n            <div class=\"as-t-time\">{{it.timeText}}</div>\n          </template>\n          <!--Line-->\n          <template v-else>\n            <ti-icon :value=\"it.icon\"/>\n          </template>\n      </div>\n    </div>\n  </div>\n  <!--\n    TODO shipping address & physical distribution\n  -->\n  <!--\n    Product list\n  -->\n  <div class=\"as-or-box is-products\">\n    <table>\n      <thead>\n        <tr>\n          <th>{{'order-k-pro-title'|i18n}}</th>\n          <th>{{'order-k-pro-price'|i18n}}</th>\n          <th>{{'order-k-pro-amount'|i18n}}</th>\n          <th>{{'order-k-pro-subtotal'|i18n}}</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr\n          v-for=\"it in Products\"\n            class=\"as-pro-it\">\n            <!--Title-->\n            <td class=\"as-pro-title\">\n              <a \n                :href=\"it.href\"\n                @click.left.prevent=\"OnClickProduct(it)\"><img :src=\"it.src\"/></a>\n              <a \n                :href=\"it.href\"\n                @click.left.prevent=\"OnClickProduct(it)\">{{it.title}}</a>\n            </td>\n            <!--Price-->\n            <td class=\"as-price\">{{CurrencyChar}}{{it.price}}</td>\n            <!--Amount-->\n            <td class=\"as-amount\">{{it.amount}}</td>\n            <!--Subtotal-->\n            <td class=\"as-subtotal\">{{CurrencyChar}}{{it.subtotal}}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <!--\n    Summary\n  -->\n  <div class=\"as-or-box is-summary\">\n    <table>\n      <tr class=\"as-sum-price\">\n        <td class=\"as-s-key\">{{'order-k-price'|i18n}}:</td>\n        <td class=\"as-s-val\">{{CurrencyChar}}{{Order.price}}</td>\n      </tr>\n      <tr class=\"as-sum-fee\">\n        <td class=\"as-s-key\">{{'order-k-fee'|i18n}}:</td>\n        <td class=\"as-s-val\">{{CurrencyChar}}{{Order.fee}}</td>\n      </tr>\n    </table>\n  </div>\n</div>"); //============================================================
  // JOIN: web/meta/order/web-meta-order.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////
      props: {
        "value": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "proThumbSrc": {
          type: String,
          "default": undefined
        },
        "proHref": {
          type: String,
          "default": undefined
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass("is-".concat(this.OrderStatus));
        },
        //--------------------------------------
        Order: function Order() {
          return this.value || {};
        },
        //--------------------------------------
        OrderId: function OrderId() {
          var orId = this.Order.id;

          if (orId) {
            var pos = orId.indexOf(':');

            if (pos > 0) {
              return _.trim(orId.substring(pos + 1));
            }

            return orId;
          }

          return '- unknown -';
        },
        //--------------------------------------
        OrderStatus: function OrderStatus() {
          return "or-st-".concat(_.toLower(this.Order.or_st));
        },
        //--------------------------------------
        CurrencyChar: function CurrencyChar() {
          return Ti.Bank.getCurrencyChar(this.Order.currency || "RMB");
        },
        //--------------------------------------
        Products: function Products() {
          var _this188 = this;

          var list = [];

          _.forEach(this.value.products, function (it) {
            var pro = _objectSpread({}, it);

            if (_this188.proThumbSrc) {
              pro.src = Ti.S.renderBy(_this188.proThumbSrc, it);
            }

            if (_this188.proHref) {
              pro.href = Ti.S.renderBy(_this188.proHref, it);
            }

            pro.subtotal = Ti.Num.precise(it.price * it.amount);
            list.push(pro);
          });

          return list;
        },
        //--------------------------------------
        Timestamps: function Timestamps() {
          var list = [];
          list.push(this.genTimestampItem("fas-file-invoice-dollar", "i18n:or-st-nw", this.Order.ct));
          list.push(this.genTimestampLine(this.Order.ok_at));
          list.push(this.genTimestampItem("far-credit-card", "i18n:or-st-ok", this.Order.ok_at));
          list.push(this.genTimestampLine(this.Order.sp_at));
          list.push(this.genTimestampItem("fas-shipping-fast", "i18n:or-st-sp", this.Order.sp_at));
          list.push(this.genTimestampLine(this.Order.dn_at));
          list.push(this.genTimestampItem("fas-clipboard-check", "i18n:or-st-dn", this.Order.dn_at, true));
          return list;
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnClickProduct: function OnClickProduct(_ref100) {
          var id = _ref100.id;
          this.$notify("open:product", id);
        },
        //--------------------------------------
        genTimestampItem: function genTimestampItem(icon, title, t) {
          var atLast = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
          var it = {
            type: "item",
            icon: icon,
            title: title,
            time: t
          };
          var isOn = t && t > 0;
          it.className = {
            "is-item": true,
            "is-on": isOn,
            "is-off": !isOn,
            "at-last": atLast
          };

          if (isOn) {
            it.dateText = Ti.DateTime.format(t, "yyyy-MM-dd");
            it.timeText = Ti.DateTime.format(t, "HH:mm:ss");
          }

          return it;
        },
        //--------------------------------------
        genTimestampLine: function genTimestampLine(t) {
          var isOn = t && t > 0;
          return {
            type: "line",
            isOn: isOn,
            icon: isOn ? "fas-chevron-right" : "fas-circle",
            className: {
              "is-line": true,
              "is-on": isOn,
              "is-off": !isOn
            }
          };
        } //--------------------------------------

      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/meta/order/web-meta-order.mjs", _M);
  })(); //============================================================
  // JOIN: web/meta/order/_com.json
  //============================================================


  Ti.Preload("ti/com/web/meta/order/_com.json", {
    "name": "web-meta-order",
    "globally": true,
    "template": "./web-meta-order.html",
    "mixins": ["./web-meta-order.mjs"],
    "components": ["./com/order-item"]
  }); //============================================================
  // JOIN: web/meta/preview/web-meta-preview.html
  //============================================================

  Ti.Preload("ti/com/web/meta/preview/web-meta-preview.html", "<div class=\"ti-web-preview ti-fill-parent\">\n  <!--\n    Top: Image\n  -->\n  <div class=\"as-preview\">\n    <ti-icon value=\"zmdi-image\"/>\n  </div>\n  <!--\n    Bottom: List\n  -->\n  \n</div>"); //============================================================
  // JOIN: web/meta/preview/web-meta-preview.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      /////////////////////////////////////////
      props: {
        "logo": {
          type: [String, Object],
          "default": "zmdi-chevron-down"
        },
        "brief": {
          type: String,
          "default": null
        },
        "copyright": {
          type: String,
          "default": null
        }
      },
      //////////////////////////////////////////
      computed: {} //......................................
      //////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/meta/preview/web-meta-preview.mjs", _M);
  })(); //============================================================
  // JOIN: web/meta/preview/_com.json
  //============================================================


  Ti.Preload("ti/com/web/meta/preview/_com.json", {
    "name": "web-meta-preview",
    "globally": true,
    "template": "./web-meta-preview.html",
    "mixins": ["./web-meta-preview.mjs"]
  }); //============================================================
  // JOIN: web/nav/columns/nav-columns.html
  //============================================================

  Ti.Preload("ti/com/web/nav/columns/nav-columns.html", "<nav class=\"web-nav-columns\"\n  :class=\"TopClass\">\n  <!--=======================================-->\n  <div v-for=\"it in TheItems\"\n    class=\"as-column\">\n    <div class=\"item-self\">\n      <a\n        :key=\"it.index\"\n        class=\"link-item\"\n        :class=\"it.className\"\n        :href=\"it.href\"\n        :target=\"it.target\"\n        @click.left=\"OnClickLink($event, it)\">\n        <!--Icon-->\n        <ti-icon\n          v-if=\"it.icon\"\n            :value=\"it.icon\"/>\n        <!--Text-->\n        <span\n          v-if=\"it.title\"\n            class=\"as-text\">{{it.title}}</span>\n        </a>\n      </div>\n      <!--===================================-->\n      <!--SubItems-->\n      <div\n        v-if=\"it.items\"\n          class=\"sub-items\">\n          <div class=\"items-con\">\n            <a\n              v-for=\"sub in it.items\"\n                :key=\"sub.index\"\n                class=\"sub-item\"\n                :class=\"sub.className\"\n                :href=\"sub.href\"\n                :target=\"sub.target\"\n                @click.left=\"OnClickLink($event, sub)\">\n                <!--Icon-->\n                <ti-icon\n                  v-if=\"sub.icon\"\n                    :value=\"sub.icon\"/>\n                <!--Text-->\n                <span\n                  v-if=\"sub.title\"\n                    class=\"as-text\">{{sub.title}}</span>\n            </a>\n          </div>\n      </div>\n      <!--===================================-->\n  </div>\n  <!--=======================================-->\n</nav>"); //============================================================
  // JOIN: web/nav/columns/nav-columns.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      props: {
        "items": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "path": {
          type: String,
          "default": null
        },
        "align": {
          type: String,
          "default": "center",
          validator: function validator(v) {
            return /^(left|center|right)$/.test(v);
          }
        },
        "spacing": {
          type: String,
          validator: function validator(v) {
            return /^(tiny|comfy|wide)$/.test(v);
          }
        },
        "border": {
          type: String,
          "default": "solid",
          validator: function validator(v) {
            return /^(none|solid|dashed|dotted)$/.test(v);
          }
        }
      },
      /////////////////////////////////////////
      computed: {
        //------------------------------------
        TopClass: function TopClass() {
          var _this189 = this;

          return this.getTopClass("is-spacing-".concat(this.spacing), "is-align-".concat(this.align), function () {
            if (_this189.border) return "is-border-".concat(_this189.border);
          });
        },
        //------------------------------------
        TheItems: function TheItems() {
          return this.evalItems(this.items);
        } //------------------------------------

      },
      /////////////////////////////////////////
      methods: {
        //------------------------------------
        OnClickLink: function OnClickLink(evt) {
          var _ref101 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
              type = _ref101.type,
              value = _ref101.value,
              params = _ref101.params;

          if (/^(page|action)$/.test(type)) {
            evt.preventDefault(); //console.log("onClickLink", "nav:to", {type,value,params})

            this.$notify("nav:to", {
              type: type,
              value: value,
              params: params
            });
          }
        },
        //------------------------------------
        evalItems: function evalItems(items) {
          var _this190 = this;

          // Explain first
          items = Ti.WWW.explainNavigation(items, this.base); // The Eval

          var list = [];

          _.forEach(items, function (it, index) {
            //................................
            var li = _.pick(it, ["icon", "title", "type", "params", "href", "target", "value"]); //................................


            li.index = index; //................................

            if (_this190.path) {
              li.highlight = it.highlightBy(_this190.path);
            } //................................


            var hasHref = li.href ? true : false;
            li.className = {
              "has-href": hasHref,
              "nil-href": !hasHref,
              "is-highlight": li.highlight,
              "is-normal": !li.highlight
            }; //................................

            if (it.items) {
              li.items = _this190.evalItems(it.items);
            } //................................


            list.push(li); //................................
          });

          return list;
        } //------------------------------------

      } /////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/nav/columns/nav-columns.mjs", _M);
  })(); //============================================================
  // JOIN: web/nav/columns/_com.json
  //============================================================


  Ti.Preload("ti/com/web/nav/columns/_com.json", {
    "name": "web-nav-columns",
    "globally": true,
    "template": "./nav-columns.html",
    "mixins": ["./nav-columns.mjs"],
    "components": []
  }); //============================================================
  // JOIN: web/nav/links/nav-links.html
  //============================================================

  Ti.Preload("ti/com/web/nav/links/nav-links.html", "<nav class=\"web-nav-links\"\n  :class=\"TopClass\">\n  <!--=======================================-->\n  <a\n    v-for=\"it in TheItems\"\n      :key=\"it.index\"\n      class=\"link-item\"\n      :class=\"it.className\"\n      :href=\"it.href\"\n      :target=\"it.target\"\n      @click.left=\"OnClickLink($event, it)\"\n      @mouseenter=\"OnItemMouseEnter(it)\"\n      @mouseleave=\"OnItemMouseLeave(it)\">\n      <!--Icon-->\n      <ti-icon\n        v-if=\"it.icon\"\n          :value=\"it.icon\"/>\n      <!--Text-->\n      <span\n        v-if=\"it.title\"\n          class=\"as-text\">{{it.title}}</span>\n      <!--===================================-->\n      <!--SubItems-->\n      <div\n        v-if=\"mySubItems && mySubIndex == it.index\"\n          class=\"sub-items\">\n          <div class=\"items-con\">\n            <a\n              v-for=\"sub in mySubItems\"\n                :key=\"sub.index\"\n                class=\"sub-item\"\n                :class=\"sub.className\"\n                :href=\"sub.href\"\n                :target=\"sub.target\"\n                @click.left=\"OnClickLink($event, sub)\">\n                <!--Icon-->\n                <ti-icon\n                  v-if=\"sub.icon\"\n                    :value=\"sub.icon\"/>\n                <!--Text-->\n                <span\n                  v-if=\"sub.title\"\n                    class=\"as-text\">{{sub.title}}</span>\n            </a>\n          </div>\n      </div>\n      <!--===================================-->\n  </a>\n  <!--=======================================-->\n</nav>"); //============================================================
  // JOIN: web/nav/links/nav-links.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      data: function data() {
        return {
          mySubIndex: -1,
          mySubItems: null
        };
      },
      /////////////////////////////////////////
      props: {
        "base": {
          type: String,
          "default": "/"
        },
        "items": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        // for highlight
        "path": {
          type: String,
          "default": undefined
        },
        // for highlight
        "params": {
          type: Object,
          "default": undefined
        },
        "align": {
          type: String,
          "default": "left",
          validator: function validator(v) {
            return /^(left|center|right)$/.test(v);
          }
        },
        "spacing": {
          type: String,
          validator: function validator(v) {
            return /^(tiny|comfy|wide)$/.test(v);
          }
        },
        "border": {
          type: String,
          "default": "solid",
          validator: function validator(v) {
            return /^(none|solid|dashed|dotted)$/.test(v);
          }
        }
      },
      /////////////////////////////////////////
      computed: {
        //------------------------------------
        TopClass: function TopClass() {
          var _this191 = this;

          return this.getTopClass("is-spacing-".concat(this.spacing), "is-align-".concat(this.align), function () {
            if (_this191.border) return "is-border-".concat(_this191.border);
          });
        },
        //------------------------------------
        TheItems: function TheItems() {
          return this.evalItems(this.items);
        } //------------------------------------

      },
      /////////////////////////////////////////
      methods: {
        //------------------------------------
        OnClickLink: function OnClickLink(evt) {
          var _ref102 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
              type = _ref102.type,
              value = _ref102.value,
              params = _ref102.params;

          if (/^(page|action)$/.test(type)) {
            evt.preventDefault();

            if (value) {
              //console.log("onClickLink", "nav:to", {type,value,params})
              this.$notify("nav:to", {
                type: type,
                value: value,
                params: params
              });
            }
          }
        },
        //------------------------------------
        OnItemMouseEnter: function OnItemMouseEnter(_ref103) {
          var _this192 = this;

          var index = _ref103.index,
              items = _ref103.items;

          // Guard
          if (_.isEmpty(items)) {
            this.mySubIndex = -1;
            this.mySubItems = null;
            return;
          } // Eval sub items


          this.mySubItems = this.evalItems(items);
          this.mySubIndex = index; // Dock it

          this.$nextTick(function () {
            return _this192.dockSub();
          });
        },
        //------------------------------------
        OnItemMouseLeave: function OnItemMouseLeave(_ref104) {
          var index = _ref104.index;

          if (this.mySubIndex == index) {
            this.mySubIndex = -1;
            this.mySubItems = null;
          }
        },
        //------------------------------------
        dockSub: function dockSub() {
          var $sub = Ti.Dom.find(".sub-items", this.$el); // Guard

          if (!$sub) {
            return;
          } // Ready to dock


          var $an = $sub.parentNode;
          var rAn = Ti.Rects.createBy($an);
          var rSub = Ti.Rects.createBy($sub);
          var css = Ti.Css.toStyle({
            top: rAn.height,
            left: (rAn.width - rSub.width) / 2
          });
          Ti.Dom.setStyle($sub, css);
        },
        //------------------------------------
        evalItems: function evalItems(items) {
          var _this193 = this;

          // Explain first
          items = Ti.WWW.explainNavigation(items, this.base); // The Eval

          var list = [];

          _.forEach(items, function (it, index) {
            //................................
            var li = _.pick(it, ["icon", "title", "type", "params", "href", "target", "value", "items"]); //................................


            li.index = index; //................................

            if (_this193.path) {
              li.highlight = it.highlightBy(_this193.path, _this193.params);
            } //................................


            var hasHref = li.href ? true : false;
            li.className = {
              "has-href": hasHref,
              "nil-href": !hasHref,
              "is-highlight": li.highlight,
              "is-normal": !li.highlight
            }; //................................

            list.push(li); //................................
          });

          return list;
        } //------------------------------------

      } /////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/nav/links/nav-links.mjs", _M);
  })(); //============================================================
  // JOIN: web/nav/links/_com.json
  //============================================================


  Ti.Preload("ti/com/web/nav/links/_com.json", {
    "name": "web-nav-links",
    "globally": true,
    "template": "./nav-links.html",
    "mixins": ["./nav-links.mjs"],
    "components": []
  }); //============================================================
  // JOIN: web/nav/side/com/side-item/side-item.html
  //============================================================

  Ti.Preload("ti/com/web/nav/side/com/side-item/side-item.html", "<div class=\"side-item\" \n  :class=\"TopClass\">\n  <!--\n    Self Info\n  -->\n  <div class=\"it-info\" >\n    <!--Icon-->\n    <span\n      v-if=\"icon\"\n        class=\"it-info-icon\">\n        <ti-icon :value=\"icon\"/>\n    </span>\n    <!--Group-->\n    <span\n      v-if=\"isGroup\"\n        class=\"it-info-text\">{{title|i18n}}</span>\n    <!--Item-->\n    <a\n      v-else\n        class=\"it-info-text\"\n        :href=\"href\"\n        @click.stop.prevent=\"OnClickItemInfo\">{{title|i18n}}</a>\n  </div>\n  <!--\n    Sub Container\n  -->\n  <div \n    v-if=\"hasSubItems\"\n      class=\"it-con\">\n      <SideItem\n        v-for=\"subIt in items\"\n          :key=\"subIt.key\"\n          v-bind=\"subIt\"/>\n  </div>\n</div>"); //============================================================
  // JOIN: web/nav/side/com/side-item/side-item.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////////////////
      props: {
        "depth": {
          type: Number,
          "default": 0
        },
        "icon": {
          type: [String, Object],
          "default": undefined
        },
        "title": {
          type: String,
          "default": undefined
        },
        "page": {
          type: String,
          "default": undefined
        },
        "href": {
          type: String,
          "default": undefined
        },
        "items": {
          type: Array,
          "default": undefined
        }
      },
      ///////////////////////////////////////////////////////
      computed: {
        //---------------------------------------------------
        TopClass: function TopClass() {
          return {
            "is-top": this.isTop,
            "is-sub": !this.isTop,
            "is-group": this.isGroup,
            "is-item": !this.isGroup,
            "is-highlight": this.isHighlight
          };
        },
        //---------------------------------------------------
        isTop: function isTop() {
          return this.depth == 0;
        },
        //---------------------------------------------------
        isGroup: function isGroup() {
          return _.isArray(this.items);
        },
        //---------------------------------------------------
        isHighlight: function isHighlight() {
          return this.id && this.id == this.highlightId;
        },
        //---------------------------------------------------
        hasSubItems: function hasSubItems() {
          return !_.isEmpty(this.items);
        } //---------------------------------------------------

      },
      ///////////////////////////////////////////////////////
      methods: {
        //---------------------------------------------------
        OnClickItemInfo: function OnClickItemInfo() {
          this.$notify("nav:to", {
            value: this.page
          });
        } //---------------------------------------------------

      } ///////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/nav/side/com/side-item/side-item.mjs", _M);
  })(); //============================================================
  // JOIN: web/nav/side/com/side-item/_com.json
  //============================================================


  Ti.Preload("ti/com/web/nav/side/com/side-item/_com.json", {
    "name": "side-item",
    "template": "./side-item.html",
    "mixins": ["./side-item.mjs"]
  }); //============================================================
  // JOIN: web/nav/side/web-nav-side.html
  //============================================================

  Ti.Preload("ti/com/web/nav/side/web-nav-side.html", "<div class=\"web-nav-side\"\n  :class=\"TopClass\"\n  v-ti-activable>\n  <SideItem\n    v-for=\"it in TheItems\"\n      :key=\"it.key\"\n        v-bind=\"it\"/>\n</div>"); //============================================================
  // JOIN: web/nav/side/web-nav-side.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      props: {
        "base": {
          type: String,
          "default": undefined
        },
        "items": {
          type: Array,
          "default": null
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //-------------------------------------
        TheItems: function TheItems() {
          var _this194 = this;

          var list = [];

          _.forEach(this.items, function (it, index) {
            list.push(_this194.evalItem(it, index, 0));
          });

          return list;
        } //-------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //-------------------------------------
        evalItem: function evalItem() {
          var _this195 = this;

          var it = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
          // Children
          var items = undefined;

          if (_.isArray(it.items)) {
            items = [];

            _.forEach(it.items, function (subIt, subIndex) {
              items.push(_this195.evalItem(subIt, subIndex, depth + 1));
            });

            it.items = items;
          } // href


          var href = it.href || it.page;

          if (this.base && !/^(https?)?\/\/?/.test(href)) {
            href = Ti.Util.appendPath(this.base, href);
          } //console.log("href", href)
          // Self


          return _objectSpread({}, it, {
            index: index,
            href: href,
            depth: depth,
            key: "it-".concat(index)
          });
        } //-------------------------------------

      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/nav/side/web-nav-side.mjs", _M);
  })(); //============================================================
  // JOIN: web/nav/side/_com.json
  //============================================================


  Ti.Preload("ti/com/web/nav/side/_com.json", {
    "name": "web-nav-side",
    "globally": true,
    "template": "./web-nav-side.html",
    "mixins": ["./web-nav-side.mjs"],
    "components": ["./com/side-item"]
  }); //============================================================
  // JOIN: web/pay/checkout/web-pay-checkout-props.mjs
  //============================================================

  (function () {
    var _M = {
      "tipIcon": {
        type: String,
        "default": "fas-clipboard-check"
      },
      "tipText": {
        type: String,
        "default": "i18n:pay-checkout-tip"
      },

      /**
       * Items Array should like:
       * {
       *   id: "xxx",      // Item ID
       *   title: "xxx",   // Item display name
       *   price: 34,      // Item price
       *   amount: 2,      // Buy number
       *   thumbSrc        // [optional] Item preview src
       *   href            // [optional] Item link
       * }
       */
      "items": {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      "currency": {
        type: String,
        "default": "RMB"
      },
      "orderType": {
        type: String,
        "default": "A"
      },
      "addresses": {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      // The country map
      "countries": {
        type: Object,
        "default": undefined
      }
    };
    Ti.Preload("ti/com/web/pay/checkout/web-pay-checkout-props.mjs", _M);
  })(); //============================================================
  // JOIN: web/pay/checkout/web-pay-checkout.html
  //============================================================


  Ti.Preload("ti/com/web/pay/checkout/web-pay-checkout.html", "<div class=\"web-pay-checkout\"\n  :class=\"TopClass\">\n  <!--\n    Blank\n  -->\n  <div \n    v-if=\"isEmpty\"\n      class=\"as-empty\">\n    <ti-loading\n      class=\"as-big\"\n      icon=\"fas-shopping-basket\"\n      text=\"You should pick something to checkout!\"/>\n  </div>\n  <!--\n    List table\n  -->\n  <template v-else>\n    <!--\n      Tip\n    -->\n    <div class=\"as-tip\">\n      <ti-icon :value=\"tipIcon\"/>\n      <span>{{tipText | i18n}}</span>\n    </div>\n    <!--\n      List\n    -->\n    <div class=\"as-list\">\n      <!--Show product in loop-->\n      <table>\n        <thead>\n          <tr>\n            <th><span>{{'pay-checkout-it-name'     | i18n}}</span></th>\n            <th>\n              <u>{{CurrencyChar}}</u>\n              <span>{{'pay-checkout-it-price'      | i18n}}</span>\n            </th>\n            <th><span>{{'pay-checkout-it-amount'   | i18n}}</span></th>\n            <th><span>{{'pay-checkout-it-subtotal' | i18n}}</span></th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr\n            v-for=\"it of TheItems\"\n              class=\"as-item\">\n              <td class=\"it-thumb\">\n                <a\n                  v-if=\"it.thumbSrc\" \n                    @click.prevent=\"OnShowProduct(it)\" \n                    :href=\"it.href\">\n                    <img :src=\"it.thumbSrc\"/>\n                </a>\n                <div class=\"it-title\">\n                  <a :href=\"it.href\"\n                    @click.prevent=\"OnShowProduct(it)\">{{it.title}}</a>\n                </div>\n              </td>\n              <td class=\"it-price\">\n                <em>{{CurrencyChar}}{{it.price}}</em>\n              </td>\n              <td class=\"it-amount\">\n                <span>{{it.amount}}</span>\n              </td>\n              <td class=\"it-subtotal\">\n                <em>{{CurrencyChar}}{{it.subtotal}}</em>\n              </td>\n            </tr>\n          </tbody>\n      </table>\n    </div> <!--~as-list-->\n    <!--\n      Summary\n    -->\n    <div class=\"as-summary\">\n      <div class=\"at-left\">\n        <!--Maybe Coupon here-->\n      </div>\n      <div class=\"at-right\">\n        <div class=\"as-total\">\n          <span>Total:</span>\n          <em>{{CurrencyChar}}{{TotalFee}}</em>\n        </div>\n      </div>\n    </div>\n    <!--\n      Address\n    -->\n    <div\n      v-if=\"'A' == orderType\"\n        class=\"as-address\">\n        <!--\n          Current Address\n        -->\n        <div class=\"as-addr-current\">\n          <WebTileAddress \n            :value=\"currentAddr\"\n            title=\"\u8BA2\u5355\u6536\u8D27\u5730\u5740\"\n            :countries=\"countries\"\n            :auto-highlight=\"false\"\n            :can=\"{remove:0,edit:0,default:0,choose:1,add:1}\"\n            :blank-as=\"{text:'i18n:order-shipaddr-nil',icon:'im-location'}\"\n            @choose=\"OnChooseAddr\"\n            @add=\"OnAddAddr\"/>\n        </div>\n        <!--\n          Address can-list\n        -->\n        <transition name=\"ti-trans-fade\">\n          <div\n            v-if=\"showAddrCanList\"\n              class=\"as-can-list\">\n              <WebShelfList\n                v-bind=\"AddrCanList\"\n                @select=\"OnSelectAddr\"/>\n              <div\n                class=\"as-can-hide\">\n                <a @click.left=\"OnHideAddrCanList\">\n                  <i class=\"fas fa-angle-double-up\"></i><br>\n                  <span>{{'i18n:close'|i18n}}</span></a>\n                </div>\n          </div>\n        </transition>\n    </div>\n  </template>\n</div>"); //============================================================
  // JOIN: web/pay/checkout/web-pay-checkout.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////
      data: function data() {
        return {
          showAddrCanList: false
        };
      },
      //////////////////////////////////////////
      props: {
        "currentAddr": {
          type: Object,
          "default": undefined
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //--------------------------------------
        isEmpty: function isEmpty() {
          return _.isEmpty(this.items);
        },
        //--------------------------------------
        CurrencyChar: function CurrencyChar() {
          return Ti.Bank.getCurrencyChar(this.currency);
        },
        //--------------------------------------
        TheItems: function TheItems() {
          var list = [];

          _.forEach(this.items, function (it) {
            list.push(_objectSpread({}, it, {
              subtotal: Ti.Num.precise(it.price * it.amount)
            }));
          });

          return list;
        },
        //--------------------------------------
        TotalFee: function TotalFee() {
          var fee = 0;

          _.forEach(this.TheItems, function (it) {
            return fee += it.price * it.amount;
          });

          return Ti.Num.precise(fee);
        },
        //--------------------------------------
        AddrCanList: function AddrCanList() {
          return {
            data: this.addresses,
            blankAs: {
              "className": "ti-fill-parent",
              "icon": "fas-map",
              "text": "i18n:address-empty-list"
            },
            comType: "WebTileAddress",
            comConf: {
              value: "=..",
              countries: this.countries,
              can: {
                remove: false,
                edit: false,
                select: false,
                "default": false
              },
              selectable: true,
              currentId: _.get(this.currentAddr, "id")
            }
          };
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnShowProduct: function OnShowProduct() {
          var _ref105 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              id = _ref105.id;

          this.$notify("show:product", id);
        },
        //--------------------------------------
        OnChooseAddr: function OnChooseAddr() {
          this.showAddrCanList = true;
        },
        //--------------------------------------
        OnHideAddrCanList: function OnHideAddrCanList() {
          this.showAddrCanList = false;
        },
        //--------------------------------------
        OnAddAddr: function OnAddAddr() {
          this.$notify("add:address");
        },
        //--------------------------------------
        OnSelectAddr: function OnSelectAddr(addr) {
          this.showAddrCanList = false;
          this.$emit("change", {
            address: addr
          });
        } //--------------------------------------

      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/pay/checkout/web-pay-checkout.mjs", _M);
  })(); //============================================================
  // JOIN: web/pay/checkout/_com.json
  //============================================================


  Ti.Preload("ti/com/web/pay/checkout/_com.json", {
    "name": "web-pay-checkout",
    "globally": true,
    "template": "./web-pay-checkout.html",
    "props": "./web-pay-checkout-props.mjs",
    "mixins": ["./web-pay-checkout.mjs"]
  }); //============================================================
  // JOIN: web/pay/choose/web-pay-choose-props.mjs
  //============================================================

  (function () {
    var _M = {
      "options": {
        type: Array,
        "default": function _default() {
          return [{
            "icon": "/gu/rs/ti/icons/png/wxpay256.png",
            "value": "wx.qrcode",
            "text": "i18n:pay-wx"
          }, {
            "icon": "/gu/rs/ti/icons/png/alipay256.png",
            "value": "zfb.qrcode",
            "text": "i18n:pay-zfb"
          }];
        }
      }
    };
    Ti.Preload("ti/com/web/pay/choose/web-pay-choose-props.mjs", _M);
  })(); //============================================================
  // JOIN: web/pay/choose/web-pay-choose.html
  //============================================================


  Ti.Preload("ti/com/web/pay/choose/web-pay-choose.html", "<div class=\"web-pay-choose\"\n  :class=\"TopClass\">\n  <!--Title-->\n  <div class=\"as-title\">{{'pay-step-choose-tip'|i18n}}</div>\n  <!--Choosing-->\n  <div class=\"as-options\">\n    <div\n      v-for=\"op in options\"\n        class=\"as-pay-type\"\n        :class=\"getOptionClass(op)\"\n        @click.left=\"OnChooseOption(op)\">\n        <ti-icon :value=\"op.icon\"/>\n        <div class=\"as-text\">{{op.text | i18n}}</div>\n    </div>\n  </div>\n  <div class=\"as-tip\">{{PayTypeText}}</div>\n</div>"); //============================================================
  // JOIN: web/pay/choose/web-pay-choose.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////////////
      props: {
        "value": {
          type: String,
          "default": null
        }
      },
      //////////////////////////////////////////////////
      computed: {
        //----------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //----------------------------------------------
        hasPayType: function hasPayType() {
          return Ti.Bank.isValidPayType(this.value);
        },
        //----------------------------------------------
        PayTypeText: function PayTypeText() {
          return Ti.Bank.getPayTypeChooseI18nText(this.value, {
            text: 'pay-step-choose-tip2',
            nil: 'pay-step-choose-nil'
          });
        } //----------------------------------------------

      },
      //////////////////////////////////////////////////
      methods: {
        //----------------------------------------------
        OnChooseOption: function OnChooseOption() {
          var _ref106 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              value = _ref106.value;

          this.$emit("change", {
            payType: value
          });
        },
        //----------------------------------------------
        getOptionClass: function getOptionClass(op) {
          if (op.value == this.value) {
            return "is-enabled";
          }

          return "is-disabled";
        } //----------------------------------------------

      },
      //////////////////////////////////////////////////
      mounted: function mounted() {
        this.$notify("change:title", "pay-step-choose-title2");
      } //////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/pay/choose/web-pay-choose.mjs", _M);
  })(); //============================================================
  // JOIN: web/pay/choose/_com.json
  //============================================================


  Ti.Preload("ti/com/web/pay/choose/_com.json", {
    "name": "web-pay-choose",
    "globally": true,
    "template": "./web-pay-choose.html",
    "props": "./web-pay-choose-props.mjs",
    "mixins": ["./web-pay-choose.mjs"]
  }); //============================================================
  // JOIN: web/pay/done/web-pay-done-props.mjs
  //============================================================

  (function () {
    var _M = {
      "waitIcon": {
        type: String,
        "default": "fas-spinner fa-spin"
      },
      "waitText": {
        type: String,
        "default": "i18n:loading"
      },
      "okIcon": {
        type: String,
        "default": "im-check-mark-circle"
      },
      "okText": {
        type: String,
        "default": "i18n:pay-re-ok"
      },
      // [{icon, text, href(for newTab), path(for navTo)}]
      "okLinks": {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      "failIcon": {
        type: String,
        "default": "im-warning"
      },
      "failText": {
        type: String,
        "default": "i18n:pay-re-fail"
      },
      // [{icon, text, href(for newTab), path(for navTo)}]
      "failLinks": {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      // [{icon, text, href(for newTab), path(for navTo)}]
      "doneLinks": {
        type: Array,
        "default": function _default() {
          return [];
        }
      }
    };
    Ti.Preload("ti/com/web/pay/done/web-pay-done-props.mjs", _M);
  })(); //============================================================
  // JOIN: web/pay/done/web-pay-done.html
  //============================================================


  Ti.Preload("ti/com/web/pay/done/web-pay-done.html", "<div class=\"web-pay-done\"\n  :class=\"TopClass\">\n  <!--\n    Icon\n  -->\n  <div class=\"as-icon\"><ti-icon :value=\"TheIcon\"/></div>\n  <!--\n    Text\n  -->\n  <div class=\"as-text\">{{TheText | i18n}}</div>\n  <!--\n    errMsg\n  -->\n  <div\n    v-if=\"errMsg\" \n      class=\"as-error\">{{errMsg | i18n}}</div>\n  <!--\n    Links\n  -->\n  <div\n    v-if=\"hasLinks\"\n      class=\"as-links\">\n      <ul>\n        <li\n          v-for=\"li in TheLinks\">\n          <a\n            class=\"link-item\"\n            :href=\"li.href\"\n            @click.left.prevent=\"OnClickLink(li)\">\n            <ti-icon\n              v-if=\"li.icon\"\n                :value=\"li.icon\"/>\n            <span class=\"it-text\">{{li.text | i18n}}</span>\n          </a>\n        </li>\n      </ul>\n  </div>\n</div>"); //============================================================
  // JOIN: web/pay/done/web-pay-done.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      props: {
        "payOk": {
          type: Boolean,
          "default": undefined
        },
        "errMsg": {
          type: String,
          "default": undefined
        },
        "orderId": {
          type: String,
          "default": undefined
        }
      },
      //////////////////////////////////////////////////
      computed: {
        //----------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass({
            "is-wait": this.isWait,
            "is-ok": !this.isWait && this.payOk,
            "is-fail": !this.isWait && !this.payOk
          });
        },
        //----------------------------------------------
        isWait: function isWait() {
          return _.isUndefined(this.payOk);
        },
        //----------------------------------------------
        TheIcon: function TheIcon() {
          if (_.isUndefined(this.payOk)) {
            return this.waitIcon;
          }

          return this.payOk ? this.okIcon : this.failIcon;
        },
        //----------------------------------------------
        TheText: function TheText() {
          if (_.isUndefined(this.payOk)) {
            return this.waitText;
          }

          return this.payOk ? this.okText : this.failText;
        },
        //----------------------------------------------
        TheLinks: function TheLinks() {
          var _this196 = this;

          var list = _.cloneDeep(this.payOk ? _.concat(this.okLinks, this.doneLinks) : _.concat(this.failLinks, this.doneLinks));

          var links = [];

          _.forEach(list, function (li) {
            links.push(_.defaults(Ti.Util.explainObj(_this196, li), {
              icon: 'zmdi-chevron-right'
            }));
          });

          return links;
        },
        //----------------------------------------------
        hasLinks: function hasLinks() {
          return !_.isEmpty(this.TheLinks);
        } //----------------------------------------------

      },
      //////////////////////////////////////////////////
      methods: {
        OnClickLink: function OnClickLink() {
          var _ref107 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              path = _ref107.path,
              params = _ref107.params;

          if (path) {
            this.$notify("nav:to", {
              value: path,
              params: params
            });
          }
        }
      } //////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/pay/done/web-pay-done.mjs", _M);
  })(); //============================================================
  // JOIN: web/pay/done/_com.json
  //============================================================


  Ti.Preload("ti/com/web/pay/done/_com.json", {
    "name": "web-pay-done",
    "globally": true,
    "template": "./web-pay-done.html",
    "props": "./web-pay-done-props.mjs",
    "mixins": ["./web-pay-done.mjs"]
  }); //============================================================
  // JOIN: web/pay/proceed/web-pay-proceed-props.mjs
  //============================================================

  (function () {
    var _M = {
      "watchUser": {
        type: String,
        "default": null
      },
      "qrcodeSize": {
        type: [String, Number],
        "default": 200
      },
      "checkPaymentInterval": {
        type: Number,
        "default": 3000
      },
      "fetchOrder": {
        type: Function,
        "default": undefined
      },
      "payOrder": {
        type: Function,
        "default": undefined
      },
      "createOrder": {
        type: Function,
        "default": undefined
      },
      "checkOrder": {
        type: Function,
        "default": undefined
      },
      "returnUrl": {
        type: String,
        "default": undefined
      },
      "orderTitle": {
        type: String,
        "default": undefined
      },
      "orderType": {
        type: String,
        "default": "A"
      }
    };
    Ti.Preload("ti/com/web/pay/proceed/web-pay-proceed-props.mjs", _M);
  })(); //============================================================
  // JOIN: web/pay/proceed/web-pay-proceed.html
  //============================================================


  Ti.Preload("ti/com/web/pay/proceed/web-pay-proceed.html", "<div class=\"web-pay-proceed\">\n  <!--\n    Wait for create order\n  -->\n  <div \n    v-if=\"!hasOrder || !Payment\"\n      class=\"as-nil-order\">\n      <ti-loading\n        class=\"as-big\"\n        :text=\"OrderLoadText\"/>\n  </div>\n  <!--\n    Show payment\n  -->\n  <template\n    v-else>\n    <!--QRCODE-->\n    <div v-if=\"isQRCODE\"\n      class=\"as-main is-qrcode\">\n      <img \n        :style=\"QrcodeImageStyle\"\n        :src=\"PaymentDataAsQrcodeUrl\">\n    </div>\n    <!--IFRAME-->\n    <div v-else-if=\"isIFRAME\"\n      class=\"as-main is-iframe\">\n      <iframe \n        frameborder=\"0\" \n        scrolling=\"no\"\n        :src=\"PaymentData\"></iframe>\n    </div>\n    <!--\n      JSON\n    -->\n    <div v-else-if=\"isJSON\"\n      class=\"as-main is-json\">\n      <!--The self/approve/update/capture links for PayPal-->\n      <div\n        v-if=\"'paypal' == payType\"\n          class=\"by-paypal\">\n        <!--Logo-->\n        <div class=\"paypal-logo\">\n          <a \n            :href=\"myPaypalUrl\"\n            target=\"_blank\"><i class=\"fab fa-paypal\"></i></a>\n        </div>\n        <div class=\"paypal-tip\">{{'paypal-approve-tip'|i18n}}</div>\n      </div> <!--End PayPal-->\n    </div>\n    <!--\n      Others\n    -->\n    <div\n      v-else\n        class=\"as-main\">{{myOrder}}</div>\n    <!--\n      Check Button\n    -->\n    <div class=\"as-check\">\n      <div class=\"ti-btn is-huge\"\n        @click.left=\"OnClickCheckBtn\">\n        <ti-icon class=\"as-icon\" :value=\"CheckBtnIcon\"/>\n        <div class=\"as-text\">{{CheckBtnText|i18n}}</div>\n      </div>\n    </div>\n  </template>\n</div>"); //============================================================
  // JOIN: web/pay/proceed/web-pay-proceed.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////////////
      data: function data() {
        return {
          __WS: null,
          // The handle of websocket
          myOrder: null,
          isChecking: false,
          myPaypalUrl: ""
        };
      },
      //////////////////////////////////////////////////
      props: {
        "payType": {
          type: String,
          "default": null
        },
        "items": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "orderId": {
          type: String,
          "default": undefined
        },
        "payOk": {
          type: Boolean,
          "default": undefined
        },
        "currency": {
          type: String,
          "default": "RMB"
        },
        "address": {
          type: Object,
          "default": undefined
        }
      },
      //////////////////////////////////////////////////
      computed: {
        TopClass: function TopClass() {
          return this.getTopClass({
            "has-paytype": this.hasPayType,
            "nil-paytype": !this.hasPayType
          }, "is-".concat(this.PayTypeName));
        },
        //----------------------------------------------
        hasPayType: function hasPayType() {
          return Ti.Bank.isValidPayType(this.payType);
        },
        //----------------------------------------------
        PayTypeName: function PayTypeName() {
          if (_.isString(this.payType)) {
            return this.payType.replace(".", "-");
          }
        },
        //----------------------------------------------
        PayTypeText: function PayTypeText() {
          return Ti.Bank.getPayTypeChooseI18nText(this.payType, {
            text: 'pay-step-proceed-tip',
            nil: 'pay-step-proceed-nil'
          });
        },
        //----------------------------------------------
        OrderLoadText: function OrderLoadText() {
          return this.orderId ? "pay-step-proceed-fetch-order" : "pay-step-proceed-create-order";
        },
        //----------------------------------------------
        hasOrder: function hasOrder() {
          return !_.isEmpty(this.myOrder);
        },
        //----------------------------------------------
        Payment: function Payment() {
          return _.get(this.myOrder, "pay_re");
        },
        //----------------------------------------------
        PaymentId: function PaymentId() {
          return _.get(this.Payment, "payObjId");
        },
        //----------------------------------------------
        PaymentStatus: function PaymentStatus() {
          return _.get(this.Payment, "status");
        },
        //----------------------------------------------
        PaymentData: function PaymentData() {
          return _.get(this.Payment, "data");
        },
        //----------------------------------------------
        PaymentDataType: function PaymentDataType() {
          return _.get(this.Payment, "dataType");
        },
        //----------------------------------------------
        isPaymentCreated: function isPaymentCreated() {
          return _.get(this.Payment, "payObjId") ? true : false;
        },
        //----------------------------------------------
        isQRCODE: function isQRCODE() {
          return "QRCODE" == this.PaymentDataType;
        },
        //----------------------------------------------
        isIFRAME: function isIFRAME() {
          return "IFRAME" == this.PaymentDataType;
        },
        //----------------------------------------------
        isLINK: function isLINK() {
          return "LINK" == this.PaymentDataType;
        },
        //----------------------------------------------
        isJSON: function isJSON() {
          return "JSON" == this.PaymentDataType;
        },
        //----------------------------------------------
        isTEXT: function isTEXT() {
          return "TEXT" == this.PaymentDataType;
        },
        //----------------------------------------------
        PaymentDataAsQrcodeUrl: function PaymentDataAsQrcodeUrl() {
          return "/gu/qrcode?d=".concat(this.PaymentData, "&s=").concat(this.qrcodeSize, "&_=").concat(Date.now());
        },
        //----------------------------------------------
        PayPalLinksMap: function PayPalLinksMap() {
          var map = {};

          if (this.hasOrder && "paypal" == this.myOrder.pay_tp) {
            _.forEach(this.PaymentData.links, function (li) {
              map[li.rel] = li;
            });
          }

          return map;
        },
        //----------------------------------------------
        QrcodeImageStyle: function QrcodeImageStyle() {
          return Ti.Css.toStyleRem100({
            width: this.qrcodeSize,
            height: this.qrcodeSize
          });
        },
        //----------------------------------------------
        CheckBtnIcon: function CheckBtnIcon() {
          if (this.isChecking) {
            return "fas-spinner fa-spin";
          }

          return "zmdi-assignment-check";
        },
        //----------------------------------------------
        CheckBtnText: function CheckBtnText() {
          if (this.isChecking) return "i18n:pay-proceed-ing";
          return "i18n:pay-proceed-check";
        } //----------------------------------------------

      },
      //////////////////////////////////////////////////
      methods: {
        //----------------------------------------------
        OnClickCheckBtn: function OnClickCheckBtn() {
          var _this197 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee94() {
            return regeneratorRuntime.wrap(function _callee94$(_context94) {
              while (1) {
                switch (_context94.prev = _context94.next) {
                  case 0:
                    if (!_.isFunction(_this197.checkOrder)) {
                      _context94.next = 6;
                      break;
                    }

                    _this197.isChecking = true;
                    _context94.next = 4;
                    return _this197.checkOrder(_this197.orderId);

                  case 4:
                    _this197.myOrder = _context94.sent;
                    _this197.isChecking = false;

                  case 6:
                  case "end":
                    return _context94.stop();
                }
              }
            }, _callee94);
          }))();
        },
        //----------------------------------------------
        // Wait for payment be created
        // Maybe the processing still in the MessageQueue
        checkPayment: function checkPayment() {
          var _this198 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee96() {
            return regeneratorRuntime.wrap(function _callee96$(_context96) {
              while (1) {
                switch (_context96.prev = _context96.next) {
                  case 0:
                    if (!_this198.Payment) {
                      _.delay( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee95() {
                        return regeneratorRuntime.wrap(function _callee95$(_context95) {
                          while (1) {
                            switch (_context95.prev = _context95.next) {
                              case 0:
                                _context95.next = 2;
                                return _this198.fetchOrder(_this198.orderId);

                              case 2:
                                _this198.myOrder = _context95.sent;

                                _this198.$nextTick(function () {
                                  _this198.checkPayment();
                                });

                              case 4:
                              case "end":
                                return _context95.stop();
                            }
                          }
                        }, _callee95);
                      })), _this198.checkPaymentInterval);
                    } // With payment, do something special for PayPal
                    else {
                        _this198.tryEvalPayPal();
                      }

                  case 1:
                  case "end":
                    return _context96.stop();
                }
              }
            }, _callee96);
          }))();
        },
        //----------------------------------------------
        checkOrCreateOrder: function checkOrCreateOrder() {
          var _this199 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee97() {
            var payItems, order;
            return regeneratorRuntime.wrap(function _callee97$(_context97) {
              while (1) {
                switch (_context97.prev = _context97.next) {
                  case 0:
                    if (!_this199.hasOrder) {
                      _context97.next = 4;
                      break;
                    }

                    _context97.next = 3;
                    return _this199.checkPayment();

                  case 3:
                    return _context97.abrupt("return", _context97.sent);

                  case 4:
                    if (!_this199.orderId) {
                      _context97.next = 11;
                      break;
                    }

                    if (!_.isFunction(_this199.fetchOrder)) {
                      _context97.next = 9;
                      break;
                    }

                    _context97.next = 8;
                    return _this199.payOrder(_this199.orderId, _this199.payType);

                  case 8:
                    _this199.myOrder = _context97.sent;

                  case 9:
                    _context97.next = 18;
                    break;

                  case 11:
                    if (!_.isFunction(_this199.createOrder)) {
                      _context97.next = 18;
                      break;
                    }

                    payItems = _.map(_this199.items, function (it) {
                      return {
                        id: it.id,
                        amount: it.amount || 1,
                        cate: it.cate,
                        title: it.title,
                        price: it.price
                      };
                    });
                    _context97.next = 15;
                    return _this199.createOrder({
                      payType: _this199.payType,
                      items: payItems,
                      orderType: _this199.orderType,
                      orderTitle: _this199.orderTitle,
                      address: _this199.address,
                      fail: function fail(msg) {
                        _this199.$emit("change", {
                          payOk: false,
                          errMsg: msg
                        });

                        _this199.$notify("step:change", "@next");
                      }
                    });

                  case 15:
                    order = _context97.sent;

                    _this199.$emit("change", {
                      orderId: _.get(order, "id")
                    });

                    _this199.myOrder = order;

                  case 18:
                    _context97.next = 20;
                    return _this199.checkPayment();

                  case 20:
                    return _context97.abrupt("return", _context97.sent);

                  case 21:
                  case "end":
                    return _context97.stop();
                }
              }
            }, _callee97);
          }))();
        },
        //----------------------------------------------
        // PayPal need open a new link
        tryEvalPayPal: function tryEvalPayPal() {
          var _this200 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee98() {
            var href, link, url;
            return regeneratorRuntime.wrap(function _callee98$(_context98) {
              while (1) {
                switch (_context98.prev = _context98.next) {
                  case 0:
                    if (!("paypal" == _this200.payType && _this200.isPaymentCreated)) {
                      _context98.next = 9;
                      break;
                    }

                    href = _.get(_this200.PayPalLinksMap, "approve.href");
                    link = Ti.Util.parseHref(href);
                    url = "".concat(link.protocol, "://").concat(link.host).concat(link.path);
                    console.log("🤳", {
                      href: href,
                      link: link,
                      url: url
                    });

                    if (_this200.returnUrl) {
                      link.params.returnurl = _this200.returnUrl;
                    }

                    _this200.myPaypalUrl = link.toString();
                    _context98.next = 9;
                    return Ti.Be.Open(url, {
                      // params: _.assign({
                      //     returnurl: "http://onchina.local.io:8080/page/shop/payok.html"
                      //   },link.params),
                      params: link.params,
                      delay: 1000
                    });

                  case 9:
                  case "end":
                    return _context98.stop();
                }
              }
            }, _callee98);
          }))();
        },
        //----------------------------------------------
        watchPaymentChanged: function watchPaymentChanged() {
          var _this201 = this;

          // Guard
          if (this.__WS || !this.watchUser || !this.hasOrder || !this.isPaymentCreated) {
            return;
          } // Watch Remote


          console.log("【🦅】watchPaymentChanged");
          this.__WS = Ti.Websocket.listenRemote({
            watchTo: {
              method: "watch",
              user: this.watchUser,
              match: {
                id: this.PaymentId
              }
            },
            received: function received(wso) {
              console.log("【🦅】websocket", wso);

              _this201.OnClickCheckBtn();
            },
            closed: function closed() {
              _this201.unwatchPaymentChanged();
            }
          });
        },
        //----------------------------------------------
        unwatchPaymentChanged: function unwatchPaymentChanged() {
          if (this.__WS) {
            this.__WS.close();
          }
        } //----------------------------------------------

      },
      //////////////////////////////////////////////////
      watch: {
        "PaymentStatus": function PaymentStatus(status) {
          // Fail
          if ("FAIL" == status) {
            this.$emit("change", {
              payOk: false,
              errMsg: JSON.stringify(this.PaymentData)
            });
            this.$notify("step:change", "@next");
          } // OK
          else if ("OK" == status) {
              this.$emit("change", {
                payOk: true
              });
              this.$notify("step:change", "@next");
            }
        }
      },
      //////////////////////////////////////////////////
      mounted: function mounted() {
        var _this202 = this;

        this.$notify("change:title", this.PayTypeText);
        this.$nextTick(function () {
          _this202.checkOrCreateOrder();
        });
      },
      //////////////////////////////////////////////////
      beforeDestroy: function beforeDestroy() {
        this.unwatchPaymentChanged();
      } //////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/pay/proceed/web-pay-proceed.mjs", _M);
  })(); //============================================================
  // JOIN: web/pay/proceed/_com.json
  //============================================================


  Ti.Preload("ti/com/web/pay/proceed/_com.json", {
    "name": "web-pay-proceed",
    "globally": true,
    "template": "./web-pay-proceed.html",
    "props": "./web-pay-proceed-props.mjs",
    "mixins": ["./web-pay-proceed.mjs"]
  }); //============================================================
  // JOIN: web/pay/web-pay.html
  //============================================================

  Ti.Preload("ti/com/web/pay/web-pay.html", "<div class=\"web-pay\">\n  <ti-wizard\n    :current=\"0\"\n    :title=\"title\"\n    :steps=\"PaySteps\"\n    :value=\"myPayment\"\n    can-click-head-item=\"passed\"\n    @change=\"OnChange\"/>\n</div>"); //============================================================
  // JOIN: web/pay/web-pay.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////////////
      data: function data() {
        return {
          myPayment: {
            payType: null,
            //payType: "wx.qrcode",
            orderId: undefined,
            payOk: undefined,
            errMsg: null,
            address: null
          }
        };
      },
      ///////////////////////////////////////////////////
      props: {
        "title": {
          type: String,
          "default": "i18n:pay-title"
        },
        "payType": {
          type: String,
          "default": null
        },
        "payTypeOptions": {
          type: Array,
          "default": undefined
        },
        "defaultAddr": {
          type: Object,
          "default": undefined
        }
      },
      ///////////////////////////////////////////////////
      computed: {
        //----------------------------------------------
        PaySteps: function PaySteps() {
          var _this203 = this;

          return [{
            title: "i18n:pay-step-checkout-title",
            next: {
              enabled: function enabled() {
                if (_.isEmpty(_this203.items)) return false;
                if ("A" == _this203.orderType) return !_.isEmpty(_this203.myPayment.address);
                return true;
              }
            },
            comType: "WebPayCheckout",
            comConf: {
              tipIcon: this.tipIcon,
              tipText: this.tipText,
              items: this.items,
              currency: this.currency,
              orderType: this.orderType,
              addresses: this.addresses,
              currentAddr: this.myPayment.address,
              countries: this.countries
            }
          }, {
            title: "i18n:pay-step-choose-title",
            prev: true,
            next: {
              enabled: {
                payType: "notBlank"
              }
            },
            comType: "WebPayChoose",
            comConf: {
              options: this.options,
              value: "=payType"
            }
          }, {
            title: "i18n:pay-step-proceed-title",
            prev: true,
            next: {
              enabled: {
                payOk: "isBoolean",
                orderId: "notBlank"
              }
            },
            comType: "WebPayProceed",
            comConf: {
              items: this.items,
              currency: this.currency,
              payType: "=payType",
              orderId: "=orderId",
              payOk: "=payOk",
              address: "=address",
              checkPaymentInterval: this.checkPaymentInterval,
              orderType: this.orderType,
              orderTitle: this.orderTitle,
              watchUser: this.watchUser,
              qrcodeSize: this.qrcodeSize,
              fetchOrder: this.fetchOrder,
              payOrder: this.payOrder,
              createOrder: this.createOrder,
              checkOrder: this.checkOrder,
              returnUrl: this.returnUrl
            }
          }, {
            title: "pay-step-done-title",
            comType: "WebPayDone",
            comConf: {
              payOk: "=payOk",
              errMsg: "=errMsg",
              orderId: "=orderId",
              okIcon: this.okIcon,
              okText: this.okText,
              okLinks: this.okLinks,
              failIcon: this.failIcon,
              failText: this.failText,
              failLinks: this.failLinks,
              doneLinks: this.doneLinks
            }
          }];
        } //----------------------------------------------

      },
      ///////////////////////////////////////////////////
      methods: {
        //----------------------------------------------
        OnChange: function OnChange(payment) {
          _.assign(this.myPayment, payment);
        } //----------------------------------------------

      },
      ///////////////////////////////////////////////////
      watch: {
        "payType": {
          handler: function handler() {
            this.myPayment.payType = this.payType;
          },
          immediate: true
        },
        "defaultAddr": {
          handler: function handler(addr) {
            if (addr && !this.myPayment.address) {
              this.myPayment.address = _.cloneDeep(addr);
            }
          },
          immediate: true
        }
      } ///////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/pay/web-pay.mjs", _M);
  })(); //============================================================
  // JOIN: web/pay/_com.json
  //============================================================


  Ti.Preload("ti/com/web/pay/_com.json", {
    "name": "web-pay",
    "globally": true,
    "template": "./web-pay.html",
    "props": ["@com:web/pay/checkout/web-pay-checkout-props.mjs", "@com:web/pay/choose/web-pay-choose-props.mjs", "@com:web/pay/proceed/web-pay-proceed-props.mjs", "@com:web/pay/done/web-pay-done-props.mjs"],
    "mixins": ["./web-pay.mjs"],
    "components": ["@com:ti/wizard", "@com:web/pay/checkout", "@com:web/pay/choose", "@com:web/pay/proceed", "@com:web/pay/done"]
  }); //============================================================
  // JOIN: web/shelf/free/web-shelf-free.html
  //============================================================

  Ti.Preload("ti/com/web/shelf/free/web-shelf-free.html", "<div class=\"web-shelf-free\"\n  :class=\"TopClass\"\n  :style=\"TopStyle\">\n  <!--=============================-->\n  <div class=\"free-main\"\n    :style=\"MainStyle\">\n    <div \n      v-for=\"it in itemList\"\n        :key=\"it.key\"\n        class=\"free-item\"\n        :class=\"it.className\"\n        :style=\"it.style\">\n        <component\n          :is=\"it.comType\"\n          v-bind=\"it.comConf\"/>\n    </div>\n  </div>\n  <!--=============================-->\n</div>"); //============================================================
  // JOIN: web/shelf/free/web-shelf-free.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////
      data: function data() {
        return {
          itemStyles: {},
          itemList: []
        };
      },
      //////////////////////////////////////////
      props: {
        "preview": {
          type: Object,
          "default": undefined
        },

        /*
        Each item should obey the form below:
        {
          position: "top|left|bottom|right|center|free",
          className: "item-class-selector",
          style: {...},
          comType: "xxx",
          comConf: {...}
        }
        */
        "items": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "background": {
          type: String,
          "default": undefined
        },
        "color": {
          type: String,
          "default": undefined
        },
        "width": {
          type: [String, Number],
          "default": undefined
        },
        "height": {
          type: [String, Number],
          "default": undefined
        },
        "mainBackground": {
          type: String,
          "default": undefined
        },
        "mainWidth": {
          type: [String, Number],
          "default": undefined
        },
        "mainHeight": {
          type: [String, Number],
          "default": undefined
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //--------------------------------------
        TopStyle: function TopStyle() {
          return Ti.Css.toStyle(_objectSpread({
            width: this.width,
            height: this.height,
            color: this.color
          }, this.evalBackgroundStyle(this.background)));
        },
        //--------------------------------------
        MainStyle: function MainStyle() {
          return Ti.Css.toStyle(_objectSpread({
            width: this.mainWidth,
            height: this.mainHeight
          }, this.evalBackgroundStyle(this.mainBackground)));
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        evalItemList: function evalItemList() {
          var _this204 = this;

          if (!_.isArray(this.items)) {
            this.itemList = [];
            return;
          }

          var vm = this;
          var list = [];

          _.forEach(this.items, function (it, index) {
            // Eval the class
            var klass = ["at-".concat(it.position || "free"), "i-".concat(index)];

            if (it.className) {
              klass.push(it.className);
            } // Gen Key


            var itKey = "It-".concat(index); // Style

            var self = Ti.Css.toStyle(it.style);
            var appear = Ti.Css.toStyle(it.appear); // Transition

            if (!_.isEmpty(appear)) {
              _.delay(function () {
                var it = _.cloneDeep(_this204.itemList[index]);

                it.style = self;
                vm.$set(_this204.itemList, index, it);
              }, 0);
            } // Join


            list.push({
              key: itKey,
              index: index,
              className: Ti.Css.mergeClassName(klass),
              style: _.assign({}, self, appear),
              comType: it.comType || "WebTextRaw",
              comConf: it.comConf
            });
          }); // Get the result


          this.itemList = list;
        },
        //--------------------------------------
        evalBackgroundStyle: function evalBackgroundStyle(bg) {
          if (_.isEmpty(bg)) {
            return {};
          } // Background image


          if (_.isObject(bg)) {
            return {
              backgroundImage: "url(\"".concat(Ti.WWW.evalObjPreviewSrc(bg, this.preview), "\")")
            };
          } // Backgrund color


          if (/^(#[0-9A-F]{3,6}|rgba?\([0-9, ]+\))$/.test(bg)) {
            return {
              backgroundColor: bg
            };
          } // Default as background Image


          return {
            backgroundImage: "url(\"".concat(bg, "\")")
          };
        } //--------------------------------------

      },
      //////////////////////////////////////////
      watch: {
        "items": {
          handler: function handler() {
            this.evalItemList();
          },
          immediate: true
        }
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/shelf/free/web-shelf-free.mjs", _M);
  })(); //============================================================
  // JOIN: web/shelf/free/_com.json
  //============================================================


  Ti.Preload("ti/com/web/shelf/free/_com.json", {
    "name": "web-shelf-free",
    "globally": true,
    "template": "./web-shelf-free.html",
    "mixins": ["./web-shelf-free.mjs"]
  }); //============================================================
  // JOIN: web/shelf/list/web-shelf-list.html
  //============================================================

  Ti.Preload("ti/com/web/shelf/list/web-shelf-list.html", "<div class=\"web-shelf-list\"\n  :class=\"TopClass\">\n  <!--\n    Blank\n  -->\n  <template \n    v-if=\"isEmpty\">\n    <ti-loading\n      v-if=\"showBlank\"\n        class=\"as-big\"\n        v-bind=\"blankAs\"/>\n  </template>\n  <!--\n    Each Items\n  -->\n  <template v-else>\n    <div\n      v-for=\"it in ItemList\"\n        class=\"list-item\"\n        :key=\"it.key\">\n        <component\n          :is=\"it.comType\"\n          v-bind=\"it.comConf\"/>    \n    </div>\n  </template>\n</div>"); //============================================================
  // JOIN: web/shelf/list/web-shelf-list.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////
      props: {
        "data": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        // Item comType
        "comType": {
          type: String,
          "default": "ti-label"
        },
        "comConf": {
          type: [Object, String],
          "default": function _default() {
            return {
              value: "=.."
            };
          }
        },
        "blankAs": {
          type: [Object, Boolean],
          "default": function _default() {
            return {
              text: "i18n:empty",
              icon: "fas-box-open"
            };
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //--------------------------------------
        ItemList: function ItemList() {
          if (!_.isArray(this.data)) return [];
          var list = [];

          for (var i = 0; i < this.data.length; i++) {
            var it = this.data[i];
            var comConf = Ti.Util.explainObj(it, this.comConf);
            list.push({
              key: "It-".concat(i),
              comType: this.comType,
              comConf: comConf
            });
          } // Get the result


          return list;
        },
        //--------------------------------------
        showBlank: function showBlank() {
          return this.blankAs ? true : false;
        },
        //--------------------------------------
        isEmpty: function isEmpty() {
          return _.isEmpty(this.ItemList);
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {} //--------------------------------------
      //--------------------------------------
      //////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/shelf/list/web-shelf-list.mjs", _M);
  })(); //============================================================
  // JOIN: web/shelf/list/_com.json
  //============================================================


  Ti.Preload("ti/com/web/shelf/list/_com.json", {
    "name": "web-shelf-list",
    "globally": true,
    "template": "./web-shelf-list.html",
    "mixins": ["./web-shelf-list.mjs"]
  }); //============================================================
  // JOIN: web/shelf/scroller/web-shelf-scroller.html
  //============================================================

  Ti.Preload("ti/com/web/shelf/scroller/web-shelf-scroller.html", "<div class=\"web-shelf-scroller\"\n  :class=\"TopClass\">\n  <!--=======================================-->\n  <div class=\"scroll-btn at-left\" :class=\"BtnLeftClass\">\n    <span @click.left=\"OnScrollLeft\"><ti-icon :value=\"iconLeft\"/></span>\n  </div>\n  <!--=======================================-->\n  <div class=\"scroller-outer\" ref=\"outer\">\n    <!--=====================================-->\n    <div class=\"scroller-inner\" ref=\"inner\"\n      :style=\"InnerStyle\">\n      <!--===================================-->\n      <div\n        v-for=\"it in ItemList\"\n          class=\"scroller-tile\"\n          :key=\"it.key\"\n          :style=\"ItemStyle\"\n          :class=\"it.className\"\n          @mouseenter=\"OnEnterTile(it.rawData)\"\n          @mouseleave=\"OnLeaveTile(it.rawData)\">\n          <component\n            :is=\"it.comType\"\n            v-bind=\"it.comConf\"/>\n      </div>\n      <!--===================================-->\n    </div>\n    <!--=====================================-->\n  </div>\n  <!--=======================================-->\n  <div class=\"scroll-btn at-right\" :class=\"BtnRightClass\">\n    <span @click.left=\"OnScrollRight\"><ti-icon :value=\"iconRight\"/></span>\n  </div>\n  <!--=======================================-->\n</div>"); //============================================================
  // JOIN: web/shelf/scroller/web-shelf-scroller.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////
      data: function data() {
        return {
          myScrollLeft: 0,
          myMaxScroll: 0,
          myScrollWidth: 0
        };
      },
      //////////////////////////////////////////
      props: {
        "data": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        // Item count per-row
        "cols": {
          type: Number,
          "default": 4
        },
        "itemWidth": {
          type: [String, Number],
          "default": undefined
        },
        // Item comType
        "comType": {
          type: String,
          "default": "ti-label"
        },
        "comConf": {
          type: [Object, String],
          "default": function _default() {
            return {
              value: "=.."
            };
          }
        },
        "iconLeft": {
          type: String,
          "default": "zmdi-chevron-left"
        },
        "iconRight": {
          type: String,
          "default": "zmdi-chevron-right"
        },
        "enterItem": {
          type: [String, Function],
          "default": undefined
        },
        "leaveItem": {
          type: [String, Function],
          "default": undefined
        },
        "keepScrolling": {
          type: Boolean,
          "default": false
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //--------------------------------------
        InnerStyle: function InnerStyle() {
          return {
            "left": Ti.Css.toSize(this.myScrollLeft)
          };
        },
        //--------------------------------------
        ItemStyle: function ItemStyle() {
          if (!Ti.Util.isNil(this.itemWidth)) {
            return Ti.Css.toSizeRem100({
              "width": this.itemWidth
            });
          }

          if (this.cols > 0) {
            return {
              "width": Ti.Types.toPercent(1 / this.cols)
            };
          }
        },
        //--------------------------------------
        isLeftEnabled: function isLeftEnabled() {
          return this.myScrollLeft < 0;
        },
        isRightEnabled: function isRightEnabled() {
          return this.myScrollLeft + this.myMaxScroll > this.myScrollWidth;
        },
        //--------------------------------------
        BtnLeftClass: function BtnLeftClass() {
          return {
            "is-enabled": this.isLeftEnabled,
            "is-disabled": !this.isLeftEnabled
          };
        },
        //--------------------------------------
        BtnRightClass: function BtnRightClass() {
          return {
            "is-enabled": this.isRightEnabled,
            "is-disabled": !this.isRightEnabled
          };
        },
        //--------------------------------------
        ItemList: function ItemList() {
          if (!_.isArray(this.data)) return [];
          var list = [];

          for (var i = 0; i < this.data.length; i++) {
            var it = this.data[i]; // let comConf = _.assign({}, this.comConf, {
            //   value: it
            // })

            var comConf = Ti.Util.explainObj(it, this.comConf);
            list.push({
              key: "It-".concat(i),
              className: it.className,
              rawData: it,
              comType: this.comType,
              comConf: comConf
            });
          } // Get the result


          return list;
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnScrollLeft: function OnScrollLeft() {
          // Guard
          if (!this.isLeftEnabled) {
            return;
          } // Do Scroll


          var step = Math.abs(this.myScrollLeft);
          step = Math.min(this.myScrollWidth, step);
          this.myScrollLeft += step;
        },
        //--------------------------------------
        OnScrollRight: function OnScrollRight() {
          // Guard
          if (!this.isRightEnabled) {
            return;
          } // Do Scroll


          var remain = this.myMaxScroll + this.myScrollLeft - this.myScrollWidth;
          var step = Math.min(this.myScrollWidth, remain);
          this.myScrollLeft -= step;
        },
        //--------------------------------------
        OnEnterTile: function OnEnterTile(it) {
          if (_.isFunction(this.enterItem)) {
            this.enterItem(it);
          } else if (_.isString(this.enterItem)) {
            this.$notify(this.enterItem, it);
          }
        },
        //--------------------------------------
        OnLeaveTile: function OnLeaveTile(it) {
          if (_.isFunction(this.leaveItem)) {
            this.leaveItem(it);
          } else if (_.isString(this.leaveItem)) {
            this.$notify(this.leaveItem, it);
          }
        },
        //--------------------------------------
        evalScrolling: function evalScrolling() {
          this.myMaxScroll = this.$refs.inner.scrollWidth;
          this.myScrollWidth = this.$refs.inner.getBoundingClientRect().width;
          this.myScrollLeft = 0;
        } //--------------------------------------

      },
      //////////////////////////////////////////
      watch: {
        "data": {
          handler: function handler(newData, oldData) {
            var _this205 = this;

            var lenNew = _.size(newData);

            var lenOld = _.size(oldData);

            if (!this.keepScrolling || !this.myScrollWidth || lenNew != lenOld) {
              this.$nextTick(function () {
                _this205.evalScrolling();
              });
            }
          },
          immediate: true
        }
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/shelf/scroller/web-shelf-scroller.mjs", _M);
  })(); //============================================================
  // JOIN: web/shelf/scroller/_com.json
  //============================================================


  Ti.Preload("ti/com/web/shelf/scroller/_com.json", {
    "name": "web-shelf-scroller",
    "globally": true,
    "template": "./web-shelf-scroller.html",
    "mixins": ["./web-shelf-scroller.mjs"]
  }); //============================================================
  // JOIN: web/shelf/slide/web-shelf-slide.html
  //============================================================

  Ti.Preload("ti/com/web/shelf/slide/web-shelf-slide.html", "<div class=\"web-shelf-slide\"\n  :class=\"TopClass\"\n  :style=\"TopStyle\">\n  <!--\n    Main\n  -->\n  <div class=\"as-main\">\n    <div\n      v-for=\"it in ItemList\"\n        :key=\"it.key\"\n        class=\"as-con\"\n        :class=\"it.className\">\n        <component :is=\"it.comType\" v-bind=\"it.comConf\"/>\n    </div>\n  </div>\n  <!--\n    Item List\n  -->\n  <div class=\"as-indicator\">\n    <div\n      v-for=\"it in ItemList\"\n        class=\"as-item\"\n        :class=\"it.className\"\n        @click.left.stop=\"OnClickIndicator(it)\">\n    </div>\n  </div>\n  <!--\n    Btn: Prev\n  -->\n  <div class=\"as-btn is-prev\" @click.left=\"prevItem\">\n    <i class=\"im im-angle-left\"></i>\n  </div>\n  <!--\n    Btn: Next\n  -->\n  <div class=\"as-btn is-next\" @click.left=\"nextItem\">\n    <i class=\"im im-angle-right\"></i>\n  </div>\n</div>"); //============================================================
  // JOIN: web/shelf/slide/web-shelf-slide.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////
      data: function data() {
        return {
          myCurrentIndex: 0
        };
      },
      //////////////////////////////////////////
      props: {
        "data": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        // Item comType
        "comType": {
          type: String,
          "default": "ti-label"
        },
        "comConf": {
          type: [Object, String],
          "default": function _default() {
            return {
              value: "=.."
            };
          }
        },
        "interval": {
          type: Number,
          "default": 0
        },
        "idBy": {
          type: String,
          "default": "id"
        },
        "width": {
          type: [Number, String],
          "default": undefined
        },
        "height": {
          type: [Number, String],
          "default": undefined
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //--------------------------------------
        TopStyle: function TopStyle() {
          return Ti.Css.toStyle({
            width: this.width,
            height: this.height
          });
        },
        //--------------------------------------
        isLeftEnabled: function isLeftEnabled() {
          return true;
        },
        isRightEnabled: function isRightEnabled() {
          return true;
        },
        //--------------------------------------
        BtnLeftClass: function BtnLeftClass() {
          return {
            "is-enabled": this.isLeftEnabled,
            "is-disabled": !this.isLeftEnabled
          };
        },
        //--------------------------------------
        BtnRightClass: function BtnRightClass() {
          return {
            "is-enabled": this.isRightEnabled,
            "is-disabled": !this.isRightEnabled
          };
        },
        //--------------------------------------
        ItemList: function ItemList() {
          if (!_.isArray(this.data)) return [];
          var list = [];

          for (var i = 0; i < this.data.length; i++) {
            var it = this.data[i];
            var current = i == this.myCurrentIndex;
            var className = current ? "is-current" : null;
            var comConf = Ti.Util.explainObj(it, this.comConf);
            list.push({
              key: this.getItemKey(it, i),
              index: i,
              className: className,
              comType: this.comType,
              comConf: comConf
            });
          } // Get the result


          return list;
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnClickIndicator: function OnClickIndicator(_ref109) {
          var index = _ref109.index;
          this.myCurrentIndex = index;
        },
        //--------------------------------------
        getItemKey: function getItemKey(it, index) {
          var key = _.get(it, this.idBy);

          return key || "It-".concat(index);
        },
        //--------------------------------------
        prevItem: function prevItem() {
          var index = Ti.Num.scrollIndex(this.myCurrentIndex - 1, this.ItemList.length);
          this.myCurrentIndex = index;
        },
        //--------------------------------------
        nextItem: function nextItem() {
          var index = Ti.Num.scrollIndex(this.myCurrentIndex + 1, this.ItemList.length);
          this.myCurrentIndex = index;
        },
        //--------------------------------------
        autoPlayNextItem: function autoPlayNextItem() {
          var _this206 = this;

          if (this.interval > 0) {
            _.delay(function () {
              if (!_this206.mousein) {
                _this206.nextItem();
              }

              _this206.autoPlayNextItem();
            }, this.interval * 1000);
          }
        } //--------------------------------------

      },
      //////////////////////////////////////////
      watch: {
        "interval": function interval(interv) {
          if (interv > 0) {
            this.autoPlayNextItem();
          }
        }
      },
      //////////////////////////////////////////
      mounted: function mounted() {
        this.autoPlayNextItem();
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/shelf/slide/web-shelf-slide.mjs", _M);
  })(); //============================================================
  // JOIN: web/shelf/slide/_com.json
  //============================================================


  Ti.Preload("ti/com/web/shelf/slide/_com.json", {
    "name": "web-shelf-slide",
    "globally": true,
    "template": "./web-shelf-slide.html",
    "mixins": ["./web-shelf-slide.mjs"]
  }); //============================================================
  // JOIN: web/shelf/wall/web-shelf-wall.html
  //============================================================

  Ti.Preload("ti/com/web/shelf/wall/web-shelf-wall.html", "<div class=\"web-shelf-wall\"\n  :class=\"TopClass\">\n  <!--\n    Blank\n  -->\n  <ti-loading\n    v-if=\"isEmpty\"\n      class=\"as-big\"\n      v-bind=\"blankAs\"/>\n  <!--\n    Each Items\n  -->\n  <template v-else>\n    <div v-for=\"wr in WallList\"\n      class=\"wall-group\"\n      :key=\"wr.key\">\n      <!--\n        ===========================================\n        Items in row\n      -->\n      <template v-for=\"it in wr.items\">\n        <!--\n          Blank\n        -->\n        <div\n          v-if=\"it.blank\"\n            class=\"wall-tile is-blank\"\n            :style=\"ItemStyle\"></div>\n        <!--\n          Normal Item\n        -->\n        <div\n          v-else\n            class=\"wall-tile is-com\"\n            :style=\"ItemStyle\">\n            <component\n              :is=\"it.comType\"\n              v-bind=\"it.comConf\"/>\n        </div>\n      </template> <!-- End item-->\n    </div> <!--End Row-->\n  </template>\n</div>"); //============================================================
  // JOIN: web/shelf/wall/web-shelf-wall.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////
      props: {
        "data": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        // Item count per-row
        "cols": {
          type: Number,
          "default": 4,
          validator: function validator(v) {
            return v > 0 && parseInt(v) == v;
          }
        },
        // Item comType
        "comType": {
          type: String,
          "default": "ti-label"
        },
        "comConf": {
          type: [Object, String],
          "default": function _default() {
            return {
              value: "=.."
            };
          }
        },
        "blankAs": {
          type: Object,
          "default": function _default() {
            return {
              text: "i18n:empty",
              icon: "fas-box-open"
            };
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //--------------------------------------
        ItemStyle: function ItemStyle() {
          return {
            "width": Ti.Types.toPercent(1 / this.cols)
          };
        },
        //--------------------------------------
        WallList: function WallList() {
          if (!_.isArray(this.data)) return [];
          var list = [];
          var items = [];
          var count = 1;

          for (var i = 0; i < this.data.length; i++) {
            var it = this.data[i]; // let comConf = _.assign({}, this.comConf, {
            //   value: it
            // })

            var comConf = Ti.Util.explainObj(it, this.comConf);
            items.push({
              key: "It-".concat(i),
              comType: this.comType,
              comConf: comConf
            }); // Next row

            if (count >= this.cols) {
              count = 1;
              list.push({
                key: "Row-".concat(list.length),
                items: items
              });
              items = [];
            } // Next item
            else {
                count++;
              }
          } // The last line


          if (!_.isEmpty(items)) {
            for (var _i5 = items.length; _i5 < this.cols; _i5++) {
              items.push({
                key: "It-".concat(_i5),
                blank: true
              });
            }

            list.push({
              key: "Row-".concat(list.length),
              items: items
            });
          } // Get the result


          return list;
        },
        //--------------------------------------
        isEmpty: function isEmpty() {
          return _.isEmpty(this.WallList);
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {} //--------------------------------------
      //--------------------------------------
      //////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/shelf/wall/web-shelf-wall.mjs", _M);
  })(); //============================================================
  // JOIN: web/shelf/wall/_com.json
  //============================================================


  Ti.Preload("ti/com/web/shelf/wall/_com.json", {
    "name": "web-shelf-wall",
    "globally": true,
    "template": "./web-shelf-wall.html",
    "mixins": ["./web-shelf-wall.mjs"]
  }); //============================================================
  // JOIN: web/text/heading/web-text-heading.html
  //============================================================

  Ti.Preload("ti/com/web/text/heading/web-text-heading.html", "<div class=\"web-text-heading\"\n  :class=\"TopClass\">\n  <!--Icon-->\n  <div\n    v-if=\"icon\"\n      class=\"as-icon\"><ti-icon :value=\"icon\"/></div>\n  <!--Title-->\n  <div\n    v-if=\"title\"\n      class=\"as-title\"\n      :class=\"TitleClass\"\n      :style=\"TitleStyle\"\n      @click.left=\"OnClickTitle\"><span>{{title|i18n}}</span></div>\n  <!--Comments-->\n  <div\n    v-if=\"comment\"\n      class=\"as-comment\"><span>{{comment|i18n}}</span></div>\n  <!--View more-->\n  <div\n    v-if=\"more\"\n      class=\"as-more\"\n      @click.left=\"OnClickMore\"><span>{{more|i18n}}</span></div>\n</div>"); //============================================================
  // JOIN: web/text/heading/web-text-heading.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      props: {
        "icon": {
          type: String,
          "default": null
        },
        "title": {
          type: String,
          "default": null
        },
        "titleClass": {
          type: [String, Array, Object],
          "default": undefined
        },
        "titleStyle": {
          type: Object,
          "default": undefined
        },
        "comment": {
          type: String,
          "default": null
        },
        "more": {
          type: String,
          "default": null
        },
        "value": null
      },
      //////////////////////////////////////////
      computed: {
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //--------------------------------------
        TitleClass: function TitleClass() {
          return Ti.Css.mergeClassName(this.titleClass);
        },
        //--------------------------------------
        TitleStyle: function TitleStyle() {
          return Ti.Css.toStyle(this.titleStyle);
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnClickTitle: function OnClickTitle() {
          this.$notify("fire", this.value);
        },
        //--------------------------------------
        OnClickMore: function OnClickMore() {
          this.$notify("more", this.value);
        } //--------------------------------------

      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/text/heading/web-text-heading.mjs", _M);
  })(); //============================================================
  // JOIN: web/text/heading/_com.json
  //============================================================


  Ti.Preload("ti/com/web/text/heading/_com.json", {
    "name": "web-text-heading",
    "globally": true,
    "template": "./web-text-heading.html",
    "mixins": ["./web-text-heading.mjs"]
  }); //============================================================
  // JOIN: web/text/raw/web-text-raw.html
  //============================================================

  Ti.Preload("ti/com/web/text/raw/web-text-raw.html", "<div class=\"web-text-raw\" :class=\"TopClass\">\n  <!--\n    Icon\n  -->\n  <ti-icon \n    v-if=\"icon\"\n      :value=\"icon\"/>\n  <!--\n    Value As Text\n  -->\n  <div\n    v-if=\"hasValue\"\n      class=\"as-text\">\n      <template v-if=\"i18n\">\n        <div v-for=\"li in TheValue\">{{li | i18n}}</div>\n      </template>\n      <template v-else>\n        <div v-for=\"li in TheValue\">{{li}}</div>\n      </template>\n  </div>\n</div>"); //============================================================
  // JOIN: web/text/raw/web-text-raw.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      props: {
        "icon": {
          type: [String, Object],
          "default": undefined
        },
        "value": {
          type: [String, Number, Boolean, Array],
          "default": undefined
        },
        "lineSeperater": {
          type: String,
          "default": "\n"
        },
        "i18n": {
          type: Boolean,
          "default": false
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //--------------------------------------
        hasValue: function hasValue() {
          return Ti.Util.isNil(this.value) ? false : true;
        },
        //--------------------------------------
        TheValue: function TheValue() {
          // Split String
          if (_.isString(this.value)) {
            if (this.lineSeperater) {
              var ss = this.value.split(this.lineSeperater);

              _.map(ss, function (s) {
                return _.trim(s);
              });

              return ss;
            }

            return [this.value];
          } // Already Array


          if (_.isArray(this.value)) return this.value; // Others

          return [this.value];
        } //--------------------------------------

      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/text/raw/web-text-raw.mjs", _M);
  })(); //============================================================
  // JOIN: web/text/raw/_com.json
  //============================================================


  Ti.Preload("ti/com/web/text/raw/_com.json", {
    "name": "web-text-raw",
    "globally": true,
    "template": "./web-text-raw.html",
    "mixins": ["./web-text-raw.mjs"]
  }); //============================================================
  // JOIN: web/tile/address/web-tile-address.html
  //============================================================

  Ti.Preload("ti/com/web/tile/address/web-tile-address.html", "<div class=\"web-tile-address\"\n  :class=\"TopClass\"\n  @click.left=\"OnClickTop\">\n  <!--\n    Center\n  -->\n  <div class=\"at-center\">\n    <!--Has Value-->\n    <template v-if=\"hasValue\">\n      <div class=\"is-info\">\n        <div\n          v-if=\"Item.consignee\">\n            <span>{{'address-consignee'|i18n}}:</span>\n            <em>{{Item.consignee}}</em></div>\n        <div\n          v-if=\"Item.phone\">\n            <span>{{'address-k-phone'|i18n}}:</span>\n            <em>{{Item.phone}}</em></div>\n        <div\n          v-if=\"Item.email\">\n            <span>{{'address-k-email'|i18n}}:</span>\n            <em>{{Item.email}}</em></div>\n      </div>\n      <div class=\"is-big\">\n        <span class=\"as-street\">{{Item.street}}</span>\n        <span class=\"as-door\">{{Item.door}}</span>\n      </div>\n    </template>\n    <!--Blank-->\n    <ti-loading\n      v-else \n        class=\"as-big ti-fill-parent\"\n        style=\"padding:0\"\n        v-bind=\"blankAs\"/>\n  </div>\n  <!--\n    Left top\n  -->\n  <div class=\"at-left-top is-float\">\n    <template v-if=\"title\">\n      <span class=\"is-bold\">{{title | i18n}}</span>\n    </template>\n    <template v-else>\n      <a \n        v-if=\"can.default && !Item.dftaddr\"\n          @click=\"OnSetDefault\">{{'address-set-dft'|i18n}}</a>\n      <span\n        v-else-if=\"Item.dftaddr\"\n          class=\"is-bold\">{{'address-is-dft'|i18n}}</span>\n    </template>\n  </div>\n  <!--\n    Left-bottom\n  -->\n  <div class=\"at-left-bottom is-float\">\n    <span\n      v-if=\"Item.city\">{{Item.city}}</span>\n    <span\n      v-if=\"Item.province\">{{Item.province}}</span>\n    <span\n      v-if=\"showCountry && Item.countryName\">{{Item.countryName}}</span>\n  </div>\n  <!--\n    Right-top\n  -->\n  <div\n    v-if=\"can.remove || can.edit || can.choose\" \n      class=\"at-right-top is-float\">\n      <a v-if=\"can.remove\" @click=\"OnRemove\">{{'del'|i18n}}</a>\n      <a v-if=\"can.edit\" @click=\"OnEdit\">{{'edit'|i18n}}</a>\n      <a v-if=\"can.choose\" @click=\"OnChoose\">{{'choose'|i18n}}</a>\n      <a v-if=\"can.add\" @click=\"OnAdd\">{{'address-shipping-add'|i18n}}</a>\n  </div>  \n</div>"); //============================================================
  // JOIN: web/tile/address/web-tile-address.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////
      props: {
        "value": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "mapping": {
          type: Object,
          "default": function _default() {
            return {
              id: "id",
              country: "country",
              postcode: "postcode",
              province: "province",
              city: "city",
              street: "street",
              door: "door",
              consignee: "consignee",
              phone: "phone",
              email: "email",
              dftaddr: "dftaddr"
            };
          }
        },
        // {"HK":"Hong Kong","TW":"Taiwan","MO":"Macao"}
        "countries": {
          type: Object,
          "default": undefined
        },
        "showCountry": {
          type: Boolean,
          "default": true
        },
        // If indicate this prop, it will replace the left-top title display
        "title": {
          type: String,
          "default": undefined
        },
        "can": {
          type: Object,
          "default": function _default() {
            return {
              remove: true,
              edit: true,
              "default": true,
              choose: false,
              add: false
            };
          }
        },
        // If false emit the item after mapping
        "emitRawValue": {
          type: Boolean,
          "default": true
        },
        // Auto highlight the default address
        "autoHighlight": {
          type: Boolean,
          "default": true
        },
        // Indicate the highlight ID
        "currentId": {
          type: String,
          "default": undefined
        },
        "blankAs": {
          type: Object,
          "default": function _default() {
            return {
              icon: "im-location",
              text: "i18n:address-nil"
            };
          }
        },
        "selectable": {
          type: Boolean,
          "default": false
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          var high = false;

          if (_.isUndefined(this.currentId)) {
            if (this.autoHighlight && this.Item.dftaddr) {
              high = true;
            }
          } else {
            high = this.currentId == this.Item.id;
          }

          return this.getTopClass({
            "is-highlight": high,
            "is-selectable": this.selectable
          });
        },
        //--------------------------------------
        hasValue: function hasValue() {
          return !_.isEmpty(this.value);
        },
        //--------------------------------------
        Item: function Item() {
          var it = Ti.Util.translate(this.value, this.mapping) || {};

          if (this.countries) {
            it.countryName = this.countries[it.country];
          } else {
            it.countryName = it.country;
          }

          return it;
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnClickTop: function OnClickTop() {
          if (this.selectable) {
            var v = this.getEmitValue();
            this.$notify('select', v);
          }
        },
        //--------------------------------------
        OnRemove: function OnRemove() {
          var v = this.getEmitValue();
          this.$notify('remove', v);
        },
        //--------------------------------------
        OnSetDefault: function OnSetDefault() {
          var v = this.getEmitValue();
          this.$notify('set:default', v);
        },
        //--------------------------------------
        OnEdit: function OnEdit() {
          var v = this.getEmitValue();
          this.$notify('edit', v);
        },
        //--------------------------------------
        OnChoose: function OnChoose() {
          var v = this.getEmitValue();
          this.$notify('choose', v);
        },
        //--------------------------------------
        OnAdd: function OnAdd() {
          var v = this.getEmitValue();
          this.$notify('add', v);
        },
        //--------------------------------------
        getEmitValue: function getEmitValue() {
          var v = this.emitRawValue ? this.value : this.Item;
          return _.cloneDeep(v);
        } //--------------------------------------

      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/tile/address/web-tile-address.mjs", _M);
  })(); //============================================================
  // JOIN: web/tile/address/_com.json
  //============================================================


  Ti.Preload("ti/com/web/tile/address/_com.json", {
    "name": "web-tile-address",
    "globally": true,
    "template": "./web-tile-address.html",
    "mixins": ["./web-tile-address.mjs"]
  }); //============================================================
  // JOIN: web/tile/comment/web-tile-comment.html
  //============================================================

  Ti.Preload("ti/com/web/tile/comment/web-tile-comment.html", "<div class=\"web-tile-comment\"\n  :class=\"TopClass\">\n  <!--\n    Left: User Avator\n  -->\n  <div class=\"at-left\">\n    <ti-icon :value=\"AvatarIcon\"/>\n  </div>\n  <!--\n    Right: Comment\n  -->\n  <div class=\"at-right\">\n      <!--Head-->\n      <div class=\"as-head\">\n        <span class=\"as-u-name\">{{Post.userName}}</span>\n        <span class=\"as-time\">{{CreateTimeText}}</span>\n      </div>\n      <!--Content-->\n      <div class=\"as-content\">{{Post.content}}</div>\n  </div>\n</div>"); //============================================================
  // JOIN: web/tile/comment/web-tile-comment.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////
      props: {
        "value": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "mapping": {
          type: Object,
          "default": function _default() {
            return {
              userId: "uid",
              userName: "unm",
              avatar: "avatar",
              content: "brief",
              createTime: "ct"
            };
          }
        },
        "avatarSrc": {
          type: String,
          "default": undefined
        },
        "userIcon": {
          type: [String, Object],
          "default": "fas-user"
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //--------------------------------------
        Post: function Post() {
          var it = Ti.Util.translate(this.value, this.mapping);
          return it || {};
        },
        //--------------------------------------
        AvatarIcon: function AvatarIcon() {
          var avatar = _.get(this.Post, "avatar");

          if (avatar && this.avatarSrc) {
            return {
              type: "image",
              value: Ti.S.renderBy(this.avatarSrc, this.Post)
            };
          }

          return this.userIcon;
        },
        //--------------------------------------
        CreateTimeText: function CreateTimeText() {
          if (this.Post.createTime) return Ti.DateTime.timeText(this.Post.createTime);
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {} //--------------------------------------
      //--------------------------------------
      //////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/tile/comment/web-tile-comment.mjs", _M);
  })(); //============================================================
  // JOIN: web/tile/comment/_com.json
  //============================================================


  Ti.Preload("ti/com/web/tile/comment/_com.json", {
    "name": "web-tile-comment",
    "globally": true,
    "template": "./web-tile-comment.html",
    "mixins": ["./web-tile-comment.mjs"]
  }); //============================================================
  // JOIN: web/tile/order/web-tile-order.html
  //============================================================

  Ti.Preload("ti/com/web/tile/order/web-tile-order.html", "<div class=\"web-tile-order\"\n  :class=\"TopClass\">\n  <!--\n    Summary\n  -->\n  <div class=\"as-summary\">\n    <!--ID-->\n    <div class=\"or-field as-id\">\n      <span>{{'order-k-id'|i18n}}</span>\n      <a \n        v-if=\"OrderHref\"\n          :href=\"OrderHref\"\n          @click.left.prevent=\"OnClickOrder\">{{OrderId}}</a>\n      <em\n        v-else>{{OrderId}}</em>\n    </div>\n    <!--Date-->\n    <div class=\"or-field as-datetime\">\n      <span>{{'wn-key-ct'|i18n}}</span>\n      <em>{{Order.ct|datetime}}</em>\n    </div>\n    <!--Fee-->\n    <div class=\"or-field as-price\">\n      <span>{{'order-k-fee'|i18n}}</span>\n      <em>{{CurrencyChar}}{{Order.fee}}</em>\n    </div>\n    <!--Payment-->\n    <div class=\"or-field as-pay_tp\">\n      <span>{{'order-k-pay_tp'|i18n}}</span>\n      <em>{{'pay-by-'+Order.pay_tp|i18n}}</em>\n    </div>\n    <!--Status-->\n    <div class=\"or-field as-st\">\n      <span>{{'order-k-st'|i18n}}</span>\n      <em>{{OrderStatus|i18n}}</em>\n    </div>\n  </div>\n  <!--\n    Product list\n  -->\n  <div class=\"as-products\">\n    <table>\n      <tr\n        v-for=\"it in Products\"\n          class=\"as-pro-it\">\n          <!--Thumb-->\n          <td><a \n              :href=\"it.href\"\n              @click.left.prevent=\"OnClickProduct(it)\"><img :src=\"it.src\"/></a></td>\n          <!--Title-->\n          <td>\n              <a \n                :href=\"it.href\"\n                @click.left.prevent=\"OnClickProduct(it)\">{{it.title}}</a>\n          </td>\n          <!--Price-->\n          <td class=\"as-price\">{{CurrencyChar}}{{it.price}}</td>\n          <!--Amount-->\n          <td class=\"as-amount\">x{{it.amount}}</td>\n          <!--Subtotal-->\n          <td class=\"as-subtotal\">{{CurrencyChar}}{{it.subtotal}}</td>\n      </tr>\n    </table>\n  </div>\n</div>"); //============================================================
  // JOIN: web/tile/order/web-tile-order.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////
      props: {
        "value": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "proThumbSrc": {
          type: String,
          "default": undefined
        },
        "proHref": {
          type: String,
          "default": undefined
        },
        "href": {
          type: String,
          "default": undefined
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass("is-".concat(this.OrderStatus));
        },
        //--------------------------------------
        Order: function Order() {
          return this.value || {};
        },
        //--------------------------------------
        OrderId: function OrderId() {
          var orId = this.Order.id;

          if (orId) {
            var pos = orId.indexOf(':');

            if (pos > 0) {
              return _.trim(orId.substring(pos + 1));
            }

            return orId;
          }

          return '- unknown -';
        },
        //--------------------------------------
        OrderStatus: function OrderStatus() {
          return "or-st-".concat(_.toLower(this.Order.or_st));
        },
        //--------------------------------------
        OrderHref: function OrderHref() {
          if (this.href) {
            return Ti.S.renderBy(this.href, this.Order);
          }
        },
        //--------------------------------------
        CurrencyChar: function CurrencyChar() {
          return Ti.Bank.getCurrencyChar(this.Order.currency || "RMB");
        },
        //--------------------------------------
        Products: function Products() {
          var _this207 = this;

          var list = [];

          _.forEach(this.value.products, function (it) {
            var pro = _objectSpread({}, it);

            if (_this207.proThumbSrc) {
              pro.src = Ti.S.renderBy(_this207.proThumbSrc, it);
            }

            if (_this207.proHref) {
              pro.href = Ti.S.renderBy(_this207.proHref, it);
            }

            pro.subtotal = Ti.Num.precise(it.price * it.amount);
            list.push(pro);
          });

          return list;
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnClickOrder: function OnClickOrder() {
          if (this.Order.id) this.$notify("show:order", this.Order.id);
        },
        //--------------------------------------
        OnClickProduct: function OnClickProduct(_ref110) {
          var id = _ref110.id;

          if (id) {
            this.$notify("open:product", id);
          }
        } //--------------------------------------

      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/tile/order/web-tile-order.mjs", _M);
  })(); //============================================================
  // JOIN: web/tile/order/_com.json
  //============================================================


  Ti.Preload("ti/com/web/tile/order/_com.json", {
    "name": "web-tile-order",
    "globally": true,
    "template": "./web-tile-order.html",
    "mixins": ["./web-tile-order.mjs"]
  }); //============================================================
  // JOIN: web/widget/frame/widget-frame.html
  //============================================================

  Ti.Preload("ti/com/web/widget/frame/widget-frame.html", "<div class=\"web-widget-frame\"\n  :class=\"TopClass\">\n  <template v-if=\"hasFrameSrce\">\n    <iframe :src=\"FrameSrce\" class=\"ti-fill-parent\" :style=\"FrameStyle\"></iframe>\n  </template>\n</div>"); //============================================================
  // JOIN: web/widget/frame/widget-frame.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      props: {
        "src": {
          type: String,
          "default": undefined
        }
      },
      /////////////////////////////////////////
      computed: {
        //------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //------------------------------------
        FrameSrce: function FrameSrce() {
          return _.trim(this.src);
        },
        //------------------------------------
        hasFrameSrce: function hasFrameSrce() {
          return this.FrameSrce ? true : false;
        },
        //------------------------------------
        FrameStyle: function FrameStyle() {
          return {
            border: 0
          };
        } //------------------------------------

      },
      /////////////////////////////////////////
      methods: {} //------------------------------------
      //------------------------------------
      /////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/widget/frame/widget-frame.mjs", _M);
  })(); //============================================================
  // JOIN: web/widget/frame/_com.json
  //============================================================


  Ti.Preload("ti/com/web/widget/frame/_com.json", {
    "name": "web-widget-frame",
    "globally": true,
    "template": "./widget-frame.html",
    "mixins": ["./widget-frame.mjs"],
    "components": []
  }); //============================================================
  // JOIN: web/widget/input/text/widget-input-text.html
  //============================================================

  Ti.Preload("ti/com/web/widget/input/text/widget-input-text.html", "<div class=\"web-widget-input-text\" \n  :class=\"TopClass\" \n  :style=\"TopStyle\"\n  v-ti-activable>\n  <!--\n    Title\n  -->\n  <div\n    v-if=\"hasTitle\"\n      class=\"as-title\">\n      <span>{{title|i18n}}</span>\n      <template v-if=\"total\">\n        <i class=\"far fa-comments\"></i>\n        <em>{{total}}</em>\n      </template>\n  </div>\n  <!--\n    Text\n  -->\n  <div class=\"as-text\">\n    <textarea\n      ref=\"text\"\n      spellcheck=\"false\"\n      :placeholder=\"placeholder | i18n\"\n      :value=\"TextValue\"\n      @change=\"OnTextChange\"></textarea>\n    <!--\n      Bottom Bar\n    -->\n    <div class=\"as-bar\">\n      <!--\n        Left\n      -->\n      <div class=\"at-left\">\n        <div class=\"as-btn btn-emoji\"\n          @click.left=\"OnBtnEmojiClick\">\n          <ti-icon \n            v-if=\"emojiBtnIcon\"\n              :value=\"emojiBtnIcon\"/>\n          <span>{{emojiBtnText|i18n}}</span>\n        </div>\n      </div> <!--Left-->\n      <!--\n        Right\n      -->\n      <div class=\"at-right\">\n        <div class=\"as-btn btn-post\"\n          @click.left=\"OnBtnPostClick\">\n          <ti-icon \n            v-if=\"postBtnIcon\"\n              :value=\"postBtnIcon\"/>\n          <span>{{postBtnText|i18n}}</span>\n        </div>\n      </div> <!-- Right -->\n    </div> <!-- Bottom Bar-->\n  </div>\n</div>"); //============================================================
  // JOIN: web/widget/input/text/widget-input-text.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          myText: undefined
        };
      },
      ////////////////////////////////////////////////////
      props: {
        //-----------------------------------
        // Data
        //-----------------------------------
        "title": {
          type: String,
          "default": "i18n:comments"
        },
        "value": {
          type: String,
          "default": undefined
        },
        "total": {
          type: Number,
          "default": undefined
        },
        //-----------------------------------
        // Behavior
        //-----------------------------------
        "trimed": {
          type: Boolean,
          "default": true
        },
        "resetAfterPost": {
          type: Boolean,
          "default": false
        },
        //-----------------------------------
        // Aspect
        //-----------------------------------
        "placeholder": {
          type: [String, Number],
          "default": undefined
        },
        "hideBorder": {
          type: Boolean,
          "default": false
        },
        "emojiBtnIcon": {
          type: String,
          "default": "far-smile"
        },
        "emojiBtnText": {
          type: String,
          "default": "i18n:emoji"
        },
        "postBtnIcon": {
          type: String,
          "default": "fas-paper-plane"
        },
        "postBtnText": {
          type: String,
          "default": "i18n:post"
        },
        //-----------------------------------
        // Measure
        //-----------------------------------
        "width": {
          type: [Number, String],
          "default": "100%"
        },
        "height": {
          type: [Number, String],
          "default": "2.6rem"
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        TopClass: function TopClass() {
          return Ti.Css.mergeClassName(this.className, {
            "is-self-actived": this.isSelfActived,
            "show-border": !this.hideBorder,
            "hide-border": this.hideBorder
          });
        },
        //------------------------------------------------
        TopStyle: function TopStyle() {
          return Ti.Css.toStyle({
            width: this.width,
            height: this.height
          });
        },
        //------------------------------------------------
        hasTitle: function hasTitle() {
          return this.title ? true : false;
        },
        //------------------------------------------------
        TextValue: function TextValue() {
          return Ti.Util.fallbackNil(this.myText, this.value);
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        OnTextChange: function OnTextChange() {
          var str = this.$refs.text.value;
          this.myText = this.formatValue(str);
        },
        //------------------------------------------------
        OnBtnEmojiClick: function OnBtnEmojiClick() {
          var _this208 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee99() {
            var i_start, i_end, emoji, str, s_0, s_1;
            return regeneratorRuntime.wrap(function _callee99$(_context99) {
              while (1) {
                switch (_context99.prev = _context99.next) {
                  case 0:
                    // Get Text Range
                    i_start = _this208.$refs.text.selectionStart;
                    i_end = _this208.$refs.text.selectionEnd;
                    _context99.next = 4;
                    return Ti.App.Open({
                      title: "i18n:emoji",
                      width: "6.4rem",
                      height: "4.8rem",
                      textOk: null,
                      changeToClose: true,
                      comType: "TiSheetEmoji",
                      comConf: {}
                    });

                  case 4:
                    emoji = _context99.sent;

                    if (emoji) {
                      _context99.next = 7;
                      break;
                    }

                    return _context99.abrupt("return");

                  case 7:
                    // Insert emoji
                    str = _this208.$refs.text.value;
                    s_0 = str.substring(0, i_start);
                    s_1 = str.substring(i_end);
                    _this208.myText = s_0 + emoji + s_1;

                  case 11:
                  case "end":
                    return _context99.stop();
                }
              }
            }, _callee99);
          }))();
        },
        //------------------------------------------------
        OnBtnPostClick: function OnBtnPostClick() {
          var str = this.formatValue(this.$refs.text.value);

          if (str && str.length > 10) {
            this.$notify("post", str);

            if (this.resetAfterPost) {
              this.myText = "";
            }
          } // Blank text or content too short
          else {
              Ti.Toast.Open('i18n:post-content-blank', "warn");
            }
        },
        //------------------------------------------------
        formatValue: function formatValue(val) {
          if (val && this.trimed) {
            return _.trim(val);
          }

          return val;
        } //------------------------------------------------

      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/widget/input/text/widget-input-text.mjs", _M);
  })(); //============================================================
  // JOIN: web/widget/input/text/_com.json
  //============================================================


  Ti.Preload("ti/com/web/widget/input/text/_com.json", {
    "name": "web-widget-input-text",
    "globally": true,
    "template": "./widget-input-text.html",
    "mixins": ["./widget-input-text.mjs"],
    "components": ["@com:ti/sheet/emoji"]
  }); //============================================================
  // JOIN: web/widget/sharebar/widget-sharebar.html
  //============================================================

  Ti.Preload("ti/com/web/widget/sharebar/widget-sharebar.html", "<div class=\"web-widget-sharebar\"\n  :class=\"TopClass\">\n  <!--\n    Title\n  -->\n  <div\n    v-if=\"title\"\n      class=\"as-title\">{{title|i18n}}</div>\n  <!--\n    Items\n  -->\n  <div class=\"as-items\">\n    <a\n      v-for=\"it in TheItems\"\n        class=\"bar-item\">\n      <i :class=\"it.iconClass\"></i>\n    </a>\n  </div>\n</div>"); //============================================================
  // JOIN: web/widget/sharebar/widget-sharebar.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      props: {
        "title": {
          type: String,
          "default": null
        },
        "items": {
          type: Array,
          "default": function _default() {
            return [];
          }
        }
      },
      /////////////////////////////////////////
      computed: {
        //------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //------------------------------------
        TheItems: function TheItems() {
          return this.evalItems(this.items);
        } //------------------------------------

      },
      /////////////////////////////////////////
      methods: {
        //------------------------------------
        evalItems: function evalItems(items) {
          var list = [];

          _.forEach(items, function (it, index) {
            //................................
            var li = {
              //..............................
              "facebook": {
                iconClass: "fab fa-facebook-f"
              },
              //..............................
              "twitter": {
                iconClass: "fab fa-twitter"
              },
              //..............................
              "instagram": {
                iconClass: "fab fa-instagram"
              },
              //..............................
              "tumblr": {
                iconClass: "fab fa-tumblr"
              } //..............................
              //..............................

            }[it]; //................................

            if (li) list.push(li); //................................
          });

          return list;
        } //------------------------------------

      } /////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/widget/sharebar/widget-sharebar.mjs", _M);
  })(); //============================================================
  // JOIN: web/widget/sharebar/_com.json
  //============================================================


  Ti.Preload("ti/com/web/widget/sharebar/_com.json", {
    "name": "web-widget-sharebar",
    "globally": true,
    "template": "./widget-sharebar.html",
    "mixins": ["./widget-sharebar.mjs"],
    "components": []
  }); //============================================================
  // JOIN: web/widget/summary/widget-summary.html
  //============================================================

  Ti.Preload("ti/com/web/widget/summary/widget-summary.html", "<div class=\"web-widget-summary\"\n  :class=\"TopClass\">\n  <!--\n    Title\n  -->\n  <div\n    v-if=\"title\"\n      class=\"as-title\">{{title|i18n}}</div>\n  <!--\n    Items\n  -->\n  <div class=\"as-list\">\n    <div\n      v-for=\"it in TheItems\"\n        class=\"as-item\">\n      <!--Icon-->\n      <ti-icon\n        v-if=\"it.icon\"\n          :value=\"it.icon\"/>\n      <!--Value-->\n      <div class=\"as-value\">{{it.value}}</div>\n      <!--Text-->\n      <div\n        v-if=\"it.text\"\n          class=\"as-text\">{{it.text|i18n}}</div>\n    </div>\n  </div>\n</div>"); //============================================================
  // JOIN: web/widget/summary/widget-summary.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      props: {
        "title": {
          type: String,
          "default": undefined
        },
        "items": {
          type: Array,
          "default": function _default() {
            return [];
          }
        }
      },
      /////////////////////////////////////////
      computed: {
        //------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //------------------------------------
        TheItems: function TheItems() {
          var list = [];

          _.forEach(this.items, function (it, index) {
            list.push({
              key: "it-".concat(index),
              index: index,
              icon: it.icon,
              text: it.text,
              value: it.value || 0
            });
          });

          return list;
        } //------------------------------------

      } /////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/widget/summary/widget-summary.mjs", _M);
  })(); //============================================================
  // JOIN: web/widget/summary/_com.json
  //============================================================


  Ti.Preload("ti/com/web/widget/summary/_com.json", {
    "name": "web-widget-summary",
    "globally": true,
    "template": "./widget-summary.html",
    "mixins": ["./widget-summary.mjs"],
    "components": []
  }); //============================================================
  // JOIN: web/widget/user/widget-user.html
  //============================================================

  Ti.Preload("ti/com/web/widget/user/widget-user.html", "<div class=\"web-widget-user\"\n  :class=\"TopClass\">\n  <!--\n    Avatar\n  -->\n  <div class=\"as-avatar\">\n    <ti-icon :value=\"TheAvatar\"/>\n  </div>\n  <!--\n    Nickname\n  -->\n  <div class=\"as-title\">\n    <div class=\"as-nickname\">{{TheNickname}}</div>\n  </div>\n  <!--\n    Action bar\n  -->\n  <div class=\"as-actions\">\n    <div \n      class=\"ti-btn reset-passwd\"\n      @click=\"$notify('go:passwd:reset')\">{{'passwd-reset'|i18n}}</div>\n    <div\n      class=\"ti-btn edit-profile\"\n      @click=\"$notify('go:my:profile')\">{{'profile-edit'|i18n}}</div>\n  </div>\n</div>"); //============================================================
  // JOIN: web/widget/user/widget-user.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      props: {
        "me": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "avatarSrc": {
          type: String,
          "default": undefined
        },
        "avatarIcons": {
          type: Object,
          "default": function _default() {
            return {
              "unknown": "far-user",
              "male": "im-user-male",
              "female": "im-user-female"
            };
          }
        }
      },
      /////////////////////////////////////////
      computed: {
        //------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //------------------------------------
        TheAvatar: function TheAvatar() {
          var me = this.me || {};

          if (this.avatarSrc && me.thumb) {
            return {
              type: "image",
              value: Ti.S.renderVars(me.thumb, this.avatarSrc)
            };
          } // Icon: male


          if (me.sex == 1) {
            return this.avatarIcons.male;
          } // Icon: female


          if (me.sex == 2) {
            return this.avatarIcons.female;
          } // Icon: unknown


          return this.avatarIcons.unknown || "far-user";
        },
        //------------------------------------
        TheNickname: function TheNickname() {
          var me = this.me || {};
          return me.nickname || me.email || me.phone || me.nm || me.id || "Anonymity";
        } //------------------------------------

      },
      /////////////////////////////////////////
      methods: {} //------------------------------------
      //------------------------------------
      /////////////////////////////////////////

    };
    Ti.Preload("ti/com/web/widget/user/widget-user.mjs", _M);
  })(); //============================================================
  // JOIN: web/widget/user/_com.json
  //============================================================


  Ti.Preload("ti/com/web/widget/user/_com.json", {
    "name": "web-widget-user",
    "globally": true,
    "template": "./widget-user.html",
    "mixins": ["./widget-user.mjs"],
    "components": []
  }); //============================================================
  // JOIN: wn/adaptlist/wn-adaptlist-methods.mjs
  //============================================================

  (function () {
    var OBJ = {
      //---------------------------------------

      /***
       * Create new object
       */
      doCreate: function doCreate() {
        var _this209 = this;

        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee100() {
          var _yield$Wn$Sys$exec, types, typeNames, freeCreate, no, json, newMeta;

          return regeneratorRuntime.wrap(function _callee100$(_context100) {
            while (1) {
              switch (_context100.prev = _context100.next) {
                case 0:
                  _context100.next = 2;
                  return Wn.Sys.exec("ti creation -cqn id:".concat(_this209.meta.id), {
                    as: "json"
                  });

                case 2:
                  _yield$Wn$Sys$exec = _context100.sent;
                  types = _yield$Wn$Sys$exec.types;
                  typeNames = _yield$Wn$Sys$exec.typeNames;
                  freeCreate = _yield$Wn$Sys$exec.freeCreate;
                  _context100.next = 8;
                  return Ti.App.Open({
                    title: "i18n:create",
                    type: "success",
                    position: "top",
                    width: 640,
                    height: "61.8%",
                    comType: "wn-obj-creation",
                    comConf: {
                      types: types,
                      freeCreate: freeCreate
                    },
                    components: ["@com:wn/obj/creation"]
                  });

                case 8:
                  no = _context100.sent;

                  if (!(no && no.name)) {
                    _context100.next = 34;
                    break;
                  }

                  if (!(no.name.search(/[%;:"'*?`\t^<>\/\\]/) >= 0)) {
                    _context100.next = 14;
                    break;
                  }

                  _context100.next = 13;
                  return Ti.Alert('i18n:wn-create-invalid');

                case 13:
                  return _context100.abrupt("return", _context100.sent);

                case 14:
                  if (!(no.length > 256)) {
                    _context100.next = 18;
                    break;
                  }

                  _context100.next = 17;
                  return Ti.Alert('i18n:wn-create-too-long');

                case 17:
                  return _context100.abrupt("return", _context100.sent);

                case 18:
                  // Default Race
                  no.race = no.race || "FILE";

                  if ("folder" == no.type) {
                    no.type = undefined;
                  } // Auto type


                  if ("FILE" == no.race) {
                    if (!no.type) {
                      no.type = Ti.Util.getSuffixName(no.name);
                    } // Auto append suffix name


                    if (!no.name.endsWith(no.type)) {
                      no.name += ".".concat(no.type);
                    }
                  } // Do the creation


                  json = JSON.stringify({
                    nm: no.name,
                    tp: no.type,
                    race: no.race,
                    mime: no.mime
                  });
                  _context100.next = 24;
                  return Wn.Sys.exec2("obj id:".concat(_this209.meta.id, " -cqno -new '").concat(json, "'"), {
                    as: "json"
                  });

                case 24:
                  newMeta = _context100.sent;

                  if (!(newMeta instanceof Error)) {
                    _context100.next = 29;
                    break;
                  }

                  Ti.Toast.Open("i18n:wn-create-fail", "error");
                  _context100.next = 34;
                  break;

                case 29:
                  Ti.Toast.Open("i18n:wn-create-ok", "success");
                  _context100.next = 32;
                  return _this209._run("reload");

                case 32:
                  // Make it checked
                  _this209.myCheckedIds = [newMeta.id];
                  _this209.myCurrentId = newMeta.id;

                case 34:
                case "end":
                  return _context100.stop();
              }
            }
          }, _callee100);
        }))();
      },
      //--------------------------------------------
      doRename: function doRename() {
        var _this210 = this;

        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee101() {
          var it, newName, oldSuffix, newSuffix, repair, newMeta;
          return regeneratorRuntime.wrap(function _callee101$(_context101) {
            while (1) {
              switch (_context101.prev = _context101.next) {
                case 0:
                  it = _this210.getCurrentItem();

                  if (it) {
                    _context101.next = 5;
                    break;
                  }

                  _context101.next = 4;
                  return Ti.Toast.Open('i18n:wn-rename-none', "warn");

                case 4:
                  return _context101.abrupt("return", _context101.sent);

                case 5:
                  _this210.setItemStatus(it.id, "renaming");

                  _context101.prev = 6;
                  _context101.next = 9;
                  return Ti.Prompt({
                    text: 'i18n:wn-rename',
                    vars: {
                      name: it.nm
                    }
                  }, {
                    title: "i18n:rename",
                    placeholder: it.nm,
                    value: it.nm
                  });

                case 9:
                  newName = _context101.sent;

                  if (!newName) {
                    _context101.next = 32;
                    break;
                  }

                  if (!(newName.search(/[%;:"'*?`\t^<>\/\\]/) >= 0)) {
                    _context101.next = 15;
                    break;
                  }

                  _context101.next = 14;
                  return Ti.Alert('i18n:wn-rename-invalid');

                case 14:
                  return _context101.abrupt("return", _context101.sent);

                case 15:
                  if (!(newName.length > 256)) {
                    _context101.next = 19;
                    break;
                  }

                  _context101.next = 18;
                  return Ti.Alert('i18n:wn-rename-too-long');

                case 18:
                  return _context101.abrupt("return", _context101.sent);

                case 19:
                  // Check the suffix Name
                  oldSuffix = Ti.Util.getSuffix(it.nm);
                  newSuffix = Ti.Util.getSuffix(newName);

                  if (!(oldSuffix && oldSuffix != newSuffix)) {
                    _context101.next = 26;
                    break;
                  }

                  _context101.next = 24;
                  return Ti.Confirm("i18n:wn-rename-suffix-changed");

                case 24:
                  repair = _context101.sent;

                  if (repair) {
                    newName += oldSuffix;
                  }

                case 26:
                  // Mark renaming
                  _this210.setItemStatus(it.id, "loading"); // Do the rename


                  _context101.next = 29;
                  return Wn.Sys.exec2("obj id:".concat(it.id, " -cqno -u 'nm:\"").concat(newName, "\"'"), {
                    as: "json"
                  });

                case 29:
                  newMeta = _context101.sent;

                  // Error
                  if (newMeta instanceof Error) {
                    Ti.Toast.Open("i18n:wn-rename-fail", "error");
                  } // Replace the data
                  else {
                      Ti.Toast.Open("i18n:wn-rename-ok", "success");

                      _this210.setItem(newMeta);
                    }

                  _this210.setItemStatus({
                    id: it.id,
                    status: {
                      loading: false
                    }
                  });

                case 32:
                  _context101.prev = 32;

                  _this210.setItemStatus(it.id, null);

                  return _context101.finish(32);

                case 35:
                case "end":
                  return _context101.stop();
              }
            }
          }, _callee101, null, [[6,, 32, 35]]);
        }))();
      },
      //--------------------------------------------
      doDelete: function doDelete() {
        var _this211 = this;

        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee102() {
          var list, delCount, exRemovedIds, _iterator72, _step72, it, count, m, vdId;

          return regeneratorRuntime.wrap(function _callee102$(_context102) {
            while (1) {
              switch (_context102.prev = _context102.next) {
                case 0:
                  list = _this211.getCheckedItems(); // Guard

                  if (!_.isEmpty(list)) {
                    _context102.next = 5;
                    break;
                  }

                  _context102.next = 4;
                  return Ti.Toast.Open('i18n:wn-del-none', "warn");

                case 4:
                  return _context102.abrupt("return", _context102.sent);

                case 5:
                  console.log("haha!!!");
                  delCount = 0; // make removed files. it remove a video
                  // it will auto-remove the `videoc_dir` in serverside also
                  // so, in order to avoid delete the no-exists file, I should
                  // remove the `videoc_dir` ID here, each time loop, check current
                  // match the id set or not, then I will get peace

                  exRemovedIds = {};
                  _context102.prev = 8;
                  // Loop items
                  _iterator72 = _createForOfIteratorHelper(list);
                  _context102.prev = 10;

                  _iterator72.s();

                case 12:
                  if ((_step72 = _iterator72.n()).done) {
                    _context102.next = 40;
                    break;
                  }

                  it = _step72.value;

                  if (!(!it || !it.id || !it.nm)) {
                    _context102.next = 16;
                    break;
                  }

                  return _context102.abrupt("continue", 38);

                case 16:
                  if (!(it.__is && (it.__is.loading || it.__is.removed))) {
                    _context102.next = 18;
                    break;
                  }

                  return _context102.abrupt("continue", 38);

                case 18:
                  if (!exRemovedIds[it.id]) {
                    _context102.next = 20;
                    break;
                  }

                  return _context102.abrupt("continue", 38);

                case 20:
                  // Mark item is processing
                  _this211.setItemStatus(it.id, "loading"); // If DIR, check it is empty or not


                  if (!('DIR' == it.race)) {
                    _context102.next = 32;
                    break;
                  }

                  _context102.next = 24;
                  return Wn.Sys.exec("count -A id:".concat(it.id));

                case 24:
                  count = _context102.sent;
                  count = parseInt(count);

                  if (!(count > 0)) {
                    _context102.next = 32;
                    break;
                  }

                  _context102.next = 29;
                  return Ti.Confirm({
                    text: 'i18n:wn-del-no-empty-folder',
                    vars: {
                      nm: it.nm
                    }
                  });

                case 29:
                  if (_context102.sent) {
                    _context102.next = 32;
                    break;
                  }

                  _this211.setItemStatus(it.id, null);

                  return _context102.abrupt("continue", 38);

                case 32:
                  _context102.next = 34;
                  return Wn.Sys.exec("rm ".concat('DIR' == it.race ? "-r" : "", " id:").concat(it.id));

                case 34:
                  // Mark item removed
                  _this211.setItemStatus(it.id, "removed"); // If video result folder, mark it at same time


                  m = /^id:(.+)$/.exec(it.videoc_dir);

                  if (m) {
                    vdId = m[1];
                    exRemovedIds[vdId] = true;

                    _this211.setItemStatus(vdId, "removed");
                  } // Counting


                  delCount++; // Then continue the loop .......^

                case 38:
                  _context102.next = 12;
                  break;

                case 40:
                  _context102.next = 45;
                  break;

                case 42:
                  _context102.prev = 42;
                  _context102.t0 = _context102["catch"](10);

                  _iterator72.e(_context102.t0);

                case 45:
                  _context102.prev = 45;

                  _iterator72.f();

                  return _context102.finish(45);

                case 48:
                  _context102.next = 50;
                  return _this211._run("reload");

                case 50:
                  _context102.prev = 50;
                  Ti.Toast.Open("i18n:wn-del-ok", {
                    N: delCount
                  }, "success");
                  return _context102.finish(50);

                case 53:
                case "end":
                  return _context102.stop();
              }
            }
          }, _callee102, null, [[8,, 50, 53], [10, 42, 45, 48]]);
        }))();
      },
      //--------------------------------------------
      doUpload: function doUpload() {
        var _arguments19 = arguments,
            _this212 = this;

        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee103() {
          var files, ups, newIds, _iterator73, _step73, _loop;

          return regeneratorRuntime.wrap(function _callee103$(_context104) {
            while (1) {
              switch (_context104.prev = _context104.next) {
                case 0:
                  files = _arguments19.length > 0 && _arguments19[0] !== undefined ? _arguments19[0] : [];

                  if (!_.isFunction(_this212.beforeUpload)) {
                    _context104.next = 4;
                    break;
                  }

                  _context104.next = 4;
                  return _this212.beforeUpload();

                case 4:
                  // Prepare the list
                  ups = _.map(files, function (file, index) {
                    return {
                      id: "U".concat(index, "_").concat(Ti.Random.str(6)),
                      file: file,
                      total: file.size,
                      current: 0
                    };
                  }); // Show Uploading

                  _this212.myUploadigFiles = ups; // Prepare the list

                  newIds = {}; // Do upload file one by one

                  _iterator73 = _createForOfIteratorHelper(ups);
                  _context104.prev = 8;
                  _loop = /*#__PURE__*/regeneratorRuntime.mark(function _loop() {
                    var up, file, _yield$Wn$Io$uploadFi, ok, data;

                    return regeneratorRuntime.wrap(function _loop$(_context103) {
                      while (1) {
                        switch (_context103.prev = _context103.next) {
                          case 0:
                            up = _step73.value;
                            file = up.file;
                            _context103.next = 4;
                            return Wn.Io.uploadFile(file, {
                              target: "id:".concat(_this212.meta.id),
                              progress: function progress(pe) {
                                up.current = pe.loaded;
                              }
                            });

                          case 4:
                            _yield$Wn$Io$uploadFi = _context103.sent;
                            ok = _yield$Wn$Io$uploadFi.ok;
                            data = _yield$Wn$Io$uploadFi.data;

                            if (ok) {
                              newIds[data.id] = true;
                            }

                          case 8:
                          case "end":
                            return _context103.stop();
                        }
                      }
                    }, _loop);
                  });

                  _iterator73.s();

                case 11:
                  if ((_step73 = _iterator73.n()).done) {
                    _context104.next = 15;
                    break;
                  }

                  return _context104.delegateYield(_loop(), "t0", 13);

                case 13:
                  _context104.next = 11;
                  break;

                case 15:
                  _context104.next = 20;
                  break;

                case 17:
                  _context104.prev = 17;
                  _context104.t1 = _context104["catch"](8);

                  _iterator73.e(_context104.t1);

                case 20:
                  _context104.prev = 20;

                  _iterator73.f();

                  return _context104.finish(20);

                case 23:
                  // All done, hide upload
                  _.delay(function () {
                    _this212.myUploadigFiles = [];
                  }, 1000); // Tell user ...


                  Ti.Toast.Open("i18n:upload-done", "success"); // Call reload

                  _context104.next = 27;
                  return _this212._run("reload");

                case 27:
                  // Make it checked
                  _this212.myCheckedIds = newIds;
                  _this212.myCurrentId = null;

                case 29:
                case "end":
                  return _context104.stop();
              }
            }
          }, _callee103, null, [[8, 17, 20, 23]]);
        }))();
      },
      //--------------------------------------------
      doDownload: function doDownload() {
        var _this213 = this;

        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee104() {
          var list, _iterator74, _step74, it, link;

          return regeneratorRuntime.wrap(function _callee104$(_context105) {
            while (1) {
              switch (_context105.prev = _context105.next) {
                case 0:
                  list = _this213.getCheckedItems();

                  if (!_.isEmpty(list)) {
                    _context105.next = 5;
                    break;
                  }

                  _context105.next = 4;
                  return Ti.Toast.Open('i18n:wn-download-none', "warn");

                case 4:
                  return _context105.abrupt("return", _context105.sent);

                case 5:
                  if (!(list.length > 5)) {
                    _context105.next = 10;
                    break;
                  }

                  _context105.next = 8;
                  return Ti.Confirm({
                    text: "i18n:wn-download-too-many",
                    vars: {
                      N: list.length
                    }
                  });

                case 8:
                  if (_context105.sent) {
                    _context105.next = 10;
                    break;
                  }

                  return _context105.abrupt("return");

                case 10:
                  // Do the download
                  _iterator74 = _createForOfIteratorHelper(list);
                  _context105.prev = 11;

                  _iterator74.s();

                case 13:
                  if ((_step74 = _iterator74.n()).done) {
                    _context105.next = 25;
                    break;
                  }

                  it = _step74.value;

                  if (!('FILE' != it.race)) {
                    _context105.next = 21;
                    break;
                  }

                  _context105.next = 18;
                  return Ti.Confirm({
                    text: "i18n:wn-download-dir",
                    vars: it
                  }, {
                    textYes: "i18n:continue",
                    textNo: "i18n:terminate"
                  });

                case 18:
                  if (_context105.sent) {
                    _context105.next = 20;
                    break;
                  }

                  return _context105.abrupt("return");

                case 20:
                  return _context105.abrupt("continue", 23);

                case 21:
                  link = Wn.Util.getDownloadLink(it);
                  Ti.Be.OpenLink(link);

                case 23:
                  _context105.next = 13;
                  break;

                case 25:
                  _context105.next = 30;
                  break;

                case 27:
                  _context105.prev = 27;
                  _context105.t0 = _context105["catch"](11);

                  _iterator74.e(_context105.t0);

                case 30:
                  _context105.prev = 30;

                  _iterator74.f();

                  return _context105.finish(30);

                case 33:
                case "end":
                  return _context105.stop();
              }
            }
          }, _callee104, null, [[11, 27, 30, 33]]);
        }))();
      } //--------------------------------------------

    };
    Ti.Preload("ti/com/wn/adaptlist/wn-adaptlist-methods.mjs", OBJ);
  })(); //============================================================
  // JOIN: wn/adaptlist/wn-adaptlist-props.mjs
  //============================================================


  (function () {
    var _M = {
      //-----------------------------------
      // Data
      //-----------------------------------
      "meta": {
        type: Object,
        "default": null
      },
      // {list:[], pager:{..}}
      "data": {
        type: [Object, Array],
        "default": null
      },
      "changedId": {
        type: String,
        "default": null
      },
      "status": {
        type: Object,
        "default": function _default() {
          return {
            reloading: false
          };
        }
      },
      //-----------------------------------
      // Behavior
      //-----------------------------------
      // Drop files to upload
      "droppable": {
        type: Boolean,
        "default": true
      },
      // multi-selectable
      // effected when selectable is true
      "multi": {
        type: Boolean,
        "default": true
      },
      "checkable": {
        type: Boolean,
        "default": true
      },
      "blurable": {
        type: Boolean,
        "default": true
      },
      "selectable": {
        type: Boolean,
        "default": true
      },
      // aspect: list item spacing
      // `xs|sm|md|lg|xl`
      "spacing": {
        type: String,
        "default": "sm"
      },
      "keeyHiddenBy": {
        type: String,
        "default": "wn-list-adaptview-expose-hidden"
      },
      "routers": {
        type: Object,
        "default": function _default() {
          return {
            "reload": "dispatch:current/reload"
          };
        }
      },
      "listConf": {
        type: Object,
        "default": undefined
      },
      //-----------------------------------
      // Aspect
      //-----------------------------------
      "itemClassName": {
        type: String,
        "default": null
      },
      //-----------------------------------
      // Callback
      //-----------------------------------
      "beforeUpload": {
        type: Function,
        "default": undefined
      }
    };
    Ti.Preload("ti/com/wn/adaptlist/wn-adaptlist-props.mjs", _M);
  })(); //============================================================
  // JOIN: wn/adaptlist/wn-adaptlist.html
  //============================================================


  Ti.Preload("ti/com/wn/adaptlist/wn-adaptlist.html", "<div class=\"wn-adaptlist\" \n  :class=\"TopClass\"\n  v-ti-activable>\n  <div\n    class=\"list-con ti-fill-parent\"\n    v-drop-files.mask=\"OnDropFiles\">\n    <!--==================================\n      Show Loading\n    -->\n    <ti-loading\n      v-if=\"isReloading\"\n        class=\"as-reloading as-mid-tip\"\n        text=\"i18n:reloading\"/>\n    <!--==================================\n      Data List\n    -->\n    <ti-wall\n      v-else\n        class=\"ti-fill-parent\"\n        :data=\"WallDataList\"\n        :spacing=\"spacing\"\n        :changed-id=\"changedId\"\n        :current-id=\"myCurrentId\"\n        :checked-ids=\"myCheckedIds\"\n        :multi=\"multi\"\n        :checkable=\"checkable\"\n        :blurable=\"blurable\"\n        :selectable=\"selectable\"\n        :display=\"WallItemDisplay\"\n        :puppet-mode=\"true\"\n        v-bind=\"listConf\"\n        :on-init=\"OnListInit\"\n        @select=\"OnItemSelecteItem\"\n        @open=\"OnItemOpen\"/>\n    <!--==================================\n      Hidden file upload control\n    -->\n    <input \n      type=\"file\" \n      ref=\"file\" \n      class=\"ti-hide\"\n      multiple\n      @change.stop.seft=\"OnSelectLocalFilesToUpload\">\n    <!--==================================\n      Uploading Pannel\n    -->\n    <div\n      class=\"wal-uploading\"\n      :class=\"UploadingClass\">\n      <header>\n        <ti-icon value=\"fas-spinner fa-pulse\"/>\n        <span>{{'uploading'|i18n}}</span>\n      </header>\n      <section>\n        <ti-wall \n          :data=\"TheUploadingList\"\n          :spacing=\"spacing\"\n          :selectable=\"false\"\n          :multi=\"false\"\n          :checkable=\"false\"\n          :blurable=\"false\"\n          :display=\"UploadingItemDisplay\"\n          :puppet-mode=\"true\"/>\n      </section>\n    </div>\n    <!--==================================-->\n  </div>\n</div>"); //============================================================
  // JOIN: wn/adaptlist/wn-adaptlist.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////
      data: function data() {
        return {
          myCurrentId: null,
          myCheckedIds: {},
          myUploadigFiles: [],
          myItemStatus: {},
          myExposeHidden: true,
          myData: null
        };
      },
      ////////////////////////////////////////////////
      computed: {
        //--------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //--------------------------------------------
        isReloading: function isReloading() {
          return _.get(this.status, "reloading");
        },
        //--------------------------------------------
        WallItemDisplay: function WallItemDisplay() {
          return {
            key: "..",
            // transformer : {
            //   name : "Wn.Util.getObjThumbInfo",
            //   args : [{
            //       status : this.myItemStatus,
            //       exposeHidden : this.myExposeHidden
            //     }]
            // },
            comType: 'ti-obj-thumb',
            comConf: {
              "...": "${=value}"
            }
          };
        },
        //--------------------------------------------
        UploadingItemDisplay: function UploadingItemDisplay() {
          return {
            key: "..",
            comType: 'ti-obj-thumb',
            comConf: {
              "...": "${=value}"
            }
          };
        },
        //--------------------------------------------
        hasDataList: function hasDataList() {
          return this.myData && _.isArray(this.myData.list);
        },
        //--------------------------------------------
        WallDataList: function WallDataList() {
          if (!this.myData || _.isEmpty(this.myData.list)) {
            return [];
          }

          var list = [];

          var _iterator75 = _createForOfIteratorHelper(this.myData.list),
              _step75;

          try {
            for (_iterator75.s(); !(_step75 = _iterator75.n()).done;) {
              var it = _step75.value;

              if (!this.isHiddenItem(it)) {
                var li = Wn.Util.getObjThumbInfo(it, {
                  status: this.myItemStatus,
                  exposeHidden: this.myExposeHidden
                });
                list.push(li); //list.push(it)
              }
            }
          } catch (err) {
            _iterator75.e(err);
          } finally {
            _iterator75.f();
          }

          return list;
        },
        //--------------------------------------------

        /***
         * Show uploading list
         */
        TheUploadingList: function TheUploadingList() {
          var list = this.myUploadigFiles;
          var re = [];

          if (_.isArray(list)) {
            var _iterator76 = _createForOfIteratorHelper(list),
                _step76;

            try {
              for (_iterator76.s(); !(_step76 = _iterator76.n()).done;) {
                var it = _step76.value;
                // Gen Preview for local image
                var mime = it.file.type;
                var tp = Ti.Util.getSuffixName(it.file.name);
                var preview = void 0;

                if (/^image\//.test(mime)) {
                  preview = {
                    type: "localFile",
                    value: it.file
                  };
                } else {
                  preview = Ti.Icons.get({
                    tp: tp,
                    mime: mime
                  });
                } // Join to result list


                re.push({
                  id: it.id,
                  title: it.file.name,
                  preview: preview,
                  progress: it.current / it.total
                });
              }
            } catch (err) {
              _iterator76.e(err);
            } finally {
              _iterator76.f();
            }
          }

          return re;
        },
        //--------------------------------------------

        /***
         * has uploading
         */
        hasUploading: function hasUploading() {
          return this.myUploadigFiles.length > 0;
        },
        //--------------------------------------------
        UploadingClass: function UploadingClass() {
          return this.hasUploading ? "up-show" : "up-hide";
        } //--------------------------------------------

      },
      // ~ computed
      ////////////////////////////////////////////////
      methods: {
        //--------------------------------------------
        OnListInit: function OnListInit($list) {
          this.$innerList = $list;
        },
        //--------------------------------------------
        // Events
        //--------------------------------------------
        OnItemSelecteItem: function OnItemSelecteItem(_ref111) {
          var currentId = _ref111.currentId,
              checkedIds = _ref111.checkedIds,
              currentIndex = _ref111.currentIndex;
          //console.log("OnSelected", currentId, checkedIds)
          // For Desktop
          this.myCurrentId = currentId;
          this.myCheckedIds = checkedIds;
          var context = {
            current: this.getCurrentItem(),
            checked: this.getCheckedItems(),
            checkedIds: checkedIds,
            currentId: currentId,
            currentIndex: currentIndex
          }; // Notify the real objects

          this.$notify("select", context);
          return {
            stop: true
          };
        },
        //--------------------------------------------
        OnItemOpen: function OnItemOpen() {
          var obj = this.getCurrentItem();

          if (obj) {
            this.$notify("open", obj);
          }
        },
        //--------------------------------------------
        OnDropFiles: function OnDropFiles(files) {
          var _this214 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee105() {
            var fs;
            return regeneratorRuntime.wrap(function _callee105$(_context106) {
              while (1) {
                switch (_context106.prev = _context106.next) {
                  case 0:
                    if (_this214.droppable) {
                      _context106.next = 2;
                      break;
                    }

                    return _context106.abrupt("return");

                  case 2:
                    fs = _toConsumableArray(files);
                    _context106.next = 5;
                    return _this214.doUpload(fs);

                  case 5:
                    // Wait the computed result and notify
                    _this214.$nextTick(function () {
                      // Find my checked files
                      var objs = [];

                      if (_this214.hasDataList) {
                        _.forEach(_this214.myData.list, function (it) {
                          if (_this214.myCheckedIds[it.id]) {
                            objs.push(it);
                          }
                        });
                      } // Emit events


                      _this214.$notify("uploaded", objs);
                    });

                  case 6:
                  case "end":
                    return _context106.stop();
                }
              }
            }, _callee105);
          }))();
        },
        //--------------------------------------------
        OnSelectLocalFilesToUpload: function OnSelectLocalFilesToUpload(evt) {
          var _this215 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee106() {
            return regeneratorRuntime.wrap(function _callee106$(_context107) {
              while (1) {
                switch (_context107.prev = _context107.next) {
                  case 0:
                    _context107.next = 2;
                    return _this215.OnDropFiles(evt.target.files);

                  case 2:
                    _this215.$refs.file.value = "";

                  case 3:
                  case "end":
                    return _context107.stop();
                }
              }
            }, _callee106);
          }))();
        },
        //--------------------------------------------
        // Getters
        //--------------------------------------------
        getCurrentItem: function getCurrentItem() {
          var _this216 = this;

          if (this.myCurrentId && this.hasDataList) {
            return _.find(this.myData.list, function (it) {
              return it.id == _this216.myCurrentId;
            });
          }
        },
        //--------------------------------------------
        getCheckedItems: function getCheckedItems() {
          var _this217 = this;

          if (this.hasDataList) return _.filter(this.myData.list, function (it) {
            return _this217.myCheckedIds[it.id];
          });
          return [];
        },
        //--------------------------------------------
        setItem: function setItem(newItem) {
          if (newItem && this.hasDataList) {
            var list = _.map(this.myData.list, function (it) {
              return it.id == newItem.id ? newItem : it;
            });

            this.myData.list = list;
          }
        },
        //--------------------------------------------
        setItemStatus: function setItemStatus(id) {
          var status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "loading";
          this.myItemStatus = _.assign({}, this.myItemStatus, _defineProperty({}, id, status));
        },
        //--------------------------------------------
        // For global menu invoke checkAll/cancleAll
        invokeList: function invokeList(methodName) {
          console.log("methodName");
          Ti.InvokeBy(this.$innerList, methodName);
        },
        //--------------------------------------------
        isHiddenItem: function isHiddenItem(it) {
          if (it.nm.startsWith(".") && !this.myExposeHidden) {
            return true;
          }

          return false;
        },
        //--------------------------------------------
        // Utility
        //--------------------------------------------
        _run: function _run(nm, payload) {
          var _this218 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee107() {
            var target, app;
            return regeneratorRuntime.wrap(function _callee107$(_context108) {
              while (1) {
                switch (_context108.prev = _context108.next) {
                  case 0:
                    target = (_this218.routers || {})[nm]; // Run by customized function

                    if (!_.isFunction(target)) {
                      _context108.next = 6;
                      break;
                    }

                    _context108.next = 4;
                    return target();

                  case 4:
                    _context108.next = 11;
                    break;

                  case 6:
                    if (!target) {
                      _context108.next = 11;
                      break;
                    }

                    app = Ti.App(_this218);
                    _context108.next = 10;
                    return app.exec(target, payload);

                  case 10:
                    return _context108.abrupt("return", _context108.sent);

                  case 11:
                  case "end":
                    return _context108.stop();
                }
              }
            }, _callee107);
          }))();
        },
        //--------------------------------------------
        toggleExposeHidden: function toggleExposeHidden() {
          var newVal = !this.myExposeHidden;
          this.myExposeHidden = newVal;

          if (this.keeyHiddenBy) {
            Ti.Storage.session.set(this.keeyHiddenBy, newVal);
          }
        },
        //--------------------------------------------
        openLocalFileSelectdDialog: function openLocalFileSelectdDialog() {
          this.$refs.file.click();
        },
        //--------------------------------------------
        openCurrentMeta: function openCurrentMeta() {
          var _this219 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee108() {
            var meta, reo, updates, data;
            return regeneratorRuntime.wrap(function _callee108$(_context109) {
              while (1) {
                switch (_context109.prev = _context109.next) {
                  case 0:
                    meta = _this219.getCurrentItem() || _this219.meta;

                    if (meta) {
                      _context109.next = 3;
                      break;
                    }

                    return _context109.abrupt("return", Ti.Toast.Open("i18n:nil-obj"));

                  case 3:
                    _context109.next = 5;
                    return Wn.EditObjMeta(meta, {
                      fields: "auto"
                    });

                  case 5:
                    reo = _context109.sent;

                    // Update to current list
                    if (reo) {
                      updates = reo.updates, data = reo.data; // TODO if update the "thumb" may need to force reload the preview
                      // Update to list

                      _this219.setItem(data);
                    }

                  case 7:
                  case "end":
                    return _context109.stop();
                }
              }
            }, _callee108);
          }))();
        },
        //--------------------------------------------
        syncMyData: function syncMyData() {
          this.myData = _.cloneDeep(this.data) || {
            list: [],
            pager: {}
          };
          this.myItemStatus = {};
        } //--------------------------------------------

      },
      ////////////////////////////////////////////////
      watch: {
        //--------------------------------------------
        "data": {
          handler: "syncMyData",
          immediate: true
        },
        //--------------------------------------------
        "myExposeHidden": function myExposeHidden(eh) {
          this.$notify("expose-hidden", eh);
        } //--------------------------------------------

      },
      ////////////////////////////////////////////////
      mounted: function mounted() {
        var _this220 = this;

        //--------------------------------------------
        // Guart the uploading
        Ti.Fuse.getOrCreate().add({
          key: "wn-list-adaptview-check-uploading",
          everythingOk: function everythingOk() {
            return !_this220.hasUploading;
          },
          fail: function fail() {
            Ti.Toast.Open("i18n:upload-nofinished", "warn");
          }
        }); // Restore the exposeHidden

        if (this.keeyHiddenBy) {
          this.myExposeHidden = Ti.Storage.session.getBoolean(this.keeyHiddenBy);
        }
      },
      //--------------------------------------------
      beforeDestroy: function beforeDestroy() {
        Ti.Fuse.get().remove("wn-list-adaptview-check-uploading");
      } //--------------------------------------------
      ////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/adaptlist/wn-adaptlist.mjs", _M);
  })(); //============================================================
  // JOIN: wn/adaptlist/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/adaptlist/_com.json", {
    "name": "wn-adaptlist",
    "globally": true,
    "template": "./wn-adaptlist.html",
    "props": "./wn-adaptlist-props.mjs",
    "methods": "./wn-adaptlist-methods.mjs",
    "mixins": ["./wn-adaptlist.mjs"],
    "components": ["@com:ti/obj/thumb", "@com:ti/wall"]
  }); //============================================================
  // JOIN: wn/chart/combo/wn-chart-combo.html
  //============================================================

  Ti.Preload("ti/com/wn/chart/combo/wn-chart-combo.html", "<div class=\"wn-chart-combo\"\n  :class=\"TopClass\">\n  <!--\n    Chart List\n  -->\n  <div class=\"as-main\">\n    <TiChartCombo\n      v-for=\"li of TheChartList\" \n        :key=\"li.index\"\n        v-bind=\"li\"\n        :data=\"getChartData(li.index)\"\n        @change:chart:name=\"OnChangeChartName(li, $event)\"\n        @change:chart:type=\"OnChangeChartType(li, $event)\"\n        @change:chart:datespan=\"OnChangeChartDateSpan(li, $event)\"\n        @reload:data=\"OnReloadChartData(li, $event)\"/>\n  </div>\n</div>"); //============================================================
  // JOIN: wn/chart/combo/wn-chart-combo.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          /*
          [{
            name: "video-view",
            date: "2020-09-21",
            span: "7d",
            type: "pie"
          }]
          */
          myCharts: [],
          myShowChartNames: [],

          /*
          {
            $ChartName : {}
          }
          */
          myChartData: {},
          myDate: undefined,
          mySpan: undefined,
          myChartComConf: {}
        };
      },
      ////////////////////////////////////////////////////
      props: {
        "chartDefines": {
          type: Object,
          "default": undefined
        },
        "chartOptions": {
          type: Object,
          "default": undefined
        },

        /*
        [{name, title, agg, sum, sumOptions, types, type, chartOptions}]
        */
        "charts": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "showCharts": {
          type: [String, Array],
          "default": undefined
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass({
            "is-multi-chart": this.TheChartList.length > 1
          });
        },
        //------------------------------------------------
        TheShowChartNames: function TheShowChartNames() {
          if (_.isEmpty(this.myShowChartNames)) {
            return this.showCharts;
          }

          return this.myShowChartNames;
        },
        //------------------------------------------------
        TheChartNameList: function TheChartNameList() {
          var list = [];

          _.forEach(this.charts, function (ca) {
            list.push(_.pick(ca, "name", "title", "icon"));
          });

          return list;
        },
        //------------------------------------------------
        TheChartMap: function TheChartMap() {
          var map = {};

          _.forEach(this.charts, function (ca) {
            map[ca.name] = ca;
          });

          return map;
        },
        //------------------------------------------------
        TheChartList: function TheChartList() {
          var _this221 = this;

          var names = _.concat(this.TheShowChartNames);

          var list = [];

          _.forEach(names, function (caName, index) {
            var ca = _.get(_this221.TheChartMap, caName);

            if (!ca) return;
            var myChart = _.nth(_this221.myCharts, index) || {};

            var li = _.cloneDeep(myChart);

            var options = _.cloneDeep(_this221.chartOptions); //console.log(options)


            options = _.merge(options, ca.chartOptions); // Set default value

            _.defaults(li, {
              chartDefines: _this221.chartDefines,
              nameList: _this221.TheChartNameList,
              index: index,
              name: ca.name,
              chartTypes: ca.types,
              type: ca.type,
              chartOptions: options
            }); // Test the type


            if (li.type && _.indexOf(li.chartTypes, li.type) < 0) {
              li.type = ca.type;
            } // Join to list


            list.push(li);
          });

          return list;
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        OnReloadChartData: function OnReloadChartData(_ref112, _ref113) {
          var _this222 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee109() {
            var index, force, cleanCache, done;
            return regeneratorRuntime.wrap(function _callee109$(_context110) {
              while (1) {
                switch (_context110.prev = _context110.next) {
                  case 0:
                    index = _ref112.index;
                    force = _ref113.force, cleanCache = _ref113.cleanCache, done = _ref113.done;
                    _context110.next = 4;
                    return _this222.reloadChartData(index, {
                      force: force,
                      cleanCache: cleanCache
                    });

                  case 4:
                    if (_.isFunction(done)) {
                      done();
                    }

                  case 5:
                  case "end":
                    return _context110.stop();
                }
              }
            }, _callee109);
          }))();
        },
        //------------------------------------------------
        OnChangeChartName: function OnChangeChartName(_ref114, name) {
          var _this223 = this;

          var index = _ref114.index;
          // Update my chart setting
          this.$set(this.myShowChartNames, index, name);
          this.$set(this.myChartData, index, []);
          this.$nextTick(function () {
            _this223.reloadChartData(index);
          });
        },
        //------------------------------------------------
        OnChangeChartType: function OnChangeChartType(_ref115, type) {
          var index = _ref115.index;
          // Update my chart setting
          this.setMyChart(index, {
            type: type
          });
        },
        //------------------------------------------------
        OnChangeChartDateSpan: function OnChangeChartDateSpan(_ref116, _ref117) {
          var _this224 = this;

          var index = _ref116.index;
          var date = _ref117.date,
              span = _ref117.span;
          // Update my chart setting
          this.setMyChart(index, {
            date: date,
            span: span
          });
          this.$nextTick(function () {
            _this224.reloadChartData(index);
          });
        },
        //------------------------------------------------
        //
        // Utility
        //
        //------------------------------------------------
        setMyChart: function setMyChart(index, obj) {
          var ca = _.nth(this.myCharts, index) || {};
          ca = _.assign({}, ca, obj);
          this.$set(this.myCharts, index, ca);
        },
        //------------------------------------------------
        getChartData: function getChartData(index) {
          //console.log("getChartData", name)
          return _.get(this.myChartData, index);
        },
        //------------------------------------------------
        //
        // Actions
        //
        //------------------------------------------------
        reloadChartData: function reloadChartData(index) {
          var _arguments20 = arguments,
              _this225 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee110() {
            var _ref118, _ref118$force, force, _ref118$cleanCache, cleanCache, chartName, chart, name, agg, sum, sumOptions, _ref119, date, span, cmd, cmdText, reo;

            return regeneratorRuntime.wrap(function _callee110$(_context111) {
              while (1) {
                switch (_context111.prev = _context111.next) {
                  case 0:
                    _ref118 = _arguments20.length > 1 && _arguments20[1] !== undefined ? _arguments20[1] : {}, _ref118$force = _ref118.force, force = _ref118$force === void 0 ? false : _ref118$force, _ref118$cleanCache = _ref118.cleanCache, cleanCache = _ref118$cleanCache === void 0 ? false : _ref118$cleanCache;
                    chartName = _.nth(_this225.TheShowChartNames, index);
                    chart = _.get(_this225.TheChartMap, chartName);

                    if (chart) {
                      _context111.next = 5;
                      break;
                    }

                    return _context111.abrupt("return");

                  case 5:
                    name = chart.name, agg = chart.agg, sum = chart.sum, sumOptions = chart.sumOptions;
                    _ref119 = _.nth(_this225.myCharts, index) || {}, date = _ref119.date, span = _ref119.span; // Prepare the command text

                    cmd = ["statistics sum '".concat(sum, "' -json -cqn")]; // Date & span

                    if (date) {
                      cmd.push("-date '".concat(date, "'"));
                    }

                    if (span) {
                      cmd.push("-span '".concat(span, "'"));
                    } // Agg


                    if (agg) {
                      cmd.push("-agg '".concat(agg, "'"));

                      if (cleanCache) {
                        cmd.push('-agg-force');
                      }
                    } // Force


                    if (force) {
                      cmd.push("-force");
                    } // More options


                    _.forEach(sumOptions, function (v, k) {
                      var str;

                      if (_.isString(v) || _.isNumber(v) || _.isBoolean(v)) {
                        str = v;
                      } else {
                        str = JSON.stringify(v);
                      }

                      cmd.push("-".concat(k, " '").concat(str, "'"));
                    }); // Executed command


                    cmdText = cmd.join(" "); //console.log("reloadChartData", cmdText)

                    _context111.next = 16;
                    return Wn.Sys.exec2(cmdText, {
                      as: "json"
                    });

                  case 16:
                    reo = _context111.sent;

                    if (reo && _.isArray(reo)) {
                      _this225.$set(_this225.myChartData, index, reo);
                    }

                  case 18:
                  case "end":
                    return _context111.stop();
                }
              }
            }, _callee110);
          }))();
        },
        //------------------------------------------------
        preloadChartData: function preloadChartData() {
          if (!_.isEmpty(this.showCharts)) {
            for (var i = 0; i < this.showCharts.length; i++) {
              this.reloadChartData(i);
            }
          }
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      watch: {
        "showCharts": {
          handler: function handler(newVal, oldVal) {
            this.myShowChartNames = _.cloneDeep(this.showCharts);

            if (!_.isEqual(newVal, oldVal)) {
              this.preloadChartData();
            }
          },
          immediate: true
        }
      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/chart/combo/wn-chart-combo.mjs", _M);
  })(); //============================================================
  // JOIN: wn/chart/combo/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/chart/combo/_com.json", {
    "name": "wn-chart-combo",
    "globally": true,
    "template": "./wn-chart-combo.html",
    "mixins": ["./wn-chart-combo.mjs"],
    "components": ["@com:ti/chart/combo"],
    "deps": []
  }); //============================================================
  // JOIN: wn/cmd/panel/wn-cmd-panel.html
  //============================================================

  Ti.Preload("ti/com/wn/cmd/panel/wn-cmd-panel.html", "<pre class=\"wn-cmd-panel\"\n  :class=\"TopClass\"><div  \n    v-for=\"(line, index) in lines\"\n      :key=\"index\"\n      class=\"as-line\">{{line}}</div>\n</pre>"); //============================================================
  // JOIN: wn/cmd/panel/wn-cmd-panel.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          lines: []
        };
      },
      ////////////////////////////////////////////////////
      props: {
        "value": {
          type: String,
          "default": undefined
        },
        "vars": {
          type: Object,
          "default": undefined
        },
        "as": {
          type: String,
          "default": "text"
        },
        "emitName": {
          type: String,
          "default": undefined
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        clear: function clear() {
          this.lines = [];
        },
        //------------------------------------------------
        runCommand: function runCommand() {
          var _this226 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee111() {
            var re;
            return regeneratorRuntime.wrap(function _callee111$(_context112) {
              while (1) {
                switch (_context112.prev = _context112.next) {
                  case 0:
                    if (_this226.value) {
                      _context112.next = 2;
                      break;
                    }

                    return _context112.abrupt("return");

                  case 2:
                    _this226.lines.push("---------------------------------");

                    _this226.lines.push(Ti.I18n.get("run-welcome"));

                    _this226.lines.push("> " + _this226.value);

                    _this226.lines.push("---------------------------------");

                    _context112.next = 8;
                    return Wn.Sys.exec(_this226.value, {
                      as: _this226.as,
                      vars: _this226.vars,
                      eachLine: function eachLine(line) {
                        _this226.lines.push(line);
                      }
                    });

                  case 8:
                    re = _context112.sent;

                    _this226.lines.push("---------------------------------");

                    _this226.lines.push("> " + _this226.value);

                    _this226.lines.push(Ti.I18n.get("run-finished"));

                    _this226.lines.push("---------------------------------");

                    if (_this226.emitName) {
                      _this226.$notify(_this226.emitName, re);
                    }

                  case 14:
                  case "end":
                    return _context112.stop();
                }
              }
            }, _callee111);
          }))();
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      watch: {
        "value": {
          handler: "runCommand",
          immediate: true
        },
        "lines": function lines() {
          this.$el.scrollTop = this.$el.scrollHeight * 2;
        }
      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/cmd/panel/wn-cmd-panel.mjs", _M);
  })(); //============================================================
  // JOIN: wn/cmd/panel/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/cmd/panel/_com.json", {
    "name": "wn-cmd-panel",
    "globally": true,
    "template": "./wn-cmd-panel.html",
    "mixins": ["./wn-cmd-panel.mjs"]
  }); //============================================================
  // JOIN: wn/combo/edit-com/wn-combo-edit-com.html
  //============================================================

  Ti.Preload("ti/com/wn/combo/edit-com/wn-combo-edit-com.html", "<ti-label\n  class=\"wn-combo-edit-com\"\n  :class=\"className\"\n  :placeholder=\"placeholder\"\n  :prefix-icon=\"ComIcon\"\n  :value=\"ComTitle\"\n  :suffix-icon=\"'zmdi-delete'\"\n  @click:value=\"OnClickValue\"\n  @suffix:icon=\"OnClickSuffixIcon\"/>\n  "); //============================================================
  // JOIN: wn/combo/edit-com/wn-combo-edit-com.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          myCom: null
        };
      },
      ////////////////////////////////////////////////////
      // props 
      props: {
        "value": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "placeholder": {
          type: String,
          "default": "i18n:wn-edit-com-nil"
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        Dict: function Dict() {
          return Wn.Dict.hMakerComponents();
        },
        //------------------------------------------------
        ComIcon: function ComIcon() {
          return _.get(this.myCom, "icon");
        },
        //------------------------------------------------
        ComTitle: function ComTitle() {
          return _.get(this.myCom, "title");
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        OnClickValue: function OnClickValue() {
          var _this227 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee112() {
            var com;
            return regeneratorRuntime.wrap(function _callee112$(_context113) {
              while (1) {
                switch (_context113.prev = _context113.next) {
                  case 0:
                    _context113.next = 2;
                    return Wn.EditTiComponent(_this227.value);

                  case 2:
                    com = _context113.sent;

                    if (com) {
                      _this227.notifyChange(com);
                    }

                  case 4:
                  case "end":
                    return _context113.stop();
                }
              }
            }, _callee112);
          }))();
        },
        //--------------------------------------
        OnClickSuffixIcon: function OnClickSuffixIcon() {
          this.notifyChange({});
        },
        //--------------------------------------
        notifyChange: function notifyChange() {
          var com = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          if (!com.comType) {
            com.comType = undefined;
            com.comConf = undefined;
          }

          this.$notify("change", com);
        },
        //--------------------------------------
        reloadMyCom: function reloadMyCom() {
          var _this228 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee113() {
            var comType;
            return regeneratorRuntime.wrap(function _callee113$(_context114) {
              while (1) {
                switch (_context114.prev = _context114.next) {
                  case 0:
                    if (_.isEmpty(_this228.value)) {
                      _context114.next = 7;
                      break;
                    }

                    comType = _this228.value.comType;
                    _context114.next = 4;
                    return _this228.Dict.getItem(comType);

                  case 4:
                    _this228.myCom = _context114.sent;
                    _context114.next = 8;
                    break;

                  case 7:
                    _this228.myCom = null;

                  case 8:
                  case "end":
                    return _context114.stop();
                }
              }
            }, _callee113);
          }))();
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      watch: {
        "value": {
          handler: "reloadMyCom",
          immediate: true
        }
      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/combo/edit-com/wn-combo-edit-com.mjs", _M);
  })(); //============================================================
  // JOIN: wn/combo/edit-com/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/combo/edit-com/_com.json", {
    "name": "wn-combo-edit-com",
    "globally": true,
    "template": "./wn-combo-edit-com.html",
    "mixins": "./wn-combo-edit-com.mjs"
  }); //============================================================
  // JOIN: wn/combo/input/wn-combo-input.html
  //============================================================

  Ti.Preload("ti/com/wn/combo/input/wn-combo-input.html", "<ti-combo-input v-bind=\"this\"\n  \n  :options=\"OptionsDict\"\n  :drop-com-type=\"DropComType\"\n  :prefix-icon=\"ThePrefixIcon\"\n  :drop-display=\"TheDropDisplay\"\n  \n  @change=\"$notify('change', $event)\"/>\n  "); //============================================================
  // JOIN: wn/combo/input/wn-combo-input.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          loading: false
        };
      },
      ////////////////////////////////////////////////////
      // props 
      props: {
        "itemBy": {
          type: [String, Function],
          "default": undefined
        },
        "findBy": {
          type: [String, Function],
          "default": undefined
        },
        "loadingIcon": {
          type: String,
          "default": "zmdi-settings zmdi-hc-spin"
        },
        "canInput": {
          type: Boolean,
          "default": true
        },
        "autoCollapse": {
          type: Boolean,
          "default": false
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        DropComType: function DropComType() {
          return this.dropComType || "wn-list";
        },
        //------------------------------------------------
        ThePrefixIcon: function ThePrefixIcon() {
          if (this.loading) {
            return this.loadingIcon;
          }

          return this.prefixIcon;
        },
        //---------------------------------------------------
        OptionsDict: function OptionsDict() {
          var _this229 = this;

          return Wn.Dict.evalOptionsDict(this, function (_ref120) {
            var loading = _ref120.loading;
            _this229.loading = loading;
          });
        },
        //---------------------------------------------------
        TheDropDisplay: function TheDropDisplay() {
          return this.dropDisplay || ["@<thumb>", "title|text"];
        } //------------------------------------------------

      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/combo/input/wn-combo-input.mjs", _M);
  })(); //============================================================
  // JOIN: wn/combo/input/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/combo/input/_com.json", {
    "name": "wn-combo-input",
    "globally": true,
    "template": "./wn-combo-input.html",
    "props": ["@com:ti/input/ti-input-props.mjs", "@com:ti/combo/input/ti-combo-input-props.mjs"],
    "mixins": "./wn-combo-input.mjs",
    "components": ["@com:ti/combo/input", "@com:wn/list", "@com:wn/obj/icon"]
  }); //============================================================
  // JOIN: wn/combo/multi-input/wn-combo-multi-input.html
  //============================================================

  Ti.Preload("ti/com/wn/combo/multi-input/wn-combo-multi-input.html", "<ti-combo-multi-input v-bind=\"this\"\n\n  :options=\"OptionsDict\"\n  :tag-mapping=\"TheTagMapping\"\n  :drop-com-type=\"DropComType\"\n  :prefix-icon=\"ThePrefixIcon\"\n  :tag-item-icon-by=\"TheTagItemIconBy\"\n  :drop-display=\"TheDropDisplay\"\n  \n  @change=\"$notify('change', $event)\"/>\n  "); //============================================================
  // JOIN: wn/combo/multi-input/wn-combo-multi-input.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          loading: false
        };
      },
      ////////////////////////////////////////////////////
      // props 
      props: {
        "itemBy": {
          type: [String, Function],
          "default": undefined
        },
        "findBy": {
          type: [String, Function],
          "default": undefined
        },
        "loadingIcon": {
          type: String,
          "default": "zmdi-settings zmdi-hc-spin"
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        DropComType: function DropComType() {
          return this.dropComType || "wn-list";
        },
        //------------------------------------------------
        ThePrefixIcon: function ThePrefixIcon() {
          if (this.loading && this.prefixIcon) {
            return this.loadingIcon;
          }

          return this.prefixIcon;
        },
        //---------------------------------------------------
        OptionsDict: function OptionsDict() {
          var _this230 = this;

          return Wn.Dict.evalOptionsDict(this, function (_ref121) {
            var loading = _ref121.loading;
            _this230.loading = loading;
          });
        },
        //------------------------------------------------
        TheTagMapping: function TheTagMapping() {
          if (!_.isEmpty(this.tagMapping)) {
            return this.tagMapping;
          }

          return {
            text: "title|nm",
            icon: "icon",
            value: "id"
          };
        },
        //------------------------------------------------
        TheTagItemIconBy: function TheTagItemIconBy() {
          return this.tagItemIconBy || function (meta) {
            return Wn.Util.getObjIcon(meta);
          };
        },
        //---------------------------------------------------
        TheDropDisplay: function TheDropDisplay() {
          return this.dropDisplay || ["@<thumb>", "title", "nm"];
        } //------------------------------------------------

      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/combo/multi-input/wn-combo-multi-input.mjs", _M);
  })(); //============================================================
  // JOIN: wn/combo/multi-input/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/combo/multi-input/_com.json", {
    "name": "wn-combo-multi-input",
    "globally": true,
    "template": "./wn-combo-multi-input.html",
    "props": ["@com:ti/input/ti-input-props.mjs", "@com:ti/input/tags/ti-input-tags-props.mjs", "@com:ti/combo/input/ti-combo-input-props.mjs"],
    "mixins": "./wn-combo-multi-input.mjs",
    "components": ["@com:ti/combo/multi-input", "@com:wn/list", "@com:wn/obj/icon"]
  }); //============================================================
  // JOIN: wn/droplist/wn-droplist.html
  //============================================================

  Ti.Preload("ti/com/wn/droplist/wn-droplist.html", "<component \n  :is=\"ComType\"\n  v-bind=\"this\"\n  :can-input=\"false\"\n  :must-in-list=\"true\"\n  :auto-collapse=\"true\"\n  @change=\"$notify('change', $event)\"/>"); //============================================================
  // JOIN: wn/droplist/wn-droplist.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      props: {
        "multi": {
          type: Boolean,
          "default": false
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        ComType: function ComType() {
          return this.multi ? "wn-combo-multi-input" : "wn-combo-input";
        } //------------------------------------------------

      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/droplist/wn-droplist.mjs", _M);
  })(); //============================================================
  // JOIN: wn/droplist/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/droplist/_com.json", {
    "name": "wn-droplist",
    "globally": true,
    "template": "./wn-droplist.html",
    "props": ["@com:ti/input/ti-input-props.mjs", "@com:ti/input/tags/ti-input-tags-props.mjs", "@com:ti/combo/input/ti-combo-input-props.mjs"],
    "mixins": ["./wn-droplist.mjs"],
    "components": ["@com:wn/combo/input", "@com:wn/combo/multi-input"]
  }); //============================================================
  // JOIN: wn/entity/history/wn-entity-history.html
  //============================================================

  Ti.Preload("ti/com/wn/entity/history/wn-entity-history.html", "<ti-gui\n  class=\"wn-entity-history\"\n  :class=\"TopClass\"\n  :layout=\"Layout\"\n  :schema=\"Schema\"\n  :shown=\"myShown\"\n  :can-loading=\"true\"\n  :loading-as=\"loading\"\n  @block:shown=\"OnShownChange\"\n  @filter::change=\"OnFilterChange\"\n  @sorter::change=\"OnSorterChange\"\n  @pager::change=\"OnPagerChange\"\n  @list::select=\"OnSelect\"/>"); //============================================================
  // JOIN: wn/entity/history/wn-entity-history.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////////
      data: function data() {
        return {
          "myShown": {},
          "myList": [],
          "myHisRecord": null,
          "myFilterKeyword": null,
          "myFilterMatch": {},
          "mySort": {
            ct: -1
          },
          "myPager": {
            pn: 1,
            pgsz: 20
          },
          "loading": false
        };
      },
      ////////////////////////////////////////////////////
      props: {
        "prefix": {
          type: String,
          "default": "~/.domain/history"
        },
        "meta": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "data": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "status": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      ////////////////////////////////////////////////////
      computed: {
        //------------------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //------------------------------------------------
        HistoryItems: function HistoryItems() {
          if (!this.meta) {
            return [];
          } // Make sure in history folder


          if (this.prefix) {
            var fph = Wn.Io.getFormedPath(this.meta);

            if (!fph.startsWith(this.prefix)) {
              return [];
            }
          }

          var items = [];

          _.forEach(this.data.list, function (it) {
            // Guard
            if ('FILE' != it.race || !it.nm.endsWith(".json")) return; // Eval the history item tab name

            var name = Ti.Util.getMajorName(it.nm);
            var title = it.title;

            if (!title) {
              title = "_history" == name ? "i18n:default" : name;
            }

            items.push({
              name: name,
              title: title
            });
          }); // Update shown


          if (!_.isEmpty(items)) {
            this.myShown = _.assign(_defineProperty({}, _.first(items).name, true), this.myShown);
          } // Return


          return items;
        },
        //------------------------------------------------
        CurrentHistory: function CurrentHistory() {
          return _.first(Ti.Util.truthyKeys(this.myShown));
        },
        //------------------------------------------------
        Layout: function Layout() {
          var blocks = [];

          var _iterator77 = _createForOfIteratorHelper(this.HistoryItems),
              _step77;

          try {
            for (_iterator77.s(); !(_step77 = _iterator77.n()).done;) {
              var hi = _step77.value;
              blocks.push({
                type: "cols",
                title: hi.title,
                name: hi.name,
                border: true,
                blocks: [{
                  type: "rows",
                  size: "65%",
                  blocks: [{
                    "type": "cols",
                    "size": ".44rem",
                    "blocks": [{
                      "name": "filter",
                      "flex": "both",
                      "body": "filter"
                    }, {
                      "name": "sorter",
                      "flex": "none",
                      "body": "sorter"
                    }]
                  }, {
                    "name": "list",
                    "size": "stretch",
                    "overflow": "cover",
                    "body": "list"
                  }, {
                    "name": "pager",
                    "size": "auto",
                    "body": "pager"
                  }]
                }, {
                  name: "form",
                  body: "form"
                }]
              });
            }
          } catch (err) {
            _iterator77.e(err);
          } finally {
            _iterator77.f();
          }

          return {
            type: "tabs",
            blocks: blocks
          };
        },
        //------------------------------------------------
        Schema: function Schema() {
          return {
            //............................................
            filter: {
              comType: "TiComboFilter",
              comConf: {
                placeholder: "i18n:wn-en-his-flt-tip",
                dropWidth: -500,
                form: {
                  fields: [{
                    title: "i18n:wn-en-his-ct",
                    name: "ct",
                    comType: "ti-input-daterange",
                    comConf: {
                      valueType: "ms-range"
                    }
                  }, {
                    title: "i18n:wn-en-his-utp",
                    name: "utp",
                    comType: "ti-input"
                  }, {
                    title: "i18n:wn-en-his-tid",
                    name: "tid",
                    comType: "ti-input"
                  }, {
                    title: "i18n:wn-en-his-tnm",
                    name: "tnm",
                    comType: "ti-input"
                  }, {
                    title: "i18n:wn-en-his-ttp",
                    name: "ttp",
                    comType: "ti-input"
                  }, {
                    title: "i18n:wn-en-his-opt",
                    name: "opt",
                    comType: "ti-input"
                  }]
                },
                value: {
                  keyword: this.myFilterKeyword,
                  match: this.myFilterMatch
                }
              }
            },
            //............................................
            sorter: {
              comType: "TiComboSorter",
              comConf: {
                dropWidth: 200,
                options: [{
                  value: "ct",
                  text: "i18n:wn-en-his-ct"
                }, {
                  value: "utp",
                  text: "i18n:wn-en-his-utp"
                }, {
                  value: "ttp",
                  text: "i18n:wn-en-his-ttp"
                }],
                value: this.mySort
              }
            },
            //............................................
            list: {
              comType: "TiTable",
              comConf: {
                data: this.myList,
                fields: [{
                  title: "i18n:wn-en-his-ct",
                  display: {
                    key: "ct",
                    transformer: "Ti.DateTime.format"
                  }
                }, {
                  title: "i18n:wn-en-his-usr",
                  display: ["utp:$${val}:", "unm|uid"]
                }, {
                  title: "i18n:wn-en-his-opt",
                  display: "opt"
                }, {
                  title: "i18n:wn-en-his-tar",
                  display: ["ttp:$${val}:", "tnm|tid"]
                }]
              }
            },
            //............................................
            pager: {
              comType: "TiPagingJumper",
              comConf: {
                value: this.myPager
              }
            },
            //............................................
            form: {
              comType: "TiForm",
              comConf: {
                data: this.myHisRecord,
                autoShowBlank: true,
                fields: [{
                  title: "ID",
                  name: "id"
                }, {
                  title: "i18n:wn-en-his-uid",
                  name: "uid"
                }, {
                  title: "i18n:wn-en-his-unm",
                  name: "unm"
                }, {
                  title: "i18n:wn-en-his-utp",
                  name: "utp"
                }, {
                  title: "i18n:wn-en-his-ct",
                  name: "ct",
                  type: "AMS"
                }, {
                  title: "i18n:wn-en-his-tid",
                  name: "tid"
                }, {
                  title: "i18n:wn-en-his-tnm",
                  name: "tnm"
                }, {
                  title: "i18n:wn-en-his-ttp",
                  name: "ttp"
                }, {
                  title: "i18n:wn-en-his-opt",
                  name: "opt"
                }, {
                  title: "i18n:wn-en-his-mor",
                  name: "mor"
                }]
              }
            } //............................................

          };
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      methods: {
        //------------------------------------------------
        OnShownChange: function OnShownChange(shown) {
          this.myShown = shown;
        },
        //------------------------------------------------
        OnSelect: function OnSelect(_ref122) {
          var current = _ref122.current;
          this.myHisRecord = current;
        },
        //------------------------------------------------
        OnFilterChange: function OnFilterChange() {
          var _arguments21 = arguments,
              _this231 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee114() {
            var _ref123, match, keyword;

            return regeneratorRuntime.wrap(function _callee114$(_context115) {
              while (1) {
                switch (_context115.prev = _context115.next) {
                  case 0:
                    _ref123 = _arguments21.length > 0 && _arguments21[0] !== undefined ? _arguments21[0] : {}, match = _ref123.match, keyword = _ref123.keyword;
                    _this231.myFilterMatch = match;
                    _this231.myFilterKeyword = keyword;
                    _context115.next = 5;
                    return _this231.reloadList();

                  case 5:
                  case "end":
                    return _context115.stop();
                }
              }
            }, _callee114);
          }))();
        },
        //------------------------------------------------
        OnSorterChange: function OnSorterChange(sort) {
          var _this232 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee115() {
            return regeneratorRuntime.wrap(function _callee115$(_context116) {
              while (1) {
                switch (_context116.prev = _context116.next) {
                  case 0:
                    _this232.mySort = sort;
                    _context116.next = 3;
                    return _this232.reloadList();

                  case 3:
                  case "end":
                    return _context116.stop();
                }
              }
            }, _callee115);
          }))();
        },
        //------------------------------------------------
        OnPagerChange: function OnPagerChange(page) {
          var _this233 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee116() {
            return regeneratorRuntime.wrap(function _callee116$(_context117) {
              while (1) {
                switch (_context117.prev = _context117.next) {
                  case 0:
                    _.assign(_this233.myPager, page);

                    _context117.next = 3;
                    return _this233.reloadList();

                  case 3:
                  case "end":
                    return _context117.stop();
                }
              }
            }, _callee116);
          }))();
        },
        //------------------------------------------------
        reloadList: function reloadList() {
          var _this234 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee117() {
            var hisName, cmds, sort, flt, input, reo;
            return regeneratorRuntime.wrap(function _callee117$(_context118) {
              while (1) {
                switch (_context118.prev = _context118.next) {
                  case 0:
                    hisName = _this234.CurrentHistory;

                    if (hisName) {
                      _context118.next = 5;
                      break;
                    }

                    _this234.myList = [];
                    _this234.myPager = {};
                    return _context118.abrupt("return");

                  case 5:
                    // Prepare the command
                    if ("_history" == hisName) {
                      hisName = "";
                    }

                    cmds = ["history ".concat(hisName, " query")]; // Sort

                    if (!_.isEmpty(_this234.mySort)) {
                      sort = JSON.stringify(_this234.mySort);
                      cmds.push("-sort '".concat(sort, "'"));
                    } // Pager


                    cmds.push("-pn ".concat(_this234.myPager.pn));
                    cmds.push("-pgsz ".concat(_this234.myPager.pgsz));
                    cmds.push("-cqn"); // Filter

                    flt = _.assign({}, _this234.myFilterMatch);

                    if (_this234.myFilterKeyword) {
                      if (Wn.Io.isFullObjId(_this234.myFilterKeyword)) {
                        flt.uid = _this234.myFilterKeyword;
                      } else {
                        flt.unm = _this234.myFilterKeyword;
                      }
                    }

                    input = JSON.stringify(flt); // Load

                    _this234.loading = true;
                    _context118.next = 17;
                    return Wn.Sys.exec2(cmds.join(" "), {
                      input: input,
                      as: "json"
                    });

                  case 17:
                    reo = _context118.sent;
                    // Update
                    _this234.myList = reo.list;
                    _this234.myPager = reo.pager;
                    _this234.loading = false;

                  case 21:
                  case "end":
                    return _context118.stop();
                }
              }
            }, _callee117);
          }))();
        } //------------------------------------------------

      },
      ////////////////////////////////////////////////////
      watch: {
        "CurrentHistory": function CurrentHistory() {
          this.reloadList();
        }
      } ////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/entity/history/wn-entity-history.mjs", _M);
  })(); //============================================================
  // JOIN: wn/entity/history/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/entity/history/_com.json", {
    "name": "wn-entity-history",
    "globally": true,
    "template": "./wn-entity-history.html",
    "mixins": ["./wn-entity-history.mjs"],
    "components": ["@com:ti/input/daterange", "@com:ti/combo/filter", "@com:ti/paging/jumper"]
  }); //============================================================
  // JOIN: wn/explorer/wn-explorer.html
  //============================================================

  Ti.Preload("ti/com/wn/explorer/wn-explorer.html", "<div class=\"wn-explorer\"\n  v-drop-off\n  :class=\"topClass\">\n  <!--\n    Sky\n  -->\n  <div v-if=\"show.sky\"\n    class=\"explorer-sky\">\n    <!--Logo-->\n    <div v-if=\"show.logo\"\n      class=\"sky-logo ti-flex-center\">\n      <slot name=\"logo\"></slot>\n    </div>\n    <!--Title/Crumb-->\n    <div v-if=\"!noTitle\"\n      class=\"sky-title\">\n      <slot name=\"title\">\n        <ul class=\"as-address-bar\">\n          <li v-for=\"an in ancestors\" :key=\"an.id\">\n            <a :href=\"getObjLink(an)\"\n              @click.prevent=\"$notify('main:open', an)\">{{getObjTitle(an)}}</a>\n            <ti-icon class=\"center\" value=\"chevron_right\"/>\n          </li>\n          <li v-if=\"meta\">\n            <b>{{getObjTitle(meta)}}</b>\n            <span v-if=\"status.changed\"\n              class=\"ti-mark-changed\">*</span>\n          </li>\n        </ul>\n      </slot>\n    </div>\n    <!--Actions-->\n    <div v-if=\"show.action\"\n      class=\"sky-action ti-flex-right\">\n      <slot name=\"action\"></slot>\n    </div>\n  </div>\n  <!--\n    Aside\n  -->\n  <div v-if=\"show.aside\"\n    class=\"explorer-aside\">\n    <slot name=\"aside\"></slot>\n  </div>\n  <!--\n    Main Arena\n  -->\n  <div class=\"explorer-arena\">\n    <slot name=\"arena\"></slot>\n  </div>\n  <!--\n    Footer\n  -->\n  <div v-if=\"show.footer\"\n    class=\"explorer-footer\">\n    <slot name=\"footer\"></slot>\n  </div>\n  <div v-if=\"loading\" class=\"exploer-loading-mask\"></div>\n</div>"); //============================================================
  // JOIN: wn/explorer/wn-explorer.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////////
      props: {
        "loading": {
          type: Boolean,
          "default": false
        },
        "noTitle": {
          type: Boolean,
          "default": false
        },
        "meta": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "ancestors": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "children": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "status": {
          type: Object,
          "default": function _default() {
            return {
              changed: false
            };
          }
        }
      },
      //////////////////////////////////////////////
      computed: {
        show: function show() {
          var re = {
            logo: this.$slots.logo ? true : false,
            action: this.$slots.action ? true : false,
            aside: this.$slots.aside ? true : false,
            footer: this.$slots.footer ? true : false
          };
          re.sky = !(this.noTitle && !re.logo && !re.action);
          return re;
        },
        topClass: function topClass() {
          return {
            "no-sky": !this.show.sky,
            "no-aside": !this.show.aside,
            "no-footer": !this.show.footer
          };
        }
      },
      //////////////////////////////////////////////
      methods: {
        //.........................................
        getObjTitle: function getObjTitle(meta) {
          var title = meta.title || meta.nm;
          return Ti.I18n.text(title);
        },
        //.........................................
        getObjLink: function getObjLink(meta) {
          return Wn.Util.getAppLink(meta).toString();
        }
      },
      //////////////////////////////////////////////
      mounted: function mounted() {// console.log(this.$slots)
      }
    };
    Ti.Preload("ti/com/wn/explorer/wn-explorer.mjs", _M);
  })(); //============================================================
  // JOIN: wn/explorer/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/explorer/_com.json", {
    "name": "wn-explorer",
    "globally": true,
    "template": "./wn-explorer.html",
    "mixins": ["./wn-explorer.mjs"]
  }); //============================================================
  // JOIN: wn/gui/arena/wn-gui-arena.html
  //============================================================

  Ti.Preload("ti/com/wn/gui/arena/wn-gui-arena.html", "<div class=\"wn-gui-arena\">\n  <component \n    :is=\"comType\"\n      class=\"ti-cover-parent\"\n      v-bind=\"comConf\"/>\n</div>"); //============================================================
  // JOIN: wn/gui/arena/wn-gui-arena.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      props: {
        "meta": {
          type: Object,
          "default": null
        },
        "comType": {
          type: String,
          "default": "ti-loading"
        },
        "comConf": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/gui/arena/wn-gui-arena.mjs", _M);
  })(); //============================================================
  // JOIN: wn/gui/arena/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/gui/arena/_com.json", {
    "name": "wn-gui-arena",
    "globally": true,
    "template": "./wn-gui-arena.html",
    "mixins": ["./wn-gui-arena.mjs"]
  }); //============================================================
  // JOIN: wn/gui/footer/wn-gui-footer.html
  //============================================================

  Ti.Preload("ti/com/wn/gui/footer/wn-gui-footer.html", "<div class=\"wn-gui-footer\">\n  <!--\n    Info\n  -->\n  <div class=\"as-info ti-flex-center\">\n    <ti-icon v-if=\"infoIcon\"\n      :value=\"infoIcon\"/>\n    <span v-if=\"infoText\"\n      >{{infoText|i18n}}</span>\n  </div>\n  <!--\n    Message\n  -->\n  <div class=\"as-msg ti-flex-center\">\n    {{message}}\n  </div>\n  <!--\n    Indicator\n  -->\n  <div class=\"as-indi\">\n    {{indicator}}\n  </div>\n</div>"); //============================================================
  // JOIN: wn/gui/footer/wn-gui-footer.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      /////////////////////////////////////////
      props: {
        "infoIcon": {
          type: [String, Object],
          "default": undefined
        },
        "infoText": {
          type: String,
          "default": undefined
        },
        "message": {
          type: String,
          "default": undefined
        },
        "indicator": {
          type: String,
          "default": undefined
        }
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/gui/footer/wn-gui-footer.mjs", _M);
  })(); //============================================================
  // JOIN: wn/gui/footer/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/gui/footer/_com.json", {
    "name": "wn-gui-footer",
    "globally": true,
    "template": "./wn-gui-footer.html",
    "mixins": ["./wn-gui-footer.mjs"]
  }); //============================================================
  // JOIN: wn/gui/side/nav/com/side-nav-item/side-nav-item.html
  //============================================================

  Ti.Preload("ti/com/wn/gui/side/nav/com/side-nav-item/side-nav-item.html", "<div class=\"side-nav-item\" :class=\"topClass\">\n  <!--\n    Self Info\n  -->\n  <div class=\"it-info\" >\n    <!--Icon-->\n    <span v-if=\"icon\" class=\"it-info-icon\">\n      <ti-icon :value=\"icon\" size=\".16rem\"/>\n    </span>\n    <!--Group-->\n    <span v-if=\"isGroup\"\n      class=\"it-info-text\"\n      @click.stop.prevent=\"onClickGroupInfo\">{{title|i18n}}</span>\n    <!--Item-->\n    <a v-else\n      class=\"it-info-text\"\n      :href=\"href\"\n      @click.stop.prevent=\"onClickItemInfo\">\n      {{title|i18n}}\n    </a>\n  </div>\n  <!--\n    Sub Container\n  -->\n  <div class=\"it-con\" v-if=\"items && items.length > 0\">\n      <side-nav-item v-for=\"subIt in items\"\n        :key=\"subIt.key\"\n        :group-status-store-key=\"subIt.key\"\n        :highlight-id=\"highlightId\"\n        v-bind=\"subIt\"\n        @item:actived=\"$notify('item:actived', $event)\"/>\n  </div>\n</div>"); //============================================================
  // JOIN: wn/gui/side/nav/com/side-nav-item/side-nav-item.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      ///////////////////////////////////////////
      data: function data() {
        return {
          collapse: true
        };
      },
      ///////////////////////////////////////////
      props: {
        "groupStatusStoreKey": {
          type: String,
          "default": null
        },
        "highlightId": {
          type: String,
          "default": null
        },
        "id": {
          type: String,
          "default": null
        },
        "depth": {
          type: Number,
          "default": 0
        },
        "icon": {
          type: [String, Object],
          "default": null
        },
        "title": {
          type: String,
          "default": null
        },
        "path": {
          type: String,
          "default": null
        },
        "view": {
          type: String,
          "default": null
        },
        "href": {
          type: String,
          "default": null
        },
        "items": {
          type: Array,
          "default": function _default() {
            return [];
          }
        }
      },
      ///////////////////////////////////////////
      computed: {
        topClass: function topClass() {
          return {
            "is-top": this.isTop,
            "is-sub": !this.isTop,
            "is-group": this.isGroup,
            "is-item": !this.isGroup,
            "is-collapse": this.collapse,
            "is-expend": !this.collapse,
            "is-highlight": this.isHighlight
          };
        },
        isTop: function isTop() {
          return this.depth == 0;
        },
        isGroup: function isGroup() {
          return _.isArray(this.items);
        },
        isHighlight: function isHighlight() {
          return this.id && this.id == this.highlightId;
        }
      },
      ///////////////////////////////////////////
      methods: {
        onClickGroupInfo: function onClickGroupInfo() {
          if (this.isGroup) {
            this.collapse = !this.collapse; // Save status

            if (this.groupStatusStoreKey) {
              Ti.Storage.session.set(this.groupStatusStoreKey, this.collapse);
            }
          }
        },
        onClickItemInfo: function onClickItemInfo() {
          this.$notify("item:actived", {
            id: this.id,
            title: this.title,
            path: this.path,
            href: this.href,
            view: this.view
          });
        }
      },
      ///////////////////////////////////////////
      mounted: function mounted() {
        if (this.isGroup) {
          // Only Top Group is expended
          if (this.isTop) {
            this.collapse = false;
          } // Others group will default collapse
          // The 'item' will ignore the setting of collapse
          else {
              this.collapse = true;
            } // Load local setting


          if (this.groupStatusStoreKey) {
            this.collapse = Ti.Storage.session.getBoolean(this.groupStatusStoreKey, this.collapse);
          }
        }
      } ///////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/gui/side/nav/com/side-nav-item/side-nav-item.mjs", _M);
  })(); //============================================================
  // JOIN: wn/gui/side/nav/com/side-nav-item/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/gui/side/nav/com/side-nav-item/_com.json", {
    "name": "side-nav-item",
    "template": "./side-nav-item.html",
    "mixins": ["./side-nav-item.mjs"]
  }); //============================================================
  // JOIN: wn/gui/side/nav/wn-gui-side-nav.html
  //============================================================

  Ti.Preload("ti/com/wn/gui/side/nav/wn-gui-side-nav.html", "<div class=\"wn-gui-side-nav\"\n  :class=\"TopClass\"\n  v-ti-activable>\n  <side-nav-item v-for=\"it in TheItems\"\n    :key=\"it.key\"\n    v-bind=\"it\"\n    @item:actived=\"onItemActived\"/>\n</div>"); //============================================================
  // JOIN: wn/gui/side/nav/wn-gui-side-nav.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      props: {
        "items": {
          type: Array,
          "default": null
        },
        "highlightItemId": {
          type: String,
          "default": null
        },
        "highlightItemPath": {
          type: String,
          "default": null
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //-------------------------------------
        TheItems: function TheItems() {
          var list = [];

          if (_.isArray(this.items)) {
            var _iterator78 = _createForOfIteratorHelper(this.items),
                _step78;

            try {
              for (_iterator78.s(); !(_step78 = _iterator78.n()).done;) {
                var it = _step78.value;
                list.push(this.evalItem(it));
              }
            } catch (err) {
              _iterator78.e(err);
            } finally {
              _iterator78.f();
            }
          }

          return list;
        },
        //-------------------------------------
        theHighlightItemId: function theHighlightItemId() {
          var list = this.joinHighlightItems([], this.items);

          if (list.length > 0) {
            // Sort the list, 0->N, the first one should be the hightlight one
            list.sort(function (it0, it1) {
              return it0.score - it1.score;
            }); // Get the first one

            return _.first(list).id;
          }
        } //-------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //-------------------------------------
        evalItem: function evalItem() {
          var it = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          // Children
          var items = null;

          if (_.isArray(it.items)) {
            items = [];

            var _iterator79 = _createForOfIteratorHelper(it.items),
                _step79;

            try {
              for (_iterator79.s(); !(_step79 = _iterator79.n()).done;) {
                var subIt = _step79.value;
                items.push(this.evalItem(subIt));
              }
            } catch (err) {
              _iterator79.e(err);
            } finally {
              _iterator79.f();
            }
          } // Self


          return _.assign(_.pick(it, ["id", "key", "depth", "icon", "title", "path", "view"]), {
            items: items,
            groupStatusStoreKey: it.key,
            highlightId: this.theHighlightItemId,
            href: it.id ? Wn.Util.getAppLink(it.id) + "" : null
          });
        },
        //-------------------------------------
        joinHighlightItems: function joinHighlightItems() {
          var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var items = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

          if (this.highlightItemId && _.isArray(items) && items.length > 0) {
            var _iterator80 = _createForOfIteratorHelper(items),
                _step80;

            try {
              for (_iterator80.s(); !(_step80 = _iterator80.n()).done;) {
                var it = _step80.value;

                // Match the ID, 0
                if (it.id == this.highlightItemId) {
                  list.push({
                    score: 0,
                    id: it.id
                  });
                } // Match the Path, 1 or more
                else if (it.path && it.id && this.highlightItemPath && this.highlightItemPath.startsWith(it.path)) {
                    var diff = this.highlightItemPath.length - it.path.length;
                    list.push({
                      score: 1 + diff,
                      id: it.id
                    });
                  } // Join Children


                if (it.items) {
                  this.joinHighlightItems(list, it.items);
                }
              }
            } catch (err) {
              _iterator80.e(err);
            } finally {
              _iterator80.f();
            }
          } // Return self


          return list;
        },
        //-------------------------------------
        onItemActived: function onItemActived() {
          var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          this.$notify("item:active", payload);
        } //-------------------------------------

      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/gui/side/nav/wn-gui-side-nav.mjs", _M);
  })(); //============================================================
  // JOIN: wn/gui/side/nav/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/gui/side/nav/_com.json", {
    "name": "wn-gui-side-nav",
    "globally": true,
    "template": "./wn-gui-side-nav.html",
    "mixins": ["./wn-gui-side-nav.mjs"],
    "components": ["./com/side-nav-item"]
  }); //============================================================
  // JOIN: wn/gui/side/tree/wn-gui-side-tree.html
  //============================================================

  Ti.Preload("ti/com/wn/gui/side/tree/wn-gui-side-tree.html", "<ti-tree\n  class=\"ti-fill-parent wn-gui-side-tree\"\n  id-by=\"value\"\n  name-by=\"name\"\n  :display=\"TreeDisplay\"\n  :data=\"myTreeData\"\n  :current-id=\"highlightItemId\"\n  :checked-ids=\"CheckedIds\"\n  keep-open-by=\"wn-gui-side-tree\"\n  :auto-open=\"true\"\n  :default-open-depth=\"2\"\n  :show-root=\"false\"\n  :puppet-mode=\"true\"\n  @select=\"onItemActived\"/>"); //============================================================
  // JOIN: wn/gui/side/tree/wn-gui-side-tree.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      data: function data() {
        return {
          myItems: [],
          myTreeData: []
        };
      },
      /////////////////////////////////////////
      props: {
        "items": {
          type: Array,
          "default": null
        },
        "highlightItemId": {
          type: String,
          "default": null
        },
        "highlightItemPath": {
          type: String,
          "default": null
        }
      },
      //////////////////////////////////////////
      computed: {
        //-------------------------------------
        TreeDisplay: function TreeDisplay() {
          return ['<icon>', {
            key: "text",
            comConf: {
              className: "is-nowrap",
              href: "(value)?/a/open/wn.manager?ph=id:${value}"
            }
          }];
        },
        //-------------------------------------
        HighlightItemId: function HighlightItemId() {
          var list = this.joinHighlightItems([], this.items);

          if (list.length > 0) {
            // Sort the list, 0->N, the first one should be the hightlight one
            list.sort(function (it0, it1) {
              return it0.score - it1.score;
            }); // Get the first one

            return _.first(list).id;
          }
        },
        //-------------------------------------
        CheckedIds: function CheckedIds() {
          if (!this.HighlightItemId) {
            return [];
          }

          return [this.HighlightItemId];
        } //-------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //-------------------------------------
        evalTreeData: function evalTreeData() {
          var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          this.myItems = _.cloneDeep(items);
          var list = [];

          if (_.isArray(items)) {
            var _iterator81 = _createForOfIteratorHelper(items),
                _step81;

            try {
              for (_iterator81.s(); !(_step81 = _iterator81.n()).done;) {
                var it = _step81.value;
                list.push(this.evalItemToTreeNode(it));
              }
            } catch (err) {
              _iterator81.e(err);
            } finally {
              _iterator81.f();
            }
          } //console.log("theTreeData", list)


          this.myTreeData = list;
        },
        //-------------------------------------
        evalItemToTreeNode: function evalItemToTreeNode() {
          var it = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          // Children
          var children = null;

          if (_.isArray(it.items)) {
            children = [];

            var _iterator82 = _createForOfIteratorHelper(it.items),
                _step82;

            try {
              for (_iterator82.s(); !(_step82 = _iterator82.n()).done;) {
                var subIt = _step82.value;
                children.push(this.evalItemToTreeNode(subIt));
              }
            } catch (err) {
              _iterator82.e(err);
            } finally {
              _iterator82.f();
            }
          } // Self


          return {
            name: it.key,
            text: it.title,
            icon: it.icon,
            value: it.id,
            children: children
          };
        },
        //-------------------------------------
        joinHighlightItems: function joinHighlightItems() {
          var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var items = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

          if (this.highlightItemId && _.isArray(items) && items.length > 0) {
            var _iterator83 = _createForOfIteratorHelper(items),
                _step83;

            try {
              for (_iterator83.s(); !(_step83 = _iterator83.n()).done;) {
                var it = _step83.value;

                // Match the ID, 0
                if (it.id == this.highlightItemId) {
                  list.push({
                    score: 0,
                    id: it.id
                  });
                } // Match the Path, 1 or more
                else if (it.path && it.id && this.highlightItemPath && this.highlightItemPath.startsWith(it.path)) {
                    var diff = this.highlightItemPath.length - it.path.length;
                    list.push({
                      score: 1 + diff,
                      id: it.id
                    });
                  } // Join Children


                if (it.items) {
                  this.joinHighlightItems(list, it.items);
                }
              }
            } catch (err) {
              _iterator83.e(err);
            } finally {
              _iterator83.f();
            }
          } // Return self


          return list;
        },
        //-------------------------------------
        onItemActived: function onItemActived() {
          var _ref124 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              _ref124$current = _ref124.current,
              current = _ref124$current === void 0 ? {} : _ref124$current;

          if (current.value) {
            this.$notify("item:active", {
              id: current.value
            });
          }
        } //-------------------------------------

      },
      //////////////////////////////////////////
      watch: {
        "items": {
          handler: function handler(newVal, oldVal) {
            if (!_.isEqual(newVal, this.myItems)) {
              this.evalTreeData(newVal);
            }
          },
          immediate: true
        }
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/gui/side/tree/wn-gui-side-tree.mjs", _M);
  })(); //============================================================
  // JOIN: wn/gui/side/tree/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/gui/side/tree/_com.json", {
    "name": "wn-gui-side-tree",
    "globally": true,
    "template": "./wn-gui-side-tree.html",
    "mixins": ["./wn-gui-side-tree.mjs"],
    "components": ["@com:ti/tree"]
  }); //============================================================
  // JOIN: wn/gui/test.json
  //============================================================

  Ti.Preload("ti/com/wn/gui/test.json", {
    "layout": {
      "type": "cols",
      "border": true,
      "blocks": [{
        "name": "C0",
        "icon": "im-award",
        "title": "Test C0",
        "closer": true,
        "actions": [{
          "type": "group",
          "icon": "zmdi-more-vert",
          "items": [{
            "key": "show-P1",
            "text": "show P1",
            "type": "action",
            "action": "main:showBlock(P1)"
          }, {
            "key": "hide-P1",
            "text": "hide P1",
            "type": "action",
            "action": "main:hideBlock(P1)"
          }]
        }],
        "size": "20%",
        "type": "rows",
        "border": true,
        "blocks": [{
          "name": "C0-1",
          "size": 100,
          "body": {
            "comType": "ti-label",
            "comConf": {
              "value": "C0-1 content"
            }
          }
        }, {
          "name": "C0-2",
          "body": {
            "comType": "ti-label",
            "comConf": {
              "value": "C0-2 content"
            }
          }
        }, {
          "name": "C0-3",
          "body": {
            "comType": "ti-label",
            "comConf": {
              "value": "C0-3 content"
            }
          }
        }]
      }, {
        "name": "C1",
        "icon": "im-award",
        "title": "Test C1",
        "actions": [{
          "type": "group",
          "icon": "zmdi-more-vert",
          "items": [{
            "key": "show-P1",
            "text": "show P1",
            "type": "action",
            "action": "main:showBlock(P1)"
          }, {
            "key": "hide-P1",
            "text": "hide P1",
            "type": "action",
            "action": "main:hideBlock(P1)"
          }]
        }],
        "size": "stretch",
        "type": "tabs",
        "blocks": [{
          "name": "C1-1",
          "size": 100,
          "body": {
            "comType": "ti-label",
            "comConf": {
              "value": "C1-1 content"
            }
          }
        }, {
          "name": "C1-2",
          "body": {
            "comType": "ti-label",
            "comConf": {
              "value": "C1-2 content"
            }
          }
        }, {
          "name": "C1-3",
          "body": {
            "comType": "ti-label",
            "comConf": {
              "value": "C1-3 content"
            }
          }
        }]
      }, {
        "name": "C2",
        "body": "C2",
        "size": 260
      }],
      "panels": [{
        "name": "P1",
        "closer": "right",
        "position": "left-top",
        "width": "50%",
        "height": "50%",
        "mask": true,
        "body": {
          "comType": "ti-label",
          "comConf": {
            "value": "P1"
          }
        }
      }]
    },
    "schema": {
      "C1": {
        "comType": "ti-label",
        "comConf": {
          "value": "I am C11"
        }
      },
      "C2": {
        "comType": "ti-label",
        "comConf": {
          "value": "I am C22"
        }
      }
    },
    "actions": [{
      "key": "reloading",
      "type": "action",
      "icon": "zmdi-refresh",
      "text": "i18n:refresh",
      "altDisplay": {
        "icon": "zmdi-refresh zmdi-hc-spin",
        "text": "i18n:loading"
      },
      "action": "dispatch:main/reload",
      "shortcut": "CTRL+R"
    }, {
      "key": "show-P1",
      "text": "show P1",
      "type": "action",
      "action": "main:showBlock(P1)"
    }, {
      "key": "hide-P1",
      "text": "hide P1",
      "type": "action",
      "action": "main:hideBlock(P1)"
    }]
  }); //============================================================
  // JOIN: wn/gui/wn-gui.html
  //============================================================

  Ti.Preload("ti/com/wn/gui/wn-gui.html", "<ti-gui\n  v-bind=\"layout\"\n  :schema=\"schema\"\n  :shown=\"shown\"\n  @block:show=\"showBlock\"\n  @block:hide=\"hideBlock\"/>"); //============================================================
  // JOIN: wn/gui/wn-gui.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: false,
      /////////////////////////////////////////
      data: function data() {
        return {
          "shown": {}
        };
      },
      /////////////////////////////////////////
      props: {
        "data": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        layout: function layout() {
          if (this.data) return this.data.layout;
          return {};
        },
        schema: function schema() {
          if (this.data) return this.data.schema;
          return {};
        }
      },
      //////////////////////////////////////////
      watch: {
        // Notify wn-manager update the action menu
        "data.actions": function dataActions() {//this.$notify("actions:updated", this.data.actions)
        }
      },
      //////////////////////////////////////////
      methods: {
        // @see ti-gui-methods.mjs#showGuiBlock
        showBlock: function showBlock(name) {
          this.shown = this.createGuiBlockShown(this.shown, name, true);
        },
        // @see ti-gui-methods.mjs#hideGuiBlock
        hideBlock: function hideBlock(name) {
          this.shown = this.createGuiBlockShown(this.shown, name, false);
        }
      }
    };
    Ti.Preload("ti/com/wn/gui/wn-gui.mjs", _M);
  })(); //============================================================
  // JOIN: wn/gui/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/gui/_com.json", {
    "name": "wn-gui",
    "globally": true,
    "template": "./wn-gui.html",
    "methods": "@com:ti/gui/ti-gui-methods.mjs",
    "mixins": ["./wn-gui.mjs"],
    "components": ["@com:ti/gui"]
  }); //============================================================
  // JOIN: wn/imgfile/wn-imgfile.html
  //============================================================

  Ti.Preload("ti/com/wn/imgfile/wn-imgfile.html", "<ti-imgfile\n  :src=\"imageSrc\"\n  :width=\"width\"\n  :height=\"height\"\n  :progress=\"progress\"\n  :upload-file=\"uploadFile\"\n  :removable=\"removable\"\n  @upload=\"onUpload\"\n  @remove=\"onRemove\"\n  @open=\"onOpen\"/>"); //============================================================
  // JOIN: wn/imgfile/wn-imgfile.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      data: function data() {
        return {
          "src_ts": null,
          "oImage": null,
          "uploadFile": null,
          "progress": -1
        };
      },
      /////////////////////////////////////////
      props: {
        "value": {
          type: String,
          "default": null
        },
        // Display width
        "width": {
          type: [String, Number],
          "default": undefined
        },
        // Display height
        "height": {
          type: [String, Number],
          "default": undefined
        },
        // support remove the objects
        "removable": {
          type: Boolean,
          "default": true
        },
        // Indicate the upload target when upload new value
        // Of cause, if the `value` exists, replace it
        // The `target` must be a path to a image object,
        // it will auto transfrom the image format by `cmd_imagic`
        "target": {
          type: String,
          required: true,
          "default": null
        },
        // which type supported to upload
        // nulll or empty array will support any types
        "supportTypes": {
          type: [String, Array],
          "default": function _default() {
            return ["png", "jpg", "jpeg", "gif"];
          }
        },
        // which mime supported to upload
        // nulll or empty array will support any mimes
        "supportMimes": {
          type: [String, Array],
          "default": function _default() {
            return ["image/png", "image/jpeg", "image/gif"];
          }
        },
        // Image object only: it will auto apply image filter
        // just like clip the image size etc..
        // @see cmd_imagic for more detail about the filter
        "filter": {
          type: [Array, String],
          "default": null
        },
        // Image object only: if `>0 and <=1` mean output quality
        // if not match the range, will depends on the `cmd_imagic` default
        "quality": {
          type: Number,
          "default": 0
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        acceptTypes: function acceptTypes() {
          if (_.isString(this.supportTypes)) return this.supportTypes.split(",");
          return this.supportTypes;
        },
        //--------------------------------------
        acceptMimes: function acceptMimes() {
          if (_.isString(this.supportMimes)) return this.supportMimes.split(",");
          return this.supportMimes;
        },
        //--------------------------------------
        imageFilter: function imageFilter() {
          if (!this.filter) return [];
          return [].concat(this.filter);
        },
        //--------------------------------------
        // Display image for <ti-thumb>
        imageSrc: function imageSrc() {
          if (this.oImage) {
            var ss = ["/o/content?str=id:", this.oImage.id];

            if (this.src_ts) {
              ss.push("&_t=");
              ss.push(this.src_ts);
            }

            return ss.join("");
          }
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        assertListHas: function assertListHas(list, str, invalidMsg, vars) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee118() {
            var invalid, _iterator84, _step84, li;

            return regeneratorRuntime.wrap(function _callee118$(_context119) {
              while (1) {
                switch (_context119.prev = _context119.next) {
                  case 0:
                    if (_.isEmpty(list)) {
                      _context119.next = 24;
                      break;
                    }

                    invalid = true;
                    _iterator84 = _createForOfIteratorHelper(list);
                    _context119.prev = 3;

                    _iterator84.s();

                  case 5:
                    if ((_step84 = _iterator84.n()).done) {
                      _context119.next = 12;
                      break;
                    }

                    li = _step84.value;

                    if (!(li == str)) {
                      _context119.next = 10;
                      break;
                    }

                    invalid = false;
                    return _context119.abrupt("break", 12);

                  case 10:
                    _context119.next = 5;
                    break;

                  case 12:
                    _context119.next = 17;
                    break;

                  case 14:
                    _context119.prev = 14;
                    _context119.t0 = _context119["catch"](3);

                    _iterator84.e(_context119.t0);

                  case 17:
                    _context119.prev = 17;

                    _iterator84.f();

                    return _context119.finish(17);

                  case 20:
                    if (!invalid) {
                      _context119.next = 24;
                      break;
                    }

                    _context119.next = 23;
                    return Ti.Alert(invalidMsg, {
                      type: "warn",
                      icon: "zmdi-alert-triangle"
                    });

                  case 23:
                    return _context119.abrupt("return", false);

                  case 24:
                    return _context119.abrupt("return", true);

                  case 25:
                  case "end":
                    return _context119.stop();
                }
              }
            }, _callee118, null, [[3, 14, 17, 20]]);
          }))();
        },
        //--------------------------------------
        onOpen: function onOpen() {
          var _this235 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee119() {
            var link;
            return regeneratorRuntime.wrap(function _callee119$(_context120) {
              while (1) {
                switch (_context120.prev = _context120.next) {
                  case 0:
                    if (!_this235.oImage) {
                      _context120.next = 4;
                      break;
                    }

                    link = Wn.Util.getAppLink(_this235.oImage); //console.log("it will open ", link)

                    _context120.next = 4;
                    return Ti.Be.Open(link.url, {
                      params: link.params
                    });

                  case 4:
                  case "end":
                    return _context120.stop();
                }
              }
            }, _callee119);
          }))();
        },
        //--------------------------------------
        onRemove: function onRemove() {
          var _this236 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee120() {
            return regeneratorRuntime.wrap(function _callee120$(_context121) {
              while (1) {
                switch (_context121.prev = _context121.next) {
                  case 0:
                    if (!_this236.oImage) {
                      _context121.next = 3;
                      break;
                    }

                    _context121.next = 3;
                    return Wn.Sys.exec2("rm id:".concat(_this236.oImage.id));

                  case 3:
                    // Notify the change
                    _this236.$notify("change", null);

                  case 4:
                  case "end":
                    return _context121.stop();
                }
              }
            }, _callee120);
          }))();
        },
        //--------------------------------------
        onUpload: function onUpload(file) {
          var _this237 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee121() {
            var type, _yield$Wn$Io$uploadFi2, ok, msg, data, cmd, cmdText;

            return regeneratorRuntime.wrap(function _callee121$(_context122) {
              while (1) {
                switch (_context122.prev = _context122.next) {
                  case 0:
                    //console.log("it will upload ", file)
                    //................................
                    // Check for support Types
                    type = Ti.Util.getSuffixName(file.name);
                    _context122.next = 3;
                    return _this237.assertListHas(_this237.acceptTypes, type, {
                      text: 'i18n:wn-invalid-types',
                      vars: {
                        current: type,
                        supports: _this237.acceptTypes.join(", ")
                      }
                    });

                  case 3:
                    if (_context122.sent) {
                      _context122.next = 5;
                      break;
                    }

                    return _context122.abrupt("return");

                  case 5:
                    _context122.next = 7;
                    return _this237.assertListHas(_this237.acceptMimes, file.type, {
                      text: 'i18n:wn-invalid-mimes',
                      vars: {
                        current: file.type,
                        supports: _this237.acceptMimes.join(", ")
                      }
                    });

                  case 7:
                    if (_context122.sent) {
                      _context122.next = 9;
                      break;
                    }

                    return _context122.abrupt("return");

                  case 9:
                    //................................
                    // Upload file to destination
                    _this237.uploadFile = file;
                    _this237.progress = 0;
                    _context122.next = 13;
                    return Wn.Io.uploadFile(file, {
                      target: _this237.target,
                      mode: "r",
                      progress: function progress(pe) {
                        _this237.progress = pe.loaded / pe.total;
                      }
                    });

                  case 13:
                    _yield$Wn$Io$uploadFi2 = _context122.sent;
                    ok = _yield$Wn$Io$uploadFi2.ok;
                    msg = _yield$Wn$Io$uploadFi2.msg;
                    data = _yield$Wn$Io$uploadFi2.data;
                    //................................
                    // Reset upload
                    _this237.uploadFile = null;
                    _this237.progress = -1; //................................
                    // Fail to upload

                    if (ok) {
                      _context122.next = 23;
                      break;
                    }

                    _context122.next = 22;
                    return Ti.Alert("i18n:".concat(msg), {
                      type: "warn",
                      icon: "zmdi-alert-triangle"
                    });

                  case 22:
                    return _context122.abrupt("return");

                  case 23:
                    if (_.isEmpty(_this237.imageFilter)) {
                      _context122.next = 30;
                      break;
                    }

                    cmd = ["imagic", "id:".concat(data.id), "-filter \"".concat(_this237.imageFilter.join(" "), "\"")];

                    if (_this237.quality > 0 && _this237.quality <= 1) {
                      cmd.push("-qa ".concat(_this237.quality));
                    }

                    cmd.push("-out inplace");
                    cmdText = cmd.join(" ");
                    _context122.next = 30;
                    return Wn.Sys.exec2(cmdText);

                  case 30:
                    //................................
                    // done
                    _this237.src_ts = Date.now();
                    _this237.oImage = data;

                    _this237.$notify("change", data);

                  case 33:
                  case "end":
                    return _context122.stop();
                }
              }
            }, _callee121);
          }))();
        },
        //--------------------------------------
        reload: function reload() {
          var _this238 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee122() {
            return regeneratorRuntime.wrap(function _callee122$(_context123) {
              while (1) {
                switch (_context123.prev = _context123.next) {
                  case 0:
                    if (!_this238.value) {
                      _context123.next = 6;
                      break;
                    }

                    _context123.next = 3;
                    return Wn.Io.loadMeta(_this238.value);

                  case 3:
                    _this238.oImage = _context123.sent;
                    _context123.next = 7;
                    break;

                  case 6:
                    _this238.oImage = null;

                  case 7:
                  case "end":
                    return _context123.stop();
                }
              }
            }, _callee122);
          }))();
        } //--------------------------------------

      },
      //////////////////////////////////////////
      watch: {
        "value": function value() {
          this.reload();
        }
      },
      //////////////////////////////////////////
      mounted: function () {
        var _mounted13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee123() {
          return regeneratorRuntime.wrap(function _callee123$(_context124) {
            while (1) {
              switch (_context124.prev = _context124.next) {
                case 0:
                  _context124.next = 2;
                  return this.reload();

                case 2:
                case "end":
                  return _context124.stop();
              }
            }
          }, _callee123, this);
        }));

        function mounted() {
          return _mounted13.apply(this, arguments);
        }

        return mounted;
      }() //////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/imgfile/wn-imgfile.mjs", _M);
  })(); //============================================================
  // JOIN: wn/imgfile/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/imgfile/_com.json", {
    "name": "wn-imgfile",
    "globally": true,
    "template": "./wn-imgfile.html",
    "mixins": ["./wn-imgfile.mjs"],
    "components": ["@com:ti/imgfile"]
  }); //============================================================
  // JOIN: wn/label/wn-label.html
  //============================================================

  Ti.Preload("ti/com/wn/label/wn-label.html", "<ti-label\n  :class-name=\"className\"\n  v-bind=\"this\"\n  :value-clickable=\"ValueClickable\"\n  @click:value=\"OnClickValue\"/>"); //============================================================
  // JOIN: wn/label/wn-label.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////
      props: {
        "openRefer": {
          type: Object,
          "default": undefined
        }
      },
      //////////////////////////////////////////
      computed: {
        ValueClickable: function ValueClickable() {
          return this.openRefer ? true : false;
        }
      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnClickValue: function OnClickValue() {
          var _this239 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee124() {
            var obj, conf;
            return regeneratorRuntime.wrap(function _callee124$(_context125) {
              while (1) {
                switch (_context125.prev = _context125.next) {
                  case 0:
                    if (!(!_this239.openRefer || !_this239.value)) {
                      _context125.next = 2;
                      break;
                    }

                    return _context125.abrupt("return");

                  case 2:
                    _context125.next = 4;
                    return Wn.Io.loadMetaBy(_this239.value);

                  case 4:
                    obj = _context125.sent;
                    console.log(obj); // prepare conf

                    conf = _.assign({
                      title: "i18n:info",
                      width: 640,
                      height: 480,
                      textOk: null,
                      textCancel: "i18n:close",
                      result: obj
                    }, _this239.openRefer); // Show Dialog

                    _context125.next = 9;
                    return Ti.App.Open(conf);

                  case 9:
                  case "end":
                    return _context125.stop();
                }
              }
            }, _callee124);
          }))();
        } //--------------------------------------

      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/label/wn-label.mjs", _M);
  })(); //============================================================
  // JOIN: wn/label/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/label/_com.json", {
    "name": "wn-label",
    "globally": true,
    "template": "./wn-label.html",
    "props": ["@com:ti/label/ti-label-props.mjs"],
    "mixins": ["./wn-label.mjs"],
    "components": ["@com:ti/label"]
  }); //============================================================
  // JOIN: wn/list/wn-list.html
  //============================================================

  Ti.Preload("ti/com/wn/list/wn-list.html", "<ti-list\n  v-bind=\"this\"\n  :display=\"DisplayItems\"\n  :on-init=\"OnSubListInit\"\n  @select=\"OnSelected\"\n  @open=\"$notify('open', $event)\"/>"); //============================================================
  // JOIN: wn/list/wn-list.mjs
  //============================================================

  (function () {
    /////////////////////////////////////////////////////
    var _M = {
      ///////////////////////////////////////////////////
      data: function data() {
        return {
          isAllChecked: false,
          hasChecked: false,
          theCurrentId: false,
          theCheckedIds: false
        };
      },
      ///////////////////////////////////////////////////
      props: {
        "iconBy": {
          type: [String, Function],
          "default": undefined
        },
        "indentBy": {
          type: [String, Function],
          "default": undefined
        },
        "itemClassName": undefined,
        "display": {
          type: [Object, String, Array],
          "default": function _default() {
            return {
              key: "..",
              comType: "ti-label"
            };
          }
        },
        "border": {
          type: Boolean,
          "default": true
        },
        "autoScrollIntoView": {
          type: Boolean,
          "default": true
        }
      },
      ///////////////////////////////////////////////////
      computed: {
        //----------------------------------------------
        DisplayItems: function DisplayItems() {
          return this.explainDisplayItems(this.display);
        } //----------------------------------------------

      },
      ///////////////////////////////////////////////////
      methods: {
        //----------------------------------------------
        OnSubListInit: function OnSubListInit($list) {
          this.$list = $list;
        },
        //----------------------------------------------
        OnSelected: function OnSelected() {
          var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          this.theCheckedIds = payload.checkedIds;
          this.theCurrentId = payload.currentId;
          this.syncCheckStatus();
          this.$notify("select", payload);
        },
        //----------------------------------------------
        syncCheckStatus: function syncCheckStatus() {
          this.isAllChecked = this.$list.isAllChecked;
          this.hasChecked = this.$list.hasChecked;
        },
        //----------------------------------------------
        // Delegate methods
        selectPrevRow: function selectPrevRow(options) {
          this.$list.selectPrevRow(options);
        },
        selectNextRow: function selectNextRow(options) {
          this.$list.selectNextRow(options);
        },
        getCurrentRow: function getCurrentRow(options) {
          return this.$list.getCurrentRow(options);
        },
        getCheckedRow: function getCheckedRow(options) {
          return this.$list.getCheckedRow(options);
        },
        getCurrent: function getCurrent(options) {
          return this.$list.getCurrent(options);
        },
        getChecked: function getChecked(options) {
          return this.$list.getChecked(options);
        },
        selectRow: function selectRow(options) {
          this.$list.selectRow(options);
        },
        checkRow: function checkRow(options) {
          this.$list.checkRow(options);
        },
        cancelRow: function cancelRow(options) {
          this.$list.cancelRow(options);
        } //----------------------------------------------

      },
      ///////////////////////////////////////////////////
      watch: {
        "data": function data() {
          this.syncCheckStatus();
        },
        "checkedIds": function checkedIds() {
          this.syncCheckStatus();
        }
      } ///////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/list/wn-list.mjs", _M);
  })(); //============================================================
  // JOIN: wn/list/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/list/_com.json", {
    "name": "wn-list",
    "globally": true,
    "template": "./wn-list.html",
    "props": ["@com:ti/support/list_props.mjs"],
    "mixins": ["@com:wn/support/wn_list_wrapper_mixins.mjs", "./wn-list.mjs"],
    "components": ["@com:ti/table"]
  }); //============================================================
  // JOIN: wn/obj/creation/wn-obj-creation.html
  //============================================================

  Ti.Preload("ti/com/wn/obj/creation/wn-obj-creation.html", "<div class=\"wn-obj-creation\"\n  :class=\"TopClass\">\n  <!--\n    Side type list\n  -->\n  <div class=\"oc-types\"\n    v-if=\"hasTypes\">\n    <ul>\n      <li\n        v-for=\"li of TypeList\"\n          :class=\"li.className\"\n          @click=\"setCurrentType(li.name)\">\n          <!--Icon-->\n          <ti-icon\n            v-if=\"li.icon\"\n              :value=\"li.icon\"/>\n          <!--Text-->\n          <span class=\"as-text\">{{li.text|i18n}}</span>\n          <!--Suffix-->\n          <em v-if=\"li.suffix\">({{li.suffix}})</em>\n      </li>\n    </ul>\n  </div>\n  <!--\n    Main Area\n  -->\n  <div class=\"oc-main\">\n    <!--\n      Type Brief\n    -->\n    <div v-if=\"hasCurrentType\"\n      class=\"oc-info\">\n      <div class=\"oc-thumb\">\n        <ti-icon :value=\"CurrentType.thumb\"/>\n      </div>\n      <div class=\"oc-text\">{{CurrentType.text | i18n}}</div>\n      <div v-if=\"!CurrentIsDIR\"\n        class=\"oc-name\">*.{{CurrentType.name}}</div>\n      <div class=\"oc-brief\"\n        v-if=\"CurrentType.brief\">{{CurrentType.brief}}</div>\n    </div>\n    <!--\n      Free create\n    -->\n    <div v-else\n      class=\"oc-free\">\n      <span>{{'wn-oc-free'|i18n}}</span>\n    </div>\n    <!--\n      Input value\n    -->\n    <div class=\"oc-input\">\n      <input\n        ref=\"input\" \n        :value=\"value.name\"\n        :placeholder=\"'wn-oc-tip'|i18n\" \n        @change=\"OnInputChange\" \n        spellcheck=\"false\">\n    </div>\n  </div>\n</div>"); //============================================================
  // JOIN: wn/obj/creation/wn-obj-creation.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      data: function data() {
        return {
          myCurrentType: undefined
        };
      },
      /////////////////////////////////////////
      props: {
        "types": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "value": {
          type: Object,
          "default": function _default() {
            return {// name : "xxxx",
              // type : "txt",
              // race : "FILE",
              // mime : "text/plain"
            };
          }
        },
        "trimed": {
          type: Boolean,
          "default": true
        },
        "freeCreate": {
          type: Boolean,
          "default": false
        }
      },
      /////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //--------------------------------------
        hasTypes: function hasTypes() {
          return !_.isEmpty(this.types);
        },
        //--------------------------------------
        CurrentTypeName: function CurrentTypeName() {
          var tp = this.myCurrentType || this.value.type;

          if (!tp && !this.freeCreate) {
            return _.get(_.first(this.types), "name");
          }

          return tp;
        },
        //--------------------------------------
        TypeList: function TypeList() {
          var _this240 = this;

          var list = [];

          if (this.freeCreate) {
            var currentIsNull = Ti.Util.isNil(this.CurrentTypeName);
            list.push({
              name: null,
              text: "i18n:wn-oc-auto-type",
              type: null,
              icon: "far-file",
              thumb: "far-file",
              suffix: "*.*",
              current: currentIsNull,
              className: {
                "is-current": currentIsNull
              },
              race: "FILE",
              mime: "text/plain"
            });
          }

          _.forEach(this.types, function (type) {
            var li = _.cloneDeep(type);

            li.thumb = li.thumb || li.icon;
            li.suffix = "*.".concat(li.name);
            li.current = li.name == _this240.CurrentTypeName;
            li.className = {
              "is-current": li.current
            };
            list.push(li);
          });

          return list;
        },
        //--------------------------------------
        CurrentType: function CurrentType() {
          return _.find(this.TypeList, function (li) {
            return li.current;
          });
        },
        //--------------------------------------
        CurrentIsDIR: function CurrentIsDIR() {
          return 'DIR' == _.get(this.CurrentType, "race");
        },
        //--------------------------------------
        hasCurrentType: function hasCurrentType() {
          return this.CurrentType ? true : false;
        } //--------------------------------------

      },
      /////////////////////////////////////////
      methods: {
        //--------------------------------------
        setCurrentType: function setCurrentType(name) {
          this.myCurrentType = name;
        },
        //--------------------------------------
        OnInputChange: function OnInputChange() {
          var name = this.$refs.input.value;

          if (this.trimed) {
            name = _.trim(name);
          }

          var type = _.assign({
            name: "txt",
            mime: "text/plain",
            race: "FILE"
          }, this.CurrentType); // Try to find suffix name in type list


          if (Ti.Util.isNil(type.name)) {
            var typeName = Ti.Util.getSuffixName(name);

            if (typeName) {
              var _iterator85 = _createForOfIteratorHelper(this.types),
                  _step85;

              try {
                for (_iterator85.s(); !(_step85 = _iterator85.n()).done;) {
                  var li = _step85.value;

                  if (typeName == li.name) {
                    type = li;
                    break;
                  }
                }
              } catch (err) {
                _iterator85.e(err);
              } finally {
                _iterator85.f();
              }
            }
          }

          this.$notify("change", {
            name: name,
            type: type.name,
            mime: type.mime,
            race: type.race
          });
        } //--------------------------------------

      } /////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/obj/creation/wn-obj-creation.mjs", _M);
  })(); //============================================================
  // JOIN: wn/obj/creation/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/obj/creation/_com.json", {
    "name": "wn-obj-creation",
    "globally": true,
    "template": "./wn-obj-creation.html",
    "mixins": ["./wn-obj-creation.mjs"]
  }); //============================================================
  // JOIN: wn/obj/form/wn-obj-form.html
  //============================================================

  Ti.Preload("ti/com/wn/obj/form/wn-obj-form.html", "<ti-form \n  v-bind=\"this\"\n  :auto-show-blank=\"isAutoShowBlank\"\n  :class-name=\"className\"\n  @field:change=\"OnFieldChange\"\n  @change=\"OnChange\"\n  @invalid=\"OnInvalid\"/>"); //============================================================
  // JOIN: wn/obj/form/wn-obj-form.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////////////////
      props: {
        "fuse": {
          type: Object,
          "default": function _default() {
            return {
              key: "wn-obj-form",
              noti: null
            };
          }
        },
        // {method : "dispatch", target : "main/onChanged"}
        "setDataBy": {
          type: [String, Object, Boolean],
          "default": null
        },
        // {method : "dispatch", target : "main/changeMeta"}
        "updateBy": {
          type: [String, Object, Boolean],
          "default": null
        },
        // {method : "commit", target : "main/setFieldStatus"}
        "setFieldStatusBy": {
          type: [String, Object, Boolean],
          "default": null
        }
      },
      //////////////////////////////////////////////////////
      computed: {
        isAutoShowBlank: function isAutoShowBlank() {
          return Ti.Util.fallback(this.autoShowBlank, true);
        }
      },
      //////////////////////////////////////////////////////
      methods: {
        //--------------------------------------------------
        doAction: function doAction(emitName, action, payload) {
          // {method, target}
          if (_.isPlainObject(action)) {
            Ti.App(this)[action.method](action.target, payload);
          } // "method:target"
          else if (_.isString(action)) {
              Ti.App(this).exec(action, payload);
            } // Just notify $parent
            else if (action) {
                this.$notify(emitName, payload);
              }
        },
        //--------------------------------------------------
        OnFieldChange: function OnFieldChange() {
          var _ref125 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              name = _ref125.name,
              value = _ref125.value;

          //console.log(" <--- @field:changed", {name, value})
          this.doAction("field:change", this.updateBy, {
            name: name,
            value: value
          });
        },
        //--------------------------------------------------
        OnChange: function OnChange(data) {
          //console.log(" <- @changed", data)
          this.doAction("change", this.setDataBy, data);
        },
        //--------------------------------------------------
        OnInvalid: function OnInvalid(err) {
          //console.log("wn-form.invalid", err)
          var payload = {
            name: err.name,
            message: [err.errMessage, err.value].join(" :: "),
            status: "warn"
          };
          this.doAction("invalid", this.setFieldStatusBy, payload);
        } //--------------------------------------------------

      } //////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/obj/form/wn-obj-form.mjs", _M);
  })(); //============================================================
  // JOIN: wn/obj/form/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/obj/form/_com.json", {
    "name": "wn-obj-form",
    "globally": true,
    "template": "./wn-obj-form.html",
    "props": "@com:ti/form/ti-form-props.mjs",
    "mixins": ["./wn-obj-form.mjs"],
    "components": ["@com:ti/form", "@com:wn/transfer", "@com:wn/droplist", "@com:wn/combo/input", "@com:wn/imgfile", "@com:wn/combo/multi-input"]
  }); //============================================================
  // JOIN: wn/obj/icon/wn-obj-icon.html
  //============================================================

  Ti.Preload("ti/com/wn/obj/icon/wn-obj-icon.html", "<ti-icon \n  class=\"wn-obj-icon\" \n  :class=\"topClass\"\n  :value=\"theIcon\"/>"); //============================================================
  // JOIN: wn/obj/icon/wn-obj-icon.mjs
  //============================================================

  (function () {
    /////////////////////////////////////////////////////
    var _M = {
      inheritAttrs: false,
      ///////////////////////////////////////////////////
      props: {
        // icon string
        "icon": {
          type: String,
          "default": null
        },
        // image thumb: id:xxxx
        "thumb": {
          type: String,
          "default": null
        },
        "mime": {
          type: String,
          "default": null
        },
        "type": {
          type: String,
          "default": null
        },
        "race": {
          type: String,
          "default": null
        },
        // default icon string
        "candidateIcon": {
          type: String,
          "default": null
        },
        // timestamp
        "timestamp": {
          type: Number,
          "default": 0
        }
      },
      ///////////////////////////////////////////////////
      computed: {
        //-----------------------------------------------
        topClass: function topClass() {
          return Ti.Css.mergeClassName(this.className);
        },
        //-----------------------------------------------
        theIcon: function theIcon() {
          return Wn.Util.getObjThumbIcon({
            candidateIcon: this.candidateIcon,
            timestamp: this.timestamp,
            thumb: this.thumb,
            icon: this.icon,
            mime: this.mime,
            type: this.type,
            race: this.race
          }, "fas-cube");
        } //-----------------------------------------------

      },
      ///////////////////////////////////////////////////
      methods: {} //-----------------------------------------------
      //-----------------------------------------------
      ///////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/obj/icon/wn-obj-icon.mjs", _M);
  })(); //============================================================
  // JOIN: wn/obj/icon/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/obj/icon/_com.json", {
    "name": "wn-obj-icon",
    "globally": true,
    "template": "./wn-obj-icon.html",
    "mixins": ["./wn-obj-icon.mjs"]
  }); //============================================================
  // JOIN: wn/obj/json/wn-obj-json.html
  //============================================================

  Ti.Preload("ti/com/wn/obj/json/wn-obj-json.html", "<div class=\"wn-obj-json\">\n  <!--\n    Show Text Editor\n  -->\n  <ti-text-json v-if=\"hasMeta\"\n    class=\"ti-fill-parent\"\n    :value=\"value\"\n    :data=\"data\"\n    @change=\"onChangeContent\"/>\n  <!--\n    Empty Data\n  -->\n  <ti-loading v-else/>\n</div>"); //============================================================
  // JOIN: wn/obj/json/wn-obj-json.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////
      props: {
        "meta": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "value": {
          type: String,
          "default": null
        },
        "status": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      ////////////////////////////////////////////
      computed: {
        //----------------------------------------
        hasMeta: function hasMeta() {
          return this.meta ? true : false;
        } //----------------------------------------

      },
      ////////////////////////////////////////////
      methods: {
        onChangeContent: function onChangeContent(newData) {
          this.$notify("change", newData);
        }
      },
      ////////////////////////////////////////////
      mounted: function mounted() {
        var _this241 = this;

        //----------------------------------------
        Ti.Fuse.getOrCreate().add({
          key: "wn-obj-json",
          everythingOk: function everythingOk() {
            return !_this241.status.changed;
          },
          fail: function fail() {
            Ti.Toast.Open("i18n:wn-obj-nosaved", "warn");
          }
        }); //----------------------------------------
      },
      ////////////////////////////////////////////
      beforeDestroy: function beforeDestroy() {
        Ti.Fuse.get().remove("wn-obj-json");
      } ////////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/obj/json/wn-obj-json.mjs", _M);
  })(); //============================================================
  // JOIN: wn/obj/json/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/obj/json/_com.json", {
    "name": "wn-obj-json",
    "globally": true,
    "template": "./wn-obj-json.html",
    "mixins": ["./wn-obj-json.mjs"],
    "components": ["@com:ti/text/json"]
  }); //============================================================
  // JOIN: wn/obj/markdown/richeditor/wn-markdown-richeditor-props.mjs
  //============================================================

  (function () {
    var _M = {
      // Relative meta
      "meta": {
        type: [Object, String],
        "default": null
      },
      // Delcare the media src mode
      //  - path : nil meta(~/xxx/xxx); with meta(../xxx/xxx)
      //  - fullPath : "/home/xiaobai/xxx/xxx"
      //  - idPath : "id:67u8..98a1"
      //  - id   : "67u8..98a1"
      // 'transferMediaSrc' can take more customized form
      "mediaSrcMode": {
        type: String,
        "default": "path",
        validator: function validator(v) {
          return /^(path|fullPath|idPath|id)$/.test(v);
        }
      },
      // Keep the last select media
      "keepLastBy": {
        type: String,
        "default": "wn-markdown-richeditor-last-open"
      },
      "defaultMediaDir": {
        type: String,
        "default": "~"
      }
    };
    Ti.Preload("ti/com/wn/obj/markdown/richeditor/wn-markdown-richeditor-props.mjs", _M);
  })(); //============================================================
  // JOIN: wn/obj/markdown/richeditor/wn-markdown-richeditor.html
  //============================================================


  Ti.Preload("ti/com/wn/obj/markdown/richeditor/wn-markdown-richeditor.html", "<TiTextMarkdownRicheditor\n  v-bind=\"this\"\n  :actions=\"ToolbarActions\"\n  :markdown-media-src=\"TheMarkdownMediaSrc\"\n  :preview-media-src=\"ThePreviewMediaSrc\"\n  :value=\"TheValue\"\n  :on-init=\"OnEditorInit\"/>"); //============================================================
  // JOIN: wn/obj/markdown/richeditor/wn-markdown-richeditor.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////////////
      computed: {
        //-----------------------------------------------
        ToolbarActions: function ToolbarActions() {
          var _this242 = this;

          return _.merge({
            "Media": {
              icon: "fas-photo-video",
              action: function action() {
                return _this242.OnInsertMedia();
              }
            }
          }, this.actions);
        },
        //-----------------------------------------------
        TheValue: function TheValue() {
          return this.value;
        },
        //-----------------------------------------------
        TheMarkdownMediaSrc: function TheMarkdownMediaSrc() {
          var _this243 = this;

          if (this.markdownMediaSrc) {
            return this.markdownMediaSrc;
          }

          return /*#__PURE__*/function () {
            var _ref126 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee125(src) {
              var m, obj, s2;
              return regeneratorRuntime.wrap(function _callee125$(_context126) {
                while (1) {
                  switch (_context126.prev = _context126.next) {
                    case 0:
                      // special media 
                      m = /^\/o\/content\?str=id:(.+)$/.exec(src);

                      if (!m) {
                        _context126.next = 8;
                        break;
                      }

                      _context126.next = 4;
                      return Wn.Io.loadMetaById(m[1]);

                    case 4:
                      obj = _context126.sent;

                      if (!obj) {
                        _context126.next = 8;
                        break;
                      }

                      s2 = Wn.Io.formatObjPath(obj, _this243.mediaSrcMode, _this243.meta);
                      return _context126.abrupt("return", s2);

                    case 8:
                      return _context126.abrupt("return", src);

                    case 9:
                    case "end":
                      return _context126.stop();
                  }
                }
              }, _callee125);
            }));

            return function (_x14) {
              return _ref126.apply(this, arguments);
            };
          }();
        },
        //-----------------------------------------------
        ThePreviewMediaSrc: function ThePreviewMediaSrc() {
          var _this244 = this;

          if (this.previewMediaSrc) {
            return this.previewMediaSrc;
          }

          return /*#__PURE__*/function () {
            var _ref127 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee126(src) {
              var obj;
              return regeneratorRuntime.wrap(function _callee126$(_context127) {
                while (1) {
                  switch (_context127.prev = _context127.next) {
                    case 0:
                      if (!/^(https?:)(\/\/)/.test(src)) {
                        _context127.next = 2;
                        break;
                      }

                      return _context127.abrupt("return", src);

                    case 2:
                      _context127.next = 4;
                      return Wn.Io.loadMetaBy(src, _this244.meta);

                    case 4:
                      obj = _context127.sent;

                      if (!obj) {
                        _context127.next = 7;
                        break;
                      }

                      return _context127.abrupt("return", "/o/content?str=id:".concat(obj.id));

                    case 7:
                      return _context127.abrupt("return", src);

                    case 8:
                    case "end":
                      return _context127.stop();
                  }
                }
              }, _callee126);
            }));

            return function (_x15) {
              return _ref127.apply(this, arguments);
            };
          }();
        } //-----------------------------------------------

      },
      ///////////////////////////////////////////////////
      methods: {
        //-----------------------------------------------
        OnEditorInit: function OnEditorInit($editor) {
          this.$editor = $editor;
        },
        //-----------------------------------------------
        OnInsertMedia: function OnInsertMedia() {
          var _this245 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee127() {
            var last, list, oFir, pph, rph, _iterator86, _step86, obj;

            return regeneratorRuntime.wrap(function _callee127$(_context128) {
              while (1) {
                switch (_context128.prev = _context128.next) {
                  case 0:
                    // Get the last open
                    last = _this245.meta || _this245.defaultMediaDir;
                    if (_this245.keepLastBy) last = Ti.Storage.local.getString(_this245.keepLastBy) || last; // Open selector to pick list

                    _context128.next = 4;
                    return Wn.OpenObjSelector(last, {
                      fallbackPath: _this245.defaultMediaDir
                    });

                  case 4:
                    list = _context128.sent;

                    if (!(!list || _.isEmpty(list))) {
                      _context128.next = 7;
                      break;
                    }

                    return _context128.abrupt("return");

                  case 7:
                    // Save the last open
                    if (_this245.keepLastBy) {
                      oFir = _.first(list);
                      pph = Ti.Util.getParentPath(oFir.ph);
                      rph = Wn.Session.getFormedPath(pph);
                      Ti.Storage.local.set(_this245.keepLastBy, rph);
                    } // Batch insert


                    _iterator86 = _createForOfIteratorHelper(list);

                    try {
                      for (_iterator86.s(); !(_step86 = _iterator86.n()).done;) {
                        obj = _step86.value;

                        _this245.insertMediaObj(obj);
                      }
                    } catch (err) {
                      _iterator86.e(err);
                    } finally {
                      _iterator86.f();
                    }

                  case 10:
                  case "end":
                    return _context128.stop();
                }
              }
            }, _callee127);
          }))();
        },
        //-----------------------------------------------
        // Insert Operation
        //-----------------------------------------------
        insertMediaObj: function insertMediaObj() {
          var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var mime = obj.mime; // Guard

          if (!mime) return; // Preview source

          var src = "/o/content?str=id:".concat(obj.id); // Video

          if (mime.startsWith("video/")) {
            this.insertMedia("video", src, {
              controls: false,
              autoplay: false
            });
          } // Image
          else if (mime.startsWith("image/")) {
              this.insertMedia("image", src);
            }
        },
        //-----------------------------------------------
        insertMedia: function insertMedia() {
          var _det$insert;

          var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "image";
          var src = arguments.length > 1 ? arguments[1] : undefined;
          var attrs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

          // Guard
          if (!src) {
            return;
          } // Prepare the Delta


          var Delta = Quill["import"]("delta");
          var det = new Delta(); // Insert to current position

          var sel = this.$editor.getSelection();

          if (!sel) {
            this.$editor.setSelection(0);
            sel = {
              index: 0,
              length: 0
            };
          }

          var _sel = sel,
              index = _sel.index,
              length = _sel.length; // Move to current

          det.retain(index); // Delete current

          if (length > 0) {
            det["delete"](length);
          } // Add Media


          det.insert((_det$insert = {}, _defineProperty(_det$insert, type, src), _defineProperty(_det$insert, "attributes", attrs), _det$insert)); // Update 

          this.$editor.updateContents(det); // Move cursor

          this.$editor.setSelection(index + 1);
        } //-----------------------------------------------

      } ///////////////////////////////////////////////////
      // watch: {
      //   "meta": {
      //     handler: async function(pathOrObj){
      //       console.log("meta changed!")
      //       if(_.isString(pathOrObj)) {
      //         this.myMeta = await Wn.Io.loadMetaBy(pathOrObj)
      //       } else {
      //         this.myMeta = pathOrObj
      //       }
      //     },
      //     immediate: true
      //   }
      // }
      ///////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/obj/markdown/richeditor/wn-markdown-richeditor.mjs", _M);
  })(); //============================================================
  // JOIN: wn/obj/markdown/richeditor/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/obj/markdown/richeditor/_com.json", {
    "name": "wn-obj-markdown-richeditor",
    "globally": true,
    "template": "./wn-markdown-richeditor.html",
    "props": ["@com:ti/text/markdown/richeditor/ti-markdown-richeditor-props.mjs", "./wn-markdown-richeditor-props.mjs"],
    "methods": "@com:ti/text/markdown/richeditor/ti-markdown-richeditor-delegate-methods.mjs",
    "mixins": ["./wn-markdown-richeditor.mjs"],
    "components": ["@com:ti/text/markdown/richeditor"]
  }); //============================================================
  // JOIN: wn/obj/picker/wn-obj-picker.html
  //============================================================

  Ti.Preload("ti/com/wn/obj/picker/wn-obj-picker.html", "<div class=\"wn-obj-picker\"\n  :class=\"TopClass\">\n  <!--\n    Empty Items\n  -->\n  <div\n    v-if=\"!hasItems\"\n      class=\"as-empty\">\n      <div class=\"as-empty-item\"\n        @click.left.stop=\"OnPickItem\">\n        <i class=\"im im-plus\"></i>\n      </div>\n  </div>\n  <!--\n    Show Items\n  -->\n  <div ref=\"itemsCon\"\n    v-else\n      class=\"as-items-con\"\n      @click.left=\"OnClickItemsCon\">\n      <div \n        v-for=\"(it, index) in DisplayItems\"\n          :key=\"it._key\"\n          class=\"as-item\">\n          <TiObjThumb \n              v-bind=\"it\"\n              @remove=\"OnRemoveItem\"/>        \n      </div>\n      <!--For multi-->\n      <div\n        v-if=\"multi\" \n          class=\"as-empty-item\"\n          @click.left.stop=\"OnPickItem\">\n          <i class=\"im im-plus\"></i>\n      </div>\n  </div>\n  <!--\n    Loading\n  -->\n  <ti-loading\n    v-if=\"loading\"\n      class=\"as-mid-tip-mask\"/>\n</div>"); //============================================================
  // JOIN: wn/obj/picker/wn-obj-picker.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      data: function data() {
        return {
          "loading": false,
          "dragging": false,
          "skipReload": false,
          "myItems": []
        };
      },
      /////////////////////////////////////////
      props: {
        "empty": {
          type: Object,
          "default": function _default() {
            return {
              text: "i18n:no-selected",
              value: undefined
            };
          }
        },
        "value": {
          type: [Object, String, Array],
          "default": null
        },
        // raw value is WnObj
        // If declare the valueType
        // It will transform the WnObj
        // to relaitve value mode
        "valueType": {
          type: String,
          "default": "idPath",
          validator: function validator(v) {
            return /^(obj|path|fullPath|idPath|id)$/.test(v);
          }
        },
        "base": {
          type: [Object, String],
          "default": "~"
        },
        "multi": {
          type: Boolean,
          "default": false
        },
        // Key of meta to show as text
        // If undefined, use "title -> nm"
        "textBy": {
          type: [String, Array],
          "default": null
        },
        "filterBy": {
          type: [Object, String, Function, Boolean],
          "default": function _default() {
            return {
              "race": ["isEqual", "FILE"]
            };
          }
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass({
            "is-multi": this.multi,
            "is-single": !this.multi,
            "is-dragging": this.dragging
          });
        },
        //--------------------------------------
        DisplayItems: function DisplayItems() {
          var _this246 = this;

          var list = [];

          for (var i = 0; i < this.myItems.length; i++) {
            var obj = this.myItems[i];
            var it = Wn.Util.getObjThumbInfo(obj, {
              exposeHidden: true,
              badges: {
                NW: ["href", "fas-link"],
                SE: ["newtab", "fas-external-link-alt"]
              }
            });
            it.index = i;
            it._key = "".concat(it.id, "_").concat(it.index);
            it.removeIcon = "im-x-mark";

            it.onTitle = function (payload) {
              _this246.OnEditItem(payload);
            }; //it.removeIcon = "im-trash-can"


            list.push(it);
          }

          return list;
        },
        //--------------------------------------
        FirstItem: function FirstItem() {
          return _.first(this.myItems);
        },
        //--------------------------------------
        hasItems: function hasItems() {
          return !_.isEmpty(this.myItems);
        },
        //--------------------------------------
        theChooseIcon: function theChooseIcon() {
          return _.isEmpty(this.myItems) ? this.chooseIcon : null;
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnPickItem: function OnPickItem() {
          var _this247 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee128() {
            var meta, filter, objs, items;
            return regeneratorRuntime.wrap(function _callee128$(_context129) {
              while (1) {
                switch (_context129.prev = _context129.next) {
                  case 0:
                    meta = _this247.FirstItem; // Use base to open the folder
                    // Then it should be auto-open the folder

                    if (!meta || _.isEmpty(meta)) {
                      meta = _this247.base || "~";
                    } else {
                      meta = "id:".concat(meta.id);
                    } // Reload Meta


                    if (!(_.isPlainObject(meta) && !meta.pid)) {
                      _context129.next = 6;
                      break;
                    }

                    _context129.next = 5;
                    return Wn.Io.loadMetaById(meta.id);

                  case 5:
                    meta = _context129.sent;

                  case 6:
                    // Eval Filter
                    console.log("hahha");

                    if (_this247.filterBy) {
                      filter = Ti.Validate.compile(_this247.filterBy);
                    }

                    _context129.next = 10;
                    return Wn.OpenObjSelector(meta, {
                      multi: _this247.multi,
                      selected: _this247.myItems,
                      filter: filter
                    });

                  case 10:
                    objs = _context129.sent;

                    if (!_.isEmpty(objs)) {
                      _context129.next = 13;
                      break;
                    }

                    return _context129.abrupt("return");

                  case 13:
                    if (_this247.multi) {
                      items = _.concat(_this247.myItems, objs);
                    } // Single value
                    else {
                        items = objs;
                      }

                    _this247.notifyChange(items);

                  case 15:
                  case "end":
                    return _context129.stop();
                }
              }
            }, _callee128);
          }))();
        },
        //--------------------------------------
        OnClickItemsCon: function OnClickItemsCon() {
          this.OnPickItem();
        },
        //--------------------------------------
        OnRemoveItem: function OnRemoveItem() {
          var _ref128 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              id = _ref128.id,
              index = _ref128.index;

          var items = [];

          for (var i = 0; i < this.myItems.length; i++) {
            var it = this.myItems[i];

            if (index != i) {
              items.push(it);
            }
          }

          this.notifyChange(items);
        },
        //--------------------------------------
        OnClearItems: function OnClearItems() {
          this.notifyChange([]);
        },
        //--------------------------------------
        OnEditItem: function OnEditItem(_ref129) {
          var _this248 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee129() {
            var index, it, reo, items;
            return regeneratorRuntime.wrap(function _callee129$(_context130) {
              while (1) {
                switch (_context130.prev = _context130.next) {
                  case 0:
                    index = _ref129.index;
                    it = _this248.myItems[index];
                    _context130.next = 4;
                    return Ti.App.Open({
                      title: "i18n:edit",
                      width: 640,
                      height: 480,
                      result: _.pick(it, "title", "href", "newtab"),
                      model: {
                        prop: "data",
                        event: "change"
                      },
                      comType: "ti-form",
                      comConf: {
                        fields: [{
                          title: "i18n:title",
                          name: "title",
                          comType: "ti-input"
                        }, {
                          title: "i18n:href",
                          name: "href",
                          comType: "ti-input"
                        }, {
                          title: "i18n:newtab",
                          name: "newtab",
                          type: "Boolean",
                          comType: "ti-toggle"
                        }]
                      }
                    });

                  case 4:
                    reo = _context130.sent;

                    if (!_.isUndefined(reo)) {
                      _context130.next = 7;
                      break;
                    }

                    return _context130.abrupt("return");

                  case 7:
                    it = _.cloneDeep(it);
                    it.title = reo.title;
                    it.href = reo.href;
                    it.newtab = reo.newtab;
                    items = _.cloneDeep(_this248.myItems);
                    items.splice(index, 1, it);
                    _this248.myItems = items;
                    _this248.skipReload = true;

                    _this248.notifyChange();

                    _.delay(function () {
                      _this248.skipReload = false;
                    }, 100);

                  case 17:
                  case "end":
                    return _context130.stop();
                }
              }
            }, _callee129);
          }))();
        },
        //--------------------------------------
        notifyChange: function notifyChange() {
          var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.myItems;
          var value = null;
          var keys = ['id', 'nm', 'thumb', 'title', 'mime', 'tp', 'sha1', 'len', 'href', 'newtab'];

          if (this.multi) {
            value = [];

            var _iterator87 = _createForOfIteratorHelper(items),
                _step87;

            try {
              for (_iterator87.s(); !(_step87 = _iterator87.n()).done;) {
                var it = _step87.value;
                var v = Wn.Io.formatObjPath(it, this.valueType, keys);
                value.push(v);
              }
            } catch (err) {
              _iterator87.e(err);
            } finally {
              _iterator87.f();
            }
          } // Single value
          else if (!_.isEmpty(items)) {
              value = Wn.Io.formatObjPath(items[0], this.valueType, keys);
            }

          this.$notify("change", value);
        },
        //--------------------------------------
        switchItem: function switchItem(fromIndex, toIndex) {
          if (fromIndex != toIndex) {
            var _items = _.cloneDeep(this.myItems);

            var it = _items[fromIndex];
            _items = _.filter(_items, function (v, i) {
              return i != fromIndex;
            });

            _items.splice(toIndex, 0, it);

            this.myItems = _items;
            this.notifyChange();
          }
        },
        //--------------------------------------
        initSortable: function initSortable() {
          var _this249 = this;

          if (this.multi && this.$refs.itemsCon) {
            new Sortable(this.$refs.itemsCon, {
              animation: 300,
              filter: ".as-empty-item",
              onStart: function onStart() {
                _this249.dragging = true;
              },
              onEnd: function onEnd(_ref130) {
                var oldIndex = _ref130.oldIndex,
                    newIndex = _ref130.newIndex;
                _this249.dragging = false;
                _this249.skipReload = true;

                _this249.switchItem(oldIndex, newIndex);

                _.delay(function () {
                  _this249.skipReload = false;
                }, 100);
              }
            });
          }
        },
        //--------------------------------------
        reload: function reload() {
          var _this250 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee130() {
            return regeneratorRuntime.wrap(function _callee130$(_context131) {
              while (1) {
                switch (_context131.prev = _context131.next) {
                  case 0:
                    _this250.loading = true;
                    _context131.next = 3;
                    return _this250.doReload();

                  case 3:
                    _this250.loading = false;

                  case 4:
                  case "end":
                    return _context131.stop();
                }
              }
            }, _callee130);
          }))();
        },
        //--------------------------------------
        doReload: function doReload() {
          var _this251 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee131() {
            var vals, items, _iterator88, _step88, it, it2;

            return regeneratorRuntime.wrap(function _callee131$(_context132) {
              while (1) {
                switch (_context132.prev = _context132.next) {
                  case 0:
                    vals = _this251.value ? [].concat(_this251.value) : [];
                    items = []; // Loop each value item

                    _iterator88 = _createForOfIteratorHelper(vals);
                    _context132.prev = 3;

                    _iterator88.s();

                  case 5:
                    if ((_step88 = _iterator88.n()).done) {
                      _context132.next = 15;
                      break;
                    }

                    it = _step88.value;
                    _context132.next = 9;
                    return _this251.reloadItem(it);

                  case 9:
                    it2 = _context132.sent;
                    if (it2) items.push(it2);

                    if (!(!_this251.multi && items.length > 0)) {
                      _context132.next = 13;
                      break;
                    }

                    return _context132.abrupt("break", 15);

                  case 13:
                    _context132.next = 5;
                    break;

                  case 15:
                    _context132.next = 20;
                    break;

                  case 17:
                    _context132.prev = 17;
                    _context132.t0 = _context132["catch"](3);

                    _iterator88.e(_context132.t0);

                  case 20:
                    _context132.prev = 20;

                    _iterator88.f();

                    return _context132.finish(20);

                  case 23:
                    // Update value, it will be trigger the computed attribute
                    // Then it will be passed to <ti-box> as formed list
                    // the <ti-box> will show it reasonablely obey the `multi` options
                    _this251.myItems = items;

                  case 24:
                  case "end":
                    return _context132.stop();
                }
              }
            }, _callee131, null, [[3, 17, 20, 23]]);
          }))();
        },
        //--------------------------------------
        reloadItem: function reloadItem(it) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee132() {
            return regeneratorRuntime.wrap(function _callee132$(_context133) {
              while (1) {
                switch (_context133.prev = _context133.next) {
                  case 0:
                    if (!(!it || _.isEmpty(it))) {
                      _context133.next = 2;
                      break;
                    }

                    return _context133.abrupt("return", null);

                  case 2:
                    if (!_.isString(it)) {
                      _context133.next = 8;
                      break;
                    }

                    _context133.next = 5;
                    return Wn.Io.loadMetaBy(it);

                  case 5:
                    return _context133.abrupt("return", _context133.sent);

                  case 8:
                    if (!it.id) {
                      _context133.next = 12;
                      break;
                    }

                    return _context133.abrupt("return", it);

                  case 12:
                    throw Ti.Err.make("e-wn-obj-picker-unsupported-value-form", it);

                  case 13:
                  case "end":
                    return _context133.stop();
                }
              }
            }, _callee132);
          }))();
        } //--------------------------------------

      },
      //////////////////////////////////////////
      watch: {
        "value": function value(newVal, oldVal) {
          if (!_.isEqual(newVal, oldVal) && !this.skipReload) {
            this.reload();
          }
        },
        "hasItems": function hasItems(newVal, oldVal) {
          var _this252 = this;

          if (newVal && !oldVal) {
            this.$nextTick(function () {
              _this252.initSortable();
            });
          }
        }
      },
      /////////////////////////////////////////
      mounted: function () {
        var _mounted14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee133() {
          return regeneratorRuntime.wrap(function _callee133$(_context134) {
            while (1) {
              switch (_context134.prev = _context134.next) {
                case 0:
                  _context134.next = 2;
                  return this.reload();

                case 2:
                case "end":
                  return _context134.stop();
              }
            }
          }, _callee133, this);
        }));

        function mounted() {
          return _mounted14.apply(this, arguments);
        }

        return mounted;
      }() /////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/obj/picker/wn-obj-picker.mjs", _M);
  })(); //============================================================
  // JOIN: wn/obj/picker/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/obj/picker/_com.json", {
    "name": "wn-obj-picker",
    "globally": true,
    "template": "./wn-obj-picker.html",
    "mixins": ["./wn-obj-picker.mjs"],
    "components": ["@com:wn/adaptlist"],
    "deps": ["@deps:sortable.js"]
  }); //============================================================
  // JOIN: wn/obj/preview/com/preview-info-field/preview-info-field.html
  //============================================================

  Ti.Preload("ti/com/wn/obj/preview/com/preview-info-field/preview-info-field.html", "<div class=\"info-field\">\n  <div class=\"as-name\" :style=\"theNameStyle\">\n    <ti-icon v-if=\"icon\" class=\"it-icon\" :value=\"icon\"/>\n    <span class=\"it-text\">{{title|i18n}}</span>\n  </div>\n  <div class=\"as-value\" :style=\"theValueStyle\">{{theValue}}</div>\n</div>"); //============================================================
  // JOIN: wn/obj/preview/com/preview-info-field/preview-info-field.mjs
  //============================================================

  (function () {
    /////////////////////////////////////////////////////
    var _M = {
      ///////////////////////////////////////////////////
      data: function data() {
        return {
          theValue: null
        };
      },
      ///////////////////////////////////////////////////
      props: {
        "icon": {
          type: String,
          "default": null
        },
        "data": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "type": {
          type: String,
          "default": "String"
        },
        "title": {
          type: String,
          "default": null
        },
        "name": {
          type: String,
          "default": null
        },
        "dict": {
          type: String,
          "default": null
        },
        "nameWidth": {
          type: [String, Number],
          "default": 50
        },
        "valueWidth": {
          type: [String, Number],
          "default": 200
        },
        "transformer": {
          type: [String, Object, Function],
          "default": null
        }
      },
      ///////////////////////////////////////////////////
      watch: {
        "data": function () {
          var _data2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee134() {
            return regeneratorRuntime.wrap(function _callee134$(_context135) {
              while (1) {
                switch (_context135.prev = _context135.next) {
                  case 0:
                    _context135.next = 2;
                    return this.evalTheValue();

                  case 2:
                    this.theValue = _context135.sent;

                  case 3:
                  case "end":
                    return _context135.stop();
                }
              }
            }, _callee134, this);
          }));

          function data() {
            return _data2.apply(this, arguments);
          }

          return data;
        }(),
        "name": function () {
          var _name = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee135() {
            return regeneratorRuntime.wrap(function _callee135$(_context136) {
              while (1) {
                switch (_context136.prev = _context136.next) {
                  case 0:
                    _context136.next = 2;
                    return this.evalTheValue();

                  case 2:
                    this.theValue = _context136.sent;

                  case 3:
                  case "end":
                    return _context136.stop();
                }
              }
            }, _callee135, this);
          }));

          function name() {
            return _name.apply(this, arguments);
          }

          return name;
        }()
      },
      ///////////////////////////////////////////////////
      computed: {
        theTransformer: function theTransformer() {
          var trans = this.transformer || "Ti.Types." + Ti.Types.getFuncByType(this.type || "String", "transformer");
          return Ti.Util.genInvoking(trans, {
            context: this.data,
            partial: "right"
          });
        },
        theNameStyle: function theNameStyle() {
          return Ti.Css.toStyle({
            "width": this.nameWidth
          });
        },
        theValueStyle: function theValueStyle() {
          return Ti.Css.toStyle({
            "width": this.valueWidth
          });
        }
      },
      ///////////////////////////////////////////////////
      methods: {
        evalTheValue: function evalTheValue() {
          var _this253 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee136() {
            var val;
            return regeneratorRuntime.wrap(function _callee136$(_context137) {
              while (1) {
                switch (_context137.prev = _context137.next) {
                  case 0:
                    val = _.get(_this253.data, _this253.name);

                    if (!_this253.dict) {
                      _context137.next = 5;
                      break;
                    }

                    _context137.next = 4;
                    return wn.Dict.get(_this253.dict, val);

                  case 4:
                    val = _context137.sent;

                  case 5:
                    if (_.isFunction(_this253.theTransformer)) {
                      val = _this253.theTransformer(val);
                    }

                    return _context137.abrupt("return", val);

                  case 7:
                  case "end":
                    return _context137.stop();
                }
              }
            }, _callee136);
          }))();
        }
      },
      ///////////////////////////////////////////////////
      mounted: function () {
        var _mounted15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee137() {
          return regeneratorRuntime.wrap(function _callee137$(_context138) {
            while (1) {
              switch (_context138.prev = _context138.next) {
                case 0:
                  _context138.next = 2;
                  return this.evalTheValue();

                case 2:
                  this.theValue = _context138.sent;

                case 3:
                case "end":
                  return _context138.stop();
              }
            }
          }, _callee137, this);
        }));

        function mounted() {
          return _mounted15.apply(this, arguments);
        }

        return mounted;
      }() ///////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/obj/preview/com/preview-info-field/preview-info-field.mjs", _M);
  })(); //============================================================
  // JOIN: wn/obj/preview/com/preview-info-field/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/obj/preview/com/preview-info-field/_com.json", {
    "name": "wn-obj-preview-info-field",
    "globally": true,
    "template": "./preview-info-field.html",
    "mixins": ["./preview-info-field.mjs"]
  }); //============================================================
  // JOIN: wn/obj/preview/wn-obj-preview.html
  //============================================================

  Ti.Preload("ti/com/wn/obj/preview/wn-obj-preview.html", "<div class=\"wn-obj-preview\" :class=\"TopClass\">\n  <!--\n    With content\n  -->\n  <div class=\"wop-con\" v-if=\"hasMeta\">\n    <!--Main View-->\n    <component class=\"as-main\"\n      :is=\"PreviewComType\"\n      :icon=\"DataIcon\"\n      :title=\"DataTitle\"\n      :src=\"DataSource\"/>\n    <!--ActionBar at top-->\n    <div class=\"as-abar\">\n      <ul>\n        <li v-for=\"it in TheActions\"\n          @click.left=\"OnAction(it.action)\">\n          <ti-icon class=\"it-icon\" :value=\"it.icon\"/>\n        </li>\n      </ul>\n    </div>\n    <!--Meta at bottom-->\n    <div class=\"as-info\" v-if=\"isShowInfo\">\n      <!--\n        Head\n      -->\n      <div class=\"info-head\">\n        <!--Pin Status Icon-->\n        <span class=\"it-icon\" @click.left=\"toggleInfoFloat\">\n          <ti-icon :value=\"PreviewInfoPinIcon\"/>\n        </span>\n        <!--Head text-->\n        <span class=\"it-text\">{{'i18n:info'|i18n}}</span>\n        <!--Edit Button-->\n        <span class=\"it-edit\"\n          @click.left=\"OnEditInfo\">{{'i18n:edit'|i18n}}</span>\n      </div>\n      <!--\n        Fields\n      -->\n      <div class=\"info-field-con\">\n        <wn-obj-preview-info-field\n          v-for=\"fld in PrevewInfoFields\"\n          :key=\"fld.name\"\n          v-bind=\"fld\"\n          :data=\"meta\"/>\n      </div>\n    </div>\n  </div>\n  <!--\n    Empty \n  -->\n  <div v-else\n    class=\"ti-blank is-big\">\n    <ti-icon value=\"fas-file-image\"/>\n    <span>{{'nil-obj'|i18n}}</span>\n  </div>\n</div>"); //============================================================
  // JOIN: wn/obj/preview/wn-obj-preview.mjs
  //============================================================

  (function () {
    var _M = {
      //////////////////////////////////////////
      data: function data() {
        return {
          isInFullScreen: false,
          isShowInfo: false,
          isFloatInfo: false
        };
      },
      //////////////////////////////////////////
      props: {
        "meta": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "status": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "actions": {
          type: Array,
          "default": function _default() {
            return ["fullscreen", "newtab", "download", "info"];
          }
        },
        "showInfo": {
          type: Boolean,
          "default": false
        },
        "floatInfo": {
          type: Boolean,
          "default": false
        },
        "editInfoBy": {
          type: [Function, String],
          "default": null
        },
        "infoPosition": {
          type: String,
          "default": "bottom",
          validator: function validator(val) {
            return /^(bottom|left)$/.test(val);
          }
        },
        "infoNameWidth": {
          type: [String, Number],
          "default": 50
        },
        "infoValueWidth": {
          type: [String, Number],
          "default": 200
        },
        "infoFields": {
          type: Array,
          "default": function _default() {
            return ["nm", "tp", "mime", "width", "height", "len", "duration"];
          }
        },
        // Store the status in Local
        "stateLocalKey": {
          type: String,
          "default": null
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        hasMeta: function hasMeta() {
          return _.isEmpty(this.meta) ? false : true;
        },
        //--------------------------------------
        TopClass: function TopClass() {
          return _defineProperty({
            "is-fullscreen": this.isInFullScreen,
            "is-show-info": this.isShowInfo,
            "is-float-info": this.isFloatInfo
          }, "is-info-at-".concat(this.infoPosition), true);
        },
        //--------------------------------------
        PreviewComType: function PreviewComType() {
          if (this.meta) {
            var mime = this.meta.mime || ""; // Video

            if (mime.startsWith("video/")) {
              return "ti-media-video";
            } // Image
            else if (mime.startsWith("image/")) {
                return "ti-media-image";
              } // Binary
              else {
                  return "ti-media-binary";
                }
          }
        },
        //--------------------------------------
        PreviewInfoPinIcon: function PreviewInfoPinIcon() {
          return this.isFloatInfo ? 'fas-thumbtack' : 'zmdi-layers';
        },
        //--------------------------------------
        PrevewInfoFields: function PrevewInfoFields() {
          var _this254 = this;

          return Wn.Obj.evalFields(this.meta, this.infoFields, function (fld) {
            if (fld.quickName && _.isUndefined(fld.value)) {
              return;
            }

            if ("Group" == fld.type) {
              return fld;
            }

            return _.defaults(fld, {
              nameWidth: _this254.infoNameWidth,
              valueWidth: _this254.infoValueWidth
            });
          });
        },
        //--------------------------------------
        TheActions: function TheActions() {
          var _this255 = this;

          var list = [];

          if (this.hasMeta) {
            _.forEach(this.actions, function (it) {
              //..........................
              // full screen
              if ("fullscreen" == it) {
                if (!_this255.isInFullScreen) {
                  list.push({
                    icon: "zmdi-fullscreen",
                    text: "i18n:wop-fullscreen-enter",
                    action: function action() {
                      return _this255.enterFullscreen();
                    }
                  });
                } // Exit FullScreen
                else {
                    list.push({
                      icon: "zmdi-fullscreen-exit",
                      text: "i18n:wop-fullscreen-quit",
                      action: function action() {
                        return _this255.exitFullscreen();
                      }
                    });
                  }
              } //..........................
              // Open
              else if ("newtab" == it) {
                  list.push({
                    icon: "zmdi-open-in-new",
                    text: "i18n:open-newtab",
                    action: function action() {
                      return _this255.openInNewTab();
                    }
                  });
                } //..........................
                // Download
                else if ("download" == it) {
                    list.push({
                      icon: "zmdi-download",
                      text: "i18n:download-to-local",
                      action: function action() {
                        return _this255.download();
                      }
                    });
                  } //..........................
                  // Toggle Info
                  else if ("info" == it) {
                      if (!_this255.isShowInfo) {
                        list.push({
                          icon: "zmdi-info",
                          text: "i18n:info",
                          action: function action() {
                            return _this255.doShowInfo();
                          }
                        });
                      } // Show Info
                      else {
                          list.push({
                            icon: "zmdi-info-outline",
                            text: "i18n:info",
                            action: function action() {
                              return _this255.doHideInfo();
                            }
                          });
                        }
                    } //..........................
                    else if (_.isPlainObject(it) && it.action) {
                        list.push(it);
                      } //..........................

            });
          } //................................


          return list;
        },
        //--------------------------------------
        DataSource: function DataSource() {
          if (!this.meta) return "";
          var link = Wn.Util.getDownloadLink(this.meta, {
            mode: "auto"
          });
          return link.toString();
        },
        //--------------------------------------
        DataIcon: function DataIcon() {
          return Wn.Util.getIconObj(this.meta);
        },
        //--------------------------------------
        DataTitle: function DataTitle() {
          return Wn.Util.getObjDisplayName(this.meta);
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnAction: function OnAction(action) {
          // Exec command
          if (_.isString(action)) {
            Ti.App(this).exec(actionName);
          } // Call function
          else if (_.isFunction(action)) {
              action();
            }
        },
        //--------------------------------------
        OnEditInfo: function OnEditInfo() {
          if (this.meta) {
            // Command
            if (_.isString(this.editInfoBy)) {
              Ti.App(this).exec(this.editInfoBy, this.meta);
            } // Function Invoking
            else if (_.isFunction(this.editInfoBy)) {
                this.editInfoBy(this.meta);
              } // Default to open the dialog
              else {
                  Wn.EditObjMeta(this.meta);
                }
          }
        },
        //--------------------------------------
        enterFullscreen: function enterFullscreen() {
          this.isInFullScreen = true;
          this.resizeMediaViewport();
        },
        //--------------------------------------
        exitFullscreen: function exitFullscreen() {
          this.isInFullScreen = false;
          this.resizeMediaViewport();
        },
        //--------------------------------------
        doShowInfo: function doShowInfo() {
          this.isShowInfo = true;
          this.saveStateToLocal();
          this.resizeMediaViewport();
        },
        //--------------------------------------
        doHideInfo: function doHideInfo() {
          this.isShowInfo = false;
          this.saveStateToLocal();
          this.resizeMediaViewport();
        },
        //--------------------------------------
        toggleInfoFloat: function toggleInfoFloat() {
          this.isFloatInfo = !this.isFloatInfo;
          this.saveStateToLocal();
          this.resizeMediaViewport();
        },
        //--------------------------------------
        resizeMediaViewport: function resizeMediaViewport() {
          var _this256 = this;

          var _iterator89 = _createForOfIteratorHelper(this.$children),
              _step89;

          try {
            var _loop2 = function _loop2() {
              var $child = _step89.value;

              if (_.isFunction($child.onResizeViewport)) {
                _this256.$nextTick(function () {
                  $child.onResizeViewport();
                });
              }
            };

            for (_iterator89.s(); !(_step89 = _iterator89.n()).done;) {
              _loop2();
            }
          } catch (err) {
            _iterator89.e(err);
          } finally {
            _iterator89.f();
          }
        },
        //--------------------------------------
        openInNewTab: function openInNewTab() {
          var link = Wn.Util.getAppLink(this.meta);
          Ti.Be.OpenLink(link);
        },
        //--------------------------------------
        download: function download() {
          var link = Wn.Util.getDownloadLink(this.meta);
          Ti.Be.OpenLink(link);
        },
        //--------------------------------------
        saveStateToLocal: function saveStateToLocal() {
          if (this.stateLocalKey) {
            Ti.Storage.session.mergeObject(this.stateLocalKey, {
              isShowInfo: this.isShowInfo,
              isFloatInfo: this.isFloatInfo
            }); // let state = Ti.Storage.session.getObject(this.stateLocalKey)
            // console.log("-> saveStateToLocal", state)
          }
        },
        //--------------------------------------
        loadStateFromLocal: function loadStateFromLocal() {
          if (this.stateLocalKey) {
            var state = Ti.Storage.session.getObject(this.stateLocalKey); //console.log("<- loadStateFromLocal", state)

            _.defaults(state, {
              isShowInfo: this.isShowInfo,
              isFloatInfo: this.isFloatInfo
            });

            this.isShowInfo = state.isShowInfo;
            this.isFloatInfo = state.isFloatInfo;
          }
        } //--------------------------------------

      },
      //////////////////////////////////////////
      watch: {
        "showInfo": function showInfo(val) {
          console.log("showInfo watched");
          this.isShowInfo = val;
        },
        "floatInfo": function floatInfo(val) {
          console.log("floatInfo watched");
          this.isFloatInfo = val;
        }
      },
      //////////////////////////////////////////
      mounted: function mounted() {
        var _this257 = this;

        this.isShowInfo = this.showInfo;
        this.isFloatInfo = this.floatInfo;
        this.$nextTick(function () {
          _this257.loadStateFromLocal();
        });
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/obj/preview/wn-obj-preview.mjs", _M);
  })(); //============================================================
  // JOIN: wn/obj/preview/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/obj/preview/_com.json", {
    "name": "wn-obj-preview",
    "globally": true,
    "i18n": "@i18n:wn-obj-preview",
    "template": "./wn-obj-preview.html",
    "mixins": ["./wn-obj-preview.mjs"],
    "components": ["./com/preview-info-field", "@com:ti/media/binary", "@com:ti/media/image", "@com:ti/media/video"]
  }); //============================================================
  // JOIN: wn/obj/puretext/wn-obj-puretext.html
  //============================================================

  Ti.Preload("ti/com/wn/obj/puretext/wn-obj-puretext.html", "<div class=\"wn-obj-puretext\">\n  <!--\n    Show Text Editor\n  -->\n  <ti-text-raw v-if=\"hasMeta\"\n    class=\"ti-fill-parent\"\n    :icon=\"theIcon\"\n    :title=\"theTitle\"\n    :show-title=\"showTitle\"\n    :value=\"content\"\n    :content-is-changed=\"status.changed\"\n    :blank-text=\"blankText\"\n    @change=\"onChangeContent\"/>\n  <!--\n    Empty Data\n  -->\n  <div v-else\n    class=\"ti-blank is-big\">\n    <ti-icon value=\"zmdi-alert-circle-o\"/>\n    <span>{{\"empty-data\"|i18n}}</span>\n  </div>\n</div>"); //============================================================
  // JOIN: wn/obj/puretext/wn-obj-puretext.mjs
  //============================================================

  (function () {
    var _M = {
      inheritAttrs: true,
      ////////////////////////////////////////////
      props: {
        "meta": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "content": {
          type: String,
          "default": null
        },
        "savedContent": {
          type: String,
          "default": null
        },
        "contentType": {
          type: String,
          "default": null
        },
        "showTitle": {
          type: Boolean,
          "default": true
        },
        "status": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "blankText": {
          type: String,
          "default": "i18n:blank"
        }
      },
      ////////////////////////////////////////////
      computed: {
        //----------------------------------------
        theIcon: function theIcon() {
          if (this.meta) {
            return Wn.Util.getIconObj(this.meta);
          }

          return Ti.Icons.get();
        },
        //----------------------------------------
        theTitle: function theTitle() {
          if (this.meta) {
            return this.meta.title || this.meta.nm;
          }

          return "no-title";
        },
        //----------------------------------------
        hasMeta: function hasMeta() {
          return this.meta ? true : false;
        } //----------------------------------------

      },
      ////////////////////////////////////////////
      methods: {
        onChangeContent: function onChangeContent(newContent) {
          this.$notify("change", {
            content: newContent
          });
        }
      },
      ////////////////////////////////////////////
      mounted: function mounted() {
        var _this258 = this;

        //----------------------------------------
        Ti.Fuse.getOrCreate().add({
          key: "wn-obj-puretext",
          everythingOk: function everythingOk() {
            return !_this258.status.changed;
          },
          fail: function fail() {
            Ti.Toast.Open("i18n:wn-obj-nosaved", "warn");
          }
        }); //----------------------------------------
      },
      ////////////////////////////////////////////
      beforeDestroy: function beforeDestroy() {
        Ti.Fuse.get().remove("wn-obj-puretext");
      } ////////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/obj/puretext/wn-obj-puretext.mjs", _M);
  })(); //============================================================
  // JOIN: wn/obj/puretext/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/obj/puretext/_com.json", {
    "name": "wn-obj-puretext",
    "globally": true,
    "template": "./wn-obj-puretext.html",
    "mixins": ["./wn-obj-puretext.mjs"],
    "components": ["@com:ti/text/raw"]
  }); //============================================================
  // JOIN: wn/obj/uploader/wn-obj-uploader.html
  //============================================================

  Ti.Preload("ti/com/wn/obj/uploader/wn-obj-uploader.html", "<ti-uploader\n  :value=\"formedValue\"/>"); //============================================================
  // JOIN: wn/obj/uploader/wn-obj-uploader.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      props: {
        "value": {
          type: [String, Object, Array],
          "default": null
        },
        // true - support multiple object 
        "multi": {
          type: Boolean,
          "default": true
        },
        // support remove the objects
        "removable": {
          type: Boolean,
          "default": true
        },
        // Before removed, how many objects shuld be remained at least
        "remained": {
          type: Number,
          "default": 0
        },
        // If null value, new object will be uploaded to here
        // path ends with `/` mean folder, it will keep the local name 
        // if without define, can not upload new file
        // for path, the "~" has been supported also
        "target": {
          type: String,
          "default": null
        },
        // When create a new file to target folder, 
        // how to format the local name
        "nameTransformer": {
          type: [Function, String, Object],
          "default": null
        },
        // which type supported to upload
        // nulllor empty array will support any types
        "supportTypes": {
          type: [Array, String],
          "default": null
        },
        // Image object only: it will auto apply image filter
        // just like clip the image size etc..
        // @see cmd_imagic for more detail about the filter
        "imageFilter": {
          type: [Array, String],
          "default": null
        },
        // Image object only: if `>0 and <=1` mean output quality
        // if not match the range, will depends on the `cmd_imagic` default
        "imageQuality": {
          type: Number,
          "default": 0
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        //--------------------------------------
        formedValue: function formedValue() {
          return null;
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        getObj: function getObj(income) {
          if (income) {
            if (_.isString(income)) {}
          }
        }
      }
    };
    Ti.Preload("ti/com/wn/obj/uploader/wn-obj-uploader.mjs", _M);
  })(); //============================================================
  // JOIN: wn/obj/uploader/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/obj/uploader/_com.json", {
    "name": "wn-obj-uploader",
    "globally": true,
    "template": "./wn-obj-uploader.html",
    "mixins": ["./wn-obj-uploader.mjs"],
    "components": ["@com:ti/uploader"]
  }); //============================================================
  // JOIN: wn/session/badge/wn-session-badge.html
  //============================================================

  Ti.Preload("ti/com/wn/session/badge/wn-session-badge.html", "<div class=\"wn-session-badge\"\n  :class=\"TopClass\">\n  <!--\n    Ti Session Badge\n  -->\n  <div class=\"as-info\" ref=\"info\">\n    <TiSessionBadge\n      :me=\"me\"\n      :login-icon=\"TheLoginIcon\"\n      avatar-key=\"thumb\"\n      name-keys=\"nickname|nm\"\n      name-event=\"show:more\"\n      :auto-sign-link=\"false\"\n      @show:more=\"OnShowMore\"/>\n  </div>\n  <!--\n    More Information\n  -->\n  <template v-if=\"!collapse\">\n    <!--Mask-->\n    <div class=\"as-mask\" @click=\"collapse=true\"></div>\n    <!--Drop-->\n    <div ref=\"drop\" class=\"as-drop\" :style=\"DropStyle\">\n      <!--\n        Avatar\n      -->\n      <div class=\"as-avatar\">\n        <ti-icon :value=\"TheLoginIcon\"/>\n        <div class=\"as-name\">\n          <span>{{me.nickname}}</span>\n          <span>{{me.nm}}</span>\n        </div>\n      </div>\n      <!--\n        Language\n      -->\n      <div class=\"as-lang\">\n        <div\n          v-for=\"la in LangList\"\n            class=\"lang-item\"\n            :class=\"la.className\"\n            @click.left=\"OnChangeLang(la.lang)\">\n            <img :src=\"la.src\"/>\n            <div>{{la.text}}</div>\n        </div>\n      </div>\n      <!--\n        Foot: resetpasswd + logout\n      -->\n      <div class=\"as-foot\">\n        <a @click.left=\"OnResetPassword\">{{'passwd-reset' | i18n}}</a>\n        <a @click.left=\"$notify('do:logout')\">{{'logout' | i18n}}</a>\n      </div>\n    </div>\n  </template>\n</div>"); //============================================================
  // JOIN: wn/session/badge/wn-session-badge.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      data: function data() {
        return {
          collapse: true,
          dropReady: false
        };
      },
      /////////////////////////////////////////
      props: {
        "me": {
          type: Object,
          "default": null
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //--------------------------------------
        MySex: function MySex() {
          return _.get(this.me, "sex") || 0;
        },
        //--------------------------------------
        MyLang: function MyLang() {
          return _.get(this.me, "LANG") || "zh-cn";
        },
        //--------------------------------------
        hasSession: function hasSession() {
          return this.me ? true : false;
        },
        //--------------------------------------
        LangList: function LangList() {
          return [{
            lang: "zh-cn",
            text: "中文",
            className: {
              "is-current": "zh-cn" == this.MyLang
            },
            src: "/gu/rs/ti/icons/png/lang-zh-cn.png"
          }, {
            lang: "en-us",
            text: "English",
            className: {
              "is-current": "en-us" == this.MyLang
            },
            src: "/gu/rs/ti/icons/png/lang-en-us.png"
          }];
        },
        //--------------------------------------
        TheLoginIcon: function TheLoginIcon() {
          if (2 == this.MySex) return "im-user-female";
          if (1 == this.MySex) return "im-user-male";
          return "im-user-circle";
        },
        //--------------------------------------
        DropStyle: function DropStyle() {
          if (this.dropReady) {
            return {
              "visibility": "visible"
            };
          }
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnResetPassword: function OnResetPassword() {
          this.collapse = true;
          Ti.App(this).dispatch("session/openResetPasswd");
        },
        //--------------------------------------
        OnShowMore: function OnShowMore() {
          this.collapse = false;
        },
        //--------------------------------------
        OnChangeLang: function OnChangeLang(lang) {
          var _this259 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee138() {
            return regeneratorRuntime.wrap(function _callee138$(_context139) {
              while (1) {
                switch (_context139.prev = _context139.next) {
                  case 0:
                    if (!(_this259.MyLang != lang)) {
                      _context139.next = 4;
                      break;
                    }

                    _context139.next = 3;
                    return Wn.Sys.exec("me -set LANG=".concat(lang));

                  case 3:
                    window.location.reload();

                  case 4:
                  case "end":
                    return _context139.stop();
                }
              }
            }, _callee138);
          }))();
        },
        //--------------------------------------
        dockDrop: function dockDrop() {
          var _this260 = this;

          var $drop = this.$refs.drop;
          var $info = this.$refs.info; // Guard the elements

          if (!_.isElement($drop) || !_.isElement($info) || this.collapse) {
            return;
          } // Dock


          Ti.Dom.dockTo($drop, $info, {
            space: {
              y: 2
            }
          });

          _.delay(function () {
            _this260.dropReady = true;
          }, 10);
        } //--------------------------------------

      },
      //////////////////////////////////////////
      watch: {
        "collapse": {
          handler: function handler(newVal, oldVal) {
            var _this261 = this;

            if (!newVal && newVal != oldVal) {
              _.delay(function () {
                _this261.dockDrop();
              }, 0);
            } // Collapse
            else if (newVal) {
                this.dropReady = false;
              }
          },
          immediate: true
        }
      } //////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/session/badge/wn-session-badge.mjs", _M);
  })(); //============================================================
  // JOIN: wn/session/badge/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/session/badge/_com.json", {
    "name": "wn-session-badge",
    "globally": true,
    "template": "./wn-session-badge.html",
    "mixins": ["./wn-session-badge.mjs"],
    "components": ["@com:ti/session/badge"]
  }); //============================================================
  // JOIN: wn/support/wn_list_wrapper_mixins.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////////////
      methods: {
        explainDisplayItems: function explainDisplayItems() {
          var display = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

          var displayItems = _.concat(display);

          var list = [];

          _.forEach(displayItems, function (it) {
            // Guard
            if (Ti.Util.isNil(it)) {
              return;
            } // Quick: table.field.display:: thumb->icon


            if (_.isString(it)) {
              var m = /^@<thumb(:([^>]*))?>$/.exec(it);

              if (m) {
                var candidateIcon = m[2] || undefined;
                list.push({
                  key: ["icon", "thumb", "tp", "mime", "race", "__updated_time"],
                  type: "Object",
                  transformer: {
                    name: "Ti.Types.toObject",
                    args: {
                      icon: "icon",
                      thumb: "thumb",
                      type: "tp",
                      mime: "mime",
                      race: "race",
                      timestamp: "__updated_time"
                    }
                  },
                  comType: "wn-obj-icon",
                  comConf: {
                    "...": "${=value}",
                    "candidateIcon": candidateIcon //"className"   : "thing-icon"

                  }
                });
                return;
              }
            } // Other, just join


            list.push(it);
          });

          return list;
        }
      } ///////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/support/wn_list_wrapper_mixins.mjs", _M);
  })(); //============================================================
  // JOIN: wn/table/wn-table.html
  //============================================================


  Ti.Preload("ti/com/wn/table/wn-table.html", "<ti-table\n  v-bind=\"this\"\n  :fields=\"TheFields\"\n  :on-init=\"OnSubListInit\"\n  @select=\"OnSelected\"\n  @open=\"$notify('open', $event)\"/>"); //============================================================
  // JOIN: wn/table/wn-table.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////////////
      data: function data() {
        return {
          isAllChecked: false,
          hasChecked: false,
          theCurrentId: false,
          theCheckedIds: false
        };
      },
      ///////////////////////////////////////////////////
      computed: {
        //----------------------------------------------
        TheFields: function TheFields() {
          var list = [];

          var _iterator90 = _createForOfIteratorHelper(this.fields),
              _step90;

          try {
            for (_iterator90.s(); !(_step90 = _iterator90.n()).done;) {
              var fld = _step90.value;

              var f2 = _.assign({}, fld);

              f2.display = this.explainDisplayItems(fld.display);
              list.push(f2);
            }
          } catch (err) {
            _iterator90.e(err);
          } finally {
            _iterator90.f();
          }

          return list;
        } //----------------------------------------------

      },
      ///////////////////////////////////////////////////
      methods: {
        //----------------------------------------------
        OnSubListInit: function OnSubListInit($list) {
          this.$list = $list;
        },
        //----------------------------------------------
        OnSelected: function OnSelected() {
          var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          this.theCheckedIds = payload.checkedIds;
          this.theCurrentId = payload.currentId;
          this.syncCheckStatus();
          this.$notify("select", payload);
        },
        //----------------------------------------------
        syncCheckStatus: function syncCheckStatus() {
          this.isAllChecked = this.$list.isAllChecked;
          this.hasChecked = this.$list.hasChecked;
        },
        //----------------------------------------------
        // Delegate methods
        selectPrevRow: function selectPrevRow(options) {
          this.$list.selectPrevRow(options);
        },
        selectNextRow: function selectNextRow(options) {
          this.$list.selectNextRow(options);
        },
        getCurrentRow: function getCurrentRow(options) {
          return this.$list.getCurrentRow(options);
        },
        getCheckedRow: function getCheckedRow(options) {
          return this.$list.getCheckedRow(options);
        },
        getCurrent: function getCurrent(options) {
          return this.$list.getCurrent(options);
        },
        getChecked: function getChecked(options) {
          return this.$list.getChecked(options);
        },
        selectRow: function selectRow(options) {
          this.$list.selectRow(options);
        },
        checkRow: function checkRow(options) {
          this.$list.checkRow(options);
        },
        cancelRow: function cancelRow(options) {
          this.$list.cancelRow(options);
        } //----------------------------------------------

      },
      ///////////////////////////////////////////////////
      watch: {
        "data": function data() {
          this.syncCheckStatus();
        },
        "checkedIds": function checkedIds() {
          this.syncCheckStatus();
        }
      } ///////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/table/wn-table.mjs", _M);
  })(); //============================================================
  // JOIN: wn/table/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/table/_com.json", {
    "name": "wn-table",
    "globally": true,
    "template": "./wn-table.html",
    "props": ["@com:ti/support/list_props.mjs", "@com:ti/table/ti-table-props.mjs"],
    "mixins": ["@com:wn/support/wn_list_wrapper_mixins.mjs", "./wn-table.mjs"],
    "components": ["@com:ti/table"]
  }); //============================================================
  // JOIN: wn/thing/manager/com/thing-creator/thing-creator.html
  //============================================================

  Ti.Preload("ti/com/wn/thing/manager/com/thing-creator/thing-creator.html", "<div class=\"thing-creator ti-box-relative\">\n  <ti-form\n    :fields=\"fields\"\n    :only-fields=\"onlyFields\"\n    :fixed=\"fixed\"\n    :data=\"TheData\"\n    :on-init=\"OnFormInit\"\n    @field:change=\"OnFormFieldChange\"\n    @change=\"OnFormChange\"\n    @submit=\"OnSubmit\"/>\n  <hr class=\"no-space\">\n  <div class=\"ti-flex-center ti-padding-10\">\n    <div class=\"ti-btn is-big\" \n      @click=\"OnCreate\">\n      <span>{{'create-now'|i18n}}</span>\n    </div>\n  </div>\n  <div v-if=\"creating\"\n    class=\"ti-box-mask as-thin ti-flex-center\">\n    <ti-loading text=\"i18n:creating\"/>\n  </div>\n</div>"); //============================================================
  // JOIN: wn/thing/manager/com/thing-creator/thing-creator.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////
      data: function data() {
        return {
          "myData": undefined,
          "creating": false
        };
      },
      ///////////////////////////////////////////
      props: {
        "fields": {
          type: Array,
          "default": function _default() {
            return [];
          }
        },
        "data": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "onlyFields": {
          type: Boolean,
          "default": false
        },
        "fixed": {
          type: Object,
          "default": undefined
        }
      },
      ///////////////////////////////////////////
      computed: {
        TheData: function TheData() {
          return this.myData || this.data;
        }
      },
      ///////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnFormInit: function OnFormInit($form) {
          this.$form = $form;
        },
        //--------------------------------------
        OnFormFieldChange: function OnFormFieldChange() {
          var pair = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          //console.log("OnFormFieldChange", pair)
          this.myData = this.$form.getData(pair);
        },
        //--------------------------------------
        OnFormChange: function OnFormChange(data) {
          //console.log("OnFormChange", data)
          this.myData = data;
        },
        //--------------------------------------
        OnCreate: function OnCreate() {
          var _this262 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee139() {
            var reo;
            return regeneratorRuntime.wrap(function _callee139$(_context140) {
              while (1) {
                switch (_context140.prev = _context140.next) {
                  case 0:
                    _this262.creating = true;
                    _context140.next = 3;
                    return Ti.App(_this262).dispatch("main/create", _this262.myData);

                  case 3:
                    reo = _context140.sent;
                    _this262.creating = false;

                    if (reo && !(reo instanceof Error)) {
                      _this262.$notify("block:hide", "creator");
                    }

                  case 6:
                  case "end":
                    return _context140.stop();
                }
              }
            }, _callee139);
          }))();
        },
        //--------------------------------------
        OnSubmit: function OnSubmit() {
          var _this263 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee140() {
            return regeneratorRuntime.wrap(function _callee140$(_context141) {
              while (1) {
                switch (_context141.prev = _context141.next) {
                  case 0:
                    _this263.$nextTick(function () {
                      _this263.OnCreate();
                    });

                  case 1:
                  case "end":
                    return _context141.stop();
                }
              }
            }, _callee140);
          }))();
        } //--------------------------------------

      },
      ///////////////////////////////////////////
      mounted: function mounted() {
        this.myData = this.$form.getData();
      } ///////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/thing/manager/com/thing-creator/thing-creator.mjs", _M);
  })(); //============================================================
  // JOIN: wn/thing/manager/com/thing-creator/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/thing/manager/com/thing-creator/_com.json", {
    "name": "wn-thing-creator",
    "globally": true,
    "template": "./thing-creator.html",
    "mixins": ["./thing-creator.mjs"],
    "components": []
  }); //============================================================
  // JOIN: wn/thing/manager/com/thing-files/thing-files-props.mjs
  //============================================================

  (function () {
    var _M = {
      //-----------------------------------
      // Data
      //-----------------------------------
      "dirName": {
        type: String,
        "default": undefined
      },
      "dataHome": {
        type: String,
        "default": undefined
      },
      //-----------------------------------
      // Behavior
      //-----------------------------------
      "files": {
        type: Object,
        "default": undefined
      },
      "preview": {
        type: Object,
        "default": undefined
      },
      "previewEdit": {
        type: Object,
        "default": undefined
      },
      "actions": {
        type: Array,
        "default": function _default() {
          return [{
            "name": "reloading",
            "type": "action",
            "icon": "zmdi-refresh",
            "tip": "i18n:refresh",
            "altDisplay": {
              "icon": "zmdi-refresh zmdi-hc-spin"
            },
            "action": "$parent:reloadData"
          }, {
            "type": "line"
          }, {
            "name": "deleting",
            "type": "action",
            "icon": "zmdi-delete",
            "text": "i18n:del",
            "altDisplay": {
              "icon": "zmdi-refresh zmdi-hc-spin",
              "text": "i18n:del-ing"
            },
            "action": "$parent:doDeleteSelected"
          }, {
            "type": "line"
          }, {
            "name": "upload",
            "type": "action",
            "icon": "zmdi-cloud-upload",
            "text": "i18n:upload",
            //"action" : "commit:main/files/showUploadFilePicker"
            "action": "$parent:doUploadFiles"
          }];
        }
      },
      "stateLocalKey": {
        type: String,
        "default": null
      },
      //-----------------------------------
      // Aspect
      //-----------------------------------
      "dirNameTip": {
        type: String,
        "default": undefined //default : "i18n:thing-files"

      },
      "dirNameComType": {
        type: String,
        "default": "ti-droplist"
      },
      "dirNameOptions": {
        type: Array,
        "default": function _default() {
          return [{
            icon: "zmdi-collection-image",
            text: "i18n:media",
            value: "media"
          }, {
            icon: "zmdi-attachment-alt",
            text: "i18n:attachment",
            value: "attachment"
          }];
        }
      },
      "nilIcon": {
        type: String,
        "default": "fas-braille"
      },
      "nilText": {
        type: String,
        "default": null
      } //-----------------------------------
      // Measure
      //-----------------------------------

    };
    Ti.Preload("ti/com/wn/thing/manager/com/thing-files/thing-files-props.mjs", _M);
  })(); //============================================================
  // JOIN: wn/thing/manager/com/thing-files/thing-files.html
  //============================================================


  Ti.Preload("ti/com/wn/thing/manager/com/thing-files/thing-files.html", "<div class=\"wn-thing-files\"\n  :class=\"TopClass\">\n  <!--\n    With Data Home\n  -->\n  <template v-if=\"dataHome\">\n    <!--\n      Head bar for switch dir and actions\n    -->\n    <div class=\"as-header\">\n      <div v-if=\"dirNameTip\"\n        class=\"as-tip\">\n        <span>{{dirNameTip|i18n}}</span>\n      </div>\n      <!--Left: select files home dirName-->\n      <div class=\"as-name\">\n        <component \n          :is=\"dirNameComType\"\n          height=\".3rem\"\n          :allow-empty=\"false\"\n          :options=\"dirNameOptions\"\n          :value=\"dirName\"\n          :prefix-icon-for-clean=\"false\"\n          @change=\"OnDirNameChanged\"/>\n      </div>\n      <!--Right: Common Actions-->\n      <div class=\"as-menu\">\n        <ti-actionbar \n          :items=\"actions\"\n          :status=\"myStatus\"/>\n      </div>\n    </div>\n    <!--\n      File Preview\n    -->\n    <div class=\"as-preview\">\n      <wn-obj-preview\n        class=\"ti-fill-parent\"\n        v-bind=\"ThePreview\"\n        :meta=\"CurrentFile\"/>\n    </div>\n    <!--\n      File List\n    -->\n    <div class=\"as-list\">\n      <wn-adaptlist\n        class=\"ti-fill-parent\"\n        v-bind=\"TheFiles\"\n        :data=\"myData\"\n        :meta=\"myDataDirObj\"\n        :status=\"myStatus\"\n        :before-upload=\"checkDataDir\"\n        @uploaded=\"OnFileUploaded\"\n        @select=\"OnFileSelect\"\n        @open=\"OnFileOpen\"\n        :on-init=\"OnAdaptListInit\"/>\n    </div>\n  </template>\n  <!--\n    Without Data Home\n  -->\n  <ti-loading\n    v-else\n      class=\"nil-datahome as-big-mask\"\n      :text=\"nilText\"\n      :icon=\"nilIcon\"/>\n</div>"); //============================================================
  // JOIN: wn/thing/manager/com/thing-files/thing-files.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////
      inject: ["$ThingManager"],
      ///////////////////////////////////////////
      data: function data() {
        return {
          myDataDirObj: null,
          myData: {},
          myStatus: {
            reloading: false
          },
          myCurrentId: null
        };
      },
      ///////////////////////////////////////////
      computed: {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //--------------------------------------
        hasDataHome: function hasDataHome() {
          return this.dataHome ? true : false;
        },
        //--------------------------------------
        CurrentFile: function CurrentFile() {
          if (this.myCurrentId && this.myData.list) {
            var _iterator91 = _createForOfIteratorHelper(this.myData.list),
                _step91;

            try {
              for (_iterator91.s(); !(_step91 = _iterator91.n()).done;) {
                var it = _step91.value;

                if (this.myCurrentId == it.id) {
                  return it;
                }
              }
            } catch (err) {
              _iterator91.e(err);
            } finally {
              _iterator91.f();
            }
          }
        },
        //--------------------------------------
        ThePreview: function ThePreview() {
          var _this264 = this;

          var preview = Ti.Util.getFallback(this.preview, this.dirName, "@default") || this.preview || {};
          return _objectSpread({
            showInfo: false,
            floatInfo: false,
            infoPosition: "left",
            infoNameWidth: 40,
            infoValueWidth: 120,
            stateLocalKey: this.getStateLocalKey("preview")
          }, preview, {
            // Edit Info 
            editInfoBy: function editInfoBy() {
              _this264.editPreviewInfo();
            }
          });
        },
        //--------------------------------------
        TheFiles: function TheFiles() {
          var _this265 = this;

          return _.assign({}, this.files, {
            routers: {
              "reload": function () {
                var _reload = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee141() {
                  return regeneratorRuntime.wrap(function _callee141$(_context142) {
                    while (1) {
                      switch (_context142.prev = _context142.next) {
                        case 0:
                          _context142.next = 2;
                          return _this265.reloadData();

                        case 2:
                        case "end":
                          return _context142.stop();
                      }
                    }
                  }, _callee141);
                }));

                function reload() {
                  return _reload.apply(this, arguments);
                }

                return reload;
              }()
            }
          });
        } //--------------------------------------

      },
      ///////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnAdaptListInit: function OnAdaptListInit($adaptlist) {
          this.$adaptlist = $adaptlist;
        },
        //--------------------------------------
        // Events
        //--------------------------------------
        OnDirNameChanged: function OnDirNameChanged(dirName) {
          var _this266 = this;

          Ti.App(this).commit("main/setCurrentDataDir", dirName);
          this.$nextTick(function () {
            _this266.reloadData();
          });
        },
        //--------------------------------------
        OnFileSelect: function OnFileSelect(_ref132) {
          var currentId = _ref132.currentId;
          this.myCurrentId = currentId;
        },
        //--------------------------------------
        OnFileOpen: function OnFileOpen(obj) {
          this.$notify("file:open", obj);
        },
        //--------------------------------------
        OnFileUploaded: function OnFileUploaded() {
          var _arguments22 = arguments,
              _this267 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee142() {
            var files, f;
            return regeneratorRuntime.wrap(function _callee142$(_context143) {
              while (1) {
                switch (_context143.prev = _context143.next) {
                  case 0:
                    files = _arguments22.length > 0 && _arguments22[0] !== undefined ? _arguments22[0] : [];
                    f = _.first(files);

                    if (f) {
                      _this267.$adaptlist.myCurrentId = f.id;
                      _this267.myCurrentId = f.id;
                    }

                    _context143.next = 5;
                    return Ti.App(_this267).dispatch("main/autoSyncCurrentFilesCount");

                  case 5:
                  case "end":
                    return _context143.stop();
                }
              }
            }, _callee142);
          }))();
        },
        //--------------------------------------
        // Untility
        //--------------------------------------
        getStateLocalKey: function getStateLocalKey(name) {
          if (this.stateLocalKey && name) {
            return "".concat(this.stateLocalKey, "_").concat(name);
          }
        },
        //--------------------------------------
        doDeleteSelected: function doDeleteSelected() {
          var _this268 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee143() {
            return regeneratorRuntime.wrap(function _callee143$(_context144) {
              while (1) {
                switch (_context144.prev = _context144.next) {
                  case 0:
                    _context144.next = 2;
                    return _this268.$adaptlist.doDelete();

                  case 2:
                    _context144.next = 4;
                    return Ti.App(_this268).dispatch("main/autoSyncCurrentFilesCount");

                  case 4:
                  case "end":
                    return _context144.stop();
                }
              }
            }, _callee143);
          }))();
        },
        //--------------------------------------
        checkDataDir: function checkDataDir() {
          var _this269 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee144() {
            var pos, tsDataPh, dirPath, newMeta, json, cmdText, dataDirObj, dataHomeObj;
            return regeneratorRuntime.wrap(function _callee144$(_context145) {
              while (1) {
                switch (_context145.prev = _context145.next) {
                  case 0:
                    if (_this269.hasDataHome) {
                      _context145.next = 2;
                      break;
                    }

                    return _context145.abrupt("return");

                  case 2:
                    if (_this269.myDataDirObj) {
                      _context145.next = 17;
                      break;
                    }

                    pos = _this269.dataHome.indexOf('/');
                    tsDataPh = _this269.dataHome.substring(0, pos);
                    dirPath = Ti.Util.appendPath(_this269.dataHome.substring(pos + 1), _this269.dirName);
                    newMeta = {
                      race: "DIR",
                      nm: dirPath
                    };
                    json = JSON.stringify(newMeta);
                    cmdText = "obj \"".concat(tsDataPh, "\" -IfNoExists -new '").concat(json, "' -cqno"); //console.log(cmdText)

                    _context145.next = 11;
                    return Wn.Sys.exec2(cmdText, {
                      as: "json"
                    });

                  case 11:
                    dataDirObj = _context145.sent;
                    _context145.next = 14;
                    return Wn.Io.loadMetaBy(_this269.dataHome);

                  case 14:
                    dataHomeObj = _context145.sent;
                    // Update local state
                    Ti.App(_this269).commit("main/setCurrentDataHomeObj", dataHomeObj);
                    _this269.myDataDirObj = dataDirObj;

                  case 17:
                  case "end":
                    return _context145.stop();
                }
              }
            }, _callee144);
          }))();
        },
        //--------------------------------------
        doUploadFiles: function doUploadFiles() {
          var _this270 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee145() {
            return regeneratorRuntime.wrap(function _callee145$(_context146) {
              while (1) {
                switch (_context146.prev = _context146.next) {
                  case 0:
                    _context146.next = 2;
                    return _this270.checkDataDir();

                  case 2:
                    if (!_this270.myDataDirObj) {
                      _context146.next = 6;
                      break;
                    }

                    _this270.$adaptlist.openLocalFileSelectdDialog();

                    _context146.next = 7;
                    break;

                  case 6:
                    throw "Impossible!!!";

                  case 7:
                  case "end":
                    return _context146.stop();
                }
              }
            }, _callee145);
          }))();
        },
        //--------------------------------------
        editPreviewInfo: function editPreviewInfo() {
          var _this271 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee146() {
            var options, reo;
            return regeneratorRuntime.wrap(function _callee146$(_context147) {
              while (1) {
                switch (_context147.prev = _context147.next) {
                  case 0:
                    if (!_this271.CurrentFile) {
                      _context147.next = 6;
                      break;
                    }

                    options = _.get(_this271.previewEdit, _this271.dirName);
                    _context147.next = 4;
                    return Wn.EditObjMeta(_this271.CurrentFile, options);

                  case 4:
                    reo = _context147.sent;

                    if (reo && reo.data) {
                      _this271.updateItemInDataList(reo.data);
                    }

                  case 6:
                  case "end":
                    return _context147.stop();
                }
              }
            }, _callee146);
          }))();
        },
        //--------------------------------------
        updateItemInDataList: function updateItemInDataList(meta) {
          if (meta && this.myData && _.isArray(this.myData.list)) {
            this.myData.list = _.map(this.myData.list, function (it) {
              return it.id == meta.id ? meta : it;
            });
          }
        },
        //--------------------------------------
        // Reloading
        //--------------------------------------
        reloadData: function reloadData() {
          var _this272 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee147() {
            var hmph, home, reo;
            return regeneratorRuntime.wrap(function _callee147$(_context148) {
              while (1) {
                switch (_context148.prev = _context148.next) {
                  case 0:
                    if (!(_this272.dataHome && _this272.dirName)) {
                      _context148.next = 19;
                      break;
                    }

                    _this272.myStatus.reloading = true;
                    hmph = Ti.Util.appendPath(_this272.dataHome, _this272.dirName); //console.log("reloadData:", hmph)

                    _context148.next = 5;
                    return Wn.Io.loadMeta(hmph);

                  case 5:
                    home = _context148.sent;

                    if (home) {
                      _context148.next = 11;
                      break;
                    }

                    _this272.myDataDirObj = null;
                    _this272.myData = {};
                    _context148.next = 16;
                    break;

                  case 11:
                    _context148.next = 13;
                    return Wn.Io.loadChildren(home);

                  case 13:
                    reo = _context148.sent;
                    _this272.myDataDirObj = home;
                    _this272.myData = reo;

                  case 16:
                    _.delay(function () {
                      _this272.myStatus.reloading = false;
                    }, 100);

                    _context148.next = 21;
                    break;

                  case 19:
                    _this272.myDataDirObj = null;
                    _this272.myData = {};

                  case 21:
                  case "end":
                    return _context148.stop();
                }
              }
            }, _callee147);
          }))();
        } //--------------------------------------

      },
      ///////////////////////////////////////////
      watch: {
        "dirName": {
          handler: "reloadData",
          immediate: true
        }
      },
      ///////////////////////////////////////////
      mounted: function mounted() {
        this.$ThingManager.$files = this;
      } ///////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/thing/manager/com/thing-files/thing-files.mjs", _M);
  })(); //============================================================
  // JOIN: wn/thing/manager/com/thing-files/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/thing/manager/com/thing-files/_com.json", {
    "name": "wn-thing-files",
    "globally": true,
    "template": "./thing-files.html",
    "props": "./thing-files-props.mjs",
    "mixins": ["./thing-files.mjs"],
    "components": ["@com:wn/adaptlist"]
  }); //============================================================
  // JOIN: wn/thing/manager/com/thing-filter/thing-filter.html
  //============================================================

  Ti.Preload("ti/com/wn/thing/manager/com/thing-filter/thing-filter.html", "<div class=\"wn-thing-filter\"\n  :class=\"TopClass\">\n  <!--\n    Icon: Recycle Bin\n  -->\n  <div\n    v-if=\"isInRecycleBin\"\n      class=\"as-recyclebin\"\n      @click=\"OnLeaveRecycleBin\"><div>\n        <!--Icon-->\n        <div class=\"it-icon\">\n          <ti-icon value=\"fas-recycle\"/>\n          <ti-icon value=\"far-arrow-alt-circle-left\"/>\n        </div>\n        <!--text-->\n        <div class=\"it-text\">{{'i18n:thing-recycle-bin'|i18n}}</div>\n  </div></div>\n  <!--\n    Keyword\n  -->\n  <TiComboFilter\n    class=\"as-filter\"\n    v-bind=\"filter\"\n    :placeholder=\"placeholder\"\n    :value=\"value.filter\"\n    @change=\"OnFilterChange\"/>\n  <!--\n    Sorter\n  -->\n  <TiComboSorter\n    v-if=\"hasSorter\"\n      class=\"as-sorter\"\n      v-bind=\"sorter\"\n      :value=\"value.sorter\"\n      @change=\"OnSorterChange\"/>\n</div>"); //============================================================
  // JOIN: wn/thing/manager/com/thing-filter/thing-filter.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////
      data: function data() {
        return {
          keywordFocus: false
        };
      },
      ///////////////////////////////////////////
      props: {
        "filter": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "sorter": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "placeholder": {
          type: String,
          "default": 'i18n:find-data'
        },
        "status": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "value": {
          type: Object,
          "default": function _default() {
            return {};
          }
        }
      },
      ///////////////////////////////////////////
      computed: {
        //---------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass({
            "in-recyclebin": this.isInRecycleBin
          });
        },
        //---------------------------------------
        hasSorter: function hasSorter() {
          return !_.isEmpty(this.sorter);
        },
        //---------------------------------------
        isInRecycleBin: function isInRecycleBin() {
          return this.status.inRecycleBin;
        } //---------------------------------------

      },
      ///////////////////////////////////////////
      methods: {
        //---------------------------------------
        OnFilterChange: function OnFilterChange(payload) {
          this.$notify("filter::change", payload);
        },
        //---------------------------------------
        OnSorterChange: function OnSorterChange(payload) {
          this.$notify("sorter::change", payload);
        },
        //---------------------------------------
        // When this func be invoked, the recycleBin must be true
        OnLeaveRecycleBin: function OnLeaveRecycleBin() {
          Ti.App(this).dispatch('main/toggleInRecycleBin');
        } //---------------------------------------

      } ///////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/thing/manager/com/thing-filter/thing-filter.mjs", _M);
  })(); //============================================================
  // JOIN: wn/thing/manager/com/thing-filter/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/thing/manager/com/thing-filter/_com.json", {
    "name": "wn-thing-filter",
    "globally": true,
    "template": "./thing-filter.html",
    "mixins": ["./thing-filter.mjs"],
    "components": ["@com:ti/combo/filter", "@com:ti/combo/sorter"]
  }); //============================================================
  // JOIN: wn/thing/manager/com/thing-markdown-editor/_com.json
  //============================================================

  Ti.Preload("ti/com/wn/thing/manager/com/thing-markdown-editor/_com.json", {
    "name": "wn-thing-markdown-richeditor",
    "globally": true,
    "template": "./thing-markdown-richeditor.html",
    "mixins": ["./thing-markdown-richeditor.mjs"],
    "components": []
  }); //============================================================
  // JOIN: wn/thing/manager/wn-thing-manager-methods.mjs
  //============================================================

  (function () {
    var _M = {
      //--------------------------------------
      //
      //           Batch Update
      //
      //--------------------------------------
      batchUpdate: function batchUpdate() {
        var _this273 = this;

        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee148() {
          var current, batch, name_filter, regex, _regex, list, fields, do_filter_fields, updates;

          return regeneratorRuntime.wrap(function _callee148$(_context149) {
            while (1) {
              switch (_context149.prev = _context149.next) {
                case 0:
                  if (!_.isEmpty(_this273.checkedItems)) {
                    _context149.next = 2;
                    break;
                  }

                  return _context149.abrupt("return", Ti.Toast.Open("i18n:batch-none", "warn"));

                case 2:
                  current = _.first(_this273.checkedItems); //....................................

                  batch = _.get(_this273.config, "schema.behavior.batch") || {};

                  _.defaults(batch, {
                    "comType": "wn-obj-form",
                    "comConf": {},
                    "fields": "schema.meta.comConf.fields",
                    "names": null,
                    "valueKey": "data"
                  });

                  batch.comType = _.kebabCase(batch.comType); // Add default setting

                  if (/^(ti-|wn-obj-)(form)$/.test(batch.comType)) {
                    _.defaults(batch.comConf, {
                      autoShowBlank: false,
                      updateBy: true,
                      setDataBy: true
                    });
                  } //....................................


                  if (_.isString(batch.names)) {
                    if (batch.names.startsWith("^")) {
                      regex = new RegExp(batch.names);

                      name_filter = function name_filter(fld) {
                        return regex.test(fld.name);
                      };
                    } else if (batch.names.startsWith("!^")) {
                      _regex = new RegExp(batch.names.substring(1));

                      name_filter = function name_filter(fld) {
                        return !_regex.test(fld.name);
                      };
                    } else {
                      list = Ti.S.toArray(batch.names);

                      name_filter = function name_filter(fld) {
                        return list.indexOf(fld.name) >= 0;
                      };
                    }
                  } // Filter by Array
                  // TODO maybe I should use the validate
                  else if (_.isArray(batch.names) && !_.isEmpty(batch.names)) {
                      name_filter = function name_filter(v) {
                        return batch.name.indexOf(v) >= 0;
                      };
                    } // Allow all
                    else {
                        name_filter = function name_filter(fld) {
                          //console.log(fld)
                          // It is dangour when batch update
                          // Many thing item may refer to same file
                          if (/^(wn-upload-file|wn-imgfile)$/.test(fld.comType)) return false;
                          return true;
                        };
                      } //....................................
                  // Prepare the fields


                  fields = _.get(_this273.config, batch.fields); //....................................
                  // Define the filter processing

                  do_filter_fields = function do_filter_fields() {
                    var flds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                    var filter = arguments.length > 1 ? arguments[1] : undefined;
                    var list = [];

                    var _iterator92 = _createForOfIteratorHelper(flds),
                        _step92;

                    try {
                      for (_iterator92.s(); !(_step92 = _iterator92.n()).done;) {
                        var fld = _step92.value;

                        // Group
                        if (_.isArray(fld.fields)) {
                          var f2 = _.cloneDeep(fld);

                          f2.fields = do_filter_fields(fld.fields, filter);

                          if (!_.isEmpty(f2.fields)) {
                            list.push(f2);
                          }
                        } // Fields
                        else if (filter(fld)) {
                            list.push(fld);
                          }
                      }
                    } catch (err) {
                      _iterator92.e(err);
                    } finally {
                      _iterator92.f();
                    }

                    return list;
                  }; //....................................
                  // filter each fields


                  fields = do_filter_fields(fields, name_filter); //....................................
                  // Open the Modal

                  _context149.next = 13;
                  return Ti.App.Open({
                    title: "i18n:batch-update",
                    width: 640,
                    height: "90%",
                    position: "top",
                    //............................
                    comType: "inner-body",
                    //............................
                    components: [{
                      name: "inner-body",
                      globally: false,
                      data: {
                        update: {},
                        value: current,
                        innerComConf: _objectSpread({}, batch.comConf, {
                          fields: fields
                        })
                      },
                      template: "<".concat(batch.comType, "\n          v-bind=\"innerComConf\"\n          :").concat(batch.valueKey, "=\"value\"\n          @field:change=\"OnFieldChange\"\n          @change=\"OnChange\"/>"),
                      methods: {
                        OnFieldChange: function OnFieldChange(_ref133) {
                          var name = _ref133.name,
                              value = _ref133.value;

                          _.set(this.update, name, value);

                          this.$notify("change", this.update);
                        },
                        OnChange: function OnChange(payload) {
                          this.value = payload;
                        }
                      }
                    }] //............................

                  });

                case 13:
                  updates = _context149.sent;

                  if (_.isEmpty(updates)) {
                    _context149.next = 17;
                    break;
                  }

                  _context149.next = 17;
                  return Ti.App(_this273).dispatch("main/batchUpdateMetas", updates);

                case 17:
                case "end":
                  return _context149.stop();
              }
            }
          }, _callee148);
        }))();
      },
      //--------------------------------------
      //
      //      Utility: show/hide block
      //
      //--------------------------------------
      changeShown: function changeShown() {
        var shown = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        Ti.App(this).dispatch("main/doChangeShown", shown);
      },
      //--------------------------------------
      showBlock: function showBlock(name) {
        //console.log("showBlock", name)
        // If creator, then must leave the recycle bin
        if ("creator" == name) {
          if (this.status.inRecycleBin) {
            Ti.Alert("i18n:thing-create-in-recyclebin", {
              title: "i18n:warn",
              icon: "im-warning",
              type: "warn"
            });
            return;
          }
        }

        if ("files" == name) {
          Ti.App(this).dispatch("main/reloadFiles");
        } else if ("content" == name) {
          //Ti.App(this).dispatch("main/reloadFiles")
          Ti.App(this).dispatch("main/current/reload");
        } // Mark block


        Ti.App(this).dispatch("main/doChangeShown", _defineProperty({}, name, true));
      },
      //--------------------------------------
      hideBlock: function hideBlock(name) {
        Ti.App(this).dispatch("main/doChangeShown", _defineProperty({}, name, false));
      },
      //--------------------------------------
      toggleBlock: function toggleBlock(name) {
        Ti.App(this).dispatch("main/doChangeShown", _defineProperty({}, name, !this.TheShown[name]));
      },
      //--------------------------------------
      //
      //           Utility: Others
      // 
      //--------------------------------------
      invoke: function invoke(fnName) {
        var _this274 = this;

        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee149() {
          var fn;
          return regeneratorRuntime.wrap(function _callee149$(_context150) {
            while (1) {
              switch (_context150.prev = _context150.next) {
                case 0:
                  //console.log("invoke ", fnName)
                  fn = _.get(_this274.SchemaMethods, fnName); // Invoke the method

                  if (!_.isFunction(fn)) {
                    _context150.next = 7;
                    break;
                  }

                  _context150.next = 4;
                  return fn.apply(_this274, []);

                case 4:
                  return _context150.abrupt("return", _context150.sent);

                case 7:
                  throw Ti.Err.make("e.thing.fail-to-invoke", fnName);

                case 8:
                case "end":
                  return _context150.stop();
              }
            }
          }, _callee149);
        }))();
      } //--------------------------------------

    };
    Ti.Preload("ti/com/wn/thing/manager/wn-thing-manager-methods.mjs", _M);
  })(); //============================================================
  // JOIN: wn/thing/manager/wn-thing-manager.html
  //============================================================


  Ti.Preload("ti/com/wn/thing/manager/wn-thing-manager.html", "<ti-gui\n  class=\"wn-thing\"\n  :class=\"TopClass\"\n  v-ti-activable\n  :layout=\"TheLayout\"\n  :schema=\"TheSchema\"\n  :shown=\"TheShown\"\n  :can-loading=\"true\"\n  :loading-as=\"GuiLoadingAs\"\n  :action-status=\"status\"/>"); //============================================================
  // JOIN: wn/thing/manager/wn-thing-manager.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////
      provide: function provide() {
        return {
          $ThingManager: this
        };
      },
      ///////////////////////////////////////////
      data: function data() {
        return {
          "myRouting": {}
        };
      },
      ///////////////////////////////////////////
      props: {
        // Thing Set Home
        "meta": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "currentDataHome": {
          type: String,
          "default": undefined
        },
        "currentDataHomeObj": {
          type: Object,
          "default": undefined
        },
        "currentDataDir": {
          type: String,
          "default": undefined
        },
        "status": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "config": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "search": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "current": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "files": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "preview": {
          type: Object,
          "default": function _default() {
            return {};
          }
        },
        "emitChange": {
          type: Boolean,
          "default": false
        },
        "keepLastSelection": {
          type: Boolean,
          "default": true
        }
      },
      ///////////////////////////////////////////
      computed: _objectSpread({}, Vuex.mapGetters("main/search", ["currentItem", "checkedItems"]), {
        //--------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass();
        },
        //--------------------------------------
        TheShown: function TheShown() {
          return _.get(this.config, "shown") || {};
        },
        //--------------------------------------
        TheKeepLastKey: function TheKeepLastKey() {
          if (this.keepLastSelection) {
            return _.get(this.meta, "id") + ":currentId";
          }
        },
        //--------------------------------------
        CurrentIsDead: function CurrentIsDead() {
          return -1 == _.get(this.current, "meta.th_live");
        },
        //--------------------------------------
        CurrentHeadClass: function CurrentHeadClass() {
          if (this.CurrentIsDead) {
            return "current-in-recyclebin";
          }
        },
        //--------------------------------------
        TheLayout: function TheLayout() {
          return Ti.Util.explainObj(this, this.config.layout);
        },
        //--------------------------------------
        TheSchema: function TheSchema() {
          return Ti.Util.explainObj(this, this.config.schema);
        },
        //--------------------------------------
        TheLoadingAs: function TheLoadingAs() {
          return _.assign({
            "reloading": {
              icon: "fas-spinner fa-spin",
              text: "i18n:loading"
            },
            "saving": {
              icon: "zmdi-settings fa-spin",
              text: "i18n:saving"
            },
            "deleting": {
              icon: "zmdi-refresh fa-spin",
              text: "i18n:del-ing"
            },
            "publishing": {
              icon: "zmdi-settings zmdi-hc-spin",
              text: "i18n:publishing"
            },
            "restoring": {
              icon: "zmdi-time-restore zmdi-hc-spin",
              text: "i18n:thing-restoring"
            },
            "cleaning": {
              icon: "zmdi-settings zmdi-hc-spin",
              text: "i18n:thing-cleaning"
            }
          }, _.get(this.TheSchema, "loadingAs"));
        },
        //--------------------------------------
        ChangedRowId: function ChangedRowId() {
          if (this.currentItem && this.current.status.changed) {
            return this.currentItem.id;
          }
        },
        //--------------------------------------
        GuiLoadingAs: function GuiLoadingAs() {
          var key = _.findKey(this.status, function (v) {
            return v;
          });

          return _.get(this.TheLoadingAs, key);
        },
        //--------------------------------------
        curentThumbTarget: function curentThumbTarget() {
          if (this.currentItem) {
            var th_set = this.meta.id;
            return "id:".concat(th_set, "/data/").concat(this.currentItem.id, "/thumb.jpg");
          }

          return "";
        },
        //--------------------------------------
        SchemaMethods: function SchemaMethods() {
          if (this.TheSchema && this.TheSchema.methods) {
            return Ti.Util.merge({}, this.TheSchema.methods);
          }

          return {};
        },
        //--------------------------------------
        EventRouting: function EventRouting() {
          return _.assign({
            "block:show": "showBlock",
            "block:hide": "hideBlock",
            "block:shown": "changeShown",
            "filter::change": "OnFilterChange",
            "sorter::change": "OnSorterChange",
            "list::select": "OnListSelect",
            "list::open": "OnListOpen",
            "content::change": "OnContentChange",
            "pager::change": "OnPagerChange"
          }, _.get(this.TheSchema, "events"), this.myRouting);
        } //--------------------------------------

      }),
      ///////////////////////////////////////////
      methods: {
        //--------------------------------------
        //
        //  Event handler
        //
        //--------------------------------------
        OnFilterChange: function OnFilterChange(filter) {
          var _this275 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee150() {
            return regeneratorRuntime.wrap(function _callee150$(_context151) {
              while (1) {
                switch (_context151.prev = _context151.next) {
                  case 0:
                    Ti.App(_this275).commit("main/search/setFilter", filter);
                    _context151.next = 3;
                    return Ti.App(_this275).dispatch("main/reloadSearch");

                  case 3:
                  case "end":
                    return _context151.stop();
                }
              }
            }, _callee150);
          }))();
        },
        //--------------------------------------
        OnSorterChange: function OnSorterChange() {
          var _arguments23 = arguments,
              _this276 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee151() {
            var sort;
            return regeneratorRuntime.wrap(function _callee151$(_context152) {
              while (1) {
                switch (_context152.prev = _context152.next) {
                  case 0:
                    sort = _arguments23.length > 0 && _arguments23[0] !== undefined ? _arguments23[0] : {};
                    Ti.App(_this276).commit("main/search/setSorter", sort);
                    _context152.next = 4;
                    return Ti.App(_this276).dispatch("main/reloadSearch");

                  case 4:
                  case "end":
                    return _context152.stop();
                }
              }
            }, _callee151);
          }))();
        },
        //--------------------------------------
        OnListSelect: function OnListSelect(_ref134) {
          var current = _ref134.current,
              currentId = _ref134.currentId,
              checkedIds = _ref134.checkedIds,
              checked = _ref134.checked;
          //console.log("OnListSelect", current)
          Ti.App(this).dispatch("main/setCurrentThing", {
            meta: current,
            currentId: currentId,
            checkedIds: checkedIds
          });

          if (this.emitChange) {
            this.$emit("change", {
              current: current,
              currentId: currentId,
              checkedIds: checkedIds,
              checked: checked
            });
          }
        },
        //--------------------------------------
        OnListOpen: function OnListOpen(_ref135) {
          var rawData = _ref135.rawData;
          var app = Ti.App(this);
          app.dispatch("main/config/updateShown", this.config.listOpen); // Update Current

          app.dispatch("main/setCurrentThing", {
            meta: rawData
          });
        },
        //--------------------------------------
        OnContentChange: function OnContentChange(content) {
          var app = Ti.App(this);
          app.dispatch("main/current/changeContent", content);
          app.commit("main/syncStatusChanged");
        },
        //--------------------------------------
        OnPagerChange: function OnPagerChange() {
          var _ref136 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              pn = _ref136.pn,
              pgsz = _ref136.pgsz;

          //console.log("OnPagerChange", {pn, pgsz})
          Ti.App(this).dispatch("main/search/reloadPage", {
            pn: pn,
            pgsz: pgsz
          });
        },
        //--------------------------------------
        OnViewCurrentSource: function OnViewCurrentSource() {
          this.viewCurrentSource();
        },
        //--------------------------------------
        //
        //  Utility
        //
        //--------------------------------------
        addEventRouting: function addEventRouting(eventName, handler) {
          this.$set(this.myRouting, eventName, handler);
        },
        removeEventRouting: function removeEventRouting() {
          for (var _len5 = arguments.length, names = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            names[_key5] = arguments[_key5];
          }

          var routing = _.omitBy(this.myRouting, function (_, key) {
            return names.indexOf(key) >= 0;
          });

          this.myRouting = routing;
        },
        //--------------------------------------
        //
        // Callback
        //
        //--------------------------------------
        // For Event Bubble Dispatching
        __on_events: function __on_events(name) {
          //console.log("__on_events", name)
          // Try to get handler
          var fn = _.get(this.EventRouting, name);

          if (!fn) {
            fn = this.$tiEventTryFallback(name, this.EventRouting);
          } // callPath -> Function


          if (_.isString(fn)) {
            return _.get(this, fn);
          }

          return fn;
        },
        // Shortcut 
        __ti_shortcut: function __ti_shortcut(uniqKey) {
          //console.log("ti-form", uniqKey)
          if ("ESCAPE" == uniqKey) {
            if (this.TheShown.creator) {
              this.hideBlock("creator");
            }
          }
        } //--------------------------------------

      },
      ///////////////////////////////////////////
      mounted: function mounted() {
        // Mark self in order to let `thing-files` set self
        // to root `wn-thing-manager` instance
        // then `openLocalFileSelectdDialogToUploadFiles`
        // can assess the `thing-files` instance directly.
        this.THING_MANAGER_ROOT = true; // Update the customized actions

        var actions = _.get(this.config, "actions");

        if (_.isArray(actions)) {
          this.$notify("actions:update", actions);
        }
      } ///////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/thing/manager/wn-thing-manager.mjs", _M);
  })(); //============================================================
  // JOIN: wn/thing/manager/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/thing/manager/_com.json", {
    "name": "wn-thing-manager",
    "globally": true,
    "i18n": "@i18n:wn-thing",
    "template": "./wn-thing-manager.html",
    "methods": "./wn-thing-manager-methods.mjs",
    "mixins": ["./wn-thing-manager.mjs"],
    "components": ["./com/thing-files", "./com/thing-filter", "./com/thing-creator", "./com/thing-files", "@com:ti/gui", "@com:ti/combo/filter", "@com:ti/paging/jumper", "@com:wn/table", "@com:wn/obj/icon", "@com:wn/obj/puretext", "@com:wn/obj/preview", "@com:wn/obj/form", "@com:wn/upload/file"]
  }); //============================================================
  // JOIN: wn/thing/markdown/richeditor/thing-markdown-richeditor.html
  //============================================================

  Ti.Preload("ti/com/wn/thing/markdown/richeditor/thing-markdown-richeditor.html", "<WnObjMarkdownRicheditor\n  v-bind=\"this\"\n  :on-init=\"OnEditorInit\"/>"); //============================================================
  // JOIN: wn/thing/markdown/richeditor/thing-markdown-richeditor.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////////////
      inject: ["$ThingManager"],
      ///////////////////////////////////////////////////
      props: {
        "listenMedia": {
          type: String,
          "default": "file:open"
        }
      },
      ///////////////////////////////////////////////////
      methods: {
        //-----------------------------------------------
        OnEditorInit: function OnEditorInit($editor) {
          this.$editor = $editor;
        } //-----------------------------------------------

      },
      ///////////////////////////////////////////////////
      mounted: function mounted() {
        var _this277 = this;

        if (this.listenMedia) {
          this.$ThingManager.addEventRouting(this.listenMedia, function (oMedia) {
            console.log("oMedia", oMedia);

            _this277.$editor.insertMediaObj(oMedia);
          });
        }
      },
      ///////////////////////////////////////////////////
      beforeDestroy: function beforeDestroy() {
        if (this.listenMedia) {
          this.$ThingManager.removeEventRouting(this.listenMedia);
        }
      } ///////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/thing/markdown/richeditor/thing-markdown-richeditor.mjs", _M);
  })(); //============================================================
  // JOIN: wn/thing/markdown/richeditor/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/thing/markdown/richeditor/_com.json", {
    "name": "wn-thing-markdown-richeditor",
    "globally": true,
    "template": "./thing-markdown-richeditor.html",
    "props": ["@com:ti/text/markdown/richeditor/ti-markdown-richeditor-props.mjs", "@com:wn/obj/markdown/richeditor/wn-markdown-richeditor-props.mjs"],
    "mixins": ["./thing-markdown-richeditor.mjs"],
    "components": ["@com:wn/obj/markdown/richeditor"]
  }); //============================================================
  // JOIN: wn/transfer/wn-transfer.html
  //============================================================

  Ti.Preload("ti/com/wn/transfer/wn-transfer.html", "<ti-transfer v-bind=\"this\"\n  \n  :options=\"OptionsDict\"\n  :can-com-type=\"TheCanComType\"\n  :sel-com-type=\"TheSelComType\"\n  :display=\"TheDisplay\"\n\n  @change=\"$notify('change', $event)\"/>"); //============================================================
  // JOIN: wn/transfer/wn-transfer.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////////////////
      data: function data() {
        return {};
      },
      ///////////////////////////////////////////////////////
      props: {
        "itemBy": {
          type: [String, Function],
          "default": undefined
        },
        "findBy": {
          type: [String, Function],
          "default": undefined
        }
      },
      ///////////////////////////////////////////////////////
      computed: {
        //---------------------------------------------------
        TheCanComType: function TheCanComType() {
          return this.canComType || "wn-list";
        },
        //---------------------------------------------------
        TheSelComType: function TheSelComType() {
          return this.selComType || "wn-list";
        },
        //------------------------------------------------
        TheDisplay: function TheDisplay() {
          return this.display || ["@<thumb>", "title", "nm"];
        },
        //---------------------------------------------------
        OptionsDict: function OptionsDict() {
          return Wn.Dict.evalOptionsDict(this);
        } //---------------------------------------------------

      } ///////////////////////////////////////////////////////
      ///////////////////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/transfer/wn-transfer.mjs", _M);
  })(); //============================================================
  // JOIN: wn/transfer/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/transfer/_com.json", {
    "name": "wn-transfer",
    "globally": true,
    "template": "./wn-transfer.html",
    "props": "@com:ti/transfer/ti-transfer-props.mjs",
    "mixins": ["./wn-transfer.mjs"],
    "components": ["@com:ti/transfer"]
  }); //============================================================
  // JOIN: wn/upload/file/wn-upload-file.html
  //============================================================

  Ti.Preload("ti/com/wn/upload/file/wn-upload-file.html", "<TiUploadFile\n  :preview=\"PreviewIcon\"\n  :width=\"width\"\n  :height=\"height\"\n  :progress=\"progress\"\n  :upload-file=\"uploadFile\"\n  :removable=\"removable\"\n  @upload=\"onUpload\"\n  @remove=\"onRemove\"\n  @open=\"onOpen\"/>"); //============================================================
  // JOIN: wn/upload/file/wn-upload-file.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      data: function data() {
        return {
          "src_ts": null,
          "oFile": null,
          "uploadFile": null,
          "progress": -1
        };
      },
      /////////////////////////////////////////
      props: {
        "value": {
          type: String,
          "default": null
        },
        // raw value is WnObj
        // If declare the valueType
        // It will transform the WnObj
        // to relaitve value mode
        "valueType": {
          type: String,
          "default": "obj",
          validator: function validator(v) {
            return /^(obj|path|fullPath|idPath|id)$/.test(v);
          }
        },
        // Display width
        "width": {
          type: [String, Number],
          "default": undefined
        },
        // Display height
        "height": {
          type: [String, Number],
          "default": undefined
        },
        // support remove the objects
        "removable": {
          type: Boolean,
          "default": true
        },
        // Indicate the upload target when upload new value
        // Of cause, if the `value` exists, replace it
        // The `target` must be a path to a image object,
        // it will auto transfrom the image format by `cmd_imagic`
        "target": {
          type: String,
          "default": null
        },
        // which type supported to upload
        // nulll or empty array will support any types
        "supportTypes": {
          type: [String, Array],
          "default": function _default() {
            return [];
          } //default : ()=>["png","jpg","jpeg","gif"]

        },
        // which mime supported to upload
        // nulll or empty array will support any mimes
        "supportMimes": {
          type: [String, Array],
          "default": function _default() {
            return [];
          } //default : ()=>["image/png","image/jpeg","image/gif"]

        },
        // Image object only: it will auto apply image filter
        // just like clip the image size etc..
        // @see cmd_imagic for more detail about the filter
        "filter": {
          type: [Array, String],
          "default": null
        },
        // Image object only: if `>0 and <=1` mean output quality
        // if not match the range, will depends on the `cmd_imagic` default
        "quality": {
          type: Number,
          "default": 0
        }
      },
      //////////////////////////////////////////
      computed: {
        //--------------------------------------
        AcceptTypes: function AcceptTypes() {
          if (_.isString(this.supportTypes)) return this.supportTypes.split(",");
          return this.supportTypes;
        },
        //--------------------------------------
        AcceptMimes: function AcceptMimes() {
          if (_.isString(this.supportMimes)) return this.supportMimes.split(",");
          return this.supportMimes;
        },
        //--------------------------------------
        ImageFilter: function ImageFilter() {
          if (!this.filter) return [];
          return [].concat(this.filter);
        },
        //--------------------------------------
        // Display image for <ti-thumb>
        PreviewIcon: function PreviewIcon() {
          //....................................
          if (this.oFile) {
            //..................................
            // Image
            if (Wn.Obj.isMime(this.oFile, /^(image\/)/)) {
              var ss = ["/o/content?str=id:", this.oFile.id];

              if (this.src_ts) {
                ss.push("&_t=");
                ss.push(this.src_ts);
              }

              return {
                type: "image",
                value: ss.join("")
              };
            } //..................................
            // Video


            if (Wn.Obj.isMime(this.oFile, /^(video\/)/)) {
              var _ss = ["/o/content?str=id:", this.oFile.video_cover];

              if (this.src_ts) {
                _ss.push("&_t=");

                _ss.push(this.src_ts);
              }

              return {
                type: "image",
                value: _ss.join("")
              };
            } //..................................
            // Others just get the icon font


            return Wn.Util.getObjIcon(this.oFile);
          }
        } //--------------------------------------

      },
      //////////////////////////////////////////
      methods: {
        //--------------------------------------
        assertListHas: function assertListHas(list, str, invalidMsg, vars) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee152() {
            var invalid, _iterator93, _step93, li;

            return regeneratorRuntime.wrap(function _callee152$(_context153) {
              while (1) {
                switch (_context153.prev = _context153.next) {
                  case 0:
                    if (_.isEmpty(list)) {
                      _context153.next = 24;
                      break;
                    }

                    invalid = true;
                    _iterator93 = _createForOfIteratorHelper(list);
                    _context153.prev = 3;

                    _iterator93.s();

                  case 5:
                    if ((_step93 = _iterator93.n()).done) {
                      _context153.next = 12;
                      break;
                    }

                    li = _step93.value;

                    if (!(li == str)) {
                      _context153.next = 10;
                      break;
                    }

                    invalid = false;
                    return _context153.abrupt("break", 12);

                  case 10:
                    _context153.next = 5;
                    break;

                  case 12:
                    _context153.next = 17;
                    break;

                  case 14:
                    _context153.prev = 14;
                    _context153.t0 = _context153["catch"](3);

                    _iterator93.e(_context153.t0);

                  case 17:
                    _context153.prev = 17;

                    _iterator93.f();

                    return _context153.finish(17);

                  case 20:
                    if (!invalid) {
                      _context153.next = 24;
                      break;
                    }

                    _context153.next = 23;
                    return Ti.Alert(invalidMsg, {
                      type: "warn",
                      icon: "zmdi-alert-triangle",
                      vars: vars
                    });

                  case 23:
                    return _context153.abrupt("return", false);

                  case 24:
                    return _context153.abrupt("return", true);

                  case 25:
                  case "end":
                    return _context153.stop();
                }
              }
            }, _callee152, null, [[3, 14, 17, 20]]);
          }))();
        },
        //--------------------------------------
        onOpen: function onOpen() {
          var _this278 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee153() {
            var link;
            return regeneratorRuntime.wrap(function _callee153$(_context154) {
              while (1) {
                switch (_context154.prev = _context154.next) {
                  case 0:
                    if (!_this278.oFile) {
                      _context154.next = 4;
                      break;
                    }

                    link = Wn.Util.getAppLink(_this278.oFile); //console.log("it will open ", link)

                    _context154.next = 4;
                    return Ti.Be.Open(link.url, {
                      params: link.params
                    });

                  case 4:
                  case "end":
                    return _context154.stop();
                }
              }
            }, _callee153);
          }))();
        },
        //--------------------------------------
        onRemove: function onRemove() {
          var _this279 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee154() {
            return regeneratorRuntime.wrap(function _callee154$(_context155) {
              while (1) {
                switch (_context155.prev = _context155.next) {
                  case 0:
                    if (!_this279.oFile) {
                      _context155.next = 3;
                      break;
                    }

                    _context155.next = 3;
                    return Wn.Sys.exec2("rm id:".concat(_this279.oFile.id));

                  case 3:
                    // Notify the change
                    _this279.$notify("change", null);

                  case 4:
                  case "end":
                    return _context155.stop();
                }
              }
            }, _callee154);
          }))();
        },
        //--------------------------------------
        onUpload: function onUpload(file) {
          var _this280 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee155() {
            var type, taPath, _yield$Wn$Io$uploadFi3, ok, msg, data, cmd, cmdText, val;

            return regeneratorRuntime.wrap(function _callee155$(_context156) {
              while (1) {
                switch (_context156.prev = _context156.next) {
                  case 0:
                    //console.log("it will upload ", file)
                    //................................
                    // Check for support Types
                    type = Ti.Util.getSuffixName(file.name);
                    _context156.next = 3;
                    return _this280.assertListHas(_this280.AcceptTypes, type, 'i18n:wn-invalid-types', {
                      current: type,
                      supports: _this280.AcceptTypes.join(", ")
                    });

                  case 3:
                    if (_context156.sent) {
                      _context156.next = 5;
                      break;
                    }

                    return _context156.abrupt("return");

                  case 5:
                    _context156.next = 7;
                    return _this280.assertListHas(_this280.AcceptMimes, file.type, 'i18n:wn-invalid-mimes', {
                      current: file.type,
                      supports: _this280.AcceptMimes.join(", ")
                    });

                  case 7:
                    if (_context156.sent) {
                      _context156.next = 9;
                      break;
                    }

                    return _context156.abrupt("return");

                  case 9:
                    //................................
                    // Eval the target
                    taPath = Ti.S.renderBy(_this280.target, {
                      type: type,
                      name: file.name,
                      majorName: Ti.Util.getMajorName(file.name)
                    }); //................................
                    // Upload file to destination

                    _this280.uploadFile = file;
                    _this280.progress = 0;
                    _context156.next = 14;
                    return Wn.Io.uploadFile(file, {
                      target: taPath,
                      mode: "r",
                      progress: function progress(pe) {
                        _this280.progress = pe.loaded / pe.total;
                      }
                    });

                  case 14:
                    _yield$Wn$Io$uploadFi3 = _context156.sent;
                    ok = _yield$Wn$Io$uploadFi3.ok;
                    msg = _yield$Wn$Io$uploadFi3.msg;
                    data = _yield$Wn$Io$uploadFi3.data;
                    //................................
                    // Reset upload
                    _this280.uploadFile = null;
                    _this280.progress = -1; //................................
                    // Fail to upload

                    if (ok) {
                      _context156.next = 24;
                      break;
                    }

                    _context156.next = 23;
                    return Ti.Alert("i18n:".concat(msg), {
                      type: "warn",
                      icon: "zmdi-alert-triangle"
                    });

                  case 23:
                    return _context156.abrupt("return");

                  case 24:
                    if (_.isEmpty(_this280.ImageFilter)) {
                      _context156.next = 31;
                      break;
                    }

                    cmd = ["imagic", "id:".concat(data.id), "-filter \"".concat(_this280.ImageFilter.join(" "), "\"")];

                    if (_this280.quality > 0 && _this280.quality <= 1) {
                      cmd.push("-qa ".concat(_this280.quality));
                    }

                    cmd.push("-out inplace");
                    cmdText = cmd.join(" ");
                    _context156.next = 31;
                    return Wn.Sys.exec2(cmdText);

                  case 31:
                    //................................
                    // done
                    _this280.src_ts = Date.now();
                    _this280.oFile = data; //................................
                    // Transform value

                    val = Wn.Io.formatObjPath(data, _this280.valueType); //................................

                    _this280.$notify("change", val);

                  case 35:
                  case "end":
                    return _context156.stop();
                }
              }
            }, _callee155);
          }))();
        },
        //--------------------------------------
        reload: function reload() {
          var _this281 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee156() {
            return regeneratorRuntime.wrap(function _callee156$(_context157) {
              while (1) {
                switch (_context157.prev = _context157.next) {
                  case 0:
                    if (!_.isString(_this281.value)) {
                      _context157.next = 6;
                      break;
                    }

                    _context157.next = 3;
                    return Wn.Io.loadMetaBy(_this281.value);

                  case 3:
                    _this281.oFile = _context157.sent;
                    _context157.next = 7;
                    break;

                  case 6:
                    // Object
                    if (_.get(_this281.value, "race") == "FILE") {
                      _this281.oFile = _.cloneDeep(_this281.value);
                    } // Reset
                    else {
                        _this281.oFile = null;
                      }

                  case 7:
                  case "end":
                    return _context157.stop();
                }
              }
            }, _callee156);
          }))();
        } //--------------------------------------

      },
      //////////////////////////////////////////
      watch: {
        "value": function value() {
          this.reload();
        }
      },
      //////////////////////////////////////////
      mounted: function () {
        var _mounted16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee157() {
          return regeneratorRuntime.wrap(function _callee157$(_context158) {
            while (1) {
              switch (_context158.prev = _context158.next) {
                case 0:
                  _context158.next = 2;
                  return this.reload();

                case 2:
                case "end":
                  return _context158.stop();
              }
            }
          }, _callee157, this);
        }));

        function mounted() {
          return _mounted16.apply(this, arguments);
        }

        return mounted;
      }() //////////////////////////////////////////

    };
    Ti.Preload("ti/com/wn/upload/file/wn-upload-file.mjs", _M);
  })(); //============================================================
  // JOIN: wn/upload/file/_com.json
  //============================================================


  Ti.Preload("ti/com/wn/upload/file/_com.json", {
    "name": "wn-upload-file",
    "globally": true,
    "template": "./wn-upload-file.html",
    "mixins": ["./wn-upload-file.mjs"],
    "components": ["@com:ti/upload/file"]
  }); //============================================================
  // JOIN: hmaker/website/mod/site-config/site-config-actions.mjs
  //============================================================

  (function () {
    var _M = {
      //----------------------------------------
      reload: function reload(_ref137, meta) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee158() {
          var state, commit;
          return regeneratorRuntime.wrap(function _callee158$(_context159) {
            while (1) {
              switch (_context159.prev = _context159.next) {
                case 0:
                  state = _ref137.state, commit = _ref137.commit;

                  if (!(state.status.reloading || state.status.saving)) {
                    _context159.next = 3;
                    break;
                  }

                  return _context159.abrupt("return");

                case 3:
                case "end":
                  return _context159.stop();
              }
            }
          }, _callee158);
        }))();
      } //----------------------------------------

    };
    Ti.Preload("ti/mod/hmaker/website/mod/site-config/site-config-actions.mjs", _M);
  })(); //============================================================
  // JOIN: hmaker/website/mod/site-config/site-config.json
  //============================================================


  Ti.Preload("ti/mod/hmaker/website/mod/site-config/site-config.json", {
    "meta": null,
    "desktop": {
      "mapping": {
        "paths": {
          "site-state.json": "desktopSiteStateView"
        },
        "types": {},
        "mimes": {
          "application/json": "desktopJsonView",
          "text/*, application/*": "desktopTextView"
        },
        "races": {
          "DIR": "desktopAdaptList",
          "FILE": "desktopObjPreview"
        }
      }
    },
    "tablet": "desktop",
    "phone": "desktop",
    "views": {
      "desktopSiteStateView": {
        "comType": "hmaker-site-state",
        "comConf": {
          "home": "=home",
          "content": "=currentContent"
        },
        "actions": [{
          "key": "saving",
          "type": "action",
          "icon": "zmdi-floppy",
          "text": "i18n:save-change",
          "altDisplay": {
            "icon": "fas-spinner fa-pulse",
            "text": "i18n:saving"
          },
          "enableBy": "changed",
          "action": "dispatch:main/saveCurrent",
          "shortcut": "CTRL+S"
        }, {
          "key": "reloading",
          "type": "action",
          "icon": "zmdi-rotate-right",
          "text": "i18n:revoke-change",
          "altDisplay": {
            "icon": "zmdi-refresh zmdi-hc-spin",
            "text": "i18n:loading"
          },
          "action": "dispatch:main/reloadCurrent"
        }, {
          "type": "Group",
          "icon": "zmdi-more-vert",
          "items": [{
            "type": "action",
            "icon": "zmdi-info-outline",
            "text": "i18n:properties",
            "action": "main:editCurrentObjMeta"
          }]
        }]
      },
      "desktopTextView": {
        "comType": "ti-text-raw",
        "comConf": {
          "showTitle": false,
          "content": "=currentContent",
          "contentIsChanged": "=status.changed"
        },
        "actions": [{
          "key": "saving",
          "type": "action",
          "icon": "zmdi-floppy",
          "text": "i18n:save-change",
          "altDisplay": {
            "icon": "fas-spinner fa-pulse",
            "text": "i18n:saving"
          },
          "enableBy": "changed",
          "action": "dispatch:main/saveCurrent",
          "shortcut": "CTRL+S"
        }, {
          "key": "reloading",
          "type": "action",
          "icon": "zmdi-rotate-right",
          "text": "i18n:revoke-change",
          "altDisplay": {
            "icon": "zmdi-refresh zmdi-hc-spin",
            "text": "i18n:loading"
          },
          "action": "dispatch:main/reloadCurrent"
        }, {
          "type": "Group",
          "icon": "zmdi-more-vert",
          "items": [{
            "type": "action",
            "icon": "zmdi-info-outline",
            "text": "i18n:properties",
            "action": "main:editCurrentObjMeta"
          }]
        }]
      },
      "desktopJsonView": {
        "comType": "ti-text-json",
        "comConf": {
          "data": "=currentData"
        },
        "actions": [{
          "key": "saving",
          "type": "action",
          "icon": "zmdi-floppy",
          "text": "i18n:save-change",
          "altDisplay": {
            "icon": "fas-spinner fa-pulse",
            "text": "i18n:saving"
          },
          "enableBy": "changed",
          "action": "dispatch:main/saveCurrent",
          "shortcut": "CTRL+S"
        }, {
          "key": "reloading",
          "type": "action",
          "icon": "zmdi-rotate-right",
          "text": "i18n:revoke-change",
          "altDisplay": {
            "icon": "zmdi-refresh zmdi-hc-spin",
            "text": "i18n:loading"
          },
          "action": "dispatch:main/reloadCurrent"
        }, {
          "type": "Group",
          "icon": "zmdi-more-vert",
          "items": [{
            "type": "action",
            "icon": "zmdi-info-outline",
            "text": "i18n:properties",
            "action": "main:editCurrentObjMeta"
          }]
        }]
      },
      "desktopAdaptList": {
        "comType": "wn-adaptlist",
        "comConf": {
          "list": "=currentData.list"
        }
      },
      "desktopObjPreview": {
        "comType": "wn-obj-preview",
        "comConf": {
          "meta": "=currentMeta"
        }
      }
    },
    "status": {
      "reloading": false
    }
  }); //============================================================
  // JOIN: hmaker/website/mod/site-config/site-config.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////
      mutations: {
        //----------------------------------------
        setMeta: function setMeta(state, meta) {
          state.meta = meta;
        },
        //----------------------------------------
        setStatus: function setStatus(state, status) {
          state.status = _.assign({}, state.status, status);
        } //----------------------------------------

      } ////////////////////////////////////////////

    };
    Ti.Preload("ti/mod/hmaker/website/mod/site-config/site-config.mjs", _M);
  })(); //============================================================
  // JOIN: hmaker/website/mod/site-config/_mod.json
  //============================================================


  Ti.Preload("ti/mod/hmaker/website/mod/site-config/_mod.json", {
    "name": "hmaker-site-config",
    "namespaced": true,
    "state": "./site-config.json",
    "actions": "./site-config-actions.mjs",
    "mixins": "./site-config.mjs"
  }); //============================================================
  // JOIN: hmaker/website/mod/site-tree/site-tree-actions.mjs
  //============================================================

  (function () {
    var _M = {
      //----------------------------------------

      /***
       * Append the `meta` to current tree. 
       * It will auto load all the ancestor node of the meta in tree
       */
      appendNode: function appendNode(_ref138, meta) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee159() {
          var state, commit, dispatch;
          return regeneratorRuntime.wrap(function _callee159$(_context160) {
            while (1) {
              switch (_context160.prev = _context160.next) {
                case 0:
                  state = _ref138.state, commit = _ref138.commit, dispatch = _ref138.dispatch;
                  console.log("TODO appendNode", meta);

                case 2:
                case "end":
                  return _context160.stop();
              }
            }
          }, _callee159);
        }))();
      },
      //----------------------------------------

      /***
       * Reload children of specific node. 
       * If current is leaf, it will skip the children reloading.
       * 
       * @param id{String} - the node id. higher priority then `path`
       * @param path{String|Array} - the node path
       * @param self{Boolean} - reload self or not.
       * @param force{Boolean} - reload again event the children had been loaded.
       * @param depth{Number} - reload the multi hierarchies if great than `1`
       */
      reloadNode: function reloadNode(_ref139) {
        var _arguments24 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee161() {
          var state, commit, dispatch, _ref140, id, path, _ref140$self, self, _ref140$force, force, _ref140$depth, depth, treeRoot, loaded, node, nodeMeta, __load_subs;

          return regeneratorRuntime.wrap(function _callee161$(_context162) {
            while (1) {
              switch (_context162.prev = _context162.next) {
                case 0:
                  state = _ref139.state, commit = _ref139.commit, dispatch = _ref139.dispatch;
                  _ref140 = _arguments24.length > 1 && _arguments24[1] !== undefined ? _arguments24[1] : {}, id = _ref140.id, path = _ref140.path, _ref140$self = _ref140.self, self = _ref140$self === void 0 ? false : _ref140$self, _ref140$force = _ref140.force, force = _ref140$force === void 0 ? false : _ref140$force, _ref140$depth = _ref140.depth, depth = _ref140$depth === void 0 ? 1 : _ref140$depth;
                  //......................................
                  // Clone the tree
                  treeRoot = _.cloneDeep(state.root);
                  loaded = false; //......................................
                  // Find the node

                  if (!_.isUndefined(id)) {
                    node = Ti.Trees.getNodeById(treeRoot, id);
                  } // By Path
                  else {
                      node = Ti.Trees.getNodeByPath(treeRoot, path);
                    } //......................................
                  // Guard


                  if (node) {
                    _context162.next = 7;
                    break;
                  }

                  return _context162.abrupt("return");

                case 7:
                  if (!self) {
                    _context162.next = 13;
                    break;
                  }

                  _context162.next = 10;
                  return Wn.Io.loadMetaById(node.id);

                case 10:
                  nodeMeta = _context162.sent;
                  node.rawData = nodeMeta;
                  loaded = true;

                case 13:
                  //......................................
                  // Define the loading
                  __load_subs = /*#__PURE__*/function () {
                    var _ref141 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee160(node, depth) {
                      var children, _yield$Wn$Io$loadChil, list, _iterator94, _step94, li, sub;

                      return regeneratorRuntime.wrap(function _callee160$(_context161) {
                        while (1) {
                          switch (_context161.prev = _context161.next) {
                            case 0:
                              if (!(depth > 0 && !node.leaf)) {
                                _context161.next = 29;
                                break;
                              }

                              depth--;

                              if (!(force || _.isEmpty(node.children))) {
                                _context161.next = 29;
                                break;
                              }

                              children = [];
                              _context161.next = 6;
                              return Wn.Io.loadChildren(node.rawData);

                            case 6:
                              _yield$Wn$Io$loadChil = _context161.sent;
                              list = _yield$Wn$Io$loadChil.list;
                              _iterator94 = _createForOfIteratorHelper(list);
                              _context161.prev = 9;

                              _iterator94.s();

                            case 11:
                              if ((_step94 = _iterator94.n()).done) {
                                _context161.next = 19;
                                break;
                              }

                              li = _step94.value;
                              sub = Wn.Util.wrapTreeNode(li);
                              _context161.next = 16;
                              return __load_subs(sub, depth);

                            case 16:
                              children.push(sub);

                            case 17:
                              _context161.next = 11;
                              break;

                            case 19:
                              _context161.next = 24;
                              break;

                            case 21:
                              _context161.prev = 21;
                              _context161.t0 = _context161["catch"](9);

                              _iterator94.e(_context161.t0);

                            case 24:
                              _context161.prev = 24;

                              _iterator94.f();

                              return _context161.finish(24);

                            case 27:
                              node.children = children;
                              return _context161.abrupt("return", true);

                            case 29:
                              return _context161.abrupt("return", false);

                            case 30:
                            case "end":
                              return _context161.stop();
                          }
                        }
                      }, _callee160, null, [[9, 21, 24, 27]]);
                    }));

                    return function __load_subs(_x16, _x17) {
                      return _ref141.apply(this, arguments);
                    };
                  }(); //......................................
                  // Do load


                  _context162.t0 = loaded;
                  _context162.next = 17;
                  return __load_subs(node, depth);

                case 17:
                  loaded = _context162.t0 |= _context162.sent;

                  //......................................
                  // Update the whole tree
                  if (loaded) {
                    commit("setRoot", treeRoot);
                  }

                case 19:
                case "end":
                  return _context162.stop();
              }
            }
          }, _callee161);
        }))();
      },
      //----------------------------------------

      /***
       * Reload site root node, and reload the first leave
       */
      reloadRoot: function reloadRoot(_ref142, meta) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee162() {
          var state, commit, dispatch, root, keys, _iterator95, _step95, key, hie;

          return regeneratorRuntime.wrap(function _callee162$(_context163) {
            while (1) {
              switch (_context163.prev = _context163.next) {
                case 0:
                  state = _ref142.state, commit = _ref142.commit, dispatch = _ref142.dispatch;
                  root = Wn.Util.wrapTreeNode(meta); // Update Root Node

                  commit("setRoot", root); // Reload Root Node

                  _context163.next = 5;
                  return dispatch("reloadNode");

                case 5:
                  if (_.isEmpty(state.root.children)) {
                    _context163.next = 26;
                    break;
                  }

                  keys = _.keys(state.openedNodePaths).sort();
                  _iterator95 = _createForOfIteratorHelper(keys);
                  _context163.prev = 8;

                  _iterator95.s();

                case 10:
                  if ((_step95 = _iterator95.n()).done) {
                    _context163.next = 18;
                    break;
                  }

                  key = _step95.value;
                  hie = Ti.Trees.getByPath(state.root, key);

                  if (!(hie && !hie.node.leaf)) {
                    _context163.next = 16;
                    break;
                  }

                  _context163.next = 16;
                  return dispatch("reloadNode", {
                    path: hie.path
                  });

                case 16:
                  _context163.next = 10;
                  break;

                case 18:
                  _context163.next = 23;
                  break;

                case 20:
                  _context163.prev = 20;
                  _context163.t0 = _context163["catch"](8);

                  _iterator95.e(_context163.t0);

                case 23:
                  _context163.prev = 23;

                  _iterator95.f();

                  return _context163.finish(23);

                case 26:
                case "end":
                  return _context163.stop();
              }
            }
          }, _callee162, null, [[8, 20, 23, 26]]);
        }))();
      } //----------------------------------------

    };
    Ti.Preload("ti/mod/hmaker/website/mod/site-tree/site-tree-actions.mjs", _M);
  })(); //============================================================
  // JOIN: hmaker/website/mod/site-tree/site-tree.json
  //============================================================


  Ti.Preload("ti/mod/hmaker/website/mod/site-tree/site-tree.json", {
    "root": {},
    "currentId": null,
    "openedNodePaths": {}
  }); //============================================================
  // JOIN: hmaker/website/mod/site-tree/site-tree.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////
      mutations: {
        //----------------------------------------
        setRoot: function setRoot(state) {
          var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

          if (!_.isEqual(state.root, root)) {
            state.root = root;
          }
        },
        //----------------------------------------
        setCurrentId: function setCurrentId(state) {
          var currentId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
          state.currentId = currentId;
        },
        //----------------------------------------
        setOpenedNodePaths: function setOpenedNodePaths(state) {
          var openedNodePaths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          state.openedNodePaths = _.cloneDeep(openedNodePaths);
        } //----------------------------------------

      } ////////////////////////////////////////////

    };
    Ti.Preload("ti/mod/hmaker/website/mod/site-tree/site-tree.mjs", _M);
  })(); //============================================================
  // JOIN: hmaker/website/mod/site-tree/_mod.json
  //============================================================


  Ti.Preload("ti/mod/hmaker/website/mod/site-tree/_mod.json", {
    "name": "hmaker-site-tree",
    "namespaced": true,
    "state": "./site-tree.json",
    "actions": "./site-tree-actions.mjs",
    "mixins": "./site-tree.mjs"
  }); //============================================================
  // JOIN: hmaker/website/website-actions.mjs
  //============================================================

  (function () {
    var _M = {
      //--------------------------------------------
      setTreeOpenedNodePaths: function setTreeOpenedNodePaths(_ref143) {
        var getters = _ref143.getters,
            commit = _ref143.commit;
        var openeds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (getters.TREE_OPEND_KEY) {
          openeds = _.pickBy(openeds, function (val) {
            return val;
          });
          commit("tree/setOpenedNodePaths", openeds);
          Ti.Storage.session.setObject(getters.TREE_OPEND_KEY, openeds);
        }
      },
      //--------------------------------------------
      setTreeSelected: function setTreeSelected(_ref144) {
        var _arguments25 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee163() {
          var getters, commit, dispatch, currentId, meta;
          return regeneratorRuntime.wrap(function _callee163$(_context164) {
            while (1) {
              switch (_context164.prev = _context164.next) {
                case 0:
                  getters = _ref144.getters, commit = _ref144.commit, dispatch = _ref144.dispatch;
                  currentId = _arguments25.length > 1 && _arguments25[1] !== undefined ? _arguments25[1] : null;

                  if (!getters.TREE_SELECTED_KEY) {
                    _context164.next = 15;
                    break;
                  }

                  commit("tree/setCurrentId", currentId);
                  Ti.Storage.session.set(getters.TREE_SELECTED_KEY, currentId);
                  commit("setStatus", {
                    reloading: true
                  }); // Load current

                  meta = null;

                  if (!currentId) {
                    _context164.next = 11;
                    break;
                  }

                  _context164.next = 10;
                  return Wn.Io.loadMetaById(currentId);

                case 10:
                  meta = _context164.sent;

                case 11:
                  _context164.next = 13;
                  return dispatch("current/reload", meta);

                case 13:
                  commit("setStatus", {
                    reloading: false
                  });
                  commit("syncStatusChanged");

                case 15:
                case "end":
                  return _context164.stop();
              }
            }
          }, _callee163);
        }))();
      },
      //--------------------------------------------
      onCurrentChanged: function onCurrentChanged(_ref145, payload) {
        var commit = _ref145.commit,
            dispatch = _ref145.dispatch;
        dispatch("current/onChanged", payload);
        commit("syncStatusChanged");
      },
      //--------------------------------------------
      saveCurrent: function saveCurrent(_ref146) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee164() {
          var state, commit, dispatch;
          return regeneratorRuntime.wrap(function _callee164$(_context165) {
            while (1) {
              switch (_context165.prev = _context165.next) {
                case 0:
                  state = _ref146.state, commit = _ref146.commit, dispatch = _ref146.dispatch;

                  if (!state.current.meta) {
                    _context165.next = 7;
                    break;
                  }

                  commit("setStatus", {
                    saving: true
                  });
                  _context165.next = 5;
                  return dispatch("current/save");

                case 5:
                  commit("setStatus", {
                    saving: false
                  });
                  commit("syncStatusChanged");

                case 7:
                case "end":
                  return _context165.stop();
              }
            }
          }, _callee164);
        }))();
      },
      //--------------------------------------------
      reloadCurrent: function reloadCurrent(_ref147, meta) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee165() {
          var commit, dispatch;
          return regeneratorRuntime.wrap(function _callee165$(_context166) {
            while (1) {
              switch (_context166.prev = _context166.next) {
                case 0:
                  commit = _ref147.commit, dispatch = _ref147.dispatch;
                  commit("setStatus", {
                    reloading: true
                  });
                  _context166.next = 4;
                  return dispatch("current/reload", meta);

                case 4:
                  commit("setStatus", {
                    reloading: false
                  });
                  commit("syncStatusChanged");

                case 6:
                case "end":
                  return _context166.stop();
              }
            }
          }, _callee165);
        }))();
      },
      //--------------------------------------------
      reloadConfig: function reloadConfig(_ref148) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee166() {
          var state, dispatch;
          return regeneratorRuntime.wrap(function _callee166$(_context167) {
            while (1) {
              switch (_context167.prev = _context167.next) {
                case 0:
                  state = _ref148.state, dispatch = _ref148.dispatch;
                  _context167.next = 3;
                  return dispatch("config/reload");

                case 3:
                case "end":
                  return _context167.stop();
              }
            }
          }, _callee166);
        }))();
      },
      //--------------------------------------------
      reloadTree: function reloadTree(_ref149) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee167() {
          var getters, state, commit, dispatch, openeds, currentId;
          return regeneratorRuntime.wrap(function _callee167$(_context168) {
            while (1) {
              switch (_context168.prev = _context168.next) {
                case 0:
                  getters = _ref149.getters, state = _ref149.state, commit = _ref149.commit, dispatch = _ref149.dispatch;

                  // Restore openeds
                  if (getters.TREE_OPEND_KEY) {
                    openeds = Ti.Storage.session.getObject(getters.TREE_OPEND_KEY);
                    commit("tree/setOpenedNodePaths", openeds);
                  } // Reload the tree root


                  _context168.next = 4;
                  return dispatch("tree/reloadRoot", state.home);

                case 4:
                  if (!getters.TREE_SELECTED_KEY) {
                    _context168.next = 10;
                    break;
                  }

                  currentId = Ti.Storage.session.getString(getters.TREE_SELECTED_KEY);
                  commit("tree/setCurrentId", currentId);

                  if (!currentId) {
                    _context168.next = 10;
                    break;
                  }

                  _context168.next = 10;
                  return dispatch("setTreeSelected", currentId);

                case 10:
                case "end":
                  return _context168.stop();
              }
            }
          }, _callee167);
        }))();
      },
      //--------------------------------------------
      reloadTreeNode: function reloadTreeNode(_ref150, payload) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee168() {
          var commit, dispatch;
          return regeneratorRuntime.wrap(function _callee168$(_context169) {
            while (1) {
              switch (_context169.prev = _context169.next) {
                case 0:
                  commit = _ref150.commit, dispatch = _ref150.dispatch;
                  commit("setStatus", {
                    reloading: true
                  });
                  _context169.next = 4;
                  return dispatch("tree/reloadNode", payload);

                case 4:
                  commit("setStatus", {
                    reloading: false
                  });

                case 5:
                case "end":
                  return _context169.stop();
              }
            }
          }, _callee168);
        }))();
      },
      //--------------------------------------------
      reload: function reload(_ref151, home) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee169() {
          var state, commit, dispatch;
          return regeneratorRuntime.wrap(function _callee169$(_context170) {
            while (1) {
              switch (_context170.prev = _context170.next) {
                case 0:
                  state = _ref151.state, commit = _ref151.commit, dispatch = _ref151.dispatch;

                  //console.log("thing-manager.reload", state)
                  // Update New Meta
                  if (home) {
                    commit("setHome", home);
                  } // Get home back
                  else {
                      home = state.home;
                    } // Mark reloading


                  commit("setStatus", {
                    reloading: true
                  }); // Reloading

                  _context170.next = 5;
                  return dispatch("reloadConfig");

                case 5:
                  _context170.next = 7;
                  return dispatch("reloadTree");

                case 7:
                  // Auto Select the first item
                  // TODO
                  // All done
                  commit("setStatus", {
                    reloading: false
                  });

                case 8:
                case "end":
                  return _context170.stop();
              }
            }
          }, _callee169);
        }))();
      } //--------------------------------------------

    };
    Ti.Preload("ti/mod/hmaker/website/website-actions.mjs", _M);
  })(); //============================================================
  // JOIN: hmaker/website/website.json
  //============================================================


  Ti.Preload("ti/mod/hmaker/website/website.json", {
    "home": null,
    "status": {
      "reloading": false,
      "doing": false,
      "saving": false,
      "deleting": false,
      "changed": false,
      "publishing": false,
      "exposeHidden": false
    }
  }); //============================================================
  // JOIN: hmaker/website/website.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////
      getters: {
        TREE_OPEND_KEY: function TREE_OPEND_KEY(state) {
          if (state.home) {
            return "website_tree_openeds_".concat(state.home.id);
          }
        },
        TREE_SELECTED_KEY: function TREE_SELECTED_KEY(state) {
          if (state.home) {
            return "website_tree_selected_".concat(state.home.id);
          }
        }
      },
      ////////////////////////////////////////////////
      mutations: {
        //--------------------------------------------
        setHome: function setHome(state, home) {
          state.home = home;
        },
        //--------------------------------------------
        setStatus: function setStatus(state, status) {
          state.status = _.assign({}, state.status, status);
        },
        //--------------------------------------------
        setExposeHidden: function setExposeHidden(state, exposeHidden) {
          state.status.exposeHidden = exposeHidden;
        },
        //--------------------------------------------
        syncStatusChanged: function syncStatusChanged(state) {
          if (state.current) {
            //console.log("do sync")
            state.status.changed = state.current.status.changed;
          }
        } //--------------------------------------------

      } ////////////////////////////////////////////////

    };
    Ti.Preload("ti/mod/hmaker/website/website.mjs", _M);
  })(); //============================================================
  // JOIN: hmaker/website/_mod.json
  //============================================================


  Ti.Preload("ti/mod/hmaker/website/_mod.json", {
    "name": "hmaker-website",
    "namespaced": true,
    "state": "./website.json",
    "actions": "./website-actions.mjs",
    "mixins": "./website.mjs",
    "modules": {
      "tree": "./mod/site-tree",
      "config": "./mod/site-config",
      "current": "@mod:wn/obj-current"
    }
  }); //============================================================
  // JOIN: ti/viewport/ti-viewport.json
  //============================================================

  Ti.Preload("ti/mod/ti/viewport/ti-viewport.json", {
    "mode": "desktop",
    "activedIds": []
  }); //============================================================
  // JOIN: ti/viewport/ti-viewport.mjs
  //============================================================

  (function () {
    var _M = {
      getters: {
        viewportMode: function viewportMode(state) {
          return state.mode;
        },
        viewportActivedComIds: function viewportActivedComIds(state) {
          return state.activedIds;
        },
        isViewportModeDesktop: function isViewportModeDesktop(state) {
          return "desktop" == state.mode;
        },
        isViewportModeTablet: function isViewportModeTablet(state) {
          return "tablet" == state.mode;
        },
        isViewportModePhone: function isViewportModePhone(state) {
          return "phone" == state.mode;
        },
        isViewportModeDesktopOrTablet: function isViewportModeDesktopOrTablet(state) {
          return "desktop" == state.mode || "tablet" == state.mode;
        },
        isViewportModePhoneOrTablet: function isViewportModePhoneOrTablet(state) {
          return "phone" == state.mode || "tablet" == state.mode;
        }
      },
      mutations: {
        setMode: function setMode(state) {
          var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "desktop";
          state.mode = mode;
        },
        setActivedIds: function setActivedIds(state) {
          var activedIds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
          //console.log("viewport setActivedIds", activedIds)
          state.activedIds = _.cloneDeep(activedIds);
        }
      }
    };
    Ti.Preload("ti/mod/ti/viewport/ti-viewport.mjs", _M);
  })(); //============================================================
  // JOIN: ti/viewport/_mod.json
  //============================================================


  Ti.Preload("ti/mod/ti/viewport/_mod.json", {
    "state": "./ti-viewport.json",
    "mixins": "./ti-viewport.mjs"
  }); //============================================================
  // JOIN: wn/obj-current/m-obj-current-actions.mjs
  //============================================================

  (function () {
    var _M = {
      //----------------------------------------
      // Combin Mutations
      //----------------------------------------
      onChanged: function onChanged(_ref152, payload) {
        var dispatch = _ref152.dispatch;
        dispatch("changeContent", payload);
      },
      //----------------------------------------
      changeContent: function changeContent(_ref153, payload) {
        var commit = _ref153.commit;
        commit("setContent", payload);
        commit("syncStatusChanged");
      },
      //----------------------------------------
      changeMeta: function changeMeta(_ref154) {
        var commit = _ref154.commit;

        var _ref155 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            name = _ref155.name,
            value = _ref155.value;

        if (name) {
          var meta = _.set({}, name, value);

          commit("mergeMeta", meta);
          commit("syncStatusChanged");
        }
      },
      //----------------------------------------
      updateContent: function updateContent(_ref156, content) {
        var state = _ref156.state,
            commit = _ref156.commit;
        commit("setContent", content);

        if (state.meta && "FILE" == state.meta.race) {
          commit("setSavedContent", content);
        }

        commit("syncStatusChanged");
      },
      //--------------------------------------------
      // User Interactivity
      //--------------------------------------------
      openMetaEditor: function openMetaEditor(_ref157) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee170() {
          var state, dispatch, reo;
          return regeneratorRuntime.wrap(function _callee170$(_context171) {
            while (1) {
              switch (_context171.prev = _context171.next) {
                case 0:
                  state = _ref157.state, dispatch = _ref157.dispatch;

                  if (state.meta) {
                    _context171.next = 5;
                    break;
                  }

                  _context171.next = 4;
                  return Ti.Toast.Open("i18n:empty-data", "warn");

                case 4:
                  return _context171.abrupt("return", _context171.sent);

                case 5:
                  _context171.next = 7;
                  return Wn.EditObjMeta(state.meta, {
                    fields: "auto"
                  });

                case 7:
                  reo = _context171.sent;

                  if (!_.isUndefined(reo)) {
                    _context171.next = 10;
                    break;
                  }

                  return _context171.abrupt("return");

                case 10:
                  if (!reo.saved) {
                    _context171.next = 13;
                    break;
                  }

                  _context171.next = 13;
                  return dispatch("reload", reo.data);

                case 13:
                case "end":
                  return _context171.stop();
              }
            }
          }, _callee170);
        }))();
      },
      //--------------------------------------------
      openContentEditor: function openContentEditor(_ref158) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee171() {
          var state, dispatch, newContent;
          return regeneratorRuntime.wrap(function _callee171$(_context172) {
            while (1) {
              switch (_context172.prev = _context172.next) {
                case 0:
                  state = _ref158.state, dispatch = _ref158.dispatch;

                  if (state.meta) {
                    _context172.next = 5;
                    break;
                  }

                  _context172.next = 4;
                  return Ti.Toast.Open("i18n:empty-data", "warn");

                case 4:
                  return _context172.abrupt("return", _context172.sent);

                case 5:
                  _context172.next = 7;
                  return Wn.EditObjContent(state.meta, {
                    content: state.content
                  });

                case 7:
                  newContent = _context172.sent;

                  if (!_.isUndefined(newContent)) {
                    _context172.next = 10;
                    break;
                  }

                  return _context172.abrupt("return");

                case 10:
                  _context172.next = 12;
                  return dispatch("changeContent", newContent);

                case 12:
                case "end":
                  return _context172.stop();
              }
            }
          }, _callee171);
        }))();
      },
      //--------------------------------------------
      // Update to remote
      //----------------------------------------
      updateMeta: function updateMeta(_ref159) {
        var _arguments26 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee172() {
          var commit, dispatch, _ref160, name, value, data;

          return regeneratorRuntime.wrap(function _callee172$(_context173) {
            while (1) {
              switch (_context173.prev = _context173.next) {
                case 0:
                  commit = _ref159.commit, dispatch = _ref159.dispatch;
                  _ref160 = _arguments26.length > 1 && _arguments26[1] !== undefined ? _arguments26[1] : {}, name = _ref160.name, value = _ref160.value;
                  //console.log("I am update", name, value)
                  data = Ti.Types.toObjByPair({
                    name: name,
                    value: value
                  });
                  _context173.next = 5;
                  return dispatch("updateMetas", data);

                case 5:
                case "end":
                  return _context173.stop();
              }
            }
          }, _callee172);
        }))();
      },
      //----------------------------------------
      updateMetas: function updateMetas(_ref161) {
        var _arguments27 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee173() {
          var state, commit, data, json, th_set, th_id, cmdText, reo, isError;
          return regeneratorRuntime.wrap(function _callee173$(_context174) {
            while (1) {
              switch (_context174.prev = _context174.next) {
                case 0:
                  state = _ref161.state, commit = _ref161.commit;
                  data = _arguments27.length > 1 && _arguments27[1] !== undefined ? _arguments27[1] : {};

                  if (!_.isMatchWith(state.meta, data, _.isEqual)) {
                    _context174.next = 4;
                    break;
                  }

                  return _context174.abrupt("return");

                case 4:
                  // Mark field status
                  _.forEach(data, function (val, name) {
                    commit("setFieldStatus", {
                      name: name,
                      type: "spinning",
                      text: "i18n:saving"
                    });
                  }); // Do the update


                  json = JSON.stringify(data);
                  th_set = state.meta.th_set;
                  th_id = state.meta.id;
                  cmdText = "thing ".concat(th_set, " update ").concat(th_id, " -fields -cqn");
                  _context174.next = 11;
                  return Wn.Sys.exec2(cmdText, {
                    input: json,
                    as: "json"
                  });

                case 11:
                  reo = _context174.sent;
                  isError = reo instanceof Error;

                  if (!isError && !Ti.Util.isNil(reo)) {
                    commit("setMeta", reo);
                  }

                  _.forEach(data, function (val, name) {
                    if (isError) {
                      commit("setFieldStatus", {
                        name: name,
                        type: "warn",
                        text: reo.message || "i18n:fail"
                      });
                    } else {
                      commit("setFieldStatus", {
                        name: name,
                        type: "ok",
                        text: "i18n:ok"
                      });

                      _.delay(function () {
                        commit("clearFieldStatus", name);
                      }, 500);
                    }
                  });

                case 15:
                case "end":
                  return _context174.stop();
              }
            }
          }, _callee173);
        }))();
      },
      //--------------------------------------------
      // Reload & Save
      //--------------------------------------------
      // async setCurrent({state, commit,dispatch}, {
      //   meta=null, force=false
      // }={}) {
      //   //console.log("setCurrent", meta, loadContent)
      //   // Not need to reload
      //   if(state.meta && meta && state.meta.id == meta.id) {
      //     if((_.isString(state.content)) && !force) {
      //       return
      //     }
      //   }
      //   // do reload
      //   await dispatch("reload", meta)
      // },
      //----------------------------------------
      save: function save(_ref162) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee174() {
          var state, commit, meta, content, newMeta;
          return regeneratorRuntime.wrap(function _callee174$(_context175) {
            while (1) {
              switch (_context175.prev = _context175.next) {
                case 0:
                  state = _ref162.state, commit = _ref162.commit;

                  if (!(state.status.saving || !state.status.changed)) {
                    _context175.next = 3;
                    break;
                  }

                  return _context175.abrupt("return");

                case 3:
                  commit("setStatus", {
                    saving: true
                  });
                  meta = state.meta;
                  content = state.content;
                  _context175.next = 8;
                  return Wn.Io.saveContentAsText(meta, content);

                case 8:
                  newMeta = _context175.sent;
                  commit("setStatus", {
                    saving: false
                  });
                  commit("setMeta", newMeta);
                  commit("setSavedContent", content);
                  commit("syncStatusChanged"); // return the new meta

                  return _context175.abrupt("return", newMeta);

                case 14:
                case "end":
                  return _context175.stop();
              }
            }
          }, _callee174);
        }))();
      },
      //----------------------------------------
      reload: function reload(_ref163, meta) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee175() {
          var state, commit, dispatch, content;
          return regeneratorRuntime.wrap(function _callee175$(_context176) {
            while (1) {
              switch (_context176.prev = _context176.next) {
                case 0:
                  state = _ref163.state, commit = _ref163.commit, dispatch = _ref163.dispatch;

                  if (!(state.status.reloading || state.status.saving)) {
                    _context176.next = 3;
                    break;
                  }

                  return _context176.abrupt("return");

                case 3:
                  //......................................
                  // Use the default meta
                  if (_.isUndefined(meta)) {
                    meta = state.meta;
                  } //......................................


                  if (!_.isString(meta)) {
                    _context176.next = 8;
                    break;
                  }

                  _context176.next = 7;
                  return Wn.Io.loadMeta(meta);

                case 7:
                  meta = _context176.sent;

                case 8:
                  if (meta) {
                    _context176.next = 12;
                    break;
                  }

                  commit("setMeta", null);
                  commit("setContent", null);
                  return _context176.abrupt("return");

                case 12:
                  // Init content as null
                  content = null;
                  commit("setStatus", {
                    reloading: true
                  }); //......................................
                  // For file

                  if (!("FILE" == meta.race)) {
                    _context176.next = 20;
                    break;
                  }

                  _context176.next = 17;
                  return Wn.Io.loadContent(meta);

                case 17:
                  content = _context176.sent;
                  _context176.next = 24;
                  break;

                case 20:
                  if (!('DIR' == meta.race)) {
                    _context176.next = 24;
                    break;
                  }

                  _context176.next = 23;
                  return Wn.Io.loadChildren(meta);

                case 23:
                  content = _context176.sent;

                case 24:
                  //......................................
                  // Just update the meta
                  commit("setStatus", {
                    reloading: false
                  });
                  commit("setMeta", meta);
                  commit("clearFieldStatus"); // Update content and sync state

                  dispatch("updateContent", content);

                case 28:
                case "end":
                  return _context176.stop();
              }
            }
          }, _callee175);
        }))();
      } //----------------------------------------

    };
    Ti.Preload("ti/mod/wn/obj-current/m-obj-current-actions.mjs", _M);
  })(); //============================================================
  // JOIN: wn/obj-current/m-obj-current.json
  //============================================================


  Ti.Preload("ti/mod/wn/obj-current/m-obj-current.json", {
    "meta": null,
    "content": null,
    "data": null,
    "__saved_content": null,
    "status": {
      "changed": false,
      "saving": false,
      "reloading": false
    },
    "fieldStatus": {}
  }); //============================================================
  // JOIN: wn/obj-current/m-obj-current.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////
      mutations: {
        //----------------------------------------
        setMeta: function setMeta(state, meta) {
          state.meta = meta;
        },
        //--------------------------------------------
        assignMeta: function assignMeta(state, meta) {
          state.meta = _.assign({}, state.meta, meta);
        },
        //--------------------------------------------
        mergeMeta: function mergeMeta(state, meta) {
          state.meta = _.merge({}, state.meta, meta);
        },
        //----------------------------------------
        setContent: function setContent(state, content) {
          var meta = state.meta; // Guard

          if (!meta || Ti.Util.isNil(content)) {
            state.content = null;
            state.data = null;
            state.__saved_content = null;
            state.status.changed = false;
            return;
          } //......................................
          // DIR


          if ("DIR" == meta.race) {
            state.content = null;
            state.__saved_content = null;
            state.data = content;
          } //......................................
          // File
          else if ("FILE" == meta.race) {
              //....................................
              // String content
              if (_.isString(content)) {
                state.content = content; // JSON

                if (Wn.Util.isMimeJson(meta.mime)) {
                  try {
                    state.data = JSON.parse(content);
                  } catch (E) {
                    state.data = null;
                  }
                } // Pure Text
                else if (Wn.Util.isMimeText(meta.mime)) {
                    state.data = null;
                  }
              } //....................................
              // Take content as plain object or Array
              else {
                  state.content = JSON.stringify(content, null, '  '); // JSON

                  if (Wn.Util.isMimeJson(meta.mime)) {
                    state.data = content;
                  } // Pure Text
                  else if (Wn.Util.isMimeText(meta.mime)) {
                      state.data = null;
                    }
                } //....................................

            }
        },
        //----------------------------------------
        setData: function setData(state, data) {
          state.data = data;
        },
        //----------------------------------------
        setSavedContent: function setSavedContent(state, content) {
          state.__saved_content = content;
        },
        //----------------------------------------
        setStatus: function setStatus(state, status) {
          state.status = _.assign({}, state.status, status);
        },
        //----------------------------------------
        syncStatusChanged: function syncStatusChanged(state) {
          if (Ti.Util.isNil(state.content) && Ti.Util.isNil(state.__saved_content)) {
            state.status.changed = false;
          } else {
            state.status.changed = !_.isEqual(state.content, state.__saved_content);
          }
        },
        //----------------------------------------
        setFieldStatus: function setFieldStatus(state) {
          var _ref164 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
              name = _ref164.name,
              type = _ref164.type,
              text = _ref164.text;

          if (name) {
            var ukey = _.concat(name).join("-");

            Vue.set(state.fieldStatus, ukey, {
              type: type,
              text: text
            });
          }
        },
        //----------------------------------------
        clearFieldStatus: function clearFieldStatus(state) {
          var names = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

          // Clean All
          if (_.isEmpty(names)) {
            state.fieldStatus = {};
          } // Clear one
          else {
              state.fieldStatus = _.omit(state.fieldStatus, names);
            }
        } //----------------------------------------

      } ////////////////////////////////////////////

    };
    Ti.Preload("ti/mod/wn/obj-current/m-obj-current.mjs", _M);
  })(); //============================================================
  // JOIN: wn/obj-current/_mod.json
  //============================================================


  Ti.Preload("ti/mod/wn/obj-current/_mod.json", {
    "name": "wn-obj-current",
    "namespaced": true,
    "state": "./m-obj-current.json",
    "actions": "./m-obj-current-actions.mjs",
    "mixins": "./m-obj-current.mjs"
  }); //============================================================
  // JOIN: wn/obj-meta/m-obj-meta-actions.mjs
  //============================================================

  (function () {
    var _M = {
      //--------------------------------------------
      updateMeta: function updateMeta(_ref165) {
        var _arguments28 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee176() {
          var state, commit, _ref166, name, value, data, json, oid, cmdText, newMeta;

          return regeneratorRuntime.wrap(function _callee176$(_context177) {
            while (1) {
              switch (_context177.prev = _context177.next) {
                case 0:
                  state = _ref165.state, commit = _ref165.commit;
                  _ref166 = _arguments28.length > 1 && _arguments28[1] !== undefined ? _arguments28[1] : {}, name = _ref166.name, value = _ref166.value;
                  //console.log("I am update", name, value)
                  data = Ti.Types.toObjByPair({
                    name: name,
                    value: value
                  }); // Check Necessary

                  if (!_.isMatchWith(state.meta, data, _.isEqual)) {
                    _context177.next = 5;
                    break;
                  }

                  return _context177.abrupt("return");

                case 5:
                  // Do the update
                  commit("setStatus", {
                    saving: true
                  });
                  commit("setFieldStatus", {
                    name: name,
                    status: "spinning"
                  });
                  json = JSON.stringify(data);
                  oid = state.meta.id;
                  cmdText = "obj 'id:".concat(oid, "' -ocqn -u");
                  _context177.next = 12;
                  return Wn.Sys.exec2(cmdText, {
                    input: json,
                    as: "json"
                  });

                case 12:
                  newMeta = _context177.sent;
                  commit("setMeta", newMeta);
                  commit("clearFieldStatus", name);
                  commit("setStatus", {
                    saving: false
                  });
                  return _context177.abrupt("return", newMeta);

                case 17:
                case "end":
                  return _context177.stop();
              }
            }
          }, _callee176);
        }))();
      },
      //--------------------------------------------

      /***
       * Get obj by ID
       */
      loadMetaById: function loadMetaById(_ref167, id) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee177() {
          var dispatch;
          return regeneratorRuntime.wrap(function _callee177$(_context178) {
            while (1) {
              switch (_context178.prev = _context178.next) {
                case 0:
                  dispatch = _ref167.dispatch;
                  dispatch("loadMeta", "id:".concat(id));

                case 2:
                case "end":
                  return _context178.stop();
              }
            }
          }, _callee177);
        }))();
      },
      //--------------------------------------------

      /***
       * Get obj meta by path string
       */
      loadMeta: function loadMeta(_ref168, str) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee178() {
          var state, commit, meta;
          return regeneratorRuntime.wrap(function _callee178$(_context179) {
            while (1) {
              switch (_context179.prev = _context179.next) {
                case 0:
                  state = _ref168.state, commit = _ref168.commit;

                  if (str) {
                    _context179.next = 5;
                    break;
                  }

                  commit("reset");
                  _context179.next = 11;
                  break;

                case 5:
                  commit("setStatus", {
                    reloading: true
                  });
                  _context179.next = 8;
                  return Wn.Io.loadMeta(str);

                case 8:
                  meta = _context179.sent;
                  commit("setMeta", meta);
                  commit("setStatus", {
                    reloading: false
                  });

                case 11:
                case "end":
                  return _context179.stop();
              }
            }
          }, _callee178);
        }))();
      },
      //--------------------------------------------

      /***
       * Get obj ancestors by meta
       */
      loadAncestors: function loadAncestors(_ref169) {
        var _arguments29 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee179() {
          var state, commit, meta, ancestors, parent;
          return regeneratorRuntime.wrap(function _callee179$(_context180) {
            while (1) {
              switch (_context180.prev = _context180.next) {
                case 0:
                  state = _ref169.state, commit = _ref169.commit;
                  meta = _arguments29.length > 1 && _arguments29[1] !== undefined ? _arguments29[1] : state.meta;
                  commit("setStatus", {
                    reloading: true
                  });
                  _context180.next = 5;
                  return Wn.Io.loadAncestors("id:" + meta.id);

                case 5:
                  ancestors = _context180.sent;
                  parent = _.last(ancestors);
                  commit("setMeta", meta);
                  commit("setParent", parent);
                  commit("setAncestors", ancestors);
                  commit("setStatus", {
                    reloading: false
                  });

                case 11:
                case "end":
                  return _context180.stop();
              }
            }
          }, _callee179);
        }))();
      },
      //--------------------------------------------

      /***
       * Load obj meta/ancestors/children/content
       * 
       * @param str{String|Object} : string as the path,
       *        object is the meta
       */
      reload: function reload(_ref170, str) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee180() {
          var state, dispatch;
          return regeneratorRuntime.wrap(function _callee180$(_context181) {
            while (1) {
              switch (_context181.prev = _context181.next) {
                case 0:
                  state = _ref170.state, dispatch = _ref170.dispatch;

                  if (!_.isString(str)) {
                    _context181.next = 8;
                    break;
                  }

                  _context181.next = 4;
                  return dispatch("loadMeta", str);

                case 4:
                  _context181.next = 6;
                  return dispatch("loadAncestors");

                case 6:
                  _context181.next = 11;
                  break;

                case 8:
                  if (!_.isPlainObject(str)) {
                    _context181.next = 11;
                    break;
                  }

                  _context181.next = 11;
                  return dispatch("loadAncestors", str);

                case 11:
                  return _context181.abrupt("return", state.meta);

                case 12:
                case "end":
                  return _context181.stop();
              }
            }
          }, _callee180);
        }))();
      } //--------------------------------------------

    };
    Ti.Preload("ti/mod/wn/obj-meta/m-obj-meta-actions.mjs", _M);
  })(); //============================================================
  // JOIN: wn/obj-meta/m-obj-meta.json
  //============================================================


  Ti.Preload("ti/mod/wn/obj-meta/m-obj-meta.json", {
    "ancestors": [],
    "parent": null,
    "meta": null,
    "status": {
      "changed": false,
      "saving": false,
      "reloading": false
    },
    "fieldStatus": {}
  }); //============================================================
  // JOIN: wn/obj-meta/m-obj-meta.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////
      getters: {
        //-------------------------------------------
        get: function get(state) {
          return state;
        },
        //-------------------------------------------
        getHome: function getHome(state) {
          var obj = state.meta;
          var ans = state.ancestors;

          if (!_.isEmpty(ans)) {
            // for /home/xiaobai
            if (1 == ans.length) {
              if ("home" == ans[0].nm) {
                return obj;
              }
            } // for /home/xiaobai/path/to/file


            if ("home" == ans[0].nm) {
              return ans[1];
            }
          } // for /root
          else if (obj && "root" == obj.nm) {
              return obj;
            } // Dont't known how to find the home


          return null;
        },
        //-------------------------------------------
        hasParent: function hasParent(state) {
          // console.log(state.ancestors)
          // console.log(state.parent)
          return state.parent ? true : false;
        },
        //-------------------------------------------
        parentIsHome: function parentIsHome(state) {
          if (!_.isEmpty(state.ancestors) && state.parent && state.meta) {
            if (/^\/home\//.test(state.meta.ph)) {
              return state.parent.pid == state.ancestors[0].id;
            }
          }

          return false;
        },
        //-------------------------------------------
        isHome: function isHome(state) {
          if (!_.isEmpty(state.ancestors) && state.meta) {
            if (/^\/home\//.test(state.meta.ph)) {
              return state.meta.pid == state.ancestors[0].id;
            }
          }

          return false;
        } //-------------------------------------------

      },
      ////////////////////////////////////////////////
      mutations: {
        //-------------------------------------------
        reset: function reset(state) {
          _.assign(state, {
            "ancestors": [],
            "parent": null,
            "meta": null,
            "status": {
              "changed": false,
              "saving": false,
              "reloading": false
            },
            "fieldStatus": {}
          });
        },
        //-------------------------------------------
        setAncestors: function setAncestors(state) {
          var ancestors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
          state.ancestors = _.concat(ancestors);
        },
        //-------------------------------------------
        setParent: function setParent(state, parent) {
          state.parent = parent;
        },
        //-------------------------------------------
        setMeta: function setMeta(state, meta) {
          state.meta = meta;
        },
        //------------------------------------------
        setFieldStatus: function setFieldStatus(state) {
          var _ref171 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
              name = _ref171.name,
              message = _ref171.message,
              status = _ref171.status;

          if (name) {
            var st = status ? {
              status: status,
              message: message
            } : null;

            var ukey = _.concat(name).join("-");

            Vue.set(state.fieldStatus, ukey, st);
          }
        },
        //------------------------------------------
        clearFieldStatus: function clearFieldStatus(state) {
          var names = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

          // Clean All
          if (_.isEmpty(names)) {
            state.fieldStatus = {};
          } // Clear one
          else {
              state.fieldStatus = _.omit(state.fieldStatus, names);
            }
        },
        //------------------------------------------
        setStatus: function setStatus(state, status) {
          state.status = _.assign({}, state.status, status);
        } //-------------------------------------------

      } ////////////////////////////////////////////////

    };
    Ti.Preload("ti/mod/wn/obj-meta/m-obj-meta.mjs", _M);
  })(); //============================================================
  // JOIN: wn/obj-meta/_mod.json
  //============================================================


  Ti.Preload("ti/mod/wn/obj-meta/_mod.json", {
    "state": "./m-obj-meta.json",
    "actions": "./m-obj-meta-actions.mjs",
    "mixins": "./m-obj-meta.mjs"
  }); //============================================================
  // JOIN: wn/session/m-session.json
  //============================================================

  Ti.Preload("ti/mod/wn/session/m-session.json", {
    "id": null,
    "grp": null,
    "du": -1,
    "expi": 0,
    "pwd": "~",
    "ticket": null,
    "uid": null,
    "unm": null,
    "me": null,
    "envs": {}
  }); //============================================================
  // JOIN: wn/session/m-session.mjs
  //============================================================

  (function () {
    ////////////////////////////////////////////////
    var _M = {
      getters: {
        get: function get(state) {
          return state;
        }
      },
      ////////////////////////////////////////////////
      mutations: {
        set: function set(state) {
          var session = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          state.id = session.id;
          state.grp = session.grp;
          state.du = session.du;
          state.expi = session.expi;
          state.pwd = session.pwd;
          state.ticket = session.ticket;
          state.uid = session.uid;
          state.unm = session.unm;
          state.me = session.me;
          state.envs = _.cloneDeep(session.envs);
        }
      },
      ////////////////////////////////////////////////
      actions: {
        //--------------------------------------------
        openResetPasswd: function openResetPasswd(_ref172) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee181() {
            var dispatch;
            return regeneratorRuntime.wrap(function _callee181$(_context182) {
              while (1) {
                switch (_context182.prev = _context182.next) {
                  case 0:
                    dispatch = _ref172.dispatch;
                    _context182.next = 3;
                    return Ti.App.Open({
                      icon: "fas-key",
                      title: "i18n:my-passwd",
                      position: "top",
                      width: 480,
                      height: 640,
                      textOk: null,
                      textCancel: null,
                      comType: "WebAuthPasswd",
                      comConf: {
                        allowModes: {
                          "passwd": true
                        }
                      },
                      events: {
                        "passwd:reset": function passwdReset(payload) {
                          console.log("passwd:reset", payload);
                          dispatch("resetPasswd", payload);
                        }
                      },
                      components: "@com:web/auth/passwd"
                    });

                  case 3:
                  case "end":
                    return _context182.stop();
                }
              }
            }, _callee181);
          }))();
        },
        //--------------------------------------------
        // pwd = {newpwd, oldpwd, done}
        resetPasswd: function resetPasswd(_ref173, pwd) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee182() {
            var cmdText, doneRe;
            return regeneratorRuntime.wrap(function _callee182$(_context183) {
              while (1) {
                switch (_context183.prev = _context183.next) {
                  case 0:
                    _objectDestructuringEmpty(_ref173);

                    if (pwd) {
                      _context183.next = 3;
                      break;
                    }

                    return _context183.abrupt("return");

                  case 3:
                    console.log(pwd); // Reset By old password

                    if (!("passwd" == pwd.mode)) {
                      _context183.next = 12;
                      break;
                    }

                    cmdText = "passwd '".concat(pwd.newpwd, "' -old '").concat(pwd.oldpwd, "'");
                    doneRe = {
                      ok: true
                    };
                    _context183.next = 9;
                    return Wn.Sys.exec(cmdText, {
                      errorBy: function errorBy(_ref174) {
                        var code = _ref174.code;
                        doneRe.ok = false;
                        doneRe.errCode = code;
                      }
                    });

                  case 9:
                    // Callback to show reset status
                    pwd.done(doneRe);
                    _context183.next = 13;
                    break;

                  case 12:
                    throw "Unsupport passwd-reset mode: " + pwd.mode;

                  case 13:
                  case "end":
                    return _context183.stop();
                }
              }
            }, _callee182);
          }))();
        },
        //--------------------------------------------
        reload: function reload() {
          // TODO 这里需要想想，如何刷新会话，得到新票据的问题
          _.delay(function () {
            console.log("hahah");
          }, 1000);
        } //--------------------------------------------

      } ////////////////////////////////////////////////

    }; ////////////////////////////////////////////////

    Ti.Preload("ti/mod/wn/session/m-session.mjs", _M);
  })(); //============================================================
  // JOIN: wn/session/_mod.json
  //============================================================


  Ti.Preload("ti/mod/wn/session/_mod.json", {
    "state": "./m-session.json",
    "mixins": ["./m-session.mjs"]
  }); //============================================================
  // JOIN: wn/thing/m-thing-actions.mjs
  //============================================================

  (function () {
    var _M = {
      //--------------------------------------------

      /***
       * Save current thing detail
       */
      saveCurrent: function saveCurrent(_ref175) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee183() {
          var commit, dispatch;
          return regeneratorRuntime.wrap(function _callee183$(_context184) {
            while (1) {
              switch (_context184.prev = _context184.next) {
                case 0:
                  commit = _ref175.commit, dispatch = _ref175.dispatch;
                  commit("setStatus", {
                    saving: true
                  });
                  _context184.next = 4;
                  return dispatch("current/save");

                case 4:
                  commit("setStatus", {
                    saving: false
                  });
                  commit("syncStatusChanged");

                case 6:
                case "end":
                  return _context184.stop();
              }
            }
          }, _callee183);
        }))();
      },
      //--------------------------------------------

      /***
       * Update current thing meta data to search/meta
       */
      updateCurrent: function updateCurrent(_ref176) {
        var _arguments30 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee184() {
          var state, commit, dispatch, getters, _ref177, name, value;

          return regeneratorRuntime.wrap(function _callee184$(_context185) {
            while (1) {
              switch (_context185.prev = _context185.next) {
                case 0:
                  state = _ref176.state, commit = _ref176.commit, dispatch = _ref176.dispatch, getters = _ref176.getters;
                  _ref177 = _arguments30.length > 1 && _arguments30[1] !== undefined ? _arguments30[1] : {}, name = _ref177.name, value = _ref177.value;

                  if (!getters.hasCurrent) {
                    _context185.next = 6;
                    break;
                  }

                  _context185.next = 5;
                  return dispatch("current/updateMeta", {
                    name: name,
                    value: value
                  });

                case 5:
                  commit("search/updateItem", state.current.meta);

                case 6:
                case "end":
                  return _context185.stop();
              }
            }
          }, _callee184);
        }))();
      },
      //--------------------------------------------
      updateCurrentMetas: function updateCurrentMetas(_ref178) {
        var _arguments31 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee185() {
          var state, commit, dispatch, getters, data;
          return regeneratorRuntime.wrap(function _callee185$(_context186) {
            while (1) {
              switch (_context186.prev = _context186.next) {
                case 0:
                  state = _ref178.state, commit = _ref178.commit, dispatch = _ref178.dispatch, getters = _ref178.getters;
                  data = _arguments31.length > 1 && _arguments31[1] !== undefined ? _arguments31[1] : {};

                  if (!getters.hasCurrent) {
                    _context186.next = 6;
                    break;
                  }

                  _context186.next = 5;
                  return dispatch("current/updateMetas", data);

                case 5:
                  commit("search/updateItem", state.current.meta);

                case 6:
                case "end":
                  return _context186.stop();
              }
            }
          }, _callee185);
        }))();
      },
      //--------------------------------------------
      batchUpdateMetas: function batchUpdateMetas(_ref179) {
        var _arguments32 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee186() {
          var state, commit, getters, updates, checkedItems, currentId, input, tsId, _iterator96, _step96, it, cmdText, newIt;

          return regeneratorRuntime.wrap(function _callee186$(_context187) {
            while (1) {
              switch (_context187.prev = _context187.next) {
                case 0:
                  state = _ref179.state, commit = _ref179.commit, getters = _ref179.getters;
                  updates = _arguments32.length > 1 && _arguments32[1] !== undefined ? _arguments32[1] : {};
                  checkedItems = getters["search/checkedItems"]; // Guard

                  if (!(_.isEmpty(checkedItems) || _.isEmpty(updates))) {
                    _context187.next = 5;
                    break;
                  }

                  return _context187.abrupt("return");

                case 5:
                  // Mark loading
                  commit("setStatus", {
                    reloading: true
                  }); // Gen commands

                  currentId = _.get(state.current, "meta.id");
                  input = JSON.stringify(updates);
                  tsId = state.meta.id;
                  _iterator96 = _createForOfIteratorHelper(checkedItems);
                  _context187.prev = 10;

                  _iterator96.s();

                case 12:
                  if ((_step96 = _iterator96.n()).done) {
                    _context187.next = 22;
                    break;
                  }

                  it = _step96.value;
                  cmdText = "thing ".concat(tsId, " update ").concat(it.id, " -fields -cqn");
                  _context187.next = 17;
                  return Wn.Sys.exec2(cmdText, {
                    as: "json",
                    input: input
                  });

                case 17:
                  newIt = _context187.sent;
                  commit("search/updateItem", newIt);

                  if (newIt.id == currentId) {
                    commit("current/setMeta", newIt);
                  }

                case 20:
                  _context187.next = 12;
                  break;

                case 22:
                  _context187.next = 27;
                  break;

                case 24:
                  _context187.prev = 24;
                  _context187.t0 = _context187["catch"](10);

                  _iterator96.e(_context187.t0);

                case 27:
                  _context187.prev = 27;

                  _iterator96.f();

                  return _context187.finish(27);

                case 30:
                  // Mark loading
                  commit("setStatus", {
                    reloading: false
                  });

                case 31:
                case "end":
                  return _context187.stop();
              }
            }
          }, _callee186, null, [[10, 24, 27, 30]]);
        }))();
      },
      //--------------------------------------------
      setCurrentMeta: function setCurrentMeta(_ref180, meta) {
        var state = _ref180.state,
            commit = _ref180.commit;
        //console.log(" -> setCurrentMeta", meta)
        commit("current/setMeta", meta);
        commit("syncStatusChanged");
        commit("search/updateItem", state.current.meta);
      },
      //--------------------------------------------
      setCurrentContent: function setCurrentContent(_ref181, content) {
        var state = _ref181.state,
            commit = _ref181.commit,
            dispatch = _ref181.dispatch;
        dispatch("current/onChanged", content);
        commit("syncStatusChanged");
        commit("search/updateItem", state.current.meta);
      },
      //--------------------------------------------

      /***
       * Files: sync the file count and update to search/meta
       */
      autoSyncCurrentFilesCount: function autoSyncCurrentFilesCount(_ref182) {
        var _arguments33 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee187() {
          var state, commit, dispatch, _ref183, _ref183$quiet, quiet, oTh, dirName, th_set, cmdText, oNew;

          return regeneratorRuntime.wrap(function _callee187$(_context188) {
            while (1) {
              switch (_context188.prev = _context188.next) {
                case 0:
                  state = _ref182.state, commit = _ref182.commit, dispatch = _ref182.dispatch;
                  _ref183 = _arguments33.length > 1 && _arguments33[1] !== undefined ? _arguments33[1] : {}, _ref183$quiet = _ref183.quiet, quiet = _ref183$quiet === void 0 ? true : _ref183$quiet;
                  oTh = state.current.meta;
                  dirName = state.currentDataDir; // Guard

                  if (dirName) {
                    _context188.next = 7;
                    break;
                  }

                  console.warn("thing file -ufc without 'dirName'");
                  return _context188.abrupt("return", Ti.Toast.Open("thing file -ufc without 'dirName'"));

                case 7:
                  if (!(oTh && oTh.id && dirName)) {
                    _context188.next = 19;
                    break;
                  }

                  commit("setStatus", {
                    reloading: true
                  }); // run command

                  th_set = oTh.th_set;
                  cmdText = "thing ".concat(th_set, " file ").concat(oTh.id, " -dir '").concat(dirName, "' -ufc -cqn");
                  _context188.next = 13;
                  return Wn.Sys.exec2(cmdText, {
                    as: "json"
                  });

                case 13:
                  oNew = _context188.sent;
                  // Set current meta
                  dispatch("setCurrentMeta", oNew);
                  commit("setStatus", {
                    reloading: false
                  });

                  if (quiet) {
                    _context188.next = 19;
                    break;
                  }

                  _context188.next = 19;
                  return Ti.Toast.Open('i18n:wn-th-recount-media-done', {
                    vars: {
                      n: oNew.th_media_nb || 0
                    }
                  });

                case 19:
                case "end":
                  return _context188.stop();
              }
            }
          }, _callee187);
        }))();
      },
      //--------------------------------------------

      /***
       * Toggle enter/outer RecycleBin
       */
      toggleInRecycleBin: function toggleInRecycleBin(_ref184) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee188() {
          var state, commit, dispatch, getters, inRecycleBin;
          return regeneratorRuntime.wrap(function _callee188$(_context189) {
            while (1) {
              switch (_context189.prev = _context189.next) {
                case 0:
                  state = _ref184.state, commit = _ref184.commit, dispatch = _ref184.dispatch, getters = _ref184.getters;
                  //console.log("thing-manager-toggleInRecycleBin")
                  // Update Search
                  inRecycleBin = !getters.isInRecycleBin;
                  commit("search/setInRecycleBin", inRecycleBin); // Update status

                  commit("setStatus", {
                    inRecycleBin: inRecycleBin,
                    reloading: true
                  }); // Reload List

                  _context189.next = 6;
                  return dispatch("search/reload");

                case 6:
                  commit("setStatus", {
                    reloading: false
                  });

                case 7:
                case "end":
                  return _context189.stop();
              }
            }
          }, _callee188);
        }))();
      },
      //--------------------------------------------

      /***
       * Create one new thing
       */
      create: function create(_ref185) {
        var _arguments34 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee189() {
          var state, commit, dispatch, obj, beCreate, unique, after, fixed, json, th_set, cmds, cmdText, newMeta;
          return regeneratorRuntime.wrap(function _callee189$(_context190) {
            while (1) {
              switch (_context190.prev = _context190.next) {
                case 0:
                  state = _ref185.state, commit = _ref185.commit, dispatch = _ref185.dispatch;
                  obj = _arguments34.length > 1 && _arguments34[1] !== undefined ? _arguments34[1] : {};
                  // Special setting for create
                  beCreate = _.get(state.config, "schema.behavior.create") || {};
                  unique = beCreate.unique, after = beCreate.after, fixed = beCreate.fixed; // Prepare the command

                  json = JSON.stringify(obj);
                  th_set = state.meta.id;
                  cmds = ["thing ".concat(th_set, " create -cqn -fields")]; // Join `-unique`

                  if (!_.isEmpty(unique) && _.isString(unique)) {
                    cmds.push(" -unique '".concat(unique, "'"));
                  } // Join `-fixed`


                  if (!_.isEmpty(fixed) && _.isString(unique)) {
                    cmds.push(" -fixed '".concat(JSON.stringify(fixed), "'"));
                  } // Join `-after`


                  if (!_.isEmpty(after) && _.isString(after)) {
                    cmds.push(" -after '".concat(after, "'"));
                  } // Mark reloading


                  commit("setStatus", {
                    reloading: true
                  }); // Do Create

                  cmdText = cmds.join(" ");
                  _context190.next = 14;
                  return Wn.Sys.exec2(cmdText, {
                    input: json,
                    as: "json"
                  });

                case 14:
                  newMeta = _context190.sent;

                  if (!(newMeta && !(newMeta instanceof Error))) {
                    _context190.next = 19;
                    break;
                  }

                  // Append To Search List as the first 
                  commit("search/prependToList", newMeta); // Set it as current

                  _context190.next = 19;
                  return dispatch("setCurrentThing", {
                    meta: newMeta
                  });

                case 19:
                  // Mark reloading
                  commit("setStatus", {
                    reloading: false
                  }); // Return the new object

                  return _context190.abrupt("return", newMeta);

                case 21:
                case "end":
                  return _context190.stop();
              }
            }
          }, _callee189);
        }))();
      },
      //--------------------------------------------

      /***
       * Search: Remove Checked Items
       */
      removeChecked: function removeChecked(_ref186) {
        var _arguments35 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee190() {
          var state, commit, dispatch, getters, hard, ids, beh, failIds, th_set, cmdText, reo, removeIds, current;
          return regeneratorRuntime.wrap(function _callee190$(_context191) {
            while (1) {
              switch (_context191.prev = _context191.next) {
                case 0:
                  state = _ref186.state, commit = _ref186.commit, dispatch = _ref186.dispatch, getters = _ref186.getters;
                  hard = _arguments35.length > 1 && _arguments35[1] !== undefined ? _arguments35[1] : false;
                  ids = _.cloneDeep(state.search.checkedIds);

                  if (!_.isEmpty(ids)) {
                    _context191.next = 7;
                    break;
                  }

                  _context191.next = 6;
                  return Ti.Alert('i18n:del-none');

                case 6:
                  return _context191.abrupt("return", _context191.sent);

                case 7:
                  // Config is hard
                  beh = _.get(state, "config.schema.behavior") || {};
                  hard |= beh.hardRemove; // If hard, warn at first

                  if (!(hard || state.status.inRecycleBin)) {
                    _context191.next = 14;
                    break;
                  }

                  _context191.next = 12;
                  return Ti.Confirm('i18n:del-hard');

                case 12:
                  if (_context191.sent) {
                    _context191.next = 14;
                    break;
                  }

                  return _context191.abrupt("return");

                case 14:
                  commit("setStatus", {
                    deleting: true
                  }); // Prepare the ids which fail to remove

                  failIds = {}; // Prepare the cmds

                  th_set = state.meta.id;
                  cmdText = "thing ".concat(th_set, " delete ").concat(hard ? "-hard" : "", " -cqn -l ").concat(ids.join(" "));
                  _context191.next = 20;
                  return Wn.Sys.exec2(cmdText, {
                    as: "json",
                    errorAs: function errorAs(_ref187) {
                      var data = _ref187.data;

                      var id = _.trim(data);

                      failIds[id] = true;
                    }
                  });

                case 20:
                  reo = _context191.sent;
                  // Get the removeIds
                  removeIds = _.filter(ids, function (id) {
                    return !failIds[id];
                  });
                  console.log("removeIds:", removeIds); // Remove it from search list

                  if (!_.isEmpty(removeIds)) {
                    commit("search/removeItems", removeIds);
                  }

                  current = getters["search/currentItem"]; //console.log("getback current", current)
                  // Update current

                  _context191.next = 27;
                  return dispatch("setCurrentThing", {
                    meta: current
                  });

                case 27:
                  commit("setStatus", {
                    deleting: false
                  });

                case 28:
                case "end":
                  return _context191.stop();
              }
            }
          }, _callee190);
        }))();
      },
      //--------------------------------------------

      /***
       * RecycleBin: restore
       */
      restoreRecycleBin: function restoreRecycleBin(_ref188) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee191() {
          var state, commit, dispatch, getters, ids, th_set, cmdText, reo, current;
          return regeneratorRuntime.wrap(function _callee191$(_context192) {
            while (1) {
              switch (_context192.prev = _context192.next) {
                case 0:
                  state = _ref188.state, commit = _ref188.commit, dispatch = _ref188.dispatch, getters = _ref188.getters;
                  // Require user to select some things at first
                  ids = state.search.checkedIds;

                  if (!_.isEmpty(ids)) {
                    _context192.next = 6;
                    break;
                  }

                  _context192.next = 5;
                  return Ti.Alert('i18n:thing-restore-none');

                case 5:
                  return _context192.abrupt("return", _context192.sent);

                case 6:
                  commit("setStatus", {
                    restoring: true
                  }); // Run command

                  th_set = state.meta.id;
                  cmdText = "thing ".concat(th_set, " restore -quiet -cqn -l ").concat(ids.join(" "));
                  _context192.next = 11;
                  return Wn.Sys.exec2(cmdText, {
                    as: "json"
                  });

                case 11:
                  reo = _context192.sent;
                  _context192.next = 14;
                  return dispatch("search/reload");

                case 14:
                  // Get back current
                  current = getters["search/currentItem"]; // Update current

                  _context192.next = 17;
                  return dispatch("current/reload", current);

                case 17:
                  commit("setStatus", {
                    restoring: false
                  });

                case 18:
                case "end":
                  return _context192.stop();
              }
            }
          }, _callee191);
        }))();
      },
      //--------------------------------------------

      /***
       * RecycleBin: clean
       */
      cleanRecycleBin: function cleanRecycleBin(_ref189) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee192() {
          var state, commit, dispatch, th_set, cmdText;
          return regeneratorRuntime.wrap(function _callee192$(_context193) {
            while (1) {
              switch (_context193.prev = _context193.next) {
                case 0:
                  state = _ref189.state, commit = _ref189.commit, dispatch = _ref189.dispatch;
                  commit("setStatus", {
                    cleaning: true
                  }); // Run command

                  th_set = state.meta.id;
                  cmdText = "thing ".concat(th_set, " clean -limit 3000");
                  _context193.next = 6;
                  return Wn.Sys.exec2(cmdText);

                case 6:
                  commit("setStatus", {
                    cleaning: false
                  });
                  _context193.next = 9;
                  return dispatch("reload");

                case 9:
                case "end":
                  return _context193.stop();
              }
            }
          }, _callee192);
        }))();
      },
      //--------------------------------------------
      // User Interactivity
      //--------------------------------------------

      /***
       * Open meta editor, if has current, use it
       */
      openMetaEditor: function openMetaEditor(_ref190) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee193() {
          var state, getters, dispatch, reo, updates;
          return regeneratorRuntime.wrap(function _callee193$(_context194) {
            while (1) {
              switch (_context194.prev = _context194.next) {
                case 0:
                  state = _ref190.state, getters = _ref190.getters, dispatch = _ref190.dispatch;

                  if (state.meta) {
                    _context194.next = 5;
                    break;
                  }

                  _context194.next = 4;
                  return Ti.Toast.Open("i18n:empty-data", "warn");

                case 4:
                  return _context194.abrupt("return", _context194.sent);

                case 5:
                  if (!getters.hasCurrent) {
                    _context194.next = 16;
                    break;
                  }

                  _context194.next = 8;
                  return Wn.EditObjMeta(state.current.meta, {
                    fields: "default",
                    autoSave: false
                  });

                case 8:
                  reo = _context194.sent;

                  if (!_.isUndefined(reo)) {
                    _context194.next = 11;
                    break;
                  }

                  return _context194.abrupt("return");

                case 11:
                  // Update the current editing
                  updates = reo.updates;

                  if (_.isEmpty(updates)) {
                    _context194.next = 15;
                    break;
                  }

                  _context194.next = 15;
                  return dispatch("updateCurrentMetas", updates);

                case 15:
                  return _context194.abrupt("return");

                case 16:
                  _context194.next = 18;
                  return Wn.EditObjMeta(state.meta, {
                    fields: "auto",
                    autoSave: true
                  });

                case 18:
                case "end":
                  return _context194.stop();
              }
            }
          }, _callee193);
        }))();
      },
      //--------------------------------------------

      /***
       * Open current object source editor
       */
      openContentEditor: function openContentEditor(_ref191) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee194() {
          var state, getters, dispatch, newContent;
          return regeneratorRuntime.wrap(function _callee194$(_context195) {
            while (1) {
              switch (_context195.prev = _context195.next) {
                case 0:
                  state = _ref191.state, getters = _ref191.getters, dispatch = _ref191.dispatch;

                  if (state.meta) {
                    _context195.next = 5;
                    break;
                  }

                  _context195.next = 4;
                  return Ti.Toast.Open("i18n:empty-data", "warn");

                case 4:
                  return _context195.abrupt("return", _context195.sent);

                case 5:
                  if (!getters.hasCurrent) {
                    _context195.next = 14;
                    break;
                  }

                  _context195.next = 8;
                  return Wn.EditObjContent(state.current.meta, {
                    content: state.current.content
                  });

                case 8:
                  newContent = _context195.sent;

                  if (!_.isUndefined(newContent)) {
                    _context195.next = 11;
                    break;
                  }

                  return _context195.abrupt("return");

                case 11:
                  _context195.next = 13;
                  return dispatch("current/changeContent", newContent);

                case 13:
                  return _context195.abrupt("return");

                case 14:
                  _context195.next = 16;
                  return Ti.Toast.Open("i18n:nil-obj", "warn");

                case 16:
                  return _context195.abrupt("return", _context195.sent);

                case 17:
                case "end":
                  return _context195.stop();
              }
            }
          }, _callee194);
        }))();
      },
      //--------------------------------------------

      /***
       * Reload files
       */
      reloadFiles: function reloadFiles(_ref192) {
        var _arguments36 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee195() {
          var state, commit, dispatch, getters, _ref193, _ref193$force, force, current, thingId, dirName, thSetId, oDir, dataHome, dirPath, newMeta, json, cmdText;

          return regeneratorRuntime.wrap(function _callee195$(_context196) {
            while (1) {
              switch (_context196.prev = _context196.next) {
                case 0:
                  state = _ref192.state, commit = _ref192.commit, dispatch = _ref192.dispatch, getters = _ref192.getters;
                  _ref193 = _arguments36.length > 1 && _arguments36[1] !== undefined ? _arguments36[1] : {}, _ref193$force = _ref193.force, force = _ref193$force === void 0 ? false : _ref193$force;
                  //console.log("reloadFiles")
                  current = _.get(state.current, "meta");
                  thingId = _.get(current, "id");
                  dirName = state.filesName; // No current

                  if (!(!thingId || !dirName)) {
                    _context196.next = 9;
                    break;
                  }

                  commit("files/reset");
                  _context196.next = 24;
                  break;

                case 9:
                  thSetId = state.meta.id; // get the parent DIR

                  oDir = state.files.meta;

                  if (!(!oDir || !oDir.ph || !oDir.ph.endsWith("/data/".concat(thingId, "/").concat(dirName)))) {
                    _context196.next = 22;
                    break;
                  }

                  dataHome = "id:".concat(thSetId, "/data");
                  dirPath = "".concat(thingId, "/").concat(dirName); // Create or fetch the dir

                  newMeta = {
                    race: "DIR",
                    nm: dirPath
                  };
                  json = JSON.stringify(newMeta);
                  cmdText = "obj \"".concat(dataHome, "\" -IfNoExists -new '").concat(json, "' -cqno");
                  _context196.next = 19;
                  return Wn.Sys.exec2(cmdText, {
                    as: "json"
                  });

                case 19:
                  oDir = _context196.sent;

                  if (oDir) {
                    _context196.next = 22;
                    break;
                  }

                  return _context196.abrupt("return");

                case 22:
                  _context196.next = 24;
                  return dispatch("files/reload", oDir);

                case 24:
                case "end":
                  return _context196.stop();
              }
            }
          }, _callee195);
        }))();
      },
      //--------------------------------------------

      /***
       * Reload search list
       */
      reloadSearch: function reloadSearch(_ref194) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee196() {
          var state, commit, dispatch, meta, currentId, current, _iterator97, _step97, it;

          return regeneratorRuntime.wrap(function _callee196$(_context197) {
            while (1) {
              switch (_context197.prev = _context197.next) {
                case 0:
                  state = _ref194.state, commit = _ref194.commit, dispatch = _ref194.dispatch;
                  meta = state.meta;
                  commit("setStatus", {
                    reloading: true
                  });
                  _context197.next = 5;
                  return dispatch("search/reload", meta);

                case 5:
                  if (!state.current.meta) {
                    _context197.next = 28;
                    break;
                  }

                  // find new meta
                  currentId = state.current.meta.id;
                  current = null;
                  _iterator97 = _createForOfIteratorHelper(state.search.list);
                  _context197.prev = 9;

                  _iterator97.s();

                case 11:
                  if ((_step97 = _iterator97.n()).done) {
                    _context197.next = 18;
                    break;
                  }

                  it = _step97.value;

                  if (!(it.id == currentId)) {
                    _context197.next = 16;
                    break;
                  }

                  current = it;
                  return _context197.abrupt("break", 18);

                case 16:
                  _context197.next = 11;
                  break;

                case 18:
                  _context197.next = 23;
                  break;

                case 20:
                  _context197.prev = 20;
                  _context197.t0 = _context197["catch"](9);

                  _iterator97.e(_context197.t0);

                case 23:
                  _context197.prev = 23;

                  _iterator97.f();

                  return _context197.finish(23);

                case 26:
                  _context197.next = 28;
                  return dispatch("setCurrentThing", {
                    meta: current
                  });

                case 28:
                  commit("setStatus", {
                    reloading: false
                  });

                case 29:
                case "end":
                  return _context197.stop();
              }
            }
          }, _callee196, null, [[9, 20, 23, 26]]);
        }))();
      },
      //--------------------------------------------

      /***
       * Set Current Thing
       * 
       * It will load content if "content" is shown
       */
      setCurrentThing: function setCurrentThing(_ref195) {
        var _arguments37 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee197() {
          var state, commit, dispatch, _ref196, _ref196$meta, meta, _ref196$checkedIds, checkedIds, curId, ckIds, home, dataHome, dataHomeObj, lastKey;

          return regeneratorRuntime.wrap(function _callee197$(_context198) {
            while (1) {
              switch (_context198.prev = _context198.next) {
                case 0:
                  state = _ref195.state, commit = _ref195.commit, dispatch = _ref195.dispatch;
                  _ref196 = _arguments37.length > 1 && _arguments37[1] !== undefined ? _arguments37[1] : {}, _ref196$meta = _ref196.meta, meta = _ref196$meta === void 0 ? null : _ref196$meta, _ref196$checkedIds = _ref196.checkedIds, checkedIds = _ref196$checkedIds === void 0 ? {} : _ref196$checkedIds;
                  //..........................................
                  // Update selected item in search list
                  curId = meta ? meta.id : null;
                  ckIds = Ti.Util.truthyKeys(checkedIds);

                  if (!Ti.Util.isNil(curId)) {
                    ckIds.push(curId);
                  }

                  commit("search/setCurrentId", curId);
                  commit("search/setCheckedIds", ckIds); //..........................................
                  // Update the currentDataHome

                  home = state.meta;
                  dataHome = curId ? "id:".concat(home.id, "/data/").concat(curId) : null;
                  commit("setCurrentDataHome", dataHome); // Try get current dataHomeObj

                  _context198.next = 12;
                  return Wn.Io.loadMeta(dataHome);

                case 12:
                  dataHomeObj = _context198.sent;
                  commit("setCurrentDataHomeObj", dataHomeObj); //..........................................
                  // Keep last

                  lastKey = "".concat(home.id, ":currentId");

                  if (!_.get(state.config.schema, "keepLastOff")) {
                    Ti.Storage.session.set(lastKey, curId);
                  } // Clean local storage
                  else {
                      Ti.Storage.session.remove(lastKey);
                    } //..........................................
                  // Reload Current


                  _context198.next = 18;
                  return dispatch("current/reload", meta);

                case 18:
                case "end":
                  return _context198.stop();
              }
            }
          }, _callee197);
        }))();
      },
      //--------------------------------------------

      /***
       * Do Change Block Shown:
       * 
       * If show content/files, it may check if need to be reload data
       */
      doChangeShown: function doChangeShown(_ref197, shown) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee198() {
          var state, commit, dispatch;
          return regeneratorRuntime.wrap(function _callee198$(_context199) {
            while (1) {
              switch (_context199.prev = _context199.next) {
                case 0:
                  state = _ref197.state, commit = _ref197.commit, dispatch = _ref197.dispatch;
                  // Just mark the shown
                  dispatch("config/updateShown", shown);

                case 2:
                case "end":
                  return _context199.stop();
              }
            }
          }, _callee198);
        }))();
      },
      //--------------------------------------------

      /***
       * Reload All
       */
      reload: function reload(_ref198, meta) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee199() {
          var state, commit, dispatch, home, localDirNameKey, dirName, local, filter, sorter, lastKey, curId, current;
          return regeneratorRuntime.wrap(function _callee199$(_context200) {
            while (1) {
              switch (_context200.prev = _context200.next) {
                case 0:
                  state = _ref198.state, commit = _ref198.commit, dispatch = _ref198.dispatch;

                  //console.log("thing-manager.reload", state)
                  // Update New Meta
                  if (meta) {
                    commit("setMeta", meta);
                  } // Get meta back
                  else {
                      meta = state.meta;
                    } // meta is home


                  home = meta; // Mark reloading

                  commit("setStatus", {
                    reloading: true
                  }); // Reload Config
                  //console.log("reload config")

                  _context200.next = 6;
                  return dispatch("config/reload", meta);

                case 6:
                  // Update the default filesDirName
                  localDirNameKey = "".concat(meta.id, "_dirname");
                  dirName = Ti.Storage.session.getString(localDirNameKey);

                  if (!dirName) {
                    dirName = _.get(state.config, "schema.behavior.filesDirName") || "media";
                  }

                  commit("setCurrentDataDir", dirName || "media"); // Load local status

                  local = Ti.Storage.session.getObject(meta.id) || {};

                  _.defaults(local, {
                    filter: {},
                    sorter: {},
                    pager: {}
                  }); // Setup default filter and sorter


                  filter = _.get(state.config.schema, "behavior.filter") || {};
                  filter = _.assign({}, filter, local.filter);

                  if (!_.isEmpty(filter)) {
                    commit("search/setFilter", filter);
                  } // Sorter


                  sorter = _.get(state.config.schema, "behavior.sorter") || {};

                  if (!_.isEmpty(local.sorter)) {
                    commit("search/setSorter", local.sorter);
                  } else if (!_.isEmpty(sorter)) {
                    commit("search/setSorter", sorter);
                  } // Pager


                  if (!_.isEmpty(local.pager)) {
                    commit("search/setPager", local.pager);
                  } // Reload Search
                  //console.log("reload search")


                  _context200.next = 20;
                  return dispatch("reloadSearch");

                case 20:
                  if (!_.get(state, "meta.th_auto_select")) {
                    _context200.next = 28;
                    break;
                  }

                  if (!(!state.current.meta && !_.isEmpty(state.search.list))) {
                    _context200.next = 28;
                    break;
                  }

                  // Get last
                  lastKey = "".concat(home.id, ":currentId");
                  curId = Ti.Storage.session.getString(lastKey);
                  // Find by id
                  if (curId) current = _.find(state.search.list, function (li) {
                    return li.id == curId;
                  }); // use the first one

                  if (!current) current = _.first(state.search.list); // Highlight it

                  _context200.next = 28;
                  return dispatch("setCurrentThing", {
                    meta: current,
                    force: false
                  });

                case 28:
                  // All done
                  commit("setStatus", {
                    reloading: false
                  });

                case 29:
                case "end":
                  return _context200.stop();
              }
            }
          }, _callee199);
        }))();
      } //--------------------------------------------

    };
    Ti.Preload("ti/mod/wn/thing/m-thing-actions.mjs", _M);
  })(); //============================================================
  // JOIN: wn/thing/m-thing.json
  //============================================================


  Ti.Preload("ti/mod/wn/thing/m-thing.json", {
    "meta": null,
    "currentDataDir": null,
    "currentDataHome": null,
    "currentDataHomeObj": null,
    "status": {
      "reloading": false,
      "doing": false,
      "saving": false,
      "deleting": false,
      "changed": false,
      "restoring": false,
      "cleaning": false,
      "inRecycleBin": false
    }
  }); //============================================================
  // JOIN: wn/thing/m-thing.mjs
  //============================================================

  (function () {
    //---------------------------------------
    var _M = {
      ////////////////////////////////////////////
      getters: {
        hasCurrent: function hasCurrent(state) {
          return state.current && state.current.meta;
        },
        isInRecycleBin: function isInRecycleBin(state) {
          return state.search.inRecycleBin;
        }
      },
      ////////////////////////////////////////////
      mutations: {
        setMeta: function setMeta(state, meta) {
          state.meta = meta;
        },
        setCurrentDataDir: function setCurrentDataDir(state, dirName) {
          state.currentDataDir = dirName;

          if (state.meta) {
            var localDirNameKey = "".concat(state.meta.id, "_dirname");
            Ti.Storage.session.set(localDirNameKey, dirName);
          }
        },
        setCurrentDataHome: function setCurrentDataHome(state, dataHome) {
          state.currentDataHome = dataHome;
        },
        setCurrentDataHomeObj: function setCurrentDataHomeObj(state, dataHomeObj) {
          state.currentDataHomeObj = _.cloneDeep(dataHomeObj);
        },
        setStatus: function setStatus(state, status) {
          state.status = _.assign({}, state.status, status);
        },
        syncStatusChanged: function syncStatusChanged(state) {
          if (state.current) {
            //console.log("do sync")
            state.status.changed = state.current.status.changed;
          }
        }
      } ////////////////////////////////////////////

    };
    Ti.Preload("ti/mod/wn/thing/m-thing.mjs", _M);
  })(); //============================================================
  // JOIN: wn/thing/mod/config/m-thing-config-actions.mjs
  //============================================================


  (function () {
    // Ti required(Wn)
    ////////////////////////////////////////////////
    var _M = {
      //----------------------------------------
      updateShown: function updateShown(_ref199, shown) {
        var commit = _ref199.commit;
        commit("mergeShown", shown);
        commit("persistShown");
      },
      //----------------------------------------
      reloadSchema: function reloadSchema(_ref200) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee200() {
          var state, commit, aph, obj, schema, methods;
          return regeneratorRuntime.wrap(function _callee200$(_context201) {
            while (1) {
              switch (_context201.prev = _context201.next) {
                case 0:
                  state = _ref200.state, commit = _ref200.commit;
                  //console.log("reloadSchema")
                  aph = "id:".concat(state.meta.id, "/thing-schema.json");
                  _context201.next = 4;
                  return Wn.Io.loadMeta(aph);

                case 4:
                  obj = _context201.sent;
                  _context201.next = 7;
                  return Wn.Io.loadContent(obj, {
                    as: "json"
                  });

                case 7:
                  schema = _context201.sent;

                  if (!schema.methods) {
                    _context201.next = 14;
                    break;
                  }

                  _context201.next = 11;
                  return Ti.Load(schema.methods);

                case 11:
                  methods = _context201.sent;

                  if (!_.isArray(methods)) {
                    methods = [methods];
                  }

                  schema.methods = methods;

                case 14:
                  //console.log("setSchema", schema)
                  commit("setSchema", schema);
                  return _context201.abrupt("return", schema);

                case 16:
                case "end":
                  return _context201.stop();
              }
            }
          }, _callee200);
        }))();
      },
      //----------------------------------------
      reloadLayout: function reloadLayout(_ref201) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee201() {
          var state, commit, aph, obj, json;
          return regeneratorRuntime.wrap(function _callee201$(_context202) {
            while (1) {
              switch (_context202.prev = _context202.next) {
                case 0:
                  state = _ref201.state, commit = _ref201.commit;
                  //console.log("reloadLayout")
                  aph = "id:".concat(state.meta.id, "/thing-layout.json");
                  _context202.next = 4;
                  return Wn.Io.loadMeta(aph);

                case 4:
                  obj = _context202.sent;
                  _context202.next = 7;
                  return Wn.Io.loadContent(obj, {
                    as: "json"
                  });

                case 7:
                  json = _context202.sent;
                  //console.log("setLayout", json)
                  commit("setLayout", json); // Load shown from local before reload config

                  commit("restoreShown");
                  return _context202.abrupt("return", json);

                case 11:
                case "end":
                  return _context202.stop();
              }
            }
          }, _callee201);
        }))();
      },
      //----------------------------------------
      reloadActions: function reloadActions(_ref202) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee202() {
          var state, commit, aph, obj, json;
          return regeneratorRuntime.wrap(function _callee202$(_context203) {
            while (1) {
              switch (_context203.prev = _context203.next) {
                case 0:
                  state = _ref202.state, commit = _ref202.commit;
                  // console.log("reloadActions")
                  aph = "id:".concat(state.meta.id, "/thing-actions.json");
                  _context203.next = 4;
                  return Wn.Io.loadMeta(aph);

                case 4:
                  obj = _context203.sent;
                  _context203.next = 7;
                  return Wn.Io.loadContent(obj, {
                    as: "json"
                  });

                case 7:
                  json = _context203.sent;
                  //console.log("setActions", json)
                  commit("setActions", json);
                  return _context203.abrupt("return", json);

                case 10:
                case "end":
                  return _context203.stop();
              }
            }
          }, _callee202);
        }))();
      },
      //----------------------------------------
      reload: function reload(_ref203, meta) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee203() {
          var state, commit, dispatch;
          return regeneratorRuntime.wrap(function _callee203$(_context204) {
            while (1) {
              switch (_context204.prev = _context204.next) {
                case 0:
                  state = _ref203.state, commit = _ref203.commit, dispatch = _ref203.dispatch;

                  //console.log("thing-manager-config.reload", state)
                  // Update New Meta
                  if (meta) {
                    commit("setMeta", meta);
                  } // Get meta back
                  else {
                      meta = state.meta;
                    } // Mark reloading


                  commit("setStatus", {
                    reloading: true
                  });
                  _context204.next = 5;
                  return dispatch("reloadSchema");

                case 5:
                  _context204.next = 7;
                  return dispatch("reloadLayout");

                case 7:
                  _context204.next = 9;
                  return dispatch("reloadActions");

                case 9:
                  // All done
                  commit("setStatus", {
                    reloading: false
                  });

                case 10:
                case "end":
                  return _context204.stop();
              }
            }
          }, _callee203);
        }))();
      } //----------------------------------------

    };
    Ti.Preload("ti/mod/wn/thing/mod/config/m-thing-config-actions.mjs", _M);
  })(); //============================================================
  // JOIN: wn/thing/mod/config/m-thing-config.json
  //============================================================


  Ti.Preload("ti/mod/wn/thing/mod/config/m-thing-config.json", {
    "meta": null,
    "shown": {
      "search": true,
      "meta": true,
      "content": true,
      "files": false
    },
    "listOpen": {
      "content": true
    },
    "schema": {},
    "layout": {
      "deskstop": {},
      "tablet": {},
      "phone": {}
    },
    "actions": [],
    "status": {
      "reloading": false,
      "saving": false
    }
  }); //============================================================
  // JOIN: wn/thing/mod/config/m-thing-config.mjs
  //============================================================

  (function () {
    //---------------------------------------
    var _M = {
      ////////////////////////////////////////////
      mutations: {
        setMeta: function setMeta(state, meta) {
          state.meta = meta;
        },
        setStatus: function setStatus(state, status) {
          state.status = _.assign({}, state.status, status);
        },
        setSchema: function setSchema(state, schema) {
          state.schema = schema;
        },
        setLayout: function setLayout(state, layout) {
          state.layout = _.pick(layout, ["desktop", "tablet", "phone"]);
          state.shown = layout.shown || {};
          state.listOpen = layout.listOpen || {};
        },
        setActions: function setActions(state, actions) {
          state.actions = actions;
        },
        mergeShown: function mergeShown(state, shown) {
          if (shown && !_.isEmpty(shown)) {
            state.shown = _.assign({}, state.shown, shown);
          }
        },
        persistShown: function persistShown(state) {
          if (state.meta && state.meta.id) {
            Ti.Storage.session.setObject("".concat(state.meta.id, "-shown"), state.shown);
          }
        },
        restoreShown: function restoreShown(state) {
          if (state.meta && state.meta.id) {
            var shown = Ti.Storage.session.getObject("".concat(state.meta.id, "-shown"));
            state.shown = _.assign({}, state.shown, shown);
          }
        }
      } ////////////////////////////////////////////

    };
    Ti.Preload("ti/mod/wn/thing/mod/config/m-thing-config.mjs", _M);
  })(); //============================================================
  // JOIN: wn/thing/mod/config/_mod.json
  //============================================================


  Ti.Preload("ti/mod/wn/thing/mod/config/_mod.json", {
    "namespaced": true,
    "state": "./m-thing-config.json",
    "actions": "./m-thing-config-actions.mjs",
    "mixins": "./m-thing-config.mjs"
  }); //============================================================
  // JOIN: wn/thing/mod/search/m-thing-search-actions.mjs
  //============================================================

  (function () {
    // Ti required(Wn)
    ////////////////////////////////////////////////
    var _M = {
      //--------------------------------------------
      reloadPage: function reloadPage(_ref204, pg) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee204() {
          var state, commit, dispatch;
          return regeneratorRuntime.wrap(function _callee204$(_context205) {
            while (1) {
              switch (_context205.prev = _context205.next) {
                case 0:
                  state = _ref204.state, commit = _ref204.commit, dispatch = _ref204.dispatch;
                  commit("updatePager", pg);
                  _context205.next = 4;
                  return dispatch("reload");

                case 4:
                case "end":
                  return _context205.stop();
              }
            }
          }, _callee204);
        }))();
      },
      //--------------------------------------------
      reload: function reload(_ref205, meta) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee205() {
          var state, commit, rootState, cmds, _ref206, keyword, match, flt, knm, beh, keys, _iterator98, _step98, k, val, beMatch, sort, pg, limit, skip, input, cmdText, reo;

          return regeneratorRuntime.wrap(function _callee205$(_context206) {
            while (1) {
              switch (_context206.prev = _context206.next) {
                case 0:
                  state = _ref205.state, commit = _ref205.commit, rootState = _ref205.rootState;

                  //console.log("thing-manager-search.reload", meta)
                  //............................................
                  // Update New Meta
                  if (meta) {
                    commit("setMeta", meta);
                  } // Get meta back
                  else {
                      meta = state.meta;
                    } //............................................
                  // Mark reloading


                  commit("setStatus", {
                    reloading: true
                  }); //............................................

                  cmds = ["thing id:".concat(meta.id, " query -pager -cqn")];
                  _ref206 = state.filter || {}, keyword = _ref206.keyword, match = _ref206.match;
                  flt = {}; //............................................
                  // Eval Filter: keyword

                  if (!keyword) {
                    _context206.next = 34;
                    break;
                  }

                  if (!/^[0-9a-z]{32}$/.test(keyword)) {
                    _context206.next = 11;
                    break;
                  }

                  flt.id = keyword;
                  _context206.next = 34;
                  break;

                case 11:
                  knm = "title";
                  beh = _.get(rootState, "main.config.schema.behavior") || {};
                  keys = _.keys(beh.keyword); //........................................

                  _iterator98 = _createForOfIteratorHelper(keys);
                  _context206.prev = 15;

                  _iterator98.s();

                case 17:
                  if ((_step98 = _iterator98.n()).done) {
                    _context206.next = 25;
                    break;
                  }

                  k = _step98.value;
                  val = beh.keyword[k];

                  if (!new RegExp(val).test(keyword)) {
                    _context206.next = 23;
                    break;
                  }

                  knm = k;
                  return _context206.abrupt("break", 25);

                case 23:
                  _context206.next = 17;
                  break;

                case 25:
                  _context206.next = 30;
                  break;

                case 27:
                  _context206.prev = 27;
                  _context206.t0 = _context206["catch"](15);

                  _iterator98.e(_context206.t0);

                case 30:
                  _context206.prev = 30;

                  _iterator98.f();

                  return _context206.finish(30);

                case 33:
                  //........................................
                  // Accurate equal
                  if (knm.startsWith("=")) {
                    flt[knm.substring(1).trim()] = keyword;
                  } // Default is like
                  else {
                      flt[knm] = "^.*" + keyword;
                    } //........................................


                case 34:
                  //............................................
                  // Eval Filter: match
                  if (!_.isEmpty(match)) {
                    _.assign(flt, match);
                  } //............................................
                  // Fix filter


                  beMatch = _.get(rootState, "main.config.schema.behavior.match");

                  if (!_.isEmpty(beMatch)) {
                    _.assign(flt, beMatch);
                  } //............................................
                  // InRecycleBin 


                  flt.th_live = state.inRecycleBin ? -1 : 1; //............................................
                  // Eval Sorter

                  if (!_.isEmpty(state.sorter)) {
                    sort = JSON.stringify(state.sorter);
                    cmds.push("-sort '".concat(sort, "'"));
                  } //............................................
                  // Eval Pager


                  pg = state.pager;

                  if (!_.isEmpty(pg) && pg.pgsz > 0 && pg.pn > 0) {
                    limit = pg.pgsz;
                    skip = pg.pgsz * (pg.pn - 1);
                    cmds.push("-limit ".concat(limit));
                    cmds.push("-skip  ".concat(skip));
                  } //............................................
                  // Run Command


                  input = _.isEmpty(flt) ? undefined : JSON.stringify(flt);
                  cmdText = cmds.join(" ");
                  _context206.next = 45;
                  return Wn.Sys.exec2(cmdText, {
                    input: input,
                    as: "json"
                  });

                case 45:
                  reo = _context206.sent;
                  //............................................
                  // All done
                  commit("setPager", reo.pager);
                  commit("setList", reo.list);
                  commit("setStatus", {
                    reloading: false
                  });

                case 49:
                case "end":
                  return _context206.stop();
              }
            }
          }, _callee205, null, [[15, 27, 30, 33]]);
        }))();
      } //--------------------------------------------

    };
    Ti.Preload("ti/mod/wn/thing/mod/search/m-thing-search-actions.mjs", _M);
  })(); //============================================================
  // JOIN: wn/thing/mod/search/m-thing-search.json
  //============================================================


  Ti.Preload("ti/mod/wn/thing/mod/search/m-thing-search.json", {
    "meta": null,
    "filter": {},
    "sorter": {
      "ct": -1
    },
    "inRecycleBin": false,
    "pager": {
      "pn": 1,
      "pgsz": 50,
      "pgc": 0,
      "sum": 0,
      "skip": 0,
      "count": 0
    },
    "currentId": null,
    "checkedIds": [],
    "list": [],
    "status": {
      "reloading": false,
      "saving": false,
      "deleting": false
    }
  }); //============================================================
  // JOIN: wn/thing/mod/search/m-thing-search.mjs
  //============================================================

  (function () {
    function saveToLocal(meta, key, val) {
      if (!meta) {
        return;
      } //console.log("saveToLocal", key, val)


      var local = Ti.Storage.session.getObject(meta.id) || {};

      _.defaults(local, {
        filter: {},
        sorter: {},
        pager: {}
      });

      local[key] = val;
      Ti.Storage.session.setObject(meta.id, local);
    } //---------------------------------------


    var _M = {
      ///////////////////////////////////////////////////////
      getters: {
        //---------------------------------------------------
        currentItem: function currentItem(state) {
          if (state.currentId) {
            var _iterator99 = _createForOfIteratorHelper(state.list),
                _step99;

            try {
              for (_iterator99.s(); !(_step99 = _iterator99.n()).done;) {
                var it = _step99.value;

                if (it.id == state.currentId) {
                  return it;
                }
              }
            } catch (err) {
              _iterator99.e(err);
            } finally {
              _iterator99.f();
            }
          }

          return null;
        },
        //---------------------------------------------------
        checkedItems: function checkedItems(state) {
          // Make the idsMap
          var checkedMap = {};

          var _iterator100 = _createForOfIteratorHelper(state.checkedIds),
              _step100;

          try {
            for (_iterator100.s(); !(_step100 = _iterator100.n()).done;) {
              var id = _step100.value;
              checkedMap[id] = true;
            } // Join the items

          } catch (err) {
            _iterator100.e(err);
          } finally {
            _iterator100.f();
          }

          var list = [];

          var _iterator101 = _createForOfIteratorHelper(state.list),
              _step101;

          try {
            for (_iterator101.s(); !(_step101 = _iterator101.n()).done;) {
              var it = _step101.value;

              if (checkedMap[it.id]) {
                list.push(it);
              }
            } // done

          } catch (err) {
            _iterator101.e(err);
          } finally {
            _iterator101.f();
          }

          return list;
        } //---------------------------------------------------

      },
      ///////////////////////////////////////////////////////
      mutations: {
        setMeta: function setMeta(state, meta) {
          state.meta = meta;
        },
        //---------------------------------------------------
        setStatus: function setStatus(state, status) {
          state.status = _.assign({}, state.status, status);
        },
        //---------------------------------------------------
        setFilter: function setFilter(state) {
          var filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          state.filter = filter;
          saveToLocal(state.meta, "filter", state.filter);
        },
        updateFilter: function updateFilter(state) {
          var flt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          //console.log("updateFilter", JSON.stringify(flt))
          state.filter = _.assign({}, state.filter, flt);
          saveToLocal(state.meta, "filter", state.filter);
        },
        setSorter: function setSorter(state, sorter) {
          state.sorter = sorter;
          saveToLocal(state.meta, "sorter", state.sorter);
        },
        //---------------------------------------------------
        setPager: function setPager(state, pager) {
          state.pager = pager;
          saveToLocal(state.meta, "pager", state.pager);
        },
        updatePager: function updatePager(state, pg) {
          state.pager = _.defaults({}, pg, state.pager);
        },
        //---------------------------------------------------
        setInRecycleBin: function setInRecycleBin(state) {
          var inRecycleBin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          state.inRecycleBin = inRecycleBin;
        },
        //---------------------------------------------------
        setList: function setList(state, list) {
          state.list = list;
        },
        //---------------------------------------------------
        setCurrentId: function setCurrentId(state, id) {
          state.currentId = id || null;
        },
        //---------------------------------------------------
        setCheckedIds: function setCheckedIds(state) {
          var ids = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
          state.checkedIds = _.union(ids);
        },
        //---------------------------------------------------
        selectItem: function selectItem(state, id) {
          if (state.currentId != id) {
            state.currentId = id;
            state.checkedIds = [];

            if (id) {
              state.checkedIds.push(id);
            }
          }
        },
        //---------------------------------------------------
        removeItems: function removeItems(state) {
          var ids = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
          // Find the current item index, and take as the next Item index
          //console.log("search.remove", ids)
          var index = -1;

          if (state.currentId) {
            for (var i = 0; i < state.list.length; i++) {
              var it = state.list[i];

              if (it.id == state.currentId) {
                index = i;
                break;
              }
            }
          } // Make the idsMap


          var idsMap = {};

          if (_.isArray(ids)) {
            var _iterator102 = _createForOfIteratorHelper(ids),
                _step102;

            try {
              for (_iterator102.s(); !(_step102 = _iterator102.n()).done;) {
                var id = _step102.value;
                idsMap[id] = true;
              }
            } catch (err) {
              _iterator102.e(err);
            } finally {
              _iterator102.f();
            }
          } else if (_.isPlainObject(ids)) {
            idsMap = ids;
          } // Remove the ids


          var list2 = [];

          var _iterator103 = _createForOfIteratorHelper(state.list),
              _step103;

          try {
            for (_iterator103.s(); !(_step103 = _iterator103.n()).done;) {
              var _it = _step103.value;

              if (!idsMap[_it.id]) {
                list2.push(_it);
              }
            } // Then get back the current

          } catch (err) {
            _iterator103.e(err);
          } finally {
            _iterator103.f();
          }

          index = Math.min(index, list2.length - 1);
          var nextCurrent = null;

          if (index >= 0) {
            nextCurrent = list2[index];
            state.currentId = nextCurrent.id;
            state.checkedIds = [nextCurrent.id];
          } // No currentId
          else {
              state.currentId = null;
              state.checkedIds = [];
            } // Reset the list


          state.list = list2;

          if (state.pager) {
            state.pager.count = list2.length;
            state.pager.sum = state.pager.pgsz * (state.pager.pgc - 1) + list2.length;
          } // console.log("the next current", nextCurrent)

        },
        //---------------------------------------------------
        updateItem: function updateItem(state, it) {
          var list = [];

          var _iterator104 = _createForOfIteratorHelper(state.list),
              _step104;

          try {
            for (_iterator104.s(); !(_step104 = _iterator104.n()).done;) {
              var li = _step104.value;

              if (li.id == it.id) {
                list.push(_objectSpread({}, it, {
                  __updated_time: Date.now()
                }));
              } else {
                list.push(li);
              }
            }
          } catch (err) {
            _iterator104.e(err);
          } finally {
            _iterator104.f();
          }

          state.list = list;
        },
        //---------------------------------------------------
        appendToList: function appendToList(state, it) {
          if (it) {
            state.list = [].concat(state.list, it);
          }
        },
        //---------------------------------------------------
        prependToList: function prependToList(state, it) {
          if (it) {
            state.list = [].concat(it, state.list);
          }
        } //---------------------------------------------------

      } ///////////////////////////////////////////////////////

    };
    Ti.Preload("ti/mod/wn/thing/mod/search/m-thing-search.mjs", _M);
  })(); //============================================================
  // JOIN: wn/thing/mod/search/_mod.json
  //============================================================


  Ti.Preload("ti/mod/wn/thing/mod/search/_mod.json", {
    "namespaced": true,
    "state": "./m-thing-search.json",
    "actions": "./m-thing-search-actions.mjs",
    "mixins": "./m-thing-search.mjs"
  }); //============================================================
  // JOIN: wn/thing/_mod.json
  //============================================================

  Ti.Preload("ti/mod/wn/thing/_mod.json", {
    "name": "wn-thing",
    "namespaced": true,
    "state": "./m-thing.json",
    "actions": "./m-thing-actions.mjs",
    "mixins": "./m-thing.mjs",
    "modules": {
      "config": "./mod/config",
      "search": "./mod/search",
      "current": "@mod:wn/obj-current"
    }
  }); //============================================================
  // JOIN: com/site-main.html
  //============================================================

  Ti.Preload("ti/lib/www/com/site-main.html", "<div class=\"site-main\" @click.right=\"OnMouseRightClick\">\n  <ti-gui \n    class=\"site-page\"\n    v-bind=\"PageGUI\"\n    :loading-as=\"loading\"\n    :shown=\"page.shown\"/>\n  <!--pre>{{page}}</pre-->\n</div>"); //============================================================
  // JOIN: com/site-main.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      provide: function provide() {
        return Ti.Util.explainObj(this.$store.state, this.provide);
      },
      /////////////////////////////////////////
      computed: _objectSpread({}, Vuex.mapState({
        "siteId": function siteId(state) {
          return state.siteId;
        },
        "logo": function logo(state) {
          return state.logo;
        },
        "utils": function utils(state) {
          return state.utils;
        },
        "page": function page(state) {
          return state.page;
        },
        "shop": function shop(state) {
          return state.shop;
        },
        "auth": function auth(state) {
          return state.auth;
        },
        "domain": function domain(state) {
          return state.domain;
        },
        "rs": function rs(state) {
          return state.rs;
        },
        "nav": function nav(state) {
          return state.nav;
        },
        "base": function base(state) {
          return state.base;
        },
        "apiBase": function apiBase(state) {
          return state.apiBase;
        },
        "cdnTmpl": function cdnTmpl(state) {
          return state.cdnTmpl;
        },
        "captcha": function captcha(state) {
          return state.captcha;
        },
        "schema": function schema(state) {
          return state.schema;
        },
        "provide": function provide(state) {
          return state.provide;
        },
        "blocks": function blocks(state) {
          return state.blocks;
        },
        "loading": function loading(state) {
          return state.loading;
        },
        "pageReady": function pageReady(state) {
          return state.pageReady;
        }
      }), {}, Vuex.mapGetters(["actions", "getUrl", "getApiUrl"]), {}, Vuex.mapGetters("page", ["pageLink"]), {
        //-------------------------------------
        PayReturnUrl: function PayReturnUrl() {
          var st = this.$store.state;

          if (st.payReturnUrl) {
            return Ti.Util.explainObj(st, st.payReturnUrl);
          }
        },
        //-------------------------------------
        SiteLogo: function SiteLogo() {
          if (this.logo && /\.(png|jpe?g)$/.test(this.logo)) return this.getUrl(this.logo);
          return this.logo || "zmdi-globe";
        },
        //-------------------------------------
        // Page Navigation
        // SiteNav() {
        //   let nav = {}
        //   _.forEach(this.$store.state.nav, (v, k)=>{
        //     nav[k] = Ti.WWW.explainNavigation(v, this.base)
        //   })
        //   return nav
        // },
        //-------------------------------------
        // The template of captcha to prevent robot
        SiteCaptcha: function SiteCaptcha() {
          var path = Ti.S.renderBy(this.captcha, {
            site: this.siteId
          });
          if (path.startsWith("/")) return path;
          return this.getApiUrl(path);
        },
        //-------------------------------------
        SiteLoginMode: function SiteLoginMode() {
          // Already login, then bind the phone 
          if (this.auth.me) {
            return "bind_phone";
          }

          return "login_by_passwd";
        },
        //-------------------------------------
        PageFnSet: function PageFnSet() {
          Ti.AddGlobalFuncs(this.utils);
          return Ti.GlobalFuncs();
        },
        //-------------------------------------
        // Format current pageGUI
        PageGUI: function PageGUI() {
          var _this282 = this;

          var page = this.page; //.....................................
          // Without current page

          if (!page || !page.layout) {
            return {};
          } //.....................................
          // Get layout be pageMode


          var layout = page.layout; //.....................................
          // Apply "@BLOCK(xxx)" in panels and layout blocks

          if (layout) {
            // Define the methods
            var ExplainBlock = function ExplainBlock(anyValue) {
              // String : Check the "@BLOCK(xxx)" 
              if (_.isString(anyValue)) {
                var m = /^@BLOCK\(([^ ]+)\)$/.exec(anyValue);

                if (m) {
                  var blockName = m[1];
                  return _.get(_this282.blocks, blockName);
                }
              } // Array 
              else if (_.isArray(anyValue)) {
                  return _.map(anyValue, ExplainBlock);
                } // Object
                else if (_.isPlainObject(anyValue)) {
                    return _.mapValues(anyValue, ExplainBlock);
                  } // Others return directly


              return anyValue;
            }; // do without layout


            layout = ExplainBlock(layout);
          } //.....................................
          // Gen the GUI object


          var gui = {
            className: page.className,
            defaultFlex: "nil",
            defaultOverflow: "none",
            layout: layout,
            schema: {},
            canLoading: true
          }; //.....................................
          // assign schema

          _.assign(gui.schema, this.schema, page.schema); //.....................................
          // explain it
          //console.log("site-main: explain it!", gui);


          var theGUI = Ti.Util.explainObj(this, gui, {
            fnSet: this.PageFnSet
          }); //console.log("pageGUI", formedGUI)

          return theGUI;
        } //-------------------------------------

      }),
      /////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnMouseRightClick: function OnMouseRightClick($evn) {
          // Forbid context menu
          if (false === this.page.contextMenu) {
            $evn.preventDefault();
          } // Forbid context menu and show alert
          else if (_.isString(this.page.contextMenu)) {
              $evn.preventDefault();
              Ti.Toast.Open(this.page.contextMenu, "warn");
            }
        },
        //--------------------------------------
        showBlock: function showBlock(name) {
          var _this283 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee206() {
            return regeneratorRuntime.wrap(function _callee206$(_context207) {
              while (1) {
                switch (_context207.prev = _context207.next) {
                  case 0:
                    Ti.App(_this283).dispatch("page/showBlock", name);

                  case 1:
                  case "end":
                    return _context207.stop();
                }
              }
            }, _callee206);
          }))();
        },
        //--------------------------------------
        hideBlock: function hideBlock(name) {
          var _this284 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee207() {
            return regeneratorRuntime.wrap(function _callee207$(_context208) {
              while (1) {
                switch (_context208.prev = _context208.next) {
                  case 0:
                    Ti.App(_this284).dispatch("page/hideBlock", name);

                  case 1:
                  case "end":
                    return _context208.stop();
                }
              }
            }, _callee207);
          }))();
        },
        //-------------------------------------
        // Handle by EventBubble
        __on_events: function __on_events(name) {
          var _this285 = this;

          //console.log("site-main.__on_events", name, ...args)
          // ShowBlock
          if ("block:show" == name) {
            return function (blockName) {
              return _this285.showBlock(blockName);
            };
          } // HideBlock
          else if ("block:hide" == name) {
              return function (blockName) {
                return _this285.hideBlock(blockName);
              };
            } // Dispatch actions
            else {
                return function () {
                  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
                    args[_key6] = arguments[_key6];
                  }

                  _this285.invokeAction(name, args);
                };
              }
        },
        //-------------------------------------
        invokeAction: function invokeAction(name) {
          var _arguments38 = arguments,
              _this286 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee208() {
            var args;
            return regeneratorRuntime.wrap(function _callee208$(_context209) {
              while (1) {
                switch (_context209.prev = _context209.next) {
                  case 0:
                    args = _arguments38.length > 1 && _arguments38[1] !== undefined ? _arguments38[1] : [];
                    _context209.next = 3;
                    return Ti.App(_this286).dispatch("invokeAction", {
                      name: name,
                      args: args
                    });

                  case 3:
                  case "end":
                    return _context209.stop();
                }
              }
            }, _callee208);
          }))();
        },
        //-------------------------------------
        pushBrowserHistory: function pushBrowserHistory(pageTitle) {
          var his = window.history; //...................................

          if (!his) {
            return;
          } //...................................
          // Get current location


          var loc = window.location;
          var loPath = [loc.pathname, loc.search, loc.hash].join(""); //...................................

          var pgLink = this.getUrl(this.pageLink); //...................................

          if (loPath != pgLink || !his.state) {
            var pg = _.cloneDeep(_.pick(this.page, "path", "params", "anchor")); // console.log("pg", JSON.stringify(pg))
            // console.log("pageTitle", pageTitle)
            // console.log("pgLink", pgLink)


            his.pushState(pg, pageTitle, pgLink);
          } //...................................

        } //-------------------------------------

      },
      /////////////////////////////////////////
      watch: {
        // Page changd, update document title
        "page.finger": function pageFinger() {
          //console.log("-> ", this.page.title)
          var pageTitle = Ti.Util.explainObj(this, this.page.title);
          document.title = pageTitle;
          this.pushBrowserHistory(pageTitle); // TODO : Maybe here to embed the BaiDu Tongji Code
        }
      },
      /////////////////////////////////////////
      mounted: function mounted() {
        var _this287 = this;

        // Watch the browser "Forward/Backward"
        // The state(page) pushed by $store.dispath("navTo")
        window.onpopstate = function (evt) {
          var page = evt.state;
          console.log("popstate", page);

          if (page && page.path) {
            console.log("window.onpopstate", page);
            var app = Ti.App(_this287);
            app.dispatch("navTo", {
              type: "page",
              value: page.path,
              params: page.params,
              anchor: page.anchor
            });
          }
        };
      } /////////////////////////////////////////

    };
    Ti.Preload("ti/lib/www/com/site-main.mjs", _M);
  })(); //============================================================
  // JOIN: mod/auth/mod-address-actions.mjs
  //============================================================


  (function () {
    var _M = {
      //--------------------------------------------
      reloadMyAddresses: function reloadMyAddresses(_ref207) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee209() {
          var state, commit, getters, url, reo;
          return regeneratorRuntime.wrap(function _callee209$(_context210) {
            while (1) {
              switch (_context210.prev = _context210.next) {
                case 0:
                  state = _ref207.state, commit = _ref207.commit, getters = _ref207.getters;
                  url = getters.urls.addr_mine;
                  commit("setLoading", true, {
                    root: true
                  });
                  _context210.next = 5;
                  return Ti.Http.get(url, {
                    params: {
                      ticket: state.ticket
                    },
                    as: "json"
                  });

                case 5:
                  reo = _context210.sent;
                  commit("setLoading", false, {
                    root: true
                  });
                  commit("setAddresses", reo);

                case 8:
                case "end":
                  return _context210.stop();
              }
            }
          }, _callee209);
        }))();
      },
      //--------------------------------------------
      editOrCreateAddress: function editOrCreateAddress(_ref208) {
        var _arguments39 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee210() {
          var state, getters, commit, dispatch, addr, result, newAddr, url, params, body;
          return regeneratorRuntime.wrap(function _callee210$(_context211) {
            while (1) {
              switch (_context211.prev = _context211.next) {
                case 0:
                  state = _ref208.state, getters = _ref208.getters, commit = _ref208.commit, dispatch = _ref208.dispatch;
                  addr = _arguments39.length > 1 && _arguments39[1] !== undefined ? _arguments39[1] : {};
                  //console.log("openAddressEditor", addr)
                  // Pick the data
                  result = _.pick(addr, "id", "country", "code", "province", "city", "area", "street", "door", "dftaddr", "consignee", "phone", "email"); // Add Default Value

                  _.defaults(result, {
                    country: "CN",
                    tp: "U",
                    dftaddr: false
                  }); // Prepare the Edit form


                  _context211.next = 6;
                  return Ti.App.Open({
                    title: "i18n:edit",
                    position: "top",
                    width: 640,
                    height: "90%",
                    result: result,
                    comType: "TiForm",
                    comConf: {
                      onlyFields: false,
                      data: "=result",
                      fields: [{
                        "title": "i18n:address-k-country",
                        "name": "country",
                        "comType": "ti-combo-input",
                        "comConf": {
                          "mustInList": true,
                          "autoCollapse": true,
                          "valueCase": "upper",
                          "dropDisplay": "name",
                          "options": state.countries,
                          "valueBy": "key",
                          "textBy": "name"
                        }
                      }, {
                        "title": "i18n:address-k-code",
                        "name": "code",
                        "tip": "i18n:address-k-code-tip",
                        "comType": "ti-input",
                        "comConf": {
                          "valueCase": "upper"
                        }
                      }, {
                        "title": "i18n:address-k-province",
                        "name": "province",
                        "comType": "ti-input"
                      }, {
                        "title": "i18n:address-k-city",
                        "name": "city",
                        "comType": "ti-input"
                      }, {
                        "title": "i18n:address-k-area",
                        "name": "area",
                        "comType": "ti-input"
                      }, {
                        "title": "i18n:address-k-street",
                        "name": "street",
                        "comType": "ti-input"
                      }, {
                        "title": "i18n:address-k-door",
                        "name": "door",
                        "comType": "ti-input"
                      }, {
                        "title": "i18n:address-k-dftaddr",
                        "name": "dftaddr",
                        "type": "Boolean",
                        "comType": "ti-toggle"
                      }, {
                        "title": "i18n:address-k-consignee",
                        "name": "consignee",
                        "comType": "ti-input"
                      }, {
                        "title": "i18n:address-k-phone",
                        "name": "phone",
                        "comType": "ti-input"
                      }, {
                        "title": "i18n:address-k-email",
                        "name": "email",
                        "comType": "ti-input"
                      }]
                    }
                  });

                case 6:
                  newAddr = _context211.sent;

                  if (!_.isUndefined(newAddr)) {
                    _context211.next = 9;
                    break;
                  }

                  return _context211.abrupt("return");

                case 9:
                  if (!_.isEqual(newAddr, result)) {
                    _context211.next = 11;
                    break;
                  }

                  return _context211.abrupt("return");

                case 11:
                  console.log("!!!", newAddr); // Eval the url

                  // Create
                  if (!newAddr.id) {
                    url = getters.urls.addr_create;
                  } // Update
                  else {
                      url = getters.urls.addr_update;
                    } // Prepare http options


                  params = {
                    ticket: state.ticket,
                    id: newAddr.id
                  };
                  body = JSON.stringify(newAddr);
                  commit("setLoading", true, {
                    root: true
                  }); // Send request

                  _context211.next = 18;
                  return Ti.Http.post(url, {
                    params: params,
                    body: body,
                    as: "json"
                  });

                case 18:
                  _context211.next = 20;
                  return dispatch("reloadMyAddresses");

                case 20:
                  commit("setLoading", false, {
                    root: true
                  });

                case 21:
                case "end":
                  return _context211.stop();
              }
            }
          }, _callee210);
        }))();
      },
      //--------------------------------------------
      removeAddress: function removeAddress(_ref209) {
        var _arguments40 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee211() {
          var state, commit, getters, dispatch, _ref210, id, url;

          return regeneratorRuntime.wrap(function _callee211$(_context212) {
            while (1) {
              switch (_context212.prev = _context212.next) {
                case 0:
                  state = _ref209.state, commit = _ref209.commit, getters = _ref209.getters, dispatch = _ref209.dispatch;
                  _ref210 = _arguments40.length > 1 && _arguments40[1] !== undefined ? _arguments40[1] : {}, id = _ref210.id;

                  if (id) {
                    _context212.next = 4;
                    break;
                  }

                  return _context212.abrupt("return");

                case 4:
                  _context212.next = 6;
                  return Ti.Confirm("i18n:address-rm-confirm");

                case 6:
                  if (_context212.sent) {
                    _context212.next = 8;
                    break;
                  }

                  return _context212.abrupt("return");

                case 8:
                  commit("setLoading", true, {
                    root: true
                  }); // Process delete

                  url = getters.urls.addr_delete;
                  _context212.next = 12;
                  return Ti.Http.get(url, {
                    params: {
                      ticket: state.ticket,
                      id: id
                    },
                    as: "json"
                  });

                case 12:
                  _context212.next = 14;
                  return dispatch("reloadMyAddresses");

                case 14:
                  commit("setLoading", false, {
                    root: true
                  });

                case 15:
                case "end":
                  return _context212.stop();
              }
            }
          }, _callee211);
        }))();
      },
      //--------------------------------------------
      setAddressDefault: function setAddressDefault(_ref211) {
        var _arguments41 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee212() {
          var state, commit, getters, dispatch, _ref212, id, url, params, body;

          return regeneratorRuntime.wrap(function _callee212$(_context213) {
            while (1) {
              switch (_context213.prev = _context213.next) {
                case 0:
                  state = _ref211.state, commit = _ref211.commit, getters = _ref211.getters, dispatch = _ref211.dispatch;
                  _ref212 = _arguments41.length > 1 && _arguments41[1] !== undefined ? _arguments41[1] : {}, id = _ref212.id;

                  if (id) {
                    _context213.next = 4;
                    break;
                  }

                  return _context213.abrupt("return");

                case 4:
                  // Process delete
                  url = getters.urls.addr_update; // Prepare http options

                  params = {
                    ticket: state.ticket,
                    id: id
                  };
                  body = JSON.stringify({
                    dftaddr: true
                  });
                  commit("setLoading", true, {
                    root: true
                  }); // Send request

                  _context213.next = 10;
                  return Ti.Http.post(url, {
                    params: params,
                    body: body,
                    as: "json"
                  });

                case 10:
                  _context213.next = 12;
                  return dispatch("reloadMyAddresses");

                case 12:
                  commit("setLoading", false, {
                    root: true
                  });

                case 13:
                case "end":
                  return _context213.stop();
              }
            }
          }, _callee212);
        }))();
      },
      //--------------------------------------------
      initCountries: function initCountries(_ref213) {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee213() {
          var state, getters, commit, url, reo;
          return regeneratorRuntime.wrap(function _callee213$(_context214) {
            while (1) {
              switch (_context214.prev = _context214.next) {
                case 0:
                  state = _ref213.state, getters = _ref213.getters, commit = _ref213.commit;

                  if (state.countries) {
                    _context214.next = 7;
                    break;
                  }

                  url = getters.urls.countries;
                  _context214.next = 5;
                  return Ti.Http.get(url, {
                    as: "json"
                  });

                case 5:
                  reo = _context214.sent;
                  commit("setCountries", reo);

                case 7:
                case "end":
                  return _context214.stop();
              }
            }
          }, _callee213);
        }))();
      } //--------------------------------------------

    };
    Ti.Preload("ti/lib/www/mod/auth/mod-address-actions.mjs", _M);
  })(); //============================================================
  // JOIN: mod/auth/mod-auth-actions.mjs
  //============================================================


  (function () {
    var _M = {
      //--------------------------------------------
      doCheckMe: function doCheckMe(_ref214) {
        var _arguments42 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee214() {
          var commit, dispatch, getters, rootState, _ref215, _ref215$force, force, ok, fail, nophone, noemail, siteId, ticket, reo, me, _me;

          return regeneratorRuntime.wrap(function _callee214$(_context215) {
            while (1) {
              switch (_context215.prev = _context215.next) {
                case 0:
                  commit = _ref214.commit, dispatch = _ref214.dispatch, getters = _ref214.getters, rootState = _ref214.rootState;
                  _ref215 = _arguments42.length > 1 && _arguments42[1] !== undefined ? _arguments42[1] : {}, _ref215$force = _ref215.force, force = _ref215$force === void 0 ? false : _ref215$force, ok = _ref215.ok, fail = _ref215.fail, nophone = _ref215.nophone, noemail = _ref215.noemail;
                  //console.log("I am doCheckMe", {force, ok, fail, nophone})
                  // console.log(" -urls", getters.urls)
                  // Guard SiteId
                  siteId = rootState.siteId;

                  if (siteId) {
                    _context215.next = 6;
                    break;
                  }

                  Ti.Alert("Without siteId!!!");
                  return _context215.abrupt("return");

                case 6:
                  // Get Back the Ticket
                  ticket = Ti.Storage.local.getString("www-ticket-".concat(siteId), ""); // Check to remote

                  commit("setLoading", true, {
                    root: true
                  }); // Current Session ...

                  reo = getters.sessionState; // Need to re-checkme from remote

                  if (!(ticket && (force || !reo.ok))) {
                    _context215.next = 13;
                    break;
                  }

                  _context215.next = 12;
                  return Ti.Http.get(getters.urls["checkme"], {
                    params: {
                      site: siteId,
                      ticket: ticket
                    },
                    as: "json"
                  });

                case 12:
                  reo = _context215.sent;

                case 13:
                  commit("setLoading", false, {
                    root: true
                  }); //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                  // success

                  if (!reo.ok) {
                    _context215.next = 36;
                    break;
                  }

                  //console.log("checkme OK", reo)
                  commit("setTicket", reo.data.ticket);
                  commit("setExpi", reo.data.expi);
                  commit("setMe", reo.data.me); // Check Phone

                  if (!nophone) {
                    _context215.next = 24;
                    break;
                  }

                  me = reo.data.me;

                  if (me.phone) {
                    _context215.next = 24;
                    break;
                  }

                  _context215.next = 23;
                  return dispatch("doAction", [nophone, reo], {
                    root: true
                  });

                case 23:
                  return _context215.abrupt("return", _context215.sent);

                case 24:
                  if (!noemail) {
                    _context215.next = 30;
                    break;
                  }

                  _me = reo.data.me;

                  if (_me.email) {
                    _context215.next = 30;
                    break;
                  }

                  _context215.next = 29;
                  return dispatch("doAction", [noemail, reo], {
                    root: true
                  });

                case 29:
                  return _context215.abrupt("return", _context215.sent);

                case 30:
                  if (!ok) {
                    _context215.next = 34;
                    break;
                  }

                  _context215.next = 33;
                  return dispatch("doAction", [ok, reo], {
                    root: true
                  });

                case 33:
                  return _context215.abrupt("return", _context215.sent);

                case 34:
                  _context215.next = 40;
                  break;

                case 36:
                  if (!fail) {
                    _context215.next = 40;
                    break;
                  }

                  _context215.next = 39;
                  return dispatch("doAction", [fail, reo], {
                    root: true
                  });

                case 39:
                  return _context215.abrupt("return", _context215.sent);

                case 40:
                case "end":
                  return _context215.stop();
              }
            }
          }, _callee214);
        }))();
      },
      //--------------------------------------------
      autoCheckmeOrAuthByWxghCode: function autoCheckmeOrAuthByWxghCode(_ref216) {
        var _arguments43 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee216() {
          var dispatch, _ref217, _ref217$codeKey, codeKey, _ref217$codeTypeBy, codeTypeBy, _ref217$force, force, fail, nophone, noemail;

          return regeneratorRuntime.wrap(function _callee216$(_context217) {
            while (1) {
              switch (_context217.prev = _context217.next) {
                case 0:
                  dispatch = _ref216.dispatch;
                  _ref217 = _arguments43.length > 1 && _arguments43[1] !== undefined ? _arguments43[1] : {}, _ref217$codeKey = _ref217.codeKey, codeKey = _ref217$codeKey === void 0 ? "code" : _ref217$codeKey, _ref217$codeTypeBy = _ref217.codeTypeBy, codeTypeBy = _ref217$codeTypeBy === void 0 ? "ct" : _ref217$codeTypeBy, _ref217$force = _ref217.force, force = _ref217$force === void 0 ? false : _ref217$force, fail = _ref217.fail, nophone = _ref217.nophone, noemail = _ref217.noemail;
                  //console.log("autoCheckmeOrAuthByWxghCode")
                  dispatch("doCheckMe", {
                    force: force,
                    fail: {
                      action: "auth/authByWxghCode",
                      payload: {
                        codeKey: codeKey,
                        codeTypeBy: codeTypeBy,
                        //......................................
                        fail: fail,
                        //......................................
                        ok: function () {
                          var _ok = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee215() {
                            var reo,
                                me,
                                _args216 = arguments;
                            return regeneratorRuntime.wrap(function _callee215$(_context216) {
                              while (1) {
                                switch (_context216.prev = _context216.next) {
                                  case 0:
                                    reo = _args216.length > 0 && _args216[0] !== undefined ? _args216[0] : {};
                                    me = reo.data;
                                    console.log("autoCheckmeOrAuthByWxghCode->ok:me", me);

                                    if (!nophone) {
                                      _context216.next = 8;
                                      break;
                                    }

                                    if (me.phone) {
                                      _context216.next = 8;
                                      break;
                                    }

                                    _context216.next = 7;
                                    return dispatch("doAction", [nophone, reo], {
                                      root: true
                                    });

                                  case 7:
                                    return _context216.abrupt("return", _context216.sent);

                                  case 8:
                                    if (!noemail) {
                                      _context216.next = 13;
                                      break;
                                    }

                                    if (me.email) {
                                      _context216.next = 13;
                                      break;
                                    }

                                    _context216.next = 12;
                                    return dispatch("doAction", [noemail, reo], {
                                      root: true
                                    });

                                  case 12:
                                    return _context216.abrupt("return", _context216.sent);

                                  case 13:
                                  case "end":
                                    return _context216.stop();
                                }
                              }
                            }, _callee215);
                          }));

                          function ok() {
                            return _ok.apply(this, arguments);
                          }

                          return ok;
                        }() //......................................

                      }
                    }
                  });

                case 3:
                case "end":
                  return _context217.stop();
              }
            }
          }, _callee216);
        }))();
      },
      //--------------------------------------------
      authByWxghCode: function authByWxghCode(_ref218) {
        var _arguments44 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee217() {
          var commit, dispatch, getters, rootState, _ref219, _ref219$codeKey, codeKey, _ref219$codeTypeBy, codeTypeBy, done, ok, fail, invalid, others, code, codeType, siteId, url, params, reo;

          return regeneratorRuntime.wrap(function _callee217$(_context218) {
            while (1) {
              switch (_context218.prev = _context218.next) {
                case 0:
                  commit = _ref218.commit, dispatch = _ref218.dispatch, getters = _ref218.getters, rootState = _ref218.rootState;
                  _ref219 = _arguments44.length > 1 && _arguments44[1] !== undefined ? _arguments44[1] : {}, _ref219$codeKey = _ref219.codeKey, codeKey = _ref219$codeKey === void 0 ? "code" : _ref219$codeKey, _ref219$codeTypeBy = _ref219.codeTypeBy, codeTypeBy = _ref219$codeTypeBy === void 0 ? "ct" : _ref219$codeTypeBy, done = _ref219.done, ok = _ref219.ok, fail = _ref219.fail, invalid = _ref219.invalid, others = _ref219.others;
                  // Guard code
                  code = rootState.page.params[codeKey];

                  if (code) {
                    _context218.next = 5;
                    break;
                  }

                  return _context218.abrupt("return");

                case 5:
                  codeType = rootState.page.params[codeTypeBy]; //console.log("authByWxghCode", {codeType, code})
                  // Guard SiteId

                  siteId = rootState.siteId;

                  if (siteId) {
                    _context218.next = 10;
                    break;
                  }

                  Ti.Alert("Without siteId!!!");
                  return _context218.abrupt("return");

                case 10:
                  // Eval URL
                  url = getters.urls["login_by_wxcode"];
                  params = {
                    site: siteId,
                    code: code,
                    ct: codeType
                  };
                  _context218.next = 14;
                  return Ti.Http.get(url, {
                    params: params,
                    as: "json"
                  });

                case 14:
                  reo = _context218.sent;
                  console.log(reo); // Callback: done

                  _context218.next = 18;
                  return dispatch("doAction", [done, reo], {
                    root: true
                  });

                case 18:
                  if (!(reo.ok && reo.data)) {
                    _context218.next = 27;
                    break;
                  }

                  // save ticket
                  Ti.Storage.local.set("www-ticket-".concat(siteId), reo.data.ticket); // Save session info

                  commit("setTicket", reo.data.ticket);
                  commit("setExpi", reo.data.expi);
                  commit("setMe", reo.data.me); // Callback

                  _context218.next = 25;
                  return dispatch("doAction", [ok, reo], {
                    root: true
                  });

                case 25:
                  _context218.next = 36;
                  break;

                case 27:
                  if (!/^e.www.login.invalid/.test(reo.errCode)) {
                    _context218.next = 32;
                    break;
                  }

                  _context218.next = 30;
                  return dispatch("doAction", [invalid, reo], {
                    root: true
                  });

                case 30:
                  _context218.next = 34;
                  break;

                case 32:
                  _context218.next = 34;
                  return dispatch("doAction", [others, reo], {
                    root: true
                  });

                case 34:
                  _context218.next = 36;
                  return dispatch("doAction", [fail, reo], {
                    root: true
                  });

                case 36:
                case "end":
                  return _context218.stop();
              }
            }
          }, _callee217);
        }))();
      },
      //--------------------------------------------
      doAuth: function doAuth(_ref220) {
        var _arguments45 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee218() {
          var _params;

          var commit, dispatch, getters, rootState, _ref221, _ref221$type, type, name, passwd, done, ok, fail, noexist, invalid, others, siteId, url, ticket, passKey, params, reo;

          return regeneratorRuntime.wrap(function _callee218$(_context219) {
            while (1) {
              switch (_context219.prev = _context219.next) {
                case 0:
                  commit = _ref220.commit, dispatch = _ref220.dispatch, getters = _ref220.getters, rootState = _ref220.rootState;
                  _ref221 = _arguments45.length > 1 && _arguments45[1] !== undefined ? _arguments45[1] : {}, _ref221$type = _ref221.type, type = _ref221$type === void 0 ? "login_by_passwd" : _ref221$type, name = _ref221.name, passwd = _ref221.passwd, done = _ref221.done, ok = _ref221.ok, fail = _ref221.fail, noexist = _ref221.noexist, invalid = _ref221.invalid, others = _ref221.others;
                  //console.log("doAuth", name, passwd)
                  // Guard SiteId
                  siteId = rootState.siteId;

                  if (siteId) {
                    _context219.next = 6;
                    break;
                  }

                  Ti.Alert("Without siteId!!!");
                  return _context219.abrupt("return");

                case 6:
                  // Eval URL
                  url = getters.urls[type]; // Prepare params

                  ticket = Ti.Storage.local.getString("www-ticket-".concat(siteId), "");
                  passKey = {
                    "login_by_passwd": "passwd",
                    "login_by_phone": "vcode",
                    "login_by_email": "vcode",
                    "bind_phone": "vcode",
                    "bind_email": "vcode"
                  }[type];

                  if (passKey) {
                    _context219.next = 11;
                    break;
                  }

                  throw "Unknown auth type: " + type;

                case 11:
                  params = (_params = {
                    site: siteId,
                    name: name
                  }, _defineProperty(_params, passKey, passwd), _defineProperty(_params, "ticket", ticket), _defineProperty(_params, "ajax", true), _params); // Call Remote

                  _context219.next = 14;
                  return Ti.Http.post(url, {
                    params: params,
                    as: "json"
                  });

                case 14:
                  reo = _context219.sent;
                  _context219.next = 17;
                  return dispatch("doAction", [done, reo], {
                    root: true
                  });

                case 17:
                  if (!(reo.ok && reo.data)) {
                    _context219.next = 26;
                    break;
                  }

                  // save ticket
                  Ti.Storage.local.set("www-ticket-".concat(siteId), reo.data.ticket); // Commit session to local

                  commit("setTicket", reo.data.ticket);
                  commit("setExpi", reo.data.expi);
                  commit("setMe", reo.data.me); // Callback

                  _context219.next = 24;
                  return dispatch("doAction", [ok, reo], {
                    root: true
                  });

                case 24:
                  _context219.next = 40;
                  break;

                case 26:
                  if (!("e.www.login.noexists" == reo.errCode)) {
                    _context219.next = 31;
                    break;
                  }

                  _context219.next = 29;
                  return dispatch("doAction", [noexist, reo], {
                    root: true
                  });

                case 29:
                  _context219.next = 38;
                  break;

                case 31:
                  if (!/^e.www.login.invalid/.test(reo.errCode)) {
                    _context219.next = 36;
                    break;
                  }

                  _context219.next = 34;
                  return dispatch("doAction", [invalid, reo], {
                    root: true
                  });

                case 34:
                  _context219.next = 38;
                  break;

                case 36:
                  _context219.next = 38;
                  return dispatch("doAction", [others, reo], {
                    root: true
                  });

                case 38:
                  _context219.next = 40;
                  return dispatch("doAction", [fail, reo], {
                    root: true
                  });

                case 40:
                case "end":
                  return _context219.stop();
              }
            }
          }, _callee218);
        }))();
      },
      //--------------------------------------------
      doGetVcode: function doGetVcode(_ref222) {
        var _arguments46 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee219() {
          var getters, dispatch, rootState, _ref223, _ref223$type, type, _ref223$scene, scene, account, captcha, done, ok, fail, error, siteId, api, url, params, reo;

          return regeneratorRuntime.wrap(function _callee219$(_context220) {
            while (1) {
              switch (_context220.prev = _context220.next) {
                case 0:
                  getters = _ref222.getters, dispatch = _ref222.dispatch, rootState = _ref222.rootState;
                  _ref223 = _arguments46.length > 1 && _arguments46[1] !== undefined ? _arguments46[1] : {}, _ref223$type = _ref223.type, type = _ref223$type === void 0 ? "login_by_phone" : _ref223$type, _ref223$scene = _ref223.scene, scene = _ref223$scene === void 0 ? "auth" : _ref223$scene, account = _ref223.account, captcha = _ref223.captcha, done = _ref223.done, ok = _ref223.ok, fail = _ref223.fail, error = _ref223.error;
                  //console.log("getVcode", {type,scene, account, captcha})
                  // Guard SiteId
                  siteId = rootState.siteId;

                  if (siteId) {
                    _context220.next = 6;
                    break;
                  }

                  Ti.Alert("Without siteId!!!");
                  return _context220.abrupt("return");

                case 6:
                  // Eval URL
                  api = {
                    "login_by_phone": "get_sms_vcode",
                    "login_by_email": "get_email_vcode",
                    "bind_phone": "get_sms_vcode",
                    "bind_email": "get_email_vcode",
                    "phone": "get_sms_vcode",
                    "email": "get_email_vcode"
                  }[type];
                  url = getters.urls[api];

                  if (!(!api || !url)) {
                    _context220.next = 12;
                    break;
                  }

                  _context220.next = 11;
                  return Ti.Toast.Open("Invalid type: ".concat(type), "error");

                case 11:
                  return _context220.abrupt("return", _context220.sent);

                case 12:
                  // Prepare params
                  params = {
                    site: siteId,
                    scene: scene,
                    account: account,
                    captcha: captcha
                  }; // Call Remote

                  _context220.prev = 13;
                  _context220.next = 16;
                  return Ti.Http.get(url, {
                    params: params,
                    as: "json"
                  });

                case 16:
                  reo = _context220.sent;

                  if (!(reo.ok && reo.data)) {
                    _context220.next = 22;
                    break;
                  }

                  _context220.next = 20;
                  return dispatch("doAction", [ok, reo], {
                    root: true
                  });

                case 20:
                  _context220.next = 24;
                  break;

                case 22:
                  _context220.next = 24;
                  return dispatch("doAction", [fail, reo], {
                    root: true
                  });

                case 24:
                  _context220.next = 36;
                  break;

                case 26:
                  _context220.prev = 26;
                  _context220.t0 = _context220["catch"](13);
                  reo = _context220.t0; // Customized error handling

                  if (!error) {
                    _context220.next = 34;
                    break;
                  }

                  _context220.next = 32;
                  return dispatch("doAction", [error, _context220.t0], {
                    root: true
                  });

                case 32:
                  _context220.next = 36;
                  break;

                case 34:
                  _context220.next = 36;
                  return Ti.Alert(_context220.t0.responseText, "error");

                case 36:
                  _context220.prev = 36;
                  _context220.next = 39;
                  return dispatch("doAction", [done, reo], {
                    root: true
                  });

                case 39:
                  return _context220.finish(36);

                case 40:
                case "end":
                  return _context220.stop();
              }
            }
          }, _callee219, null, [[13, 26, 36, 40]]);
        }))();
      },
      //--------------------------------------------
      doResetPasswd: function doResetPasswd(_ref224) {
        var _arguments47 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee220() {
          var getters, dispatch, rootState, _ref225, _ref225$scene, scene, account, vcode, newpwd, oldpwd, done, ok, fail, siteId, ticket, me, url, params, body, reo;

          return regeneratorRuntime.wrap(function _callee220$(_context221) {
            while (1) {
              switch (_context221.prev = _context221.next) {
                case 0:
                  getters = _ref224.getters, dispatch = _ref224.dispatch, rootState = _ref224.rootState;
                  _ref225 = _arguments47.length > 1 && _arguments47[1] !== undefined ? _arguments47[1] : {}, _ref225$scene = _ref225.scene, scene = _ref225$scene === void 0 ? "resetpasswd" : _ref225$scene, account = _ref225.account, vcode = _ref225.vcode, newpwd = _ref225.newpwd, oldpwd = _ref225.oldpwd, done = _ref225.done, ok = _ref225.ok, fail = _ref225.fail;
                  //console.log("doResetPasswd", {scene, account, vcode, newpwd, oldpwd})
                  // Guard SiteId
                  siteId = rootState.siteId;

                  if (siteId) {
                    _context221.next = 6;
                    break;
                  }

                  Ti.Alert("Without siteId!!!");
                  return _context221.abrupt("return");

                case 6:
                  // Guard Ticket
                  ticket = rootState.auth.ticket;
                  me = rootState.auth.me;

                  if (me) {
                    _context221.next = 11;
                    break;
                  }

                  Ti.Alert("Without Login!!!");
                  return _context221.abrupt("return");

                case 11:
                  // Eval URL
                  url = getters.urls.resetpasswd;

                  if (url) {
                    _context221.next = 15;
                    break;
                  }

                  console.error("doResetPasswd url is nil");
                  return _context221.abrupt("return");

                case 15:
                  // Prepare params
                  params = {
                    site: siteId,
                    ticket: ticket
                  };
                  body = {
                    account: account,
                    vcode: vcode,
                    newpwd: newpwd,
                    oldpwd: oldpwd
                  }; // Call Remote

                  _context221.next = 19;
                  return Ti.Http.post(url, {
                    params: params,
                    body: JSON.stringify(body),
                    as: "json"
                  })["catch"](function (_ref226) {
                    var responseText = _ref226.responseText;
                    return {
                      ok: false,
                      errCode: _.trim(responseText)
                    };
                  });

                case 19:
                  reo = _context221.sent;
                  _context221.next = 22;
                  return dispatch("doAction", [done, reo], {
                    root: true
                  });

                case 22:
                  if (!reo.ok) {
                    _context221.next = 27;
                    break;
                  }

                  _context221.next = 25;
                  return dispatch("doAction", [ok, reo], {
                    root: true
                  });

                case 25:
                  _context221.next = 29;
                  break;

                case 27:
                  _context221.next = 29;
                  return dispatch("doAction", [fail, reo], {
                    root: true
                  });

                case 29:
                case "end":
                  return _context221.stop();
              }
            }
          }, _callee220);
        }))();
      },
      //--------------------------------------------
      doLogout: function doLogout(_ref227) {
        var _arguments48 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee221() {
          var state, commit, dispatch, getters, rootState, _ref228, done, ok, fail, siteId, url, params, reo;

          return regeneratorRuntime.wrap(function _callee221$(_context222) {
            while (1) {
              switch (_context222.prev = _context222.next) {
                case 0:
                  state = _ref227.state, commit = _ref227.commit, dispatch = _ref227.dispatch, getters = _ref227.getters, rootState = _ref227.rootState;
                  _ref228 = _arguments48.length > 1 && _arguments48[1] !== undefined ? _arguments48[1] : {}, done = _ref228.done, ok = _ref228.ok, fail = _ref228.fail;
                  //console.log("doLogout")
                  // Guard SiteId
                  siteId = rootState.siteId;

                  if (siteId) {
                    _context222.next = 6;
                    break;
                  }

                  Ti.Alert("Without siteId!!!");
                  return _context222.abrupt("return");

                case 6:
                  _context222.next = 8;
                  return Ti.Confirm("i18n:auth-logout-confirm");

                case 8:
                  if (_context222.sent) {
                    _context222.next = 10;
                    break;
                  }

                  return _context222.abrupt("return");

                case 10:
                  // Always force remove
                  Ti.Storage.local.remove("www-ticket-".concat(siteId)); // No Session, ignore

                  if (getters.hasSession) {
                    _context222.next = 14;
                    break;
                  }

                  dispatch("invokeAction", fail, {
                    root: true
                  });
                  return _context222.abrupt("return");

                case 14:
                  // Eval URL
                  url = getters.urls["logout"];
                  params = {
                    site: siteId,
                    ticket: state.ticket
                  };
                  commit("setLoading", {
                    text: "i18n:logout-ing"
                  }, {
                    root: true
                  }); // Call Remote

                  _context222.next = 19;
                  return Ti.Http.get(url, {
                    params: params,
                    as: "json"
                  });

                case 19:
                  reo = _context222.sent;
                  //console.log(reo)
                  commit("setTicket", null);
                  commit("setExpi", 0);
                  commit("setMe", null);
                  commit("setLoading", false, {
                    root: true
                  }); // Callback: done

                  _context222.next = 26;
                  return dispatch("doAction", [done, reo], {
                    root: true
                  });

                case 26:
                  // Success
                  if (reo.ok) {
                    dispatch("doAction", [ok, reo], {
                      root: true
                    });
                  } // Fail 
                  else {
                      dispatch("doAction", [fail, reo], {
                        root: true
                      });
                    }

                case 27:
                case "end":
                  return _context222.stop();
              }
            }
          }, _callee221);
        }))();
      } //--------------------------------------------

    };
    Ti.Preload("ti/lib/www/mod/auth/mod-auth-actions.mjs", _M);
  })(); //============================================================
  // JOIN: mod/auth/mod-profile-actions.mjs
  //============================================================


  (function () {
    var _M = {
      //--------------------------------------------
      saveProfile: function saveProfile(_ref229) {
        var _arguments49 = arguments;
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee222() {
          var state, getters, commit, dispatch, rootState, profile, params, body, url;
          return regeneratorRuntime.wrap(function _callee222$(_context223) {
            while (1) {
              switch (_context223.prev = _context223.next) {
                case 0:
                  state = _ref229.state, getters = _ref229.getters, commit = _ref229.commit, dispatch = _ref229.dispatch, rootState = _ref229.rootState;
                  profile = _arguments49.length > 1 && _arguments49[1] !== undefined ? _arguments49[1] : {};
                  //console.log("profile", profile)
                  // Can not update email/phone/nm through this method
                  profile = _.omit(profile, "email", "phone", "nm"); // Guard Empty

                  if (!_.isEmpty(profile)) {
                    _context223.next = 5;
                    break;
                  }

                  return _context223.abrupt("return");

                case 5:
                  if (!_.isMatch(state.me, profile)) {
                    _context223.next = 7;
                    break;
                  }

                  return _context223.abrupt("return");

                case 7:
                  // Prepare http options
                  params = {
                    site: rootState.siteId,
                    ticket: state.ticket
                  };
                  body = JSON.stringify(profile);
                  commit("setLoading", true, {
                    root: true
                  }); // Send request

                  url = getters.urls.profile_save;
                  _context223.next = 13;
                  return Ti.Http.post(url, {
                    params: params,
                    body: body,
                    as: "json"
                  });

                case 13:
                  _context223.next = 15;
                  return dispatch("doCheckMe", {
                    force: true
                  });

                case 15:
                  commit("setLoading", false, {
                    root: true
                  });

                case 16:
                case "end":
                  return _context223.stop();
              }
            }
          }, _callee222);
        }))();
      } //--------------------------------------------

    };
    Ti.Preload("ti/lib/www/mod/auth/mod-profile-actions.mjs", _M);
  })(); //============================================================
  // JOIN: mod/auth/www-mod-auth.json
  //============================================================


  Ti.Preload("ti/lib/www/mod/auth/www-mod-auth.json", {
    "ticket": null,
    "expi": 0,
    "me": null,
    "profile": null,
    "countries": null,
    "countryMap": null,
    "addresses": [],
    "defaultAddr": null,
    "paths": {
      "checkme": "auth/checkme",
      "login_by_wxcode": "auth/login_by_wxcode",
      "login_by_phone": "auth/login_by_phone",
      "login_by_email": "auth/login_by_email",
      "login_by_passwd": "auth/login_by_passwd",
      "bind_phone": "auth/bind_account",
      "bind_email": "auth/bind_account",
      "get_sms_vcode": "auth/get_sms_vcode",
      "get_email_vcode": "auth/get_email_vcode",
      "check_name": "auth/check_name",
      "check_phone": "auth/check_phone",
      "logout": "auth/logout",
      "resetpasswd": "auth/resetpasswd",
      "countries": "lbs/countries",
      "addr_mine": "address/mine",
      "addr_create": "address/create",
      "addr_update": "address/update",
      "addr_delete": "address/delete",
      "profile_save": "auth/setme"
    }
  }); //============================================================
  // JOIN: mod/auth/www-mod-auth.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////
      getters: {
        //--------------------------------------------
        hasSession: function hasSession(state) {
          return !_.isEmpty(state.ticket) && state.expi > Date.now() && !_.isEmpty(state.me);
        },
        //--------------------------------------------
        sessionState: function sessionState(state, getters) {
          return {
            ok: getters.hasSession,
            data: {
              me: state.me || null,
              ticket: state.ticket || null,
              expi: state.expi || 0
            }
          };
        },
        //--------------------------------------------
        urls: function urls(state, getters, rootState, rootGetters) {
          var map = {};

          _.forEach(state.paths, function (ph, key) {
            map[key] = rootGetters.getApiUrl(ph);
          });

          return map;
        } //--------------------------------------------

      },
      ////////////////////////////////////////////////
      mutations: {
        //--------------------------------------------
        setTicket: function setTicket(state, ticket) {
          state.ticket = ticket;
        },
        //--------------------------------------------
        setExpi: function setExpi(state, expi) {
          state.expi = expi;
        },
        //--------------------------------------------
        setMe: function setMe(state, me) {
          state.me = me;
        },
        //--------------------------------------------
        setPaths: function setPaths(state, paths) {
          _.assign(state.paths, paths);
        },
        //--------------------------------------------
        mergePaths: function mergePaths(state, paths) {
          _.merge(state.paths, paths);
        },
        //--------------------------------------------
        setAddresses: function setAddresses(state, addresses) {
          state.addresses = addresses; // Get default address

          if (_.isArray(addresses)) {
            var dfta = null;

            var _iterator105 = _createForOfIteratorHelper(addresses),
                _step105;

            try {
              for (_iterator105.s(); !(_step105 = _iterator105.n()).done;) {
                var addr = _step105.value;

                if (addr.dftaddr) {
                  dfta = addr;
                  break;
                }
              }
            } catch (err) {
              _iterator105.e(err);
            } finally {
              _iterator105.f();
            }

            state.defaultAddr = dfta;
          }
        },
        //--------------------------------------------
        setCountries: function setCountries(state, countries) {
          state.countries = countries;
          var map = {};

          _.forEach(countries, function (it) {
            map[it.key] = it.name;
          });

          state.countryMap = map;
        } //--------------------------------------------

      } ////////////////////////////////////////////////

    };
    Ti.Preload("ti/lib/www/mod/auth/www-mod-auth.mjs", _M);
  })(); //============================================================
  // JOIN: mod/auth/_mod.json
  //============================================================


  Ti.Preload("ti/lib/www/mod/auth/_mod.json", {
    "name": "www-mod-auth",
    "namespaced": true,
    "state": "./www-mod-auth.json",
    "actions": ["./mod-auth-actions.mjs", "./mod-address-actions.mjs", "./mod-profile-actions.mjs"],
    "mixins": "./www-mod-auth.mjs"
  }); //============================================================
  // JOIN: mod/page/www-mod-page.json
  //============================================================

  Ti.Preload("ti/lib/www/mod/page/www-mod-page.json", {
    "className": null,
    "title": null,
    "name": null,
    "path": null,
    "pageUri": null,
    "ready": 0,
    "finger": null,
    "params": {},
    "anchor": null,
    "apis": {},
    "data": {},
    "contextMenu": true,
    "explainDataKey": [],
    "layout": {
      "desktop": {},
      "tablet": "desktop",
      "phone": "desktop"
    },
    "shown": {},
    "schema": {},
    "actions": {}
  }); //============================================================
  // JOIN: mod/page/www-mod-page.mjs
  //============================================================

  (function () {
    var _mutations;

    var _M = {
      ////////////////////////////////////////////////
      getters: {
        //--------------------------------------------
        pageLink: function pageLink(_ref230) {
          var path = _ref230.path,
              params = _ref230.params,
              anchor = _ref230.anchor;
          var link = [path]; // Join QueryString

          if (!_.isEmpty(params)) {
            var qs = [];

            _.forEach(params, function (v, k) {
              if (!Ti.Util.isNil(v)) {
                qs.push("".concat(k, "=").concat(encodeURIComponent(v)));
              }
            });

            if (!_.isEmpty(qs)) {
              link.push("?".concat(qs.join("&")));
            }
          } // Join Anchor


          if (anchor) {
            link.push("#".concat(anchor));
          }

          return link.join("");
        },
        //--------------------------------------------
        // Merget page api and the site api
        pageApis: function pageApis(state, getters, rootState, rootGetters) {
          var apiBase = rootState.apiBase || "/";
          var SiteApis = rootState.apis || {};
          var PageApis = {}; // Define the api tidy func

          var hydrateApi = function hydrateApi(key, siteApi) {
            var pageApi = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            var api = _.cloneDeep(siteApi); // Assign default value


            _.defaults(api, {
              name: key,
              method: "GET",
              headers: {},
              params: {},
              vars: {},
              as: "json"
            }); // API path is required


            if (!api.path) {
              console.warn("!!!API[".concat(key, "] without defined in site!!!"), api);
              return;
            } //..........................................
            // Merge vars


            _.assign(api.vars, pageApi.vars); //..........................................
            // Merge headers


            _.assign(api.headers, pageApi.headers); //..........................................
            // Merge params


            _.assign(api.params, pageApi.params); //..........................................
            // Absolute URL


            if ("INVOKE" != api.method) {
              if (/^(https?:\/\/|\/)/.test(api.path)) {
                api.url = api.path;
              } // Join with the apiBase
              else {
                  api.url = Ti.Util.appendPath(apiBase, api.path);
                }
            } //..........................................
            // Copy the Setting from page


            _.assign(api, _.pick(pageApi, "body", "preload", "ssr", "transformer", "dataKey", "dataMerge", "rawDataKey", "rawDataMerge")); //..........................................


            _.defaults(api, {
              bodyType: "form",
              dataKey: key
            }); //..........................................
            // Then done


            return api;
          }; // const hydrateApi = function
          // Join site apis


          _.forEach(SiteApis, function (api, key) {
            if (api.pages) {
              api = hydrateApi(key, api);

              if (api) {
                PageApis[key] = api;
              }
            }
          }); // For each api declared in current page


          _.forEach(state.apis, function (pageApi, key) {
            //..........................................
            // Get SiteApi template
            var siteApi = _.get(SiteApis, pageApi.apiName || key); //console.log(key, siteApi)


            var api = hydrateApi(key, siteApi, pageApi);

            if (api) {
              PageApis[key] = api;
            } //..........................................

          }); // _.forEach(state.apis, (info, key)=>{
          // console.log("APIs", PageApis)
          // Return page api-set


          return PageApis;
        } //--------------------------------------------

      },
      ////////////////////////////////////////////////
      mutations: (_mutations = {
        //--------------------------------------------
        set: function set(state, all) {
          _.assign(state, all);
        },
        //--------------------------------------------
        setTitle: function setTitle(state, title) {
          state.title = title;
        },
        //--------------------------------------------
        setPath: function setPath(state, path) {
          state.path = path;
        }
      }, _defineProperty(_mutations, "setPath", function setPath(state, path) {
        state.path = path;
      }), _defineProperty(_mutations, "setPageUri", function setPageUri(state, uri) {
        state.pageUri = uri;
      }), _defineProperty(_mutations, "setParams", function setParams(state, params) {
        state.params = params;
      }), _defineProperty(_mutations, "mergeParams", function mergeParams(state, params) {
        if (!_.isEmpty(params) && _.isPlainObject(params)) {
          state.params = _.merge({}, state.params, params);
        }
      }), _defineProperty(_mutations, "setData", function setData(state, data) {
        state.data = data;
      }), _defineProperty(_mutations, "updateData", function updateData(state) {
        var _ref231 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            key = _ref231.key,
            value = _ref231.value;

        // kay-value pair is required
        if (!key || _.isUndefined(value)) {
          return;
        }

        var vobj = _.set({}, key, value);

        state.data = _.assign({}, state.data, vobj);
      }), _defineProperty(_mutations, "mergeData", function mergeData(state, data) {
        if (!_.isEmpty(data) && _.isPlainObject(data)) {
          state.data = _.merge({}, state.data, data);
        }
      }), _defineProperty(_mutations, "setLayout", function setLayout(state, layout) {
        state.layout = layout;
      }), _defineProperty(_mutations, "setShown", function setShown(state, shown) {
        _.assign(state.shown, shown);
      }), _defineProperty(_mutations, "setReady", function setReady(state, ready) {
        state.ready = ready;
      }), _defineProperty(_mutations, "updateFinger", function updateFinger(state) {
        var ss = [state.path, state.params, state.anchor, state.data];
        var sha1 = Ti.Alg.sha1(ss);
        state.finger = sha1;
      }), _mutations),
      ////////////////////////////////////////////////
      actions: {
        //--------------------------------------------
        showBlock: function showBlock(_ref232, name) {
          var commit = _ref232.commit;
          commit("setShown", _defineProperty({}, name, true));
        },
        //--------------------------------------------
        hideBlock: function hideBlock(_ref233, name) {
          var commit = _ref233.commit;
          commit("setShown", _defineProperty({}, name, false));
        },
        //--------------------------------------------
        resetData: function resetData(_ref234) {
          var commit = _ref234.commit;
          var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          commit("setData", data);
        },
        //--------------------------------------------
        resetDataByKey: function resetDataByKey(_ref235) {
          var state = _ref235.state,
              commit = _ref235.commit;
          var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

          if (!_.isEmpty(data)) {
            var d2 = _.cloneDeep(state.data);

            _.forEach(data, function (v, k) {
              _.set(d2, k, v);
            });

            commit("setData", d2);
          }
        },
        //--------------------------------------------

        /***
         * Usage:
         * 
         * - OBJ: `changeData({KEY1:VAL1, KEY2:VAL2})
         * - Array: `changeData([{KEY1:VAL1}, {KEY2:VAL2}])
         * 
         * @param key{String} : the field name in "page.data", falsy for whole data
         * @param args{Object|Array} : `{name,value}` Object or Array
         */
        changeData: function changeData(_ref236, args) {
          var commit = _ref236.commit;
          var data = Ti.Util.merge({}, args);
          commit("mergeData", data);
        },
        changeParams: function changeParams(_ref237, args) {
          var commit = _ref237.commit;
          var params = Ti.Util.merge({}, args);
          commit("mergeParams", params);
          commit("updateFinger");
        },
        //--------------------------------------------

        /***
         * Mutate the data fields in params `offset`, each field
         * should be `Number`
         * 
         * @param offsets{Object} - the offset number set. "a.b.c" suppored
         */
        shiftData: function shiftData(_ref238) {
          var state = _ref238.state,
              commit = _ref238.commit;
          var offsets = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

          if (!_.isEmpty(offsets) && _.isPlainObject(offsets)) {
            var d2 = {}; // Do shift

            Ti.Util.walk(offsets, {
              leaf: function leaf(off, path) {
                var val = _.get(state.data, path); // Offset


                if (_.isNumber(val) && _.isString(off) && /^[+-][0-9.]+$/.test(off)) {
                  _.set(d2, path, val + off * 1);
                } // Others Replace
                else {
                    _.set(d2, path, off);
                  }
              }
            }); // Do Merge

            commit("mergeData", d2);
          }
        },
        //--------------------------------------------

        /***
         * Assert page data under a group of restrictions 
         */
        assertPage: function assertPage(_ref239) {
          var rootState = _ref239.rootState,
              dispatch = _ref239.dispatch;

          var _ref240 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
              _ref240$checkList = _ref240.checkList,
              checkList = _ref240$checkList === void 0 ? [] : _ref240$checkList,
              _ref240$fail = _ref240.fail,
              fail = _ref240$fail === void 0 ? {} : _ref240$fail;

          // Prepare check result
          var assertFail = false; // Loop the checkList

          var _iterator106 = _createForOfIteratorHelper(checkList),
              _step106;

          try {
            for (_iterator106.s(); !(_step106 = _iterator106.n()).done;) {
              var cl = _step106.value;

              var val = _.get(rootState, cl.target);

              if (!Ti.Validate.checkBy(cl.assert, val)) {
                assertFail = true;
                break;
              }
            } //console.log(assertFail)
            // Do Fail

          } catch (err) {
            _iterator106.e(err);
          } finally {
            _iterator106.f();
          }

          if (assertFail && fail.action) {
            dispatch("doAction", fail, {
              root: true
            });
          }
        },
        //--------------------------------------------
        scrollToTop: function scrollToTop(_ref241) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee223() {
            var state;
            return regeneratorRuntime.wrap(function _callee223$(_context224) {
              while (1) {
                switch (_context224.prev = _context224.next) {
                  case 0:
                    state = _ref241.state;
                    Ti.Be.ScrollWindowTo({
                      y: 0
                    });

                  case 2:
                  case "end":
                    return _context224.stop();
                }
              }
            }, _callee223);
          }))();
        },
        //--------------------------------------------
        doApi: function doApi(_ref242) {
          var _arguments50 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee224() {
            var getters, commit, dispatch, _ref243, key, _ref243$params, params, _ref243$vars, vars, _ref243$body, body, ok, fail, api;

            return regeneratorRuntime.wrap(function _callee224$(_context225) {
              while (1) {
                switch (_context225.prev = _context225.next) {
                  case 0:
                    getters = _ref242.getters, commit = _ref242.commit, dispatch = _ref242.dispatch;
                    _ref243 = _arguments50.length > 1 && _arguments50[1] !== undefined ? _arguments50[1] : {}, key = _ref243.key, _ref243$params = _ref243.params, params = _ref243$params === void 0 ? {} : _ref243$params, _ref243$vars = _ref243.vars, vars = _ref243$vars === void 0 ? {} : _ref243$vars, _ref243$body = _ref243.body, body = _ref243$body === void 0 ? null : _ref243$body, ok = _ref243.ok, fail = _ref243.fail;
                    //.....................................
                    api = _.get(getters.pageApis, key);
                    console.log("doApi", key, params, api); //.....................................
                    // Guard

                    if (api) {
                      _context225.next = 8;
                      break;
                    }

                    _context225.next = 7;
                    return Ti.Toast.Open("e.www.page.ApiNotFound: " + key, "warn");

                  case 7:
                    return _context225.abrupt("return", _context225.sent);

                  case 8:
                    //.......................................
                    commit("setLoading", true, {
                      root: true
                    });
                    _context225.next = 11;
                    return dispatch("__run_api", {
                      api: api,
                      params: params,
                      vars: vars,
                      body: body,
                      ok: ok,
                      fail: fail
                    });

                  case 11:
                    commit("setLoading", false, {
                      root: true
                    });

                  case 12:
                  case "end":
                    return _context225.stop();
                }
              }
            }, _callee224);
          }))();
        },
        //--------------------------------------------
        //
        // Run One Page API
        //
        //--------------------------------------------
        __run_api: function __run_api(_ref244, _ref245) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee225() {
            var commit, dispatch, rootState, api, vars, params, headers, body, ok, fail, url, vs2, options, bodyData, reo, paramsJson, ssrConf, data, trans, partial, tro, fnTrans;
            return regeneratorRuntime.wrap(function _callee225$(_context226) {
              while (1) {
                switch (_context226.prev = _context226.next) {
                  case 0:
                    commit = _ref244.commit, dispatch = _ref244.dispatch, rootState = _ref244.rootState;
                    api = _ref245.api, vars = _ref245.vars, params = _ref245.params, headers = _ref245.headers, body = _ref245.body, ok = _ref245.ok, fail = _ref245.fail;
                    //.....................................
                    // Override api
                    api = _.cloneDeep(api);

                    _.assign(api.vars, vars);

                    _.assign(api.params, params);

                    _.assign(api.headers, headers);

                    if (!Ti.Util.isNil(body)) {
                      api.body = body;
                    } //.....................................
                    // Eval url


                    _.defaults(vars, api.vars);

                    url = api.url; //.....................................
                    // Eval dynamic url

                    if (!_.isEmpty(api.vars)) {
                      vs2 = Ti.Util.explainObj(rootState, api.vars);
                      url = Ti.S.renderBy(url, vs2);
                    } //.....................................
                    // Gen the options


                    options = _.pick(api, ["method", "as"]); //options.vars = api.vars
                    //.....................................
                    // Eval headers

                    options.headers = Ti.Util.explainObj(rootState, api.headers); //.....................................
                    // Eval the params

                    options.params = Ti.Util.explainObj(rootState, api.params); //.....................................
                    // Prepare the body

                    if ("POST" == api.method && api.body) {
                      bodyData = Ti.Util.explainObj(rootState, api.body); // As JSON

                      if ("json" == api.bodyType) {
                        options.body = JSON.stringify(bodyData);
                      } // As responseText
                      else if ("text" == api.bodyType) {
                          options.body = Ti.Types.toStr(bodyData);
                        } // Default is form
                        else {
                            options.body = Ti.Http.encodeFormData(bodyData);
                          }
                    } //.....................................
                    // Join the http send Promise
                    //console.log(`will send to "${url}"`, options)


                    reo = undefined;
                    _context226.prev = 15;

                    if (!(api.method == "INVOKE")) {
                      _context226.next = 22;
                      break;
                    }

                    _context226.next = 19;
                    return dispatch(api.path, options.params, {
                      root: true
                    });

                  case 19:
                    reo = _context226.sent;
                    _context226.next = 27;
                    break;

                  case 22:
                    // Check the page local ssr cache
                    if (api.ssr && "GET" == api.method) {
                      //console.log("try", api)
                      paramsJson = JSON.stringify(options.params || {});
                      ssrConf = _.pick(options, "as");
                      ssrConf.dft = undefined;
                      ssrConf.ssrFinger = Ti.Alg.sha1(paramsJson);
                      reo = Ti.WWW.getSSRData("api-".concat(api.name), ssrConf);
                    }

                    if (!_.isUndefined(reo)) {
                      _context226.next = 27;
                      break;
                    }

                    _context226.next = 26;
                    return Ti.Http.sendAndProcess(url, options);

                  case 26:
                    reo = _context226.sent;

                  case 27:
                    _context226.next = 34;
                    break;

                  case 29:
                    _context226.prev = 29;
                    _context226.t0 = _context226["catch"](15);
                    console.warn("Fail to invoke ".concat(url), {
                      api: api,
                      url: url,
                      options: options
                    }, _context226.t0);
                    dispatch("doAction", fail, {
                      root: true
                    });
                    return _context226.abrupt("return");

                  case 34:
                    data = reo; //.....................................
                    // Eval api transformer

                    if (api.transformer) {
                      trans = _.cloneDeep(api.transformer);
                      partial = Ti.Util.fallback(trans.partial, "right"); // PreExplain args

                      if (trans.explain) {
                        tro = _.pick(trans, "name", "args");
                        trans = Ti.Util.explainObjs(rootState, tro);
                      }

                      fnTrans = Ti.Util.genInvoking(trans, {
                        context: rootState,
                        partial: partial
                      });

                      if (_.isFunction(fnTrans)) {
                        //console.log("transformer", reo)
                        data = fnTrans(reo);
                      }
                    } //.....................................
                    // Update or merge


                    if (api.dataMerge) {
                      commit("mergeData", _defineProperty({}, api.dataKey, data));
                    } // Just update
                    else if (api.dataKey) {
                        commit("updateData", {
                          key: api.dataKey,
                          value: data
                        });
                      } //.....................................
                    // Update or merge raw


                    if (api.rawDataKey) {
                      if (api.rawDataMerge) {
                        commit("mergeData", _defineProperty({}, api.rawDataKey, reo));
                      } // Just update
                      else {
                          commit("updateData", {
                            key: api.rawDataKey,
                            value: reo
                          });
                        }
                    } //.....................................
                    // All done


                    dispatch("doAction", ok, {
                      root: true
                    });

                  case 39:
                  case "end":
                    return _context226.stop();
                }
              }
            }, _callee225, null, [[15, 29]]);
          }))();
        },
        //--------------------------------------------

        /***
         * Reload page data by given api keys
         */
        reloadData: function reloadData(_ref246) {
          var _arguments51 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee226() {
            var commit, getters, dispatch, rootState, keys, isAll, apis, allApis, _iterator107, _step107, api;

            return regeneratorRuntime.wrap(function _callee226$(_context227) {
              while (1) {
                switch (_context227.prev = _context227.next) {
                  case 0:
                    commit = _ref246.commit, getters = _ref246.getters, dispatch = _ref246.dispatch, rootState = _ref246.rootState;
                    keys = _arguments51.length > 1 && _arguments51[1] !== undefined ? _arguments51[1] : [];
                    //console.log(" # -> page.reloadData", keys)
                    //.......................................
                    // The api list to reload
                    isAll = _.isEmpty(keys);
                    apis = _.filter(getters.pageApis, function (api, k) {
                      // Auto preload
                      if (isAll && api.preload > 0 || _.indexOf(keys, k) >= 0) {
                        if (api.preloadWhen) {
                          return Ti.AutoMatch.test(api.preloadWhen, rootState);
                        }

                        return true;
                      }

                      return false;
                    }); //.......................................
                    // Sort preload
                    // apis.sort((a1, a2)=>{
                    //   return a1.preload - a2.preload
                    // })
                    //.......................................
                    // Mark Loading

                    commit("setLoading", true, {
                      root: true
                    }); //.......................................
                    // Prepare the Promises

                    allApis = [];
                    _iterator107 = _createForOfIteratorHelper(apis);

                    try {
                      for (_iterator107.s(); !(_step107 = _iterator107.n()).done;) {
                        api = _step107.value;
                        //console.log("  # -> page.reloadData -> prepareApi", api)
                        allApis.push(dispatch("__run_api", {
                          api: api
                        }));
                      } //.......................................
                      // Run all

                    } catch (err) {
                      _iterator107.e(err);
                    } finally {
                      _iterator107.f();
                    }

                    _context227.next = 10;
                    return Promise.all(allApis);

                  case 10:
                    //.......................................
                    // Unmark loading
                    commit("setLoading", false, {
                      root: true
                    });
                    commit("updateFinger"); //.......................................
                    // // Get return value
                    // let reKeys = []
                    // for(let api of apis) {
                    //   reKeys.push(api.dataKey)
                    // }
                    // //.......................................
                    // return _.pick(state.data, reKeys)

                  case 12:
                  case "end":
                    return _context227.stop();
                }
              }
            }, _callee226);
          }))();
        },
        //--------------------------------------------
        explainData: function explainData(_ref247, keys) {
          var commit = _ref247.commit,
              state = _ref247.state,
              rootState = _ref247.rootState;
          keys = keys || state.explainDataKey; // Guard

          if (_.isEmpty(keys) || !_.isArray(keys)) return; // Explain one be one

          var data = {};

          var _iterator108 = _createForOfIteratorHelper(keys),
              _step108;

          try {
            for (_iterator108.s(); !(_step108 = _iterator108.n()).done;) {
              var key = _step108.value;

              var val = _.get(state.data, key);

              var v2 = Ti.Util.explainObj(rootState, val);

              _.set(data, key, v2);
            }
          } catch (err) {
            _iterator108.e(err);
          } finally {
            _iterator108.f();
          }

          commit("mergeData", data);
        },
        //--------------------------------------------

        /***
         * Reload whole page
         */
        reload: function reload(_ref248, _ref249) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee227() {
            var commit, dispatch, getters, rootGetters, path, anchor, _ref249$params, params, pinfo, _iterator109, _step109, router, json, m, jsonPath, link, page, keyGroups, afterLoadkeys, _i6, _keyGroups, keys;

            return regeneratorRuntime.wrap(function _callee227$(_context228) {
              while (1) {
                switch (_context228.prev = _context228.next) {
                  case 0:
                    commit = _ref248.commit, dispatch = _ref248.dispatch, getters = _ref248.getters, rootGetters = _ref248.rootGetters;
                    path = _ref249.path, anchor = _ref249.anchor, _ref249$params = _ref249.params, params = _ref249$params === void 0 ? {} : _ref249$params;
                    //.....................................
                    // Apply routerList
                    _iterator109 = _createForOfIteratorHelper(rootGetters.routerList);
                    _context228.prev = 3;

                    _iterator109.s();

                  case 5:
                    if ((_step109 = _iterator109.n()).done) {
                      _context228.next = 12;
                      break;
                    }

                    router = _step109.value;
                    pinfo = router(path);

                    if (!(pinfo && pinfo.path)) {
                      _context228.next = 10;
                      break;
                    }

                    return _context228.abrupt("break", 12);

                  case 10:
                    _context228.next = 5;
                    break;

                  case 12:
                    _context228.next = 17;
                    break;

                  case 14:
                    _context228.prev = 14;
                    _context228.t0 = _context228["catch"](3);

                    _iterator109.e(_context228.t0);

                  case 17:
                    _context228.prev = 17;

                    _iterator109.f();

                    return _context228.finish(17);

                  case 20:
                    if (!(!pinfo || !pinfo.path)) {
                      _context228.next = 24;
                      break;
                    }

                    _context228.next = 23;
                    return Ti.Toast.Open("Page ${path} not found!", {
                      type: "error",
                      position: "center",
                      vars: {
                        path: path
                      }
                    });

                  case 23:
                    return _context228.abrupt("return", _context228.sent);

                  case 24:
                    //.....................................
                    // Notify: init
                    //console.log("@page:init ...")
                    commit("setReady", 0);
                    _context228.next = 27;
                    return dispatch("invokeAction", {
                      name: "@page:init"
                    }, {
                      root: true
                    });

                  case 27:
                    //.....................................
                    // Load the page json
                    json = Ti.WWW.getSSRData("page-json", {
                      as: "json"
                    });

                    if (json) {
                      _context228.next = 34;
                      break;
                    }

                    m = /^([^.]+)(\.html?)?$/.exec(pinfo.path);
                    jsonPath = m[1] + ".json";
                    _context228.next = 33;
                    return Ti.Load("@Site:".concat(jsonPath));

                  case 33:
                    json = _context228.sent;

                  case 34:
                    //.....................................
                    // merge info
                    if (anchor) {
                      pinfo.anchor = anchor;
                    }

                    pinfo.params = _.merge({}, pinfo.params, params);
                    pinfo.path = pinfo.path || path;
                    pinfo.name = Ti.Util.getMajorName(pinfo.path); //.....................................
                    // Update Path url

                    link = Ti.Util.Link({
                      url: path,
                      params: params,
                      anchor: anchor
                    });
                    pinfo.pageUri = link.toString(); //.....................................

                    page = _.merge({
                      "className": null,
                      "title": null,
                      "apis": {},
                      "data": {},
                      "contextMenu": true,
                      "explainDataKey": [],
                      "layout": {},
                      "params": {},
                      "shown": {},
                      "schema": {},
                      "actions": {}
                    }, json, pinfo); //.....................................
                    // Update page 

                    commit("set", page); //console.log(" #### page.loaded", _.cloneDeep(page))
                    //.....................................
                    // Notify: Prepare
                    //console.log("@page:prepare ...")

                    commit("setReady", 1);
                    _context228.next = 45;
                    return dispatch("invokeAction", {
                      name: "@page:prepare"
                    }, {
                      root: true
                    });

                  case 45:
                    //.....................................
                    // Conclude the api loading keys
                    keyGroups = [];
                    afterLoadkeys = []; // After page loaded, those api should be load

                    _.forEach(getters.pageApis, function (api, k) {
                      var preload = api.preload; // Considering preload=true

                      if (_.isBoolean(preload)) {
                        if (!preload) {
                          return;
                        }

                        preload = 1;
                      } // Preload before display


                      if (_.isNumber(preload)) {
                        if (preload >= 0) {
                          var keys = _.nth(keyGroups, preload);

                          if (!_.isArray(keys)) {
                            keys = [];
                            keyGroups[preload] = keys;
                          }

                          keys.push(k);
                        } // After page load
                        else {
                            afterLoadkeys.push(k);
                          }
                      }
                    }); //console.log(keyGroups)
                    //.....................................
                    // init: data


                    _i6 = 0, _keyGroups = keyGroups;

                  case 49:
                    if (!(_i6 < _keyGroups.length)) {
                      _context228.next = 57;
                      break;
                    }

                    keys = _keyGroups[_i6];

                    if (_.isEmpty(keys)) {
                      _context228.next = 54;
                      break;
                    }

                    _context228.next = 54;
                    return dispatch("reloadData", keys);

                  case 54:
                    _i6++;
                    _context228.next = 49;
                    break;

                  case 57:
                    _context228.next = 59;
                    return dispatch("explainData");

                  case 59:
                    //.....................................
                    // Scroll window to top
                    dispatch("scrollToTop"); //.....................................
                    // Notify: Ready
                    //console.log("@page:ready ...")

                    commit("setReady", 2);
                    _context228.next = 63;
                    return dispatch("invokeAction", {
                      name: "@page:ready"
                    }, {
                      root: true
                    });

                  case 63:
                    //.....................................
                    // Load the after page api
                    if (afterLoadkeys.length > 0) {
                      dispatch("reloadData", afterLoadkeys);
                    } //.....................................


                  case 64:
                  case "end":
                    return _context228.stop();
                }
              }
            }, _callee227, null, [[3, 14, 17, 20]]);
          }))();
        } //--------------------------------------------

      } ////////////////////////////////////////////////

    };
    Ti.Preload("ti/lib/www/mod/page/www-mod-page.mjs", _M);
  })(); //============================================================
  // JOIN: mod/page/_mod.json
  //============================================================


  Ti.Preload("ti/lib/www/mod/page/_mod.json", {
    "name": "www-mod-page",
    "namespaced": true,
    "state": "./www-mod-page.json",
    "mixins": "./www-mod-page.mjs"
  }); //============================================================
  // JOIN: mod/shop/www-mod-shop.json
  //============================================================

  Ti.Preload("ti/lib/www/mod/shop/www-mod-shop.json", {
    "basket": [],
    "payment": null,
    "paths": {
      "buyIt": "entity/buy/it",
      "buyRemove": "entity/buy/rm",
      "buyGetAll": "entity/buy/all",
      "buyClean": "entity/buy/clean",
      "objs": "objs",
      "buy": "pay/buy",
      "pay": "pay/pay",
      "checkOrder": "pay/check",
      "fetchOrder": "pay/order"
    }
  }); //============================================================
  // JOIN: mod/shop/www-mod-shop.mjs
  //============================================================

  (function () {
    var _M = {
      ////////////////////////////////////////////////
      getters: {
        //--------------------------------------------
        urls: function urls(state, getters, rootState, rootGetters) {
          var map = {};

          _.forEach(state.paths, function (ph, key) {
            map[key] = rootGetters.getApiUrl(ph);
          });

          return map;
        } //--------------------------------------------

      },
      ////////////////////////////////////////////////
      mutations: {
        //--------------------------------------------
        appendBasket: function appendBasket(state, buyIt) {
          state.basket = _.concat(state.basket, buyIt);
        },
        //--------------------------------------------
        setBasket: function setBasket(state) {
          var buyIts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
          state.basket = buyIts;
        },
        //--------------------------------------------
        setPayment: function setPayment(state, pay) {
          state.payment = pay;
        },
        //--------------------------------------------
        setPaths: function setPaths(state, paths) {
          state.paths = _.cloneDeep(paths);
        },
        //--------------------------------------------
        mergePaths: function mergePaths(state, paths) {
          _.assign(state.paths, paths);
        } //--------------------------------------------

      },
      ////////////////////////////////////////////////
      actions: {
        //--------------------------------------------
        fetchOrder: function fetchOrder(_ref250) {
          var _arguments52 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee228() {
            var getters, rootState, _ref251, orderId, reo;

            return regeneratorRuntime.wrap(function _callee228$(_context229) {
              while (1) {
                switch (_context229.prev = _context229.next) {
                  case 0:
                    getters = _ref250.getters, rootState = _ref250.rootState;
                    _ref251 = _arguments52.length > 1 && _arguments52[1] !== undefined ? _arguments52[1] : {}, orderId = _ref251.orderId;

                    if (orderId) {
                      _context229.next = 4;
                      break;
                    }

                    return _context229.abrupt("return");

                  case 4:
                    _context229.next = 6;
                    return Ti.Http.get(getters.urls.fetchOrder, {
                      params: {
                        ticket: rootState.auth.ticket,
                        id: orderId
                      },
                      as: "json"
                    });

                  case 6:
                    reo = _context229.sent;

                    if (!reo.ok) {
                      _context229.next = 11;
                      break;
                    }

                    return _context229.abrupt("return", reo.data);

                  case 11:
                    console.warn("Fail to loadOrder", {
                      items: items,
                      reo: reo
                    });

                  case 12:
                  case "end":
                    return _context229.stop();
                }
              }
            }, _callee228);
          }))();
        },
        //--------------------------------------------
        payOrder: function payOrder(_ref252) {
          var _arguments53 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee229() {
            var getters, rootState, _ref253, orderId, payType, reo;

            return regeneratorRuntime.wrap(function _callee229$(_context230) {
              while (1) {
                switch (_context230.prev = _context230.next) {
                  case 0:
                    getters = _ref252.getters, rootState = _ref252.rootState;
                    _ref253 = _arguments53.length > 1 && _arguments53[1] !== undefined ? _arguments53[1] : {}, orderId = _ref253.orderId, payType = _ref253.payType;

                    if (orderId) {
                      _context230.next = 4;
                      break;
                    }

                    return _context230.abrupt("return");

                  case 4:
                    _context230.next = 6;
                    return Ti.Http.get(getters.urls.pay, {
                      params: {
                        ticket: rootState.auth.ticket,
                        id: orderId,
                        pt: payType
                      },
                      as: "json"
                    });

                  case 6:
                    reo = _context230.sent;

                    if (!reo.ok) {
                      _context230.next = 11;
                      break;
                    }

                    return _context230.abrupt("return", reo.data);

                  case 11:
                    console.warn("Fail to payOrder", {
                      items: items,
                      reo: reo
                    });

                  case 12:
                  case "end":
                    return _context230.stop();
                }
              }
            }, _callee229);
          }))();
        },
        //--------------------------------------------
        createOrder: function createOrder(_ref254) {
          var _arguments54 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee230() {
            var getters, rootState, _ref255, payType, items, orderType, orderTitle, address, fail, postObj, reo, txt, msg;

            return regeneratorRuntime.wrap(function _callee230$(_context231) {
              while (1) {
                switch (_context231.prev = _context231.next) {
                  case 0:
                    getters = _ref254.getters, rootState = _ref254.rootState;
                    _ref255 = _arguments54.length > 1 && _arguments54[1] !== undefined ? _arguments54[1] : {}, payType = _ref255.payType, items = _ref255.items, orderType = _ref255.orderType, orderTitle = _ref255.orderTitle, address = _ref255.address, fail = _ref255.fail;

                    if (!(!payType || _.isEmpty(items))) {
                      _context231.next = 4;
                      break;
                    }

                    return _context231.abrupt("return");

                  case 4:
                    // Prepare the post obj
                    postObj = {
                      title: orderTitle,
                      tp: orderType,
                      pay_tp: payType,
                      products: items // Address

                    };

                    if (address) {
                      postObj.addr_user_country = _.get(address, "country");
                      postObj.addr_user_code = _.get(address, "code");
                      postObj.addr_user_door = _.get(address, "door");
                      postObj.user_name = _.get(address, "consignee");
                      postObj.user_phone = _.get(address, "phone");
                      postObj.user_email = _.get(address, "email");
                      postObj.addr_user_province = _.get(address, "province");
                      postObj.addr_user_city = _.get(address, "city");
                      postObj.addr_user_area = _.get(address, "area");
                      postObj.addr_user_street = _.get(address, "street");
                    }

                    _context231.prev = 6;
                    _context231.next = 9;
                    return Ti.Http.post(getters.urls.buy, {
                      params: {
                        ticket: rootState.auth.ticket
                      },
                      headers: {
                        "Content-Type": "application/json;charset=utf-8"
                      },
                      body: JSON.stringify(postObj),
                      as: "json"
                    });

                  case 9:
                    reo = _context231.sent;

                    if (!reo.ok) {
                      _context231.next = 14;
                      break;
                    }

                    return _context231.abrupt("return", reo.data);

                  case 14:
                    console.warn("Fail to createOrder", {
                      items: items,
                      reo: reo
                    });

                  case 15:
                    _context231.next = 23;
                    break;

                  case 17:
                    _context231.prev = 17;
                    _context231.t0 = _context231["catch"](6);
                    txt = _.trim(_context231.t0.responseText);
                    msg = Ti.I18n.explain(txt);
                    Ti.Toast.Open(msg, 'error');

                    if (_.isFunction(fail)) {
                      fail(msg);
                    }

                  case 23:
                  case "end":
                    return _context231.stop();
                }
              }
            }, _callee230, null, [[6, 17]]);
          }))();
        },
        //--------------------------------------------
        checkOrder: function checkOrder(_ref256, orderId) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee231() {
            var getters, rootState, reo;
            return regeneratorRuntime.wrap(function _callee231$(_context232) {
              while (1) {
                switch (_context232.prev = _context232.next) {
                  case 0:
                    getters = _ref256.getters, rootState = _ref256.rootState;
                    console.log("checkOrder");

                    if (orderId) {
                      _context232.next = 4;
                      break;
                    }

                    return _context232.abrupt("return");

                  case 4:
                    _context232.next = 6;
                    return Ti.Http.get(getters.urls.checkOrder, {
                      params: {
                        ticket: rootState.auth.ticket,
                        id: orderId
                      },
                      as: "json"
                    });

                  case 6:
                    reo = _context232.sent;

                    if (!reo.ok) {
                      _context232.next = 11;
                      break;
                    }

                    return _context232.abrupt("return", reo.data);

                  case 11:
                    console.warn("Fail to checkOrder", {
                      items: items,
                      reo: reo
                    });

                  case 12:
                  case "end":
                    return _context232.stop();
                }
              }
            }, _callee231);
          }))();
        },
        //--------------------------------------------

        /***
         * Load a group of item by `urls.objs`, and set the result
         * to `Store` by `@commitTarget` and `commitDataKey`
         * 
         * @param items{Array}: each element is string, whicn in form
         * `AMOUNT:ID` like `"4:4r..7a"`
         * 
         * @param commitDataKey{String} after loaded, which key in `page.data`
         * should be updated
         * @param commitTarget{String} after loaded, where to update
         */
        loadBuyItems: function loadBuyItems(_ref257, _ref258) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee232() {
            var getters, commit, _ref258$items, items, _ref258$commitDataKey, commitDataKey, _ref258$commitTarget, commitTarget, ids, amounts, reo, its;

            return regeneratorRuntime.wrap(function _callee232$(_context233) {
              while (1) {
                switch (_context233.prev = _context233.next) {
                  case 0:
                    getters = _ref257.getters, commit = _ref257.commit;
                    _ref258$items = _ref258.items, items = _ref258$items === void 0 ? [] : _ref258$items, _ref258$commitDataKey = _ref258.commitDataKey, commitDataKey = _ref258$commitDataKey === void 0 ? "goods" : _ref258$commitDataKey, _ref258$commitTarget = _ref258.commitTarget, commitTarget = _ref258$commitTarget === void 0 ? "page/updateData" : _ref258$commitTarget;
                    console.log("loadBuyItems", items); // Gether ids

                    ids = [];
                    amounts = {};

                    _.forEach(items, function (it) {
                      var m = /^(\d+):(.+)$/.exec(it);

                      if (m) {
                        var amount = m[1] * 1;
                        var id = m[2];

                        if (id && amount > 0) {
                          ids.push("id:".concat(id));
                          amounts[id] = amount;
                        }
                      }
                    }); // Guard


                    if (!_.isEmpty(ids)) {
                      _context233.next = 8;
                      break;
                    }

                    return _context233.abrupt("return");

                  case 8:
                    _context233.next = 10;
                    return Ti.Http.get(getters.urls.objs, {
                      params: {
                        phs: ids.join(" ")
                      },
                      as: "json"
                    });

                  case 10:
                    reo = _context233.sent;

                    // OK
                    if (reo.ok) {
                      its = [];

                      _.forEach(reo.data, function (obj) {
                        var id = obj.id;
                        var amount = amounts[id];
                        its.push({
                          id: id,
                          amount: amount,
                          obj: obj
                        });
                      });

                      commit(commitTarget, {
                        key: commitDataKey,
                        value: its
                      }, {
                        root: true
                      });
                    } // Fail
                    else {
                        console.warn("Fail to loadBuyItems", {
                          items: items,
                          reo: reo
                        });
                      }

                  case 12:
                  case "end":
                    return _context233.stop();
                }
              }
            }, _callee232);
          }))();
        },
        //--------------------------------------------
        checkoutItems: function checkoutItems(_ref259) {
          var _arguments55 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee233() {
            var dispatch, _ref260, _ref260$items, items, _ref260$checkoutPage, checkoutPage, _ref260$newtab, newtab, _ref260$orderType, orderType, orderTitle, list;

            return regeneratorRuntime.wrap(function _callee233$(_context234) {
              while (1) {
                switch (_context234.prev = _context234.next) {
                  case 0:
                    dispatch = _ref259.dispatch;
                    _ref260 = _arguments55.length > 1 && _arguments55[1] !== undefined ? _arguments55[1] : {}, _ref260$items = _ref260.items, items = _ref260$items === void 0 ? [] : _ref260$items, _ref260$checkoutPage = _ref260.checkoutPage, checkoutPage = _ref260$checkoutPage === void 0 ? "page/shop/checkout.html" : _ref260$checkoutPage, _ref260$newtab = _ref260.newtab, newtab = _ref260$newtab === void 0 ? false : _ref260$newtab, _ref260$orderType = _ref260.orderType, orderType = _ref260$orderType === void 0 ? "A" : _ref260$orderType, orderTitle = _ref260.orderTitle;
                    // Prepare the list
                    list = [];

                    _.forEach(items, function (it) {
                      if (it.id && it.amount > 0) {
                        list.push(_.pick(it, "id", "amount"));
                      }
                    }); // Do the checkout


                    if (_.isEmpty(items)) {
                      _context234.next = 9;
                      break;
                    }

                    _context234.next = 7;
                    return dispatch("checkout", {
                      items: items,
                      checkoutPage: checkoutPage,
                      newtab: newtab,
                      orderType: orderType,
                      orderTitle: orderTitle
                    });

                  case 7:
                    _context234.next = 10;
                    break;

                  case 9:
                    console.warn("!checkoutItems: Empty Item List!");

                  case 10:
                  case "end":
                    return _context234.stop();
                }
              }
            }, _callee233);
          }))();
        },
        //--------------------------------------------
        checkoutBasket: function checkoutBasket(_ref261) {
          var _arguments56 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee234() {
            var state, dispatch, _ref262, _ref262$checkedNames, checkedNames, _ref262$checkoutPage, checkoutPage, _ref262$newtab, newtab, items;

            return regeneratorRuntime.wrap(function _callee234$(_context235) {
              while (1) {
                switch (_context235.prev = _context235.next) {
                  case 0:
                    state = _ref261.state, dispatch = _ref261.dispatch;
                    _ref262 = _arguments56.length > 1 && _arguments56[1] !== undefined ? _arguments56[1] : {}, _ref262$checkedNames = _ref262.checkedNames, checkedNames = _ref262$checkedNames === void 0 ? {} : _ref262$checkedNames, _ref262$checkoutPage = _ref262.checkoutPage, checkoutPage = _ref262$checkoutPage === void 0 ? "page/shop/checkout.html" : _ref262$checkoutPage, _ref262$newtab = _ref262.newtab, newtab = _ref262$newtab === void 0 ? false : _ref262$newtab;
                    // Prepare the list
                    items = [];

                    _.forEach(state.basket, function (it) {
                      if (it.name && it.count > 0 && (!checkedNames || checkedNames[it.name])) {
                        items.push({
                          id: it.name,
                          amount: it.count
                        });
                      }
                    }); // Nil to buy


                    if (!_.isEmpty(items)) {
                      _context235.next = 7;
                      break;
                    }

                    Ti.Toast.Open('i18n:buy-checkout-nil', "warn");
                    return _context235.abrupt("return");

                  case 7:
                    if (_.isEmpty(items)) {
                      _context235.next = 12;
                      break;
                    }

                    _context235.next = 10;
                    return dispatch("checkout", {
                      items: items,
                      checkoutPage: checkoutPage,
                      newtab: newtab
                    });

                  case 10:
                    _context235.next = 13;
                    break;

                  case 12:
                    console.warn("!checkoutBasket: Empty Basket");

                  case 13:
                  case "end":
                    return _context235.stop();
                }
              }
            }, _callee234);
          }))();
        },
        //--------------------------------------------

        /***
         * @param items{Array} - Array with item `{id:xxx, amount:1}`
         */
        checkout: function checkout(_ref263) {
          var _arguments57 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee235() {
            var dispatch, rootGetters, _ref264, _ref264$items, items, _ref264$checkoutPage, checkoutPage, _ref264$newtab, newtab, _ref264$orderType, orderType, orderTitle, its, params, url;

            return regeneratorRuntime.wrap(function _callee235$(_context236) {
              while (1) {
                switch (_context236.prev = _context236.next) {
                  case 0:
                    dispatch = _ref263.dispatch, rootGetters = _ref263.rootGetters;
                    _ref264 = _arguments57.length > 1 && _arguments57[1] !== undefined ? _arguments57[1] : {}, _ref264$items = _ref264.items, items = _ref264$items === void 0 ? [] : _ref264$items, _ref264$checkoutPage = _ref264.checkoutPage, checkoutPage = _ref264$checkoutPage === void 0 ? "page/shop/checkout.html" : _ref264$checkoutPage, _ref264$newtab = _ref264.newtab, newtab = _ref264$newtab === void 0 ? false : _ref264$newtab, _ref264$orderType = _ref264.orderType, orderType = _ref264$orderType === void 0 ? "A" : _ref264$orderType, orderTitle = _ref264.orderTitle;
                    //console.log("checkout", items)
                    // encode the items as params
                    its = [];

                    _.forEach(items, function (it) {
                      if (it.id && it.amount > 0) its.push("".concat(it.amount, ":").concat(it.id));
                    }); // Guard


                    if (!_.isEmpty(its)) {
                      _context236.next = 7;
                      break;
                    }

                    console.warn("!checkout: Empty Item");
                    return _context236.abrupt("return");

                  case 7:
                    // Params
                    params = {
                      its: its.join(","),
                      tp: orderType,
                      ot: orderTitle
                    }; // Open page in new tab

                    if (!newtab) {
                      _context236.next = 14;
                      break;
                    }

                    url = rootGetters.getUrl(checkoutPage);
                    _context236.next = 12;
                    return dispatch("openUrl", {
                      url: url,
                      target: "_blank",
                      params: params
                    }, {
                      root: true
                    });

                  case 12:
                    _context236.next = 16;
                    break;

                  case 14:
                    _context236.next = 16;
                    return dispatch("navTo", {
                      value: checkoutPage,
                      params: params
                    }, {
                      root: true
                    });

                  case 16:
                  case "end":
                    return _context236.stop();
                }
              }
            }, _callee235);
          }))();
        },
        //--------------------------------------------

        /***
         * @param id{String} - Product ID
         * @param n{Integer} - Product buy count, 1 as default
         * @param reset{Boolean} If true, `n` will be take as the final buy count.
         *  else if false, `n` will be take as increasment. Of cause, 
         *  negative `n` will cause the decreasment.
         */
        updateBasket: function updateBasket(_ref265) {
          var _arguments58 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee236() {
            var commit, dispatch, getters, rootState, _ref266, id, _ref266$n, n, _ref266$reset, reset, success, fail, invalid, noTicket, ticket, reo;

            return regeneratorRuntime.wrap(function _callee236$(_context237) {
              while (1) {
                switch (_context237.prev = _context237.next) {
                  case 0:
                    commit = _ref265.commit, dispatch = _ref265.dispatch, getters = _ref265.getters, rootState = _ref265.rootState;
                    _ref266 = _arguments58.length > 1 && _arguments58[1] !== undefined ? _arguments58[1] : {}, id = _ref266.id, _ref266$n = _ref266.n, n = _ref266$n === void 0 ? 1 : _ref266$n, _ref266$reset = _ref266.reset, reset = _ref266$reset === void 0 ? false : _ref266$reset, success = _ref266.success, fail = _ref266.fail, invalid = _ref266.invalid, noTicket = _ref266.noTicket;
                    console.log("shop:addToBasket", {
                      id: id,
                      success: success,
                      fail: fail
                    }); //..........................................
                    // N is 0, do nothing

                    if (!(n === 0 && !reset)) {
                      _context237.next = 5;
                      break;
                    }

                    return _context237.abrupt("return");

                  case 5:
                    //..........................................
                    // Guard Ticket
                    ticket = rootState.auth.ticket;

                    if (ticket) {
                      _context237.next = 15;
                      break;
                    }

                    if (!noTicket) {
                      _context237.next = 13;
                      break;
                    }

                    _context237.next = 10;
                    return dispatch(noTicket.action, noTicket.payload, {
                      root: true
                    });

                  case 10:
                    return _context237.abrupt("return", _context237.sent);

                  case 13:
                    Ti.Alert("Without Session Ticket!!!");
                    return _context237.abrupt("return");

                  case 15:
                    if (id) {
                      _context237.next = 24;
                      break;
                    }

                    if (!invalid) {
                      _context237.next = 22;
                      break;
                    }

                    _context237.next = 19;
                    return dispatch(invalid.action, invalid.payload, {
                      root: true
                    });

                  case 19:
                    return _context237.abrupt("return", _context237.sent);

                  case 22:
                    Ti.Alert("Without Product ID!!!");
                    return _context237.abrupt("return");

                  case 24:
                    if (!(reset && n <= 0)) {
                      _context237.next = 29;
                      break;
                    }

                    _context237.next = 27;
                    return Ti.Confirm("i18n:shop-basket-remove-confirm");

                  case 27:
                    if (_context237.sent) {
                      _context237.next = 29;
                      break;
                    }

                    return _context237.abrupt("return");

                  case 29:
                    //..........................................
                    // Check to remote
                    commit("setLoading", true, {
                      root: true
                    }); //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

                    _context237.next = 32;
                    return Ti.Http.get(getters.urls.buyIt, {
                      params: {
                        ticket: ticket,
                        id: id,
                        n: n,
                        r: reset
                      },
                      as: "json"
                    });

                  case 32:
                    reo = _context237.sent;

                    if (!reo.ok) {
                      _context237.next = 40;
                      break;
                    }

                    commit("setBasket", reo.data); // Success

                    if (!success) {
                      _context237.next = 38;
                      break;
                    }

                    _context237.next = 38;
                    return dispatch(success.action, success.payload, {
                      root: true
                    });

                  case 38:
                    _context237.next = 46;
                    break;

                  case 40:
                    if (!fail) {
                      _context237.next = 45;
                      break;
                    }

                    _context237.next = 43;
                    return dispatch(fail.action, fail.payload, {
                      root: true
                    });

                  case 43:
                    _context237.next = 46;
                    break;

                  case 45:
                    console.warn("shop.updateBasket fail:", reo);

                  case 46:
                    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    commit("setLoading", false, {
                      root: true
                    });

                  case 47:
                  case "end":
                    return _context237.stop();
                }
              }
            }, _callee236);
          }))();
        },
        //--------------------------------------------
        cleanBasket: function cleanBasket(_ref267) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee237() {
            var commit, getters, rootState, ticket, reo;
            return regeneratorRuntime.wrap(function _callee237$(_context238) {
              while (1) {
                switch (_context238.prev = _context238.next) {
                  case 0:
                    commit = _ref267.commit, getters = _ref267.getters, rootState = _ref267.rootState;
                    console.log("shop:cleanBasket"); //..........................................
                    // Guard Ticket

                    ticket = rootState.auth.ticket;

                    if (ticket) {
                      _context238.next = 5;
                      break;
                    }

                    return _context238.abrupt("return");

                  case 5:
                    _context238.next = 7;
                    return Ti.Confirm("i18n:shop-basket-clean-confirm");

                  case 7:
                    if (_context238.sent) {
                      _context238.next = 9;
                      break;
                    }

                    return _context238.abrupt("return");

                  case 9:
                    //..........................................
                    // Check to remote
                    commit("setLoading", true, {
                      root: true
                    }); // Current Session ...

                    _context238.next = 12;
                    return Ti.Http.get(getters.urls.buyClean, {
                      params: {
                        ticket: ticket
                      },
                      as: "json"
                    });

                  case 12:
                    reo = _context238.sent;
                    commit("setLoading", false, {
                      root: true
                    }); //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    // success

                    if (reo.ok) {
                      commit("setBasket", []);
                    } //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    // Fail
                    else {
                        console.error("www/shop module: Fail to reloadBasket", reo);
                      } //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


                  case 15:
                  case "end":
                    return _context238.stop();
                }
              }
            }, _callee237);
          }))();
        },
        //--------------------------------------------
        reloadBasket: function reloadBasket(_ref268) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee238() {
            var commit, getters, rootState, ticket, reo;
            return regeneratorRuntime.wrap(function _callee238$(_context239) {
              while (1) {
                switch (_context239.prev = _context239.next) {
                  case 0:
                    commit = _ref268.commit, getters = _ref268.getters, rootState = _ref268.rootState;
                    //console.log("shop:reloadBasket")
                    //..........................................
                    // Guard Ticket
                    ticket = rootState.auth.ticket;

                    if (ticket) {
                      _context239.next = 4;
                      break;
                    }

                    return _context239.abrupt("return");

                  case 4:
                    //..........................................
                    // Check to remote
                    commit("setLoading", true, {
                      root: true
                    }); // Current Session ...

                    _context239.next = 7;
                    return Ti.Http.get(getters.urls.buyGetAll, {
                      params: {
                        ticket: ticket
                      },
                      as: "json"
                    });

                  case 7:
                    reo = _context239.sent;
                    commit("setLoading", false, {
                      root: true
                    }); //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    // success

                    if (reo.ok) {
                      commit("setBasket", reo.data);
                    } //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                    // Fail
                    else {
                        console.error("www/shop module: Fail to reloadBasket", reo);
                      } //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


                  case 10:
                  case "end":
                    return _context239.stop();
                }
              }
            }, _callee238);
          }))();
        } //--------------------------------------------

      } // actions : {
      ////////////////////////////////////////////////

    };
    Ti.Preload("ti/lib/www/mod/shop/www-mod-shop.mjs", _M);
  })(); //============================================================
  // JOIN: mod/shop/_mod.json
  //============================================================


  Ti.Preload("ti/lib/www/mod/shop/_mod.json", {
    "name": "www-mod-shop",
    "namespaced": true,
    "state": "./www-mod-shop.json",
    "mixins": "./www-mod-shop.mjs"
  }); //============================================================
  // JOIN: mod/www-mod-site.mjs
  //============================================================

  (function () {
    var _M = {
      /////////////////////////////////////////
      getters: {
        //--------------------------------------------
        // Pre-compiled Site Routers
        routerList: function routerList(state) {
          var list = [];

          _.forEach(state.router, function () {
            var _ref269 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                match = _ref269.match,
                _ref269$names = _ref269.names,
                names = _ref269$names === void 0 ? [] : _ref269$names,
                _ref269$page = _ref269.page,
                page = _ref269$page === void 0 ? {} : _ref269$page;

            var regex = new RegExp(match); // Pre-compiled

            var li = function li(path) {
              var m = regex.exec(path); // Match page

              if (m) {
                // Build Context
                var context = {};

                for (var i = 0; i < m.length; i++) {
                  var val = m[i];
                  context[i] = val;

                  var key = _.nth(names, i);

                  if (key) {
                    _.set(context, key, val);
                  }
                } // Render page info


                return Ti.Util.explainObj(context, page);
              }
            }; // Join to list


            list.push(li);
          });

          return list;
        },
        //--------------------------------------------
        // Site Action Mapping
        actions: function actions(state) {
          //console.log("www-mod-site::getters.actions")
          // Global
          var map = _.cloneDeep(state.actions); // Evalue the actions


          map = _.mapValues(map, function (val) {
            return _.isString(val) ? {
              action: val
            } : val;
          }); // Merge action set with the defination in page

          var page = state.page;

          if (page) {
            _.forEach(page.actions, function (val, key) {
              var act = val; // format val

              if (_.isString(val)) {
                act = {
                  action: val
                };
              } // do merge


              var gAction = map[key]; // Array+?

              if (_.isArray(gAction)) {
                // Array+Array
                if (_.isArray(act)) {
                  if (act.length > 0) {
                    // Concat Array
                    if ("+" == act[0]) {
                      for (var z = 1; z < act.length; z++) {
                        gAction.push(act[z]);
                      }
                    } // Replace Array
                    else {
                        map[key] = act;
                      }
                  }
                } // Array+Object -> append
                else {
                    gAction.push(act);
                  }
              } // Object+Any -> replace
              else {
                  map[key] = act;
                }
            });
          }

          return map;
        },
        //--------------------------------------------
        getUrl: function getUrl(state) {
          return function (path) {
            return Ti.Util.appendPath(state.base, path);
          };
        },
        //--------------------------------------------
        getApiUrl: function getApiUrl(state) {
          return function (path) {
            if (path.startsWith("/")) {
              return path;
            }

            return Ti.Util.appendPath(state.apiBase, path);
          };
        } //--------------------------------------------

      },
      /////////////////////////////////////////
      mutations: {
        //--------------------------------------------
        setSiteId: function setSiteId(state, siteId) {
          state.siteId = siteId;
        },
        //--------------------------------------------
        setDomain: function setDomain(state, domain) {
          state.domain = domain;
          state.base = Ti.S.renderBy(state.base || "/www/${domain}/", {
            domain: domain
          });
          state.apiBase = Ti.S.renderBy(state.apiBase || "/api/${domain}/", {
            domain: domain
          });
        },
        //--------------------------------------------
        setLoading: function setLoading(state, loading) {
          state.loading = loading;
        } //--------------------------------------------

      },
      /////////////////////////////////////////
      actions: {
        //--------------------------------------------
        navBackward: function navBackward() {
          if (window.history) {
            window.history.back();
          }
        },
        //--------------------------------------------
        openUrl: function openUrl(_ref270, _ref271) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee239() {
            var state, url, _ref271$target, target, _ref271$method, method, _ref271$params, params, _ref271$delay, delay;

            return regeneratorRuntime.wrap(function _callee239$(_context240) {
              while (1) {
                switch (_context240.prev = _context240.next) {
                  case 0:
                    state = _ref270.state;
                    url = _ref271.url, _ref271$target = _ref271.target, target = _ref271$target === void 0 ? "_self" : _ref271$target, _ref271$method = _ref271.method, method = _ref271$method === void 0 ? "GET" : _ref271$method, _ref271$params = _ref271.params, params = _ref271$params === void 0 ? {} : _ref271$params, _ref271$delay = _ref271.delay, delay = _ref271$delay === void 0 ? 0 : _ref271$delay;
                    _context240.next = 4;
                    return Ti.Be.Open(url, {
                      target: target,
                      method: method,
                      params: params,
                      delay: delay
                    });

                  case 4:
                  case "end":
                    return _context240.stop();
                }
              }
            }, _callee239);
          }))();
        },
        //--------------------------------------------
        // Only handle the "page|dispatch"
        navTo: function navTo(_ref272) {
          var _arguments59 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee240() {
            var commit, dispatch, _ref273, _ref273$type, type, value, anchor, data, params, href;

            return regeneratorRuntime.wrap(function _callee240$(_context241) {
              while (1) {
                switch (_context241.prev = _context241.next) {
                  case 0:
                    commit = _ref272.commit, dispatch = _ref272.dispatch;
                    _ref273 = _arguments59.length > 1 && _arguments59[1] !== undefined ? _arguments59[1] : {}, _ref273$type = _ref273.type, type = _ref273$type === void 0 ? "page" : _ref273$type, value = _ref273.value, anchor = _ref273.anchor, data = _ref273.data, params = _ref273.params;

                    if (value) {
                      _context241.next = 4;
                      break;
                    }

                    return _context241.abrupt("return");

                  case 4:
                    if (!("page" == type)) {
                      _context241.next = 15;
                      break;
                    }

                    commit("setLoading", true); // maybe value is  full url with query string and hash

                    href = Ti.Util.parseHref(value);
                    href.anchor = anchor || href.anchor;
                    href.params = params || href.params;
                    href.data = data; // Reload
                    //console.log("@page:reload ...", _.cloneDeep(state.auth))

                    _context241.next = 12;
                    return dispatch("page/reload", href);

                  case 12:
                    commit("setLoading", false);
                    _context241.next = 18;
                    break;

                  case 15:
                    if (!("dispatch" == type)) {
                      _context241.next = 18;
                      break;
                    }

                    _context241.next = 18;
                    return dispatch(value, params);

                  case 18:
                  case "end":
                    return _context241.stop();
                }
              }
            }, _callee240);
          }))();
        },
        //--------------------------------------------

        /***
         * Handle the action dispatching.
         * 
         * One action should be defined in `[page].json#actions`:
         * 
         * ```js
         * {
         *    action : "xx/xx",
         *    payload : {} | [] | ...
         * }
         * ```
         * 
         * @param action{String} - action name like `page/showBlock`
         * @param payload{Object|Array} - action payload, defined in `json` file
         * @param args{Array} - the dynamic information emitted by `[Com].$emit`
         * 
         * @return {void}
         */
        doAction: function doAction(_ref274, AT) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee241() {
            var state, dispatch, actn, args, _iterator110, _step110, an, _iterator111, _step111, a;

            return regeneratorRuntime.wrap(function _callee241$(_context242) {
              while (1) {
                switch (_context242.prev = _context242.next) {
                  case 0:
                    state = _ref274.state, dispatch = _ref274.dispatch;

                    if (AT) {
                      _context242.next = 3;
                      break;
                    }

                    return _context242.abrupt("return");

                  case 3:
                    if (!_.isFunction(AT)) {
                      _context242.next = 7;
                      break;
                    }

                    _context242.next = 6;
                    return AT();

                  case 6:
                    return _context242.abrupt("return", _context242.sent);

                  case 7:
                    //....................................
                    // Combo: [F(), args] or [{action}, args]
                    //....................................
                    if (_.isArray(AT) && AT.length == 2) {
                      actn = AT[0];
                      args = AT[1];

                      if (!_.isUndefined(args) && !_.isArray(args)) {
                        args = [args];
                      }

                      if (_.isFunction(actn)) {
                        AT = {
                          action: actn,
                          args: args
                        };
                      } // Grouping Action
                      else if (_.isArray(actn)) {
                          AT = [];
                          _iterator110 = _createForOfIteratorHelper(actn);

                          try {
                            for (_iterator110.s(); !(_step110 = _iterator110.n()).done;) {
                              an = _step110.value;
                              AT.push(_.assign({}, an, {
                                args: args
                              }));
                            }
                          } catch (err) {
                            _iterator110.e(err);
                          } finally {
                            _iterator110.f();
                          }
                        } // Merge
                        else {
                            AT = _.assign({}, actn, {
                              args: args
                            });
                          }
                    } //....................................
                    // String


                    if (_.isString(AT)) {
                      AT = {
                        action: AT
                      };
                    } //....................................
                    // Groupping


                    if (!_.isArray(AT)) {
                      _context242.next = 29;
                      break;
                    }

                    _iterator111 = _createForOfIteratorHelper(AT);
                    _context242.prev = 11;

                    _iterator111.s();

                  case 13:
                    if ((_step111 = _iterator111.n()).done) {
                      _context242.next = 19;
                      break;
                    }

                    a = _step111.value;
                    _context242.next = 17;
                    return dispatch("runAction", a);

                  case 17:
                    _context242.next = 13;
                    break;

                  case 19:
                    _context242.next = 24;
                    break;

                  case 21:
                    _context242.prev = 21;
                    _context242.t0 = _context242["catch"](11);

                    _iterator111.e(_context242.t0);

                  case 24:
                    _context242.prev = 24;

                    _iterator111.f();

                    return _context242.finish(24);

                  case 27:
                    _context242.next = 31;
                    break;

                  case 29:
                    _context242.next = 31;
                    return dispatch("runAction", AT);

                  case 31:
                  case "end":
                    return _context242.stop();
                }
              }
            }, _callee241, null, [[11, 21, 24, 27]]);
          }))();
        },
        //--------------------------------------------
        runAction: function runAction(_ref275) {
          var _arguments60 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee242() {
            var state, dispatch, _ref276, action, payload, args, pld, context;

            return regeneratorRuntime.wrap(function _callee242$(_context243) {
              while (1) {
                switch (_context243.prev = _context243.next) {
                  case 0:
                    state = _ref275.state, dispatch = _ref275.dispatch;
                    _ref276 = _arguments60.length > 1 && _arguments60[1] !== undefined ? _arguments60[1] : {}, action = _ref276.action, payload = _ref276.payload, args = _ref276.args;

                    if (action) {
                      _context243.next = 4;
                      break;
                    }

                    return _context243.abrupt("return");

                  case 4:
                    args = args || []; //....................................

                    // Use args directrly cause payload without defined
                    if (_.isUndefined(payload) || _.isNull(payload)) {
                      pld = _.cloneDeep(_.nth(args, 0));
                    } //....................................
                    // Explain payload
                    else {
                        context = _.assign({}, state, {
                          $args: args
                        });
                        pld = Ti.Util.explainObj(context, payload, {
                          evalFunc: false
                        });
                      } //....................................
                    //console.log("invoke->", action, pld)
                    //....................................


                    if (!_.isFunction(action)) {
                      _context243.next = 11;
                      break;
                    }

                    _context243.next = 9;
                    return action(pld);

                  case 9:
                    _context243.next = 13;
                    break;

                  case 11:
                    _context243.next = 13;
                    return dispatch(action, pld);

                  case 13:
                  case "end":
                    return _context243.stop();
                }
              }
            }, _callee242);
          }))();
        },
        //--------------------------------------------

        /***
         * Invoke action by given name
         */
        invokeAction: function invokeAction(_ref277) {
          var _arguments61 = arguments;
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee243() {
            var getters, dispatch, _ref278, _ref278$name, name, _ref278$args, args, actions, AT, canNames, _canNames, _canNames2, names, aName, _iterator112, _step112, a;

            return regeneratorRuntime.wrap(function _callee243$(_context244) {
              while (1) {
                switch (_context244.prev = _context244.next) {
                  case 0:
                    getters = _ref277.getters, dispatch = _ref277.dispatch;
                    _ref278 = _arguments61.length > 1 && _arguments61[1] !== undefined ? _arguments61[1] : {}, _ref278$name = _ref278.name, name = _ref278$name === void 0 ? "" : _ref278$name, _ref278$args = _ref278.args, args = _ref278$args === void 0 ? [] : _ref278$args;

                    /*
                    The action should like
                    {
                      action : "xx/xx",
                      payload : {} | [] | ...
                    } 
                    */
                    actions = getters.actions;
                    AT = _.get(actions, name); // Try fallback

                    if (AT) {
                      _context244.next = 15;
                      break;
                    }

                    canNames = _.split(name, "::");

                  case 6:
                    if (!(canNames.length > 1)) {
                      _context244.next = 15;
                      break;
                    }

                    _canNames = canNames, _canNames2 = _toArray(_canNames), names = _canNames2.slice(1);
                    aName = names.join("::");
                    AT = _.get(actions, aName);

                    if (!AT) {
                      _context244.next = 12;
                      break;
                    }

                    return _context244.abrupt("break", 15);

                  case 12:
                    canNames = names;
                    _context244.next = 6;
                    break;

                  case 15:
                    if (AT) {
                      _context244.next = 17;
                      break;
                    }

                    return _context244.abrupt("return");

                  case 17:
                    _context244.prev = 17;

                    if (!_.isArray(AT)) {
                      _context244.next = 38;
                      break;
                    }

                    _iterator112 = _createForOfIteratorHelper(AT);
                    _context244.prev = 20;

                    _iterator112.s();

                  case 22:
                    if ((_step112 = _iterator112.n()).done) {
                      _context244.next = 28;
                      break;
                    }

                    a = _step112.value;
                    _context244.next = 26;
                    return dispatch("doAction", {
                      action: a.action,
                      payload: a.payload,
                      args: args
                    });

                  case 26:
                    _context244.next = 22;
                    break;

                  case 28:
                    _context244.next = 33;
                    break;

                  case 30:
                    _context244.prev = 30;
                    _context244.t0 = _context244["catch"](20);

                    _iterator112.e(_context244.t0);

                  case 33:
                    _context244.prev = 33;

                    _iterator112.f();

                    return _context244.finish(33);

                  case 36:
                    _context244.next = 45;
                    break;

                  case 38:
                    if (!_.isString(AT)) {
                      _context244.next = 43;
                      break;
                    }

                    _context244.next = 41;
                    return dispatch("doAction", {
                      action: AT,
                      args: args
                    });

                  case 41:
                    _context244.next = 45;
                    break;

                  case 43:
                    _context244.next = 45;
                    return dispatch("doAction", {
                      action: AT.action,
                      payload: AT.payload,
                      args: args
                    });

                  case 45:
                    _context244.next = 50;
                    break;

                  case 47:
                    _context244.prev = 47;
                    _context244.t1 = _context244["catch"](17);
                    console.error(_context244.t1);

                  case 50:
                  case "end":
                    return _context244.stop();
                }
              }
            }, _callee243, null, [[17, 47], [20, 30, 33, 36]]);
          }))();
        },
        //--------------------------------------------
        reload: function reload(_ref279) {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee244() {
            var state, commit, dispatch, loc, entry;
            return regeneratorRuntime.wrap(function _callee244$(_context245) {
              while (1) {
                switch (_context245.prev = _context245.next) {
                  case 0:
                    state = _ref279.state, commit = _ref279.commit, dispatch = _ref279.dispatch;
                    //console.log("site.reload", state.entry, state.base)
                    // Merge Site FuncSet
                    //console.log(state.utils)
                    // Init the base/apiBase
                    // Looking for the entry page
                    // {href,protocol,host,port,path,search,query,hash,anchor}
                    loc = Ti.Util.parseHref(window.location.href); // Update the auth

                    commit("auth/mergePaths", state.authPaths); // Eval the entry page

                    entry = state.entry;

                    if (loc.path.startsWith(state.base)) {
                      entry = loc.path.substring(state.base.length) || entry;
                    } // nav to page


                    _context245.next = 7;
                    return dispatch("navTo", {
                      type: "page",
                      value: entry,
                      params: loc.params,
                      anchor: loc.hash,
                      pushHistory: false
                    });

                  case 7:
                  case "end":
                    return _context245.stop();
                }
              }
            }, _callee244);
          }))();
        } //--------------------------------------------

      } /////////////////////////////////////////

    };
    Ti.Preload("ti/lib/www/mod/www-mod-site.mjs", _M);
  })(); //============================================================
  // JOIN: cheap-markdown.mjs
  //============================================================
  //============================================================
  // JOIN: wn.manager/gui/layout.json
  //============================================================


  Ti.Preload("/a/load/wn.manager/gui/layout.json", {
    "desktop": {
      "type": "rows",
      "border": true,
      "blocks": [{
        "name": "sky",
        "size": 48,
        "type": "rows",
        "border": true,
        "blocks": [{
          "type": "cols",
          "blocks": [{
            "name": "logo",
            "size": "auto",
            "body": "pcSkyLogo"
          }, {
            "name": "title",
            "size": "stretch",
            "body": "pcSkyTitle"
          }, {
            "name": "session",
            "size": "auto",
            "body": "pcSkySession"
          }, {
            "name": "menu",
            "size": "auto",
            "body": "pcSkyMenu"
          }]
        }]
      }, {
        "name": "main",
        "size": "100px",
        "flex": "both",
        "type": "cols",
        "border": true,
        "blocks": [{
          "name": "sidebar",
          "size": "1.8rem",
          "body": "pcMainSideBar"
        }, {
          "name": "arena",
          "size": "stretch",
          "body": "pcMainArena"
        }]
      }, {
        "name": "footer",
        "size": ".32rem",
        "body": "pcFooter"
      }]
    },
    "tablet": "desktop",
    "phone": "desktop"
  }); //============================================================
  // JOIN: wn.manager/gui/schema.json
  //============================================================

  Ti.Preload("/a/load/wn.manager/gui/schema.json", {
    "pcSkyLogo": {
      "comType": "ti-icon",
      "comConf": {
        "width": "3em",
        "fontSize": "1.5em",
        "value": "=Logo"
      }
    },
    "pcSkyTitle": {
      "comType": "ti-crumb",
      "comConf": "=Crumb"
    },
    "pcSkySession": {
      "comType": "wn-session-badge",
      "comConf": "=SessionBadge"
    },
    "pcSkyMenu": {
      "comType": "ti-actionbar",
      "comConf": "=ActionMenu"
    },
    "pcMainSideBar": {
      "comType": "wn-gui-side-nav",
      "comConf": {
        "items": "=sidebar",
        "highlightItemId": "=MetaId",
        "highlightItemPath": "=MetaPath"
      }
    },
    "pcMainArena": {
      "comType": "=comType",
      "comConf": "=Arena"
    },
    "pcFooter": {
      "comType": "wn-gui-footer",
      "comConf": "=Footer"
    }
  }); //============================================================
  // JOIN: wn.manager/gui/setup.json
  //============================================================

  Ti.Preload("/a/load/wn.manager/gui/setup.json", {
    "shown": {
      "desktop": {
        "logo": "==theLogo",
        "menu": "==theMenu",
        "sessionBadge": "==theSessionBadge"
      },
      "tablet": {},
      "phone": {}
    },
    "canLoading": true,
    "loadingAs": false,
    "firstCrumbIndex": 1,
    "logo": "<:home>"
  }); //============================================================
  // JOIN: wn.manager/wn-manager-computed.mjs
  //============================================================

  (function () {
    var _M = {
      //.........................................
      Logo: function Logo() {
        if ("<:home>" == this.setup.logo) {
          var crIt = _.nth(this.CrumbData, 0);

          return crIt ? crIt.icon : null;
        } // Then it is the static icon


        return this.setup.logo;
      },
      //.........................................
      CrumbData: function CrumbData() {
        var _this288 = this;

        return Wn.Obj.evalCrumbData({
          meta: this.meta,
          ancestors: this.ancestors,
          fromIndex: this.setup.firstCrumbIndex,
          homePath: this.setup.skyHomePath,
          self: function self(item) {
            item.asterisk = _this288.isChanged;
          }
        });
      },
      //.........................................
      Crumb: function Crumb() {
        var crumbs = _.cloneDeep(this.CrumbData); // Remove the first one for grace look


        if (this.Logo && !_.isEmpty(crumbs)) {
          crumbs[0].icon = null;
        }

        return {
          data: crumbs
        };
      },
      //.........................................
      SessionBadge: function SessionBadge() {
        var me = _.get(this.session, "me");

        if (me) {
          return {
            me: me,
            avatarKey: "thumb",
            avatarSrc: null,
            loginIcon: me.sex == 1 ? "im-user-male" : "im-user-female",
            nameKeys: "nickname|nm"
          };
        }
      },
      //.........................................
      ActionMenu: function ActionMenu() {
        if (_.isArray(this.actions) && !_.isEmpty(this.actions)) {
          return {
            className: "wn-".concat(this.viewportMode, "-menu"),
            items: this.actions,
            status: this.TheStatus,
            delay: 500
          };
        }
      },
      //.........................................
      Arena: function Arena() {
        if (this.hasView) {
          // explain comConf
          //console.log("re-arena", this.comConf)
          // prepare the vars
          var app = Ti.App(this);
          var comConf = Ti.Util.explainObj(this, this.comConf) || {
            meta: this.meta,
            content: this.content,
            data: this.data,
            status: this.status
          }; //let actions = this.actions
          // Add init hook to store the $main

          comConf.onInit = function () {
            //console.log("onInit:", this.tiComId)
            app.$vmMain(this);
          }; // Done


          return comConf;
        }
      },
      //.........................................
      Footer: function Footer() {
        return {
          infoIcon: this.comIcon,
          infoText: this.comType,
          message: this.myMessage || this.StatusText,
          indicator: this.myIndicator
        };
      } //.........................................

    };
    Ti.Preload("/a/load/wn.manager/wn-manager-computed.mjs", _M);
  })(); //============================================================
  // JOIN: wn.manager/wn-manager-methods.mjs
  //============================================================


  (function () {
    var _M = {
      //.........................................
      reloadMain: function reloadMain() {
        var _this289 = this;

        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee245() {
          var meta, m, viewName, cmdText, viewInfo, $app, view;
          return regeneratorRuntime.wrap(function _callee245$(_context246) {
            while (1) {
              switch (_context246.prev = _context246.next) {
                case 0:
                  // Check meta
                  meta = _this289.meta;

                  if (meta) {
                    _context246.next = 5;
                    break;
                  }

                  _context246.next = 4;
                  return Ti.Toast.Open("i18n:wn-manager-no-meta", "warn");

                case 4:
                  return _context246.abrupt("return", _context246.sent);

                case 5:
                  if (!_this289.isLoading) {
                    _context246.next = 10;
                    break;
                  }

                  console.log("!!!");
                  _context246.next = 9;
                  return Ti.Toast.Open("i18n:wn-manager-is-loading", "warn");

                case 9:
                  return _context246.abrupt("return", _context246.sent);

                case 10:
                  // Mark loading
                  _this289.loading = true;
                  _this289.comType = "ti-loading";
                  _this289.comConf = {};
                  _context246.prev = 13;

                  //....................................
                  // then try to unregisterModule safely
                  if (_this289.view && _this289.view.modType) {
                    try {
                      _this289.$store.unregisterModule("main");
                    } catch (E) {
                      console.error("Error when unregisterModule", E);
                    }
                  } //..................................
                  // Get back the viewName from hash
                  // User can use `#!text-editor` to force open any view


                  m = /^#!(.+)$/.exec(window.location.hash);
                  viewName = m ? m[1] : null; //..................................
                  // Prepare to read view detail from server

                  if (viewName) {
                    cmdText = "ti views -cqn -name '".concat(viewName, "'");
                  } // Query by current object
                  else {
                      cmdText = "ti views -cqn id:".concat(meta.id);
                    } //..................................
                  // Load the main view


                  _context246.next = 20;
                  return Wn.Sys.exec2(cmdText, {
                    as: "json"
                  });

                case 20:
                  viewInfo = _context246.sent;
                  $app = Ti.App(_this289);
                  _context246.next = 24;
                  return $app.loadView(viewInfo);

                case 24:
                  view = _context246.sent;

                  //..................................
                  if (Ti.IsInfo("app/wn.manager")) {
                    console.log("TiView Loaded:", view);
                  } //..................................
                  // register main module


                  if (!(view && view.modType)) {
                    _context246.next = 30;
                    break;
                  }

                  //console.log("load main!!!")
                  _this289.$store.registerModule("main", view.mod);

                  _context246.next = 30;
                  return $app.dispatch("main/reload", meta);

                case 30:
                  //..................................
                  _this289.comType = view.comName;
                  _this289.comIcon = view.comIcon;
                  _this289.comConf = view.comConf;
                  _this289.view = view;
                  _this289.myMessage = null;
                  _this289.myIndicator = null;

                  _this289.OnUpdateActions(view.actions);

                case 37:
                  _context246.prev = 37;
                  _this289.loading = false;
                  return _context246.finish(37);

                case 40:
                case "end":
                  return _context246.stop();
              }
            }
          }, _callee245, null, [[13,, 37, 40]]);
        }))();
      },
      //.........................................
      reloadAncestors: function reloadAncestors() {
        var _this290 = this;

        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee246() {
          return regeneratorRuntime.wrap(function _callee246$(_context247) {
            while (1) {
              switch (_context247.prev = _context247.next) {
                case 0:
                  if (!_this290.hasMeta) {
                    _context247.next = 5;
                    break;
                  }

                  _context247.next = 3;
                  return Wn.Io.loadAncestors("id:" + _this290.MetaId);

                case 3:
                  _this290.ancestors = _context247.sent;
                  _this290.parent = _.last(_this290.ancestors);

                case 5:
                case "end":
                  return _context247.stop();
              }
            }
          }, _callee246);
        }))();
      },
      //.........................................
      reloadSidebar: function reloadSidebar() {
        var _this291 = this;

        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee247() {
          var reo;
          return regeneratorRuntime.wrap(function _callee247$(_context248) {
            while (1) {
              switch (_context248.prev = _context248.next) {
                case 0:
                  _context248.next = 2;
                  return Wn.Sys.exec("ti sidebar -cqn", {
                    as: "json"
                  });

                case 2:
                  reo = _context248.sent;
                  _this291.sidebar = reo.sidebar;

                case 4:
                case "end":
                  return _context248.stop();
              }
            }
          }, _callee247);
        }))();
      },
      //.........................................
      pushHistory: function pushHistory(meta) {
        // Push history to update the browser address bar
        var his = window.history;

        if (his && meta) {
          // Done push duplicate state
          if (his.state && his.state.id == meta.id) {
            return;
          } // Push to history stack


          var newLink = Wn.Util.getAppLink(meta.id);
          var title = Wn.Util.getObjDisplayName(meta);

          if (Ti.IsInfo("app/wn-manager")) {
            console.log(title, "->", newLink);
          }

          his.pushState(meta, title, newLink); // Update the Title

          document.title = Ti.I18n.text(title);
        }
      } //.........................................

    };
    Ti.Preload("/a/load/wn.manager/wn-manager-methods.mjs", _M);
  })(); //============================================================
  // JOIN: wn.manager/wn-manager.html
  //============================================================


  Ti.Preload("/a/load/wn.manager/wn-manager.html", "<ti-gui\n  class=\"wn-manager\"\n  :class=\"TopClass\"\n  :layout=\"GuiLayout\"\n  :schema=\"GuiSchema\"\n  :shown=\"GuiShown\"\n  :can-loading=\"GuiCanLoading\"\n  :loading-as=\"GuiLoadingAs\"\n  @arena::expose-hidden=\"OnExposeHidden\"\n  @do:logout=\"OnLogout\"\n  @item:active=\"OnCurrentMetaChange\"\n  @arena::open=\"OnCurrentMetaChange\"\n  @arena::change=\"OnCurrentDataChange\"\n  @arena::actions:update=\"OnUpdateActions\"\n  @arena::indicate=\"OnArenaIndicate\"\n  @arena::message=\"OnArenaMessage\"/>"); //============================================================
  // JOIN: wn.manager/wn-manager.mjs
  //============================================================

  (function () {
    var _M = {
      ///////////////////////////////////////////
      provide: function provide() {
        return {
          $session: {
            ticket: this.session.ticket,
            userId: this.session.uid,
            userName: this.session.unm,
            group: this.session.grp
          },
          $vars: this.vars
        };
      },
      ///////////////////////////////////////////
      data: function data() {
        return {
          myExposeHidden: false,
          loading: false,
          comIcon: "zmdi-hourglass-alt",
          comType: "ti-loading",
          comConf: {},
          actions: [],
          sidebar: [],
          // Current meta anestors
          ancestors: [],
          parent: null,
          // Current view(main) information
          view: null,
          // Message and Indicator
          myMessage: null,
          myIndicator: null
        };
      },
      ///////////////////////////////////////////
      computed: {
        //---------------------------------------
        TopClass: function TopClass() {
          return this.getTopClass({
            "is-current-as-home": this.CurrentIsHome,
            "is-current-no-home": !this.CurrentIsHome
          }, this.appClassName);
        },
        //---------------------------------------
        // Status
        //---------------------------------------
        isLoading: function isLoading() {
          return this.loading || this.isReloading;
        },
        //---------------------------------------
        isChanged: function isChanged() {
          var modMain = this.$store.state.main;

          if (_.get(modMain, "status.changed")) {
            return true;
          }

          return _.get(this.status, "changed");
        },
        //---------------------------------------
        isSaving: function isSaving() {
          return _.get(this.status, "saving");
        },
        isReloading: function isReloading() {
          return _.get(this.status, "reloading");
        },
        //---------------------------------------
        hasActions: function hasActions() {
          return !_.isEmpty(this.actions);
        },
        hasView: function hasView() {
          return this.view ? true : false;
        },
        hasMeta: function hasMeta() {
          return this.meta ? true : false;
        },
        hasParent: function hasParent() {
          return this.parent ? true : false;
        },
        //---------------------------------------
        // Data
        //---------------------------------------
        MetaId: function MetaId() {
          return _.get(this.meta, "id");
        },
        MetaPath: function MetaPath() {
          return _.get(this.meta, "ph");
        },
        //---------------------------------------
        MyHome: function MyHome() {
          var obj = this.meta;
          var ans = this.ancestors;

          if (!_.isEmpty(ans)) {
            // for /home/xiaobai
            if (1 == ans.length) {
              if ("home" == ans[0].nm) {
                return obj;
              }
            } // for /home/xiaobai/path/to/file


            if ("home" == ans[0].nm) {
              return ans[1];
            }
          } // for /root
          else if (obj && "root" == obj.nm) {
              return obj;
            } // Dont't known how to find the home


          return null;
        },
        //---------------------------------------
        MyHomeId: function MyHomeId() {
          return _.get(this.MyHome, "id");
        },
        //---------------------------------------
        ParentIsHome: function ParentIsHome() {
          return this.hasParent && this.parent.id == this.MyHomeId;
        },
        //---------------------------------------
        CurrentIsHome: function CurrentIsHome() {
          return this.hasMeta && this.MetaId == this.MyHomeId;
        },
        //---------------------------------------
        // Tipping
        //---------------------------------------
        TheStatus: function TheStatus() {
          var mainStatus = _.get(this.$store.state, "main.status");

          var reloading = _.get(mainStatus, "reloading") || this.status.reloading;
          return _.assign({}, mainStatus, this.status, {
            exposeHidden: this.myExposeHidden,
            changed: this.isChanged,
            reloading: reloading
          });
        },
        StatusText: function StatusText() {
          var st = _.assign({}, this.status);

          if (st.saving) {
            return Ti.I18n.text("i18n:saving");
          }

          if (st.reloading) {
            return Ti.I18n.text("i18n:loading");
          }
        },
        //---------------------------------------
        // Main Module
        //---------------------------------------
        Main: function Main() {
          return this.$store.state.main;
        },
        //---------------------------------------
        // GUI
        //---------------------------------------
        GuiShown: function GuiShown() {
          var ShownSet = _.get(this.setup, "shown");

          if (_.isPlainObject(ShownSet)) {
            var shown = ShownSet[this.viewportMode]; // Refer onece

            if (_.isString(shown)) {
              shown = ShownSet[shown];
            } // Refer twice (I think it is enough for most of cases)


            if (_.isString(shown)) {
              shown = ShownSet[shown];
            }

            return Ti.Util.explainObj(this, shown);
          }

          return {};
        },
        //---------------------------------------
        GuiCanLoading: function GuiCanLoading() {
          return _.get(this.setup, "canLoading");
        },
        //---------------------------------------
        GuiLoadingAs: function GuiLoadingAs() {
          return _.get(this.setup, "loadingAs");
        },
        //---------------------------------------
        GuiLayout: function GuiLayout() {
          return Ti.Util.explainObj(this, this.layout);
        },
        //---------------------------------------
        GuiSchema: function GuiSchema() {
          return Ti.Util.explainObj(this, this.schema);
        } //---------------------------------------

      },
      ///////////////////////////////////////////
      methods: {
        //--------------------------------------
        OnExposeHidden: function OnExposeHidden(eh) {
          this.myExposeHidden = eh;
        },
        //--------------------------------------
        OnLogout: function OnLogout() {
          this.doLogout();
        },
        //--------------------------------------
        OnCurrentMetaChange: function OnCurrentMetaChange() {
          var _ref280 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              id = _ref280.id,
              path = _ref280.path,
              value = _ref280.value;

          this.openView(id || path || value);
        },
        //--------------------------------------
        OnCurrentDataChange: function OnCurrentDataChange(data) {
          Ti.App(this).dispatch("current/changeContent", data);
        },
        //--------------------------------------
        OnUpdateActions: function OnUpdateActions(actions) {
          //console.log("OnUpdateAction", actions)
          this.actions = _.cloneDeep(actions);
          Ti.App(this).reWatchShortcut(actions);
        },
        //--------------------------------------
        OnArenaIndicate: function OnArenaIndicate(info) {
          this.myIndicator = info;
        },
        //--------------------------------------
        OnArenaMessage: function OnArenaMessage() {
          var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
          this.myMessage = msg;
        },
        //--------------------------------------
        doCheckDomainObjThumb: function doCheckDomainObjThumb() {
          var domain = Wn.Session.getMyGroup();
          var cmdText = "hookx @query 'd0:\"home\",d1:\"".concat(domain, "\",thumb_src:null,mime:\"^image\"' @invoke write -v");
          Wn.OpenCmdPanel(cmdText);
        },
        //--------------------------------------
        openView: function openView(oid) {
          var _this292 = this;

          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee248() {
            var bombed, ph;
            return regeneratorRuntime.wrap(function _callee248$(_context249) {
              while (1) {
                switch (_context249.prev = _context249.next) {
                  case 0:
                    if (_.isString(oid)) {
                      _context249.next = 2;
                      break;
                    }

                    return _context249.abrupt("return");

                  case 2:
                    _context249.next = 4;
                    return Ti.Fuse.fire();

                  case 4:
                    bombed = _context249.sent;

                    if (bombed) {
                      _context249.next = 7;
                      break;
                    }

                    return _context249.abrupt("return");

                  case 7:
                    // Open It
                    ph = Wn.Io.isFullObjId(oid) ? "id:".concat(oid) : oid;
                    _context249.next = 10;
                    return Ti.App(_this292).dispatch("current/reload", ph);

                  case 10:
                  case "end":
                    return _context249.stop();
                }
              }
            }, _callee248);
          }))();
        },
        //--------------------------------------
        doLogout: function doLogout() {
          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee249() {
            var quitPath, reo;
            return regeneratorRuntime.wrap(function _callee249$(_context250) {
              while (1) {
                switch (_context250.prev = _context250.next) {
                  case 0:
                    quitPath = Wn.Session.env("QUIT") || "/a/login/";
                    _context250.next = 3;
                    return Ti.Http.get("/a/sys_logout", {
                      params: {
                        ajax: true
                      }
                    });

                  case 3:
                    reo = _context250.sent;
                    console.log(reo);
                    Ti.Be.Open(quitPath, {
                      target: "_self",
                      delay: 0
                    });

                  case 6:
                  case "end":
                    return _context250.stop();
                }
              }
            }, _callee249);
          }))();
        } //--------------------------------------

      },
      //////////////////////////////////////////////
      watch: {
        "meta": function () {
          var _meta = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee250(newVal, oldVal) {
            var newId, oldId, isSameId;
            return regeneratorRuntime.wrap(function _callee250$(_context251) {
              while (1) {
                switch (_context251.prev = _context251.next) {
                  case 0:
                    newId = _.get(newVal, "id");
                    oldId = _.get(oldVal, "id");
                    isSameId = _.isEqual(newId, oldId);

                    if (!newVal) {
                      _context251.next = 11;
                      break;
                    }

                    if (isSameId) {
                      _context251.next = 7;
                      break;
                    }

                    _context251.next = 7;
                    return this.reloadAncestors();

                  case 7:
                    if (!(!isSameId || this.isChanged)) {
                      _context251.next = 11;
                      break;
                    }

                    _context251.next = 10;
                    return this.reloadMain();

                  case 10:
                    this.pushHistory(newVal);

                  case 11:
                  case "end":
                    return _context251.stop();
                }
              }
            }, _callee250, this);
          }));

          function meta(_x18, _x19) {
            return _meta.apply(this, arguments);
          }

          return meta;
        }()
      },
      ///////////////////////////////////////////
      mounted: function () {
        var _mounted17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee251() {
          return regeneratorRuntime.wrap(function _callee251$(_context252) {
            while (1) {
              switch (_context252.prev = _context252.next) {
                case 0:
                  _context252.next = 2;
                  return this.reloadSidebar();

                case 2:
                case "end":
                  return _context252.stop();
              }
            }
          }, _callee251, this);
        }));

        function mounted() {
          return _mounted17.apply(this, arguments);
        }

        return mounted;
      }(),
      ///////////////////////////////////////////
      beforeDestroy: function beforeDestroy() {} ///////////////////////////////////////////

    };
    Ti.Preload("/a/load/wn.manager/wn-manager.mjs", _M);
  })(); //============================================================
  // JOIN: en-us/hmaker.i18n.json
  //============================================================


  Ti.Preload("ti/i18n/en-us/hmaker.i18n.json", {
    "com-form": "表单",
    "com-label": "标签",
    "com-list": "列表",
    "hm-type-Array": "数组",
    "hm-type-Boolean": "布尔",
    "hm-type-Group": "字段分组",
    "hm-type-Integer": "整数",
    "hm-type-Number": "数字",
    "hm-type-Object": "对象",
    "hm-type-String": "文本",
    "hm-type-icons": {
      "Array": "Zmdi-format-list-bulleted",
      "Boolean": "Zmdi-toll",
      "Group": "Zmdi-collection-bookmark",
      "Integer": "Zmdi-n-6-square",
      "Number": "Zmdi-input-svideo",
      "Object": "Zmdi-toys",
      "String": "Zmdi-translate"
    },
    "hmaker-com-conf-blank": "请选择一个控件设置其详情",
    "hmaker-com-type-blank": "选择一个控件",
    "hmaker-edit-form-del-group-all": "组以及全部字段",
    "hmaker-edit-form-del-group-confirm": "您是要删除组以及其内的全部字段，还是仅是组？",
    "hmaker-edit-form-del-group-only": "仅是组",
    "hmaker-edit-form-field-nil": "请选择一个字段编辑详情",
    "hmaker-edit-form-new-field": "新字段",
    "hmaker-edit-form-new-field-e0": "字段名不能以数字开头，内容只能为小写英文字母数字和下划线",
    "hmaker-edit-form-new-field-e1": "字段【${val}】已存在，请另选一个名称",
    "hmaker-edit-form-new-field-tip": "请输入新字段名（只能为小写英文字母数字和下划线）",
    "hmaker-edit-form-new-group": "新分组",
    "hmaker-edit-form-new-group-tip": "请输入新分组名",
    "hmaker-edit-form-nil-field": "请先选择一个字段",
    "hmaker-edit-form-not-current": "请选择一个字段或者字段组",
    "hmaker-layout-cols": "列布局",
    "hmaker-layout-rows": "行布局",
    "hmaker-layout-tabs": "标签布局",
    "hmaker-nav-blank-item": "请选择一个导航项目编辑",
    "hmaker-nav-k-display": "链接显示内容",
    "hmaker-nav-k-icon": "链接图标",
    "hmaker-nav-k-title": "链接文字",
    "hmaker-nav-k-type": "链接类型",
    "hmaker-nav-k-value": "链接目标",
    "hmaker-nav-tp-dispatch": "方法调用",
    "hmaker-nav-tp-href": "外部链接",
    "hmaker-nav-tp-page": "站点页面",
    "hmaker-site-k-apiBase": "接口路径",
    "hmaker-site-k-base": "资源路径",
    "hmaker-site-k-captcha": "验证码路径",
    "hmaker-site-k-domain": "所属域",
    "hmaker-site-k-entry": "着陆页",
    "hmaker-site-prop": "站点属性",
    "hmaker-site-state": "站点全局配置",
    "hmaker-site-state-actions": "全局动作表",
    "hmaker-site-state-apis": "接口集",
    "hmaker-site-state-blocks": "预定义布局",
    "hmaker-site-state-general": "通用配置",
    "hmaker-site-state-nav": "全局导航条",
    "hmaker-site-state-router": "页面路由",
    "hmaker-site-state-schema": "预定义控件",
    "hmaker-site-state-utils": "扩展函数",
    "hmaker-site-tree": "站点结构",
    "hmaker-site-tree-loading": "正在加载站点结构...",
    "hmk-adjustDelay": "调整延迟",
    "hmk-aspect": "外观",
    "hmk-autoI18n": "国际化",
    "hmk-behavior": "行为",
    "hmk-blankAs": "空白样式",
    "hmk-breakLine": "维持换行",
    "hmk-currentTab": "当前标签",
    "hmk-data": "数据",
    "hmk-dict": "数据字典",
    "hmk-editable": "可编辑",
    "hmk-field-checkEquals": "检查相等",
    "hmk-field-com": "编辑控件",
    "hmk-field-defaultAs": "默认值",
    "hmk-field-disabled": "失效条件",
    "hmk-field-height": "高度",
    "hmk-field-hidden": "隐藏条件",
    "hmk-field-icon": "图标",
    "hmk-field-name": "键名",
    "hmk-field-serializer": "自定义保存",
    "hmk-field-tip": "提示说明",
    "hmk-field-title": "显示名",
    "hmk-field-transformer": "自定义转换",
    "hmk-field-type": "类型",
    "hmk-field-width": "宽度",
    "hmk-fieldStatus": "字段状态",
    "hmk-fields": "字段",
    "hmk-fields-advance": "高级",
    "hmk-fields-general": "基本",
    "hmk-form-data": "数据源",
    "hmk-form-height": "表单高度",
    "hmk-form-onlyFields": "仅声明字段",
    "hmk-form-width": "表单宽度",
    "hmk-format": "格式化",
    "hmk-height": "控件高度",
    "hmk-href": "超链接",
    "hmk-icon": "表单图标",
    "hmk-measure": "尺寸",
    "hmk-mode": "显示方式",
    "hmk-mode-all": "全部",
    "hmk-mode-tab": "标签",
    "hmk-newTab": "新窗口",
    "hmk-placeholder": "占位文本",
    "hmk-prefixIcon": "前缀图标",
    "hmk-prefixText": "前缀文字",
    "hmk-spacing": "间距",
    "hmk-spacing-comfy": "舒适",
    "hmk-spacing-tiny": "紧凑",
    "hmk-suffixIcon": "后缀图标",
    "hmk-suffixText": "后缀文字",
    "hmk-tabAt": "标签位置",
    "hmk-tabAt-bottom-center": "下部居中",
    "hmk-tabAt-bottom-left": "下部居左",
    "hmk-tabAt-bottom-right": "下部居右",
    "hmk-tabAt-top-center": "上部居中",
    "hmk-tabAt-top-left": "上部居左",
    "hmk-tabAt-top-right": "上部居右",
    "hmk-title": "表单标题",
    "hmk-trimed": "修剪空白",
    "hmk-value": "输入值",
    "hmk-valueMaxWidth": "值最大宽度",
    "hmk-width": "控件宽度"
  }); //============================================================
  // JOIN: en-us/ti-datetime.i18n.json
  //============================================================

  Ti.Preload("ti/i18n/en-us/ti-datetime.i18n.json", {
    "Apr": "April",
    "Aug": "August",
    "Dec": "December",
    "Feb": "February",
    "Fri": "Fri",
    "Friday": "Friday",
    "Jan": "January",
    "Jul": "July",
    "Jun": "June",
    "Mar": "March",
    "May": "May",
    "Mon": "Mon",
    "Monday": "Monday",
    "Nov": "November",
    "Oct": "October",
    "Sat": "Sat",
    "Saturday": "Saturday",
    "Sep": "September",
    "Sun": "Sun",
    "Sunday": "Sunday",
    "Thu": "Thu",
    "Thursday": "Thursday",
    "Tue": "Tue",
    "Tuesday": "Tuesday",
    "Wed": "Wed",
    "Wednesday": "Wednesday",
    "blank-date": "Select a date",
    "blank-date-range": "Select a date range",
    "blank-datetime": "Select datetime",
    "blank-month": "Select month",
    "blank-time": "Select time",
    "blank-time-range": "Select a time range",
    "cal": {
      "abbr": {
        "Apr": "Apr",
        "Aug": "Aug",
        "Dec": "Dec",
        "Feb": "Feb",
        "Jan": "Jan",
        "Jul": "Jul",
        "Jun": "Jun",
        "Mar": "Mar",
        "May": "May",
        "Nov": "Nov",
        "Oct": "Oct",
        "Sep": "Sep"
      },
      "d-range-beyond-days": "${yy0}-${MM0}-${dd0} to ${dd1}",
      "d-range-beyond-months": "${yy0}-${MM0}-${dd0} to ${MM1}-${dd1}",
      "d-range-beyond-years": "${yy0}-${MM0}-${dd0} to ${yy1}-${MM1}-${dd1}",
      "d-range-in-same-day": "${yy0}-${MM0}-${dd0} whole day",
      "m-range-beyond-months": "${yy0}-${MT0} to ${MT1}",
      "m-range-beyond-years": "${yy0}-${MT0} to ${yy1}-${MT1}",
      "week": ["S", "M", "T", "W", "T", "F", "S"]
    },
    "du-in-min": "${n}Min",
    "time": {
      "any-time": "yyyy-M-d",
      "in-year": "M-dd",
      "past-in-min": "Just now",
      "past-in-hour": "In ${min}mins",
      "past-in-day": "In ${hour}hours",
      "past-in-week": "In ${day}days",
      "future-in-min": "Soon",
      "future-in-hour": "After ${min}mins",
      "future-in-day": "After ${hour}hours",
      "future-in-week": "After ${day}days"
    },
    "time-begin": "Begin Time",
    "time-end": "End Time",
    "today": "Today"
  }); //============================================================
  // JOIN: en-us/ti-text-editor.i18n.json
  //============================================================

  Ti.Preload("ti/i18n/en-us/ti-text-editor.i18n.json", {
    "wordp-h0": "Main",
    "wordp-h1": "Heading 1",
    "wordp-h2": "Heading 2",
    "wordp-h3": "Heading 3",
    "wordp-h4": "Heading 4",
    "wordp-h5": "Heading 5",
    "wordp-h6": "Heading 6",
    "wordp-heading": "Heading levels",
    "wordp-link": "Hyperlink",
    "wordp-nil-sel": "Please select a paragraph first"
  }); //============================================================
  // JOIN: en-us/ti-text-json.i18n.json
  //============================================================

  Ti.Preload("ti/i18n/en-us/ti-text-json.i18n.json", {
    "json-Array": "Array",
    "json-Boolean": "Boolean",
    "json-Float": "Decimal",
    "json-Integer": "Integer",
    "json-Nil": "Nil",
    "json-Number": "Number",
    "json-Object": "Object",
    "json-String": "String",
    "json-new-key": "Enter a new key"
  }); //============================================================
  // JOIN: en-us/web.i18n.json
  //============================================================

  Ti.Preload("ti/i18n/en-us/web.i18n.json", {
    "account": "Account",
    "account-flt-tip": "Filter by account name",
    "account-manage": "Accounts",
    "account-meta": "Account properties",
    "account-meta-tip": "Choose an account for detail",
    "address-consignee": "Consignee",
    "address-empty-list": "No shipping address",
    "address-flt-tip": "Filter by address name",
    "address-is-dft": "Default shipping address",
    "address-k-area": "Area",
    "address-k-city": "City",
    "address-k-code": "Addr code",
    "address-k-code-tip": "Your postcode",
    "address-k-consignee": "Consignee",
    "address-k-country": "Country",
    "address-k-dftaddr": "Default address",
    "address-k-door": "Door",
    "address-k-email": "Email",
    "address-k-phone": "Phone",
    "address-k-postcode": "Postcode",
    "address-k-province": "Province",
    "address-k-street": "Street",
    "address-k-title": "Address",
    "address-k-tp": "Addr Type",
    "address-k-tp-s": "SELLER",
    "address-k-tp-u": "USER",
    "address-k-uid": "User",
    "address-k-uid-tip": "Filter by username",
    "address-meta": "Address properties",
    "address-nil": "Address blank",
    "address-nil-detail": "Select an address for details",
    "address-rm-confirm": "Are you sure you want to delete this address?",
    "address-set-dft": "Set as default address",
    "address-shipping-add": "Add shipping address",
    "admin-flt-tip": "Filter by admin name",
    "admin-meta": "Admin properties",
    "admin-new": "New admin",
    "admin-nickname": "Admin nickname",
    "admin-no-detail": "Select an admin for detail",
    "ar-cate": "Catetory",
    "ar-content": "Content",
    "ar-flt-tip": "Filter by article title",
    "ar-meta": "Article property",
    "ar-new": "New article",
    "ar-title": "Title",
    "auth-bind": "Bind",
    "auth-bind-email-title": "Bind email",
    "auth-bind-phone-title": "Bind phone",
    "auth-blank-email": "Blank email address not allowed",
    "auth-blank-name": "Blank name not allowed",
    "auth-blank-name-passwd": "Blank name or password",
    "auth-blank-phone": "Blank phone number not allowd",
    "auth-doing": "Verifying",
    "auth-email-tip": "Email address",
    "auth-email-title": "Sign by email",
    "auth-email-vcode": "Email password",
    "auth-email-vcode-get": "Get email password",
    "auth-go-email": "Sign by email",
    "auth-go-passwd": "Sign in by password",
    "auth-go-phone": "Sign by sms",
    "auth-login": "Sign in",
    "auth-login-NoSaltedPasswd": "Please switch to sign by [${ta?password}]，after sign in, go to [profile > reset password] to setup your password, thanks.",
    "auth-login-or-signup": "Sign up or sign in",
    "auth-logout-confirm": "Are you sure you want to log out?",
    "auth-ok": "Verify successful",
    "auth-passwd-getback": "Retrieve password",
    "auth-passwd-name-email-tip": "Email/Name",
    "auth-passwd-name-phone-tip": "Phone/Name",
    "auth-passwd-tip": "Password",
    "auth-passwd-title": "Sign in by password",
    "auth-phone-tip": "Phone number",
    "auth-phone-title": "Sign by sms",
    "auth-phone-vcode": "SMS password",
    "auth-phone-vcode-get": "Get sms password",
    "auth-reset-passwd": "Reset password ...",
    "auth-reset-passwd-again": "Reset password again",
    "auth-reset-passwd-btn-lack": "Lack information",
    "auth-reset-passwd-btn-ready": "Reset password",
    "auth-reset-passwd-btn-short": "Password too short (at least 6 chars)",
    "auth-reset-passwd-btn-unmatch": "The password is not consistent",
    "auth-reset-passwd-by-email": "Reset password by email",
    "auth-reset-passwd-by-email-sent": "The email password has been sent to your registered email address ${email}",
    "auth-reset-passwd-by-email-tip": "Registered email address",
    "auth-reset-passwd-by-passwd": "Reset by old password",
    "auth-reset-passwd-by-phone": "Reset by sms",
    "auth-reset-passwd-by-phone-sent": "The sms password has been sent to your mobile phone ${phone}",
    "auth-reset-passwd-by-phone-tip": "Registered phone number",
    "auth-reset-passwd-ing": "Reseting password ...",
    "auth-reset-passwd-lack-email": "Please enter your registered email address",
    "auth-reset-passwd-lack-phone": "Please enter your registered mobile phone number",
    "auth-reset-passwd-new": "New password (at least 6 chars)",
    "auth-reset-passwd-ok": "The password has been reset and will take effect the next time you log in",
    "auth-reset-passwd-old": "Old password",
    "auth-reset-passwd-ren": "Reconfirm",
    "auth-sending-vcode": "Sending verification code",
    "auth-sent-ok": "${ta?Password} has been sent, please check in ${by} in ${min} minutes",
    "auth-ta-by-email": "Your email",
    "auth-ta-by-phone": "Your sms",
    "auth-ta-email": "Email password",
    "auth-ta-phone": "SMS password",
    "auth-vcode-delay": "Resend after ${sec}s",
    "auth-vcode-lost": "Can't get password?",
    "base-info": "Base info",
    "buy-checkout-nil": "You have nothing to checkout",
    "cate": "Category",
    "cate-flt-tip": "Filter by category name",
    "cate-maj": "Major category",
    "cate-meta": "Category properties",
    "cate-new": "New category",
    "cate-nil-tip": "Select a category",
    "cate-no-detail": "Select a category for details",
    "cate-pa": "Parent category",
    "cate-pa-nil": "Select a parent category",
    "cate-sub": "Child category",
    "cate-sub-nil": "Select a child category",
    "cate-val": "Category value",
    "cmt-brief": "Comment brief",
    "cmt-content": "Comment content",
    "cmt-flt-tip": "Filter by a user id or comment",
    "cmt-meta": "Comment properties",
    "cmt-no-detail": "Select a role for detail",
    "cmt-target": "Comment target",
    "cmt-type": "Comment type",
    "cmt-user": "Comment account",
    "comments": "COMMENTS",
    "cover": "Cover",
    "cover-pic": "Cover pic",
    "detail-info": "Detail info",
    "dir-media": "Media dir",
    "e-cmd-passwd-old_invalid": "Old Password Invalid",
    "e-cmd-www_passwd-Blank": "Blank new password not allowed",
    "e-cmd-www_passwd-CheckBlankAccount": "Blank account",
    "e-cmd-www_passwd-CheckBlankCode": "Blank code",
    "e-cmd-www_passwd-CheckCodeFail": "Invalid code",
    "e-cmd-www_passwd-CheckFailed": "Verify failed",
    "e-cmd-www_passwd-CheckWeirdAccount": "Weird account",
    "e-cmd-www_passwd-InvalidNewPasswd": "Invalid new password",
    "e-cmd-www_passwd-LackTarget": "Missing target",
    "e-cmd-www_passwd-TooShort": "The new password is too short",
    "e-cmd-www_passwd-nopvg": "No permission to reset passwords",
    "e-www-invalid-captcha": "Invalid ${ta?captcha}",
    "e-www-login-invalid-passwd": "Invalid password",
    "e-www-login-noexists": "Account not exists",
    "e-www-order-OutOfStore": "Goods ${val?} insufficient stock",
    "invoice-k-bankaccount": "Bank account",
    "invoice-k-bankname": "Bank",
    "invoice-k-busiaddr": "Biz address",
    "invoice-k-busiphone": "Biz phone",
    "invoice-k-invdft": "Default title",
    "invoice-k-invtfn": "TFN",
    "invoice-k-invtitle": "Invoice title",
    "invoice-k-type": "Invoice Type",
    "invoice-k-uemail": "Taker email",
    "invoice-k-uid": "Owner account",
    "invoice-k-uid-tip": "Filter by username",
    "invoice-k-uname": "Taker name",
    "invoice-k-uphone": "Taker phone",
    "invoice-kg-bank": "Bank info",
    "invoice-kg-busi": "Biz info",
    "invoice-kg-inv": "Invoice info",
    "invoice-kg-u": "Taker info",
    "k-ct-date": "Create date",
    "k-lm": "Last modifed",
    "me-k-account": "Account",
    "me-k-avatar": "Avatar",
    "me-k-city": "City",
    "me-k-country": "Country",
    "me-k-email": "Email",
    "me-k-login": "Login",
    "me-k-nickname": "Nickname",
    "me-k-nm": "Login name",
    "me-k-phone": "Phone",
    "me-k-role": "Role",
    "me-k-sex": "Gender",
    "mine": "Mine",
    "my-favors": "My favorite",
    "my-favors-blog": "Favorite blog",
    "my-favors-goods": "Favorite goods",
    "my-favors-posts": "Favorite posts",
    "my-favors-spots": "Favorite spots",
    "my-favors-video": "Favorite video",
    "my-orders": "My orders",
    "my-orders-shop": "Shopping orders",
    "my-orders-video": "VOD order",
    "my-passwd": "Reset password",
    "my-profile": "My profile",
    "my-shipping-address": "Shipping address",
    "my-shopping-car": "Shopping car",
    "or-st-dn": "Done",
    "or-st-fa": "Fail to create order",
    "or-st-nw": "New order",
    "or-st-ok": "Pay ok",
    "or-st-sp": "Shipped",
    "or-st-wt": "Wait for pay",
    "ord-detail": "Order detail",
    "order-flt-tip": "Query by order id",
    "order-k-accounts": "Accounts",
    "order-k-addr_ship": "Ship address",
    "order-k-addr_ship_code": "Ship code",
    "order-k-addr_ship_country": "Ship country",
    "order-k-addr_ship_door": "Ship door",
    "order-k-addr_user": "User address",
    "order-k-addr_user_area": "Area",
    "order-k-addr_user_city": "City",
    "order-k-addr_user_code": "User code",
    "order-k-addr_user_country": "User country",
    "order-k-addr_user_door": "User door",
    "order-k-addr_user_province": "Province",
    "order-k-addr_user_street": "Street",
    "order-k-buyer_id": "Buyer",
    "order-k-currency": "Currency",
    "order-k-discount": "Discount",
    "order-k-dn_at": "Done at",
    "order-k-fa_at": "Fail at",
    "order-k-fee": "Payment amount",
    "order-k-freight": "Freight",
    "order-k-freight-m": "Alt Freight",
    "order-k-freight-m-tip": "Enter 0 to waive shipping costs",
    "order-k-id": "Order id",
    "order-k-invoice": "Invoice",
    "order-k-note": "Note",
    "order-k-ok_at": "OK at",
    "order-k-pay_id": "Payment id",
    "order-k-pay_tp": "Pay type",
    "order-k-payment": "Total",
    "order-k-price": "Order price",
    "order-k-pro-amount": "Amount",
    "order-k-pro-price": "Price",
    "order-k-pro-subtotal": "Subtotal",
    "order-k-pro-title": "Title",
    "order-k-products": "Goods",
    "order-k-seller": "Seller",
    "order-k-sp_at": "Shipping at",
    "order-k-st": "Order status",
    "order-k-title": "Order title",
    "order-k-total": "Total",
    "order-k-total-m": "Alt Total",
    "order-k-total-m-tip": "Enter the new total price",
    "order-k-user_email": "User email",
    "order-k-user_name": "User name",
    "order-k-user_phone": "User phone",
    "order-k-waybil": "Waybil",
    "order-k-waybil_com": "Waybil COM",
    "order-k-waybil_nb": "Waybil NB",
    "order-k-wt_at": "Pay at",
    "order-nil-detail": "Please select an order for details",
    "order-pay-id": "Pay ID",
    "order-pay-status": "Payment status",
    "order-shipaddr-nil": "Please specify a shipping address",
    "passwd-invalid-char": "Passwords can only include english numbers/upper and lower case letters/and special characters",
    "passwd-sl-1": "Weak",
    "passwd-sl-2": "Weaker",
    "passwd-sl-3": "Normal",
    "passwd-sl-4": "Stronger",
    "passwd-sl-5": "Strong",
    "passwd-tip": "Please enter a combination of english numerals/upper and lower case letters/special characters with a minimum of 6 characters",
    "pay-by-free": "Free",
    "pay-by-paypal": "PayPal",
    "pay-by-wx-jsapi": "WeChat jsapi",
    "pay-by-wx-qrcode": "WeChat scan code",
    "pay-by-wx-scan": "WeChat payment code",
    "pay-by-zfb-qrcode": "Alipay scan code",
    "pay-by-zfb-scan": "Alipay payment code",
    "pay-checkout-it-amount": "Amount",
    "pay-checkout-it-name": "Name",
    "pay-checkout-it-price": "Price",
    "pay-checkout-it-subtotal": "Subtotal",
    "pay-checkout-tip": "Please confirm the quantity and amount of your purchase",
    "pay-paypal": "PayPal",
    "pay-proceed-check": "Check payment",
    "pay-proceed-ing": "Checking for...",
    "pay-re-fail": "Payment failure",
    "pay-re-nil": "The payoff is a schrodinger's cat",
    "pay-re-ok": "Payment success",
    "pay-re-wait": "Pending payment",
    "pay-step-checkout-title": "Confirm order",
    "pay-step-choose-nil": "☝ please select one of the above payment methods 👆",
    "pay-step-choose-tip": "You may choose any of the following payment methods to pay for this order",
    "pay-step-choose-tip2": "You will pay for this order using ${val}",
    "pay-step-choose-title": "Mode of payment",
    "pay-step-choose-title2": "Choose payment",
    "pay-step-done-title": "Done",
    "pay-step-proceed-create-order": "Creating order ...",
    "pay-step-proceed-fetch-order": "Getting order ...",
    "pay-step-proceed-nil": "Please choose a method of payment",
    "pay-step-proceed-tip": "Pay for this order with ${val}",
    "pay-step-proceed-title": "Pay",
    "pay-tip-wx-qrcode": "Please pay in wechat scan within 15 minutes",
    "pay-tip-zfb-qrcode": "Please pay by alipay scan code within 15 minutes",
    "pay-title": "Payment",
    "pay-wx": "WeChat",
    "pay-zfb": "Alipay",
    "paypal-amount_value": "Payment Amount",
    "paypal-approve-tip": "Already in the new tab for you to open the paypal payment page, if there is no open, please click on ☝ the icon above. after payment, the page will automatically perceive, if there is no response, try to click 👇 [check payment] button below.",
    "paypal-cap-id": "Capture ID",
    "paypal-cap-status": "Capture status",
    "paypal-currency": "Currency",
    "paypal-id": "PayPal TID",
    "paypal-payer_email": "Payer email",
    "paypal-payer_id": "Payer ID",
    "photo": "Photo",
    "post-content-blank": "The content you post cannot be empty or less than 10 words",
    "profile-title": "My profile",
    "pubat": "Release date",
    "read-du": "Reading spend",
    "role": "Role",
    "role-as-guest": "Guest",
    "role-as-normal": "Normal",
    "role-as-vip": "VIP",
    "role-dft": "Default role",
    "role-flt-tip": "Filter by role name",
    "role-manage": "Roles",
    "role-meta": "Role propery",
    "role-meta-tip": "Choose an role for detail",
    "role-name": "Role name",
    "role-select-tip": "Select role",
    "role-val": "Role value",
    "shop-basket-clean-confirm": "Are you sure you want to empty the shopping cart? this is an operation that cannot be undone.",
    "shop-basket-remove-confirm": "Are you sure you want to remove this item from your shopping cart?",
    "sort": "Sort",
    "sort-tip-asc": "The smaller at first",
    "sort-tip-desc": "The bigger at first",
    "sort-val": "Sort value",
    "topic": "Topic",
    "type": "Type",
    "type-new": "New type",
    "video-title": "Video title",
    "watch_c": "View count",
    "waybil-com-ane": "AN NENG Logistics",
    "waybil-com-best": "BAISHI Express",
    "waybil-com-db": "DE BANG Express",
    "waybil-com-ems": "EMS Logistics",
    "waybil-com-jdl": "JING DONG Logistics",
    "waybil-com-pj": "PIN JUN Express",
    "waybil-com-sf": "SHUN FENG Express",
    "waybil-com-sto": "SHEN TONG Express",
    "waybil-com-uce": "YOU SU Express",
    "waybil-com-yto": "YUAN TONG Express",
    "waybil-com-yunda": "YUN DA Express",
    "waybil-com-zto": "ZHONG TONG Express"
  }); //============================================================
  // JOIN: en-us/wn-manager.i18n.json
  //============================================================

  Ti.Preload("ti/i18n/en-us/wn-manager.i18n.json", {
    "ti-loading": "Load...",
    "wn-adaptlist": "Object explorer",
    "wn-create-fail": "Fail to create",
    "wn-create-invalid": "Illegal characters in object name",
    "wn-create-ok": "Create ok",
    "wn-create-too-long": "Object name too long",
    "wn-del-item": "Deleting: \"${name}\"",
    "wn-del-no-empty-folder": "The directory \"${nm}\" is not empty, do you want to delete all? click \"no\" to skip",
    "wn-del-none": "Please select at least one file to delete!",
    "wn-del-ok": "${N} objects have been removed",
    "wn-download-dir": "Object \"${nm}\" is a directory, click \"continue\" to skip it and download the next file, and click \"terminate\" to end this operation!",
    "wn-download-none": "Please select at least one file to download!",
    "wn-download-too-many": "We are going to download ${n} files one by one. continue?",
    "wn-expose-hidden-off": "Not show hidden objects",
    "wn-expose-hidden-on": "Show hidden objects",
    "wn-gui": "General gui",
    "wn-obj-preview": "Object preview",
    "wn-obj-puretext": "Plain text editor",
    "wn-obj-single-com": "Single control test suite",
    "wn-publish-done": "Publish success",
    "wn-publish-to-nil": "No publish target is set",
    "wn-publish-to-noexist": "The publish target does not exist",
    "wn-rename": "Rename object \"${name}\"",
    "wn-rename-fail": "Rename failed",
    "wn-rename-invalid": "The name cannot contain illegal characters",
    "wn-rename-none": "Please select a file to rename!",
    "wn-rename-ok": "Rename successful",
    "wn-rename-suffix-changed": "Your file suffix name has changed. do you need to complete the original suffix for you automatically?",
    "wn-rename-too-long": "The name is too long",
    "wn-thing-manager": "Data manager",
    "wn-view-opening": "Loading gui..."
  }); //============================================================
  // JOIN: en-us/wn-obj-preview.i18n.json
  //============================================================

  Ti.Preload("ti/i18n/en-us/wn-obj-preview.i18n.json", {
    "wop-fullscreen-enter": "Enter fullscreen",
    "wop-fullscreen-quit": "Exit fullscreen"
  }); //============================================================
  // JOIN: en-us/wn-thing.i18n.json
  //============================================================

  Ti.Preload("ti/i18n/en-us/wn-thing.i18n.json", {
    "thing-clean": "Empty the recycle bin",
    "thing-cleaning": "Cleaning...",
    "thing-content": "Object content",
    "thing-content-hide": "Hide content",
    "thing-content-show": "Show content",
    "thing-create": "New object",
    "thing-create-in-recyclebin": "Exit recycle bin before create object",
    "thing-enter-recyclebin": "Enter recyclebin",
    "thing-files": "Object files",
    "thing-files-hide": "Hide files",
    "thing-files-show": "Show files",
    "thing-filter-kwdplhd": "Enter the query criteria",
    "thing-leave-recyclebin": "Leave recyclebin",
    "thing-meta": "Object properties",
    "thing-meta-hide": "Hide properties",
    "thing-meta-show": "Show properties",
    "thing-recycle-bin": "Recycle bin",
    "thing-restore": "Restore",
    "thing-restore-none": "Select the data you want to recover first",
    "thing-restoring": "Restoring..."
  }); //============================================================
  // JOIN: en-us/_net.i18n.json
  //============================================================

  Ti.Preload("ti/i18n/en-us/_net.i18n.json", {
    "net-ct": "Created",
    "net-flt-nil": "Query by name",
    "net-vod-add-video": "Add video",
    "net-vod-cate": "Category",
    "net-vod-du-long": "Long video",
    "net-vod-du-short": "Short video",
    "net-vod-du-tv": "TV",
    "net-vod-duration": "Duration",
    "net-vod-size": "Video size",
    "net-vod-video-nil": "Please choose one video for detail"
  }); //============================================================
  // JOIN: en-us/_ti.i18n.json
  //============================================================

  Ti.Preload("ti/i18n/en-us/_ti.i18n.json", {
    "add": "Add",
    "add-item": "New item",
    "amount": "Amount",
    "attachment": "Attachment",
    "avatar": "Avatar",
    "banner": "Banner",
    "batch-none": "Please choose at least one item for batch updating",
    "batch-update": "Batch update...",
    "blank": "BLANK",
    "blank-to-edit": "Please choose item for editing",
    "brief": "Brief",
    "brief-d": "Brief",
    "brief-i": "Brief",
    "buy": "Buy",
    "buy-now": "Buy now",
    "cancel": "Cancel",
    "cancel-all": "Cancel all",
    "candidate": "Candidations",
    "captcha": "Captcha",
    "captcha-chagne": "Next",
    "captcha-tip": "Please enter the captcha",
    "chart": "Chart",
    "chart-bar": "Bar Chart",
    "chart-line": "Line Chart",
    "chart-pie": "Pie Chart",
    "chart-rank": "Rank Chart",
    "checked": "Checked",
    "choose": "Select",
    "choose-file": "Select file",
    "choose-obj": "Select object",
    "clean": "Clean",
    "clear": "Clear",
    "close": "Close",
    "confirm": "Confirm",
    "console": "Console",
    "content": "Content",
    "continue": "Continue",
    "create": "New",
    "create-now": "Create now",
    "creating": "Creating",
    "date": "Date",
    "debug": "Debug",
    "default": "Default",
    "del": "Delete",
    "del-checked": "Delete selected",
    "del-hard": "The selected item will be deleted directly. this operation is irrevocable. are you sure you want to continue?",
    "del-ing": "Deleting...",
    "del-none": "Please choose at least one item for deleting",
    "desktop": "Desktop",
    "detail": "Detail",
    "dis-name": "Display name",
    "disable": "Disable",
    "disabled": "Disabled",
    "doing": "Processing...",
    "download": "Download",
    "download-to-local": "Download to local",
    "drop-file-here-to-upload": "Drop file here to upload",
    "drop-here": "Drop here",
    "dt-in": "in ${val}",
    "dt-u-day": "Day",
    "dt-u-hour": "Hour",
    "dt-u-min": "Min",
    "dt-u-month": "Month",
    "dt-u-ms": "Milliseconds",
    "dt-u-sec": "Seconds",
    "dt-u-week": "Week",
    "dt-u-year": "Year",
    "e-auth-account-noexists": "Account not exists",
    "e-auth-home-forbidden": "Auth home forbidden",
    "e-auth-login-NoPhoneOrEmail": "Invalid phone number or email address",
    "e-auth-login-NoSaltedPasswd": "Password without salting",
    "e-auth-login-invalid-passwd": "Invalid password",
    "e-io-obj-exists": "Object already exists",
    "e-io-obj-noexists": "Object does't exists",
    "e-io-obj-noexistsf": "Object[${nm}] does't exists",
    "edit": "Edit",
    "edit-com": "Edit control",
    "email": "Email",
    "emoji": "Emoji",
    "empty": "Empty",
    "empty-data": "Empty data",
    "enable": "Enable",
    "enabled": "Enabled",
    "error": "Error",
    "export-data": "Export data...",
    "fail": "Failed",
    "false": "False",
    "favorites": "Favorite",
    "female": "Female",
    "filter": "Filter",
    "find": "Find",
    "find-data": "Find data",
    "gender": "Gender",
    "global-settings": "Global settings",
    "history-record": "History record",
    "home": "HOME",
    "i-known": "I known",
    "icon": "Icon",
    "icon-code-tip": "Please key-in code for icon, such as 'zmdi-case'",
    "import-data": "Import data ...",
    "index": "Index",
    "info": "Information",
    "input": "Input",
    "input-tags": "Input tags",
    "label": "Label",
    "lat": "Latitude",
    "lbs-place-add": "Add place",
    "lbs-ro-rnb-k-first": "Starting number",
    "lbs-ro-rnb-k-type": "Display type",
    "lbs-ro-rnb-k-type-alpha": "Alphabet",
    "lbs-ro-rnb-k-type-capital": "Capital",
    "lbs-ro-rnb-k-type-number": "Number",
    "lbs-ro-rnb-title": "Autosets line label",
    "link": "Link",
    "link-href": "Link target",
    "link-text": "Link text",
    "lng": "Longitude",
    "loading": "Loading...",
    "login": "Sign in",
    "login-name": "Login name",
    "logout": "Sign out",
    "logout-ing": "Log out ...",
    "male": "Male",
    "map-hybrid": "HYBIRD",
    "map-roadmap": "ROADMAP",
    "map-satellite": "SATELLITE",
    "map-terrain": "TERRAIN",
    "map-type": "Map type",
    "me": "Me",
    "media": "Media",
    "meta": "Meta data",
    "mine": "Mine",
    "modal": "Modal",
    "modify": "Modify",
    "more": "More",
    "msg": "Message",
    "name": "Name",
    "new-item": "New item",
    "newsfeed": "Newfeed",
    "next": "Next",
    "nil": "Nil",
    "nil-obj": "Please choose one object",
    "no": "No",
    "no-saved": "You get data need to be saved",
    "no-selected": "None selected",
    "no-title": "No title",
    "obj": "Object",
    "off": "Off",
    "ok": "Ok",
    "on": "On",
    "open": "Open",
    "open-newtab": "Open in new tab",
    "others": "Others",
    "paging-change-pgsz": "Current page contains ${pgsz} records maximumly, you want to change it to：",
    "paging-change-pgsz-invalid": "Page size must be integer, and great than 0, but ... -_-!",
    "paging-change-pn": "Current page number is ${pn}, please enter number between 1 to ${pgc}:",
    "paging-change-pn-invalid": "Page number must be integer, and must between 1 to ${pgc}",
    "paging-first": "Head",
    "paging-last": "Tail",
    "paging-next": "Next",
    "paging-prev": "Prev",
    "paging-sum": "Total ${pgc} pages, ${sum} records，current ${count}/${pgsz}",
    "passwd": "Password",
    "passwd-reset": "Reset password",
    "path": "Path",
    "phone": "Phone",
    "phone-nb": "Phone number",
    "post": "Post",
    "prev": "Prev",
    "price": "Price",
    "profile": "Profile",
    "profile-edit": "Edit profile",
    "prompt": "Prompt",
    "properties": "Properties",
    "publish": "Publish",
    "publishing": "Publishing ...",
    "refresh": "Refresh",
    "refresh-hard": "Hard refresh",
    "refresh-hard-clear": "Clean cache & hard refresh",
    "reloading": "Reloading ...",
    "remove": "Remove",
    "removing": "Removing ...",
    "rename": "Rename ...",
    "renaming": "Renameing ...",
    "reset": "Reset",
    "reset-change": "Reset change",
    "reset-data": "Reset data",
    "restore": "Restore",
    "revoke": "Revoke",
    "revoke-change": "Revoke change",
    "run": "Run",
    "run-finished": "Done for running script",
    "run-welcome": "Run script, please wait for a while ...",
    "save": "Save",
    "save-change": "Save change",
    "save-done": "Save success",
    "save-now": "Save now",
    "saving": "Saving ...",
    "score": "Score",
    "score-count": "Score count",
    "select": "Select",
    "select-all": "Select all",
    "send": "Send",
    "settings": "Settings",
    "slogan": "Slogan",
    "source-code": "Source code",
    "stat-date-at": "Stat at",
    "stat-date-at-oor": "Statistics on this date are not ready yet",
    "stat-date-span": "Date span",
    "stop": "Stop",
    "structure": "Structure",
    "success": "Success",
    "sys-settings": "System settings",
    "tablet": "Tablet",
    "terminal": "Terminal",
    "terminate": "Terminate",
    "text": "Text",
    "timestamp": "Timestamp",
    "title": "Title",
    "total-count": "Total ${nb?0} ${unit?items}",
    "trace": "Trace",
    "track": "Track message",
    "true": "True",
    "type": "Type",
    "under-construction": "Under construction",
    "unknown": "Unknown",
    "upload": "Upload",
    "upload-done": "Done for upload",
    "upload-file": "Uploading files ...",
    "upload-nofinished": "Upload not finished",
    "uploading": "Uplading",
    "user-avator": "User avatar",
    "value": "Value",
    "view": "View",
    "view-resource": "View source code",
    "warn": "Warn",
    "website": "Website",
    "yes": "Yes"
  }); //============================================================
  // JOIN: en-us/_wn.i18n.json
  //============================================================

  Ti.Preload("ti/i18n/en-us/_wn.i18n.json", {
    "wn-admin-check-obj-thumb": "Check obj thumbnails ...",
    "wn-admin-tools": "Admin tools",
    "wn-ctt-css-text": "CSS File",
    "wn-ctt-folder-text": "Folder",
    "wn-ctt-html-text": "HTML FILE",
    "wn-ctt-js-text": "Javascript",
    "wn-ctt-json-text": "JSON File",
    "wn-ctt-less-text": "LESS File",
    "wn-ctt-md-text": "Markdown",
    "wn-ctt-mjs-text": "Module Javascript",
    "wn-ctt-sass-text": "SASS File",
    "wn-ctt-thing_set-text": "Thing Set",
    "wn-ctt-txt-text": "Pure text",
    "wn-ctt-wnml-text": "WNML File",
    "wn-ctt-xml-text": "XML File",
    "wn-edit-com-nil": "Default as label control",
    "wn-en-his-ct": "Created",
    "wn-en-his-flt-tip": "Please input user id or name to filtering",
    "wn-en-his-mor": "OP more",
    "wn-en-his-opt": "Operation",
    "wn-en-his-tar": "Target",
    "wn-en-his-tid": "Target id",
    "wn-en-his-tnm": "Target name",
    "wn-en-his-ttp": "Target type",
    "wn-en-his-uid": "User id",
    "wn-en-his-unm": "User name",
    "wn-en-his-usr": "User",
    "wn-en-his-utp": "User type",
    "wn-invalid-mimes": "Unsupported mime \"${current}\", only \"${supports}\" allowed",
    "wn-invalid-types": "Unsupported type \"${current}\", only \"${supports}\" allowed",
    "wn-key-c": "Creater",
    "wn-key-ct": "Created",
    "wn-key-d0": "D0",
    "wn-key-d1": "D1",
    "wn-key-data": "Data",
    "wn-key-duration": "Duration",
    "wn-key-expi": "Expired",
    "wn-key-g": "Group",
    "wn-key-grp-advance": "Advance",
    "wn-key-grp-basic": "Basic",
    "wn-key-grp-customized": "Customized",
    "wn-key-grp-more": "More",
    "wn-key-grp-others": "Others",
    "wn-key-grp-privilege": "Privilege",
    "wn-key-grp-thumb": "Thumb",
    "wn-key-grp-timestamp": "Timestamp",
    "wn-key-height": "Height",
    "wn-key-icon": "Icon",
    "wn-key-id": "ID",
    "wn-key-len": "Length",
    "wn-key-lm": "Last modified",
    "wn-key-m": "Mender",
    "wn-key-md": "Mode",
    "wn-key-mime": "MIME",
    "wn-key-nm": "Name",
    "wn-key-ph": "Path",
    "wn-key-pid": "Parent",
    "wn-key-pvg": "Biz pvg",
    "wn-key-race": "Race",
    "wn-key-sha1": "SHA1",
    "wn-key-thumb": "Thumb",
    "wn-key-title": "Title",
    "wn-key-tp": "Type",
    "wn-key-width": "Width",
    "wn-obj-nosaved": "You have unsaved objects",
    "wn-oc-auto-type": "All types",
    "wn-oc-free": "Please enter the full name, including the extension, such as `myfile.xml`",
    "wn-oc-tip": "New object name",
    "wn-race-DIR": "DIRECTORY",
    "wn-race-FILE": "FILE",
    "wn-th-acc-pwd-choose-none": "Select the account to reset password (multiple allowed)",
    "wn-th-acc-pwd-done": "Password has been reset for ${n} users",
    "wn-th-acc-pwd-invalid": "Illegal characters found in password",
    "wn-th-acc-pwd-reset-tip": "Reset password to",
    "wn-th-acc-pwd-too-short": "Password too short, no less than 6 digits, better contains alphanumeric & special chars",
    "wn-th-recount-media": "Recalculate file number",
    "wn-th-recount-media-done": "Current number of files: ${n}"
  }); //============================================================
  // JOIN: zh-cn/hmaker.i18n.json
  //============================================================

  Ti.Preload("ti/i18n/zh-cn/hmaker.i18n.json", {
    "com-form": "表单",
    "com-label": "标签",
    "com-list": "列表",
    "hm-type-Array": "数组",
    "hm-type-Boolean": "布尔",
    "hm-type-Group": "字段分组",
    "hm-type-Integer": "整数",
    "hm-type-Number": "数字",
    "hm-type-Object": "对象",
    "hm-type-String": "文本",
    "hm-type-icons": {
      "Array": "zmdi-format-list-bulleted",
      "Boolean": "zmdi-toll",
      "Group": "zmdi-collection-bookmark",
      "Integer": "zmdi-n-6-square",
      "Number": "zmdi-input-svideo",
      "Object": "zmdi-toys",
      "String": "zmdi-translate"
    },
    "hmaker-com-conf-blank": "请选择一个控件设置其详情",
    "hmaker-com-type-blank": "选择一个控件",
    "hmaker-edit-form-del-group-all": "组以及全部字段",
    "hmaker-edit-form-del-group-confirm": "您是要删除组以及其内的全部字段，还是仅是组？",
    "hmaker-edit-form-del-group-only": "仅是组",
    "hmaker-edit-form-field-nil": "请选择一个字段编辑详情",
    "hmaker-edit-form-new-field": "新字段",
    "hmaker-edit-form-new-field-e0": "字段名不能以数字开头，内容只能为小写英文字母数字和下划线",
    "hmaker-edit-form-new-field-e1": "字段【${val}】已存在，请另选一个名称",
    "hmaker-edit-form-new-field-tip": "请输入新字段名（只能为小写英文字母数字和下划线）",
    "hmaker-edit-form-new-group": "新分组",
    "hmaker-edit-form-new-group-tip": "请输入新分组名",
    "hmaker-edit-form-nil-field": "请先选择一个字段",
    "hmaker-edit-form-not-current": "请选择一个字段或者字段组",
    "hmaker-layout-cols": "列布局",
    "hmaker-layout-rows": "行布局",
    "hmaker-layout-tabs": "标签布局",
    "hmaker-nav-blank-item": "请选择一个导航项目编辑",
    "hmaker-nav-k-display": "链接显示内容",
    "hmaker-nav-k-icon": "链接图标",
    "hmaker-nav-k-title": "链接文字",
    "hmaker-nav-k-type": "链接类型",
    "hmaker-nav-k-value": "链接目标",
    "hmaker-nav-tp-dispatch": "方法调用",
    "hmaker-nav-tp-href": "外部链接",
    "hmaker-nav-tp-page": "站点页面",
    "hmaker-site-k-apiBase": "接口路径",
    "hmaker-site-k-base": "资源路径",
    "hmaker-site-k-captcha": "验证码路径",
    "hmaker-site-k-domain": "所属域",
    "hmaker-site-k-entry": "着陆页",
    "hmaker-site-prop": "站点属性",
    "hmaker-site-state": "站点全局配置",
    "hmaker-site-state-actions": "全局动作表",
    "hmaker-site-state-apis": "接口集",
    "hmaker-site-state-blocks": "预定义布局",
    "hmaker-site-state-general": "通用配置",
    "hmaker-site-state-nav": "全局导航条",
    "hmaker-site-state-router": "页面路由",
    "hmaker-site-state-schema": "预定义控件",
    "hmaker-site-state-utils": "扩展函数",
    "hmaker-site-tree": "站点结构",
    "hmaker-site-tree-loading": "正在加载站点结构...",
    "hmk-adjustDelay": "调整延迟",
    "hmk-aspect": "外观",
    "hmk-autoI18n": "国际化",
    "hmk-behavior": "行为",
    "hmk-blankAs": "空白样式",
    "hmk-breakLine": "维持换行",
    "hmk-currentTab": "当前标签",
    "hmk-data": "数据",
    "hmk-dict": "数据字典",
    "hmk-editable": "可编辑",
    "hmk-field-checkEquals": "检查相等",
    "hmk-field-com": "编辑控件",
    "hmk-field-defaultAs": "默认值",
    "hmk-field-disabled": "失效条件",
    "hmk-field-height": "高度",
    "hmk-field-hidden": "隐藏条件",
    "hmk-field-icon": "图标",
    "hmk-field-name": "键名",
    "hmk-field-serializer": "自定义保存",
    "hmk-field-tip": "提示说明",
    "hmk-field-title": "显示名",
    "hmk-field-transformer": "自定义转换",
    "hmk-field-type": "类型",
    "hmk-field-width": "宽度",
    "hmk-fieldStatus": "字段状态",
    "hmk-fields": "字段",
    "hmk-fields-advance": "高级",
    "hmk-fields-general": "基本",
    "hmk-form-data": "数据源",
    "hmk-form-height": "表单高度",
    "hmk-form-onlyFields": "仅声明字段",
    "hmk-form-width": "表单宽度",
    "hmk-format": "格式化",
    "hmk-height": "控件高度",
    "hmk-href": "超链接",
    "hmk-icon": "表单图标",
    "hmk-measure": "尺寸",
    "hmk-mode": "显示方式",
    "hmk-mode-all": "全部",
    "hmk-mode-tab": "标签",
    "hmk-newTab": "新窗口",
    "hmk-placeholder": "占位文本",
    "hmk-prefixIcon": "前缀图标",
    "hmk-prefixText": "前缀文字",
    "hmk-spacing": "间距",
    "hmk-spacing-comfy": "舒适",
    "hmk-spacing-tiny": "紧凑",
    "hmk-suffixIcon": "后缀图标",
    "hmk-suffixText": "后缀文字",
    "hmk-tabAt": "标签位置",
    "hmk-tabAt-bottom-center": "下部居中",
    "hmk-tabAt-bottom-left": "下部居左",
    "hmk-tabAt-bottom-right": "下部居右",
    "hmk-tabAt-top-center": "上部居中",
    "hmk-tabAt-top-left": "上部居左",
    "hmk-tabAt-top-right": "上部居右",
    "hmk-title": "表单标题",
    "hmk-trimed": "修剪空白",
    "hmk-value": "输入值",
    "hmk-valueMaxWidth": "值最大宽度",
    "hmk-width": "控件宽度"
  }); //============================================================
  // JOIN: zh-cn/ti-datetime.i18n.json
  //============================================================

  Ti.Preload("ti/i18n/zh-cn/ti-datetime.i18n.json", {
    "Apr": "四月",
    "Aug": "八月",
    "Dec": "十二月",
    "Feb": "二月",
    "Fri": "周五",
    "Friday": "星期五",
    "Jan": "一月",
    "Jul": "七月",
    "Jun": "六月",
    "Mar": "三月",
    "May": "五月",
    "Mon": "周一",
    "Monday": "星期一",
    "Nov": "十一月",
    "Oct": "十月",
    "Sat": "周六",
    "Saturday": "星期六",
    "Sep": "九月",
    "Sun": "周日",
    "Sunday": "星期日",
    "Thu": "周四",
    "Thursday": "星期四",
    "Tue": "周二",
    "Tuesday": "星期二",
    "Wed": "周三",
    "Wednesday": "星期三",
    "blank-date": "请选择日期",
    "blank-date-range": "请选择日期范围",
    "blank-datetime": "请选择日期时间",
    "blank-month": "请选择月份",
    "blank-time": "请选择时间",
    "blank-time-range": "请选择时间范围",
    "cal": {
      "abbr": {
        "Apr": "四月",
        "Aug": "八月",
        "Dec": "十二",
        "Feb": "二月",
        "Jan": "一月",
        "Jul": "七月",
        "Jun": "六月",
        "Mar": "三月",
        "May": "五月",
        "Nov": "十一",
        "Oct": "十月",
        "Sep": "九月"
      },
      "d-range-beyond-days": "${yy0}年${MM0}月${dd0}至${dd1}日",
      "d-range-beyond-months": "${yy0}年${MM0}月${dd0}日至${MM1}月${dd1}日",
      "d-range-beyond-years": "${yy0}年${MM0}月${dd0}日至${yy1}年${MM1}月${dd1}日",
      "d-range-in-same-day": "${yy0}年${MM0}月${dd0}日全天",
      "m-range-beyond-months": "${yy0}年${MT0}至${MT1}",
      "m-range-beyond-years": "${yy0}年${MT0}至${yy1}年${MT1}",
      "week": ["日", "一", "二", "三", "四", "五", "六"]
    },
    "du-in-min": "${n}分钟",
    "time": {
      "any-time": "yyyy年M月d日",
      "in-year": "M月d日",
      "past-in-min": "刚刚",
      "past-in-hour": "${min}分钟前",
      "past-in-day": "${hour}小时前",
      "past-in-week": "${day}天前",
      "future-in-min": "即将",
      "future-in-hour": "${min}分钟后",
      "future-in-day": "${hour}小时后",
      "future-in-week": "${day}天后"
    },
    "time-begin": "开始时间",
    "time-end": "结束时间",
    "today": "今天"
  }); //============================================================
  // JOIN: zh-cn/ti-text-editor.i18n.json
  //============================================================

  Ti.Preload("ti/i18n/zh-cn/ti-text-editor.i18n.json", {
    "wordp-h0": "正文",
    "wordp-h1": "标题 1",
    "wordp-h2": "标题 2",
    "wordp-h3": "标题 3",
    "wordp-h4": "标题 4",
    "wordp-h5": "标题 5",
    "wordp-h6": "标题 6",
    "wordp-heading": "标题级别",
    "wordp-link": "超链接",
    "wordp-nil-sel": "请先选择一段文字"
  }); //============================================================
  // JOIN: zh-cn/ti-text-json.i18n.json
  //============================================================

  Ti.Preload("ti/i18n/zh-cn/ti-text-json.i18n.json", {
    "json-Array": "数组",
    "json-Boolean": "布尔",
    "json-Float": "小数",
    "json-Integer": "整数",
    "json-Nil": "空值",
    "json-Number": "数字",
    "json-Object": "对象",
    "json-String": "字符串",
    "json-new-key": "请输入一个新键名"
  }); //============================================================
  // JOIN: zh-cn/web.i18n.json
  //============================================================

  Ti.Preload("ti/i18n/zh-cn/web.i18n.json", {
    "account": "账户",
    "account-flt-tip": "请输入账号名过滤",
    "account-manage": "账户管理",
    "account-meta": "账户属性",
    "account-meta-tip": "请选择一个账号查看详情",
    "address-consignee": "收货人",
    "address-empty-list": "未设置任何收货地址",
    "address-flt-tip": "请输入地址名过滤",
    "address-is-dft": "默认收货地址",
    "address-k-area": "区县",
    "address-k-city": "城市",
    "address-k-code": "地址编码",
    "address-k-code-tip": "12位国家地址编码",
    "address-k-consignee": "收货人姓名",
    "address-k-country": "国家",
    "address-k-dftaddr": "默认地址",
    "address-k-door": "门牌",
    "address-k-email": "邮箱",
    "address-k-phone": "电话",
    "address-k-postcode": "邮编",
    "address-k-province": "省/直辖市",
    "address-k-street": "乡镇/街道",
    "address-k-title": "地址",
    "address-k-tp": "地址类型",
    "address-k-tp-s": "卖家地址",
    "address-k-tp-u": "用户地址",
    "address-k-uid": "用户",
    "address-k-uid-tip": "输入关联用户名过滤",
    "address-meta": "地址属性",
    "address-nil": "空地址",
    "address-nil-detail": "请选择一个地址查看详情",
    "address-rm-confirm": "您确定要删除这个地址吗？",
    "address-set-dft": "设为默认地址",
    "address-shipping-add": "添加收货地址",
    "admin-flt-tip": "请输入管理员名过滤",
    "admin-meta": "管理员属性",
    "admin-new": "新管理员",
    "admin-nickname": "管理员昵称",
    "admin-no-detail": "请选择一个管理员查看详情",
    "ar-cate": "文章分类",
    "ar-content": "文章内容",
    "ar-flt-tip": "请输入文章标题过滤",
    "ar-meta": "文章属性",
    "ar-new": "新文章",
    "ar-title": "文章标题",
    "auth-bind": "绑定",
    "auth-bind-email-title": "绑定邮箱",
    "auth-bind-phone-title": "绑定手机",
    "auth-blank-email": "邮箱不能为空",
    "auth-blank-name": "名称不能为空",
    "auth-blank-name-passwd": "名称或者密码不能为空",
    "auth-blank-phone": "手机号不能为空",
    "auth-doing": "正在验证",
    "auth-email-tip": "邮箱地址",
    "auth-email-title": "邮件密码登录/注册",
    "auth-email-vcode": "邮件密码",
    "auth-email-vcode-get": "获取邮件密码",
    "auth-go-email": "邮件密码登录/注册",
    "auth-go-passwd": "账号密码登录",
    "auth-go-phone": "短信密码登录/注册",
    "auth-login": "登录",
    "auth-login-NoSaltedPasswd": "你还未初始化您的登录密码，请切换至【${ta?验证码}】登录，之后前往【用户中心 > 重置密码】初始化您的登录密码，谢谢",
    "auth-login-or-signup": "登录/注册",
    "auth-logout-confirm": "您确定要退出登录吗？",
    "auth-ok": "账号验证通过",
    "auth-passwd-getback": "找回密码",
    "auth-passwd-name-email-tip": "邮箱地址/登录名",
    "auth-passwd-name-phone-tip": "手机号/登录名",
    "auth-passwd-tip": "密码",
    "auth-passwd-title": "账号密码登录",
    "auth-phone-tip": "手机号",
    "auth-phone-title": "短信密码登录/注册",
    "auth-phone-vcode": "短信密码",
    "auth-phone-vcode-get": "获取短信密码",
    "auth-reset-passwd": "重置密码 ...",
    "auth-reset-passwd-again": "再次重置密码",
    "auth-reset-passwd-btn-lack": "请填写必要信息",
    "auth-reset-passwd-btn-ready": "立即重置密码",
    "auth-reset-passwd-btn-short": "密码至少6位",
    "auth-reset-passwd-btn-unmatch": "密码两次输入不一致",
    "auth-reset-passwd-by-email": "用邮箱重置密码",
    "auth-reset-passwd-by-email-sent": "已经向您的注册邮箱 ${email} 发送了邮件密码",
    "auth-reset-passwd-by-email-tip": "请输入注册邮箱地址",
    "auth-reset-passwd-by-passwd": "用旧密码重置密码",
    "auth-reset-passwd-by-phone": "用手机重置密码",
    "auth-reset-passwd-by-phone-sent": "已经向您的手机 ${phone} 发送了短信密码",
    "auth-reset-passwd-by-phone-tip": "请输入注册手机号码",
    "auth-reset-passwd-ing": "正在重置密码...",
    "auth-reset-passwd-lack-email": "请输入注册邮箱地址",
    "auth-reset-passwd-lack-phone": "请输入注册手机号",
    "auth-reset-passwd-new": "新密码（最少6位）",
    "auth-reset-passwd-ok": "密码已经重置，下次登录时生效",
    "auth-reset-passwd-old": "旧密码",
    "auth-reset-passwd-ren": "再次确认",
    "auth-sending-vcode": "正在发送验证码",
    "auth-sent-ok": "${ta?验证码}已发出，请在${by}查收，${min}分钟内有效",
    "auth-ta-by-email": "邮箱里",
    "auth-ta-by-phone": "手机上",
    "auth-ta-email": "邮件密码",
    "auth-ta-phone": "手机密码",
    "auth-vcode-delay": "${sec} 秒后重新发送",
    "auth-vcode-lost": "收不到验证码？",
    "base-info": "基本信息",
    "buy-checkout-nil": "请选择要付款的商品",
    "cate": "分类",
    "cate-flt-tip": "请输入分类名过滤",
    "cate-maj": "主分类",
    "cate-meta": "分类属性",
    "cate-new": "新分类",
    "cate-nil-tip": "请选择一个分类",
    "cate-no-detail": "请选择一个分类查看详情",
    "cate-pa": "父分类",
    "cate-pa-nil": "请选择自己的父分类",
    "cate-sub": "子分类",
    "cate-sub-nil": "请选择自己的子分类",
    "cate-val": "分类值",
    "cmt-brief": "评论摘要",
    "cmt-content": "评论内容",
    "cmt-flt-tip": "请输入用户ID或者评论内容过滤",
    "cmt-meta": "评论属性",
    "cmt-no-detail": "请选择一个角色查看详情",
    "cmt-target": "评论目标",
    "cmt-type": "评论类型",
    "cmt-user": "评论账户",
    "comments": "评论",
    "cover": "封面",
    "cover-pic": "封面图片",
    "detail-info": "详细信息",
    "dir-media": "媒体目录",
    "e-cmd-passwd-old_invalid": "旧密码错误",
    "e-cmd-www_passwd-Blank": "新密码为空",
    "e-cmd-www_passwd-CheckBlankAccount": "空账户",
    "e-cmd-www_passwd-CheckBlankCode": "空验证码",
    "e-cmd-www_passwd-CheckCodeFail": "验证码错误",
    "e-cmd-www_passwd-CheckFailed": "校验错误",
    "e-cmd-www_passwd-CheckWeirdAccount": "诡异的账户",
    "e-cmd-www_passwd-InvalidNewPasswd": "新密码无效",
    "e-cmd-www_passwd-LackTarget": "缺少重置目标",
    "e-cmd-www_passwd-TooShort": "新密码太短",
    "e-cmd-www_passwd-nopvg": "没有重置密码的权限",
    "e-www-invalid-captcha": "${ta?验证码}错误",
    "e-www-login-invalid-passwd": "账号密码错误",
    "e-www-login-noexists": "账号不存在",
    "e-www-order-OutOfStore": "商品${val?}库存不足",
    "invoice-k-bankaccount": "银行账号",
    "invoice-k-bankname": "开户行",
    "invoice-k-busiaddr": "企业地址",
    "invoice-k-busiphone": "企业电话",
    "invoice-k-invdft": "默认抬头",
    "invoice-k-invtfn": "发票税号",
    "invoice-k-invtitle": "发票抬头",
    "invoice-k-type": "发票类型",
    "invoice-k-uemail": "收票人邮箱",
    "invoice-k-uid": "关联账户",
    "invoice-k-uid-tip": "输入关联用户名过滤",
    "invoice-k-uname": "收票人名称",
    "invoice-k-uphone": "收票人电话",
    "invoice-kg-bank": "银行信息",
    "invoice-kg-busi": "企业信息",
    "invoice-kg-inv": "发票信息",
    "invoice-kg-u": "收票人信息",
    "k-ct-date": "创建日期",
    "k-lm": "最后更新",
    "me-k-account": "账户",
    "me-k-avatar": "头像",
    "me-k-city": "城市",
    "me-k-country": "国家",
    "me-k-email": "邮箱",
    "me-k-login": "最后登录",
    "me-k-nickname": "用户昵称",
    "me-k-nm": "登录名",
    "me-k-phone": "手机号",
    "me-k-role": "角色",
    "me-k-sex": "性别",
    "mine": "我的",
    "my-favors": "我的收藏",
    "my-favors-blog": "收藏的博客",
    "my-favors-goods": "收藏的商品",
    "my-favors-posts": "收藏的文章",
    "my-favors-spots": "收藏的景点",
    "my-favors-video": "收藏的视频",
    "my-orders": "我的订单",
    "my-orders-shop": "购物订单",
    "my-orders-video": "视频订单",
    "my-passwd": "重置密码",
    "my-profile": "我的资料",
    "my-shipping-address": "收货地址",
    "my-shopping-car": "购物车",
    "or-st-dn": "完成",
    "or-st-fa": "创建订单失败",
    "or-st-nw": "提交订单",
    "or-st-ok": "支付成功",
    "or-st-sp": "已发货",
    "or-st-wt": "待支付",
    "ord-detail": "订单详情",
    "order-flt-tip": "请输入订单ID查询",
    "order-k-accounts": "用户库",
    "order-k-addr_ship": "发货地址",
    "order-k-addr_ship_code": "发货地址编码",
    "order-k-addr_ship_country": "发货国家",
    "order-k-addr_ship_door": "发货门牌",
    "order-k-addr_user": "收货地址",
    "order-k-addr_user_area": "地区",
    "order-k-addr_user_city": "城市",
    "order-k-addr_user_code": "收货地址编码",
    "order-k-addr_user_country": "收货国家",
    "order-k-addr_user_door": "收货门牌",
    "order-k-addr_user_province": "省",
    "order-k-addr_user_street": "街道",
    "order-k-buyer_id": "买家",
    "order-k-currency": "货币单位",
    "order-k-discount": "优惠",
    "order-k-dn_at": "完成时间",
    "order-k-fa_at": "支付失败",
    "order-k-fee": "支付金额",
    "order-k-freight": "运费",
    "order-k-freight-m": "修改运费",
    "order-k-freight-m-tip": "可以在这里输入0为客户免去运费",
    "order-k-id": "订单号",
    "order-k-invoice": "发票信息",
    "order-k-note": "备注",
    "order-k-ok_at": "支付成功",
    "order-k-pay_id": "支付单",
    "order-k-pay_tp": "支付类型",
    "order-k-payment": "支付信息",
    "order-k-price": "订单金额",
    "order-k-pro-amount": "购买数量",
    "order-k-pro-price": "单价",
    "order-k-pro-subtotal": "小计",
    "order-k-pro-title": "商品",
    "order-k-products": "商品信息",
    "order-k-seller": "卖家",
    "order-k-sp_at": "发货时间",
    "order-k-st": "订单状态",
    "order-k-title": "订单标题",
    "order-k-total": "商品总价",
    "order-k-total-m": "修改总价",
    "order-k-total-m-tip": "为用户输入新的协商后的商品总价",
    "order-k-user_email": "收货人邮箱",
    "order-k-user_name": "收货人姓名",
    "order-k-user_phone": "收货人手机",
    "order-k-waybil": "物流信息",
    "order-k-waybil_com": "物流公司",
    "order-k-waybil_nb": "运单号",
    "order-k-wt_at": "支付时间",
    "order-nil-detail": "请选择一个订单查看详情",
    "order-pay-id": "支付单号",
    "order-pay-status": "交易状态",
    "order-shipaddr-nil": "请指定一个收货地址",
    "passwd-invalid-char": "密码只能包括英文数字/大小写字母/以及特殊字符",
    "passwd-sl-1": "弱",
    "passwd-sl-2": "较弱",
    "passwd-sl-3": "中",
    "passwd-sl-4": "较强",
    "passwd-sl-5": "强",
    "passwd-tip": "请输入最少6位的英文数字/大小写字母/特殊字符的组合",
    "pay-by-free": "免费",
    "pay-by-paypal": "PayPal",
    "pay-by-wx-jsapi": "微信JSAPI",
    "pay-by-wx-qrcode": "微信扫码",
    "pay-by-wx-scan": "微信付款码",
    "pay-by-zfb-qrcode": "支付宝扫码",
    "pay-by-zfb-scan": "支付宝付款码",
    "pay-checkout-it-amount": "数量",
    "pay-checkout-it-name": "商品名称",
    "pay-checkout-it-price": "单价",
    "pay-checkout-it-subtotal": "小计",
    "pay-checkout-tip": "请确认你购买的商品数量和金额",
    "pay-paypal": "PayPal",
    "pay-proceed-check": "检查支付结果",
    "pay-proceed-ing": "正在检查...",
    "pay-re-fail": "支付失败",
    "pay-re-nil": "支付结果是一只薛定谔的猫",
    "pay-re-ok": "支付成功",
    "pay-re-wait": "等待支付中",
    "pay-step-checkout-title": "确认订单",
    "pay-step-choose-nil": "☝ 请选择上面的一个支付方式 👆",
    "pay-step-choose-tip": "您可以选择下面任意一种支付方式支付本订单",
    "pay-step-choose-tip2": "您将使用${val}支付本订单",
    "pay-step-choose-title": "支付方式",
    "pay-step-choose-title2": "选择支付方式",
    "pay-step-done-title": "完成",
    "pay-step-proceed-create-order": "正在创建订单...",
    "pay-step-proceed-fetch-order": "正在获取订单...",
    "pay-step-proceed-nil": "您未选择任何支付方式",
    "pay-step-proceed-tip": "使用${val}支付本订单",
    "pay-step-proceed-title": "支付",
    "pay-tip-wx-qrcode": "请于15分钟内用微信扫一扫付款码",
    "pay-tip-zfb-qrcode": "请于15分钟内用支付宝扫一扫付款码",
    "pay-title": "支付流程",
    "pay-wx": "微信支付",
    "pay-zfb": "支付宝",
    "paypal-amount_value": "交易金额",
    "paypal-approve-tip": "已经在新标签里为您打开了PayPal支付页面，如果没有打开，请点击☝上面的图标。支付完毕，页面会自动感知到，如果没有反应，试着点击👇下面的【检查支付结果】按钮。",
    "paypal-cap-id": "记录ID",
    "paypal-cap-status": "记录状态",
    "paypal-currency": "货币单位",
    "paypal-id": "PayPal交易号",
    "paypal-payer_email": "交易账户邮箱",
    "paypal-payer_id": "交易账户ID",
    "photo": "照片",
    "post-content-blank": "您提交的内容不能为空，也不能少于10个字",
    "profile-title": "我的基本信息",
    "pubat": "发布日期",
    "read-du": "阅读时长",
    "role": "角色",
    "role-as-guest": "访客",
    "role-as-normal": "普通用户",
    "role-as-vip": "VIP用户",
    "role-dft": "默认角色",
    "role-flt-tip": "请输入角色名过滤",
    "role-manage": "角色管理",
    "role-meta": "角色属性",
    "role-meta-tip": "请选择一个角色查看详情",
    "role-name": "角色名",
    "role-select-tip": "请选择角色",
    "role-val": "角色值",
    "shop-basket-clean-confirm": "您确定要清空购物车内全部商品吗？这是一个不能撤回的操作。",
    "shop-basket-remove-confirm": "您确定要从购物车中删除这个商品吗？",
    "sort": "排序",
    "sort-tip-asc": "越小越靠前",
    "sort-tip-desc": "越大越靠前",
    "sort-val": "排序值",
    "topic": "主题",
    "type": "类型",
    "type-new": "新类型",
    "video-title": "视频标题",
    "watch_c": "浏览次数",
    "waybil-com-ane": "安能物流",
    "waybil-com-best": "百世快递",
    "waybil-com-db": "德邦快递",
    "waybil-com-ems": "中国邮政速递物流",
    "waybil-com-jdl": "京东物流",
    "waybil-com-pj": "品骏快递",
    "waybil-com-sf": "顺丰快递",
    "waybil-com-sto": "申通快递",
    "waybil-com-uce": "优速快递",
    "waybil-com-yto": "圆通速递",
    "waybil-com-yunda": "韵达快递",
    "waybil-com-zto": "中通快递"
  }); //============================================================
  // JOIN: zh-cn/wn-manager.i18n.json
  //============================================================

  Ti.Preload("ti/i18n/zh-cn/wn-manager.i18n.json", {
    "ti-loading": "加载中...",
    "wn-adaptlist": "对象浏览器",
    "wn-create-fail": "创建失败",
    "wn-create-invalid": "新对象名称不能包括非法字符",
    "wn-create-ok": "创建成功",
    "wn-create-too-long": "新对象名称过长",
    "wn-del-item": "正在删除: \"${name}\"",
    "wn-del-no-empty-folder": "目录\"${nm}\"不是空的，您是否要全部删除？点击\"否\"跳过",
    "wn-del-none": "请选择至少一个文件进行删除!",
    "wn-del-ok": "已有 ${N} 个对象被移除",
    "wn-download-dir": "对象 \"${nm}\" 是一个目录，点击\"继续\"将跳过它并下载下一个文件，点击\"终止\"将结束本次操作!",
    "wn-download-none": "请选择至少一个文件进行下载!",
    "wn-download-too-many": "即将逐个下载 ${N} 个文件，继续吗？",
    "wn-expose-hidden-off": "不显示隐藏的对象",
    "wn-expose-hidden-on": "显示隐藏的对象",
    "wn-gui": "通用布局界面",
    "wn-obj-preview": "对象预览",
    "wn-obj-puretext": "纯文本编辑器",
    "wn-obj-single-com": "单控件测试套",
    "wn-publish-done": "发布成功",
    "wn-publish-to-nil": "未设置发布目标",
    "wn-publish-to-noexist": "发布目标不存在",
    "wn-rename": "重命名对象 \"${name}\"",
    "wn-rename-fail": "重命名失败",
    "wn-rename-invalid": "名称不能包括非法字符",
    "wn-rename-none": "请选择一个文件重命名!",
    "wn-rename-ok": "重命名成功",
    "wn-rename-suffix-changed": "您的文件后缀名发生变化，您需要自动为您补全原来的后缀吗？",
    "wn-rename-too-long": "名称过长",
    "wn-thing-manager": "数据管理器",
    "wn-view-opening": "正在加载界面..."
  }); //============================================================
  // JOIN: zh-cn/wn-obj-preview.i18n.json
  //============================================================

  Ti.Preload("ti/i18n/zh-cn/wn-obj-preview.i18n.json", {
    "wop-fullscreen-enter": "进入全屏",
    "wop-fullscreen-quit": "退出全屏"
  }); //============================================================
  // JOIN: zh-cn/wn-thing.i18n.json
  //============================================================

  Ti.Preload("ti/i18n/zh-cn/wn-thing.i18n.json", {
    "thing-clean": "清空回收站",
    "thing-cleaning": "正在清空...",
    "thing-content": "对象内容",
    "thing-content-hide": "隐藏内容",
    "thing-content-show": "显示内容",
    "thing-create": "创建新对象",
    "thing-create-in-recyclebin": "请先退出回收站，再创建新对象",
    "thing-enter-recyclebin": "打开回收站",
    "thing-files": "对象文件表",
    "thing-files-hide": "隐藏文件表",
    "thing-files-show": "显示文件表",
    "thing-filter-kwdplhd": "请输入查询条件",
    "thing-leave-recyclebin": "退出回收站",
    "thing-meta": "对象属性",
    "thing-meta-hide": "隐藏属性",
    "thing-meta-show": "显示属性",
    "thing-recycle-bin": "回收站",
    "thing-restore": "恢复选中",
    "thing-restore-none": "请先选择要恢复的数据",
    "thing-restoring": "正在恢复..."
  }); //============================================================
  // JOIN: zh-cn/_net.i18n.json
  //============================================================

  Ti.Preload("ti/i18n/zh-cn/_net.i18n.json", {
    "net-ct": "创建时间",
    "net-flt-nil": "查找视频名称",
    "net-vod-add-video": "添加视频",
    "net-vod-cate": "视频分类",
    "net-vod-du-long": "长视频",
    "net-vod-du-short": "短视频",
    "net-vod-du-tv": "剧集视频",
    "net-vod-duration": "视频时长",
    "net-vod-size": "视频大小",
    "net-vod-video-nil": "请选择一个视频查看详情"
  }); //============================================================
  // JOIN: zh-cn/_ti.i18n.json
  //============================================================

  Ti.Preload("ti/i18n/zh-cn/_ti.i18n.json", {
    "add": "添加",
    "add-item": "添加新项",
    "amount": "数量",
    "attachment": "附件",
    "avatar": "头像",
    "banner": "头图",
    "batch-none": "请从下面列表中选择至少一个对象进行批量更新",
    "batch-update": "批量更新...",
    "blank": "空白",
    "blank-to-edit": "请选择要编辑的项目",
    "brief": "摘要",
    "brief-d": "摘要描述",
    "brief-i": "摘要说明",
    "buy": "购买",
    "buy-now": "立即购买",
    "cancel": "取消",
    "cancel-all": "取消选中",
    "candidate": "备选项",
    "captcha": "验证码",
    "captcha-chagne": "换一张",
    "captcha-tip": "请输入图中的验证码",
    "chart": "图表",
    "chart-bar": "柱状图",
    "chart-line": "折线图",
    "chart-pie": "饼状图",
    "chart-rank": "条状图",
    "checked": "已选中",
    "choose": "选择",
    "choose-file": "选择文件",
    "choose-obj": "选择对象",
    "clean": "清理",
    "clear": "清除",
    "close": "关闭",
    "confirm": "确认",
    "console": "控制台",
    "content": "内容",
    "continue": "继续",
    "create": "新建",
    "create-now": "立即创建",
    "creating": "正在创建...",
    "date": "日期",
    "debug": "调试",
    "default": "默认",
    "del": "删除",
    "del-checked": "删除选中",
    "del-hard": "选中项目即将被直接删除，此操作不可撤销，您确定要继续吗？",
    "del-ing": "正在删除...",
    "del-none": "请从下面列表中选择至少一个对象进行删除",
    "desktop": "桌面",
    "detail": "详情",
    "dis-name": "显示名",
    "disable": "禁用",
    "disabled": "禁用的",
    "doing": "正在执行...",
    "download": "下载",
    "download-to-local": "下载到本地",
    "drop-file-here-to-upload": "拖拽文件至此以便上传",
    "drop-here": "拖拽文件至此",
    "dt-in": "在${val}内",
    "dt-u-day": "天",
    "dt-u-hour": "小时",
    "dt-u-min": "分钟",
    "dt-u-month": "月",
    "dt-u-ms": "好眠",
    "dt-u-sec": "秒",
    "dt-u-week": "周",
    "dt-u-year": "年",
    "e-auth-account-noexists": "账户不存在",
    "e-auth-home-forbidden": "账户不具备进入主目录的权限",
    "e-auth-login-NoPhoneOrEmail": "错误的手机号或邮箱地址",
    "e-auth-login-NoSaltedPasswd": "未设置合法的密码",
    "e-auth-login-invalid-passwd": "账户密码未通过校验",
    "e-io-obj-exists": "但是对象已然存在",
    "e-io-obj-noexists": "对象其实并不存在",
    "e-io-obj-noexistsf": "对象[${nm}]其实并不存在",
    "edit": "编辑",
    "edit-com": "编辑控件",
    "email": "邮箱",
    "emoji": "表情符合",
    "empty": "空",
    "empty-data": "无数据",
    "enable": "启用",
    "enabled": "启用的",
    "error": "错误",
    "export-data": "导出数据...",
    "fail": "失败",
    "false": "否",
    "favorites": "收藏",
    "female": "女",
    "filter": "过滤",
    "find": "查找",
    "find-data": "查找数据",
    "gender": "性别",
    "global-settings": "全局设置",
    "history-record": "历史记录",
    "home": "主目录",
    "i-known": "我知道了",
    "icon": "图标",
    "icon-code-tip": "请输入图标代码，如 zmdi-case",
    "import-data": "导入数据...",
    "index": "索引",
    "info": "信息",
    "input": "输入",
    "input-tags": "输入标签",
    "label": "标签",
    "lat": "纬度",
    "lbs-place-add": "添加地点",
    "lbs-ro-rnb-k-first": "起始数字",
    "lbs-ro-rnb-k-type": "显示类型",
    "lbs-ro-rnb-k-type-alpha": "小写字母",
    "lbs-ro-rnb-k-type-capital": "大写字母",
    "lbs-ro-rnb-k-type-number": "数字",
    "lbs-ro-rnb-title": "自动设置线路标签",
    "link": "链接",
    "link-href": "链接目标",
    "link-text": "链接文字",
    "lng": "经度",
    "loading": "加载中...",
    "login": "登录",
    "login-name": "登录名",
    "logout": "退出",
    "logout-ing": "正在注销...",
    "male": "男",
    "map-hybrid": "俯瞰地图",
    "map-roadmap": "道路地图",
    "map-satellite": "卫星照片",
    "map-terrain": "地形地图",
    "map-type": "地图类型",
    "me": "我",
    "media": "媒体",
    "meta": "元数据",
    "mine": "我的",
    "modal": "模式",
    "modify": "修改",
    "more": "更多",
    "msg": "消息",
    "name": "名称",
    "new-item": "新项目",
    "newsfeed": "消息流",
    "next": "下一步",
    "nil": "无",
    "nil-obj": "请选择一个对象",
    "no": "否",
    "no-saved": "您有未保存的数据",
    "no-selected": "未选择",
    "no-title": "无标题",
    "obj": "对象",
    "off": "关",
    "ok": "确定",
    "on": "开",
    "open": "打开",
    "open-newtab": "在新标签打开",
    "others": "其他",
    "paging-change-pgsz": "当前每页有${pgsz}条记录，您想修改为：",
    "paging-change-pgsz-invalid": "页大小必须是整数数字，而且必须大于0，可您... -_-!",
    "paging-change-pn": "当前第${pn}页，您想跳转到：（请输入 1 至 ${pgc} 之间的数字）",
    "paging-change-pn-invalid": "页码必须是整数数字，而且必须为 1 至 ${pgc} 之间的数字",
    "paging-first": "首页",
    "paging-last": "尾页",
    "paging-next": "后一页",
    "paging-prev": "前一页",
    "paging-sum": "共${pgc}页${sum}条记录，当前${count}/${pgsz}",
    "passwd": "密码",
    "passwd-reset": "重置密码",
    "path": "路径",
    "phone": "手机",
    "phone-nb": "手机号",
    "post": "提交",
    "prev": "上一步",
    "price": "价格",
    "profile": "资料",
    "profile-edit": "编辑资料",
    "prompt": "询问",
    "properties": "属性",
    "publish": "发布",
    "publishing": "正在发布...",
    "refresh": "刷新",
    "refresh-hard": "硬性刷新",
    "refresh-hard-clear": "清空缓存并硬性刷新",
    "reloading": "重新加载数据...",
    "remove": "移除",
    "removing": "正在移除...",
    "rename": "重命名...",
    "renaming": "正在重命名...",
    "reset": "重置",
    "reset-change": "撤销修改",
    "reset-data": "重置数据",
    "restore": "恢复",
    "revoke": "撤销",
    "revoke-change": "撤销修改",
    "run": "运行",
    "run-finished": "脚本执行结束",
    "run-welcome": "正在运行脚本，请稍后 ...",
    "save": "保存",
    "save-change": "保存修改",
    "save-done": "保存成功",
    "save-now": "立即保存",
    "saving": "正在保存...",
    "score": "评分",
    "score-count": "打分人数",
    "select": "选择",
    "select-all": "全部选中",
    "send": "发送",
    "settings": "设置",
    "slogan": "标语",
    "source-code": "源代码",
    "stat-date-at": "统计日期",
    "stat-date-at-oor": "这个日期的统计数据还未就绪",
    "stat-date-span": "时间跨度",
    "stop": "停止",
    "structure": "结构",
    "success": "成功",
    "sys-settings": "系统设置",
    "tablet": "平板",
    "terminal": "终端",
    "terminate": "终止",
    "text": "文字",
    "timestamp": "时间戳",
    "title": "标题",
    "total-count": "共 ${nb?0} ${unit?项}",
    "trace": "跟踪",
    "track": "消息",
    "true": "是",
    "type": "类型",
    "under-construction": "正在施工中",
    "unknown": "未知",
    "upload": "上传",
    "upload-done": "文件上传已完成",
    "upload-file": "上传文件...",
    "upload-nofinished": "文件上传还没有完成",
    "uploading": "正在上传",
    "user-avator": "用户头像",
    "value": "值",
    "view": "查看",
    "view-resource": "查看源代码",
    "warn": "警告",
    "website": "网站",
    "yes": "是"
  }); //============================================================
  // JOIN: zh-cn/_wn.i18n.json
  //============================================================

  Ti.Preload("ti/i18n/zh-cn/_wn.i18n.json", {
    "wn-admin-check-obj-thumb": "检查图像缩略图...",
    "wn-admin-tools": "管理工具",
    "wn-ctt-css-text": "CSS样式文件",
    "wn-ctt-folder-text": "文件夹",
    "wn-ctt-html-text": "HTML文本",
    "wn-ctt-js-text": "JS脚本",
    "wn-ctt-json-text": "JSON文本",
    "wn-ctt-less-text": "LESS文本",
    "wn-ctt-md-text": "Markdown文本",
    "wn-ctt-mjs-text": "模块化JS脚本",
    "wn-ctt-sass-text": "SASS文本",
    "wn-ctt-thing_set-text": "数据集合",
    "wn-ctt-txt-text": "纯文本",
    "wn-ctt-wnml-text": "WNML源文件",
    "wn-ctt-xml-text": "XML文本",
    "wn-edit-com-nil": "默认为标签控件",
    "wn-en-his-ct": "创建时间",
    "wn-en-his-flt-tip": "请输入用户ID或者名称过滤",
    "wn-en-his-mor": "操作细节",
    "wn-en-his-opt": "操作",
    "wn-en-his-tar": "目标",
    "wn-en-his-tid": "目标ID",
    "wn-en-his-tnm": "目标名",
    "wn-en-his-ttp": "目标类型",
    "wn-en-his-uid": "用户ID",
    "wn-en-his-unm": "用户名",
    "wn-en-his-usr": "用户",
    "wn-en-his-utp": "用户类型",
    "wn-invalid-mimes": "不支持的文件内容类型 \"${current}\"，仅能支持 \"${supports}\"",
    "wn-invalid-types": "不支持的文件扩展名 \"${current}\"，仅能支持 \"${supports}\"",
    "wn-key-c": "创建者",
    "wn-key-ct": "创建时间",
    "wn-key-d0": "D0",
    "wn-key-d1": "D1",
    "wn-key-data": "数据",
    "wn-key-duration": "时长",
    "wn-key-expi": "过期时间",
    "wn-key-g": "主组",
    "wn-key-grp-advance": "高级",
    "wn-key-grp-basic": "基本",
    "wn-key-grp-customized": "自定义",
    "wn-key-grp-more": "更多",
    "wn-key-grp-others": "其他",
    "wn-key-grp-privilege": "权限",
    "wn-key-grp-thumb": "缩略图",
    "wn-key-grp-timestamp": "时间戳",
    "wn-key-height": "高",
    "wn-key-icon": "图标",
    "wn-key-id": "ID",
    "wn-key-len": "大小",
    "wn-key-lm": "修改",
    "wn-key-m": "修改者",
    "wn-key-md": "基本权限",
    "wn-key-mime": "内容类型",
    "wn-key-nm": "对象名",
    "wn-key-ph": "路径",
    "wn-key-pid": "父对象",
    "wn-key-pvg": "定制权限",
    "wn-key-race": "族类",
    "wn-key-sha1": "内容签名",
    "wn-key-thumb": "缩略图",
    "wn-key-title": "标题",
    "wn-key-tp": "类型",
    "wn-key-width": "宽",
    "wn-obj-nosaved": "您有未保存的对象",
    "wn-oc-auto-type": "全部类型",
    "wn-oc-free": "请输入对象完整名称，包括扩展名，譬如 `myfile.xml`",
    "wn-oc-tip": "新对象名称",
    "wn-race-DIR": "目录",
    "wn-race-FILE": "文件",
    "wn-th-acc-pwd-choose-none": "请选择要重置密码的账号（可多选）",
    "wn-th-acc-pwd-done": "已经为${n}名用户重置了密码",
    "wn-th-acc-pwd-invalid": "密码中不得包含单双引号星号等非法字符",
    "wn-th-acc-pwd-reset-tip": "将密码重置为",
    "wn-th-acc-pwd-too-short": "您输入的密码过短，不能少于6位，最好为数字字母以及特殊字符的组合",
    "wn-th-recount-media": "重新计算当前文件数量",
    "wn-th-recount-media-done": "当前文件数量: ${n}"
  }); ////////////////////////////////////////////////////////////
  // The End
})();