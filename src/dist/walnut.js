/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/lib/walnut/walnut.mjs");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/lib/walnut/walnut.mjs":
/*!***********************************!*\
  !*** ./src/lib/walnut/walnut.mjs ***!
  \***********************************/
/*! exports provided: Wn, default */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Wn\", function() { return Wn; });\n/* harmony import */ var _wn_io_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wn-io.mjs */ \"./src/lib/walnut/wn-io.mjs\");\n/* harmony import */ var _wn_obj_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./wn-obj.mjs */ \"./src/lib/walnut/wn-obj.mjs\");\n/* harmony import */ var _wn_session_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./wn-session.mjs */ \"./src/lib/walnut/wn-session.mjs\");\n/* harmony import */ var _wn_sys_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./wn-sys.mjs */ \"./src/lib/walnut/wn-sys.mjs\");\n/* harmony import */ var _wn_util_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./wn-util.mjs */ \"./src/lib/walnut/wn-util.mjs\");\n/* harmony import */ var _wn_dict_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./wn-dict.mjs */ \"./src/lib/walnut/wn-dict.mjs\");\n/* harmony import */ var _wn_open_obj_selector_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./wn-open-obj-selector.mjs */ \"./src/lib/walnut/wn-open-obj-selector.mjs\");\n/* harmony import */ var _wn_open_thing_manager_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./wn-open-thing-manager.mjs */ \"./src/lib/walnut/wn-open-thing-manager.mjs\");\n/* harmony import */ var _wn_edit_obj_meta_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./wn-edit-obj-meta.mjs */ \"./src/lib/walnut/wn-edit-obj-meta.mjs\");\n/* harmony import */ var _wn_edit_obj_content_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./wn-edit-obj-content.mjs */ \"./src/lib/walnut/wn-edit-obj-content.mjs\");\n/* harmony import */ var _wn_edit_ti_component_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./wn-edit-ti-component.mjs */ \"./src/lib/walnut/wn-edit-ti-component.mjs\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//---------------------------------------\r\nconst WALNUT_VERSION = \"1.0\"\r\n//---------------------------------------\r\n// For Wn.Sys.exec command result callback\r\nconst HOOKs = {\r\n\r\n}\r\n//---------------------------------------\r\nconst Wn = {\r\n  Version: WALNUT_VERSION,\r\n  Io: _wn_io_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"], Obj: _wn_obj_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"], Session: _wn_session_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"], Sys: _wn_sys_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"], Util: _wn_util_mjs__WEBPACK_IMPORTED_MODULE_4__[\"default\"], Dict: _wn_dict_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"], \r\n  OpenObjSelector: _wn_open_obj_selector_mjs__WEBPACK_IMPORTED_MODULE_6__[\"default\"], EditObjMeta: _wn_edit_obj_meta_mjs__WEBPACK_IMPORTED_MODULE_8__[\"default\"], EditObjContent: _wn_edit_obj_content_mjs__WEBPACK_IMPORTED_MODULE_9__[\"default\"],\r\n  EditTiComponent: _wn_edit_ti_component_mjs__WEBPACK_IMPORTED_MODULE_10__[\"default\"], OpenThingManager: _wn_open_thing_manager_mjs__WEBPACK_IMPORTED_MODULE_7__[\"default\"],\r\n  //-------------------------------------\r\n  addHook(key, fn) {\r\n    Ti.Util.pushValue(HOOKs, key, fn)\r\n  },\r\n  //-------------------------------------\r\n  doHook(key, payload) {\r\n    let fns = HOOKs[key]\r\n    if(_.isArray(fns) && fns.length > 0) {\r\n      for(let fn of fns) {\r\n        fn(payload)\r\n      }\r\n    }\r\n  }\r\n}\r\n//---------------------------------------\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Wn);\r\n//---------------------------------------\r\nif(window) {\r\n  window.Wn = Wn\r\n}\n\n//# sourceURL=webpack:///./src/lib/walnut/walnut.mjs?");

/***/ }),

/***/ "./src/lib/walnut/wn-dict.mjs":
/*!************************************!*\
  !*** ./src/lib/walnut/wn-dict.mjs ***!
  \************************************/
/*! exports provided: default */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n///////////////////////////////////////////////////////////\r\nconst WnDict = {  \r\n  /***\r\n   * @return {Ti.Dict}\r\n   */\r\n  evalOptionsDict({\r\n    options, findBy, itemBy,\r\n    valueBy, textBy, iconBy,\r\n    dictShadowed = true\r\n  }, hooks) {\r\n    // Quck Dict Name\r\n    let dictName = Ti.DictFactory.DictReferName(options)\r\n    if(dictName) {\r\n      return Ti.DictFactory.CheckDict(dictName, hooks)\r\n    }\r\n\r\n    // Explaint \r\n    return Ti.DictFactory.CreateDict({\r\n      //...............................................\r\n      data  : Wn.Util.genQuery(options, {vkey:null}),\r\n      query : Wn.Util.genQuery(findBy),\r\n      item  : Wn.Util.genQuery(itemBy, {errorAs:null}),\r\n      //...............................................\r\n      getValue : Ti.Util.genGetter(valueBy || \"id|value\"),\r\n      getText  : Ti.Util.genGetter(textBy  || \"title|text|nm\"),\r\n      getIcon  : Ti.Util.genGetter(iconBy  || Wn.Util.getObjThumbIcon),\r\n      //...............................................\r\n    }, {\r\n      shadowed : dictShadowed,\r\n      hooks\r\n    })\r\n  },\r\n  //-------------------------------------------------------\r\n  /***\r\n   * Setup dictionary set\r\n   */\r\n  setup(dicts) {\r\n    //console.log(dicts)\r\n    _.forEach(dicts, (dict, name)=>{\r\n      let d = Ti.DictFactory.GetDict(name)\r\n      if(!d) {\r\n        //console.log(\"create\", name, dict)\r\n        Ti.DictFactory.CreateDict({\r\n          //...............................................\r\n          data  : Wn.Util.genQuery(dict.data, {vkey:null}),\r\n          query : Wn.Util.genQuery(dict.query),\r\n          item  : Wn.Util.genQuery(dict.item),\r\n          //...............................................\r\n          getValue : Ti.Util.genGetter(dict.value),\r\n          getText  : Ti.Util.genGetter(dict.text),\r\n          getIcon  : Ti.Util.genGetter(dict.icon),\r\n          //...............................................\r\n          shadowed : Ti.Util.fallback(dict.shadowed, true)\r\n          //...............................................\r\n        }, {name})\r\n      }\r\n    })\r\n  },\r\n  //-------------------------------------------------------\r\n  /***\r\n   * \r\n   */\r\n  hMakerComponents() {\r\n    return Ti.DictFactory.GetOrCreate({\r\n      //...............................................\r\n      data  : Wn.Util.genQuery(\"ti coms -cqn\", {vkey:null}),\r\n      //...............................................\r\n      getValue : it => it.name,\r\n      getText  : it => (it.title || it.name),\r\n      getIcon  : it => (it.icon  || \"im-plugin\"),\r\n      //...............................................\r\n      isMatched : (it, v)=>{\r\n        if(it.name == v || it.title == v) {\r\n          return true\r\n        }\r\n        if(it.name && it.name.indexOf(v)>=0) {\r\n          return true\r\n        }\r\n        if(it.title) {\r\n          if(it.title.indexOf(v)>=0) {\r\n            return true\r\n          }\r\n          let text = Ti.I18n.text(it.title)\r\n          if(text && text.indexOf(v)>=0) {\r\n            return true\r\n          }\r\n        }\r\n        return false\r\n      },\r\n      //...............................................\r\n      shadowed : true\r\n      //...............................................\r\n    }, {name: \"hMakerComponents\"})\r\n  }\r\n  //-------------------------------------------------------\r\n}\r\n///////////////////////////////////////////////////////////\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (WnDict);\n\n//# sourceURL=webpack:///./src/lib/walnut/wn-dict.mjs?");

/***/ }),

/***/ "./src/lib/walnut/wn-edit-obj-content.mjs":
/*!************************************************!*\
  !*** ./src/lib/walnut/wn-edit-obj-content.mjs ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n////////////////////////////////////////////////////\r\nasync function EditObjContent(pathOrObj=\"~\", {\r\n  title, icon, type = \"info\", closer = true,\r\n  // undefined is auto, null is hidden\r\n  // if auto, 'i18n:save' for saveBy, else 'i18n:ok'\r\n  textOk = undefined,  \r\n  textCancel = \"i18n:cancel\",\r\n  position = \"top\",\r\n  width=640, height=\"80%\", spacing,\r\n  readonly=false,\r\n  showEditorTitle=true,\r\n  content,\r\n  blankText=\"i18n:blank\"\r\n}={}){\r\n  //............................................\r\n  // Load meta\r\n  let meta = pathOrObj\r\n  if(_.isString(meta)) {\r\n    meta = await Wn.Io.loadMeta(pathOrObj)\r\n  }\r\n  //............................................\r\n  if(_.isUndefined(textOk)) {\r\n    textOk = this.saveBy ? 'i18n:save' : 'i18n:ok'\r\n  }\r\n  //............................................\r\n  let autoSave = Ti.Util.isNil(content)\r\n  //............................................\r\n  let theIcon  = icon  || Wn.Util.getObjIcon(meta, \"zmdi-receipt\")\r\n  let theTitle = title || \"i18n:edit\"\r\n  let theContent = autoSave \r\n                    ? await Wn.Io.loadContent(meta)\r\n                    : content;\r\n  //............................................\r\n  let newContent = await Ti.App.Open({\r\n    //------------------------------------------\r\n    type, width, height, spacing, position, closer,\r\n    title   : theTitle,\r\n    result  : theContent,\r\n    //------------------------------------------\r\n    comType : \"ti-text-raw\",\r\n    comConf : {\r\n      readonly, blankText,\r\n      icon  : theIcon,\r\n      title : Wn.Util.getObjDisplayName(meta),\r\n      content : theContent,\r\n      showTitle : showEditorTitle,\r\n      ignoreKeyUp : true,\r\n    },\r\n    //------------------------------------------\r\n    components : [\"@com:ti/text/raw\"]\r\n    //------------------------------------------\r\n  })\r\n  //............................................\r\n  //console.log(`newContent: [${newContent}]`)\r\n  if(autoSave\r\n    && !_.isUndefined(newContent) \r\n    && newContent != theContent) {\r\n    await Wn.Io.saveContentAsText(meta, newContent)\r\n    await Ti.Toast.Open(\"i18n:save-done\", \"success\")\r\n  }\r\n  //............................................\r\n  return newContent\r\n}\r\n////////////////////////////////////////////////////\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (EditObjContent);\n\n//# sourceURL=webpack:///./src/lib/walnut/wn-edit-obj-content.mjs?");

/***/ }),

/***/ "./src/lib/walnut/wn-edit-obj-meta.mjs":
/*!*********************************************!*\
  !*** ./src/lib/walnut/wn-edit-obj-meta.mjs ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n////////////////////////////////////////////////////\r\nasync function EditObjMeta(pathOrObj=\"~\", {\r\n  icon, title, \r\n  type   = \"info\", \r\n  closer = true,\r\n  textOk = \"i18n:ok\",\r\n  textCancel = \"i18n:cancel\",\r\n  position   = \"top\",\r\n  width      = 640,\r\n  height     = \"80%\", \r\n  spacing,\r\n  currentTab = 0,\r\n  // static tabs\r\n  // if emtpy, apply the default\r\n  // “auto\" will load by `ti editmeta`, it will override the currentTab\r\n  fields     = [],\r\n  fixedKeys  = [\"thumb\"],\r\n  saveKeys   = [\"thumb\"],  // If the key changed, `cancel` same as `OK`\r\n  autoSave   = true\r\n}={}){\r\n  //............................................\r\n  // Load meta\r\n  let meta = pathOrObj\r\n  if(_.isString(meta)) {\r\n    meta = await Wn.Io.loadMeta(pathOrObj)\r\n  }\r\n  //............................................\r\n  // Fixed key map\r\n  let fixeds = {}\r\n  _.forEach(fixedKeys, k => fixeds[k]=true)\r\n  //............................................\r\n  // Save key map\r\n  let saves = {}\r\n  _.forEach(saveKeys, k => saves[k]=true)\r\n  //............................................\r\n  // Auto load \r\n  if(\"auto\" == fields) {\r\n    let reo = await Wn.Sys.exec2(`ti metas id:${meta.id} -cqn`, {as:\"json\"})\r\n    if(reo) {\r\n      fields = reo.fields\r\n      currentTab = reo.currentTab || currentTab || 0\r\n    }\r\n  }\r\n  //............................................\r\n  // Default tabs\r\n  if(_.isEmpty(fields) || !_.isArray(fields)) {\r\n    fields = [{ \r\n      title: \"basic\",\r\n      fields: [\r\n        \"id\", \"nm\", \"title\",  \"icon\", \"thumb\",\"ph\", \"race\", \"tp\", \"mime\", \r\n        \"width\", \"height\", \"len\"],\r\n    }, {\r\n      title: \"privilege\",\r\n      fields: [\"c\",\"m\",\"g\", \"md\", \"pvg\"]\r\n    }, {\r\n      title: \"timestamp\",\r\n      fields: [\"ct\", \"lm\", \"expi\"]\r\n    }, {\r\n      title: \"others\",\r\n      fields: [\"...\"]\r\n    }]\r\n  }\r\n  //............................................\r\n  let myFormFields = Wn.Obj.evalFields(meta, fields, (fld)=>{\r\n    if(fixeds[fld.uniqKey]) {\r\n      return fld\r\n    }\r\n    if(fld.quickName  && _.isUndefined(fld.value)) {\r\n      return\r\n    }\r\n    return fld\r\n  })\r\n  //............................................\r\n  let theIcon  = icon  || Wn.Util.getObjIcon(meta, \"zmdi-info-outline\")\r\n  let theTitle = title || Wn.Util.getObjDisplayName(meta)\r\n  //............................................\r\n  let reo = await Ti.App.Open({\r\n    //------------------------------------------\r\n    type, width, height, spacing, position, closer,\r\n    icon  : theIcon,\r\n    title : theTitle,\r\n    //------------------------------------------\r\n    actions : [{\r\n      text: textOk,\r\n      handler : ({$main})=>_.cloneDeep({\r\n        updates : $main.updates,\r\n        data : $main.meta\r\n      })\r\n    }, {\r\n      text: textCancel,\r\n      handler : ({$main})=>{\r\n        // Is in saveKeys\r\n        let ks = _.keys($main.updates)\r\n        for(let k of ks) {\r\n          if(saves[k]) {\r\n            return _.cloneDeep({\r\n              updates : $main.updates,\r\n              data : $main.meta\r\n            })\r\n          }\r\n        }\r\n        // Nothing be updated, just return undefined\r\n      }\r\n    }],\r\n    //------------------------------------------\r\n    comType : \"modal-inner-body\",\r\n    //------------------------------------------\r\n    components : [{\r\n      name : \"modal-inner-body\",\r\n      globally : false,\r\n      data : {\r\n        myFormFields,\r\n        currentTab, \r\n        meta,\r\n        updates : {}\r\n      },\r\n      template : `<ti-form\r\n        mode=\"tab\"\r\n        :current-tab=\"currentTab\"\r\n        :fields=\"myFormFields\"\r\n        :data=\"meta\"\r\n        @field:change=\"onFieldChange\"\r\n        @change=\"onChange\"\r\n        />`,\r\n      methods : {\r\n        onChange(data){\r\n          this.meta = data\r\n        },\r\n        onFieldChange({name, value}={}) {\r\n          let obj = Ti.Types.toObjByPair({name, value})\r\n          this.updates = _.assign({}, this.updates, obj)\r\n        }\r\n      }\r\n    }, \"@com:ti/form\", \"@com:wn/imgfile\"]\r\n    //------------------------------------------\r\n  })\r\n  //............................................\r\n  // User cancel\r\n  if(!reo) {\r\n    return\r\n  }\r\n  //............................................\r\n  let {updates} = reo\r\n  let saved = false\r\n  if(autoSave &&!_.isEmpty(updates)) {\r\n    let json = JSON.stringify(updates)\r\n    let cmdText = `obj 'id:${meta.id}' -ocqn -u`\r\n    let newMeta = await Wn.Sys.exec2(cmdText, {input:json, as:\"json\"})\r\n    await Ti.Toast.Open(\"i18n:save-done\", \"success\")\r\n    saved = true\r\n\r\n    return {updates, data:newMeta, saved}\r\n  }\r\n  //............................................\r\n  return reo\r\n}\r\n////////////////////////////////////////////////////\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (EditObjMeta);\n\n//# sourceURL=webpack:///./src/lib/walnut/wn-edit-obj-meta.mjs?");

/***/ }),

/***/ "./src/lib/walnut/wn-edit-ti-component.mjs":
/*!*************************************************!*\
  !*** ./src/lib/walnut/wn-edit-ti-component.mjs ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n////////////////////////////////////////////////////\r\nasync function EditTiComponent({comType,comConf}={}, {\r\n  icon= \"fas-pencil-ruler\",\r\n  title= \"i18n:edit-com\", \r\n  type   = \"info\", \r\n  closer = true,\r\n  textOk = \"i18n:ok\",\r\n  textCancel = \"i18n:cancel\",\r\n  position   = \"top\",\r\n  width      = 800,\r\n  height     = \"90%\",\r\n  spacing\r\n}={}){\r\n  //............................................\r\n  return await Ti.App.Open({\r\n    //------------------------------------------\r\n    type, width, height, spacing, position, closer,\r\n    icon, title,\r\n    textOk, textCancel,\r\n    //------------------------------------------\r\n    comType : \"hmaker-edit-com\",\r\n    comConf : {\r\n      value: {comType, comConf}\r\n    },\r\n    //------------------------------------------\r\n    result: {\r\n      comType : comType, \r\n      comConf : _.cloneDeep(comConf)\r\n    },\r\n    //------------------------------------------\r\n    components : [\"@com:hmaker/edit-com\"]\r\n    //------------------------------------------\r\n  })\r\n}\r\n////////////////////////////////////////////////////\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (EditTiComponent);\n\n//# sourceURL=webpack:///./src/lib/walnut/wn-edit-ti-component.mjs?");

/***/ }),

/***/ "./src/lib/walnut/wn-io.mjs":
/*!**********************************!*\
  !*** ./src/lib/walnut/wn-io.mjs ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n////////////////////////////////////////////\r\nfunction URL(actionName) {\r\n  return \"/o/\" + actionName\r\n}\r\n//-----------------------------------------\r\nfunction AJAX_RETURN(reo, invalid) {\r\n  if(!reo.ok) {\r\n    if(_.isUndefined(invalid))\r\n      throw reo\r\n    return invalid\r\n  }\r\n  return reo.data;\r\n}\r\n////////////////////////////////////////////\r\nconst WnIo = {\r\n  isFullObjId(id) {\r\n    return /^[0-9a-v]{26}(:file:.+)?$/.test(id)\r\n  },\r\n  /***\r\n   * Get object meta by id(fullobjId) or path\r\n   */\r\n  async loadMetaBy(idOrPath) {\r\n    if(WnIo.isFullObjId(idOrPath)) {\r\n      return await WnIo.loadMetaById(idOrPath)\r\n    }\r\n    return await WnIo.loadMeta(idOrPath)\r\n  },\r\n  /***\r\n   * Get object meta by id\r\n   */\r\n  async loadMetaById(id) {\r\n    return await WnIo.loadMeta(\"id:\"+id)\r\n  },\r\n  /***\r\n   * Get object meta by full path\r\n   */\r\n  async loadMeta(path) {\r\n    let url = URL(\"fetch\")\r\n    let reo = await Ti.Http.get(url, {\r\n      params:{\r\n        str : path\r\n      }, \r\n      as:\"json\"})\r\n    return AJAX_RETURN(reo, null)\r\n  },\r\n  /***\r\n   * Get object meta by refer meta\r\n   */\r\n  async loadMetaAt(refer, path) {\r\n    // eval absolute path\r\n    let aph = path;\r\n\r\n    // Relative to refer (path is not absolute)\r\n    if(refer && !(/^(~\\/|\\/|id:)/.test(path))) {\r\n      aph = `id:${refer.pid}/${path}`\r\n    }\r\n    // Do load\r\n    return await WnIo.loadMeta(aph)\r\n  },\r\n  /***\r\n   * Get obj children by meta\r\n   */\r\n  async loadAncestors(str) {\r\n    let url = URL(\"ancestors\")\r\n    let reo = await Ti.Http.get(url, {\r\n      params: {str}, \r\n      as:\"json\"})\r\n    return AJAX_RETURN(reo, [])\r\n  },\r\n  /***\r\n   * Get obj children by meta\r\n   */\r\n  async loadChildren(meta, {skip, limit, sort={nm:1}, mine, match={}}={}) {\r\n    if(!meta)\r\n      return null\r\n    if('DIR' != meta.race)\r\n      return []\r\n    //......................................\r\n    // Load children when linked obj\r\n    if(meta.mnt || meta.ln) {\r\n      let url = URL(\"children\")\r\n      let reo = await Ti.Http.get(url, {\r\n        params: {\r\n          \"str\" :  `id:${meta.id}`,\r\n          \"pg\"  : true\r\n        }, \r\n        as:\"json\"})\r\n      return AJAX_RETURN(reo)\r\n    }\r\n    //......................................\r\n    // Just normal query\r\n    // parent ID\r\n    match.pid = meta.id\r\n\r\n    // find them\r\n    let reo = await WnIo.find({skip, limit, sort, mine, match})\r\n    // Auto set reo path if noexists\r\n    if(meta.ph && reo && _.isArray(reo.list)) {\r\n      for(let child of reo.list) {\r\n        if(!child.ph) {\r\n          child.ph = Ti.Util.appendPath(meta.ph, child.nm)\r\n        }\r\n      }\r\n    }\r\n    return reo\r\n  },\r\n  /***\r\n   * Query object list\r\n   */\r\n  async find({skip=0, limit=100, sort={}, mine=true, match={}}={}) {\r\n    let url = URL(\"find\")\r\n    let reo = await Ti.Http.get(url, {\r\n      params: _.assign({}, match, {\r\n        _l  : limit, \r\n        _o  : skip,\r\n        _me : mine,\r\n        _s  : JSON.stringify(sort)\r\n      }), \r\n      as:\"json\"})\r\n    return AJAX_RETURN(reo)\r\n  },\r\n  async findList(query={}) {\r\n    let reo = await WnIo.find(query)\r\n    if(reo && _.isArray(reo.list)) {\r\n      return reo.list\r\n    }\r\n    return []\r\n  },\r\n  /***\r\n   * Query object list by value\r\n   */\r\n  async findInBy(value, parent, {\r\n    skip=0, limit=100, sort={}, mine=true, match={},\r\n    keys = {\r\n      \"^[0-9a-v]{26}$\" : [\"id\", \"${val}\"]\r\n    },\r\n    dftKey = [\"nm\", \"^.*${val}.*$\"]\r\n  }={}) {\r\n    // Join Key To Match\r\n    if(!_.isUndefined(value)) {\r\n      let key = dftKey;\r\n      for(let regex of _.keys(keys)) {\r\n        if(new RegExp(regex).test(value)) {\r\n          key = keys[regex]\r\n          break\r\n        }\r\n      }\r\n      let k = key[0]\r\n      let v = Ti.S.renderBy(key[1], {val:value})\r\n      match[k] = v\r\n    }\r\n    // Eval Parent\r\n    if(parent) {\r\n      let oP = await WnIo.loadMeta(parent)\r\n      match.pid = oP.id\r\n    }\r\n\r\n    // Do Find\r\n    return await WnIo.find({skip,limit,sort,mine,match})\r\n  },\r\n  async findListInBy(value, parent, query={}) {\r\n    let reo = await WnIo.findInBy(value, parent, query)\r\n    if(reo && _.isArray(reo.list)) {\r\n      return reo.list\r\n    }\r\n    return []\r\n  },\r\n  /***\r\n   * Get obj content by meta:\r\n   */\r\n  async loadContent(meta, {as=\"text\"}={}) {\r\n    // Load by path\r\n    if(_.isString(meta)) {\r\n      meta = await WnIo.loadMeta(meta)\r\n    }\r\n    // un-readable\r\n    if(!meta || 'DIR' == meta.race) {\r\n      return null\r\n    }\r\n    // Do load\r\n    let mime = meta.mime || 'application/octet-stream'\r\n    // PureText\r\n    if(Wn.Util.isMimeText(mime)) {\r\n      let url = URL(\"content\")\r\n      let content = await Ti.Http.get(url, {\r\n        params: {\r\n          str : \"id:\" + meta.id,\r\n          d   : \"raw\"\r\n        }, as})\r\n      // Others just return pure text content\r\n      return content\r\n    }\r\n\r\n    // Others just return the SHA1 finger\r\n    return meta.sha1\r\n  },\r\n  /***\r\n   * Save obj content\r\n   */\r\n  async saveContentAsText(meta, content) {\r\n    if(!meta || 'DIR' == meta.race) {\r\n      throw Ti.Err.make('e-wn-io-writeNoFile', meta.ph || meta.nm)\r\n    }\r\n    // Prepare params\r\n    let params = {\r\n      str : \"id:\"+meta.id,\r\n      content\r\n    }\r\n    // do send\r\n    let url = URL(\"/save/text\")\r\n    let reo = await Ti.Http.post(url, {params, as:\"json\"})\r\n\r\n    if(!reo.ok) {\r\n      throw Ti.Err.make(reo.errCode, reo.data, reo.msg)\r\n    }\r\n\r\n    return reo.data\r\n  },\r\n  /***\r\n   * Upload file\r\n   */\r\n  async uploadFile(file, {\r\n    target = \"~\",\r\n    mode = \"a\",\r\n    tmpl = \"${major}(${nb})${suffix}\",\r\n    progress = _.identity\r\n  }={}) {\r\n    // do send\r\n    let url = URL(\"/save/stream\")\r\n    let reo = await Ti.Http.post(url, {\r\n      file, \r\n      progress,\r\n      params : {\r\n        str  : target,\r\n        nm   : file.name,\r\n        sz   : file.size,\r\n        mime : file.type,\r\n        m    : mode,\r\n        tmpl\r\n      },\r\n      as:\"json\"\r\n    })\r\n    return reo\r\n  },\r\n  /***\r\n   *  Get relative path of WnObj to home\r\n   *  path will starts by \"~/\"\r\n   */\r\n  async getFormedPath(meta) {\r\n    // Make sure it is meta\r\n    if(_.isString(meta)){\r\n      meta = await WnIo.loadMetaBy(meta)\r\n    }\r\n    // Count r-path\r\n    let homePath = Wn.Session.getHomePath()\r\n    return Ti.Util.getRelativePath(homePath, meta.ph)\r\n  }\r\n\r\n}\r\n////////////////////////////////////////////\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (WnIo);\n\n//# sourceURL=webpack:///./src/lib/walnut/wn-io.mjs?");

/***/ }),

/***/ "./src/lib/walnut/wn-obj.mjs":
/*!***********************************!*\
  !*** ./src/lib/walnut/wn-obj.mjs ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n////////////////////////////////////////////////////\r\nconst FIELDS = {\r\n  //---------------------------------------------\r\n  \"id\" : {\r\n    title : \"i18n:wn-key-id\",\r\n    name  : \"id\"\r\n  },\r\n  //---------------------------------------------\r\n  \"nm\" : {\r\n    title : \"i18n:wn-key-nm\",\r\n    name  : \"nm\",\r\n    display: \"<=ti-label>\",\r\n    comType: \"ti-input\"\r\n  },\r\n  //---------------------------------------------\r\n  \"title\" : {\r\n    title : \"i18n:wn-key-title\",\r\n    name  : \"title\",\r\n    display: \"<=ti-label>\",\r\n    comType: \"ti-input\"\r\n  },\r\n  //---------------------------------------------\r\n  \"icon\" : {\r\n    title : \"i18n:wn-key-icon\",\r\n    name  : \"icon\",\r\n    width : \"auto\",\r\n    comType: \"ti-input-icon\"\r\n  },\r\n  //---------------------------------------------\r\n  \"ph\" : {\r\n    title : \"i18n:wn-key-ph\",\r\n    name  : \"ph\",\r\n    comConf: {\r\n      className: \"is-break-word\"\r\n    }\r\n  },\r\n  //---------------------------------------------\r\n  \"thumb\" : {\r\n    title : \"i18n:wn-key-thumb\",\r\n    name  : \"thumb\",\r\n    checkEquals : false,\r\n    serializer : {\r\n      name : \"Ti.Types.toStr\",\r\n      args : \"id:${id}\"\r\n    },\r\n    comType : \"wn-imgfile\",\r\n    comConf : {\r\n      target : \"~/.thumbnail/gen/${id}.jpg\",\r\n      filter : \"cover(256,256)\",\r\n      quality : 0.372\r\n    }\r\n  },\r\n  //---------------------------------------------\r\n  \"race\" : {\r\n    title : \"i18n:wn-key-race\",\r\n    name  : \"race\",\r\n    comConf : {\r\n      format : \"i18n:wn-race-${race}\"\r\n    }\r\n  },\r\n  //---------------------------------------------\r\n  \"mime\" : {\r\n    title : \"i18n:wn-key-mime\",\r\n    name  : \"mime\"\r\n  },\r\n  //---------------------------------------------\r\n  \"tp\" : {\r\n    title : \"i18n:wn-key-tp\",\r\n    name  : \"tp\"\r\n  },\r\n  //---------------------------------------------\r\n  \"ct\" : {\r\n    title : \"i18n:wn-key-ct\",\r\n    name  : \"ct\",\r\n    type  : \"AMS\"\r\n  },\r\n  //---------------------------------------------\r\n  \"lm\" : {\r\n    title : \"i18n:wn-key-lm\",\r\n    name  : \"lm\",\r\n    type  : \"AMS\"\r\n  },\r\n  //---------------------------------------------\r\n  \"expi\" : {\r\n    title : \"i18n:wn-key-expi\",\r\n    name  : \"expi\",\r\n    type  : \"AMS\"\r\n  },\r\n  //---------------------------------------------\r\n  \"pid\" : {\r\n    title : \"i18n:wn-key-pid\",\r\n    name  : \"pid\"\r\n  },\r\n  //---------------------------------------------\r\n  \"d0\" : {\r\n    title : \"i18n:wn-key-d0\",\r\n    name  : \"d0\"\r\n  },\r\n  //---------------------------------------------\r\n  \"d1\" : {\r\n    title : \"i18n:wn-key-d1\",\r\n    name  : \"d1\"\r\n  },\r\n  //---------------------------------------------\r\n  \"c\" : {\r\n    title : \"i18n:wn-key-c\",\r\n    name  : \"c\"\r\n  },\r\n  //---------------------------------------------\r\n  \"m\" : {\r\n    title : \"i18n:wn-key-m\",\r\n    name  : \"m\"\r\n  },\r\n  //---------------------------------------------\r\n  \"g\" : {\r\n    title : \"i18n:wn-key-g\",\r\n    name  : \"g\"\r\n  },\r\n  //---------------------------------------------\r\n  \"data\" : {\r\n    title : \"i18n:wn-key-data\",\r\n    name  : \"data\"\r\n  },\r\n  //---------------------------------------------\r\n  \"sha1\" : {\r\n    title : \"i18n:wn-key-sha1\",\r\n    name  : \"sha1\"\r\n  },\r\n  //---------------------------------------------\r\n  \"md\" : {\r\n    title : \"i18n:wn-key-md\",\r\n    name  : \"md\"\r\n  },\r\n  //---------------------------------------------\r\n  \"pvg\" : {\r\n    title : \"i18n:wn-key-pvg\",\r\n    name  : \"pvg\"\r\n  },\r\n  //---------------------------------------------\r\n  \"width\" : {\r\n    title : \"i18n:wn-key-width\",\r\n    name  : \"width\"\r\n  },\r\n  //---------------------------------------------\r\n  \"height\" : {\r\n    title : \"i18n:wn-key-height\",\r\n    name  : \"height\"\r\n  },\r\n  //---------------------------------------------\r\n  \"duration\" : {\r\n    title : \"i18n:wn-key-duration\",\r\n    name  : \"duration\"\r\n  },\r\n  //---------------------------------------------\r\n  \"len\" : {\r\n    title : \"i18n:wn-key-len\",\r\n    name  : \"len\",\r\n    width : \"auto\",\r\n    transformer: (v)=>Ti.S.sizeText(v)\r\n  }\r\n  //---------------------------------------------\r\n}\r\n////////////////////////////////////////////\r\nconst WnObj = {\r\n  //----------------------------------------\r\n  isBuiltInFields(key) {\r\n    return FIELDS[key] ? true : false\r\n  },\r\n  //----------------------------------------\r\n  getGroupTitle(titleKey) {\r\n    if(/^(basic|privilege|thumb|timestamp|more|advance|customized|others)$/.test(titleKey))\r\n      return `i18n:wn-key-grp-${titleKey}`\r\n    return titleKey\r\n  },\r\n  //----------------------------------------\r\n  getField(key) {\r\n    let fld = FIELDS[key]\r\n    if(fld) {\r\n      return _.cloneDeep(fld)\r\n    }\r\n    return {\r\n      title : key,\r\n      name  : key,\r\n      type  : \"String\"\r\n    }\r\n  },\r\n  //----------------------------------------\r\n  evalFields(meta={}, fields=[], iteratee=_.identity) {\r\n    //......................................\r\n    const __join_fields = function(flds=[], outs=[], keys={}) {\r\n      _.forEach(flds, fld => {\r\n        // Remains fields\r\n        // It will be deal with later\r\n        if(\"...\" == fld) {\r\n          outs.push(fld)\r\n          return\r\n        }\r\n        let f2;\r\n        let quickName = false\r\n        // Quick Name\r\n        if(_.isString(fld)) {\r\n          quickName = true\r\n          f2 = Wn.Obj.getField(fld)\r\n        }\r\n        // Group\r\n        else if(_.isArray(fld.fields)) {\r\n          f2 = {\r\n            title: Wn.Obj.getGroupTitle(fld.title), \r\n            type:\"Group\", \r\n            fields:[]\r\n          }\r\n          __join_fields(fld.fields, f2.fields, keys)\r\n          if(_.isEmpty(f2.fields)) {\r\n            return\r\n          }\r\n        }\r\n        // Normal field\r\n        else {\r\n          f2 = fld\r\n        }\r\n        //......................................\r\n        let uniqKey = Ti.S.join(\"-\", f2.name)\r\n        keys[uniqKey] = true\r\n        let value = _.get(meta, f2.name)\r\n        outs.push(_.assign(f2, {\r\n          quickName, uniqKey, value\r\n        }))\r\n        //......................................\r\n      });\r\n      return outs;\r\n    };\r\n    //......................................\r\n    const __deal_with_remain_fields = function(flds=[], outs=[], keys={}) {\r\n      for(let fld of flds) {\r\n        // Group\r\n        if(fld.type == \"Group\") {\r\n          fld.fields = __deal_with_remain_fields(fld.fields, [], keys)\r\n          if(!_.isEmpty(fld.fields)) {\r\n            outs.push(fld)\r\n          }\r\n          continue\r\n        }\r\n        // Remains\r\n        if(\"...\" == fld) {\r\n          _.forEach(meta, (v, k)=>{\r\n            // Ignore nil and built-in fields\r\n            if(Ti.Util.isNil(v) \r\n               || Wn.Obj.isBuiltInFields(k)\r\n               || keys[k]\r\n               || k.startsWith(\"_\")) {\r\n              return\r\n            }\r\n            // Auto com type\r\n            let jsType = Ti.Types.getJsType(v, \"String\");\r\n            let fldConf = ({\r\n              \"Integer\": {\r\n                type: \"Number\",\r\n                comType: \"ti-input\"\r\n              },\r\n              \"Number\" : {\r\n                comType: \"ti-input\"\r\n              },\r\n              \"Boolean\" : {\r\n                comType: \"ti-toggle\"\r\n              },\r\n              \"Array\" : {\r\n                comType: \"ti-input-tags\"\r\n              }\r\n            })[jsType] || \"ti-label\"\r\n            \r\n            // Join\r\n            let f2 = iteratee({\r\n              title: k, name: k, type: jsType,\r\n              ... fldConf\r\n            })\r\n            if(f2) {\r\n              outs.push(f2)\r\n            }\r\n          })\r\n        }\r\n        // Normal fields\r\n        else {\r\n          let f2 = iteratee(fld)\r\n          if(f2) {\r\n            outs.push(f2)\r\n          }\r\n        }\r\n      }\r\n      return outs\r\n    }\r\n    //......................................\r\n    let usedKeys = {}\r\n    let myFormFields = __join_fields(fields, [], usedKeys);\r\n    myFormFields = __deal_with_remain_fields(myFormFields, [], usedKeys)\r\n    //......................................\r\n    return myFormFields\r\n  },\r\n  //----------------------------------------\r\n  isAs(meta={}, key, match) {\r\n    let val = _.get(meta, key)\r\n    if(Ti.Util.isNil(val)) {\r\n      return false\r\n    }\r\n    //......................................\r\n    if(_.isArray(match)) {\r\n      for(let mi of match) {\r\n        if(WnObj.isAs(meta, key, mi)){\r\n          return true\r\n        }\r\n      }\r\n      return false\r\n    }\r\n    //......................................\r\n    if(_.isString(match)) {\r\n      if(match.startsWith(\"^\")) {\r\n        return new RegExp(match).test(val)\r\n      }\r\n      if(match.startsWith(\"!^\")) {\r\n        return !new RegExp(match.substring(1)).test(val)\r\n      }\r\n      return val == match\r\n    }\r\n    //......................................\r\n    if(_.isRegExp(match)) {\r\n      return match.test(val)\r\n    }\r\n    //......................................\r\n    return false\r\n  },\r\n  //----------------------------------------\r\n  isMime(meta={}, mime) {\r\n    return WnObj.isAs(meta, \"mime\", mime)\r\n  },\r\n  //----------------------------------------\r\n  isType(meta={}, type) {\r\n    return WnObj.isAs(meta, \"type\", type)\r\n  },\r\n  //----------------------------------------\r\n  /***\r\n   * Create the crumb data for `<ti-crumb>`\r\n   * \r\n   * @param meta{Object} - WnObj to show crumb data\r\n   * @param ancestors{Array} - parent path object(WnObj[]), top dir at first.\r\n   * @param showSelf{Boolean} - append self at the end of path\r\n   * @param fromIndex{Integer} - start index in ancestors to generate data\r\n   * @param homePath{String} - another way to indicate the `fromIndex`\r\n   * @param iteratee{Function} - customized iterator `(item, index, an)`\r\n   *   return `null` to ignore current item\r\n   * @param self{Function} - customized iterator for self `(item, index, an)`\r\n   *   return `null` to ignore current item\r\n   * \r\n   * @return JSON array like:\r\n   * \r\n   * ```js\r\n   * [{\r\n   *    icon  : Wn.Util.getIconObj(self),\r\n        text   : Wn.Util.getObjDisplayName(self),\r\n        value  : self.id,\r\n        href   : null,\r\n        asterisk : _.get(this.mainStatus, \"changed\")\r\n   * }]\r\n   * ```\r\n   */\r\n  evalCrumbData({\r\n    meta, \r\n    ancestors = [], \r\n    fromIndex=0, \r\n    homePath=null,\r\n    iteratee=_.identity,\r\n    self=_.identity\r\n  }={}) {\r\n    let list = []\r\n    if(meta) {\r\n      let ans = _.map(ancestors)\r\n      // Find the first Index from home\r\n      let i = fromIndex\r\n\r\n      // find by homePath\r\n      if(homePath) {\r\n        for(; i<ans.length; i++) {\r\n          let an = ans[i]\r\n          if(an.ph == homePath) {\r\n            break\r\n          }\r\n        }\r\n      }\r\n\r\n      // Show ancestors form Home\r\n      for(; i<ans.length; i++) {\r\n        let an = ans[i]\r\n        let item = {\r\n          icon  : Wn.Util.getIconObj(an),\r\n          text  : Wn.Util.getObjDisplayName(an),\r\n          value : an.id,\r\n          href  : Wn.Util.getAppLink(an) + \"\"\r\n        }\r\n        item = iteratee(item, i, meta) || item\r\n        if(item) {\r\n          list.push(item)\r\n        }  \r\n      }\r\n      // Top Item, just show title\r\n      if(self) {\r\n        let item = {\r\n          icon  : Wn.Util.getIconObj(meta),\r\n          text  : Wn.Util.getObjDisplayName(meta),\r\n          value : meta.id,\r\n          href  : null,\r\n          asterisk : _.get(this.mainStatus, \"changed\")\r\n        }\r\n        // Customized\r\n        if(_.isFunction(self)) {\r\n          item = self(item, i, meta) || item\r\n        }\r\n        // Join to list\r\n        if(item) {\r\n          list.push(item)\r\n        }\r\n      }\r\n    }\r\n    return list\r\n  }\r\n  //----------------------------------------\r\n}\r\n////////////////////////////////////////////\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (WnObj);\n\n//# sourceURL=webpack:///./src/lib/walnut/wn-obj.mjs?");

/***/ }),

/***/ "./src/lib/walnut/wn-open-obj-selector.mjs":
/*!*************************************************!*\
  !*** ./src/lib/walnut/wn-open-obj-selector.mjs ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/***\r\n * Open Modal Dialog to explore one or multi files\r\n */\r\nasync function OpenObjSelector(pathOrObj=\"~\", {\r\n  title = \"i18n:select\", \r\n  icon = \"im-folder-open\",\r\n  type = \"info\", closer = true,\r\n  textOk = \"i18n:ok\",\r\n  textCancel = \"i18n:cancel\",\r\n  position = \"top\",\r\n  width=\"80%\", height=\"90%\", spacing,\r\n  multi=true,\r\n  fromIndex=0,\r\n  homePath=Ti.SessionVar(\"HOME\"),\r\n  selected=[]\r\n}={}){\r\n  //................................................\r\n  // Load the target object\r\n  let meta = await Wn.Io.loadMeta(pathOrObj)\r\n  // Fail to load\r\n  if(!meta) {\r\n    return Ti.Toast.Open({\r\n      content : \"i18n:e-io-obj-noexistsf\",\r\n      vars : _.isString(pathOrObj)\r\n              ? { ph: pathOrObj, nm: Ti.Util.getFileName(pathOrObj)}\r\n              : pathOrObj.ph\r\n    }, \"warn\")\r\n  }\r\n  //................................................\r\n  // Open modal dialog\r\n  let reObj = await Ti.App.Open({\r\n    //------------------------------------------\r\n    type, width, height, spacing, position, closer,\r\n    icon, title,\r\n    //------------------------------------------\r\n    actions : [{\r\n      text: textOk,\r\n      handler : ({$main})=>$main.myChecked\r\n    }, {\r\n      text: textCancel,\r\n      handler : ()=>undefined\r\n    }],\r\n    //------------------------------------------\r\n    modules : {\r\n      current  : \"@mod:wn/obj-meta\",\r\n      main     : \"@mod:wn/obj-current\"\r\n    },\r\n    //------------------------------------------\r\n    comType : \"modal-inner-body\",\r\n    //------------------------------------------\r\n    components : [{\r\n      //////////////////////////////////////////\r\n      name : \"modal-inner-body\",\r\n      globally : false,\r\n      //////////////////////////////////////////\r\n      data : {\r\n        myChecked : [],\r\n        myShown : {}\r\n      },\r\n      //////////////////////////////////////////\r\n      props : {\r\n        \"icon\"   : undefined, \r\n        \"text\"   : undefined,\r\n        \"trimed\" : undefined, \r\n        \"placeholder\" : undefined, \r\n        \"valueCase\" : undefined,\r\n        \"value\"  : undefined\r\n      },\r\n      //////////////////////////////////////////\r\n      template : `<ti-gui\r\n        :layout=\"theLayout\"\r\n        :schema=\"theSchema\"\r\n        :shown=\"myShown\"\r\n        :can-loading=\"true\"\r\n        :loading-as=\"status.reloading\"\r\n        @sky::item:active=\"OnCurrentMetaChange\"\r\n        @arena::open=\"OnCurrentMetaChange\"\r\n        @arena::select=\"OnArenaSelect\"/>`,\r\n      //////////////////////////////////////////\r\n      computed : {\r\n        //--------------------------------------\r\n        ...Vuex.mapGetters(\"current\", {\r\n          \"obj\"              : \"get\",\r\n          \"objHome\"          : \"getHome\",\r\n          \"objIsHome\"        : \"isHome\",\r\n          \"objHasParent\"     : \"hasParent\",\r\n          \"objParentIsHome\"  : \"parentIsHome\"\r\n        }),\r\n        //--------------------------------------\r\n        ...Vuex.mapState(\"main\", [\"data\", \"status\"]),\r\n        //--------------------------------------\r\n        theCrumbData() {\r\n          return Wn.Obj.evalCrumbData({\r\n            meta      : _.get(this.obj, \"meta\"),\r\n            ancestors : _.get(this.obj, \"ancestors\"),\r\n            fromIndex : fromIndex,\r\n            homePath  : homePath,\r\n          }, (item)=>{\r\n            item.asterisk = _.get(this.mainStatus, \"changed\")\r\n          })\r\n        },\r\n        //--------------------------------------\r\n        theLayout(){\r\n          return {\r\n            type : \"rows\",\r\n            border : true,\r\n            blocks : [{\r\n                name : \"sky\",\r\n                size : \".5rem\",\r\n                body : \"sky\"\r\n              }, {\r\n                name : \"arena\",\r\n                body : \"main\"\r\n              }]\r\n          }\r\n        },\r\n        //--------------------------------------\r\n        theSchema(){\r\n          return {\r\n            \"sky\" : {\r\n              comType : \"ti-crumb\",\r\n              comConf : {\r\n                \"data\" : this.theCrumbData\r\n              }\r\n            },\r\n            \"main\" : {\r\n              comType : \"wn-adaptlist\",\r\n              comConf : {\r\n                \"meta\"   : this.obj,\r\n                \"data\"   : this.data,\r\n                \"status\" : this.status,\r\n                \"multi\"  : multi,\r\n                \"listConf\" : {\r\n                  resizeDelay : 200\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      //////////////////////////////////////////\r\n      methods : {\r\n        //--------------------------------------\r\n        OnCurrentMetaChange({id, path, value}={}) {\r\n          this.open(id || path || value)\r\n        },\r\n        //--------------------------------------\r\n        OnArenaSelect({checked}) {\r\n          this.myChecked = _.filter(checked, o=>\"FILE\"==o.race)\r\n        },\r\n        //--------------------------------------\r\n        async open(obj) {\r\n          // Guard\r\n          if(!obj) {\r\n            return\r\n          }\r\n  \r\n          // To WnObj\r\n          if(_.isString(obj)) {\r\n            obj = await Wn.Io.loadMetaBy(obj)\r\n          }\r\n  \r\n          // Only can enter DIR\r\n          if(obj && \"DIR\" == obj.race) {\r\n            let app = Ti.App(this)\r\n            app.dispatch(\"current/reload\", obj)\r\n            app.dispatch(\"main/reload\", obj)    \r\n          }\r\n        }\r\n        //--------------------------------------\r\n      },\r\n      //////////////////////////////////////////\r\n      mounted : function() {\r\n        this.open(meta)\r\n      }\r\n      //////////////////////////////////////////\r\n    }]\r\n    //------------------------------------------\r\n  })\r\n  //................................................\r\n  // End of OpenObjSelector\r\n  return reObj\r\n}\r\n////////////////////////////////////////////\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (OpenObjSelector);\n\n//# sourceURL=webpack:///./src/lib/walnut/wn-open-obj-selector.mjs?");

/***/ }),

/***/ "./src/lib/walnut/wn-open-thing-manager.mjs":
/*!**************************************************!*\
  !*** ./src/lib/walnut/wn-open-thing-manager.mjs ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/***\r\n * Open Modal Dialog to manage a thing set\r\n */\r\nasync function OpenThingManager(pathOrObj, {\r\n  textOk = \"i18n:ok\",\r\n  ok = ({result})=>result,\r\n  textCancel = \"i18n:close\",\r\n  position = \"top\",\r\n  width=\"96%\", height=\"96%\", spacing,\r\n}={}) {\r\n  if(Ti.Util.isNil(pathOrObj)) {\r\n    return await Ti.Toast.Open(\"ThingSet path is nil\", \"warn\");\r\n  }\r\n\r\n  // Load thing set\r\n  let oTs = await Wn.Io.loadMeta(pathOrObj)\r\n  if(!oTs) {\r\n    return await Ti.Toast.Open(`Fail to found ThingSet: ${pathOrObj}`, \"warn\");\r\n  }\r\n\r\n  // Forbid the auto select\r\n  oTs.th_auto_select = false\r\n\r\n  // Load default actions\r\n  let view = await Wn.Sys.exec(`ti views id:${oTs.id} -cqn`, {as:\"json\"})\r\n\r\n  // Open it\r\n  return await Ti.App.Open({\r\n    icon  : 'zmdi-github-alt',\r\n    title : oTs.title || oTs.nm,\r\n    position, width, height: \"96%\", \r\n    escape: false,\r\n    topActions: view.actions,\r\n    //------------------------------------------\r\n    textOk, textCancel, ok,\r\n    //------------------------------------------\r\n    modules : {\r\n      current  : \"@mod:wn/obj-current\",\r\n      main     : \"@mod:wn/thing\"\r\n    },\r\n    //------------------------------------------\r\n    comType : \"wn-thing-manager\",\r\n    comConf : {\r\n      \"...\" : \"=Main\",\r\n      emitChange: true\r\n    },\r\n    //------------------------------------------\r\n    components: [\"@com:wn/thing/manager\"],\r\n    //------------------------------------------\r\n    preload: async function(app) {\r\n      app.commit(\"current/setMeta\", oTs)\r\n      await app.dispatch(\"main/reload\", oTs)\r\n    }\r\n  })\r\n}\r\n////////////////////////////////////////////\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (OpenThingManager);\n\n//# sourceURL=webpack:///./src/lib/walnut/wn-open-thing-manager.mjs?");

/***/ }),

/***/ "./src/lib/walnut/wn-session.mjs":
/*!***************************************!*\
  !*** ./src/lib/walnut/wn-session.mjs ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n////////////////////////////////////////////\r\nconst ENVS = {}\r\n////////////////////////////////////////////\r\nconst WnSession = {\r\n  //----------------------------------------\r\n  env(vars) {\r\n    // Set Env\r\n    if(_.isPlainObject(vars)) {\r\n      _.assign(ENVS, vars)\r\n    }\r\n    // GET one\r\n    else if(_.isString(vars)) {\r\n      return ENVS[vars]\r\n    }\r\n    // Pick\r\n    else if(_.isArray(vars)) {\r\n      return _.pick(ENVS, vars)\r\n    }\r\n    // Get Env\r\n    return _.cloneDeep(ENVS)\r\n  },\r\n  //----------------------------------------\r\n  getHomePath() {\r\n    return WnSession.env(\"HOME\")\r\n  },\r\n  //----------------------------------------\r\n  // Analyze the current domain \r\n  getCurrentDomain() {\r\n    let home = WnSession.getHomePath()\r\n    if(!home) {\r\n      return\r\n    }\r\n    // For root\r\n    if(\"/root\" == home)\r\n      return \"root\"\r\n    \r\n    // Others\r\n    let m = /^\\/home\\/(.+)$/.exec(home)\r\n    if(m) {\r\n      return m[1]\r\n    }\r\n  },\r\n  //----------------------------------------\r\n  getApiPrefix() {\r\n    let dmn = WnSession.getCurrentDomain()\r\n    return `/api/${dmn}`\r\n  },\r\n  //----------------------------------------\r\n  getApiUrl(url) {\r\n    let prefix = WnSession.getApiPrefix()\r\n    return Ti.Util.appendPath(prefix, url)\r\n  }\r\n  //----------------------------------------\r\n}\r\n////////////////////////////////////////////\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (WnSession);\n\n//# sourceURL=webpack:///./src/lib/walnut/wn-session.mjs?");

/***/ }),

/***/ "./src/lib/walnut/wn-sys-resp-parsing.mjs":
/*!************************************************!*\
  !*** ./src/lib/walnut/wn-sys-resp-parsing.mjs ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// Ti required(Ti.Util)\r\n////////////////////////////////////////////\r\nclass WnSysRespParsing {\r\n  constructor({\r\n    macroObjSep, \r\n    eachLine = _.identity, \r\n    macro = {}\r\n  }={}) {\r\n    this.macroObjSep = macroObjSep\r\n    this.lastIndex = 0\r\n    this.lines = []\r\n    this.MACRO = {}\r\n    this.__TO = null\r\n    this.eachLine = eachLine\r\n    this.macro = macro\r\n  }\r\n  init(content) {\r\n    this.content = content\r\n  }\r\n  done() {\r\n    this.updated({isLastCalled:true})\r\n\r\n    // for MACRO\r\n    _.forOwn(this.MACRO, (val, key)=>{\r\n      let json = val.join(\"\\n\")\r\n      let payload = JSON.parse(json)\r\n      this.MACRO[key] = payload\r\n      Ti.InvokeBy(this.macro, key, [payload])\r\n    })\r\n  }\r\n  __push_line(line) {\r\n    // If begine the macro\r\n    if(line.startsWith(this.macroObjSep)) {\r\n      let str = line.substring(this.macroObjSep.length).trim()\r\n      let [key, name] = _.without(str.split(/ *: */g),\"\")\r\n      let tag = this[key]\r\n      if(tag) {\r\n        tag[name] = []\r\n      }\r\n      this.__TO = {key, name}\r\n    }\r\n    // Specially target\r\n    else if(this.__TO) {\r\n      let {key, name} = this.__TO\r\n      this[key][name].push(line)\r\n    }\r\n    // Default dist\r\n    else {\r\n      this.lines.push(line)\r\n      // Hook\r\n      this.eachLine(line)\r\n    }\r\n  }\r\n  updated({isLastCalled=false}={}) {\r\n    let content = this.content()\r\n\r\n    // Looking for each line\r\n    while(this.lastIndex < content.length) {\r\n      let pos = content.indexOf('\\n', this.lastIndex)\r\n      if(pos >= this.lastIndex) {\r\n        let nextIndex = pos + 1\r\n        if(pos>0 && content[pos-1] == '\\r') {\r\n          pos --\r\n        }\r\n        let line = content.substring(this.lastIndex, pos)\r\n        this.__push_line(line)\r\n        this.lastIndex = nextIndex\r\n      }\r\n      // force ending\r\n      else if(isLastCalled) {\r\n        let line = content.substring(this.lastIndex)\r\n        this.__push_line(line)\r\n        this.lastIndex = content.length\r\n      }\r\n      // not endind line, break it\r\n      else {\r\n        break\r\n      }\r\n    } \r\n  }\r\n  getResult() {\r\n    return {\r\n      lines : this.lines,\r\n      macro : this.MACRO\r\n    }\r\n  }\r\n}\r\n////////////////////////////////////////////\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (WnSysRespParsing);\n\n//# sourceURL=webpack:///./src/lib/walnut/wn-sys-resp-parsing.mjs?");

/***/ }),

/***/ "./src/lib/walnut/wn-sys.mjs":
/*!***********************************!*\
  !*** ./src/lib/walnut/wn-sys.mjs ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _wn_sys_resp_parsing_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wn-sys-resp-parsing.mjs */ \"./src/lib/walnut/wn-sys-resp-parsing.mjs\");\n\r\n////////////////////////////////////////////\r\nconst DFT_MACRO_OBJ_SEP = \"%%wn.meta.\" + Ti.Random.str(10) + \"%%\"\r\n////////////////////////////////////////////\r\nconst WnSys = {\r\n  //-------------------------------------\r\n  async exec(cmdText, {\r\n    vars = {},\r\n    input = \"\",\r\n    appName = Ti.GetAppName(),\r\n    eachLine = _.identity,\r\n    as = \"text\",\r\n    macroObjSep = DFT_MACRO_OBJ_SEP,\r\n    autoRunMacro = true,\r\n    errorBy,\r\n    PWD = (Ti.SessionVar(\"PWD\") || \"~\")\r\n  }={}) {\r\n    // Eval command\r\n    cmdText = Ti.S.renderBy(cmdText, vars)\r\n    // Prepare\r\n    let url = `/a/run/${appName}`\r\n    let params = {\r\n      \"mos\"  : macroObjSep,\r\n      \"PWD\"  : PWD,\r\n      \"cmd\"  : cmdText,\r\n      \"in\"   : input\r\n    }\r\n    // Prepare analyzer\r\n    let ing = {eachLine, macroObjSep}\r\n    if(autoRunMacro) {\r\n      ing.macro = {\r\n        update_envs : (envs)=>{\r\n          Wn.Session.env(envs)\r\n          Wn.doHook(\"update_envs\", envs)\r\n        }\r\n      }\r\n    }\r\n    let parsing = new _wn_sys_resp_parsing_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"](ing)\r\n\r\n    // Request remote\r\n    await Ti.Http.send(url, {\r\n      method : \"POST\", params, as:\"text\",\r\n      created : ($req)=>{\r\n        parsing.init(()=>$req.responseText)\r\n      }\r\n    }).catch($req=>{\r\n      parsing.isError = true\r\n    }).finally(()=>{\r\n      parsing.done()\r\n    })\r\n\r\n    // Get result\r\n    let re = parsing.getResult()\r\n    // Then we got the result\r\n    if(Ti.IsInfo(\"Wn.Sys\")) {\r\n      console.log(\"Wn.Sys.exec@return\", re)\r\n    }\r\n\r\n    // Handle error\r\n    if(parsing.isError) {\r\n      let str = re.lines.join(\"\\n\")\r\n      let [code, ...datas] = str.split(/ *: */);\r\n      let data = datas.join(\" : \")\r\n      let msgKey = code.replace(/[.]/g, \"-\")\r\n      if(_.isFunction(errorBy)) {\r\n        errorBy({\r\n          code, msgKey, data\r\n        })\r\n      }\r\n      // Just throw it\r\n      else {\r\n        let err = Ti.Err.make(msgKey, data)\r\n        throw err\r\n      }\r\n    }\r\n\r\n    // Evaluate the result\r\n    return ({\r\n      raw : ()=> re,\r\n      lines : ()=> re.lines,\r\n      macro : ()=> re.macro,\r\n      text : ()=>{\r\n        return re.lines.join(\"\\n\")\r\n      },\r\n      json : ()=>{\r\n        let json = re.lines.join(\"\\n\")\r\n        return JSON.parse(json)\r\n      },\r\n      jso : ()=>{\r\n        let json = re.lines.join(\"\\n\")\r\n        return eval('('+json+')')\r\n      }\r\n    })[as]()\r\n  },\r\n  //-------------------------------------\r\n  async exec2(cmdText, options={}){\r\n    let errorAs = options.errorAs\r\n    try {\r\n      return await Wn.Sys.exec(cmdText, options)\r\n    }\r\n    // Handle Error\r\n    catch(err) {\r\n      // Report the Error\r\n      if(!_.isUndefined(errorAs)) {\r\n        if(Ti.IsError()) {\r\n          console.error(err)\r\n        }\r\n        await Ti.Alert(err, {\r\n          title : \"i18n:warn\",\r\n          type : \"error\"\r\n        })\r\n        return err\r\n      }\r\n      // Return the error\r\n      return errorAs\r\n    }\r\n  },\r\n  //-------------------------------------\r\n  async execJson(cmdText, options={as:\"json\"}) {\r\n    return await WnSys.exec(cmdText, options)\r\n  },\r\n  //-------------------------------------\r\n  async exec2Json(cmdText, options={as:\"json\"}) {\r\n    return await WnSys.exec2(cmdText, options)\r\n  }\r\n  //-------------------------------------\r\n}\r\n////////////////////////////////////////////\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (WnSys);\n\n//# sourceURL=webpack:///./src/lib/walnut/wn-sys.mjs?");

/***/ }),

/***/ "./src/lib/walnut/wn-util.mjs":
/*!************************************!*\
  !*** ./src/lib/walnut/wn-util.mjs ***!
  \************************************/
/*! exports provided: default */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n////////////////////////////////////////////\r\nconst WnUtil = {\r\n  isMimeText(mime) {\r\n    return /^text\\//.test(mime) \r\n           || \"application/x-javascript\" == mime\r\n           || \"application/json\" == mime\r\n  },\r\n  isMimeJson(mime) {\r\n    return \"text/json\" == mime\r\n           || \"application/json\" == mime\r\n  },\r\n  // adapt for old versiton walnut icon attribute\r\n  getIconName(iconHtml) {\r\n    let m = /^<i +class=[\"'] *(fa|zmdi|im) +(fa|zmdi|im)-([^\" ]+) *[\"']> *<\\/i>$/\r\n              .exec(iconHtml)\r\n    if(m) {\r\n      return m[3]\r\n    }\r\n    return iconHtml\r\n  },\r\n  /***\r\n   * Gen preview object for a object\r\n   */\r\n  genPreviewObj(meta) {\r\n    // Uploaded thumb preview\r\n    if(meta.thumb) {\r\n      return {\r\n        type : \"image\",\r\n        value : '/o/thumbnail/id:' + meta.id\r\n      }\r\n    }\r\n    // Customized Icon\r\n    if(meta.icon) {\r\n      let icon = WnUtil.getIconName(meta.icon)\r\n      return Ti.Icons.get(icon, {\r\n        type  : \"font\",\r\n        value : icon\r\n      })\r\n    }\r\n    // Default\r\n    return Ti.Icons.get(meta)\r\n  },\r\n  getIconObj(meta) {\r\n    if(meta && meta.icon) {\r\n      // customized icon object\r\n      if(_.isPlainObject(meta.icon)) {\r\n        return _.assign(Ti.Icons.get(), meta.icon)\r\n      }\r\n      // customized icon name\r\n      return {\r\n        type  : \"font\",\r\n        value : WnUtil.getIconName(meta.icon)\r\n      }\r\n    }\r\n    // return default\r\n    return Ti.Icons.get(meta)\r\n  },\r\n  getObjIcon(meta, dft) {\r\n    if(!meta)\r\n      return dft\r\n    return meta.icon || Ti.Icons.get(meta)\r\n  },\r\n  /***\r\n   * Get icon or thumb for a WnObj\r\n   */\r\n  getObjThumbIcon({\r\n    icon,\r\n    thumb,\r\n    mime,\r\n    type,\r\n    race, \r\n    candidateIcon,\r\n    timestamp=0\r\n  }={}, dftIcon) {\r\n    // Thumb as image\r\n    if(thumb) {\r\n      let src = `/o/content?str=${thumb}`\r\n      if(timestamp > 0) {\r\n        src += `&_t=${timestamp}`\r\n      }\r\n      return {\r\n        type : \"image\",\r\n        value : src\r\n      }\r\n    }\r\n    //.............................................\r\n    // Icon\r\n    if(icon) {\r\n      return {\r\n        type  : \"font\",\r\n        value  : icon\r\n      }\r\n    }\r\n    //.............................................\r\n    // Force Default\r\n    if(candidateIcon) {\r\n      return candidateIcon\r\n    }\r\n    //.............................................\r\n    // Auto get by type\r\n    if(type || mime || race) {\r\n      return Ti.Icons.get({type, mime, race})\r\n    }\r\n    // Default\r\n    return dftIcon\r\n  },\r\n  getObjThumbIcon2(canIcon, meta) {\r\n    //console.log(canIcon, meta)\r\n    return WnUtil.getObjThumbIcon(_.defaults({\r\n      candidateIcon : canIcon\r\n    }, meta))\r\n  },\r\n  /***\r\n   * return the object readable name\r\n   */\r\n  getObjDisplayName(meta, keys=[]) {\r\n    return Ti.Util.getFallback(meta, keys, \"title\", \"nm\")\r\n  },\r\n  /***\r\n   * Get Object link as `String`\r\n   * \r\n   * @param meta{String|Object} : Object meta or id as string\r\n   * @param options.appName{String} : Walnut App Name, \"wn.manager\" as default\r\n   * @param options.encoded{Boolean} : Encode the path or not\r\n   */\r\n  getAppLink(meta, {\r\n    appName = \"wn.manager\",\r\n    encoded = true\r\n  }={}) {\r\n    return WnUtil.getLink(`/a/open/${appName}`, meta, {\r\n      pathKey : \"ph\",\r\n      encoded : true\r\n    })\r\n  },\r\n  getAppLinkStr(meta, options) {\r\n    return WnUtil.getAppLink(meta, options).toString()\r\n  },\r\n  getObjBadges(meta={}, {\r\n    NW= null,\r\n    NE= [\"ln\", \"zmdi-open-in-new\"],\r\n    SW= null,\r\n    SE= null\r\n  }={}) {\r\n    let bg = {}\r\n    if(NW && meta[NW[0]])\r\n      bg.NW = NW[1]\r\n\r\n    if(NE && meta[NE[0]])\r\n      bg.NE = NE[1]\r\n\r\n    if(SW && meta[SW[0]])\r\n      bg.SW = SW[1]\r\n\r\n    if(SE && meta[SE[0]])\r\n      bg.SE = SE[1]\r\n    return bg\r\n  },\r\n  getObjThumbInfo(meta={}, {\r\n    exposeHidden = false,\r\n    status = {},\r\n    progress = {},\r\n    badges=undefined\r\n  }={}) {\r\n    // Guard\r\n    if(!meta || !meta.nm) {\r\n      return\r\n    }\r\n    // Check the visibility\r\n    let visibility = \"show\"\r\n    if(meta.nm.startsWith(\".\")) {\r\n      if(exposeHidden) {\r\n        visibility = exposeHidden ? \"weak\" : \"hide\"\r\n      }\r\n    }\r\n    // Generate new Thumb Item\r\n    return {\r\n      id    : meta.id,\r\n      title : WnUtil.getObjDisplayName(meta),\r\n      preview : WnUtil.genPreviewObj(meta),\r\n      href : WnUtil.getAppLinkStr(meta),\r\n      visibility,\r\n      status   : status[meta.id],\r\n      progress : progress[meta.id],\r\n      badges : WnUtil.getObjBadges(meta, badges)\r\n    }\r\n  },\r\n  /***\r\n   * Get object link for download\r\n   */\r\n  getDownloadLink(meta, {mode=\"force\"}={}) {\r\n    return WnUtil.getLink(`/o/content`, meta, {\r\n      pathKey : \"str\",\r\n      encoded : true,\r\n      params : {d:mode}\r\n    })\r\n  },\r\n  /***\r\n   * Get Object link as `Plain Object`\r\n   * \r\n   * @param url{String} : Target URL\r\n   * @param meta{String|Object} : Object meta or id as string\r\n   * @param options.pathKey{String} : Which key to send object path\r\n   * @param options.encoded{Boolean} : Encode the path or not\r\n   * @param options.params{Object} : Init params value\r\n   * \r\n   * @return `TiLinkObj`\r\n   */\r\n  getLink(url, meta, {\r\n    pathKey = \"ph\",\r\n    encoded = false,\r\n    params = {}\r\n  }={}) {\r\n    let params2 = {...params}\r\n    if(!meta) {\r\n      return {url, params2}\r\n    }\r\n    const __V = (val)=>{\r\n      return encoded\r\n        ? encodeURIComponent(val)\r\n        : val\r\n    }\r\n    // META: \"~/path/to/obj\"\r\n    if(/^(\\/|~)/.test(meta)) {\r\n      params2[pathKey] = __V(meta)\r\n    }\r\n    // META: \"478e..6ea2\"\r\n    else if(_.isString(meta)) {\r\n      params2[pathKey] = `id:${meta}`\r\n    }\r\n    // META: {id:\"478e..6ea2\"}\r\n    else if(meta.id){\r\n      params2[pathKey] = `id:${meta.id}`\r\n    }\r\n    // META: {ph:\"/path/to/obj\"}\r\n    else if(meta.ph){\r\n      params2[pathKey] = __V(meta.ph)\r\n    }\r\n    // Default return\r\n    return Ti.Util.Link({\r\n      url, \r\n      params : params2,\r\n    })\r\n  },\r\n  /***\r\n   * Wrap meta to standard tree node\r\n   * \r\n   * @param meta{Object} - WnObj meta data\r\n   * \r\n   * @return TreeNode: {id,name,leaf,rawData,children}\r\n   */\r\n  wrapTreeNode(meta) {\r\n    if(_.isPlainObject(meta)) {\r\n      let node = {\r\n        id : meta.id,\r\n        name : meta.nm,\r\n        leaf : 'DIR' != meta.race,\r\n        rawData : meta\r\n      }\r\n      if(!node.leaf) {\r\n        node.children = []\r\n      }\r\n      if(node.id && node.name) {\r\n        return node\r\n      }\r\n    }\r\n  },\r\n  /***\r\n   * @param query{String|Function}\r\n   */\r\n  genQuery(query, {vkey=\"val\", wrapArray=false, errorAs}={}) {\r\n    // Customized query\r\n    if(_.isFunction(query)) {\r\n      return query\r\n    }\r\n    // Array\r\n    if(_.isArray(query)) {\r\n      if(wrapArray) {\r\n        return ()=>query\r\n      }\r\n      return query\r\n    }\r\n    // Command template\r\n    if(_.isString(query)) {\r\n      // Query by value \r\n      if(vkey) {\r\n        return async (v) => {\r\n          let cmdText = Ti.S.renderBy(query, {[vkey]:v})\r\n          //console.log(\"exec\", cmdText)\r\n          return await Wn.Sys.exec2(cmdText, {\r\n            as : \"json\",\r\n            input : v,\r\n            errorAs\r\n          })\r\n        }\r\n      }\r\n      // Query directly\r\n      else {\r\n        return async (v) => {\r\n          return await Wn.Sys.exec2(query, {\r\n            as : \"json\",\r\n            errorAs\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n////////////////////////////////////////////\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (WnUtil);\n\n//# sourceURL=webpack:///./src/lib/walnut/wn-util.mjs?");

/***/ })

/******/ });