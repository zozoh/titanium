<!DOCTYPE html>
<html lang="en">
<!--
  Load data
-->
<script class="wn-datasource" name="app" type="json">
cat "${CURRENT_DIR}/_app.json" 
</script>
<!--
  Page Head
-->
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${app.title}</title>
  <!--link rel="stylesheet" type="text/css"
        href="${rs}/core/css/font-md/css/material-design-iconic-font.css"-->
  <script src="${rs}/ti/deps/jquery.js"></script>
  <script src="${rs}/ti/deps/lodash.min.js"></script>
  <script src="${rs}/ti/deps/vue.js"></script>
  <script src="${rs}/ti/deps/vuex.js"></script>

  <link rel="stylesheet" href="${rs}/ti/deps/element-ui/index.css">
  <script src="${rs}/ti/deps/element-ui/index.js"></script>

  <link rel="stylesheet" href="${rs}/ti/theme/${app.theme}.css">
  <link rel="stylesheet" href="${rs}/ti/deps/md/iconfont/material-icons.css">
  <link rel="stylesheet" href="${rs}/ti/deps/zmdi/css/material-design-iconic-font.css">
  <link rel="stylesheet" href="${rs}/ti/deps/fontawesome/5.7.2-web/css/all.css">
  <link rel="stylesheet" href="${rs}/ti/deps/iconmonstr/css/iconmonstr-iconic-font.css">
  
  <!--link rel="stylesheet" href="${rs}/ti/deps/muse-ui/muse-ui.css">
  <script src="${rs}/ti/deps/muse-ui/muse-ui.js"></script-->
</head>
<!--
  Page Body
-->
<body>
<div id="app" class="app-loading">
  <i class="zmdi zmdi-settings zmdi-hc-spin"></i>
</div>
<pre>${app(json:n)?-obj-}</pre>
<!--
  Main Script
-->
<script type="module">
//---------------------------------------
import {Ti} from "${rs}/ti/core/ti.mjs"
//---------------------------------------
window.__ti_www_app = ${app(json:n)};
//---------------------------------------
Ti.SetForDev(true)
Ti.SetLogLevel("warn")
Ti.SetLogLevel("warn", "TiLoad")
Ti.SetLogLevel("warn", "TiApp")
Ti.SetLogLevel("warn", "TiHttp")
//---------------------------------------
Ti.Install()
Ti.Shortcut.startListening()
Ti.Viewport.startListening()
//---------------------------------------
async function main(){
  // Load Config
  let tiConf = {
    prefix : {
      "Site"  : "${URI_BASE}/${app.name}/",
      "theme" : "${rs}/ti/theme/",
      "lib"   : "${rs}/ti/lib/",
      "deps"  : "${rs}/ti/deps/",
      "mod"   : "${rs}/ti/mod/",
      "com"   : "${rs}/ti/com/",
      "i18n"  : "${rs}/ti/i18n/"
    },
    alias : {
      "^.+[.](css|js|mjs|json|txt|text)$"  : "$&",
      "^\./"          : "@Site:",
      "^@theme:.+$"   : "$&.css",
      "\/?mod\/[^\/]+$"    : "$&/_mod.json",
      "\/?com\/[^\/]+$"    : "$&/_com.json",
      "^@mod:[^.]+$" : "$&/_mod.json",
      "^@com:[^.]+$" : "$&/_com.json",
      "^@i18n:(.+)$"      : "@i18n:zh-cn/$1.i18n.json",
      "^@Site:i18n/(.+)$" : "@Site:i18n/zh-cn/$1.i18n.json"
    },
    lang : "zh-cn"
  }

  // Update Config Setting
  Ti.Config.set(tiConf)

  // Load the com common mixins 
  let comMixins = await Ti.Load("@com:ti/support/com_mixins.mjs")
  Ti.Config.set({
    comDecorator : (com)=>{
      //console.log("++++++Decorator", com.name)
      Ti.Util.pushValue(com, "mixins", comMixins)
    }
  })

  // setup the base i18n
  Ti.I18n.put(await Ti.Load("@i18n:_ti"))

  // Load extend css
  if(tiConf.css) {
    let exCssList = [].concat(tiConf.css)
    for(let css of exCssList) {
      let cssPath = _.template(css)({theme:"${theme}"})
      await Ti.Load(cssPath)
    }
  }

  // Load main app
  let app = await Ti.App(window.__ti_www_app)
  await app.init()

  // Save current app name
  Ti.SetAppName(app.name())

  //---------------------------------------
  Ti.Dom.watchAutoRootFontSize({
    max : 100,
    min : 80,
    callback:({$root, mode, fontSize})=>{
      // console.log(app.name(), app)
      $root.style.fontSize = fontSize + "px"
      $root.setAttribute("as", mode)
      app.commit("page/setMode", mode)
    }
  })

  // Load session and display
  // TODO ! here add www Session:: app.commit("session/set", _app.session)
  app.mountTo("#app")

  // Reload the page data
  await app.dispatch("reload")

  // Return the app
  return app
  
}
//---------------------------------------
main().then(app=>{
  if(Ti.IsInfo("main")) {
    console.log("Page Ready", app)
  }
}).catch(err=>{
  throw err
})
//---------------------------------------
</script>
</body>
</html>