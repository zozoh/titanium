export default {
  ///////////////////////////////////////////
  props: {
    "value": {
      type: Object,
      default: () => ({
        pn: 0,     // Page Number
        pgsz: 0,   // PageSize
        pgc: 0,    // page count
        sum: 0,    // Total
        count: 0   // Record in page
      })
    },
    "valueType": {
      type: String,
      default: "shortName",
      validator: v => /^(short|long)Name$/.test(v)
    }
  },
  ///////////////////////////////////////////
  computed: {
    //--------------------------------------
    PageMapping() {
      // longName shoudl follow the 
      // `org.nutz.walnut.util.WnPagerObj`
      // generated by `WnPager.toPagerObj`
      if ("longName" == this.valueType) {
        return {
          pn: "pageNumber",
          pgsz: "pageSize",
          pgc: "pageCount",
          sum: "totalCount",
          count: "count",
          skip: "skip",
          limit: "limit"
        }
      }
    },
    //--------------------------------------
    PageValue() {
      if (this.PageMapping) {
        return Ti.Util.translate(this.value, this.PageMapping)
      }
      return this.value
    }
    //--------------------------------------
  },
  ///////////////////////////////////////////
  methods: {
    //--------------------------------------
    notifyChange(page = {}) {
      // Guard
      if (_.isEmpty(page))
        return

      if (this.PageMapping) {
        let rever = Ti.Util.reverMapping(this.PageMapping)
        page = Ti.Util.translate(page, rever)
      }

      this.$notify("change", page)
    }
  }
  ///////////////////////////////////////////
}